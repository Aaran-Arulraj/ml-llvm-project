; ModuleID = 'tree-data-ref.c'
source_filename = "tree-data-ref.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.datadep_stats = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.VEC_data_reference_p_heap = type { %struct.VEC_data_reference_p_base }
%struct.VEC_data_reference_p_base = type { i32, i32, [1 x %struct.data_reference*] }
%struct.data_reference = type { %union.gimple_statement_d*, %union.tree_node*, i8*, i8, %struct.innermost_loop_behavior, %struct.indices, %struct.dr_alias, %struct.access_matrix* }
%struct.innermost_loop_behavior = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.indices = type { %union.tree_node*, %struct.VEC_tree_heap* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.dr_alias = type { %struct.ptr_info_def*, %struct.bitmap_head_def* }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.access_matrix = type { %struct.VEC_loop_p_heap*, i32, %struct.VEC_tree_heap*, %struct.VEC_lambda_vector_gc* }
%struct.VEC_loop_p_heap = type { %struct.VEC_loop_p_base }
%struct.VEC_lambda_vector_gc = type { %struct.VEC_lambda_vector_base }
%struct.VEC_lambda_vector_base = type { i32, i32, [1 x i32*] }
%struct.VEC_ddr_p_heap = type { %struct.VEC_ddr_p_base }
%struct.VEC_ddr_p_base = type { i32, i32, [1 x %struct.data_dependence_relation*] }
%struct.data_dependence_relation = type { %struct.data_reference*, %struct.data_reference*, %union.tree_node*, %struct.VEC_subscript_p_heap*, %struct.VEC_loop_p_heap*, %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap*, i32, i8, i8, i8 }
%struct.VEC_subscript_p_heap = type { %struct.VEC_subscript_p_base }
%struct.VEC_subscript_p_base = type { i32, i32, [1 x %struct.subscript*] }
%struct.subscript = type { %struct.conflict_function*, %struct.conflict_function*, %union.tree_node*, %union.tree_node* }
%struct.conflict_function = type { i32, [2 x %struct.VEC_tree_heap*] }
%struct.VEC_lambda_vector_heap = type { %struct.VEC_lambda_vector_base }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.affine_iv = type { %union.tree_node*, %union.tree_node*, i8 }
%struct.VEC_data_ref_loc_heap = type { %struct.VEC_data_ref_loc_base }
%struct.VEC_data_ref_loc_base = type { i32, i32, [1 x %struct.data_ref_loc_d] }
%struct.data_ref_loc_d = type { %union.tree_node**, i8 }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.graph = type { i32, %struct.vertex*, %struct.htab* }
%struct.vertex = type { %struct.graph_edge*, %struct.graph_edge*, i32, i32, i8* }
%struct.graph_edge = type { i32, i32, %struct.graph_edge*, %struct.graph_edge*, i8* }
%struct.rdg_vertex = type { %union.gimple_statement_d*, i8, i8 }
%struct.rdg_vertex_info = type { %union.gimple_statement_d*, i32 }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.omega_pb_d = type { i32, i32, i32, i32, i32, i32, i8, i8, i32*, i32*, %struct.eqn_d*, %struct.eqn_d*, %struct.eqn_d* }
%struct.eqn_d = type { i32, i32, i32, i32* }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.rdg_edge = type { i32, i32, %struct.data_dependence_relation* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [23 x i8] c"#(Data Ref: \0A#  stmt: \00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"#  ref: \00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"#  base_object: \00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"#  Access function %d: \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"#)\0A\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"\0A (subscript \0A\00", align 1
@.str.6 = private unnamed_addr constant [49 x i8] c"  iterations_that_access_an_element_twice_in_A: \00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"  last_conflict: \00", align 1
@.str.8 = private unnamed_addr constant [49 x i8] c"  iterations_that_access_an_element_twice_in_B: \00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"  (Subscript distance: \00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"  )\0A\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c" )\0A\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"    +\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"    -\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"    =\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"   +=\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"   +-\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"   -=\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"    *\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"indep\00", align 1
@.str.20 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.21 = private unnamed_addr constant [13 x i8] c"(Data Dep: \0A\00", align 1
@chrec_dont_know = external dso_local global %union.tree_node*, align 8
@.str.22 = private unnamed_addr constant [11 x i8] c"    (nil)\0A\00", align 1
@.str.23 = private unnamed_addr constant [20 x i8] c"    (don't know)\0A)\0A\00", align 1
@chrec_known = external dso_local global %union.tree_node*, align 8
@.str.24 = private unnamed_addr constant [21 x i8] c"    (no dependence)\0A\00", align 1
@.str.25 = private unnamed_addr constant [16 x i8] c"  access_fn_A: \00", align 1
@.str.26 = private unnamed_addr constant [16 x i8] c"  access_fn_B: \00", align 1
@.str.27 = private unnamed_addr constant [24 x i8] c"  inner loop index: %d\0A\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"  loop nest: (\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.31 = private unnamed_addr constant [20 x i8] c"  distance_vector: \00", align 1
@.str.32 = private unnamed_addr constant [21 x i8] c"  direction_vector: \00", align 1
@.str.33 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.35 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"+-\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"+=\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"-=\00", align 1
@.str.39 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.40 = private unnamed_addr constant [13 x i8] c"DISTANCE_V (\00", align 1
@.str.41 = private unnamed_addr constant [14 x i8] c"DIRECTION_V (\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.43 = private unnamed_addr constant [20 x i8] c"analyze_innermost: \00", align 1
@.str.44 = private unnamed_addr constant [16 x i8] c"tree-data-ref.c\00", align 1
@.str.45 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.46 = private unnamed_addr constant [31 x i8] c"failed: bit offset alignment.\0A\00", align 1
@.str.47 = private unnamed_addr constant [42 x i8] c"failed: evolution of base is not affine.\0A\00", align 1
@.str.48 = private unnamed_addr constant [44 x i8] c"failed: evolution of offset is not affine.\0A\00", align 1
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@.str.49 = private unnamed_addr constant [10 x i8] c"success.\0A\00", align 1
@.str.50 = private unnamed_addr constant [17 x i8] c"Creating dr for \00", align 1
@.str.51 = private unnamed_addr constant [16 x i8] c"\09base_address: \00", align 1
@.str.52 = private unnamed_addr constant [29 x i8] c"\0A\09offset from base address: \00", align 1
@.str.53 = private unnamed_addr constant [38 x i8] c"\0A\09constant offset from base address: \00", align 1
@.str.54 = private unnamed_addr constant [9 x i8] c"\0A\09step: \00", align 1
@.str.55 = private unnamed_addr constant [15 x i8] c"\0A\09aligned to: \00", align 1
@.str.56 = private unnamed_addr constant [16 x i8] c"\0A\09base_object: \00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.57 = private unnamed_addr constant [36 x i8] c"\09FAILED as dr address is invariant\0A\00", align 1
@dependence_stats = internal global %struct.datadep_stats zeroinitializer, align 4, !dbg !0
@.str.58 = private unnamed_addr constant [31 x i8] c"Dependence tester statistics:\0A\00", align 1
@.str.59 = private unnamed_addr constant [32 x i8] c"Number of dependence tests: %d\0A\00", align 1
@.str.60 = private unnamed_addr constant [53 x i8] c"Number of dependence tests classified dependent: %d\0A\00", align 1
@.str.61 = private unnamed_addr constant [55 x i8] c"Number of dependence tests classified independent: %d\0A\00", align 1
@.str.62 = private unnamed_addr constant [45 x i8] c"Number of undetermined dependence tests: %d\0A\00", align 1
@.str.63 = private unnamed_addr constant [31 x i8] c"Number of subscript tests: %d\0A\00", align 1
@.str.64 = private unnamed_addr constant [44 x i8] c"Number of undetermined subscript tests: %d\0A\00", align 1
@.str.65 = private unnamed_addr constant [39 x i8] c"Number of same subscript function: %d\0A\00", align 1
@.str.66 = private unnamed_addr constant [25 x i8] c"Number of ziv tests: %d\0A\00", align 1
@.str.67 = private unnamed_addr constant [45 x i8] c"Number of ziv tests returning dependent: %d\0A\00", align 1
@.str.68 = private unnamed_addr constant [47 x i8] c"Number of ziv tests returning independent: %d\0A\00", align 1
@.str.69 = private unnamed_addr constant [39 x i8] c"Number of ziv tests unimplemented: %d\0A\00", align 1
@.str.70 = private unnamed_addr constant [25 x i8] c"Number of siv tests: %d\0A\00", align 1
@.str.71 = private unnamed_addr constant [45 x i8] c"Number of siv tests returning dependent: %d\0A\00", align 1
@.str.72 = private unnamed_addr constant [47 x i8] c"Number of siv tests returning independent: %d\0A\00", align 1
@.str.73 = private unnamed_addr constant [39 x i8] c"Number of siv tests unimplemented: %d\0A\00", align 1
@.str.74 = private unnamed_addr constant [25 x i8] c"Number of miv tests: %d\0A\00", align 1
@.str.75 = private unnamed_addr constant [45 x i8] c"Number of miv tests returning dependent: %d\0A\00", align 1
@.str.76 = private unnamed_addr constant [47 x i8] c"Number of miv tests returning independent: %d\0A\00", align 1
@.str.77 = private unnamed_addr constant [39 x i8] c"Number of miv tests unimplemented: %d\0A\00", align 1
@.str.78 = private unnamed_addr constant [24 x i8] c"(vertex %d: (%s%s) (in:\00", align 1
@.str.79 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.80 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.81 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.82 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.83 = private unnamed_addr constant [8 x i8] c") (out:\00", align 1
@.str.84 = private unnamed_addr constant [4 x i8] c") \0A\00", align 1
@.str.85 = private unnamed_addr constant [5 x i8] c"(%d\0A\00", align 1
@.str.86 = private unnamed_addr constant [6 x i8] c"(rdg\0A\00", align 1
@.str.87 = private unnamed_addr constant [15 x i8] c"no dependence\0A\00", align 1
@.str.88 = private unnamed_addr constant [11 x i8] c"not known\0A\00", align 1
@.str.89 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.90 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.91 = private unnamed_addr constant [4 x i8] c" + \00", align 1
@.str.92 = private unnamed_addr constant [8 x i8] c" * x_%u\00", align 1
@.str.93 = private unnamed_addr constant [5 x i8] c"%3d \00", align 1
@flag_wrapv = external dso_local global i32, align 4
@flag_trapv = external dso_local global i32, align 4
@flag_strict_overflow = external dso_local global i32, align 4
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.94 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.95 = private unnamed_addr constant [28 x i8] c"(compute_affine_dependence\0A\00", align 1
@.str.96 = private unnamed_addr constant [14 x i8] c"  (stmt_a = \0A\00", align 1
@.str.97 = private unnamed_addr constant [16 x i8] c")\0A  (stmt_b = \0A\00", align 1
@flag_check_data_deps = external dso_local global i32, align 4
@.str.98 = private unnamed_addr constant [21 x i8] c"\0A\0ABanerjee Analyzer\0A\00", align 1
@.str.99 = private unnamed_addr constant [16 x i8] c"Omega Analyzer\0A\00", align 1
@.str.100 = private unnamed_addr constant [13 x i8] c"Data ref a:\0A\00", align 1
@.str.101 = private unnamed_addr constant [13 x i8] c"Data ref b:\0A\00", align 1
@.str.102 = private unnamed_addr constant [76 x i8] c"affine dependence test not usable: access function not affine or constant.\0A\00", align 1
@.str.103 = private unnamed_addr constant [31 x i8] c"(subscript_dependence_tester \0A\00", align 1
@.str.104 = private unnamed_addr constant [34 x i8] c"(analyze_overlapping_iterations \0A\00", align 1
@.str.105 = private unnamed_addr constant [14 x i8] c"  (chrec_a = \00", align 1
@.str.106 = private unnamed_addr constant [16 x i8] c")\0A  (chrec_b = \00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.107 = private unnamed_addr constant [27 x i8] c"  (overlap_iterations_a = \00", align 1
@.str.108 = private unnamed_addr constant [29 x i8] c")\0A  (overlap_iterations_b = \00", align 1
@.str.109 = private unnamed_addr constant [25 x i8] c"(analyze_ziv_subscript \0A\00", align 1
@.str.110 = private unnamed_addr constant [45 x i8] c"ziv test failed: difference is non-integer.\0A\00", align 1
@.str.111 = private unnamed_addr constant [25 x i8] c"(analyze_siv_subscript \0A\00", align 1
@.str.112 = private unnamed_addr constant [33 x i8] c"siv test failed: unimplemented.\0A\00", align 1
@.str.113 = private unnamed_addr constant [41 x i8] c"siv test failed: chrec is not positive.\0A\00", align 1
@.str.114 = private unnamed_addr constant [38 x i8] c"siv test failed: chrec not positive.\0A\00", align 1
@.str.115 = private unnamed_addr constant [35 x i8] c"(analyze_subscript_affine_affine \0A\00", align 1
@.str.116 = private unnamed_addr constant [48 x i8] c"affine-affine test failed: too many variables.\0A\00", align 1
@.str.117 = private unnamed_addr constant [43 x i8] c"affine-affine test failed: unimplemented.\0A\00", align 1
@.str.118 = private unnamed_addr constant [17 x i8] c"  (overlaps_a = \00", align 1
@.str.119 = private unnamed_addr constant [19 x i8] c")\0A  (overlaps_b = \00", align 1
@.str.120 = private unnamed_addr constant [15 x i8] c"./tree-chrec.h\00", align 1
@.str.121 = private unnamed_addr constant [49 x i8] c"overlap steps test failed: no iteration counts.\0A\00", align 1
@.str.122 = private unnamed_addr constant [41 x i8] c"can_use_subscript_aff_aff_for_symbolic \0A\00", align 1
@chrec_not_analyzed_yet = external dso_local global %union.tree_node*, align 8
@.str.123 = private unnamed_addr constant [25 x i8] c"(analyze_miv_subscript \0A\00", align 1
@.str.124 = private unnamed_addr constant [51 x i8] c"analyze_miv_subscript test failed: unimplemented.\0A\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@.str.125 = private unnamed_addr constant [28 x i8] c"(build_classic_dist_vector\0A\00", align 1
@.str.126 = private unnamed_addr constant [18 x i8] c"  dist_vector = (\00", align 1
@.str.127 = private unnamed_addr constant [66 x i8] c"(Dependence relation cannot be represented by distance vector.) \0A\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.128 = private unnamed_addr constant [10 x i8] c"./omega.h\00", align 1
@.str.129 = private unnamed_addr constant [69 x i8] c"\0A(Number of distance vectors differ: Banerjee has %d, Omega has %d.\0A\00", align 1
@.str.130 = private unnamed_addr constant [24 x i8] c"Banerjee dist vectors:\0A\00", align 1
@.str.131 = private unnamed_addr constant [21 x i8] c"Omega dist vectors:\0A\00", align 1
@.str.132 = private unnamed_addr constant [27 x i8] c"data dependence relation:\0A\00", align 1
@.str.133 = private unnamed_addr constant [71 x i8] c"\0A(Number of direction vectors differ: Banerjee has %d, Omega has %d.)\0A\00", align 1
@.str.134 = private unnamed_addr constant [52 x i8] c"\0A(Dist vectors from the first dependence analyzer:\0A\00", align 1
@.str.135 = private unnamed_addr constant [34 x i8] c"not found in Omega dist vectors:\0A\00", align 1
@.str.136 = private unnamed_addr constant [51 x i8] c"\0A(Dir vectors from the first dependence analyzer:\0A\00", align 1
@.str.137 = private unnamed_addr constant [33 x i8] c"not found in Omega dir vectors:\0A\00", align 1
@.str.138 = private unnamed_addr constant [25 x i8] c"(dependence classified: \00", align 1
@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@.str.139 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_data_references(%struct._IO_FILE* %file, %struct.VEC_data_reference_p_heap* %datarefs) #0 !dbg !2390 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap*, align 8
  %i = alloca i32, align 4
  %dr = alloca %struct.data_reference*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2445, metadata !DIExpression()), !dbg !2446
  store %struct.VEC_data_reference_p_heap* %datarefs, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap** %datarefs.addr, metadata !2447, metadata !DIExpression()), !dbg !2448
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2449, metadata !DIExpression()), !dbg !2450
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr, metadata !2451, metadata !DIExpression()), !dbg !2452
  store i32 0, i32* %i, align 4, !dbg !2453
  br label %for.cond, !dbg !2455

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !2456
  %tobool = icmp ne %struct.VEC_data_reference_p_heap* %0, null, !dbg !2456
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2456

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !2456
  %base = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %1, i32 0, i32 0, !dbg !2456
  br label %cond.end, !dbg !2456

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2456

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_reference_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2456
  %2 = load i32, i32* %i, align 4, !dbg !2456
  %call = call i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %cond, i32 %2, %struct.data_reference** %dr), !dbg !2456
  %tobool1 = icmp ne i32 %call, 0, !dbg !2458
  br i1 %tobool1, label %for.body, label %for.end, !dbg !2458

for.body:                                         ; preds = %cond.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2459
  %4 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !2460
  call void @dump_data_reference(%struct._IO_FILE* %3, %struct.data_reference* %4), !dbg !2461
  br label %for.inc, !dbg !2461

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !2462
  %inc = add i32 %5, 1, !dbg !2462
  store i32 %inc, i32* %i, align 4, !dbg !2462
  br label %for.cond, !dbg !2463, !llvm.loop !2464

for.end:                                          ; preds = %cond.end
  ret void, !dbg !2466
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %vec_, i32 %ix_, %struct.data_reference** %ptr) #0 !dbg !2467 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_data_reference_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.data_reference**, align 8
  store %struct.VEC_data_reference_p_base* %vec_, %struct.VEC_data_reference_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_base** %vec_.addr, metadata !2473, metadata !DIExpression()), !dbg !2474
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2475, metadata !DIExpression()), !dbg !2474
  store %struct.data_reference** %ptr, %struct.data_reference*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference*** %ptr.addr, metadata !2476, metadata !DIExpression()), !dbg !2474
  %0 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !2477
  %tobool = icmp ne %struct.VEC_data_reference_p_base* %0, null, !dbg !2477
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2477

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2477
  %2 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !2477
  %num = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %2, i32 0, i32 0, !dbg !2477
  %3 = load i32, i32* %num, align 8, !dbg !2477
  %cmp = icmp ult i32 %1, %3, !dbg !2477
  br i1 %cmp, label %if.then, label %if.else, !dbg !2474

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !2479
  %vec = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %4, i32 0, i32 2, !dbg !2479
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !2479
  %idxprom = zext i32 %5 to i64, !dbg !2479
  %arrayidx = getelementptr inbounds [1 x %struct.data_reference*], [1 x %struct.data_reference*]* %vec, i64 0, i64 %idxprom, !dbg !2479
  %6 = load %struct.data_reference*, %struct.data_reference** %arrayidx, align 8, !dbg !2479
  %7 = load %struct.data_reference**, %struct.data_reference*** %ptr.addr, align 8, !dbg !2479
  store %struct.data_reference* %6, %struct.data_reference** %7, align 8, !dbg !2479
  store i32 1, i32* %retval, align 4, !dbg !2479
  br label %return, !dbg !2479

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.data_reference**, %struct.data_reference*** %ptr.addr, align 8, !dbg !2481
  store %struct.data_reference* null, %struct.data_reference** %8, align 8, !dbg !2481
  store i32 0, i32* %retval, align 4, !dbg !2481
  br label %return, !dbg !2481

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2474
  ret i32 %9, !dbg !2474
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_data_reference(%struct._IO_FILE* %outf, %struct.data_reference* %dr) #0 !dbg !2483 {
entry:
  %outf.addr = alloca %struct._IO_FILE*, align 8
  %dr.addr = alloca %struct.data_reference*, align 8
  %i = alloca i32, align 4
  store %struct._IO_FILE* %outf, %struct._IO_FILE** %outf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outf.addr, metadata !2486, metadata !DIExpression()), !dbg !2487
  store %struct.data_reference* %dr, %struct.data_reference** %dr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr.addr, metadata !2488, metadata !DIExpression()), !dbg !2489
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2490, metadata !DIExpression()), !dbg !2491
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2492
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0)), !dbg !2493
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2494
  %2 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !2495
  %stmt = getelementptr inbounds %struct.data_reference, %struct.data_reference* %2, i32 0, i32 0, !dbg !2495
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2495
  call void @print_gimple_stmt(%struct._IO_FILE* %1, %union.gimple_statement_d* %3, i32 0, i32 0), !dbg !2496
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2497
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !2498
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2499
  %6 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !2500
  %ref = getelementptr inbounds %struct.data_reference, %struct.data_reference* %6, i32 0, i32 1, !dbg !2500
  %7 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !2500
  call void @print_generic_stmt(%struct._IO_FILE* %5, %union.tree_node* %7, i32 0), !dbg !2501
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2502
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0)), !dbg !2503
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2504
  %10 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !2505
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %10, i32 0, i32 5, !dbg !2505
  %base_object = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 0, !dbg !2505
  %11 = load %union.tree_node*, %union.tree_node** %base_object, align 8, !dbg !2505
  call void @print_generic_stmt(%struct._IO_FILE* %9, %union.tree_node* %11, i32 0), !dbg !2506
  store i32 0, i32* %i, align 4, !dbg !2507
  br label %for.cond, !dbg !2509

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load i32, i32* %i, align 4, !dbg !2510
  %13 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !2512
  %indices3 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %13, i32 0, i32 5, !dbg !2512
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices3, i32 0, i32 1, !dbg !2512
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !2512
  %tobool = icmp ne %struct.VEC_tree_heap* %14, null, !dbg !2512
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2512

cond.true:                                        ; preds = %for.cond
  %15 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !2512
  %indices4 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %15, i32 0, i32 5, !dbg !2512
  %access_fns5 = getelementptr inbounds %struct.indices, %struct.indices* %indices4, i32 0, i32 1, !dbg !2512
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns5, align 8, !dbg !2512
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %16, i32 0, i32 0, !dbg !2512
  br label %cond.end, !dbg !2512

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2512

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2512
  %call6 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !2512
  %cmp = icmp ult i32 %12, %call6, !dbg !2513
  br i1 %cmp, label %for.body, label %for.end, !dbg !2514

for.body:                                         ; preds = %cond.end
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2515
  %18 = load i32, i32* %i, align 4, !dbg !2517
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i32 %18), !dbg !2518
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2519
  %20 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !2520
  %indices8 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %20, i32 0, i32 5, !dbg !2520
  %access_fns9 = getelementptr inbounds %struct.indices, %struct.indices* %indices8, i32 0, i32 1, !dbg !2520
  %21 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns9, align 8, !dbg !2520
  %tobool10 = icmp ne %struct.VEC_tree_heap* %21, null, !dbg !2520
  br i1 %tobool10, label %cond.true11, label %cond.false15, !dbg !2520

cond.true11:                                      ; preds = %for.body
  %22 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !2520
  %indices12 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %22, i32 0, i32 5, !dbg !2520
  %access_fns13 = getelementptr inbounds %struct.indices, %struct.indices* %indices12, i32 0, i32 1, !dbg !2520
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns13, align 8, !dbg !2520
  %base14 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %23, i32 0, i32 0, !dbg !2520
  br label %cond.end16, !dbg !2520

cond.false15:                                     ; preds = %for.body
  br label %cond.end16, !dbg !2520

cond.end16:                                       ; preds = %cond.false15, %cond.true11
  %cond17 = phi %struct.VEC_tree_base* [ %base14, %cond.true11 ], [ null, %cond.false15 ], !dbg !2520
  %24 = load i32, i32* %i, align 4, !dbg !2520
  %call18 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond17, i32 %24), !dbg !2520
  call void @print_generic_stmt(%struct._IO_FILE* %19, %union.tree_node* %call18, i32 0), !dbg !2521
  br label %for.inc, !dbg !2522

for.inc:                                          ; preds = %cond.end16
  %25 = load i32, i32* %i, align 4, !dbg !2523
  %inc = add i32 %25, 1, !dbg !2523
  store i32 %inc, i32* %i, align 4, !dbg !2523
  br label %for.cond, !dbg !2524, !llvm.loop !2525

for.end:                                          ; preds = %cond.end
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2527
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0)), !dbg !2528
  ret void, !dbg !2529
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_data_references(%struct.VEC_data_reference_p_heap* %datarefs) #0 !dbg !2530 {
entry:
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap*, align 8
  store %struct.VEC_data_reference_p_heap* %datarefs, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap** %datarefs.addr, metadata !2533, metadata !DIExpression()), !dbg !2534
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2535
  %1 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !2536
  call void @dump_data_references(%struct._IO_FILE* %0, %struct.VEC_data_reference_p_heap* %1), !dbg !2537
  ret void, !dbg !2538
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_data_dependence_relations(%struct.VEC_ddr_p_heap* %ddrs) #0 !dbg !2539 {
entry:
  %ddrs.addr = alloca %struct.VEC_ddr_p_heap*, align 8
  store %struct.VEC_ddr_p_heap* %ddrs, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %ddrs.addr, metadata !2542, metadata !DIExpression()), !dbg !2543
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2544
  %1 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8, !dbg !2545
  call void @dump_data_dependence_relations(%struct._IO_FILE* %0, %struct.VEC_ddr_p_heap* %1), !dbg !2546
  ret void, !dbg !2547
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_data_dependence_relations(%struct._IO_FILE* %file, %struct.VEC_ddr_p_heap* %ddrs) #0 !dbg !2548 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %ddrs.addr = alloca %struct.VEC_ddr_p_heap*, align 8
  %i = alloca i32, align 4
  %ddr = alloca %struct.data_dependence_relation*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2551, metadata !DIExpression()), !dbg !2552
  store %struct.VEC_ddr_p_heap* %ddrs, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %ddrs.addr, metadata !2553, metadata !DIExpression()), !dbg !2554
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2555, metadata !DIExpression()), !dbg !2556
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr, metadata !2557, metadata !DIExpression()), !dbg !2558
  store i32 0, i32* %i, align 4, !dbg !2559
  br label %for.cond, !dbg !2561

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8, !dbg !2562
  %tobool = icmp ne %struct.VEC_ddr_p_heap* %0, null, !dbg !2562
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2562

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8, !dbg !2562
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %1, i32 0, i32 0, !dbg !2562
  br label %cond.end, !dbg !2562

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2562

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ddr_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2562
  %2 = load i32, i32* %i, align 4, !dbg !2562
  %call = call i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %cond, i32 %2, %struct.data_dependence_relation** %ddr), !dbg !2562
  %tobool1 = icmp ne i32 %call, 0, !dbg !2564
  br i1 %tobool1, label %for.body, label %for.end, !dbg !2564

for.body:                                         ; preds = %cond.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2565
  %4 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !2566
  call void @dump_data_dependence_relation(%struct._IO_FILE* %3, %struct.data_dependence_relation* %4), !dbg !2567
  br label %for.inc, !dbg !2567

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !2568
  %inc = add i32 %5, 1, !dbg !2568
  store i32 %inc, i32* %i, align 4, !dbg !2568
  br label %for.cond, !dbg !2569, !llvm.loop !2570

for.end:                                          ; preds = %cond.end
  ret void, !dbg !2572
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %vec_, i32 %ix_, %struct.data_dependence_relation** %ptr) #0 !dbg !2573 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_ddr_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.data_dependence_relation**, align 8
  store %struct.VEC_ddr_p_base* %vec_, %struct.VEC_ddr_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_base** %vec_.addr, metadata !2579, metadata !DIExpression()), !dbg !2580
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2581, metadata !DIExpression()), !dbg !2580
  store %struct.data_dependence_relation** %ptr, %struct.data_dependence_relation*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation*** %ptr.addr, metadata !2582, metadata !DIExpression()), !dbg !2580
  %0 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !2583
  %tobool = icmp ne %struct.VEC_ddr_p_base* %0, null, !dbg !2583
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2583

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2583
  %2 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !2583
  %num = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %2, i32 0, i32 0, !dbg !2583
  %3 = load i32, i32* %num, align 8, !dbg !2583
  %cmp = icmp ult i32 %1, %3, !dbg !2583
  br i1 %cmp, label %if.then, label %if.else, !dbg !2580

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !2585
  %vec = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %4, i32 0, i32 2, !dbg !2585
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !2585
  %idxprom = zext i32 %5 to i64, !dbg !2585
  %arrayidx = getelementptr inbounds [1 x %struct.data_dependence_relation*], [1 x %struct.data_dependence_relation*]* %vec, i64 0, i64 %idxprom, !dbg !2585
  %6 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %arrayidx, align 8, !dbg !2585
  %7 = load %struct.data_dependence_relation**, %struct.data_dependence_relation*** %ptr.addr, align 8, !dbg !2585
  store %struct.data_dependence_relation* %6, %struct.data_dependence_relation** %7, align 8, !dbg !2585
  store i32 1, i32* %retval, align 4, !dbg !2585
  br label %return, !dbg !2585

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.data_dependence_relation**, %struct.data_dependence_relation*** %ptr.addr, align 8, !dbg !2587
  store %struct.data_dependence_relation* null, %struct.data_dependence_relation** %8, align 8, !dbg !2587
  store i32 0, i32* %retval, align 4, !dbg !2587
  br label %return, !dbg !2587

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2580
  ret i32 %9, !dbg !2580
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_data_dependence_relation(%struct._IO_FILE* %outf, %struct.data_dependence_relation* %ddr) #0 !dbg !2589 {
entry:
  %outf.addr = alloca %struct._IO_FILE*, align 8
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %dra = alloca %struct.data_reference*, align 8
  %drb = alloca %struct.data_reference*, align 8
  %i = alloca i32, align 4
  %loopi = alloca %struct.loop*, align 8
  store %struct._IO_FILE* %outf, %struct._IO_FILE** %outf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outf.addr, metadata !2592, metadata !DIExpression()), !dbg !2593
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !2594, metadata !DIExpression()), !dbg !2595
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dra, metadata !2596, metadata !DIExpression()), !dbg !2597
  call void @llvm.dbg.declare(metadata %struct.data_reference** %drb, metadata !2598, metadata !DIExpression()), !dbg !2599
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2600
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i64 0, i64 0)), !dbg !2601
  %1 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2602
  %tobool = icmp ne %struct.data_dependence_relation* %1, null, !dbg !2602
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2604

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2605
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 2, !dbg !2605
  %3 = load %union.tree_node*, %union.tree_node** %are_dependent, align 8, !dbg !2605
  %4 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !2606
  %cmp = icmp eq %union.tree_node* %3, %4, !dbg !2607
  br i1 %cmp, label %if.then, label %if.end13, !dbg !2608

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2609
  %tobool1 = icmp ne %struct.data_dependence_relation* %5, null, !dbg !2609
  br i1 %tobool1, label %if.then2, label %if.end11, !dbg !2612

if.then2:                                         ; preds = %if.then
  %6 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2613
  %a = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %6, i32 0, i32 0, !dbg !2613
  %7 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !2613
  store %struct.data_reference* %7, %struct.data_reference** %dra, align 8, !dbg !2615
  %8 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2616
  %b = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %8, i32 0, i32 1, !dbg !2616
  %9 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !2616
  store %struct.data_reference* %9, %struct.data_reference** %drb, align 8, !dbg !2617
  %10 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !2618
  %tobool3 = icmp ne %struct.data_reference* %10, null, !dbg !2618
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !2620

if.then4:                                         ; preds = %if.then2
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2621
  %12 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !2622
  call void @dump_data_reference(%struct._IO_FILE* %11, %struct.data_reference* %12), !dbg !2623
  br label %if.end, !dbg !2623

if.else:                                          ; preds = %if.then2
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2624
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0)), !dbg !2625
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  %14 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !2626
  %tobool6 = icmp ne %struct.data_reference* %14, null, !dbg !2626
  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !2628

if.then7:                                         ; preds = %if.end
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2629
  %16 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !2630
  call void @dump_data_reference(%struct._IO_FILE* %15, %struct.data_reference* %16), !dbg !2631
  br label %if.end10, !dbg !2631

if.else8:                                         ; preds = %if.end
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2632
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0)), !dbg !2633
  br label %if.end10

if.end10:                                         ; preds = %if.else8, %if.then7
  br label %if.end11, !dbg !2634

if.end11:                                         ; preds = %if.end10, %if.then
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2635
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.23, i64 0, i64 0)), !dbg !2636
  br label %return, !dbg !2637

if.end13:                                         ; preds = %lor.lhs.false
  %19 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2638
  %a14 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %19, i32 0, i32 0, !dbg !2638
  %20 = load %struct.data_reference*, %struct.data_reference** %a14, align 8, !dbg !2638
  store %struct.data_reference* %20, %struct.data_reference** %dra, align 8, !dbg !2639
  %21 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2640
  %b15 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %21, i32 0, i32 1, !dbg !2640
  %22 = load %struct.data_reference*, %struct.data_reference** %b15, align 8, !dbg !2640
  store %struct.data_reference* %22, %struct.data_reference** %drb, align 8, !dbg !2641
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2642
  %24 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !2643
  call void @dump_data_reference(%struct._IO_FILE* %23, %struct.data_reference* %24), !dbg !2644
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2645
  %26 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !2646
  call void @dump_data_reference(%struct._IO_FILE* %25, %struct.data_reference* %26), !dbg !2647
  %27 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2648
  %are_dependent16 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %27, i32 0, i32 2, !dbg !2648
  %28 = load %union.tree_node*, %union.tree_node** %are_dependent16, align 8, !dbg !2648
  %29 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !2650
  %cmp17 = icmp eq %union.tree_node* %28, %29, !dbg !2651
  br i1 %cmp17, label %if.then18, label %if.else20, !dbg !2652

if.then18:                                        ; preds = %if.end13
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2653
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.24, i64 0, i64 0)), !dbg !2654
  br label %if.end144, !dbg !2654

if.else20:                                        ; preds = %if.end13
  %31 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2655
  %are_dependent21 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %31, i32 0, i32 2, !dbg !2655
  %32 = load %union.tree_node*, %union.tree_node** %are_dependent21, align 8, !dbg !2655
  %cmp22 = icmp eq %union.tree_node* %32, null, !dbg !2657
  br i1 %cmp22, label %if.then23, label %if.end143, !dbg !2658

if.then23:                                        ; preds = %if.else20
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2659, metadata !DIExpression()), !dbg !2661
  call void @llvm.dbg.declare(metadata %struct.loop** %loopi, metadata !2662, metadata !DIExpression()), !dbg !2663
  store i32 0, i32* %i, align 4, !dbg !2664
  br label %for.cond, !dbg !2666

for.cond:                                         ; preds = %for.inc, %if.then23
  %33 = load i32, i32* %i, align 4, !dbg !2667
  %34 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2669
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %34, i32 0, i32 3, !dbg !2669
  %35 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !2669
  %tobool24 = icmp ne %struct.VEC_subscript_p_heap* %35, null, !dbg !2669
  br i1 %tobool24, label %cond.true, label %cond.false, !dbg !2669

cond.true:                                        ; preds = %for.cond
  %36 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2669
  %subscripts25 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %36, i32 0, i32 3, !dbg !2669
  %37 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts25, align 8, !dbg !2669
  %base = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %37, i32 0, i32 0, !dbg !2669
  br label %cond.end, !dbg !2669

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2669

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_subscript_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2669
  %call26 = call i32 @VEC_subscript_p_base_length(%struct.VEC_subscript_p_base* %cond), !dbg !2669
  %cmp27 = icmp ult i32 %33, %call26, !dbg !2670
  br i1 %cmp27, label %for.body, label %for.end, !dbg !2671

for.body:                                         ; preds = %cond.end
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2672
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.25, i64 0, i64 0)), !dbg !2674
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2675
  %40 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !2676
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %40, i32 0, i32 5, !dbg !2676
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !2676
  %41 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !2676
  %tobool29 = icmp ne %struct.VEC_tree_heap* %41, null, !dbg !2676
  br i1 %tobool29, label %cond.true30, label %cond.false34, !dbg !2676

cond.true30:                                      ; preds = %for.body
  %42 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !2676
  %indices31 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %42, i32 0, i32 5, !dbg !2676
  %access_fns32 = getelementptr inbounds %struct.indices, %struct.indices* %indices31, i32 0, i32 1, !dbg !2676
  %43 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns32, align 8, !dbg !2676
  %base33 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %43, i32 0, i32 0, !dbg !2676
  br label %cond.end35, !dbg !2676

cond.false34:                                     ; preds = %for.body
  br label %cond.end35, !dbg !2676

cond.end35:                                       ; preds = %cond.false34, %cond.true30
  %cond36 = phi %struct.VEC_tree_base* [ %base33, %cond.true30 ], [ null, %cond.false34 ], !dbg !2676
  %44 = load i32, i32* %i, align 4, !dbg !2676
  %call37 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond36, i32 %44), !dbg !2676
  call void @print_generic_stmt(%struct._IO_FILE* %39, %union.tree_node* %call37, i32 0), !dbg !2677
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2678
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.26, i64 0, i64 0)), !dbg !2679
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2680
  %47 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !2681
  %indices39 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %47, i32 0, i32 5, !dbg !2681
  %access_fns40 = getelementptr inbounds %struct.indices, %struct.indices* %indices39, i32 0, i32 1, !dbg !2681
  %48 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns40, align 8, !dbg !2681
  %tobool41 = icmp ne %struct.VEC_tree_heap* %48, null, !dbg !2681
  br i1 %tobool41, label %cond.true42, label %cond.false46, !dbg !2681

cond.true42:                                      ; preds = %cond.end35
  %49 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !2681
  %indices43 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %49, i32 0, i32 5, !dbg !2681
  %access_fns44 = getelementptr inbounds %struct.indices, %struct.indices* %indices43, i32 0, i32 1, !dbg !2681
  %50 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns44, align 8, !dbg !2681
  %base45 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %50, i32 0, i32 0, !dbg !2681
  br label %cond.end47, !dbg !2681

cond.false46:                                     ; preds = %cond.end35
  br label %cond.end47, !dbg !2681

cond.end47:                                       ; preds = %cond.false46, %cond.true42
  %cond48 = phi %struct.VEC_tree_base* [ %base45, %cond.true42 ], [ null, %cond.false46 ], !dbg !2681
  %51 = load i32, i32* %i, align 4, !dbg !2681
  %call49 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond48, i32 %51), !dbg !2681
  call void @print_generic_stmt(%struct._IO_FILE* %46, %union.tree_node* %call49, i32 0), !dbg !2682
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2683
  %53 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2684
  %subscripts50 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %53, i32 0, i32 3, !dbg !2684
  %54 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts50, align 8, !dbg !2684
  %tobool51 = icmp ne %struct.VEC_subscript_p_heap* %54, null, !dbg !2684
  br i1 %tobool51, label %cond.true52, label %cond.false55, !dbg !2684

cond.true52:                                      ; preds = %cond.end47
  %55 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2684
  %subscripts53 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %55, i32 0, i32 3, !dbg !2684
  %56 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts53, align 8, !dbg !2684
  %base54 = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %56, i32 0, i32 0, !dbg !2684
  br label %cond.end56, !dbg !2684

cond.false55:                                     ; preds = %cond.end47
  br label %cond.end56, !dbg !2684

cond.end56:                                       ; preds = %cond.false55, %cond.true52
  %cond57 = phi %struct.VEC_subscript_p_base* [ %base54, %cond.true52 ], [ null, %cond.false55 ], !dbg !2684
  %57 = load i32, i32* %i, align 4, !dbg !2684
  %call58 = call %struct.subscript* @VEC_subscript_p_base_index(%struct.VEC_subscript_p_base* %cond57, i32 %57), !dbg !2684
  call void @dump_subscript(%struct._IO_FILE* %52, %struct.subscript* %call58), !dbg !2685
  br label %for.inc, !dbg !2686

for.inc:                                          ; preds = %cond.end56
  %58 = load i32, i32* %i, align 4, !dbg !2687
  %inc = add i32 %58, 1, !dbg !2687
  store i32 %inc, i32* %i, align 4, !dbg !2687
  br label %for.cond, !dbg !2688, !llvm.loop !2689

for.end:                                          ; preds = %cond.end
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2691
  %60 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2692
  %inner_loop = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %60, i32 0, i32 7, !dbg !2692
  %61 = load i32, i32* %inner_loop, align 8, !dbg !2692
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.27, i64 0, i64 0), i32 %61), !dbg !2693
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2694
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)), !dbg !2695
  store i32 0, i32* %i, align 4, !dbg !2696
  br label %for.cond61, !dbg !2698

for.cond61:                                       ; preds = %for.inc73, %for.end
  %63 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2699
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %63, i32 0, i32 4, !dbg !2699
  %64 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !2699
  %tobool62 = icmp ne %struct.VEC_loop_p_heap* %64, null, !dbg !2699
  br i1 %tobool62, label %cond.true63, label %cond.false66, !dbg !2699

cond.true63:                                      ; preds = %for.cond61
  %65 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2699
  %loop_nest64 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %65, i32 0, i32 4, !dbg !2699
  %66 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest64, align 8, !dbg !2699
  %base65 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %66, i32 0, i32 0, !dbg !2699
  br label %cond.end67, !dbg !2699

cond.false66:                                     ; preds = %for.cond61
  br label %cond.end67, !dbg !2699

cond.end67:                                       ; preds = %cond.false66, %cond.true63
  %cond68 = phi %struct.VEC_loop_p_base* [ %base65, %cond.true63 ], [ null, %cond.false66 ], !dbg !2699
  %67 = load i32, i32* %i, align 4, !dbg !2699
  %call69 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond68, i32 %67, %struct.loop** %loopi), !dbg !2699
  %tobool70 = icmp ne i32 %call69, 0, !dbg !2701
  br i1 %tobool70, label %for.body71, label %for.end75, !dbg !2701

for.body71:                                       ; preds = %cond.end67
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2702
  %69 = load %struct.loop*, %struct.loop** %loopi, align 8, !dbg !2703
  %num = getelementptr inbounds %struct.loop, %struct.loop* %69, i32 0, i32 0, !dbg !2704
  %70 = load i32, i32* %num, align 8, !dbg !2704
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i64 0, i64 0), i32 %70), !dbg !2705
  br label %for.inc73, !dbg !2705

for.inc73:                                        ; preds = %for.body71
  %71 = load i32, i32* %i, align 4, !dbg !2706
  %inc74 = add i32 %71, 1, !dbg !2706
  store i32 %inc74, i32* %i, align 4, !dbg !2706
  br label %for.cond61, !dbg !2707, !llvm.loop !2708

for.end75:                                        ; preds = %cond.end67
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2710
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !2711
  store i32 0, i32* %i, align 4, !dbg !2712
  br label %for.cond77, !dbg !2714

for.cond77:                                       ; preds = %for.inc107, %for.end75
  %73 = load i32, i32* %i, align 4, !dbg !2715
  %74 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2717
  %dist_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %74, i32 0, i32 6, !dbg !2717
  %75 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects, align 8, !dbg !2717
  %tobool78 = icmp ne %struct.VEC_lambda_vector_heap* %75, null, !dbg !2717
  br i1 %tobool78, label %cond.true79, label %cond.false82, !dbg !2717

cond.true79:                                      ; preds = %for.cond77
  %76 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2717
  %dist_vects80 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %76, i32 0, i32 6, !dbg !2717
  %77 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects80, align 8, !dbg !2717
  %base81 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %77, i32 0, i32 0, !dbg !2717
  br label %cond.end83, !dbg !2717

cond.false82:                                     ; preds = %for.cond77
  br label %cond.end83, !dbg !2717

cond.end83:                                       ; preds = %cond.false82, %cond.true79
  %cond84 = phi %struct.VEC_lambda_vector_base* [ %base81, %cond.true79 ], [ null, %cond.false82 ], !dbg !2717
  %call85 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond84), !dbg !2717
  %cmp86 = icmp ult i32 %73, %call85, !dbg !2718
  br i1 %cmp86, label %for.body87, label %for.end109, !dbg !2719

for.body87:                                       ; preds = %cond.end83
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2720
  %call88 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %78, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.31, i64 0, i64 0)), !dbg !2722
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2723
  %80 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2724
  %dist_vects89 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %80, i32 0, i32 6, !dbg !2724
  %81 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects89, align 8, !dbg !2724
  %tobool90 = icmp ne %struct.VEC_lambda_vector_heap* %81, null, !dbg !2724
  br i1 %tobool90, label %cond.true91, label %cond.false94, !dbg !2724

cond.true91:                                      ; preds = %for.body87
  %82 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2724
  %dist_vects92 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %82, i32 0, i32 6, !dbg !2724
  %83 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects92, align 8, !dbg !2724
  %base93 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %83, i32 0, i32 0, !dbg !2724
  br label %cond.end95, !dbg !2724

cond.false94:                                     ; preds = %for.body87
  br label %cond.end95, !dbg !2724

cond.end95:                                       ; preds = %cond.false94, %cond.true91
  %cond96 = phi %struct.VEC_lambda_vector_base* [ %base93, %cond.true91 ], [ null, %cond.false94 ], !dbg !2724
  %84 = load i32, i32* %i, align 4, !dbg !2724
  %call97 = call i32* @VEC_lambda_vector_base_index(%struct.VEC_lambda_vector_base* %cond96, i32 %84), !dbg !2724
  %85 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2725
  %loop_nest98 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %85, i32 0, i32 4, !dbg !2725
  %86 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest98, align 8, !dbg !2725
  %tobool99 = icmp ne %struct.VEC_loop_p_heap* %86, null, !dbg !2725
  br i1 %tobool99, label %cond.true100, label %cond.false103, !dbg !2725

cond.true100:                                     ; preds = %cond.end95
  %87 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2725
  %loop_nest101 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %87, i32 0, i32 4, !dbg !2725
  %88 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest101, align 8, !dbg !2725
  %base102 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %88, i32 0, i32 0, !dbg !2725
  br label %cond.end104, !dbg !2725

cond.false103:                                    ; preds = %cond.end95
  br label %cond.end104, !dbg !2725

cond.end104:                                      ; preds = %cond.false103, %cond.true100
  %cond105 = phi %struct.VEC_loop_p_base* [ %base102, %cond.true100 ], [ null, %cond.false103 ], !dbg !2725
  %call106 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond105), !dbg !2725
  call void @print_lambda_vector(%struct._IO_FILE* %79, i32* %call97, i32 %call106), !dbg !2726
  br label %for.inc107, !dbg !2727

for.inc107:                                       ; preds = %cond.end104
  %89 = load i32, i32* %i, align 4, !dbg !2728
  %inc108 = add i32 %89, 1, !dbg !2728
  store i32 %inc108, i32* %i, align 4, !dbg !2728
  br label %for.cond77, !dbg !2729, !llvm.loop !2730

for.end109:                                       ; preds = %cond.end83
  store i32 0, i32* %i, align 4, !dbg !2732
  br label %for.cond110, !dbg !2734

for.cond110:                                      ; preds = %for.inc140, %for.end109
  %90 = load i32, i32* %i, align 4, !dbg !2735
  %91 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2737
  %dir_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %91, i32 0, i32 5, !dbg !2737
  %92 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects, align 8, !dbg !2737
  %tobool111 = icmp ne %struct.VEC_lambda_vector_heap* %92, null, !dbg !2737
  br i1 %tobool111, label %cond.true112, label %cond.false115, !dbg !2737

cond.true112:                                     ; preds = %for.cond110
  %93 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2737
  %dir_vects113 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %93, i32 0, i32 5, !dbg !2737
  %94 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects113, align 8, !dbg !2737
  %base114 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %94, i32 0, i32 0, !dbg !2737
  br label %cond.end116, !dbg !2737

cond.false115:                                    ; preds = %for.cond110
  br label %cond.end116, !dbg !2737

cond.end116:                                      ; preds = %cond.false115, %cond.true112
  %cond117 = phi %struct.VEC_lambda_vector_base* [ %base114, %cond.true112 ], [ null, %cond.false115 ], !dbg !2737
  %call118 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond117), !dbg !2737
  %cmp119 = icmp ult i32 %90, %call118, !dbg !2738
  br i1 %cmp119, label %for.body120, label %for.end142, !dbg !2739

for.body120:                                      ; preds = %cond.end116
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2740
  %call121 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %95, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i64 0, i64 0)), !dbg !2742
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2743
  %97 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2744
  %dir_vects122 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %97, i32 0, i32 5, !dbg !2744
  %98 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects122, align 8, !dbg !2744
  %tobool123 = icmp ne %struct.VEC_lambda_vector_heap* %98, null, !dbg !2744
  br i1 %tobool123, label %cond.true124, label %cond.false127, !dbg !2744

cond.true124:                                     ; preds = %for.body120
  %99 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2744
  %dir_vects125 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %99, i32 0, i32 5, !dbg !2744
  %100 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects125, align 8, !dbg !2744
  %base126 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %100, i32 0, i32 0, !dbg !2744
  br label %cond.end128, !dbg !2744

cond.false127:                                    ; preds = %for.body120
  br label %cond.end128, !dbg !2744

cond.end128:                                      ; preds = %cond.false127, %cond.true124
  %cond129 = phi %struct.VEC_lambda_vector_base* [ %base126, %cond.true124 ], [ null, %cond.false127 ], !dbg !2744
  %101 = load i32, i32* %i, align 4, !dbg !2744
  %call130 = call i32* @VEC_lambda_vector_base_index(%struct.VEC_lambda_vector_base* %cond129, i32 %101), !dbg !2744
  %102 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2745
  %loop_nest131 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %102, i32 0, i32 4, !dbg !2745
  %103 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest131, align 8, !dbg !2745
  %tobool132 = icmp ne %struct.VEC_loop_p_heap* %103, null, !dbg !2745
  br i1 %tobool132, label %cond.true133, label %cond.false136, !dbg !2745

cond.true133:                                     ; preds = %cond.end128
  %104 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !2745
  %loop_nest134 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %104, i32 0, i32 4, !dbg !2745
  %105 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest134, align 8, !dbg !2745
  %base135 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %105, i32 0, i32 0, !dbg !2745
  br label %cond.end137, !dbg !2745

cond.false136:                                    ; preds = %cond.end128
  br label %cond.end137, !dbg !2745

cond.end137:                                      ; preds = %cond.false136, %cond.true133
  %cond138 = phi %struct.VEC_loop_p_base* [ %base135, %cond.true133 ], [ null, %cond.false136 ], !dbg !2745
  %call139 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond138), !dbg !2745
  call void @print_direction_vector(%struct._IO_FILE* %96, i32* %call130, i32 %call139), !dbg !2746
  br label %for.inc140, !dbg !2747

for.inc140:                                       ; preds = %cond.end137
  %106 = load i32, i32* %i, align 4, !dbg !2748
  %inc141 = add i32 %106, 1, !dbg !2748
  store i32 %inc141, i32* %i, align 4, !dbg !2748
  br label %for.cond110, !dbg !2749, !llvm.loop !2750

for.end142:                                       ; preds = %cond.end116
  br label %if.end143, !dbg !2752

if.end143:                                        ; preds = %for.end142, %if.else20
  br label %if.end144

if.end144:                                        ; preds = %if.end143, %if.then18
  %107 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2753
  %call145 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !2754
  br label %return, !dbg !2755

return:                                           ; preds = %if.end144, %if.end11
  ret void, !dbg !2755
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_data_reference(%struct.data_reference* %dr) #0 !dbg !2756 {
entry:
  %dr.addr = alloca %struct.data_reference*, align 8
  store %struct.data_reference* %dr, %struct.data_reference** %dr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr.addr, metadata !2759, metadata !DIExpression()), !dbg !2760
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2761
  %1 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !2762
  call void @dump_data_reference(%struct._IO_FILE* %0, %struct.data_reference* %1), !dbg !2763
  ret void, !dbg !2764
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

declare dso_local void @print_generic_stmt(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !2765 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !2770, metadata !DIExpression()), !dbg !2771
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2771
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !2771
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2771

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2771
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !2771
  %2 = load i32, i32* %num, align 8, !dbg !2771
  br label %cond.end, !dbg !2771

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2771

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2771
  ret i32 %cond, !dbg !2771
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !2772 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !2775, metadata !DIExpression()), !dbg !2776
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2777, metadata !DIExpression()), !dbg !2776
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2776
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !2776
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2776

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2776
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2776
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !2776
  %3 = load i32, i32* %num, align 8, !dbg !2776
  %cmp = icmp ult i32 %1, %3, !dbg !2776
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !2778
  %land.ext = zext i1 %4 to i32, !dbg !2776
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2776
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !2776
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !2776
  %idxprom = zext i32 %6 to i64, !dbg !2776
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !2776
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !2776
  ret %union.tree_node* %7, !dbg !2776
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_subscript(%struct._IO_FILE* %outf, %struct.subscript* %subscript) #0 !dbg !2779 {
entry:
  %outf.addr = alloca %struct._IO_FILE*, align 8
  %subscript.addr = alloca %struct.subscript*, align 8
  %cf = alloca %struct.conflict_function*, align 8
  %last_iteration = alloca %union.tree_node*, align 8
  %last_iteration12 = alloca %union.tree_node*, align 8
  store %struct._IO_FILE* %outf, %struct._IO_FILE** %outf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outf.addr, metadata !2782, metadata !DIExpression()), !dbg !2783
  store %struct.subscript* %subscript, %struct.subscript** %subscript.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.subscript** %subscript.addr, metadata !2784, metadata !DIExpression()), !dbg !2785
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %cf, metadata !2786, metadata !DIExpression()), !dbg !2787
  %0 = load %struct.subscript*, %struct.subscript** %subscript.addr, align 8, !dbg !2788
  %conflicting_iterations_in_a = getelementptr inbounds %struct.subscript, %struct.subscript* %0, i32 0, i32 0, !dbg !2788
  %1 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_a, align 8, !dbg !2788
  store %struct.conflict_function* %1, %struct.conflict_function** %cf, align 8, !dbg !2787
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2789
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0)), !dbg !2790
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2791
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.6, i64 0, i64 0)), !dbg !2792
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2793
  %5 = load %struct.conflict_function*, %struct.conflict_function** %cf, align 8, !dbg !2794
  call void @dump_conflict_function(%struct._IO_FILE* %4, %struct.conflict_function* %5), !dbg !2795
  %6 = load %struct.conflict_function*, %struct.conflict_function** %cf, align 8, !dbg !2796
  %n = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %6, i32 0, i32 0, !dbg !2796
  %7 = load i32, i32* %n, align 8, !dbg !2796
  %cmp = icmp ne i32 %7, 0, !dbg !2796
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !2796

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.conflict_function*, %struct.conflict_function** %cf, align 8, !dbg !2796
  %n2 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %8, i32 0, i32 0, !dbg !2796
  %9 = load i32, i32* %n2, align 8, !dbg !2796
  %cmp3 = icmp ne i32 %9, 3, !dbg !2796
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2798

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %last_iteration, metadata !2799, metadata !DIExpression()), !dbg !2801
  %10 = load %struct.subscript*, %struct.subscript** %subscript.addr, align 8, !dbg !2802
  %last_conflict = getelementptr inbounds %struct.subscript, %struct.subscript* %10, i32 0, i32 2, !dbg !2802
  %11 = load %union.tree_node*, %union.tree_node** %last_conflict, align 8, !dbg !2802
  store %union.tree_node* %11, %union.tree_node** %last_iteration, align 8, !dbg !2801
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2803
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0)), !dbg !2804
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2805
  %14 = load %union.tree_node*, %union.tree_node** %last_iteration, align 8, !dbg !2806
  call void @print_generic_stmt(%struct._IO_FILE* %13, %union.tree_node* %14, i32 0), !dbg !2807
  br label %if.end, !dbg !2808

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %15 = load %struct.subscript*, %struct.subscript** %subscript.addr, align 8, !dbg !2809
  %conflicting_iterations_in_b = getelementptr inbounds %struct.subscript, %struct.subscript* %15, i32 0, i32 1, !dbg !2809
  %16 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_b, align 8, !dbg !2809
  store %struct.conflict_function* %16, %struct.conflict_function** %cf, align 8, !dbg !2810
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2811
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.8, i64 0, i64 0)), !dbg !2812
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2813
  %19 = load %struct.conflict_function*, %struct.conflict_function** %cf, align 8, !dbg !2814
  call void @dump_conflict_function(%struct._IO_FILE* %18, %struct.conflict_function* %19), !dbg !2815
  %20 = load %struct.conflict_function*, %struct.conflict_function** %cf, align 8, !dbg !2816
  %n6 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %20, i32 0, i32 0, !dbg !2816
  %21 = load i32, i32* %n6, align 8, !dbg !2816
  %cmp7 = icmp ne i32 %21, 0, !dbg !2816
  br i1 %cmp7, label %land.lhs.true8, label %if.end15, !dbg !2816

land.lhs.true8:                                   ; preds = %if.end
  %22 = load %struct.conflict_function*, %struct.conflict_function** %cf, align 8, !dbg !2816
  %n9 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %22, i32 0, i32 0, !dbg !2816
  %23 = load i32, i32* %n9, align 8, !dbg !2816
  %cmp10 = icmp ne i32 %23, 3, !dbg !2816
  br i1 %cmp10, label %if.then11, label %if.end15, !dbg !2818

if.then11:                                        ; preds = %land.lhs.true8
  call void @llvm.dbg.declare(metadata %union.tree_node** %last_iteration12, metadata !2819, metadata !DIExpression()), !dbg !2821
  %24 = load %struct.subscript*, %struct.subscript** %subscript.addr, align 8, !dbg !2822
  %last_conflict13 = getelementptr inbounds %struct.subscript, %struct.subscript* %24, i32 0, i32 2, !dbg !2822
  %25 = load %union.tree_node*, %union.tree_node** %last_conflict13, align 8, !dbg !2822
  store %union.tree_node* %25, %union.tree_node** %last_iteration12, align 8, !dbg !2821
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2823
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0)), !dbg !2824
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2825
  %28 = load %union.tree_node*, %union.tree_node** %last_iteration12, align 8, !dbg !2826
  call void @print_generic_stmt(%struct._IO_FILE* %27, %union.tree_node* %28, i32 0), !dbg !2827
  br label %if.end15, !dbg !2828

if.end15:                                         ; preds = %if.then11, %land.lhs.true8, %if.end
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2829
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0)), !dbg !2830
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2831
  %31 = load %struct.subscript*, %struct.subscript** %subscript.addr, align 8, !dbg !2832
  %distance = getelementptr inbounds %struct.subscript, %struct.subscript* %31, i32 0, i32 3, !dbg !2832
  %32 = load %union.tree_node*, %union.tree_node** %distance, align 8, !dbg !2832
  call void @print_generic_stmt(%struct._IO_FILE* %30, %union.tree_node* %32, i32 0), !dbg !2833
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2834
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0)), !dbg !2835
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2836
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0)), !dbg !2837
  ret void, !dbg !2838
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_conflict_function(%struct._IO_FILE* %outf, %struct.conflict_function* %cf) #0 !dbg !2839 {
entry:
  %outf.addr = alloca %struct._IO_FILE*, align 8
  %cf.addr = alloca %struct.conflict_function*, align 8
  %i = alloca i32, align 4
  store %struct._IO_FILE* %outf, %struct._IO_FILE** %outf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outf.addr, metadata !2842, metadata !DIExpression()), !dbg !2843
  store %struct.conflict_function* %cf, %struct.conflict_function** %cf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %cf.addr, metadata !2844, metadata !DIExpression()), !dbg !2845
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2846, metadata !DIExpression()), !dbg !2847
  %0 = load %struct.conflict_function*, %struct.conflict_function** %cf.addr, align 8, !dbg !2848
  %n = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %0, i32 0, i32 0, !dbg !2850
  %1 = load i32, i32* %n, align 8, !dbg !2850
  %cmp = icmp eq i32 %1, 0, !dbg !2851
  br i1 %cmp, label %if.then, label %if.else, !dbg !2852

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2853
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.87, i64 0, i64 0)), !dbg !2854
  br label %if.end10, !dbg !2854

if.else:                                          ; preds = %entry
  %3 = load %struct.conflict_function*, %struct.conflict_function** %cf.addr, align 8, !dbg !2855
  %n1 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %3, i32 0, i32 0, !dbg !2857
  %4 = load i32, i32* %n1, align 8, !dbg !2857
  %cmp2 = icmp eq i32 %4, 3, !dbg !2858
  br i1 %cmp2, label %if.then3, label %if.else5, !dbg !2859

if.then3:                                         ; preds = %if.else
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2860
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.88, i64 0, i64 0)), !dbg !2861
  br label %if.end, !dbg !2861

if.else5:                                         ; preds = %if.else
  store i32 0, i32* %i, align 4, !dbg !2862
  br label %for.cond, !dbg !2865

for.cond:                                         ; preds = %for.inc, %if.else5
  %6 = load i32, i32* %i, align 4, !dbg !2866
  %7 = load %struct.conflict_function*, %struct.conflict_function** %cf.addr, align 8, !dbg !2868
  %n6 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %7, i32 0, i32 0, !dbg !2869
  %8 = load i32, i32* %n6, align 8, !dbg !2869
  %cmp7 = icmp ult i32 %6, %8, !dbg !2870
  br i1 %cmp7, label %for.body, label %for.end, !dbg !2871

for.body:                                         ; preds = %for.cond
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2872
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.89, i64 0, i64 0)), !dbg !2874
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2875
  %11 = load %struct.conflict_function*, %struct.conflict_function** %cf.addr, align 8, !dbg !2876
  %fns = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %11, i32 0, i32 1, !dbg !2877
  %12 = load i32, i32* %i, align 4, !dbg !2878
  %idxprom = zext i32 %12 to i64, !dbg !2876
  %arrayidx = getelementptr inbounds [2 x %struct.VEC_tree_heap*], [2 x %struct.VEC_tree_heap*]* %fns, i64 0, i64 %idxprom, !dbg !2876
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %arrayidx, align 8, !dbg !2876
  call void @dump_affine_function(%struct._IO_FILE* %10, %struct.VEC_tree_heap* %13), !dbg !2879
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2880
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i64 0, i64 0)), !dbg !2881
  br label %for.inc, !dbg !2882

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4, !dbg !2883
  %inc = add i32 %15, 1, !dbg !2883
  store i32 %inc, i32* %i, align 4, !dbg !2883
  br label %for.cond, !dbg !2884, !llvm.loop !2885

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then3
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  ret void, !dbg !2887
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_direction_vector(%struct._IO_FILE* %outf, i32* %dirv, i32 %length) #0 !dbg !2888 {
entry:
  %outf.addr = alloca %struct._IO_FILE*, align 8
  %dirv.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %eq = alloca i32, align 4
  %dir = alloca i32, align 4
  store %struct._IO_FILE* %outf, %struct._IO_FILE** %outf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outf.addr, metadata !2891, metadata !DIExpression()), !dbg !2892
  store i32* %dirv, i32** %dirv.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %dirv.addr, metadata !2893, metadata !DIExpression()), !dbg !2894
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !2895, metadata !DIExpression()), !dbg !2896
  call void @llvm.dbg.declare(metadata i32* %eq, metadata !2897, metadata !DIExpression()), !dbg !2898
  store i32 0, i32* %eq, align 4, !dbg !2899
  br label %for.cond, !dbg !2901

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %eq, align 4, !dbg !2902
  %1 = load i32, i32* %length.addr, align 4, !dbg !2904
  %cmp = icmp slt i32 %0, %1, !dbg !2905
  br i1 %cmp, label %for.body, label %for.end, !dbg !2906

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %dir, metadata !2907, metadata !DIExpression()), !dbg !2909
  %2 = load i32*, i32** %dirv.addr, align 8, !dbg !2910
  %3 = load i32, i32* %eq, align 4, !dbg !2911
  %idxprom = sext i32 %3 to i64, !dbg !2910
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !2910
  %4 = load i32, i32* %arrayidx, align 4, !dbg !2910
  store i32 %4, i32* %dir, align 4, !dbg !2909
  %5 = load i32, i32* %dir, align 4, !dbg !2912
  switch i32 %5, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb3
    i32 4, label %sw.bb5
    i32 3, label %sw.bb7
    i32 5, label %sw.bb9
    i32 6, label %sw.bb11
  ], !dbg !2913

sw.bb:                                            ; preds = %for.body
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2914
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0)), !dbg !2916
  br label %sw.epilog, !dbg !2917

sw.bb1:                                           ; preds = %for.body
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2918
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0)), !dbg !2919
  br label %sw.epilog, !dbg !2920

sw.bb3:                                           ; preds = %for.body
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2921
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0)), !dbg !2922
  br label %sw.epilog, !dbg !2923

sw.bb5:                                           ; preds = %for.body
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2924
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0)), !dbg !2925
  br label %sw.epilog, !dbg !2926

sw.bb7:                                           ; preds = %for.body
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2927
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0)), !dbg !2928
  br label %sw.epilog, !dbg !2929

sw.bb9:                                           ; preds = %for.body
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2930
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0)), !dbg !2931
  br label %sw.epilog, !dbg !2932

sw.bb11:                                          ; preds = %for.body
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2933
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i64 0, i64 0)), !dbg !2934
  br label %sw.epilog, !dbg !2935

sw.default:                                       ; preds = %for.body
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2936
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i64 0, i64 0)), !dbg !2937
  br label %sw.epilog, !dbg !2938

sw.epilog:                                        ; preds = %sw.default, %sw.bb11, %sw.bb9, %sw.bb7, %sw.bb5, %sw.bb3, %sw.bb1, %sw.bb
  br label %for.inc, !dbg !2939

for.inc:                                          ; preds = %sw.epilog
  %14 = load i32, i32* %eq, align 4, !dbg !2940
  %inc = add nsw i32 %14, 1, !dbg !2940
  store i32 %inc, i32* %eq, align 4, !dbg !2940
  br label %for.cond, !dbg !2941, !llvm.loop !2942

for.end:                                          ; preds = %for.cond
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2944
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i64 0, i64 0)), !dbg !2945
  ret void, !dbg !2946
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_dir_vectors(%struct._IO_FILE* %outf, %struct.VEC_lambda_vector_heap* %dir_vects, i32 %length) #0 !dbg !2947 {
entry:
  %outf.addr = alloca %struct._IO_FILE*, align 8
  %dir_vects.addr = alloca %struct.VEC_lambda_vector_heap*, align 8
  %length.addr = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca i32*, align 8
  store %struct._IO_FILE* %outf, %struct._IO_FILE** %outf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outf.addr, metadata !2950, metadata !DIExpression()), !dbg !2951
  store %struct.VEC_lambda_vector_heap* %dir_vects, %struct.VEC_lambda_vector_heap** %dir_vects.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_heap** %dir_vects.addr, metadata !2952, metadata !DIExpression()), !dbg !2953
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !2954, metadata !DIExpression()), !dbg !2955
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2956, metadata !DIExpression()), !dbg !2957
  call void @llvm.dbg.declare(metadata i32** %v, metadata !2958, metadata !DIExpression()), !dbg !2959
  store i32 0, i32* %j, align 4, !dbg !2960
  br label %for.cond, !dbg !2962

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects.addr, align 8, !dbg !2963
  %tobool = icmp ne %struct.VEC_lambda_vector_heap* %0, null, !dbg !2963
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2963

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects.addr, align 8, !dbg !2963
  %base = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %1, i32 0, i32 0, !dbg !2963
  br label %cond.end, !dbg !2963

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2963

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lambda_vector_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2963
  %2 = load i32, i32* %j, align 4, !dbg !2963
  %call = call i32 @VEC_lambda_vector_base_iterate(%struct.VEC_lambda_vector_base* %cond, i32 %2, i32** %v), !dbg !2963
  %tobool1 = icmp ne i32 %call, 0, !dbg !2965
  br i1 %tobool1, label %for.body, label %for.end, !dbg !2965

for.body:                                         ; preds = %cond.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !2966
  %4 = load i32*, i32** %v, align 8, !dbg !2967
  %5 = load i32, i32* %length.addr, align 4, !dbg !2968
  call void @print_direction_vector(%struct._IO_FILE* %3, i32* %4, i32 %5), !dbg !2969
  br label %for.inc, !dbg !2969

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %j, align 4, !dbg !2970
  %inc = add i32 %6, 1, !dbg !2970
  store i32 %inc, i32* %j, align 4, !dbg !2970
  br label %for.cond, !dbg !2971, !llvm.loop !2972

for.end:                                          ; preds = %cond.end
  ret void, !dbg !2974
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_lambda_vector_base_iterate(%struct.VEC_lambda_vector_base* %vec_, i32 %ix_, i32** %ptr) #0 !dbg !2975 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_lambda_vector_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32**, align 8
  store %struct.VEC_lambda_vector_base* %vec_, %struct.VEC_lambda_vector_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_base** %vec_.addr, metadata !2981, metadata !DIExpression()), !dbg !2982
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2983, metadata !DIExpression()), !dbg !2982
  store i32** %ptr, i32*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %ptr.addr, metadata !2984, metadata !DIExpression()), !dbg !2982
  %0 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !2985
  %tobool = icmp ne %struct.VEC_lambda_vector_base* %0, null, !dbg !2985
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2985

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2985
  %2 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !2985
  %num = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %2, i32 0, i32 0, !dbg !2985
  %3 = load i32, i32* %num, align 8, !dbg !2985
  %cmp = icmp ult i32 %1, %3, !dbg !2985
  br i1 %cmp, label %if.then, label %if.else, !dbg !2982

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !2987
  %vec = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %4, i32 0, i32 2, !dbg !2987
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !2987
  %idxprom = zext i32 %5 to i64, !dbg !2987
  %arrayidx = getelementptr inbounds [1 x i32*], [1 x i32*]* %vec, i64 0, i64 %idxprom, !dbg !2987
  %6 = load i32*, i32** %arrayidx, align 8, !dbg !2987
  %7 = load i32**, i32*** %ptr.addr, align 8, !dbg !2987
  store i32* %6, i32** %7, align 8, !dbg !2987
  store i32 1, i32* %retval, align 4, !dbg !2987
  br label %return, !dbg !2987

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32**, i32*** %ptr.addr, align 8, !dbg !2989
  store i32* null, i32** %8, align 8, !dbg !2989
  store i32 0, i32* %retval, align 4, !dbg !2989
  br label %return, !dbg !2989

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2982
  ret i32 %9, !dbg !2982
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_dist_vectors(%struct._IO_FILE* %outf, %struct.VEC_lambda_vector_heap* %dist_vects, i32 %length) #0 !dbg !2991 {
entry:
  %outf.addr = alloca %struct._IO_FILE*, align 8
  %dist_vects.addr = alloca %struct.VEC_lambda_vector_heap*, align 8
  %length.addr = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca i32*, align 8
  store %struct._IO_FILE* %outf, %struct._IO_FILE** %outf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outf.addr, metadata !2992, metadata !DIExpression()), !dbg !2993
  store %struct.VEC_lambda_vector_heap* %dist_vects, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_heap** %dist_vects.addr, metadata !2994, metadata !DIExpression()), !dbg !2995
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !2996, metadata !DIExpression()), !dbg !2997
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2998, metadata !DIExpression()), !dbg !2999
  call void @llvm.dbg.declare(metadata i32** %v, metadata !3000, metadata !DIExpression()), !dbg !3001
  store i32 0, i32* %j, align 4, !dbg !3002
  br label %for.cond, !dbg !3004

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !3005
  %tobool = icmp ne %struct.VEC_lambda_vector_heap* %0, null, !dbg !3005
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3005

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !3005
  %base = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %1, i32 0, i32 0, !dbg !3005
  br label %cond.end, !dbg !3005

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3005

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lambda_vector_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3005
  %2 = load i32, i32* %j, align 4, !dbg !3005
  %call = call i32 @VEC_lambda_vector_base_iterate(%struct.VEC_lambda_vector_base* %cond, i32 %2, i32** %v), !dbg !3005
  %tobool1 = icmp ne i32 %call, 0, !dbg !3007
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3007

for.body:                                         ; preds = %cond.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !3008
  %4 = load i32*, i32** %v, align 8, !dbg !3009
  %5 = load i32, i32* %length.addr, align 4, !dbg !3010
  call void @print_lambda_vector(%struct._IO_FILE* %3, i32* %4, i32 %5), !dbg !3011
  br label %for.inc, !dbg !3011

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %j, align 4, !dbg !3012
  %inc = add i32 %6, 1, !dbg !3012
  store i32 %inc, i32* %j, align 4, !dbg !3012
  br label %for.cond, !dbg !3013, !llvm.loop !3014

for.end:                                          ; preds = %cond.end
  ret void, !dbg !3016
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_lambda_vector(%struct._IO_FILE* %outfile, i32* %vector, i32 %n) #0 !dbg !3017 {
entry:
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  %vector.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outfile.addr, metadata !3018, metadata !DIExpression()), !dbg !3019
  store i32* %vector, i32** %vector.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vector.addr, metadata !3020, metadata !DIExpression()), !dbg !3021
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3022, metadata !DIExpression()), !dbg !3023
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3024, metadata !DIExpression()), !dbg !3025
  store i32 0, i32* %i, align 4, !dbg !3026
  br label %for.cond, !dbg !3028

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3029
  %1 = load i32, i32* %n.addr, align 4, !dbg !3031
  %cmp = icmp slt i32 %0, %1, !dbg !3032
  br i1 %cmp, label %for.body, label %for.end, !dbg !3033

for.body:                                         ; preds = %for.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3034
  %3 = load i32*, i32** %vector.addr, align 8, !dbg !3035
  %4 = load i32, i32* %i, align 4, !dbg !3036
  %idxprom = sext i32 %4 to i64, !dbg !3035
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !3035
  %5 = load i32, i32* %arrayidx, align 4, !dbg !3035
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.93, i64 0, i64 0), i32 %5), !dbg !3037
  br label %for.inc, !dbg !3037

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !3038
  %inc = add nsw i32 %6, 1, !dbg !3038
  store i32 %inc, i32* %i, align 4, !dbg !3038
  br label %for.cond, !dbg !3039, !llvm.loop !3040

for.end:                                          ; preds = %for.cond
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3042
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i64 0, i64 0)), !dbg !3043
  ret void, !dbg !3044
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_data_dependence_relation(%struct.data_dependence_relation* %ddr) #0 !dbg !3045 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !3048, metadata !DIExpression()), !dbg !3049
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3050
  %1 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !3051
  call void @dump_data_dependence_relation(%struct._IO_FILE* %0, %struct.data_dependence_relation* %1), !dbg !3052
  ret void, !dbg !3053
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_subscript_p_base_length(%struct.VEC_subscript_p_base* %vec_) #0 !dbg !3054 {
entry:
  %vec_.addr = alloca %struct.VEC_subscript_p_base*, align 8
  store %struct.VEC_subscript_p_base* %vec_, %struct.VEC_subscript_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_subscript_p_base** %vec_.addr, metadata !3059, metadata !DIExpression()), !dbg !3060
  %0 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !3060
  %tobool = icmp ne %struct.VEC_subscript_p_base* %0, null, !dbg !3060
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3060

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !3060
  %num = getelementptr inbounds %struct.VEC_subscript_p_base, %struct.VEC_subscript_p_base* %1, i32 0, i32 0, !dbg !3060
  %2 = load i32, i32* %num, align 8, !dbg !3060
  br label %cond.end, !dbg !3060

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3060

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3060
  ret i32 %cond, !dbg !3060
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.subscript* @VEC_subscript_p_base_index(%struct.VEC_subscript_p_base* %vec_, i32 %ix_) #0 !dbg !3061 {
entry:
  %vec_.addr = alloca %struct.VEC_subscript_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_subscript_p_base* %vec_, %struct.VEC_subscript_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_subscript_p_base** %vec_.addr, metadata !3064, metadata !DIExpression()), !dbg !3065
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3066, metadata !DIExpression()), !dbg !3065
  %0 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !3065
  %tobool = icmp ne %struct.VEC_subscript_p_base* %0, null, !dbg !3065
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3065

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3065
  %2 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !3065
  %num = getelementptr inbounds %struct.VEC_subscript_p_base, %struct.VEC_subscript_p_base* %2, i32 0, i32 0, !dbg !3065
  %3 = load i32, i32* %num, align 8, !dbg !3065
  %cmp = icmp ult i32 %1, %3, !dbg !3065
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3067
  %land.ext = zext i1 %4 to i32, !dbg !3065
  %5 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !3065
  %vec = getelementptr inbounds %struct.VEC_subscript_p_base, %struct.VEC_subscript_p_base* %5, i32 0, i32 2, !dbg !3065
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3065
  %idxprom = zext i32 %6 to i64, !dbg !3065
  %arrayidx = getelementptr inbounds [1 x %struct.subscript*], [1 x %struct.subscript*]* %vec, i64 0, i64 %idxprom, !dbg !3065
  %7 = load %struct.subscript*, %struct.subscript** %arrayidx, align 8, !dbg !3065
  ret %struct.subscript* %7, !dbg !3065
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !3068 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3074, metadata !DIExpression()), !dbg !3075
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3076, metadata !DIExpression()), !dbg !3075
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !3077, metadata !DIExpression()), !dbg !3075
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3078
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3078
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3078

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3078
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3078
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !3078
  %3 = load i32, i32* %num, align 8, !dbg !3078
  %cmp = icmp ult i32 %1, %3, !dbg !3078
  br i1 %cmp, label %if.then, label %if.else, !dbg !3075

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3080
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !3080
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3080
  %idxprom = zext i32 %5 to i64, !dbg !3080
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !3080
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !3080
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !3080
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !3080
  store i32 1, i32* %retval, align 4, !dbg !3080
  br label %return, !dbg !3080

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !3082
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !3082
  store i32 0, i32* %retval, align 4, !dbg !3082
  br label %return, !dbg !3082

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3075
  ret i32 %9, !dbg !3075
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %vec_) #0 !dbg !3084 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_vector_base*, align 8
  store %struct.VEC_lambda_vector_base* %vec_, %struct.VEC_lambda_vector_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_base** %vec_.addr, metadata !3087, metadata !DIExpression()), !dbg !3088
  %0 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !3088
  %tobool = icmp ne %struct.VEC_lambda_vector_base* %0, null, !dbg !3088
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3088

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !3088
  %num = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %1, i32 0, i32 0, !dbg !3088
  %2 = load i32, i32* %num, align 8, !dbg !3088
  br label %cond.end, !dbg !3088

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3088

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3088
  ret i32 %cond, !dbg !3088
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_lambda_vector_base_index(%struct.VEC_lambda_vector_base* %vec_, i32 %ix_) #0 !dbg !3089 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_vector_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_lambda_vector_base* %vec_, %struct.VEC_lambda_vector_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_base** %vec_.addr, metadata !3092, metadata !DIExpression()), !dbg !3093
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3094, metadata !DIExpression()), !dbg !3093
  %0 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !3093
  %tobool = icmp ne %struct.VEC_lambda_vector_base* %0, null, !dbg !3093
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3093

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3093
  %2 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !3093
  %num = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %2, i32 0, i32 0, !dbg !3093
  %3 = load i32, i32* %num, align 8, !dbg !3093
  %cmp = icmp ult i32 %1, %3, !dbg !3093
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3095
  %land.ext = zext i1 %4 to i32, !dbg !3093
  %5 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !3093
  %vec = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %5, i32 0, i32 2, !dbg !3093
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3093
  %idxprom = zext i32 %6 to i64, !dbg !3093
  %arrayidx = getelementptr inbounds [1 x i32*], [1 x i32*]* %vec, i64 0, i64 %idxprom, !dbg !3093
  %7 = load i32*, i32** %arrayidx, align 8, !dbg !3093
  ret i32* %7, !dbg !3093
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !3096 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3099, metadata !DIExpression()), !dbg !3100
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3100
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3100
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3100

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3100
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !3100
  %2 = load i32, i32* %num, align 8, !dbg !3100
  br label %cond.end, !dbg !3100

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3100

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3100
  ret i32 %cond, !dbg !3100
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_data_dependence_direction(%struct._IO_FILE* %file, i32 %dir) #0 !dbg !3101 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %dir.addr = alloca i32, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3104, metadata !DIExpression()), !dbg !3105
  store i32 %dir, i32* %dir.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dir.addr, metadata !3106, metadata !DIExpression()), !dbg !3107
  %0 = load i32, i32* %dir.addr, align 4, !dbg !3108
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb3
    i32 3, label %sw.bb5
    i32 4, label %sw.bb7
    i32 5, label %sw.bb9
    i32 6, label %sw.bb11
  ], !dbg !3109

sw.bb:                                            ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3110
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i64 0, i64 0)), !dbg !3112
  br label %sw.epilog, !dbg !3113

sw.bb1:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3114
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i64 0, i64 0)), !dbg !3115
  br label %sw.epilog, !dbg !3116

sw.bb3:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3117
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.35, i64 0, i64 0)), !dbg !3118
  br label %sw.epilog, !dbg !3119

sw.bb5:                                           ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3120
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i64 0, i64 0)), !dbg !3121
  br label %sw.epilog, !dbg !3122

sw.bb7:                                           ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3123
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)), !dbg !3124
  br label %sw.epilog, !dbg !3125

sw.bb9:                                           ; preds = %entry
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3126
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i64 0, i64 0)), !dbg !3127
  br label %sw.epilog, !dbg !3128

sw.bb11:                                          ; preds = %entry
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3129
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i64 0, i64 0)), !dbg !3130
  br label %sw.epilog, !dbg !3131

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !3132

sw.epilog:                                        ; preds = %sw.default, %sw.bb11, %sw.bb9, %sw.bb7, %sw.bb5, %sw.bb3, %sw.bb1, %sw.bb
  ret void, !dbg !3133
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_dist_dir_vectors(%struct._IO_FILE* %file, %struct.VEC_ddr_p_heap* %ddrs) #0 !dbg !3134 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %ddrs.addr = alloca %struct.VEC_ddr_p_heap*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ddr = alloca %struct.data_dependence_relation*, align 8
  %v = alloca i32*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3135, metadata !DIExpression()), !dbg !3136
  store %struct.VEC_ddr_p_heap* %ddrs, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %ddrs.addr, metadata !3137, metadata !DIExpression()), !dbg !3138
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3139, metadata !DIExpression()), !dbg !3140
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3141, metadata !DIExpression()), !dbg !3142
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr, metadata !3143, metadata !DIExpression()), !dbg !3144
  call void @llvm.dbg.declare(metadata i32** %v, metadata !3145, metadata !DIExpression()), !dbg !3146
  store i32 0, i32* %i, align 4, !dbg !3147
  br label %for.cond, !dbg !3149

for.cond:                                         ; preds = %for.inc49, %entry
  %0 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8, !dbg !3150
  %tobool = icmp ne %struct.VEC_ddr_p_heap* %0, null, !dbg !3150
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3150

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8, !dbg !3150
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %1, i32 0, i32 0, !dbg !3150
  br label %cond.end, !dbg !3150

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3150

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ddr_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3150
  %2 = load i32, i32* %i, align 4, !dbg !3150
  %call = call i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %cond, i32 %2, %struct.data_dependence_relation** %ddr), !dbg !3150
  %tobool1 = icmp ne i32 %call, 0, !dbg !3152
  br i1 %tobool1, label %for.body, label %for.end51, !dbg !3152

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3153
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %3, i32 0, i32 2, !dbg !3153
  %4 = load %union.tree_node*, %union.tree_node** %are_dependent, align 8, !dbg !3153
  %cmp = icmp eq %union.tree_node* %4, null, !dbg !3155
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3156

land.lhs.true:                                    ; preds = %for.body
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3157
  %affine_p = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 9, !dbg !3157
  %6 = load i8, i8* %affine_p, align 1, !dbg !3157
  %conv = zext i8 %6 to i32, !dbg !3157
  %tobool2 = icmp ne i32 %conv, 0, !dbg !3157
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3158

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %j, align 4, !dbg !3159
  br label %for.cond3, !dbg !3162

for.cond3:                                        ; preds = %for.inc, %if.then
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3163
  %dist_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 6, !dbg !3163
  %8 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects, align 8, !dbg !3163
  %tobool4 = icmp ne %struct.VEC_lambda_vector_heap* %8, null, !dbg !3163
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !3163

cond.true5:                                       ; preds = %for.cond3
  %9 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3163
  %dist_vects6 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %9, i32 0, i32 6, !dbg !3163
  %10 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects6, align 8, !dbg !3163
  %base7 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %10, i32 0, i32 0, !dbg !3163
  br label %cond.end9, !dbg !3163

cond.false8:                                      ; preds = %for.cond3
  br label %cond.end9, !dbg !3163

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_lambda_vector_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !3163
  %11 = load i32, i32* %j, align 4, !dbg !3163
  %call11 = call i32 @VEC_lambda_vector_base_iterate(%struct.VEC_lambda_vector_base* %cond10, i32 %11, i32** %v), !dbg !3163
  %tobool12 = icmp ne i32 %call11, 0, !dbg !3165
  br i1 %tobool12, label %for.body13, label %for.end, !dbg !3165

for.body13:                                       ; preds = %cond.end9
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3166
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.40, i64 0, i64 0)), !dbg !3168
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3169
  %14 = load i32*, i32** %v, align 8, !dbg !3170
  %15 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3171
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %15, i32 0, i32 4, !dbg !3171
  %16 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !3171
  %tobool15 = icmp ne %struct.VEC_loop_p_heap* %16, null, !dbg !3171
  br i1 %tobool15, label %cond.true16, label %cond.false19, !dbg !3171

cond.true16:                                      ; preds = %for.body13
  %17 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3171
  %loop_nest17 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %17, i32 0, i32 4, !dbg !3171
  %18 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest17, align 8, !dbg !3171
  %base18 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %18, i32 0, i32 0, !dbg !3171
  br label %cond.end20, !dbg !3171

cond.false19:                                     ; preds = %for.body13
  br label %cond.end20, !dbg !3171

cond.end20:                                       ; preds = %cond.false19, %cond.true16
  %cond21 = phi %struct.VEC_loop_p_base* [ %base18, %cond.true16 ], [ null, %cond.false19 ], !dbg !3171
  %call22 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond21), !dbg !3171
  call void @print_lambda_vector(%struct._IO_FILE* %13, i32* %14, i32 %call22), !dbg !3172
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3173
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !3174
  br label %for.inc, !dbg !3175

for.inc:                                          ; preds = %cond.end20
  %20 = load i32, i32* %j, align 4, !dbg !3176
  %inc = add i32 %20, 1, !dbg !3176
  store i32 %inc, i32* %j, align 4, !dbg !3176
  br label %for.cond3, !dbg !3177, !llvm.loop !3178

for.end:                                          ; preds = %cond.end9
  store i32 0, i32* %j, align 4, !dbg !3180
  br label %for.cond24, !dbg !3182

for.cond24:                                       ; preds = %for.inc46, %for.end
  %21 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3183
  %dir_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %21, i32 0, i32 5, !dbg !3183
  %22 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects, align 8, !dbg !3183
  %tobool25 = icmp ne %struct.VEC_lambda_vector_heap* %22, null, !dbg !3183
  br i1 %tobool25, label %cond.true26, label %cond.false29, !dbg !3183

cond.true26:                                      ; preds = %for.cond24
  %23 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3183
  %dir_vects27 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %23, i32 0, i32 5, !dbg !3183
  %24 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects27, align 8, !dbg !3183
  %base28 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %24, i32 0, i32 0, !dbg !3183
  br label %cond.end30, !dbg !3183

cond.false29:                                     ; preds = %for.cond24
  br label %cond.end30, !dbg !3183

cond.end30:                                       ; preds = %cond.false29, %cond.true26
  %cond31 = phi %struct.VEC_lambda_vector_base* [ %base28, %cond.true26 ], [ null, %cond.false29 ], !dbg !3183
  %25 = load i32, i32* %j, align 4, !dbg !3183
  %call32 = call i32 @VEC_lambda_vector_base_iterate(%struct.VEC_lambda_vector_base* %cond31, i32 %25, i32** %v), !dbg !3183
  %tobool33 = icmp ne i32 %call32, 0, !dbg !3185
  br i1 %tobool33, label %for.body34, label %for.end48, !dbg !3185

for.body34:                                       ; preds = %cond.end30
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3186
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.41, i64 0, i64 0)), !dbg !3188
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3189
  %28 = load i32*, i32** %v, align 8, !dbg !3190
  %29 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3191
  %loop_nest36 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %29, i32 0, i32 4, !dbg !3191
  %30 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest36, align 8, !dbg !3191
  %tobool37 = icmp ne %struct.VEC_loop_p_heap* %30, null, !dbg !3191
  br i1 %tobool37, label %cond.true38, label %cond.false41, !dbg !3191

cond.true38:                                      ; preds = %for.body34
  %31 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3191
  %loop_nest39 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %31, i32 0, i32 4, !dbg !3191
  %32 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest39, align 8, !dbg !3191
  %base40 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %32, i32 0, i32 0, !dbg !3191
  br label %cond.end42, !dbg !3191

cond.false41:                                     ; preds = %for.body34
  br label %cond.end42, !dbg !3191

cond.end42:                                       ; preds = %cond.false41, %cond.true38
  %cond43 = phi %struct.VEC_loop_p_base* [ %base40, %cond.true38 ], [ null, %cond.false41 ], !dbg !3191
  %call44 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond43), !dbg !3191
  call void @print_direction_vector(%struct._IO_FILE* %27, i32* %28, i32 %call44), !dbg !3192
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3193
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !3194
  br label %for.inc46, !dbg !3195

for.inc46:                                        ; preds = %cond.end42
  %34 = load i32, i32* %j, align 4, !dbg !3196
  %inc47 = add i32 %34, 1, !dbg !3196
  store i32 %inc47, i32* %j, align 4, !dbg !3196
  br label %for.cond24, !dbg !3197, !llvm.loop !3198

for.end48:                                        ; preds = %cond.end30
  br label %if.end, !dbg !3200

if.end:                                           ; preds = %for.end48, %land.lhs.true, %for.body
  br label %for.inc49, !dbg !3157

for.inc49:                                        ; preds = %if.end
  %35 = load i32, i32* %i, align 4, !dbg !3201
  %inc50 = add i32 %35, 1, !dbg !3201
  store i32 %inc50, i32* %i, align 4, !dbg !3201
  br label %for.cond, !dbg !3202, !llvm.loop !3203

for.end51:                                        ; preds = %cond.end
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3205
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)), !dbg !3206
  ret void, !dbg !3207
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_ddrs(%struct._IO_FILE* %file, %struct.VEC_ddr_p_heap* %ddrs) #0 !dbg !3208 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %ddrs.addr = alloca %struct.VEC_ddr_p_heap*, align 8
  %i = alloca i32, align 4
  %ddr = alloca %struct.data_dependence_relation*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3209, metadata !DIExpression()), !dbg !3210
  store %struct.VEC_ddr_p_heap* %ddrs, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %ddrs.addr, metadata !3211, metadata !DIExpression()), !dbg !3212
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3213, metadata !DIExpression()), !dbg !3214
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr, metadata !3215, metadata !DIExpression()), !dbg !3216
  store i32 0, i32* %i, align 4, !dbg !3217
  br label %for.cond, !dbg !3219

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8, !dbg !3220
  %tobool = icmp ne %struct.VEC_ddr_p_heap* %0, null, !dbg !3220
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3220

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8, !dbg !3220
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %1, i32 0, i32 0, !dbg !3220
  br label %cond.end, !dbg !3220

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3220

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ddr_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3220
  %2 = load i32, i32* %i, align 4, !dbg !3220
  %call = call i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %cond, i32 %2, %struct.data_dependence_relation** %ddr), !dbg !3220
  %tobool1 = icmp ne i32 %call, 0, !dbg !3222
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3222

for.body:                                         ; preds = %cond.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3223
  %4 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3224
  call void @dump_data_dependence_relation(%struct._IO_FILE* %3, %struct.data_dependence_relation* %4), !dbg !3225
  br label %for.inc, !dbg !3225

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !3226
  %inc = add i32 %5, 1, !dbg !3226
  store i32 %inc, i32* %i, align 4, !dbg !3226
  br label %for.cond, !dbg !3227, !llvm.loop !3228

for.end:                                          ; preds = %cond.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3230
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)), !dbg !3231
  ret void, !dbg !3232
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @split_constant_offset(%union.tree_node* %exp, %union.tree_node** %var, %union.tree_node** %off) #0 !dbg !3233 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %var.addr = alloca %union.tree_node**, align 8
  %off.addr = alloca %union.tree_node**, align 8
  %type = alloca %union.tree_node*, align 8
  %otype = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %e = alloca %union.tree_node*, align 8
  %o = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !3236, metadata !DIExpression()), !dbg !3237
  store %union.tree_node** %var, %union.tree_node*** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %var.addr, metadata !3238, metadata !DIExpression()), !dbg !3239
  store %union.tree_node** %off, %union.tree_node*** %off.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %off.addr, metadata !3240, metadata !DIExpression()), !dbg !3241
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3242, metadata !DIExpression()), !dbg !3243
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3244
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3244
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3244
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !3244
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !3243
  call void @llvm.dbg.declare(metadata %union.tree_node** %otype, metadata !3245, metadata !DIExpression()), !dbg !3246
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !3247, metadata !DIExpression()), !dbg !3248
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !3249, metadata !DIExpression()), !dbg !3250
  call void @llvm.dbg.declare(metadata %union.tree_node** %e, metadata !3251, metadata !DIExpression()), !dbg !3252
  call void @llvm.dbg.declare(metadata %union.tree_node** %o, metadata !3253, metadata !DIExpression()), !dbg !3254
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3255, metadata !DIExpression()), !dbg !3256
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3257
  %3 = load %union.tree_node**, %union.tree_node*** %var.addr, align 8, !dbg !3258
  store %union.tree_node* %2, %union.tree_node** %3, align 8, !dbg !3259
  %call = call %union.tree_node* @size_int_kind(i64 0, i32 1), !dbg !3260
  %4 = load %union.tree_node**, %union.tree_node*** %off.addr, align 8, !dbg !3261
  store %union.tree_node* %call, %union.tree_node** %4, align 8, !dbg !3262
  %5 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3263
  %call2 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %5), !dbg !3263
  store %union.tree_node* %call2, %union.tree_node** %exp.addr, align 8, !dbg !3263
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3264
  %call3 = call zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %6), !dbg !3266
  %tobool = icmp ne i8 %call3, 0, !dbg !3266
  br i1 %tobool, label %if.then, label %if.end, !dbg !3267

if.then:                                          ; preds = %entry
  br label %if.end10, !dbg !3268

if.end:                                           ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3269
  %common4 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !3269
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !3269
  %8 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !3269
  store %union.tree_node* %8, %union.tree_node** %otype, align 8, !dbg !3270
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3271
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3271
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !3271
  %bf.load = load i64, i64* %10, align 8, !dbg !3271
  %bf.clear = and i64 %bf.load, 65535, !dbg !3271
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3271
  store i32 %bf.cast, i32* %code, align 4, !dbg !3272
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3273
  call void @extract_ops_from_tree(%union.tree_node* %11, i32* %code, %union.tree_node** %op0, %union.tree_node** %op1), !dbg !3274
  %12 = load %union.tree_node*, %union.tree_node** %otype, align 8, !dbg !3275
  %13 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !3277
  %14 = load i32, i32* %code, align 4, !dbg !3278
  %15 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !3279
  %call6 = call zeroext i8 @split_constant_offset_1(%union.tree_node* %12, %union.tree_node* %13, i32 %14, %union.tree_node* %15, %union.tree_node** %e, %union.tree_node** %o), !dbg !3280
  %tobool7 = icmp ne i8 %call6, 0, !dbg !3280
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !3281

if.then8:                                         ; preds = %if.end
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3282
  %17 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !3282
  %call9 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %16, %union.tree_node* %17), !dbg !3282
  %18 = load %union.tree_node**, %union.tree_node*** %var.addr, align 8, !dbg !3284
  store %union.tree_node* %call9, %union.tree_node** %18, align 8, !dbg !3285
  %19 = load %union.tree_node*, %union.tree_node** %o, align 8, !dbg !3286
  %20 = load %union.tree_node**, %union.tree_node*** %off.addr, align 8, !dbg !3287
  store %union.tree_node* %19, %union.tree_node** %20, align 8, !dbg !3288
  br label %if.end10, !dbg !3289

if.end10:                                         ; preds = %if.then, %if.then8, %if.end
  ret void, !dbg !3290
}

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %chrec) #0 !dbg !3291 {
entry:
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !3296, metadata !DIExpression()), !dbg !3297
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3298
  %1 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3299
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !3300
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !3301

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3302
  %3 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !3303
  %cmp1 = icmp eq %union.tree_node* %2, %3, !dbg !3304
  br label %lor.end, !dbg !3301

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !3301
  %conv = trunc i32 %lor.ext to i8, !dbg !3305
  ret i8 %conv, !dbg !3306
}

declare dso_local void @extract_ops_from_tree(%union.tree_node*, i32*, %union.tree_node**, %union.tree_node**) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @split_constant_offset_1(%union.tree_node* %type, %union.tree_node* %op0, i32 %code, %union.tree_node* %op1, %union.tree_node** %var, %union.tree_node** %off) #0 !dbg !3307 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %op1.addr = alloca %union.tree_node*, align 8
  %var.addr = alloca %union.tree_node**, align 8
  %off.addr = alloca %union.tree_node**, align 8
  %var0 = alloca %union.tree_node*, align 8
  %var1 = alloca %union.tree_node*, align 8
  %off0 = alloca %union.tree_node*, align 8
  %off1 = alloca %union.tree_node*, align 8
  %ocode = alloca i32, align 4
  %base11 = alloca %union.tree_node*, align 8
  %poffset = alloca %union.tree_node*, align 8
  %pbitsize = alloca i64, align 8
  %pbitpos = alloca i64, align 8
  %pmode = alloca i32, align 4
  %punsignedp = alloca i32, align 4
  %pvolatilep = alloca i32, align 4
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %subcode = alloca i32, align 4
  %itype = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3310, metadata !DIExpression()), !dbg !3311
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !3312, metadata !DIExpression()), !dbg !3313
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !3314, metadata !DIExpression()), !dbg !3315
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !3316, metadata !DIExpression()), !dbg !3317
  store %union.tree_node** %var, %union.tree_node*** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %var.addr, metadata !3318, metadata !DIExpression()), !dbg !3319
  store %union.tree_node** %off, %union.tree_node*** %off.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %off.addr, metadata !3320, metadata !DIExpression()), !dbg !3321
  call void @llvm.dbg.declare(metadata %union.tree_node** %var0, metadata !3322, metadata !DIExpression()), !dbg !3323
  call void @llvm.dbg.declare(metadata %union.tree_node** %var1, metadata !3324, metadata !DIExpression()), !dbg !3325
  call void @llvm.dbg.declare(metadata %union.tree_node** %off0, metadata !3326, metadata !DIExpression()), !dbg !3327
  call void @llvm.dbg.declare(metadata %union.tree_node** %off1, metadata !3328, metadata !DIExpression()), !dbg !3329
  call void @llvm.dbg.declare(metadata i32* %ocode, metadata !3330, metadata !DIExpression()), !dbg !3331
  %0 = load i32, i32* %code.addr, align 4, !dbg !3332
  store i32 %0, i32* %ocode, align 4, !dbg !3331
  %1 = load %union.tree_node**, %union.tree_node*** %var.addr, align 8, !dbg !3333
  store %union.tree_node* null, %union.tree_node** %1, align 8, !dbg !3334
  %2 = load %union.tree_node**, %union.tree_node*** %off.addr, align 8, !dbg !3335
  store %union.tree_node* null, %union.tree_node** %2, align 8, !dbg !3336
  %3 = load i32, i32* %code.addr, align 4, !dbg !3337
  switch i32 %3, label %sw.default [
    i32 23, label %sw.bb
    i32 66, label %sw.bb2
    i32 63, label %sw.bb3
    i32 64, label %sw.bb3
    i32 65, label %sw.bb6
    i32 121, label %sw.bb10
    i32 141, label %sw.bb67
    i32 116, label %sw.bb77
    i32 113, label %sw.bb77
  ], !dbg !3338

sw.bb:                                            ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3339
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* %4, i64 0), !dbg !3341
  %5 = load %union.tree_node**, %union.tree_node*** %var.addr, align 8, !dbg !3342
  store %union.tree_node* %call, %union.tree_node** %5, align 8, !dbg !3343
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !3344
  %7 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !3344
  %call1 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %6, %union.tree_node* %7), !dbg !3344
  %8 = load %union.tree_node**, %union.tree_node*** %off.addr, align 8, !dbg !3345
  store %union.tree_node* %call1, %union.tree_node** %8, align 8, !dbg !3346
  store i8 1, i8* %retval, align 1, !dbg !3347
  br label %return, !dbg !3347

sw.bb2:                                           ; preds = %entry
  store i32 63, i32* %ocode, align 4, !dbg !3348
  br label %sw.bb3, !dbg !3349

sw.bb3:                                           ; preds = %entry, %entry, %sw.bb2
  %9 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !3350
  call void @split_constant_offset(%union.tree_node* %9, %union.tree_node** %var0, %union.tree_node** %off0), !dbg !3351
  %10 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !3352
  call void @split_constant_offset(%union.tree_node* %10, %union.tree_node** %var1, %union.tree_node** %off1), !dbg !3353
  %11 = load i32, i32* %code.addr, align 4, !dbg !3354
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3354
  %13 = load %union.tree_node*, %union.tree_node** %var0, align 8, !dbg !3354
  %14 = load %union.tree_node*, %union.tree_node** %var1, align 8, !dbg !3354
  %call4 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %11, %union.tree_node* %12, %union.tree_node* %13, %union.tree_node* %14), !dbg !3354
  %15 = load %union.tree_node**, %union.tree_node*** %var.addr, align 8, !dbg !3355
  store %union.tree_node* %call4, %union.tree_node** %15, align 8, !dbg !3356
  %16 = load i32, i32* %ocode, align 4, !dbg !3357
  %17 = load %union.tree_node*, %union.tree_node** %off0, align 8, !dbg !3357
  %18 = load %union.tree_node*, %union.tree_node** %off1, align 8, !dbg !3357
  %call5 = call %union.tree_node* @size_binop_loc(i32 0, i32 %16, %union.tree_node* %17, %union.tree_node* %18), !dbg !3357
  %19 = load %union.tree_node**, %union.tree_node*** %off.addr, align 8, !dbg !3358
  store %union.tree_node* %call5, %union.tree_node** %19, align 8, !dbg !3359
  store i8 1, i8* %retval, align 1, !dbg !3360
  br label %return, !dbg !3360

sw.bb6:                                           ; preds = %entry
  %20 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !3361
  %base = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !3361
  %21 = bitcast %struct.tree_base* %base to i64*, !dbg !3361
  %bf.load = load i64, i64* %21, align 8, !dbg !3361
  %bf.clear = and i64 %bf.load, 65535, !dbg !3361
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3361
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !3363
  br i1 %cmp, label %if.then, label %if.end, !dbg !3364

if.then:                                          ; preds = %sw.bb6
  store i8 0, i8* %retval, align 1, !dbg !3365
  br label %return, !dbg !3365

if.end:                                           ; preds = %sw.bb6
  %22 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !3366
  call void @split_constant_offset(%union.tree_node* %22, %union.tree_node** %var0, %union.tree_node** %off0), !dbg !3367
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3368
  %24 = load %union.tree_node*, %union.tree_node** %var0, align 8, !dbg !3368
  %25 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !3368
  %call7 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %23, %union.tree_node* %24, %union.tree_node* %25), !dbg !3368
  %26 = load %union.tree_node**, %union.tree_node*** %var.addr, align 8, !dbg !3369
  store %union.tree_node* %call7, %union.tree_node** %26, align 8, !dbg !3370
  %27 = load %union.tree_node*, %union.tree_node** %off0, align 8, !dbg !3371
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !3371
  %29 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !3371
  %call8 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %28, %union.tree_node* %29), !dbg !3371
  %call9 = call %union.tree_node* @size_binop_loc(i32 0, i32 65, %union.tree_node* %27, %union.tree_node* %call8), !dbg !3371
  %30 = load %union.tree_node**, %union.tree_node*** %off.addr, align 8, !dbg !3372
  store %union.tree_node* %call9, %union.tree_node** %30, align 8, !dbg !3373
  store i8 1, i8* %retval, align 1, !dbg !3374
  br label %return, !dbg !3374

sw.bb10:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %base11, metadata !3375, metadata !DIExpression()), !dbg !3377
  call void @llvm.dbg.declare(metadata %union.tree_node** %poffset, metadata !3378, metadata !DIExpression()), !dbg !3379
  call void @llvm.dbg.declare(metadata i64* %pbitsize, metadata !3380, metadata !DIExpression()), !dbg !3381
  call void @llvm.dbg.declare(metadata i64* %pbitpos, metadata !3382, metadata !DIExpression()), !dbg !3383
  call void @llvm.dbg.declare(metadata i32* %pmode, metadata !3384, metadata !DIExpression()), !dbg !3385
  call void @llvm.dbg.declare(metadata i32* %punsignedp, metadata !3386, metadata !DIExpression()), !dbg !3387
  call void @llvm.dbg.declare(metadata i32* %pvolatilep, metadata !3388, metadata !DIExpression()), !dbg !3389
  %31 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !3390
  %exp = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !3390
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3390
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3390
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3390
  store %union.tree_node* %32, %union.tree_node** %op0.addr, align 8, !dbg !3391
  %33 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !3392
  %call12 = call zeroext i8 @handled_component_p(%union.tree_node* %33), !dbg !3394
  %tobool = icmp ne i8 %call12, 0, !dbg !3394
  br i1 %tobool, label %if.end14, label %if.then13, !dbg !3395

if.then13:                                        ; preds = %sw.bb10
  store i8 0, i8* %retval, align 1, !dbg !3396
  br label %return, !dbg !3396

if.end14:                                         ; preds = %sw.bb10
  %34 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !3397
  %call15 = call %union.tree_node* @get_inner_reference(%union.tree_node* %34, i64* %pbitsize, i64* %pbitpos, %union.tree_node** %poffset, i32* %pmode, i32* %punsignedp, i32* %pvolatilep, i8 zeroext 0), !dbg !3398
  store %union.tree_node* %call15, %union.tree_node** %base11, align 8, !dbg !3399
  %35 = load i64, i64* %pbitpos, align 8, !dbg !3400
  %rem = srem i64 %35, 8, !dbg !3402
  %cmp16 = icmp ne i64 %rem, 0, !dbg !3403
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !3404

if.then17:                                        ; preds = %if.end14
  store i8 0, i8* %retval, align 1, !dbg !3405
  br label %return, !dbg !3405

if.end18:                                         ; preds = %if.end14
  %36 = load %union.tree_node*, %union.tree_node** %base11, align 8, !dbg !3406
  %call19 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %36), !dbg !3406
  store %union.tree_node* %call19, %union.tree_node** %base11, align 8, !dbg !3407
  %37 = load i64, i64* %pbitpos, align 8, !dbg !3408
  %div = sdiv i64 %37, 8, !dbg !3408
  %call20 = call %union.tree_node* @size_int_kind(i64 %div, i32 1), !dbg !3408
  store %union.tree_node* %call20, %union.tree_node** %off0, align 8, !dbg !3409
  %38 = load %union.tree_node*, %union.tree_node** %poffset, align 8, !dbg !3410
  %tobool21 = icmp ne %union.tree_node* %38, null, !dbg !3410
  br i1 %tobool21, label %if.then22, label %if.end49, !dbg !3412

if.then22:                                        ; preds = %if.end18
  %39 = load %union.tree_node*, %union.tree_node** %poffset, align 8, !dbg !3413
  call void @split_constant_offset(%union.tree_node* %39, %union.tree_node** %poffset, %union.tree_node** %off1), !dbg !3415
  %40 = load %union.tree_node*, %union.tree_node** %off0, align 8, !dbg !3416
  %41 = load %union.tree_node*, %union.tree_node** %off1, align 8, !dbg !3416
  %call23 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %40, %union.tree_node* %41), !dbg !3416
  store %union.tree_node* %call23, %union.tree_node** %off0, align 8, !dbg !3417
  %42 = load %union.tree_node*, %union.tree_node** %base11, align 8, !dbg !3418
  %common = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !3418
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3418
  %43 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !3418
  %base25 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !3418
  %44 = bitcast %struct.tree_base* %base25 to i64*, !dbg !3418
  %bf.load26 = load i64, i64* %44, align 8, !dbg !3418
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !3418
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !3418
  %cmp29 = icmp eq i32 %bf.cast28, 10, !dbg !3418
  br i1 %cmp29, label %if.then37, label %lor.lhs.false, !dbg !3418

lor.lhs.false:                                    ; preds = %if.then22
  %45 = load %union.tree_node*, %union.tree_node** %base11, align 8, !dbg !3418
  %common30 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !3418
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !3418
  %46 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !3418
  %base32 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !3418
  %47 = bitcast %struct.tree_base* %base32 to i64*, !dbg !3418
  %bf.load33 = load i64, i64* %47, align 8, !dbg !3418
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !3418
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !3418
  %cmp36 = icmp eq i32 %bf.cast35, 12, !dbg !3418
  br i1 %cmp36, label %if.then37, label %if.else, !dbg !3420

if.then37:                                        ; preds = %lor.lhs.false, %if.then22
  %48 = load %union.tree_node*, %union.tree_node** %base11, align 8, !dbg !3421
  %common38 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !3421
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !3421
  %49 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !3421
  %50 = load %union.tree_node*, %union.tree_node** %base11, align 8, !dbg !3421
  %51 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !3421
  %52 = load %union.tree_node*, %union.tree_node** %poffset, align 8, !dbg !3421
  %call40 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %51, %union.tree_node* %52), !dbg !3421
  %call41 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %49, %union.tree_node* %50, %union.tree_node* %call40), !dbg !3421
  store %union.tree_node* %call41, %union.tree_node** %base11, align 8, !dbg !3422
  br label %if.end48, !dbg !3423

if.else:                                          ; preds = %lor.lhs.false
  %53 = load %union.tree_node*, %union.tree_node** %base11, align 8, !dbg !3424
  %common42 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !3424
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !3424
  %54 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !3424
  %55 = load %union.tree_node*, %union.tree_node** %base11, align 8, !dbg !3424
  %56 = load %union.tree_node*, %union.tree_node** %base11, align 8, !dbg !3424
  %common44 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !3424
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 2, !dbg !3424
  %57 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !3424
  %58 = load %union.tree_node*, %union.tree_node** %poffset, align 8, !dbg !3424
  %call46 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %57, %union.tree_node* %58), !dbg !3424
  %call47 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %54, %union.tree_node* %55, %union.tree_node* %call46), !dbg !3424
  store %union.tree_node* %call47, %union.tree_node** %base11, align 8, !dbg !3425
  br label %if.end48

if.end48:                                         ; preds = %if.else, %if.then37
  br label %if.end49, !dbg !3426

if.end49:                                         ; preds = %if.end48, %if.end18
  %59 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3427
  %60 = load %union.tree_node*, %union.tree_node** %base11, align 8, !dbg !3427
  %call50 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %59, %union.tree_node* %60), !dbg !3427
  store %union.tree_node* %call50, %union.tree_node** %var0, align 8, !dbg !3428
  br label %while.cond, !dbg !3429

while.cond:                                       ; preds = %while.body, %if.end49
  %61 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3430
  %base51 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !3430
  %62 = bitcast %struct.tree_base* %base51 to i64*, !dbg !3430
  %bf.load52 = load i64, i64* %62, align 8, !dbg !3430
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !3430
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !3430
  %cmp55 = icmp eq i32 %bf.cast54, 10, !dbg !3430
  br i1 %cmp55, label %lor.end, label %lor.rhs, !dbg !3430

lor.rhs:                                          ; preds = %while.cond
  %63 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3430
  %base56 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !3430
  %64 = bitcast %struct.tree_base* %base56 to i64*, !dbg !3430
  %bf.load57 = load i64, i64* %64, align 8, !dbg !3430
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !3430
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !3430
  %cmp60 = icmp eq i32 %bf.cast59, 12, !dbg !3430
  br label %lor.end, !dbg !3430

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %65 = phi i1 [ true, %while.cond ], [ %cmp60, %lor.rhs ]
  br i1 %65, label %while.body, label %while.end, !dbg !3429

while.body:                                       ; preds = %lor.end
  %66 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3431
  %common61 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !3431
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !3431
  %67 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !3431
  store %union.tree_node* %67, %union.tree_node** %type.addr, align 8, !dbg !3432
  br label %while.cond, !dbg !3429, !llvm.loop !3433

while.end:                                        ; preds = %lor.end
  %68 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3434
  %call63 = call i64 @int_size_in_bytes(%union.tree_node* %68), !dbg !3436
  %cmp64 = icmp slt i64 %call63, 0, !dbg !3437
  br i1 %cmp64, label %if.then65, label %if.end66, !dbg !3438

if.then65:                                        ; preds = %while.end
  store i8 0, i8* %retval, align 1, !dbg !3439
  br label %return, !dbg !3439

if.end66:                                         ; preds = %while.end
  %69 = load %union.tree_node*, %union.tree_node** %var0, align 8, !dbg !3440
  %70 = load %union.tree_node**, %union.tree_node*** %var.addr, align 8, !dbg !3441
  store %union.tree_node* %69, %union.tree_node** %70, align 8, !dbg !3442
  %71 = load %union.tree_node*, %union.tree_node** %off0, align 8, !dbg !3443
  %72 = load %union.tree_node**, %union.tree_node*** %off.addr, align 8, !dbg !3444
  store %union.tree_node* %71, %union.tree_node** %72, align 8, !dbg !3445
  store i8 1, i8* %retval, align 1, !dbg !3446
  br label %return, !dbg !3446

sw.bb67:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !3447, metadata !DIExpression()), !dbg !3449
  %73 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !3450
  %ssa_name = bitcast %union.tree_node* %73 to %struct.tree_ssa_name*, !dbg !3450
  %def_stmt68 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3450
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt68, align 8, !dbg !3450
  store %union.gimple_statement_d* %74, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3449
  call void @llvm.dbg.declare(metadata i32* %subcode, metadata !3451, metadata !DIExpression()), !dbg !3452
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3453
  %call69 = call i32 @gimple_code(%union.gimple_statement_d* %75), !dbg !3455
  %cmp70 = icmp ne i32 %call69, 6, !dbg !3456
  br i1 %cmp70, label %if.then71, label %if.end72, !dbg !3457

if.then71:                                        ; preds = %sw.bb67
  store i8 0, i8* %retval, align 1, !dbg !3458
  br label %return, !dbg !3458

if.end72:                                         ; preds = %sw.bb67
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3459
  %call73 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %76), !dbg !3460
  store %union.tree_node* %call73, %union.tree_node** %var0, align 8, !dbg !3461
  %77 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3462
  %call74 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %77), !dbg !3463
  store i32 %call74, i32* %subcode, align 4, !dbg !3464
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3465
  %call75 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %78), !dbg !3466
  store %union.tree_node* %call75, %union.tree_node** %var1, align 8, !dbg !3467
  %79 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3468
  %80 = load %union.tree_node*, %union.tree_node** %var0, align 8, !dbg !3469
  %81 = load i32, i32* %subcode, align 4, !dbg !3470
  %82 = load %union.tree_node*, %union.tree_node** %var1, align 8, !dbg !3471
  %83 = load %union.tree_node**, %union.tree_node*** %var.addr, align 8, !dbg !3472
  %84 = load %union.tree_node**, %union.tree_node*** %off.addr, align 8, !dbg !3473
  %call76 = call zeroext i8 @split_constant_offset_1(%union.tree_node* %79, %union.tree_node* %80, i32 %81, %union.tree_node* %82, %union.tree_node** %83, %union.tree_node** %84), !dbg !3474
  store i8 %call76, i8* %retval, align 1, !dbg !3475
  br label %return, !dbg !3475

sw.bb77:                                          ; preds = %entry, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %itype, metadata !3476, metadata !DIExpression()), !dbg !3478
  %85 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !3479
  %common78 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !3479
  %type79 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common78, i32 0, i32 2, !dbg !3479
  %86 = load %union.tree_node*, %union.tree_node** %type79, align 8, !dbg !3479
  store %union.tree_node* %86, %union.tree_node** %itype, align 8, !dbg !3478
  %87 = load %union.tree_node*, %union.tree_node** %itype, align 8, !dbg !3480
  %base80 = bitcast %union.tree_node* %87 to %struct.tree_base*, !dbg !3480
  %88 = bitcast %struct.tree_base* %base80 to i64*, !dbg !3480
  %bf.load81 = load i64, i64* %88, align 8, !dbg !3480
  %bf.clear82 = and i64 %bf.load81, 65535, !dbg !3480
  %bf.cast83 = trunc i64 %bf.clear82 to i32, !dbg !3480
  %cmp84 = icmp eq i32 %bf.cast83, 10, !dbg !3480
  br i1 %cmp84, label %land.lhs.true120, label %lor.lhs.false85, !dbg !3480

lor.lhs.false85:                                  ; preds = %sw.bb77
  %89 = load %union.tree_node*, %union.tree_node** %itype, align 8, !dbg !3480
  %base86 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !3480
  %90 = bitcast %struct.tree_base* %base86 to i64*, !dbg !3480
  %bf.load87 = load i64, i64* %90, align 8, !dbg !3480
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !3480
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !3480
  %cmp90 = icmp eq i32 %bf.cast89, 12, !dbg !3480
  br i1 %cmp90, label %land.lhs.true120, label %lor.lhs.false91, !dbg !3482

lor.lhs.false91:                                  ; preds = %lor.lhs.false85
  %91 = load %union.tree_node*, %union.tree_node** %itype, align 8, !dbg !3483
  %base92 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !3483
  %92 = bitcast %struct.tree_base* %base92 to i64*, !dbg !3483
  %bf.load93 = load i64, i64* %92, align 8, !dbg !3483
  %bf.clear94 = and i64 %bf.load93, 65535, !dbg !3483
  %bf.cast95 = trunc i64 %bf.clear94 to i32, !dbg !3483
  %cmp96 = icmp eq i32 %bf.cast95, 6, !dbg !3483
  br i1 %cmp96, label %land.lhs.true, label %lor.lhs.false97, !dbg !3483

lor.lhs.false97:                                  ; preds = %lor.lhs.false91
  %93 = load %union.tree_node*, %union.tree_node** %itype, align 8, !dbg !3483
  %base98 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !3483
  %94 = bitcast %struct.tree_base* %base98 to i64*, !dbg !3483
  %bf.load99 = load i64, i64* %94, align 8, !dbg !3483
  %bf.clear100 = and i64 %bf.load99, 65535, !dbg !3483
  %bf.cast101 = trunc i64 %bf.clear100 to i32, !dbg !3483
  %cmp102 = icmp eq i32 %bf.cast101, 7, !dbg !3483
  br i1 %cmp102, label %land.lhs.true, label %lor.lhs.false103, !dbg !3483

lor.lhs.false103:                                 ; preds = %lor.lhs.false97
  %95 = load %union.tree_node*, %union.tree_node** %itype, align 8, !dbg !3483
  %base104 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !3483
  %96 = bitcast %struct.tree_base* %base104 to i64*, !dbg !3483
  %bf.load105 = load i64, i64* %96, align 8, !dbg !3483
  %bf.clear106 = and i64 %bf.load105, 65535, !dbg !3483
  %bf.cast107 = trunc i64 %bf.clear106 to i32, !dbg !3483
  %cmp108 = icmp eq i32 %bf.cast107, 8, !dbg !3483
  br i1 %cmp108, label %land.lhs.true, label %if.end161, !dbg !3484

land.lhs.true:                                    ; preds = %lor.lhs.false103, %lor.lhs.false97, %lor.lhs.false91
  %97 = load %union.tree_node*, %union.tree_node** %itype, align 8, !dbg !3485
  %base109 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !3485
  %98 = bitcast %struct.tree_base* %base109 to i64*, !dbg !3485
  %bf.load110 = load i64, i64* %98, align 8, !dbg !3485
  %bf.lshr = lshr i64 %bf.load110, 21, !dbg !3485
  %bf.clear111 = and i64 %bf.lshr, 1, !dbg !3485
  %bf.cast112 = trunc i64 %bf.clear111 to i32, !dbg !3485
  %tobool113 = icmp ne i32 %bf.cast112, 0, !dbg !3485
  br i1 %tobool113, label %if.end161, label %land.lhs.true114, !dbg !3485

land.lhs.true114:                                 ; preds = %land.lhs.true
  %99 = load i32, i32* @flag_wrapv, align 4, !dbg !3485
  %tobool115 = icmp ne i32 %99, 0, !dbg !3485
  br i1 %tobool115, label %if.end161, label %land.lhs.true116, !dbg !3485

land.lhs.true116:                                 ; preds = %land.lhs.true114
  %100 = load i32, i32* @flag_trapv, align 4, !dbg !3485
  %tobool117 = icmp ne i32 %100, 0, !dbg !3485
  br i1 %tobool117, label %if.end161, label %land.lhs.true118, !dbg !3485

land.lhs.true118:                                 ; preds = %land.lhs.true116
  %101 = load i32, i32* @flag_strict_overflow, align 4, !dbg !3485
  %tobool119 = icmp ne i32 %101, 0, !dbg !3485
  br i1 %tobool119, label %land.lhs.true120, label %if.end161, !dbg !3486

land.lhs.true120:                                 ; preds = %land.lhs.true118, %lor.lhs.false85, %sw.bb77
  %102 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3487
  %type121 = bitcast %union.tree_node* %102 to %struct.tree_type*, !dbg !3487
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type121, i32 0, i32 6, !dbg !3487
  %bf.load122 = load i32, i32* %precision, align 4, !dbg !3487
  %bf.clear123 = and i32 %bf.load122, 1023, !dbg !3487
  %103 = load %union.tree_node*, %union.tree_node** %itype, align 8, !dbg !3488
  %type124 = bitcast %union.tree_node* %103 to %struct.tree_type*, !dbg !3488
  %precision125 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type124, i32 0, i32 6, !dbg !3488
  %bf.load126 = load i32, i32* %precision125, align 4, !dbg !3488
  %bf.clear127 = and i32 %bf.load126, 1023, !dbg !3488
  %cmp128 = icmp sge i32 %bf.clear123, %bf.clear127, !dbg !3489
  br i1 %cmp128, label %land.lhs.true129, label %if.end161, !dbg !3490

land.lhs.true129:                                 ; preds = %land.lhs.true120
  %104 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3491
  %base130 = bitcast %union.tree_node* %104 to %struct.tree_base*, !dbg !3491
  %105 = bitcast %struct.tree_base* %base130 to i64*, !dbg !3491
  %bf.load131 = load i64, i64* %105, align 8, !dbg !3491
  %bf.clear132 = and i64 %bf.load131, 65535, !dbg !3491
  %bf.cast133 = trunc i64 %bf.clear132 to i32, !dbg !3491
  %cmp134 = icmp eq i32 %bf.cast133, 10, !dbg !3491
  br i1 %cmp134, label %if.then159, label %lor.lhs.false135, !dbg !3491

lor.lhs.false135:                                 ; preds = %land.lhs.true129
  %106 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3491
  %base136 = bitcast %union.tree_node* %106 to %struct.tree_base*, !dbg !3491
  %107 = bitcast %struct.tree_base* %base136 to i64*, !dbg !3491
  %bf.load137 = load i64, i64* %107, align 8, !dbg !3491
  %bf.clear138 = and i64 %bf.load137, 65535, !dbg !3491
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !3491
  %cmp140 = icmp eq i32 %bf.cast139, 12, !dbg !3491
  br i1 %cmp140, label %if.then159, label %lor.lhs.false141, !dbg !3492

lor.lhs.false141:                                 ; preds = %lor.lhs.false135
  %108 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3493
  %base142 = bitcast %union.tree_node* %108 to %struct.tree_base*, !dbg !3493
  %109 = bitcast %struct.tree_base* %base142 to i64*, !dbg !3493
  %bf.load143 = load i64, i64* %109, align 8, !dbg !3493
  %bf.clear144 = and i64 %bf.load143, 65535, !dbg !3493
  %bf.cast145 = trunc i64 %bf.clear144 to i32, !dbg !3493
  %cmp146 = icmp eq i32 %bf.cast145, 6, !dbg !3493
  br i1 %cmp146, label %if.then159, label %lor.lhs.false147, !dbg !3493

lor.lhs.false147:                                 ; preds = %lor.lhs.false141
  %110 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3493
  %base148 = bitcast %union.tree_node* %110 to %struct.tree_base*, !dbg !3493
  %111 = bitcast %struct.tree_base* %base148 to i64*, !dbg !3493
  %bf.load149 = load i64, i64* %111, align 8, !dbg !3493
  %bf.clear150 = and i64 %bf.load149, 65535, !dbg !3493
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !3493
  %cmp152 = icmp eq i32 %bf.cast151, 7, !dbg !3493
  br i1 %cmp152, label %if.then159, label %lor.lhs.false153, !dbg !3493

lor.lhs.false153:                                 ; preds = %lor.lhs.false147
  %112 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3493
  %base154 = bitcast %union.tree_node* %112 to %struct.tree_base*, !dbg !3493
  %113 = bitcast %struct.tree_base* %base154 to i64*, !dbg !3493
  %bf.load155 = load i64, i64* %113, align 8, !dbg !3493
  %bf.clear156 = and i64 %bf.load155, 65535, !dbg !3493
  %bf.cast157 = trunc i64 %bf.clear156 to i32, !dbg !3493
  %cmp158 = icmp eq i32 %bf.cast157, 8, !dbg !3493
  br i1 %cmp158, label %if.then159, label %if.end161, !dbg !3494

if.then159:                                       ; preds = %lor.lhs.false153, %lor.lhs.false147, %lor.lhs.false141, %lor.lhs.false135, %land.lhs.true129
  %114 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !3495
  %115 = load %union.tree_node**, %union.tree_node*** %off.addr, align 8, !dbg !3497
  call void @split_constant_offset(%union.tree_node* %114, %union.tree_node** %var0, %union.tree_node** %115), !dbg !3498
  %116 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3499
  %117 = load %union.tree_node*, %union.tree_node** %var0, align 8, !dbg !3499
  %call160 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %116, %union.tree_node* %117), !dbg !3499
  %118 = load %union.tree_node**, %union.tree_node*** %var.addr, align 8, !dbg !3500
  store %union.tree_node* %call160, %union.tree_node** %118, align 8, !dbg !3501
  store i8 1, i8* %retval, align 1, !dbg !3502
  br label %return, !dbg !3502

if.end161:                                        ; preds = %lor.lhs.false153, %land.lhs.true120, %land.lhs.true118, %land.lhs.true116, %land.lhs.true114, %land.lhs.true, %lor.lhs.false103
  store i8 0, i8* %retval, align 1, !dbg !3503
  br label %return, !dbg !3503

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3504
  br label %return, !dbg !3504

return:                                           ; preds = %sw.default, %if.end161, %if.then159, %if.end72, %if.then71, %if.end66, %if.then65, %if.then17, %if.then13, %if.end, %if.then, %sw.bb3, %sw.bb
  %119 = load i8, i8* %retval, align 1, !dbg !3505
  ret i8 %119, !dbg !3505
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @dr_analyze_innermost(%struct.data_reference* %dr) #0 !dbg !3506 {
entry:
  %retval = alloca i8, align 1
  %dr.addr = alloca %struct.data_reference*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %loop = alloca %struct.loop*, align 8
  %ref = alloca %union.tree_node*, align 8
  %pbitsize = alloca i64, align 8
  %pbitpos = alloca i64, align 8
  %base = alloca %union.tree_node*, align 8
  %poffset = alloca %union.tree_node*, align 8
  %pmode = alloca i32, align 4
  %punsignedp = alloca i32, align 4
  %pvolatilep = alloca i32, align 4
  %base_iv = alloca %struct.affine_iv, align 8
  %offset_iv = alloca %struct.affine_iv, align 8
  %init = alloca %union.tree_node*, align 8
  %dinit = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  %in_loop = alloca i8, align 1
  store %struct.data_reference* %dr, %struct.data_reference** %dr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr.addr, metadata !3509, metadata !DIExpression()), !dbg !3510
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3511, metadata !DIExpression()), !dbg !3512
  %0 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3513
  %stmt1 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %0, i32 0, i32 0, !dbg !3513
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !3513
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !3512
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3514, metadata !DIExpression()), !dbg !3515
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3516
  %call = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %2), !dbg !3517
  store %struct.loop* %call, %struct.loop** %loop, align 8, !dbg !3515
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !3518, metadata !DIExpression()), !dbg !3519
  %3 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3520
  %ref2 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %3, i32 0, i32 1, !dbg !3520
  %4 = load %union.tree_node*, %union.tree_node** %ref2, align 8, !dbg !3520
  store %union.tree_node* %4, %union.tree_node** %ref, align 8, !dbg !3519
  call void @llvm.dbg.declare(metadata i64* %pbitsize, metadata !3521, metadata !DIExpression()), !dbg !3522
  call void @llvm.dbg.declare(metadata i64* %pbitpos, metadata !3523, metadata !DIExpression()), !dbg !3524
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !3525, metadata !DIExpression()), !dbg !3526
  call void @llvm.dbg.declare(metadata %union.tree_node** %poffset, metadata !3527, metadata !DIExpression()), !dbg !3528
  call void @llvm.dbg.declare(metadata i32* %pmode, metadata !3529, metadata !DIExpression()), !dbg !3530
  call void @llvm.dbg.declare(metadata i32* %punsignedp, metadata !3531, metadata !DIExpression()), !dbg !3532
  call void @llvm.dbg.declare(metadata i32* %pvolatilep, metadata !3533, metadata !DIExpression()), !dbg !3534
  call void @llvm.dbg.declare(metadata %struct.affine_iv* %base_iv, metadata !3535, metadata !DIExpression()), !dbg !3542
  call void @llvm.dbg.declare(metadata %struct.affine_iv* %offset_iv, metadata !3543, metadata !DIExpression()), !dbg !3544
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !3545, metadata !DIExpression()), !dbg !3546
  call void @llvm.dbg.declare(metadata %union.tree_node** %dinit, metadata !3547, metadata !DIExpression()), !dbg !3548
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !3549, metadata !DIExpression()), !dbg !3550
  call void @llvm.dbg.declare(metadata i8* %in_loop, metadata !3551, metadata !DIExpression()), !dbg !3552
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3553
  %tobool = icmp ne %struct.loop* %5, null, !dbg !3553
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3554

land.rhs:                                         ; preds = %entry
  %6 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3555
  %num = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 0, !dbg !3556
  %7 = load i32, i32* %num, align 8, !dbg !3556
  %tobool3 = icmp ne i32 %7, 0, !dbg !3554
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !3557
  %land.ext = zext i1 %8 to i32, !dbg !3554
  %conv = trunc i32 %land.ext to i8, !dbg !3558
  store i8 %conv, i8* %in_loop, align 1, !dbg !3552
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3559
  %tobool4 = icmp ne %struct._IO_FILE* %9, null, !dbg !3559
  br i1 %tobool4, label %land.lhs.true, label %if.end, !dbg !3561

land.lhs.true:                                    ; preds = %land.end
  %10 = load i32, i32* @dump_flags, align 4, !dbg !3562
  %and = and i32 %10, 8, !dbg !3563
  %tobool5 = icmp ne i32 %and, 0, !dbg !3563
  br i1 %tobool5, label %if.then, label %if.end, !dbg !3564

if.then:                                          ; preds = %land.lhs.true
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3565
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.43, i64 0, i64 0)), !dbg !3566
  br label %if.end, !dbg !3566

if.end:                                           ; preds = %if.then, %land.lhs.true, %land.end
  %12 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !3567
  %call7 = call %union.tree_node* @get_inner_reference(%union.tree_node* %12, i64* %pbitsize, i64* %pbitpos, %union.tree_node** %poffset, i32* %pmode, i32* %punsignedp, i32* %pvolatilep, i8 zeroext 0), !dbg !3568
  store %union.tree_node* %call7, %union.tree_node** %base, align 8, !dbg !3569
  %13 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3570
  %cmp = icmp ne %union.tree_node* %13, null, !dbg !3570
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3570

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 742, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !3570
  br label %cond.end, !dbg !3570

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3570

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3570
  %14 = load i64, i64* %pbitpos, align 8, !dbg !3571
  %rem = srem i64 %14, 8, !dbg !3573
  %cmp9 = icmp ne i64 %rem, 0, !dbg !3574
  br i1 %cmp9, label %if.then11, label %if.end19, !dbg !3575

if.then11:                                        ; preds = %cond.end
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3576
  %tobool12 = icmp ne %struct._IO_FILE* %15, null, !dbg !3576
  br i1 %tobool12, label %land.lhs.true13, label %if.end18, !dbg !3579

land.lhs.true13:                                  ; preds = %if.then11
  %16 = load i32, i32* @dump_flags, align 4, !dbg !3580
  %and14 = and i32 %16, 8, !dbg !3581
  %tobool15 = icmp ne i32 %and14, 0, !dbg !3581
  br i1 %tobool15, label %if.then16, label %if.end18, !dbg !3582

if.then16:                                        ; preds = %land.lhs.true13
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3583
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.46, i64 0, i64 0)), !dbg !3584
  br label %if.end18, !dbg !3584

if.end18:                                         ; preds = %if.then16, %land.lhs.true13, %if.then11
  store i8 0, i8* %retval, align 1, !dbg !3585
  br label %return, !dbg !3585

if.end19:                                         ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3586
  %call20 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %18), !dbg !3586
  store %union.tree_node* %call20, %union.tree_node** %base, align 8, !dbg !3587
  %19 = load i8, i8* %in_loop, align 1, !dbg !3588
  %tobool21 = icmp ne i8 %19, 0, !dbg !3588
  br i1 %tobool21, label %if.then22, label %if.else, !dbg !3590

if.then22:                                        ; preds = %if.end19
  %20 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3591
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3594
  %call23 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %21), !dbg !3595
  %22 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3596
  %call24 = call zeroext i8 @simple_iv(%struct.loop* %20, %struct.loop* %call23, %union.tree_node* %22, %struct.affine_iv* %base_iv, i8 zeroext 0), !dbg !3597
  %tobool25 = icmp ne i8 %call24, 0, !dbg !3597
  br i1 %tobool25, label %if.end34, label %if.then26, !dbg !3598

if.then26:                                        ; preds = %if.then22
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3599
  %tobool27 = icmp ne %struct._IO_FILE* %23, null, !dbg !3599
  br i1 %tobool27, label %land.lhs.true28, label %if.end33, !dbg !3602

land.lhs.true28:                                  ; preds = %if.then26
  %24 = load i32, i32* @dump_flags, align 4, !dbg !3603
  %and29 = and i32 %24, 8, !dbg !3604
  %tobool30 = icmp ne i32 %and29, 0, !dbg !3604
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !3605

if.then31:                                        ; preds = %land.lhs.true28
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3606
  %call32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.47, i64 0, i64 0)), !dbg !3607
  br label %if.end33, !dbg !3607

if.end33:                                         ; preds = %if.then31, %land.lhs.true28, %if.then26
  store i8 0, i8* %retval, align 1, !dbg !3608
  br label %return, !dbg !3608

if.end34:                                         ; preds = %if.then22
  br label %if.end38, !dbg !3609

if.else:                                          ; preds = %if.end19
  %26 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3610
  %base35 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %base_iv, i32 0, i32 0, !dbg !3612
  store %union.tree_node* %26, %union.tree_node** %base35, align 8, !dbg !3613
  %call36 = call %union.tree_node* @size_int_kind(i64 0, i32 1), !dbg !3614
  %step37 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %base_iv, i32 0, i32 1, !dbg !3615
  store %union.tree_node* %call36, %union.tree_node** %step37, align 8, !dbg !3616
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %base_iv, i32 0, i32 2, !dbg !3617
  store i8 1, i8* %no_overflow, align 8, !dbg !3618
  br label %if.end38

if.end38:                                         ; preds = %if.else, %if.end34
  %27 = load %union.tree_node*, %union.tree_node** %poffset, align 8, !dbg !3619
  %tobool39 = icmp ne %union.tree_node* %27, null, !dbg !3619
  br i1 %tobool39, label %if.else45, label %if.then40, !dbg !3621

if.then40:                                        ; preds = %if.end38
  %call41 = call %union.tree_node* @size_int_kind(i64 0, i32 1), !dbg !3622
  %base42 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %offset_iv, i32 0, i32 0, !dbg !3624
  store %union.tree_node* %call41, %union.tree_node** %base42, align 8, !dbg !3625
  %call43 = call %union.tree_node* @size_int_kind(i64 0, i32 1), !dbg !3626
  %step44 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %offset_iv, i32 0, i32 1, !dbg !3627
  store %union.tree_node* %call43, %union.tree_node** %step44, align 8, !dbg !3628
  br label %if.end65, !dbg !3629

if.else45:                                        ; preds = %if.end38
  %28 = load i8, i8* %in_loop, align 1, !dbg !3630
  %tobool46 = icmp ne i8 %28, 0, !dbg !3630
  br i1 %tobool46, label %if.else51, label %if.then47, !dbg !3633

if.then47:                                        ; preds = %if.else45
  %29 = load %union.tree_node*, %union.tree_node** %poffset, align 8, !dbg !3634
  %base48 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %offset_iv, i32 0, i32 0, !dbg !3636
  store %union.tree_node* %29, %union.tree_node** %base48, align 8, !dbg !3637
  %call49 = call %union.tree_node* @size_int_kind(i64 0, i32 1), !dbg !3638
  %step50 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %offset_iv, i32 0, i32 1, !dbg !3639
  store %union.tree_node* %call49, %union.tree_node** %step50, align 8, !dbg !3640
  br label %if.end64, !dbg !3641

if.else51:                                        ; preds = %if.else45
  %30 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3642
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3644
  %call52 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %31), !dbg !3645
  %32 = load %union.tree_node*, %union.tree_node** %poffset, align 8, !dbg !3646
  %call53 = call zeroext i8 @simple_iv(%struct.loop* %30, %struct.loop* %call52, %union.tree_node* %32, %struct.affine_iv* %offset_iv, i8 zeroext 0), !dbg !3647
  %tobool54 = icmp ne i8 %call53, 0, !dbg !3647
  br i1 %tobool54, label %if.end63, label %if.then55, !dbg !3648

if.then55:                                        ; preds = %if.else51
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3649
  %tobool56 = icmp ne %struct._IO_FILE* %33, null, !dbg !3649
  br i1 %tobool56, label %land.lhs.true57, label %if.end62, !dbg !3652

land.lhs.true57:                                  ; preds = %if.then55
  %34 = load i32, i32* @dump_flags, align 4, !dbg !3653
  %and58 = and i32 %34, 8, !dbg !3654
  %tobool59 = icmp ne i32 %and58, 0, !dbg !3654
  br i1 %tobool59, label %if.then60, label %if.end62, !dbg !3655

if.then60:                                        ; preds = %land.lhs.true57
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3656
  %call61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.48, i64 0, i64 0)), !dbg !3657
  br label %if.end62, !dbg !3657

if.end62:                                         ; preds = %if.then60, %land.lhs.true57, %if.then55
  store i8 0, i8* %retval, align 1, !dbg !3658
  br label %return, !dbg !3658

if.end63:                                         ; preds = %if.else51
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then47
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then40
  %36 = load i64, i64* %pbitpos, align 8, !dbg !3659
  %div = sdiv i64 %36, 8, !dbg !3659
  %call66 = call %union.tree_node* @size_int_kind(i64 %div, i32 1), !dbg !3659
  store %union.tree_node* %call66, %union.tree_node** %init, align 8, !dbg !3660
  %base67 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %base_iv, i32 0, i32 0, !dbg !3661
  %37 = load %union.tree_node*, %union.tree_node** %base67, align 8, !dbg !3661
  %base68 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %base_iv, i32 0, i32 0, !dbg !3662
  call void @split_constant_offset(%union.tree_node* %37, %union.tree_node** %base68, %union.tree_node** %dinit), !dbg !3663
  %38 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !3664
  %39 = load %union.tree_node*, %union.tree_node** %dinit, align 8, !dbg !3664
  %call69 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %38, %union.tree_node* %39), !dbg !3664
  store %union.tree_node* %call69, %union.tree_node** %init, align 8, !dbg !3665
  %base70 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %offset_iv, i32 0, i32 0, !dbg !3666
  %40 = load %union.tree_node*, %union.tree_node** %base70, align 8, !dbg !3666
  %base71 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %offset_iv, i32 0, i32 0, !dbg !3667
  call void @split_constant_offset(%union.tree_node* %40, %union.tree_node** %base71, %union.tree_node** %dinit), !dbg !3668
  %41 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !3669
  %42 = load %union.tree_node*, %union.tree_node** %dinit, align 8, !dbg !3669
  %call72 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %41, %union.tree_node* %42), !dbg !3669
  store %union.tree_node* %call72, %union.tree_node** %init, align 8, !dbg !3670
  %43 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !3671
  %step73 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %base_iv, i32 0, i32 1, !dbg !3671
  %44 = load %union.tree_node*, %union.tree_node** %step73, align 8, !dbg !3671
  %call74 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %43, %union.tree_node* %44), !dbg !3671
  %45 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !3671
  %step75 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %offset_iv, i32 0, i32 1, !dbg !3671
  %46 = load %union.tree_node*, %union.tree_node** %step75, align 8, !dbg !3671
  %call76 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %45, %union.tree_node* %46), !dbg !3671
  %call77 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call74, %union.tree_node* %call76), !dbg !3671
  store %union.tree_node* %call77, %union.tree_node** %step, align 8, !dbg !3672
  %base78 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %base_iv, i32 0, i32 0, !dbg !3673
  %47 = load %union.tree_node*, %union.tree_node** %base78, align 8, !dbg !3673
  %call79 = call %union.tree_node* @canonicalize_base_object_address(%union.tree_node* %47), !dbg !3674
  %48 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3675
  %innermost = getelementptr inbounds %struct.data_reference, %struct.data_reference* %48, i32 0, i32 4, !dbg !3675
  %base_address = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost, i32 0, i32 0, !dbg !3675
  store %union.tree_node* %call79, %union.tree_node** %base_address, align 8, !dbg !3676
  %49 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !3677
  %base80 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %offset_iv, i32 0, i32 0, !dbg !3677
  %50 = load %union.tree_node*, %union.tree_node** %base80, align 8, !dbg !3677
  %call81 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %49, %union.tree_node* %50), !dbg !3677
  %51 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3678
  %innermost82 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %51, i32 0, i32 4, !dbg !3678
  %offset = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost82, i32 0, i32 1, !dbg !3678
  store %union.tree_node* %call81, %union.tree_node** %offset, align 8, !dbg !3679
  %52 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !3680
  %53 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3681
  %innermost83 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %53, i32 0, i32 4, !dbg !3681
  %init84 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost83, i32 0, i32 2, !dbg !3681
  store %union.tree_node* %52, %union.tree_node** %init84, align 8, !dbg !3682
  %54 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !3683
  %55 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3684
  %innermost85 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %55, i32 0, i32 4, !dbg !3684
  %step86 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost85, i32 0, i32 3, !dbg !3684
  store %union.tree_node* %54, %union.tree_node** %step86, align 8, !dbg !3685
  %base87 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %offset_iv, i32 0, i32 0, !dbg !3686
  %56 = load %union.tree_node*, %union.tree_node** %base87, align 8, !dbg !3686
  %call88 = call i64 @highest_pow2_factor(%union.tree_node* %56), !dbg !3686
  %call89 = call %union.tree_node* @size_int_kind(i64 %call88, i32 0), !dbg !3686
  %57 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3687
  %innermost90 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %57, i32 0, i32 4, !dbg !3687
  %aligned_to = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost90, i32 0, i32 4, !dbg !3687
  store %union.tree_node* %call89, %union.tree_node** %aligned_to, align 8, !dbg !3688
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3689
  %tobool91 = icmp ne %struct._IO_FILE* %58, null, !dbg !3689
  br i1 %tobool91, label %land.lhs.true92, label %if.end97, !dbg !3691

land.lhs.true92:                                  ; preds = %if.end65
  %59 = load i32, i32* @dump_flags, align 4, !dbg !3692
  %and93 = and i32 %59, 8, !dbg !3693
  %tobool94 = icmp ne i32 %and93, 0, !dbg !3693
  br i1 %tobool94, label %if.then95, label %if.end97, !dbg !3694

if.then95:                                        ; preds = %land.lhs.true92
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3695
  %call96 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.49, i64 0, i64 0)), !dbg !3696
  br label %if.end97, !dbg !3696

if.end97:                                         ; preds = %if.then95, %land.lhs.true92, %if.end65
  store i8 1, i8* %retval, align 1, !dbg !3697
  br label %return, !dbg !3697

return:                                           ; preds = %if.end97, %if.end62, %if.end33, %if.end18
  %61 = load i8, i8* %retval, align 1, !dbg !3698
  ret i8 %61, !dbg !3698
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !3699 {
entry:
  %retval = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3703, metadata !DIExpression()), !dbg !3704
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3705, metadata !DIExpression()), !dbg !3706
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3707
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !3708
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !3706
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3709
  %tobool = icmp ne %struct.basic_block_def* %1, null, !dbg !3709
  br i1 %tobool, label %if.end, label %if.then, !dbg !3711

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3712
  br label %return, !dbg !3712

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3713
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !3714
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !3714
  store %struct.loop* %3, %struct.loop** %retval, align 8, !dbg !3715
  br label %return, !dbg !3715

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !3716
  ret %struct.loop* %4, !dbg !3716
}

declare dso_local %union.tree_node* @get_inner_reference(%union.tree_node*, i64*, i64*, %union.tree_node**, i32*, i32*, i32*, i8 zeroext) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

declare dso_local zeroext i8 @simple_iv(%struct.loop*, %struct.loop*, %union.tree_node*, %struct.affine_iv*, i8 zeroext) #2

declare dso_local %union.tree_node* @size_binop_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @canonicalize_base_object_address(%union.tree_node* %addr) #0 !dbg !3717 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %addr.addr = alloca %union.tree_node*, align 8
  %orig = alloca %union.tree_node*, align 8
  store %union.tree_node* %addr, %union.tree_node** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr.addr, metadata !3720, metadata !DIExpression()), !dbg !3721
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig, metadata !3722, metadata !DIExpression()), !dbg !3723
  %0 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3724
  store %union.tree_node* %0, %union.tree_node** %orig, align 8, !dbg !3723
  %1 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3725
  %call = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %1), !dbg !3725
  store %union.tree_node* %call, %union.tree_node** %addr.addr, align 8, !dbg !3725
  %2 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3726
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !3726
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3726
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3726
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3726
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !3726
  %bf.load = load i64, i64* %4, align 8, !dbg !3726
  %bf.clear = and i64 %bf.load, 65535, !dbg !3726
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3726
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !3726
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !3726

lor.lhs.false:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3726
  %common1 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !3726
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !3726
  %6 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !3726
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3726
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !3726
  %bf.load4 = load i64, i64* %7, align 8, !dbg !3726
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !3726
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !3726
  %cmp7 = icmp eq i32 %bf.cast6, 12, !dbg !3726
  br i1 %cmp7, label %if.end, label %if.then, !dbg !3728

if.then:                                          ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %orig, align 8, !dbg !3729
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !3730
  br label %return, !dbg !3730

if.end:                                           ; preds = %lor.lhs.false, %entry
  %9 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3731
  %base8 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3731
  %10 = bitcast %struct.tree_base* %base8 to i64*, !dbg !3731
  %bf.load9 = load i64, i64* %10, align 8, !dbg !3731
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !3731
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !3731
  %cmp12 = icmp ne i32 %bf.cast11, 121, !dbg !3733
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !3734

if.then13:                                        ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3735
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !3736
  br label %return, !dbg !3736

if.end14:                                         ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3737
  %exp = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !3737
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3737
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3737
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3737
  %call15 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %13), !dbg !3737
  store %union.tree_node* %call15, %union.tree_node** %retval, align 8, !dbg !3738
  br label %return, !dbg !3738

return:                                           ; preds = %if.end14, %if.then13, %if.then
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3739
  ret %union.tree_node* %14, !dbg !3739
}

declare dso_local i64 @highest_pow2_factor(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_data_ref(%struct.data_reference* %dr) #0 !dbg !3740 {
entry:
  %dr.addr = alloca %struct.data_reference*, align 8
  store %struct.data_reference* %dr, %struct.data_reference** %dr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr.addr, metadata !3743, metadata !DIExpression()), !dbg !3744
  %0 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3745
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %0, i32 0, i32 5, !dbg !3745
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !3745
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %access_fns), !dbg !3745
  %1 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3746
  %2 = bitcast %struct.data_reference* %1 to i8*, !dbg !3746
  call void @free(i8* %2), !dbg !3747
  ret void, !dbg !3748
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !3749 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !3753, metadata !DIExpression()), !dbg !3754
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3755
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !3755
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !3755
  br i1 %tobool, label %if.then, label %if.end, !dbg !3754

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3755
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !3755
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !3755
  call void @free(i8* %4), !dbg !3755
  br label %if.end, !dbg !3755

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3754
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !3754
  ret void, !dbg !3754
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.data_reference* @create_data_ref(%struct.loop* %nest, %union.tree_node* %memref, %union.gimple_statement_d* %stmt, i8 zeroext %is_read) #0 !dbg !3757 {
entry:
  %nest.addr = alloca %struct.loop*, align 8
  %memref.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %is_read.addr = alloca i8, align 1
  %dr = alloca %struct.data_reference*, align 8
  store %struct.loop* %nest, %struct.loop** %nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %nest.addr, metadata !3760, metadata !DIExpression()), !dbg !3761
  store %union.tree_node* %memref, %union.tree_node** %memref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %memref.addr, metadata !3762, metadata !DIExpression()), !dbg !3763
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3764, metadata !DIExpression()), !dbg !3765
  store i8 %is_read, i8* %is_read.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_read.addr, metadata !3766, metadata !DIExpression()), !dbg !3767
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr, metadata !3768, metadata !DIExpression()), !dbg !3769
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3770
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !3770
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3772

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !3773
  %and = and i32 %1, 8, !dbg !3774
  %tobool1 = icmp ne i32 %and, 0, !dbg !3774
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3775

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3776
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.50, i64 0, i64 0)), !dbg !3778
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3779
  %4 = load %union.tree_node*, %union.tree_node** %memref.addr, align 8, !dbg !3780
  call void @print_generic_expr(%struct._IO_FILE* %3, %union.tree_node* %4, i32 2), !dbg !3781
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3782
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i64 0, i64 0)), !dbg !3783
  br label %if.end, !dbg !3784

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %call3 = call i8* @xcalloc(i64 1, i64 112), !dbg !3785
  %6 = bitcast i8* %call3 to %struct.data_reference*, !dbg !3785
  store %struct.data_reference* %6, %struct.data_reference** %dr, align 8, !dbg !3786
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3787
  %8 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3788
  %stmt4 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %8, i32 0, i32 0, !dbg !3788
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %stmt4, align 8, !dbg !3789
  %9 = load %union.tree_node*, %union.tree_node** %memref.addr, align 8, !dbg !3790
  %10 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3791
  %ref = getelementptr inbounds %struct.data_reference, %struct.data_reference* %10, i32 0, i32 1, !dbg !3791
  store %union.tree_node* %9, %union.tree_node** %ref, align 8, !dbg !3792
  %11 = load i8, i8* %is_read.addr, align 1, !dbg !3793
  %12 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3794
  %is_read5 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %12, i32 0, i32 3, !dbg !3794
  store i8 %11, i8* %is_read5, align 8, !dbg !3795
  %13 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3796
  %call6 = call zeroext i8 @dr_analyze_innermost(%struct.data_reference* %13), !dbg !3797
  %14 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3798
  %15 = load %struct.loop*, %struct.loop** %nest.addr, align 8, !dbg !3799
  call void @dr_analyze_indices(%struct.data_reference* %14, %struct.loop* %15), !dbg !3800
  %16 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3801
  call void @dr_analyze_alias(%struct.data_reference* %16), !dbg !3802
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3803
  %tobool7 = icmp ne %struct._IO_FILE* %17, null, !dbg !3803
  br i1 %tobool7, label %land.lhs.true8, label %if.end23, !dbg !3805

land.lhs.true8:                                   ; preds = %if.end
  %18 = load i32, i32* @dump_flags, align 4, !dbg !3806
  %and9 = and i32 %18, 8, !dbg !3807
  %tobool10 = icmp ne i32 %and9, 0, !dbg !3807
  br i1 %tobool10, label %if.then11, label %if.end23, !dbg !3808

if.then11:                                        ; preds = %land.lhs.true8
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3809
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.51, i64 0, i64 0)), !dbg !3811
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3812
  %21 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3813
  %innermost = getelementptr inbounds %struct.data_reference, %struct.data_reference* %21, i32 0, i32 4, !dbg !3813
  %base_address = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost, i32 0, i32 0, !dbg !3813
  %22 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !3813
  call void @print_generic_expr(%struct._IO_FILE* %20, %union.tree_node* %22, i32 2), !dbg !3814
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3815
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.52, i64 0, i64 0)), !dbg !3816
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3817
  %25 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3818
  %innermost14 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %25, i32 0, i32 4, !dbg !3818
  %offset = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost14, i32 0, i32 1, !dbg !3818
  %26 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !3818
  call void @print_generic_expr(%struct._IO_FILE* %24, %union.tree_node* %26, i32 2), !dbg !3819
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3820
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.53, i64 0, i64 0)), !dbg !3821
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3822
  %29 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3823
  %innermost16 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %29, i32 0, i32 4, !dbg !3823
  %init = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost16, i32 0, i32 2, !dbg !3823
  %30 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !3823
  call void @print_generic_expr(%struct._IO_FILE* %28, %union.tree_node* %30, i32 2), !dbg !3824
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3825
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i64 0, i64 0)), !dbg !3826
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3827
  %33 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3828
  %innermost18 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %33, i32 0, i32 4, !dbg !3828
  %step = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost18, i32 0, i32 3, !dbg !3828
  %34 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !3828
  call void @print_generic_expr(%struct._IO_FILE* %32, %union.tree_node* %34, i32 2), !dbg !3829
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3830
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.55, i64 0, i64 0)), !dbg !3831
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3832
  %37 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3833
  %innermost20 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %37, i32 0, i32 4, !dbg !3833
  %aligned_to = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost20, i32 0, i32 4, !dbg !3833
  %38 = load %union.tree_node*, %union.tree_node** %aligned_to, align 8, !dbg !3833
  call void @print_generic_expr(%struct._IO_FILE* %36, %union.tree_node* %38, i32 2), !dbg !3834
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3835
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.56, i64 0, i64 0)), !dbg !3836
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3837
  %41 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3838
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %41, i32 0, i32 5, !dbg !3838
  %base_object = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 0, !dbg !3838
  %42 = load %union.tree_node*, %union.tree_node** %base_object, align 8, !dbg !3838
  call void @print_generic_expr(%struct._IO_FILE* %40, %union.tree_node* %42, i32 2), !dbg !3839
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3840
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i64 0, i64 0)), !dbg !3841
  br label %if.end23, !dbg !3842

if.end23:                                         ; preds = %if.then11, %land.lhs.true8, %if.end
  %44 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3843
  ret %struct.data_reference* %44, !dbg !3844
}

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @dr_analyze_indices(%struct.data_reference* %dr, %struct.loop* %nest) #0 !dbg !3845 {
entry:
  %dr.addr = alloca %struct.data_reference*, align 8
  %nest.addr = alloca %struct.loop*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %loop = alloca %struct.loop*, align 8
  %access_fns = alloca %struct.VEC_tree_heap*, align 8
  %ref = alloca %union.tree_node*, align 8
  %aref = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  %base = alloca %union.tree_node*, align 8
  %off = alloca %union.tree_node*, align 8
  %access_fn = alloca %union.tree_node*, align 8
  %before_loop = alloca %struct.basic_block_def*, align 8
  store %struct.data_reference* %dr, %struct.data_reference** %dr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr.addr, metadata !3848, metadata !DIExpression()), !dbg !3849
  store %struct.loop* %nest, %struct.loop** %nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %nest.addr, metadata !3850, metadata !DIExpression()), !dbg !3851
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3852, metadata !DIExpression()), !dbg !3853
  %0 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3854
  %stmt1 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %0, i32 0, i32 0, !dbg !3854
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !3854
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !3853
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3855, metadata !DIExpression()), !dbg !3856
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3857
  %call = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %2), !dbg !3858
  store %struct.loop* %call, %struct.loop** %loop, align 8, !dbg !3856
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %access_fns, metadata !3859, metadata !DIExpression()), !dbg !3860
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !3860
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !3861, metadata !DIExpression()), !dbg !3862
  %3 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3863
  %ref2 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %3, i32 0, i32 1, !dbg !3863
  %4 = load %union.tree_node*, %union.tree_node** %ref2, align 8, !dbg !3863
  %call3 = call %union.tree_node* @unshare_expr(%union.tree_node* %4), !dbg !3864
  store %union.tree_node* %call3, %union.tree_node** %ref, align 8, !dbg !3862
  call void @llvm.dbg.declare(metadata %union.tree_node** %aref, metadata !3865, metadata !DIExpression()), !dbg !3866
  %5 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !3867
  store %union.tree_node* %5, %union.tree_node** %aref, align 8, !dbg !3866
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !3868, metadata !DIExpression()), !dbg !3869
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !3870, metadata !DIExpression()), !dbg !3871
  call void @llvm.dbg.declare(metadata %union.tree_node** %off, metadata !3872, metadata !DIExpression()), !dbg !3873
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_fn, metadata !3874, metadata !DIExpression()), !dbg !3875
  store %union.tree_node* null, %union.tree_node** %access_fn, align 8, !dbg !3875
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %before_loop, metadata !3876, metadata !DIExpression()), !dbg !3877
  store %struct.basic_block_def* null, %struct.basic_block_def** %before_loop, align 8, !dbg !3877
  %6 = load %struct.loop*, %struct.loop** %nest.addr, align 8, !dbg !3878
  %tobool = icmp ne %struct.loop* %6, null, !dbg !3878
  br i1 %tobool, label %if.then, label %if.end, !dbg !3880

if.then:                                          ; preds = %entry
  %7 = load %struct.loop*, %struct.loop** %nest.addr, align 8, !dbg !3881
  %call4 = call %struct.basic_block_def* @block_before_loop(%struct.loop* %7), !dbg !3882
  store %struct.basic_block_def* %call4, %struct.basic_block_def** %before_loop, align 8, !dbg !3883
  br label %if.end, !dbg !3884

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !3885

while.cond:                                       ; preds = %if.end19, %if.end
  %8 = load %union.tree_node*, %union.tree_node** %aref, align 8, !dbg !3886
  %call5 = call zeroext i8 @handled_component_p(%union.tree_node* %8), !dbg !3887
  %tobool6 = icmp ne i8 %call5, 0, !dbg !3885
  br i1 %tobool6, label %while.body, label %while.end, !dbg !3885

while.body:                                       ; preds = %while.cond
  %9 = load %union.tree_node*, %union.tree_node** %aref, align 8, !dbg !3888
  %base7 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3888
  %10 = bitcast %struct.tree_base* %base7 to i64*, !dbg !3888
  %bf.load = load i64, i64* %10, align 8, !dbg !3888
  %bf.clear = and i64 %bf.load, 65535, !dbg !3888
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3888
  %cmp = icmp eq i32 %bf.cast, 45, !dbg !3891
  br i1 %cmp, label %if.then8, label %if.end19, !dbg !3892

if.then8:                                         ; preds = %while.body
  %11 = load %union.tree_node*, %union.tree_node** %aref, align 8, !dbg !3893
  %exp = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !3893
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3893
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !3893
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3893
  store %union.tree_node* %12, %union.tree_node** %op, align 8, !dbg !3895
  %13 = load %struct.loop*, %struct.loop** %nest.addr, align 8, !dbg !3896
  %tobool9 = icmp ne %struct.loop* %13, null, !dbg !3896
  br i1 %tobool9, label %if.then10, label %if.end14, !dbg !3898

if.then10:                                        ; preds = %if.then8
  %14 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3899
  %15 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !3901
  %call11 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %14, %union.tree_node* %15), !dbg !3902
  store %union.tree_node* %call11, %union.tree_node** %access_fn, align 8, !dbg !3903
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %before_loop, align 8, !dbg !3904
  %17 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3905
  %18 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !3906
  %call12 = call %union.tree_node* @instantiate_scev(%struct.basic_block_def* %16, %struct.loop* %17, %union.tree_node* %18), !dbg !3907
  store %union.tree_node* %call12, %union.tree_node** %access_fn, align 8, !dbg !3908
  %19 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !3909
  %call13 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %access_fns, %union.tree_node* %19), !dbg !3909
  br label %if.end14, !dbg !3910

if.end14:                                         ; preds = %if.then10, %if.then8
  %20 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !3911
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !3911
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3911
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3911
  %call15 = call %union.tree_node* @build_int_cst(%union.tree_node* %21, i64 0), !dbg !3912
  %22 = load %union.tree_node*, %union.tree_node** %aref, align 8, !dbg !3913
  %exp16 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !3913
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !3913
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 1, !dbg !3913
  store %union.tree_node* %call15, %union.tree_node** %arrayidx18, align 8, !dbg !3914
  br label %if.end19, !dbg !3915

if.end19:                                         ; preds = %if.end14, %while.body
  %23 = load %union.tree_node*, %union.tree_node** %aref, align 8, !dbg !3916
  %exp20 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !3916
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !3916
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 0, !dbg !3916
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx22, align 8, !dbg !3916
  store %union.tree_node* %24, %union.tree_node** %aref, align 8, !dbg !3917
  br label %while.cond, !dbg !3885, !llvm.loop !3918

while.end:                                        ; preds = %while.cond
  %25 = load %struct.loop*, %struct.loop** %nest.addr, align 8, !dbg !3920
  %tobool23 = icmp ne %struct.loop* %25, null, !dbg !3920
  br i1 %tobool23, label %land.lhs.true, label %if.end55, !dbg !3922

land.lhs.true:                                    ; preds = %while.end
  %26 = load %union.tree_node*, %union.tree_node** %aref, align 8, !dbg !3923
  %base24 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !3923
  %27 = bitcast %struct.tree_base* %base24 to i64*, !dbg !3923
  %bf.load25 = load i64, i64* %27, align 8, !dbg !3923
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !3923
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !3923
  %cmp28 = icmp eq i32 %bf.cast27, 47, !dbg !3923
  br i1 %cmp28, label %if.then40, label %lor.lhs.false, !dbg !3923

lor.lhs.false:                                    ; preds = %land.lhs.true
  %28 = load %union.tree_node*, %union.tree_node** %aref, align 8, !dbg !3923
  %base29 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !3923
  %29 = bitcast %struct.tree_base* %base29 to i64*, !dbg !3923
  %bf.load30 = load i64, i64* %29, align 8, !dbg !3923
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !3923
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !3923
  %cmp33 = icmp eq i32 %bf.cast32, 48, !dbg !3923
  br i1 %cmp33, label %if.then40, label %lor.lhs.false34, !dbg !3923

lor.lhs.false34:                                  ; preds = %lor.lhs.false
  %30 = load %union.tree_node*, %union.tree_node** %aref, align 8, !dbg !3923
  %base35 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !3923
  %31 = bitcast %struct.tree_base* %base35 to i64*, !dbg !3923
  %bf.load36 = load i64, i64* %31, align 8, !dbg !3923
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !3923
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !3923
  %cmp39 = icmp eq i32 %bf.cast38, 49, !dbg !3923
  br i1 %cmp39, label %if.then40, label %if.end55, !dbg !3924

if.then40:                                        ; preds = %lor.lhs.false34, %lor.lhs.false, %land.lhs.true
  %32 = load %union.tree_node*, %union.tree_node** %aref, align 8, !dbg !3925
  %exp41 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !3925
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 3, !dbg !3925
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i64 0, i64 0, !dbg !3925
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx43, align 8, !dbg !3925
  store %union.tree_node* %33, %union.tree_node** %op, align 8, !dbg !3927
  %34 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3928
  %35 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !3929
  %call44 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %34, %union.tree_node* %35), !dbg !3930
  store %union.tree_node* %call44, %union.tree_node** %access_fn, align 8, !dbg !3931
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %before_loop, align 8, !dbg !3932
  %37 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3933
  %38 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !3934
  %call45 = call %union.tree_node* @instantiate_scev(%struct.basic_block_def* %36, %struct.loop* %37, %union.tree_node* %38), !dbg !3935
  store %union.tree_node* %call45, %union.tree_node** %access_fn, align 8, !dbg !3936
  %39 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !3937
  %call46 = call %union.tree_node* @initial_condition(%union.tree_node* %39), !dbg !3938
  store %union.tree_node* %call46, %union.tree_node** %base, align 8, !dbg !3939
  %40 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3940
  call void @split_constant_offset(%union.tree_node* %40, %union.tree_node** %base, %union.tree_node** %off), !dbg !3941
  %41 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !3942
  %42 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3943
  %common47 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !3943
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !3943
  %43 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !3943
  %44 = load %union.tree_node*, %union.tree_node** %off, align 8, !dbg !3943
  %call49 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %43, %union.tree_node* %44), !dbg !3943
  %call50 = call %union.tree_node* @chrec_replace_initial_condition(%union.tree_node* %41, %union.tree_node* %call49), !dbg !3944
  store %union.tree_node* %call50, %union.tree_node** %access_fn, align 8, !dbg !3945
  %45 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3946
  %46 = load %union.tree_node*, %union.tree_node** %aref, align 8, !dbg !3947
  %exp51 = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !3947
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !3947
  %arrayidx53 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 0, !dbg !3947
  store %union.tree_node* %45, %union.tree_node** %arrayidx53, align 8, !dbg !3948
  %47 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !3949
  %call54 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %access_fns, %union.tree_node* %47), !dbg !3949
  br label %if.end55, !dbg !3950

if.end55:                                         ; preds = %if.then40, %lor.lhs.false34, %while.end
  %48 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !3951
  %49 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3952
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %49, i32 0, i32 5, !dbg !3952
  %base_object = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 0, !dbg !3952
  store %union.tree_node* %48, %union.tree_node** %base_object, align 8, !dbg !3953
  %50 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !3954
  %51 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3955
  %indices56 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %51, i32 0, i32 5, !dbg !3955
  %access_fns57 = getelementptr inbounds %struct.indices, %struct.indices* %indices56, i32 0, i32 1, !dbg !3955
  store %struct.VEC_tree_heap* %50, %struct.VEC_tree_heap** %access_fns57, align 8, !dbg !3956
  ret void, !dbg !3957
}

; Function Attrs: noinline nounwind uwtable
define internal void @dr_analyze_alias(%struct.data_reference* %dr) #0 !dbg !3958 {
entry:
  %dr.addr = alloca %struct.data_reference*, align 8
  %ref = alloca %union.tree_node*, align 8
  %base = alloca %union.tree_node*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %struct.data_reference* %dr, %struct.data_reference** %dr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr.addr, metadata !3959, metadata !DIExpression()), !dbg !3960
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !3961, metadata !DIExpression()), !dbg !3962
  %0 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3963
  %ref1 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %0, i32 0, i32 1, !dbg !3963
  %1 = load %union.tree_node*, %union.tree_node** %ref1, align 8, !dbg !3963
  store %union.tree_node* %1, %union.tree_node** %ref, align 8, !dbg !3962
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !3964, metadata !DIExpression()), !dbg !3965
  %2 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !3966
  %call = call %union.tree_node* @get_base_address(%union.tree_node* %2), !dbg !3967
  store %union.tree_node* %call, %union.tree_node** %base, align 8, !dbg !3965
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !3968, metadata !DIExpression()), !dbg !3969
  %3 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3970
  %base2 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3970
  %4 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3970
  %bf.load = load i64, i64* %4, align 8, !dbg !3970
  %bf.clear = and i64 %bf.load, 65535, !dbg !3970
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3970
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !3970
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3970

lor.lhs.false:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3970
  %base3 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !3970
  %6 = bitcast %struct.tree_base* %base3 to i64*, !dbg !3970
  %bf.load4 = load i64, i64* %6, align 8, !dbg !3970
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !3970
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !3970
  %cmp7 = icmp eq i32 %bf.cast6, 48, !dbg !3970
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !3970

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3970
  %base9 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3970
  %8 = bitcast %struct.tree_base* %base9 to i64*, !dbg !3970
  %bf.load10 = load i64, i64* %8, align 8, !dbg !3970
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !3970
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !3970
  %cmp13 = icmp eq i32 %bf.cast12, 49, !dbg !3970
  br i1 %cmp13, label %if.then, label %if.end21, !dbg !3972

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false, %entry
  %9 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3973
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !3973
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3973
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3973
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3973
  store %union.tree_node* %10, %union.tree_node** %addr, align 8, !dbg !3975
  %11 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !3976
  %base14 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !3976
  %12 = bitcast %struct.tree_base* %base14 to i64*, !dbg !3976
  %bf.load15 = load i64, i64* %12, align 8, !dbg !3976
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !3976
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !3976
  %cmp18 = icmp eq i32 %bf.cast17, 141, !dbg !3978
  br i1 %cmp18, label %if.then19, label %if.end, !dbg !3979

if.then19:                                        ; preds = %if.then
  %13 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !3980
  %ssa_name = bitcast %union.tree_node* %13 to %struct.tree_ssa_name*, !dbg !3980
  %ptr_info = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 4, !dbg !3980
  %14 = load %struct.ptr_info_def*, %struct.ptr_info_def** %ptr_info, align 8, !dbg !3980
  %15 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !3981
  %alias = getelementptr inbounds %struct.data_reference, %struct.data_reference* %15, i32 0, i32 6, !dbg !3981
  %ptr_info20 = getelementptr inbounds %struct.dr_alias, %struct.dr_alias* %alias, i32 0, i32 0, !dbg !3981
  store %struct.ptr_info_def* %14, %struct.ptr_info_def** %ptr_info20, align 8, !dbg !3982
  br label %if.end, !dbg !3981

if.end:                                           ; preds = %if.then19, %if.then
  br label %if.end21, !dbg !3983

if.end21:                                         ; preds = %if.end, %lor.lhs.false8
  ret void, !dbg !3984
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @dr_may_alias_p(%struct.data_reference* %a, %struct.data_reference* %b) #0 !dbg !3985 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca %struct.data_reference*, align 8
  %b.addr = alloca %struct.data_reference*, align 8
  %addr_a = alloca %union.tree_node*, align 8
  %addr_b = alloca %union.tree_node*, align 8
  %type_a = alloca %union.tree_node*, align 8
  %type_b = alloca %union.tree_node*, align 8
  %decl_a = alloca %union.tree_node*, align 8
  %decl_b = alloca %union.tree_node*, align 8
  store %struct.data_reference* %a, %struct.data_reference** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %a.addr, metadata !3990, metadata !DIExpression()), !dbg !3991
  store %struct.data_reference* %b, %struct.data_reference** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %b.addr, metadata !3992, metadata !DIExpression()), !dbg !3993
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_a, metadata !3994, metadata !DIExpression()), !dbg !3995
  %0 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !3996
  %innermost = getelementptr inbounds %struct.data_reference, %struct.data_reference* %0, i32 0, i32 4, !dbg !3996
  %base_address = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost, i32 0, i32 0, !dbg !3996
  %1 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !3996
  store %union.tree_node* %1, %union.tree_node** %addr_a, align 8, !dbg !3995
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_b, metadata !3997, metadata !DIExpression()), !dbg !3998
  %2 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !3999
  %innermost1 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %2, i32 0, i32 4, !dbg !3999
  %base_address2 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost1, i32 0, i32 0, !dbg !3999
  %3 = load %union.tree_node*, %union.tree_node** %base_address2, align 8, !dbg !3999
  store %union.tree_node* %3, %union.tree_node** %addr_b, align 8, !dbg !3998
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_a, metadata !4000, metadata !DIExpression()), !dbg !4001
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_b, metadata !4002, metadata !DIExpression()), !dbg !4003
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl_a, metadata !4004, metadata !DIExpression()), !dbg !4005
  store %union.tree_node* null, %union.tree_node** %decl_a, align 8, !dbg !4005
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl_b, metadata !4006, metadata !DIExpression()), !dbg !4007
  store %union.tree_node* null, %union.tree_node** %decl_b, align 8, !dbg !4007
  %4 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4008
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %4, i32 0, i32 5, !dbg !4008
  %base_object = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 0, !dbg !4008
  %5 = load %union.tree_node*, %union.tree_node** %base_object, align 8, !dbg !4008
  %6 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4010
  %indices3 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %6, i32 0, i32 5, !dbg !4010
  %base_object4 = getelementptr inbounds %struct.indices, %struct.indices* %indices3, i32 0, i32 0, !dbg !4010
  %7 = load %union.tree_node*, %union.tree_node** %base_object4, align 8, !dbg !4010
  %call = call zeroext i8 @disjoint_objects_p(%union.tree_node* %5, %union.tree_node* %7), !dbg !4011
  %tobool = icmp ne i8 %call, 0, !dbg !4011
  br i1 %tobool, label %if.then, label %if.end, !dbg !4012

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4013
  br label %return, !dbg !4013

if.end:                                           ; preds = %entry
  %8 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4014
  %is_read = getelementptr inbounds %struct.data_reference, %struct.data_reference* %8, i32 0, i32 3, !dbg !4014
  %9 = load i8, i8* %is_read, align 8, !dbg !4014
  %tobool5 = icmp ne i8 %9, 0, !dbg !4014
  br i1 %tobool5, label %if.else, label %land.lhs.true, !dbg !4016

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4017
  %is_read6 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %10, i32 0, i32 3, !dbg !4017
  %11 = load i8, i8* %is_read6, align 8, !dbg !4017
  %tobool7 = icmp ne i8 %11, 0, !dbg !4017
  br i1 %tobool7, label %if.else, label %if.then8, !dbg !4018

if.then8:                                         ; preds = %land.lhs.true
  %12 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4019
  %ref = getelementptr inbounds %struct.data_reference, %struct.data_reference* %12, i32 0, i32 1, !dbg !4019
  %13 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !4019
  %14 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4022
  %ref9 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %14, i32 0, i32 1, !dbg !4022
  %15 = load %union.tree_node*, %union.tree_node** %ref9, align 8, !dbg !4022
  %call10 = call zeroext i8 @refs_output_dependent_p(%union.tree_node* %13, %union.tree_node* %15), !dbg !4023
  %tobool11 = icmp ne i8 %call10, 0, !dbg !4023
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !4024

if.then12:                                        ; preds = %if.then8
  store i8 0, i8* %retval, align 1, !dbg !4025
  br label %return, !dbg !4025

if.end13:                                         ; preds = %if.then8
  br label %if.end34, !dbg !4026

if.else:                                          ; preds = %land.lhs.true, %if.end
  %16 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4027
  %is_read14 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %16, i32 0, i32 3, !dbg !4027
  %17 = load i8, i8* %is_read14, align 8, !dbg !4027
  %conv = zext i8 %17 to i32, !dbg !4027
  %tobool15 = icmp ne i32 %conv, 0, !dbg !4027
  br i1 %tobool15, label %land.lhs.true16, label %if.else26, !dbg !4029

land.lhs.true16:                                  ; preds = %if.else
  %18 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4030
  %is_read17 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %18, i32 0, i32 3, !dbg !4030
  %19 = load i8, i8* %is_read17, align 8, !dbg !4030
  %tobool18 = icmp ne i8 %19, 0, !dbg !4030
  br i1 %tobool18, label %if.else26, label %if.then19, !dbg !4031

if.then19:                                        ; preds = %land.lhs.true16
  %20 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4032
  %ref20 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %20, i32 0, i32 1, !dbg !4032
  %21 = load %union.tree_node*, %union.tree_node** %ref20, align 8, !dbg !4032
  %22 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4035
  %ref21 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %22, i32 0, i32 1, !dbg !4035
  %23 = load %union.tree_node*, %union.tree_node** %ref21, align 8, !dbg !4035
  %call22 = call zeroext i8 @refs_anti_dependent_p(%union.tree_node* %21, %union.tree_node* %23), !dbg !4036
  %tobool23 = icmp ne i8 %call22, 0, !dbg !4036
  br i1 %tobool23, label %if.end25, label %if.then24, !dbg !4037

if.then24:                                        ; preds = %if.then19
  store i8 0, i8* %retval, align 1, !dbg !4038
  br label %return, !dbg !4038

if.end25:                                         ; preds = %if.then19
  br label %if.end33, !dbg !4039

if.else26:                                        ; preds = %land.lhs.true16, %if.else
  %24 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4040
  %ref27 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %24, i32 0, i32 1, !dbg !4040
  %25 = load %union.tree_node*, %union.tree_node** %ref27, align 8, !dbg !4040
  %26 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4042
  %ref28 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %26, i32 0, i32 1, !dbg !4042
  %27 = load %union.tree_node*, %union.tree_node** %ref28, align 8, !dbg !4042
  %call29 = call zeroext i8 @refs_may_alias_p(%union.tree_node* %25, %union.tree_node* %27), !dbg !4043
  %tobool30 = icmp ne i8 %call29, 0, !dbg !4043
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !4044

if.then31:                                        ; preds = %if.else26
  store i8 0, i8* %retval, align 1, !dbg !4045
  br label %return, !dbg !4045

if.end32:                                         ; preds = %if.else26
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.end25
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end13
  %28 = load %union.tree_node*, %union.tree_node** %addr_a, align 8, !dbg !4046
  %tobool35 = icmp ne %union.tree_node* %28, null, !dbg !4046
  br i1 %tobool35, label %lor.lhs.false, label %if.then37, !dbg !4048

lor.lhs.false:                                    ; preds = %if.end34
  %29 = load %union.tree_node*, %union.tree_node** %addr_b, align 8, !dbg !4049
  %tobool36 = icmp ne %union.tree_node* %29, null, !dbg !4049
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !4050

if.then37:                                        ; preds = %lor.lhs.false, %if.end34
  store i8 1, i8* %retval, align 1, !dbg !4051
  br label %return, !dbg !4051

if.end38:                                         ; preds = %lor.lhs.false
  %30 = load %union.tree_node*, %union.tree_node** %addr_a, align 8, !dbg !4052
  %base = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !4052
  %31 = bitcast %struct.tree_base* %base to i64*, !dbg !4052
  %bf.load = load i64, i64* %31, align 8, !dbg !4052
  %bf.clear = and i64 %bf.load, 65535, !dbg !4052
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4052
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !4054
  br i1 %cmp, label %land.lhs.true40, label %if.end54, !dbg !4055

land.lhs.true40:                                  ; preds = %if.end38
  %32 = load %union.tree_node*, %union.tree_node** %addr_b, align 8, !dbg !4056
  %base41 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !4056
  %33 = bitcast %struct.tree_base* %base41 to i64*, !dbg !4056
  %bf.load42 = load i64, i64* %33, align 8, !dbg !4056
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !4056
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !4056
  %cmp45 = icmp eq i32 %bf.cast44, 121, !dbg !4057
  br i1 %cmp45, label %if.then47, label %if.end54, !dbg !4058

if.then47:                                        ; preds = %land.lhs.true40
  %34 = load %union.tree_node*, %union.tree_node** %addr_a, align 8, !dbg !4059
  %exp = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !4059
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4059
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4059
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4059
  %36 = load %union.tree_node*, %union.tree_node** %addr_b, align 8, !dbg !4060
  %exp48 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !4060
  %operands49 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp48, i32 0, i32 3, !dbg !4060
  %arrayidx50 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands49, i64 0, i64 0, !dbg !4060
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8, !dbg !4060
  %cmp51 = icmp eq %union.tree_node* %35, %37, !dbg !4061
  %conv52 = zext i1 %cmp51 to i32, !dbg !4061
  %conv53 = trunc i32 %conv52 to i8, !dbg !4059
  store i8 %conv53, i8* %retval, align 1, !dbg !4062
  br label %return, !dbg !4062

if.end54:                                         ; preds = %land.lhs.true40, %if.end38
  %38 = load %union.tree_node*, %union.tree_node** %addr_a, align 8, !dbg !4063
  %common = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !4063
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4063
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4063
  store %union.tree_node* %39, %union.tree_node** %type_a, align 8, !dbg !4064
  %40 = load %union.tree_node*, %union.tree_node** %addr_b, align 8, !dbg !4065
  %common55 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !4065
  %type56 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 2, !dbg !4065
  %41 = load %union.tree_node*, %union.tree_node** %type56, align 8, !dbg !4065
  store %union.tree_node* %41, %union.tree_node** %type_b, align 8, !dbg !4066
  %42 = load %union.tree_node*, %union.tree_node** %type_a, align 8, !dbg !4067
  %base57 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !4067
  %43 = bitcast %struct.tree_base* %base57 to i64*, !dbg !4067
  %bf.load58 = load i64, i64* %43, align 8, !dbg !4067
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !4067
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !4067
  %cmp61 = icmp eq i32 %bf.cast60, 10, !dbg !4067
  br i1 %cmp61, label %land.lhs.true70, label %lor.lhs.false63, !dbg !4067

lor.lhs.false63:                                  ; preds = %if.end54
  %44 = load %union.tree_node*, %union.tree_node** %type_a, align 8, !dbg !4067
  %base64 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !4067
  %45 = bitcast %struct.tree_base* %base64 to i64*, !dbg !4067
  %bf.load65 = load i64, i64* %45, align 8, !dbg !4067
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !4067
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !4067
  %cmp68 = icmp eq i32 %bf.cast67, 12, !dbg !4067
  br i1 %cmp68, label %land.lhs.true70, label %cond.true, !dbg !4067

land.lhs.true70:                                  ; preds = %lor.lhs.false63, %if.end54
  %46 = load %union.tree_node*, %union.tree_node** %type_b, align 8, !dbg !4067
  %base71 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !4067
  %47 = bitcast %struct.tree_base* %base71 to i64*, !dbg !4067
  %bf.load72 = load i64, i64* %47, align 8, !dbg !4067
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !4067
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !4067
  %cmp75 = icmp eq i32 %bf.cast74, 10, !dbg !4067
  br i1 %cmp75, label %cond.false, label %lor.lhs.false77, !dbg !4067

lor.lhs.false77:                                  ; preds = %land.lhs.true70
  %48 = load %union.tree_node*, %union.tree_node** %type_b, align 8, !dbg !4067
  %base78 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !4067
  %49 = bitcast %struct.tree_base* %base78 to i64*, !dbg !4067
  %bf.load79 = load i64, i64* %49, align 8, !dbg !4067
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !4067
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !4067
  %cmp82 = icmp eq i32 %bf.cast81, 12, !dbg !4067
  br i1 %cmp82, label %cond.false, label %cond.true, !dbg !4067

cond.true:                                        ; preds = %lor.lhs.false77, %lor.lhs.false63
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 1331, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !4067
  br label %cond.end, !dbg !4067

cond.false:                                       ; preds = %lor.lhs.false77, %land.lhs.true70
  br label %cond.end, !dbg !4067

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4067
  %50 = load %union.tree_node*, %union.tree_node** %addr_a, align 8, !dbg !4068
  %base84 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !4068
  %51 = bitcast %struct.tree_base* %base84 to i64*, !dbg !4068
  %bf.load85 = load i64, i64* %51, align 8, !dbg !4068
  %bf.clear86 = and i64 %bf.load85, 65535, !dbg !4068
  %bf.cast87 = trunc i64 %bf.clear86 to i32, !dbg !4068
  %cmp88 = icmp eq i32 %bf.cast87, 141, !dbg !4070
  br i1 %cmp88, label %if.then90, label %if.end91, !dbg !4071

if.then90:                                        ; preds = %cond.end
  %52 = load %union.tree_node*, %union.tree_node** %addr_a, align 8, !dbg !4072
  %ssa_name = bitcast %union.tree_node* %52 to %struct.tree_ssa_name*, !dbg !4072
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4072
  %53 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4072
  store %union.tree_node* %53, %union.tree_node** %decl_a, align 8, !dbg !4073
  br label %if.end91, !dbg !4074

if.end91:                                         ; preds = %if.then90, %cond.end
  %54 = load %union.tree_node*, %union.tree_node** %addr_b, align 8, !dbg !4075
  %base92 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !4075
  %55 = bitcast %struct.tree_base* %base92 to i64*, !dbg !4075
  %bf.load93 = load i64, i64* %55, align 8, !dbg !4075
  %bf.clear94 = and i64 %bf.load93, 65535, !dbg !4075
  %bf.cast95 = trunc i64 %bf.clear94 to i32, !dbg !4075
  %cmp96 = icmp eq i32 %bf.cast95, 141, !dbg !4077
  br i1 %cmp96, label %if.then98, label %if.end101, !dbg !4078

if.then98:                                        ; preds = %if.end91
  %56 = load %union.tree_node*, %union.tree_node** %addr_b, align 8, !dbg !4079
  %ssa_name99 = bitcast %union.tree_node* %56 to %struct.tree_ssa_name*, !dbg !4079
  %var100 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name99, i32 0, i32 1, !dbg !4079
  %57 = load %union.tree_node*, %union.tree_node** %var100, align 8, !dbg !4079
  store %union.tree_node* %57, %union.tree_node** %decl_b, align 8, !dbg !4080
  br label %if.end101, !dbg !4081

if.end101:                                        ; preds = %if.then98, %if.end91
  %58 = load %union.tree_node*, %union.tree_node** %type_a, align 8, !dbg !4082
  %type102 = bitcast %union.tree_node* %58 to %struct.tree_type*, !dbg !4082
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type102, i32 0, i32 6, !dbg !4082
  %bf.load103 = load i32, i32* %restrict_flag, align 4, !dbg !4082
  %bf.lshr = lshr i32 %bf.load103, 13, !dbg !4082
  %bf.clear104 = and i32 %bf.lshr, 1, !dbg !4082
  %tobool105 = icmp ne i32 %bf.clear104, 0, !dbg !4082
  br i1 %tobool105, label %land.lhs.true106, label %if.end158, !dbg !4084

land.lhs.true106:                                 ; preds = %if.end101
  %59 = load %union.tree_node*, %union.tree_node** %type_b, align 8, !dbg !4085
  %type107 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !4085
  %restrict_flag108 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type107, i32 0, i32 6, !dbg !4085
  %bf.load109 = load i32, i32* %restrict_flag108, align 4, !dbg !4085
  %bf.lshr110 = lshr i32 %bf.load109, 13, !dbg !4085
  %bf.clear111 = and i32 %bf.lshr110, 1, !dbg !4085
  %tobool112 = icmp ne i32 %bf.clear111, 0, !dbg !4085
  br i1 %tobool112, label %land.lhs.true113, label %if.end158, !dbg !4086

land.lhs.true113:                                 ; preds = %land.lhs.true106
  %60 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4087
  %is_read114 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %60, i32 0, i32 3, !dbg !4087
  %61 = load i8, i8* %is_read114, align 8, !dbg !4087
  %tobool115 = icmp ne i8 %61, 0, !dbg !4087
  br i1 %tobool115, label %lor.lhs.false116, label %land.lhs.true119, !dbg !4088

lor.lhs.false116:                                 ; preds = %land.lhs.true113
  %62 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4089
  %is_read117 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %62, i32 0, i32 3, !dbg !4089
  %63 = load i8, i8* %is_read117, align 8, !dbg !4089
  %tobool118 = icmp ne i8 %63, 0, !dbg !4089
  br i1 %tobool118, label %if.end158, label %land.lhs.true119, !dbg !4090

land.lhs.true119:                                 ; preds = %lor.lhs.false116, %land.lhs.true113
  %64 = load %union.tree_node*, %union.tree_node** %decl_a, align 8, !dbg !4091
  %tobool120 = icmp ne %union.tree_node* %64, null, !dbg !4091
  br i1 %tobool120, label %land.lhs.true121, label %if.end158, !dbg !4092

land.lhs.true121:                                 ; preds = %land.lhs.true119
  %65 = load %union.tree_node*, %union.tree_node** %decl_a, align 8, !dbg !4093
  %base122 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !4093
  %66 = bitcast %struct.tree_base* %base122 to i64*, !dbg !4093
  %bf.load123 = load i64, i64* %66, align 8, !dbg !4093
  %bf.clear124 = and i64 %bf.load123, 65535, !dbg !4093
  %bf.cast125 = trunc i64 %bf.clear124 to i32, !dbg !4093
  %idxprom = sext i32 %bf.cast125 to i64, !dbg !4093
  %arrayidx126 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4093
  %67 = load i32, i32* %arrayidx126, align 4, !dbg !4093
  %cmp127 = icmp eq i32 %67, 3, !dbg !4093
  br i1 %cmp127, label %land.lhs.true129, label %if.end158, !dbg !4094

land.lhs.true129:                                 ; preds = %land.lhs.true121
  %68 = load %union.tree_node*, %union.tree_node** %decl_b, align 8, !dbg !4095
  %tobool130 = icmp ne %union.tree_node* %68, null, !dbg !4095
  br i1 %tobool130, label %land.lhs.true131, label %if.end158, !dbg !4096

land.lhs.true131:                                 ; preds = %land.lhs.true129
  %69 = load %union.tree_node*, %union.tree_node** %decl_b, align 8, !dbg !4097
  %base132 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !4097
  %70 = bitcast %struct.tree_base* %base132 to i64*, !dbg !4097
  %bf.load133 = load i64, i64* %70, align 8, !dbg !4097
  %bf.clear134 = and i64 %bf.load133, 65535, !dbg !4097
  %bf.cast135 = trunc i64 %bf.clear134 to i32, !dbg !4097
  %idxprom136 = sext i32 %bf.cast135 to i64, !dbg !4097
  %arrayidx137 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom136, !dbg !4097
  %71 = load i32, i32* %arrayidx137, align 4, !dbg !4097
  %cmp138 = icmp eq i32 %71, 3, !dbg !4097
  br i1 %cmp138, label %land.lhs.true140, label %if.end158, !dbg !4098

land.lhs.true140:                                 ; preds = %land.lhs.true131
  %72 = load %union.tree_node*, %union.tree_node** %decl_a, align 8, !dbg !4099
  %73 = load %union.tree_node*, %union.tree_node** %decl_b, align 8, !dbg !4100
  %cmp141 = icmp ne %union.tree_node* %72, %73, !dbg !4101
  br i1 %cmp141, label %land.lhs.true143, label %if.end158, !dbg !4102

land.lhs.true143:                                 ; preds = %land.lhs.true140
  %74 = load %union.tree_node*, %union.tree_node** %decl_a, align 8, !dbg !4103
  %decl_minimal = bitcast %union.tree_node* %74 to %struct.tree_decl_minimal*, !dbg !4103
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !4103
  %75 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4103
  %base144 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !4103
  %76 = bitcast %struct.tree_base* %base144 to i64*, !dbg !4103
  %bf.load145 = load i64, i64* %76, align 8, !dbg !4103
  %bf.clear146 = and i64 %bf.load145, 65535, !dbg !4103
  %bf.cast147 = trunc i64 %bf.clear146 to i32, !dbg !4103
  %cmp148 = icmp eq i32 %bf.cast147, 29, !dbg !4104
  br i1 %cmp148, label %land.lhs.true150, label %if.end158, !dbg !4105

land.lhs.true150:                                 ; preds = %land.lhs.true143
  %77 = load %union.tree_node*, %union.tree_node** %decl_a, align 8, !dbg !4106
  %decl_minimal151 = bitcast %union.tree_node* %77 to %struct.tree_decl_minimal*, !dbg !4106
  %context152 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal151, i32 0, i32 4, !dbg !4106
  %78 = load %union.tree_node*, %union.tree_node** %context152, align 8, !dbg !4106
  %79 = load %union.tree_node*, %union.tree_node** %decl_b, align 8, !dbg !4107
  %decl_minimal153 = bitcast %union.tree_node* %79 to %struct.tree_decl_minimal*, !dbg !4107
  %context154 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal153, i32 0, i32 4, !dbg !4107
  %80 = load %union.tree_node*, %union.tree_node** %context154, align 8, !dbg !4107
  %cmp155 = icmp eq %union.tree_node* %78, %80, !dbg !4108
  br i1 %cmp155, label %if.then157, label %if.end158, !dbg !4109

if.then157:                                       ; preds = %land.lhs.true150
  store i8 0, i8* %retval, align 1, !dbg !4110
  br label %return, !dbg !4110

if.end158:                                        ; preds = %land.lhs.true150, %land.lhs.true143, %land.lhs.true140, %land.lhs.true131, %land.lhs.true129, %land.lhs.true121, %land.lhs.true119, %lor.lhs.false116, %land.lhs.true106, %if.end101
  store i8 1, i8* %retval, align 1, !dbg !4111
  br label %return, !dbg !4111

return:                                           ; preds = %if.end158, %if.then157, %if.then47, %if.then37, %if.then31, %if.then24, %if.then12, %if.then
  %81 = load i8, i8* %retval, align 1, !dbg !4112
  ret i8 %81, !dbg !4112
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @disjoint_objects_p(%union.tree_node* %a, %union.tree_node* %b) #0 !dbg !4113 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca %union.tree_node*, align 8
  %b.addr = alloca %union.tree_node*, align 8
  %base_a = alloca %union.tree_node*, align 8
  %base_b = alloca %union.tree_node*, align 8
  %comp_a = alloca %struct.VEC_tree_heap*, align 8
  %comp_b = alloca %struct.VEC_tree_heap*, align 8
  %ret = alloca i8, align 1
  store %union.tree_node* %a, %union.tree_node** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %a.addr, metadata !4116, metadata !DIExpression()), !dbg !4117
  store %union.tree_node* %b, %union.tree_node** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %b.addr, metadata !4118, metadata !DIExpression()), !dbg !4119
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_a, metadata !4120, metadata !DIExpression()), !dbg !4121
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_b, metadata !4122, metadata !DIExpression()), !dbg !4123
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %comp_a, metadata !4124, metadata !DIExpression()), !dbg !4125
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %comp_a, align 8, !dbg !4125
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %comp_b, metadata !4126, metadata !DIExpression()), !dbg !4127
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %comp_b, align 8, !dbg !4127
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !4128, metadata !DIExpression()), !dbg !4129
  %0 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !4130
  %call = call %union.tree_node* @get_base_address(%union.tree_node* %0), !dbg !4131
  store %union.tree_node* %call, %union.tree_node** %base_a, align 8, !dbg !4132
  %1 = load %union.tree_node*, %union.tree_node** %b.addr, align 8, !dbg !4133
  %call1 = call %union.tree_node* @get_base_address(%union.tree_node* %1), !dbg !4134
  store %union.tree_node* %call1, %union.tree_node** %base_b, align 8, !dbg !4135
  %2 = load %union.tree_node*, %union.tree_node** %base_a, align 8, !dbg !4136
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4136
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !4136
  %bf.load = load i64, i64* %3, align 8, !dbg !4136
  %bf.clear = and i64 %bf.load, 65535, !dbg !4136
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4136
  %idxprom = sext i32 %bf.cast to i64, !dbg !4136
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4136
  %4 = load i32, i32* %arrayidx, align 4, !dbg !4136
  %cmp = icmp eq i32 %4, 3, !dbg !4136
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4138

land.lhs.true:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %base_b, align 8, !dbg !4139
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !4139
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !4139
  %bf.load3 = load i64, i64* %6, align 8, !dbg !4139
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !4139
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !4139
  %idxprom6 = sext i32 %bf.cast5 to i64, !dbg !4139
  %arrayidx7 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom6, !dbg !4139
  %7 = load i32, i32* %arrayidx7, align 4, !dbg !4139
  %cmp8 = icmp eq i32 %7, 3, !dbg !4139
  br i1 %cmp8, label %land.lhs.true9, label %if.end, !dbg !4140

land.lhs.true9:                                   ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %base_a, align 8, !dbg !4141
  %9 = load %union.tree_node*, %union.tree_node** %base_b, align 8, !dbg !4142
  %cmp10 = icmp ne %union.tree_node* %8, %9, !dbg !4143
  br i1 %cmp10, label %if.then, label %if.end, !dbg !4144

if.then:                                          ; preds = %land.lhs.true9
  store i8 1, i8* %retval, align 1, !dbg !4145
  br label %return, !dbg !4145

if.end:                                           ; preds = %land.lhs.true9, %land.lhs.true, %entry
  %10 = load %union.tree_node*, %union.tree_node** %base_a, align 8, !dbg !4146
  %11 = load %union.tree_node*, %union.tree_node** %base_b, align 8, !dbg !4148
  %call11 = call i32 @operand_equal_p(%union.tree_node* %10, %union.tree_node* %11, i32 0), !dbg !4149
  %tobool = icmp ne i32 %call11, 0, !dbg !4149
  br i1 %tobool, label %if.end13, label %if.then12, !dbg !4150

if.then12:                                        ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !4151
  br label %return, !dbg !4151

if.end13:                                         ; preds = %if.end
  br label %while.cond, !dbg !4152

while.cond:                                       ; preds = %while.body, %if.end13
  %12 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !4153
  %call14 = call zeroext i8 @handled_component_p(%union.tree_node* %12), !dbg !4154
  %tobool15 = icmp ne i8 %call14, 0, !dbg !4152
  br i1 %tobool15, label %while.body, label %while.end, !dbg !4152

while.body:                                       ; preds = %while.cond
  %13 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !4155
  %call16 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %comp_a, %union.tree_node* %13), !dbg !4155
  %14 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !4157
  %exp = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !4157
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4157
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4157
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx17, align 8, !dbg !4157
  store %union.tree_node* %15, %union.tree_node** %a.addr, align 8, !dbg !4158
  br label %while.cond, !dbg !4152, !llvm.loop !4159

while.end:                                        ; preds = %while.cond
  br label %while.cond18, !dbg !4161

while.cond18:                                     ; preds = %while.body21, %while.end
  %16 = load %union.tree_node*, %union.tree_node** %b.addr, align 8, !dbg !4162
  %call19 = call zeroext i8 @handled_component_p(%union.tree_node* %16), !dbg !4163
  %tobool20 = icmp ne i8 %call19, 0, !dbg !4161
  br i1 %tobool20, label %while.body21, label %while.end26, !dbg !4161

while.body21:                                     ; preds = %while.cond18
  %17 = load %union.tree_node*, %union.tree_node** %b.addr, align 8, !dbg !4164
  %call22 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %comp_b, %union.tree_node* %17), !dbg !4164
  %18 = load %union.tree_node*, %union.tree_node** %b.addr, align 8, !dbg !4166
  %exp23 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !4166
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !4166
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 0, !dbg !4166
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !4166
  store %union.tree_node* %19, %union.tree_node** %b.addr, align 8, !dbg !4167
  br label %while.cond18, !dbg !4161, !llvm.loop !4168

while.end26:                                      ; preds = %while.cond18
  store i8 0, i8* %ret, align 1, !dbg !4170
  br label %while.body28, !dbg !4171

while.body28:                                     ; preds = %while.end26, %if.then98, %if.then113
  %20 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %comp_a, align 8, !dbg !4172
  %tobool29 = icmp ne %struct.VEC_tree_heap* %20, null, !dbg !4172
  br i1 %tobool29, label %cond.true, label %cond.false, !dbg !4172

cond.true:                                        ; preds = %while.body28
  %21 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %comp_a, align 8, !dbg !4172
  %base30 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %21, i32 0, i32 0, !dbg !4172
  br label %cond.end, !dbg !4172

cond.false:                                       ; preds = %while.body28
  br label %cond.end, !dbg !4172

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base30, %cond.true ], [ null, %cond.false ], !dbg !4172
  %call31 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !4172
  %cmp32 = icmp eq i32 %call31, 0, !dbg !4175
  br i1 %cmp32, label %if.then41, label %lor.lhs.false, !dbg !4176

lor.lhs.false:                                    ; preds = %cond.end
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %comp_b, align 8, !dbg !4177
  %tobool33 = icmp ne %struct.VEC_tree_heap* %22, null, !dbg !4177
  br i1 %tobool33, label %cond.true34, label %cond.false36, !dbg !4177

cond.true34:                                      ; preds = %lor.lhs.false
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %comp_b, align 8, !dbg !4177
  %base35 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %23, i32 0, i32 0, !dbg !4177
  br label %cond.end37, !dbg !4177

cond.false36:                                     ; preds = %lor.lhs.false
  br label %cond.end37, !dbg !4177

cond.end37:                                       ; preds = %cond.false36, %cond.true34
  %cond38 = phi %struct.VEC_tree_base* [ %base35, %cond.true34 ], [ null, %cond.false36 ], !dbg !4177
  %call39 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond38), !dbg !4177
  %cmp40 = icmp eq i32 %call39, 0, !dbg !4178
  br i1 %cmp40, label %if.then41, label %if.end42, !dbg !4179

if.then41:                                        ; preds = %cond.end37, %cond.end
  br label %while.end126, !dbg !4180

if.end42:                                         ; preds = %cond.end37
  %24 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %comp_a, align 8, !dbg !4181
  %tobool43 = icmp ne %struct.VEC_tree_heap* %24, null, !dbg !4181
  br i1 %tobool43, label %cond.true44, label %cond.false46, !dbg !4181

cond.true44:                                      ; preds = %if.end42
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %comp_a, align 8, !dbg !4181
  %base45 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %25, i32 0, i32 0, !dbg !4181
  br label %cond.end47, !dbg !4181

cond.false46:                                     ; preds = %if.end42
  br label %cond.end47, !dbg !4181

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi %struct.VEC_tree_base* [ %base45, %cond.true44 ], [ null, %cond.false46 ], !dbg !4181
  %call49 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond48), !dbg !4181
  store %union.tree_node* %call49, %union.tree_node** %a.addr, align 8, !dbg !4182
  %26 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %comp_b, align 8, !dbg !4183
  %tobool50 = icmp ne %struct.VEC_tree_heap* %26, null, !dbg !4183
  br i1 %tobool50, label %cond.true51, label %cond.false53, !dbg !4183

cond.true51:                                      ; preds = %cond.end47
  %27 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %comp_b, align 8, !dbg !4183
  %base52 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %27, i32 0, i32 0, !dbg !4183
  br label %cond.end54, !dbg !4183

cond.false53:                                     ; preds = %cond.end47
  br label %cond.end54, !dbg !4183

cond.end54:                                       ; preds = %cond.false53, %cond.true51
  %cond55 = phi %struct.VEC_tree_base* [ %base52, %cond.true51 ], [ null, %cond.false53 ], !dbg !4183
  %call56 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond55), !dbg !4183
  store %union.tree_node* %call56, %union.tree_node** %b.addr, align 8, !dbg !4184
  %28 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !4185
  %base57 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !4185
  %29 = bitcast %struct.tree_base* %base57 to i64*, !dbg !4185
  %bf.load58 = load i64, i64* %29, align 8, !dbg !4185
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !4185
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !4185
  %cmp61 = icmp eq i32 %bf.cast60, 43, !dbg !4187
  br i1 %cmp61, label %land.lhs.true62, label %lor.lhs.false68, !dbg !4188

land.lhs.true62:                                  ; preds = %cond.end54
  %30 = load %union.tree_node*, %union.tree_node** %b.addr, align 8, !dbg !4189
  %base63 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !4189
  %31 = bitcast %struct.tree_base* %base63 to i64*, !dbg !4189
  %bf.load64 = load i64, i64* %31, align 8, !dbg !4189
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !4189
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !4189
  %cmp67 = icmp eq i32 %bf.cast66, 44, !dbg !4190
  br i1 %cmp67, label %if.then80, label %lor.lhs.false68, !dbg !4191

lor.lhs.false68:                                  ; preds = %land.lhs.true62, %cond.end54
  %32 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !4192
  %base69 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !4192
  %33 = bitcast %struct.tree_base* %base69 to i64*, !dbg !4192
  %bf.load70 = load i64, i64* %33, align 8, !dbg !4192
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !4192
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !4192
  %cmp73 = icmp eq i32 %bf.cast72, 44, !dbg !4193
  br i1 %cmp73, label %land.lhs.true74, label %if.end81, !dbg !4194

land.lhs.true74:                                  ; preds = %lor.lhs.false68
  %34 = load %union.tree_node*, %union.tree_node** %b.addr, align 8, !dbg !4195
  %base75 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !4195
  %35 = bitcast %struct.tree_base* %base75 to i64*, !dbg !4195
  %bf.load76 = load i64, i64* %35, align 8, !dbg !4195
  %bf.clear77 = and i64 %bf.load76, 65535, !dbg !4195
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !4195
  %cmp79 = icmp eq i32 %bf.cast78, 43, !dbg !4196
  br i1 %cmp79, label %if.then80, label %if.end81, !dbg !4197

if.then80:                                        ; preds = %land.lhs.true74, %land.lhs.true62
  store i8 1, i8* %ret, align 1, !dbg !4198
  br label %while.end126, !dbg !4200

if.end81:                                         ; preds = %land.lhs.true74, %lor.lhs.false68
  %36 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !4201
  %base82 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !4201
  %37 = bitcast %struct.tree_base* %base82 to i64*, !dbg !4201
  %bf.load83 = load i64, i64* %37, align 8, !dbg !4201
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !4201
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !4201
  %38 = load %union.tree_node*, %union.tree_node** %b.addr, align 8, !dbg !4203
  %base86 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !4203
  %39 = bitcast %struct.tree_base* %base86 to i64*, !dbg !4203
  %bf.load87 = load i64, i64* %39, align 8, !dbg !4203
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !4203
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !4203
  %cmp90 = icmp ne i32 %bf.cast85, %bf.cast89, !dbg !4204
  br i1 %cmp90, label %if.then91, label %if.end92, !dbg !4205

if.then91:                                        ; preds = %if.end81
  br label %while.end126, !dbg !4206

if.end92:                                         ; preds = %if.end81
  %40 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !4207
  %base93 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !4207
  %41 = bitcast %struct.tree_base* %base93 to i64*, !dbg !4207
  %bf.load94 = load i64, i64* %41, align 8, !dbg !4207
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !4207
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !4207
  %cmp97 = icmp eq i32 %bf.cast96, 45, !dbg !4209
  br i1 %cmp97, label %if.then98, label %if.else, !dbg !4210

if.then98:                                        ; preds = %if.end92
  br label %while.body28, !dbg !4211, !llvm.loop !4212

if.else:                                          ; preds = %if.end92
  %42 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !4214
  %base99 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !4214
  %43 = bitcast %struct.tree_base* %base99 to i64*, !dbg !4214
  %bf.load100 = load i64, i64* %43, align 8, !dbg !4214
  %bf.clear101 = and i64 %bf.load100, 65535, !dbg !4214
  %bf.cast102 = trunc i64 %bf.clear101 to i32, !dbg !4214
  %cmp103 = icmp eq i32 %bf.cast102, 41, !dbg !4216
  br i1 %cmp103, label %if.then104, label %if.else125, !dbg !4217

if.then104:                                       ; preds = %if.else
  %44 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !4218
  %exp105 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !4218
  %operands106 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp105, i32 0, i32 3, !dbg !4218
  %arrayidx107 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands106, i64 0, i64 1, !dbg !4218
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx107, align 8, !dbg !4218
  %46 = load %union.tree_node*, %union.tree_node** %b.addr, align 8, !dbg !4221
  %exp108 = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !4221
  %operands109 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp108, i32 0, i32 3, !dbg !4221
  %arrayidx110 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands109, i64 0, i64 1, !dbg !4221
  %47 = load %union.tree_node*, %union.tree_node** %arrayidx110, align 8, !dbg !4221
  %call111 = call i32 @operand_equal_p(%union.tree_node* %45, %union.tree_node* %47, i32 0), !dbg !4222
  %tobool112 = icmp ne i32 %call111, 0, !dbg !4222
  br i1 %tobool112, label %if.then113, label %if.end114, !dbg !4223

if.then113:                                       ; preds = %if.then104
  br label %while.body28, !dbg !4224, !llvm.loop !4212

if.end114:                                        ; preds = %if.then104
  %48 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !4225
  %exp115 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !4225
  %operands116 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp115, i32 0, i32 3, !dbg !4225
  %arrayidx117 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands116, i64 0, i64 0, !dbg !4225
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx117, align 8, !dbg !4225
  store %union.tree_node* %49, %union.tree_node** %base_a, align 8, !dbg !4226
  %50 = load %union.tree_node*, %union.tree_node** %base_a, align 8, !dbg !4227
  %common = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !4227
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4227
  %51 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4227
  %base118 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !4227
  %52 = bitcast %struct.tree_base* %base118 to i64*, !dbg !4227
  %bf.load119 = load i64, i64* %52, align 8, !dbg !4227
  %bf.clear120 = and i64 %bf.load119, 65535, !dbg !4227
  %bf.cast121 = trunc i64 %bf.clear120 to i32, !dbg !4227
  %cmp122 = icmp eq i32 %bf.cast121, 17, !dbg !4229
  br i1 %cmp122, label %if.then123, label %if.end124, !dbg !4230

if.then123:                                       ; preds = %if.end114
  br label %while.end126, !dbg !4231

if.end124:                                        ; preds = %if.end114
  store i8 1, i8* %ret, align 1, !dbg !4232
  br label %while.end126, !dbg !4233

if.else125:                                       ; preds = %if.else
  br label %while.end126, !dbg !4234

while.end126:                                     ; preds = %if.else125, %if.end124, %if.then123, %if.then91, %if.then80, %if.then41
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %comp_a), !dbg !4235
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %comp_b), !dbg !4236
  %53 = load i8, i8* %ret, align 1, !dbg !4237
  store i8 %53, i8* %retval, align 1, !dbg !4238
  br label %return, !dbg !4238

return:                                           ; preds = %while.end126, %if.then12, %if.then
  %54 = load i8, i8* %retval, align 1, !dbg !4239
  ret i8 %54, !dbg !4239
}

declare dso_local zeroext i8 @refs_output_dependent_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @refs_anti_dependent_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @refs_may_alias_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @estimated_loop_iterations(%struct.loop* %loop, i8 zeroext %conservative, %struct.double_int* %nit) #0 !dbg !4240 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %conservative.addr = alloca i8, align 1
  %nit.addr = alloca %struct.double_int*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4244, metadata !DIExpression()), !dbg !4245
  store i8 %conservative, i8* %conservative.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %conservative.addr, metadata !4246, metadata !DIExpression()), !dbg !4247
  store %struct.double_int* %nit, %struct.double_int** %nit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.double_int** %nit.addr, metadata !4248, metadata !DIExpression()), !dbg !4249
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4250
  call void @estimate_numbers_of_iterations_loop(%struct.loop* %0), !dbg !4251
  %1 = load i8, i8* %conservative.addr, align 1, !dbg !4252
  %tobool = icmp ne i8 %1, 0, !dbg !4252
  br i1 %tobool, label %if.then, label %if.else, !dbg !4254

if.then:                                          ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4255
  %any_upper_bound = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 14, !dbg !4258
  %3 = load i8, i8* %any_upper_bound, align 8, !dbg !4258
  %tobool1 = icmp ne i8 %3, 0, !dbg !4255
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !4259

if.then2:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !4260
  br label %return, !dbg !4260

if.end:                                           ; preds = %if.then
  %4 = load %struct.double_int*, %struct.double_int** %nit.addr, align 8, !dbg !4261
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4262
  %nb_iterations_upper_bound = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 12, !dbg !4263
  %6 = bitcast %struct.double_int* %4 to i8*, !dbg !4263
  %7 = bitcast %struct.double_int* %nb_iterations_upper_bound to i8*, !dbg !4263
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !4263
  br label %if.end6, !dbg !4264

if.else:                                          ; preds = %entry
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4265
  %any_estimate = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 15, !dbg !4268
  %9 = load i8, i8* %any_estimate, align 1, !dbg !4268
  %tobool3 = icmp ne i8 %9, 0, !dbg !4265
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !4269

if.then4:                                         ; preds = %if.else
  store i8 0, i8* %retval, align 1, !dbg !4270
  br label %return, !dbg !4270

if.end5:                                          ; preds = %if.else
  %10 = load %struct.double_int*, %struct.double_int** %nit.addr, align 8, !dbg !4271
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4272
  %nb_iterations_estimate = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 13, !dbg !4273
  %12 = bitcast %struct.double_int* %10 to i8*, !dbg !4273
  %13 = bitcast %struct.double_int* %nb_iterations_estimate to i8*, !dbg !4273
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 16, i1 false), !dbg !4273
  br label %if.end6

if.end6:                                          ; preds = %if.end5, %if.end
  store i8 1, i8* %retval, align 1, !dbg !4274
  br label %return, !dbg !4274

return:                                           ; preds = %if.end6, %if.then4, %if.then2
  %14 = load i8, i8* %retval, align 1, !dbg !4275
  ret i8 %14, !dbg !4275
}

declare dso_local void @estimate_numbers_of_iterations_loop(%struct.loop*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @estimated_loop_iterations_int(%struct.loop* %loop, i8 zeroext %conservative) #0 !dbg !4276 {
entry:
  %retval = alloca i64, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %conservative.addr = alloca i8, align 1
  %nit = alloca %struct.double_int, align 8
  %hwi_nit = alloca i64, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4279, metadata !DIExpression()), !dbg !4280
  store i8 %conservative, i8* %conservative.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %conservative.addr, metadata !4281, metadata !DIExpression()), !dbg !4282
  call void @llvm.dbg.declare(metadata %struct.double_int* %nit, metadata !4283, metadata !DIExpression()), !dbg !4284
  call void @llvm.dbg.declare(metadata i64* %hwi_nit, metadata !4285, metadata !DIExpression()), !dbg !4286
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4287
  %1 = load i8, i8* %conservative.addr, align 1, !dbg !4289
  %call = call zeroext i8 @estimated_loop_iterations(%struct.loop* %0, i8 zeroext %1, %struct.double_int* %nit), !dbg !4290
  %tobool = icmp ne i8 %call, 0, !dbg !4290
  br i1 %tobool, label %if.end, label %if.then, !dbg !4291

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval, align 8, !dbg !4292
  br label %return, !dbg !4292

if.end:                                           ; preds = %entry
  %2 = bitcast %struct.double_int* %nit to { i64, i64 }*, !dbg !4293
  %3 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 0, !dbg !4293
  %4 = load i64, i64* %3, align 8, !dbg !4293
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 1, !dbg !4293
  %6 = load i64, i64* %5, align 8, !dbg !4293
  %call1 = call zeroext i8 @double_int_fits_in_shwi_p(i64 %4, i64 %6), !dbg !4293
  %tobool2 = icmp ne i8 %call1, 0, !dbg !4293
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !4295

if.then3:                                         ; preds = %if.end
  store i64 -1, i64* %retval, align 8, !dbg !4296
  br label %return, !dbg !4296

if.end4:                                          ; preds = %if.end
  %7 = bitcast %struct.double_int* %nit to { i64, i64 }*, !dbg !4297
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0, !dbg !4297
  %9 = load i64, i64* %8, align 8, !dbg !4297
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1, !dbg !4297
  %11 = load i64, i64* %10, align 8, !dbg !4297
  %call5 = call i64 @double_int_to_shwi(i64 %9, i64 %11), !dbg !4297
  store i64 %call5, i64* %hwi_nit, align 8, !dbg !4298
  %12 = load i64, i64* %hwi_nit, align 8, !dbg !4299
  %cmp = icmp slt i64 %12, 0, !dbg !4300
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4299

cond.true:                                        ; preds = %if.end4
  br label %cond.end, !dbg !4299

cond.false:                                       ; preds = %if.end4
  %13 = load i64, i64* %hwi_nit, align 8, !dbg !4301
  br label %cond.end, !dbg !4299

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -1, %cond.true ], [ %13, %cond.false ], !dbg !4299
  store i64 %cond, i64* %retval, align 8, !dbg !4302
  br label %return, !dbg !4302

return:                                           ; preds = %cond.end, %if.then3, %if.then
  %14 = load i64, i64* %retval, align 8, !dbg !4303
  ret i64 %14, !dbg !4303
}

declare dso_local zeroext i8 @double_int_fits_in_shwi_p(i64, i64) #2

declare dso_local i64 @double_int_to_shwi(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @compute_all_dependences(%struct.VEC_data_reference_p_heap* %datarefs, %struct.VEC_ddr_p_heap** %dependence_relations, %struct.VEC_loop_p_heap* %loop_nest, i8 zeroext %compute_self_and_rr) #0 !dbg !4304 {
entry:
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap*, align 8
  %dependence_relations.addr = alloca %struct.VEC_ddr_p_heap**, align 8
  %loop_nest.addr = alloca %struct.VEC_loop_p_heap*, align 8
  %compute_self_and_rr.addr = alloca i8, align 1
  %ddr = alloca %struct.data_dependence_relation*, align 8
  %a = alloca %struct.data_reference*, align 8
  %b = alloca %struct.data_reference*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.VEC_data_reference_p_heap* %datarefs, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap** %datarefs.addr, metadata !4308, metadata !DIExpression()), !dbg !4309
  store %struct.VEC_ddr_p_heap** %dependence_relations, %struct.VEC_ddr_p_heap*** %dependence_relations.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap*** %dependence_relations.addr, metadata !4310, metadata !DIExpression()), !dbg !4311
  store %struct.VEC_loop_p_heap* %loop_nest, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap** %loop_nest.addr, metadata !4312, metadata !DIExpression()), !dbg !4313
  store i8 %compute_self_and_rr, i8* %compute_self_and_rr.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %compute_self_and_rr.addr, metadata !4314, metadata !DIExpression()), !dbg !4315
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr, metadata !4316, metadata !DIExpression()), !dbg !4317
  call void @llvm.dbg.declare(metadata %struct.data_reference** %a, metadata !4318, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.declare(metadata %struct.data_reference** %b, metadata !4320, metadata !DIExpression()), !dbg !4321
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4322, metadata !DIExpression()), !dbg !4323
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4324, metadata !DIExpression()), !dbg !4325
  store i32 0, i32* %i, align 4, !dbg !4326
  br label %for.cond, !dbg !4328

for.cond:                                         ; preds = %for.inc29, %entry
  %0 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !4329
  %tobool = icmp ne %struct.VEC_data_reference_p_heap* %0, null, !dbg !4329
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4329

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !4329
  %base = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %1, i32 0, i32 0, !dbg !4329
  br label %cond.end, !dbg !4329

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4329

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_reference_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4329
  %2 = load i32, i32* %i, align 4, !dbg !4329
  %call = call i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %cond, i32 %2, %struct.data_reference** %a), !dbg !4329
  %tobool1 = icmp ne i32 %call, 0, !dbg !4331
  br i1 %tobool1, label %for.body, label %for.end31, !dbg !4331

for.body:                                         ; preds = %cond.end
  %3 = load i32, i32* %i, align 4, !dbg !4332
  %add = add i32 %3, 1, !dbg !4334
  store i32 %add, i32* %j, align 4, !dbg !4335
  br label %for.cond2, !dbg !4336

for.cond2:                                        ; preds = %for.inc, %for.body
  %4 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !4337
  %tobool3 = icmp ne %struct.VEC_data_reference_p_heap* %4, null, !dbg !4337
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !4337

cond.true4:                                       ; preds = %for.cond2
  %5 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !4337
  %base5 = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %5, i32 0, i32 0, !dbg !4337
  br label %cond.end7, !dbg !4337

cond.false6:                                      ; preds = %for.cond2
  br label %cond.end7, !dbg !4337

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_data_reference_p_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !4337
  %6 = load i32, i32* %j, align 4, !dbg !4337
  %call9 = call i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %cond8, i32 %6, %struct.data_reference** %b), !dbg !4337
  %tobool10 = icmp ne i32 %call9, 0, !dbg !4339
  br i1 %tobool10, label %for.body11, label %for.end, !dbg !4339

for.body11:                                       ; preds = %cond.end7
  %7 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !4340
  %is_read = getelementptr inbounds %struct.data_reference, %struct.data_reference* %7, i32 0, i32 3, !dbg !4340
  %8 = load i8, i8* %is_read, align 8, !dbg !4340
  %tobool12 = icmp ne i8 %8, 0, !dbg !4340
  br i1 %tobool12, label %lor.lhs.false, label %if.then, !dbg !4342

lor.lhs.false:                                    ; preds = %for.body11
  %9 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !4343
  %is_read13 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %9, i32 0, i32 3, !dbg !4343
  %10 = load i8, i8* %is_read13, align 8, !dbg !4343
  %tobool14 = icmp ne i8 %10, 0, !dbg !4343
  br i1 %tobool14, label %lor.lhs.false15, label %if.then, !dbg !4344

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %11 = load i8, i8* %compute_self_and_rr.addr, align 1, !dbg !4345
  %conv = zext i8 %11 to i32, !dbg !4345
  %tobool16 = icmp ne i32 %conv, 0, !dbg !4345
  br i1 %tobool16, label %if.then, label %if.end28, !dbg !4346

if.then:                                          ; preds = %lor.lhs.false15, %lor.lhs.false, %for.body11
  %12 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !4347
  %13 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !4349
  %14 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8, !dbg !4350
  %call17 = call %struct.data_dependence_relation* @initialize_data_dependence_relation(%struct.data_reference* %12, %struct.data_reference* %13, %struct.VEC_loop_p_heap* %14), !dbg !4351
  store %struct.data_dependence_relation* %call17, %struct.data_dependence_relation** %ddr, align 8, !dbg !4352
  %15 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %dependence_relations.addr, align 8, !dbg !4353
  %16 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !4353
  %call18 = call %struct.data_dependence_relation** @VEC_ddr_p_heap_safe_push(%struct.VEC_ddr_p_heap** %15, %struct.data_dependence_relation* %16), !dbg !4353
  %17 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8, !dbg !4354
  %tobool19 = icmp ne %struct.VEC_loop_p_heap* %17, null, !dbg !4354
  br i1 %tobool19, label %if.then20, label %if.end, !dbg !4356

if.then20:                                        ; preds = %if.then
  %18 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !4357
  %19 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8, !dbg !4358
  %tobool21 = icmp ne %struct.VEC_loop_p_heap* %19, null, !dbg !4358
  br i1 %tobool21, label %cond.true22, label %cond.false24, !dbg !4358

cond.true22:                                      ; preds = %if.then20
  %20 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8, !dbg !4358
  %base23 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %20, i32 0, i32 0, !dbg !4358
  br label %cond.end25, !dbg !4358

cond.false24:                                     ; preds = %if.then20
  br label %cond.end25, !dbg !4358

cond.end25:                                       ; preds = %cond.false24, %cond.true22
  %cond26 = phi %struct.VEC_loop_p_base* [ %base23, %cond.true22 ], [ null, %cond.false24 ], !dbg !4358
  %call27 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond26, i32 0), !dbg !4358
  call void @compute_affine_dependence(%struct.data_dependence_relation* %18, %struct.loop* %call27), !dbg !4359
  br label %if.end, !dbg !4359

if.end:                                           ; preds = %cond.end25, %if.then
  br label %if.end28, !dbg !4360

if.end28:                                         ; preds = %if.end, %lor.lhs.false15
  br label %for.inc, !dbg !4345

for.inc:                                          ; preds = %if.end28
  %21 = load i32, i32* %j, align 4, !dbg !4361
  %inc = add i32 %21, 1, !dbg !4361
  store i32 %inc, i32* %j, align 4, !dbg !4361
  br label %for.cond2, !dbg !4362, !llvm.loop !4363

for.end:                                          ; preds = %cond.end7
  br label %for.inc29, !dbg !4364

for.inc29:                                        ; preds = %for.end
  %22 = load i32, i32* %i, align 4, !dbg !4365
  %inc30 = add i32 %22, 1, !dbg !4365
  store i32 %inc30, i32* %i, align 4, !dbg !4365
  br label %for.cond, !dbg !4366, !llvm.loop !4367

for.end31:                                        ; preds = %cond.end
  %23 = load i8, i8* %compute_self_and_rr.addr, align 1, !dbg !4369
  %tobool32 = icmp ne i8 %23, 0, !dbg !4369
  br i1 %tobool32, label %if.then33, label %if.end49, !dbg !4371

if.then33:                                        ; preds = %for.end31
  store i32 0, i32* %i, align 4, !dbg !4372
  br label %for.cond34, !dbg !4374

for.cond34:                                       ; preds = %for.inc46, %if.then33
  %24 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !4375
  %tobool35 = icmp ne %struct.VEC_data_reference_p_heap* %24, null, !dbg !4375
  br i1 %tobool35, label %cond.true36, label %cond.false38, !dbg !4375

cond.true36:                                      ; preds = %for.cond34
  %25 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !4375
  %base37 = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %25, i32 0, i32 0, !dbg !4375
  br label %cond.end39, !dbg !4375

cond.false38:                                     ; preds = %for.cond34
  br label %cond.end39, !dbg !4375

cond.end39:                                       ; preds = %cond.false38, %cond.true36
  %cond40 = phi %struct.VEC_data_reference_p_base* [ %base37, %cond.true36 ], [ null, %cond.false38 ], !dbg !4375
  %26 = load i32, i32* %i, align 4, !dbg !4375
  %call41 = call i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %cond40, i32 %26, %struct.data_reference** %a), !dbg !4375
  %tobool42 = icmp ne i32 %call41, 0, !dbg !4377
  br i1 %tobool42, label %for.body43, label %for.end48, !dbg !4377

for.body43:                                       ; preds = %cond.end39
  %27 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !4378
  %28 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !4380
  %29 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8, !dbg !4381
  %call44 = call %struct.data_dependence_relation* @initialize_data_dependence_relation(%struct.data_reference* %27, %struct.data_reference* %28, %struct.VEC_loop_p_heap* %29), !dbg !4382
  store %struct.data_dependence_relation* %call44, %struct.data_dependence_relation** %ddr, align 8, !dbg !4383
  %30 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %dependence_relations.addr, align 8, !dbg !4384
  %31 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !4384
  %call45 = call %struct.data_dependence_relation** @VEC_ddr_p_heap_safe_push(%struct.VEC_ddr_p_heap** %30, %struct.data_dependence_relation* %31), !dbg !4384
  %32 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !4385
  call void @compute_self_dependence(%struct.data_dependence_relation* %32), !dbg !4386
  br label %for.inc46, !dbg !4387

for.inc46:                                        ; preds = %for.body43
  %33 = load i32, i32* %i, align 4, !dbg !4388
  %inc47 = add i32 %33, 1, !dbg !4388
  store i32 %inc47, i32* %i, align 4, !dbg !4388
  br label %for.cond34, !dbg !4389, !llvm.loop !4390

for.end48:                                        ; preds = %cond.end39
  br label %if.end49, !dbg !4391

if.end49:                                         ; preds = %for.end48, %for.end31
  ret void, !dbg !4392
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.data_dependence_relation* @initialize_data_dependence_relation(%struct.data_reference* %a, %struct.data_reference* %b, %struct.VEC_loop_p_heap* %loop_nest) #0 !dbg !4393 {
entry:
  %retval = alloca %struct.data_dependence_relation*, align 8
  %a.addr = alloca %struct.data_reference*, align 8
  %b.addr = alloca %struct.data_reference*, align 8
  %loop_nest.addr = alloca %struct.VEC_loop_p_heap*, align 8
  %res = alloca %struct.data_dependence_relation*, align 8
  %i = alloca i32, align 4
  %subscript = alloca %struct.subscript*, align 8
  store %struct.data_reference* %a, %struct.data_reference** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %a.addr, metadata !4396, metadata !DIExpression()), !dbg !4397
  store %struct.data_reference* %b, %struct.data_reference** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %b.addr, metadata !4398, metadata !DIExpression()), !dbg !4399
  store %struct.VEC_loop_p_heap* %loop_nest, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap** %loop_nest.addr, metadata !4400, metadata !DIExpression()), !dbg !4401
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %res, metadata !4402, metadata !DIExpression()), !dbg !4403
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4404, metadata !DIExpression()), !dbg !4405
  %call = call i8* @xmalloc(i64 64), !dbg !4406
  %0 = bitcast i8* %call to %struct.data_dependence_relation*, !dbg !4406
  store %struct.data_dependence_relation* %0, %struct.data_dependence_relation** %res, align 8, !dbg !4407
  %1 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4408
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4409
  %a1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 0, !dbg !4409
  store %struct.data_reference* %1, %struct.data_reference** %a1, align 8, !dbg !4410
  %3 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4411
  %4 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4412
  %b2 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %4, i32 0, i32 1, !dbg !4412
  store %struct.data_reference* %3, %struct.data_reference** %b2, align 8, !dbg !4413
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4414
  %loop_nest3 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 4, !dbg !4414
  store %struct.VEC_loop_p_heap* null, %struct.VEC_loop_p_heap** %loop_nest3, align 8, !dbg !4415
  %6 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4416
  %reversed_p = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %6, i32 0, i32 8, !dbg !4416
  store i8 0, i8* %reversed_p, align 4, !dbg !4417
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4418
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 3, !dbg !4418
  store %struct.VEC_subscript_p_heap* null, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !4419
  %8 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4420
  %dir_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %8, i32 0, i32 5, !dbg !4420
  store %struct.VEC_lambda_vector_heap* null, %struct.VEC_lambda_vector_heap** %dir_vects, align 8, !dbg !4421
  %9 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4422
  %dist_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %9, i32 0, i32 6, !dbg !4422
  store %struct.VEC_lambda_vector_heap* null, %struct.VEC_lambda_vector_heap** %dist_vects, align 8, !dbg !4423
  %10 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4424
  %cmp = icmp eq %struct.data_reference* %10, null, !dbg !4426
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4427

lor.lhs.false:                                    ; preds = %entry
  %11 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4428
  %cmp4 = icmp eq %struct.data_reference* %11, null, !dbg !4429
  br i1 %cmp4, label %if.then, label %if.end, !dbg !4430

if.then:                                          ; preds = %lor.lhs.false, %entry
  %12 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4431
  %13 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4433
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %13, i32 0, i32 2, !dbg !4433
  store %union.tree_node* %12, %union.tree_node** %are_dependent, align 8, !dbg !4434
  %14 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4435
  store %struct.data_dependence_relation* %14, %struct.data_dependence_relation** %retval, align 8, !dbg !4436
  br label %return, !dbg !4436

if.end:                                           ; preds = %lor.lhs.false
  %15 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4437
  %16 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4439
  %call5 = call zeroext i8 @dr_may_alias_p(%struct.data_reference* %15, %struct.data_reference* %16), !dbg !4440
  %tobool = icmp ne i8 %call5, 0, !dbg !4440
  br i1 %tobool, label %if.end8, label %if.then6, !dbg !4441

if.then6:                                         ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !4442
  %18 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4444
  %are_dependent7 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %18, i32 0, i32 2, !dbg !4444
  store %union.tree_node* %17, %union.tree_node** %are_dependent7, align 8, !dbg !4445
  %19 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4446
  store %struct.data_dependence_relation* %19, %struct.data_dependence_relation** %retval, align 8, !dbg !4447
  br label %return, !dbg !4447

if.end8:                                          ; preds = %if.end
  %20 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4448
  %ref = getelementptr inbounds %struct.data_reference, %struct.data_reference* %20, i32 0, i32 1, !dbg !4448
  %21 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !4448
  %22 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4450
  %ref9 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %22, i32 0, i32 1, !dbg !4450
  %23 = load %union.tree_node*, %union.tree_node** %ref9, align 8, !dbg !4450
  %call10 = call i32 @operand_equal_p(%union.tree_node* %21, %union.tree_node* %23, i32 0), !dbg !4451
  %tobool11 = icmp ne i32 %call10, 0, !dbg !4451
  br i1 %tobool11, label %if.then12, label %if.end21, !dbg !4452

if.then12:                                        ; preds = %if.end8
  %24 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4453
  %affine_p = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %24, i32 0, i32 9, !dbg !4453
  store i8 1, i8* %affine_p, align 1, !dbg !4455
  %25 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4456
  %are_dependent13 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %25, i32 0, i32 2, !dbg !4456
  store %union.tree_node* null, %union.tree_node** %are_dependent13, align 8, !dbg !4457
  %26 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4458
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %26, i32 0, i32 5, !dbg !4458
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !4458
  %27 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !4458
  %tobool14 = icmp ne %struct.VEC_tree_heap* %27, null, !dbg !4458
  br i1 %tobool14, label %cond.true, label %cond.false, !dbg !4458

cond.true:                                        ; preds = %if.then12
  %28 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4458
  %indices15 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %28, i32 0, i32 5, !dbg !4458
  %access_fns16 = getelementptr inbounds %struct.indices, %struct.indices* %indices15, i32 0, i32 1, !dbg !4458
  %29 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns16, align 8, !dbg !4458
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %29, i32 0, i32 0, !dbg !4458
  br label %cond.end, !dbg !4458

cond.false:                                       ; preds = %if.then12
  br label %cond.end, !dbg !4458

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4458
  %call17 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !4458
  %call18 = call %struct.VEC_subscript_p_heap* @VEC_subscript_p_heap_alloc(i32 %call17), !dbg !4458
  %30 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4459
  %subscripts19 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %30, i32 0, i32 3, !dbg !4459
  store %struct.VEC_subscript_p_heap* %call18, %struct.VEC_subscript_p_heap** %subscripts19, align 8, !dbg !4460
  %31 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8, !dbg !4461
  %32 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4462
  %loop_nest20 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %32, i32 0, i32 4, !dbg !4462
  store %struct.VEC_loop_p_heap* %31, %struct.VEC_loop_p_heap** %loop_nest20, align 8, !dbg !4463
  %33 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4464
  %inner_loop = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %33, i32 0, i32 7, !dbg !4464
  store i32 0, i32* %inner_loop, align 8, !dbg !4465
  %34 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4466
  %self_reference_p = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %34, i32 0, i32 10, !dbg !4466
  store i8 1, i8* %self_reference_p, align 2, !dbg !4467
  %35 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4468
  call void @compute_self_dependence(%struct.data_dependence_relation* %35), !dbg !4469
  %36 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4470
  store %struct.data_dependence_relation* %36, %struct.data_dependence_relation** %retval, align 8, !dbg !4471
  br label %return, !dbg !4471

if.end21:                                         ; preds = %if.end8
  %37 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4472
  %indices22 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %37, i32 0, i32 5, !dbg !4472
  %base_object = getelementptr inbounds %struct.indices, %struct.indices* %indices22, i32 0, i32 0, !dbg !4472
  %38 = load %union.tree_node*, %union.tree_node** %base_object, align 8, !dbg !4472
  %39 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4474
  %indices23 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %39, i32 0, i32 5, !dbg !4474
  %base_object24 = getelementptr inbounds %struct.indices, %struct.indices* %indices23, i32 0, i32 0, !dbg !4474
  %40 = load %union.tree_node*, %union.tree_node** %base_object24, align 8, !dbg !4474
  %call25 = call i32 @operand_equal_p(%union.tree_node* %38, %union.tree_node* %40, i32 0), !dbg !4475
  %tobool26 = icmp ne i32 %call25, 0, !dbg !4475
  br i1 %tobool26, label %if.end29, label %if.then27, !dbg !4476

if.then27:                                        ; preds = %if.end21
  %41 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4477
  %42 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4479
  %are_dependent28 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %42, i32 0, i32 2, !dbg !4479
  store %union.tree_node* %41, %union.tree_node** %are_dependent28, align 8, !dbg !4480
  %43 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4481
  store %struct.data_dependence_relation* %43, %struct.data_dependence_relation** %retval, align 8, !dbg !4482
  br label %return, !dbg !4482

if.end29:                                         ; preds = %if.end21
  %44 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8, !dbg !4483
  %tobool30 = icmp ne %struct.VEC_loop_p_heap* %44, null, !dbg !4483
  br i1 %tobool30, label %land.lhs.true, label %if.end44, !dbg !4485

land.lhs.true:                                    ; preds = %if.end29
  %45 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8, !dbg !4486
  %tobool31 = icmp ne %struct.VEC_loop_p_heap* %45, null, !dbg !4486
  br i1 %tobool31, label %cond.true32, label %cond.false34, !dbg !4486

cond.true32:                                      ; preds = %land.lhs.true
  %46 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8, !dbg !4486
  %base33 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %46, i32 0, i32 0, !dbg !4486
  br label %cond.end35, !dbg !4486

cond.false34:                                     ; preds = %land.lhs.true
  br label %cond.end35, !dbg !4486

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi %struct.VEC_loop_p_base* [ %base33, %cond.true32 ], [ null, %cond.false34 ], !dbg !4486
  %call37 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond36, i32 0), !dbg !4486
  %47 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4487
  %indices38 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %47, i32 0, i32 5, !dbg !4487
  %base_object39 = getelementptr inbounds %struct.indices, %struct.indices* %indices38, i32 0, i32 0, !dbg !4487
  %48 = load %union.tree_node*, %union.tree_node** %base_object39, align 8, !dbg !4487
  %call40 = call zeroext i8 @object_address_invariant_in_loop_p(%struct.loop* %call37, %union.tree_node* %48), !dbg !4488
  %tobool41 = icmp ne i8 %call40, 0, !dbg !4488
  br i1 %tobool41, label %if.end44, label %if.then42, !dbg !4489

if.then42:                                        ; preds = %cond.end35
  %49 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4490
  %50 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4492
  %are_dependent43 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %50, i32 0, i32 2, !dbg !4492
  store %union.tree_node* %49, %union.tree_node** %are_dependent43, align 8, !dbg !4493
  %51 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4494
  store %struct.data_dependence_relation* %51, %struct.data_dependence_relation** %retval, align 8, !dbg !4495
  br label %return, !dbg !4495

if.end44:                                         ; preds = %cond.end35, %if.end29
  %52 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4496
  %indices45 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %52, i32 0, i32 5, !dbg !4496
  %access_fns46 = getelementptr inbounds %struct.indices, %struct.indices* %indices45, i32 0, i32 1, !dbg !4496
  %53 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns46, align 8, !dbg !4496
  %tobool47 = icmp ne %struct.VEC_tree_heap* %53, null, !dbg !4496
  br i1 %tobool47, label %cond.true48, label %cond.false52, !dbg !4496

cond.true48:                                      ; preds = %if.end44
  %54 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4496
  %indices49 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %54, i32 0, i32 5, !dbg !4496
  %access_fns50 = getelementptr inbounds %struct.indices, %struct.indices* %indices49, i32 0, i32 1, !dbg !4496
  %55 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns50, align 8, !dbg !4496
  %base51 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %55, i32 0, i32 0, !dbg !4496
  br label %cond.end53, !dbg !4496

cond.false52:                                     ; preds = %if.end44
  br label %cond.end53, !dbg !4496

cond.end53:                                       ; preds = %cond.false52, %cond.true48
  %cond54 = phi %struct.VEC_tree_base* [ %base51, %cond.true48 ], [ null, %cond.false52 ], !dbg !4496
  %call55 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond54), !dbg !4496
  %56 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4496
  %indices56 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %56, i32 0, i32 5, !dbg !4496
  %access_fns57 = getelementptr inbounds %struct.indices, %struct.indices* %indices56, i32 0, i32 1, !dbg !4496
  %57 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns57, align 8, !dbg !4496
  %tobool58 = icmp ne %struct.VEC_tree_heap* %57, null, !dbg !4496
  br i1 %tobool58, label %cond.true59, label %cond.false63, !dbg !4496

cond.true59:                                      ; preds = %cond.end53
  %58 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4496
  %indices60 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %58, i32 0, i32 5, !dbg !4496
  %access_fns61 = getelementptr inbounds %struct.indices, %struct.indices* %indices60, i32 0, i32 1, !dbg !4496
  %59 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns61, align 8, !dbg !4496
  %base62 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %59, i32 0, i32 0, !dbg !4496
  br label %cond.end64, !dbg !4496

cond.false63:                                     ; preds = %cond.end53
  br label %cond.end64, !dbg !4496

cond.end64:                                       ; preds = %cond.false63, %cond.true59
  %cond65 = phi %struct.VEC_tree_base* [ %base62, %cond.true59 ], [ null, %cond.false63 ], !dbg !4496
  %call66 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond65), !dbg !4496
  %cmp67 = icmp eq i32 %call55, %call66, !dbg !4496
  br i1 %cmp67, label %cond.false69, label %cond.true68, !dbg !4496

cond.true68:                                      ; preds = %cond.end64
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 1419, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !4496
  br label %cond.end70, !dbg !4496

cond.false69:                                     ; preds = %cond.end64
  br label %cond.end70, !dbg !4496

cond.end70:                                       ; preds = %cond.false69, %cond.true68
  %cond71 = phi i32 [ 0, %cond.true68 ], [ 0, %cond.false69 ], !dbg !4496
  %60 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4497
  %affine_p72 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %60, i32 0, i32 9, !dbg !4497
  store i8 1, i8* %affine_p72, align 1, !dbg !4498
  %61 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4499
  %are_dependent73 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %61, i32 0, i32 2, !dbg !4499
  store %union.tree_node* null, %union.tree_node** %are_dependent73, align 8, !dbg !4500
  %62 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4501
  %indices74 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %62, i32 0, i32 5, !dbg !4501
  %access_fns75 = getelementptr inbounds %struct.indices, %struct.indices* %indices74, i32 0, i32 1, !dbg !4501
  %63 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns75, align 8, !dbg !4501
  %tobool76 = icmp ne %struct.VEC_tree_heap* %63, null, !dbg !4501
  br i1 %tobool76, label %cond.true77, label %cond.false81, !dbg !4501

cond.true77:                                      ; preds = %cond.end70
  %64 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4501
  %indices78 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %64, i32 0, i32 5, !dbg !4501
  %access_fns79 = getelementptr inbounds %struct.indices, %struct.indices* %indices78, i32 0, i32 1, !dbg !4501
  %65 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns79, align 8, !dbg !4501
  %base80 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %65, i32 0, i32 0, !dbg !4501
  br label %cond.end82, !dbg !4501

cond.false81:                                     ; preds = %cond.end70
  br label %cond.end82, !dbg !4501

cond.end82:                                       ; preds = %cond.false81, %cond.true77
  %cond83 = phi %struct.VEC_tree_base* [ %base80, %cond.true77 ], [ null, %cond.false81 ], !dbg !4501
  %call84 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond83), !dbg !4501
  %call85 = call %struct.VEC_subscript_p_heap* @VEC_subscript_p_heap_alloc(i32 %call84), !dbg !4501
  %66 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4502
  %subscripts86 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %66, i32 0, i32 3, !dbg !4502
  store %struct.VEC_subscript_p_heap* %call85, %struct.VEC_subscript_p_heap** %subscripts86, align 8, !dbg !4503
  %67 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8, !dbg !4504
  %68 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4505
  %loop_nest87 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %68, i32 0, i32 4, !dbg !4505
  store %struct.VEC_loop_p_heap* %67, %struct.VEC_loop_p_heap** %loop_nest87, align 8, !dbg !4506
  %69 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4507
  %inner_loop88 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %69, i32 0, i32 7, !dbg !4507
  store i32 0, i32* %inner_loop88, align 8, !dbg !4508
  %70 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4509
  %self_reference_p89 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %70, i32 0, i32 10, !dbg !4509
  store i8 0, i8* %self_reference_p89, align 2, !dbg !4510
  store i32 0, i32* %i, align 4, !dbg !4511
  br label %for.cond, !dbg !4513

for.cond:                                         ; preds = %for.inc, %cond.end82
  %71 = load i32, i32* %i, align 4, !dbg !4514
  %72 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4516
  %indices90 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %72, i32 0, i32 5, !dbg !4516
  %access_fns91 = getelementptr inbounds %struct.indices, %struct.indices* %indices90, i32 0, i32 1, !dbg !4516
  %73 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns91, align 8, !dbg !4516
  %tobool92 = icmp ne %struct.VEC_tree_heap* %73, null, !dbg !4516
  br i1 %tobool92, label %cond.true93, label %cond.false97, !dbg !4516

cond.true93:                                      ; preds = %for.cond
  %74 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4516
  %indices94 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %74, i32 0, i32 5, !dbg !4516
  %access_fns95 = getelementptr inbounds %struct.indices, %struct.indices* %indices94, i32 0, i32 1, !dbg !4516
  %75 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns95, align 8, !dbg !4516
  %base96 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %75, i32 0, i32 0, !dbg !4516
  br label %cond.end98, !dbg !4516

cond.false97:                                     ; preds = %for.cond
  br label %cond.end98, !dbg !4516

cond.end98:                                       ; preds = %cond.false97, %cond.true93
  %cond99 = phi %struct.VEC_tree_base* [ %base96, %cond.true93 ], [ null, %cond.false97 ], !dbg !4516
  %call100 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond99), !dbg !4516
  %cmp101 = icmp ult i32 %71, %call100, !dbg !4517
  br i1 %cmp101, label %for.body, label %for.end, !dbg !4518

for.body:                                         ; preds = %cond.end98
  call void @llvm.dbg.declare(metadata %struct.subscript** %subscript, metadata !4519, metadata !DIExpression()), !dbg !4521
  %call102 = call i8* @xmalloc(i64 32), !dbg !4522
  %76 = bitcast i8* %call102 to %struct.subscript*, !dbg !4522
  store %struct.subscript* %76, %struct.subscript** %subscript, align 8, !dbg !4523
  %call103 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !4524
  %77 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !4525
  %conflicting_iterations_in_a = getelementptr inbounds %struct.subscript, %struct.subscript* %77, i32 0, i32 0, !dbg !4525
  store %struct.conflict_function* %call103, %struct.conflict_function** %conflicting_iterations_in_a, align 8, !dbg !4526
  %call104 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !4527
  %78 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !4528
  %conflicting_iterations_in_b = getelementptr inbounds %struct.subscript, %struct.subscript* %78, i32 0, i32 1, !dbg !4528
  store %struct.conflict_function* %call104, %struct.conflict_function** %conflicting_iterations_in_b, align 8, !dbg !4529
  %79 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4530
  %80 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !4531
  %last_conflict = getelementptr inbounds %struct.subscript, %struct.subscript* %80, i32 0, i32 2, !dbg !4531
  store %union.tree_node* %79, %union.tree_node** %last_conflict, align 8, !dbg !4532
  %81 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4533
  %82 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !4534
  %distance = getelementptr inbounds %struct.subscript, %struct.subscript* %82, i32 0, i32 3, !dbg !4534
  store %union.tree_node* %81, %union.tree_node** %distance, align 8, !dbg !4535
  %83 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4536
  %subscripts105 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %83, i32 0, i32 3, !dbg !4536
  %84 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !4536
  %call106 = call %struct.subscript** @VEC_subscript_p_heap_safe_push(%struct.VEC_subscript_p_heap** %subscripts105, %struct.subscript* %84), !dbg !4536
  br label %for.inc, !dbg !4537

for.inc:                                          ; preds = %for.body
  %85 = load i32, i32* %i, align 4, !dbg !4538
  %inc = add i32 %85, 1, !dbg !4538
  store i32 %inc, i32* %i, align 4, !dbg !4538
  br label %for.cond, !dbg !4539, !llvm.loop !4540

for.end:                                          ; preds = %cond.end98
  %86 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %res, align 8, !dbg !4542
  store %struct.data_dependence_relation* %86, %struct.data_dependence_relation** %retval, align 8, !dbg !4543
  br label %return, !dbg !4543

return:                                           ; preds = %for.end, %if.then42, %if.then27, %cond.end, %if.then6, %if.then
  %87 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %retval, align 8, !dbg !4544
  ret %struct.data_dependence_relation* %87, !dbg !4544
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.data_dependence_relation** @VEC_ddr_p_heap_safe_push(%struct.VEC_ddr_p_heap** %vec_, %struct.data_dependence_relation* %obj_) #0 !dbg !4545 {
entry:
  %vec_.addr = alloca %struct.VEC_ddr_p_heap**, align 8
  %obj_.addr = alloca %struct.data_dependence_relation*, align 8
  store %struct.VEC_ddr_p_heap** %vec_, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap*** %vec_.addr, metadata !4548, metadata !DIExpression()), !dbg !4549
  store %struct.data_dependence_relation* %obj_, %struct.data_dependence_relation** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %obj_.addr, metadata !4550, metadata !DIExpression()), !dbg !4549
  %0 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8, !dbg !4549
  %call = call i32 @VEC_ddr_p_heap_reserve(%struct.VEC_ddr_p_heap** %0, i32 1), !dbg !4549
  %1 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8, !dbg !4549
  %2 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %1, align 8, !dbg !4549
  %tobool = icmp ne %struct.VEC_ddr_p_heap* %2, null, !dbg !4549
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4549

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8, !dbg !4549
  %4 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %3, align 8, !dbg !4549
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %4, i32 0, i32 0, !dbg !4549
  br label %cond.end, !dbg !4549

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4549

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ddr_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4549
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %obj_.addr, align 8, !dbg !4549
  %call1 = call %struct.data_dependence_relation** @VEC_ddr_p_base_quick_push(%struct.VEC_ddr_p_base* %cond, %struct.data_dependence_relation* %5), !dbg !4549
  ret %struct.data_dependence_relation** %call1, !dbg !4549
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_affine_dependence(%struct.data_dependence_relation* %ddr, %struct.loop* %loop_nest) #0 !dbg !4551 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %loop_nest.addr = alloca %struct.loop*, align 8
  %dra = alloca %struct.data_reference*, align 8
  %drb = alloca %struct.data_reference*, align 8
  %maybe_dependent = alloca i8, align 1
  %dir_vects = alloca %struct.VEC_lambda_vector_heap*, align 8
  %dist_vects = alloca %struct.VEC_lambda_vector_heap*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !4554, metadata !DIExpression()), !dbg !4555
  store %struct.loop* %loop_nest, %struct.loop** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop_nest.addr, metadata !4556, metadata !DIExpression()), !dbg !4557
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dra, metadata !4558, metadata !DIExpression()), !dbg !4559
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4560
  %a = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 0, !dbg !4560
  %1 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !4560
  store %struct.data_reference* %1, %struct.data_reference** %dra, align 8, !dbg !4559
  call void @llvm.dbg.declare(metadata %struct.data_reference** %drb, metadata !4561, metadata !DIExpression()), !dbg !4562
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4563
  %b = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 1, !dbg !4563
  %3 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !4563
  store %struct.data_reference* %3, %struct.data_reference** %drb, align 8, !dbg !4562
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4564
  %tobool = icmp ne %struct._IO_FILE* %4, null, !dbg !4564
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4566

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* @dump_flags, align 4, !dbg !4567
  %and = and i32 %5, 8, !dbg !4568
  %tobool1 = icmp ne i32 %and, 0, !dbg !4568
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4569

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4570
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.95, i64 0, i64 0)), !dbg !4572
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4573
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.96, i64 0, i64 0)), !dbg !4574
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4575
  %9 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !4576
  %stmt = getelementptr inbounds %struct.data_reference, %struct.data_reference* %9, i32 0, i32 0, !dbg !4576
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4576
  call void @print_gimple_stmt(%struct._IO_FILE* %8, %union.gimple_statement_d* %10, i32 0, i32 0), !dbg !4577
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4578
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.97, i64 0, i64 0)), !dbg !4579
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4580
  %13 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !4581
  %stmt4 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %13, i32 0, i32 0, !dbg !4581
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt4, align 8, !dbg !4581
  call void @print_gimple_stmt(%struct._IO_FILE* %12, %union.gimple_statement_d* %14, i32 0, i32 0), !dbg !4582
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4583
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !4584
  br label %if.end, !dbg !4585

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %16 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4586
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %16, i32 0, i32 2, !dbg !4586
  %17 = load %union.tree_node*, %union.tree_node** %are_dependent, align 8, !dbg !4586
  %cmp = icmp eq %union.tree_node* %17, null, !dbg !4588
  br i1 %cmp, label %land.lhs.true6, label %if.end63, !dbg !4589

land.lhs.true6:                                   ; preds = %if.end
  %18 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4590
  %self_reference_p = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %18, i32 0, i32 10, !dbg !4590
  %19 = load i8, i8* %self_reference_p, align 2, !dbg !4590
  %tobool7 = icmp ne i8 %19, 0, !dbg !4590
  br i1 %tobool7, label %if.end63, label %if.then8, !dbg !4591

if.then8:                                         ; preds = %land.lhs.true6
  %20 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 0), align 4, !dbg !4592
  %inc = add nsw i32 %20, 1, !dbg !4592
  store i32 %inc, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 0), align 4, !dbg !4592
  %21 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !4594
  %22 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !4596
  %call9 = call zeroext i8 @access_functions_are_affine_or_constant_p(%struct.data_reference* %21, %struct.loop* %22), !dbg !4597
  %conv = zext i8 %call9 to i32, !dbg !4597
  %tobool10 = icmp ne i32 %conv, 0, !dbg !4597
  br i1 %tobool10, label %land.lhs.true11, label %if.else51, !dbg !4598

land.lhs.true11:                                  ; preds = %if.then8
  %23 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !4599
  %24 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !4600
  %call12 = call zeroext i8 @access_functions_are_affine_or_constant_p(%struct.data_reference* %23, %struct.loop* %24), !dbg !4601
  %conv13 = zext i8 %call12 to i32, !dbg !4601
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !4601
  br i1 %tobool14, label %if.then15, label %if.else51, !dbg !4602

if.then15:                                        ; preds = %land.lhs.true11
  %25 = load i32, i32* @flag_check_data_deps, align 4, !dbg !4603
  %tobool16 = icmp ne i32 %25, 0, !dbg !4603
  br i1 %tobool16, label %if.then17, label %if.else, !dbg !4606

if.then17:                                        ; preds = %if.then15
  %26 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4607
  %27 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !4609
  call void @subscript_dependence_tester(%struct.data_dependence_relation* %26, %struct.loop* %27), !dbg !4610
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4611
  %tobool18 = icmp ne %struct._IO_FILE* %28, null, !dbg !4611
  br i1 %tobool18, label %land.lhs.true19, label %if.end24, !dbg !4613

land.lhs.true19:                                  ; preds = %if.then17
  %29 = load i32, i32* @dump_flags, align 4, !dbg !4614
  %and20 = and i32 %29, 8, !dbg !4615
  %tobool21 = icmp ne i32 %and20, 0, !dbg !4615
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !4616

if.then22:                                        ; preds = %land.lhs.true19
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4617
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.98, i64 0, i64 0)), !dbg !4619
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4620
  %32 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4621
  call void @dump_data_dependence_relation(%struct._IO_FILE* %31, %struct.data_dependence_relation* %32), !dbg !4622
  br label %if.end24, !dbg !4623

if.end24:                                         ; preds = %if.then22, %land.lhs.true19, %if.then17
  %33 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4624
  %are_dependent25 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %33, i32 0, i32 2, !dbg !4624
  %34 = load %union.tree_node*, %union.tree_node** %are_dependent25, align 8, !dbg !4624
  %cmp26 = icmp eq %union.tree_node* %34, null, !dbg !4626
  br i1 %cmp26, label %if.then28, label %if.end49, !dbg !4627

if.then28:                                        ; preds = %if.end24
  call void @llvm.dbg.declare(metadata i8* %maybe_dependent, metadata !4628, metadata !DIExpression()), !dbg !4630
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_heap** %dir_vects, metadata !4631, metadata !DIExpression()), !dbg !4632
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_heap** %dist_vects, metadata !4633, metadata !DIExpression()), !dbg !4634
  %35 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4635
  %dist_vects29 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %35, i32 0, i32 6, !dbg !4635
  %36 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects29, align 8, !dbg !4635
  store %struct.VEC_lambda_vector_heap* %36, %struct.VEC_lambda_vector_heap** %dist_vects, align 8, !dbg !4636
  %37 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4637
  %dir_vects30 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %37, i32 0, i32 5, !dbg !4637
  %38 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects30, align 8, !dbg !4637
  store %struct.VEC_lambda_vector_heap* %38, %struct.VEC_lambda_vector_heap** %dir_vects, align 8, !dbg !4638
  %39 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4639
  %dist_vects31 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %39, i32 0, i32 6, !dbg !4639
  store %struct.VEC_lambda_vector_heap* null, %struct.VEC_lambda_vector_heap** %dist_vects31, align 8, !dbg !4640
  %40 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4641
  %dir_vects32 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %40, i32 0, i32 5, !dbg !4641
  store %struct.VEC_lambda_vector_heap* null, %struct.VEC_lambda_vector_heap** %dir_vects32, align 8, !dbg !4642
  %41 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4643
  %call33 = call zeroext i8 @init_omega_for_ddr(%struct.data_dependence_relation* %41, i8* %maybe_dependent), !dbg !4645
  %tobool34 = icmp ne i8 %call33, 0, !dbg !4645
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !4646

if.then35:                                        ; preds = %if.then28
  br label %csys_dont_know, !dbg !4647

if.end36:                                         ; preds = %if.then28
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4648
  %tobool37 = icmp ne %struct._IO_FILE* %42, null, !dbg !4648
  br i1 %tobool37, label %land.lhs.true38, label %if.end43, !dbg !4650

land.lhs.true38:                                  ; preds = %if.end36
  %43 = load i32, i32* @dump_flags, align 4, !dbg !4651
  %and39 = and i32 %43, 8, !dbg !4652
  %tobool40 = icmp ne i32 %and39, 0, !dbg !4652
  br i1 %tobool40, label %if.then41, label %if.end43, !dbg !4653

if.then41:                                        ; preds = %land.lhs.true38
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4654
  %call42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.99, i64 0, i64 0)), !dbg !4656
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4657
  %46 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4658
  call void @dump_data_dependence_relation(%struct._IO_FILE* %45, %struct.data_dependence_relation* %46), !dbg !4659
  br label %if.end43, !dbg !4660

if.end43:                                         ; preds = %if.then41, %land.lhs.true38, %if.end36
  %47 = load i8, i8* %maybe_dependent, align 1, !dbg !4661
  %tobool44 = icmp ne i8 %47, 0, !dbg !4661
  br i1 %tobool44, label %if.then45, label %if.end48, !dbg !4663

if.then45:                                        ; preds = %if.end43
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4664
  %49 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4664
  %50 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects, align 8, !dbg !4664
  %51 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects, align 8, !dbg !4664
  %call46 = call zeroext i8 @ddr_consistent_p(%struct._IO_FILE* %48, %struct.data_dependence_relation* %49, %struct.VEC_lambda_vector_heap* %50, %struct.VEC_lambda_vector_heap* %51), !dbg !4664
  %tobool47 = icmp ne i8 %call46, 0, !dbg !4664
  br i1 %tobool47, label %cond.false, label %cond.true, !dbg !4664

cond.true:                                        ; preds = %if.then45
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 3982, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !4664
  br label %cond.end, !dbg !4664

cond.false:                                       ; preds = %if.then45
  br label %cond.end, !dbg !4664

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4664
  br label %if.end48, !dbg !4664

if.end48:                                         ; preds = %cond.end, %if.end43
  br label %if.end49, !dbg !4665

if.end49:                                         ; preds = %if.end48, %if.end24
  br label %if.end50, !dbg !4666

if.else:                                          ; preds = %if.then15
  %52 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4667
  %53 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !4668
  call void @subscript_dependence_tester(%struct.data_dependence_relation* %52, %struct.loop* %53), !dbg !4669
  br label %if.end50

if.end50:                                         ; preds = %if.else, %if.end49
  br label %if.end62, !dbg !4670

if.else51:                                        ; preds = %land.lhs.true11, %if.then8
  br label %csys_dont_know, !dbg !4671

csys_dont_know:                                   ; preds = %if.else51, %if.then35
  call void @llvm.dbg.label(metadata !4672), !dbg !4674
  %54 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 3), align 4, !dbg !4675
  %inc52 = add nsw i32 %54, 1, !dbg !4675
  store i32 %inc52, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 3), align 4, !dbg !4675
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4676
  %tobool53 = icmp ne %struct._IO_FILE* %55, null, !dbg !4676
  br i1 %tobool53, label %land.lhs.true54, label %if.end61, !dbg !4678

land.lhs.true54:                                  ; preds = %csys_dont_know
  %56 = load i32, i32* @dump_flags, align 4, !dbg !4679
  %and55 = and i32 %56, 8, !dbg !4680
  %tobool56 = icmp ne i32 %and55, 0, !dbg !4680
  br i1 %tobool56, label %if.then57, label %if.end61, !dbg !4681

if.then57:                                        ; preds = %land.lhs.true54
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4682
  %call58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i64 0, i64 0)), !dbg !4684
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4685
  %59 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !4686
  call void @dump_data_reference(%struct._IO_FILE* %58, %struct.data_reference* %59), !dbg !4687
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4688
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101, i64 0, i64 0)), !dbg !4689
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4690
  %62 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !4691
  call void @dump_data_reference(%struct._IO_FILE* %61, %struct.data_reference* %62), !dbg !4692
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4693
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.102, i64 0, i64 0)), !dbg !4694
  br label %if.end61, !dbg !4695

if.end61:                                         ; preds = %if.then57, %land.lhs.true54, %csys_dont_know
  %64 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4696
  %65 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4697
  call void @finalize_ddr_dependent(%struct.data_dependence_relation* %64, %union.tree_node* %65), !dbg !4698
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end50
  br label %if.end63, !dbg !4699

if.end63:                                         ; preds = %if.end62, %land.lhs.true6, %if.end
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4700
  %tobool64 = icmp ne %struct._IO_FILE* %66, null, !dbg !4700
  br i1 %tobool64, label %land.lhs.true65, label %if.end70, !dbg !4702

land.lhs.true65:                                  ; preds = %if.end63
  %67 = load i32, i32* @dump_flags, align 4, !dbg !4703
  %and66 = and i32 %67, 8, !dbg !4704
  %tobool67 = icmp ne i32 %and66, 0, !dbg !4704
  br i1 %tobool67, label %if.then68, label %if.end70, !dbg !4705

if.then68:                                        ; preds = %land.lhs.true65
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4706
  %call69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !4707
  br label %if.end70, !dbg !4707

if.end70:                                         ; preds = %if.then68, %land.lhs.true65, %if.end63
  ret void, !dbg !4708
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !4709 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !4712, metadata !DIExpression()), !dbg !4713
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4714, metadata !DIExpression()), !dbg !4713
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4713
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !4713
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4713

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4713
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4713
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !4713
  %3 = load i32, i32* %num, align 8, !dbg !4713
  %cmp = icmp ult i32 %1, %3, !dbg !4713
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4715
  %land.ext = zext i1 %4 to i32, !dbg !4713
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4713
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !4713
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4713
  %idxprom = zext i32 %6 to i64, !dbg !4713
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !4713
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !4713
  ret %struct.loop* %7, !dbg !4713
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_self_dependence(%struct.data_dependence_relation* %ddr) #0 !dbg !4716 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %i = alloca i32, align 4
  %subscript = alloca %struct.subscript*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !4717, metadata !DIExpression()), !dbg !4718
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4719, metadata !DIExpression()), !dbg !4720
  call void @llvm.dbg.declare(metadata %struct.subscript** %subscript, metadata !4721, metadata !DIExpression()), !dbg !4722
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4723
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 2, !dbg !4723
  %1 = load %union.tree_node*, %union.tree_node** %are_dependent, align 8, !dbg !4723
  %cmp = icmp ne %union.tree_node* %1, null, !dbg !4725
  br i1 %cmp, label %if.then, label %if.end, !dbg !4726

if.then:                                          ; preds = %entry
  br label %return, !dbg !4727

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4728
  br label %for.cond, !dbg !4730

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4731
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 3, !dbg !4731
  %3 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !4731
  %tobool = icmp ne %struct.VEC_subscript_p_heap* %3, null, !dbg !4731
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4731

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4731
  %subscripts1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %4, i32 0, i32 3, !dbg !4731
  %5 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts1, align 8, !dbg !4731
  %base = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %5, i32 0, i32 0, !dbg !4731
  br label %cond.end, !dbg !4731

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4731

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_subscript_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4731
  %6 = load i32, i32* %i, align 4, !dbg !4731
  %call = call i32 @VEC_subscript_p_base_iterate(%struct.VEC_subscript_p_base* %cond, i32 %6, %struct.subscript** %subscript), !dbg !4731
  %tobool2 = icmp ne i32 %call, 0, !dbg !4733
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4733

for.body:                                         ; preds = %cond.end
  %7 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !4734
  %conflicting_iterations_in_a = getelementptr inbounds %struct.subscript, %struct.subscript* %7, i32 0, i32 0, !dbg !4734
  %8 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_a, align 8, !dbg !4734
  %tobool3 = icmp ne %struct.conflict_function* %8, null, !dbg !4734
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !4737

if.then4:                                         ; preds = %for.body
  %9 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !4738
  %conflicting_iterations_in_a5 = getelementptr inbounds %struct.subscript, %struct.subscript* %9, i32 0, i32 0, !dbg !4738
  %10 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_a5, align 8, !dbg !4738
  call void @free_conflict_function(%struct.conflict_function* %10), !dbg !4739
  br label %if.end6, !dbg !4739

if.end6:                                          ; preds = %if.then4, %for.body
  %11 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !4740
  %conflicting_iterations_in_b = getelementptr inbounds %struct.subscript, %struct.subscript* %11, i32 0, i32 1, !dbg !4740
  %12 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_b, align 8, !dbg !4740
  %tobool7 = icmp ne %struct.conflict_function* %12, null, !dbg !4740
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !4742

if.then8:                                         ; preds = %if.end6
  %13 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !4743
  %conflicting_iterations_in_b9 = getelementptr inbounds %struct.subscript, %struct.subscript* %13, i32 0, i32 1, !dbg !4743
  %14 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_b9, align 8, !dbg !4743
  call void @free_conflict_function(%struct.conflict_function* %14), !dbg !4744
  br label %if.end10, !dbg !4744

if.end10:                                         ; preds = %if.then8, %if.end6
  %15 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !4745
  %call11 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %15), !dbg !4746
  %call12 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call11), !dbg !4747
  %16 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !4748
  %conflicting_iterations_in_a13 = getelementptr inbounds %struct.subscript, %struct.subscript* %16, i32 0, i32 0, !dbg !4748
  store %struct.conflict_function* %call12, %struct.conflict_function** %conflicting_iterations_in_a13, align 8, !dbg !4749
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !4750
  %call14 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %17), !dbg !4751
  %call15 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call14), !dbg !4752
  %18 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !4753
  %conflicting_iterations_in_b16 = getelementptr inbounds %struct.subscript, %struct.subscript* %18, i32 0, i32 1, !dbg !4753
  store %struct.conflict_function* %call15, %struct.conflict_function** %conflicting_iterations_in_b16, align 8, !dbg !4754
  %19 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4755
  %20 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !4756
  %last_conflict = getelementptr inbounds %struct.subscript, %struct.subscript* %20, i32 0, i32 2, !dbg !4756
  store %union.tree_node* %19, %union.tree_node** %last_conflict, align 8, !dbg !4757
  br label %for.inc, !dbg !4758

for.inc:                                          ; preds = %if.end10
  %21 = load i32, i32* %i, align 4, !dbg !4759
  %inc = add i32 %21, 1, !dbg !4759
  store i32 %inc, i32* %i, align 4, !dbg !4759
  br label %for.cond, !dbg !4760, !llvm.loop !4761

for.end:                                          ; preds = %cond.end
  %22 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4763
  %23 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4764
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %23, i32 0, i32 4, !dbg !4764
  %24 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !4764
  %tobool17 = icmp ne %struct.VEC_loop_p_heap* %24, null, !dbg !4764
  br i1 %tobool17, label %cond.true18, label %cond.false21, !dbg !4764

cond.true18:                                      ; preds = %for.end
  %25 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4764
  %loop_nest19 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %25, i32 0, i32 4, !dbg !4764
  %26 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest19, align 8, !dbg !4764
  %base20 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %26, i32 0, i32 0, !dbg !4764
  br label %cond.end22, !dbg !4764

cond.false21:                                     ; preds = %for.end
  br label %cond.end22, !dbg !4764

cond.end22:                                       ; preds = %cond.false21, %cond.true18
  %cond23 = phi %struct.VEC_loop_p_base* [ %base20, %cond.true18 ], [ null, %cond.false21 ], !dbg !4764
  %call24 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond23), !dbg !4764
  %call25 = call i32* @lambda_vector_new(i32 %call24), !dbg !4765
  call void @save_dist_v(%struct.data_dependence_relation* %22, i32* %call25), !dbg !4766
  %27 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4767
  %28 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4768
  %loop_nest26 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %28, i32 0, i32 4, !dbg !4768
  %29 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest26, align 8, !dbg !4768
  %tobool27 = icmp ne %struct.VEC_loop_p_heap* %29, null, !dbg !4768
  br i1 %tobool27, label %cond.true28, label %cond.false31, !dbg !4768

cond.true28:                                      ; preds = %cond.end22
  %30 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !4768
  %loop_nest29 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %30, i32 0, i32 4, !dbg !4768
  %31 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest29, align 8, !dbg !4768
  %base30 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %31, i32 0, i32 0, !dbg !4768
  br label %cond.end32, !dbg !4768

cond.false31:                                     ; preds = %cond.end22
  br label %cond.end32, !dbg !4768

cond.end32:                                       ; preds = %cond.false31, %cond.true28
  %cond33 = phi %struct.VEC_loop_p_base* [ %base30, %cond.true28 ], [ null, %cond.false31 ], !dbg !4768
  %call34 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond33), !dbg !4768
  %call35 = call i32* @lambda_vector_new(i32 %call34), !dbg !4769
  call void @save_dir_v(%struct.data_dependence_relation* %27, i32* %call35), !dbg !4770
  br label %return, !dbg !4771

return:                                           ; preds = %cond.end32, %if.then
  ret void, !dbg !4771
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @get_references_in_stmt(%union.gimple_statement_d* %stmt, %struct.VEC_data_ref_loc_heap** %references) #0 !dbg !4772 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %references.addr = alloca %struct.VEC_data_ref_loc_heap**, align 8
  %clobbers_memory = alloca i8, align 1
  %ref = alloca %struct.data_ref_loc_d*, align 8
  %op0 = alloca %union.tree_node**, align 8
  %op1 = alloca %union.tree_node**, align 8
  %stmt_code = alloca i32, align 4
  %base = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4776, metadata !DIExpression()), !dbg !4777
  store %struct.VEC_data_ref_loc_heap** %references, %struct.VEC_data_ref_loc_heap*** %references.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_heap*** %references.addr, metadata !4778, metadata !DIExpression()), !dbg !4779
  call void @llvm.dbg.declare(metadata i8* %clobbers_memory, metadata !4780, metadata !DIExpression()), !dbg !4781
  store i8 0, i8* %clobbers_memory, align 1, !dbg !4781
  call void @llvm.dbg.declare(metadata %struct.data_ref_loc_d** %ref, metadata !4782, metadata !DIExpression()), !dbg !4784
  call void @llvm.dbg.declare(metadata %union.tree_node*** %op0, metadata !4785, metadata !DIExpression()), !dbg !4786
  call void @llvm.dbg.declare(metadata %union.tree_node*** %op1, metadata !4787, metadata !DIExpression()), !dbg !4788
  call void @llvm.dbg.declare(metadata i32* %stmt_code, metadata !4789, metadata !DIExpression()), !dbg !4790
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4791
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4792
  store i32 %call, i32* %stmt_code, align 4, !dbg !4790
  %1 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %references.addr, align 8, !dbg !4793
  store %struct.VEC_data_ref_loc_heap* null, %struct.VEC_data_ref_loc_heap** %1, align 8, !dbg !4794
  %2 = load i32, i32* %stmt_code, align 4, !dbg !4795
  %cmp = icmp eq i32 %2, 8, !dbg !4797
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !4798

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4799
  %call1 = call i32 @gimple_call_flags(%union.gimple_statement_d* %3), !dbg !4800
  %and = and i32 %call1, 3, !dbg !4801
  %tobool = icmp ne i32 %and, 0, !dbg !4801
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !4802

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %4 = load i32, i32* %stmt_code, align 4, !dbg !4803
  %cmp2 = icmp eq i32 %4, 7, !dbg !4804
  br i1 %cmp2, label %land.lhs.true3, label %if.end, !dbg !4805

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4806
  %call4 = call zeroext i8 @gimple_asm_volatile_p(%union.gimple_statement_d* %5), !dbg !4807
  %conv = zext i8 %call4 to i32, !dbg !4807
  %tobool5 = icmp ne i32 %conv, 0, !dbg !4807
  br i1 %tobool5, label %if.then, label %if.end, !dbg !4808

if.then:                                          ; preds = %land.lhs.true3, %land.lhs.true
  store i8 1, i8* %clobbers_memory, align 1, !dbg !4809
  br label %if.end, !dbg !4810

if.end:                                           ; preds = %if.then, %land.lhs.true3, %lor.lhs.false
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4811
  %call6 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %6), !dbg !4813
  %tobool7 = icmp ne %union.tree_node* %call6, null, !dbg !4813
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !4814

if.then8:                                         ; preds = %if.end
  %7 = load i8, i8* %clobbers_memory, align 1, !dbg !4815
  store i8 %7, i8* %retval, align 1, !dbg !4816
  br label %return, !dbg !4816

if.end9:                                          ; preds = %if.end
  %8 = load i32, i32* %stmt_code, align 4, !dbg !4817
  %cmp10 = icmp eq i32 %8, 6, !dbg !4819
  br i1 %cmp10, label %if.then12, label %if.else, !dbg !4820

if.then12:                                        ; preds = %if.end9
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !4821, metadata !DIExpression()), !dbg !4823
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4824
  %call13 = call %union.tree_node** @gimple_assign_lhs_ptr(%union.gimple_statement_d* %9), !dbg !4825
  store %union.tree_node** %call13, %union.tree_node*** %op0, align 8, !dbg !4826
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4827
  %call14 = call %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %10), !dbg !4828
  store %union.tree_node** %call14, %union.tree_node*** %op1, align 8, !dbg !4829
  %11 = load %union.tree_node**, %union.tree_node*** %op1, align 8, !dbg !4830
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !4830
  %base15 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !4830
  %13 = bitcast %struct.tree_base* %base15 to i64*, !dbg !4830
  %bf.load = load i64, i64* %13, align 8, !dbg !4830
  %bf.clear = and i64 %bf.load, 65535, !dbg !4830
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4830
  %idxprom = sext i32 %bf.cast to i64, !dbg !4830
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4830
  %14 = load i32, i32* %arrayidx, align 4, !dbg !4830
  %cmp16 = icmp eq i32 %14, 3, !dbg !4830
  br i1 %cmp16, label %if.then37, label %lor.lhs.false18, !dbg !4832

lor.lhs.false18:                                  ; preds = %if.then12
  %15 = load %union.tree_node**, %union.tree_node*** %op1, align 8, !dbg !4833
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !4833
  %base19 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !4833
  %17 = bitcast %struct.tree_base* %base19 to i64*, !dbg !4833
  %bf.load20 = load i64, i64* %17, align 8, !dbg !4833
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !4833
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !4833
  %idxprom23 = sext i32 %bf.cast22 to i64, !dbg !4833
  %arrayidx24 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom23, !dbg !4833
  %18 = load i32, i32* %arrayidx24, align 4, !dbg !4833
  %cmp25 = icmp eq i32 %18, 4, !dbg !4833
  br i1 %cmp25, label %land.lhs.true27, label %if.end39, !dbg !4834

land.lhs.true27:                                  ; preds = %lor.lhs.false18
  %19 = load %union.tree_node**, %union.tree_node*** %op1, align 8, !dbg !4835
  %20 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !4836
  %call28 = call %union.tree_node* @get_base_address(%union.tree_node* %20), !dbg !4837
  store %union.tree_node* %call28, %union.tree_node** %base, align 8, !dbg !4838
  %tobool29 = icmp ne %union.tree_node* %call28, null, !dbg !4838
  br i1 %tobool29, label %land.lhs.true30, label %if.end39, !dbg !4839

land.lhs.true30:                                  ; preds = %land.lhs.true27
  %21 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !4840
  %base31 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !4840
  %22 = bitcast %struct.tree_base* %base31 to i64*, !dbg !4840
  %bf.load32 = load i64, i64* %22, align 8, !dbg !4840
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !4840
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !4840
  %cmp35 = icmp ne i32 %bf.cast34, 141, !dbg !4841
  br i1 %cmp35, label %if.then37, label %if.end39, !dbg !4842

if.then37:                                        ; preds = %land.lhs.true30, %if.then12
  %23 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %references.addr, align 8, !dbg !4843
  %call38 = call %struct.data_ref_loc_d* @VEC_data_ref_loc_heap_safe_push(%struct.VEC_data_ref_loc_heap** %23, %struct.data_ref_loc_d* null), !dbg !4843
  store %struct.data_ref_loc_d* %call38, %struct.data_ref_loc_d** %ref, align 8, !dbg !4845
  %24 = load %union.tree_node**, %union.tree_node*** %op1, align 8, !dbg !4846
  %25 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !4847
  %pos = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %25, i32 0, i32 0, !dbg !4848
  store %union.tree_node** %24, %union.tree_node*** %pos, align 8, !dbg !4849
  %26 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !4850
  %is_read = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %26, i32 0, i32 1, !dbg !4851
  store i8 1, i8* %is_read, align 8, !dbg !4852
  br label %if.end39, !dbg !4853

if.end39:                                         ; preds = %if.then37, %land.lhs.true30, %land.lhs.true27, %lor.lhs.false18
  %27 = load %union.tree_node**, %union.tree_node*** %op0, align 8, !dbg !4854
  %28 = load %union.tree_node*, %union.tree_node** %27, align 8, !dbg !4854
  %base40 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !4854
  %29 = bitcast %struct.tree_base* %base40 to i64*, !dbg !4854
  %bf.load41 = load i64, i64* %29, align 8, !dbg !4854
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !4854
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !4854
  %idxprom44 = sext i32 %bf.cast43 to i64, !dbg !4854
  %arrayidx45 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom44, !dbg !4854
  %30 = load i32, i32* %arrayidx45, align 4, !dbg !4854
  %cmp46 = icmp eq i32 %30, 3, !dbg !4854
  br i1 %cmp46, label %if.then60, label %lor.lhs.false48, !dbg !4856

lor.lhs.false48:                                  ; preds = %if.end39
  %31 = load %union.tree_node**, %union.tree_node*** %op0, align 8, !dbg !4857
  %32 = load %union.tree_node*, %union.tree_node** %31, align 8, !dbg !4857
  %base49 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !4857
  %33 = bitcast %struct.tree_base* %base49 to i64*, !dbg !4857
  %bf.load50 = load i64, i64* %33, align 8, !dbg !4857
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !4857
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !4857
  %idxprom53 = sext i32 %bf.cast52 to i64, !dbg !4857
  %arrayidx54 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom53, !dbg !4857
  %34 = load i32, i32* %arrayidx54, align 4, !dbg !4857
  %cmp55 = icmp eq i32 %34, 4, !dbg !4857
  br i1 %cmp55, label %land.lhs.true57, label %if.end64, !dbg !4858

land.lhs.true57:                                  ; preds = %lor.lhs.false48
  %35 = load %union.tree_node**, %union.tree_node*** %op0, align 8, !dbg !4859
  %36 = load %union.tree_node*, %union.tree_node** %35, align 8, !dbg !4860
  %call58 = call %union.tree_node* @get_base_address(%union.tree_node* %36), !dbg !4861
  %tobool59 = icmp ne %union.tree_node* %call58, null, !dbg !4861
  br i1 %tobool59, label %if.then60, label %if.end64, !dbg !4862

if.then60:                                        ; preds = %land.lhs.true57, %if.end39
  %37 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %references.addr, align 8, !dbg !4863
  %call61 = call %struct.data_ref_loc_d* @VEC_data_ref_loc_heap_safe_push(%struct.VEC_data_ref_loc_heap** %37, %struct.data_ref_loc_d* null), !dbg !4863
  store %struct.data_ref_loc_d* %call61, %struct.data_ref_loc_d** %ref, align 8, !dbg !4865
  %38 = load %union.tree_node**, %union.tree_node*** %op0, align 8, !dbg !4866
  %39 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !4867
  %pos62 = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %39, i32 0, i32 0, !dbg !4868
  store %union.tree_node** %38, %union.tree_node*** %pos62, align 8, !dbg !4869
  %40 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !4870
  %is_read63 = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %40, i32 0, i32 1, !dbg !4871
  store i8 0, i8* %is_read63, align 8, !dbg !4872
  br label %if.end64, !dbg !4873

if.end64:                                         ; preds = %if.then60, %land.lhs.true57, %lor.lhs.false48
  br label %if.end98, !dbg !4874

if.else:                                          ; preds = %if.end9
  %41 = load i32, i32* %stmt_code, align 4, !dbg !4875
  %cmp65 = icmp eq i32 %41, 8, !dbg !4877
  br i1 %cmp65, label %if.then67, label %if.end97, !dbg !4878

if.then67:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4879, metadata !DIExpression()), !dbg !4881
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4882, metadata !DIExpression()), !dbg !4883
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4884
  %call68 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %42), !dbg !4885
  store i32 %call68, i32* %n, align 4, !dbg !4883
  store i32 0, i32* %i, align 4, !dbg !4886
  br label %for.cond, !dbg !4888

for.cond:                                         ; preds = %for.inc, %if.then67
  %43 = load i32, i32* %i, align 4, !dbg !4889
  %44 = load i32, i32* %n, align 4, !dbg !4891
  %cmp69 = icmp ult i32 %43, %44, !dbg !4892
  br i1 %cmp69, label %for.body, label %for.end, !dbg !4893

for.body:                                         ; preds = %for.cond
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4894
  %46 = load i32, i32* %i, align 4, !dbg !4896
  %call71 = call %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %45, i32 %46), !dbg !4897
  store %union.tree_node** %call71, %union.tree_node*** %op0, align 8, !dbg !4898
  %47 = load %union.tree_node**, %union.tree_node*** %op0, align 8, !dbg !4899
  %48 = load %union.tree_node*, %union.tree_node** %47, align 8, !dbg !4899
  %base72 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !4899
  %49 = bitcast %struct.tree_base* %base72 to i64*, !dbg !4899
  %bf.load73 = load i64, i64* %49, align 8, !dbg !4899
  %bf.clear74 = and i64 %bf.load73, 65535, !dbg !4899
  %bf.cast75 = trunc i64 %bf.clear74 to i32, !dbg !4899
  %idxprom76 = sext i32 %bf.cast75 to i64, !dbg !4899
  %arrayidx77 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom76, !dbg !4899
  %50 = load i32, i32* %arrayidx77, align 4, !dbg !4899
  %cmp78 = icmp eq i32 %50, 3, !dbg !4899
  br i1 %cmp78, label %if.then92, label %lor.lhs.false80, !dbg !4901

lor.lhs.false80:                                  ; preds = %for.body
  %51 = load %union.tree_node**, %union.tree_node*** %op0, align 8, !dbg !4902
  %52 = load %union.tree_node*, %union.tree_node** %51, align 8, !dbg !4902
  %base81 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !4902
  %53 = bitcast %struct.tree_base* %base81 to i64*, !dbg !4902
  %bf.load82 = load i64, i64* %53, align 8, !dbg !4902
  %bf.clear83 = and i64 %bf.load82, 65535, !dbg !4902
  %bf.cast84 = trunc i64 %bf.clear83 to i32, !dbg !4902
  %idxprom85 = sext i32 %bf.cast84 to i64, !dbg !4902
  %arrayidx86 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom85, !dbg !4902
  %54 = load i32, i32* %arrayidx86, align 4, !dbg !4902
  %cmp87 = icmp eq i32 %54, 4, !dbg !4902
  br i1 %cmp87, label %land.lhs.true89, label %if.end96, !dbg !4903

land.lhs.true89:                                  ; preds = %lor.lhs.false80
  %55 = load %union.tree_node**, %union.tree_node*** %op0, align 8, !dbg !4904
  %56 = load %union.tree_node*, %union.tree_node** %55, align 8, !dbg !4905
  %call90 = call %union.tree_node* @get_base_address(%union.tree_node* %56), !dbg !4906
  %tobool91 = icmp ne %union.tree_node* %call90, null, !dbg !4906
  br i1 %tobool91, label %if.then92, label %if.end96, !dbg !4907

if.then92:                                        ; preds = %land.lhs.true89, %for.body
  %57 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %references.addr, align 8, !dbg !4908
  %call93 = call %struct.data_ref_loc_d* @VEC_data_ref_loc_heap_safe_push(%struct.VEC_data_ref_loc_heap** %57, %struct.data_ref_loc_d* null), !dbg !4908
  store %struct.data_ref_loc_d* %call93, %struct.data_ref_loc_d** %ref, align 8, !dbg !4910
  %58 = load %union.tree_node**, %union.tree_node*** %op0, align 8, !dbg !4911
  %59 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !4912
  %pos94 = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %59, i32 0, i32 0, !dbg !4913
  store %union.tree_node** %58, %union.tree_node*** %pos94, align 8, !dbg !4914
  %60 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !4915
  %is_read95 = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %60, i32 0, i32 1, !dbg !4916
  store i8 1, i8* %is_read95, align 8, !dbg !4917
  br label %if.end96, !dbg !4918

if.end96:                                         ; preds = %if.then92, %land.lhs.true89, %lor.lhs.false80
  br label %for.inc, !dbg !4919

for.inc:                                          ; preds = %if.end96
  %61 = load i32, i32* %i, align 4, !dbg !4920
  %inc = add i32 %61, 1, !dbg !4920
  store i32 %inc, i32* %i, align 4, !dbg !4920
  br label %for.cond, !dbg !4921, !llvm.loop !4922

for.end:                                          ; preds = %for.cond
  br label %if.end97, !dbg !4924

if.end97:                                         ; preds = %for.end, %if.else
  br label %if.end98

if.end98:                                         ; preds = %if.end97, %if.end64
  %62 = load i8, i8* %clobbers_memory, align 1, !dbg !4925
  store i8 %62, i8* %retval, align 1, !dbg !4926
  br label %return, !dbg !4926

return:                                           ; preds = %if.end98, %if.then8
  %63 = load i8, i8* %retval, align 1, !dbg !4927
  ret i8 %63, !dbg !4927
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !4928 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4931, metadata !DIExpression()), !dbg !4932
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4933
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4934
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4935
  %bf.load = load i32, i32* %1, align 8, !dbg !4935
  %bf.clear = and i32 %bf.load, 255, !dbg !4935
  ret i32 %bf.clear, !dbg !4936
}

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_asm_volatile_p(%union.gimple_statement_d* %gs) #0 !dbg !4937 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4940, metadata !DIExpression()), !dbg !4941
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4942
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4943
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4944
  %bf.load = load i32, i32* %1, align 8, !dbg !4944
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4944
  %and = and i32 %bf.lshr, 2, !dbg !4945
  %cmp = icmp ne i32 %and, 0, !dbg !4946
  %conv = zext i1 %cmp to i32, !dbg !4946
  %conv1 = trunc i32 %conv to i8, !dbg !4947
  ret i8 %conv1, !dbg !4948
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !4949 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4952, metadata !DIExpression()), !dbg !4953
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4954
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !4956
  %tobool = icmp ne i8 %call, 0, !dbg !4956
  br i1 %tobool, label %if.end, label %if.then, !dbg !4957

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4958
  br label %return, !dbg !4958

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4959
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !4960
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !4961
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !4961
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !4962
  br label %return, !dbg !4962

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4963
  ret %union.tree_node* %3, !dbg !4963
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_assign_lhs_ptr(%union.gimple_statement_d* %gs) #0 !dbg !4964 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4967, metadata !DIExpression()), !dbg !4968
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4969
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 0), !dbg !4970
  ret %union.tree_node** %call, !dbg !4971
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %gs) #0 !dbg !4972 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4973, metadata !DIExpression()), !dbg !4974
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4975
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 1), !dbg !4976
  ret %union.tree_node** %call, !dbg !4977
}

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.data_ref_loc_d* @VEC_data_ref_loc_heap_safe_push(%struct.VEC_data_ref_loc_heap** %vec_, %struct.data_ref_loc_d* %obj_) #0 !dbg !4978 {
entry:
  %vec_.addr = alloca %struct.VEC_data_ref_loc_heap**, align 8
  %obj_.addr = alloca %struct.data_ref_loc_d*, align 8
  store %struct.VEC_data_ref_loc_heap** %vec_, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_heap*** %vec_.addr, metadata !4983, metadata !DIExpression()), !dbg !4984
  store %struct.data_ref_loc_d* %obj_, %struct.data_ref_loc_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_ref_loc_d** %obj_.addr, metadata !4985, metadata !DIExpression()), !dbg !4984
  %0 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8, !dbg !4984
  %call = call i32 @VEC_data_ref_loc_heap_reserve(%struct.VEC_data_ref_loc_heap** %0, i32 1), !dbg !4984
  %1 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8, !dbg !4984
  %2 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %1, align 8, !dbg !4984
  %tobool = icmp ne %struct.VEC_data_ref_loc_heap* %2, null, !dbg !4984
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4984

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8, !dbg !4984
  %4 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %3, align 8, !dbg !4984
  %base = getelementptr inbounds %struct.VEC_data_ref_loc_heap, %struct.VEC_data_ref_loc_heap* %4, i32 0, i32 0, !dbg !4984
  br label %cond.end, !dbg !4984

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4984

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_ref_loc_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4984
  %5 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %obj_.addr, align 8, !dbg !4984
  %call1 = call %struct.data_ref_loc_d* @VEC_data_ref_loc_base_quick_push(%struct.VEC_data_ref_loc_base* %cond, %struct.data_ref_loc_d* %5), !dbg !4984
  ret %struct.data_ref_loc_d* %call1, !dbg !4984
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !4986 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4989, metadata !DIExpression()), !dbg !4990
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !4991, metadata !DIExpression()), !dbg !4992
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4993
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !4994
  store i32 %call, i32* %num_ops, align 4, !dbg !4995
  %1 = load i32, i32* %num_ops, align 4, !dbg !4996
  %sub = sub i32 %1, 3, !dbg !4997
  ret i32 %sub, !dbg !4998
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !4999 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5002, metadata !DIExpression()), !dbg !5003
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5004, metadata !DIExpression()), !dbg !5005
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5006
  %1 = load i32, i32* %index.addr, align 4, !dbg !5007
  %add = add i32 %1, 3, !dbg !5008
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 %add), !dbg !5009
  ret %union.tree_node** %call, !dbg !5010
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @find_data_references_in_stmt(%struct.loop* %nest, %union.gimple_statement_d* %stmt, %struct.VEC_data_reference_p_heap** %datarefs) #0 !dbg !5011 {
entry:
  %retval = alloca i8, align 1
  %nest.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap**, align 8
  %i = alloca i32, align 4
  %references = alloca %struct.VEC_data_ref_loc_heap*, align 8
  %ref = alloca %struct.data_ref_loc_d*, align 8
  %ret = alloca i8, align 1
  %dr = alloca %struct.data_reference*, align 8
  store %struct.loop* %nest, %struct.loop** %nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %nest.addr, metadata !5015, metadata !DIExpression()), !dbg !5016
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5017, metadata !DIExpression()), !dbg !5018
  store %struct.VEC_data_reference_p_heap** %datarefs, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap*** %datarefs.addr, metadata !5019, metadata !DIExpression()), !dbg !5020
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5021, metadata !DIExpression()), !dbg !5022
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_heap** %references, metadata !5023, metadata !DIExpression()), !dbg !5024
  call void @llvm.dbg.declare(metadata %struct.data_ref_loc_d** %ref, metadata !5025, metadata !DIExpression()), !dbg !5026
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !5027, metadata !DIExpression()), !dbg !5028
  store i8 1, i8* %ret, align 1, !dbg !5028
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr, metadata !5029, metadata !DIExpression()), !dbg !5030
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5031
  %call = call zeroext i8 @get_references_in_stmt(%union.gimple_statement_d* %0, %struct.VEC_data_ref_loc_heap** %references), !dbg !5033
  %tobool = icmp ne i8 %call, 0, !dbg !5033
  br i1 %tobool, label %if.then, label %if.end, !dbg !5034

if.then:                                          ; preds = %entry
  call void @VEC_data_ref_loc_heap_free(%struct.VEC_data_ref_loc_heap** %references), !dbg !5035
  store i8 0, i8* %retval, align 1, !dbg !5037
  br label %return, !dbg !5037

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !5038
  br label %for.cond, !dbg !5040

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %references, align 8, !dbg !5041
  %tobool1 = icmp ne %struct.VEC_data_ref_loc_heap* %1, null, !dbg !5041
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5041

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %references, align 8, !dbg !5041
  %base = getelementptr inbounds %struct.VEC_data_ref_loc_heap, %struct.VEC_data_ref_loc_heap* %2, i32 0, i32 0, !dbg !5041
  br label %cond.end, !dbg !5041

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5041

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_ref_loc_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5041
  %3 = load i32, i32* %i, align 4, !dbg !5041
  %call2 = call i32 @VEC_data_ref_loc_base_iterate(%struct.VEC_data_ref_loc_base* %cond, i32 %3, %struct.data_ref_loc_d** %ref), !dbg !5041
  %tobool3 = icmp ne i32 %call2, 0, !dbg !5043
  br i1 %tobool3, label %for.body, label %for.end, !dbg !5043

for.body:                                         ; preds = %cond.end
  %4 = load %struct.loop*, %struct.loop** %nest.addr, align 8, !dbg !5044
  %5 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !5046
  %pos = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %5, i32 0, i32 0, !dbg !5047
  %6 = load %union.tree_node**, %union.tree_node*** %pos, align 8, !dbg !5047
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !5048
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5049
  %9 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !5050
  %is_read = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %9, i32 0, i32 1, !dbg !5051
  %10 = load i8, i8* %is_read, align 8, !dbg !5051
  %call4 = call %struct.data_reference* @create_data_ref(%struct.loop* %4, %union.tree_node* %7, %union.gimple_statement_d* %8, i8 zeroext %10), !dbg !5052
  store %struct.data_reference* %call4, %struct.data_reference** %dr, align 8, !dbg !5053
  %11 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !5054
  %cmp = icmp ne %struct.data_reference* %11, null, !dbg !5054
  br i1 %cmp, label %cond.false6, label %cond.true5, !dbg !5054

cond.true5:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 4173, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !5054
  br label %cond.end7, !dbg !5054

cond.false6:                                      ; preds = %for.body
  br label %cond.end7, !dbg !5054

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !5054
  %12 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !5055
  %call9 = call zeroext i8 @dr_address_invariant_p(%struct.data_reference* %12), !dbg !5057
  %conv = zext i8 %call9 to i32, !dbg !5057
  %tobool10 = icmp ne i32 %conv, 0, !dbg !5057
  br i1 %tobool10, label %land.lhs.true, label %if.end19, !dbg !5058

land.lhs.true:                                    ; preds = %cond.end7
  %13 = load %struct.loop*, %struct.loop** %nest.addr, align 8, !dbg !5059
  %tobool11 = icmp ne %struct.loop* %13, null, !dbg !5059
  br i1 %tobool11, label %if.then12, label %if.end19, !dbg !5060

if.then12:                                        ; preds = %land.lhs.true
  %14 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !5061
  call void @free_data_ref(%struct.data_reference* %14), !dbg !5063
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5064
  %tobool13 = icmp ne %struct._IO_FILE* %15, null, !dbg !5064
  br i1 %tobool13, label %land.lhs.true14, label %if.end18, !dbg !5066

land.lhs.true14:                                  ; preds = %if.then12
  %16 = load i32, i32* @dump_flags, align 4, !dbg !5067
  %and = and i32 %16, 8, !dbg !5068
  %tobool15 = icmp ne i32 %and, 0, !dbg !5068
  br i1 %tobool15, label %if.then16, label %if.end18, !dbg !5069

if.then16:                                        ; preds = %land.lhs.true14
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5070
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.57, i64 0, i64 0)), !dbg !5071
  br label %if.end18, !dbg !5071

if.end18:                                         ; preds = %if.then16, %land.lhs.true14, %if.then12
  store i8 0, i8* %ret, align 1, !dbg !5072
  br label %for.end, !dbg !5073

if.end19:                                         ; preds = %land.lhs.true, %cond.end7
  %18 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8, !dbg !5074
  %19 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !5074
  %call20 = call %struct.data_reference** @VEC_data_reference_p_heap_safe_push(%struct.VEC_data_reference_p_heap** %18, %struct.data_reference* %19), !dbg !5074
  br label %for.inc, !dbg !5075

for.inc:                                          ; preds = %if.end19
  %20 = load i32, i32* %i, align 4, !dbg !5076
  %inc = add i32 %20, 1, !dbg !5076
  store i32 %inc, i32* %i, align 4, !dbg !5076
  br label %for.cond, !dbg !5077, !llvm.loop !5078

for.end:                                          ; preds = %if.end18, %cond.end
  call void @VEC_data_ref_loc_heap_free(%struct.VEC_data_ref_loc_heap** %references), !dbg !5080
  %21 = load i8, i8* %ret, align 1, !dbg !5081
  store i8 %21, i8* %retval, align 1, !dbg !5082
  br label %return, !dbg !5082

return:                                           ; preds = %for.end, %if.then
  %22 = load i8, i8* %retval, align 1, !dbg !5083
  ret i8 %22, !dbg !5083
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_data_ref_loc_heap_free(%struct.VEC_data_ref_loc_heap** %vec_) #0 !dbg !5084 {
entry:
  %vec_.addr = alloca %struct.VEC_data_ref_loc_heap**, align 8
  store %struct.VEC_data_ref_loc_heap** %vec_, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_heap*** %vec_.addr, metadata !5087, metadata !DIExpression()), !dbg !5088
  %0 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8, !dbg !5089
  %1 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %0, align 8, !dbg !5089
  %tobool = icmp ne %struct.VEC_data_ref_loc_heap* %1, null, !dbg !5089
  br i1 %tobool, label %if.then, label %if.end, !dbg !5088

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8, !dbg !5089
  %3 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %2, align 8, !dbg !5089
  %4 = bitcast %struct.VEC_data_ref_loc_heap* %3 to i8*, !dbg !5089
  call void @free(i8* %4), !dbg !5089
  br label %if.end, !dbg !5089

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8, !dbg !5088
  store %struct.VEC_data_ref_loc_heap* null, %struct.VEC_data_ref_loc_heap** %5, align 8, !dbg !5088
  ret void, !dbg !5088
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_data_ref_loc_base_iterate(%struct.VEC_data_ref_loc_base* %vec_, i32 %ix_, %struct.data_ref_loc_d** %ptr) #0 !dbg !5091 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_data_ref_loc_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.data_ref_loc_d**, align 8
  store %struct.VEC_data_ref_loc_base* %vec_, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_base** %vec_.addr, metadata !5096, metadata !DIExpression()), !dbg !5097
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5098, metadata !DIExpression()), !dbg !5097
  store %struct.data_ref_loc_d** %ptr, %struct.data_ref_loc_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_ref_loc_d*** %ptr.addr, metadata !5099, metadata !DIExpression()), !dbg !5097
  %0 = load %struct.VEC_data_ref_loc_base*, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8, !dbg !5100
  %tobool = icmp ne %struct.VEC_data_ref_loc_base* %0, null, !dbg !5100
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5100

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5100
  %2 = load %struct.VEC_data_ref_loc_base*, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8, !dbg !5100
  %num = getelementptr inbounds %struct.VEC_data_ref_loc_base, %struct.VEC_data_ref_loc_base* %2, i32 0, i32 0, !dbg !5100
  %3 = load i32, i32* %num, align 8, !dbg !5100
  %cmp = icmp ult i32 %1, %3, !dbg !5100
  br i1 %cmp, label %if.then, label %if.else, !dbg !5097

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_data_ref_loc_base*, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8, !dbg !5102
  %vec = getelementptr inbounds %struct.VEC_data_ref_loc_base, %struct.VEC_data_ref_loc_base* %4, i32 0, i32 2, !dbg !5102
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5102
  %idxprom = zext i32 %5 to i64, !dbg !5102
  %arrayidx = getelementptr inbounds [1 x %struct.data_ref_loc_d], [1 x %struct.data_ref_loc_d]* %vec, i64 0, i64 %idxprom, !dbg !5102
  %6 = load %struct.data_ref_loc_d**, %struct.data_ref_loc_d*** %ptr.addr, align 8, !dbg !5102
  store %struct.data_ref_loc_d* %arrayidx, %struct.data_ref_loc_d** %6, align 8, !dbg !5102
  store i32 1, i32* %retval, align 4, !dbg !5102
  br label %return, !dbg !5102

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.data_ref_loc_d**, %struct.data_ref_loc_d*** %ptr.addr, align 8, !dbg !5104
  store %struct.data_ref_loc_d* null, %struct.data_ref_loc_d** %7, align 8, !dbg !5104
  store i32 0, i32* %retval, align 4, !dbg !5104
  br label %return, !dbg !5104

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !5097
  ret i32 %8, !dbg !5097
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @dr_address_invariant_p(%struct.data_reference* %dr) #0 !dbg !5106 {
entry:
  %retval = alloca i8, align 1
  %dr.addr = alloca %struct.data_reference*, align 8
  %i = alloca i32, align 4
  %idx = alloca %union.tree_node*, align 8
  store %struct.data_reference* %dr, %struct.data_reference** %dr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr.addr, metadata !5107, metadata !DIExpression()), !dbg !5108
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5109, metadata !DIExpression()), !dbg !5110
  call void @llvm.dbg.declare(metadata %union.tree_node** %idx, metadata !5111, metadata !DIExpression()), !dbg !5112
  store i32 0, i32* %i, align 4, !dbg !5113
  br label %for.cond, !dbg !5115

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !5116
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %0, i32 0, i32 5, !dbg !5116
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !5116
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !5116
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !5116
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5116

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !5116
  %indices1 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %2, i32 0, i32 5, !dbg !5116
  %access_fns2 = getelementptr inbounds %struct.indices, %struct.indices* %indices1, i32 0, i32 1, !dbg !5116
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns2, align 8, !dbg !5116
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !5116
  br label %cond.end, !dbg !5116

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5116

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5116
  %4 = load i32, i32* %i, align 4, !dbg !5116
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %4, %union.tree_node** %idx), !dbg !5116
  %tobool3 = icmp ne i32 %call, 0, !dbg !5118
  br i1 %tobool3, label %for.body, label %for.end, !dbg !5118

for.body:                                         ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !5119
  %call4 = call zeroext i8 @tree_contains_chrecs(%union.tree_node* %5, i32* null), !dbg !5121
  %tobool5 = icmp ne i8 %call4, 0, !dbg !5121
  br i1 %tobool5, label %if.then, label %if.end, !dbg !5122

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !5123
  br label %return, !dbg !5123

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !5124

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !dbg !5125
  %inc = add i32 %6, 1, !dbg !5125
  store i32 %inc, i32* %i, align 4, !dbg !5125
  br label %for.cond, !dbg !5126, !llvm.loop !5127

for.end:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !5129
  br label %return, !dbg !5129

return:                                           ; preds = %for.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !5130
  ret i8 %7, !dbg !5130
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.data_reference** @VEC_data_reference_p_heap_safe_push(%struct.VEC_data_reference_p_heap** %vec_, %struct.data_reference* %obj_) #0 !dbg !5131 {
entry:
  %vec_.addr = alloca %struct.VEC_data_reference_p_heap**, align 8
  %obj_.addr = alloca %struct.data_reference*, align 8
  store %struct.VEC_data_reference_p_heap** %vec_, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap*** %vec_.addr, metadata !5134, metadata !DIExpression()), !dbg !5135
  store %struct.data_reference* %obj_, %struct.data_reference** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %obj_.addr, metadata !5136, metadata !DIExpression()), !dbg !5135
  %0 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8, !dbg !5135
  %call = call i32 @VEC_data_reference_p_heap_reserve(%struct.VEC_data_reference_p_heap** %0, i32 1), !dbg !5135
  %1 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8, !dbg !5135
  %2 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %1, align 8, !dbg !5135
  %tobool = icmp ne %struct.VEC_data_reference_p_heap* %2, null, !dbg !5135
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5135

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8, !dbg !5135
  %4 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %3, align 8, !dbg !5135
  %base = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %4, i32 0, i32 0, !dbg !5135
  br label %cond.end, !dbg !5135

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5135

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_reference_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5135
  %5 = load %struct.data_reference*, %struct.data_reference** %obj_.addr, align 8, !dbg !5135
  %call1 = call %struct.data_reference** @VEC_data_reference_p_base_quick_push(%struct.VEC_data_reference_p_base* %cond, %struct.data_reference* %5), !dbg !5135
  ret %struct.data_reference** %call1, !dbg !5135
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @graphite_find_data_references_in_stmt(%struct.loop* %nest, %union.gimple_statement_d* %stmt, %struct.VEC_data_reference_p_heap** %datarefs) #0 !dbg !5137 {
entry:
  %retval = alloca i8, align 1
  %nest.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap**, align 8
  %i = alloca i32, align 4
  %references = alloca %struct.VEC_data_ref_loc_heap*, align 8
  %ref = alloca %struct.data_ref_loc_d*, align 8
  %ret = alloca i8, align 1
  %dr = alloca %struct.data_reference*, align 8
  store %struct.loop* %nest, %struct.loop** %nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %nest.addr, metadata !5138, metadata !DIExpression()), !dbg !5139
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5140, metadata !DIExpression()), !dbg !5141
  store %struct.VEC_data_reference_p_heap** %datarefs, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap*** %datarefs.addr, metadata !5142, metadata !DIExpression()), !dbg !5143
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5144, metadata !DIExpression()), !dbg !5145
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_heap** %references, metadata !5146, metadata !DIExpression()), !dbg !5147
  call void @llvm.dbg.declare(metadata %struct.data_ref_loc_d** %ref, metadata !5148, metadata !DIExpression()), !dbg !5149
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !5150, metadata !DIExpression()), !dbg !5151
  store i8 1, i8* %ret, align 1, !dbg !5151
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr, metadata !5152, metadata !DIExpression()), !dbg !5153
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5154
  %call = call zeroext i8 @get_references_in_stmt(%union.gimple_statement_d* %0, %struct.VEC_data_ref_loc_heap** %references), !dbg !5156
  %tobool = icmp ne i8 %call, 0, !dbg !5156
  br i1 %tobool, label %if.then, label %if.end, !dbg !5157

if.then:                                          ; preds = %entry
  call void @VEC_data_ref_loc_heap_free(%struct.VEC_data_ref_loc_heap** %references), !dbg !5158
  store i8 0, i8* %retval, align 1, !dbg !5160
  br label %return, !dbg !5160

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !5161
  br label %for.cond, !dbg !5163

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %references, align 8, !dbg !5164
  %tobool1 = icmp ne %struct.VEC_data_ref_loc_heap* %1, null, !dbg !5164
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5164

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %references, align 8, !dbg !5164
  %base = getelementptr inbounds %struct.VEC_data_ref_loc_heap, %struct.VEC_data_ref_loc_heap* %2, i32 0, i32 0, !dbg !5164
  br label %cond.end, !dbg !5164

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5164

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_ref_loc_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5164
  %3 = load i32, i32* %i, align 4, !dbg !5164
  %call2 = call i32 @VEC_data_ref_loc_base_iterate(%struct.VEC_data_ref_loc_base* %cond, i32 %3, %struct.data_ref_loc_d** %ref), !dbg !5164
  %tobool3 = icmp ne i32 %call2, 0, !dbg !5166
  br i1 %tobool3, label %for.body, label %for.end, !dbg !5166

for.body:                                         ; preds = %cond.end
  %4 = load %struct.loop*, %struct.loop** %nest.addr, align 8, !dbg !5167
  %5 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !5169
  %pos = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %5, i32 0, i32 0, !dbg !5170
  %6 = load %union.tree_node**, %union.tree_node*** %pos, align 8, !dbg !5170
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !5171
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5172
  %9 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !5173
  %is_read = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %9, i32 0, i32 1, !dbg !5174
  %10 = load i8, i8* %is_read, align 8, !dbg !5174
  %call4 = call %struct.data_reference* @create_data_ref(%struct.loop* %4, %union.tree_node* %7, %union.gimple_statement_d* %8, i8 zeroext %10), !dbg !5175
  store %struct.data_reference* %call4, %struct.data_reference** %dr, align 8, !dbg !5176
  %11 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !5177
  %cmp = icmp ne %struct.data_reference* %11, null, !dbg !5177
  br i1 %cmp, label %cond.false6, label %cond.true5, !dbg !5177

cond.true5:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 4216, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !5177
  br label %cond.end7, !dbg !5177

cond.false6:                                      ; preds = %for.body
  br label %cond.end7, !dbg !5177

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !5177
  %12 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8, !dbg !5178
  %13 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !5178
  %call9 = call %struct.data_reference** @VEC_data_reference_p_heap_safe_push(%struct.VEC_data_reference_p_heap** %12, %struct.data_reference* %13), !dbg !5178
  br label %for.inc, !dbg !5179

for.inc:                                          ; preds = %cond.end7
  %14 = load i32, i32* %i, align 4, !dbg !5180
  %inc = add i32 %14, 1, !dbg !5180
  store i32 %inc, i32* %i, align 4, !dbg !5180
  br label %for.cond, !dbg !5181, !llvm.loop !5182

for.end:                                          ; preds = %cond.end
  call void @VEC_data_ref_loc_heap_free(%struct.VEC_data_ref_loc_heap** %references), !dbg !5184
  %15 = load i8, i8* %ret, align 1, !dbg !5185
  store i8 %15, i8* %retval, align 1, !dbg !5186
  br label %return, !dbg !5186

return:                                           ; preds = %for.end, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !5187
  ret i8 %16, !dbg !5187
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @find_data_references_in_loop(%struct.loop* %loop, %struct.VEC_data_reference_p_heap** %datarefs) #0 !dbg !5188 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5191, metadata !DIExpression()), !dbg !5192
  store %struct.VEC_data_reference_p_heap** %datarefs, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap*** %datarefs.addr, metadata !5193, metadata !DIExpression()), !dbg !5194
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5195, metadata !DIExpression()), !dbg !5196
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !5197, metadata !DIExpression()), !dbg !5199
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5200, metadata !DIExpression()), !dbg !5201
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5202
  %call = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %0), !dbg !5203
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !5204
  store i32 0, i32* %i, align 4, !dbg !5205
  br label %for.cond, !dbg !5207

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !5208
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5210
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !5211
  %3 = load i32, i32* %num_nodes, align 4, !dbg !5211
  %cmp = icmp ult i32 %1, %3, !dbg !5212
  br i1 %cmp, label %for.body, label %for.end, !dbg !5213

for.body:                                         ; preds = %for.cond
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5214
  %5 = load i32, i32* %i, align 4, !dbg !5216
  %idxprom = zext i32 %5 to i64, !dbg !5214
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %4, i64 %idxprom, !dbg !5214
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !5214
  store %struct.basic_block_def* %6, %struct.basic_block_def** %bb, align 8, !dbg !5217
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5218
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5220
  %9 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8, !dbg !5221
  %call1 = call %union.tree_node* @find_data_references_in_bb(%struct.loop* %7, %struct.basic_block_def* %8, %struct.VEC_data_reference_p_heap** %9), !dbg !5222
  %10 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5223
  %cmp2 = icmp eq %union.tree_node* %call1, %10, !dbg !5224
  br i1 %cmp2, label %if.then, label %if.end, !dbg !5225

if.then:                                          ; preds = %for.body
  %11 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5226
  %12 = bitcast %struct.basic_block_def** %11 to i8*, !dbg !5226
  call void @free(i8* %12), !dbg !5228
  %13 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5229
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !5230
  br label %return, !dbg !5230

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !5231

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4, !dbg !5232
  %inc = add i32 %14, 1, !dbg !5232
  store i32 %inc, i32* %i, align 4, !dbg !5232
  br label %for.cond, !dbg !5233, !llvm.loop !5234

for.end:                                          ; preds = %for.cond
  %15 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5236
  %16 = bitcast %struct.basic_block_def** %15 to i8*, !dbg !5236
  call void @free(i8* %16), !dbg !5237
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5238
  br label %return, !dbg !5238

return:                                           ; preds = %for.end, %if.then
  %17 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5239
  ret %union.tree_node* %17, !dbg !5239
}

declare dso_local %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @find_data_references_in_bb(%struct.loop* %loop, %struct.basic_block_def* %bb, %struct.VEC_data_reference_p_heap** %datarefs) #0 !dbg !5240 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap**, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %res = alloca %struct.data_reference*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5243, metadata !DIExpression()), !dbg !5244
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5245, metadata !DIExpression()), !dbg !5246
  store %struct.VEC_data_reference_p_heap** %datarefs, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap*** %datarefs.addr, metadata !5247, metadata !DIExpression()), !dbg !5248
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5249, metadata !DIExpression()), !dbg !5256
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5257
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !5259
  %1 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5259
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5259
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !5259
  br label %for.cond, !dbg !5260

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5261
  %tobool = icmp ne i8 %call, 0, !dbg !5263
  %lnot = xor i1 %tobool, true, !dbg !5263
  br i1 %lnot, label %for.body, label %for.end, !dbg !5264

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5265, metadata !DIExpression()), !dbg !5267
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5268
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !5267
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5269
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5271
  %5 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8, !dbg !5272
  %call2 = call zeroext i8 @find_data_references_in_stmt(%struct.loop* %3, %union.gimple_statement_d* %4, %struct.VEC_data_reference_p_heap** %5), !dbg !5273
  %tobool3 = icmp ne i8 %call2, 0, !dbg !5273
  br i1 %tobool3, label %if.end, label %if.then, !dbg !5274

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.data_reference** %res, metadata !5275, metadata !DIExpression()), !dbg !5277
  %call4 = call i8* @xcalloc(i64 1, i64 112), !dbg !5278
  %6 = bitcast i8* %call4 to %struct.data_reference*, !dbg !5278
  store %struct.data_reference* %6, %struct.data_reference** %res, align 8, !dbg !5279
  %7 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8, !dbg !5280
  %8 = load %struct.data_reference*, %struct.data_reference** %res, align 8, !dbg !5280
  %call5 = call %struct.data_reference** @VEC_data_reference_p_heap_safe_push(%struct.VEC_data_reference_p_heap** %7, %struct.data_reference* %8), !dbg !5280
  %9 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5281
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !5282
  br label %return, !dbg !5282

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !5283

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !5284
  br label %for.cond, !dbg !5285, !llvm.loop !5286

for.end:                                          ; preds = %for.cond
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5288
  br label %return, !dbg !5288

return:                                           ; preds = %for.end, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5289
  ret %union.tree_node* %10, !dbg !5289
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @find_loop_nest(%struct.loop* %loop, %struct.VEC_loop_p_heap** %loop_nest) #0 !dbg !5290 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %loop_nest.addr = alloca %struct.VEC_loop_p_heap**, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5294, metadata !DIExpression()), !dbg !5295
  store %struct.VEC_loop_p_heap** %loop_nest, %struct.VEC_loop_p_heap*** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap*** %loop_nest.addr, metadata !5296, metadata !DIExpression()), !dbg !5297
  %0 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %loop_nest.addr, align 8, !dbg !5298
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5298
  %call = call %struct.loop** @VEC_loop_p_heap_safe_push(%struct.VEC_loop_p_heap** %0, %struct.loop* %1), !dbg !5298
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5299
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 8, !dbg !5301
  %3 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !5301
  %tobool = icmp ne %struct.loop* %3, null, !dbg !5299
  br i1 %tobool, label %if.then, label %if.end, !dbg !5302

if.then:                                          ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5303
  %inner1 = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 8, !dbg !5304
  %5 = load %struct.loop*, %struct.loop** %inner1, align 8, !dbg !5304
  %6 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %loop_nest.addr, align 8, !dbg !5305
  %call2 = call zeroext i8 @find_loop_nest_1(%struct.loop* %5, %struct.VEC_loop_p_heap** %6), !dbg !5306
  store i8 %call2, i8* %retval, align 1, !dbg !5307
  br label %return, !dbg !5307

if.end:                                           ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !5308
  br label %return, !dbg !5308

return:                                           ; preds = %if.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !5309
  ret i8 %7, !dbg !5309
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop** @VEC_loop_p_heap_safe_push(%struct.VEC_loop_p_heap** %vec_, %struct.loop* %obj_) #0 !dbg !5310 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_heap**, align 8
  %obj_.addr = alloca %struct.loop*, align 8
  store %struct.VEC_loop_p_heap** %vec_, %struct.VEC_loop_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap*** %vec_.addr, metadata !5313, metadata !DIExpression()), !dbg !5314
  store %struct.loop* %obj_, %struct.loop** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %obj_.addr, metadata !5315, metadata !DIExpression()), !dbg !5314
  %0 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !5314
  %call = call i32 @VEC_loop_p_heap_reserve(%struct.VEC_loop_p_heap** %0, i32 1), !dbg !5314
  %1 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !5314
  %2 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %1, align 8, !dbg !5314
  %tobool = icmp ne %struct.VEC_loop_p_heap* %2, null, !dbg !5314
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5314

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !5314
  %4 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %3, align 8, !dbg !5314
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %4, i32 0, i32 0, !dbg !5314
  br label %cond.end, !dbg !5314

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5314

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5314
  %5 = load %struct.loop*, %struct.loop** %obj_.addr, align 8, !dbg !5314
  %call1 = call %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %cond, %struct.loop* %5), !dbg !5314
  ret %struct.loop** %call1, !dbg !5314
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_loop_nest_1(%struct.loop* %loop, %struct.VEC_loop_p_heap** %loop_nest) #0 !dbg !5316 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %loop_nest.addr = alloca %struct.VEC_loop_p_heap**, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5317, metadata !DIExpression()), !dbg !5318
  store %struct.VEC_loop_p_heap** %loop_nest, %struct.VEC_loop_p_heap*** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap*** %loop_nest.addr, metadata !5319, metadata !DIExpression()), !dbg !5320
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5321
  %next = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 9, !dbg !5323
  %1 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !5323
  %tobool = icmp ne %struct.loop* %1, null, !dbg !5321
  br i1 %tobool, label %if.then, label %if.end, !dbg !5324

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5325
  br label %return, !dbg !5325

if.end:                                           ; preds = %entry
  %2 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %loop_nest.addr, align 8, !dbg !5326
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5326
  %call = call %struct.loop** @VEC_loop_p_heap_safe_push(%struct.VEC_loop_p_heap** %2, %struct.loop* %3), !dbg !5326
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5327
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 8, !dbg !5329
  %5 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !5329
  %tobool1 = icmp ne %struct.loop* %5, null, !dbg !5327
  br i1 %tobool1, label %if.then2, label %if.end5, !dbg !5330

if.then2:                                         ; preds = %if.end
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5331
  %inner3 = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 8, !dbg !5332
  %7 = load %struct.loop*, %struct.loop** %inner3, align 8, !dbg !5332
  %8 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %loop_nest.addr, align 8, !dbg !5333
  %call4 = call zeroext i8 @find_loop_nest_1(%struct.loop* %7, %struct.VEC_loop_p_heap** %8), !dbg !5334
  store i8 %call4, i8* %retval, align 1, !dbg !5335
  br label %return, !dbg !5335

if.end5:                                          ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !5336
  br label %return, !dbg !5336

return:                                           ; preds = %if.end5, %if.then2, %if.then
  %9 = load i8, i8* %retval, align 1, !dbg !5337
  ret i8 %9, !dbg !5337
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @compute_data_dependences_for_loop(%struct.loop* %loop, i8 zeroext %compute_self_and_read_read_dependences, %struct.VEC_data_reference_p_heap** %datarefs, %struct.VEC_ddr_p_heap** %dependence_relations) #0 !dbg !5338 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %compute_self_and_read_read_dependences.addr = alloca i8, align 1
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap**, align 8
  %dependence_relations.addr = alloca %struct.VEC_ddr_p_heap**, align 8
  %res = alloca i8, align 1
  %vloops = alloca %struct.VEC_loop_p_heap*, align 8
  %ddr = alloca %struct.data_dependence_relation*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5341, metadata !DIExpression()), !dbg !5342
  store i8 %compute_self_and_read_read_dependences, i8* %compute_self_and_read_read_dependences.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %compute_self_and_read_read_dependences.addr, metadata !5343, metadata !DIExpression()), !dbg !5344
  store %struct.VEC_data_reference_p_heap** %datarefs, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap*** %datarefs.addr, metadata !5345, metadata !DIExpression()), !dbg !5346
  store %struct.VEC_ddr_p_heap** %dependence_relations, %struct.VEC_ddr_p_heap*** %dependence_relations.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap*** %dependence_relations.addr, metadata !5347, metadata !DIExpression()), !dbg !5348
  call void @llvm.dbg.declare(metadata i8* %res, metadata !5349, metadata !DIExpression()), !dbg !5350
  store i8 1, i8* %res, align 1, !dbg !5350
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap** %vloops, metadata !5351, metadata !DIExpression()), !dbg !5352
  %call = call %struct.VEC_loop_p_heap* @VEC_loop_p_heap_alloc(i32 3), !dbg !5353
  store %struct.VEC_loop_p_heap* %call, %struct.VEC_loop_p_heap** %vloops, align 8, !dbg !5352
  call void @llvm.memset.p0i8.i64(i8* align 4 bitcast (%struct.datadep_stats* @dependence_stats to i8*), i8 0, i64 76, i1 false), !dbg !5354
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5355
  %tobool = icmp ne %struct.loop* %0, null, !dbg !5355
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5357

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5358
  %call1 = call zeroext i8 @find_loop_nest(%struct.loop* %1, %struct.VEC_loop_p_heap** %vloops), !dbg !5359
  %tobool2 = icmp ne i8 %call1, 0, !dbg !5359
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !5360

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5361
  %3 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8, !dbg !5362
  %call4 = call %union.tree_node* @find_data_references_in_loop(%struct.loop* %2, %struct.VEC_data_reference_p_heap** %3), !dbg !5363
  %4 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5364
  %cmp = icmp eq %union.tree_node* %call4, %4, !dbg !5365
  br i1 %cmp, label %if.then, label %if.else, !dbg !5366

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr, metadata !5367, metadata !DIExpression()), !dbg !5369
  %5 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %vloops, align 8, !dbg !5370
  %call5 = call %struct.data_dependence_relation* @initialize_data_dependence_relation(%struct.data_reference* null, %struct.data_reference* null, %struct.VEC_loop_p_heap* %5), !dbg !5371
  store %struct.data_dependence_relation* %call5, %struct.data_dependence_relation** %ddr, align 8, !dbg !5372
  %6 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %dependence_relations.addr, align 8, !dbg !5373
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !5373
  %call6 = call %struct.data_dependence_relation** @VEC_ddr_p_heap_safe_push(%struct.VEC_ddr_p_heap** %6, %struct.data_dependence_relation* %7), !dbg !5373
  store i8 0, i8* %res, align 1, !dbg !5374
  br label %if.end, !dbg !5375

if.else:                                          ; preds = %lor.lhs.false3
  %8 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8, !dbg !5376
  %9 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %8, align 8, !dbg !5377
  %10 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %dependence_relations.addr, align 8, !dbg !5378
  %11 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %vloops, align 8, !dbg !5379
  %12 = load i8, i8* %compute_self_and_read_read_dependences.addr, align 1, !dbg !5380
  call void @compute_all_dependences(%struct.VEC_data_reference_p_heap* %9, %struct.VEC_ddr_p_heap** %10, %struct.VEC_loop_p_heap* %11, i8 zeroext %12), !dbg !5381
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5382
  %tobool7 = icmp ne %struct._IO_FILE* %13, null, !dbg !5382
  br i1 %tobool7, label %land.lhs.true, label %if.end30, !dbg !5384

land.lhs.true:                                    ; preds = %if.end
  %14 = load i32, i32* @dump_flags, align 4, !dbg !5385
  %and = and i32 %14, 16, !dbg !5386
  %tobool8 = icmp ne i32 %and, 0, !dbg !5386
  br i1 %tobool8, label %if.then9, label %if.end30, !dbg !5387

if.then9:                                         ; preds = %land.lhs.true
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5388
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.58, i64 0, i64 0)), !dbg !5390
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5391
  %17 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 0), align 4, !dbg !5392
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.59, i64 0, i64 0), i32 %17), !dbg !5393
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5394
  %19 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 1), align 4, !dbg !5395
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.60, i64 0, i64 0), i32 %19), !dbg !5396
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5397
  %21 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 2), align 4, !dbg !5398
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.61, i64 0, i64 0), i32 %21), !dbg !5399
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5400
  %23 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 3), align 4, !dbg !5401
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.62, i64 0, i64 0), i32 %23), !dbg !5402
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5403
  %25 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 4), align 4, !dbg !5404
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.63, i64 0, i64 0), i32 %25), !dbg !5405
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5406
  %27 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 5), align 4, !dbg !5407
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.64, i64 0, i64 0), i32 %27), !dbg !5408
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5409
  %29 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 6), align 4, !dbg !5410
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.65, i64 0, i64 0), i32 %29), !dbg !5411
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5412
  %31 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 7), align 4, !dbg !5413
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.66, i64 0, i64 0), i32 %31), !dbg !5414
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5415
  %33 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 9), align 4, !dbg !5416
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.67, i64 0, i64 0), i32 %33), !dbg !5417
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5418
  %35 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 8), align 4, !dbg !5419
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.68, i64 0, i64 0), i32 %35), !dbg !5420
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5421
  %37 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 10), align 4, !dbg !5422
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.69, i64 0, i64 0), i32 %37), !dbg !5423
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5424
  %39 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 11), align 4, !dbg !5425
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.70, i64 0, i64 0), i32 %39), !dbg !5426
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5427
  %41 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 13), align 4, !dbg !5428
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.71, i64 0, i64 0), i32 %41), !dbg !5429
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5430
  %43 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !5431
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.72, i64 0, i64 0), i32 %43), !dbg !5432
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5433
  %45 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !5434
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.73, i64 0, i64 0), i32 %45), !dbg !5435
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5436
  %47 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 15), align 4, !dbg !5437
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.74, i64 0, i64 0), i32 %47), !dbg !5438
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5439
  %49 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 17), align 4, !dbg !5440
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.75, i64 0, i64 0), i32 %49), !dbg !5441
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5442
  %51 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 16), align 4, !dbg !5443
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.76, i64 0, i64 0), i32 %51), !dbg !5444
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5445
  %53 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 18), align 4, !dbg !5446
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.77, i64 0, i64 0), i32 %53), !dbg !5447
  br label %if.end30, !dbg !5448

if.end30:                                         ; preds = %if.then9, %land.lhs.true, %if.end
  %54 = load i8, i8* %res, align 1, !dbg !5449
  ret i8 %54, !dbg !5450
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_loop_p_heap* @VEC_loop_p_heap_alloc(i32 %alloc_) #0 !dbg !5451 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5454, metadata !DIExpression()), !dbg !5455
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5455
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !5455
  %1 = bitcast i8* %call to %struct.VEC_loop_p_heap*, !dbg !5455
  ret %struct.VEC_loop_p_heap* %1, !dbg !5455
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @compute_data_dependences_for_bb(%struct.basic_block_def* %bb, i8 zeroext %compute_self_and_read_read_dependences, %struct.VEC_data_reference_p_heap** %datarefs, %struct.VEC_ddr_p_heap** %dependence_relations) #0 !dbg !5456 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %compute_self_and_read_read_dependences.addr = alloca i8, align 1
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap**, align 8
  %dependence_relations.addr = alloca %struct.VEC_ddr_p_heap**, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5459, metadata !DIExpression()), !dbg !5460
  store i8 %compute_self_and_read_read_dependences, i8* %compute_self_and_read_read_dependences.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %compute_self_and_read_read_dependences.addr, metadata !5461, metadata !DIExpression()), !dbg !5462
  store %struct.VEC_data_reference_p_heap** %datarefs, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap*** %datarefs.addr, metadata !5463, metadata !DIExpression()), !dbg !5464
  store %struct.VEC_ddr_p_heap** %dependence_relations, %struct.VEC_ddr_p_heap*** %dependence_relations.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap*** %dependence_relations.addr, metadata !5465, metadata !DIExpression()), !dbg !5466
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5467
  %1 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8, !dbg !5469
  %call = call %union.tree_node* @find_data_references_in_bb(%struct.loop* null, %struct.basic_block_def* %0, %struct.VEC_data_reference_p_heap** %1), !dbg !5470
  %2 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5471
  %cmp = icmp eq %union.tree_node* %call, %2, !dbg !5472
  br i1 %cmp, label %if.then, label %if.end, !dbg !5473

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5474
  br label %return, !dbg !5474

if.end:                                           ; preds = %entry
  %3 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %datarefs.addr, align 8, !dbg !5475
  %4 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %3, align 8, !dbg !5476
  %5 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %dependence_relations.addr, align 8, !dbg !5477
  %6 = load i8, i8* %compute_self_and_read_read_dependences.addr, align 1, !dbg !5478
  call void @compute_all_dependences(%struct.VEC_data_reference_p_heap* %4, %struct.VEC_ddr_p_heap** %5, %struct.VEC_loop_p_heap* null, i8 zeroext %6), !dbg !5479
  store i8 1, i8* %retval, align 1, !dbg !5480
  br label %return, !dbg !5480

return:                                           ; preds = %if.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !5481
  ret i8 %7, !dbg !5481
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @tree_check_data_deps() #0 !dbg !5482 {
entry:
  %li = alloca %struct.loop_iterator, align 8
  %loop_nest = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !5485, metadata !DIExpression()), !dbg !5491
  call void @llvm.dbg.declare(metadata %struct.loop** %loop_nest, metadata !5492, metadata !DIExpression()), !dbg !5493
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop_nest, i32 0), !dbg !5494
  br label %for.cond, !dbg !5494

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop_nest, align 8, !dbg !5496
  %tobool = icmp ne %struct.loop* %0, null, !dbg !5494
  br i1 %tobool, label %for.body, label %for.end, !dbg !5494

for.body:                                         ; preds = %for.cond
  %1 = load %struct.loop*, %struct.loop** %loop_nest, align 8, !dbg !5498
  call void @analyze_all_data_dependences(%struct.loop* %1), !dbg !5499
  br label %for.inc, !dbg !5499

for.inc:                                          ; preds = %for.body
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop_nest), !dbg !5496
  br label %for.cond, !dbg !5496, !llvm.loop !5500

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5502
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !5503 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !5507, metadata !DIExpression()), !dbg !5508
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !5509, metadata !DIExpression()), !dbg !5510
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5511, metadata !DIExpression()), !dbg !5512
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !5513, metadata !DIExpression()), !dbg !5514
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5515, metadata !DIExpression()), !dbg !5516
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !5517, metadata !DIExpression()), !dbg !5518
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5519
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !5520
  store i32 0, i32* %idx, align 8, !dbg !5521
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5522
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !5522
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5522
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5522
  %tobool = icmp ne %struct.loops* %2, null, !dbg !5522
  br i1 %tobool, label %if.end, label %if.then, !dbg !5524

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5525
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !5527
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !5528
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5529
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !5530
  br label %return, !dbg !5531

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !5532
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !5532
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5533
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !5534
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !5535
  %6 = load i32, i32* %flags.addr, align 4, !dbg !5536
  %and = and i32 %6, 1, !dbg !5537
  %tobool3 = icmp ne i32 %and, 0, !dbg !5538
  %7 = zext i1 %tobool3 to i64, !dbg !5538
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !5538
  store i32 %cond, i32* %mn, align 4, !dbg !5539
  %8 = load i32, i32* %flags.addr, align 4, !dbg !5540
  %and4 = and i32 %8, 4, !dbg !5542
  %tobool5 = icmp ne i32 %and4, 0, !dbg !5542
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !5543

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !5544
  br label %for.cond, !dbg !5547

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5548
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !5548
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !5548
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !5548
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !5548
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5548
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !5548
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !5548

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5548
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !5548
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !5548
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !5548
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !5548
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !5548
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !5548
  br label %cond.end, !dbg !5548

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5548

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5548
  %15 = load i32, i32* %i, align 4, !dbg !5548
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !5548
  %tobool15 = icmp ne i32 %call14, 0, !dbg !5550
  br i1 %tobool15, label %for.body, label %for.end, !dbg !5550

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5551
  %cmp = icmp ne %struct.loop* %16, null, !dbg !5553
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !5554

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5555
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !5556
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !5556
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !5557
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !5558

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5559
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !5560
  %20 = load i32, i32* %num, align 8, !dbg !5560
  %21 = load i32, i32* %mn, align 4, !dbg !5561
  %cmp18 = icmp sge i32 %20, %21, !dbg !5562
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !5563

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5564
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !5564
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !5564
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !5564
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !5564

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5564
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !5564
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !5564
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !5564
  br label %cond.end26, !dbg !5564

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !5564

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !5564
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5564
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !5564
  %27 = load i32, i32* %num28, align 8, !dbg !5564
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !5564
  br label %if.end30, !dbg !5564

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5561

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !5565
  %inc = add i32 %28, 1, !dbg !5565
  store i32 %inc, i32* %i, align 4, !dbg !5565
  br label %for.cond, !dbg !5566, !llvm.loop !5567

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !5569

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !5570
  %and31 = and i32 %29, 2, !dbg !5572
  %tobool32 = icmp ne i32 %and31, 0, !dbg !5572
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !5573

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5574
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !5574
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !5574
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !5574
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !5577
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !5577
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !5578
  br label %for.cond36, !dbg !5579

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5580
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !5582
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !5582
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !5583
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !5584

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !5585

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5586
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !5587
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !5587
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !5588
  br label %for.cond36, !dbg !5589, !llvm.loop !5590

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !5592

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5593
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !5596
  %38 = load i32, i32* %num43, align 8, !dbg !5596
  %39 = load i32, i32* %mn, align 4, !dbg !5597
  %cmp44 = icmp sge i32 %38, %39, !dbg !5598
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !5599

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5600
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !5600
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !5600
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !5600
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !5600

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5600
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !5600
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !5600
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !5600
  br label %cond.end52, !dbg !5600

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !5600

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !5600
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5600
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !5600
  %45 = load i32, i32* %num54, align 8, !dbg !5600
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !5600
  br label %if.end56, !dbg !5600

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5601
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !5603
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !5603
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !5601
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !5604

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5605
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !5608
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !5608
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !5609
  br label %for.cond60, !dbg !5610

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5611
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !5613
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !5613
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !5614
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !5615

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !5616

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5617
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !5618
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !5618
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !5619
  br label %for.cond60, !dbg !5620, !llvm.loop !5621

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !5623

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5624
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !5626
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !5626
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !5627

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !5628

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5629
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !5630
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !5631
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !5592, !llvm.loop !5632

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !5634

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5635
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !5635
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !5635
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !5635
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !5637
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !5637
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !5638
  br label %while.body79, !dbg !5639

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5640
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !5643
  %60 = load i32, i32* %num80, align 8, !dbg !5643
  %61 = load i32, i32* %mn, align 4, !dbg !5644
  %cmp81 = icmp sge i32 %60, %61, !dbg !5645
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !5646

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5647
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !5647
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !5647
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !5647
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !5647

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5647
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !5647
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !5647
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !5647
  br label %cond.end89, !dbg !5647

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !5647

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !5647
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5647
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !5647
  %67 = load i32, i32* %num91, align 8, !dbg !5647
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !5647
  br label %if.end93, !dbg !5647

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5648
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !5650
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !5650
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !5651
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !5652

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5653
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !5654
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !5654
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !5655
  br label %if.end110, !dbg !5656

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !5657

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5659
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !5660
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !5661

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5662
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !5663
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !5663
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !5664
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !5665
  br i1 %75, label %while.body103, label %while.end105, !dbg !5657

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5666
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !5667
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !5668
  br label %while.cond99, !dbg !5657, !llvm.loop !5669

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5671
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !5673
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !5674

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !5675

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5676
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !5677
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !5677
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !5678
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !5639, !llvm.loop !5679

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5681
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5682
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !5683
  br label %return, !dbg !5684

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !5684
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_all_data_dependences(%struct.loop* %loop) #0 !dbg !5685 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %nb_data_refs = alloca i32, align 4
  %datarefs = alloca %struct.VEC_data_reference_p_heap*, align 8
  %dependence_relations = alloca %struct.VEC_ddr_p_heap*, align 8
  %nb_top_relations = alloca i32, align 4
  %nb_bot_relations = alloca i32, align 4
  %nb_chrec_relations = alloca i32, align 4
  %ddr = alloca %struct.data_dependence_relation*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5688, metadata !DIExpression()), !dbg !5689
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5690, metadata !DIExpression()), !dbg !5691
  call void @llvm.dbg.declare(metadata i32* %nb_data_refs, metadata !5692, metadata !DIExpression()), !dbg !5693
  store i32 10, i32* %nb_data_refs, align 4, !dbg !5693
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap** %datarefs, metadata !5694, metadata !DIExpression()), !dbg !5695
  %0 = load i32, i32* %nb_data_refs, align 4, !dbg !5696
  %call = call %struct.VEC_data_reference_p_heap* @VEC_data_reference_p_heap_alloc(i32 %0), !dbg !5696
  store %struct.VEC_data_reference_p_heap* %call, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !5695
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %dependence_relations, metadata !5697, metadata !DIExpression()), !dbg !5698
  %1 = load i32, i32* %nb_data_refs, align 4, !dbg !5699
  %2 = load i32, i32* %nb_data_refs, align 4, !dbg !5699
  %mul = mul nsw i32 %1, %2, !dbg !5699
  %call1 = call %struct.VEC_ddr_p_heap* @VEC_ddr_p_heap_alloc(i32 %mul), !dbg !5699
  store %struct.VEC_ddr_p_heap* %call1, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !5698
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5700
  %call2 = call zeroext i8 @compute_data_dependences_for_loop(%struct.loop* %3, i8 zeroext 0, %struct.VEC_data_reference_p_heap** %datarefs, %struct.VEC_ddr_p_heap** %dependence_relations), !dbg !5701
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5702
  %tobool = icmp ne %struct._IO_FILE* %4, null, !dbg !5702
  br i1 %tobool, label %if.then, label %if.end24, !dbg !5704

if.then:                                          ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5705
  %6 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !5707
  call void @dump_data_dependence_relations(%struct._IO_FILE* %5, %struct.VEC_ddr_p_heap* %6), !dbg !5708
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5709
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)), !dbg !5710
  %8 = load i32, i32* @dump_flags, align 4, !dbg !5711
  %and = and i32 %8, 8, !dbg !5713
  %tobool4 = icmp ne i32 %and, 0, !dbg !5713
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !5714

if.then5:                                         ; preds = %if.then
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5715
  %10 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !5716
  call void @dump_dist_dir_vectors(%struct._IO_FILE* %9, %struct.VEC_ddr_p_heap* %10), !dbg !5717
  br label %if.end, !dbg !5717

if.end:                                           ; preds = %if.then5, %if.then
  %11 = load i32, i32* @dump_flags, align 4, !dbg !5718
  %and6 = and i32 %11, 16, !dbg !5720
  %tobool7 = icmp ne i32 %and6, 0, !dbg !5720
  br i1 %tobool7, label %if.then8, label %if.end23, !dbg !5721

if.then8:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %nb_top_relations, metadata !5722, metadata !DIExpression()), !dbg !5724
  store i32 0, i32* %nb_top_relations, align 4, !dbg !5724
  call void @llvm.dbg.declare(metadata i32* %nb_bot_relations, metadata !5725, metadata !DIExpression()), !dbg !5726
  store i32 0, i32* %nb_bot_relations, align 4, !dbg !5726
  call void @llvm.dbg.declare(metadata i32* %nb_chrec_relations, metadata !5727, metadata !DIExpression()), !dbg !5728
  store i32 0, i32* %nb_chrec_relations, align 4, !dbg !5728
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr, metadata !5729, metadata !DIExpression()), !dbg !5730
  store i32 0, i32* %i, align 4, !dbg !5731
  br label %for.cond, !dbg !5733

for.cond:                                         ; preds = %for.inc, %if.then8
  %12 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !5734
  %tobool9 = icmp ne %struct.VEC_ddr_p_heap* %12, null, !dbg !5734
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !5734

cond.true:                                        ; preds = %for.cond
  %13 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !5734
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %13, i32 0, i32 0, !dbg !5734
  br label %cond.end, !dbg !5734

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5734

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ddr_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5734
  %14 = load i32, i32* %i, align 4, !dbg !5734
  %call10 = call i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %cond, i32 %14, %struct.data_dependence_relation** %ddr), !dbg !5734
  %tobool11 = icmp ne i32 %call10, 0, !dbg !5736
  br i1 %tobool11, label %for.body, label %for.end, !dbg !5736

for.body:                                         ; preds = %cond.end
  %15 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !5737
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %15, i32 0, i32 2, !dbg !5737
  %16 = load %union.tree_node*, %union.tree_node** %are_dependent, align 8, !dbg !5737
  %call12 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %16), !dbg !5740
  %tobool13 = icmp ne i8 %call12, 0, !dbg !5740
  br i1 %tobool13, label %if.then14, label %if.else, !dbg !5741

if.then14:                                        ; preds = %for.body
  %17 = load i32, i32* %nb_top_relations, align 4, !dbg !5742
  %inc = add i32 %17, 1, !dbg !5742
  store i32 %inc, i32* %nb_top_relations, align 4, !dbg !5742
  br label %if.end21, !dbg !5743

if.else:                                          ; preds = %for.body
  %18 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !5744
  %are_dependent15 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %18, i32 0, i32 2, !dbg !5744
  %19 = load %union.tree_node*, %union.tree_node** %are_dependent15, align 8, !dbg !5744
  %20 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !5746
  %cmp = icmp eq %union.tree_node* %19, %20, !dbg !5747
  br i1 %cmp, label %if.then16, label %if.else18, !dbg !5748

if.then16:                                        ; preds = %if.else
  %21 = load i32, i32* %nb_bot_relations, align 4, !dbg !5749
  %inc17 = add i32 %21, 1, !dbg !5749
  store i32 %inc17, i32* %nb_bot_relations, align 4, !dbg !5749
  br label %if.end20, !dbg !5750

if.else18:                                        ; preds = %if.else
  %22 = load i32, i32* %nb_chrec_relations, align 4, !dbg !5751
  %inc19 = add i32 %22, 1, !dbg !5751
  store i32 %inc19, i32* %nb_chrec_relations, align 4, !dbg !5751
  br label %if.end20

if.end20:                                         ; preds = %if.else18, %if.then16
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then14
  br label %for.inc, !dbg !5752

for.inc:                                          ; preds = %if.end21
  %23 = load i32, i32* %i, align 4, !dbg !5753
  %inc22 = add i32 %23, 1, !dbg !5753
  store i32 %inc22, i32* %i, align 4, !dbg !5753
  br label %for.cond, !dbg !5754, !llvm.loop !5755

for.end:                                          ; preds = %cond.end
  call void @gather_stats_on_scev_database(), !dbg !5757
  br label %if.end23, !dbg !5758

if.end23:                                         ; preds = %for.end, %if.end
  br label %if.end24, !dbg !5759

if.end24:                                         ; preds = %if.end23, %entry
  %24 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !5760
  call void @free_dependence_relations(%struct.VEC_ddr_p_heap* %24), !dbg !5761
  %25 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !5762
  call void @free_data_refs(%struct.VEC_data_reference_p_heap* %25), !dbg !5763
  ret void, !dbg !5764
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !5765 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !5768, metadata !DIExpression()), !dbg !5769
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !5770, metadata !DIExpression()), !dbg !5771
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !5772, metadata !DIExpression()), !dbg !5773
  br label %while.cond, !dbg !5774

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5775
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !5775
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !5775
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !5775
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5775

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5775
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !5775
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !5775
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !5775
  br label %cond.end, !dbg !5775

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !5775

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5775
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5775
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !5775
  %5 = load i32, i32* %idx, align 8, !dbg !5775
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !5775
  %tobool2 = icmp ne i32 %call, 0, !dbg !5774
  br i1 %tobool2, label %while.body, label %while.end, !dbg !5774

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5776
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !5778
  %7 = load i32, i32* %idx3, align 8, !dbg !5779
  %inc = add i32 %7, 1, !dbg !5779
  store i32 %inc, i32* %idx3, align 8, !dbg !5779
  %8 = load i32, i32* %anum, align 4, !dbg !5780
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !5781
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5782
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !5783
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5784
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !5786
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !5786
  br i1 %tobool5, label %if.then, label %if.end, !dbg !5787

if.then:                                          ; preds = %while.body
  br label %return, !dbg !5788

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !5774, !llvm.loop !5789

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5791
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !5791
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !5791
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5792
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !5793
  br label %return, !dbg !5794

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !5794
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_dependence_relation(%struct.data_dependence_relation* %ddr) #0 !dbg !5795 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !5796, metadata !DIExpression()), !dbg !5797
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !5798
  %cmp = icmp eq %struct.data_dependence_relation* %0, null, !dbg !5800
  br i1 %cmp, label %if.then, label %if.end, !dbg !5801

if.then:                                          ; preds = %entry
  br label %return, !dbg !5802

if.end:                                           ; preds = %entry
  %1 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !5803
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %1, i32 0, i32 3, !dbg !5803
  %2 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !5803
  %tobool = icmp ne %struct.VEC_subscript_p_heap* %2, null, !dbg !5803
  br i1 %tobool, label %if.then1, label %if.end3, !dbg !5805

if.then1:                                         ; preds = %if.end
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !5806
  %subscripts2 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %3, i32 0, i32 3, !dbg !5806
  %4 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts2, align 8, !dbg !5806
  call void @free_subscripts(%struct.VEC_subscript_p_heap* %4), !dbg !5807
  br label %if.end3, !dbg !5807

if.end3:                                          ; preds = %if.then1, %if.end
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !5808
  %dist_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 6, !dbg !5808
  %6 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects, align 8, !dbg !5808
  %tobool4 = icmp ne %struct.VEC_lambda_vector_heap* %6, null, !dbg !5808
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !5810

if.then5:                                         ; preds = %if.end3
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !5811
  %dist_vects6 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 6, !dbg !5811
  call void @VEC_lambda_vector_heap_free(%struct.VEC_lambda_vector_heap** %dist_vects6), !dbg !5811
  br label %if.end7, !dbg !5811

if.end7:                                          ; preds = %if.then5, %if.end3
  %8 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !5812
  %dir_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %8, i32 0, i32 5, !dbg !5812
  %9 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects, align 8, !dbg !5812
  %tobool8 = icmp ne %struct.VEC_lambda_vector_heap* %9, null, !dbg !5812
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !5814

if.then9:                                         ; preds = %if.end7
  %10 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !5815
  %dir_vects10 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %10, i32 0, i32 5, !dbg !5815
  call void @VEC_lambda_vector_heap_free(%struct.VEC_lambda_vector_heap** %dir_vects10), !dbg !5815
  br label %if.end11, !dbg !5815

if.end11:                                         ; preds = %if.then9, %if.end7
  %11 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !5816
  %12 = bitcast %struct.data_dependence_relation* %11 to i8*, !dbg !5816
  call void @free(i8* %12), !dbg !5817
  br label %return, !dbg !5818

return:                                           ; preds = %if.end11, %if.then
  ret void, !dbg !5818
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_subscripts(%struct.VEC_subscript_p_heap* %subscripts) #0 !dbg !5819 {
entry:
  %subscripts.addr = alloca %struct.VEC_subscript_p_heap*, align 8
  %i = alloca i32, align 4
  %s = alloca %struct.subscript*, align 8
  store %struct.VEC_subscript_p_heap* %subscripts, %struct.VEC_subscript_p_heap** %subscripts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_subscript_p_heap** %subscripts.addr, metadata !5822, metadata !DIExpression()), !dbg !5823
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5824, metadata !DIExpression()), !dbg !5825
  call void @llvm.dbg.declare(metadata %struct.subscript** %s, metadata !5826, metadata !DIExpression()), !dbg !5827
  store i32 0, i32* %i, align 4, !dbg !5828
  br label %for.cond, !dbg !5830

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts.addr, align 8, !dbg !5831
  %tobool = icmp ne %struct.VEC_subscript_p_heap* %0, null, !dbg !5831
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5831

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts.addr, align 8, !dbg !5831
  %base = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %1, i32 0, i32 0, !dbg !5831
  br label %cond.end, !dbg !5831

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5831

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_subscript_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5831
  %2 = load i32, i32* %i, align 4, !dbg !5831
  %call = call i32 @VEC_subscript_p_base_iterate(%struct.VEC_subscript_p_base* %cond, i32 %2, %struct.subscript** %s), !dbg !5831
  %tobool1 = icmp ne i32 %call, 0, !dbg !5833
  br i1 %tobool1, label %for.body, label %for.end, !dbg !5833

for.body:                                         ; preds = %cond.end
  %3 = load %struct.subscript*, %struct.subscript** %s, align 8, !dbg !5834
  %conflicting_iterations_in_a = getelementptr inbounds %struct.subscript, %struct.subscript* %3, i32 0, i32 0, !dbg !5836
  %4 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_a, align 8, !dbg !5836
  call void @free_conflict_function(%struct.conflict_function* %4), !dbg !5837
  %5 = load %struct.subscript*, %struct.subscript** %s, align 8, !dbg !5838
  %conflicting_iterations_in_b = getelementptr inbounds %struct.subscript, %struct.subscript* %5, i32 0, i32 1, !dbg !5839
  %6 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_b, align 8, !dbg !5839
  call void @free_conflict_function(%struct.conflict_function* %6), !dbg !5840
  %7 = load %struct.subscript*, %struct.subscript** %s, align 8, !dbg !5841
  %8 = bitcast %struct.subscript* %7 to i8*, !dbg !5841
  call void @free(i8* %8), !dbg !5842
  br label %for.inc, !dbg !5843

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !5844
  %inc = add i32 %9, 1, !dbg !5844
  store i32 %inc, i32* %i, align 4, !dbg !5844
  br label %for.cond, !dbg !5845, !llvm.loop !5846

for.end:                                          ; preds = %cond.end
  call void @VEC_subscript_p_heap_free(%struct.VEC_subscript_p_heap** %subscripts.addr), !dbg !5848
  ret void, !dbg !5849
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_lambda_vector_heap_free(%struct.VEC_lambda_vector_heap** %vec_) #0 !dbg !5850 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_vector_heap**, align 8
  store %struct.VEC_lambda_vector_heap** %vec_, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_heap*** %vec_.addr, metadata !5854, metadata !DIExpression()), !dbg !5855
  %0 = load %struct.VEC_lambda_vector_heap**, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8, !dbg !5856
  %1 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %0, align 8, !dbg !5856
  %tobool = icmp ne %struct.VEC_lambda_vector_heap* %1, null, !dbg !5856
  br i1 %tobool, label %if.then, label %if.end, !dbg !5855

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_lambda_vector_heap**, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8, !dbg !5856
  %3 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %2, align 8, !dbg !5856
  %4 = bitcast %struct.VEC_lambda_vector_heap* %3 to i8*, !dbg !5856
  call void @free(i8* %4), !dbg !5856
  br label %if.end, !dbg !5856

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_lambda_vector_heap**, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8, !dbg !5855
  store %struct.VEC_lambda_vector_heap* null, %struct.VEC_lambda_vector_heap** %5, align 8, !dbg !5855
  ret void, !dbg !5855
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_dependence_relations(%struct.VEC_ddr_p_heap* %dependence_relations) #0 !dbg !5858 {
entry:
  %dependence_relations.addr = alloca %struct.VEC_ddr_p_heap*, align 8
  %i = alloca i32, align 4
  %ddr = alloca %struct.data_dependence_relation*, align 8
  %loop_nest = alloca %struct.VEC_loop_p_heap*, align 8
  store %struct.VEC_ddr_p_heap* %dependence_relations, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %dependence_relations.addr, metadata !5859, metadata !DIExpression()), !dbg !5860
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5861, metadata !DIExpression()), !dbg !5862
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr, metadata !5863, metadata !DIExpression()), !dbg !5864
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap** %loop_nest, metadata !5865, metadata !DIExpression()), !dbg !5866
  store %struct.VEC_loop_p_heap* null, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !5866
  store i32 0, i32* %i, align 4, !dbg !5867
  br label %for.cond, !dbg !5869

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8, !dbg !5870
  %tobool = icmp ne %struct.VEC_ddr_p_heap* %0, null, !dbg !5870
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5870

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8, !dbg !5870
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %1, i32 0, i32 0, !dbg !5870
  br label %cond.end, !dbg !5870

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5870

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ddr_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5870
  %2 = load i32, i32* %i, align 4, !dbg !5870
  %call = call i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %cond, i32 %2, %struct.data_dependence_relation** %ddr), !dbg !5870
  %tobool1 = icmp ne i32 %call, 0, !dbg !5872
  br i1 %tobool1, label %for.body, label %for.end, !dbg !5872

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !5873
  %cmp = icmp eq %struct.data_dependence_relation* %3, null, !dbg !5876
  br i1 %cmp, label %if.then, label %if.end, !dbg !5877

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !5878

if.end:                                           ; preds = %for.body
  %4 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !5879
  %cmp2 = icmp eq %struct.VEC_loop_p_heap* %4, null, !dbg !5881
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !5882

if.then3:                                         ; preds = %if.end
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !5883
  %loop_nest4 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 4, !dbg !5883
  %6 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest4, align 8, !dbg !5883
  store %struct.VEC_loop_p_heap* %6, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !5884
  br label %if.end13, !dbg !5885

if.else:                                          ; preds = %if.end
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !5886
  %loop_nest5 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 4, !dbg !5886
  %8 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest5, align 8, !dbg !5886
  %cmp6 = icmp eq %struct.VEC_loop_p_heap* %8, null, !dbg !5886
  br i1 %cmp6, label %cond.false10, label %lor.lhs.false, !dbg !5886

lor.lhs.false:                                    ; preds = %if.else
  %9 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !5886
  %loop_nest7 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %9, i32 0, i32 4, !dbg !5886
  %10 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest7, align 8, !dbg !5886
  %11 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !5886
  %cmp8 = icmp eq %struct.VEC_loop_p_heap* %10, %11, !dbg !5886
  br i1 %cmp8, label %cond.false10, label %cond.true9, !dbg !5886

cond.true9:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 4551, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !5886
  br label %cond.end11, !dbg !5886

cond.false10:                                     ; preds = %lor.lhs.false, %if.else
  br label %cond.end11, !dbg !5886

cond.end11:                                       ; preds = %cond.false10, %cond.true9
  %cond12 = phi i32 [ 0, %cond.true9 ], [ 0, %cond.false10 ], !dbg !5886
  br label %if.end13

if.end13:                                         ; preds = %cond.end11, %if.then3
  %12 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !5887
  call void @free_dependence_relation(%struct.data_dependence_relation* %12), !dbg !5888
  br label %for.inc, !dbg !5889

for.inc:                                          ; preds = %if.end13, %if.then
  %13 = load i32, i32* %i, align 4, !dbg !5890
  %inc = add i32 %13, 1, !dbg !5890
  store i32 %inc, i32* %i, align 4, !dbg !5890
  br label %for.cond, !dbg !5891, !llvm.loop !5892

for.end:                                          ; preds = %cond.end
  %14 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !5894
  %tobool14 = icmp ne %struct.VEC_loop_p_heap* %14, null, !dbg !5894
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !5896

if.then15:                                        ; preds = %for.end
  call void @VEC_loop_p_heap_free(%struct.VEC_loop_p_heap** %loop_nest), !dbg !5897
  br label %if.end16, !dbg !5897

if.end16:                                         ; preds = %if.then15, %for.end
  call void @VEC_ddr_p_heap_free(%struct.VEC_ddr_p_heap** %dependence_relations.addr), !dbg !5898
  ret void, !dbg !5899
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_loop_p_heap_free(%struct.VEC_loop_p_heap** %vec_) #0 !dbg !5900 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_heap**, align 8
  store %struct.VEC_loop_p_heap** %vec_, %struct.VEC_loop_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap*** %vec_.addr, metadata !5903, metadata !DIExpression()), !dbg !5904
  %0 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !5905
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %0, align 8, !dbg !5905
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !5905
  br i1 %tobool, label %if.then, label %if.end, !dbg !5904

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !5905
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %2, align 8, !dbg !5905
  %4 = bitcast %struct.VEC_loop_p_heap* %3 to i8*, !dbg !5905
  call void @free(i8* %4), !dbg !5905
  br label %if.end, !dbg !5905

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !5904
  store %struct.VEC_loop_p_heap* null, %struct.VEC_loop_p_heap** %5, align 8, !dbg !5904
  ret void, !dbg !5904
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ddr_p_heap_free(%struct.VEC_ddr_p_heap** %vec_) #0 !dbg !5907 {
entry:
  %vec_.addr = alloca %struct.VEC_ddr_p_heap**, align 8
  store %struct.VEC_ddr_p_heap** %vec_, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap*** %vec_.addr, metadata !5910, metadata !DIExpression()), !dbg !5911
  %0 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8, !dbg !5912
  %1 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %0, align 8, !dbg !5912
  %tobool = icmp ne %struct.VEC_ddr_p_heap* %1, null, !dbg !5912
  br i1 %tobool, label %if.then, label %if.end, !dbg !5911

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8, !dbg !5912
  %3 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %2, align 8, !dbg !5912
  %4 = bitcast %struct.VEC_ddr_p_heap* %3 to i8*, !dbg !5912
  call void @free(i8* %4), !dbg !5912
  br label %if.end, !dbg !5912

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8, !dbg !5911
  store %struct.VEC_ddr_p_heap* null, %struct.VEC_ddr_p_heap** %5, align 8, !dbg !5911
  ret void, !dbg !5911
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_data_refs(%struct.VEC_data_reference_p_heap* %datarefs) #0 !dbg !5914 {
entry:
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap*, align 8
  %i = alloca i32, align 4
  %dr = alloca %struct.data_reference*, align 8
  store %struct.VEC_data_reference_p_heap* %datarefs, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap** %datarefs.addr, metadata !5915, metadata !DIExpression()), !dbg !5916
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5917, metadata !DIExpression()), !dbg !5918
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr, metadata !5919, metadata !DIExpression()), !dbg !5920
  store i32 0, i32* %i, align 4, !dbg !5921
  br label %for.cond, !dbg !5923

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !5924
  %tobool = icmp ne %struct.VEC_data_reference_p_heap* %0, null, !dbg !5924
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5924

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !5924
  %base = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %1, i32 0, i32 0, !dbg !5924
  br label %cond.end, !dbg !5924

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5924

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_reference_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5924
  %2 = load i32, i32* %i, align 4, !dbg !5924
  %call = call i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %cond, i32 %2, %struct.data_reference** %dr), !dbg !5924
  %tobool1 = icmp ne i32 %call, 0, !dbg !5926
  br i1 %tobool1, label %for.body, label %for.end, !dbg !5926

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !5927
  call void @free_data_ref(%struct.data_reference* %3), !dbg !5928
  br label %for.inc, !dbg !5928

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !5929
  %inc = add i32 %4, 1, !dbg !5929
  store i32 %inc, i32* %i, align 4, !dbg !5929
  br label %for.cond, !dbg !5930, !llvm.loop !5931

for.end:                                          ; preds = %cond.end
  call void @VEC_data_reference_p_heap_free(%struct.VEC_data_reference_p_heap** %datarefs.addr), !dbg !5933
  ret void, !dbg !5934
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_data_reference_p_heap_free(%struct.VEC_data_reference_p_heap** %vec_) #0 !dbg !5935 {
entry:
  %vec_.addr = alloca %struct.VEC_data_reference_p_heap**, align 8
  store %struct.VEC_data_reference_p_heap** %vec_, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap*** %vec_.addr, metadata !5938, metadata !DIExpression()), !dbg !5939
  %0 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8, !dbg !5940
  %1 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %0, align 8, !dbg !5940
  %tobool = icmp ne %struct.VEC_data_reference_p_heap* %1, null, !dbg !5940
  br i1 %tobool, label %if.then, label %if.end, !dbg !5939

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8, !dbg !5940
  %3 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %2, align 8, !dbg !5940
  %4 = bitcast %struct.VEC_data_reference_p_heap* %3 to i8*, !dbg !5940
  call void @free(i8* %4), !dbg !5940
  br label %if.end, !dbg !5940

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8, !dbg !5939
  store %struct.VEC_data_reference_p_heap* null, %struct.VEC_data_reference_p_heap** %5, align 8, !dbg !5939
  ret void, !dbg !5939
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_rdg_vertex(%struct._IO_FILE* %file, %struct.graph* %rdg, i32 %i) #0 !dbg !5942 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %rdg.addr = alloca %struct.graph*, align 8
  %i.addr = alloca i32, align 4
  %v = alloca %struct.vertex*, align 8
  %e = alloca %struct.graph_edge*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !5968, metadata !DIExpression()), !dbg !5969
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !5970, metadata !DIExpression()), !dbg !5971
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5972, metadata !DIExpression()), !dbg !5973
  call void @llvm.dbg.declare(metadata %struct.vertex** %v, metadata !5974, metadata !DIExpression()), !dbg !5975
  %0 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5976
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %0, i32 0, i32 1, !dbg !5977
  %1 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !5977
  %2 = load i32, i32* %i.addr, align 4, !dbg !5978
  %idxprom = sext i32 %2 to i64, !dbg !5976
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %1, i64 %idxprom, !dbg !5976
  store %struct.vertex* %arrayidx, %struct.vertex** %v, align 8, !dbg !5975
  call void @llvm.dbg.declare(metadata %struct.graph_edge** %e, metadata !5979, metadata !DIExpression()), !dbg !5980
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5981
  %4 = load i32, i32* %i.addr, align 4, !dbg !5982
  %5 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5983
  %vertices1 = getelementptr inbounds %struct.graph, %struct.graph* %5, i32 0, i32 1, !dbg !5983
  %6 = load %struct.vertex*, %struct.vertex** %vertices1, align 8, !dbg !5983
  %7 = load i32, i32* %i.addr, align 4, !dbg !5983
  %idxprom2 = sext i32 %7 to i64, !dbg !5983
  %arrayidx3 = getelementptr inbounds %struct.vertex, %struct.vertex* %6, i64 %idxprom2, !dbg !5983
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx3, i32 0, i32 4, !dbg !5983
  %8 = load i8*, i8** %data, align 8, !dbg !5983
  %9 = bitcast i8* %8 to %struct.rdg_vertex*, !dbg !5983
  %has_mem_write = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %9, i32 0, i32 1, !dbg !5983
  %10 = load i8, i8* %has_mem_write, align 8, !dbg !5983
  %conv = zext i8 %10 to i32, !dbg !5983
  %tobool = icmp ne i32 %conv, 0, !dbg !5983
  %11 = zext i1 %tobool to i64, !dbg !5983
  %cond = select i1 %tobool, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.79, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.80, i64 0, i64 0), !dbg !5983
  %12 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !5984
  %vertices4 = getelementptr inbounds %struct.graph, %struct.graph* %12, i32 0, i32 1, !dbg !5984
  %13 = load %struct.vertex*, %struct.vertex** %vertices4, align 8, !dbg !5984
  %14 = load i32, i32* %i.addr, align 4, !dbg !5984
  %idxprom5 = sext i32 %14 to i64, !dbg !5984
  %arrayidx6 = getelementptr inbounds %struct.vertex, %struct.vertex* %13, i64 %idxprom5, !dbg !5984
  %data7 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx6, i32 0, i32 4, !dbg !5984
  %15 = load i8*, i8** %data7, align 8, !dbg !5984
  %16 = bitcast i8* %15 to %struct.rdg_vertex*, !dbg !5984
  %has_mem_reads = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %16, i32 0, i32 2, !dbg !5984
  %17 = load i8, i8* %has_mem_reads, align 1, !dbg !5984
  %conv8 = zext i8 %17 to i32, !dbg !5984
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !5984
  %18 = zext i1 %tobool9 to i64, !dbg !5984
  %cond10 = select i1 %tobool9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.81, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.80, i64 0, i64 0), !dbg !5984
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.78, i64 0, i64 0), i32 %4, i8* %cond, i8* %cond10), !dbg !5985
  %19 = load %struct.vertex*, %struct.vertex** %v, align 8, !dbg !5986
  %pred = getelementptr inbounds %struct.vertex, %struct.vertex* %19, i32 0, i32 0, !dbg !5988
  %20 = load %struct.graph_edge*, %struct.graph_edge** %pred, align 8, !dbg !5988
  %tobool11 = icmp ne %struct.graph_edge* %20, null, !dbg !5986
  br i1 %tobool11, label %if.then, label %if.end, !dbg !5989

if.then:                                          ; preds = %entry
  %21 = load %struct.vertex*, %struct.vertex** %v, align 8, !dbg !5990
  %pred12 = getelementptr inbounds %struct.vertex, %struct.vertex* %21, i32 0, i32 0, !dbg !5992
  %22 = load %struct.graph_edge*, %struct.graph_edge** %pred12, align 8, !dbg !5992
  store %struct.graph_edge* %22, %struct.graph_edge** %e, align 8, !dbg !5993
  br label %for.cond, !dbg !5994

for.cond:                                         ; preds = %for.inc, %if.then
  %23 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !5995
  %tobool13 = icmp ne %struct.graph_edge* %23, null, !dbg !5997
  br i1 %tobool13, label %for.body, label %for.end, !dbg !5997

for.body:                                         ; preds = %for.cond
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5998
  %25 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !5999
  %src = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %25, i32 0, i32 0, !dbg !6000
  %26 = load i32, i32* %src, align 8, !dbg !6000
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.82, i64 0, i64 0), i32 %26), !dbg !6001
  br label %for.inc, !dbg !6001

for.inc:                                          ; preds = %for.body
  %27 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !6002
  %pred_next = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %27, i32 0, i32 2, !dbg !6003
  %28 = load %struct.graph_edge*, %struct.graph_edge** %pred_next, align 8, !dbg !6003
  store %struct.graph_edge* %28, %struct.graph_edge** %e, align 8, !dbg !6004
  br label %for.cond, !dbg !6005, !llvm.loop !6006

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !6007

if.end:                                           ; preds = %for.end, %entry
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6008
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.83, i64 0, i64 0)), !dbg !6009
  %30 = load %struct.vertex*, %struct.vertex** %v, align 8, !dbg !6010
  %succ = getelementptr inbounds %struct.vertex, %struct.vertex* %30, i32 0, i32 1, !dbg !6012
  %31 = load %struct.graph_edge*, %struct.graph_edge** %succ, align 8, !dbg !6012
  %tobool16 = icmp ne %struct.graph_edge* %31, null, !dbg !6010
  br i1 %tobool16, label %if.then17, label %if.end25, !dbg !6013

if.then17:                                        ; preds = %if.end
  %32 = load %struct.vertex*, %struct.vertex** %v, align 8, !dbg !6014
  %succ18 = getelementptr inbounds %struct.vertex, %struct.vertex* %32, i32 0, i32 1, !dbg !6016
  %33 = load %struct.graph_edge*, %struct.graph_edge** %succ18, align 8, !dbg !6016
  store %struct.graph_edge* %33, %struct.graph_edge** %e, align 8, !dbg !6017
  br label %for.cond19, !dbg !6018

for.cond19:                                       ; preds = %for.inc23, %if.then17
  %34 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !6019
  %tobool20 = icmp ne %struct.graph_edge* %34, null, !dbg !6021
  br i1 %tobool20, label %for.body21, label %for.end24, !dbg !6021

for.body21:                                       ; preds = %for.cond19
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6022
  %36 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !6023
  %dest = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %36, i32 0, i32 1, !dbg !6024
  %37 = load i32, i32* %dest, align 4, !dbg !6024
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.82, i64 0, i64 0), i32 %37), !dbg !6025
  br label %for.inc23, !dbg !6025

for.inc23:                                        ; preds = %for.body21
  %38 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !6026
  %succ_next = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %38, i32 0, i32 3, !dbg !6027
  %39 = load %struct.graph_edge*, %struct.graph_edge** %succ_next, align 8, !dbg !6027
  store %struct.graph_edge* %39, %struct.graph_edge** %e, align 8, !dbg !6028
  br label %for.cond19, !dbg !6029, !llvm.loop !6030

for.end24:                                        ; preds = %for.cond19
  br label %if.end25, !dbg !6031

if.end25:                                         ; preds = %for.end24, %if.end
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6032
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.84, i64 0, i64 0)), !dbg !6033
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6034
  %42 = load %struct.vertex*, %struct.vertex** %v, align 8, !dbg !6035
  %data27 = getelementptr inbounds %struct.vertex, %struct.vertex* %42, i32 0, i32 4, !dbg !6035
  %43 = load i8*, i8** %data27, align 8, !dbg !6035
  %44 = bitcast i8* %43 to %struct.rdg_vertex*, !dbg !6035
  %stmt = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %44, i32 0, i32 0, !dbg !6035
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6035
  call void @print_gimple_stmt(%struct._IO_FILE* %41, %union.gimple_statement_d* %45, i32 0, i32 16448), !dbg !6036
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6037
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !6038
  ret void, !dbg !6039
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_rdg_vertex(%struct.graph* %rdg, i32 %i) #0 !dbg !6040 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %i.addr = alloca i32, align 4
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !6043, metadata !DIExpression()), !dbg !6044
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6045, metadata !DIExpression()), !dbg !6046
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6047
  %1 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6048
  %2 = load i32, i32* %i.addr, align 4, !dbg !6049
  call void @dump_rdg_vertex(%struct._IO_FILE* %0, %struct.graph* %1, i32 %2), !dbg !6050
  ret void, !dbg !6051
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_rdg_component(%struct._IO_FILE* %file, %struct.graph* %rdg, i32 %c, %struct.bitmap_head_def* %dumped) #0 !dbg !6052 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %rdg.addr = alloca %struct.graph*, align 8
  %c.addr = alloca i32, align 4
  %dumped.addr = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !6055, metadata !DIExpression()), !dbg !6056
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !6057, metadata !DIExpression()), !dbg !6058
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !6059, metadata !DIExpression()), !dbg !6060
  store %struct.bitmap_head_def* %dumped, %struct.bitmap_head_def** %dumped.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %dumped.addr, metadata !6061, metadata !DIExpression()), !dbg !6062
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6063, metadata !DIExpression()), !dbg !6064
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6065
  %1 = load i32, i32* %c.addr, align 4, !dbg !6066
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.85, i64 0, i64 0), i32 %1), !dbg !6067
  store i32 0, i32* %i, align 4, !dbg !6068
  br label %for.cond, !dbg !6070

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !6071
  %3 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6073
  %n_vertices = getelementptr inbounds %struct.graph, %struct.graph* %3, i32 0, i32 0, !dbg !6074
  %4 = load i32, i32* %n_vertices, align 8, !dbg !6074
  %cmp = icmp slt i32 %2, %4, !dbg !6075
  br i1 %cmp, label %for.body, label %for.end, !dbg !6076

for.body:                                         ; preds = %for.cond
  %5 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6077
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %5, i32 0, i32 1, !dbg !6079
  %6 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !6079
  %7 = load i32, i32* %i, align 4, !dbg !6080
  %idxprom = sext i32 %7 to i64, !dbg !6077
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %6, i64 %idxprom, !dbg !6077
  %component = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 2, !dbg !6081
  %8 = load i32, i32* %component, align 8, !dbg !6081
  %9 = load i32, i32* %c.addr, align 4, !dbg !6082
  %cmp1 = icmp eq i32 %8, %9, !dbg !6083
  br i1 %cmp1, label %if.then, label %if.end4, !dbg !6084

if.then:                                          ; preds = %for.body
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %dumped.addr, align 8, !dbg !6085
  %tobool = icmp ne %struct.bitmap_head_def* %10, null, !dbg !6085
  br i1 %tobool, label %if.then2, label %if.end, !dbg !6088

if.then2:                                         ; preds = %if.then
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %dumped.addr, align 8, !dbg !6089
  %12 = load i32, i32* %i, align 4, !dbg !6090
  %call3 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %11, i32 %12), !dbg !6091
  br label %if.end, !dbg !6091

if.end:                                           ; preds = %if.then2, %if.then
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6092
  %14 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6093
  %15 = load i32, i32* %i, align 4, !dbg !6094
  call void @dump_rdg_vertex(%struct._IO_FILE* %13, %struct.graph* %14, i32 %15), !dbg !6095
  br label %if.end4, !dbg !6096

if.end4:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !6082

for.inc:                                          ; preds = %if.end4
  %16 = load i32, i32* %i, align 4, !dbg !6097
  %inc = add nsw i32 %16, 1, !dbg !6097
  store i32 %inc, i32* %i, align 4, !dbg !6097
  br label %for.cond, !dbg !6098, !llvm.loop !6099

for.end:                                          ; preds = %for.cond
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6101
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !6102
  ret void, !dbg !6103
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_rdg_component(%struct.graph* %rdg, i32 %c) #0 !dbg !6104 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %c.addr = alloca i32, align 4
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !6105, metadata !DIExpression()), !dbg !6106
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !6107, metadata !DIExpression()), !dbg !6108
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6109
  %1 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6110
  %2 = load i32, i32* %c.addr, align 4, !dbg !6111
  call void @dump_rdg_component(%struct._IO_FILE* %0, %struct.graph* %1, i32 %2, %struct.bitmap_head_def* null), !dbg !6112
  ret void, !dbg !6113
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_rdg(%struct._IO_FILE* %file, %struct.graph* %rdg) #0 !dbg !6114 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %rdg.addr = alloca %struct.graph*, align 8
  %i = alloca i32, align 4
  %dumped = alloca %struct.bitmap_head_def*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !6117, metadata !DIExpression()), !dbg !6118
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !6119, metadata !DIExpression()), !dbg !6120
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6121, metadata !DIExpression()), !dbg !6122
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %dumped, metadata !6123, metadata !DIExpression()), !dbg !6124
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6125
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %dumped, align 8, !dbg !6124
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6126
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i64 0, i64 0)), !dbg !6127
  store i32 0, i32* %i, align 4, !dbg !6128
  br label %for.cond, !dbg !6130

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !6131
  %2 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6133
  %n_vertices = getelementptr inbounds %struct.graph, %struct.graph* %2, i32 0, i32 0, !dbg !6134
  %3 = load i32, i32* %n_vertices, align 8, !dbg !6134
  %cmp = icmp slt i32 %1, %3, !dbg !6135
  br i1 %cmp, label %for.body, label %for.end, !dbg !6136

for.body:                                         ; preds = %for.cond
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %dumped, align 8, !dbg !6137
  %5 = load i32, i32* %i, align 4, !dbg !6139
  %call2 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %4, i32 %5), !dbg !6140
  %tobool = icmp ne i32 %call2, 0, !dbg !6140
  br i1 %tobool, label %if.end, label %if.then, !dbg !6141

if.then:                                          ; preds = %for.body
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6142
  %7 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6143
  %8 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6144
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %8, i32 0, i32 1, !dbg !6145
  %9 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !6145
  %10 = load i32, i32* %i, align 4, !dbg !6146
  %idxprom = sext i32 %10 to i64, !dbg !6144
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %9, i64 %idxprom, !dbg !6144
  %component = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 2, !dbg !6147
  %11 = load i32, i32* %component, align 8, !dbg !6147
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %dumped, align 8, !dbg !6148
  call void @dump_rdg_component(%struct._IO_FILE* %6, %struct.graph* %7, i32 %11, %struct.bitmap_head_def* %12), !dbg !6149
  br label %if.end, !dbg !6149

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6150

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4, !dbg !6151
  %inc = add nsw i32 %13, 1, !dbg !6151
  store i32 %inc, i32* %i, align 4, !dbg !6151
  br label %for.cond, !dbg !6152, !llvm.loop !6153

for.end:                                          ; preds = %for.cond
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6155
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !6156
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %dumped, align 8, !dbg !6157
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %15), !dbg !6157
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %dumped, align 8, !dbg !6157
  ret void, !dbg !6158
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_rdg(%struct.graph* %rdg) #0 !dbg !6159 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !6162, metadata !DIExpression()), !dbg !6163
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6164
  %1 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6165
  call void @dump_rdg(%struct._IO_FILE* %0, %struct.graph* %1), !dbg !6166
  ret void, !dbg !6167
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rdg_vertex_for_stmt(%struct.graph* %rdg, %union.gimple_statement_d* %stmt) #0 !dbg !6168 {
entry:
  %retval = alloca i32, align 4
  %rdg.addr = alloca %struct.graph*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %rvi = alloca %struct.rdg_vertex_info, align 8
  %slot = alloca %struct.rdg_vertex_info*, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !6171, metadata !DIExpression()), !dbg !6172
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6173, metadata !DIExpression()), !dbg !6174
  call void @llvm.dbg.declare(metadata %struct.rdg_vertex_info* %rvi, metadata !6175, metadata !DIExpression()), !dbg !6176
  call void @llvm.dbg.declare(metadata %struct.rdg_vertex_info** %slot, metadata !6177, metadata !DIExpression()), !dbg !6178
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6179
  %stmt1 = getelementptr inbounds %struct.rdg_vertex_info, %struct.rdg_vertex_info* %rvi, i32 0, i32 0, !dbg !6180
  store %union.gimple_statement_d* %0, %union.gimple_statement_d** %stmt1, align 8, !dbg !6181
  %1 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6182
  %indices = getelementptr inbounds %struct.graph, %struct.graph* %1, i32 0, i32 2, !dbg !6183
  %2 = load %struct.htab*, %struct.htab** %indices, align 8, !dbg !6183
  %3 = bitcast %struct.rdg_vertex_info* %rvi to i8*, !dbg !6184
  %call = call i8* @htab_find(%struct.htab* %2, i8* %3), !dbg !6185
  %4 = bitcast i8* %call to %struct.rdg_vertex_info*, !dbg !6186
  store %struct.rdg_vertex_info* %4, %struct.rdg_vertex_info** %slot, align 8, !dbg !6187
  %5 = load %struct.rdg_vertex_info*, %struct.rdg_vertex_info** %slot, align 8, !dbg !6188
  %tobool = icmp ne %struct.rdg_vertex_info* %5, null, !dbg !6188
  br i1 %tobool, label %if.end, label %if.then, !dbg !6190

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !6191
  br label %return, !dbg !6191

if.end:                                           ; preds = %entry
  %6 = load %struct.rdg_vertex_info*, %struct.rdg_vertex_info** %slot, align 8, !dbg !6192
  %index = getelementptr inbounds %struct.rdg_vertex_info, %struct.rdg_vertex_info* %6, i32 0, i32 1, !dbg !6193
  %7 = load i32, i32* %index, align 8, !dbg !6193
  store i32 %7, i32* %retval, align 4, !dbg !6194
  br label %return, !dbg !6194

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !6195
  ret i32 %8, !dbg !6195
}

declare dso_local i8* @htab_find(%struct.htab*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @create_rdg_vertices(%struct.graph* %rdg, %struct.VEC_gimple_heap* %stmts) #0 !dbg !6196 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %stmts.addr = alloca %struct.VEC_gimple_heap*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %references = alloca %struct.VEC_data_ref_loc_heap*, align 8
  %ref = alloca %struct.data_ref_loc_d*, align 8
  %v = alloca %struct.vertex*, align 8
  %rvi = alloca %struct.rdg_vertex_info*, align 8
  %slot = alloca %struct.rdg_vertex_info**, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !6199, metadata !DIExpression()), !dbg !6200
  store %struct.VEC_gimple_heap* %stmts, %struct.VEC_gimple_heap** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %stmts.addr, metadata !6201, metadata !DIExpression()), !dbg !6202
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6203, metadata !DIExpression()), !dbg !6204
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6205, metadata !DIExpression()), !dbg !6206
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6207, metadata !DIExpression()), !dbg !6208
  store i32 0, i32* %i, align 4, !dbg !6209
  br label %for.cond, !dbg !6211

for.cond:                                         ; preds = %for.inc48, %entry
  %0 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts.addr, align 8, !dbg !6212
  %tobool = icmp ne %struct.VEC_gimple_heap* %0, null, !dbg !6212
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6212

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts.addr, align 8, !dbg !6212
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %1, i32 0, i32 0, !dbg !6212
  br label %cond.end, !dbg !6212

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6212

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6212
  %2 = load i32, i32* %i, align 4, !dbg !6212
  %call = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %2, %union.gimple_statement_d** %stmt), !dbg !6212
  %tobool1 = icmp ne i32 %call, 0, !dbg !6214
  br i1 %tobool1, label %for.body, label %for.end50, !dbg !6214

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_heap** %references, metadata !6215, metadata !DIExpression()), !dbg !6217
  call void @llvm.dbg.declare(metadata %struct.data_ref_loc_d** %ref, metadata !6218, metadata !DIExpression()), !dbg !6219
  call void @llvm.dbg.declare(metadata %struct.vertex** %v, metadata !6220, metadata !DIExpression()), !dbg !6221
  %3 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6222
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %3, i32 0, i32 1, !dbg !6223
  %4 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !6223
  %5 = load i32, i32* %i, align 4, !dbg !6224
  %idxprom = sext i32 %5 to i64, !dbg !6222
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %4, i64 %idxprom, !dbg !6222
  store %struct.vertex* %arrayidx, %struct.vertex** %v, align 8, !dbg !6221
  call void @llvm.dbg.declare(metadata %struct.rdg_vertex_info** %rvi, metadata !6225, metadata !DIExpression()), !dbg !6226
  %call2 = call i8* @xmalloc(i64 16), !dbg !6227
  %6 = bitcast i8* %call2 to %struct.rdg_vertex_info*, !dbg !6227
  store %struct.rdg_vertex_info* %6, %struct.rdg_vertex_info** %rvi, align 8, !dbg !6226
  call void @llvm.dbg.declare(metadata %struct.rdg_vertex_info*** %slot, metadata !6228, metadata !DIExpression()), !dbg !6229
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6230
  %8 = load %struct.rdg_vertex_info*, %struct.rdg_vertex_info** %rvi, align 8, !dbg !6231
  %stmt3 = getelementptr inbounds %struct.rdg_vertex_info, %struct.rdg_vertex_info* %8, i32 0, i32 0, !dbg !6232
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %stmt3, align 8, !dbg !6233
  %9 = load i32, i32* %i, align 4, !dbg !6234
  %10 = load %struct.rdg_vertex_info*, %struct.rdg_vertex_info** %rvi, align 8, !dbg !6235
  %index = getelementptr inbounds %struct.rdg_vertex_info, %struct.rdg_vertex_info* %10, i32 0, i32 1, !dbg !6236
  store i32 %9, i32* %index, align 8, !dbg !6237
  %11 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6238
  %indices = getelementptr inbounds %struct.graph, %struct.graph* %11, i32 0, i32 2, !dbg !6239
  %12 = load %struct.htab*, %struct.htab** %indices, align 8, !dbg !6239
  %13 = load %struct.rdg_vertex_info*, %struct.rdg_vertex_info** %rvi, align 8, !dbg !6240
  %14 = bitcast %struct.rdg_vertex_info* %13 to i8*, !dbg !6240
  %call4 = call i8** @htab_find_slot(%struct.htab* %12, i8* %14, i32 1), !dbg !6241
  %15 = bitcast i8** %call4 to %struct.rdg_vertex_info**, !dbg !6242
  store %struct.rdg_vertex_info** %15, %struct.rdg_vertex_info*** %slot, align 8, !dbg !6243
  %16 = load %struct.rdg_vertex_info**, %struct.rdg_vertex_info*** %slot, align 8, !dbg !6244
  %17 = load %struct.rdg_vertex_info*, %struct.rdg_vertex_info** %16, align 8, !dbg !6246
  %tobool5 = icmp ne %struct.rdg_vertex_info* %17, null, !dbg !6246
  br i1 %tobool5, label %if.else, label %if.then, !dbg !6247

if.then:                                          ; preds = %for.body
  %18 = load %struct.rdg_vertex_info*, %struct.rdg_vertex_info** %rvi, align 8, !dbg !6248
  %19 = load %struct.rdg_vertex_info**, %struct.rdg_vertex_info*** %slot, align 8, !dbg !6249
  store %struct.rdg_vertex_info* %18, %struct.rdg_vertex_info** %19, align 8, !dbg !6250
  br label %if.end, !dbg !6251

if.else:                                          ; preds = %for.body
  %20 = load %struct.rdg_vertex_info*, %struct.rdg_vertex_info** %rvi, align 8, !dbg !6252
  %21 = bitcast %struct.rdg_vertex_info* %20 to i8*, !dbg !6252
  call void @free(i8* %21), !dbg !6253
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call6 = call i8* @xmalloc(i64 16), !dbg !6254
  %22 = bitcast i8* %call6 to %struct.rdg_vertex*, !dbg !6254
  %23 = bitcast %struct.rdg_vertex* %22 to i8*, !dbg !6254
  %24 = load %struct.vertex*, %struct.vertex** %v, align 8, !dbg !6255
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %24, i32 0, i32 4, !dbg !6256
  store i8* %23, i8** %data, align 8, !dbg !6257
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6258
  %26 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6259
  %vertices7 = getelementptr inbounds %struct.graph, %struct.graph* %26, i32 0, i32 1, !dbg !6259
  %27 = load %struct.vertex*, %struct.vertex** %vertices7, align 8, !dbg !6259
  %28 = load i32, i32* %i, align 4, !dbg !6259
  %idxprom8 = sext i32 %28 to i64, !dbg !6259
  %arrayidx9 = getelementptr inbounds %struct.vertex, %struct.vertex* %27, i64 %idxprom8, !dbg !6259
  %data10 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx9, i32 0, i32 4, !dbg !6259
  %29 = load i8*, i8** %data10, align 8, !dbg !6259
  %30 = bitcast i8* %29 to %struct.rdg_vertex*, !dbg !6259
  %stmt11 = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %30, i32 0, i32 0, !dbg !6259
  store %union.gimple_statement_d* %25, %union.gimple_statement_d** %stmt11, align 8, !dbg !6260
  %31 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6261
  %vertices12 = getelementptr inbounds %struct.graph, %struct.graph* %31, i32 0, i32 1, !dbg !6261
  %32 = load %struct.vertex*, %struct.vertex** %vertices12, align 8, !dbg !6261
  %33 = load i32, i32* %i, align 4, !dbg !6261
  %idxprom13 = sext i32 %33 to i64, !dbg !6261
  %arrayidx14 = getelementptr inbounds %struct.vertex, %struct.vertex* %32, i64 %idxprom13, !dbg !6261
  %data15 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx14, i32 0, i32 4, !dbg !6261
  %34 = load i8*, i8** %data15, align 8, !dbg !6261
  %35 = bitcast i8* %34 to %struct.rdg_vertex*, !dbg !6261
  %has_mem_write = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %35, i32 0, i32 1, !dbg !6261
  store i8 0, i8* %has_mem_write, align 8, !dbg !6262
  %36 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6263
  %vertices16 = getelementptr inbounds %struct.graph, %struct.graph* %36, i32 0, i32 1, !dbg !6263
  %37 = load %struct.vertex*, %struct.vertex** %vertices16, align 8, !dbg !6263
  %38 = load i32, i32* %i, align 4, !dbg !6263
  %idxprom17 = sext i32 %38 to i64, !dbg !6263
  %arrayidx18 = getelementptr inbounds %struct.vertex, %struct.vertex* %37, i64 %idxprom17, !dbg !6263
  %data19 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx18, i32 0, i32 4, !dbg !6263
  %39 = load i8*, i8** %data19, align 8, !dbg !6263
  %40 = bitcast i8* %39 to %struct.rdg_vertex*, !dbg !6263
  %has_mem_reads = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %40, i32 0, i32 2, !dbg !6263
  store i8 0, i8* %has_mem_reads, align 1, !dbg !6264
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6265
  %call20 = call i32 @gimple_code(%union.gimple_statement_d* %41), !dbg !6267
  %cmp = icmp eq i32 %call20, 16, !dbg !6268
  br i1 %cmp, label %if.then21, label %if.end22, !dbg !6269

if.then21:                                        ; preds = %if.end
  br label %for.inc48, !dbg !6270

if.end22:                                         ; preds = %if.end
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6271
  %call23 = call zeroext i8 @get_references_in_stmt(%union.gimple_statement_d* %42, %struct.VEC_data_ref_loc_heap** %references), !dbg !6272
  store i32 0, i32* %j, align 4, !dbg !6273
  br label %for.cond24, !dbg !6275

for.cond24:                                       ; preds = %for.inc, %if.end22
  %43 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %references, align 8, !dbg !6276
  %tobool25 = icmp ne %struct.VEC_data_ref_loc_heap* %43, null, !dbg !6276
  br i1 %tobool25, label %cond.true26, label %cond.false28, !dbg !6276

cond.true26:                                      ; preds = %for.cond24
  %44 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %references, align 8, !dbg !6276
  %base27 = getelementptr inbounds %struct.VEC_data_ref_loc_heap, %struct.VEC_data_ref_loc_heap* %44, i32 0, i32 0, !dbg !6276
  br label %cond.end29, !dbg !6276

cond.false28:                                     ; preds = %for.cond24
  br label %cond.end29, !dbg !6276

cond.end29:                                       ; preds = %cond.false28, %cond.true26
  %cond30 = phi %struct.VEC_data_ref_loc_base* [ %base27, %cond.true26 ], [ null, %cond.false28 ], !dbg !6276
  %45 = load i32, i32* %j, align 4, !dbg !6276
  %call31 = call i32 @VEC_data_ref_loc_base_iterate(%struct.VEC_data_ref_loc_base* %cond30, i32 %45, %struct.data_ref_loc_d** %ref), !dbg !6276
  %tobool32 = icmp ne i32 %call31, 0, !dbg !6278
  br i1 %tobool32, label %for.body33, label %for.end, !dbg !6278

for.body33:                                       ; preds = %cond.end29
  %46 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !6279
  %is_read = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %46, i32 0, i32 1, !dbg !6281
  %47 = load i8, i8* %is_read, align 8, !dbg !6281
  %tobool34 = icmp ne i8 %47, 0, !dbg !6279
  br i1 %tobool34, label %if.else41, label %if.then35, !dbg !6282

if.then35:                                        ; preds = %for.body33
  %48 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6283
  %vertices36 = getelementptr inbounds %struct.graph, %struct.graph* %48, i32 0, i32 1, !dbg !6283
  %49 = load %struct.vertex*, %struct.vertex** %vertices36, align 8, !dbg !6283
  %50 = load i32, i32* %i, align 4, !dbg !6283
  %idxprom37 = sext i32 %50 to i64, !dbg !6283
  %arrayidx38 = getelementptr inbounds %struct.vertex, %struct.vertex* %49, i64 %idxprom37, !dbg !6283
  %data39 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx38, i32 0, i32 4, !dbg !6283
  %51 = load i8*, i8** %data39, align 8, !dbg !6283
  %52 = bitcast i8* %51 to %struct.rdg_vertex*, !dbg !6283
  %has_mem_write40 = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %52, i32 0, i32 1, !dbg !6283
  store i8 1, i8* %has_mem_write40, align 8, !dbg !6284
  br label %if.end47, !dbg !6283

if.else41:                                        ; preds = %for.body33
  %53 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6285
  %vertices42 = getelementptr inbounds %struct.graph, %struct.graph* %53, i32 0, i32 1, !dbg !6285
  %54 = load %struct.vertex*, %struct.vertex** %vertices42, align 8, !dbg !6285
  %55 = load i32, i32* %i, align 4, !dbg !6285
  %idxprom43 = sext i32 %55 to i64, !dbg !6285
  %arrayidx44 = getelementptr inbounds %struct.vertex, %struct.vertex* %54, i64 %idxprom43, !dbg !6285
  %data45 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx44, i32 0, i32 4, !dbg !6285
  %56 = load i8*, i8** %data45, align 8, !dbg !6285
  %57 = bitcast i8* %56 to %struct.rdg_vertex*, !dbg !6285
  %has_mem_reads46 = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %57, i32 0, i32 2, !dbg !6285
  store i8 1, i8* %has_mem_reads46, align 1, !dbg !6286
  br label %if.end47

if.end47:                                         ; preds = %if.else41, %if.then35
  br label %for.inc, !dbg !6281

for.inc:                                          ; preds = %if.end47
  %58 = load i32, i32* %j, align 4, !dbg !6287
  %inc = add nsw i32 %58, 1, !dbg !6287
  store i32 %inc, i32* %j, align 4, !dbg !6287
  br label %for.cond24, !dbg !6288, !llvm.loop !6289

for.end:                                          ; preds = %cond.end29
  call void @VEC_data_ref_loc_heap_free(%struct.VEC_data_ref_loc_heap** %references), !dbg !6291
  br label %for.inc48, !dbg !6292

for.inc48:                                        ; preds = %for.end, %if.then21
  %59 = load i32, i32* %i, align 4, !dbg !6293
  %inc49 = add nsw i32 %59, 1, !dbg !6293
  store i32 %inc49, i32* %i, align 4, !dbg !6293
  br label %for.cond, !dbg !6294, !llvm.loop !6295

for.end50:                                        ; preds = %cond.end
  ret void, !dbg !6297
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d** %ptr) #0 !dbg !6298 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !6304, metadata !DIExpression()), !dbg !6305
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6306, metadata !DIExpression()), !dbg !6305
  store %union.gimple_statement_d** %ptr, %union.gimple_statement_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %ptr.addr, metadata !6307, metadata !DIExpression()), !dbg !6305
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6308
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !6308
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6308

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6308
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6308
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 0, !dbg !6308
  %3 = load i32, i32* %num, align 8, !dbg !6308
  %cmp = icmp ult i32 %1, %3, !dbg !6308
  br i1 %cmp, label %if.then, label %if.else, !dbg !6305

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6310
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !6310
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6310
  %idxprom = zext i32 %5 to i64, !dbg !6310
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !6310
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !6310
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !6310
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %7, align 8, !dbg !6310
  store i32 1, i32* %retval, align 4, !dbg !6310
  br label %return, !dbg !6310

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !6312
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %8, align 8, !dbg !6312
  store i32 0, i32* %retval, align 4, !dbg !6312
  br label %return, !dbg !6312

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6305
  ret i32 %9, !dbg !6305
}

declare dso_local i8* @xmalloc(i64) #2

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.graph* @build_empty_rdg(i32 %n_stmts) #0 !dbg !6314 {
entry:
  %n_stmts.addr = alloca i32, align 4
  %nb_data_refs = alloca i32, align 4
  %rdg = alloca %struct.graph*, align 8
  store i32 %n_stmts, i32* %n_stmts.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_stmts.addr, metadata !6317, metadata !DIExpression()), !dbg !6318
  call void @llvm.dbg.declare(metadata i32* %nb_data_refs, metadata !6319, metadata !DIExpression()), !dbg !6320
  store i32 10, i32* %nb_data_refs, align 4, !dbg !6320
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg, metadata !6321, metadata !DIExpression()), !dbg !6322
  %0 = load i32, i32* %n_stmts.addr, align 4, !dbg !6323
  %call = call %struct.graph* @new_graph(i32 %0), !dbg !6324
  store %struct.graph* %call, %struct.graph** %rdg, align 8, !dbg !6322
  %1 = load i32, i32* %nb_data_refs, align 4, !dbg !6325
  %conv = sext i32 %1 to i64, !dbg !6325
  %call1 = call %struct.htab* @htab_create(i64 %conv, i32 (i8*)* @hash_stmt_vertex_info, i32 (i8*, i8*)* @eq_stmt_vertex_info, void (i8*)* @hash_stmt_vertex_del), !dbg !6326
  %2 = load %struct.graph*, %struct.graph** %rdg, align 8, !dbg !6327
  %indices = getelementptr inbounds %struct.graph, %struct.graph* %2, i32 0, i32 2, !dbg !6328
  store %struct.htab* %call1, %struct.htab** %indices, align 8, !dbg !6329
  %3 = load %struct.graph*, %struct.graph** %rdg, align 8, !dbg !6330
  ret %struct.graph* %3, !dbg !6331
}

declare dso_local %struct.graph* @new_graph(i32) #2

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_stmt_vertex_info(i8* %elt) #0 !dbg !6332 {
entry:
  %elt.addr = alloca i8*, align 8
  %rvi = alloca %struct.rdg_vertex_info*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store i8* %elt, i8** %elt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %elt.addr, metadata !6333, metadata !DIExpression()), !dbg !6334
  call void @llvm.dbg.declare(metadata %struct.rdg_vertex_info** %rvi, metadata !6335, metadata !DIExpression()), !dbg !6337
  %0 = load i8*, i8** %elt.addr, align 8, !dbg !6338
  %1 = bitcast i8* %0 to %struct.rdg_vertex_info*, !dbg !6339
  store %struct.rdg_vertex_info* %1, %struct.rdg_vertex_info** %rvi, align 8, !dbg !6337
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6340, metadata !DIExpression()), !dbg !6341
  %2 = load %struct.rdg_vertex_info*, %struct.rdg_vertex_info** %rvi, align 8, !dbg !6342
  %stmt1 = getelementptr inbounds %struct.rdg_vertex_info, %struct.rdg_vertex_info* %2, i32 0, i32 0, !dbg !6343
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6343
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %stmt, align 8, !dbg !6341
  %4 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !6344
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6345
  %6 = bitcast %union.gimple_statement_d* %5 to i8*, !dbg !6345
  %call = call i32 %4(i8* %6), !dbg !6344
  ret i32 %call, !dbg !6346
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @eq_stmt_vertex_info(i8* %e1, i8* %e2) #0 !dbg !6347 {
entry:
  %e1.addr = alloca i8*, align 8
  %e2.addr = alloca i8*, align 8
  %elt1 = alloca %struct.rdg_vertex_info*, align 8
  %elt2 = alloca %struct.rdg_vertex_info*, align 8
  store i8* %e1, i8** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e1.addr, metadata !6348, metadata !DIExpression()), !dbg !6349
  store i8* %e2, i8** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e2.addr, metadata !6350, metadata !DIExpression()), !dbg !6351
  call void @llvm.dbg.declare(metadata %struct.rdg_vertex_info** %elt1, metadata !6352, metadata !DIExpression()), !dbg !6353
  %0 = load i8*, i8** %e1.addr, align 8, !dbg !6354
  %1 = bitcast i8* %0 to %struct.rdg_vertex_info*, !dbg !6355
  store %struct.rdg_vertex_info* %1, %struct.rdg_vertex_info** %elt1, align 8, !dbg !6353
  call void @llvm.dbg.declare(metadata %struct.rdg_vertex_info** %elt2, metadata !6356, metadata !DIExpression()), !dbg !6357
  %2 = load i8*, i8** %e2.addr, align 8, !dbg !6358
  %3 = bitcast i8* %2 to %struct.rdg_vertex_info*, !dbg !6359
  store %struct.rdg_vertex_info* %3, %struct.rdg_vertex_info** %elt2, align 8, !dbg !6357
  %4 = load %struct.rdg_vertex_info*, %struct.rdg_vertex_info** %elt1, align 8, !dbg !6360
  %stmt = getelementptr inbounds %struct.rdg_vertex_info, %struct.rdg_vertex_info* %4, i32 0, i32 0, !dbg !6361
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6361
  %6 = load %struct.rdg_vertex_info*, %struct.rdg_vertex_info** %elt2, align 8, !dbg !6362
  %stmt1 = getelementptr inbounds %struct.rdg_vertex_info, %struct.rdg_vertex_info* %6, i32 0, i32 0, !dbg !6363
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6363
  %cmp = icmp eq %union.gimple_statement_d* %5, %7, !dbg !6364
  %conv = zext i1 %cmp to i32, !dbg !6364
  ret i32 %conv, !dbg !6365
}

; Function Attrs: noinline nounwind uwtable
define internal void @hash_stmt_vertex_del(i8* %e) #0 !dbg !6366 {
entry:
  %e.addr = alloca i8*, align 8
  store i8* %e, i8** %e.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e.addr, metadata !6367, metadata !DIExpression()), !dbg !6368
  %0 = load i8*, i8** %e.addr, align 8, !dbg !6369
  call void @free(i8* %0), !dbg !6370
  ret void, !dbg !6371
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.graph* @build_rdg(%struct.loop* %loop) #0 !dbg !6372 {
entry:
  %retval = alloca %struct.graph*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %nb_data_refs = alloca i32, align 4
  %rdg = alloca %struct.graph*, align 8
  %dependence_relations = alloca %struct.VEC_ddr_p_heap*, align 8
  %datarefs = alloca %struct.VEC_data_reference_p_heap*, align 8
  %stmts = alloca %struct.VEC_gimple_heap*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6375, metadata !DIExpression()), !dbg !6376
  call void @llvm.dbg.declare(metadata i32* %nb_data_refs, metadata !6377, metadata !DIExpression()), !dbg !6378
  store i32 10, i32* %nb_data_refs, align 4, !dbg !6378
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg, metadata !6379, metadata !DIExpression()), !dbg !6380
  store %struct.graph* null, %struct.graph** %rdg, align 8, !dbg !6380
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %dependence_relations, metadata !6381, metadata !DIExpression()), !dbg !6382
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap** %datarefs, metadata !6383, metadata !DIExpression()), !dbg !6384
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %stmts, metadata !6385, metadata !DIExpression()), !dbg !6386
  %0 = load i32, i32* %nb_data_refs, align 4, !dbg !6387
  %call = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %0), !dbg !6387
  store %struct.VEC_gimple_heap* %call, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6386
  %1 = load i32, i32* %nb_data_refs, align 4, !dbg !6388
  %2 = load i32, i32* %nb_data_refs, align 4, !dbg !6388
  %mul = mul nsw i32 %1, %2, !dbg !6388
  %call1 = call %struct.VEC_ddr_p_heap* @VEC_ddr_p_heap_alloc(i32 %mul), !dbg !6388
  store %struct.VEC_ddr_p_heap* %call1, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !6389
  %3 = load i32, i32* %nb_data_refs, align 4, !dbg !6390
  %call2 = call %struct.VEC_data_reference_p_heap* @VEC_data_reference_p_heap_alloc(i32 %3), !dbg !6390
  store %struct.VEC_data_reference_p_heap* %call2, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !6391
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6392
  %call3 = call zeroext i8 @compute_data_dependences_for_loop(%struct.loop* %4, i8 zeroext 0, %struct.VEC_data_reference_p_heap** %datarefs, %struct.VEC_ddr_p_heap** %dependence_relations), !dbg !6393
  %5 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !6394
  %call4 = call zeroext i8 @known_dependences_p(%struct.VEC_ddr_p_heap* %5), !dbg !6396
  %tobool = icmp ne i8 %call4, 0, !dbg !6396
  br i1 %tobool, label %if.end, label %if.then, !dbg !6397

if.then:                                          ; preds = %entry
  %6 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !6398
  call void @free_dependence_relations(%struct.VEC_ddr_p_heap* %6), !dbg !6400
  %7 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !6401
  call void @free_data_refs(%struct.VEC_data_reference_p_heap* %7), !dbg !6402
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %stmts), !dbg !6403
  %8 = load %struct.graph*, %struct.graph** %rdg, align 8, !dbg !6404
  store %struct.graph* %8, %struct.graph** %retval, align 8, !dbg !6405
  br label %return, !dbg !6405

if.end:                                           ; preds = %entry
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6406
  call void @stmts_from_loop(%struct.loop* %9, %struct.VEC_gimple_heap** %stmts), !dbg !6407
  %10 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6408
  %tobool5 = icmp ne %struct.VEC_gimple_heap* %10, null, !dbg !6408
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !6408

cond.true:                                        ; preds = %if.end
  %11 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6408
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %11, i32 0, i32 0, !dbg !6408
  br label %cond.end, !dbg !6408

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6408

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6408
  %call6 = call i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond), !dbg !6408
  %call7 = call %struct.graph* @build_empty_rdg(i32 %call6), !dbg !6409
  store %struct.graph* %call7, %struct.graph** %rdg, align 8, !dbg !6410
  %12 = load i32, i32* %nb_data_refs, align 4, !dbg !6411
  %conv = sext i32 %12 to i64, !dbg !6411
  %call8 = call %struct.htab* @htab_create(i64 %conv, i32 (i8*)* @hash_stmt_vertex_info, i32 (i8*, i8*)* @eq_stmt_vertex_info, void (i8*)* @hash_stmt_vertex_del), !dbg !6412
  %13 = load %struct.graph*, %struct.graph** %rdg, align 8, !dbg !6413
  %indices = getelementptr inbounds %struct.graph, %struct.graph* %13, i32 0, i32 2, !dbg !6414
  store %struct.htab* %call8, %struct.htab** %indices, align 8, !dbg !6415
  %14 = load %struct.graph*, %struct.graph** %rdg, align 8, !dbg !6416
  %15 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6417
  call void @create_rdg_vertices(%struct.graph* %14, %struct.VEC_gimple_heap* %15), !dbg !6418
  %16 = load %struct.graph*, %struct.graph** %rdg, align 8, !dbg !6419
  %17 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !6420
  call void @create_rdg_edges(%struct.graph* %16, %struct.VEC_ddr_p_heap* %17), !dbg !6421
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %stmts), !dbg !6422
  %18 = load %struct.graph*, %struct.graph** %rdg, align 8, !dbg !6423
  store %struct.graph* %18, %struct.graph** %retval, align 8, !dbg !6424
  br label %return, !dbg !6424

return:                                           ; preds = %cond.end, %if.then
  %19 = load %struct.graph*, %struct.graph** %retval, align 8, !dbg !6425
  ret %struct.graph* %19, !dbg !6425
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %alloc_) #0 !dbg !6426 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6429, metadata !DIExpression()), !dbg !6430
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6430
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6430
  %1 = bitcast i8* %call to %struct.VEC_gimple_heap*, !dbg !6430
  ret %struct.VEC_gimple_heap* %1, !dbg !6430
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ddr_p_heap* @VEC_ddr_p_heap_alloc(i32 %alloc_) #0 !dbg !6431 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6434, metadata !DIExpression()), !dbg !6435
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6435
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6435
  %1 = bitcast i8* %call to %struct.VEC_ddr_p_heap*, !dbg !6435
  ret %struct.VEC_ddr_p_heap* %1, !dbg !6435
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_data_reference_p_heap* @VEC_data_reference_p_heap_alloc(i32 %alloc_) #0 !dbg !6436 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6439, metadata !DIExpression()), !dbg !6440
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6440
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6440
  %1 = bitcast i8* %call to %struct.VEC_data_reference_p_heap*, !dbg !6440
  ret %struct.VEC_data_reference_p_heap* %1, !dbg !6440
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @known_dependences_p(%struct.VEC_ddr_p_heap* %dependence_relations) #0 !dbg !6441 {
entry:
  %retval = alloca i8, align 1
  %dependence_relations.addr = alloca %struct.VEC_ddr_p_heap*, align 8
  %ddr = alloca %struct.data_dependence_relation*, align 8
  %i = alloca i32, align 4
  store %struct.VEC_ddr_p_heap* %dependence_relations, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %dependence_relations.addr, metadata !6444, metadata !DIExpression()), !dbg !6445
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr, metadata !6446, metadata !DIExpression()), !dbg !6447
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6448, metadata !DIExpression()), !dbg !6449
  store i32 0, i32* %i, align 4, !dbg !6450
  br label %for.cond, !dbg !6452

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8, !dbg !6453
  %tobool = icmp ne %struct.VEC_ddr_p_heap* %0, null, !dbg !6453
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6453

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations.addr, align 8, !dbg !6453
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %1, i32 0, i32 0, !dbg !6453
  br label %cond.end, !dbg !6453

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6453

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ddr_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6453
  %2 = load i32, i32* %i, align 4, !dbg !6453
  %call = call i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %cond, i32 %2, %struct.data_dependence_relation** %ddr), !dbg !6453
  %tobool1 = icmp ne i32 %call, 0, !dbg !6455
  br i1 %tobool1, label %for.body, label %for.end, !dbg !6455

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6456
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %3, i32 0, i32 2, !dbg !6456
  %4 = load %union.tree_node*, %union.tree_node** %are_dependent, align 8, !dbg !6456
  %5 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !6458
  %cmp = icmp eq %union.tree_node* %4, %5, !dbg !6459
  br i1 %cmp, label %if.then, label %if.end, !dbg !6460

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !6461
  br label %return, !dbg !6461

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6458

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !dbg !6462
  %inc = add i32 %6, 1, !dbg !6462
  store i32 %inc, i32* %i, align 4, !dbg !6462
  br label %for.cond, !dbg !6463, !llvm.loop !6464

for.end:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !6466
  br label %return, !dbg !6466

return:                                           ; preds = %for.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !6467
  ret i8 %7, !dbg !6467
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_) #0 !dbg !6468 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !6472, metadata !DIExpression()), !dbg !6473
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6474
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !6474
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !6474
  br i1 %tobool, label %if.then, label %if.end, !dbg !6473

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6474
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !6474
  %4 = bitcast %struct.VEC_gimple_heap* %3 to i8*, !dbg !6474
  call void @free(i8* %4), !dbg !6474
  br label %if.end, !dbg !6474

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6473
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %5, align 8, !dbg !6473
  ret void, !dbg !6473
}

; Function Attrs: noinline nounwind uwtable
define internal void @stmts_from_loop(%struct.loop* %loop, %struct.VEC_gimple_heap** %stmts) #0 !dbg !6476 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %stmts.addr = alloca %struct.VEC_gimple_heap**, align 8
  %i = alloca i32, align 4
  %bbs = alloca %struct.basic_block_def**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp6 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6479, metadata !DIExpression()), !dbg !6480
  store %struct.VEC_gimple_heap** %stmts, %struct.VEC_gimple_heap*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %stmts.addr, metadata !6481, metadata !DIExpression()), !dbg !6482
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6483, metadata !DIExpression()), !dbg !6484
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !6485, metadata !DIExpression()), !dbg !6486
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6487
  %call = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %0), !dbg !6488
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !6486
  store i32 0, i32* %i, align 4, !dbg !6489
  br label %for.cond, !dbg !6491

for.cond:                                         ; preds = %for.inc18, %entry
  %1 = load i32, i32* %i, align 4, !dbg !6492
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6494
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !6495
  %3 = load i32, i32* %num_nodes, align 4, !dbg !6495
  %cmp = icmp ult i32 %1, %3, !dbg !6496
  br i1 %cmp, label %for.body, label %for.end19, !dbg !6497

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6498, metadata !DIExpression()), !dbg !6500
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !6501
  %5 = load i32, i32* %i, align 4, !dbg !6502
  %idxprom = zext i32 %5 to i64, !dbg !6501
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %4, i64 %idxprom, !dbg !6501
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !6501
  store %struct.basic_block_def* %6, %struct.basic_block_def** %bb, align 8, !dbg !6500
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !6503, metadata !DIExpression()), !dbg !6504
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6505, metadata !DIExpression()), !dbg !6506
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6507
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %7), !dbg !6509
  %8 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !6509
  %9 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6509
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !6509
  br label %for.cond1, !dbg !6510

for.cond1:                                        ; preds = %for.inc, %for.body
  %call2 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6511
  %tobool = icmp ne i8 %call2, 0, !dbg !6513
  %lnot = xor i1 %tobool, true, !dbg !6513
  br i1 %lnot, label %for.body3, label %for.end, !dbg !6514

for.body3:                                        ; preds = %for.cond1
  %10 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %stmts.addr, align 8, !dbg !6515
  %call4 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6515
  %call5 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %10, %union.gimple_statement_d* %call4), !dbg !6515
  br label %for.inc, !dbg !6515

for.inc:                                          ; preds = %for.body3
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !6516
  br label %for.cond1, !dbg !6517, !llvm.loop !6518

for.end:                                          ; preds = %for.cond1
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6520
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp6, %struct.basic_block_def* %11), !dbg !6522
  %12 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !6522
  %13 = bitcast %struct.gimple_stmt_iterator* %tmp6 to i8*, !dbg !6522
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 24, i1 false), !dbg !6522
  br label %for.cond7, !dbg !6523

for.cond7:                                        ; preds = %for.inc16, %for.end
  %call8 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6524
  %tobool9 = icmp ne i8 %call8, 0, !dbg !6526
  %lnot10 = xor i1 %tobool9, true, !dbg !6526
  br i1 %lnot10, label %for.body11, label %for.end17, !dbg !6527

for.body11:                                       ; preds = %for.cond7
  %call12 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6528
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %stmt, align 8, !dbg !6530
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6531
  %call13 = call i32 @gimple_code(%union.gimple_statement_d* %14), !dbg !6533
  %cmp14 = icmp ne i32 %call13, 4, !dbg !6534
  br i1 %cmp14, label %if.then, label %if.end, !dbg !6535

if.then:                                          ; preds = %for.body11
  %15 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %stmts.addr, align 8, !dbg !6536
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6536
  %call15 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %15, %union.gimple_statement_d* %16), !dbg !6536
  br label %if.end, !dbg !6536

if.end:                                           ; preds = %if.then, %for.body11
  br label %for.inc16, !dbg !6537

for.inc16:                                        ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !6538
  br label %for.cond7, !dbg !6539, !llvm.loop !6540

for.end17:                                        ; preds = %for.cond7
  br label %for.inc18, !dbg !6542

for.inc18:                                        ; preds = %for.end17
  %17 = load i32, i32* %i, align 4, !dbg !6543
  %inc = add i32 %17, 1, !dbg !6543
  store i32 %inc, i32* %i, align 4, !dbg !6543
  br label %for.cond, !dbg !6544, !llvm.loop !6545

for.end19:                                        ; preds = %for.cond
  %18 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !6547
  %19 = bitcast %struct.basic_block_def** %18 to i8*, !dbg !6547
  call void @free(i8* %19), !dbg !6548
  ret void, !dbg !6549
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %vec_) #0 !dbg !6550 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !6553, metadata !DIExpression()), !dbg !6554
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6554
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !6554
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6554

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6554
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %1, i32 0, i32 0, !dbg !6554
  %2 = load i32, i32* %num, align 8, !dbg !6554
  br label %cond.end, !dbg !6554

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6554

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6554
  ret i32 %cond, !dbg !6554
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_rdg_edges(%struct.graph* %rdg, %struct.VEC_ddr_p_heap* %ddrs) #0 !dbg !6555 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %ddrs.addr = alloca %struct.VEC_ddr_p_heap*, align 8
  %i = alloca i32, align 4
  %ddr = alloca %struct.data_dependence_relation*, align 8
  %def_p = alloca %union.tree_node**, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !6558, metadata !DIExpression()), !dbg !6559
  store %struct.VEC_ddr_p_heap* %ddrs, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %ddrs.addr, metadata !6560, metadata !DIExpression()), !dbg !6561
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6562, metadata !DIExpression()), !dbg !6563
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr, metadata !6564, metadata !DIExpression()), !dbg !6565
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !6566, metadata !DIExpression()), !dbg !6567
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6568, metadata !DIExpression()), !dbg !6581
  store i32 0, i32* %i, align 4, !dbg !6582
  br label %for.cond, !dbg !6584

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8, !dbg !6585
  %tobool = icmp ne %struct.VEC_ddr_p_heap* %0, null, !dbg !6585
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6585

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs.addr, align 8, !dbg !6585
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %1, i32 0, i32 0, !dbg !6585
  br label %cond.end, !dbg !6585

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6585

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ddr_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6585
  %2 = load i32, i32* %i, align 4, !dbg !6585
  %call = call i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %cond, i32 %2, %struct.data_dependence_relation** %ddr), !dbg !6585
  %tobool1 = icmp ne i32 %call, 0, !dbg !6587
  br i1 %tobool1, label %for.body, label %for.end, !dbg !6587

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6588
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %3, i32 0, i32 2, !dbg !6588
  %4 = load %union.tree_node*, %union.tree_node** %are_dependent, align 8, !dbg !6588
  %cmp = icmp eq %union.tree_node* %4, null, !dbg !6590
  br i1 %cmp, label %if.then, label %if.end, !dbg !6591

if.then:                                          ; preds = %for.body
  %5 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6592
  %6 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !6593
  call void @create_rdg_edge_for_ddr(%struct.graph* %5, %struct.data_dependence_relation* %6), !dbg !6594
  br label %if.end, !dbg !6594

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6595

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !dbg !6596
  %inc = add nsw i32 %7, 1, !dbg !6596
  store i32 %inc, i32* %i, align 4, !dbg !6596
  br label %for.cond, !dbg !6597, !llvm.loop !6598

for.end:                                          ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !6600
  br label %for.cond2, !dbg !6602

for.cond2:                                        ; preds = %for.inc31, %for.end
  %8 = load i32, i32* %i, align 4, !dbg !6603
  %9 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6605
  %n_vertices = getelementptr inbounds %struct.graph, %struct.graph* %9, i32 0, i32 0, !dbg !6606
  %10 = load i32, i32* %n_vertices, align 8, !dbg !6606
  %cmp3 = icmp slt i32 %8, %10, !dbg !6607
  br i1 %cmp3, label %for.body4, label %for.end33, !dbg !6608

for.body4:                                        ; preds = %for.cond2
  %11 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6609
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %11, i32 0, i32 1, !dbg !6609
  %12 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !6609
  %13 = load i32, i32* %i, align 4, !dbg !6609
  %idxprom = sext i32 %13 to i64, !dbg !6609
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %12, i64 %idxprom, !dbg !6609
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 4, !dbg !6609
  %14 = load i8*, i8** %data, align 8, !dbg !6609
  %15 = bitcast i8* %14 to %struct.rdg_vertex*, !dbg !6609
  %stmt = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %15, i32 0, i32 0, !dbg !6609
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6609
  %call5 = call i32 @gimple_code(%union.gimple_statement_d* %16), !dbg !6609
  %cmp6 = icmp eq i32 %call5, 16, !dbg !6609
  br i1 %cmp6, label %cond.true7, label %cond.false14, !dbg !6609

cond.true7:                                       ; preds = %for.body4
  %17 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6609
  %vertices8 = getelementptr inbounds %struct.graph, %struct.graph* %17, i32 0, i32 1, !dbg !6609
  %18 = load %struct.vertex*, %struct.vertex** %vertices8, align 8, !dbg !6609
  %19 = load i32, i32* %i, align 4, !dbg !6609
  %idxprom9 = sext i32 %19 to i64, !dbg !6609
  %arrayidx10 = getelementptr inbounds %struct.vertex, %struct.vertex* %18, i64 %idxprom9, !dbg !6609
  %data11 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx10, i32 0, i32 4, !dbg !6609
  %20 = load i8*, i8** %data11, align 8, !dbg !6609
  %21 = bitcast i8* %20 to %struct.rdg_vertex*, !dbg !6609
  %stmt12 = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %21, i32 0, i32 0, !dbg !6609
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt12, align 8, !dbg !6609
  %call13 = call %union.tree_node** @op_iter_init_phidef(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %22, i32 2), !dbg !6609
  br label %cond.end21, !dbg !6609

cond.false14:                                     ; preds = %for.body4
  %23 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6609
  %vertices15 = getelementptr inbounds %struct.graph, %struct.graph* %23, i32 0, i32 1, !dbg !6609
  %24 = load %struct.vertex*, %struct.vertex** %vertices15, align 8, !dbg !6609
  %25 = load i32, i32* %i, align 4, !dbg !6609
  %idxprom16 = sext i32 %25 to i64, !dbg !6609
  %arrayidx17 = getelementptr inbounds %struct.vertex, %struct.vertex* %24, i64 %idxprom16, !dbg !6609
  %data18 = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx17, i32 0, i32 4, !dbg !6609
  %26 = load i8*, i8** %data18, align 8, !dbg !6609
  %27 = bitcast i8* %26 to %struct.rdg_vertex*, !dbg !6609
  %stmt19 = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %27, i32 0, i32 0, !dbg !6609
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt19, align 8, !dbg !6609
  %call20 = call %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %28, i32 2), !dbg !6609
  br label %cond.end21, !dbg !6609

cond.end21:                                       ; preds = %cond.false14, %cond.true7
  %cond22 = phi %union.tree_node** [ %call13, %cond.true7 ], [ %call20, %cond.false14 ], !dbg !6609
  store %union.tree_node** %cond22, %union.tree_node*** %def_p, align 8, !dbg !6609
  br label %for.cond23, !dbg !6609

for.cond23:                                       ; preds = %for.inc28, %cond.end21
  %call24 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6611
  %tobool25 = icmp ne i8 %call24, 0, !dbg !6611
  %lnot = xor i1 %tobool25, true, !dbg !6611
  br i1 %lnot, label %for.body26, label %for.end30, !dbg !6609

for.body26:                                       ; preds = %for.cond23
  %29 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6613
  %30 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !6614
  %call27 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %30), !dbg !6614
  %31 = load i32, i32* %i, align 4, !dbg !6615
  call void @create_rdg_edges_for_scalar(%struct.graph* %29, %union.tree_node* %call27, i32 %31), !dbg !6616
  br label %for.inc28, !dbg !6616

for.inc28:                                        ; preds = %for.body26
  %call29 = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %iter), !dbg !6611
  store %union.tree_node** %call29, %union.tree_node*** %def_p, align 8, !dbg !6611
  br label %for.cond23, !dbg !6611, !llvm.loop !6617

for.end30:                                        ; preds = %for.cond23
  br label %for.inc31, !dbg !6618

for.inc31:                                        ; preds = %for.end30
  %32 = load i32, i32* %i, align 4, !dbg !6619
  %inc32 = add nsw i32 %32, 1, !dbg !6619
  store i32 %inc32, i32* %i, align 4, !dbg !6619
  br label %for.cond2, !dbg !6620, !llvm.loop !6621

for.end33:                                        ; preds = %for.cond2
  ret void, !dbg !6623
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_rdg(%struct.graph* %rdg) #0 !dbg !6624 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %i = alloca i32, align 4
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !6625, metadata !DIExpression()), !dbg !6626
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6627, metadata !DIExpression()), !dbg !6628
  store i32 0, i32* %i, align 4, !dbg !6629
  br label %for.cond, !dbg !6631

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !6632
  %1 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6634
  %n_vertices = getelementptr inbounds %struct.graph, %struct.graph* %1, i32 0, i32 0, !dbg !6635
  %2 = load i32, i32* %n_vertices, align 8, !dbg !6635
  %cmp = icmp slt i32 %0, %2, !dbg !6636
  br i1 %cmp, label %for.body, label %for.end, !dbg !6637

for.body:                                         ; preds = %for.cond
  %3 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6638
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %3, i32 0, i32 1, !dbg !6639
  %4 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !6639
  %5 = load i32, i32* %i, align 4, !dbg !6640
  %idxprom = sext i32 %5 to i64, !dbg !6638
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %4, i64 %idxprom, !dbg !6638
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 4, !dbg !6641
  %6 = load i8*, i8** %data, align 8, !dbg !6641
  call void @free(i8* %6), !dbg !6642
  br label %for.inc, !dbg !6642

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !6643
  %inc = add nsw i32 %7, 1, !dbg !6643
  store i32 %inc, i32* %i, align 4, !dbg !6643
  br label %for.cond, !dbg !6644, !llvm.loop !6645

for.end:                                          ; preds = %for.cond
  %8 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6647
  %indices = getelementptr inbounds %struct.graph, %struct.graph* %8, i32 0, i32 2, !dbg !6648
  %9 = load %struct.htab*, %struct.htab** %indices, align 8, !dbg !6648
  call void @htab_delete(%struct.htab* %9), !dbg !6649
  %10 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6650
  call void @free_graph(%struct.graph* %10), !dbg !6651
  ret void, !dbg !6652
}

declare dso_local void @htab_delete(%struct.htab*) #2

declare dso_local void @free_graph(%struct.graph*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @stores_from_loop(%struct.loop* %loop, %struct.VEC_gimple_heap** %stmts) #0 !dbg !6653 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %stmts.addr = alloca %struct.VEC_gimple_heap**, align 8
  %i = alloca i32, align 4
  %bbs = alloca %struct.basic_block_def**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6654, metadata !DIExpression()), !dbg !6655
  store %struct.VEC_gimple_heap** %stmts, %struct.VEC_gimple_heap*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %stmts.addr, metadata !6656, metadata !DIExpression()), !dbg !6657
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6658, metadata !DIExpression()), !dbg !6659
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !6660, metadata !DIExpression()), !dbg !6661
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6662
  %call = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %0), !dbg !6663
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !6661
  store i32 0, i32* %i, align 4, !dbg !6664
  br label %for.cond, !dbg !6666

for.cond:                                         ; preds = %for.inc9, %entry
  %1 = load i32, i32* %i, align 4, !dbg !6667
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6669
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !6670
  %3 = load i32, i32* %num_nodes, align 4, !dbg !6670
  %cmp = icmp ult i32 %1, %3, !dbg !6671
  br i1 %cmp, label %for.body, label %for.end10, !dbg !6672

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6673, metadata !DIExpression()), !dbg !6675
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !6676
  %5 = load i32, i32* %i, align 4, !dbg !6677
  %idxprom = zext i32 %5 to i64, !dbg !6676
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %4, i64 %idxprom, !dbg !6676
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !6676
  store %struct.basic_block_def* %6, %struct.basic_block_def** %bb, align 8, !dbg !6675
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !6678, metadata !DIExpression()), !dbg !6679
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6680
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %7), !dbg !6682
  %8 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !6682
  %9 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6682
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !6682
  br label %for.cond1, !dbg !6683

for.cond1:                                        ; preds = %for.inc, %for.body
  %call2 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6684
  %tobool = icmp ne i8 %call2, 0, !dbg !6686
  %lnot = xor i1 %tobool, true, !dbg !6686
  br i1 %lnot, label %for.body3, label %for.end, !dbg !6687

for.body3:                                        ; preds = %for.cond1
  %call4 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6688
  %call5 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %call4), !dbg !6690
  %tobool6 = icmp ne %union.tree_node* %call5, null, !dbg !6690
  br i1 %tobool6, label %if.then, label %if.end, !dbg !6691

if.then:                                          ; preds = %for.body3
  %10 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %stmts.addr, align 8, !dbg !6692
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6692
  %call8 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %10, %union.gimple_statement_d* %call7), !dbg !6692
  br label %if.end, !dbg !6692

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc, !dbg !6693

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !6694
  br label %for.cond1, !dbg !6695, !llvm.loop !6696

for.end:                                          ; preds = %for.cond1
  br label %for.inc9, !dbg !6698

for.inc9:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4, !dbg !6699
  %inc = add i32 %11, 1, !dbg !6699
  store i32 %inc, i32* %i, align 4, !dbg !6699
  br label %for.cond, !dbg !6700, !llvm.loop !6701

for.end10:                                        ; preds = %for.cond
  %12 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !6703
  %13 = bitcast %struct.basic_block_def** %12 to i8*, !dbg !6703
  call void @free(i8* %13), !dbg !6704
  ret void, !dbg !6705
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6706 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6709, metadata !DIExpression()), !dbg !6710
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6711, metadata !DIExpression()), !dbg !6712
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6713, metadata !DIExpression()), !dbg !6714
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6715
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6716
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6717
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6718
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !6719
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6720
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6721
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6722
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6723
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6724
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6725
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6726
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6727
  ret void, !dbg !6728
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6729 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6732, metadata !DIExpression()), !dbg !6733
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6734
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6734
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !6735
  %conv = zext i1 %cmp to i32, !dbg !6735
  %conv1 = trunc i32 %conv to i8, !dbg !6736
  ret i8 %conv1, !dbg !6737
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !6738 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6739, metadata !DIExpression()), !dbg !6740
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6741
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6743
  %tobool = icmp ne i8 %call, 0, !dbg !6743
  br i1 %tobool, label %if.end, label %if.then, !dbg !6744

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6745
  br label %return, !dbg !6745

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6746
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6747
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !6748
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !6748
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6749
  br label %return, !dbg !6749

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6750
  ret %union.tree_node* %3, !dbg !6750
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6751 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6754, metadata !DIExpression()), !dbg !6755
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6756
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6756
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !6757
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6757
  ret %union.gimple_statement_d* %1, !dbg !6758
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !6759 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !6762, metadata !DIExpression()), !dbg !6763
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !6764, metadata !DIExpression()), !dbg !6763
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6763
  %call = call i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %0, i32 1), !dbg !6763
  %1 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6763
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %1, align 8, !dbg !6763
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !6763
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6763

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6763
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %3, align 8, !dbg !6763
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !6763
  br label %cond.end, !dbg !6763

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6763

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6763
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !6763
  %call1 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %5), !dbg !6763
  ret %union.gimple_statement_d** %call1, !dbg !6763
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !6765 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6769, metadata !DIExpression()), !dbg !6770
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6771
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6772
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6772
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !6773
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !6773
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6774
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6775
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6776
  ret void, !dbg !6777
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @rdg_defs_used_in_other_loops_p(%struct.graph* %rdg, i32 %v) #0 !dbg !6778 {
entry:
  %retval = alloca i8, align 1
  %rdg.addr = alloca %struct.graph*, align 8
  %v.addr = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %loop = alloca %struct.loop*, align 8
  %imm_use_p = alloca %struct.ssa_use_operand_d*, align 8
  %iterator = alloca %struct.immediate_use_iterator_d, align 8
  %it = alloca %struct.ssa_operand_iterator_d, align 8
  %def_p = alloca %union.tree_node**, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !6781, metadata !DIExpression()), !dbg !6782
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !6783, metadata !DIExpression()), !dbg !6784
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6785, metadata !DIExpression()), !dbg !6786
  %0 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !6787
  %vertices = getelementptr inbounds %struct.graph, %struct.graph* %0, i32 0, i32 1, !dbg !6787
  %1 = load %struct.vertex*, %struct.vertex** %vertices, align 8, !dbg !6787
  %2 = load i32, i32* %v.addr, align 4, !dbg !6787
  %idxprom = sext i32 %2 to i64, !dbg !6787
  %arrayidx = getelementptr inbounds %struct.vertex, %struct.vertex* %1, i64 %idxprom, !dbg !6787
  %data = getelementptr inbounds %struct.vertex, %struct.vertex* %arrayidx, i32 0, i32 4, !dbg !6787
  %3 = load i8*, i8** %data, align 8, !dbg !6787
  %4 = bitcast i8* %3 to %struct.rdg_vertex*, !dbg !6787
  %stmt1 = getelementptr inbounds %struct.rdg_vertex, %struct.rdg_vertex* %4, i32 0, i32 0, !dbg !6787
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6787
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %stmt, align 8, !dbg !6786
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !6788, metadata !DIExpression()), !dbg !6789
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6790
  %call = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %6), !dbg !6791
  store %struct.loop* %call, %struct.loop** %loop, align 8, !dbg !6789
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %imm_use_p, metadata !6792, metadata !DIExpression()), !dbg !6793
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iterator, metadata !6794, metadata !DIExpression()), !dbg !6802
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %it, metadata !6803, metadata !DIExpression()), !dbg !6804
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !6805, metadata !DIExpression()), !dbg !6806
  %7 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6807
  %tobool = icmp ne %struct.loop* %7, null, !dbg !6807
  br i1 %tobool, label %if.end, label %if.then, !dbg !6809

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !6810
  br label %return, !dbg !6810

if.end:                                           ; preds = %entry
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6811
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %8), !dbg !6811
  %cmp = icmp eq i32 %call2, 16, !dbg !6811
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6811

cond.true:                                        ; preds = %if.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6811
  %call3 = call %union.tree_node** @op_iter_init_phidef(%struct.ssa_operand_iterator_d* %it, %union.gimple_statement_d* %9, i32 2), !dbg !6811
  br label %cond.end, !dbg !6811

cond.false:                                       ; preds = %if.end
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6811
  %call4 = call %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %it, %union.gimple_statement_d* %10, i32 2), !dbg !6811
  br label %cond.end, !dbg !6811

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node** [ %call3, %cond.true ], [ %call4, %cond.false ], !dbg !6811
  store %union.tree_node** %cond, %union.tree_node*** %def_p, align 8, !dbg !6811
  br label %for.cond, !dbg !6811

for.cond:                                         ; preds = %for.inc20, %cond.end
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %it), !dbg !6813
  %tobool6 = icmp ne i8 %call5, 0, !dbg !6813
  %lnot = xor i1 %tobool6, true, !dbg !6813
  br i1 %lnot, label %for.body, label %for.end22, !dbg !6811

for.body:                                         ; preds = %for.cond
  %11 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !6815
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %11), !dbg !6815
  %call8 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %iterator, %union.tree_node* %call7), !dbg !6815
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %imm_use_p, align 8, !dbg !6815
  br label %for.cond9, !dbg !6815

for.cond9:                                        ; preds = %for.inc, %for.body
  %call10 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %iterator), !dbg !6818
  %tobool11 = icmp ne i8 %call10, 0, !dbg !6818
  %lnot12 = xor i1 %tobool11, true, !dbg !6818
  br i1 %lnot12, label %for.body13, label %for.end, !dbg !6815

for.body13:                                       ; preds = %for.cond9
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use_p, align 8, !dbg !6820
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %12, i32 0, i32 2, !dbg !6820
  %stmt14 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6820
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt14, align 8, !dbg !6820
  %call15 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %13), !dbg !6823
  %14 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6824
  %cmp16 = icmp ne %struct.loop* %call15, %14, !dbg !6825
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !6826

if.then17:                                        ; preds = %for.body13
  store i8 1, i8* %retval, align 1, !dbg !6827
  br label %return, !dbg !6827

if.end18:                                         ; preds = %for.body13
  br label %for.inc, !dbg !6828

for.inc:                                          ; preds = %if.end18
  %call19 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %iterator), !dbg !6818
  store %struct.ssa_use_operand_d* %call19, %struct.ssa_use_operand_d** %imm_use_p, align 8, !dbg !6818
  br label %for.cond9, !dbg !6818, !llvm.loop !6829

for.end:                                          ; preds = %for.cond9
  br label %for.inc20, !dbg !6831

for.inc20:                                        ; preds = %for.end
  %call21 = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %it), !dbg !6813
  store %union.tree_node** %call21, %union.tree_node*** %def_p, align 8, !dbg !6813
  br label %for.cond, !dbg !6813, !llvm.loop !6832

for.end22:                                        ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !6834
  br label %return, !dbg !6834

return:                                           ; preds = %for.end22, %if.then17, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !6835
  ret i8 %15, !dbg !6835
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_init_phidef(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !6836 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6840, metadata !DIExpression()), !dbg !6841
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6842, metadata !DIExpression()), !dbg !6843
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6844, metadata !DIExpression()), !dbg !6845
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !6846, metadata !DIExpression()), !dbg !6847
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6848
  %call = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %0), !dbg !6848
  %call1 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call), !dbg !6848
  store %union.tree_node* %call1, %union.tree_node** %phi_def, align 8, !dbg !6847
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !6849, metadata !DIExpression()), !dbg !6850
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6851
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !6852
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6853
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !6854
  store i8 0, i8* %done, align 8, !dbg !6855
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6856
  %and = and i32 %3, 10, !dbg !6856
  %cmp = icmp ne i32 %and, 0, !dbg !6856
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6856

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.139, i64 0, i64 0), i32 947, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !6856
  br label %cond.end, !dbg !6856

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6856

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6856
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !6857
  %call2 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6858
  %conv = zext i8 %call2 to i32, !dbg !6858
  %tobool = icmp ne i32 %conv, 0, !dbg !6858
  %5 = zext i1 %tobool to i64, !dbg !6858
  %cond3 = select i1 %tobool, i32 2, i32 8, !dbg !6858
  store i32 %cond3, i32* %comp, align 4, !dbg !6859
  %6 = load i32, i32* %flags.addr, align 4, !dbg !6860
  %7 = load i32, i32* %comp, align 4, !dbg !6862
  %and4 = and i32 %6, %7, !dbg !6863
  %cmp5 = icmp eq i32 %and4, 0, !dbg !6864
  br i1 %cmp5, label %if.then, label %if.end, !dbg !6865

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6866
  %done7 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !6868
  store i8 1, i8* %done7, align 8, !dbg !6869
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !6870
  br label %return, !dbg !6870

if.end:                                           ; preds = %cond.end
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6871
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 1, !dbg !6872
  store i32 3, i32* %iter_type, align 4, !dbg !6873
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6874
  %call8 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %10), !dbg !6874
  store %union.tree_node** %call8, %union.tree_node*** %retval, align 8, !dbg !6875
  br label %return, !dbg !6875

return:                                           ; preds = %if.end, %if.then
  %11 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !6876
  ret %union.tree_node** %11, !dbg !6876
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6877 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6878, metadata !DIExpression()), !dbg !6879
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6880, metadata !DIExpression()), !dbg !6881
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6882, metadata !DIExpression()), !dbg !6883
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6884
  %and = and i32 %0, 5, !dbg !6884
  %cmp = icmp eq i32 %and, 0, !dbg !6884
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !6884

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6884
  %and1 = and i32 %1, 2, !dbg !6884
  %tobool = icmp ne i32 %and1, 0, !dbg !6884
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6884

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.139, i64 0, i64 0), i32 783, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !6884
  br label %cond.end, !dbg !6884

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6884

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6884
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6885
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6886
  %4 = load i32, i32* %flags.addr, align 4, !dbg !6887
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !6888
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6889
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !6890
  store i32 3, i32* %iter_type, align 4, !dbg !6891
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6892
  %call = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %6), !dbg !6893
  ret %union.tree_node** %call, !dbg !6894
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6895 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6900, metadata !DIExpression()), !dbg !6901
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6902
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !6903
  %1 = load i8, i8* %done, align 8, !dbg !6903
  ret i8 %1, !dbg !6904
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !6905 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6909, metadata !DIExpression()), !dbg !6910
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6911, metadata !DIExpression()), !dbg !6912
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6913
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6913
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6913
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6914
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !6915
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !6916
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6917
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !6918
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !6918
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !6919
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6919
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6920
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !6921
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6922
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6923
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %6), !dbg !6925
  %tobool = icmp ne i8 %call, 0, !dbg !6925
  br i1 %tobool, label %if.then, label %if.end, !dbg !6926

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6927
  br label %return, !dbg !6927

if.end:                                           ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6928
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !6929
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !6929
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6930
  br label %return, !dbg !6930

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6931
  ret %struct.ssa_use_operand_d* %9, !dbg !6931
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !6932 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !6935, metadata !DIExpression()), !dbg !6936
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !6937
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6938
  ret %union.tree_node* %1, !dbg !6939
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6940 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6945, metadata !DIExpression()), !dbg !6946
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6947
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6948
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6948
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6949
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !6950
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !6950
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !6951
  %conv = zext i1 %cmp to i32, !dbg !6951
  %conv1 = trunc i32 %conv to i8, !dbg !6952
  ret i8 %conv1, !dbg !6953
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6954 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %old = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6957, metadata !DIExpression()), !dbg !6958
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %old, metadata !6959, metadata !DIExpression()), !dbg !6960
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6961
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6962
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6962
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %old, align 8, !dbg !6960
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %old, align 8, !dbg !6963
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6964
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6964
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6965
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !6966
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !6967
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6968
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %5), !dbg !6970
  %tobool = icmp ne i8 %call, 0, !dbg !6970
  br i1 %tobool, label %if.then, label %if.end, !dbg !6971

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6972
  br label %return, !dbg !6972

if.end:                                           ; preds = %entry
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6973
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 0, !dbg !6974
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !6974
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6975
  br label %return, !dbg !6975

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6976
  ret %struct.ssa_use_operand_d* %8, !dbg !6976
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6977 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %def_p = alloca %union.tree_node**, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6980, metadata !DIExpression()), !dbg !6981
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !6982, metadata !DIExpression()), !dbg !6983
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6984
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !6986
  %1 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !6986
  %tobool = icmp ne %struct.def_optype_d* %1, null, !dbg !6984
  br i1 %tobool, label %if.then, label %if.end, !dbg !6987

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6988
  %defs1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 2, !dbg !6988
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %defs1, align 8, !dbg !6988
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %3, i32 0, i32 1, !dbg !6988
  %4 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !6988
  store %union.tree_node** %4, %union.tree_node*** %def_p, align 8, !dbg !6990
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6991
  %defs2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 2, !dbg !6992
  %6 = load %struct.def_optype_d*, %struct.def_optype_d** %defs2, align 8, !dbg !6992
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %6, i32 0, i32 0, !dbg !6993
  %7 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !6993
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6994
  %defs3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !6995
  store %struct.def_optype_d* %7, %struct.def_optype_d** %defs3, align 8, !dbg !6996
  %9 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !6997
  store %union.tree_node** %9, %union.tree_node*** %retval, align 8, !dbg !6998
  br label %return, !dbg !6998

if.end:                                           ; preds = %entry
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6999
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 0, !dbg !7000
  store i8 1, i8* %done, align 8, !dbg !7001
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !7002
  br label %return, !dbg !7002

return:                                           ; preds = %if.end, %if.then
  %11 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !7003
  ret %union.tree_node** %11, !dbg !7003
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @have_similar_memory_accesses(%union.gimple_statement_d* %s1, %union.gimple_statement_d* %s2) #0 !dbg !7004 {
entry:
  %s1.addr = alloca %union.gimple_statement_d*, align 8
  %s2.addr = alloca %union.gimple_statement_d*, align 8
  %res = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %refs1 = alloca %struct.VEC_data_ref_loc_heap*, align 8
  %refs2 = alloca %struct.VEC_data_ref_loc_heap*, align 8
  %ref1 = alloca %struct.data_ref_loc_d*, align 8
  %ref2 = alloca %struct.data_ref_loc_d*, align 8
  %base1 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %s1, %union.gimple_statement_d** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s1.addr, metadata !7007, metadata !DIExpression()), !dbg !7008
  store %union.gimple_statement_d* %s2, %union.gimple_statement_d** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s2.addr, metadata !7009, metadata !DIExpression()), !dbg !7010
  call void @llvm.dbg.declare(metadata i8* %res, metadata !7011, metadata !DIExpression()), !dbg !7012
  store i8 0, i8* %res, align 1, !dbg !7012
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7013, metadata !DIExpression()), !dbg !7014
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7015, metadata !DIExpression()), !dbg !7016
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_heap** %refs1, metadata !7017, metadata !DIExpression()), !dbg !7018
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_heap** %refs2, metadata !7019, metadata !DIExpression()), !dbg !7020
  call void @llvm.dbg.declare(metadata %struct.data_ref_loc_d** %ref1, metadata !7021, metadata !DIExpression()), !dbg !7022
  call void @llvm.dbg.declare(metadata %struct.data_ref_loc_d** %ref2, metadata !7023, metadata !DIExpression()), !dbg !7024
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1.addr, align 8, !dbg !7025
  %call = call zeroext i8 @get_references_in_stmt(%union.gimple_statement_d* %0, %struct.VEC_data_ref_loc_heap** %refs1), !dbg !7026
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s2.addr, align 8, !dbg !7027
  %call1 = call zeroext i8 @get_references_in_stmt(%union.gimple_statement_d* %1, %struct.VEC_data_ref_loc_heap** %refs2), !dbg !7028
  store i32 0, i32* %i, align 4, !dbg !7029
  br label %for.cond, !dbg !7031

for.cond:                                         ; preds = %for.inc19, %entry
  %2 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %refs1, align 8, !dbg !7032
  %tobool = icmp ne %struct.VEC_data_ref_loc_heap* %2, null, !dbg !7032
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7032

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %refs1, align 8, !dbg !7032
  %base = getelementptr inbounds %struct.VEC_data_ref_loc_heap, %struct.VEC_data_ref_loc_heap* %3, i32 0, i32 0, !dbg !7032
  br label %cond.end, !dbg !7032

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7032

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_ref_loc_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7032
  %4 = load i32, i32* %i, align 4, !dbg !7032
  %call2 = call i32 @VEC_data_ref_loc_base_iterate(%struct.VEC_data_ref_loc_base* %cond, i32 %4, %struct.data_ref_loc_d** %ref1), !dbg !7032
  %tobool3 = icmp ne i32 %call2, 0, !dbg !7034
  br i1 %tobool3, label %for.body, label %for.end21, !dbg !7034

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %base1, metadata !7035, metadata !DIExpression()), !dbg !7037
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1.addr, align 8, !dbg !7038
  %6 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref1, align 8, !dbg !7039
  %call4 = call %union.tree_node* @ref_base_address(%union.gimple_statement_d* %5, %struct.data_ref_loc_d* %6), !dbg !7040
  store %union.tree_node* %call4, %union.tree_node** %base1, align 8, !dbg !7037
  %7 = load %union.tree_node*, %union.tree_node** %base1, align 8, !dbg !7041
  %tobool5 = icmp ne %union.tree_node* %7, null, !dbg !7041
  br i1 %tobool5, label %if.then, label %if.end18, !dbg !7043

if.then:                                          ; preds = %for.body
  store i32 0, i32* %j, align 4, !dbg !7044
  br label %for.cond6, !dbg !7046

for.cond6:                                        ; preds = %for.inc, %if.then
  %8 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %refs2, align 8, !dbg !7047
  %tobool7 = icmp ne %struct.VEC_data_ref_loc_heap* %8, null, !dbg !7047
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !7047

cond.true8:                                       ; preds = %for.cond6
  %9 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %refs2, align 8, !dbg !7047
  %base9 = getelementptr inbounds %struct.VEC_data_ref_loc_heap, %struct.VEC_data_ref_loc_heap* %9, i32 0, i32 0, !dbg !7047
  br label %cond.end11, !dbg !7047

cond.false10:                                     ; preds = %for.cond6
  br label %cond.end11, !dbg !7047

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_data_ref_loc_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !7047
  %10 = load i32, i32* %j, align 4, !dbg !7047
  %call13 = call i32 @VEC_data_ref_loc_base_iterate(%struct.VEC_data_ref_loc_base* %cond12, i32 %10, %struct.data_ref_loc_d** %ref2), !dbg !7047
  %tobool14 = icmp ne i32 %call13, 0, !dbg !7049
  br i1 %tobool14, label %for.body15, label %for.end, !dbg !7049

for.body15:                                       ; preds = %cond.end11
  %11 = load %union.tree_node*, %union.tree_node** %base1, align 8, !dbg !7050
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s2.addr, align 8, !dbg !7052
  %13 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref2, align 8, !dbg !7053
  %call16 = call %union.tree_node* @ref_base_address(%union.gimple_statement_d* %12, %struct.data_ref_loc_d* %13), !dbg !7054
  %cmp = icmp eq %union.tree_node* %11, %call16, !dbg !7055
  br i1 %cmp, label %if.then17, label %if.end, !dbg !7056

if.then17:                                        ; preds = %for.body15
  store i8 1, i8* %res, align 1, !dbg !7057
  br label %end, !dbg !7059

if.end:                                           ; preds = %for.body15
  br label %for.inc, !dbg !7060

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %j, align 4, !dbg !7061
  %inc = add i32 %14, 1, !dbg !7061
  store i32 %inc, i32* %j, align 4, !dbg !7061
  br label %for.cond6, !dbg !7062, !llvm.loop !7063

for.end:                                          ; preds = %cond.end11
  br label %if.end18, !dbg !7064

if.end18:                                         ; preds = %for.end, %for.body
  br label %for.inc19, !dbg !7065

for.inc19:                                        ; preds = %if.end18
  %15 = load i32, i32* %i, align 4, !dbg !7066
  %inc20 = add i32 %15, 1, !dbg !7066
  store i32 %inc20, i32* %i, align 4, !dbg !7066
  br label %for.cond, !dbg !7067, !llvm.loop !7068

for.end21:                                        ; preds = %cond.end
  br label %end, !dbg !7069

end:                                              ; preds = %for.end21, %if.then17
  call void @llvm.dbg.label(metadata !7070), !dbg !7071
  call void @VEC_data_ref_loc_heap_free(%struct.VEC_data_ref_loc_heap** %refs1), !dbg !7072
  call void @VEC_data_ref_loc_heap_free(%struct.VEC_data_ref_loc_heap** %refs2), !dbg !7073
  %16 = load i8, i8* %res, align 1, !dbg !7074
  ret i8 %16, !dbg !7075
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @ref_base_address(%union.gimple_statement_d* %stmt, %struct.data_ref_loc_d* %ref) #0 !dbg !7076 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %ref.addr = alloca %struct.data_ref_loc_d*, align 8
  %base = alloca %union.tree_node*, align 8
  %base_address = alloca %union.tree_node*, align 8
  %dr = alloca %struct.data_reference*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7079, metadata !DIExpression()), !dbg !7080
  store %struct.data_ref_loc_d* %ref, %struct.data_ref_loc_d** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_ref_loc_d** %ref.addr, metadata !7081, metadata !DIExpression()), !dbg !7082
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !7083, metadata !DIExpression()), !dbg !7084
  store %union.tree_node* null, %union.tree_node** %base, align 8, !dbg !7084
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_address, metadata !7085, metadata !DIExpression()), !dbg !7086
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr, metadata !7087, metadata !DIExpression()), !dbg !7088
  %call = call i8* @xcalloc(i64 1, i64 112), !dbg !7089
  %0 = bitcast i8* %call to %struct.data_reference*, !dbg !7089
  store %struct.data_reference* %0, %struct.data_reference** %dr, align 8, !dbg !7088
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7090
  %2 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !7091
  %stmt1 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %2, i32 0, i32 0, !dbg !7091
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt1, align 8, !dbg !7092
  %3 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref.addr, align 8, !dbg !7093
  %pos = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %3, i32 0, i32 0, !dbg !7094
  %4 = load %union.tree_node**, %union.tree_node*** %pos, align 8, !dbg !7094
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !7095
  %6 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !7096
  %ref2 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %6, i32 0, i32 1, !dbg !7096
  store %union.tree_node* %5, %union.tree_node** %ref2, align 8, !dbg !7097
  %7 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !7098
  %call3 = call zeroext i8 @dr_analyze_innermost(%struct.data_reference* %7), !dbg !7099
  %8 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !7100
  %innermost = getelementptr inbounds %struct.data_reference, %struct.data_reference* %8, i32 0, i32 4, !dbg !7100
  %base_address4 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost, i32 0, i32 0, !dbg !7100
  %9 = load %union.tree_node*, %union.tree_node** %base_address4, align 8, !dbg !7100
  store %union.tree_node* %9, %union.tree_node** %base_address, align 8, !dbg !7101
  %10 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !7102
  %tobool = icmp ne %union.tree_node* %10, null, !dbg !7102
  br i1 %tobool, label %if.end, label %if.then, !dbg !7104

if.then:                                          ; preds = %entry
  br label %end, !dbg !7105

if.end:                                           ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !7106
  %base5 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7106
  %12 = bitcast %struct.tree_base* %base5 to i64*, !dbg !7106
  %bf.load = load i64, i64* %12, align 8, !dbg !7106
  %bf.clear = and i64 %bf.load, 65535, !dbg !7106
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7106
  switch i32 %bf.cast, label %sw.default [
    i32 121, label %sw.bb
  ], !dbg !7107

sw.bb:                                            ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !7108
  %exp = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !7108
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7108
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7108
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7108
  store %union.tree_node* %14, %union.tree_node** %base, align 8, !dbg !7110
  br label %sw.epilog, !dbg !7111

sw.default:                                       ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !7112
  store %union.tree_node* %15, %union.tree_node** %base, align 8, !dbg !7113
  br label %sw.epilog, !dbg !7114

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %end, !dbg !7115

end:                                              ; preds = %sw.epilog, %if.then
  call void @llvm.dbg.label(metadata !7116), !dbg !7117
  %16 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !7118
  call void @free_data_ref(%struct.data_reference* %16), !dbg !7119
  %17 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7120
  ret %union.tree_node* %17, !dbg !7121
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @remove_similar_memory_refs(%struct.VEC_gimple_heap** %stmts) #0 !dbg !7122 {
entry:
  %stmts.addr = alloca %struct.VEC_gimple_heap**, align 8
  %i = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %seen = alloca %struct.htab*, align 8
  %slot = alloca i8**, align 8
  store %struct.VEC_gimple_heap** %stmts, %struct.VEC_gimple_heap*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %stmts.addr, metadata !7123, metadata !DIExpression()), !dbg !7124
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7125, metadata !DIExpression()), !dbg !7126
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7127, metadata !DIExpression()), !dbg !7128
  call void @llvm.dbg.declare(metadata %struct.htab** %seen, metadata !7129, metadata !DIExpression()), !dbg !7130
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %stmts.addr, align 8, !dbg !7131
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !7131
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !7131
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7131

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %stmts.addr, align 8, !dbg !7131
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !7131
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !7131
  br label %cond.end, !dbg !7131

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7131

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7131
  %call = call i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond), !dbg !7131
  %conv = zext i32 %call to i64, !dbg !7131
  %call1 = call %struct.htab* @htab_create(i64 %conv, i32 (i8*)* @ref_base_address_1, i32 (i8*, i8*)* @have_similar_memory_accesses_1, void (i8*)* null), !dbg !7132
  store %struct.htab* %call1, %struct.htab** %seen, align 8, !dbg !7130
  store i32 0, i32* %i, align 4, !dbg !7133
  br label %for.cond, !dbg !7135

for.cond:                                         ; preds = %if.end, %cond.end
  %4 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %stmts.addr, align 8, !dbg !7136
  %5 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %4, align 8, !dbg !7136
  %tobool2 = icmp ne %struct.VEC_gimple_heap* %5, null, !dbg !7136
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !7136

cond.true3:                                       ; preds = %for.cond
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %stmts.addr, align 8, !dbg !7136
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %6, align 8, !dbg !7136
  %base4 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %7, i32 0, i32 0, !dbg !7136
  br label %cond.end6, !dbg !7136

cond.false5:                                      ; preds = %for.cond
  br label %cond.end6, !dbg !7136

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_gimple_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !7136
  %8 = load i32, i32* %i, align 4, !dbg !7136
  %call8 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond7, i32 %8, %union.gimple_statement_d** %stmt), !dbg !7136
  %tobool9 = icmp ne i32 %call8, 0, !dbg !7138
  br i1 %tobool9, label %for.body, label %for.end, !dbg !7138

for.body:                                         ; preds = %cond.end6
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !7139, metadata !DIExpression()), !dbg !7141
  %9 = load %struct.htab*, %struct.htab** %seen, align 8, !dbg !7142
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7143
  %11 = bitcast %union.gimple_statement_d* %10 to i8*, !dbg !7143
  %call10 = call i8** @htab_find_slot(%struct.htab* %9, i8* %11, i32 1), !dbg !7144
  store i8** %call10, i8*** %slot, align 8, !dbg !7145
  %12 = load i8**, i8*** %slot, align 8, !dbg !7146
  %13 = load i8*, i8** %12, align 8, !dbg !7148
  %tobool11 = icmp ne i8* %13, null, !dbg !7148
  br i1 %tobool11, label %if.then, label %if.else, !dbg !7149

if.then:                                          ; preds = %for.body
  %14 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %stmts.addr, align 8, !dbg !7150
  %15 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %14, align 8, !dbg !7150
  %tobool12 = icmp ne %struct.VEC_gimple_heap* %15, null, !dbg !7150
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !7150

cond.true13:                                      ; preds = %if.then
  %16 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %stmts.addr, align 8, !dbg !7150
  %17 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %16, align 8, !dbg !7150
  %base14 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %17, i32 0, i32 0, !dbg !7150
  br label %cond.end16, !dbg !7150

cond.false15:                                     ; preds = %if.then
  br label %cond.end16, !dbg !7150

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_gimple_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !7150
  %18 = load i32, i32* %i, align 4, !dbg !7150
  %call18 = call %union.gimple_statement_d* @VEC_gimple_base_ordered_remove(%struct.VEC_gimple_base* %cond17, i32 %18), !dbg !7150
  br label %if.end, !dbg !7150

if.else:                                          ; preds = %for.body
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7151
  %20 = bitcast %union.gimple_statement_d* %19 to i8*, !dbg !7153
  %21 = load i8**, i8*** %slot, align 8, !dbg !7154
  store i8* %20, i8** %21, align 8, !dbg !7155
  %22 = load i32, i32* %i, align 4, !dbg !7156
  %inc = add i32 %22, 1, !dbg !7156
  store i32 %inc, i32* %i, align 4, !dbg !7156
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end16
  br label %for.cond, !dbg !7157, !llvm.loop !7158

for.end:                                          ; preds = %cond.end6
  %23 = load %struct.htab*, %struct.htab** %seen, align 8, !dbg !7160
  call void @htab_delete(%struct.htab* %23), !dbg !7161
  ret void, !dbg !7162
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ref_base_address_1(i8* %s) #0 !dbg !7163 {
entry:
  %s.addr = alloca i8*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %refs = alloca %struct.VEC_data_ref_loc_heap*, align 8
  %ref = alloca %struct.data_ref_loc_d*, align 8
  %res = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !7164, metadata !DIExpression()), !dbg !7165
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7166, metadata !DIExpression()), !dbg !7167
  %0 = load i8*, i8** %s.addr, align 8, !dbg !7168
  %1 = bitcast i8* %0 to %union.gimple_statement_d*, !dbg !7168
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !7167
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7169, metadata !DIExpression()), !dbg !7170
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_heap** %refs, metadata !7171, metadata !DIExpression()), !dbg !7172
  call void @llvm.dbg.declare(metadata %struct.data_ref_loc_d** %ref, metadata !7173, metadata !DIExpression()), !dbg !7174
  call void @llvm.dbg.declare(metadata i32* %res, metadata !7175, metadata !DIExpression()), !dbg !7176
  store i32 0, i32* %res, align 4, !dbg !7176
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7177
  %call = call zeroext i8 @get_references_in_stmt(%union.gimple_statement_d* %2, %struct.VEC_data_ref_loc_heap** %refs), !dbg !7178
  store i32 0, i32* %i, align 4, !dbg !7179
  br label %for.cond, !dbg !7181

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %refs, align 8, !dbg !7182
  %tobool = icmp ne %struct.VEC_data_ref_loc_heap* %3, null, !dbg !7182
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7182

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %refs, align 8, !dbg !7182
  %base = getelementptr inbounds %struct.VEC_data_ref_loc_heap, %struct.VEC_data_ref_loc_heap* %4, i32 0, i32 0, !dbg !7182
  br label %cond.end, !dbg !7182

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7182

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_ref_loc_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7182
  %5 = load i32, i32* %i, align 4, !dbg !7182
  %call1 = call i32 @VEC_data_ref_loc_base_iterate(%struct.VEC_data_ref_loc_base* %cond, i32 %5, %struct.data_ref_loc_d** %ref), !dbg !7182
  %tobool2 = icmp ne i32 %call1, 0, !dbg !7184
  br i1 %tobool2, label %for.body, label %for.end, !dbg !7184

for.body:                                         ; preds = %cond.end
  %6 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !7185
  %is_read = getelementptr inbounds %struct.data_ref_loc_d, %struct.data_ref_loc_d* %6, i32 0, i32 1, !dbg !7187
  %7 = load i8, i8* %is_read, align 8, !dbg !7187
  %tobool3 = icmp ne i8 %7, 0, !dbg !7185
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7188

if.then:                                          ; preds = %for.body
  %8 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !7189
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7191
  %10 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %ref, align 8, !dbg !7192
  %call4 = call %union.tree_node* @ref_base_address(%union.gimple_statement_d* %9, %struct.data_ref_loc_d* %10), !dbg !7193
  %11 = bitcast %union.tree_node* %call4 to i8*, !dbg !7193
  %call5 = call i32 %8(i8* %11), !dbg !7189
  store i32 %call5, i32* %res, align 4, !dbg !7194
  br label %for.end, !dbg !7195

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !7187

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !7196
  %inc = add i32 %12, 1, !dbg !7196
  store i32 %inc, i32* %i, align 4, !dbg !7196
  br label %for.cond, !dbg !7197, !llvm.loop !7198

for.end:                                          ; preds = %if.then, %cond.end
  call void @VEC_data_ref_loc_heap_free(%struct.VEC_data_ref_loc_heap** %refs), !dbg !7200
  %13 = load i32, i32* %res, align 4, !dbg !7201
  ret i32 %13, !dbg !7202
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @have_similar_memory_accesses_1(i8* %s1, i8* %s2) #0 !dbg !7203 {
entry:
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !7204, metadata !DIExpression()), !dbg !7205
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !7206, metadata !DIExpression()), !dbg !7207
  %0 = load i8*, i8** %s1.addr, align 8, !dbg !7208
  %1 = bitcast i8* %0 to %union.gimple_statement_d*, !dbg !7208
  %2 = load i8*, i8** %s2.addr, align 8, !dbg !7209
  %3 = bitcast i8* %2 to %union.gimple_statement_d*, !dbg !7209
  %call = call zeroext i8 @have_similar_memory_accesses(%union.gimple_statement_d* %1, %union.gimple_statement_d* %3), !dbg !7210
  %conv = zext i8 %call to i32, !dbg !7210
  ret i32 %conv, !dbg !7211
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @VEC_gimple_base_ordered_remove(%struct.VEC_gimple_base* %vec_, i32 %ix_) #0 !dbg !7212 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %ix_.addr = alloca i32, align 4
  %slot_ = alloca %union.gimple_statement_d**, align 8
  %obj_ = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !7216, metadata !DIExpression()), !dbg !7217
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7218, metadata !DIExpression()), !dbg !7217
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !7219, metadata !DIExpression()), !dbg !7217
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_, metadata !7220, metadata !DIExpression()), !dbg !7217
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !7217
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7217
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %1, i32 0, i32 0, !dbg !7217
  %2 = load i32, i32* %num, align 8, !dbg !7217
  %cmp = icmp ult i32 %0, %2, !dbg !7217
  %conv = zext i1 %cmp to i32, !dbg !7217
  %3 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7217
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %3, i32 0, i32 2, !dbg !7217
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !7217
  %idxprom = zext i32 %4 to i64, !dbg !7217
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !7217
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !7217
  %5 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !7217
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %5, align 8, !dbg !7217
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %obj_, align 8, !dbg !7217
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !7217
  %8 = bitcast %union.gimple_statement_d** %7 to i8*, !dbg !7217
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !7217
  %add.ptr = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %9, i64 1, !dbg !7217
  %10 = bitcast %union.gimple_statement_d** %add.ptr to i8*, !dbg !7217
  %11 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7217
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %11, i32 0, i32 0, !dbg !7217
  %12 = load i32, i32* %num1, align 8, !dbg !7217
  %dec = add i32 %12, -1, !dbg !7217
  store i32 %dec, i32* %num1, align 8, !dbg !7217
  %13 = load i32, i32* %ix_.addr, align 4, !dbg !7217
  %sub = sub i32 %dec, %13, !dbg !7217
  %conv2 = zext i32 %sub to i64, !dbg !7217
  %mul = mul i64 %conv2, 8, !dbg !7217
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %10, i64 %mul, i1 false), !dbg !7217
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_, align 8, !dbg !7217
  ret %union.gimple_statement_d* %14, !dbg !7217
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @access_matrix_get_index_for_parameter(%union.tree_node* %parameter, %struct.access_matrix* %access_matrix) #0 !dbg !7221 {
entry:
  %retval = alloca i32, align 4
  %parameter.addr = alloca %union.tree_node*, align 8
  %access_matrix.addr = alloca %struct.access_matrix*, align 8
  %i = alloca i32, align 4
  %lambda_parameters = alloca %struct.VEC_tree_heap*, align 8
  %lambda_parameter = alloca %union.tree_node*, align 8
  store %union.tree_node* %parameter, %union.tree_node** %parameter.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parameter.addr, metadata !7224, metadata !DIExpression()), !dbg !7225
  store %struct.access_matrix* %access_matrix, %struct.access_matrix** %access_matrix.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access_matrix** %access_matrix.addr, metadata !7226, metadata !DIExpression()), !dbg !7227
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7228, metadata !DIExpression()), !dbg !7229
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %lambda_parameters, metadata !7230, metadata !DIExpression()), !dbg !7231
  %0 = load %struct.access_matrix*, %struct.access_matrix** %access_matrix.addr, align 8, !dbg !7232
  %parameters = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %0, i32 0, i32 2, !dbg !7232
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parameters, align 8, !dbg !7232
  store %struct.VEC_tree_heap* %1, %struct.VEC_tree_heap** %lambda_parameters, align 8, !dbg !7231
  call void @llvm.dbg.declare(metadata %union.tree_node** %lambda_parameter, metadata !7233, metadata !DIExpression()), !dbg !7234
  store i32 0, i32* %i, align 4, !dbg !7235
  br label %for.cond, !dbg !7237

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %lambda_parameters, align 8, !dbg !7238
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !7238
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7238

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %lambda_parameters, align 8, !dbg !7238
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !7238
  br label %cond.end, !dbg !7238

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7238

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7238
  %4 = load i32, i32* %i, align 4, !dbg !7238
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %4, %union.tree_node** %lambda_parameter), !dbg !7238
  %tobool1 = icmp ne i32 %call, 0, !dbg !7240
  br i1 %tobool1, label %for.body, label %for.end, !dbg !7240

for.body:                                         ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %lambda_parameter, align 8, !dbg !7241
  %6 = load %union.tree_node*, %union.tree_node** %parameter.addr, align 8, !dbg !7243
  %cmp = icmp eq %union.tree_node* %5, %6, !dbg !7244
  br i1 %cmp, label %if.then, label %if.end, !dbg !7245

if.then:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !7246
  %8 = load %struct.access_matrix*, %struct.access_matrix** %access_matrix.addr, align 8, !dbg !7247
  %nb_induction_vars = getelementptr inbounds %struct.access_matrix, %struct.access_matrix* %8, i32 0, i32 1, !dbg !7247
  %9 = load i32, i32* %nb_induction_vars, align 8, !dbg !7247
  %add = add nsw i32 %7, %9, !dbg !7248
  store i32 %add, i32* %retval, align 4, !dbg !7249
  br label %return, !dbg !7249

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !7243

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !7250
  %inc = add nsw i32 %10, 1, !dbg !7250
  store i32 %inc, i32* %i, align 4, !dbg !7250
  br label %for.cond, !dbg !7251, !llvm.loop !7252

for.end:                                          ; preds = %cond.end
  store i32 -1, i32* %retval, align 4, !dbg !7254
  br label %return, !dbg !7254

return:                                           ; preds = %for.end, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !7255
  ret i32 %11, !dbg !7255
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !7256 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7259, metadata !DIExpression()), !dbg !7260
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7261, metadata !DIExpression()), !dbg !7260
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !7262, metadata !DIExpression()), !dbg !7260
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7263
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !7263
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7263

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7263
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7263
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !7263
  %3 = load i32, i32* %num, align 8, !dbg !7263
  %cmp = icmp ult i32 %1, %3, !dbg !7263
  br i1 %cmp, label %if.then, label %if.else, !dbg !7260

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7265
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !7265
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7265
  %idxprom = zext i32 %5 to i64, !dbg !7265
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7265
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7265
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !7265
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !7265
  store i32 1, i32* %retval, align 4, !dbg !7265
  br label %return, !dbg !7265

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !7267
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !7267
  store i32 0, i32* %retval, align 4, !dbg !7267
  br label %return, !dbg !7267

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7260
  ret i32 %9, !dbg !7260
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_affine_function(%struct._IO_FILE* %outf, %struct.VEC_tree_heap* %fn) #0 !dbg !7269 {
entry:
  %outf.addr = alloca %struct._IO_FILE*, align 8
  %fn.addr = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  %coef = alloca %union.tree_node*, align 8
  store %struct._IO_FILE* %outf, %struct._IO_FILE** %outf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outf.addr, metadata !7272, metadata !DIExpression()), !dbg !7273
  store %struct.VEC_tree_heap* %fn, %struct.VEC_tree_heap** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fn.addr, metadata !7274, metadata !DIExpression()), !dbg !7275
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7276, metadata !DIExpression()), !dbg !7277
  call void @llvm.dbg.declare(metadata %union.tree_node** %coef, metadata !7278, metadata !DIExpression()), !dbg !7279
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !7280
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn.addr, align 8, !dbg !7281
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7281
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7281

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn.addr, align 8, !dbg !7281
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %2, i32 0, i32 0, !dbg !7281
  br label %cond.end, !dbg !7281

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7281

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7281
  %call = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 0), !dbg !7281
  call void @print_generic_expr(%struct._IO_FILE* %0, %union.tree_node* %call, i32 2), !dbg !7282
  store i32 1, i32* %i, align 4, !dbg !7283
  br label %for.cond, !dbg !7285

for.cond:                                         ; preds = %for.inc, %cond.end
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn.addr, align 8, !dbg !7286
  %tobool1 = icmp ne %struct.VEC_tree_heap* %3, null, !dbg !7286
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7286

cond.true2:                                       ; preds = %for.cond
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn.addr, align 8, !dbg !7286
  %base3 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !7286
  br label %cond.end5, !dbg !7286

cond.false4:                                      ; preds = %for.cond
  br label %cond.end5, !dbg !7286

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_tree_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7286
  %5 = load i32, i32* %i, align 4, !dbg !7286
  %call7 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond6, i32 %5, %union.tree_node** %coef), !dbg !7286
  %tobool8 = icmp ne i32 %call7, 0, !dbg !7288
  br i1 %tobool8, label %for.body, label %for.end, !dbg !7288

for.body:                                         ; preds = %cond.end5
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !7289
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.91, i64 0, i64 0)), !dbg !7291
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !7292
  %8 = load %union.tree_node*, %union.tree_node** %coef, align 8, !dbg !7293
  call void @print_generic_expr(%struct._IO_FILE* %7, %union.tree_node* %8, i32 2), !dbg !7294
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !7295
  %10 = load i32, i32* %i, align 4, !dbg !7296
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.92, i64 0, i64 0), i32 %10), !dbg !7297
  br label %for.inc, !dbg !7298

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !7299
  %inc = add i32 %11, 1, !dbg !7299
  store i32 %inc, i32* %i, align 4, !dbg !7299
  br label %for.cond, !dbg !7300, !llvm.loop !7301

for.end:                                          ; preds = %cond.end5
  ret void, !dbg !7303
}

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !7304 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7305, metadata !DIExpression()), !dbg !7306
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7307
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7307
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7307
  %bf.load = load i64, i64* %1, align 8, !dbg !7307
  %bf.clear = and i64 %bf.load, 65535, !dbg !7307
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7307
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !7308

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !7309
  br label %return, !dbg !7309

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7311
  br label %return, !dbg !7311

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !7312
  ret i8 %2, !dbg !7312
}

declare dso_local i64 @int_size_in_bytes(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !7313 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7314, metadata !DIExpression()), !dbg !7315
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7316
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7317
  ret %union.tree_node* %call, !dbg !7318
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !7319 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7322, metadata !DIExpression()), !dbg !7323
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7324, metadata !DIExpression()), !dbg !7325
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7326
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !7327
  store i32 %call, i32* %code, align 4, !dbg !7328
  %1 = load i32, i32* %code, align 4, !dbg !7329
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !7331
  %cmp = icmp eq i32 %call1, 3, !dbg !7332
  br i1 %cmp, label %if.then, label %if.end, !dbg !7333

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7334
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !7334
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !7334
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7334
  %bf.load = load i64, i64* %3, align 8, !dbg !7334
  %bf.clear = and i64 %bf.load, 65535, !dbg !7334
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7334
  store i32 %bf.cast, i32* %code, align 4, !dbg !7335
  br label %if.end, !dbg !7336

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !7337
  ret i32 %4, !dbg !7338
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !7339 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7340, metadata !DIExpression()), !dbg !7341
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7342
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7344
  %cmp = icmp uge i32 %call, 3, !dbg !7345
  br i1 %cmp, label %if.then, label %if.else, !dbg !7346

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7347
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !7348
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !7349
  br label %return, !dbg !7349

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7350
  br label %return, !dbg !7350

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7351
  ret %union.tree_node* %2, !dbg !7351
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !7352 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7355, metadata !DIExpression()), !dbg !7356
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7357, metadata !DIExpression()), !dbg !7358
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7359
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7361
  %tobool = icmp ne i8 %call, 0, !dbg !7361
  br i1 %tobool, label %if.then, label %if.else, !dbg !7362

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7363
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !7365
  %2 = load i32, i32* %i.addr, align 4, !dbg !7366
  %idxprom = zext i32 %2 to i64, !dbg !7365
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !7365
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7365
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !7367
  br label %return, !dbg !7367

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7368
  br label %return, !dbg !7368

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7369
  ret %union.tree_node* %4, !dbg !7369
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !7370 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7371, metadata !DIExpression()), !dbg !7372
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7373
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7374
  %cmp = icmp uge i32 %call, 1, !dbg !7375
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7376

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7377
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !7378
  %cmp2 = icmp ule i32 %call1, 9, !dbg !7379
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !7380
  %land.ext = zext i1 %2 to i32, !dbg !7376
  %conv = trunc i32 %land.ext to i8, !dbg !7374
  ret i8 %conv, !dbg !7381
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !7382 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7385, metadata !DIExpression()), !dbg !7386
  call void @llvm.dbg.declare(metadata i64* %off, metadata !7387, metadata !DIExpression()), !dbg !7388
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7389
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !7390
  %idxprom = zext i32 %call to i64, !dbg !7391
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !7391
  %1 = load i64, i64* %arrayidx, align 8, !dbg !7391
  store i64 %1, i64* %off, align 8, !dbg !7392
  %2 = load i64, i64* %off, align 8, !dbg !7393
  %cmp = icmp ne i64 %2, 0, !dbg !7393
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7393

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.94, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !7393
  br label %cond.end, !dbg !7393

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7393

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7393
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7394
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !7395
  %5 = load i64, i64* %off, align 8, !dbg !7396
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !7397
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !7398
  ret %union.tree_node** %6, !dbg !7399
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !7400 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7403, metadata !DIExpression()), !dbg !7404
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7405
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7406
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !7407
  ret i32 %call1, !dbg !7408
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !7409 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7412, metadata !DIExpression()), !dbg !7413
  %0 = load i32, i32* %code.addr, align 4, !dbg !7414
  %idxprom = zext i32 %0 to i64, !dbg !7415
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !7415
  %1 = load i32, i32* %arrayidx, align 4, !dbg !7415
  ret i32 %1, !dbg !7416
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !7417 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7418, metadata !DIExpression()), !dbg !7419
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7420, metadata !DIExpression()), !dbg !7421
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7422
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7423
  store i32 %call, i32* %code, align 4, !dbg !7421
  %1 = load i32, i32* %code, align 4, !dbg !7424
  %cmp = icmp eq i32 %1, 6, !dbg !7426
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7427

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !7428
  %cmp1 = icmp eq i32 %2, 1, !dbg !7429
  br i1 %cmp1, label %if.then, label %if.else, !dbg !7430

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7431
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !7432
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7433
  %bf.load = load i32, i32* %4, align 8, !dbg !7433
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7433
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !7434
  br label %return, !dbg !7434

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !7435
  %cmp2 = icmp eq i32 %5, 8, !dbg !7437
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !7438

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !7439
  br label %return, !dbg !7439

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.94, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !7440
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7441
  br label %return, !dbg !7441

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !7442
  ret i32 %6, !dbg !7442
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !7443 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7446, metadata !DIExpression()), !dbg !7447
  %0 = load i32, i32* %code.addr, align 4, !dbg !7448
  %idxprom = sext i32 %0 to i64, !dbg !7449
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !7449
  %1 = load i8, i8* %arrayidx, align 1, !dbg !7449
  %conv = zext i8 %1 to i32, !dbg !7450
  ret i32 %conv, !dbg !7451
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !7452 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7453, metadata !DIExpression()), !dbg !7454
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7455
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7456
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !7457
  %1 = load i32, i32* %num_ops, align 4, !dbg !7457
  ret i32 %1, !dbg !7458
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !7459 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7462, metadata !DIExpression()), !dbg !7463
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7464
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7465
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !7466
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7466
  ret %struct.basic_block_def* %1, !dbg !7467
}

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @block_before_loop(%struct.loop* %loop) #0 !dbg !7468 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %preheader = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7472, metadata !DIExpression()), !dbg !7473
  call void @llvm.dbg.declare(metadata %struct.edge_def** %preheader, metadata !7474, metadata !DIExpression()), !dbg !7475
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7476
  %call = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %0), !dbg !7477
  store %struct.edge_def* %call, %struct.edge_def** %preheader, align 8, !dbg !7475
  %1 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !7478
  %tobool = icmp ne %struct.edge_def* %1, null, !dbg !7478
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7478

cond.true:                                        ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !7479
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !7480
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7480
  br label %cond.end, !dbg !7478

cond.false:                                       ; preds = %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7481
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !7481
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7481
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7481
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !7481
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !7481
  br label %cond.end, !dbg !7478

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %3, %cond.true ], [ %6, %cond.false ], !dbg !7478
  ret %struct.basic_block_def* %cond, !dbg !7482
}

declare dso_local %union.tree_node* @analyze_scalar_evolution(%struct.loop*, %union.tree_node*) #2

declare dso_local %union.tree_node* @instantiate_scev(%struct.basic_block_def*, %struct.loop*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !7483 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7486, metadata !DIExpression()), !dbg !7487
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !7488, metadata !DIExpression()), !dbg !7487
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7487
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !7487
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7487
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !7487
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !7487
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7487

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7487
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !7487
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !7487
  br label %cond.end, !dbg !7487

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7487

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7487
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !7487
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !7487
  ret %union.tree_node** %call1, !dbg !7487
}

declare dso_local %union.tree_node* @initial_condition(%union.tree_node*) #2

declare dso_local %union.tree_node* @chrec_replace_initial_condition(%union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !7489 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7492, metadata !DIExpression()), !dbg !7493
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7494, metadata !DIExpression()), !dbg !7493
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7495, metadata !DIExpression()), !dbg !7493
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7493
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !7493
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7493
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7493

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7493
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !7493
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !7493
  br label %cond.end, !dbg !7493

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7493

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7493
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7493
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !7493
  %tobool1 = icmp ne i32 %call, 0, !dbg !7493
  %lnot = xor i1 %tobool1, true, !dbg !7493
  %lnot.ext = zext i1 %lnot to i32, !dbg !7493
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7493
  %5 = load i32, i32* %extend, align 4, !dbg !7496
  %tobool2 = icmp ne i32 %5, 0, !dbg !7496
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7493

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7496
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !7496
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !7496
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7496
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !7496
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !7496
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7496
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !7496
  br label %if.end, !dbg !7496

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7493
  ret i32 %12, !dbg !7493
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !7498 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7502, metadata !DIExpression()), !dbg !7503
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !7504, metadata !DIExpression()), !dbg !7503
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !7505, metadata !DIExpression()), !dbg !7503
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7503
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !7503
  %1 = load i32, i32* %num, align 8, !dbg !7503
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7503
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !7503
  %3 = load i32, i32* %alloc, align 4, !dbg !7503
  %cmp = icmp ult i32 %1, %3, !dbg !7503
  %conv = zext i1 %cmp to i32, !dbg !7503
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7503
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !7503
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7503
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !7503
  %6 = load i32, i32* %num1, align 8, !dbg !7503
  %inc = add i32 %6, 1, !dbg !7503
  store i32 %inc, i32* %num1, align 8, !dbg !7503
  %idxprom = zext i32 %6 to i64, !dbg !7503
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7503
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !7503
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !7503
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !7503
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !7503
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !7503
  ret %union.tree_node** %9, !dbg !7503
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !7506 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7509, metadata !DIExpression()), !dbg !7510
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7511, metadata !DIExpression()), !dbg !7510
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7510
  %cmp = icmp sge i32 %0, 0, !dbg !7510
  %conv = zext i1 %cmp to i32, !dbg !7510
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7510
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !7510
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7510

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7510
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !7510
  %3 = load i32, i32* %alloc, align 4, !dbg !7510
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7510
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !7510
  %5 = load i32, i32* %num, align 8, !dbg !7510
  %sub = sub i32 %3, %5, !dbg !7510
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7510
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7510
  %conv2 = zext i1 %cmp1 to i32, !dbg !7510
  br label %cond.end, !dbg !7510

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7510
  %tobool3 = icmp ne i32 %7, 0, !dbg !7510
  %lnot = xor i1 %tobool3, true, !dbg !7510
  %lnot.ext = zext i1 %lnot to i32, !dbg !7510
  br label %cond.end, !dbg !7510

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7510
  ret i32 %cond, !dbg !7510
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %vec_) #0 !dbg !7512 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7515, metadata !DIExpression()), !dbg !7516
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_, metadata !7517, metadata !DIExpression()), !dbg !7516
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7516
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !7516
  %1 = load i32, i32* %num, align 8, !dbg !7516
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7516
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 2, !dbg !7516
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7516
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 0, !dbg !7516
  %4 = load i32, i32* %num1, align 8, !dbg !7516
  %dec = add i32 %4, -1, !dbg !7516
  store i32 %dec, i32* %num1, align 8, !dbg !7516
  %idxprom = zext i32 %dec to i64, !dbg !7516
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7516
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7516
  store %union.tree_node* %5, %union.tree_node** %obj_, align 8, !dbg !7516
  %6 = load %union.tree_node*, %union.tree_node** %obj_, align 8, !dbg !7516
  ret %union.tree_node* %6, !dbg !7516
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_subscript_p_heap* @VEC_subscript_p_heap_alloc(i32 %alloc_) #0 !dbg !7518 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7521, metadata !DIExpression()), !dbg !7522
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7522
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !7522
  %1 = bitcast i8* %call to %struct.VEC_subscript_p_heap*, !dbg !7522
  ret %struct.VEC_subscript_p_heap* %1, !dbg !7522
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @object_address_invariant_in_loop_p(%struct.loop* %loop, %union.tree_node* %obj) #0 !dbg !7523 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %obj.addr = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7528, metadata !DIExpression()), !dbg !7529
  store %union.tree_node* %obj, %union.tree_node** %obj.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj.addr, metadata !7530, metadata !DIExpression()), !dbg !7531
  br label %while.cond, !dbg !7532

while.cond:                                       ; preds = %if.end27, %entry
  %0 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !7533
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !7534
  %tobool = icmp ne i8 %call, 0, !dbg !7532
  br i1 %tobool, label %while.body, label %while.end, !dbg !7532

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !7535
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7535
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7535
  %bf.load = load i64, i64* %2, align 8, !dbg !7535
  %bf.clear = and i64 %bf.load, 65535, !dbg !7535
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7535
  %cmp = icmp eq i32 %bf.cast, 45, !dbg !7538
  br i1 %cmp, label %if.then, label %if.else, !dbg !7539

if.then:                                          ; preds = %while.body
  %3 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !7540
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !7540
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7540
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !7540
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7540
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7543
  %num = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 0, !dbg !7544
  %6 = load i32, i32* %num, align 8, !dbg !7544
  %call1 = call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %4, i32 %6), !dbg !7545
  %conv = zext i8 %call1 to i32, !dbg !7545
  %tobool2 = icmp ne i32 %conv, 0, !dbg !7545
  br i1 %tobool2, label %if.then10, label %lor.lhs.false, !dbg !7546

lor.lhs.false:                                    ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !7547
  %exp3 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !7547
  %operands4 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3, i32 0, i32 3, !dbg !7547
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4, i64 0, i64 3, !dbg !7547
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !7547
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7548
  %num6 = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 0, !dbg !7549
  %10 = load i32, i32* %num6, align 8, !dbg !7549
  %call7 = call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %8, i32 %10), !dbg !7550
  %conv8 = zext i8 %call7 to i32, !dbg !7550
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !7550
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !7551

if.then10:                                        ; preds = %lor.lhs.false, %if.then
  store i8 0, i8* %retval, align 1, !dbg !7552
  br label %return, !dbg !7552

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end27, !dbg !7553

if.else:                                          ; preds = %while.body
  %11 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !7554
  %base11 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7554
  %12 = bitcast %struct.tree_base* %base11 to i64*, !dbg !7554
  %bf.load12 = load i64, i64* %12, align 8, !dbg !7554
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !7554
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !7554
  %cmp15 = icmp eq i32 %bf.cast14, 41, !dbg !7556
  br i1 %cmp15, label %if.then17, label %if.end26, !dbg !7557

if.then17:                                        ; preds = %if.else
  %13 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !7558
  %exp18 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !7558
  %operands19 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp18, i32 0, i32 3, !dbg !7558
  %arrayidx20 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands19, i64 0, i64 2, !dbg !7558
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx20, align 8, !dbg !7558
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7561
  %num21 = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 0, !dbg !7562
  %16 = load i32, i32* %num21, align 8, !dbg !7562
  %call22 = call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %14, i32 %16), !dbg !7563
  %tobool23 = icmp ne i8 %call22, 0, !dbg !7563
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !7564

if.then24:                                        ; preds = %if.then17
  store i8 0, i8* %retval, align 1, !dbg !7565
  br label %return, !dbg !7565

if.end25:                                         ; preds = %if.then17
  br label %if.end26, !dbg !7566

if.end26:                                         ; preds = %if.end25, %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end
  %17 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !7567
  %exp28 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !7567
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 3, !dbg !7567
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i64 0, i64 0, !dbg !7567
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8, !dbg !7567
  store %union.tree_node* %18, %union.tree_node** %obj.addr, align 8, !dbg !7568
  br label %while.cond, !dbg !7532, !llvm.loop !7569

while.end:                                        ; preds = %while.cond
  %19 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !7571
  %base31 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !7571
  %20 = bitcast %struct.tree_base* %base31 to i64*, !dbg !7571
  %bf.load32 = load i64, i64* %20, align 8, !dbg !7571
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !7571
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !7571
  %cmp35 = icmp eq i32 %bf.cast34, 47, !dbg !7571
  br i1 %cmp35, label %if.end52, label %lor.lhs.false37, !dbg !7571

lor.lhs.false37:                                  ; preds = %while.end
  %21 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !7571
  %base38 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !7571
  %22 = bitcast %struct.tree_base* %base38 to i64*, !dbg !7571
  %bf.load39 = load i64, i64* %22, align 8, !dbg !7571
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !7571
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !7571
  %cmp42 = icmp eq i32 %bf.cast41, 48, !dbg !7571
  br i1 %cmp42, label %if.end52, label %lor.lhs.false44, !dbg !7571

lor.lhs.false44:                                  ; preds = %lor.lhs.false37
  %23 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !7571
  %base45 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !7571
  %24 = bitcast %struct.tree_base* %base45 to i64*, !dbg !7571
  %bf.load46 = load i64, i64* %24, align 8, !dbg !7571
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !7571
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !7571
  %cmp49 = icmp eq i32 %bf.cast48, 49, !dbg !7571
  br i1 %cmp49, label %if.end52, label %if.then51, !dbg !7573

if.then51:                                        ; preds = %lor.lhs.false44
  store i8 1, i8* %retval, align 1, !dbg !7574
  br label %return, !dbg !7574

if.end52:                                         ; preds = %lor.lhs.false44, %lor.lhs.false37, %while.end
  %25 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !7575
  %exp53 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !7575
  %operands54 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp53, i32 0, i32 3, !dbg !7575
  %arrayidx55 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands54, i64 0, i64 0, !dbg !7575
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx55, align 8, !dbg !7575
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7576
  %num56 = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 0, !dbg !7577
  %28 = load i32, i32* %num56, align 8, !dbg !7577
  %call57 = call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %26, i32 %28), !dbg !7578
  %tobool58 = icmp ne i8 %call57, 0, !dbg !7579
  %lnot = xor i1 %tobool58, true, !dbg !7579
  %lnot.ext = zext i1 %lnot to i32, !dbg !7579
  %conv59 = trunc i32 %lnot.ext to i8, !dbg !7579
  store i8 %conv59, i8* %retval, align 1, !dbg !7580
  br label %return, !dbg !7580

return:                                           ; preds = %if.end52, %if.then51, %if.then24, %if.then10
  %29 = load i8, i8* %retval, align 1, !dbg !7581
  ret i8 %29, !dbg !7581
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.conflict_function* @conflict_fn_not_known() #0 !dbg !7582 {
entry:
  %fn = alloca %struct.conflict_function*, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %fn, metadata !7585, metadata !DIExpression()), !dbg !7586
  %call = call i8* @xcalloc(i64 1, i64 24), !dbg !7587
  %0 = bitcast i8* %call to %struct.conflict_function*, !dbg !7587
  store %struct.conflict_function* %0, %struct.conflict_function** %fn, align 8, !dbg !7586
  %1 = load %struct.conflict_function*, %struct.conflict_function** %fn, align 8, !dbg !7588
  %n = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %1, i32 0, i32 0, !dbg !7589
  store i32 3, i32* %n, align 8, !dbg !7590
  %2 = load %struct.conflict_function*, %struct.conflict_function** %fn, align 8, !dbg !7591
  ret %struct.conflict_function* %2, !dbg !7592
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.subscript** @VEC_subscript_p_heap_safe_push(%struct.VEC_subscript_p_heap** %vec_, %struct.subscript* %obj_) #0 !dbg !7593 {
entry:
  %vec_.addr = alloca %struct.VEC_subscript_p_heap**, align 8
  %obj_.addr = alloca %struct.subscript*, align 8
  store %struct.VEC_subscript_p_heap** %vec_, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_subscript_p_heap*** %vec_.addr, metadata !7598, metadata !DIExpression()), !dbg !7599
  store %struct.subscript* %obj_, %struct.subscript** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.subscript** %obj_.addr, metadata !7600, metadata !DIExpression()), !dbg !7599
  %0 = load %struct.VEC_subscript_p_heap**, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8, !dbg !7599
  %call = call i32 @VEC_subscript_p_heap_reserve(%struct.VEC_subscript_p_heap** %0, i32 1), !dbg !7599
  %1 = load %struct.VEC_subscript_p_heap**, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8, !dbg !7599
  %2 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %1, align 8, !dbg !7599
  %tobool = icmp ne %struct.VEC_subscript_p_heap* %2, null, !dbg !7599
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7599

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_subscript_p_heap**, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8, !dbg !7599
  %4 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %3, align 8, !dbg !7599
  %base = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %4, i32 0, i32 0, !dbg !7599
  br label %cond.end, !dbg !7599

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7599

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_subscript_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7599
  %5 = load %struct.subscript*, %struct.subscript** %obj_.addr, align 8, !dbg !7599
  %call1 = call %struct.subscript** @VEC_subscript_p_base_quick_push(%struct.VEC_subscript_p_base* %cond, %struct.subscript* %5), !dbg !7599
  ret %struct.subscript** %call1, !dbg !7599
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

declare dso_local zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_subscript_p_heap_reserve(%struct.VEC_subscript_p_heap** %vec_, i32 %alloc_) #0 !dbg !7601 {
entry:
  %vec_.addr = alloca %struct.VEC_subscript_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_subscript_p_heap** %vec_, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_subscript_p_heap*** %vec_.addr, metadata !7604, metadata !DIExpression()), !dbg !7605
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7606, metadata !DIExpression()), !dbg !7605
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7607, metadata !DIExpression()), !dbg !7605
  %0 = load %struct.VEC_subscript_p_heap**, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8, !dbg !7605
  %1 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %0, align 8, !dbg !7605
  %tobool = icmp ne %struct.VEC_subscript_p_heap* %1, null, !dbg !7605
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7605

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_subscript_p_heap**, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8, !dbg !7605
  %3 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %2, align 8, !dbg !7605
  %base = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %3, i32 0, i32 0, !dbg !7605
  br label %cond.end, !dbg !7605

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7605

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_subscript_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7605
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7605
  %call = call i32 @VEC_subscript_p_base_space(%struct.VEC_subscript_p_base* %cond, i32 %4), !dbg !7605
  %tobool1 = icmp ne i32 %call, 0, !dbg !7605
  %lnot = xor i1 %tobool1, true, !dbg !7605
  %lnot.ext = zext i1 %lnot to i32, !dbg !7605
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7605
  %5 = load i32, i32* %extend, align 4, !dbg !7608
  %tobool2 = icmp ne i32 %5, 0, !dbg !7608
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7605

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_subscript_p_heap**, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8, !dbg !7608
  %7 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %6, align 8, !dbg !7608
  %8 = bitcast %struct.VEC_subscript_p_heap* %7 to i8*, !dbg !7608
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7608
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !7608
  %10 = bitcast i8* %call3 to %struct.VEC_subscript_p_heap*, !dbg !7608
  %11 = load %struct.VEC_subscript_p_heap**, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8, !dbg !7608
  store %struct.VEC_subscript_p_heap* %10, %struct.VEC_subscript_p_heap** %11, align 8, !dbg !7608
  br label %if.end, !dbg !7608

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7605
  ret i32 %12, !dbg !7605
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.subscript** @VEC_subscript_p_base_quick_push(%struct.VEC_subscript_p_base* %vec_, %struct.subscript* %obj_) #0 !dbg !7610 {
entry:
  %vec_.addr = alloca %struct.VEC_subscript_p_base*, align 8
  %obj_.addr = alloca %struct.subscript*, align 8
  %slot_ = alloca %struct.subscript**, align 8
  store %struct.VEC_subscript_p_base* %vec_, %struct.VEC_subscript_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_subscript_p_base** %vec_.addr, metadata !7614, metadata !DIExpression()), !dbg !7615
  store %struct.subscript* %obj_, %struct.subscript** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.subscript** %obj_.addr, metadata !7616, metadata !DIExpression()), !dbg !7615
  call void @llvm.dbg.declare(metadata %struct.subscript*** %slot_, metadata !7617, metadata !DIExpression()), !dbg !7615
  %0 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !7615
  %num = getelementptr inbounds %struct.VEC_subscript_p_base, %struct.VEC_subscript_p_base* %0, i32 0, i32 0, !dbg !7615
  %1 = load i32, i32* %num, align 8, !dbg !7615
  %2 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !7615
  %alloc = getelementptr inbounds %struct.VEC_subscript_p_base, %struct.VEC_subscript_p_base* %2, i32 0, i32 1, !dbg !7615
  %3 = load i32, i32* %alloc, align 4, !dbg !7615
  %cmp = icmp ult i32 %1, %3, !dbg !7615
  %conv = zext i1 %cmp to i32, !dbg !7615
  %4 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !7615
  %vec = getelementptr inbounds %struct.VEC_subscript_p_base, %struct.VEC_subscript_p_base* %4, i32 0, i32 2, !dbg !7615
  %5 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !7615
  %num1 = getelementptr inbounds %struct.VEC_subscript_p_base, %struct.VEC_subscript_p_base* %5, i32 0, i32 0, !dbg !7615
  %6 = load i32, i32* %num1, align 8, !dbg !7615
  %inc = add i32 %6, 1, !dbg !7615
  store i32 %inc, i32* %num1, align 8, !dbg !7615
  %idxprom = zext i32 %6 to i64, !dbg !7615
  %arrayidx = getelementptr inbounds [1 x %struct.subscript*], [1 x %struct.subscript*]* %vec, i64 0, i64 %idxprom, !dbg !7615
  store %struct.subscript** %arrayidx, %struct.subscript*** %slot_, align 8, !dbg !7615
  %7 = load %struct.subscript*, %struct.subscript** %obj_.addr, align 8, !dbg !7615
  %8 = load %struct.subscript**, %struct.subscript*** %slot_, align 8, !dbg !7615
  store %struct.subscript* %7, %struct.subscript** %8, align 8, !dbg !7615
  %9 = load %struct.subscript**, %struct.subscript*** %slot_, align 8, !dbg !7615
  ret %struct.subscript** %9, !dbg !7615
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_subscript_p_base_space(%struct.VEC_subscript_p_base* %vec_, i32 %alloc_) #0 !dbg !7618 {
entry:
  %vec_.addr = alloca %struct.VEC_subscript_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_subscript_p_base* %vec_, %struct.VEC_subscript_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_subscript_p_base** %vec_.addr, metadata !7621, metadata !DIExpression()), !dbg !7622
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7623, metadata !DIExpression()), !dbg !7622
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7622
  %cmp = icmp sge i32 %0, 0, !dbg !7622
  %conv = zext i1 %cmp to i32, !dbg !7622
  %1 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !7622
  %tobool = icmp ne %struct.VEC_subscript_p_base* %1, null, !dbg !7622
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7622

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !7622
  %alloc = getelementptr inbounds %struct.VEC_subscript_p_base, %struct.VEC_subscript_p_base* %2, i32 0, i32 1, !dbg !7622
  %3 = load i32, i32* %alloc, align 4, !dbg !7622
  %4 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !7622
  %num = getelementptr inbounds %struct.VEC_subscript_p_base, %struct.VEC_subscript_p_base* %4, i32 0, i32 0, !dbg !7622
  %5 = load i32, i32* %num, align 8, !dbg !7622
  %sub = sub i32 %3, %5, !dbg !7622
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7622
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7622
  %conv2 = zext i1 %cmp1 to i32, !dbg !7622
  br label %cond.end, !dbg !7622

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7622
  %tobool3 = icmp ne i32 %7, 0, !dbg !7622
  %lnot = xor i1 %tobool3, true, !dbg !7622
  %lnot.ext = zext i1 %lnot to i32, !dbg !7622
  br label %cond.end, !dbg !7622

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7622
  ret i32 %cond, !dbg !7622
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ddr_p_heap_reserve(%struct.VEC_ddr_p_heap** %vec_, i32 %alloc_) #0 !dbg !7624 {
entry:
  %vec_.addr = alloca %struct.VEC_ddr_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ddr_p_heap** %vec_, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap*** %vec_.addr, metadata !7627, metadata !DIExpression()), !dbg !7628
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7629, metadata !DIExpression()), !dbg !7628
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7630, metadata !DIExpression()), !dbg !7628
  %0 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8, !dbg !7628
  %1 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %0, align 8, !dbg !7628
  %tobool = icmp ne %struct.VEC_ddr_p_heap* %1, null, !dbg !7628
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7628

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8, !dbg !7628
  %3 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %2, align 8, !dbg !7628
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %3, i32 0, i32 0, !dbg !7628
  br label %cond.end, !dbg !7628

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7628

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ddr_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7628
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7628
  %call = call i32 @VEC_ddr_p_base_space(%struct.VEC_ddr_p_base* %cond, i32 %4), !dbg !7628
  %tobool1 = icmp ne i32 %call, 0, !dbg !7628
  %lnot = xor i1 %tobool1, true, !dbg !7628
  %lnot.ext = zext i1 %lnot to i32, !dbg !7628
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7628
  %5 = load i32, i32* %extend, align 4, !dbg !7631
  %tobool2 = icmp ne i32 %5, 0, !dbg !7631
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7628

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8, !dbg !7631
  %7 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %6, align 8, !dbg !7631
  %8 = bitcast %struct.VEC_ddr_p_heap* %7 to i8*, !dbg !7631
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7631
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !7631
  %10 = bitcast i8* %call3 to %struct.VEC_ddr_p_heap*, !dbg !7631
  %11 = load %struct.VEC_ddr_p_heap**, %struct.VEC_ddr_p_heap*** %vec_.addr, align 8, !dbg !7631
  store %struct.VEC_ddr_p_heap* %10, %struct.VEC_ddr_p_heap** %11, align 8, !dbg !7631
  br label %if.end, !dbg !7631

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7628
  ret i32 %12, !dbg !7628
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.data_dependence_relation** @VEC_ddr_p_base_quick_push(%struct.VEC_ddr_p_base* %vec_, %struct.data_dependence_relation* %obj_) #0 !dbg !7633 {
entry:
  %vec_.addr = alloca %struct.VEC_ddr_p_base*, align 8
  %obj_.addr = alloca %struct.data_dependence_relation*, align 8
  %slot_ = alloca %struct.data_dependence_relation**, align 8
  store %struct.VEC_ddr_p_base* %vec_, %struct.VEC_ddr_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_base** %vec_.addr, metadata !7637, metadata !DIExpression()), !dbg !7638
  store %struct.data_dependence_relation* %obj_, %struct.data_dependence_relation** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %obj_.addr, metadata !7639, metadata !DIExpression()), !dbg !7638
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation*** %slot_, metadata !7640, metadata !DIExpression()), !dbg !7638
  %0 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !7638
  %num = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %0, i32 0, i32 0, !dbg !7638
  %1 = load i32, i32* %num, align 8, !dbg !7638
  %2 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !7638
  %alloc = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %2, i32 0, i32 1, !dbg !7638
  %3 = load i32, i32* %alloc, align 4, !dbg !7638
  %cmp = icmp ult i32 %1, %3, !dbg !7638
  %conv = zext i1 %cmp to i32, !dbg !7638
  %4 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !7638
  %vec = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %4, i32 0, i32 2, !dbg !7638
  %5 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !7638
  %num1 = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %5, i32 0, i32 0, !dbg !7638
  %6 = load i32, i32* %num1, align 8, !dbg !7638
  %inc = add i32 %6, 1, !dbg !7638
  store i32 %inc, i32* %num1, align 8, !dbg !7638
  %idxprom = zext i32 %6 to i64, !dbg !7638
  %arrayidx = getelementptr inbounds [1 x %struct.data_dependence_relation*], [1 x %struct.data_dependence_relation*]* %vec, i64 0, i64 %idxprom, !dbg !7638
  store %struct.data_dependence_relation** %arrayidx, %struct.data_dependence_relation*** %slot_, align 8, !dbg !7638
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %obj_.addr, align 8, !dbg !7638
  %8 = load %struct.data_dependence_relation**, %struct.data_dependence_relation*** %slot_, align 8, !dbg !7638
  store %struct.data_dependence_relation* %7, %struct.data_dependence_relation** %8, align 8, !dbg !7638
  %9 = load %struct.data_dependence_relation**, %struct.data_dependence_relation*** %slot_, align 8, !dbg !7638
  ret %struct.data_dependence_relation** %9, !dbg !7638
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ddr_p_base_space(%struct.VEC_ddr_p_base* %vec_, i32 %alloc_) #0 !dbg !7641 {
entry:
  %vec_.addr = alloca %struct.VEC_ddr_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ddr_p_base* %vec_, %struct.VEC_ddr_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_base** %vec_.addr, metadata !7644, metadata !DIExpression()), !dbg !7645
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7646, metadata !DIExpression()), !dbg !7645
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7645
  %cmp = icmp sge i32 %0, 0, !dbg !7645
  %conv = zext i1 %cmp to i32, !dbg !7645
  %1 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !7645
  %tobool = icmp ne %struct.VEC_ddr_p_base* %1, null, !dbg !7645
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7645

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !7645
  %alloc = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %2, i32 0, i32 1, !dbg !7645
  %3 = load i32, i32* %alloc, align 4, !dbg !7645
  %4 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !7645
  %num = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %4, i32 0, i32 0, !dbg !7645
  %5 = load i32, i32* %num, align 8, !dbg !7645
  %sub = sub i32 %3, %5, !dbg !7645
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7645
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7645
  %conv2 = zext i1 %cmp1 to i32, !dbg !7645
  br label %cond.end, !dbg !7645

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7645
  %tobool3 = icmp ne i32 %7, 0, !dbg !7645
  %lnot = xor i1 %tobool3, true, !dbg !7645
  %lnot.ext = zext i1 %lnot to i32, !dbg !7645
  br label %cond.end, !dbg !7645

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7645
  ret i32 %cond, !dbg !7645
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @access_functions_are_affine_or_constant_p(%struct.data_reference* %a, %struct.loop* %loop_nest) #0 !dbg !7647 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca %struct.data_reference*, align 8
  %loop_nest.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %fns = alloca %struct.VEC_tree_heap*, align 8
  %t = alloca %union.tree_node*, align 8
  store %struct.data_reference* %a, %struct.data_reference** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %a.addr, metadata !7650, metadata !DIExpression()), !dbg !7651
  store %struct.loop* %loop_nest, %struct.loop** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop_nest.addr, metadata !7652, metadata !DIExpression()), !dbg !7653
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7654, metadata !DIExpression()), !dbg !7655
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fns, metadata !7656, metadata !DIExpression()), !dbg !7657
  %0 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !7658
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %0, i32 0, i32 5, !dbg !7658
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !7658
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !7658
  store %struct.VEC_tree_heap* %1, %struct.VEC_tree_heap** %fns, align 8, !dbg !7657
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7659, metadata !DIExpression()), !dbg !7660
  store i32 0, i32* %i, align 4, !dbg !7661
  br label %for.cond, !dbg !7663

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fns, align 8, !dbg !7664
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !7664
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7664

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fns, align 8, !dbg !7664
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !7664
  br label %cond.end, !dbg !7664

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7664

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7664
  %4 = load i32, i32* %i, align 4, !dbg !7664
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %4, %union.tree_node** %t), !dbg !7664
  %tobool1 = icmp ne i32 %call, 0, !dbg !7666
  br i1 %tobool1, label %for.body, label %for.end, !dbg !7666

for.body:                                         ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7667
  %6 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !7669
  %num = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 0, !dbg !7670
  %7 = load i32, i32* %num, align 8, !dbg !7670
  %call2 = call zeroext i8 @evolution_function_is_invariant_p(%union.tree_node* %5, i32 %7), !dbg !7671
  %tobool3 = icmp ne i8 %call2, 0, !dbg !7671
  br i1 %tobool3, label %if.end, label %land.lhs.true, !dbg !7672

land.lhs.true:                                    ; preds = %for.body
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7673
  %9 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !7674
  %num4 = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 0, !dbg !7675
  %10 = load i32, i32* %num4, align 8, !dbg !7675
  %call5 = call zeroext i8 @evolution_function_is_affine_multivariate_p(%union.tree_node* %8, i32 %10), !dbg !7676
  %tobool6 = icmp ne i8 %call5, 0, !dbg !7676
  br i1 %tobool6, label %if.end, label %if.then, !dbg !7677

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !7678
  br label %return, !dbg !7678

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !7679

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !7680
  %inc = add i32 %11, 1, !dbg !7680
  store i32 %inc, i32* %i, align 4, !dbg !7680
  br label %for.cond, !dbg !7681, !llvm.loop !7682

for.end:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !7684
  br label %return, !dbg !7684

return:                                           ; preds = %for.end, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !7685
  ret i8 %12, !dbg !7685
}

; Function Attrs: noinline nounwind uwtable
define internal void @subscript_dependence_tester(%struct.data_dependence_relation* %ddr, %struct.loop* %loop_nest) #0 !dbg !7686 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %loop_nest.addr = alloca %struct.loop*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !7687, metadata !DIExpression()), !dbg !7688
  store %struct.loop* %loop_nest, %struct.loop** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop_nest.addr, metadata !7689, metadata !DIExpression()), !dbg !7690
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7691
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !7691
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7693

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !7694
  %and = and i32 %1, 8, !dbg !7695
  %tobool1 = icmp ne i32 %and, 0, !dbg !7695
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7696

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7697
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.103, i64 0, i64 0)), !dbg !7698
  br label %if.end, !dbg !7698

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7699
  %4 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7701
  %a = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %4, i32 0, i32 0, !dbg !7701
  %5 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !7701
  %6 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7702
  %b = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %6, i32 0, i32 1, !dbg !7702
  %7 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !7702
  %8 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !7703
  %call2 = call zeroext i8 @subscript_dependence_tester_1(%struct.data_dependence_relation* %3, %struct.data_reference* %5, %struct.data_reference* %7, %struct.loop* %8), !dbg !7704
  %tobool3 = icmp ne i8 %call2, 0, !dbg !7704
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !7705

if.then4:                                         ; preds = %if.end
  %9 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 1), align 4, !dbg !7706
  %inc = add nsw i32 %9, 1, !dbg !7706
  store i32 %inc, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 1), align 4, !dbg !7706
  br label %if.end5, !dbg !7707

if.end5:                                          ; preds = %if.then4, %if.end
  %10 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7708
  call void @compute_subscript_distance(%struct.data_dependence_relation* %10), !dbg !7709
  %11 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7710
  %12 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !7712
  %call6 = call zeroext i8 @build_classic_dist_vector(%struct.data_dependence_relation* %11, %struct.loop* %12), !dbg !7713
  %tobool7 = icmp ne i8 %call6, 0, !dbg !7713
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !7714

if.then8:                                         ; preds = %if.end5
  %13 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7715
  call void @build_classic_dir_vector(%struct.data_dependence_relation* %13), !dbg !7716
  br label %if.end9, !dbg !7716

if.end9:                                          ; preds = %if.then8, %if.end5
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7717
  %tobool10 = icmp ne %struct._IO_FILE* %14, null, !dbg !7717
  br i1 %tobool10, label %land.lhs.true11, label %if.end16, !dbg !7719

land.lhs.true11:                                  ; preds = %if.end9
  %15 = load i32, i32* @dump_flags, align 4, !dbg !7720
  %and12 = and i32 %15, 8, !dbg !7721
  %tobool13 = icmp ne i32 %and12, 0, !dbg !7721
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !7722

if.then14:                                        ; preds = %land.lhs.true11
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7723
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !7724
  br label %if.end16, !dbg !7724

if.end16:                                         ; preds = %if.then14, %land.lhs.true11, %if.end9
  ret void, !dbg !7725
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @init_omega_for_ddr(%struct.data_dependence_relation* %ddr, i8* %maybe_dependent) #0 !dbg !7726 {
entry:
  %retval = alloca i8, align 1
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %maybe_dependent.addr = alloca i8*, align 8
  %pb = alloca %struct.omega_pb_d*, align 8
  %res = alloca i8, align 1
  %j = alloca i32, align 4
  %dir_v = alloca i32*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !7730, metadata !DIExpression()), !dbg !7731
  store i8* %maybe_dependent, i8** %maybe_dependent.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %maybe_dependent.addr, metadata !7732, metadata !DIExpression()), !dbg !7733
  call void @llvm.dbg.declare(metadata %struct.omega_pb_d** %pb, metadata !7734, metadata !DIExpression()), !dbg !7760
  call void @llvm.dbg.declare(metadata i8* %res, metadata !7761, metadata !DIExpression()), !dbg !7762
  store i8 0, i8* %res, align 1, !dbg !7762
  %0 = load i8*, i8** %maybe_dependent.addr, align 8, !dbg !7763
  store i8 1, i8* %0, align 1, !dbg !7764
  %1 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7765
  %call = call zeroext i8 @same_access_functions(%struct.data_dependence_relation* %1), !dbg !7767
  %tobool = icmp ne i8 %call, 0, !dbg !7767
  br i1 %tobool, label %if.then, label %if.end, !dbg !7768

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7769, metadata !DIExpression()), !dbg !7771
  call void @llvm.dbg.declare(metadata i32** %dir_v, metadata !7772, metadata !DIExpression()), !dbg !7773
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7774
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7775
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %3, i32 0, i32 4, !dbg !7775
  %4 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !7775
  %tobool1 = icmp ne %struct.VEC_loop_p_heap* %4, null, !dbg !7775
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7775

cond.true:                                        ; preds = %if.then
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7775
  %loop_nest2 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 4, !dbg !7775
  %6 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest2, align 8, !dbg !7775
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %6, i32 0, i32 0, !dbg !7775
  br label %cond.end, !dbg !7775

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !7775

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7775
  %call3 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !7775
  %call4 = call i32* @lambda_vector_new(i32 %call3), !dbg !7776
  call void @save_dist_v(%struct.data_dependence_relation* %2, i32* %call4), !dbg !7777
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7778
  %loop_nest5 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 4, !dbg !7778
  %8 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest5, align 8, !dbg !7778
  %tobool6 = icmp ne %struct.VEC_loop_p_heap* %8, null, !dbg !7778
  br i1 %tobool6, label %cond.true7, label %cond.false10, !dbg !7778

cond.true7:                                       ; preds = %cond.end
  %9 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7778
  %loop_nest8 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %9, i32 0, i32 4, !dbg !7778
  %10 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest8, align 8, !dbg !7778
  %base9 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %10, i32 0, i32 0, !dbg !7778
  br label %cond.end11, !dbg !7778

cond.false10:                                     ; preds = %cond.end
  br label %cond.end11, !dbg !7778

cond.end11:                                       ; preds = %cond.false10, %cond.true7
  %cond12 = phi %struct.VEC_loop_p_base* [ %base9, %cond.true7 ], [ null, %cond.false10 ], !dbg !7778
  %call13 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond12), !dbg !7778
  %call14 = call i32* @lambda_vector_new(i32 %call13), !dbg !7779
  store i32* %call14, i32** %dir_v, align 8, !dbg !7780
  store i32 0, i32* %j, align 4, !dbg !7781
  br label %for.cond, !dbg !7783

for.cond:                                         ; preds = %for.inc, %cond.end11
  %11 = load i32, i32* %j, align 4, !dbg !7784
  %12 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7786
  %loop_nest15 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %12, i32 0, i32 4, !dbg !7786
  %13 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest15, align 8, !dbg !7786
  %tobool16 = icmp ne %struct.VEC_loop_p_heap* %13, null, !dbg !7786
  br i1 %tobool16, label %cond.true17, label %cond.false20, !dbg !7786

cond.true17:                                      ; preds = %for.cond
  %14 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7786
  %loop_nest18 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %14, i32 0, i32 4, !dbg !7786
  %15 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest18, align 8, !dbg !7786
  %base19 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %15, i32 0, i32 0, !dbg !7786
  br label %cond.end21, !dbg !7786

cond.false20:                                     ; preds = %for.cond
  br label %cond.end21, !dbg !7786

cond.end21:                                       ; preds = %cond.false20, %cond.true17
  %cond22 = phi %struct.VEC_loop_p_base* [ %base19, %cond.true17 ], [ null, %cond.false20 ], !dbg !7786
  %call23 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond22), !dbg !7786
  %cmp = icmp ult i32 %11, %call23, !dbg !7787
  br i1 %cmp, label %for.body, label %for.end, !dbg !7788

for.body:                                         ; preds = %cond.end21
  %16 = load i32*, i32** %dir_v, align 8, !dbg !7789
  %17 = load i32, i32* %j, align 4, !dbg !7790
  %idxprom = zext i32 %17 to i64, !dbg !7789
  %arrayidx = getelementptr inbounds i32, i32* %16, i64 %idxprom, !dbg !7789
  store i32 2, i32* %arrayidx, align 4, !dbg !7791
  br label %for.inc, !dbg !7789

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %j, align 4, !dbg !7792
  %inc = add i32 %18, 1, !dbg !7792
  store i32 %inc, i32* %j, align 4, !dbg !7792
  br label %for.cond, !dbg !7793, !llvm.loop !7794

for.end:                                          ; preds = %cond.end21
  %19 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7796
  %20 = load i32*, i32** %dir_v, align 8, !dbg !7797
  call void @save_dir_v(%struct.data_dependence_relation* %19, i32* %20), !dbg !7798
  %21 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7799
  %loop_nest24 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %21, i32 0, i32 4, !dbg !7799
  %22 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest24, align 8, !dbg !7799
  %tobool25 = icmp ne %struct.VEC_loop_p_heap* %22, null, !dbg !7799
  br i1 %tobool25, label %cond.true26, label %cond.false29, !dbg !7799

cond.true26:                                      ; preds = %for.end
  %23 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7799
  %loop_nest27 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %23, i32 0, i32 4, !dbg !7799
  %24 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest27, align 8, !dbg !7799
  %base28 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %24, i32 0, i32 0, !dbg !7799
  br label %cond.end30, !dbg !7799

cond.false29:                                     ; preds = %for.end
  br label %cond.end30, !dbg !7799

cond.end30:                                       ; preds = %cond.false29, %cond.true26
  %cond31 = phi %struct.VEC_loop_p_base* [ %base28, %cond.true26 ], [ null, %cond.false29 ], !dbg !7799
  %call32 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond31), !dbg !7799
  %mul = mul i32 2, %call32, !dbg !7800
  %25 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7801
  %loop_nest33 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %25, i32 0, i32 4, !dbg !7801
  %26 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest33, align 8, !dbg !7801
  %tobool34 = icmp ne %struct.VEC_loop_p_heap* %26, null, !dbg !7801
  br i1 %tobool34, label %cond.true35, label %cond.false38, !dbg !7801

cond.true35:                                      ; preds = %cond.end30
  %27 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7801
  %loop_nest36 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %27, i32 0, i32 4, !dbg !7801
  %28 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest36, align 8, !dbg !7801
  %base37 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %28, i32 0, i32 0, !dbg !7801
  br label %cond.end39, !dbg !7801

cond.false38:                                     ; preds = %cond.end30
  br label %cond.end39, !dbg !7801

cond.end39:                                       ; preds = %cond.false38, %cond.true35
  %cond40 = phi %struct.VEC_loop_p_base* [ %base37, %cond.true35 ], [ null, %cond.false38 ], !dbg !7801
  %call41 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond40), !dbg !7801
  %call42 = call %struct.omega_pb_d* @omega_alloc_problem(i32 %mul, i32 %call41), !dbg !7802
  store %struct.omega_pb_d* %call42, %struct.omega_pb_d** %pb, align 8, !dbg !7803
  %29 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7804
  %a = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %29, i32 0, i32 0, !dbg !7804
  %30 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !7804
  %31 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7805
  %b = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %31, i32 0, i32 1, !dbg !7805
  %32 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !7805
  %33 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7806
  %34 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb, align 8, !dbg !7807
  %35 = load i8*, i8** %maybe_dependent.addr, align 8, !dbg !7808
  %call43 = call zeroext i8 @init_omega_for_ddr_1(%struct.data_reference* %30, %struct.data_reference* %32, %struct.data_dependence_relation* %33, %struct.omega_pb_d* %34, i8* %35), !dbg !7809
  store i8 %call43, i8* %res, align 1, !dbg !7810
  %36 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb, align 8, !dbg !7811
  call void @omega_free_problem(%struct.omega_pb_d* %36), !dbg !7812
  %37 = load i8, i8* %res, align 1, !dbg !7813
  store i8 %37, i8* %retval, align 1, !dbg !7814
  br label %return, !dbg !7814

if.end:                                           ; preds = %entry
  %38 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7815
  %loop_nest44 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %38, i32 0, i32 4, !dbg !7815
  %39 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest44, align 8, !dbg !7815
  %tobool45 = icmp ne %struct.VEC_loop_p_heap* %39, null, !dbg !7815
  br i1 %tobool45, label %cond.true46, label %cond.false49, !dbg !7815

cond.true46:                                      ; preds = %if.end
  %40 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7815
  %loop_nest47 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %40, i32 0, i32 4, !dbg !7815
  %41 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest47, align 8, !dbg !7815
  %base48 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %41, i32 0, i32 0, !dbg !7815
  br label %cond.end50, !dbg !7815

cond.false49:                                     ; preds = %if.end
  br label %cond.end50, !dbg !7815

cond.end50:                                       ; preds = %cond.false49, %cond.true46
  %cond51 = phi %struct.VEC_loop_p_base* [ %base48, %cond.true46 ], [ null, %cond.false49 ], !dbg !7815
  %call52 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond51), !dbg !7815
  %mul53 = mul i32 2, %call52, !dbg !7816
  %42 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7817
  %loop_nest54 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %42, i32 0, i32 4, !dbg !7817
  %43 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest54, align 8, !dbg !7817
  %tobool55 = icmp ne %struct.VEC_loop_p_heap* %43, null, !dbg !7817
  br i1 %tobool55, label %cond.true56, label %cond.false59, !dbg !7817

cond.true56:                                      ; preds = %cond.end50
  %44 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7817
  %loop_nest57 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %44, i32 0, i32 4, !dbg !7817
  %45 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest57, align 8, !dbg !7817
  %base58 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %45, i32 0, i32 0, !dbg !7817
  br label %cond.end60, !dbg !7817

cond.false59:                                     ; preds = %cond.end50
  br label %cond.end60, !dbg !7817

cond.end60:                                       ; preds = %cond.false59, %cond.true56
  %cond61 = phi %struct.VEC_loop_p_base* [ %base58, %cond.true56 ], [ null, %cond.false59 ], !dbg !7817
  %call62 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond61), !dbg !7817
  %call63 = call %struct.omega_pb_d* @omega_alloc_problem(i32 %mul53, i32 %call62), !dbg !7818
  store %struct.omega_pb_d* %call63, %struct.omega_pb_d** %pb, align 8, !dbg !7819
  %46 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7820
  %a64 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %46, i32 0, i32 0, !dbg !7820
  %47 = load %struct.data_reference*, %struct.data_reference** %a64, align 8, !dbg !7820
  %48 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7821
  %b65 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %48, i32 0, i32 1, !dbg !7821
  %49 = load %struct.data_reference*, %struct.data_reference** %b65, align 8, !dbg !7821
  %50 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7822
  %51 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb, align 8, !dbg !7823
  %52 = load i8*, i8** %maybe_dependent.addr, align 8, !dbg !7824
  %call66 = call zeroext i8 @init_omega_for_ddr_1(%struct.data_reference* %47, %struct.data_reference* %49, %struct.data_dependence_relation* %50, %struct.omega_pb_d* %51, i8* %52), !dbg !7825
  store i8 %call66, i8* %res, align 1, !dbg !7826
  %53 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb, align 8, !dbg !7827
  call void @omega_free_problem(%struct.omega_pb_d* %53), !dbg !7828
  %54 = load i8, i8* %res, align 1, !dbg !7829
  %conv = zext i8 %54 to i32, !dbg !7829
  %cmp67 = icmp eq i32 %conv, 0, !dbg !7831
  br i1 %cmp67, label %if.then72, label %lor.lhs.false, !dbg !7832

lor.lhs.false:                                    ; preds = %cond.end60
  %55 = load i8*, i8** %maybe_dependent.addr, align 8, !dbg !7833
  %56 = load i8, i8* %55, align 1, !dbg !7834
  %conv69 = zext i8 %56 to i32, !dbg !7834
  %cmp70 = icmp eq i32 %conv69, 0, !dbg !7835
  br i1 %cmp70, label %if.then72, label %if.end73, !dbg !7836

if.then72:                                        ; preds = %lor.lhs.false, %cond.end60
  %57 = load i8, i8* %res, align 1, !dbg !7837
  store i8 %57, i8* %retval, align 1, !dbg !7838
  br label %return, !dbg !7838

if.end73:                                         ; preds = %lor.lhs.false
  %58 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7839
  %loop_nest74 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %58, i32 0, i32 4, !dbg !7839
  %59 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest74, align 8, !dbg !7839
  %tobool75 = icmp ne %struct.VEC_loop_p_heap* %59, null, !dbg !7839
  br i1 %tobool75, label %cond.true76, label %cond.false79, !dbg !7839

cond.true76:                                      ; preds = %if.end73
  %60 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7839
  %loop_nest77 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %60, i32 0, i32 4, !dbg !7839
  %61 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest77, align 8, !dbg !7839
  %base78 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %61, i32 0, i32 0, !dbg !7839
  br label %cond.end80, !dbg !7839

cond.false79:                                     ; preds = %if.end73
  br label %cond.end80, !dbg !7839

cond.end80:                                       ; preds = %cond.false79, %cond.true76
  %cond81 = phi %struct.VEC_loop_p_base* [ %base78, %cond.true76 ], [ null, %cond.false79 ], !dbg !7839
  %call82 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond81), !dbg !7839
  %mul83 = mul i32 2, %call82, !dbg !7840
  %62 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7841
  %loop_nest84 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %62, i32 0, i32 4, !dbg !7841
  %63 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest84, align 8, !dbg !7841
  %tobool85 = icmp ne %struct.VEC_loop_p_heap* %63, null, !dbg !7841
  br i1 %tobool85, label %cond.true86, label %cond.false89, !dbg !7841

cond.true86:                                      ; preds = %cond.end80
  %64 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7841
  %loop_nest87 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %64, i32 0, i32 4, !dbg !7841
  %65 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest87, align 8, !dbg !7841
  %base88 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %65, i32 0, i32 0, !dbg !7841
  br label %cond.end90, !dbg !7841

cond.false89:                                     ; preds = %cond.end80
  br label %cond.end90, !dbg !7841

cond.end90:                                       ; preds = %cond.false89, %cond.true86
  %cond91 = phi %struct.VEC_loop_p_base* [ %base88, %cond.true86 ], [ null, %cond.false89 ], !dbg !7841
  %call92 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond91), !dbg !7841
  %call93 = call %struct.omega_pb_d* @omega_alloc_problem(i32 %mul83, i32 %call92), !dbg !7842
  store %struct.omega_pb_d* %call93, %struct.omega_pb_d** %pb, align 8, !dbg !7843
  %66 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7844
  %b94 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %66, i32 0, i32 1, !dbg !7844
  %67 = load %struct.data_reference*, %struct.data_reference** %b94, align 8, !dbg !7844
  %68 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7845
  %a95 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %68, i32 0, i32 0, !dbg !7845
  %69 = load %struct.data_reference*, %struct.data_reference** %a95, align 8, !dbg !7845
  %70 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7846
  %71 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb, align 8, !dbg !7847
  %72 = load i8*, i8** %maybe_dependent.addr, align 8, !dbg !7848
  %call96 = call zeroext i8 @init_omega_for_ddr_1(%struct.data_reference* %67, %struct.data_reference* %69, %struct.data_dependence_relation* %70, %struct.omega_pb_d* %71, i8* %72), !dbg !7849
  store i8 %call96, i8* %res, align 1, !dbg !7850
  %73 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb, align 8, !dbg !7851
  call void @omega_free_problem(%struct.omega_pb_d* %73), !dbg !7852
  %74 = load i8, i8* %res, align 1, !dbg !7853
  store i8 %74, i8* %retval, align 1, !dbg !7854
  br label %return, !dbg !7854

return:                                           ; preds = %cond.end90, %if.then72, %cond.end39
  %75 = load i8, i8* %retval, align 1, !dbg !7855
  ret i8 %75, !dbg !7855
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ddr_consistent_p(%struct._IO_FILE* %file, %struct.data_dependence_relation* %ddr, %struct.VEC_lambda_vector_heap* %dist_vects, %struct.VEC_lambda_vector_heap* %dir_vects) #0 !dbg !7856 {
entry:
  %retval = alloca i8, align 1
  %file.addr = alloca %struct._IO_FILE*, align 8
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %dist_vects.addr = alloca %struct.VEC_lambda_vector_heap*, align 8
  %dir_vects.addr = alloca %struct.VEC_lambda_vector_heap*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b_dist_v = alloca i32*, align 8
  %a_dist_v = alloca i32*, align 8
  %b_dist_v132 = alloca i32*, align 8
  %a_dir_v = alloca i32*, align 8
  %b_dir_v = alloca i32*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !7859, metadata !DIExpression()), !dbg !7860
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !7861, metadata !DIExpression()), !dbg !7862
  store %struct.VEC_lambda_vector_heap* %dist_vects, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_heap** %dist_vects.addr, metadata !7863, metadata !DIExpression()), !dbg !7864
  store %struct.VEC_lambda_vector_heap* %dir_vects, %struct.VEC_lambda_vector_heap** %dir_vects.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_heap** %dir_vects.addr, metadata !7865, metadata !DIExpression()), !dbg !7866
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7867, metadata !DIExpression()), !dbg !7868
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7869, metadata !DIExpression()), !dbg !7870
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7871
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !7871
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7873

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !7874
  %and = and i32 %1, 8, !dbg !7875
  %tobool1 = icmp ne i32 %and, 0, !dbg !7875
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7876

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7877
  store %struct._IO_FILE* %2, %struct._IO_FILE** %file.addr, align 8, !dbg !7878
  br label %if.end, !dbg !7879

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %3 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !7880
  %tobool2 = icmp ne %struct.VEC_lambda_vector_heap* %3, null, !dbg !7880
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !7880

cond.true:                                        ; preds = %if.end
  %4 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !7880
  %base = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %4, i32 0, i32 0, !dbg !7880
  br label %cond.end, !dbg !7880

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7880

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lambda_vector_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7880
  %call = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond), !dbg !7880
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7882
  %dist_vects3 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 6, !dbg !7882
  %6 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects3, align 8, !dbg !7882
  %tobool4 = icmp ne %struct.VEC_lambda_vector_heap* %6, null, !dbg !7882
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !7882

cond.true5:                                       ; preds = %cond.end
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7882
  %dist_vects6 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 6, !dbg !7882
  %8 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects6, align 8, !dbg !7882
  %base7 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %8, i32 0, i32 0, !dbg !7882
  br label %cond.end9, !dbg !7882

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !7882

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_lambda_vector_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !7882
  %call11 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond10), !dbg !7882
  %cmp = icmp ne i32 %call, %call11, !dbg !7883
  br i1 %cmp, label %if.then12, label %if.end83, !dbg !7884

if.then12:                                        ; preds = %cond.end9
  call void @llvm.dbg.declare(metadata i32** %b_dist_v, metadata !7885, metadata !DIExpression()), !dbg !7887
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7888
  %10 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !7889
  %tobool13 = icmp ne %struct.VEC_lambda_vector_heap* %10, null, !dbg !7889
  br i1 %tobool13, label %cond.true14, label %cond.false16, !dbg !7889

cond.true14:                                      ; preds = %if.then12
  %11 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !7889
  %base15 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %11, i32 0, i32 0, !dbg !7889
  br label %cond.end17, !dbg !7889

cond.false16:                                     ; preds = %if.then12
  br label %cond.end17, !dbg !7889

cond.end17:                                       ; preds = %cond.false16, %cond.true14
  %cond18 = phi %struct.VEC_lambda_vector_base* [ %base15, %cond.true14 ], [ null, %cond.false16 ], !dbg !7889
  %call19 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond18), !dbg !7889
  %12 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7890
  %dist_vects20 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %12, i32 0, i32 6, !dbg !7890
  %13 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects20, align 8, !dbg !7890
  %tobool21 = icmp ne %struct.VEC_lambda_vector_heap* %13, null, !dbg !7890
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !7890

cond.true22:                                      ; preds = %cond.end17
  %14 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7890
  %dist_vects23 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %14, i32 0, i32 6, !dbg !7890
  %15 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects23, align 8, !dbg !7890
  %base24 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %15, i32 0, i32 0, !dbg !7890
  br label %cond.end26, !dbg !7890

cond.false25:                                     ; preds = %cond.end17
  br label %cond.end26, !dbg !7890

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_lambda_vector_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !7890
  %call28 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond27), !dbg !7890
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.129, i64 0, i64 0), i32 %call19, i32 %call28), !dbg !7891
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7892
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.130, i64 0, i64 0)), !dbg !7893
  store i32 0, i32* %i, align 4, !dbg !7894
  br label %for.cond, !dbg !7896

for.cond:                                         ; preds = %for.inc, %cond.end26
  %17 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !7897
  %tobool31 = icmp ne %struct.VEC_lambda_vector_heap* %17, null, !dbg !7897
  br i1 %tobool31, label %cond.true32, label %cond.false34, !dbg !7897

cond.true32:                                      ; preds = %for.cond
  %18 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !7897
  %base33 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %18, i32 0, i32 0, !dbg !7897
  br label %cond.end35, !dbg !7897

cond.false34:                                     ; preds = %for.cond
  br label %cond.end35, !dbg !7897

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi %struct.VEC_lambda_vector_base* [ %base33, %cond.true32 ], [ null, %cond.false34 ], !dbg !7897
  %19 = load i32, i32* %i, align 4, !dbg !7897
  %call37 = call i32 @VEC_lambda_vector_base_iterate(%struct.VEC_lambda_vector_base* %cond36, i32 %19, i32** %b_dist_v), !dbg !7897
  %tobool38 = icmp ne i32 %call37, 0, !dbg !7899
  br i1 %tobool38, label %for.body, label %for.end, !dbg !7899

for.body:                                         ; preds = %cond.end35
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7900
  %21 = load i32*, i32** %b_dist_v, align 8, !dbg !7901
  %22 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7902
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %22, i32 0, i32 4, !dbg !7902
  %23 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !7902
  %tobool39 = icmp ne %struct.VEC_loop_p_heap* %23, null, !dbg !7902
  br i1 %tobool39, label %cond.true40, label %cond.false43, !dbg !7902

cond.true40:                                      ; preds = %for.body
  %24 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7902
  %loop_nest41 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %24, i32 0, i32 4, !dbg !7902
  %25 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest41, align 8, !dbg !7902
  %base42 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %25, i32 0, i32 0, !dbg !7902
  br label %cond.end44, !dbg !7902

cond.false43:                                     ; preds = %for.body
  br label %cond.end44, !dbg !7902

cond.end44:                                       ; preds = %cond.false43, %cond.true40
  %cond45 = phi %struct.VEC_loop_p_base* [ %base42, %cond.true40 ], [ null, %cond.false43 ], !dbg !7902
  %call46 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond45), !dbg !7902
  call void @print_lambda_vector(%struct._IO_FILE* %20, i32* %21, i32 %call46), !dbg !7903
  br label %for.inc, !dbg !7903

for.inc:                                          ; preds = %cond.end44
  %26 = load i32, i32* %i, align 4, !dbg !7904
  %inc = add i32 %26, 1, !dbg !7904
  store i32 %inc, i32* %i, align 4, !dbg !7904
  br label %for.cond, !dbg !7905, !llvm.loop !7906

for.end:                                          ; preds = %cond.end35
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7908
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.131, i64 0, i64 0)), !dbg !7909
  store i32 0, i32* %i, align 4, !dbg !7910
  br label %for.cond48, !dbg !7912

for.cond48:                                       ; preds = %for.inc78, %for.end
  %28 = load i32, i32* %i, align 4, !dbg !7913
  %29 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7915
  %dist_vects49 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %29, i32 0, i32 6, !dbg !7915
  %30 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects49, align 8, !dbg !7915
  %tobool50 = icmp ne %struct.VEC_lambda_vector_heap* %30, null, !dbg !7915
  br i1 %tobool50, label %cond.true51, label %cond.false54, !dbg !7915

cond.true51:                                      ; preds = %for.cond48
  %31 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7915
  %dist_vects52 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %31, i32 0, i32 6, !dbg !7915
  %32 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects52, align 8, !dbg !7915
  %base53 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %32, i32 0, i32 0, !dbg !7915
  br label %cond.end55, !dbg !7915

cond.false54:                                     ; preds = %for.cond48
  br label %cond.end55, !dbg !7915

cond.end55:                                       ; preds = %cond.false54, %cond.true51
  %cond56 = phi %struct.VEC_lambda_vector_base* [ %base53, %cond.true51 ], [ null, %cond.false54 ], !dbg !7915
  %call57 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond56), !dbg !7915
  %cmp58 = icmp ult i32 %28, %call57, !dbg !7916
  br i1 %cmp58, label %for.body59, label %for.end80, !dbg !7917

for.body59:                                       ; preds = %cond.end55
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7918
  %34 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7919
  %dist_vects60 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %34, i32 0, i32 6, !dbg !7919
  %35 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects60, align 8, !dbg !7919
  %tobool61 = icmp ne %struct.VEC_lambda_vector_heap* %35, null, !dbg !7919
  br i1 %tobool61, label %cond.true62, label %cond.false65, !dbg !7919

cond.true62:                                      ; preds = %for.body59
  %36 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7919
  %dist_vects63 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %36, i32 0, i32 6, !dbg !7919
  %37 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects63, align 8, !dbg !7919
  %base64 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %37, i32 0, i32 0, !dbg !7919
  br label %cond.end66, !dbg !7919

cond.false65:                                     ; preds = %for.body59
  br label %cond.end66, !dbg !7919

cond.end66:                                       ; preds = %cond.false65, %cond.true62
  %cond67 = phi %struct.VEC_lambda_vector_base* [ %base64, %cond.true62 ], [ null, %cond.false65 ], !dbg !7919
  %38 = load i32, i32* %i, align 4, !dbg !7919
  %call68 = call i32* @VEC_lambda_vector_base_index(%struct.VEC_lambda_vector_base* %cond67, i32 %38), !dbg !7919
  %39 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7920
  %loop_nest69 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %39, i32 0, i32 4, !dbg !7920
  %40 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest69, align 8, !dbg !7920
  %tobool70 = icmp ne %struct.VEC_loop_p_heap* %40, null, !dbg !7920
  br i1 %tobool70, label %cond.true71, label %cond.false74, !dbg !7920

cond.true71:                                      ; preds = %cond.end66
  %41 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7920
  %loop_nest72 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %41, i32 0, i32 4, !dbg !7920
  %42 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest72, align 8, !dbg !7920
  %base73 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %42, i32 0, i32 0, !dbg !7920
  br label %cond.end75, !dbg !7920

cond.false74:                                     ; preds = %cond.end66
  br label %cond.end75, !dbg !7920

cond.end75:                                       ; preds = %cond.false74, %cond.true71
  %cond76 = phi %struct.VEC_loop_p_base* [ %base73, %cond.true71 ], [ null, %cond.false74 ], !dbg !7920
  %call77 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond76), !dbg !7920
  call void @print_lambda_vector(%struct._IO_FILE* %33, i32* %call68, i32 %call77), !dbg !7921
  br label %for.inc78, !dbg !7921

for.inc78:                                        ; preds = %cond.end75
  %43 = load i32, i32* %i, align 4, !dbg !7922
  %inc79 = add i32 %43, 1, !dbg !7922
  store i32 %inc79, i32* %i, align 4, !dbg !7922
  br label %for.cond48, !dbg !7923, !llvm.loop !7924

for.end80:                                        ; preds = %cond.end55
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7926
  %call81 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.132, i64 0, i64 0)), !dbg !7927
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7928
  %46 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7929
  call void @dump_data_dependence_relation(%struct._IO_FILE* %45, %struct.data_dependence_relation* %46), !dbg !7930
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7931
  %call82 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !7932
  store i8 0, i8* %retval, align 1, !dbg !7933
  br label %return, !dbg !7933

if.end83:                                         ; preds = %cond.end9
  %48 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects.addr, align 8, !dbg !7934
  %tobool84 = icmp ne %struct.VEC_lambda_vector_heap* %48, null, !dbg !7934
  br i1 %tobool84, label %cond.true85, label %cond.false87, !dbg !7934

cond.true85:                                      ; preds = %if.end83
  %49 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects.addr, align 8, !dbg !7934
  %base86 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %49, i32 0, i32 0, !dbg !7934
  br label %cond.end88, !dbg !7934

cond.false87:                                     ; preds = %if.end83
  br label %cond.end88, !dbg !7934

cond.end88:                                       ; preds = %cond.false87, %cond.true85
  %cond89 = phi %struct.VEC_lambda_vector_base* [ %base86, %cond.true85 ], [ null, %cond.false87 ], !dbg !7934
  %call90 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond89), !dbg !7934
  %50 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7936
  %dir_vects91 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %50, i32 0, i32 5, !dbg !7936
  %51 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects91, align 8, !dbg !7936
  %tobool92 = icmp ne %struct.VEC_lambda_vector_heap* %51, null, !dbg !7936
  br i1 %tobool92, label %cond.true93, label %cond.false96, !dbg !7936

cond.true93:                                      ; preds = %cond.end88
  %52 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7936
  %dir_vects94 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %52, i32 0, i32 5, !dbg !7936
  %53 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects94, align 8, !dbg !7936
  %base95 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %53, i32 0, i32 0, !dbg !7936
  br label %cond.end97, !dbg !7936

cond.false96:                                     ; preds = %cond.end88
  br label %cond.end97, !dbg !7936

cond.end97:                                       ; preds = %cond.false96, %cond.true93
  %cond98 = phi %struct.VEC_lambda_vector_base* [ %base95, %cond.true93 ], [ null, %cond.false96 ], !dbg !7936
  %call99 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond98), !dbg !7936
  %cmp100 = icmp ne i32 %call90, %call99, !dbg !7937
  br i1 %cmp100, label %if.then101, label %if.end119, !dbg !7938

if.then101:                                       ; preds = %cond.end97
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7939
  %55 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects.addr, align 8, !dbg !7941
  %tobool102 = icmp ne %struct.VEC_lambda_vector_heap* %55, null, !dbg !7941
  br i1 %tobool102, label %cond.true103, label %cond.false105, !dbg !7941

cond.true103:                                     ; preds = %if.then101
  %56 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects.addr, align 8, !dbg !7941
  %base104 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %56, i32 0, i32 0, !dbg !7941
  br label %cond.end106, !dbg !7941

cond.false105:                                    ; preds = %if.then101
  br label %cond.end106, !dbg !7941

cond.end106:                                      ; preds = %cond.false105, %cond.true103
  %cond107 = phi %struct.VEC_lambda_vector_base* [ %base104, %cond.true103 ], [ null, %cond.false105 ], !dbg !7941
  %call108 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond107), !dbg !7941
  %57 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7942
  %dir_vects109 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %57, i32 0, i32 5, !dbg !7942
  %58 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects109, align 8, !dbg !7942
  %tobool110 = icmp ne %struct.VEC_lambda_vector_heap* %58, null, !dbg !7942
  br i1 %tobool110, label %cond.true111, label %cond.false114, !dbg !7942

cond.true111:                                     ; preds = %cond.end106
  %59 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7942
  %dir_vects112 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %59, i32 0, i32 5, !dbg !7942
  %60 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects112, align 8, !dbg !7942
  %base113 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %60, i32 0, i32 0, !dbg !7942
  br label %cond.end115, !dbg !7942

cond.false114:                                    ; preds = %cond.end106
  br label %cond.end115, !dbg !7942

cond.end115:                                      ; preds = %cond.false114, %cond.true111
  %cond116 = phi %struct.VEC_lambda_vector_base* [ %base113, %cond.true111 ], [ null, %cond.false114 ], !dbg !7942
  %call117 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond116), !dbg !7942
  %call118 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.133, i64 0, i64 0), i32 %call108, i32 %call117), !dbg !7943
  store i8 0, i8* %retval, align 1, !dbg !7944
  br label %return, !dbg !7944

if.end119:                                        ; preds = %cond.end97
  store i32 0, i32* %i, align 4, !dbg !7945
  br label %for.cond120, !dbg !7947

for.cond120:                                      ; preds = %for.inc201, %if.end119
  %61 = load i32, i32* %i, align 4, !dbg !7948
  %62 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7950
  %dist_vects121 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %62, i32 0, i32 6, !dbg !7950
  %63 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects121, align 8, !dbg !7950
  %tobool122 = icmp ne %struct.VEC_lambda_vector_heap* %63, null, !dbg !7950
  br i1 %tobool122, label %cond.true123, label %cond.false126, !dbg !7950

cond.true123:                                     ; preds = %for.cond120
  %64 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7950
  %dist_vects124 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %64, i32 0, i32 6, !dbg !7950
  %65 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects124, align 8, !dbg !7950
  %base125 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %65, i32 0, i32 0, !dbg !7950
  br label %cond.end127, !dbg !7950

cond.false126:                                    ; preds = %for.cond120
  br label %cond.end127, !dbg !7950

cond.end127:                                      ; preds = %cond.false126, %cond.true123
  %cond128 = phi %struct.VEC_lambda_vector_base* [ %base125, %cond.true123 ], [ null, %cond.false126 ], !dbg !7950
  %call129 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond128), !dbg !7950
  %cmp130 = icmp ult i32 %61, %call129, !dbg !7951
  br i1 %cmp130, label %for.body131, label %for.end203, !dbg !7952

for.body131:                                      ; preds = %cond.end127
  call void @llvm.dbg.declare(metadata i32** %a_dist_v, metadata !7953, metadata !DIExpression()), !dbg !7955
  call void @llvm.dbg.declare(metadata i32** %b_dist_v132, metadata !7956, metadata !DIExpression()), !dbg !7957
  %66 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7958
  %dist_vects133 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %66, i32 0, i32 6, !dbg !7958
  %67 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects133, align 8, !dbg !7958
  %tobool134 = icmp ne %struct.VEC_lambda_vector_heap* %67, null, !dbg !7958
  br i1 %tobool134, label %cond.true135, label %cond.false138, !dbg !7958

cond.true135:                                     ; preds = %for.body131
  %68 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7958
  %dist_vects136 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %68, i32 0, i32 6, !dbg !7958
  %69 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects136, align 8, !dbg !7958
  %base137 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %69, i32 0, i32 0, !dbg !7958
  br label %cond.end139, !dbg !7958

cond.false138:                                    ; preds = %for.body131
  br label %cond.end139, !dbg !7958

cond.end139:                                      ; preds = %cond.false138, %cond.true135
  %cond140 = phi %struct.VEC_lambda_vector_base* [ %base137, %cond.true135 ], [ null, %cond.false138 ], !dbg !7958
  %70 = load i32, i32* %i, align 4, !dbg !7958
  %call141 = call i32* @VEC_lambda_vector_base_index(%struct.VEC_lambda_vector_base* %cond140, i32 %70), !dbg !7958
  store i32* %call141, i32** %b_dist_v132, align 8, !dbg !7957
  store i32 0, i32* %j, align 4, !dbg !7959
  br label %for.cond142, !dbg !7961

for.cond142:                                      ; preds = %for.inc165, %cond.end139
  %71 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !7962
  %tobool143 = icmp ne %struct.VEC_lambda_vector_heap* %71, null, !dbg !7962
  br i1 %tobool143, label %cond.true144, label %cond.false146, !dbg !7962

cond.true144:                                     ; preds = %for.cond142
  %72 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !7962
  %base145 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %72, i32 0, i32 0, !dbg !7962
  br label %cond.end147, !dbg !7962

cond.false146:                                    ; preds = %for.cond142
  br label %cond.end147, !dbg !7962

cond.end147:                                      ; preds = %cond.false146, %cond.true144
  %cond148 = phi %struct.VEC_lambda_vector_base* [ %base145, %cond.true144 ], [ null, %cond.false146 ], !dbg !7962
  %73 = load i32, i32* %j, align 4, !dbg !7962
  %call149 = call i32 @VEC_lambda_vector_base_iterate(%struct.VEC_lambda_vector_base* %cond148, i32 %73, i32** %a_dist_v), !dbg !7962
  %tobool150 = icmp ne i32 %call149, 0, !dbg !7964
  br i1 %tobool150, label %for.body151, label %for.end167, !dbg !7964

for.body151:                                      ; preds = %cond.end147
  %74 = load i32*, i32** %a_dist_v, align 8, !dbg !7965
  %75 = load i32*, i32** %b_dist_v132, align 8, !dbg !7967
  %76 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7968
  %loop_nest152 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %76, i32 0, i32 4, !dbg !7968
  %77 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest152, align 8, !dbg !7968
  %tobool153 = icmp ne %struct.VEC_loop_p_heap* %77, null, !dbg !7968
  br i1 %tobool153, label %cond.true154, label %cond.false157, !dbg !7968

cond.true154:                                     ; preds = %for.body151
  %78 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7968
  %loop_nest155 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %78, i32 0, i32 4, !dbg !7968
  %79 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest155, align 8, !dbg !7968
  %base156 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %79, i32 0, i32 0, !dbg !7968
  br label %cond.end158, !dbg !7968

cond.false157:                                    ; preds = %for.body151
  br label %cond.end158, !dbg !7968

cond.end158:                                      ; preds = %cond.false157, %cond.true154
  %cond159 = phi %struct.VEC_loop_p_base* [ %base156, %cond.true154 ], [ null, %cond.false157 ], !dbg !7968
  %call160 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond159), !dbg !7968
  %call161 = call zeroext i8 @lambda_vector_equal(i32* %74, i32* %75, i32 %call160), !dbg !7969
  %tobool162 = icmp ne i8 %call161, 0, !dbg !7969
  br i1 %tobool162, label %if.then163, label %if.end164, !dbg !7970

if.then163:                                       ; preds = %cond.end158
  br label %for.end167, !dbg !7971

if.end164:                                        ; preds = %cond.end158
  br label %for.inc165, !dbg !7972

for.inc165:                                       ; preds = %if.end164
  %80 = load i32, i32* %j, align 4, !dbg !7973
  %inc166 = add i32 %80, 1, !dbg !7973
  store i32 %inc166, i32* %j, align 4, !dbg !7973
  br label %for.cond142, !dbg !7974, !llvm.loop !7975

for.end167:                                       ; preds = %if.then163, %cond.end147
  %81 = load i32, i32* %j, align 4, !dbg !7977
  %82 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !7979
  %tobool168 = icmp ne %struct.VEC_lambda_vector_heap* %82, null, !dbg !7979
  br i1 %tobool168, label %cond.true169, label %cond.false171, !dbg !7979

cond.true169:                                     ; preds = %for.end167
  %83 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !7979
  %base170 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %83, i32 0, i32 0, !dbg !7979
  br label %cond.end172, !dbg !7979

cond.false171:                                    ; preds = %for.end167
  br label %cond.end172, !dbg !7979

cond.end172:                                      ; preds = %cond.false171, %cond.true169
  %cond173 = phi %struct.VEC_lambda_vector_base* [ %base170, %cond.true169 ], [ null, %cond.false171 ], !dbg !7979
  %call174 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond173), !dbg !7979
  %cmp175 = icmp eq i32 %81, %call174, !dbg !7980
  br i1 %cmp175, label %if.then176, label %if.end200, !dbg !7981

if.then176:                                       ; preds = %cond.end172
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7982
  %call177 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.134, i64 0, i64 0)), !dbg !7984
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7985
  %86 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !7986
  %87 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7987
  %loop_nest178 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %87, i32 0, i32 4, !dbg !7987
  %88 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest178, align 8, !dbg !7987
  %tobool179 = icmp ne %struct.VEC_loop_p_heap* %88, null, !dbg !7987
  br i1 %tobool179, label %cond.true180, label %cond.false183, !dbg !7987

cond.true180:                                     ; preds = %if.then176
  %89 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7987
  %loop_nest181 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %89, i32 0, i32 4, !dbg !7987
  %90 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest181, align 8, !dbg !7987
  %base182 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %90, i32 0, i32 0, !dbg !7987
  br label %cond.end184, !dbg !7987

cond.false183:                                    ; preds = %if.then176
  br label %cond.end184, !dbg !7987

cond.end184:                                      ; preds = %cond.false183, %cond.true180
  %cond185 = phi %struct.VEC_loop_p_base* [ %base182, %cond.true180 ], [ null, %cond.false183 ], !dbg !7987
  %call186 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond185), !dbg !7987
  call void @print_dist_vectors(%struct._IO_FILE* %85, %struct.VEC_lambda_vector_heap* %86, i32 %call186), !dbg !7988
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7989
  %call187 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %91, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.135, i64 0, i64 0)), !dbg !7990
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7991
  %93 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7992
  %dist_vects188 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %93, i32 0, i32 6, !dbg !7992
  %94 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects188, align 8, !dbg !7992
  %95 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7993
  %loop_nest189 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %95, i32 0, i32 4, !dbg !7993
  %96 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest189, align 8, !dbg !7993
  %tobool190 = icmp ne %struct.VEC_loop_p_heap* %96, null, !dbg !7993
  br i1 %tobool190, label %cond.true191, label %cond.false194, !dbg !7993

cond.true191:                                     ; preds = %cond.end184
  %97 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7993
  %loop_nest192 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %97, i32 0, i32 4, !dbg !7993
  %98 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest192, align 8, !dbg !7993
  %base193 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %98, i32 0, i32 0, !dbg !7993
  br label %cond.end195, !dbg !7993

cond.false194:                                    ; preds = %cond.end184
  br label %cond.end195, !dbg !7993

cond.end195:                                      ; preds = %cond.false194, %cond.true191
  %cond196 = phi %struct.VEC_loop_p_base* [ %base193, %cond.true191 ], [ null, %cond.false194 ], !dbg !7993
  %call197 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond196), !dbg !7993
  call void @print_dist_vectors(%struct._IO_FILE* %92, %struct.VEC_lambda_vector_heap* %94, i32 %call197), !dbg !7994
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7995
  %call198 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %99, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.132, i64 0, i64 0)), !dbg !7996
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7997
  %101 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !7998
  call void @dump_data_dependence_relation(%struct._IO_FILE* %100, %struct.data_dependence_relation* %101), !dbg !7999
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !8000
  %call199 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %102, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !8001
  br label %if.end200, !dbg !8002

if.end200:                                        ; preds = %cond.end195, %cond.end172
  br label %for.inc201, !dbg !8003

for.inc201:                                       ; preds = %if.end200
  %103 = load i32, i32* %i, align 4, !dbg !8004
  %inc202 = add i32 %103, 1, !dbg !8004
  store i32 %inc202, i32* %i, align 4, !dbg !8004
  br label %for.cond120, !dbg !8005, !llvm.loop !8006

for.end203:                                       ; preds = %cond.end127
  store i32 0, i32* %i, align 4, !dbg !8008
  br label %for.cond204, !dbg !8010

for.cond204:                                      ; preds = %for.inc284, %for.end203
  %104 = load i32, i32* %i, align 4, !dbg !8011
  %105 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8013
  %dir_vects205 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %105, i32 0, i32 5, !dbg !8013
  %106 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects205, align 8, !dbg !8013
  %tobool206 = icmp ne %struct.VEC_lambda_vector_heap* %106, null, !dbg !8013
  br i1 %tobool206, label %cond.true207, label %cond.false210, !dbg !8013

cond.true207:                                     ; preds = %for.cond204
  %107 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8013
  %dir_vects208 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %107, i32 0, i32 5, !dbg !8013
  %108 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects208, align 8, !dbg !8013
  %base209 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %108, i32 0, i32 0, !dbg !8013
  br label %cond.end211, !dbg !8013

cond.false210:                                    ; preds = %for.cond204
  br label %cond.end211, !dbg !8013

cond.end211:                                      ; preds = %cond.false210, %cond.true207
  %cond212 = phi %struct.VEC_lambda_vector_base* [ %base209, %cond.true207 ], [ null, %cond.false210 ], !dbg !8013
  %call213 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond212), !dbg !8013
  %cmp214 = icmp ult i32 %104, %call213, !dbg !8014
  br i1 %cmp214, label %for.body215, label %for.end286, !dbg !8015

for.body215:                                      ; preds = %cond.end211
  call void @llvm.dbg.declare(metadata i32** %a_dir_v, metadata !8016, metadata !DIExpression()), !dbg !8018
  call void @llvm.dbg.declare(metadata i32** %b_dir_v, metadata !8019, metadata !DIExpression()), !dbg !8020
  %109 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8021
  %dir_vects216 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %109, i32 0, i32 5, !dbg !8021
  %110 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects216, align 8, !dbg !8021
  %tobool217 = icmp ne %struct.VEC_lambda_vector_heap* %110, null, !dbg !8021
  br i1 %tobool217, label %cond.true218, label %cond.false221, !dbg !8021

cond.true218:                                     ; preds = %for.body215
  %111 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8021
  %dir_vects219 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %111, i32 0, i32 5, !dbg !8021
  %112 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects219, align 8, !dbg !8021
  %base220 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %112, i32 0, i32 0, !dbg !8021
  br label %cond.end222, !dbg !8021

cond.false221:                                    ; preds = %for.body215
  br label %cond.end222, !dbg !8021

cond.end222:                                      ; preds = %cond.false221, %cond.true218
  %cond223 = phi %struct.VEC_lambda_vector_base* [ %base220, %cond.true218 ], [ null, %cond.false221 ], !dbg !8021
  %113 = load i32, i32* %i, align 4, !dbg !8021
  %call224 = call i32* @VEC_lambda_vector_base_index(%struct.VEC_lambda_vector_base* %cond223, i32 %113), !dbg !8021
  store i32* %call224, i32** %b_dir_v, align 8, !dbg !8020
  store i32 0, i32* %j, align 4, !dbg !8022
  br label %for.cond225, !dbg !8024

for.cond225:                                      ; preds = %for.inc248, %cond.end222
  %114 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects.addr, align 8, !dbg !8025
  %tobool226 = icmp ne %struct.VEC_lambda_vector_heap* %114, null, !dbg !8025
  br i1 %tobool226, label %cond.true227, label %cond.false229, !dbg !8025

cond.true227:                                     ; preds = %for.cond225
  %115 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects.addr, align 8, !dbg !8025
  %base228 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %115, i32 0, i32 0, !dbg !8025
  br label %cond.end230, !dbg !8025

cond.false229:                                    ; preds = %for.cond225
  br label %cond.end230, !dbg !8025

cond.end230:                                      ; preds = %cond.false229, %cond.true227
  %cond231 = phi %struct.VEC_lambda_vector_base* [ %base228, %cond.true227 ], [ null, %cond.false229 ], !dbg !8025
  %116 = load i32, i32* %j, align 4, !dbg !8025
  %call232 = call i32 @VEC_lambda_vector_base_iterate(%struct.VEC_lambda_vector_base* %cond231, i32 %116, i32** %a_dir_v), !dbg !8025
  %tobool233 = icmp ne i32 %call232, 0, !dbg !8027
  br i1 %tobool233, label %for.body234, label %for.end250, !dbg !8027

for.body234:                                      ; preds = %cond.end230
  %117 = load i32*, i32** %a_dir_v, align 8, !dbg !8028
  %118 = load i32*, i32** %b_dir_v, align 8, !dbg !8030
  %119 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8031
  %loop_nest235 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %119, i32 0, i32 4, !dbg !8031
  %120 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest235, align 8, !dbg !8031
  %tobool236 = icmp ne %struct.VEC_loop_p_heap* %120, null, !dbg !8031
  br i1 %tobool236, label %cond.true237, label %cond.false240, !dbg !8031

cond.true237:                                     ; preds = %for.body234
  %121 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8031
  %loop_nest238 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %121, i32 0, i32 4, !dbg !8031
  %122 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest238, align 8, !dbg !8031
  %base239 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %122, i32 0, i32 0, !dbg !8031
  br label %cond.end241, !dbg !8031

cond.false240:                                    ; preds = %for.body234
  br label %cond.end241, !dbg !8031

cond.end241:                                      ; preds = %cond.false240, %cond.true237
  %cond242 = phi %struct.VEC_loop_p_base* [ %base239, %cond.true237 ], [ null, %cond.false240 ], !dbg !8031
  %call243 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond242), !dbg !8031
  %call244 = call zeroext i8 @lambda_vector_equal(i32* %117, i32* %118, i32 %call243), !dbg !8032
  %tobool245 = icmp ne i8 %call244, 0, !dbg !8032
  br i1 %tobool245, label %if.then246, label %if.end247, !dbg !8033

if.then246:                                       ; preds = %cond.end241
  br label %for.end250, !dbg !8034

if.end247:                                        ; preds = %cond.end241
  br label %for.inc248, !dbg !8035

for.inc248:                                       ; preds = %if.end247
  %123 = load i32, i32* %j, align 4, !dbg !8036
  %inc249 = add i32 %123, 1, !dbg !8036
  store i32 %inc249, i32* %j, align 4, !dbg !8036
  br label %for.cond225, !dbg !8037, !llvm.loop !8038

for.end250:                                       ; preds = %if.then246, %cond.end230
  %124 = load i32, i32* %j, align 4, !dbg !8040
  %125 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !8042
  %tobool251 = icmp ne %struct.VEC_lambda_vector_heap* %125, null, !dbg !8042
  br i1 %tobool251, label %cond.true252, label %cond.false254, !dbg !8042

cond.true252:                                     ; preds = %for.end250
  %126 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects.addr, align 8, !dbg !8042
  %base253 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %126, i32 0, i32 0, !dbg !8042
  br label %cond.end255, !dbg !8042

cond.false254:                                    ; preds = %for.end250
  br label %cond.end255, !dbg !8042

cond.end255:                                      ; preds = %cond.false254, %cond.true252
  %cond256 = phi %struct.VEC_lambda_vector_base* [ %base253, %cond.true252 ], [ null, %cond.false254 ], !dbg !8042
  %call257 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond256), !dbg !8042
  %cmp258 = icmp eq i32 %124, %call257, !dbg !8043
  br i1 %cmp258, label %if.then259, label %if.end283, !dbg !8044

if.then259:                                       ; preds = %cond.end255
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !8045
  %call260 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %127, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.136, i64 0, i64 0)), !dbg !8047
  %128 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !8048
  %129 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects.addr, align 8, !dbg !8049
  %130 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8050
  %loop_nest261 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %130, i32 0, i32 4, !dbg !8050
  %131 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest261, align 8, !dbg !8050
  %tobool262 = icmp ne %struct.VEC_loop_p_heap* %131, null, !dbg !8050
  br i1 %tobool262, label %cond.true263, label %cond.false266, !dbg !8050

cond.true263:                                     ; preds = %if.then259
  %132 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8050
  %loop_nest264 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %132, i32 0, i32 4, !dbg !8050
  %133 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest264, align 8, !dbg !8050
  %base265 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %133, i32 0, i32 0, !dbg !8050
  br label %cond.end267, !dbg !8050

cond.false266:                                    ; preds = %if.then259
  br label %cond.end267, !dbg !8050

cond.end267:                                      ; preds = %cond.false266, %cond.true263
  %cond268 = phi %struct.VEC_loop_p_base* [ %base265, %cond.true263 ], [ null, %cond.false266 ], !dbg !8050
  %call269 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond268), !dbg !8050
  call void @print_dir_vectors(%struct._IO_FILE* %128, %struct.VEC_lambda_vector_heap* %129, i32 %call269), !dbg !8051
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !8052
  %call270 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %134, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.137, i64 0, i64 0)), !dbg !8053
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !8054
  %136 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8055
  %dir_vects271 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %136, i32 0, i32 5, !dbg !8055
  %137 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects271, align 8, !dbg !8055
  %138 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8056
  %loop_nest272 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %138, i32 0, i32 4, !dbg !8056
  %139 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest272, align 8, !dbg !8056
  %tobool273 = icmp ne %struct.VEC_loop_p_heap* %139, null, !dbg !8056
  br i1 %tobool273, label %cond.true274, label %cond.false277, !dbg !8056

cond.true274:                                     ; preds = %cond.end267
  %140 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8056
  %loop_nest275 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %140, i32 0, i32 4, !dbg !8056
  %141 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest275, align 8, !dbg !8056
  %base276 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %141, i32 0, i32 0, !dbg !8056
  br label %cond.end278, !dbg !8056

cond.false277:                                    ; preds = %cond.end267
  br label %cond.end278, !dbg !8056

cond.end278:                                      ; preds = %cond.false277, %cond.true274
  %cond279 = phi %struct.VEC_loop_p_base* [ %base276, %cond.true274 ], [ null, %cond.false277 ], !dbg !8056
  %call280 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond279), !dbg !8056
  call void @print_dir_vectors(%struct._IO_FILE* %135, %struct.VEC_lambda_vector_heap* %137, i32 %call280), !dbg !8057
  %142 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !8058
  %call281 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %142, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.132, i64 0, i64 0)), !dbg !8059
  %143 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !8060
  %144 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8061
  call void @dump_data_dependence_relation(%struct._IO_FILE* %143, %struct.data_dependence_relation* %144), !dbg !8062
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !8063
  %call282 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %145, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !8064
  br label %if.end283, !dbg !8065

if.end283:                                        ; preds = %cond.end278, %cond.end255
  br label %for.inc284, !dbg !8066

for.inc284:                                       ; preds = %if.end283
  %146 = load i32, i32* %i, align 4, !dbg !8067
  %inc285 = add i32 %146, 1, !dbg !8067
  store i32 %inc285, i32* %i, align 4, !dbg !8067
  br label %for.cond204, !dbg !8068, !llvm.loop !8069

for.end286:                                       ; preds = %cond.end211
  store i8 1, i8* %retval, align 1, !dbg !8071
  br label %return, !dbg !8071

return:                                           ; preds = %for.end286, %cond.end115, %for.end80
  %147 = load i8, i8* %retval, align 1, !dbg !8072
  ret i8 %147, !dbg !8072
}

; Function Attrs: noinline nounwind uwtable
define internal void @finalize_ddr_dependent(%struct.data_dependence_relation* %ddr, %union.tree_node* %chrec) #0 !dbg !8073 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !8076, metadata !DIExpression()), !dbg !8077
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !8078, metadata !DIExpression()), !dbg !8079
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8080
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !8080
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8082

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !8083
  %and = and i32 %1, 8, !dbg !8084
  %tobool1 = icmp ne i32 %and, 0, !dbg !8084
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8085

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8086
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.138, i64 0, i64 0)), !dbg !8088
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8089
  %4 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8090
  call void @print_generic_expr(%struct._IO_FILE* %3, %union.tree_node* %4, i32 0), !dbg !8091
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8092
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !8093
  br label %if.end, !dbg !8094

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8095
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8096
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 2, !dbg !8096
  store %union.tree_node* %6, %union.tree_node** %are_dependent, align 8, !dbg !8097
  %8 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8098
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %8, i32 0, i32 3, !dbg !8098
  %9 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !8098
  call void @free_subscripts(%struct.VEC_subscript_p_heap* %9), !dbg !8099
  %10 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8100
  %subscripts3 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %10, i32 0, i32 3, !dbg !8100
  store %struct.VEC_subscript_p_heap* null, %struct.VEC_subscript_p_heap** %subscripts3, align 8, !dbg !8101
  ret void, !dbg !8102
}

declare dso_local zeroext i8 @evolution_function_is_invariant_p(%union.tree_node*, i32) #2

declare dso_local zeroext i8 @evolution_function_is_affine_multivariate_p(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @subscript_dependence_tester_1(%struct.data_dependence_relation* %ddr, %struct.data_reference* %dra, %struct.data_reference* %drb, %struct.loop* %loop_nest) #0 !dbg !8103 {
entry:
  %retval = alloca i8, align 1
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %dra.addr = alloca %struct.data_reference*, align 8
  %drb.addr = alloca %struct.data_reference*, align 8
  %loop_nest.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %last_conflicts = alloca %union.tree_node*, align 8
  %subscript = alloca %struct.subscript*, align 8
  %overlaps_a = alloca %struct.conflict_function*, align 8
  %overlaps_b = alloca %struct.conflict_function*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !8106, metadata !DIExpression()), !dbg !8107
  store %struct.data_reference* %dra, %struct.data_reference** %dra.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dra.addr, metadata !8108, metadata !DIExpression()), !dbg !8109
  store %struct.data_reference* %drb, %struct.data_reference** %drb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %drb.addr, metadata !8110, metadata !DIExpression()), !dbg !8111
  store %struct.loop* %loop_nest, %struct.loop** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop_nest.addr, metadata !8112, metadata !DIExpression()), !dbg !8113
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8114, metadata !DIExpression()), !dbg !8115
  call void @llvm.dbg.declare(metadata %union.tree_node** %last_conflicts, metadata !8116, metadata !DIExpression()), !dbg !8117
  call void @llvm.dbg.declare(metadata %struct.subscript** %subscript, metadata !8118, metadata !DIExpression()), !dbg !8119
  store i32 0, i32* %i, align 4, !dbg !8120
  br label %for.cond, !dbg !8122

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8123
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 3, !dbg !8123
  %1 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !8123
  %tobool = icmp ne %struct.VEC_subscript_p_heap* %1, null, !dbg !8123
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8123

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8123
  %subscripts1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 3, !dbg !8123
  %3 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts1, align 8, !dbg !8123
  %base = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %3, i32 0, i32 0, !dbg !8123
  br label %cond.end, !dbg !8123

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8123

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_subscript_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8123
  %4 = load i32, i32* %i, align 4, !dbg !8123
  %call = call i32 @VEC_subscript_p_base_iterate(%struct.VEC_subscript_p_base* %cond, i32 %4, %struct.subscript** %subscript), !dbg !8123
  %tobool2 = icmp ne i32 %call, 0, !dbg !8125
  br i1 %tobool2, label %for.body, label %for.end, !dbg !8125

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %overlaps_a, metadata !8126, metadata !DIExpression()), !dbg !8128
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %overlaps_b, metadata !8129, metadata !DIExpression()), !dbg !8130
  %5 = load %struct.data_reference*, %struct.data_reference** %dra.addr, align 8, !dbg !8131
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %5, i32 0, i32 5, !dbg !8131
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !8131
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !8131
  %tobool3 = icmp ne %struct.VEC_tree_heap* %6, null, !dbg !8131
  br i1 %tobool3, label %cond.true4, label %cond.false8, !dbg !8131

cond.true4:                                       ; preds = %for.body
  %7 = load %struct.data_reference*, %struct.data_reference** %dra.addr, align 8, !dbg !8131
  %indices5 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %7, i32 0, i32 5, !dbg !8131
  %access_fns6 = getelementptr inbounds %struct.indices, %struct.indices* %indices5, i32 0, i32 1, !dbg !8131
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns6, align 8, !dbg !8131
  %base7 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %8, i32 0, i32 0, !dbg !8131
  br label %cond.end9, !dbg !8131

cond.false8:                                      ; preds = %for.body
  br label %cond.end9, !dbg !8131

cond.end9:                                        ; preds = %cond.false8, %cond.true4
  %cond10 = phi %struct.VEC_tree_base* [ %base7, %cond.true4 ], [ null, %cond.false8 ], !dbg !8131
  %9 = load i32, i32* %i, align 4, !dbg !8131
  %call11 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond10, i32 %9), !dbg !8131
  %10 = load %struct.data_reference*, %struct.data_reference** %drb.addr, align 8, !dbg !8132
  %indices12 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %10, i32 0, i32 5, !dbg !8132
  %access_fns13 = getelementptr inbounds %struct.indices, %struct.indices* %indices12, i32 0, i32 1, !dbg !8132
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns13, align 8, !dbg !8132
  %tobool14 = icmp ne %struct.VEC_tree_heap* %11, null, !dbg !8132
  br i1 %tobool14, label %cond.true15, label %cond.false19, !dbg !8132

cond.true15:                                      ; preds = %cond.end9
  %12 = load %struct.data_reference*, %struct.data_reference** %drb.addr, align 8, !dbg !8132
  %indices16 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %12, i32 0, i32 5, !dbg !8132
  %access_fns17 = getelementptr inbounds %struct.indices, %struct.indices* %indices16, i32 0, i32 1, !dbg !8132
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns17, align 8, !dbg !8132
  %base18 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %13, i32 0, i32 0, !dbg !8132
  br label %cond.end20, !dbg !8132

cond.false19:                                     ; preds = %cond.end9
  br label %cond.end20, !dbg !8132

cond.end20:                                       ; preds = %cond.false19, %cond.true15
  %cond21 = phi %struct.VEC_tree_base* [ %base18, %cond.true15 ], [ null, %cond.false19 ], !dbg !8132
  %14 = load i32, i32* %i, align 4, !dbg !8132
  %call22 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond21, i32 %14), !dbg !8132
  %15 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !8133
  call void @analyze_overlapping_iterations(%union.tree_node* %call11, %union.tree_node* %call22, %struct.conflict_function** %overlaps_a, %struct.conflict_function** %overlaps_b, %union.tree_node** %last_conflicts, %struct.loop* %15), !dbg !8134
  %16 = load %struct.conflict_function*, %struct.conflict_function** %overlaps_a, align 8, !dbg !8135
  %n = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %16, i32 0, i32 0, !dbg !8135
  %17 = load i32, i32* %n, align 8, !dbg !8135
  %cmp = icmp eq i32 %17, 3, !dbg !8135
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8137

lor.lhs.false:                                    ; preds = %cond.end20
  %18 = load %struct.conflict_function*, %struct.conflict_function** %overlaps_b, align 8, !dbg !8138
  %n23 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %18, i32 0, i32 0, !dbg !8138
  %19 = load i32, i32* %n23, align 8, !dbg !8138
  %cmp24 = icmp eq i32 %19, 3, !dbg !8138
  br i1 %cmp24, label %if.then, label %if.else, !dbg !8139

if.then:                                          ; preds = %lor.lhs.false, %cond.end20
  %20 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8140
  %21 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8142
  call void @finalize_ddr_dependent(%struct.data_dependence_relation* %20, %union.tree_node* %21), !dbg !8143
  %22 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 3), align 4, !dbg !8144
  %inc = add nsw i32 %22, 1, !dbg !8144
  store i32 %inc, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 3), align 4, !dbg !8144
  %23 = load %struct.conflict_function*, %struct.conflict_function** %overlaps_a, align 8, !dbg !8145
  call void @free_conflict_function(%struct.conflict_function* %23), !dbg !8146
  %24 = load %struct.conflict_function*, %struct.conflict_function** %overlaps_b, align 8, !dbg !8147
  call void @free_conflict_function(%struct.conflict_function* %24), !dbg !8148
  store i8 0, i8* %retval, align 1, !dbg !8149
  br label %return, !dbg !8149

if.else:                                          ; preds = %lor.lhs.false
  %25 = load %struct.conflict_function*, %struct.conflict_function** %overlaps_a, align 8, !dbg !8150
  %n25 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %25, i32 0, i32 0, !dbg !8150
  %26 = load i32, i32* %n25, align 8, !dbg !8150
  %cmp26 = icmp eq i32 %26, 0, !dbg !8150
  br i1 %cmp26, label %if.then30, label %lor.lhs.false27, !dbg !8152

lor.lhs.false27:                                  ; preds = %if.else
  %27 = load %struct.conflict_function*, %struct.conflict_function** %overlaps_b, align 8, !dbg !8153
  %n28 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %27, i32 0, i32 0, !dbg !8153
  %28 = load i32, i32* %n28, align 8, !dbg !8153
  %cmp29 = icmp eq i32 %28, 0, !dbg !8153
  br i1 %cmp29, label %if.then30, label %if.else32, !dbg !8154

if.then30:                                        ; preds = %lor.lhs.false27, %if.else
  %29 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8155
  %30 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !8157
  call void @finalize_ddr_dependent(%struct.data_dependence_relation* %29, %union.tree_node* %30), !dbg !8158
  %31 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 2), align 4, !dbg !8159
  %inc31 = add nsw i32 %31, 1, !dbg !8159
  store i32 %inc31, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 2), align 4, !dbg !8159
  %32 = load %struct.conflict_function*, %struct.conflict_function** %overlaps_a, align 8, !dbg !8160
  call void @free_conflict_function(%struct.conflict_function* %32), !dbg !8161
  %33 = load %struct.conflict_function*, %struct.conflict_function** %overlaps_b, align 8, !dbg !8162
  call void @free_conflict_function(%struct.conflict_function* %33), !dbg !8163
  store i8 0, i8* %retval, align 1, !dbg !8164
  br label %return, !dbg !8164

if.else32:                                        ; preds = %lor.lhs.false27
  %34 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !8165
  %conflicting_iterations_in_a = getelementptr inbounds %struct.subscript, %struct.subscript* %34, i32 0, i32 0, !dbg !8165
  %35 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_a, align 8, !dbg !8165
  %tobool33 = icmp ne %struct.conflict_function* %35, null, !dbg !8165
  br i1 %tobool33, label %if.then34, label %if.end, !dbg !8168

if.then34:                                        ; preds = %if.else32
  %36 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !8169
  %conflicting_iterations_in_a35 = getelementptr inbounds %struct.subscript, %struct.subscript* %36, i32 0, i32 0, !dbg !8169
  %37 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_a35, align 8, !dbg !8169
  call void @free_conflict_function(%struct.conflict_function* %37), !dbg !8170
  br label %if.end, !dbg !8170

if.end:                                           ; preds = %if.then34, %if.else32
  %38 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !8171
  %conflicting_iterations_in_b = getelementptr inbounds %struct.subscript, %struct.subscript* %38, i32 0, i32 1, !dbg !8171
  %39 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_b, align 8, !dbg !8171
  %tobool36 = icmp ne %struct.conflict_function* %39, null, !dbg !8171
  br i1 %tobool36, label %if.then37, label %if.end39, !dbg !8173

if.then37:                                        ; preds = %if.end
  %40 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !8174
  %conflicting_iterations_in_b38 = getelementptr inbounds %struct.subscript, %struct.subscript* %40, i32 0, i32 1, !dbg !8174
  %41 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_b38, align 8, !dbg !8174
  call void @free_conflict_function(%struct.conflict_function* %41), !dbg !8175
  br label %if.end39, !dbg !8175

if.end39:                                         ; preds = %if.then37, %if.end
  %42 = load %struct.conflict_function*, %struct.conflict_function** %overlaps_a, align 8, !dbg !8176
  %43 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !8177
  %conflicting_iterations_in_a40 = getelementptr inbounds %struct.subscript, %struct.subscript* %43, i32 0, i32 0, !dbg !8177
  store %struct.conflict_function* %42, %struct.conflict_function** %conflicting_iterations_in_a40, align 8, !dbg !8178
  %44 = load %struct.conflict_function*, %struct.conflict_function** %overlaps_b, align 8, !dbg !8179
  %45 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !8180
  %conflicting_iterations_in_b41 = getelementptr inbounds %struct.subscript, %struct.subscript* %45, i32 0, i32 1, !dbg !8180
  store %struct.conflict_function* %44, %struct.conflict_function** %conflicting_iterations_in_b41, align 8, !dbg !8181
  %46 = load %union.tree_node*, %union.tree_node** %last_conflicts, align 8, !dbg !8182
  %47 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !8183
  %last_conflict = getelementptr inbounds %struct.subscript, %struct.subscript* %47, i32 0, i32 2, !dbg !8183
  store %union.tree_node* %46, %union.tree_node** %last_conflict, align 8, !dbg !8184
  br label %if.end42

if.end42:                                         ; preds = %if.end39
  br label %if.end43

if.end43:                                         ; preds = %if.end42
  br label %for.inc, !dbg !8185

for.inc:                                          ; preds = %if.end43
  %48 = load i32, i32* %i, align 4, !dbg !8186
  %inc44 = add i32 %48, 1, !dbg !8186
  store i32 %inc44, i32* %i, align 4, !dbg !8186
  br label %for.cond, !dbg !8187, !llvm.loop !8188

for.end:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !8190
  br label %return, !dbg !8190

return:                                           ; preds = %for.end, %if.then30, %if.then
  %49 = load i8, i8* %retval, align 1, !dbg !8191
  ret i8 %49, !dbg !8191
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_subscript_distance(%struct.data_dependence_relation* %ddr) #0 !dbg !8192 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %cf_a = alloca %struct.conflict_function*, align 8
  %cf_b = alloca %struct.conflict_function*, align 8
  %fn_a = alloca %struct.VEC_tree_heap*, align 8
  %fn_b = alloca %struct.VEC_tree_heap*, align 8
  %diff = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  %subscript = alloca %struct.subscript*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !8193, metadata !DIExpression()), !dbg !8194
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %cf_a, metadata !8195, metadata !DIExpression()), !dbg !8196
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %cf_b, metadata !8197, metadata !DIExpression()), !dbg !8198
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fn_a, metadata !8199, metadata !DIExpression()), !dbg !8200
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fn_b, metadata !8201, metadata !DIExpression()), !dbg !8202
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %diff, metadata !8203, metadata !DIExpression()), !dbg !8204
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8205
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 2, !dbg !8205
  %1 = load %union.tree_node*, %union.tree_node** %are_dependent, align 8, !dbg !8205
  %cmp = icmp eq %union.tree_node* %1, null, !dbg !8207
  br i1 %cmp, label %if.then, label %if.end25, !dbg !8208

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8209, metadata !DIExpression()), !dbg !8211
  store i32 0, i32* %i, align 4, !dbg !8212
  br label %for.cond, !dbg !8214

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4, !dbg !8215
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8217
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %3, i32 0, i32 3, !dbg !8217
  %4 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !8217
  %tobool = icmp ne %struct.VEC_subscript_p_heap* %4, null, !dbg !8217
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8217

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8217
  %subscripts1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 3, !dbg !8217
  %6 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts1, align 8, !dbg !8217
  %base = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %6, i32 0, i32 0, !dbg !8217
  br label %cond.end, !dbg !8217

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8217

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_subscript_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8217
  %call = call i32 @VEC_subscript_p_base_length(%struct.VEC_subscript_p_base* %cond), !dbg !8217
  %cmp2 = icmp ult i32 %2, %call, !dbg !8218
  br i1 %cmp2, label %for.body, label %for.end, !dbg !8219

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.subscript** %subscript, metadata !8220, metadata !DIExpression()), !dbg !8222
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8223
  %subscripts3 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 3, !dbg !8223
  %8 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts3, align 8, !dbg !8223
  %tobool4 = icmp ne %struct.VEC_subscript_p_heap* %8, null, !dbg !8223
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !8223

cond.true5:                                       ; preds = %for.body
  %9 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8223
  %subscripts6 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %9, i32 0, i32 3, !dbg !8223
  %10 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts6, align 8, !dbg !8223
  %base7 = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %10, i32 0, i32 0, !dbg !8223
  br label %cond.end9, !dbg !8223

cond.false8:                                      ; preds = %for.body
  br label %cond.end9, !dbg !8223

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_subscript_p_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !8223
  %11 = load i32, i32* %i, align 4, !dbg !8223
  %call11 = call %struct.subscript* @VEC_subscript_p_base_index(%struct.VEC_subscript_p_base* %cond10, i32 %11), !dbg !8223
  store %struct.subscript* %call11, %struct.subscript** %subscript, align 8, !dbg !8224
  %12 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !8225
  %conflicting_iterations_in_a = getelementptr inbounds %struct.subscript, %struct.subscript* %12, i32 0, i32 0, !dbg !8225
  %13 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_a, align 8, !dbg !8225
  store %struct.conflict_function* %13, %struct.conflict_function** %cf_a, align 8, !dbg !8226
  %14 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !8227
  %conflicting_iterations_in_b = getelementptr inbounds %struct.subscript, %struct.subscript* %14, i32 0, i32 1, !dbg !8227
  %15 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_b, align 8, !dbg !8227
  store %struct.conflict_function* %15, %struct.conflict_function** %cf_b, align 8, !dbg !8228
  %16 = load %struct.conflict_function*, %struct.conflict_function** %cf_a, align 8, !dbg !8229
  %call12 = call %struct.VEC_tree_heap* @common_affine_function(%struct.conflict_function* %16), !dbg !8230
  store %struct.VEC_tree_heap* %call12, %struct.VEC_tree_heap** %fn_a, align 8, !dbg !8231
  %17 = load %struct.conflict_function*, %struct.conflict_function** %cf_b, align 8, !dbg !8232
  %call13 = call %struct.VEC_tree_heap* @common_affine_function(%struct.conflict_function* %17), !dbg !8233
  store %struct.VEC_tree_heap* %call13, %struct.VEC_tree_heap** %fn_b, align 8, !dbg !8234
  %18 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn_a, align 8, !dbg !8235
  %tobool14 = icmp ne %struct.VEC_tree_heap* %18, null, !dbg !8235
  br i1 %tobool14, label %lor.lhs.false, label %if.then16, !dbg !8237

lor.lhs.false:                                    ; preds = %cond.end9
  %19 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn_b, align 8, !dbg !8238
  %tobool15 = icmp ne %struct.VEC_tree_heap* %19, null, !dbg !8238
  br i1 %tobool15, label %if.end, label %if.then16, !dbg !8239

if.then16:                                        ; preds = %lor.lhs.false, %cond.end9
  %20 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8240
  %21 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !8242
  %distance = getelementptr inbounds %struct.subscript, %struct.subscript* %21, i32 0, i32 3, !dbg !8242
  store %union.tree_node* %20, %union.tree_node** %distance, align 8, !dbg !8243
  br label %if.end25, !dbg !8244

if.end:                                           ; preds = %lor.lhs.false
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn_a, align 8, !dbg !8245
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn_b, align 8, !dbg !8246
  %call17 = call %struct.VEC_tree_heap* @affine_fn_minus(%struct.VEC_tree_heap* %22, %struct.VEC_tree_heap* %23), !dbg !8247
  store %struct.VEC_tree_heap* %call17, %struct.VEC_tree_heap** %diff, align 8, !dbg !8248
  %24 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %diff, align 8, !dbg !8249
  %call18 = call zeroext i8 @affine_function_constant_p(%struct.VEC_tree_heap* %24), !dbg !8251
  %tobool19 = icmp ne i8 %call18, 0, !dbg !8251
  br i1 %tobool19, label %if.then20, label %if.else, !dbg !8252

if.then20:                                        ; preds = %if.end
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %diff, align 8, !dbg !8253
  %call21 = call %union.tree_node* @affine_function_base(%struct.VEC_tree_heap* %25), !dbg !8254
  %26 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !8255
  %distance22 = getelementptr inbounds %struct.subscript, %struct.subscript* %26, i32 0, i32 3, !dbg !8255
  store %union.tree_node* %call21, %union.tree_node** %distance22, align 8, !dbg !8256
  br label %if.end24, !dbg !8255

if.else:                                          ; preds = %if.end
  %27 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8257
  %28 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !8258
  %distance23 = getelementptr inbounds %struct.subscript, %struct.subscript* %28, i32 0, i32 3, !dbg !8258
  store %union.tree_node* %27, %union.tree_node** %distance23, align 8, !dbg !8259
  br label %if.end24

if.end24:                                         ; preds = %if.else, %if.then20
  %29 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %diff, align 8, !dbg !8260
  call void @affine_fn_free(%struct.VEC_tree_heap* %29), !dbg !8261
  br label %for.inc, !dbg !8262

for.inc:                                          ; preds = %if.end24
  %30 = load i32, i32* %i, align 4, !dbg !8263
  %inc = add i32 %30, 1, !dbg !8263
  store i32 %inc, i32* %i, align 4, !dbg !8263
  br label %for.cond, !dbg !8264, !llvm.loop !8265

for.end:                                          ; preds = %cond.end
  br label %if.end25, !dbg !8267

if.end25:                                         ; preds = %if.then16, %for.end, %entry
  ret void, !dbg !8268
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @build_classic_dist_vector(%struct.data_dependence_relation* %ddr, %struct.loop* %loop_nest) #0 !dbg !8269 {
entry:
  %retval = alloca i8, align 1
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %loop_nest.addr = alloca %struct.loop*, align 8
  %init_b = alloca i8, align 1
  %index_carry = alloca i32, align 4
  %dist_v = alloca i32*, align 8
  %save_v = alloca i32*, align 8
  %save_v95 = alloca i32*, align 8
  %opposite_v = alloca i32*, align 8
  %i = alloca i32, align 4
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !8272, metadata !DIExpression()), !dbg !8273
  store %struct.loop* %loop_nest, %struct.loop** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop_nest.addr, metadata !8274, metadata !DIExpression()), !dbg !8275
  call void @llvm.dbg.declare(metadata i8* %init_b, metadata !8276, metadata !DIExpression()), !dbg !8277
  store i8 0, i8* %init_b, align 1, !dbg !8277
  call void @llvm.dbg.declare(metadata i32* %index_carry, metadata !8278, metadata !DIExpression()), !dbg !8279
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8280
  %loop_nest1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 4, !dbg !8280
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest1, align 8, !dbg !8280
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !8280
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8280

cond.true:                                        ; preds = %entry
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8280
  %loop_nest2 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 4, !dbg !8280
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest2, align 8, !dbg !8280
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %3, i32 0, i32 0, !dbg !8280
  br label %cond.end, !dbg !8280

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8280

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8280
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !8280
  store i32 %call, i32* %index_carry, align 4, !dbg !8279
  call void @llvm.dbg.declare(metadata i32** %dist_v, metadata !8281, metadata !DIExpression()), !dbg !8282
  %4 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8283
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %4, i32 0, i32 2, !dbg !8283
  %5 = load %union.tree_node*, %union.tree_node** %are_dependent, align 8, !dbg !8283
  %cmp = icmp ne %union.tree_node* %5, null, !dbg !8285
  br i1 %cmp, label %if.then, label %if.end, !dbg !8286

if.then:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !8287
  br label %return, !dbg !8287

if.end:                                           ; preds = %cond.end
  %6 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8288
  %call3 = call zeroext i8 @same_access_functions(%struct.data_dependence_relation* %6), !dbg !8290
  %tobool4 = icmp ne i8 %call3, 0, !dbg !8290
  br i1 %tobool4, label %if.then5, label %if.end32, !dbg !8291

if.then5:                                         ; preds = %if.end
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8292
  %loop_nest6 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 4, !dbg !8292
  %8 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest6, align 8, !dbg !8292
  %tobool7 = icmp ne %struct.VEC_loop_p_heap* %8, null, !dbg !8292
  br i1 %tobool7, label %cond.true8, label %cond.false11, !dbg !8292

cond.true8:                                       ; preds = %if.then5
  %9 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8292
  %loop_nest9 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %9, i32 0, i32 4, !dbg !8292
  %10 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest9, align 8, !dbg !8292
  %base10 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %10, i32 0, i32 0, !dbg !8292
  br label %cond.end12, !dbg !8292

cond.false11:                                     ; preds = %if.then5
  br label %cond.end12, !dbg !8292

cond.end12:                                       ; preds = %cond.false11, %cond.true8
  %cond13 = phi %struct.VEC_loop_p_base* [ %base10, %cond.true8 ], [ null, %cond.false11 ], !dbg !8292
  %call14 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond13), !dbg !8292
  %call15 = call i32* @lambda_vector_new(i32 %call14), !dbg !8294
  store i32* %call15, i32** %dist_v, align 8, !dbg !8295
  %11 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8296
  %12 = load i32*, i32** %dist_v, align 8, !dbg !8297
  call void @save_dist_v(%struct.data_dependence_relation* %11, i32* %12), !dbg !8298
  %13 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8299
  %call16 = call zeroext i8 @constant_access_functions(%struct.data_dependence_relation* %13), !dbg !8301
  %tobool17 = icmp ne i8 %call16, 0, !dbg !8301
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !8302

if.then18:                                        ; preds = %cond.end12
  %14 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8303
  call void @add_distance_for_zero_overlaps(%struct.data_dependence_relation* %14), !dbg !8304
  br label %if.end19, !dbg !8304

if.end19:                                         ; preds = %if.then18, %cond.end12
  %15 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8305
  %loop_nest20 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %15, i32 0, i32 4, !dbg !8305
  %16 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest20, align 8, !dbg !8305
  %tobool21 = icmp ne %struct.VEC_loop_p_heap* %16, null, !dbg !8305
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !8305

cond.true22:                                      ; preds = %if.end19
  %17 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8305
  %loop_nest23 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %17, i32 0, i32 4, !dbg !8305
  %18 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest23, align 8, !dbg !8305
  %base24 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %18, i32 0, i32 0, !dbg !8305
  br label %cond.end26, !dbg !8305

cond.false25:                                     ; preds = %if.end19
  br label %cond.end26, !dbg !8305

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_loop_p_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !8305
  %call28 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond27), !dbg !8305
  %cmp29 = icmp ugt i32 %call28, 1, !dbg !8307
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !8308

if.then30:                                        ; preds = %cond.end26
  %19 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8309
  call void @add_other_self_distances(%struct.data_dependence_relation* %19), !dbg !8310
  br label %if.end31, !dbg !8310

if.end31:                                         ; preds = %if.then30, %cond.end26
  store i8 1, i8* %retval, align 1, !dbg !8311
  br label %return, !dbg !8311

if.end32:                                         ; preds = %if.end
  %20 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8312
  %loop_nest33 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %20, i32 0, i32 4, !dbg !8312
  %21 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest33, align 8, !dbg !8312
  %tobool34 = icmp ne %struct.VEC_loop_p_heap* %21, null, !dbg !8312
  br i1 %tobool34, label %cond.true35, label %cond.false38, !dbg !8312

cond.true35:                                      ; preds = %if.end32
  %22 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8312
  %loop_nest36 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %22, i32 0, i32 4, !dbg !8312
  %23 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest36, align 8, !dbg !8312
  %base37 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %23, i32 0, i32 0, !dbg !8312
  br label %cond.end39, !dbg !8312

cond.false38:                                     ; preds = %if.end32
  br label %cond.end39, !dbg !8312

cond.end39:                                       ; preds = %cond.false38, %cond.true35
  %cond40 = phi %struct.VEC_loop_p_base* [ %base37, %cond.true35 ], [ null, %cond.false38 ], !dbg !8312
  %call41 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond40), !dbg !8312
  %call42 = call i32* @lambda_vector_new(i32 %call41), !dbg !8313
  store i32* %call42, i32** %dist_v, align 8, !dbg !8314
  %24 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8315
  %25 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8317
  %a = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %25, i32 0, i32 0, !dbg !8317
  %26 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !8317
  %27 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8318
  %b = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %27, i32 0, i32 1, !dbg !8318
  %28 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !8318
  %29 = load i32*, i32** %dist_v, align 8, !dbg !8319
  %call43 = call zeroext i8 @build_classic_dist_vector_1(%struct.data_dependence_relation* %24, %struct.data_reference* %26, %struct.data_reference* %28, i32* %29, i8* %init_b, i32* %index_carry), !dbg !8320
  %tobool44 = icmp ne i8 %call43, 0, !dbg !8320
  br i1 %tobool44, label %if.end46, label %if.then45, !dbg !8321

if.then45:                                        ; preds = %cond.end39
  store i8 0, i8* %retval, align 1, !dbg !8322
  br label %return, !dbg !8322

if.end46:                                         ; preds = %cond.end39
  %30 = load i8, i8* %init_b, align 1, !dbg !8323
  %tobool47 = icmp ne i8 %30, 0, !dbg !8323
  br i1 %tobool47, label %if.then48, label %if.else151, !dbg !8325

if.then48:                                        ; preds = %if.end46
  %31 = load i32*, i32** %dist_v, align 8, !dbg !8326
  %32 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8329
  %loop_nest49 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %32, i32 0, i32 4, !dbg !8329
  %33 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest49, align 8, !dbg !8329
  %tobool50 = icmp ne %struct.VEC_loop_p_heap* %33, null, !dbg !8329
  br i1 %tobool50, label %cond.true51, label %cond.false54, !dbg !8329

cond.true51:                                      ; preds = %if.then48
  %34 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8329
  %loop_nest52 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %34, i32 0, i32 4, !dbg !8329
  %35 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest52, align 8, !dbg !8329
  %base53 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %35, i32 0, i32 0, !dbg !8329
  br label %cond.end55, !dbg !8329

cond.false54:                                     ; preds = %if.then48
  br label %cond.end55, !dbg !8329

cond.end55:                                       ; preds = %cond.false54, %cond.true51
  %cond56 = phi %struct.VEC_loop_p_base* [ %base53, %cond.true51 ], [ null, %cond.false54 ], !dbg !8329
  %call57 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond56), !dbg !8329
  %call58 = call zeroext i8 @lambda_vector_lexico_pos(i32* %31, i32 %call57), !dbg !8330
  %tobool59 = icmp ne i8 %call58, 0, !dbg !8330
  br i1 %tobool59, label %if.else, label %if.then60, !dbg !8331

if.then60:                                        ; preds = %cond.end55
  call void @llvm.dbg.declare(metadata i32** %save_v, metadata !8332, metadata !DIExpression()), !dbg !8334
  %36 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8335
  %loop_nest61 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %36, i32 0, i32 4, !dbg !8335
  %37 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest61, align 8, !dbg !8335
  %tobool62 = icmp ne %struct.VEC_loop_p_heap* %37, null, !dbg !8335
  br i1 %tobool62, label %cond.true63, label %cond.false66, !dbg !8335

cond.true63:                                      ; preds = %if.then60
  %38 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8335
  %loop_nest64 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %38, i32 0, i32 4, !dbg !8335
  %39 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest64, align 8, !dbg !8335
  %base65 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %39, i32 0, i32 0, !dbg !8335
  br label %cond.end67, !dbg !8335

cond.false66:                                     ; preds = %if.then60
  br label %cond.end67, !dbg !8335

cond.end67:                                       ; preds = %cond.false66, %cond.true63
  %cond68 = phi %struct.VEC_loop_p_base* [ %base65, %cond.true63 ], [ null, %cond.false66 ], !dbg !8335
  %call69 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond68), !dbg !8335
  %call70 = call i32* @lambda_vector_new(i32 %call69), !dbg !8336
  store i32* %call70, i32** %save_v, align 8, !dbg !8334
  %40 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8337
  %41 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8339
  %b71 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %41, i32 0, i32 1, !dbg !8339
  %42 = load %struct.data_reference*, %struct.data_reference** %b71, align 8, !dbg !8339
  %43 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8340
  %a72 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %43, i32 0, i32 0, !dbg !8340
  %44 = load %struct.data_reference*, %struct.data_reference** %a72, align 8, !dbg !8340
  %45 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !8341
  %call73 = call zeroext i8 @subscript_dependence_tester_1(%struct.data_dependence_relation* %40, %struct.data_reference* %42, %struct.data_reference* %44, %struct.loop* %45), !dbg !8342
  %tobool74 = icmp ne i8 %call73, 0, !dbg !8342
  br i1 %tobool74, label %if.end76, label %if.then75, !dbg !8343

if.then75:                                        ; preds = %cond.end67
  store i8 0, i8* %retval, align 1, !dbg !8344
  br label %return, !dbg !8344

if.end76:                                         ; preds = %cond.end67
  %46 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8345
  call void @compute_subscript_distance(%struct.data_dependence_relation* %46), !dbg !8346
  %47 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8347
  %48 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8349
  %b77 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %48, i32 0, i32 1, !dbg !8349
  %49 = load %struct.data_reference*, %struct.data_reference** %b77, align 8, !dbg !8349
  %50 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8350
  %a78 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %50, i32 0, i32 0, !dbg !8350
  %51 = load %struct.data_reference*, %struct.data_reference** %a78, align 8, !dbg !8350
  %52 = load i32*, i32** %save_v, align 8, !dbg !8351
  %call79 = call zeroext i8 @build_classic_dist_vector_1(%struct.data_dependence_relation* %47, %struct.data_reference* %49, %struct.data_reference* %51, i32* %52, i8* %init_b, i32* %index_carry), !dbg !8352
  %tobool80 = icmp ne i8 %call79, 0, !dbg !8352
  br i1 %tobool80, label %if.end82, label %if.then81, !dbg !8353

if.then81:                                        ; preds = %if.end76
  store i8 0, i8* %retval, align 1, !dbg !8354
  br label %return, !dbg !8354

if.end82:                                         ; preds = %if.end76
  %53 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8355
  %54 = load i32*, i32** %save_v, align 8, !dbg !8356
  call void @save_dist_v(%struct.data_dependence_relation* %53, i32* %54), !dbg !8357
  %55 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8358
  %reversed_p = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %55, i32 0, i32 8, !dbg !8358
  store i8 1, i8* %reversed_p, align 4, !dbg !8359
  %56 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8360
  %loop_nest83 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %56, i32 0, i32 4, !dbg !8360
  %57 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest83, align 8, !dbg !8360
  %tobool84 = icmp ne %struct.VEC_loop_p_heap* %57, null, !dbg !8360
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !8360

cond.true85:                                      ; preds = %if.end82
  %58 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8360
  %loop_nest86 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %58, i32 0, i32 4, !dbg !8360
  %59 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest86, align 8, !dbg !8360
  %base87 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %59, i32 0, i32 0, !dbg !8360
  br label %cond.end89, !dbg !8360

cond.false88:                                     ; preds = %if.end82
  br label %cond.end89, !dbg !8360

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_loop_p_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !8360
  %call91 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond90), !dbg !8360
  %cmp92 = icmp ugt i32 %call91, 1, !dbg !8362
  br i1 %cmp92, label %if.then93, label %if.end94, !dbg !8363

if.then93:                                        ; preds = %cond.end89
  %60 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8364
  %61 = load i32*, i32** %save_v, align 8, !dbg !8366
  %62 = load i32, i32* %index_carry, align 4, !dbg !8367
  call void @add_outer_distances(%struct.data_dependence_relation* %60, i32* %61, i32 %62), !dbg !8368
  %63 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8369
  %64 = load i32*, i32** %dist_v, align 8, !dbg !8370
  %65 = load i32, i32* %index_carry, align 4, !dbg !8371
  call void @add_outer_distances(%struct.data_dependence_relation* %63, i32* %64, i32 %65), !dbg !8372
  br label %if.end94, !dbg !8373

if.end94:                                         ; preds = %if.then93, %cond.end89
  br label %if.end150, !dbg !8374

if.else:                                          ; preds = %cond.end55
  call void @llvm.dbg.declare(metadata i32** %save_v95, metadata !8375, metadata !DIExpression()), !dbg !8377
  %66 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8378
  %loop_nest96 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %66, i32 0, i32 4, !dbg !8378
  %67 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest96, align 8, !dbg !8378
  %tobool97 = icmp ne %struct.VEC_loop_p_heap* %67, null, !dbg !8378
  br i1 %tobool97, label %cond.true98, label %cond.false101, !dbg !8378

cond.true98:                                      ; preds = %if.else
  %68 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8378
  %loop_nest99 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %68, i32 0, i32 4, !dbg !8378
  %69 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest99, align 8, !dbg !8378
  %base100 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %69, i32 0, i32 0, !dbg !8378
  br label %cond.end102, !dbg !8378

cond.false101:                                    ; preds = %if.else
  br label %cond.end102, !dbg !8378

cond.end102:                                      ; preds = %cond.false101, %cond.true98
  %cond103 = phi %struct.VEC_loop_p_base* [ %base100, %cond.true98 ], [ null, %cond.false101 ], !dbg !8378
  %call104 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond103), !dbg !8378
  %call105 = call i32* @lambda_vector_new(i32 %call104), !dbg !8379
  store i32* %call105, i32** %save_v95, align 8, !dbg !8377
  %70 = load i32*, i32** %dist_v, align 8, !dbg !8380
  %71 = load i32*, i32** %save_v95, align 8, !dbg !8381
  %72 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8382
  %loop_nest106 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %72, i32 0, i32 4, !dbg !8382
  %73 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest106, align 8, !dbg !8382
  %tobool107 = icmp ne %struct.VEC_loop_p_heap* %73, null, !dbg !8382
  br i1 %tobool107, label %cond.true108, label %cond.false111, !dbg !8382

cond.true108:                                     ; preds = %cond.end102
  %74 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8382
  %loop_nest109 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %74, i32 0, i32 4, !dbg !8382
  %75 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest109, align 8, !dbg !8382
  %base110 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %75, i32 0, i32 0, !dbg !8382
  br label %cond.end112, !dbg !8382

cond.false111:                                    ; preds = %cond.end102
  br label %cond.end112, !dbg !8382

cond.end112:                                      ; preds = %cond.false111, %cond.true108
  %cond113 = phi %struct.VEC_loop_p_base* [ %base110, %cond.true108 ], [ null, %cond.false111 ], !dbg !8382
  %call114 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond113), !dbg !8382
  call void @lambda_vector_copy(i32* %70, i32* %71, i32 %call114), !dbg !8383
  %76 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8384
  %loop_nest115 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %76, i32 0, i32 4, !dbg !8384
  %77 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest115, align 8, !dbg !8384
  %tobool116 = icmp ne %struct.VEC_loop_p_heap* %77, null, !dbg !8384
  br i1 %tobool116, label %cond.true117, label %cond.false120, !dbg !8384

cond.true117:                                     ; preds = %cond.end112
  %78 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8384
  %loop_nest118 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %78, i32 0, i32 4, !dbg !8384
  %79 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest118, align 8, !dbg !8384
  %base119 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %79, i32 0, i32 0, !dbg !8384
  br label %cond.end121, !dbg !8384

cond.false120:                                    ; preds = %cond.end112
  br label %cond.end121, !dbg !8384

cond.end121:                                      ; preds = %cond.false120, %cond.true117
  %cond122 = phi %struct.VEC_loop_p_base* [ %base119, %cond.true117 ], [ null, %cond.false120 ], !dbg !8384
  %call123 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond122), !dbg !8384
  %cmp124 = icmp ugt i32 %call123, 1, !dbg !8386
  br i1 %cmp124, label %if.then125, label %if.else148, !dbg !8387

if.then125:                                       ; preds = %cond.end121
  call void @llvm.dbg.declare(metadata i32** %opposite_v, metadata !8388, metadata !DIExpression()), !dbg !8390
  %80 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8391
  %loop_nest126 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %80, i32 0, i32 4, !dbg !8391
  %81 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest126, align 8, !dbg !8391
  %tobool127 = icmp ne %struct.VEC_loop_p_heap* %81, null, !dbg !8391
  br i1 %tobool127, label %cond.true128, label %cond.false131, !dbg !8391

cond.true128:                                     ; preds = %if.then125
  %82 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8391
  %loop_nest129 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %82, i32 0, i32 4, !dbg !8391
  %83 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest129, align 8, !dbg !8391
  %base130 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %83, i32 0, i32 0, !dbg !8391
  br label %cond.end132, !dbg !8391

cond.false131:                                    ; preds = %if.then125
  br label %cond.end132, !dbg !8391

cond.end132:                                      ; preds = %cond.false131, %cond.true128
  %cond133 = phi %struct.VEC_loop_p_base* [ %base130, %cond.true128 ], [ null, %cond.false131 ], !dbg !8391
  %call134 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond133), !dbg !8391
  %call135 = call i32* @lambda_vector_new(i32 %call134), !dbg !8392
  store i32* %call135, i32** %opposite_v, align 8, !dbg !8390
  %84 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8393
  %85 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8395
  %b136 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %85, i32 0, i32 1, !dbg !8395
  %86 = load %struct.data_reference*, %struct.data_reference** %b136, align 8, !dbg !8395
  %87 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8396
  %a137 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %87, i32 0, i32 0, !dbg !8396
  %88 = load %struct.data_reference*, %struct.data_reference** %a137, align 8, !dbg !8396
  %89 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !8397
  %call138 = call zeroext i8 @subscript_dependence_tester_1(%struct.data_dependence_relation* %84, %struct.data_reference* %86, %struct.data_reference* %88, %struct.loop* %89), !dbg !8398
  %tobool139 = icmp ne i8 %call138, 0, !dbg !8398
  br i1 %tobool139, label %if.end141, label %if.then140, !dbg !8399

if.then140:                                       ; preds = %cond.end132
  store i8 0, i8* %retval, align 1, !dbg !8400
  br label %return, !dbg !8400

if.end141:                                        ; preds = %cond.end132
  %90 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8401
  call void @compute_subscript_distance(%struct.data_dependence_relation* %90), !dbg !8402
  %91 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8403
  %92 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8405
  %b142 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %92, i32 0, i32 1, !dbg !8405
  %93 = load %struct.data_reference*, %struct.data_reference** %b142, align 8, !dbg !8405
  %94 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8406
  %a143 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %94, i32 0, i32 0, !dbg !8406
  %95 = load %struct.data_reference*, %struct.data_reference** %a143, align 8, !dbg !8406
  %96 = load i32*, i32** %opposite_v, align 8, !dbg !8407
  %call144 = call zeroext i8 @build_classic_dist_vector_1(%struct.data_dependence_relation* %91, %struct.data_reference* %93, %struct.data_reference* %95, i32* %96, i8* %init_b, i32* %index_carry), !dbg !8408
  %tobool145 = icmp ne i8 %call144, 0, !dbg !8408
  br i1 %tobool145, label %if.end147, label %if.then146, !dbg !8409

if.then146:                                       ; preds = %if.end141
  store i8 0, i8* %retval, align 1, !dbg !8410
  br label %return, !dbg !8410

if.end147:                                        ; preds = %if.end141
  %97 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8411
  %98 = load i32*, i32** %save_v95, align 8, !dbg !8412
  call void @save_dist_v(%struct.data_dependence_relation* %97, i32* %98), !dbg !8413
  %99 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8414
  %100 = load i32*, i32** %dist_v, align 8, !dbg !8415
  %101 = load i32, i32* %index_carry, align 4, !dbg !8416
  call void @add_outer_distances(%struct.data_dependence_relation* %99, i32* %100, i32 %101), !dbg !8417
  %102 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8418
  %103 = load i32*, i32** %opposite_v, align 8, !dbg !8419
  %104 = load i32, i32* %index_carry, align 4, !dbg !8420
  call void @add_outer_distances(%struct.data_dependence_relation* %102, i32* %103, i32 %104), !dbg !8421
  br label %if.end149, !dbg !8422

if.else148:                                       ; preds = %cond.end121
  %105 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8423
  %106 = load i32*, i32** %save_v95, align 8, !dbg !8424
  call void @save_dist_v(%struct.data_dependence_relation* %105, i32* %106), !dbg !8425
  br label %if.end149

if.end149:                                        ; preds = %if.else148, %if.end147
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %if.end94
  br label %if.end162, !dbg !8426

if.else151:                                       ; preds = %if.end46
  %107 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8427
  %108 = load i32*, i32** %dist_v, align 8, !dbg !8429
  %109 = load i32*, i32** %dist_v, align 8, !dbg !8430
  %110 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8431
  %loop_nest152 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %110, i32 0, i32 4, !dbg !8431
  %111 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest152, align 8, !dbg !8431
  %tobool153 = icmp ne %struct.VEC_loop_p_heap* %111, null, !dbg !8431
  br i1 %tobool153, label %cond.true154, label %cond.false157, !dbg !8431

cond.true154:                                     ; preds = %if.else151
  %112 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8431
  %loop_nest155 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %112, i32 0, i32 4, !dbg !8431
  %113 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest155, align 8, !dbg !8431
  %base156 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %113, i32 0, i32 0, !dbg !8431
  br label %cond.end158, !dbg !8431

cond.false157:                                    ; preds = %if.else151
  br label %cond.end158, !dbg !8431

cond.end158:                                      ; preds = %cond.false157, %cond.true154
  %cond159 = phi %struct.VEC_loop_p_base* [ %base156, %cond.true154 ], [ null, %cond.false157 ], !dbg !8431
  %call160 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond159), !dbg !8431
  %call161 = call i32 @lambda_vector_first_nz(i32* %109, i32 %call160, i32 0), !dbg !8432
  call void @add_outer_distances(%struct.data_dependence_relation* %107, i32* %108, i32 %call161), !dbg !8433
  br label %if.end162

if.end162:                                        ; preds = %cond.end158, %if.end150
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8434
  %tobool163 = icmp ne %struct._IO_FILE* %114, null, !dbg !8434
  br i1 %tobool163, label %land.lhs.true, label %if.end197, !dbg !8436

land.lhs.true:                                    ; preds = %if.end162
  %115 = load i32, i32* @dump_flags, align 4, !dbg !8437
  %and = and i32 %115, 8, !dbg !8438
  %tobool164 = icmp ne i32 %and, 0, !dbg !8438
  br i1 %tobool164, label %if.then165, label %if.end197, !dbg !8439

if.then165:                                       ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8440, metadata !DIExpression()), !dbg !8442
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8443
  %call166 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %116, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.125, i64 0, i64 0)), !dbg !8444
  store i32 0, i32* %i, align 4, !dbg !8445
  br label %for.cond, !dbg !8447

for.cond:                                         ; preds = %for.inc, %if.then165
  %117 = load i32, i32* %i, align 4, !dbg !8448
  %118 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8450
  %dist_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %118, i32 0, i32 6, !dbg !8450
  %119 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects, align 8, !dbg !8450
  %tobool167 = icmp ne %struct.VEC_lambda_vector_heap* %119, null, !dbg !8450
  br i1 %tobool167, label %cond.true168, label %cond.false171, !dbg !8450

cond.true168:                                     ; preds = %for.cond
  %120 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8450
  %dist_vects169 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %120, i32 0, i32 6, !dbg !8450
  %121 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects169, align 8, !dbg !8450
  %base170 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %121, i32 0, i32 0, !dbg !8450
  br label %cond.end172, !dbg !8450

cond.false171:                                    ; preds = %for.cond
  br label %cond.end172, !dbg !8450

cond.end172:                                      ; preds = %cond.false171, %cond.true168
  %cond173 = phi %struct.VEC_lambda_vector_base* [ %base170, %cond.true168 ], [ null, %cond.false171 ], !dbg !8450
  %call174 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond173), !dbg !8450
  %cmp175 = icmp ult i32 %117, %call174, !dbg !8451
  br i1 %cmp175, label %for.body, label %for.end, !dbg !8452

for.body:                                         ; preds = %cond.end172
  %122 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8453
  %call176 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %122, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.126, i64 0, i64 0)), !dbg !8455
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8456
  %124 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8457
  %dist_vects177 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %124, i32 0, i32 6, !dbg !8457
  %125 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects177, align 8, !dbg !8457
  %tobool178 = icmp ne %struct.VEC_lambda_vector_heap* %125, null, !dbg !8457
  br i1 %tobool178, label %cond.true179, label %cond.false182, !dbg !8457

cond.true179:                                     ; preds = %for.body
  %126 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8457
  %dist_vects180 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %126, i32 0, i32 6, !dbg !8457
  %127 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects180, align 8, !dbg !8457
  %base181 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %127, i32 0, i32 0, !dbg !8457
  br label %cond.end183, !dbg !8457

cond.false182:                                    ; preds = %for.body
  br label %cond.end183, !dbg !8457

cond.end183:                                      ; preds = %cond.false182, %cond.true179
  %cond184 = phi %struct.VEC_lambda_vector_base* [ %base181, %cond.true179 ], [ null, %cond.false182 ], !dbg !8457
  %128 = load i32, i32* %i, align 4, !dbg !8457
  %call185 = call i32* @VEC_lambda_vector_base_index(%struct.VEC_lambda_vector_base* %cond184, i32 %128), !dbg !8457
  %129 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8458
  %loop_nest186 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %129, i32 0, i32 4, !dbg !8458
  %130 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest186, align 8, !dbg !8458
  %tobool187 = icmp ne %struct.VEC_loop_p_heap* %130, null, !dbg !8458
  br i1 %tobool187, label %cond.true188, label %cond.false191, !dbg !8458

cond.true188:                                     ; preds = %cond.end183
  %131 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8458
  %loop_nest189 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %131, i32 0, i32 4, !dbg !8458
  %132 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest189, align 8, !dbg !8458
  %base190 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %132, i32 0, i32 0, !dbg !8458
  br label %cond.end192, !dbg !8458

cond.false191:                                    ; preds = %cond.end183
  br label %cond.end192, !dbg !8458

cond.end192:                                      ; preds = %cond.false191, %cond.true188
  %cond193 = phi %struct.VEC_loop_p_base* [ %base190, %cond.true188 ], [ null, %cond.false191 ], !dbg !8458
  %call194 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond193), !dbg !8458
  call void @print_lambda_vector(%struct._IO_FILE* %123, i32* %call185, i32 %call194), !dbg !8459
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8460
  %call195 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %133, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0)), !dbg !8461
  br label %for.inc, !dbg !8462

for.inc:                                          ; preds = %cond.end192
  %134 = load i32, i32* %i, align 4, !dbg !8463
  %inc = add i32 %134, 1, !dbg !8463
  store i32 %inc, i32* %i, align 4, !dbg !8463
  br label %for.cond, !dbg !8464, !llvm.loop !8465

for.end:                                          ; preds = %cond.end172
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8467
  %call196 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %135, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !8468
  br label %if.end197, !dbg !8469

if.end197:                                        ; preds = %for.end, %land.lhs.true, %if.end162
  store i8 1, i8* %retval, align 1, !dbg !8470
  br label %return, !dbg !8470

return:                                           ; preds = %if.end197, %if.then146, %if.then140, %if.then81, %if.then75, %if.then45, %if.end31, %if.then
  %136 = load i8, i8* %retval, align 1, !dbg !8471
  ret i8 %136, !dbg !8471
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_classic_dir_vector(%struct.data_dependence_relation* %ddr) #0 !dbg !8472 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %dist_v = alloca i32*, align 8
  %dir_v = alloca i32*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !8473, metadata !DIExpression()), !dbg !8474
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8475, metadata !DIExpression()), !dbg !8476
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8477, metadata !DIExpression()), !dbg !8478
  call void @llvm.dbg.declare(metadata i32** %dist_v, metadata !8479, metadata !DIExpression()), !dbg !8480
  store i32 0, i32* %i, align 4, !dbg !8481
  br label %for.cond, !dbg !8483

for.cond:                                         ; preds = %for.inc26, %entry
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8484
  %dist_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 6, !dbg !8484
  %1 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects, align 8, !dbg !8484
  %tobool = icmp ne %struct.VEC_lambda_vector_heap* %1, null, !dbg !8484
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8484

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8484
  %dist_vects1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 6, !dbg !8484
  %3 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects1, align 8, !dbg !8484
  %base = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %3, i32 0, i32 0, !dbg !8484
  br label %cond.end, !dbg !8484

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8484

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lambda_vector_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8484
  %4 = load i32, i32* %i, align 4, !dbg !8484
  %call = call i32 @VEC_lambda_vector_base_iterate(%struct.VEC_lambda_vector_base* %cond, i32 %4, i32** %dist_v), !dbg !8484
  %tobool2 = icmp ne i32 %call, 0, !dbg !8486
  br i1 %tobool2, label %for.body, label %for.end28, !dbg !8486

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32** %dir_v, metadata !8487, metadata !DIExpression()), !dbg !8489
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8490
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 4, !dbg !8490
  %6 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !8490
  %tobool3 = icmp ne %struct.VEC_loop_p_heap* %6, null, !dbg !8490
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !8490

cond.true4:                                       ; preds = %for.body
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8490
  %loop_nest5 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 4, !dbg !8490
  %8 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest5, align 8, !dbg !8490
  %base6 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %8, i32 0, i32 0, !dbg !8490
  br label %cond.end8, !dbg !8490

cond.false7:                                      ; preds = %for.body
  br label %cond.end8, !dbg !8490

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !8490
  %call10 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond9), !dbg !8490
  %call11 = call i32* @lambda_vector_new(i32 %call10), !dbg !8491
  store i32* %call11, i32** %dir_v, align 8, !dbg !8489
  store i32 0, i32* %j, align 4, !dbg !8492
  br label %for.cond12, !dbg !8494

for.cond12:                                       ; preds = %for.inc, %cond.end8
  %9 = load i32, i32* %j, align 4, !dbg !8495
  %10 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8497
  %loop_nest13 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %10, i32 0, i32 4, !dbg !8497
  %11 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest13, align 8, !dbg !8497
  %tobool14 = icmp ne %struct.VEC_loop_p_heap* %11, null, !dbg !8497
  br i1 %tobool14, label %cond.true15, label %cond.false18, !dbg !8497

cond.true15:                                      ; preds = %for.cond12
  %12 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8497
  %loop_nest16 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %12, i32 0, i32 4, !dbg !8497
  %13 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest16, align 8, !dbg !8497
  %base17 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %13, i32 0, i32 0, !dbg !8497
  br label %cond.end19, !dbg !8497

cond.false18:                                     ; preds = %for.cond12
  br label %cond.end19, !dbg !8497

cond.end19:                                       ; preds = %cond.false18, %cond.true15
  %cond20 = phi %struct.VEC_loop_p_base* [ %base17, %cond.true15 ], [ null, %cond.false18 ], !dbg !8497
  %call21 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond20), !dbg !8497
  %cmp = icmp ult i32 %9, %call21, !dbg !8498
  br i1 %cmp, label %for.body22, label %for.end, !dbg !8499

for.body22:                                       ; preds = %cond.end19
  %14 = load i32*, i32** %dist_v, align 8, !dbg !8500
  %15 = load i32, i32* %j, align 4, !dbg !8501
  %idxprom = zext i32 %15 to i64, !dbg !8500
  %arrayidx = getelementptr inbounds i32, i32* %14, i64 %idxprom, !dbg !8500
  %16 = load i32, i32* %arrayidx, align 4, !dbg !8500
  %call23 = call i32 @dir_from_dist(i32 %16), !dbg !8502
  %17 = load i32*, i32** %dir_v, align 8, !dbg !8503
  %18 = load i32, i32* %j, align 4, !dbg !8504
  %idxprom24 = zext i32 %18 to i64, !dbg !8503
  %arrayidx25 = getelementptr inbounds i32, i32* %17, i64 %idxprom24, !dbg !8503
  store i32 %call23, i32* %arrayidx25, align 4, !dbg !8505
  br label %for.inc, !dbg !8503

for.inc:                                          ; preds = %for.body22
  %19 = load i32, i32* %j, align 4, !dbg !8506
  %inc = add i32 %19, 1, !dbg !8506
  store i32 %inc, i32* %j, align 4, !dbg !8506
  br label %for.cond12, !dbg !8507, !llvm.loop !8508

for.end:                                          ; preds = %cond.end19
  %20 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !8510
  %21 = load i32*, i32** %dir_v, align 8, !dbg !8511
  call void @save_dir_v(%struct.data_dependence_relation* %20, i32* %21), !dbg !8512
  br label %for.inc26, !dbg !8513

for.inc26:                                        ; preds = %for.end
  %22 = load i32, i32* %i, align 4, !dbg !8514
  %inc27 = add i32 %22, 1, !dbg !8514
  store i32 %inc27, i32* %i, align 4, !dbg !8514
  br label %for.cond, !dbg !8515, !llvm.loop !8516

for.end28:                                        ; preds = %cond.end
  ret void, !dbg !8518
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_subscript_p_base_iterate(%struct.VEC_subscript_p_base* %vec_, i32 %ix_, %struct.subscript** %ptr) #0 !dbg !8519 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_subscript_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.subscript**, align 8
  store %struct.VEC_subscript_p_base* %vec_, %struct.VEC_subscript_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_subscript_p_base** %vec_.addr, metadata !8522, metadata !DIExpression()), !dbg !8523
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8524, metadata !DIExpression()), !dbg !8523
  store %struct.subscript** %ptr, %struct.subscript*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.subscript*** %ptr.addr, metadata !8525, metadata !DIExpression()), !dbg !8523
  %0 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !8526
  %tobool = icmp ne %struct.VEC_subscript_p_base* %0, null, !dbg !8526
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8526

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8526
  %2 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !8526
  %num = getelementptr inbounds %struct.VEC_subscript_p_base, %struct.VEC_subscript_p_base* %2, i32 0, i32 0, !dbg !8526
  %3 = load i32, i32* %num, align 8, !dbg !8526
  %cmp = icmp ult i32 %1, %3, !dbg !8526
  br i1 %cmp, label %if.then, label %if.else, !dbg !8523

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_subscript_p_base*, %struct.VEC_subscript_p_base** %vec_.addr, align 8, !dbg !8528
  %vec = getelementptr inbounds %struct.VEC_subscript_p_base, %struct.VEC_subscript_p_base* %4, i32 0, i32 2, !dbg !8528
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8528
  %idxprom = zext i32 %5 to i64, !dbg !8528
  %arrayidx = getelementptr inbounds [1 x %struct.subscript*], [1 x %struct.subscript*]* %vec, i64 0, i64 %idxprom, !dbg !8528
  %6 = load %struct.subscript*, %struct.subscript** %arrayidx, align 8, !dbg !8528
  %7 = load %struct.subscript**, %struct.subscript*** %ptr.addr, align 8, !dbg !8528
  store %struct.subscript* %6, %struct.subscript** %7, align 8, !dbg !8528
  store i32 1, i32* %retval, align 4, !dbg !8528
  br label %return, !dbg !8528

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.subscript**, %struct.subscript*** %ptr.addr, align 8, !dbg !8530
  store %struct.subscript* null, %struct.subscript** %8, align 8, !dbg !8530
  store i32 0, i32* %retval, align 4, !dbg !8530
  br label %return, !dbg !8530

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8523
  ret i32 %9, !dbg !8523
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_overlapping_iterations(%union.tree_node* %chrec_a, %union.tree_node* %chrec_b, %struct.conflict_function** %overlap_iterations_a, %struct.conflict_function** %overlap_iterations_b, %union.tree_node** %last_conflicts, %struct.loop* %loop_nest) #0 !dbg !8532 {
entry:
  %chrec_a.addr = alloca %union.tree_node*, align 8
  %chrec_b.addr = alloca %union.tree_node*, align 8
  %overlap_iterations_a.addr = alloca %struct.conflict_function**, align 8
  %overlap_iterations_b.addr = alloca %struct.conflict_function**, align 8
  %last_conflicts.addr = alloca %union.tree_node**, align 8
  %loop_nest.addr = alloca %struct.loop*, align 8
  %lnn = alloca i32, align 4
  store %union.tree_node* %chrec_a, %union.tree_node** %chrec_a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_a.addr, metadata !8536, metadata !DIExpression()), !dbg !8537
  store %union.tree_node* %chrec_b, %union.tree_node** %chrec_b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_b.addr, metadata !8538, metadata !DIExpression()), !dbg !8539
  store %struct.conflict_function** %overlap_iterations_a, %struct.conflict_function*** %overlap_iterations_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlap_iterations_a.addr, metadata !8540, metadata !DIExpression()), !dbg !8541
  store %struct.conflict_function** %overlap_iterations_b, %struct.conflict_function*** %overlap_iterations_b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlap_iterations_b.addr, metadata !8542, metadata !DIExpression()), !dbg !8543
  store %union.tree_node** %last_conflicts, %union.tree_node*** %last_conflicts.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %last_conflicts.addr, metadata !8544, metadata !DIExpression()), !dbg !8545
  store %struct.loop* %loop_nest, %struct.loop** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop_nest.addr, metadata !8546, metadata !DIExpression()), !dbg !8547
  call void @llvm.dbg.declare(metadata i32* %lnn, metadata !8548, metadata !DIExpression()), !dbg !8549
  %0 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !8550
  %num = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 0, !dbg !8551
  %1 = load i32, i32* %num, align 8, !dbg !8551
  store i32 %1, i32* %lnn, align 4, !dbg !8549
  %2 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 4), align 4, !dbg !8552
  %inc = add nsw i32 %2, 1, !dbg !8552
  store i32 %inc, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 4), align 4, !dbg !8552
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8553
  %tobool = icmp ne %struct._IO_FILE* %3, null, !dbg !8553
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8555

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @dump_flags, align 4, !dbg !8556
  %and = and i32 %4, 8, !dbg !8557
  %tobool1 = icmp ne i32 %and, 0, !dbg !8557
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8558

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8559
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.104, i64 0, i64 0)), !dbg !8561
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8562
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.105, i64 0, i64 0)), !dbg !8563
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8564
  %8 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8565
  call void @print_generic_expr(%struct._IO_FILE* %7, %union.tree_node* %8, i32 0), !dbg !8566
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8567
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.106, i64 0, i64 0)), !dbg !8568
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8569
  %11 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8570
  call void @print_generic_expr(%struct._IO_FILE* %10, %union.tree_node* %11, i32 0), !dbg !8571
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8572
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !8573
  br label %if.end, !dbg !8574

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8575
  %cmp = icmp eq %union.tree_node* %13, null, !dbg !8577
  br i1 %cmp, label %if.then13, label %lor.lhs.false, !dbg !8578

lor.lhs.false:                                    ; preds = %if.end
  %14 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8579
  %cmp5 = icmp eq %union.tree_node* %14, null, !dbg !8580
  br i1 %cmp5, label %if.then13, label %lor.lhs.false6, !dbg !8581

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %15 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8582
  %call7 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %15), !dbg !8583
  %conv = zext i8 %call7 to i32, !dbg !8583
  %tobool8 = icmp ne i32 %conv, 0, !dbg !8583
  br i1 %tobool8, label %if.then13, label %lor.lhs.false9, !dbg !8584

lor.lhs.false9:                                   ; preds = %lor.lhs.false6
  %16 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8585
  %call10 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %16), !dbg !8586
  %conv11 = zext i8 %call10 to i32, !dbg !8586
  %tobool12 = icmp ne i32 %conv11, 0, !dbg !8586
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !8587

if.then13:                                        ; preds = %lor.lhs.false9, %lor.lhs.false6, %lor.lhs.false, %if.end
  %17 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 5), align 4, !dbg !8588
  %inc14 = add nsw i32 %17, 1, !dbg !8588
  store i32 %inc14, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 5), align 4, !dbg !8588
  %call15 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !8590
  %18 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_a.addr, align 8, !dbg !8591
  store %struct.conflict_function* %call15, %struct.conflict_function** %18, align 8, !dbg !8592
  %call16 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !8593
  %19 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_b.addr, align 8, !dbg !8594
  store %struct.conflict_function* %call16, %struct.conflict_function** %19, align 8, !dbg !8595
  br label %if.end61, !dbg !8596

if.else:                                          ; preds = %lor.lhs.false9
  %20 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8597
  %21 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8599
  %call17 = call zeroext i8 @eq_evolutions_p(%union.tree_node* %20, %union.tree_node* %21), !dbg !8600
  %conv18 = zext i8 %call17 to i32, !dbg !8600
  %tobool19 = icmp ne i32 %conv18, 0, !dbg !8600
  br i1 %tobool19, label %land.lhs.true20, label %if.else30, !dbg !8601

land.lhs.true20:                                  ; preds = %if.else
  %22 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8602
  %23 = load i32, i32* %lnn, align 4, !dbg !8603
  %call21 = call zeroext i8 @evolution_function_is_affine_multivariate_p(%union.tree_node* %22, i32 %23), !dbg !8604
  %conv22 = zext i8 %call21 to i32, !dbg !8604
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !8604
  br i1 %tobool23, label %if.then24, label %if.else30, !dbg !8605

if.then24:                                        ; preds = %land.lhs.true20
  %24 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 6), align 4, !dbg !8606
  %inc25 = add nsw i32 %24, 1, !dbg !8606
  store i32 %inc25, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 6), align 4, !dbg !8606
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !8608
  %call26 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %25), !dbg !8609
  %call27 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call26), !dbg !8610
  %26 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_a.addr, align 8, !dbg !8611
  store %struct.conflict_function* %call27, %struct.conflict_function** %26, align 8, !dbg !8612
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !8613
  %call28 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %27), !dbg !8614
  %call29 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call28), !dbg !8615
  %28 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_b.addr, align 8, !dbg !8616
  store %struct.conflict_function* %call29, %struct.conflict_function** %28, align 8, !dbg !8617
  %29 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8618
  %30 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !8619
  store %union.tree_node* %29, %union.tree_node** %30, align 8, !dbg !8620
  br label %if.end60, !dbg !8621

if.else30:                                        ; preds = %land.lhs.true20, %if.else
  %31 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8622
  %call31 = call zeroext i8 @chrec_contains_symbols(%union.tree_node* %31), !dbg !8624
  %conv32 = zext i8 %call31 to i32, !dbg !8624
  %tobool33 = icmp ne i32 %conv32, 0, !dbg !8624
  br i1 %tobool33, label %land.lhs.true38, label %lor.lhs.false34, !dbg !8625

lor.lhs.false34:                                  ; preds = %if.else30
  %32 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8626
  %call35 = call zeroext i8 @chrec_contains_symbols(%union.tree_node* %32), !dbg !8627
  %conv36 = zext i8 %call35 to i32, !dbg !8627
  %tobool37 = icmp ne i32 %conv36, 0, !dbg !8627
  br i1 %tobool37, label %land.lhs.true38, label %if.else48, !dbg !8628

land.lhs.true38:                                  ; preds = %lor.lhs.false34, %if.else30
  %33 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8629
  %34 = load i32, i32* %lnn, align 4, !dbg !8630
  %call39 = call zeroext i8 @evolution_function_is_affine_multivariate_p(%union.tree_node* %33, i32 %34), !dbg !8631
  %tobool40 = icmp ne i8 %call39, 0, !dbg !8631
  br i1 %tobool40, label %lor.lhs.false41, label %if.then44, !dbg !8632

lor.lhs.false41:                                  ; preds = %land.lhs.true38
  %35 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8633
  %36 = load i32, i32* %lnn, align 4, !dbg !8634
  %call42 = call zeroext i8 @evolution_function_is_affine_multivariate_p(%union.tree_node* %35, i32 %36), !dbg !8635
  %tobool43 = icmp ne i8 %call42, 0, !dbg !8635
  br i1 %tobool43, label %if.else48, label %if.then44, !dbg !8636

if.then44:                                        ; preds = %lor.lhs.false41, %land.lhs.true38
  %37 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 5), align 4, !dbg !8637
  %inc45 = add nsw i32 %37, 1, !dbg !8637
  store i32 %inc45, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 5), align 4, !dbg !8637
  %call46 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !8639
  %38 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_a.addr, align 8, !dbg !8640
  store %struct.conflict_function* %call46, %struct.conflict_function** %38, align 8, !dbg !8641
  %call47 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !8642
  %39 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_b.addr, align 8, !dbg !8643
  store %struct.conflict_function* %call47, %struct.conflict_function** %39, align 8, !dbg !8644
  br label %if.end59, !dbg !8645

if.else48:                                        ; preds = %lor.lhs.false41, %lor.lhs.false34
  %40 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8646
  %41 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8648
  %call49 = call zeroext i8 @ziv_subscript_p(%union.tree_node* %40, %union.tree_node* %41), !dbg !8649
  %tobool50 = icmp ne i8 %call49, 0, !dbg !8649
  br i1 %tobool50, label %if.then51, label %if.else52, !dbg !8650

if.then51:                                        ; preds = %if.else48
  %42 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8651
  %43 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8652
  %44 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_a.addr, align 8, !dbg !8653
  %45 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_b.addr, align 8, !dbg !8654
  %46 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !8655
  call void @analyze_ziv_subscript(%union.tree_node* %42, %union.tree_node* %43, %struct.conflict_function** %44, %struct.conflict_function** %45, %union.tree_node** %46), !dbg !8656
  br label %if.end58, !dbg !8656

if.else52:                                        ; preds = %if.else48
  %47 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8657
  %48 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8659
  %call53 = call zeroext i8 @siv_subscript_p(%union.tree_node* %47, %union.tree_node* %48), !dbg !8660
  %tobool54 = icmp ne i8 %call53, 0, !dbg !8660
  br i1 %tobool54, label %if.then55, label %if.else56, !dbg !8661

if.then55:                                        ; preds = %if.else52
  %49 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8662
  %50 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8663
  %51 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_a.addr, align 8, !dbg !8664
  %52 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_b.addr, align 8, !dbg !8665
  %53 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !8666
  %54 = load i32, i32* %lnn, align 4, !dbg !8667
  call void @analyze_siv_subscript(%union.tree_node* %49, %union.tree_node* %50, %struct.conflict_function** %51, %struct.conflict_function** %52, %union.tree_node** %53, i32 %54), !dbg !8668
  br label %if.end57, !dbg !8668

if.else56:                                        ; preds = %if.else52
  %55 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8669
  %56 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8670
  %57 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_a.addr, align 8, !dbg !8671
  %58 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_b.addr, align 8, !dbg !8672
  %59 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !8673
  %60 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !8674
  call void @analyze_miv_subscript(%union.tree_node* %55, %union.tree_node* %56, %struct.conflict_function** %57, %struct.conflict_function** %58, %union.tree_node** %59, %struct.loop* %60), !dbg !8675
  br label %if.end57

if.end57:                                         ; preds = %if.else56, %if.then55
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then51
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then44
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then24
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then13
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8676
  %tobool62 = icmp ne %struct._IO_FILE* %61, null, !dbg !8676
  br i1 %tobool62, label %land.lhs.true63, label %if.end71, !dbg !8678

land.lhs.true63:                                  ; preds = %if.end61
  %62 = load i32, i32* @dump_flags, align 4, !dbg !8679
  %and64 = and i32 %62, 8, !dbg !8680
  %tobool65 = icmp ne i32 %and64, 0, !dbg !8680
  br i1 %tobool65, label %if.then66, label %if.end71, !dbg !8681

if.then66:                                        ; preds = %land.lhs.true63
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8682
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.107, i64 0, i64 0)), !dbg !8684
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8685
  %65 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_a.addr, align 8, !dbg !8686
  %66 = load %struct.conflict_function*, %struct.conflict_function** %65, align 8, !dbg !8687
  call void @dump_conflict_function(%struct._IO_FILE* %64, %struct.conflict_function* %66), !dbg !8688
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8689
  %call68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.108, i64 0, i64 0)), !dbg !8690
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8691
  %69 = load %struct.conflict_function**, %struct.conflict_function*** %overlap_iterations_b.addr, align 8, !dbg !8692
  %70 = load %struct.conflict_function*, %struct.conflict_function** %69, align 8, !dbg !8693
  call void @dump_conflict_function(%struct._IO_FILE* %68, %struct.conflict_function* %70), !dbg !8694
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8695
  %call69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !8696
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8697
  %call70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !8698
  br label %if.end71, !dbg !8699

if.end71:                                         ; preds = %if.then66, %land.lhs.true63, %if.end61
  ret void, !dbg !8700
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_conflict_function(%struct.conflict_function* %f) #0 !dbg !8701 {
entry:
  %f.addr = alloca %struct.conflict_function*, align 8
  %i = alloca i32, align 4
  store %struct.conflict_function* %f, %struct.conflict_function** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %f.addr, metadata !8704, metadata !DIExpression()), !dbg !8705
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8706, metadata !DIExpression()), !dbg !8707
  %0 = load %struct.conflict_function*, %struct.conflict_function** %f.addr, align 8, !dbg !8708
  %n = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %0, i32 0, i32 0, !dbg !8708
  %1 = load i32, i32* %n, align 8, !dbg !8708
  %cmp = icmp ne i32 %1, 0, !dbg !8708
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8708

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.conflict_function*, %struct.conflict_function** %f.addr, align 8, !dbg !8708
  %n1 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %2, i32 0, i32 0, !dbg !8708
  %3 = load i32, i32* %n1, align 8, !dbg !8708
  %cmp2 = icmp ne i32 %3, 3, !dbg !8708
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8710

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %i, align 4, !dbg !8711
  br label %for.cond, !dbg !8714

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load i32, i32* %i, align 4, !dbg !8715
  %5 = load %struct.conflict_function*, %struct.conflict_function** %f.addr, align 8, !dbg !8717
  %n3 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %5, i32 0, i32 0, !dbg !8718
  %6 = load i32, i32* %n3, align 8, !dbg !8718
  %cmp4 = icmp ult i32 %4, %6, !dbg !8719
  br i1 %cmp4, label %for.body, label %for.end, !dbg !8720

for.body:                                         ; preds = %for.cond
  %7 = load %struct.conflict_function*, %struct.conflict_function** %f.addr, align 8, !dbg !8721
  %fns = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %7, i32 0, i32 1, !dbg !8722
  %8 = load i32, i32* %i, align 4, !dbg !8723
  %idxprom = zext i32 %8 to i64, !dbg !8721
  %arrayidx = getelementptr inbounds [2 x %struct.VEC_tree_heap*], [2 x %struct.VEC_tree_heap*]* %fns, i64 0, i64 %idxprom, !dbg !8721
  %9 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %arrayidx, align 8, !dbg !8721
  call void @affine_fn_free(%struct.VEC_tree_heap* %9), !dbg !8724
  br label %for.inc, !dbg !8724

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4, !dbg !8725
  %inc = add i32 %10, 1, !dbg !8725
  store i32 %inc, i32* %i, align 4, !dbg !8725
  br label %for.cond, !dbg !8726, !llvm.loop !8727

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !8729

if.end:                                           ; preds = %for.end, %land.lhs.true, %entry
  %11 = load %struct.conflict_function*, %struct.conflict_function** %f.addr, align 8, !dbg !8730
  %12 = bitcast %struct.conflict_function* %11 to i8*, !dbg !8730
  call void @free(i8* %12), !dbg !8731
  ret void, !dbg !8732
}

declare dso_local zeroext i8 @chrec_contains_undetermined(%union.tree_node*) #2

declare dso_local zeroext i8 @eq_evolutions_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.conflict_function* @conflict_fn(i32 %n, ...) #0 !dbg !8733 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %ret = alloca %struct.conflict_function*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !8736, metadata !DIExpression()), !dbg !8737
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8738, metadata !DIExpression()), !dbg !8739
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %ret, metadata !8740, metadata !DIExpression()), !dbg !8741
  %call = call i8* @xcalloc(i64 1, i64 24), !dbg !8742
  %0 = bitcast i8* %call to %struct.conflict_function*, !dbg !8742
  store %struct.conflict_function* %0, %struct.conflict_function** %ret, align 8, !dbg !8741
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !8743, metadata !DIExpression()), !dbg !8756
  %1 = load i32, i32* %n.addr, align 4, !dbg !8757
  %cmp = icmp ult i32 0, %1, !dbg !8757
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !8757

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4, !dbg !8757
  %cmp1 = icmp ule i32 %2, 2, !dbg !8757
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !8757

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 1566, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !8757
  br label %cond.end, !dbg !8757

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !8757

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8757
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8758
  %arraydecay2 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8758
  call void @llvm.va_start(i8* %arraydecay2), !dbg !8758
  %3 = load i32, i32* %n.addr, align 4, !dbg !8759
  %4 = load %struct.conflict_function*, %struct.conflict_function** %ret, align 8, !dbg !8760
  %n3 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %4, i32 0, i32 0, !dbg !8761
  store i32 %3, i32* %n3, align 8, !dbg !8762
  store i32 0, i32* %i, align 4, !dbg !8763
  br label %for.cond, !dbg !8765

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load i32, i32* %i, align 4, !dbg !8766
  %6 = load i32, i32* %n.addr, align 4, !dbg !8768
  %cmp4 = icmp ult i32 %5, %6, !dbg !8769
  br i1 %cmp4, label %for.body, label %for.end, !dbg !8770

for.body:                                         ; preds = %for.cond
  %arraydecay5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8771
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay5, i32 0, i32 0, !dbg !8771
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !8771
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !8771
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !8771

vaarg.in_reg:                                     ; preds = %for.body
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay5, i32 0, i32 3, !dbg !8771
  %reg_save_area = load i8*, i8** %7, align 16, !dbg !8771
  %8 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !8771
  %9 = bitcast i8* %8 to %struct.VEC_tree_heap**, !dbg !8771
  %10 = add i32 %gp_offset, 8, !dbg !8771
  store i32 %10, i32* %gp_offset_p, align 16, !dbg !8771
  br label %vaarg.end, !dbg !8771

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay5, i32 0, i32 2, !dbg !8771
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !8771
  %11 = bitcast i8* %overflow_arg_area to %struct.VEC_tree_heap**, !dbg !8771
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !8771
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !8771
  br label %vaarg.end, !dbg !8771

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi %struct.VEC_tree_heap** [ %9, %vaarg.in_reg ], [ %11, %vaarg.in_mem ], !dbg !8771
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vaarg.addr, align 8, !dbg !8771
  %13 = load %struct.conflict_function*, %struct.conflict_function** %ret, align 8, !dbg !8772
  %fns = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %13, i32 0, i32 1, !dbg !8773
  %14 = load i32, i32* %i, align 4, !dbg !8774
  %idxprom = zext i32 %14 to i64, !dbg !8772
  %arrayidx = getelementptr inbounds [2 x %struct.VEC_tree_heap*], [2 x %struct.VEC_tree_heap*]* %fns, i64 0, i64 %idxprom, !dbg !8772
  store %struct.VEC_tree_heap* %12, %struct.VEC_tree_heap** %arrayidx, align 8, !dbg !8775
  br label %for.inc, !dbg !8772

for.inc:                                          ; preds = %vaarg.end
  %15 = load i32, i32* %i, align 4, !dbg !8776
  %inc = add i32 %15, 1, !dbg !8776
  store i32 %inc, i32* %i, align 4, !dbg !8776
  br label %for.cond, !dbg !8777, !llvm.loop !8778

for.end:                                          ; preds = %for.cond
  %arraydecay6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !8780
  %arraydecay67 = bitcast %struct.__va_list_tag* %arraydecay6 to i8*, !dbg !8780
  call void @llvm.va_end(i8* %arraydecay67), !dbg !8780
  %16 = load %struct.conflict_function*, %struct.conflict_function** %ret, align 8, !dbg !8781
  ret %struct.conflict_function* %16, !dbg !8782
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %cst) #0 !dbg !8783 {
entry:
  %cst.addr = alloca %union.tree_node*, align 8
  %fn = alloca %struct.VEC_tree_heap*, align 8
  store %union.tree_node* %cst, %union.tree_node** %cst.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst.addr, metadata !8786, metadata !DIExpression()), !dbg !8787
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fn, metadata !8788, metadata !DIExpression()), !dbg !8789
  %call = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 1), !dbg !8790
  store %struct.VEC_tree_heap* %call, %struct.VEC_tree_heap** %fn, align 8, !dbg !8789
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn, align 8, !dbg !8791
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !8791
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8791

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn, align 8, !dbg !8791
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !8791
  br label %cond.end, !dbg !8791

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8791

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8791
  %2 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !8791
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %2), !dbg !8791
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn, align 8, !dbg !8792
  ret %struct.VEC_tree_heap* %3, !dbg !8793
}

declare dso_local zeroext i8 @chrec_contains_symbols(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ziv_subscript_p(%union.tree_node* %chrec_a, %union.tree_node* %chrec_b) #0 !dbg !8794 {
entry:
  %chrec_a.addr = alloca %union.tree_node*, align 8
  %chrec_b.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec_a, %union.tree_node** %chrec_a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_a.addr, metadata !8797, metadata !DIExpression()), !dbg !8798
  store %union.tree_node* %chrec_b, %union.tree_node** %chrec_b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_b.addr, metadata !8799, metadata !DIExpression()), !dbg !8800
  %0 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8801
  %call = call zeroext i8 @evolution_function_is_constant_p(%union.tree_node* %0), !dbg !8802
  %conv = zext i8 %call to i32, !dbg !8802
  %tobool = icmp ne i32 %conv, 0, !dbg !8802
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8803

land.rhs:                                         ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8804
  %call1 = call zeroext i8 @evolution_function_is_constant_p(%union.tree_node* %1), !dbg !8805
  %conv2 = zext i8 %call1 to i32, !dbg !8805
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !8803
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !8806
  %land.ext = zext i1 %2 to i32, !dbg !8803
  %conv4 = trunc i32 %land.ext to i8, !dbg !8807
  ret i8 %conv4, !dbg !8808
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_ziv_subscript(%union.tree_node* %chrec_a, %union.tree_node* %chrec_b, %struct.conflict_function** %overlaps_a, %struct.conflict_function** %overlaps_b, %union.tree_node** %last_conflicts) #0 !dbg !8809 {
entry:
  %chrec_a.addr = alloca %union.tree_node*, align 8
  %chrec_b.addr = alloca %union.tree_node*, align 8
  %overlaps_a.addr = alloca %struct.conflict_function**, align 8
  %overlaps_b.addr = alloca %struct.conflict_function**, align 8
  %last_conflicts.addr = alloca %union.tree_node**, align 8
  %type = alloca %union.tree_node*, align 8
  %difference = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec_a, %union.tree_node** %chrec_a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_a.addr, metadata !8812, metadata !DIExpression()), !dbg !8813
  store %union.tree_node* %chrec_b, %union.tree_node** %chrec_b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_b.addr, metadata !8814, metadata !DIExpression()), !dbg !8815
  store %struct.conflict_function** %overlaps_a, %struct.conflict_function*** %overlaps_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlaps_a.addr, metadata !8816, metadata !DIExpression()), !dbg !8817
  store %struct.conflict_function** %overlaps_b, %struct.conflict_function*** %overlaps_b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlaps_b.addr, metadata !8818, metadata !DIExpression()), !dbg !8819
  store %union.tree_node** %last_conflicts, %union.tree_node*** %last_conflicts.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %last_conflicts.addr, metadata !8820, metadata !DIExpression()), !dbg !8821
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8822, metadata !DIExpression()), !dbg !8823
  call void @llvm.dbg.declare(metadata %union.tree_node** %difference, metadata !8824, metadata !DIExpression()), !dbg !8825
  %0 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 7), align 4, !dbg !8826
  %inc = add nsw i32 %0, 1, !dbg !8826
  store i32 %inc, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 7), align 4, !dbg !8826
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8827
  %tobool = icmp ne %struct._IO_FILE* %1, null, !dbg !8827
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8829

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @dump_flags, align 4, !dbg !8830
  %and = and i32 %2, 8, !dbg !8831
  %tobool1 = icmp ne i32 %and, 0, !dbg !8831
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8832

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8833
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.109, i64 0, i64 0)), !dbg !8834
  br label %if.end, !dbg !8834

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8835
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !8835
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8835
  %5 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !8835
  %6 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8836
  %common3 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !8836
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !8836
  %7 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !8836
  %call5 = call %union.tree_node* @signed_type_for_types(%union.tree_node* %5, %union.tree_node* %7), !dbg !8837
  store %union.tree_node* %call5, %union.tree_node** %type, align 8, !dbg !8838
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8839
  %9 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8840
  %call6 = call %union.tree_node* @chrec_convert(%union.tree_node* %8, %union.tree_node* %9, %union.gimple_statement_d* null), !dbg !8841
  store %union.tree_node* %call6, %union.tree_node** %chrec_a.addr, align 8, !dbg !8842
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8843
  %11 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8844
  %call7 = call %union.tree_node* @chrec_convert(%union.tree_node* %10, %union.tree_node* %11, %union.gimple_statement_d* null), !dbg !8845
  store %union.tree_node* %call7, %union.tree_node** %chrec_b.addr, align 8, !dbg !8846
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8847
  %13 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8848
  %14 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8849
  %call8 = call %union.tree_node* @chrec_fold_minus(%union.tree_node* %12, %union.tree_node* %13, %union.tree_node* %14), !dbg !8850
  store %union.tree_node* %call8, %union.tree_node** %difference, align 8, !dbg !8851
  %15 = load %union.tree_node*, %union.tree_node** %difference, align 8, !dbg !8852
  %base = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !8852
  %16 = bitcast %struct.tree_base* %base to i64*, !dbg !8852
  %bf.load = load i64, i64* %16, align 8, !dbg !8852
  %bf.clear = and i64 %bf.load, 65535, !dbg !8852
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8852
  switch i32 %bf.cast, label %sw.default [
    i32 23, label %sw.bb
  ], !dbg !8853

sw.bb:                                            ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %difference, align 8, !dbg !8854
  %call9 = call i32 @integer_zerop(%union.tree_node* %17), !dbg !8857
  %tobool10 = icmp ne i32 %call9, 0, !dbg !8857
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !8858

if.then11:                                        ; preds = %sw.bb
  %18 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !8859
  %call12 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %18), !dbg !8861
  %call13 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call12), !dbg !8862
  %19 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !8863
  store %struct.conflict_function* %call13, %struct.conflict_function** %19, align 8, !dbg !8864
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !8865
  %call14 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %20), !dbg !8866
  %call15 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call14), !dbg !8867
  %21 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !8868
  store %struct.conflict_function* %call15, %struct.conflict_function** %21, align 8, !dbg !8869
  %22 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8870
  %23 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !8871
  store %union.tree_node* %22, %union.tree_node** %23, align 8, !dbg !8872
  %24 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 9), align 4, !dbg !8873
  %inc16 = add nsw i32 %24, 1, !dbg !8873
  store i32 %inc16, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 9), align 4, !dbg !8873
  br label %if.end20, !dbg !8874

if.else:                                          ; preds = %sw.bb
  %call17 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !8875
  %25 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !8877
  store %struct.conflict_function* %call17, %struct.conflict_function** %25, align 8, !dbg !8878
  %call18 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !8879
  %26 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !8880
  store %struct.conflict_function* %call18, %struct.conflict_function** %26, align 8, !dbg !8881
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !8882
  %28 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !8883
  store %union.tree_node* %27, %union.tree_node** %28, align 8, !dbg !8884
  %29 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 8), align 4, !dbg !8885
  %inc19 = add nsw i32 %29, 1, !dbg !8885
  store i32 %inc19, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 8), align 4, !dbg !8885
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then11
  br label %sw.epilog, !dbg !8886

sw.default:                                       ; preds = %if.end
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8887
  %tobool21 = icmp ne %struct._IO_FILE* %30, null, !dbg !8887
  br i1 %tobool21, label %land.lhs.true22, label %if.end27, !dbg !8889

land.lhs.true22:                                  ; preds = %sw.default
  %31 = load i32, i32* @dump_flags, align 4, !dbg !8890
  %and23 = and i32 %31, 8, !dbg !8891
  %tobool24 = icmp ne i32 %and23, 0, !dbg !8891
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !8892

if.then25:                                        ; preds = %land.lhs.true22
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8893
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.110, i64 0, i64 0)), !dbg !8894
  br label %if.end27, !dbg !8894

if.end27:                                         ; preds = %if.then25, %land.lhs.true22, %sw.default
  %call28 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !8895
  %33 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !8896
  store %struct.conflict_function* %call28, %struct.conflict_function** %33, align 8, !dbg !8897
  %call29 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !8898
  %34 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !8899
  store %struct.conflict_function* %call29, %struct.conflict_function** %34, align 8, !dbg !8900
  %35 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !8901
  %36 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !8902
  store %union.tree_node* %35, %union.tree_node** %36, align 8, !dbg !8903
  %37 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 10), align 4, !dbg !8904
  %inc30 = add nsw i32 %37, 1, !dbg !8904
  store i32 %inc30, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 10), align 4, !dbg !8904
  br label %sw.epilog, !dbg !8905

sw.epilog:                                        ; preds = %if.end27, %if.end20
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8906
  %tobool31 = icmp ne %struct._IO_FILE* %38, null, !dbg !8906
  br i1 %tobool31, label %land.lhs.true32, label %if.end37, !dbg !8908

land.lhs.true32:                                  ; preds = %sw.epilog
  %39 = load i32, i32* @dump_flags, align 4, !dbg !8909
  %and33 = and i32 %39, 8, !dbg !8910
  %tobool34 = icmp ne i32 %and33, 0, !dbg !8910
  br i1 %tobool34, label %if.then35, label %if.end37, !dbg !8911

if.then35:                                        ; preds = %land.lhs.true32
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8912
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !8913
  br label %if.end37, !dbg !8913

if.end37:                                         ; preds = %if.then35, %land.lhs.true32, %sw.epilog
  ret void, !dbg !8914
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @siv_subscript_p(%union.tree_node* %chrec_a, %union.tree_node* %chrec_b) #0 !dbg !8915 {
entry:
  %retval = alloca i8, align 1
  %chrec_a.addr = alloca %union.tree_node*, align 8
  %chrec_b.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec_a, %union.tree_node** %chrec_a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_a.addr, metadata !8916, metadata !DIExpression()), !dbg !8917
  store %union.tree_node* %chrec_b, %union.tree_node** %chrec_b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_b.addr, metadata !8918, metadata !DIExpression()), !dbg !8919
  %0 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8920
  %call = call zeroext i8 @evolution_function_is_constant_p(%union.tree_node* %0), !dbg !8922
  %conv = zext i8 %call to i32, !dbg !8922
  %tobool = icmp ne i32 %conv, 0, !dbg !8922
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !8923

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8924
  %call1 = call zeroext i8 @evolution_function_is_univariate_p(%union.tree_node* %1), !dbg !8925
  %conv2 = zext i8 %call1 to i32, !dbg !8925
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !8925
  br i1 %tobool3, label %if.then, label %lor.lhs.false, !dbg !8926

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8927
  %call4 = call zeroext i8 @evolution_function_is_constant_p(%union.tree_node* %2), !dbg !8928
  %conv5 = zext i8 %call4 to i32, !dbg !8928
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !8928
  br i1 %tobool6, label %land.lhs.true7, label %if.end, !dbg !8929

land.lhs.true7:                                   ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8930
  %call8 = call zeroext i8 @evolution_function_is_univariate_p(%union.tree_node* %3), !dbg !8931
  %conv9 = zext i8 %call8 to i32, !dbg !8931
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !8931
  br i1 %tobool10, label %if.then, label %if.end, !dbg !8932

if.then:                                          ; preds = %land.lhs.true7, %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !8933
  br label %return, !dbg !8933

if.end:                                           ; preds = %land.lhs.true7, %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8934
  %call11 = call zeroext i8 @evolution_function_is_univariate_p(%union.tree_node* %4), !dbg !8936
  %conv12 = zext i8 %call11 to i32, !dbg !8936
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !8936
  br i1 %tobool13, label %land.lhs.true14, label %if.end35, !dbg !8937

land.lhs.true14:                                  ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8938
  %call15 = call zeroext i8 @evolution_function_is_univariate_p(%union.tree_node* %5), !dbg !8939
  %conv16 = zext i8 %call15 to i32, !dbg !8939
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !8939
  br i1 %tobool17, label %if.then18, label %if.end35, !dbg !8940

if.then18:                                        ; preds = %land.lhs.true14
  %6 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8941
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !8941
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !8941
  %bf.load = load i64, i64* %7, align 8, !dbg !8941
  %bf.clear = and i64 %bf.load, 65535, !dbg !8941
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8941
  switch i32 %bf.cast, label %sw.default34 [
    i32 146, label %sw.bb
  ], !dbg !8943

sw.bb:                                            ; preds = %if.then18
  %8 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8944
  %base19 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !8944
  %9 = bitcast %struct.tree_base* %base19 to i64*, !dbg !8944
  %bf.load20 = load i64, i64* %9, align 8, !dbg !8944
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !8944
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !8944
  switch i32 %bf.cast22, label %sw.default [
    i32 146, label %sw.bb23
  ], !dbg !8946

sw.bb23:                                          ; preds = %sw.bb
  %10 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8947
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !8947
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8947
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8947
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8947
  %int_cst = bitcast %union.tree_node* %11 to %struct.tree_int_cst*, !dbg !8947
  %int_cst24 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !8947
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst24, i32 0, i32 0, !dbg !8947
  %12 = load i64, i64* %low, align 8, !dbg !8947
  %13 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8950
  %exp25 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !8950
  %operands26 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp25, i32 0, i32 3, !dbg !8950
  %arrayidx27 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands26, i64 0, i64 0, !dbg !8950
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx27, align 8, !dbg !8950
  %int_cst28 = bitcast %union.tree_node* %14 to %struct.tree_int_cst*, !dbg !8950
  %int_cst29 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst28, i32 0, i32 1, !dbg !8950
  %low30 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst29, i32 0, i32 0, !dbg !8950
  %15 = load i64, i64* %low30, align 8, !dbg !8950
  %cmp = icmp ne i64 %12, %15, !dbg !8951
  br i1 %cmp, label %if.then32, label %if.end33, !dbg !8952

if.then32:                                        ; preds = %sw.bb23
  store i8 0, i8* %retval, align 1, !dbg !8953
  br label %return, !dbg !8953

if.end33:                                         ; preds = %sw.bb23
  br label %sw.default, !dbg !8950

sw.default:                                       ; preds = %sw.bb, %if.end33
  store i8 1, i8* %retval, align 1, !dbg !8954
  br label %return, !dbg !8954

sw.default34:                                     ; preds = %if.then18
  store i8 1, i8* %retval, align 1, !dbg !8955
  br label %return, !dbg !8955

if.end35:                                         ; preds = %land.lhs.true14, %if.end
  store i8 0, i8* %retval, align 1, !dbg !8956
  br label %return, !dbg !8956

return:                                           ; preds = %if.end35, %sw.default34, %sw.default, %if.then32, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !8957
  ret i8 %16, !dbg !8957
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_siv_subscript(%union.tree_node* %chrec_a, %union.tree_node* %chrec_b, %struct.conflict_function** %overlaps_a, %struct.conflict_function** %overlaps_b, %union.tree_node** %last_conflicts, i32 %loop_nest_num) #0 !dbg !8958 {
entry:
  %chrec_a.addr = alloca %union.tree_node*, align 8
  %chrec_b.addr = alloca %union.tree_node*, align 8
  %overlaps_a.addr = alloca %struct.conflict_function**, align 8
  %overlaps_b.addr = alloca %struct.conflict_function**, align 8
  %last_conflicts.addr = alloca %union.tree_node**, align 8
  %loop_nest_num.addr = alloca i32, align 4
  store %union.tree_node* %chrec_a, %union.tree_node** %chrec_a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_a.addr, metadata !8961, metadata !DIExpression()), !dbg !8962
  store %union.tree_node* %chrec_b, %union.tree_node** %chrec_b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_b.addr, metadata !8963, metadata !DIExpression()), !dbg !8964
  store %struct.conflict_function** %overlaps_a, %struct.conflict_function*** %overlaps_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlaps_a.addr, metadata !8965, metadata !DIExpression()), !dbg !8966
  store %struct.conflict_function** %overlaps_b, %struct.conflict_function*** %overlaps_b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlaps_b.addr, metadata !8967, metadata !DIExpression()), !dbg !8968
  store %union.tree_node** %last_conflicts, %union.tree_node*** %last_conflicts.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %last_conflicts.addr, metadata !8969, metadata !DIExpression()), !dbg !8970
  store i32 %loop_nest_num, i32* %loop_nest_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loop_nest_num.addr, metadata !8971, metadata !DIExpression()), !dbg !8972
  %0 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 11), align 4, !dbg !8973
  %inc = add nsw i32 %0, 1, !dbg !8973
  store i32 %inc, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 11), align 4, !dbg !8973
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8974
  %tobool = icmp ne %struct._IO_FILE* %1, null, !dbg !8974
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8976

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @dump_flags, align 4, !dbg !8977
  %and = and i32 %2, 8, !dbg !8978
  %tobool1 = icmp ne i32 %and, 0, !dbg !8978
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8979

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8980
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.111, i64 0, i64 0)), !dbg !8981
  br label %if.end, !dbg !8981

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8982
  %call2 = call zeroext i8 @evolution_function_is_constant_p(%union.tree_node* %4), !dbg !8984
  %conv = zext i8 %call2 to i32, !dbg !8984
  %tobool3 = icmp ne i32 %conv, 0, !dbg !8984
  br i1 %tobool3, label %land.lhs.true4, label %if.else, !dbg !8985

land.lhs.true4:                                   ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8986
  %6 = load i32, i32* %loop_nest_num.addr, align 4, !dbg !8987
  %call5 = call zeroext i8 @evolution_function_is_affine_in_loop(%union.tree_node* %5, i32 %6), !dbg !8988
  %conv6 = zext i8 %call5 to i32, !dbg !8988
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !8988
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !8989

if.then8:                                         ; preds = %land.lhs.true4
  %7 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8990
  %8 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !8991
  %9 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !8992
  %10 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !8993
  %11 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !8994
  call void @analyze_siv_subscript_cst_affine(%union.tree_node* %7, %union.tree_node* %8, %struct.conflict_function** %9, %struct.conflict_function** %10, %union.tree_node** %11), !dbg !8995
  br label %if.end95, !dbg !8995

if.else:                                          ; preds = %land.lhs.true4, %if.end
  %12 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !8996
  %13 = load i32, i32* %loop_nest_num.addr, align 4, !dbg !8998
  %call9 = call zeroext i8 @evolution_function_is_affine_in_loop(%union.tree_node* %12, i32 %13), !dbg !8999
  %conv10 = zext i8 %call9 to i32, !dbg !8999
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !8999
  br i1 %tobool11, label %land.lhs.true12, label %if.else17, !dbg !9000

land.lhs.true12:                                  ; preds = %if.else
  %14 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9001
  %call13 = call zeroext i8 @evolution_function_is_constant_p(%union.tree_node* %14), !dbg !9002
  %conv14 = zext i8 %call13 to i32, !dbg !9002
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !9002
  br i1 %tobool15, label %if.then16, label %if.else17, !dbg !9003

if.then16:                                        ; preds = %land.lhs.true12
  %15 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9004
  %16 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9005
  %17 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9006
  %18 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9007
  %19 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9008
  call void @analyze_siv_subscript_cst_affine(%union.tree_node* %15, %union.tree_node* %16, %struct.conflict_function** %17, %struct.conflict_function** %18, %union.tree_node** %19), !dbg !9009
  br label %if.end94, !dbg !9009

if.else17:                                        ; preds = %land.lhs.true12, %if.else
  %20 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9010
  %21 = load i32, i32* %loop_nest_num.addr, align 4, !dbg !9012
  %call18 = call zeroext i8 @evolution_function_is_affine_in_loop(%union.tree_node* %20, i32 %21), !dbg !9013
  %conv19 = zext i8 %call18 to i32, !dbg !9013
  %tobool20 = icmp ne i32 %conv19, 0, !dbg !9013
  br i1 %tobool20, label %land.lhs.true21, label %if.else82, !dbg !9014

land.lhs.true21:                                  ; preds = %if.else17
  %22 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9015
  %23 = load i32, i32* %loop_nest_num.addr, align 4, !dbg !9016
  %call22 = call zeroext i8 @evolution_function_is_affine_in_loop(%union.tree_node* %22, i32 %23), !dbg !9017
  %conv23 = zext i8 %call22 to i32, !dbg !9017
  %tobool24 = icmp ne i32 %conv23, 0, !dbg !9017
  br i1 %tobool24, label %if.then25, label %if.else82, !dbg !9018

if.then25:                                        ; preds = %land.lhs.true21
  %24 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9019
  %call26 = call zeroext i8 @chrec_contains_symbols(%union.tree_node* %24), !dbg !9022
  %tobool27 = icmp ne i8 %call26, 0, !dbg !9022
  br i1 %tobool27, label %if.else52, label %land.lhs.true28, !dbg !9023

land.lhs.true28:                                  ; preds = %if.then25
  %25 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9024
  %call29 = call zeroext i8 @chrec_contains_symbols(%union.tree_node* %25), !dbg !9025
  %tobool30 = icmp ne i8 %call29, 0, !dbg !9025
  br i1 %tobool30, label %if.else52, label %if.then31, !dbg !9026

if.then31:                                        ; preds = %land.lhs.true28
  %26 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9027
  %27 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9029
  %28 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9030
  %29 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9031
  %30 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9032
  call void @analyze_subscript_affine_affine(%union.tree_node* %26, %union.tree_node* %27, %struct.conflict_function** %28, %struct.conflict_function** %29, %union.tree_node** %30), !dbg !9033
  %31 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9034
  %32 = load %struct.conflict_function*, %struct.conflict_function** %31, align 8, !dbg !9034
  %n = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %32, i32 0, i32 0, !dbg !9034
  %33 = load i32, i32* %n, align 8, !dbg !9034
  %cmp = icmp eq i32 %33, 3, !dbg !9034
  br i1 %cmp, label %if.then36, label %lor.lhs.false, !dbg !9036

lor.lhs.false:                                    ; preds = %if.then31
  %34 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9037
  %35 = load %struct.conflict_function*, %struct.conflict_function** %34, align 8, !dbg !9037
  %n33 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %35, i32 0, i32 0, !dbg !9037
  %36 = load i32, i32* %n33, align 8, !dbg !9037
  %cmp34 = icmp eq i32 %36, 3, !dbg !9037
  br i1 %cmp34, label %if.then36, label %if.else38, !dbg !9038

if.then36:                                        ; preds = %lor.lhs.false, %if.then31
  %37 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !9039
  %inc37 = add nsw i32 %37, 1, !dbg !9039
  store i32 %inc37, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !9039
  br label %if.end51, !dbg !9040

if.else38:                                        ; preds = %lor.lhs.false
  %38 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9041
  %39 = load %struct.conflict_function*, %struct.conflict_function** %38, align 8, !dbg !9041
  %n39 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %39, i32 0, i32 0, !dbg !9041
  %40 = load i32, i32* %n39, align 8, !dbg !9041
  %cmp40 = icmp eq i32 %40, 0, !dbg !9041
  br i1 %cmp40, label %if.then46, label %lor.lhs.false42, !dbg !9043

lor.lhs.false42:                                  ; preds = %if.else38
  %41 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9044
  %42 = load %struct.conflict_function*, %struct.conflict_function** %41, align 8, !dbg !9044
  %n43 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %42, i32 0, i32 0, !dbg !9044
  %43 = load i32, i32* %n43, align 8, !dbg !9044
  %cmp44 = icmp eq i32 %43, 0, !dbg !9044
  br i1 %cmp44, label %if.then46, label %if.else48, !dbg !9045

if.then46:                                        ; preds = %lor.lhs.false42, %if.else38
  %44 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9046
  %inc47 = add nsw i32 %44, 1, !dbg !9046
  store i32 %inc47, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9046
  br label %if.end50, !dbg !9047

if.else48:                                        ; preds = %lor.lhs.false42
  %45 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 13), align 4, !dbg !9048
  %inc49 = add nsw i32 %45, 1, !dbg !9048
  store i32 %inc49, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 13), align 4, !dbg !9048
  br label %if.end50

if.end50:                                         ; preds = %if.else48, %if.then46
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then36
  br label %if.end81, !dbg !9049

if.else52:                                        ; preds = %land.lhs.true28, %if.then25
  %call53 = call zeroext i8 @can_use_analyze_subscript_affine_affine(%union.tree_node** %chrec_a.addr, %union.tree_node** %chrec_b.addr), !dbg !9050
  %tobool54 = icmp ne i8 %call53, 0, !dbg !9050
  br i1 %tobool54, label %if.then55, label %if.else79, !dbg !9052

if.then55:                                        ; preds = %if.else52
  %46 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9053
  %47 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9055
  %48 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9056
  %49 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9057
  %50 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9058
  call void @analyze_subscript_affine_affine(%union.tree_node* %46, %union.tree_node* %47, %struct.conflict_function** %48, %struct.conflict_function** %49, %union.tree_node** %50), !dbg !9059
  %51 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9060
  %52 = load %struct.conflict_function*, %struct.conflict_function** %51, align 8, !dbg !9060
  %n56 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %52, i32 0, i32 0, !dbg !9060
  %53 = load i32, i32* %n56, align 8, !dbg !9060
  %cmp57 = icmp eq i32 %53, 3, !dbg !9060
  br i1 %cmp57, label %if.then63, label %lor.lhs.false59, !dbg !9062

lor.lhs.false59:                                  ; preds = %if.then55
  %54 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9063
  %55 = load %struct.conflict_function*, %struct.conflict_function** %54, align 8, !dbg !9063
  %n60 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %55, i32 0, i32 0, !dbg !9063
  %56 = load i32, i32* %n60, align 8, !dbg !9063
  %cmp61 = icmp eq i32 %56, 3, !dbg !9063
  br i1 %cmp61, label %if.then63, label %if.else65, !dbg !9064

if.then63:                                        ; preds = %lor.lhs.false59, %if.then55
  %57 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !9065
  %inc64 = add nsw i32 %57, 1, !dbg !9065
  store i32 %inc64, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !9065
  br label %if.end78, !dbg !9066

if.else65:                                        ; preds = %lor.lhs.false59
  %58 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9067
  %59 = load %struct.conflict_function*, %struct.conflict_function** %58, align 8, !dbg !9067
  %n66 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %59, i32 0, i32 0, !dbg !9067
  %60 = load i32, i32* %n66, align 8, !dbg !9067
  %cmp67 = icmp eq i32 %60, 0, !dbg !9067
  br i1 %cmp67, label %if.then73, label %lor.lhs.false69, !dbg !9069

lor.lhs.false69:                                  ; preds = %if.else65
  %61 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9070
  %62 = load %struct.conflict_function*, %struct.conflict_function** %61, align 8, !dbg !9070
  %n70 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %62, i32 0, i32 0, !dbg !9070
  %63 = load i32, i32* %n70, align 8, !dbg !9070
  %cmp71 = icmp eq i32 %63, 0, !dbg !9070
  br i1 %cmp71, label %if.then73, label %if.else75, !dbg !9071

if.then73:                                        ; preds = %lor.lhs.false69, %if.else65
  %64 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9072
  %inc74 = add nsw i32 %64, 1, !dbg !9072
  store i32 %inc74, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9072
  br label %if.end77, !dbg !9073

if.else75:                                        ; preds = %lor.lhs.false69
  %65 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 13), align 4, !dbg !9074
  %inc76 = add nsw i32 %65, 1, !dbg !9074
  store i32 %inc76, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 13), align 4, !dbg !9074
  br label %if.end77

if.end77:                                         ; preds = %if.else75, %if.then73
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.then63
  br label %if.end80, !dbg !9075

if.else79:                                        ; preds = %if.else52
  br label %siv_subscript_dontknow, !dbg !9076

if.end80:                                         ; preds = %if.end78
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.end51
  br label %if.end93, !dbg !9077

if.else82:                                        ; preds = %land.lhs.true21, %if.else17
  br label %siv_subscript_dontknow, !dbg !9078

siv_subscript_dontknow:                           ; preds = %if.else82, %if.else79
  call void @llvm.dbg.label(metadata !9079), !dbg !9081
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9082
  %tobool83 = icmp ne %struct._IO_FILE* %66, null, !dbg !9082
  br i1 %tobool83, label %land.lhs.true84, label %if.end89, !dbg !9084

land.lhs.true84:                                  ; preds = %siv_subscript_dontknow
  %67 = load i32, i32* @dump_flags, align 4, !dbg !9085
  %and85 = and i32 %67, 8, !dbg !9086
  %tobool86 = icmp ne i32 %and85, 0, !dbg !9086
  br i1 %tobool86, label %if.then87, label %if.end89, !dbg !9087

if.then87:                                        ; preds = %land.lhs.true84
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9088
  %call88 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.112, i64 0, i64 0)), !dbg !9089
  br label %if.end89, !dbg !9089

if.end89:                                         ; preds = %if.then87, %land.lhs.true84, %siv_subscript_dontknow
  %call90 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9090
  %69 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9091
  store %struct.conflict_function* %call90, %struct.conflict_function** %69, align 8, !dbg !9092
  %call91 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9093
  %70 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9094
  store %struct.conflict_function* %call91, %struct.conflict_function** %70, align 8, !dbg !9095
  %71 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9096
  %72 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9097
  store %union.tree_node* %71, %union.tree_node** %72, align 8, !dbg !9098
  %73 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !9099
  %inc92 = add nsw i32 %73, 1, !dbg !9099
  store i32 %inc92, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !9099
  br label %if.end93

if.end93:                                         ; preds = %if.end89, %if.end81
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %if.then16
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %if.then8
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9100
  %tobool96 = icmp ne %struct._IO_FILE* %74, null, !dbg !9100
  br i1 %tobool96, label %land.lhs.true97, label %if.end102, !dbg !9102

land.lhs.true97:                                  ; preds = %if.end95
  %75 = load i32, i32* @dump_flags, align 4, !dbg !9103
  %and98 = and i32 %75, 8, !dbg !9104
  %tobool99 = icmp ne i32 %and98, 0, !dbg !9104
  br i1 %tobool99, label %if.then100, label %if.end102, !dbg !9105

if.then100:                                       ; preds = %land.lhs.true97
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9106
  %call101 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !9107
  br label %if.end102, !dbg !9107

if.end102:                                        ; preds = %if.then100, %land.lhs.true97, %if.end95
  ret void, !dbg !9108
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_miv_subscript(%union.tree_node* %chrec_a, %union.tree_node* %chrec_b, %struct.conflict_function** %overlaps_a, %struct.conflict_function** %overlaps_b, %union.tree_node** %last_conflicts, %struct.loop* %loop_nest) #0 !dbg !9109 {
entry:
  %chrec_a.addr = alloca %union.tree_node*, align 8
  %chrec_b.addr = alloca %union.tree_node*, align 8
  %overlaps_a.addr = alloca %struct.conflict_function**, align 8
  %overlaps_b.addr = alloca %struct.conflict_function**, align 8
  %last_conflicts.addr = alloca %union.tree_node**, align 8
  %loop_nest.addr = alloca %struct.loop*, align 8
  %type = alloca %union.tree_node*, align 8
  %difference = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec_a, %union.tree_node** %chrec_a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_a.addr, metadata !9110, metadata !DIExpression()), !dbg !9111
  store %union.tree_node* %chrec_b, %union.tree_node** %chrec_b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_b.addr, metadata !9112, metadata !DIExpression()), !dbg !9113
  store %struct.conflict_function** %overlaps_a, %struct.conflict_function*** %overlaps_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlaps_a.addr, metadata !9114, metadata !DIExpression()), !dbg !9115
  store %struct.conflict_function** %overlaps_b, %struct.conflict_function*** %overlaps_b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlaps_b.addr, metadata !9116, metadata !DIExpression()), !dbg !9117
  store %union.tree_node** %last_conflicts, %union.tree_node*** %last_conflicts.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %last_conflicts.addr, metadata !9118, metadata !DIExpression()), !dbg !9119
  store %struct.loop* %loop_nest, %struct.loop** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop_nest.addr, metadata !9120, metadata !DIExpression()), !dbg !9121
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9122, metadata !DIExpression()), !dbg !9123
  call void @llvm.dbg.declare(metadata %union.tree_node** %difference, metadata !9124, metadata !DIExpression()), !dbg !9125
  %0 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 15), align 4, !dbg !9126
  %inc = add nsw i32 %0, 1, !dbg !9126
  store i32 %inc, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 15), align 4, !dbg !9126
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9127
  %tobool = icmp ne %struct._IO_FILE* %1, null, !dbg !9127
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9129

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @dump_flags, align 4, !dbg !9130
  %and = and i32 %2, 8, !dbg !9131
  %tobool1 = icmp ne i32 %and, 0, !dbg !9131
  br i1 %tobool1, label %if.then, label %if.end, !dbg !9132

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9133
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.123, i64 0, i64 0)), !dbg !9134
  br label %if.end, !dbg !9134

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9135
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !9135
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9135
  %5 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !9135
  %6 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9136
  %common3 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !9136
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !9136
  %7 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !9136
  %call5 = call %union.tree_node* @signed_type_for_types(%union.tree_node* %5, %union.tree_node* %7), !dbg !9137
  store %union.tree_node* %call5, %union.tree_node** %type, align 8, !dbg !9138
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9139
  %9 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9140
  %call6 = call %union.tree_node* @chrec_convert(%union.tree_node* %8, %union.tree_node* %9, %union.gimple_statement_d* null), !dbg !9141
  store %union.tree_node* %call6, %union.tree_node** %chrec_a.addr, align 8, !dbg !9142
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9143
  %11 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9144
  %call7 = call %union.tree_node* @chrec_convert(%union.tree_node* %10, %union.tree_node* %11, %union.gimple_statement_d* null), !dbg !9145
  store %union.tree_node* %call7, %union.tree_node** %chrec_b.addr, align 8, !dbg !9146
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9147
  %13 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9148
  %14 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9149
  %call8 = call %union.tree_node* @chrec_fold_minus(%union.tree_node* %12, %union.tree_node* %13, %union.tree_node* %14), !dbg !9150
  store %union.tree_node* %call8, %union.tree_node** %difference, align 8, !dbg !9151
  %15 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9152
  %16 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9154
  %call9 = call zeroext i8 @eq_evolutions_p(%union.tree_node* %15, %union.tree_node* %16), !dbg !9155
  %tobool10 = icmp ne i8 %call9, 0, !dbg !9155
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !9156

if.then11:                                        ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9157
  %call12 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %17), !dbg !9159
  %call13 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call12), !dbg !9160
  %18 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9161
  store %struct.conflict_function* %call13, %struct.conflict_function** %18, align 8, !dbg !9162
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9163
  %call14 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %19), !dbg !9164
  %call15 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call14), !dbg !9165
  %20 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9166
  store %struct.conflict_function* %call15, %struct.conflict_function** %20, align 8, !dbg !9167
  %21 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9168
  %call16 = call %struct.loop* @get_chrec_loop(%union.tree_node* %21), !dbg !9169
  %call17 = call %union.tree_node* @estimated_loop_iterations_tree(%struct.loop* %call16, i8 zeroext 1), !dbg !9170
  %22 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9171
  store %union.tree_node* %call17, %union.tree_node** %22, align 8, !dbg !9172
  %23 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 17), align 4, !dbg !9173
  %inc18 = add nsw i32 %23, 1, !dbg !9173
  store i32 %inc18, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 17), align 4, !dbg !9173
  br label %if.end77, !dbg !9174

if.else:                                          ; preds = %if.end
  %24 = load %union.tree_node*, %union.tree_node** %difference, align 8, !dbg !9175
  %call19 = call zeroext i8 @evolution_function_is_constant_p(%union.tree_node* %24), !dbg !9177
  %conv = zext i8 %call19 to i32, !dbg !9177
  %tobool20 = icmp ne i32 %conv, 0, !dbg !9177
  br i1 %tobool20, label %land.lhs.true21, label %if.else28, !dbg !9178

land.lhs.true21:                                  ; preds = %if.else
  %25 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9179
  %26 = load %union.tree_node*, %union.tree_node** %difference, align 8, !dbg !9180
  %call22 = call zeroext i8 @gcd_of_steps_may_divide_p(%union.tree_node* %25, %union.tree_node* %26), !dbg !9181
  %tobool23 = icmp ne i8 %call22, 0, !dbg !9181
  br i1 %tobool23, label %if.else28, label %if.then24, !dbg !9182

if.then24:                                        ; preds = %land.lhs.true21
  %call25 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9183
  %27 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9185
  store %struct.conflict_function* %call25, %struct.conflict_function** %27, align 8, !dbg !9186
  %call26 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9187
  %28 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9188
  store %struct.conflict_function* %call26, %struct.conflict_function** %28, align 8, !dbg !9189
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9190
  %30 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9191
  store %union.tree_node* %29, %union.tree_node** %30, align 8, !dbg !9192
  %31 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 16), align 4, !dbg !9193
  %inc27 = add nsw i32 %31, 1, !dbg !9193
  store i32 %inc27, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 16), align 4, !dbg !9193
  br label %if.end76, !dbg !9194

if.else28:                                        ; preds = %land.lhs.true21, %if.else
  %32 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9195
  %33 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !9197
  %num = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 0, !dbg !9198
  %34 = load i32, i32* %num, align 8, !dbg !9198
  %call29 = call zeroext i8 @evolution_function_is_affine_multivariate_p(%union.tree_node* %32, i32 %34), !dbg !9199
  %conv30 = zext i8 %call29 to i32, !dbg !9199
  %tobool31 = icmp ne i32 %conv30, 0, !dbg !9199
  br i1 %tobool31, label %land.lhs.true32, label %if.else64, !dbg !9200

land.lhs.true32:                                  ; preds = %if.else28
  %35 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9201
  %call33 = call zeroext i8 @chrec_contains_symbols(%union.tree_node* %35), !dbg !9202
  %tobool34 = icmp ne i8 %call33, 0, !dbg !9202
  br i1 %tobool34, label %if.else64, label %land.lhs.true35, !dbg !9203

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %36 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9204
  %37 = load %struct.loop*, %struct.loop** %loop_nest.addr, align 8, !dbg !9205
  %num36 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !9206
  %38 = load i32, i32* %num36, align 8, !dbg !9206
  %call37 = call zeroext i8 @evolution_function_is_affine_multivariate_p(%union.tree_node* %36, i32 %38), !dbg !9207
  %conv38 = zext i8 %call37 to i32, !dbg !9207
  %tobool39 = icmp ne i32 %conv38, 0, !dbg !9207
  br i1 %tobool39, label %land.lhs.true40, label %if.else64, !dbg !9208

land.lhs.true40:                                  ; preds = %land.lhs.true35
  %39 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9209
  %call41 = call zeroext i8 @chrec_contains_symbols(%union.tree_node* %39), !dbg !9210
  %tobool42 = icmp ne i8 %call41, 0, !dbg !9210
  br i1 %tobool42, label %if.else64, label %if.then43, !dbg !9211

if.then43:                                        ; preds = %land.lhs.true40
  %40 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9212
  %41 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9214
  %42 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9215
  %43 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9216
  %44 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9217
  call void @analyze_subscript_affine_affine(%union.tree_node* %40, %union.tree_node* %41, %struct.conflict_function** %42, %struct.conflict_function** %43, %union.tree_node** %44), !dbg !9218
  %45 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9219
  %46 = load %struct.conflict_function*, %struct.conflict_function** %45, align 8, !dbg !9219
  %n = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %46, i32 0, i32 0, !dbg !9219
  %47 = load i32, i32* %n, align 8, !dbg !9219
  %cmp = icmp eq i32 %47, 3, !dbg !9219
  br i1 %cmp, label %if.then48, label %lor.lhs.false, !dbg !9221

lor.lhs.false:                                    ; preds = %if.then43
  %48 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9222
  %49 = load %struct.conflict_function*, %struct.conflict_function** %48, align 8, !dbg !9222
  %n45 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %49, i32 0, i32 0, !dbg !9222
  %50 = load i32, i32* %n45, align 8, !dbg !9222
  %cmp46 = icmp eq i32 %50, 3, !dbg !9222
  br i1 %cmp46, label %if.then48, label %if.else50, !dbg !9223

if.then48:                                        ; preds = %lor.lhs.false, %if.then43
  %51 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 18), align 4, !dbg !9224
  %inc49 = add nsw i32 %51, 1, !dbg !9224
  store i32 %inc49, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 18), align 4, !dbg !9224
  br label %if.end63, !dbg !9225

if.else50:                                        ; preds = %lor.lhs.false
  %52 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9226
  %53 = load %struct.conflict_function*, %struct.conflict_function** %52, align 8, !dbg !9226
  %n51 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %53, i32 0, i32 0, !dbg !9226
  %54 = load i32, i32* %n51, align 8, !dbg !9226
  %cmp52 = icmp eq i32 %54, 0, !dbg !9226
  br i1 %cmp52, label %if.then58, label %lor.lhs.false54, !dbg !9228

lor.lhs.false54:                                  ; preds = %if.else50
  %55 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9229
  %56 = load %struct.conflict_function*, %struct.conflict_function** %55, align 8, !dbg !9229
  %n55 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %56, i32 0, i32 0, !dbg !9229
  %57 = load i32, i32* %n55, align 8, !dbg !9229
  %cmp56 = icmp eq i32 %57, 0, !dbg !9229
  br i1 %cmp56, label %if.then58, label %if.else60, !dbg !9230

if.then58:                                        ; preds = %lor.lhs.false54, %if.else50
  %58 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 16), align 4, !dbg !9231
  %inc59 = add nsw i32 %58, 1, !dbg !9231
  store i32 %inc59, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 16), align 4, !dbg !9231
  br label %if.end62, !dbg !9232

if.else60:                                        ; preds = %lor.lhs.false54
  %59 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 17), align 4, !dbg !9233
  %inc61 = add nsw i32 %59, 1, !dbg !9233
  store i32 %inc61, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 17), align 4, !dbg !9233
  br label %if.end62

if.end62:                                         ; preds = %if.else60, %if.then58
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then48
  br label %if.end75, !dbg !9234

if.else64:                                        ; preds = %land.lhs.true40, %land.lhs.true35, %land.lhs.true32, %if.else28
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9235
  %tobool65 = icmp ne %struct._IO_FILE* %60, null, !dbg !9235
  br i1 %tobool65, label %land.lhs.true66, label %if.end71, !dbg !9238

land.lhs.true66:                                  ; preds = %if.else64
  %61 = load i32, i32* @dump_flags, align 4, !dbg !9239
  %and67 = and i32 %61, 8, !dbg !9240
  %tobool68 = icmp ne i32 %and67, 0, !dbg !9240
  br i1 %tobool68, label %if.then69, label %if.end71, !dbg !9241

if.then69:                                        ; preds = %land.lhs.true66
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9242
  %call70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.124, i64 0, i64 0)), !dbg !9243
  br label %if.end71, !dbg !9243

if.end71:                                         ; preds = %if.then69, %land.lhs.true66, %if.else64
  %call72 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9244
  %63 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9245
  store %struct.conflict_function* %call72, %struct.conflict_function** %63, align 8, !dbg !9246
  %call73 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9247
  %64 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9248
  store %struct.conflict_function* %call73, %struct.conflict_function** %64, align 8, !dbg !9249
  %65 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9250
  %66 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9251
  store %union.tree_node* %65, %union.tree_node** %66, align 8, !dbg !9252
  %67 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 18), align 4, !dbg !9253
  %inc74 = add nsw i32 %67, 1, !dbg !9253
  store i32 %inc74, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 18), align 4, !dbg !9253
  br label %if.end75

if.end75:                                         ; preds = %if.end71, %if.end63
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %if.then24
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.then11
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9254
  %tobool78 = icmp ne %struct._IO_FILE* %68, null, !dbg !9254
  br i1 %tobool78, label %land.lhs.true79, label %if.end84, !dbg !9256

land.lhs.true79:                                  ; preds = %if.end77
  %69 = load i32, i32* @dump_flags, align 4, !dbg !9257
  %and80 = and i32 %69, 8, !dbg !9258
  %tobool81 = icmp ne i32 %and80, 0, !dbg !9258
  br i1 %tobool81, label %if.then82, label %if.end84, !dbg !9259

if.then82:                                        ; preds = %land.lhs.true79
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9260
  %call83 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !9261
  br label %if.end84, !dbg !9261

if.end84:                                         ; preds = %if.then82, %land.lhs.true79, %if.end77
  ret void, !dbg !9262
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #4

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #4

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !9263 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9266, metadata !DIExpression()), !dbg !9267
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !9267
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !9267
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !9267
  ret %struct.VEC_tree_heap* %1, !dbg !9267
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @evolution_function_is_constant_p(%union.tree_node* %chrec) #0 !dbg !9268 {
entry:
  %retval = alloca i8, align 1
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !9269, metadata !DIExpression()), !dbg !9270
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !9271
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !9273
  br i1 %cmp, label %if.then, label %if.end, !dbg !9274

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9275
  br label %return, !dbg !9275

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !9276
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9276
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9276
  %bf.load = load i64, i64* %2, align 8, !dbg !9276
  %bf.clear = and i64 %bf.load, 65535, !dbg !9276
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9276
  switch i32 %bf.cast, label %sw.default [
    i32 23, label %sw.bb
    i32 24, label %sw.bb
  ], !dbg !9277

sw.bb:                                            ; preds = %if.end, %if.end
  store i8 1, i8* %retval, align 1, !dbg !9278
  br label %return, !dbg !9278

sw.default:                                       ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !9280
  br label %return, !dbg !9280

return:                                           ; preds = %sw.default, %sw.bb, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !9281
  ret i8 %3, !dbg !9281
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @signed_type_for_types(%union.tree_node* %ta, %union.tree_node* %tb) #0 !dbg !9282 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ta.addr = alloca %union.tree_node*, align 8
  %tb.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %ta, %union.tree_node** %ta.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ta.addr, metadata !9285, metadata !DIExpression()), !dbg !9286
  store %union.tree_node* %tb, %union.tree_node** %tb.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %tb.addr, metadata !9287, metadata !DIExpression()), !dbg !9288
  %0 = load %union.tree_node*, %union.tree_node** %ta.addr, align 8, !dbg !9289
  %type = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !9289
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !9289
  %bf.load = load i32, i32* %precision, align 4, !dbg !9289
  %bf.clear = and i32 %bf.load, 1023, !dbg !9289
  %1 = load %union.tree_node*, %union.tree_node** %tb.addr, align 8, !dbg !9291
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !9291
  %precision2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !9291
  %bf.load3 = load i32, i32* %precision2, align 4, !dbg !9291
  %bf.clear4 = and i32 %bf.load3, 1023, !dbg !9291
  %cmp = icmp sgt i32 %bf.clear, %bf.clear4, !dbg !9292
  br i1 %cmp, label %if.then, label %if.else, !dbg !9293

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %ta.addr, align 8, !dbg !9294
  %call = call %union.tree_node* @signed_type_for(%union.tree_node* %2), !dbg !9295
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !9296
  br label %return, !dbg !9296

if.else:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %tb.addr, align 8, !dbg !9297
  %call5 = call %union.tree_node* @signed_type_for(%union.tree_node* %3), !dbg !9298
  store %union.tree_node* %call5, %union.tree_node** %retval, align 8, !dbg !9299
  br label %return, !dbg !9299

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9300
  ret %union.tree_node* %4, !dbg !9300
}

declare dso_local %union.tree_node* @chrec_convert(%union.tree_node*, %union.tree_node*, %union.gimple_statement_d*) #2

declare dso_local %union.tree_node* @chrec_fold_minus(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.conflict_function* @conflict_fn_no_dependence() #0 !dbg !9301 {
entry:
  %fn = alloca %struct.conflict_function*, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %fn, metadata !9302, metadata !DIExpression()), !dbg !9303
  %call = call i8* @xcalloc(i64 1, i64 24), !dbg !9304
  %0 = bitcast i8* %call to %struct.conflict_function*, !dbg !9304
  store %struct.conflict_function* %0, %struct.conflict_function** %fn, align 8, !dbg !9303
  %1 = load %struct.conflict_function*, %struct.conflict_function** %fn, align 8, !dbg !9305
  %n = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %1, i32 0, i32 0, !dbg !9306
  store i32 0, i32* %n, align 8, !dbg !9307
  %2 = load %struct.conflict_function*, %struct.conflict_function** %fn, align 8, !dbg !9308
  ret %struct.conflict_function* %2, !dbg !9309
}

declare dso_local %union.tree_node* @signed_type_for(%union.tree_node*) #2

declare dso_local zeroext i8 @evolution_function_is_univariate_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @evolution_function_is_affine_in_loop(%union.tree_node* %chrec, i32 %loopnum) #0 !dbg !9310 {
entry:
  %retval = alloca i8, align 1
  %chrec.addr = alloca %union.tree_node*, align 8
  %loopnum.addr = alloca i32, align 4
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !9313, metadata !DIExpression()), !dbg !9314
  store i32 %loopnum, i32* %loopnum.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loopnum.addr, metadata !9315, metadata !DIExpression()), !dbg !9316
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !9317
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !9319
  br i1 %cmp, label %if.then, label %if.end, !dbg !9320

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9321
  br label %return, !dbg !9321

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !9322
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9322
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9322
  %bf.load = load i64, i64* %2, align 8, !dbg !9322
  %bf.clear = and i64 %bf.load, 65535, !dbg !9322
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9322
  switch i32 %bf.cast, label %sw.default [
    i32 146, label %sw.bb
  ], !dbg !9323

sw.bb:                                            ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !9324
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !9324
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9324
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !9324
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9324
  %5 = load i32, i32* %loopnum.addr, align 4, !dbg !9327
  %call = call zeroext i8 @evolution_function_is_invariant_p(%union.tree_node* %4, i32 %5), !dbg !9328
  %conv = zext i8 %call to i32, !dbg !9328
  %tobool = icmp ne i32 %conv, 0, !dbg !9328
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !9329

land.lhs.true:                                    ; preds = %sw.bb
  %6 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !9330
  %exp1 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !9330
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !9330
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 2, !dbg !9330
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !9330
  %8 = load i32, i32* %loopnum.addr, align 4, !dbg !9331
  %call4 = call zeroext i8 @evolution_function_is_invariant_p(%union.tree_node* %7, i32 %8), !dbg !9332
  %conv5 = zext i8 %call4 to i32, !dbg !9332
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !9332
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !9333

if.then7:                                         ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !9334
  br label %return, !dbg !9334

if.else:                                          ; preds = %land.lhs.true, %sw.bb
  store i8 0, i8* %retval, align 1, !dbg !9335
  br label %return, !dbg !9335

sw.default:                                       ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !9336
  br label %return, !dbg !9336

return:                                           ; preds = %sw.default, %if.else, %if.then7, %if.then
  %9 = load i8, i8* %retval, align 1, !dbg !9337
  ret i8 %9, !dbg !9337
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_siv_subscript_cst_affine(%union.tree_node* %chrec_a, %union.tree_node* %chrec_b, %struct.conflict_function** %overlaps_a, %struct.conflict_function** %overlaps_b, %union.tree_node** %last_conflicts) #0 !dbg !9338 {
entry:
  %chrec_a.addr = alloca %union.tree_node*, align 8
  %chrec_b.addr = alloca %union.tree_node*, align 8
  %overlaps_a.addr = alloca %struct.conflict_function**, align 8
  %overlaps_b.addr = alloca %struct.conflict_function**, align 8
  %last_conflicts.addr = alloca %union.tree_node**, align 8
  %value0 = alloca i8, align 1
  %value1 = alloca i8, align 1
  %value2 = alloca i8, align 1
  %type = alloca %union.tree_node*, align 8
  %difference = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %numiter = alloca i64, align 8
  %loop = alloca %struct.loop*, align 8
  %numiter101 = alloca i64, align 8
  %loop102 = alloca %struct.loop*, align 8
  store %union.tree_node* %chrec_a, %union.tree_node** %chrec_a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_a.addr, metadata !9339, metadata !DIExpression()), !dbg !9340
  store %union.tree_node* %chrec_b, %union.tree_node** %chrec_b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_b.addr, metadata !9341, metadata !DIExpression()), !dbg !9342
  store %struct.conflict_function** %overlaps_a, %struct.conflict_function*** %overlaps_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlaps_a.addr, metadata !9343, metadata !DIExpression()), !dbg !9344
  store %struct.conflict_function** %overlaps_b, %struct.conflict_function*** %overlaps_b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlaps_b.addr, metadata !9345, metadata !DIExpression()), !dbg !9346
  store %union.tree_node** %last_conflicts, %union.tree_node*** %last_conflicts.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %last_conflicts.addr, metadata !9347, metadata !DIExpression()), !dbg !9348
  call void @llvm.dbg.declare(metadata i8* %value0, metadata !9349, metadata !DIExpression()), !dbg !9350
  call void @llvm.dbg.declare(metadata i8* %value1, metadata !9351, metadata !DIExpression()), !dbg !9352
  call void @llvm.dbg.declare(metadata i8* %value2, metadata !9353, metadata !DIExpression()), !dbg !9354
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9355, metadata !DIExpression()), !dbg !9356
  call void @llvm.dbg.declare(metadata %union.tree_node** %difference, metadata !9357, metadata !DIExpression()), !dbg !9358
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !9359, metadata !DIExpression()), !dbg !9360
  %0 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9361
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !9361
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9361
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !9361
  %2 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9362
  %common2 = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !9362
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !9362
  %3 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !9362
  %call = call %union.tree_node* @signed_type_for_types(%union.tree_node* %1, %union.tree_node* %3), !dbg !9363
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !9364
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9365
  %5 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9366
  %call4 = call %union.tree_node* @chrec_convert(%union.tree_node* %4, %union.tree_node* %5, %union.gimple_statement_d* null), !dbg !9367
  store %union.tree_node* %call4, %union.tree_node** %chrec_a.addr, align 8, !dbg !9368
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9369
  %7 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9370
  %call5 = call %union.tree_node* @chrec_convert(%union.tree_node* %6, %union.tree_node* %7, %union.gimple_statement_d* null), !dbg !9371
  store %union.tree_node* %call5, %union.tree_node** %chrec_b.addr, align 8, !dbg !9372
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9373
  %9 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9374
  %call6 = call %union.tree_node* @initial_condition(%union.tree_node* %9), !dbg !9375
  %10 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9376
  %call7 = call %union.tree_node* @chrec_fold_minus(%union.tree_node* %8, %union.tree_node* %call6, %union.tree_node* %10), !dbg !9377
  store %union.tree_node* %call7, %union.tree_node** %difference, align 8, !dbg !9378
  %11 = load %union.tree_node*, %union.tree_node** %difference, align 8, !dbg !9379
  %call8 = call %union.tree_node* @initial_condition(%union.tree_node* %11), !dbg !9381
  %call9 = call zeroext i8 @chrec_is_positive(%union.tree_node* %call8, i8* %value0), !dbg !9382
  %tobool = icmp ne i8 %call9, 0, !dbg !9382
  br i1 %tobool, label %if.else, label %if.then, !dbg !9383

if.then:                                          ; preds = %entry
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9384
  %tobool10 = icmp ne %struct._IO_FILE* %12, null, !dbg !9384
  br i1 %tobool10, label %land.lhs.true, label %if.end, !dbg !9387

land.lhs.true:                                    ; preds = %if.then
  %13 = load i32, i32* @dump_flags, align 4, !dbg !9388
  %and = and i32 %13, 8, !dbg !9389
  %tobool11 = icmp ne i32 %and, 0, !dbg !9389
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !9390

if.then12:                                        ; preds = %land.lhs.true
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9391
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.113, i64 0, i64 0)), !dbg !9392
  br label %if.end, !dbg !9392

if.end:                                           ; preds = %if.then12, %land.lhs.true, %if.then
  %15 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !9393
  %inc = add nsw i32 %15, 1, !dbg !9393
  store i32 %inc, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !9393
  %call14 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9394
  %16 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9395
  store %struct.conflict_function* %call14, %struct.conflict_function** %16, align 8, !dbg !9396
  %call15 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9397
  %17 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9398
  store %struct.conflict_function* %call15, %struct.conflict_function** %17, align 8, !dbg !9399
  %18 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9400
  %19 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9401
  store %union.tree_node* %18, %union.tree_node** %19, align 8, !dbg !9402
  br label %return, !dbg !9403

if.else:                                          ; preds = %entry
  %20 = load i8, i8* %value0, align 1, !dbg !9404
  %conv = zext i8 %20 to i32, !dbg !9404
  %cmp = icmp eq i32 %conv, 0, !dbg !9407
  br i1 %cmp, label %if.then17, label %if.else73, !dbg !9408

if.then17:                                        ; preds = %if.else
  %21 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9409
  %exp = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !9409
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9409
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !9409
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9409
  %call18 = call zeroext i8 @chrec_is_positive(%union.tree_node* %22, i8* %value1), !dbg !9412
  %tobool19 = icmp ne i8 %call18, 0, !dbg !9412
  br i1 %tobool19, label %if.else31, label %if.then20, !dbg !9413

if.then20:                                        ; preds = %if.then17
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9414
  %tobool21 = icmp ne %struct._IO_FILE* %23, null, !dbg !9414
  br i1 %tobool21, label %land.lhs.true22, label %if.end27, !dbg !9417

land.lhs.true22:                                  ; preds = %if.then20
  %24 = load i32, i32* @dump_flags, align 4, !dbg !9418
  %and23 = and i32 %24, 8, !dbg !9419
  %tobool24 = icmp ne i32 %and23, 0, !dbg !9419
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !9420

if.then25:                                        ; preds = %land.lhs.true22
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9421
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.114, i64 0, i64 0)), !dbg !9422
  br label %if.end27, !dbg !9422

if.end27:                                         ; preds = %if.then25, %land.lhs.true22, %if.then20
  %call28 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9423
  %26 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9424
  store %struct.conflict_function* %call28, %struct.conflict_function** %26, align 8, !dbg !9425
  %call29 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9426
  %27 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9427
  store %struct.conflict_function* %call29, %struct.conflict_function** %27, align 8, !dbg !9428
  %28 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9429
  %29 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9430
  store %union.tree_node* %28, %union.tree_node** %29, align 8, !dbg !9431
  %30 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !9432
  %inc30 = add nsw i32 %30, 1, !dbg !9432
  store i32 %inc30, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !9432
  br label %return, !dbg !9433

if.else31:                                        ; preds = %if.then17
  %31 = load i8, i8* %value1, align 1, !dbg !9434
  %conv32 = zext i8 %31 to i32, !dbg !9434
  %cmp33 = icmp eq i32 %conv32, 1, !dbg !9437
  br i1 %cmp33, label %if.then35, label %if.else69, !dbg !9438

if.then35:                                        ; preds = %if.else31
  %32 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9439
  %exp36 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !9439
  %operands37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 3, !dbg !9439
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands37, i64 0, i64 2, !dbg !9439
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !9439
  %34 = load %union.tree_node*, %union.tree_node** %difference, align 8, !dbg !9442
  %call39 = call zeroext i8 @tree_fold_divides_p(%union.tree_node* %33, %union.tree_node* %34), !dbg !9443
  %tobool40 = icmp ne i8 %call39, 0, !dbg !9443
  br i1 %tobool40, label %if.then41, label %if.else65, !dbg !9444

if.then41:                                        ; preds = %if.then35
  call void @llvm.dbg.declare(metadata i64* %numiter, metadata !9445, metadata !DIExpression()), !dbg !9447
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !9448, metadata !DIExpression()), !dbg !9449
  %35 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9450
  %call42 = call %struct.loop* @get_chrec_loop(%union.tree_node* %35), !dbg !9451
  store %struct.loop* %call42, %struct.loop** %loop, align 8, !dbg !9449
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9452
  %call43 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %36), !dbg !9453
  %call44 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call43), !dbg !9454
  %37 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9455
  store %struct.conflict_function* %call44, %struct.conflict_function** %37, align 8, !dbg !9456
  %38 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9457
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9457
  %40 = load %union.tree_node*, %union.tree_node** %difference, align 8, !dbg !9457
  %call45 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 82, %union.tree_node* %39, %union.tree_node* %40), !dbg !9457
  %41 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9457
  %exp46 = bitcast %union.tree_node* %41 to %struct.tree_exp*, !dbg !9457
  %operands47 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp46, i32 0, i32 3, !dbg !9457
  %arrayidx48 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands47, i64 0, i64 2, !dbg !9457
  %42 = load %union.tree_node*, %union.tree_node** %arrayidx48, align 8, !dbg !9457
  %call49 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 76, %union.tree_node* %38, %union.tree_node* %call45, %union.tree_node* %42), !dbg !9457
  store %union.tree_node* %call49, %union.tree_node** %tmp, align 8, !dbg !9458
  %43 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !9459
  %call50 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %43), !dbg !9460
  %call51 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call50), !dbg !9461
  %44 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9462
  store %struct.conflict_function* %call51, %struct.conflict_function** %44, align 8, !dbg !9463
  %45 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !9464
  %46 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9465
  store %union.tree_node* %45, %union.tree_node** %46, align 8, !dbg !9466
  %47 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9467
  %call52 = call i64 @estimated_loop_iterations_int(%struct.loop* %47, i8 zeroext 0), !dbg !9468
  store i64 %call52, i64* %numiter, align 8, !dbg !9469
  %48 = load i64, i64* %numiter, align 8, !dbg !9470
  %cmp53 = icmp sge i64 %48, 0, !dbg !9472
  br i1 %cmp53, label %land.lhs.true55, label %if.end63, !dbg !9473

land.lhs.true55:                                  ; preds = %if.then41
  %49 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !9474
  %50 = load i64, i64* %numiter, align 8, !dbg !9475
  %call56 = call i32 @compare_tree_int(%union.tree_node* %49, i64 %50), !dbg !9476
  %cmp57 = icmp sgt i32 %call56, 0, !dbg !9477
  br i1 %cmp57, label %if.then59, label %if.end63, !dbg !9478

if.then59:                                        ; preds = %land.lhs.true55
  %51 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9479
  %52 = load %struct.conflict_function*, %struct.conflict_function** %51, align 8, !dbg !9481
  call void @free_conflict_function(%struct.conflict_function* %52), !dbg !9482
  %53 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9483
  %54 = load %struct.conflict_function*, %struct.conflict_function** %53, align 8, !dbg !9484
  call void @free_conflict_function(%struct.conflict_function* %54), !dbg !9485
  %call60 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9486
  %55 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9487
  store %struct.conflict_function* %call60, %struct.conflict_function** %55, align 8, !dbg !9488
  %call61 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9489
  %56 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9490
  store %struct.conflict_function* %call61, %struct.conflict_function** %56, align 8, !dbg !9491
  %57 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9492
  %58 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9493
  store %union.tree_node* %57, %union.tree_node** %58, align 8, !dbg !9494
  %59 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9495
  %inc62 = add nsw i32 %59, 1, !dbg !9495
  store i32 %inc62, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9495
  br label %return, !dbg !9496

if.end63:                                         ; preds = %land.lhs.true55, %if.then41
  %60 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 13), align 4, !dbg !9497
  %inc64 = add nsw i32 %60, 1, !dbg !9497
  store i32 %inc64, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 13), align 4, !dbg !9497
  br label %return, !dbg !9498

if.else65:                                        ; preds = %if.then35
  %call66 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9499
  %61 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9501
  store %struct.conflict_function* %call66, %struct.conflict_function** %61, align 8, !dbg !9502
  %call67 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9503
  %62 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9504
  store %struct.conflict_function* %call67, %struct.conflict_function** %62, align 8, !dbg !9505
  %63 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9506
  %64 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9507
  store %union.tree_node* %63, %union.tree_node** %64, align 8, !dbg !9508
  %65 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9509
  %inc68 = add nsw i32 %65, 1, !dbg !9509
  store i32 %inc68, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9509
  br label %return, !dbg !9510

if.else69:                                        ; preds = %if.else31
  %call70 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9511
  %66 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9513
  store %struct.conflict_function* %call70, %struct.conflict_function** %66, align 8, !dbg !9514
  %call71 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9515
  %67 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9516
  store %struct.conflict_function* %call71, %struct.conflict_function** %67, align 8, !dbg !9517
  %68 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9518
  %69 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9519
  store %union.tree_node* %68, %union.tree_node** %69, align 8, !dbg !9520
  %70 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9521
  %inc72 = add nsw i32 %70, 1, !dbg !9521
  store i32 %inc72, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9521
  br label %return, !dbg !9522

if.else73:                                        ; preds = %if.else
  %71 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9523
  %exp74 = bitcast %union.tree_node* %71 to %struct.tree_exp*, !dbg !9523
  %operands75 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp74, i32 0, i32 3, !dbg !9523
  %arrayidx76 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands75, i64 0, i64 2, !dbg !9523
  %72 = load %union.tree_node*, %union.tree_node** %arrayidx76, align 8, !dbg !9523
  %call77 = call zeroext i8 @chrec_is_positive(%union.tree_node* %72, i8* %value2), !dbg !9526
  %tobool78 = icmp ne i8 %call77, 0, !dbg !9526
  br i1 %tobool78, label %if.else90, label %if.then79, !dbg !9527

if.then79:                                        ; preds = %if.else73
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9528
  %tobool80 = icmp ne %struct._IO_FILE* %73, null, !dbg !9528
  br i1 %tobool80, label %land.lhs.true81, label %if.end86, !dbg !9531

land.lhs.true81:                                  ; preds = %if.then79
  %74 = load i32, i32* @dump_flags, align 4, !dbg !9532
  %and82 = and i32 %74, 8, !dbg !9533
  %tobool83 = icmp ne i32 %and82, 0, !dbg !9533
  br i1 %tobool83, label %if.then84, label %if.end86, !dbg !9534

if.then84:                                        ; preds = %land.lhs.true81
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9535
  %call85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %75, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.114, i64 0, i64 0)), !dbg !9536
  br label %if.end86, !dbg !9536

if.end86:                                         ; preds = %if.then84, %land.lhs.true81, %if.then79
  %call87 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9537
  %76 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9538
  store %struct.conflict_function* %call87, %struct.conflict_function** %76, align 8, !dbg !9539
  %call88 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9540
  %77 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9541
  store %struct.conflict_function* %call88, %struct.conflict_function** %77, align 8, !dbg !9542
  %78 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9543
  %79 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9544
  store %union.tree_node* %78, %union.tree_node** %79, align 8, !dbg !9545
  %80 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !9546
  %inc89 = add nsw i32 %80, 1, !dbg !9546
  store i32 %inc89, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 14), align 4, !dbg !9546
  br label %return, !dbg !9547

if.else90:                                        ; preds = %if.else73
  %81 = load i8, i8* %value2, align 1, !dbg !9548
  %conv91 = zext i8 %81 to i32, !dbg !9548
  %cmp92 = icmp eq i32 %conv91, 0, !dbg !9551
  br i1 %cmp92, label %if.then94, label %if.else129, !dbg !9552

if.then94:                                        ; preds = %if.else90
  %82 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9553
  %exp95 = bitcast %union.tree_node* %82 to %struct.tree_exp*, !dbg !9553
  %operands96 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp95, i32 0, i32 3, !dbg !9553
  %arrayidx97 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands96, i64 0, i64 2, !dbg !9553
  %83 = load %union.tree_node*, %union.tree_node** %arrayidx97, align 8, !dbg !9553
  %84 = load %union.tree_node*, %union.tree_node** %difference, align 8, !dbg !9556
  %call98 = call zeroext i8 @tree_fold_divides_p(%union.tree_node* %83, %union.tree_node* %84), !dbg !9557
  %tobool99 = icmp ne i8 %call98, 0, !dbg !9557
  br i1 %tobool99, label %if.then100, label %if.else125, !dbg !9558

if.then100:                                       ; preds = %if.then94
  call void @llvm.dbg.declare(metadata i64* %numiter101, metadata !9559, metadata !DIExpression()), !dbg !9561
  call void @llvm.dbg.declare(metadata %struct.loop** %loop102, metadata !9562, metadata !DIExpression()), !dbg !9563
  %85 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9564
  %call103 = call %struct.loop* @get_chrec_loop(%union.tree_node* %85), !dbg !9565
  store %struct.loop* %call103, %struct.loop** %loop102, align 8, !dbg !9563
  %86 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9566
  %call104 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %86), !dbg !9567
  %call105 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call104), !dbg !9568
  %87 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9569
  store %struct.conflict_function* %call105, %struct.conflict_function** %87, align 8, !dbg !9570
  %88 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9571
  %89 = load %union.tree_node*, %union.tree_node** %difference, align 8, !dbg !9571
  %90 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9571
  %exp106 = bitcast %union.tree_node* %90 to %struct.tree_exp*, !dbg !9571
  %operands107 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp106, i32 0, i32 3, !dbg !9571
  %arrayidx108 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands107, i64 0, i64 2, !dbg !9571
  %91 = load %union.tree_node*, %union.tree_node** %arrayidx108, align 8, !dbg !9571
  %call109 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 76, %union.tree_node* %88, %union.tree_node* %89, %union.tree_node* %91), !dbg !9571
  store %union.tree_node* %call109, %union.tree_node** %tmp, align 8, !dbg !9572
  %92 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !9573
  %call110 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %92), !dbg !9574
  %call111 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call110), !dbg !9575
  %93 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9576
  store %struct.conflict_function* %call111, %struct.conflict_function** %93, align 8, !dbg !9577
  %94 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !9578
  %95 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9579
  store %union.tree_node* %94, %union.tree_node** %95, align 8, !dbg !9580
  %96 = load %struct.loop*, %struct.loop** %loop102, align 8, !dbg !9581
  %call112 = call i64 @estimated_loop_iterations_int(%struct.loop* %96, i8 zeroext 0), !dbg !9582
  store i64 %call112, i64* %numiter101, align 8, !dbg !9583
  %97 = load i64, i64* %numiter101, align 8, !dbg !9584
  %cmp113 = icmp sge i64 %97, 0, !dbg !9586
  br i1 %cmp113, label %land.lhs.true115, label %if.end123, !dbg !9587

land.lhs.true115:                                 ; preds = %if.then100
  %98 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !9588
  %99 = load i64, i64* %numiter101, align 8, !dbg !9589
  %call116 = call i32 @compare_tree_int(%union.tree_node* %98, i64 %99), !dbg !9590
  %cmp117 = icmp sgt i32 %call116, 0, !dbg !9591
  br i1 %cmp117, label %if.then119, label %if.end123, !dbg !9592

if.then119:                                       ; preds = %land.lhs.true115
  %100 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9593
  %101 = load %struct.conflict_function*, %struct.conflict_function** %100, align 8, !dbg !9595
  call void @free_conflict_function(%struct.conflict_function* %101), !dbg !9596
  %102 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9597
  %103 = load %struct.conflict_function*, %struct.conflict_function** %102, align 8, !dbg !9598
  call void @free_conflict_function(%struct.conflict_function* %103), !dbg !9599
  %call120 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9600
  %104 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9601
  store %struct.conflict_function* %call120, %struct.conflict_function** %104, align 8, !dbg !9602
  %call121 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9603
  %105 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9604
  store %struct.conflict_function* %call121, %struct.conflict_function** %105, align 8, !dbg !9605
  %106 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9606
  %107 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9607
  store %union.tree_node* %106, %union.tree_node** %107, align 8, !dbg !9608
  %108 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9609
  %inc122 = add nsw i32 %108, 1, !dbg !9609
  store i32 %inc122, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9609
  br label %return, !dbg !9610

if.end123:                                        ; preds = %land.lhs.true115, %if.then100
  %109 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 13), align 4, !dbg !9611
  %inc124 = add nsw i32 %109, 1, !dbg !9611
  store i32 %inc124, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 13), align 4, !dbg !9611
  br label %return, !dbg !9612

if.else125:                                       ; preds = %if.then94
  %call126 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9613
  %110 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9615
  store %struct.conflict_function* %call126, %struct.conflict_function** %110, align 8, !dbg !9616
  %call127 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9617
  %111 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9618
  store %struct.conflict_function* %call127, %struct.conflict_function** %111, align 8, !dbg !9619
  %112 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9620
  %113 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9621
  store %union.tree_node* %112, %union.tree_node** %113, align 8, !dbg !9622
  %114 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9623
  %inc128 = add nsw i32 %114, 1, !dbg !9623
  store i32 %inc128, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9623
  br label %return, !dbg !9624

if.else129:                                       ; preds = %if.else90
  %call130 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9625
  %115 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9627
  store %struct.conflict_function* %call130, %struct.conflict_function** %115, align 8, !dbg !9628
  %call131 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9629
  %116 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9630
  store %struct.conflict_function* %call131, %struct.conflict_function** %116, align 8, !dbg !9631
  %117 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9632
  %118 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9633
  store %union.tree_node* %117, %union.tree_node** %118, align 8, !dbg !9634
  %119 = load i32, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9635
  %inc132 = add nsw i32 %119, 1, !dbg !9635
  store i32 %inc132, i32* getelementptr inbounds (%struct.datadep_stats, %struct.datadep_stats* @dependence_stats, i32 0, i32 12), align 4, !dbg !9635
  br label %return, !dbg !9636

return:                                           ; preds = %if.else129, %if.else125, %if.end123, %if.then119, %if.end86, %if.else69, %if.else65, %if.end63, %if.then59, %if.end27, %if.end
  ret void, !dbg !9637
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_subscript_affine_affine(%union.tree_node* %chrec_a, %union.tree_node* %chrec_b, %struct.conflict_function** %overlaps_a, %struct.conflict_function** %overlaps_b, %union.tree_node** %last_conflicts) #0 !dbg !9638 {
entry:
  %chrec_a.addr = alloca %union.tree_node*, align 8
  %chrec_b.addr = alloca %union.tree_node*, align 8
  %overlaps_a.addr = alloca %struct.conflict_function**, align 8
  %overlaps_b.addr = alloca %struct.conflict_function**, align 8
  %last_conflicts.addr = alloca %union.tree_node**, align 8
  %nb_vars_a = alloca i32, align 4
  %nb_vars_b = alloca i32, align 4
  %dim = alloca i32, align 4
  %init_a = alloca i64, align 8
  %init_b = alloca i64, align 8
  %gamma = alloca i64, align 8
  %gcd_alpha_beta = alloca i64, align 8
  %A = alloca i32**, align 8
  %U = alloca i32**, align 8
  %S = alloca i32**, align 8
  %step_a = alloca i64, align 8
  %step_b = alloca i64, align 8
  %niter = alloca i64, align 8
  %niter_a = alloca i64, align 8
  %niter_b = alloca i64, align 8
  %ova = alloca %struct.VEC_tree_heap*, align 8
  %ovb = alloca %struct.VEC_tree_heap*, align 8
  %i0 = alloca i64, align 8
  %j0 = alloca i64, align 8
  %i1 = alloca i64, align 8
  %j1 = alloca i64, align 8
  %niter_a153 = alloca i64, align 8
  %niter_b156 = alloca i64, align 8
  %niter159 = alloca i64, align 8
  %tau1 = alloca i64, align 8
  %x0 = alloca i64, align 8
  %y0 = alloca i64, align 8
  %min_multiple = alloca i64, align 8
  %x1 = alloca i64, align 8
  %y1 = alloca i64, align 8
  %tau2 = alloca i64, align 8
  %last_conflict = alloca i64, align 8
  store %union.tree_node* %chrec_a, %union.tree_node** %chrec_a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_a.addr, metadata !9639, metadata !DIExpression()), !dbg !9640
  store %union.tree_node* %chrec_b, %union.tree_node** %chrec_b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_b.addr, metadata !9641, metadata !DIExpression()), !dbg !9642
  store %struct.conflict_function** %overlaps_a, %struct.conflict_function*** %overlaps_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlaps_a.addr, metadata !9643, metadata !DIExpression()), !dbg !9644
  store %struct.conflict_function** %overlaps_b, %struct.conflict_function*** %overlaps_b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlaps_b.addr, metadata !9645, metadata !DIExpression()), !dbg !9646
  store %union.tree_node** %last_conflicts, %union.tree_node*** %last_conflicts.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %last_conflicts.addr, metadata !9647, metadata !DIExpression()), !dbg !9648
  call void @llvm.dbg.declare(metadata i32* %nb_vars_a, metadata !9649, metadata !DIExpression()), !dbg !9650
  call void @llvm.dbg.declare(metadata i32* %nb_vars_b, metadata !9651, metadata !DIExpression()), !dbg !9652
  call void @llvm.dbg.declare(metadata i32* %dim, metadata !9653, metadata !DIExpression()), !dbg !9654
  call void @llvm.dbg.declare(metadata i64* %init_a, metadata !9655, metadata !DIExpression()), !dbg !9656
  call void @llvm.dbg.declare(metadata i64* %init_b, metadata !9657, metadata !DIExpression()), !dbg !9658
  call void @llvm.dbg.declare(metadata i64* %gamma, metadata !9659, metadata !DIExpression()), !dbg !9660
  call void @llvm.dbg.declare(metadata i64* %gcd_alpha_beta, metadata !9661, metadata !DIExpression()), !dbg !9662
  call void @llvm.dbg.declare(metadata i32*** %A, metadata !9663, metadata !DIExpression()), !dbg !9665
  call void @llvm.dbg.declare(metadata i32*** %U, metadata !9666, metadata !DIExpression()), !dbg !9667
  call void @llvm.dbg.declare(metadata i32*** %S, metadata !9668, metadata !DIExpression()), !dbg !9669
  %0 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9670
  %1 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9672
  %call = call zeroext i8 @eq_evolutions_p(%union.tree_node* %0, %union.tree_node* %1), !dbg !9673
  %tobool = icmp ne i8 %call, 0, !dbg !9673
  br i1 %tobool, label %if.then, label %if.end, !dbg !9674

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9675
  %call1 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %2), !dbg !9677
  %call2 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call1), !dbg !9678
  %3 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9679
  store %struct.conflict_function* %call2, %struct.conflict_function** %3, align 8, !dbg !9680
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9681
  %call3 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %4), !dbg !9682
  %call4 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call3), !dbg !9683
  %5 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9684
  store %struct.conflict_function* %call4, %struct.conflict_function** %5, align 8, !dbg !9685
  %6 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9686
  %7 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9687
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !9688
  br label %if.end290, !dbg !9689

if.end:                                           ; preds = %entry
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9690
  %tobool5 = icmp ne %struct._IO_FILE* %8, null, !dbg !9690
  br i1 %tobool5, label %land.lhs.true, label %if.end9, !dbg !9692

land.lhs.true:                                    ; preds = %if.end
  %9 = load i32, i32* @dump_flags, align 4, !dbg !9693
  %and = and i32 %9, 8, !dbg !9694
  %tobool6 = icmp ne i32 %and, 0, !dbg !9694
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !9695

if.then7:                                         ; preds = %land.lhs.true
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9696
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.115, i64 0, i64 0)), !dbg !9697
  br label %if.end9, !dbg !9697

if.end9:                                          ; preds = %if.then7, %land.lhs.true, %if.end
  %11 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9698
  %call10 = call i32 @nb_vars_in_chrec(%union.tree_node* %11), !dbg !9699
  store i32 %call10, i32* %nb_vars_a, align 4, !dbg !9700
  %12 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9701
  %call11 = call i32 @nb_vars_in_chrec(%union.tree_node* %12), !dbg !9702
  store i32 %call11, i32* %nb_vars_b, align 4, !dbg !9703
  %13 = load i32, i32* %nb_vars_a, align 4, !dbg !9704
  %14 = load i32, i32* %nb_vars_b, align 4, !dbg !9705
  %add = add i32 %13, %14, !dbg !9706
  store i32 %add, i32* %dim, align 4, !dbg !9707
  %15 = load i32, i32* %dim, align 4, !dbg !9708
  %16 = load i32, i32* %dim, align 4, !dbg !9709
  %call12 = call i32** @lambda_matrix_new(i32 %15, i32 %16), !dbg !9710
  store i32** %call12, i32*** %U, align 8, !dbg !9711
  %17 = load i32, i32* %dim, align 4, !dbg !9712
  %call13 = call i32** @lambda_matrix_new(i32 %17, i32 1), !dbg !9713
  store i32** %call13, i32*** %A, align 8, !dbg !9714
  %18 = load i32, i32* %dim, align 4, !dbg !9715
  %call14 = call i32** @lambda_matrix_new(i32 %18, i32 1), !dbg !9716
  store i32** %call14, i32*** %S, align 8, !dbg !9717
  %19 = load i32**, i32*** %A, align 8, !dbg !9718
  %20 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9719
  %call15 = call %union.tree_node* @initialize_matrix_A(i32** %19, %union.tree_node* %20, i32 0, i32 1), !dbg !9720
  %call16 = call i64 @int_cst_value(%union.tree_node* %call15), !dbg !9721
  store i64 %call16, i64* %init_a, align 8, !dbg !9722
  %21 = load i32**, i32*** %A, align 8, !dbg !9723
  %22 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9724
  %23 = load i32, i32* %nb_vars_a, align 4, !dbg !9725
  %call17 = call %union.tree_node* @initialize_matrix_A(i32** %21, %union.tree_node* %22, i32 %23, i32 -1), !dbg !9726
  %call18 = call i64 @int_cst_value(%union.tree_node* %call17), !dbg !9727
  store i64 %call18, i64* %init_b, align 8, !dbg !9728
  %24 = load i64, i64* %init_b, align 8, !dbg !9729
  %25 = load i64, i64* %init_a, align 8, !dbg !9730
  %sub = sub nsw i64 %24, %25, !dbg !9731
  store i64 %sub, i64* %gamma, align 8, !dbg !9732
  %26 = load i64, i64* %gamma, align 8, !dbg !9733
  %cmp = icmp eq i64 %26, 0, !dbg !9735
  br i1 %cmp, label %if.then19, label %if.end64, !dbg !9736

if.then19:                                        ; preds = %if.end9
  %27 = load i32, i32* %nb_vars_a, align 4, !dbg !9737
  %cmp20 = icmp eq i32 %27, 1, !dbg !9740
  br i1 %cmp20, label %land.lhs.true21, label %if.else, !dbg !9741

land.lhs.true21:                                  ; preds = %if.then19
  %28 = load i32, i32* %nb_vars_b, align 4, !dbg !9742
  %cmp22 = icmp eq i32 %28, 1, !dbg !9743
  br i1 %cmp22, label %if.then23, label %if.else, !dbg !9744

if.then23:                                        ; preds = %land.lhs.true21
  call void @llvm.dbg.declare(metadata i64* %step_a, metadata !9745, metadata !DIExpression()), !dbg !9747
  call void @llvm.dbg.declare(metadata i64* %step_b, metadata !9748, metadata !DIExpression()), !dbg !9749
  call void @llvm.dbg.declare(metadata i64* %niter, metadata !9750, metadata !DIExpression()), !dbg !9751
  call void @llvm.dbg.declare(metadata i64* %niter_a, metadata !9752, metadata !DIExpression()), !dbg !9753
  call void @llvm.dbg.declare(metadata i64* %niter_b, metadata !9754, metadata !DIExpression()), !dbg !9755
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %ova, metadata !9756, metadata !DIExpression()), !dbg !9757
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %ovb, metadata !9758, metadata !DIExpression()), !dbg !9759
  %29 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9760
  %call24 = call %struct.loop* @get_chrec_loop(%union.tree_node* %29), !dbg !9761
  %call25 = call i64 @estimated_loop_iterations_int(%struct.loop* %call24, i8 zeroext 0), !dbg !9762
  store i64 %call25, i64* %niter_a, align 8, !dbg !9763
  %30 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9764
  %call26 = call %struct.loop* @get_chrec_loop(%union.tree_node* %30), !dbg !9765
  %call27 = call i64 @estimated_loop_iterations_int(%struct.loop* %call26, i8 zeroext 0), !dbg !9766
  store i64 %call27, i64* %niter_b, align 8, !dbg !9767
  %31 = load i64, i64* %niter_a, align 8, !dbg !9768
  %32 = load i64, i64* %niter_b, align 8, !dbg !9768
  %cmp28 = icmp slt i64 %31, %32, !dbg !9768
  br i1 %cmp28, label %cond.true, label %cond.false, !dbg !9768

cond.true:                                        ; preds = %if.then23
  %33 = load i64, i64* %niter_a, align 8, !dbg !9768
  br label %cond.end, !dbg !9768

cond.false:                                       ; preds = %if.then23
  %34 = load i64, i64* %niter_b, align 8, !dbg !9768
  br label %cond.end, !dbg !9768

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %33, %cond.true ], [ %34, %cond.false ], !dbg !9768
  store i64 %cond, i64* %niter, align 8, !dbg !9769
  %35 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9770
  %exp = bitcast %union.tree_node* %35 to %struct.tree_exp*, !dbg !9770
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9770
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !9770
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9770
  %call29 = call i64 @int_cst_value(%union.tree_node* %36), !dbg !9771
  store i64 %call29, i64* %step_a, align 8, !dbg !9772
  %37 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9773
  %exp30 = bitcast %union.tree_node* %37 to %struct.tree_exp*, !dbg !9773
  %operands31 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp30, i32 0, i32 3, !dbg !9773
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands31, i64 0, i64 2, !dbg !9773
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !9773
  %call33 = call i64 @int_cst_value(%union.tree_node* %38), !dbg !9774
  store i64 %call33, i64* %step_b, align 8, !dbg !9775
  %39 = load i64, i64* %niter, align 8, !dbg !9776
  %conv = trunc i64 %39 to i32, !dbg !9776
  %40 = load i64, i64* %step_a, align 8, !dbg !9777
  %conv34 = trunc i64 %40 to i32, !dbg !9777
  %41 = load i64, i64* %step_b, align 8, !dbg !9778
  %conv35 = trunc i64 %41 to i32, !dbg !9778
  %42 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9779
  call void @compute_overlap_steps_for_affine_univar(i32 %conv, i32 %conv34, i32 %conv35, %struct.VEC_tree_heap** %ova, %struct.VEC_tree_heap** %ovb, %union.tree_node** %42, i32 1), !dbg !9780
  %43 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ova, align 8, !dbg !9781
  %call36 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %43), !dbg !9782
  %44 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9783
  store %struct.conflict_function* %call36, %struct.conflict_function** %44, align 8, !dbg !9784
  %45 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ovb, align 8, !dbg !9785
  %call37 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %45), !dbg !9786
  %46 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9787
  store %struct.conflict_function* %call37, %struct.conflict_function** %46, align 8, !dbg !9788
  br label %if.end63, !dbg !9789

if.else:                                          ; preds = %land.lhs.true21, %if.then19
  %47 = load i32, i32* %nb_vars_a, align 4, !dbg !9790
  %cmp38 = icmp eq i32 %47, 2, !dbg !9792
  br i1 %cmp38, label %land.lhs.true40, label %if.else44, !dbg !9793

land.lhs.true40:                                  ; preds = %if.else
  %48 = load i32, i32* %nb_vars_b, align 4, !dbg !9794
  %cmp41 = icmp eq i32 %48, 1, !dbg !9795
  br i1 %cmp41, label %if.then43, label %if.else44, !dbg !9796

if.then43:                                        ; preds = %land.lhs.true40
  %49 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9797
  %50 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9798
  %51 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9799
  %52 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9800
  %53 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9801
  call void @compute_overlap_steps_for_affine_1_2(%union.tree_node* %49, %union.tree_node* %50, %struct.conflict_function** %51, %struct.conflict_function** %52, %union.tree_node** %53), !dbg !9802
  br label %if.end62, !dbg !9802

if.else44:                                        ; preds = %land.lhs.true40, %if.else
  %54 = load i32, i32* %nb_vars_a, align 4, !dbg !9803
  %cmp45 = icmp eq i32 %54, 1, !dbg !9805
  br i1 %cmp45, label %land.lhs.true47, label %if.else51, !dbg !9806

land.lhs.true47:                                  ; preds = %if.else44
  %55 = load i32, i32* %nb_vars_b, align 4, !dbg !9807
  %cmp48 = icmp eq i32 %55, 2, !dbg !9808
  br i1 %cmp48, label %if.then50, label %if.else51, !dbg !9809

if.then50:                                        ; preds = %land.lhs.true47
  %56 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9810
  %57 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9811
  %58 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9812
  %59 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9813
  %60 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9814
  call void @compute_overlap_steps_for_affine_1_2(%union.tree_node* %56, %union.tree_node* %57, %struct.conflict_function** %58, %struct.conflict_function** %59, %union.tree_node** %60), !dbg !9815
  br label %if.end61, !dbg !9815

if.else51:                                        ; preds = %land.lhs.true47, %if.else44
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9816
  %tobool52 = icmp ne %struct._IO_FILE* %61, null, !dbg !9816
  br i1 %tobool52, label %land.lhs.true53, label %if.end58, !dbg !9819

land.lhs.true53:                                  ; preds = %if.else51
  %62 = load i32, i32* @dump_flags, align 4, !dbg !9820
  %and54 = and i32 %62, 8, !dbg !9821
  %tobool55 = icmp ne i32 %and54, 0, !dbg !9821
  br i1 %tobool55, label %if.then56, label %if.end58, !dbg !9822

if.then56:                                        ; preds = %land.lhs.true53
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9823
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.116, i64 0, i64 0)), !dbg !9824
  br label %if.end58, !dbg !9824

if.end58:                                         ; preds = %if.then56, %land.lhs.true53, %if.else51
  %call59 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9825
  %64 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9826
  store %struct.conflict_function* %call59, %struct.conflict_function** %64, align 8, !dbg !9827
  %call60 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9828
  %65 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9829
  store %struct.conflict_function* %call60, %struct.conflict_function** %65, align 8, !dbg !9830
  %66 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9831
  %67 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9832
  store %union.tree_node* %66, %union.tree_node** %67, align 8, !dbg !9833
  br label %if.end61

if.end61:                                         ; preds = %if.end58, %if.then50
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then43
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %cond.end
  br label %end_analyze_subs_aa, !dbg !9834

if.end64:                                         ; preds = %if.end9
  %68 = load i32**, i32*** %A, align 8, !dbg !9835
  %69 = load i32, i32* %dim, align 4, !dbg !9836
  %70 = load i32**, i32*** %S, align 8, !dbg !9837
  %71 = load i32**, i32*** %U, align 8, !dbg !9838
  call void @lambda_matrix_right_hermite(i32** %68, i32 %69, i32 1, i32** %70, i32** %71), !dbg !9839
  %72 = load i32**, i32*** %S, align 8, !dbg !9840
  %arrayidx65 = getelementptr inbounds i32*, i32** %72, i64 0, !dbg !9840
  %73 = load i32*, i32** %arrayidx65, align 8, !dbg !9840
  %arrayidx66 = getelementptr inbounds i32, i32* %73, i64 0, !dbg !9840
  %74 = load i32, i32* %arrayidx66, align 4, !dbg !9840
  %cmp67 = icmp slt i32 %74, 0, !dbg !9842
  br i1 %cmp67, label %if.then69, label %if.end72, !dbg !9843

if.then69:                                        ; preds = %if.end64
  %75 = load i32**, i32*** %S, align 8, !dbg !9844
  %arrayidx70 = getelementptr inbounds i32*, i32** %75, i64 0, !dbg !9844
  %76 = load i32*, i32** %arrayidx70, align 8, !dbg !9844
  %arrayidx71 = getelementptr inbounds i32, i32* %76, i64 0, !dbg !9844
  %77 = load i32, i32* %arrayidx71, align 4, !dbg !9846
  %mul = mul nsw i32 %77, -1, !dbg !9846
  store i32 %mul, i32* %arrayidx71, align 4, !dbg !9846
  %78 = load i32**, i32*** %U, align 8, !dbg !9847
  %79 = load i32, i32* %dim, align 4, !dbg !9848
  call void @lambda_matrix_row_negate(i32** %78, i32 %79, i32 0), !dbg !9849
  br label %if.end72, !dbg !9850

if.end72:                                         ; preds = %if.then69, %if.end64
  %80 = load i32**, i32*** %S, align 8, !dbg !9851
  %arrayidx73 = getelementptr inbounds i32*, i32** %80, i64 0, !dbg !9851
  %81 = load i32*, i32** %arrayidx73, align 8, !dbg !9851
  %arrayidx74 = getelementptr inbounds i32, i32* %81, i64 0, !dbg !9851
  %82 = load i32, i32* %arrayidx74, align 4, !dbg !9851
  %conv75 = sext i32 %82 to i64, !dbg !9851
  store i64 %conv75, i64* %gcd_alpha_beta, align 8, !dbg !9852
  %83 = load i64, i64* %gcd_alpha_beta, align 8, !dbg !9853
  %cmp76 = icmp eq i64 %83, 0, !dbg !9855
  br i1 %cmp76, label %if.then78, label %if.end81, !dbg !9856

if.then78:                                        ; preds = %if.end72
  %call79 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9857
  %84 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9859
  store %struct.conflict_function* %call79, %struct.conflict_function** %84, align 8, !dbg !9860
  %call80 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !9861
  %85 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9862
  store %struct.conflict_function* %call80, %struct.conflict_function** %85, align 8, !dbg !9863
  %86 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !9864
  %87 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9865
  store %union.tree_node* %86, %union.tree_node** %87, align 8, !dbg !9866
  br label %end_analyze_subs_aa, !dbg !9867

if.end81:                                         ; preds = %if.end72
  %88 = load i64, i64* %gcd_alpha_beta, align 8, !dbg !9868
  %conv82 = trunc i64 %88 to i32, !dbg !9868
  %89 = load i64, i64* %gamma, align 8, !dbg !9870
  %conv83 = trunc i64 %89 to i32, !dbg !9870
  %call84 = call zeroext i8 @int_divides_p(i32 %conv82, i32 %conv83), !dbg !9871
  %tobool85 = icmp ne i8 %call84, 0, !dbg !9871
  br i1 %tobool85, label %if.else89, label %if.then86, !dbg !9872

if.then86:                                        ; preds = %if.end81
  %call87 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9873
  %90 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9875
  store %struct.conflict_function* %call87, %struct.conflict_function** %90, align 8, !dbg !9876
  %call88 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9877
  %91 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9878
  store %struct.conflict_function* %call88, %struct.conflict_function** %91, align 8, !dbg !9879
  %92 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9880
  %93 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9881
  store %union.tree_node* %92, %union.tree_node** %93, align 8, !dbg !9882
  br label %if.end280, !dbg !9883

if.else89:                                        ; preds = %if.end81
  %94 = load i32, i32* %nb_vars_a, align 4, !dbg !9884
  %cmp90 = icmp eq i32 %94, 1, !dbg !9886
  br i1 %cmp90, label %land.lhs.true92, label %if.else269, !dbg !9887

land.lhs.true92:                                  ; preds = %if.else89
  %95 = load i32, i32* %nb_vars_b, align 4, !dbg !9888
  %cmp93 = icmp eq i32 %95, 1, !dbg !9889
  br i1 %cmp93, label %if.then95, label %if.else269, !dbg !9890

if.then95:                                        ; preds = %land.lhs.true92
  %96 = load i32**, i32*** %A, align 8, !dbg !9891
  %arrayidx96 = getelementptr inbounds i32*, i32** %96, i64 0, !dbg !9891
  %97 = load i32*, i32** %arrayidx96, align 8, !dbg !9891
  %arrayidx97 = getelementptr inbounds i32, i32* %97, i64 0, !dbg !9891
  %98 = load i32, i32* %arrayidx97, align 4, !dbg !9891
  %cmp98 = icmp sgt i32 %98, 0, !dbg !9894
  br i1 %cmp98, label %land.lhs.true100, label %lor.lhs.false, !dbg !9895

land.lhs.true100:                                 ; preds = %if.then95
  %99 = load i32**, i32*** %A, align 8, !dbg !9896
  %arrayidx101 = getelementptr inbounds i32*, i32** %99, i64 1, !dbg !9896
  %100 = load i32*, i32** %arrayidx101, align 8, !dbg !9896
  %arrayidx102 = getelementptr inbounds i32, i32* %100, i64 0, !dbg !9896
  %101 = load i32, i32* %arrayidx102, align 4, !dbg !9896
  %sub103 = sub nsw i32 0, %101, !dbg !9897
  %cmp104 = icmp sgt i32 %sub103, 0, !dbg !9898
  br i1 %cmp104, label %if.then116, label %lor.lhs.false, !dbg !9899

lor.lhs.false:                                    ; preds = %land.lhs.true100, %if.then95
  %102 = load i32**, i32*** %A, align 8, !dbg !9900
  %arrayidx106 = getelementptr inbounds i32*, i32** %102, i64 0, !dbg !9900
  %103 = load i32*, i32** %arrayidx106, align 8, !dbg !9900
  %arrayidx107 = getelementptr inbounds i32, i32* %103, i64 0, !dbg !9900
  %104 = load i32, i32* %arrayidx107, align 4, !dbg !9900
  %cmp108 = icmp slt i32 %104, 0, !dbg !9901
  br i1 %cmp108, label %land.lhs.true110, label %if.else258, !dbg !9902

land.lhs.true110:                                 ; preds = %lor.lhs.false
  %105 = load i32**, i32*** %A, align 8, !dbg !9903
  %arrayidx111 = getelementptr inbounds i32*, i32** %105, i64 1, !dbg !9903
  %106 = load i32*, i32** %arrayidx111, align 8, !dbg !9903
  %arrayidx112 = getelementptr inbounds i32, i32* %106, i64 0, !dbg !9903
  %107 = load i32, i32* %arrayidx112, align 4, !dbg !9903
  %sub113 = sub nsw i32 0, %107, !dbg !9904
  %cmp114 = icmp slt i32 %sub113, 0, !dbg !9905
  br i1 %cmp114, label %if.then116, label %if.else258, !dbg !9906

if.then116:                                       ; preds = %land.lhs.true110, %land.lhs.true100
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !9907, metadata !DIExpression()), !dbg !9909
  call void @llvm.dbg.declare(metadata i64* %j0, metadata !9910, metadata !DIExpression()), !dbg !9911
  call void @llvm.dbg.declare(metadata i64* %i1, metadata !9912, metadata !DIExpression()), !dbg !9913
  call void @llvm.dbg.declare(metadata i64* %j1, metadata !9914, metadata !DIExpression()), !dbg !9915
  %108 = load i32**, i32*** %U, align 8, !dbg !9916
  %arrayidx117 = getelementptr inbounds i32*, i32** %108, i64 0, !dbg !9916
  %109 = load i32*, i32** %arrayidx117, align 8, !dbg !9916
  %arrayidx118 = getelementptr inbounds i32, i32* %109, i64 0, !dbg !9916
  %110 = load i32, i32* %arrayidx118, align 4, !dbg !9916
  %conv119 = sext i32 %110 to i64, !dbg !9916
  %111 = load i64, i64* %gamma, align 8, !dbg !9917
  %mul120 = mul nsw i64 %conv119, %111, !dbg !9918
  %112 = load i64, i64* %gcd_alpha_beta, align 8, !dbg !9919
  %div = sdiv i64 %mul120, %112, !dbg !9920
  store i64 %div, i64* %i0, align 8, !dbg !9921
  %113 = load i32**, i32*** %U, align 8, !dbg !9922
  %arrayidx121 = getelementptr inbounds i32*, i32** %113, i64 0, !dbg !9922
  %114 = load i32*, i32** %arrayidx121, align 8, !dbg !9922
  %arrayidx122 = getelementptr inbounds i32, i32* %114, i64 1, !dbg !9922
  %115 = load i32, i32* %arrayidx122, align 4, !dbg !9922
  %conv123 = sext i32 %115 to i64, !dbg !9922
  %116 = load i64, i64* %gamma, align 8, !dbg !9923
  %mul124 = mul nsw i64 %conv123, %116, !dbg !9924
  %117 = load i64, i64* %gcd_alpha_beta, align 8, !dbg !9925
  %div125 = sdiv i64 %mul124, %117, !dbg !9926
  store i64 %div125, i64* %j0, align 8, !dbg !9927
  %118 = load i32**, i32*** %U, align 8, !dbg !9928
  %arrayidx126 = getelementptr inbounds i32*, i32** %118, i64 1, !dbg !9928
  %119 = load i32*, i32** %arrayidx126, align 8, !dbg !9928
  %arrayidx127 = getelementptr inbounds i32, i32* %119, i64 0, !dbg !9928
  %120 = load i32, i32* %arrayidx127, align 4, !dbg !9928
  %conv128 = sext i32 %120 to i64, !dbg !9928
  store i64 %conv128, i64* %i1, align 8, !dbg !9929
  %121 = load i32**, i32*** %U, align 8, !dbg !9930
  %arrayidx129 = getelementptr inbounds i32*, i32** %121, i64 1, !dbg !9930
  %122 = load i32*, i32** %arrayidx129, align 8, !dbg !9930
  %arrayidx130 = getelementptr inbounds i32, i32* %122, i64 1, !dbg !9930
  %123 = load i32, i32* %arrayidx130, align 4, !dbg !9930
  %conv131 = sext i32 %123 to i64, !dbg !9930
  store i64 %conv131, i64* %j1, align 8, !dbg !9931
  %124 = load i64, i64* %i1, align 8, !dbg !9932
  %cmp132 = icmp eq i64 %124, 0, !dbg !9934
  br i1 %cmp132, label %land.lhs.true134, label %lor.lhs.false137, !dbg !9935

land.lhs.true134:                                 ; preds = %if.then116
  %125 = load i64, i64* %i0, align 8, !dbg !9936
  %cmp135 = icmp slt i64 %125, 0, !dbg !9937
  br i1 %cmp135, label %if.then143, label %lor.lhs.false137, !dbg !9938

lor.lhs.false137:                                 ; preds = %land.lhs.true134, %if.then116
  %126 = load i64, i64* %j1, align 8, !dbg !9939
  %cmp138 = icmp eq i64 %126, 0, !dbg !9940
  br i1 %cmp138, label %land.lhs.true140, label %if.end146, !dbg !9941

land.lhs.true140:                                 ; preds = %lor.lhs.false137
  %127 = load i64, i64* %j0, align 8, !dbg !9942
  %cmp141 = icmp slt i64 %127, 0, !dbg !9943
  br i1 %cmp141, label %if.then143, label %if.end146, !dbg !9944

if.then143:                                       ; preds = %land.lhs.true140, %land.lhs.true134
  %call144 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9945
  %128 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !9947
  store %struct.conflict_function* %call144, %struct.conflict_function** %128, align 8, !dbg !9948
  %call145 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !9949
  %129 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !9950
  store %struct.conflict_function* %call145, %struct.conflict_function** %129, align 8, !dbg !9951
  %130 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9952
  %131 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !9953
  store %union.tree_node* %130, %union.tree_node** %131, align 8, !dbg !9954
  br label %end_analyze_subs_aa, !dbg !9955

if.end146:                                        ; preds = %land.lhs.true140, %lor.lhs.false137
  %132 = load i64, i64* %i1, align 8, !dbg !9956
  %cmp147 = icmp sgt i64 %132, 0, !dbg !9958
  br i1 %cmp147, label %land.lhs.true149, label %if.else247, !dbg !9959

land.lhs.true149:                                 ; preds = %if.end146
  %133 = load i64, i64* %j1, align 8, !dbg !9960
  %cmp150 = icmp sgt i64 %133, 0, !dbg !9961
  br i1 %cmp150, label %if.then152, label %if.else247, !dbg !9962

if.then152:                                       ; preds = %land.lhs.true149
  call void @llvm.dbg.declare(metadata i64* %niter_a153, metadata !9963, metadata !DIExpression()), !dbg !9965
  %134 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !9966
  %call154 = call %struct.loop* @get_chrec_loop(%union.tree_node* %134), !dbg !9967
  %call155 = call i64 @estimated_loop_iterations_int(%struct.loop* %call154, i8 zeroext 0), !dbg !9968
  store i64 %call155, i64* %niter_a153, align 8, !dbg !9965
  call void @llvm.dbg.declare(metadata i64* %niter_b156, metadata !9969, metadata !DIExpression()), !dbg !9970
  %135 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !9971
  %call157 = call %struct.loop* @get_chrec_loop(%union.tree_node* %135), !dbg !9972
  %call158 = call i64 @estimated_loop_iterations_int(%struct.loop* %call157, i8 zeroext 0), !dbg !9973
  store i64 %call158, i64* %niter_b156, align 8, !dbg !9970
  call void @llvm.dbg.declare(metadata i64* %niter159, metadata !9974, metadata !DIExpression()), !dbg !9975
  %136 = load i64, i64* %niter_a153, align 8, !dbg !9976
  %137 = load i64, i64* %niter_b156, align 8, !dbg !9976
  %cmp160 = icmp slt i64 %136, %137, !dbg !9976
  br i1 %cmp160, label %cond.true162, label %cond.false163, !dbg !9976

cond.true162:                                     ; preds = %if.then152
  %138 = load i64, i64* %niter_a153, align 8, !dbg !9976
  br label %cond.end164, !dbg !9976

cond.false163:                                    ; preds = %if.then152
  %139 = load i64, i64* %niter_b156, align 8, !dbg !9976
  br label %cond.end164, !dbg !9976

cond.end164:                                      ; preds = %cond.false163, %cond.true162
  %cond165 = phi i64 [ %138, %cond.true162 ], [ %139, %cond.false163 ], !dbg !9976
  store i64 %cond165, i64* %niter159, align 8, !dbg !9975
  call void @llvm.dbg.declare(metadata i64* %tau1, metadata !9977, metadata !DIExpression()), !dbg !9978
  %140 = load i64, i64* %i0, align 8, !dbg !9979
  %sub166 = sub nsw i64 0, %140, !dbg !9979
  %141 = load i64, i64* %i1, align 8, !dbg !9979
  %add167 = add nsw i64 %sub166, %141, !dbg !9979
  %sub168 = sub nsw i64 %add167, 1, !dbg !9979
  %142 = load i64, i64* %i1, align 8, !dbg !9979
  %div169 = sdiv i64 %sub168, %142, !dbg !9979
  %143 = load i64, i64* %j0, align 8, !dbg !9979
  %sub170 = sub nsw i64 0, %143, !dbg !9979
  %144 = load i64, i64* %j1, align 8, !dbg !9979
  %add171 = add nsw i64 %sub170, %144, !dbg !9979
  %sub172 = sub nsw i64 %add171, 1, !dbg !9979
  %145 = load i64, i64* %j1, align 8, !dbg !9979
  %div173 = sdiv i64 %sub172, %145, !dbg !9979
  %cmp174 = icmp sgt i64 %div169, %div173, !dbg !9979
  br i1 %cmp174, label %cond.true176, label %cond.false181, !dbg !9979

cond.true176:                                     ; preds = %cond.end164
  %146 = load i64, i64* %i0, align 8, !dbg !9979
  %sub177 = sub nsw i64 0, %146, !dbg !9979
  %147 = load i64, i64* %i1, align 8, !dbg !9979
  %add178 = add nsw i64 %sub177, %147, !dbg !9979
  %sub179 = sub nsw i64 %add178, 1, !dbg !9979
  %148 = load i64, i64* %i1, align 8, !dbg !9979
  %div180 = sdiv i64 %sub179, %148, !dbg !9979
  br label %cond.end186, !dbg !9979

cond.false181:                                    ; preds = %cond.end164
  %149 = load i64, i64* %j0, align 8, !dbg !9979
  %sub182 = sub nsw i64 0, %149, !dbg !9979
  %150 = load i64, i64* %j1, align 8, !dbg !9979
  %add183 = add nsw i64 %sub182, %150, !dbg !9979
  %sub184 = sub nsw i64 %add183, 1, !dbg !9979
  %151 = load i64, i64* %j1, align 8, !dbg !9979
  %div185 = sdiv i64 %sub184, %151, !dbg !9979
  br label %cond.end186, !dbg !9979

cond.end186:                                      ; preds = %cond.false181, %cond.true176
  %cond187 = phi i64 [ %div180, %cond.true176 ], [ %div185, %cond.false181 ], !dbg !9979
  store i64 %cond187, i64* %tau1, align 8, !dbg !9978
  call void @llvm.dbg.declare(metadata i64* %x0, metadata !9980, metadata !DIExpression()), !dbg !9981
  %152 = load i64, i64* %i1, align 8, !dbg !9982
  %153 = load i64, i64* %tau1, align 8, !dbg !9983
  %mul188 = mul nsw i64 %152, %153, !dbg !9984
  %154 = load i64, i64* %i0, align 8, !dbg !9985
  %add189 = add nsw i64 %mul188, %154, !dbg !9986
  store i64 %add189, i64* %x0, align 8, !dbg !9981
  call void @llvm.dbg.declare(metadata i64* %y0, metadata !9987, metadata !DIExpression()), !dbg !9988
  %155 = load i64, i64* %j1, align 8, !dbg !9989
  %156 = load i64, i64* %tau1, align 8, !dbg !9990
  %mul190 = mul nsw i64 %155, %156, !dbg !9991
  %157 = load i64, i64* %j0, align 8, !dbg !9992
  %add191 = add nsw i64 %mul190, %157, !dbg !9993
  store i64 %add191, i64* %y0, align 8, !dbg !9988
  call void @llvm.dbg.declare(metadata i64* %min_multiple, metadata !9994, metadata !DIExpression()), !dbg !9995
  %158 = load i64, i64* %x0, align 8, !dbg !9996
  %159 = load i64, i64* %i1, align 8, !dbg !9996
  %div192 = sdiv i64 %158, %159, !dbg !9996
  %160 = load i64, i64* %y0, align 8, !dbg !9996
  %161 = load i64, i64* %j1, align 8, !dbg !9996
  %div193 = sdiv i64 %160, %161, !dbg !9996
  %cmp194 = icmp slt i64 %div192, %div193, !dbg !9996
  br i1 %cmp194, label %cond.true196, label %cond.false198, !dbg !9996

cond.true196:                                     ; preds = %cond.end186
  %162 = load i64, i64* %x0, align 8, !dbg !9996
  %163 = load i64, i64* %i1, align 8, !dbg !9996
  %div197 = sdiv i64 %162, %163, !dbg !9996
  br label %cond.end200, !dbg !9996

cond.false198:                                    ; preds = %cond.end186
  %164 = load i64, i64* %y0, align 8, !dbg !9996
  %165 = load i64, i64* %j1, align 8, !dbg !9996
  %div199 = sdiv i64 %164, %165, !dbg !9996
  br label %cond.end200, !dbg !9996

cond.end200:                                      ; preds = %cond.false198, %cond.true196
  %cond201 = phi i64 [ %div197, %cond.true196 ], [ %div199, %cond.false198 ], !dbg !9996
  store i64 %cond201, i64* %min_multiple, align 8, !dbg !9995
  call void @llvm.dbg.declare(metadata i64* %x1, metadata !9997, metadata !DIExpression()), !dbg !9998
  %166 = load i64, i64* %x0, align 8, !dbg !9999
  %167 = load i64, i64* %i1, align 8, !dbg !10000
  %168 = load i64, i64* %min_multiple, align 8, !dbg !10001
  %mul202 = mul nsw i64 %167, %168, !dbg !10002
  %sub203 = sub nsw i64 %166, %mul202, !dbg !10003
  store i64 %sub203, i64* %x1, align 8, !dbg !9998
  call void @llvm.dbg.declare(metadata i64* %y1, metadata !10004, metadata !DIExpression()), !dbg !10005
  %169 = load i64, i64* %y0, align 8, !dbg !10006
  %170 = load i64, i64* %j1, align 8, !dbg !10007
  %171 = load i64, i64* %min_multiple, align 8, !dbg !10008
  %mul204 = mul nsw i64 %170, %171, !dbg !10009
  %sub205 = sub nsw i64 %169, %mul204, !dbg !10010
  store i64 %sub205, i64* %y1, align 8, !dbg !10005
  %172 = load i64, i64* %niter159, align 8, !dbg !10011
  %cmp206 = icmp sgt i64 %172, 0, !dbg !10013
  br i1 %cmp206, label %if.then208, label %if.else237, !dbg !10014

if.then208:                                       ; preds = %cond.end200
  call void @llvm.dbg.declare(metadata i64* %tau2, metadata !10015, metadata !DIExpression()), !dbg !10017
  %173 = load i64, i64* %niter159, align 8, !dbg !10018
  %174 = load i64, i64* %i0, align 8, !dbg !10018
  %sub209 = sub nsw i64 %173, %174, !dbg !10018
  %175 = load i64, i64* %i1, align 8, !dbg !10018
  %div210 = sdiv i64 %sub209, %175, !dbg !10018
  %176 = load i64, i64* %niter159, align 8, !dbg !10018
  %177 = load i64, i64* %j0, align 8, !dbg !10018
  %sub211 = sub nsw i64 %176, %177, !dbg !10018
  %178 = load i64, i64* %j1, align 8, !dbg !10018
  %div212 = sdiv i64 %sub211, %178, !dbg !10018
  %cmp213 = icmp slt i64 %div210, %div212, !dbg !10018
  br i1 %cmp213, label %cond.true215, label %cond.false218, !dbg !10018

cond.true215:                                     ; preds = %if.then208
  %179 = load i64, i64* %niter159, align 8, !dbg !10018
  %180 = load i64, i64* %i0, align 8, !dbg !10018
  %sub216 = sub nsw i64 %179, %180, !dbg !10018
  %181 = load i64, i64* %i1, align 8, !dbg !10018
  %div217 = sdiv i64 %sub216, %181, !dbg !10018
  br label %cond.end221, !dbg !10018

cond.false218:                                    ; preds = %if.then208
  %182 = load i64, i64* %niter159, align 8, !dbg !10018
  %183 = load i64, i64* %j0, align 8, !dbg !10018
  %sub219 = sub nsw i64 %182, %183, !dbg !10018
  %184 = load i64, i64* %j1, align 8, !dbg !10018
  %div220 = sdiv i64 %sub219, %184, !dbg !10018
  br label %cond.end221, !dbg !10018

cond.end221:                                      ; preds = %cond.false218, %cond.true215
  %cond222 = phi i64 [ %div217, %cond.true215 ], [ %div220, %cond.false218 ], !dbg !10018
  store i64 %cond222, i64* %tau2, align 8, !dbg !10017
  call void @llvm.dbg.declare(metadata i64* %last_conflict, metadata !10019, metadata !DIExpression()), !dbg !10020
  %185 = load i64, i64* %tau2, align 8, !dbg !10021
  %186 = load i64, i64* %x1, align 8, !dbg !10022
  %187 = load i64, i64* %i0, align 8, !dbg !10023
  %sub223 = sub nsw i64 %186, %187, !dbg !10024
  %188 = load i64, i64* %i1, align 8, !dbg !10025
  %div224 = sdiv i64 %sub223, %188, !dbg !10026
  %sub225 = sub nsw i64 %185, %div224, !dbg !10027
  store i64 %sub225, i64* %last_conflict, align 8, !dbg !10020
  %189 = load i64, i64* %x1, align 8, !dbg !10028
  %190 = load i64, i64* %niter159, align 8, !dbg !10030
  %cmp226 = icmp sge i64 %189, %190, !dbg !10031
  br i1 %cmp226, label %if.then231, label %lor.lhs.false228, !dbg !10032

lor.lhs.false228:                                 ; preds = %cond.end221
  %191 = load i64, i64* %y1, align 8, !dbg !10033
  %192 = load i64, i64* %niter159, align 8, !dbg !10034
  %cmp229 = icmp sge i64 %191, %192, !dbg !10035
  br i1 %cmp229, label %if.then231, label %if.else234, !dbg !10036

if.then231:                                       ; preds = %lor.lhs.false228, %cond.end221
  %call232 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !10037
  %193 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !10039
  store %struct.conflict_function* %call232, %struct.conflict_function** %193, align 8, !dbg !10040
  %call233 = call %struct.conflict_function* @conflict_fn_no_dependence(), !dbg !10041
  %194 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !10042
  store %struct.conflict_function* %call233, %struct.conflict_function** %194, align 8, !dbg !10043
  %195 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10044
  %196 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10045
  store %union.tree_node* %195, %union.tree_node** %196, align 8, !dbg !10046
  br label %end_analyze_subs_aa, !dbg !10047

if.else234:                                       ; preds = %lor.lhs.false228
  %197 = load i64, i64* %last_conflict, align 8, !dbg !10048
  %call235 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %197), !dbg !10049
  %198 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10050
  store %union.tree_node* %call235, %union.tree_node** %198, align 8, !dbg !10051
  br label %if.end236

if.end236:                                        ; preds = %if.else234
  br label %if.end238, !dbg !10052

if.else237:                                       ; preds = %cond.end200
  %199 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !10053
  %200 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10054
  store %union.tree_node* %199, %union.tree_node** %200, align 8, !dbg !10055
  br label %if.end238

if.end238:                                        ; preds = %if.else237, %if.end236
  %201 = load i64, i64* %x1, align 8, !dbg !10056
  %call239 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %201), !dbg !10057
  %202 = load i64, i64* %i1, align 8, !dbg !10058
  %call240 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %202), !dbg !10059
  %call241 = call %struct.VEC_tree_heap* @affine_fn_univar(%union.tree_node* %call239, i32 1, %union.tree_node* %call240), !dbg !10060
  %call242 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call241), !dbg !10061
  %203 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !10062
  store %struct.conflict_function* %call242, %struct.conflict_function** %203, align 8, !dbg !10063
  %204 = load i64, i64* %y1, align 8, !dbg !10064
  %call243 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %204), !dbg !10065
  %205 = load i64, i64* %j1, align 8, !dbg !10066
  %call244 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %205), !dbg !10067
  %call245 = call %struct.VEC_tree_heap* @affine_fn_univar(%union.tree_node* %call243, i32 1, %union.tree_node* %call244), !dbg !10068
  %call246 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call245), !dbg !10069
  %206 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !10070
  store %struct.conflict_function* %call246, %struct.conflict_function** %206, align 8, !dbg !10071
  br label %if.end257, !dbg !10072

if.else247:                                       ; preds = %land.lhs.true149, %if.end146
  %207 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10073
  %tobool248 = icmp ne %struct._IO_FILE* %207, null, !dbg !10073
  br i1 %tobool248, label %land.lhs.true249, label %if.end254, !dbg !10076

land.lhs.true249:                                 ; preds = %if.else247
  %208 = load i32, i32* @dump_flags, align 4, !dbg !10077
  %and250 = and i32 %208, 8, !dbg !10078
  %tobool251 = icmp ne i32 %and250, 0, !dbg !10078
  br i1 %tobool251, label %if.then252, label %if.end254, !dbg !10079

if.then252:                                       ; preds = %land.lhs.true249
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10080
  %call253 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %209, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.117, i64 0, i64 0)), !dbg !10081
  br label %if.end254, !dbg !10081

if.end254:                                        ; preds = %if.then252, %land.lhs.true249, %if.else247
  %call255 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !10082
  %210 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !10083
  store %struct.conflict_function* %call255, %struct.conflict_function** %210, align 8, !dbg !10084
  %call256 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !10085
  %211 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !10086
  store %struct.conflict_function* %call256, %struct.conflict_function** %211, align 8, !dbg !10087
  %212 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !10088
  %213 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10089
  store %union.tree_node* %212, %union.tree_node** %213, align 8, !dbg !10090
  br label %if.end257

if.end257:                                        ; preds = %if.end254, %if.end238
  br label %if.end268, !dbg !10091

if.else258:                                       ; preds = %land.lhs.true110, %lor.lhs.false
  %214 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10092
  %tobool259 = icmp ne %struct._IO_FILE* %214, null, !dbg !10092
  br i1 %tobool259, label %land.lhs.true260, label %if.end265, !dbg !10095

land.lhs.true260:                                 ; preds = %if.else258
  %215 = load i32, i32* @dump_flags, align 4, !dbg !10096
  %and261 = and i32 %215, 8, !dbg !10097
  %tobool262 = icmp ne i32 %and261, 0, !dbg !10097
  br i1 %tobool262, label %if.then263, label %if.end265, !dbg !10098

if.then263:                                       ; preds = %land.lhs.true260
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10099
  %call264 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %216, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.117, i64 0, i64 0)), !dbg !10100
  br label %if.end265, !dbg !10100

if.end265:                                        ; preds = %if.then263, %land.lhs.true260, %if.else258
  %call266 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !10101
  %217 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !10102
  store %struct.conflict_function* %call266, %struct.conflict_function** %217, align 8, !dbg !10103
  %call267 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !10104
  %218 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !10105
  store %struct.conflict_function* %call267, %struct.conflict_function** %218, align 8, !dbg !10106
  %219 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !10107
  %220 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10108
  store %union.tree_node* %219, %union.tree_node** %220, align 8, !dbg !10109
  br label %if.end268

if.end268:                                        ; preds = %if.end265, %if.end257
  br label %if.end279, !dbg !10110

if.else269:                                       ; preds = %land.lhs.true92, %if.else89
  %221 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10111
  %tobool270 = icmp ne %struct._IO_FILE* %221, null, !dbg !10111
  br i1 %tobool270, label %land.lhs.true271, label %if.end276, !dbg !10114

land.lhs.true271:                                 ; preds = %if.else269
  %222 = load i32, i32* @dump_flags, align 4, !dbg !10115
  %and272 = and i32 %222, 8, !dbg !10116
  %tobool273 = icmp ne i32 %and272, 0, !dbg !10116
  br i1 %tobool273, label %if.then274, label %if.end276, !dbg !10117

if.then274:                                       ; preds = %land.lhs.true271
  %223 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10118
  %call275 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %223, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.117, i64 0, i64 0)), !dbg !10119
  br label %if.end276, !dbg !10119

if.end276:                                        ; preds = %if.then274, %land.lhs.true271, %if.else269
  %call277 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !10120
  %224 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !10121
  store %struct.conflict_function* %call277, %struct.conflict_function** %224, align 8, !dbg !10122
  %call278 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !10123
  %225 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !10124
  store %struct.conflict_function* %call278, %struct.conflict_function** %225, align 8, !dbg !10125
  %226 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !10126
  %227 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10127
  store %union.tree_node* %226, %union.tree_node** %227, align 8, !dbg !10128
  br label %if.end279

if.end279:                                        ; preds = %if.end276, %if.end268
  br label %if.end280

if.end280:                                        ; preds = %if.end279, %if.then86
  br label %end_analyze_subs_aa, !dbg !10129

end_analyze_subs_aa:                              ; preds = %if.end280, %if.then231, %if.then143, %if.then78, %if.end63
  call void @llvm.dbg.label(metadata !10130), !dbg !10131
  %228 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10132
  %tobool281 = icmp ne %struct._IO_FILE* %228, null, !dbg !10132
  br i1 %tobool281, label %land.lhs.true282, label %if.end290, !dbg !10134

land.lhs.true282:                                 ; preds = %end_analyze_subs_aa
  %229 = load i32, i32* @dump_flags, align 4, !dbg !10135
  %and283 = and i32 %229, 8, !dbg !10136
  %tobool284 = icmp ne i32 %and283, 0, !dbg !10136
  br i1 %tobool284, label %if.then285, label %if.end290, !dbg !10137

if.then285:                                       ; preds = %land.lhs.true282
  %230 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10138
  %call286 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %230, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.118, i64 0, i64 0)), !dbg !10140
  %231 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10141
  %232 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !10142
  %233 = load %struct.conflict_function*, %struct.conflict_function** %232, align 8, !dbg !10143
  call void @dump_conflict_function(%struct._IO_FILE* %231, %struct.conflict_function* %233), !dbg !10144
  %234 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10145
  %call287 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %234, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.119, i64 0, i64 0)), !dbg !10146
  %235 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10147
  %236 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !10148
  %237 = load %struct.conflict_function*, %struct.conflict_function** %236, align 8, !dbg !10149
  call void @dump_conflict_function(%struct._IO_FILE* %235, %struct.conflict_function* %237), !dbg !10150
  %238 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10151
  %call288 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %238, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !10152
  %239 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10153
  %call289 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %239, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)), !dbg !10154
  br label %if.end290, !dbg !10155

if.end290:                                        ; preds = %if.then, %if.then285, %land.lhs.true282, %end_analyze_subs_aa
  ret void, !dbg !10156
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @can_use_analyze_subscript_affine_affine(%union.tree_node** %chrec_a, %union.tree_node** %chrec_b) #0 !dbg !10157 {
entry:
  %retval = alloca i8, align 1
  %chrec_a.addr = alloca %union.tree_node**, align 8
  %chrec_b.addr = alloca %union.tree_node**, align 8
  %diff = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %left_a = alloca %union.tree_node*, align 8
  %left_b = alloca %union.tree_node*, align 8
  %right_b = alloca %union.tree_node*, align 8
  store %union.tree_node** %chrec_a, %union.tree_node*** %chrec_a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %chrec_a.addr, metadata !10160, metadata !DIExpression()), !dbg !10161
  store %union.tree_node** %chrec_b, %union.tree_node*** %chrec_b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %chrec_b.addr, metadata !10162, metadata !DIExpression()), !dbg !10163
  call void @llvm.dbg.declare(metadata %union.tree_node** %diff, metadata !10164, metadata !DIExpression()), !dbg !10165
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10166, metadata !DIExpression()), !dbg !10167
  call void @llvm.dbg.declare(metadata %union.tree_node** %left_a, metadata !10168, metadata !DIExpression()), !dbg !10169
  call void @llvm.dbg.declare(metadata %union.tree_node** %left_b, metadata !10170, metadata !DIExpression()), !dbg !10171
  call void @llvm.dbg.declare(metadata %union.tree_node** %right_b, metadata !10172, metadata !DIExpression()), !dbg !10173
  %0 = load %union.tree_node**, %union.tree_node*** %chrec_a.addr, align 8, !dbg !10174
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !10174
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !10174
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !10174
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !10174
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10174
  %call = call zeroext i8 @chrec_contains_symbols(%union.tree_node* %2), !dbg !10176
  %conv = zext i8 %call to i32, !dbg !10176
  %tobool = icmp ne i32 %conv, 0, !dbg !10176
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !10177

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node**, %union.tree_node*** %chrec_b.addr, align 8, !dbg !10178
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !10178
  %exp1 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !10178
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !10178
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 2, !dbg !10178
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !10178
  %call4 = call zeroext i8 @chrec_contains_symbols(%union.tree_node* %5), !dbg !10179
  %conv5 = zext i8 %call4 to i32, !dbg !10179
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !10179
  br i1 %tobool6, label %if.then, label %if.end, !dbg !10180

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !10181
  br label %return, !dbg !10181

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %union.tree_node**, %union.tree_node*** %chrec_a.addr, align 8, !dbg !10182
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !10183
  %call7 = call %union.tree_node* @chrec_type(%union.tree_node* %7), !dbg !10184
  store %union.tree_node* %call7, %union.tree_node** %type, align 8, !dbg !10185
  %8 = load %union.tree_node**, %union.tree_node*** %chrec_a.addr, align 8, !dbg !10186
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !10186
  %exp8 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !10186
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !10186
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 1, !dbg !10186
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !10186
  store %union.tree_node* %10, %union.tree_node** %left_a, align 8, !dbg !10187
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10188
  %12 = load %union.tree_node**, %union.tree_node*** %chrec_b.addr, align 8, !dbg !10189
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !10189
  %exp11 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !10189
  %operands12 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp11, i32 0, i32 3, !dbg !10189
  %arrayidx13 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands12, i64 0, i64 1, !dbg !10189
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !10189
  %call14 = call %union.tree_node* @chrec_convert(%union.tree_node* %11, %union.tree_node* %14, %union.gimple_statement_d* null), !dbg !10190
  store %union.tree_node* %call14, %union.tree_node** %left_b, align 8, !dbg !10191
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10192
  %16 = load %union.tree_node*, %union.tree_node** %left_a, align 8, !dbg !10193
  %17 = load %union.tree_node*, %union.tree_node** %left_b, align 8, !dbg !10194
  %call15 = call %union.tree_node* @chrec_fold_minus(%union.tree_node* %15, %union.tree_node* %16, %union.tree_node* %17), !dbg !10195
  store %union.tree_node* %call15, %union.tree_node** %diff, align 8, !dbg !10196
  %18 = load %union.tree_node*, %union.tree_node** %diff, align 8, !dbg !10197
  %call16 = call zeroext i8 @evolution_function_is_constant_p(%union.tree_node* %18), !dbg !10199
  %tobool17 = icmp ne i8 %call16, 0, !dbg !10199
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !10200

if.then18:                                        ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !10201
  br label %return, !dbg !10201

if.end19:                                         ; preds = %if.end
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10202
  %tobool20 = icmp ne %struct._IO_FILE* %19, null, !dbg !10202
  br i1 %tobool20, label %land.lhs.true, label %if.end24, !dbg !10204

land.lhs.true:                                    ; preds = %if.end19
  %20 = load i32, i32* @dump_flags, align 4, !dbg !10205
  %and = and i32 %20, 8, !dbg !10206
  %tobool21 = icmp ne i32 %and, 0, !dbg !10206
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !10207

if.then22:                                        ; preds = %land.lhs.true
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10208
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.122, i64 0, i64 0)), !dbg !10209
  br label %if.end24, !dbg !10209

if.end24:                                         ; preds = %if.then22, %land.lhs.true, %if.end19
  %22 = load %union.tree_node**, %union.tree_node*** %chrec_a.addr, align 8, !dbg !10210
  %23 = load %union.tree_node*, %union.tree_node** %22, align 8, !dbg !10210
  %exp25 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !10210
  %operands26 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp25, i32 0, i32 3, !dbg !10210
  %arrayidx27 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands26, i64 0, i64 0, !dbg !10210
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx27, align 8, !dbg !10210
  %int_cst = bitcast %union.tree_node* %24 to %struct.tree_int_cst*, !dbg !10210
  %int_cst28 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !10210
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst28, i32 0, i32 0, !dbg !10210
  %25 = load i64, i64* %low, align 8, !dbg !10210
  %conv29 = trunc i64 %25 to i32, !dbg !10210
  %26 = load %union.tree_node*, %union.tree_node** %diff, align 8, !dbg !10211
  %27 = load %union.tree_node**, %union.tree_node*** %chrec_a.addr, align 8, !dbg !10212
  %28 = load %union.tree_node*, %union.tree_node** %27, align 8, !dbg !10212
  %exp30 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !10212
  %operands31 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp30, i32 0, i32 3, !dbg !10212
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands31, i64 0, i64 2, !dbg !10212
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !10212
  %call33 = call %union.tree_node* @build_polynomial_chrec(i32 %conv29, %union.tree_node* %26, %union.tree_node* %29), !dbg !10213
  %30 = load %union.tree_node**, %union.tree_node*** %chrec_a.addr, align 8, !dbg !10214
  store %union.tree_node* %call33, %union.tree_node** %30, align 8, !dbg !10215
  %31 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10216
  %32 = load %union.tree_node**, %union.tree_node*** %chrec_b.addr, align 8, !dbg !10217
  %33 = load %union.tree_node*, %union.tree_node** %32, align 8, !dbg !10217
  %exp34 = bitcast %union.tree_node* %33 to %struct.tree_exp*, !dbg !10217
  %operands35 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp34, i32 0, i32 3, !dbg !10217
  %arrayidx36 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands35, i64 0, i64 2, !dbg !10217
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx36, align 8, !dbg !10217
  %call37 = call %union.tree_node* @chrec_convert(%union.tree_node* %31, %union.tree_node* %34, %union.gimple_statement_d* null), !dbg !10218
  store %union.tree_node* %call37, %union.tree_node** %right_b, align 8, !dbg !10219
  %35 = load %union.tree_node**, %union.tree_node*** %chrec_b.addr, align 8, !dbg !10220
  %36 = load %union.tree_node*, %union.tree_node** %35, align 8, !dbg !10220
  %exp38 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !10220
  %operands39 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp38, i32 0, i32 3, !dbg !10220
  %arrayidx40 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands39, i64 0, i64 0, !dbg !10220
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx40, align 8, !dbg !10220
  %int_cst41 = bitcast %union.tree_node* %37 to %struct.tree_int_cst*, !dbg !10220
  %int_cst42 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst41, i32 0, i32 1, !dbg !10220
  %low43 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst42, i32 0, i32 0, !dbg !10220
  %38 = load i64, i64* %low43, align 8, !dbg !10220
  %conv44 = trunc i64 %38 to i32, !dbg !10220
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10221
  %call45 = call %union.tree_node* @build_int_cst(%union.tree_node* %39, i64 0), !dbg !10222
  %40 = load %union.tree_node*, %union.tree_node** %right_b, align 8, !dbg !10223
  %call46 = call %union.tree_node* @build_polynomial_chrec(i32 %conv44, %union.tree_node* %call45, %union.tree_node* %40), !dbg !10224
  %41 = load %union.tree_node**, %union.tree_node*** %chrec_b.addr, align 8, !dbg !10225
  store %union.tree_node* %call46, %union.tree_node** %41, align 8, !dbg !10226
  store i8 1, i8* %retval, align 1, !dbg !10227
  br label %return, !dbg !10227

return:                                           ; preds = %if.end24, %if.then18, %if.then
  %42 = load i8, i8* %retval, align 1, !dbg !10228
  ret i8 %42, !dbg !10228
}

declare dso_local zeroext i8 @chrec_is_positive(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @tree_fold_divides_p(%union.tree_node* %a, %union.tree_node* %b) #0 !dbg !10229 {
entry:
  %a.addr = alloca %union.tree_node*, align 8
  %b.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %a, %union.tree_node** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %a.addr, metadata !10230, metadata !DIExpression()), !dbg !10231
  store %union.tree_node* %b, %union.tree_node** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %b.addr, metadata !10232, metadata !DIExpression()), !dbg !10233
  %0 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !10234
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !10234
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !10234
  %bf.load = load i64, i64* %1, align 8, !dbg !10234
  %bf.clear = and i64 %bf.load, 65535, !dbg !10234
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10234
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !10234
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10234

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 134, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !10234
  br label %cond.end, !dbg !10234

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10234

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10234
  %2 = load %union.tree_node*, %union.tree_node** %b.addr, align 8, !dbg !10235
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !10235
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10235
  %bf.load2 = load i64, i64* %3, align 8, !dbg !10235
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !10235
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10235
  %cmp5 = icmp eq i32 %bf.cast4, 23, !dbg !10235
  br i1 %cmp5, label %cond.false7, label %cond.true6, !dbg !10235

cond.true6:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 135, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !10235
  br label %cond.end8, !dbg !10235

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !10235

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !10235
  %4 = load %union.tree_node*, %union.tree_node** %b.addr, align 8, !dbg !10236
  %5 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !10237
  %call = call %union.tree_node* @int_const_binop(i32 71, %union.tree_node* %4, %union.tree_node* %5, i32 0), !dbg !10238
  %call10 = call i32 @integer_zerop(%union.tree_node* %call), !dbg !10239
  %conv = trunc i32 %call10 to i8, !dbg !10239
  ret i8 %conv, !dbg !10240
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_chrec_loop(%union.tree_node* %chrec) #0 !dbg !10241 {
entry:
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !10244, metadata !DIExpression()), !dbg !10245
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10246
  %exp = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !10246
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !10246
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !10246
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10246
  %int_cst = bitcast %union.tree_node* %1 to %struct.tree_int_cst*, !dbg !10246
  %int_cst1 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !10246
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst1, i32 0, i32 0, !dbg !10246
  %2 = load i64, i64* %low, align 8, !dbg !10246
  %conv = trunc i64 %2 to i32, !dbg !10246
  %call = call %struct.loop* @get_loop(i32 %conv), !dbg !10247
  ret %struct.loop* %call, !dbg !10248
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @compare_tree_int(%union.tree_node*, i64) #2

declare dso_local %union.tree_node* @int_const_binop(i32, %union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !10249 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !10252, metadata !DIExpression()), !dbg !10253
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10254
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !10254
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !10254
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !10254
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !10254
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !10254
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !10254
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10254

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10254
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !10254
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !10254
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !10254
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !10254
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !10254
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !10254
  br label %cond.end, !dbg !10254

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10254

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10254
  %6 = load i32, i32* %num.addr, align 4, !dbg !10254
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !10254
  ret %struct.loop* %call, !dbg !10255
}

declare dso_local i32 @nb_vars_in_chrec(%union.tree_node*) #2

declare dso_local i32** @lambda_matrix_new(i32, i32) #2

declare dso_local i64 @int_cst_value(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @initialize_matrix_A(i32** %A, %union.tree_node* %chrec, i32 %index, i32 %mult) #0 !dbg !10256 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %A.addr = alloca i32**, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  %index.addr = alloca i32, align 4
  %mult.addr = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  %op42 = alloca %union.tree_node*, align 8
  store i32** %A, i32*** %A.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %A.addr, metadata !10259, metadata !DIExpression()), !dbg !10260
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !10261, metadata !DIExpression()), !dbg !10262
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !10263, metadata !DIExpression()), !dbg !10264
  store i32 %mult, i32* %mult.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mult.addr, metadata !10265, metadata !DIExpression()), !dbg !10266
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10267
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !10267
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10267

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 1939, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !10267
  br label %cond.end, !dbg !10267

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10267

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10267
  %1 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10268
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10268
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10268
  %bf.load = load i64, i64* %2, align 8, !dbg !10268
  %bf.clear = and i64 %bf.load, 65535, !dbg !10268
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10268
  switch i32 %bf.cast, label %sw.default [
    i32 146, label %sw.bb
    i32 63, label %sw.bb19
    i32 65, label %sw.bb19
    i32 64, label %sw.bb19
    i32 116, label %sw.bb34
    i32 90, label %sw.bb41
    i32 23, label %sw.bb50
  ], !dbg !10269

sw.bb:                                            ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10270
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !10270
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !10270
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !10270
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10270
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !10270
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10270
  %bf.load2 = load i64, i64* %5, align 8, !dbg !10270
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !10270
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10270
  %cmp = icmp eq i32 %bf.cast4, 23, !dbg !10270
  br i1 %cmp, label %cond.false6, label %cond.true5, !dbg !10270

cond.true5:                                       ; preds = %sw.bb
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 1944, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !10270
  br label %cond.end7, !dbg !10270

cond.false6:                                      ; preds = %sw.bb
  br label %cond.end7, !dbg !10270

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !10270
  %6 = load i32, i32* %mult.addr, align 4, !dbg !10272
  %conv = sext i32 %6 to i64, !dbg !10272
  %7 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10273
  %exp9 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !10273
  %operands10 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp9, i32 0, i32 3, !dbg !10273
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands10, i64 0, i64 2, !dbg !10273
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !10273
  %call = call i64 @int_cst_value(%union.tree_node* %8), !dbg !10274
  %mul = mul nsw i64 %conv, %call, !dbg !10275
  %conv12 = trunc i64 %mul to i32, !dbg !10272
  %9 = load i32**, i32*** %A.addr, align 8, !dbg !10276
  %10 = load i32, i32* %index.addr, align 4, !dbg !10277
  %idxprom = zext i32 %10 to i64, !dbg !10276
  %arrayidx13 = getelementptr inbounds i32*, i32** %9, i64 %idxprom, !dbg !10276
  %11 = load i32*, i32** %arrayidx13, align 8, !dbg !10276
  %arrayidx14 = getelementptr inbounds i32, i32* %11, i64 0, !dbg !10276
  store i32 %conv12, i32* %arrayidx14, align 4, !dbg !10278
  %12 = load i32**, i32*** %A.addr, align 8, !dbg !10279
  %13 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10280
  %exp15 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !10280
  %operands16 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 3, !dbg !10280
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands16, i64 0, i64 1, !dbg !10280
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx17, align 8, !dbg !10280
  %15 = load i32, i32* %index.addr, align 4, !dbg !10281
  %add = add i32 %15, 1, !dbg !10282
  %16 = load i32, i32* %mult.addr, align 4, !dbg !10283
  %call18 = call %union.tree_node* @initialize_matrix_A(i32** %12, %union.tree_node* %14, i32 %add, i32 %16), !dbg !10284
  store %union.tree_node* %call18, %union.tree_node** %retval, align 8, !dbg !10285
  br label %return, !dbg !10285

sw.bb19:                                          ; preds = %cond.end, %cond.end, %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !10286, metadata !DIExpression()), !dbg !10288
  %17 = load i32**, i32*** %A.addr, align 8, !dbg !10289
  %18 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10290
  %exp20 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !10290
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !10290
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 0, !dbg !10290
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx22, align 8, !dbg !10290
  %20 = load i32, i32* %index.addr, align 4, !dbg !10291
  %21 = load i32, i32* %mult.addr, align 4, !dbg !10292
  %call23 = call %union.tree_node* @initialize_matrix_A(i32** %17, %union.tree_node* %19, i32 %20, i32 %21), !dbg !10293
  store %union.tree_node* %call23, %union.tree_node** %op0, align 8, !dbg !10288
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !10294, metadata !DIExpression()), !dbg !10295
  %22 = load i32**, i32*** %A.addr, align 8, !dbg !10296
  %23 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10297
  %exp24 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !10297
  %operands25 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp24, i32 0, i32 3, !dbg !10297
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands25, i64 0, i64 1, !dbg !10297
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !10297
  %25 = load i32, i32* %index.addr, align 4, !dbg !10298
  %26 = load i32, i32* %mult.addr, align 4, !dbg !10299
  %call27 = call %union.tree_node* @initialize_matrix_A(i32** %22, %union.tree_node* %24, i32 %25, i32 %26), !dbg !10300
  store %union.tree_node* %call27, %union.tree_node** %op1, align 8, !dbg !10295
  %27 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10301
  %base28 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !10301
  %28 = bitcast %struct.tree_base* %base28 to i64*, !dbg !10301
  %bf.load29 = load i64, i64* %28, align 8, !dbg !10301
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !10301
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !10301
  %29 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10302
  %call32 = call %union.tree_node* @chrec_type(%union.tree_node* %29), !dbg !10303
  %30 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10304
  %31 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10305
  %call33 = call %union.tree_node* @chrec_fold_op(i32 %bf.cast31, %union.tree_node* %call32, %union.tree_node* %30, %union.tree_node* %31), !dbg !10306
  store %union.tree_node* %call33, %union.tree_node** %retval, align 8, !dbg !10307
  br label %return, !dbg !10307

sw.bb34:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !10308, metadata !DIExpression()), !dbg !10310
  %32 = load i32**, i32*** %A.addr, align 8, !dbg !10311
  %33 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10312
  %exp35 = bitcast %union.tree_node* %33 to %struct.tree_exp*, !dbg !10312
  %operands36 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp35, i32 0, i32 3, !dbg !10312
  %arrayidx37 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands36, i64 0, i64 0, !dbg !10312
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx37, align 8, !dbg !10312
  %35 = load i32, i32* %index.addr, align 4, !dbg !10313
  %36 = load i32, i32* %mult.addr, align 4, !dbg !10314
  %call38 = call %union.tree_node* @initialize_matrix_A(i32** %32, %union.tree_node* %34, i32 %35, i32 %36), !dbg !10315
  store %union.tree_node* %call38, %union.tree_node** %op, align 8, !dbg !10310
  %37 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10316
  %call39 = call %union.tree_node* @chrec_type(%union.tree_node* %37), !dbg !10317
  %38 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !10318
  %call40 = call %union.tree_node* @chrec_convert(%union.tree_node* %call39, %union.tree_node* %38, %union.gimple_statement_d* null), !dbg !10319
  store %union.tree_node* %call40, %union.tree_node** %retval, align 8, !dbg !10320
  br label %return, !dbg !10320

sw.bb41:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %op42, metadata !10321, metadata !DIExpression()), !dbg !10323
  %39 = load i32**, i32*** %A.addr, align 8, !dbg !10324
  %40 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10325
  %exp43 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !10325
  %operands44 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp43, i32 0, i32 3, !dbg !10325
  %arrayidx45 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands44, i64 0, i64 0, !dbg !10325
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx45, align 8, !dbg !10325
  %42 = load i32, i32* %index.addr, align 4, !dbg !10326
  %43 = load i32, i32* %mult.addr, align 4, !dbg !10327
  %call46 = call %union.tree_node* @initialize_matrix_A(i32** %39, %union.tree_node* %41, i32 %42, i32 %43), !dbg !10328
  store %union.tree_node* %call46, %union.tree_node** %op42, align 8, !dbg !10323
  %44 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10329
  %call47 = call %union.tree_node* @chrec_type(%union.tree_node* %44), !dbg !10330
  %45 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10331
  %common = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !10331
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10331
  %46 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10331
  %call48 = call %union.tree_node* @build_int_cst(%union.tree_node* %46, i64 -1), !dbg !10332
  %47 = load %union.tree_node*, %union.tree_node** %op42, align 8, !dbg !10333
  %call49 = call %union.tree_node* @chrec_fold_op(i32 64, %union.tree_node* %call47, %union.tree_node* %call48, %union.tree_node* %47), !dbg !10334
  store %union.tree_node* %call49, %union.tree_node** %retval, align 8, !dbg !10335
  br label %return, !dbg !10335

sw.bb50:                                          ; preds = %cond.end
  %48 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10336
  store %union.tree_node* %48, %union.tree_node** %retval, align 8, !dbg !10337
  br label %return, !dbg !10337

sw.default:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 1977, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !10338
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10339
  br label %return, !dbg !10339

return:                                           ; preds = %sw.default, %sw.bb50, %sw.bb41, %sw.bb34, %sw.bb19, %cond.end7
  %49 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10340
  ret %union.tree_node* %49, !dbg !10340
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_overlap_steps_for_affine_univar(i32 %niter, i32 %step_a, i32 %step_b, %struct.VEC_tree_heap** %overlaps_a, %struct.VEC_tree_heap** %overlaps_b, %union.tree_node** %last_conflicts, i32 %dim) #0 !dbg !10341 {
entry:
  %niter.addr = alloca i32, align 4
  %step_a.addr = alloca i32, align 4
  %step_b.addr = alloca i32, align 4
  %overlaps_a.addr = alloca %struct.VEC_tree_heap**, align 8
  %overlaps_b.addr = alloca %struct.VEC_tree_heap**, align 8
  %last_conflicts.addr = alloca %union.tree_node**, align 8
  %dim.addr = alloca i32, align 4
  %step_overlaps_a = alloca i32, align 4
  %step_overlaps_b = alloca i32, align 4
  %gcd_steps_a_b = alloca i32, align 4
  %last_conflict = alloca i32, align 4
  %tau2 = alloca i32, align 4
  store i32 %niter, i32* %niter.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %niter.addr, metadata !10345, metadata !DIExpression()), !dbg !10346
  store i32 %step_a, i32* %step_a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %step_a.addr, metadata !10347, metadata !DIExpression()), !dbg !10348
  store i32 %step_b, i32* %step_b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %step_b.addr, metadata !10349, metadata !DIExpression()), !dbg !10350
  store %struct.VEC_tree_heap** %overlaps_a, %struct.VEC_tree_heap*** %overlaps_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %overlaps_a.addr, metadata !10351, metadata !DIExpression()), !dbg !10352
  store %struct.VEC_tree_heap** %overlaps_b, %struct.VEC_tree_heap*** %overlaps_b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %overlaps_b.addr, metadata !10353, metadata !DIExpression()), !dbg !10354
  store %union.tree_node** %last_conflicts, %union.tree_node*** %last_conflicts.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %last_conflicts.addr, metadata !10355, metadata !DIExpression()), !dbg !10356
  store i32 %dim, i32* %dim.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dim.addr, metadata !10357, metadata !DIExpression()), !dbg !10358
  %0 = load i32, i32* %step_a.addr, align 4, !dbg !10359
  %cmp = icmp sgt i32 %0, 0, !dbg !10361
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !10362

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %step_b.addr, align 4, !dbg !10363
  %cmp1 = icmp sgt i32 %1, 0, !dbg !10364
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !10365

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* %step_a.addr, align 4, !dbg !10366
  %cmp2 = icmp slt i32 %2, 0, !dbg !10367
  br i1 %cmp2, label %land.lhs.true3, label %if.else19, !dbg !10368

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %step_b.addr, align 4, !dbg !10369
  %cmp4 = icmp slt i32 %3, 0, !dbg !10370
  br i1 %cmp4, label %if.then, label %if.else19, !dbg !10371

if.then:                                          ; preds = %land.lhs.true3, %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %step_overlaps_a, metadata !10372, metadata !DIExpression()), !dbg !10374
  call void @llvm.dbg.declare(metadata i32* %step_overlaps_b, metadata !10375, metadata !DIExpression()), !dbg !10376
  call void @llvm.dbg.declare(metadata i32* %gcd_steps_a_b, metadata !10377, metadata !DIExpression()), !dbg !10378
  call void @llvm.dbg.declare(metadata i32* %last_conflict, metadata !10379, metadata !DIExpression()), !dbg !10380
  call void @llvm.dbg.declare(metadata i32* %tau2, metadata !10381, metadata !DIExpression()), !dbg !10382
  %4 = load i32, i32* %step_a.addr, align 4, !dbg !10383
  %5 = load i32, i32* %step_b.addr, align 4, !dbg !10384
  %call = call i32 @gcd(i32 %4, i32 %5), !dbg !10385
  store i32 %call, i32* %gcd_steps_a_b, align 4, !dbg !10386
  %6 = load i32, i32* %step_b.addr, align 4, !dbg !10387
  %7 = load i32, i32* %gcd_steps_a_b, align 4, !dbg !10388
  %div = sdiv i32 %6, %7, !dbg !10389
  store i32 %div, i32* %step_overlaps_a, align 4, !dbg !10390
  %8 = load i32, i32* %step_a.addr, align 4, !dbg !10391
  %9 = load i32, i32* %gcd_steps_a_b, align 4, !dbg !10392
  %div5 = sdiv i32 %8, %9, !dbg !10393
  store i32 %div5, i32* %step_overlaps_b, align 4, !dbg !10394
  %10 = load i32, i32* %niter.addr, align 4, !dbg !10395
  %cmp6 = icmp sgt i32 %10, 0, !dbg !10397
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !10398

if.then7:                                         ; preds = %if.then
  %11 = load i32, i32* %niter.addr, align 4, !dbg !10399
  %12 = load i32, i32* %step_overlaps_a, align 4, !dbg !10399
  %div8 = sdiv i32 %11, %12, !dbg !10399
  store i32 %div8, i32* %tau2, align 4, !dbg !10401
  %13 = load i32, i32* %tau2, align 4, !dbg !10402
  %14 = load i32, i32* %niter.addr, align 4, !dbg !10402
  %15 = load i32, i32* %step_overlaps_b, align 4, !dbg !10402
  %div9 = sdiv i32 %14, %15, !dbg !10402
  %cmp10 = icmp slt i32 %13, %div9, !dbg !10402
  br i1 %cmp10, label %cond.true, label %cond.false, !dbg !10402

cond.true:                                        ; preds = %if.then7
  %16 = load i32, i32* %tau2, align 4, !dbg !10402
  br label %cond.end, !dbg !10402

cond.false:                                       ; preds = %if.then7
  %17 = load i32, i32* %niter.addr, align 4, !dbg !10402
  %18 = load i32, i32* %step_overlaps_b, align 4, !dbg !10402
  %div11 = sdiv i32 %17, %18, !dbg !10402
  br label %cond.end, !dbg !10402

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %16, %cond.true ], [ %div11, %cond.false ], !dbg !10402
  store i32 %cond, i32* %tau2, align 4, !dbg !10403
  %19 = load i32, i32* %tau2, align 4, !dbg !10404
  store i32 %19, i32* %last_conflict, align 4, !dbg !10405
  %20 = load i32, i32* %last_conflict, align 4, !dbg !10406
  %conv = sext i32 %20 to i64, !dbg !10406
  %call12 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv), !dbg !10407
  %21 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10408
  store %union.tree_node* %call12, %union.tree_node** %21, align 8, !dbg !10409
  br label %if.end, !dbg !10410

if.else:                                          ; preds = %if.then
  %22 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !10411
  %23 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10412
  store %union.tree_node* %22, %union.tree_node** %23, align 8, !dbg !10413
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10414
  %25 = load i32, i32* %dim.addr, align 4, !dbg !10415
  %26 = load i32, i32* %step_overlaps_a, align 4, !dbg !10416
  %conv13 = sext i32 %26 to i64, !dbg !10416
  %call14 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv13), !dbg !10417
  %call15 = call %struct.VEC_tree_heap* @affine_fn_univar(%union.tree_node* %24, i32 %25, %union.tree_node* %call14), !dbg !10418
  %27 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %overlaps_a.addr, align 8, !dbg !10419
  store %struct.VEC_tree_heap* %call15, %struct.VEC_tree_heap** %27, align 8, !dbg !10420
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10421
  %29 = load i32, i32* %dim.addr, align 4, !dbg !10422
  %30 = load i32, i32* %step_overlaps_b, align 4, !dbg !10423
  %conv16 = sext i32 %30 to i64, !dbg !10423
  %call17 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv16), !dbg !10424
  %call18 = call %struct.VEC_tree_heap* @affine_fn_univar(%union.tree_node* %28, i32 %29, %union.tree_node* %call17), !dbg !10425
  %31 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %overlaps_b.addr, align 8, !dbg !10426
  store %struct.VEC_tree_heap* %call18, %struct.VEC_tree_heap** %31, align 8, !dbg !10427
  br label %if.end22, !dbg !10428

if.else19:                                        ; preds = %land.lhs.true3, %lor.lhs.false
  %32 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10429
  %call20 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %32), !dbg !10431
  %33 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %overlaps_a.addr, align 8, !dbg !10432
  store %struct.VEC_tree_heap* %call20, %struct.VEC_tree_heap** %33, align 8, !dbg !10433
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10434
  %call21 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %34), !dbg !10435
  %35 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %overlaps_b.addr, align 8, !dbg !10436
  store %struct.VEC_tree_heap* %call21, %struct.VEC_tree_heap** %35, align 8, !dbg !10437
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10438
  %37 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10439
  store %union.tree_node* %36, %union.tree_node** %37, align 8, !dbg !10440
  br label %if.end22

if.end22:                                         ; preds = %if.else19, %if.end
  ret void, !dbg !10441
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_overlap_steps_for_affine_1_2(%union.tree_node* %chrec_a, %union.tree_node* %chrec_b, %struct.conflict_function** %overlaps_a, %struct.conflict_function** %overlaps_b, %union.tree_node** %last_conflicts) #0 !dbg !10442 {
entry:
  %chrec_a.addr = alloca %union.tree_node*, align 8
  %chrec_b.addr = alloca %union.tree_node*, align 8
  %overlaps_a.addr = alloca %struct.conflict_function**, align 8
  %overlaps_b.addr = alloca %struct.conflict_function**, align 8
  %last_conflicts.addr = alloca %union.tree_node**, align 8
  %xz_p = alloca i8, align 1
  %yz_p = alloca i8, align 1
  %xyz_p = alloca i8, align 1
  %step_x = alloca i32, align 4
  %step_y = alloca i32, align 4
  %step_z = alloca i32, align 4
  %niter_x = alloca i64, align 8
  %niter_y = alloca i64, align 8
  %niter_z = alloca i64, align 8
  %niter = alloca i64, align 8
  %overlaps_a_xz = alloca %struct.VEC_tree_heap*, align 8
  %overlaps_b_xz = alloca %struct.VEC_tree_heap*, align 8
  %overlaps_a_yz = alloca %struct.VEC_tree_heap*, align 8
  %overlaps_b_yz = alloca %struct.VEC_tree_heap*, align 8
  %overlaps_a_xyz = alloca %struct.VEC_tree_heap*, align 8
  %overlaps_b_xyz = alloca %struct.VEC_tree_heap*, align 8
  %ova1 = alloca %struct.VEC_tree_heap*, align 8
  %ova2 = alloca %struct.VEC_tree_heap*, align 8
  %ovb = alloca %struct.VEC_tree_heap*, align 8
  %last_conflicts_xz = alloca %union.tree_node*, align 8
  %last_conflicts_yz = alloca %union.tree_node*, align 8
  %last_conflicts_xyz = alloca %union.tree_node*, align 8
  %t0 = alloca %struct.VEC_tree_heap*, align 8
  %t2 = alloca %struct.VEC_tree_heap*, align 8
  %t090 = alloca %struct.VEC_tree_heap*, align 8
  %t291 = alloca %struct.VEC_tree_heap*, align 8
  %t097 = alloca %struct.VEC_tree_heap*, align 8
  %t298 = alloca %struct.VEC_tree_heap*, align 8
  %t4 = alloca %struct.VEC_tree_heap*, align 8
  store %union.tree_node* %chrec_a, %union.tree_node** %chrec_a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_a.addr, metadata !10443, metadata !DIExpression()), !dbg !10444
  store %union.tree_node* %chrec_b, %union.tree_node** %chrec_b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec_b.addr, metadata !10445, metadata !DIExpression()), !dbg !10446
  store %struct.conflict_function** %overlaps_a, %struct.conflict_function*** %overlaps_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlaps_a.addr, metadata !10447, metadata !DIExpression()), !dbg !10448
  store %struct.conflict_function** %overlaps_b, %struct.conflict_function*** %overlaps_b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function*** %overlaps_b.addr, metadata !10449, metadata !DIExpression()), !dbg !10450
  store %union.tree_node** %last_conflicts, %union.tree_node*** %last_conflicts.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %last_conflicts.addr, metadata !10451, metadata !DIExpression()), !dbg !10452
  call void @llvm.dbg.declare(metadata i8* %xz_p, metadata !10453, metadata !DIExpression()), !dbg !10454
  call void @llvm.dbg.declare(metadata i8* %yz_p, metadata !10455, metadata !DIExpression()), !dbg !10456
  call void @llvm.dbg.declare(metadata i8* %xyz_p, metadata !10457, metadata !DIExpression()), !dbg !10458
  call void @llvm.dbg.declare(metadata i32* %step_x, metadata !10459, metadata !DIExpression()), !dbg !10460
  call void @llvm.dbg.declare(metadata i32* %step_y, metadata !10461, metadata !DIExpression()), !dbg !10462
  call void @llvm.dbg.declare(metadata i32* %step_z, metadata !10463, metadata !DIExpression()), !dbg !10464
  call void @llvm.dbg.declare(metadata i64* %niter_x, metadata !10465, metadata !DIExpression()), !dbg !10466
  call void @llvm.dbg.declare(metadata i64* %niter_y, metadata !10467, metadata !DIExpression()), !dbg !10468
  call void @llvm.dbg.declare(metadata i64* %niter_z, metadata !10469, metadata !DIExpression()), !dbg !10470
  call void @llvm.dbg.declare(metadata i64* %niter, metadata !10471, metadata !DIExpression()), !dbg !10472
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %overlaps_a_xz, metadata !10473, metadata !DIExpression()), !dbg !10474
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %overlaps_b_xz, metadata !10475, metadata !DIExpression()), !dbg !10476
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %overlaps_a_yz, metadata !10477, metadata !DIExpression()), !dbg !10478
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %overlaps_b_yz, metadata !10479, metadata !DIExpression()), !dbg !10480
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %overlaps_a_xyz, metadata !10481, metadata !DIExpression()), !dbg !10482
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %overlaps_b_xyz, metadata !10483, metadata !DIExpression()), !dbg !10484
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %ova1, metadata !10485, metadata !DIExpression()), !dbg !10486
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %ova2, metadata !10487, metadata !DIExpression()), !dbg !10488
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %ovb, metadata !10489, metadata !DIExpression()), !dbg !10490
  call void @llvm.dbg.declare(metadata %union.tree_node** %last_conflicts_xz, metadata !10491, metadata !DIExpression()), !dbg !10492
  call void @llvm.dbg.declare(metadata %union.tree_node** %last_conflicts_yz, metadata !10493, metadata !DIExpression()), !dbg !10494
  call void @llvm.dbg.declare(metadata %union.tree_node** %last_conflicts_xyz, metadata !10495, metadata !DIExpression()), !dbg !10496
  %0 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !10497
  %exp = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !10497
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !10497
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !10497
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10497
  %exp1 = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !10497
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !10497
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 2, !dbg !10497
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !10497
  %call = call i64 @int_cst_value(%union.tree_node* %2), !dbg !10498
  %conv = trunc i64 %call to i32, !dbg !10498
  store i32 %conv, i32* %step_x, align 4, !dbg !10499
  %3 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !10500
  %exp4 = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !10500
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !10500
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 2, !dbg !10500
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !10500
  %call7 = call i64 @int_cst_value(%union.tree_node* %4), !dbg !10501
  %conv8 = trunc i64 %call7 to i32, !dbg !10501
  store i32 %conv8, i32* %step_y, align 4, !dbg !10502
  %5 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !10503
  %exp9 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !10503
  %operands10 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp9, i32 0, i32 3, !dbg !10503
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands10, i64 0, i64 2, !dbg !10503
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !10503
  %call12 = call i64 @int_cst_value(%union.tree_node* %6), !dbg !10504
  %conv13 = trunc i64 %call12 to i32, !dbg !10504
  store i32 %conv13, i32* %step_z, align 4, !dbg !10505
  %7 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !10506
  %exp14 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !10506
  %operands15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp14, i32 0, i32 3, !dbg !10506
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands15, i64 0, i64 1, !dbg !10506
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !10506
  %call17 = call %struct.loop* @get_chrec_loop(%union.tree_node* %8), !dbg !10507
  %call18 = call i64 @estimated_loop_iterations_int(%struct.loop* %call17, i8 zeroext 0), !dbg !10508
  store i64 %call18, i64* %niter_x, align 8, !dbg !10509
  %9 = load %union.tree_node*, %union.tree_node** %chrec_a.addr, align 8, !dbg !10510
  %call19 = call %struct.loop* @get_chrec_loop(%union.tree_node* %9), !dbg !10511
  %call20 = call i64 @estimated_loop_iterations_int(%struct.loop* %call19, i8 zeroext 0), !dbg !10512
  store i64 %call20, i64* %niter_y, align 8, !dbg !10513
  %10 = load %union.tree_node*, %union.tree_node** %chrec_b.addr, align 8, !dbg !10514
  %call21 = call %struct.loop* @get_chrec_loop(%union.tree_node* %10), !dbg !10515
  %call22 = call i64 @estimated_loop_iterations_int(%struct.loop* %call21, i8 zeroext 0), !dbg !10516
  store i64 %call22, i64* %niter_z, align 8, !dbg !10517
  %11 = load i64, i64* %niter_x, align 8, !dbg !10518
  %cmp = icmp slt i64 %11, 0, !dbg !10520
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10521

lor.lhs.false:                                    ; preds = %entry
  %12 = load i64, i64* %niter_y, align 8, !dbg !10522
  %cmp24 = icmp slt i64 %12, 0, !dbg !10523
  br i1 %cmp24, label %if.then, label %lor.lhs.false26, !dbg !10524

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %13 = load i64, i64* %niter_z, align 8, !dbg !10525
  %cmp27 = icmp slt i64 %13, 0, !dbg !10526
  br i1 %cmp27, label %if.then, label %if.end34, !dbg !10527

if.then:                                          ; preds = %lor.lhs.false26, %lor.lhs.false, %entry
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10528
  %tobool = icmp ne %struct._IO_FILE* %14, null, !dbg !10528
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !10531

land.lhs.true:                                    ; preds = %if.then
  %15 = load i32, i32* @dump_flags, align 4, !dbg !10532
  %and = and i32 %15, 8, !dbg !10533
  %tobool29 = icmp ne i32 %and, 0, !dbg !10533
  br i1 %tobool29, label %if.then30, label %if.end, !dbg !10534

if.then30:                                        ; preds = %land.lhs.true
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10535
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.121, i64 0, i64 0)), !dbg !10536
  br label %if.end, !dbg !10536

if.end:                                           ; preds = %if.then30, %land.lhs.true, %if.then
  %call32 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !10537
  %17 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !10538
  store %struct.conflict_function* %call32, %struct.conflict_function** %17, align 8, !dbg !10539
  %call33 = call %struct.conflict_function* @conflict_fn_not_known(), !dbg !10540
  %18 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !10541
  store %struct.conflict_function* %call33, %struct.conflict_function** %18, align 8, !dbg !10542
  %19 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !10543
  %20 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10544
  store %union.tree_node* %19, %union.tree_node** %20, align 8, !dbg !10545
  br label %return, !dbg !10546

if.end34:                                         ; preds = %lor.lhs.false26
  %21 = load i64, i64* %niter_x, align 8, !dbg !10547
  %22 = load i64, i64* %niter_z, align 8, !dbg !10547
  %cmp35 = icmp slt i64 %21, %22, !dbg !10547
  br i1 %cmp35, label %cond.true, label %cond.false, !dbg !10547

cond.true:                                        ; preds = %if.end34
  %23 = load i64, i64* %niter_x, align 8, !dbg !10547
  br label %cond.end, !dbg !10547

cond.false:                                       ; preds = %if.end34
  %24 = load i64, i64* %niter_z, align 8, !dbg !10547
  br label %cond.end, !dbg !10547

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %23, %cond.true ], [ %24, %cond.false ], !dbg !10547
  store i64 %cond, i64* %niter, align 8, !dbg !10548
  %25 = load i64, i64* %niter, align 8, !dbg !10549
  %conv37 = trunc i64 %25 to i32, !dbg !10549
  %26 = load i32, i32* %step_x, align 4, !dbg !10550
  %27 = load i32, i32* %step_z, align 4, !dbg !10551
  call void @compute_overlap_steps_for_affine_univar(i32 %conv37, i32 %26, i32 %27, %struct.VEC_tree_heap** %overlaps_a_xz, %struct.VEC_tree_heap** %overlaps_b_xz, %union.tree_node** %last_conflicts_xz, i32 1), !dbg !10552
  %28 = load i64, i64* %niter_y, align 8, !dbg !10553
  %29 = load i64, i64* %niter_z, align 8, !dbg !10553
  %cmp38 = icmp slt i64 %28, %29, !dbg !10553
  br i1 %cmp38, label %cond.true40, label %cond.false41, !dbg !10553

cond.true40:                                      ; preds = %cond.end
  %30 = load i64, i64* %niter_y, align 8, !dbg !10553
  br label %cond.end42, !dbg !10553

cond.false41:                                     ; preds = %cond.end
  %31 = load i64, i64* %niter_z, align 8, !dbg !10553
  br label %cond.end42, !dbg !10553

cond.end42:                                       ; preds = %cond.false41, %cond.true40
  %cond43 = phi i64 [ %30, %cond.true40 ], [ %31, %cond.false41 ], !dbg !10553
  store i64 %cond43, i64* %niter, align 8, !dbg !10554
  %32 = load i64, i64* %niter, align 8, !dbg !10555
  %conv44 = trunc i64 %32 to i32, !dbg !10555
  %33 = load i32, i32* %step_y, align 4, !dbg !10556
  %34 = load i32, i32* %step_z, align 4, !dbg !10557
  call void @compute_overlap_steps_for_affine_univar(i32 %conv44, i32 %33, i32 %34, %struct.VEC_tree_heap** %overlaps_a_yz, %struct.VEC_tree_heap** %overlaps_b_yz, %union.tree_node** %last_conflicts_yz, i32 2), !dbg !10558
  %35 = load i64, i64* %niter_x, align 8, !dbg !10559
  %36 = load i64, i64* %niter_z, align 8, !dbg !10559
  %cmp45 = icmp slt i64 %35, %36, !dbg !10559
  br i1 %cmp45, label %cond.true47, label %cond.false48, !dbg !10559

cond.true47:                                      ; preds = %cond.end42
  %37 = load i64, i64* %niter_x, align 8, !dbg !10559
  br label %cond.end49, !dbg !10559

cond.false48:                                     ; preds = %cond.end42
  %38 = load i64, i64* %niter_z, align 8, !dbg !10559
  br label %cond.end49, !dbg !10559

cond.end49:                                       ; preds = %cond.false48, %cond.true47
  %cond50 = phi i64 [ %37, %cond.true47 ], [ %38, %cond.false48 ], !dbg !10559
  store i64 %cond50, i64* %niter, align 8, !dbg !10560
  %39 = load i64, i64* %niter_y, align 8, !dbg !10561
  %40 = load i64, i64* %niter, align 8, !dbg !10561
  %cmp51 = icmp slt i64 %39, %40, !dbg !10561
  br i1 %cmp51, label %cond.true53, label %cond.false54, !dbg !10561

cond.true53:                                      ; preds = %cond.end49
  %41 = load i64, i64* %niter_y, align 8, !dbg !10561
  br label %cond.end55, !dbg !10561

cond.false54:                                     ; preds = %cond.end49
  %42 = load i64, i64* %niter, align 8, !dbg !10561
  br label %cond.end55, !dbg !10561

cond.end55:                                       ; preds = %cond.false54, %cond.true53
  %cond56 = phi i64 [ %41, %cond.true53 ], [ %42, %cond.false54 ], !dbg !10561
  store i64 %cond56, i64* %niter, align 8, !dbg !10562
  %43 = load i64, i64* %niter, align 8, !dbg !10563
  %conv57 = trunc i64 %43 to i32, !dbg !10563
  %44 = load i32, i32* %step_x, align 4, !dbg !10564
  %45 = load i32, i32* %step_y, align 4, !dbg !10565
  %add = add nsw i32 %44, %45, !dbg !10566
  %46 = load i32, i32* %step_z, align 4, !dbg !10567
  call void @compute_overlap_steps_for_affine_univar(i32 %conv57, i32 %add, i32 %46, %struct.VEC_tree_heap** %overlaps_a_xyz, %struct.VEC_tree_heap** %overlaps_b_xyz, %union.tree_node** %last_conflicts_xyz, i32 3), !dbg !10568
  %47 = load %union.tree_node*, %union.tree_node** %last_conflicts_xz, align 8, !dbg !10569
  %call58 = call i32 @integer_zerop(%union.tree_node* %47), !dbg !10570
  %tobool59 = icmp ne i32 %call58, 0, !dbg !10571
  %lnot = xor i1 %tobool59, true, !dbg !10571
  %lnot.ext = zext i1 %lnot to i32, !dbg !10571
  %conv60 = trunc i32 %lnot.ext to i8, !dbg !10571
  store i8 %conv60, i8* %xz_p, align 1, !dbg !10572
  %48 = load %union.tree_node*, %union.tree_node** %last_conflicts_yz, align 8, !dbg !10573
  %call61 = call i32 @integer_zerop(%union.tree_node* %48), !dbg !10574
  %tobool62 = icmp ne i32 %call61, 0, !dbg !10575
  %lnot63 = xor i1 %tobool62, true, !dbg !10575
  %lnot.ext64 = zext i1 %lnot63 to i32, !dbg !10575
  %conv65 = trunc i32 %lnot.ext64 to i8, !dbg !10575
  store i8 %conv65, i8* %yz_p, align 1, !dbg !10576
  %49 = load %union.tree_node*, %union.tree_node** %last_conflicts_xyz, align 8, !dbg !10577
  %call66 = call i32 @integer_zerop(%union.tree_node* %49), !dbg !10578
  %tobool67 = icmp ne i32 %call66, 0, !dbg !10579
  %lnot68 = xor i1 %tobool67, true, !dbg !10579
  %lnot.ext69 = zext i1 %lnot68 to i32, !dbg !10579
  %conv70 = trunc i32 %lnot.ext69 to i8, !dbg !10579
  store i8 %conv70, i8* %xyz_p, align 1, !dbg !10580
  %50 = load i8, i8* %xz_p, align 1, !dbg !10581
  %conv71 = zext i8 %50 to i32, !dbg !10581
  %tobool72 = icmp ne i32 %conv71, 0, !dbg !10581
  br i1 %tobool72, label %if.then79, label %lor.lhs.false73, !dbg !10583

lor.lhs.false73:                                  ; preds = %cond.end55
  %51 = load i8, i8* %yz_p, align 1, !dbg !10584
  %conv74 = zext i8 %51 to i32, !dbg !10584
  %tobool75 = icmp ne i32 %conv74, 0, !dbg !10584
  br i1 %tobool75, label %if.then79, label %lor.lhs.false76, !dbg !10585

lor.lhs.false76:                                  ; preds = %lor.lhs.false73
  %52 = load i8, i8* %xyz_p, align 1, !dbg !10586
  %conv77 = zext i8 %52 to i32, !dbg !10586
  %tobool78 = icmp ne i32 %conv77, 0, !dbg !10586
  br i1 %tobool78, label %if.then79, label %if.else, !dbg !10587

if.then79:                                        ; preds = %lor.lhs.false76, %lor.lhs.false73, %cond.end55
  %53 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10588
  %call80 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %53), !dbg !10590
  store %struct.VEC_tree_heap* %call80, %struct.VEC_tree_heap** %ova1, align 8, !dbg !10591
  %54 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10592
  %call81 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %54), !dbg !10593
  store %struct.VEC_tree_heap* %call81, %struct.VEC_tree_heap** %ova2, align 8, !dbg !10594
  %55 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10595
  %call82 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %55), !dbg !10596
  store %struct.VEC_tree_heap* %call82, %struct.VEC_tree_heap** %ovb, align 8, !dbg !10597
  %56 = load i8, i8* %xz_p, align 1, !dbg !10598
  %tobool83 = icmp ne i8 %56, 0, !dbg !10598
  br i1 %tobool83, label %if.then84, label %if.end87, !dbg !10600

if.then84:                                        ; preds = %if.then79
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %t0, metadata !10601, metadata !DIExpression()), !dbg !10603
  %57 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ova1, align 8, !dbg !10604
  store %struct.VEC_tree_heap* %57, %struct.VEC_tree_heap** %t0, align 8, !dbg !10603
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %t2, metadata !10605, metadata !DIExpression()), !dbg !10606
  %58 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ovb, align 8, !dbg !10607
  store %struct.VEC_tree_heap* %58, %struct.VEC_tree_heap** %t2, align 8, !dbg !10606
  %59 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ova1, align 8, !dbg !10608
  %60 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_a_xz, align 8, !dbg !10609
  %call85 = call %struct.VEC_tree_heap* @affine_fn_plus(%struct.VEC_tree_heap* %59, %struct.VEC_tree_heap* %60), !dbg !10610
  store %struct.VEC_tree_heap* %call85, %struct.VEC_tree_heap** %ova1, align 8, !dbg !10611
  %61 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ovb, align 8, !dbg !10612
  %62 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_b_xz, align 8, !dbg !10613
  %call86 = call %struct.VEC_tree_heap* @affine_fn_plus(%struct.VEC_tree_heap* %61, %struct.VEC_tree_heap* %62), !dbg !10614
  store %struct.VEC_tree_heap* %call86, %struct.VEC_tree_heap** %ovb, align 8, !dbg !10615
  %63 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %t0, align 8, !dbg !10616
  call void @affine_fn_free(%struct.VEC_tree_heap* %63), !dbg !10617
  %64 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %t2, align 8, !dbg !10618
  call void @affine_fn_free(%struct.VEC_tree_heap* %64), !dbg !10619
  %65 = load %union.tree_node*, %union.tree_node** %last_conflicts_xz, align 8, !dbg !10620
  %66 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10621
  store %union.tree_node* %65, %union.tree_node** %66, align 8, !dbg !10622
  br label %if.end87, !dbg !10623

if.end87:                                         ; preds = %if.then84, %if.then79
  %67 = load i8, i8* %yz_p, align 1, !dbg !10624
  %tobool88 = icmp ne i8 %67, 0, !dbg !10624
  br i1 %tobool88, label %if.then89, label %if.end94, !dbg !10626

if.then89:                                        ; preds = %if.end87
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %t090, metadata !10627, metadata !DIExpression()), !dbg !10629
  %68 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ova2, align 8, !dbg !10630
  store %struct.VEC_tree_heap* %68, %struct.VEC_tree_heap** %t090, align 8, !dbg !10629
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %t291, metadata !10631, metadata !DIExpression()), !dbg !10632
  %69 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ovb, align 8, !dbg !10633
  store %struct.VEC_tree_heap* %69, %struct.VEC_tree_heap** %t291, align 8, !dbg !10632
  %70 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ova2, align 8, !dbg !10634
  %71 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_a_yz, align 8, !dbg !10635
  %call92 = call %struct.VEC_tree_heap* @affine_fn_plus(%struct.VEC_tree_heap* %70, %struct.VEC_tree_heap* %71), !dbg !10636
  store %struct.VEC_tree_heap* %call92, %struct.VEC_tree_heap** %ova2, align 8, !dbg !10637
  %72 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ovb, align 8, !dbg !10638
  %73 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_b_yz, align 8, !dbg !10639
  %call93 = call %struct.VEC_tree_heap* @affine_fn_plus(%struct.VEC_tree_heap* %72, %struct.VEC_tree_heap* %73), !dbg !10640
  store %struct.VEC_tree_heap* %call93, %struct.VEC_tree_heap** %ovb, align 8, !dbg !10641
  %74 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %t090, align 8, !dbg !10642
  call void @affine_fn_free(%struct.VEC_tree_heap* %74), !dbg !10643
  %75 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %t291, align 8, !dbg !10644
  call void @affine_fn_free(%struct.VEC_tree_heap* %75), !dbg !10645
  %76 = load %union.tree_node*, %union.tree_node** %last_conflicts_yz, align 8, !dbg !10646
  %77 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10647
  store %union.tree_node* %76, %union.tree_node** %77, align 8, !dbg !10648
  br label %if.end94, !dbg !10649

if.end94:                                         ; preds = %if.then89, %if.end87
  %78 = load i8, i8* %xyz_p, align 1, !dbg !10650
  %tobool95 = icmp ne i8 %78, 0, !dbg !10650
  br i1 %tobool95, label %if.then96, label %if.end102, !dbg !10652

if.then96:                                        ; preds = %if.end94
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %t097, metadata !10653, metadata !DIExpression()), !dbg !10655
  %79 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ova1, align 8, !dbg !10656
  store %struct.VEC_tree_heap* %79, %struct.VEC_tree_heap** %t097, align 8, !dbg !10655
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %t298, metadata !10657, metadata !DIExpression()), !dbg !10658
  %80 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ova2, align 8, !dbg !10659
  store %struct.VEC_tree_heap* %80, %struct.VEC_tree_heap** %t298, align 8, !dbg !10658
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %t4, metadata !10660, metadata !DIExpression()), !dbg !10661
  %81 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ovb, align 8, !dbg !10662
  store %struct.VEC_tree_heap* %81, %struct.VEC_tree_heap** %t4, align 8, !dbg !10661
  %82 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ova1, align 8, !dbg !10663
  %83 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_a_xyz, align 8, !dbg !10664
  %call99 = call %struct.VEC_tree_heap* @affine_fn_plus(%struct.VEC_tree_heap* %82, %struct.VEC_tree_heap* %83), !dbg !10665
  store %struct.VEC_tree_heap* %call99, %struct.VEC_tree_heap** %ova1, align 8, !dbg !10666
  %84 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ova2, align 8, !dbg !10667
  %85 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_a_xyz, align 8, !dbg !10668
  %call100 = call %struct.VEC_tree_heap* @affine_fn_plus(%struct.VEC_tree_heap* %84, %struct.VEC_tree_heap* %85), !dbg !10669
  store %struct.VEC_tree_heap* %call100, %struct.VEC_tree_heap** %ova2, align 8, !dbg !10670
  %86 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ovb, align 8, !dbg !10671
  %87 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_b_xyz, align 8, !dbg !10672
  %call101 = call %struct.VEC_tree_heap* @affine_fn_plus(%struct.VEC_tree_heap* %86, %struct.VEC_tree_heap* %87), !dbg !10673
  store %struct.VEC_tree_heap* %call101, %struct.VEC_tree_heap** %ovb, align 8, !dbg !10674
  %88 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %t097, align 8, !dbg !10675
  call void @affine_fn_free(%struct.VEC_tree_heap* %88), !dbg !10676
  %89 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %t298, align 8, !dbg !10677
  call void @affine_fn_free(%struct.VEC_tree_heap* %89), !dbg !10678
  %90 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %t4, align 8, !dbg !10679
  call void @affine_fn_free(%struct.VEC_tree_heap* %90), !dbg !10680
  %91 = load %union.tree_node*, %union.tree_node** %last_conflicts_xyz, align 8, !dbg !10681
  %92 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10682
  store %union.tree_node* %91, %union.tree_node** %92, align 8, !dbg !10683
  br label %if.end102, !dbg !10684

if.end102:                                        ; preds = %if.then96, %if.end94
  %93 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ova1, align 8, !dbg !10685
  %94 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ova2, align 8, !dbg !10686
  %call103 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 2, %struct.VEC_tree_heap* %93, %struct.VEC_tree_heap* %94), !dbg !10687
  %95 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !10688
  store %struct.conflict_function* %call103, %struct.conflict_function** %95, align 8, !dbg !10689
  %96 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ovb, align 8, !dbg !10690
  %call104 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %96), !dbg !10691
  %97 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !10692
  store %struct.conflict_function* %call104, %struct.conflict_function** %97, align 8, !dbg !10693
  br label %if.end109, !dbg !10694

if.else:                                          ; preds = %lor.lhs.false76
  %98 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10695
  %call105 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %98), !dbg !10697
  %call106 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call105), !dbg !10698
  %99 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_a.addr, align 8, !dbg !10699
  store %struct.conflict_function* %call106, %struct.conflict_function** %99, align 8, !dbg !10700
  %100 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10701
  %call107 = call %struct.VEC_tree_heap* @affine_fn_cst(%union.tree_node* %100), !dbg !10702
  %call108 = call %struct.conflict_function* (i32, ...) @conflict_fn(i32 1, %struct.VEC_tree_heap* %call107), !dbg !10703
  %101 = load %struct.conflict_function**, %struct.conflict_function*** %overlaps_b.addr, align 8, !dbg !10704
  store %struct.conflict_function* %call108, %struct.conflict_function** %101, align 8, !dbg !10705
  %102 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10706
  %103 = load %union.tree_node**, %union.tree_node*** %last_conflicts.addr, align 8, !dbg !10707
  store %union.tree_node* %102, %union.tree_node** %103, align 8, !dbg !10708
  br label %if.end109

if.end109:                                        ; preds = %if.else, %if.end102
  %104 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_a_xz, align 8, !dbg !10709
  call void @affine_fn_free(%struct.VEC_tree_heap* %104), !dbg !10710
  %105 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_b_xz, align 8, !dbg !10711
  call void @affine_fn_free(%struct.VEC_tree_heap* %105), !dbg !10712
  %106 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_a_yz, align 8, !dbg !10713
  call void @affine_fn_free(%struct.VEC_tree_heap* %106), !dbg !10714
  %107 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_b_yz, align 8, !dbg !10715
  call void @affine_fn_free(%struct.VEC_tree_heap* %107), !dbg !10716
  %108 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_a_xyz, align 8, !dbg !10717
  call void @affine_fn_free(%struct.VEC_tree_heap* %108), !dbg !10718
  %109 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %overlaps_b_xyz, align 8, !dbg !10719
  call void @affine_fn_free(%struct.VEC_tree_heap* %109), !dbg !10720
  br label %return, !dbg !10721

return:                                           ; preds = %if.end109, %if.end
  ret void, !dbg !10721
}

declare dso_local void @lambda_matrix_right_hermite(i32**, i32, i32, i32**, i32**) #2

declare dso_local void @lambda_matrix_row_negate(i32**, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @int_divides_p(i32 %a, i32 %b) #0 !dbg !10722 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !10725, metadata !DIExpression()), !dbg !10726
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !10727, metadata !DIExpression()), !dbg !10728
  %0 = load i32, i32* %b.addr, align 4, !dbg !10729
  %1 = load i32, i32* %a.addr, align 4, !dbg !10730
  %rem = srem i32 %0, %1, !dbg !10731
  %cmp = icmp eq i32 %rem, 0, !dbg !10732
  %conv = zext i1 %cmp to i32, !dbg !10732
  %conv1 = trunc i32 %conv to i8, !dbg !10733
  ret i8 %conv1, !dbg !10734
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @affine_fn_univar(%union.tree_node* %cst, i32 %dim, %union.tree_node* %coef) #0 !dbg !10735 {
entry:
  %cst.addr = alloca %union.tree_node*, align 8
  %dim.addr = alloca i32, align 4
  %coef.addr = alloca %union.tree_node*, align 8
  %fn = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  store %union.tree_node* %cst, %union.tree_node** %cst.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst.addr, metadata !10738, metadata !DIExpression()), !dbg !10739
  store i32 %dim, i32* %dim.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dim.addr, metadata !10740, metadata !DIExpression()), !dbg !10741
  store %union.tree_node* %coef, %union.tree_node** %coef.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %coef.addr, metadata !10742, metadata !DIExpression()), !dbg !10743
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fn, metadata !10744, metadata !DIExpression()), !dbg !10745
  %0 = load i32, i32* %dim.addr, align 4, !dbg !10746
  %add = add i32 %0, 1, !dbg !10746
  %call = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %add), !dbg !10746
  store %struct.VEC_tree_heap* %call, %struct.VEC_tree_heap** %fn, align 8, !dbg !10745
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10747, metadata !DIExpression()), !dbg !10748
  %1 = load i32, i32* %dim.addr, align 4, !dbg !10749
  %cmp = icmp ugt i32 %1, 0, !dbg !10749
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10749

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.44, i64 0, i64 0), i32 1595, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !10749
  br label %cond.end, !dbg !10749

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10749

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10749
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn, align 8, !dbg !10750
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !10750
  br i1 %tobool, label %cond.true1, label %cond.false2, !dbg !10750

cond.true1:                                       ; preds = %cond.end
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn, align 8, !dbg !10750
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !10750
  br label %cond.end3, !dbg !10750

cond.false2:                                      ; preds = %cond.end
  br label %cond.end3, !dbg !10750

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi %struct.VEC_tree_base* [ %base, %cond.true1 ], [ null, %cond.false2 ], !dbg !10750
  %4 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !10750
  %call5 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond4, %union.tree_node* %4), !dbg !10750
  store i32 1, i32* %i, align 4, !dbg !10751
  br label %for.cond, !dbg !10753

for.cond:                                         ; preds = %for.inc, %cond.end3
  %5 = load i32, i32* %i, align 4, !dbg !10754
  %6 = load i32, i32* %dim.addr, align 4, !dbg !10756
  %cmp6 = icmp ult i32 %5, %6, !dbg !10757
  br i1 %cmp6, label %for.body, label %for.end, !dbg !10758

for.body:                                         ; preds = %for.cond
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn, align 8, !dbg !10759
  %tobool7 = icmp ne %struct.VEC_tree_heap* %7, null, !dbg !10759
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !10759

cond.true8:                                       ; preds = %for.body
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn, align 8, !dbg !10759
  %base9 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %8, i32 0, i32 0, !dbg !10759
  br label %cond.end11, !dbg !10759

cond.false10:                                     ; preds = %for.body
  br label %cond.end11, !dbg !10759

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_tree_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !10759
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10759
  %call13 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond12, %union.tree_node* %9), !dbg !10759
  br label %for.inc, !dbg !10759

for.inc:                                          ; preds = %cond.end11
  %10 = load i32, i32* %i, align 4, !dbg !10760
  %inc = add i32 %10, 1, !dbg !10760
  store i32 %inc, i32* %i, align 4, !dbg !10760
  br label %for.cond, !dbg !10761, !llvm.loop !10762

for.end:                                          ; preds = %for.cond
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn, align 8, !dbg !10764
  %tobool14 = icmp ne %struct.VEC_tree_heap* %11, null, !dbg !10764
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !10764

cond.true15:                                      ; preds = %for.end
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn, align 8, !dbg !10764
  %base16 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %12, i32 0, i32 0, !dbg !10764
  br label %cond.end18, !dbg !10764

cond.false17:                                     ; preds = %for.end
  br label %cond.end18, !dbg !10764

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_tree_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !10764
  %13 = load %union.tree_node*, %union.tree_node** %coef.addr, align 8, !dbg !10764
  %call20 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond19, %union.tree_node* %13), !dbg !10764
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn, align 8, !dbg !10765
  ret %struct.VEC_tree_heap* %14, !dbg !10766
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @chrec_fold_op(i32 %code, %union.tree_node* %type, %union.tree_node* %op0, %union.tree_node* %op1) #0 !dbg !10767 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !10770, metadata !DIExpression()), !dbg !10771
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !10772, metadata !DIExpression()), !dbg !10773
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !10774, metadata !DIExpression()), !dbg !10775
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !10776, metadata !DIExpression()), !dbg !10777
  %0 = load i32, i32* %code.addr, align 4, !dbg !10778
  switch i32 %0, label %sw.default [
    i32 63, label %sw.bb
    i32 64, label %sw.bb1
    i32 65, label %sw.bb3
  ], !dbg !10779

sw.bb:                                            ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10780
  %2 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10782
  %3 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10783
  %call = call %union.tree_node* @chrec_fold_plus(%union.tree_node* %1, %union.tree_node* %2, %union.tree_node* %3), !dbg !10784
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !10785
  br label %return, !dbg !10785

sw.bb1:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10786
  %5 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10787
  %6 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10788
  %call2 = call %union.tree_node* @chrec_fold_minus(%union.tree_node* %4, %union.tree_node* %5, %union.tree_node* %6), !dbg !10789
  store %union.tree_node* %call2, %union.tree_node** %retval, align 8, !dbg !10790
  br label %return, !dbg !10790

sw.bb3:                                           ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10791
  %8 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !10792
  %9 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !10793
  %call4 = call %union.tree_node* @chrec_fold_multiply(%union.tree_node* %7, %union.tree_node* %8, %union.tree_node* %9), !dbg !10794
  store %union.tree_node* %call4, %union.tree_node** %retval, align 8, !dbg !10795
  br label %return, !dbg !10795

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.120, i64 0, i64 0), i32 257, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !10796
  br label %sw.epilog, !dbg !10797

sw.epilog:                                        ; preds = %sw.default
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10798
  br label %return, !dbg !10798

return:                                           ; preds = %sw.epilog, %sw.bb3, %sw.bb1, %sw.bb
  %10 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10799
  ret %union.tree_node* %10, !dbg !10799
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @chrec_type(%union.tree_node* %chrec) #0 !dbg !10800 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !10803, metadata !DIExpression()), !dbg !10804
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10805
  %call = call zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %0), !dbg !10807
  %tobool = icmp ne i8 %call, 0, !dbg !10807
  br i1 %tobool, label %if.then, label %if.end, !dbg !10808

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10809
  br label %return, !dbg !10809

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !10810
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !10810
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10810
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10810
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !10811
  br label %return, !dbg !10811

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10812
  ret %union.tree_node* %3, !dbg !10812
}

declare dso_local %union.tree_node* @chrec_fold_plus(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @chrec_fold_multiply(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gcd(i32 %a, i32 %b) #0 !dbg !10813 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !10816, metadata !DIExpression()), !dbg !10817
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !10818, metadata !DIExpression()), !dbg !10819
  call void @llvm.dbg.declare(metadata i32* %x, metadata !10820, metadata !DIExpression()), !dbg !10821
  call void @llvm.dbg.declare(metadata i32* %y, metadata !10822, metadata !DIExpression()), !dbg !10823
  call void @llvm.dbg.declare(metadata i32* %z, metadata !10824, metadata !DIExpression()), !dbg !10825
  %0 = load i32, i32* %a.addr, align 4, !dbg !10826
  %call = call i32 @abs(i32 %0) #6, !dbg !10827
  store i32 %call, i32* %x, align 4, !dbg !10828
  %1 = load i32, i32* %b.addr, align 4, !dbg !10829
  %call1 = call i32 @abs(i32 %1) #6, !dbg !10830
  store i32 %call1, i32* %y, align 4, !dbg !10831
  br label %while.cond, !dbg !10832

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %x, align 4, !dbg !10833
  %cmp = icmp sgt i32 %2, 0, !dbg !10834
  br i1 %cmp, label %while.body, label %while.end, !dbg !10832

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %y, align 4, !dbg !10835
  %4 = load i32, i32* %x, align 4, !dbg !10837
  %rem = srem i32 %3, %4, !dbg !10838
  store i32 %rem, i32* %z, align 4, !dbg !10839
  %5 = load i32, i32* %x, align 4, !dbg !10840
  store i32 %5, i32* %y, align 4, !dbg !10841
  %6 = load i32, i32* %z, align 4, !dbg !10842
  store i32 %6, i32* %x, align 4, !dbg !10843
  br label %while.cond, !dbg !10832, !llvm.loop !10844

while.end:                                        ; preds = %while.cond
  %7 = load i32, i32* %y, align 4, !dbg !10846
  ret i32 %7, !dbg !10847
}

; Function Attrs: nounwind readnone
declare dso_local i32 @abs(i32) #5

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @affine_fn_plus(%struct.VEC_tree_heap* %fna, %struct.VEC_tree_heap* %fnb) #0 !dbg !10848 {
entry:
  %fna.addr = alloca %struct.VEC_tree_heap*, align 8
  %fnb.addr = alloca %struct.VEC_tree_heap*, align 8
  store %struct.VEC_tree_heap* %fna, %struct.VEC_tree_heap** %fna.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fna.addr, metadata !10851, metadata !DIExpression()), !dbg !10852
  store %struct.VEC_tree_heap* %fnb, %struct.VEC_tree_heap** %fnb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fnb.addr, metadata !10853, metadata !DIExpression()), !dbg !10854
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10855
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10856
  %call = call %struct.VEC_tree_heap* @affine_fn_op(i32 63, %struct.VEC_tree_heap* %0, %struct.VEC_tree_heap* %1), !dbg !10857
  ret %struct.VEC_tree_heap* %call, !dbg !10858
}

; Function Attrs: noinline nounwind uwtable
define internal void @affine_fn_free(%struct.VEC_tree_heap* %fn) #0 !dbg !10859 {
entry:
  %fn.addr = alloca %struct.VEC_tree_heap*, align 8
  store %struct.VEC_tree_heap* %fn, %struct.VEC_tree_heap** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fn.addr, metadata !10862, metadata !DIExpression()), !dbg !10863
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %fn.addr), !dbg !10864
  ret void, !dbg !10865
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @affine_fn_op(i32 %op, %struct.VEC_tree_heap* %fna, %struct.VEC_tree_heap* %fnb) #0 !dbg !10866 {
entry:
  %op.addr = alloca i32, align 4
  %fna.addr = alloca %struct.VEC_tree_heap*, align 8
  %fnb.addr = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %ret = alloca %struct.VEC_tree_heap*, align 8
  %coef = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store i32 %op, i32* %op.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op.addr, metadata !10869, metadata !DIExpression()), !dbg !10870
  store %struct.VEC_tree_heap* %fna, %struct.VEC_tree_heap** %fna.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fna.addr, metadata !10871, metadata !DIExpression()), !dbg !10872
  store %struct.VEC_tree_heap* %fnb, %struct.VEC_tree_heap** %fnb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fnb.addr, metadata !10873, metadata !DIExpression()), !dbg !10874
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10875, metadata !DIExpression()), !dbg !10876
  call void @llvm.dbg.declare(metadata i32* %n, metadata !10877, metadata !DIExpression()), !dbg !10878
  call void @llvm.dbg.declare(metadata i32* %m, metadata !10879, metadata !DIExpression()), !dbg !10880
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %ret, metadata !10881, metadata !DIExpression()), !dbg !10882
  call void @llvm.dbg.declare(metadata %union.tree_node** %coef, metadata !10883, metadata !DIExpression()), !dbg !10884
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10885
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !10885
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10885

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10885
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !10885
  br label %cond.end, !dbg !10885

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10885

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10885
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !10885
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10887
  %tobool1 = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !10887
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !10887

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10887
  %base3 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !10887
  br label %cond.end5, !dbg !10887

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !10887

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_tree_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !10887
  %call7 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond6), !dbg !10887
  %cmp = icmp ugt i32 %call, %call7, !dbg !10888
  br i1 %cmp, label %if.then, label %if.else, !dbg !10889

if.then:                                          ; preds = %cond.end5
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10890
  %tobool8 = icmp ne %struct.VEC_tree_heap* %4, null, !dbg !10890
  br i1 %tobool8, label %cond.true9, label %cond.false11, !dbg !10890

cond.true9:                                       ; preds = %if.then
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10890
  %base10 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %5, i32 0, i32 0, !dbg !10890
  br label %cond.end12, !dbg !10890

cond.false11:                                     ; preds = %if.then
  br label %cond.end12, !dbg !10890

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi %struct.VEC_tree_base* [ %base10, %cond.true9 ], [ null, %cond.false11 ], !dbg !10890
  %call14 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond13), !dbg !10890
  store i32 %call14, i32* %n, align 4, !dbg !10892
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10893
  %tobool15 = icmp ne %struct.VEC_tree_heap* %6, null, !dbg !10893
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !10893

cond.true16:                                      ; preds = %cond.end12
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10893
  %base17 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %7, i32 0, i32 0, !dbg !10893
  br label %cond.end19, !dbg !10893

cond.false18:                                     ; preds = %cond.end12
  br label %cond.end19, !dbg !10893

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_tree_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !10893
  %call21 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond20), !dbg !10893
  store i32 %call21, i32* %m, align 4, !dbg !10894
  br label %if.end, !dbg !10895

if.else:                                          ; preds = %cond.end5
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10896
  %tobool22 = icmp ne %struct.VEC_tree_heap* %8, null, !dbg !10896
  br i1 %tobool22, label %cond.true23, label %cond.false25, !dbg !10896

cond.true23:                                      ; preds = %if.else
  %9 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10896
  %base24 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %9, i32 0, i32 0, !dbg !10896
  br label %cond.end26, !dbg !10896

cond.false25:                                     ; preds = %if.else
  br label %cond.end26, !dbg !10896

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi %struct.VEC_tree_base* [ %base24, %cond.true23 ], [ null, %cond.false25 ], !dbg !10896
  %call28 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond27), !dbg !10896
  store i32 %call28, i32* %n, align 4, !dbg !10898
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10899
  %tobool29 = icmp ne %struct.VEC_tree_heap* %10, null, !dbg !10899
  br i1 %tobool29, label %cond.true30, label %cond.false32, !dbg !10899

cond.true30:                                      ; preds = %cond.end26
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10899
  %base31 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %11, i32 0, i32 0, !dbg !10899
  br label %cond.end33, !dbg !10899

cond.false32:                                     ; preds = %cond.end26
  br label %cond.end33, !dbg !10899

cond.end33:                                       ; preds = %cond.false32, %cond.true30
  %cond34 = phi %struct.VEC_tree_base* [ %base31, %cond.true30 ], [ null, %cond.false32 ], !dbg !10899
  %call35 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond34), !dbg !10899
  store i32 %call35, i32* %m, align 4, !dbg !10900
  br label %if.end

if.end:                                           ; preds = %cond.end33, %cond.end19
  %12 = load i32, i32* %m, align 4, !dbg !10901
  %call36 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %12), !dbg !10901
  store %struct.VEC_tree_heap* %call36, %struct.VEC_tree_heap** %ret, align 8, !dbg !10902
  store i32 0, i32* %i, align 4, !dbg !10903
  br label %for.cond, !dbg !10905

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load i32, i32* %i, align 4, !dbg !10906
  %14 = load i32, i32* %n, align 4, !dbg !10908
  %cmp37 = icmp ult i32 %13, %14, !dbg !10909
  br i1 %cmp37, label %for.body, label %for.end, !dbg !10910

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10911, metadata !DIExpression()), !dbg !10913
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10914
  %tobool38 = icmp ne %struct.VEC_tree_heap* %15, null, !dbg !10914
  br i1 %tobool38, label %cond.true39, label %cond.false41, !dbg !10914

cond.true39:                                      ; preds = %for.body
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10914
  %base40 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %16, i32 0, i32 0, !dbg !10914
  br label %cond.end42, !dbg !10914

cond.false41:                                     ; preds = %for.body
  br label %cond.end42, !dbg !10914

cond.end42:                                       ; preds = %cond.false41, %cond.true39
  %cond43 = phi %struct.VEC_tree_base* [ %base40, %cond.true39 ], [ null, %cond.false41 ], !dbg !10914
  %17 = load i32, i32* %i, align 4, !dbg !10914
  %call44 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond43, i32 %17), !dbg !10914
  %common = bitcast %union.tree_node* %call44 to %struct.tree_common*, !dbg !10914
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10914
  %18 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !10914
  %19 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10915
  %tobool46 = icmp ne %struct.VEC_tree_heap* %19, null, !dbg !10915
  br i1 %tobool46, label %cond.true47, label %cond.false49, !dbg !10915

cond.true47:                                      ; preds = %cond.end42
  %20 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10915
  %base48 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %20, i32 0, i32 0, !dbg !10915
  br label %cond.end50, !dbg !10915

cond.false49:                                     ; preds = %cond.end42
  br label %cond.end50, !dbg !10915

cond.end50:                                       ; preds = %cond.false49, %cond.true47
  %cond51 = phi %struct.VEC_tree_base* [ %base48, %cond.true47 ], [ null, %cond.false49 ], !dbg !10915
  %21 = load i32, i32* %i, align 4, !dbg !10915
  %call52 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond51, i32 %21), !dbg !10915
  %common53 = bitcast %union.tree_node* %call52 to %struct.tree_common*, !dbg !10915
  %type54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 2, !dbg !10915
  %22 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !10915
  %call55 = call %union.tree_node* @signed_type_for_types(%union.tree_node* %18, %union.tree_node* %22), !dbg !10916
  store %union.tree_node* %call55, %union.tree_node** %type, align 8, !dbg !10913
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ret, align 8, !dbg !10917
  %tobool56 = icmp ne %struct.VEC_tree_heap* %23, null, !dbg !10917
  br i1 %tobool56, label %cond.true57, label %cond.false59, !dbg !10917

cond.true57:                                      ; preds = %cond.end50
  %24 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ret, align 8, !dbg !10917
  %base58 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %24, i32 0, i32 0, !dbg !10917
  br label %cond.end60, !dbg !10917

cond.false59:                                     ; preds = %cond.end50
  br label %cond.end60, !dbg !10917

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi %struct.VEC_tree_base* [ %base58, %cond.true57 ], [ null, %cond.false59 ], !dbg !10917
  %25 = load i32, i32* %op.addr, align 4, !dbg !10917
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10917
  %27 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10917
  %tobool62 = icmp ne %struct.VEC_tree_heap* %27, null, !dbg !10917
  br i1 %tobool62, label %cond.true63, label %cond.false65, !dbg !10917

cond.true63:                                      ; preds = %cond.end60
  %28 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10917
  %base64 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %28, i32 0, i32 0, !dbg !10917
  br label %cond.end66, !dbg !10917

cond.false65:                                     ; preds = %cond.end60
  br label %cond.end66, !dbg !10917

cond.end66:                                       ; preds = %cond.false65, %cond.true63
  %cond67 = phi %struct.VEC_tree_base* [ %base64, %cond.true63 ], [ null, %cond.false65 ], !dbg !10917
  %29 = load i32, i32* %i, align 4, !dbg !10917
  %call68 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond67, i32 %29), !dbg !10917
  %30 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10917
  %tobool69 = icmp ne %struct.VEC_tree_heap* %30, null, !dbg !10917
  br i1 %tobool69, label %cond.true70, label %cond.false72, !dbg !10917

cond.true70:                                      ; preds = %cond.end66
  %31 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10917
  %base71 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %31, i32 0, i32 0, !dbg !10917
  br label %cond.end73, !dbg !10917

cond.false72:                                     ; preds = %cond.end66
  br label %cond.end73, !dbg !10917

cond.end73:                                       ; preds = %cond.false72, %cond.true70
  %cond74 = phi %struct.VEC_tree_base* [ %base71, %cond.true70 ], [ null, %cond.false72 ], !dbg !10917
  %32 = load i32, i32* %i, align 4, !dbg !10917
  %call75 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond74, i32 %32), !dbg !10917
  %call76 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %25, %union.tree_node* %26, %union.tree_node* %call68, %union.tree_node* %call75), !dbg !10917
  %call77 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond61, %union.tree_node* %call76), !dbg !10917
  br label %for.inc, !dbg !10918

for.inc:                                          ; preds = %cond.end73
  %33 = load i32, i32* %i, align 4, !dbg !10919
  %inc = add i32 %33, 1, !dbg !10919
  store i32 %inc, i32* %i, align 4, !dbg !10919
  br label %for.cond, !dbg !10920, !llvm.loop !10921

for.end:                                          ; preds = %for.cond
  br label %for.cond78, !dbg !10923

for.cond78:                                       ; preds = %for.inc99, %for.end
  %34 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10924
  %tobool79 = icmp ne %struct.VEC_tree_heap* %34, null, !dbg !10924
  br i1 %tobool79, label %cond.true80, label %cond.false82, !dbg !10924

cond.true80:                                      ; preds = %for.cond78
  %35 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !10924
  %base81 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %35, i32 0, i32 0, !dbg !10924
  br label %cond.end83, !dbg !10924

cond.false82:                                     ; preds = %for.cond78
  br label %cond.end83, !dbg !10924

cond.end83:                                       ; preds = %cond.false82, %cond.true80
  %cond84 = phi %struct.VEC_tree_base* [ %base81, %cond.true80 ], [ null, %cond.false82 ], !dbg !10924
  %36 = load i32, i32* %i, align 4, !dbg !10924
  %call85 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond84, i32 %36, %union.tree_node** %coef), !dbg !10924
  %tobool86 = icmp ne i32 %call85, 0, !dbg !10927
  br i1 %tobool86, label %for.body87, label %for.end101, !dbg !10927

for.body87:                                       ; preds = %cond.end83
  %37 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ret, align 8, !dbg !10928
  %tobool88 = icmp ne %struct.VEC_tree_heap* %37, null, !dbg !10928
  br i1 %tobool88, label %cond.true89, label %cond.false91, !dbg !10928

cond.true89:                                      ; preds = %for.body87
  %38 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ret, align 8, !dbg !10928
  %base90 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %38, i32 0, i32 0, !dbg !10928
  br label %cond.end92, !dbg !10928

cond.false91:                                     ; preds = %for.body87
  br label %cond.end92, !dbg !10928

cond.end92:                                       ; preds = %cond.false91, %cond.true89
  %cond93 = phi %struct.VEC_tree_base* [ %base90, %cond.true89 ], [ null, %cond.false91 ], !dbg !10928
  %39 = load i32, i32* %op.addr, align 4, !dbg !10928
  %40 = load %union.tree_node*, %union.tree_node** %coef, align 8, !dbg !10928
  %common94 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !10928
  %type95 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common94, i32 0, i32 2, !dbg !10928
  %41 = load %union.tree_node*, %union.tree_node** %type95, align 8, !dbg !10928
  %call96 = call %union.tree_node* @signed_type_for(%union.tree_node* %41), !dbg !10928
  %42 = load %union.tree_node*, %union.tree_node** %coef, align 8, !dbg !10928
  %43 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10928
  %call97 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %39, %union.tree_node* %call96, %union.tree_node* %42, %union.tree_node* %43), !dbg !10928
  %call98 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond93, %union.tree_node* %call97), !dbg !10928
  br label %for.inc99, !dbg !10928

for.inc99:                                        ; preds = %cond.end92
  %44 = load i32, i32* %i, align 4, !dbg !10929
  %inc100 = add i32 %44, 1, !dbg !10929
  store i32 %inc100, i32* %i, align 4, !dbg !10929
  br label %for.cond78, !dbg !10930, !llvm.loop !10931

for.end101:                                       ; preds = %cond.end83
  br label %for.cond102, !dbg !10933

for.cond102:                                      ; preds = %for.inc123, %for.end101
  %45 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10934
  %tobool103 = icmp ne %struct.VEC_tree_heap* %45, null, !dbg !10934
  br i1 %tobool103, label %cond.true104, label %cond.false106, !dbg !10934

cond.true104:                                     ; preds = %for.cond102
  %46 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !10934
  %base105 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %46, i32 0, i32 0, !dbg !10934
  br label %cond.end107, !dbg !10934

cond.false106:                                    ; preds = %for.cond102
  br label %cond.end107, !dbg !10934

cond.end107:                                      ; preds = %cond.false106, %cond.true104
  %cond108 = phi %struct.VEC_tree_base* [ %base105, %cond.true104 ], [ null, %cond.false106 ], !dbg !10934
  %47 = load i32, i32* %i, align 4, !dbg !10934
  %call109 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond108, i32 %47, %union.tree_node** %coef), !dbg !10934
  %tobool110 = icmp ne i32 %call109, 0, !dbg !10937
  br i1 %tobool110, label %for.body111, label %for.end125, !dbg !10937

for.body111:                                      ; preds = %cond.end107
  %48 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ret, align 8, !dbg !10938
  %tobool112 = icmp ne %struct.VEC_tree_heap* %48, null, !dbg !10938
  br i1 %tobool112, label %cond.true113, label %cond.false115, !dbg !10938

cond.true113:                                     ; preds = %for.body111
  %49 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ret, align 8, !dbg !10938
  %base114 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %49, i32 0, i32 0, !dbg !10938
  br label %cond.end116, !dbg !10938

cond.false115:                                    ; preds = %for.body111
  br label %cond.end116, !dbg !10938

cond.end116:                                      ; preds = %cond.false115, %cond.true113
  %cond117 = phi %struct.VEC_tree_base* [ %base114, %cond.true113 ], [ null, %cond.false115 ], !dbg !10938
  %50 = load i32, i32* %op.addr, align 4, !dbg !10938
  %51 = load %union.tree_node*, %union.tree_node** %coef, align 8, !dbg !10938
  %common118 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !10938
  %type119 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common118, i32 0, i32 2, !dbg !10938
  %52 = load %union.tree_node*, %union.tree_node** %type119, align 8, !dbg !10938
  %call120 = call %union.tree_node* @signed_type_for(%union.tree_node* %52), !dbg !10938
  %53 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10938
  %54 = load %union.tree_node*, %union.tree_node** %coef, align 8, !dbg !10938
  %call121 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %50, %union.tree_node* %call120, %union.tree_node* %53, %union.tree_node* %54), !dbg !10938
  %call122 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond117, %union.tree_node* %call121), !dbg !10938
  br label %for.inc123, !dbg !10938

for.inc123:                                       ; preds = %cond.end116
  %55 = load i32, i32* %i, align 4, !dbg !10939
  %inc124 = add i32 %55, 1, !dbg !10939
  store i32 %inc124, i32* %i, align 4, !dbg !10939
  br label %for.cond102, !dbg !10940, !llvm.loop !10941

for.end125:                                       ; preds = %cond.end107
  %56 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %ret, align 8, !dbg !10943
  ret %struct.VEC_tree_heap* %56, !dbg !10944
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @build_polynomial_chrec(i32 %loop_num, %union.tree_node* %left, %union.tree_node* %right) #0 !dbg !10945 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop_num.addr = alloca i32, align 4
  %left.addr = alloca %union.tree_node*, align 8
  %right.addr = alloca %union.tree_node*, align 8
  %val = alloca i8, align 1
  store i32 %loop_num, i32* %loop_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loop_num.addr, metadata !10948, metadata !DIExpression()), !dbg !10949
  store %union.tree_node* %left, %union.tree_node** %left.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %left.addr, metadata !10950, metadata !DIExpression()), !dbg !10951
  store %union.tree_node* %right, %union.tree_node** %right.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %right.addr, metadata !10952, metadata !DIExpression()), !dbg !10953
  call void @llvm.dbg.declare(metadata i8* %val, metadata !10954, metadata !DIExpression()), !dbg !10955
  %0 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !10956
  %1 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !10958
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !10959
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10960

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !10961
  %3 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !10962
  %cmp1 = icmp eq %union.tree_node* %2, %3, !dbg !10963
  br i1 %cmp1, label %if.then, label %if.end, !dbg !10964

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !10965
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !10966
  br label %return, !dbg !10966

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !10967
  %6 = load i32, i32* %loop_num.addr, align 4, !dbg !10969
  %call = call zeroext i8 @no_evolution_in_loop_p(%union.tree_node* %5, i32 %6, i8* %val), !dbg !10970
  %tobool = icmp ne i8 %call, 0, !dbg !10970
  br i1 %tobool, label %lor.lhs.false2, label %if.then4, !dbg !10971

lor.lhs.false2:                                   ; preds = %if.end
  %7 = load i8, i8* %val, align 1, !dbg !10972
  %tobool3 = icmp ne i8 %7, 0, !dbg !10972
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !10973

if.then4:                                         ; preds = %lor.lhs.false2, %if.end
  %8 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !10974
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !10975
  br label %return, !dbg !10975

if.end5:                                          ; preds = %lor.lhs.false2
  %9 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !10976
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !10976
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10976
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10976
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !10976
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !10976
  %bf.load = load i64, i64* %11, align 8, !dbg !10976
  %bf.clear = and i64 %bf.load, 65535, !dbg !10976
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10976
  %cmp6 = icmp eq i32 %bf.cast, 10, !dbg !10976
  br i1 %cmp6, label %cond.true, label %lor.lhs.false7, !dbg !10976

lor.lhs.false7:                                   ; preds = %if.end5
  %12 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !10976
  %common8 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !10976
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !10976
  %13 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !10976
  %base10 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !10976
  %14 = bitcast %struct.tree_base* %base10 to i64*, !dbg !10976
  %bf.load11 = load i64, i64* %14, align 8, !dbg !10976
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !10976
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !10976
  %cmp14 = icmp eq i32 %bf.cast13, 12, !dbg !10976
  br i1 %cmp14, label %cond.true, label %cond.false, !dbg !10976

cond.true:                                        ; preds = %lor.lhs.false7, %if.end5
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.120, i64 0, i64 0), i32 143, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !10976
  br label %cond.end, !dbg !10976

cond.false:                                       ; preds = %lor.lhs.false7
  br label %cond.end, !dbg !10976

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10976
  %15 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !10977
  %common15 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !10977
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !10977
  %16 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !10977
  %base17 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !10977
  %17 = bitcast %struct.tree_base* %base17 to i64*, !dbg !10977
  %bf.load18 = load i64, i64* %17, align 8, !dbg !10977
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !10977
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !10977
  %cmp21 = icmp eq i32 %bf.cast20, 10, !dbg !10977
  br i1 %cmp21, label %if.then30, label %lor.lhs.false22, !dbg !10977

lor.lhs.false22:                                  ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !10977
  %common23 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !10977
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !10977
  %19 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !10977
  %base25 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !10977
  %20 = bitcast %struct.tree_base* %base25 to i64*, !dbg !10977
  %bf.load26 = load i64, i64* %20, align 8, !dbg !10977
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !10977
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !10977
  %cmp29 = icmp eq i32 %bf.cast28, 12, !dbg !10977
  br i1 %cmp29, label %if.then30, label %if.else, !dbg !10979

if.then30:                                        ; preds = %lor.lhs.false22, %cond.end
  %21 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !10980
  %22 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !10980
  %common31 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !10980
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !10980
  %23 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !10980
  %cmp33 = icmp eq %union.tree_node* %21, %23, !dbg !10980
  br i1 %cmp33, label %cond.false35, label %cond.true34, !dbg !10980

cond.true34:                                      ; preds = %if.then30
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.120, i64 0, i64 0), i32 147, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !10980
  br label %cond.end36, !dbg !10980

cond.false35:                                     ; preds = %if.then30
  br label %cond.end36, !dbg !10980

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond37 = phi i32 [ 0, %cond.true34 ], [ 0, %cond.false35 ], !dbg !10980
  br label %if.end47, !dbg !10980

if.else:                                          ; preds = %lor.lhs.false22
  %24 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !10981
  %common38 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !10981
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !10981
  %25 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !10981
  %26 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !10981
  %common40 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !10981
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !10981
  %27 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !10981
  %cmp42 = icmp eq %union.tree_node* %25, %27, !dbg !10981
  br i1 %cmp42, label %cond.false44, label %cond.true43, !dbg !10981

cond.true43:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.120, i64 0, i64 0), i32 149, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !10981
  br label %cond.end45, !dbg !10981

cond.false44:                                     ; preds = %if.else
  br label %cond.end45, !dbg !10981

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond46 = phi i32 [ 0, %cond.true43 ], [ 0, %cond.false44 ], !dbg !10981
  br label %if.end47

if.end47:                                         ; preds = %cond.end45, %cond.end36
  %28 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !10982
  %call48 = call zeroext i8 @chrec_zerop(%union.tree_node* %28), !dbg !10984
  %tobool49 = icmp ne i8 %call48, 0, !dbg !10984
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !10985

if.then50:                                        ; preds = %if.end47
  %29 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !10986
  store %union.tree_node* %29, %union.tree_node** %retval, align 8, !dbg !10987
  br label %return, !dbg !10987

if.end51:                                         ; preds = %if.end47
  %30 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !10988
  %common52 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !10988
  %type53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2, !dbg !10988
  %31 = load %union.tree_node*, %union.tree_node** %type53, align 8, !dbg !10988
  %32 = load i32, i32* %loop_num.addr, align 4, !dbg !10988
  %conv = zext i32 %32 to i64, !dbg !10988
  %call54 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv), !dbg !10988
  %33 = load %union.tree_node*, %union.tree_node** %left.addr, align 8, !dbg !10988
  %34 = load %union.tree_node*, %union.tree_node** %right.addr, align 8, !dbg !10988
  %call55 = call %union.tree_node* @build3_stat(i32 146, %union.tree_node* %31, %union.tree_node* %call54, %union.tree_node* %33, %union.tree_node* %34), !dbg !10988
  store %union.tree_node* %call55, %union.tree_node** %retval, align 8, !dbg !10989
  br label %return, !dbg !10989

return:                                           ; preds = %if.end51, %if.then50, %if.then4, %if.then
  %35 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10990
  ret %union.tree_node* %35, !dbg !10990
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @no_evolution_in_loop_p(%union.tree_node* %chrec, i32 %loop_num, i8* %res) #0 !dbg !10991 {
entry:
  %retval = alloca i8, align 1
  %chrec.addr = alloca %union.tree_node*, align 8
  %loop_num.addr = alloca i32, align 4
  %res.addr = alloca i8*, align 8
  %scev = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !10994, metadata !DIExpression()), !dbg !10995
  store i32 %loop_num, i32* %loop_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loop_num.addr, metadata !10996, metadata !DIExpression()), !dbg !10997
  store i8* %res, i8** %res.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %res.addr, metadata !10998, metadata !DIExpression()), !dbg !10999
  call void @llvm.dbg.declare(metadata %union.tree_node** %scev, metadata !11000, metadata !DIExpression()), !dbg !11001
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !11002
  %1 = load %union.tree_node*, %union.tree_node** @chrec_not_analyzed_yet, align 8, !dbg !11004
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !11005
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !11006

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !11007
  %3 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !11008
  %cmp1 = icmp eq %union.tree_node* %2, %3, !dbg !11009
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !11010

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !11011
  %5 = load i32, i32* %loop_num.addr, align 4, !dbg !11012
  %call = call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %4, i32 %5), !dbg !11013
  %conv = zext i8 %call to i32, !dbg !11013
  %tobool = icmp ne i32 %conv, 0, !dbg !11013
  br i1 %tobool, label %if.then, label %if.end, !dbg !11014

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !11015
  br label %return, !dbg !11015

if.end:                                           ; preds = %lor.lhs.false2
  %6 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !11016
  %call3 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %6), !dbg !11016
  store %union.tree_node* %call3, %union.tree_node** %chrec.addr, align 8, !dbg !11016
  %7 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !11017
  %8 = load i32, i32* %loop_num.addr, align 4, !dbg !11018
  %call4 = call %union.tree_node* @hide_evolution_in_other_loops_than_loop(%union.tree_node* %7, i32 %8), !dbg !11019
  store %union.tree_node* %call4, %union.tree_node** %scev, align 8, !dbg !11020
  %9 = load %union.tree_node*, %union.tree_node** %scev, align 8, !dbg !11021
  %call5 = call zeroext i8 @tree_is_chrec(%union.tree_node* %9), !dbg !11022
  %tobool6 = icmp ne i8 %call5, 0, !dbg !11023
  %lnot = xor i1 %tobool6, true, !dbg !11023
  %lnot.ext = zext i1 %lnot to i32, !dbg !11023
  %conv7 = trunc i32 %lnot.ext to i8, !dbg !11023
  %10 = load i8*, i8** %res.addr, align 8, !dbg !11024
  store i8 %conv7, i8* %10, align 1, !dbg !11025
  store i8 1, i8* %retval, align 1, !dbg !11026
  br label %return, !dbg !11026

return:                                           ; preds = %if.end, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !11027
  ret i8 %11, !dbg !11027
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @chrec_zerop(%union.tree_node* %chrec) #0 !dbg !11028 {
entry:
  %retval = alloca i8, align 1
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !11029, metadata !DIExpression()), !dbg !11030
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !11031
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !11033
  br i1 %cmp, label %if.then, label %if.end, !dbg !11034

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !11035
  br label %return, !dbg !11035

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !11036
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !11036
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !11036
  %bf.load = load i64, i64* %2, align 8, !dbg !11036
  %bf.clear = and i64 %bf.load, 65535, !dbg !11036
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11036
  %cmp1 = icmp eq i32 %bf.cast, 23, !dbg !11038
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !11039

if.then2:                                         ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !11040
  %call = call i32 @integer_zerop(%union.tree_node* %3), !dbg !11041
  %conv = trunc i32 %call to i8, !dbg !11041
  store i8 %conv, i8* %retval, align 1, !dbg !11042
  br label %return, !dbg !11042

if.end3:                                          ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !11043
  br label %return, !dbg !11043

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !11044
  ret i8 %4, !dbg !11044
}

declare dso_local %union.tree_node* @build3_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @hide_evolution_in_other_loops_than_loop(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @tree_is_chrec(%union.tree_node* %expr) #0 !dbg !11045 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !11046, metadata !DIExpression()), !dbg !11047
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11048
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !11048
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !11048
  %bf.load = load i64, i64* %1, align 8, !dbg !11048
  %bf.clear = and i64 %bf.load, 65535, !dbg !11048
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11048
  %cmp = icmp eq i32 %bf.cast, 146, !dbg !11050
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !11051

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11052
  %call = call zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %2), !dbg !11053
  %conv = zext i8 %call to i32, !dbg !11053
  %tobool = icmp ne i32 %conv, 0, !dbg !11053
  br i1 %tobool, label %if.then, label %if.else, !dbg !11054

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !11055
  br label %return, !dbg !11055

if.else:                                          ; preds = %lor.lhs.false
  store i8 0, i8* %retval, align 1, !dbg !11056
  br label %return, !dbg !11056

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !11057
  ret i8 %3, !dbg !11057
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @estimated_loop_iterations_tree(%struct.loop* %loop, i8 zeroext %conservative) #0 !dbg !11058 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %conservative.addr = alloca i8, align 1
  %nit = alloca %struct.double_int, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !11061, metadata !DIExpression()), !dbg !11062
  store i8 %conservative, i8* %conservative.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %conservative.addr, metadata !11063, metadata !DIExpression()), !dbg !11064
  call void @llvm.dbg.declare(metadata %struct.double_int* %nit, metadata !11065, metadata !DIExpression()), !dbg !11066
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !11067, metadata !DIExpression()), !dbg !11068
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !11069
  %1 = load i8, i8* %conservative.addr, align 1, !dbg !11071
  %call = call zeroext i8 @estimated_loop_iterations(%struct.loop* %0, i8 zeroext %1, %struct.double_int* %nit), !dbg !11072
  %tobool = icmp ne i8 %call, 0, !dbg !11072
  br i1 %tobool, label %if.end, label %if.then, !dbg !11073

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !11074
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !11075
  br label %return, !dbg !11075

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 3), align 8, !dbg !11076
  %call1 = call %union.tree_node* %3(i32 32, i32 1), !dbg !11077
  store %union.tree_node* %call1, %union.tree_node** %type, align 8, !dbg !11078
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11079
  %5 = bitcast %struct.double_int* %nit to { i64, i64 }*, !dbg !11081
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i32 0, i32 0, !dbg !11081
  %7 = load i64, i64* %6, align 8, !dbg !11081
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i32 0, i32 1, !dbg !11081
  %9 = load i64, i64* %8, align 8, !dbg !11081
  %call2 = call zeroext i8 @double_int_fits_to_tree_p(%union.tree_node* %4, i64 %7, i64 %9), !dbg !11081
  %tobool3 = icmp ne i8 %call2, 0, !dbg !11081
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !11082

if.then4:                                         ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !11083
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !11084
  br label %return, !dbg !11084

if.end5:                                          ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11085
  %12 = bitcast %struct.double_int* %nit to { i64, i64 }*, !dbg !11086
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !dbg !11086
  %14 = load i64, i64* %13, align 8, !dbg !11086
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !dbg !11086
  %16 = load i64, i64* %15, align 8, !dbg !11086
  %call6 = call %union.tree_node* @double_int_to_tree(%union.tree_node* %11, i64 %14, i64 %16), !dbg !11086
  store %union.tree_node* %call6, %union.tree_node** %retval, align 8, !dbg !11087
  br label %return, !dbg !11087

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %17 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11088
  ret %union.tree_node* %17, !dbg !11088
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gcd_of_steps_may_divide_p(%union.tree_node* %chrec, %union.tree_node* %cst) #0 !dbg !11089 {
entry:
  %retval = alloca i8, align 1
  %chrec.addr = alloca %union.tree_node*, align 8
  %cst.addr = alloca %union.tree_node*, align 8
  %cd = alloca i64, align 8
  %val = alloca i64, align 8
  %step = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !11090, metadata !DIExpression()), !dbg !11091
  store %union.tree_node* %cst, %union.tree_node** %cst.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst.addr, metadata !11092, metadata !DIExpression()), !dbg !11093
  call void @llvm.dbg.declare(metadata i64* %cd, metadata !11094, metadata !DIExpression()), !dbg !11095
  store i64 0, i64* %cd, align 8, !dbg !11095
  call void @llvm.dbg.declare(metadata i64* %val, metadata !11096, metadata !DIExpression()), !dbg !11097
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !11098, metadata !DIExpression()), !dbg !11099
  %0 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !11100
  %call = call i32 @host_integerp(%union.tree_node* %0, i32 0), !dbg !11102
  %tobool = icmp ne i32 %call, 0, !dbg !11102
  br i1 %tobool, label %if.end, label %if.then, !dbg !11103

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !11104
  br label %return, !dbg !11104

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %cst.addr, align 8, !dbg !11105
  %call1 = call i64 @tree_low_cst(%union.tree_node* %1, i32 0), !dbg !11106
  store i64 %call1, i64* %val, align 8, !dbg !11107
  br label %while.cond, !dbg !11108

while.cond:                                       ; preds = %if.end5, %if.end
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !11109
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !11109
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !11109
  %bf.load = load i64, i64* %3, align 8, !dbg !11109
  %bf.clear = and i64 %bf.load, 65535, !dbg !11109
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11109
  %cmp = icmp eq i32 %bf.cast, 146, !dbg !11110
  br i1 %cmp, label %while.body, label %while.end, !dbg !11108

while.body:                                       ; preds = %while.cond
  %4 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !11111
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !11111
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11111
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !11111
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11111
  store %union.tree_node* %5, %union.tree_node** %step, align 8, !dbg !11113
  %6 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !11114
  %call2 = call i32 @host_integerp(%union.tree_node* %6, i32 0), !dbg !11116
  %tobool3 = icmp ne i32 %call2, 0, !dbg !11116
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !11117

if.then4:                                         ; preds = %while.body
  store i8 1, i8* %retval, align 1, !dbg !11118
  br label %return, !dbg !11118

if.end5:                                          ; preds = %while.body
  %7 = load i64, i64* %cd, align 8, !dbg !11119
  %conv = trunc i64 %7 to i32, !dbg !11119
  %8 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !11120
  %call6 = call i64 @tree_low_cst(%union.tree_node* %8, i32 0), !dbg !11121
  %conv7 = trunc i64 %call6 to i32, !dbg !11121
  %call8 = call i32 @gcd(i32 %conv, i32 %conv7), !dbg !11122
  %conv9 = sext i32 %call8 to i64, !dbg !11122
  store i64 %conv9, i64* %cd, align 8, !dbg !11123
  %9 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !11124
  %exp10 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !11124
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !11124
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 1, !dbg !11124
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !11124
  store %union.tree_node* %10, %union.tree_node** %chrec.addr, align 8, !dbg !11125
  br label %while.cond, !dbg !11108, !llvm.loop !11126

while.end:                                        ; preds = %while.cond
  %11 = load i64, i64* %val, align 8, !dbg !11128
  %12 = load i64, i64* %cd, align 8, !dbg !11129
  %rem = srem i64 %11, %12, !dbg !11130
  %cmp13 = icmp eq i64 %rem, 0, !dbg !11131
  %conv14 = zext i1 %cmp13 to i32, !dbg !11131
  %conv15 = trunc i32 %conv14 to i8, !dbg !11128
  store i8 %conv15, i8* %retval, align 1, !dbg !11132
  br label %return, !dbg !11132

return:                                           ; preds = %while.end, %if.then4, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !11133
  ret i8 %13, !dbg !11133
}

declare dso_local zeroext i8 @double_int_fits_to_tree_p(%union.tree_node*, i64, i64) #2

declare dso_local %union.tree_node* @double_int_to_tree(%union.tree_node*, i64, i64) #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @common_affine_function(%struct.conflict_function* %cf) #0 !dbg !11134 {
entry:
  %retval = alloca %struct.VEC_tree_heap*, align 8
  %cf.addr = alloca %struct.conflict_function*, align 8
  %i = alloca i32, align 4
  %comm = alloca %struct.VEC_tree_heap*, align 8
  store %struct.conflict_function* %cf, %struct.conflict_function** %cf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %cf.addr, metadata !11137, metadata !DIExpression()), !dbg !11138
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11139, metadata !DIExpression()), !dbg !11140
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %comm, metadata !11141, metadata !DIExpression()), !dbg !11142
  %0 = load %struct.conflict_function*, %struct.conflict_function** %cf.addr, align 8, !dbg !11143
  %n = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %0, i32 0, i32 0, !dbg !11143
  %1 = load i32, i32* %n, align 8, !dbg !11143
  %cmp = icmp ne i32 %1, 0, !dbg !11143
  br i1 %cmp, label %land.lhs.true, label %if.then, !dbg !11143

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.conflict_function*, %struct.conflict_function** %cf.addr, align 8, !dbg !11143
  %n1 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %2, i32 0, i32 0, !dbg !11143
  %3 = load i32, i32* %n1, align 8, !dbg !11143
  %cmp2 = icmp ne i32 %3, 3, !dbg !11143
  br i1 %cmp2, label %if.end, label %if.then, !dbg !11145

if.then:                                          ; preds = %land.lhs.true, %entry
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %retval, align 8, !dbg !11146
  br label %return, !dbg !11146

if.end:                                           ; preds = %land.lhs.true
  %4 = load %struct.conflict_function*, %struct.conflict_function** %cf.addr, align 8, !dbg !11147
  %fns = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %4, i32 0, i32 1, !dbg !11148
  %arrayidx = getelementptr inbounds [2 x %struct.VEC_tree_heap*], [2 x %struct.VEC_tree_heap*]* %fns, i64 0, i64 0, !dbg !11147
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %arrayidx, align 8, !dbg !11147
  store %struct.VEC_tree_heap* %5, %struct.VEC_tree_heap** %comm, align 8, !dbg !11149
  store i32 1, i32* %i, align 4, !dbg !11150
  br label %for.cond, !dbg !11152

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %i, align 4, !dbg !11153
  %7 = load %struct.conflict_function*, %struct.conflict_function** %cf.addr, align 8, !dbg !11155
  %n3 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %7, i32 0, i32 0, !dbg !11156
  %8 = load i32, i32* %n3, align 8, !dbg !11156
  %cmp4 = icmp ult i32 %6, %8, !dbg !11157
  br i1 %cmp4, label %for.body, label %for.end, !dbg !11158

for.body:                                         ; preds = %for.cond
  %9 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %comm, align 8, !dbg !11159
  %10 = load %struct.conflict_function*, %struct.conflict_function** %cf.addr, align 8, !dbg !11161
  %fns5 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %10, i32 0, i32 1, !dbg !11162
  %11 = load i32, i32* %i, align 4, !dbg !11163
  %idxprom = zext i32 %11 to i64, !dbg !11161
  %arrayidx6 = getelementptr inbounds [2 x %struct.VEC_tree_heap*], [2 x %struct.VEC_tree_heap*]* %fns5, i64 0, i64 %idxprom, !dbg !11161
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %arrayidx6, align 8, !dbg !11161
  %call = call zeroext i8 @affine_function_equal_p(%struct.VEC_tree_heap* %9, %struct.VEC_tree_heap* %12), !dbg !11164
  %tobool = icmp ne i8 %call, 0, !dbg !11164
  br i1 %tobool, label %if.end8, label %if.then7, !dbg !11165

if.then7:                                         ; preds = %for.body
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %retval, align 8, !dbg !11166
  br label %return, !dbg !11166

if.end8:                                          ; preds = %for.body
  br label %for.inc, !dbg !11167

for.inc:                                          ; preds = %if.end8
  %13 = load i32, i32* %i, align 4, !dbg !11168
  %inc = add i32 %13, 1, !dbg !11168
  store i32 %inc, i32* %i, align 4, !dbg !11168
  br label %for.cond, !dbg !11169, !llvm.loop !11170

for.end:                                          ; preds = %for.cond
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %comm, align 8, !dbg !11172
  store %struct.VEC_tree_heap* %14, %struct.VEC_tree_heap** %retval, align 8, !dbg !11173
  br label %return, !dbg !11173

return:                                           ; preds = %for.end, %if.then7, %if.then
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %retval, align 8, !dbg !11174
  ret %struct.VEC_tree_heap* %15, !dbg !11174
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @affine_fn_minus(%struct.VEC_tree_heap* %fna, %struct.VEC_tree_heap* %fnb) #0 !dbg !11175 {
entry:
  %fna.addr = alloca %struct.VEC_tree_heap*, align 8
  %fnb.addr = alloca %struct.VEC_tree_heap*, align 8
  store %struct.VEC_tree_heap* %fna, %struct.VEC_tree_heap** %fna.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fna.addr, metadata !11176, metadata !DIExpression()), !dbg !11177
  store %struct.VEC_tree_heap* %fnb, %struct.VEC_tree_heap** %fnb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fnb.addr, metadata !11178, metadata !DIExpression()), !dbg !11179
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !11180
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !11181
  %call = call %struct.VEC_tree_heap* @affine_fn_op(i32 64, %struct.VEC_tree_heap* %0, %struct.VEC_tree_heap* %1), !dbg !11182
  ret %struct.VEC_tree_heap* %call, !dbg !11183
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @affine_function_constant_p(%struct.VEC_tree_heap* %fn) #0 !dbg !11184 {
entry:
  %retval = alloca i8, align 1
  %fn.addr = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  %coef = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap* %fn, %struct.VEC_tree_heap** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fn.addr, metadata !11187, metadata !DIExpression()), !dbg !11188
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11189, metadata !DIExpression()), !dbg !11190
  call void @llvm.dbg.declare(metadata %union.tree_node** %coef, metadata !11191, metadata !DIExpression()), !dbg !11192
  store i32 1, i32* %i, align 4, !dbg !11193
  br label %for.cond, !dbg !11195

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn.addr, align 8, !dbg !11196
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !11196
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11196

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn.addr, align 8, !dbg !11196
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !11196
  br label %cond.end, !dbg !11196

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !11196

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11196
  %2 = load i32, i32* %i, align 4, !dbg !11196
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %2, %union.tree_node** %coef), !dbg !11196
  %tobool1 = icmp ne i32 %call, 0, !dbg !11198
  br i1 %tobool1, label %for.body, label %for.end, !dbg !11198

for.body:                                         ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %coef, align 8, !dbg !11199
  %call2 = call i32 @integer_zerop(%union.tree_node* %3), !dbg !11201
  %tobool3 = icmp ne i32 %call2, 0, !dbg !11201
  br i1 %tobool3, label %if.end, label %if.then, !dbg !11202

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !11203
  br label %return, !dbg !11203

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !11204

for.inc:                                          ; preds = %if.end
  %4 = load i32, i32* %i, align 4, !dbg !11205
  %inc = add i32 %4, 1, !dbg !11205
  store i32 %inc, i32* %i, align 4, !dbg !11205
  br label %for.cond, !dbg !11206, !llvm.loop !11207

for.end:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !11209
  br label %return, !dbg !11209

return:                                           ; preds = %for.end, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !11210
  ret i8 %5, !dbg !11210
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @affine_function_base(%struct.VEC_tree_heap* %fn) #0 !dbg !11211 {
entry:
  %fn.addr = alloca %struct.VEC_tree_heap*, align 8
  store %struct.VEC_tree_heap* %fn, %struct.VEC_tree_heap** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fn.addr, metadata !11214, metadata !DIExpression()), !dbg !11215
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn.addr, align 8, !dbg !11216
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !11216
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11216

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn.addr, align 8, !dbg !11216
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !11216
  br label %cond.end, !dbg !11216

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11216

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11216
  %call = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 0), !dbg !11216
  ret %union.tree_node* %call, !dbg !11217
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @affine_function_equal_p(%struct.VEC_tree_heap* %fna, %struct.VEC_tree_heap* %fnb) #0 !dbg !11218 {
entry:
  %retval = alloca i8, align 1
  %fna.addr = alloca %struct.VEC_tree_heap*, align 8
  %fnb.addr = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.VEC_tree_heap* %fna, %struct.VEC_tree_heap** %fna.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fna.addr, metadata !11221, metadata !DIExpression()), !dbg !11222
  store %struct.VEC_tree_heap* %fnb, %struct.VEC_tree_heap** %fnb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fnb.addr, metadata !11223, metadata !DIExpression()), !dbg !11224
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11225, metadata !DIExpression()), !dbg !11226
  call void @llvm.dbg.declare(metadata i32* %n, metadata !11227, metadata !DIExpression()), !dbg !11228
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !11229
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !11229
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11229

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !11229
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !11229
  br label %cond.end, !dbg !11229

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11229

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11229
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !11229
  store i32 %call, i32* %n, align 4, !dbg !11228
  %2 = load i32, i32* %n, align 4, !dbg !11230
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !11232
  %tobool1 = icmp ne %struct.VEC_tree_heap* %3, null, !dbg !11232
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !11232

cond.true2:                                       ; preds = %cond.end
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !11232
  %base3 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !11232
  br label %cond.end5, !dbg !11232

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !11232

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_tree_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !11232
  %call7 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond6), !dbg !11232
  %cmp = icmp ne i32 %2, %call7, !dbg !11233
  br i1 %cmp, label %if.then, label %if.end, !dbg !11234

if.then:                                          ; preds = %cond.end5
  store i8 0, i8* %retval, align 1, !dbg !11235
  br label %return, !dbg !11235

if.end:                                           ; preds = %cond.end5
  store i32 0, i32* %i, align 4, !dbg !11236
  br label %for.cond, !dbg !11238

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4, !dbg !11239
  %6 = load i32, i32* %n, align 4, !dbg !11241
  %cmp8 = icmp ult i32 %5, %6, !dbg !11242
  br i1 %cmp8, label %for.body, label %for.end, !dbg !11243

for.body:                                         ; preds = %for.cond
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !11244
  %tobool9 = icmp ne %struct.VEC_tree_heap* %7, null, !dbg !11244
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !11244

cond.true10:                                      ; preds = %for.body
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fna.addr, align 8, !dbg !11244
  %base11 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %8, i32 0, i32 0, !dbg !11244
  br label %cond.end13, !dbg !11244

cond.false12:                                     ; preds = %for.body
  br label %cond.end13, !dbg !11244

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_tree_base* [ %base11, %cond.true10 ], [ null, %cond.false12 ], !dbg !11244
  %9 = load i32, i32* %i, align 4, !dbg !11244
  %call15 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond14, i32 %9), !dbg !11244
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !11246
  %tobool16 = icmp ne %struct.VEC_tree_heap* %10, null, !dbg !11246
  br i1 %tobool16, label %cond.true17, label %cond.false19, !dbg !11246

cond.true17:                                      ; preds = %cond.end13
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnb.addr, align 8, !dbg !11246
  %base18 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %11, i32 0, i32 0, !dbg !11246
  br label %cond.end20, !dbg !11246

cond.false19:                                     ; preds = %cond.end13
  br label %cond.end20, !dbg !11246

cond.end20:                                       ; preds = %cond.false19, %cond.true17
  %cond21 = phi %struct.VEC_tree_base* [ %base18, %cond.true17 ], [ null, %cond.false19 ], !dbg !11246
  %12 = load i32, i32* %i, align 4, !dbg !11246
  %call22 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond21, i32 %12), !dbg !11246
  %call23 = call i32 @operand_equal_p(%union.tree_node* %call15, %union.tree_node* %call22, i32 0), !dbg !11247
  %tobool24 = icmp ne i32 %call23, 0, !dbg !11247
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !11248

if.then25:                                        ; preds = %cond.end20
  store i8 0, i8* %retval, align 1, !dbg !11249
  br label %return, !dbg !11249

if.end26:                                         ; preds = %cond.end20
  br label %for.inc, !dbg !11250

for.inc:                                          ; preds = %if.end26
  %13 = load i32, i32* %i, align 4, !dbg !11251
  %inc = add i32 %13, 1, !dbg !11251
  store i32 %inc, i32* %i, align 4, !dbg !11251
  br label %for.cond, !dbg !11252, !llvm.loop !11253

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !11255
  br label %return, !dbg !11255

return:                                           ; preds = %for.end, %if.then25, %if.then
  %14 = load i8, i8* %retval, align 1, !dbg !11256
  ret i8 %14, !dbg !11256
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @same_access_functions(%struct.data_dependence_relation* %ddr) #0 !dbg !11257 {
entry:
  %retval = alloca i8, align 1
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %i = alloca i32, align 4
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !11262, metadata !DIExpression()), !dbg !11263
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11264, metadata !DIExpression()), !dbg !11265
  store i32 0, i32* %i, align 4, !dbg !11266
  br label %for.cond, !dbg !11268

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !11269
  %1 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11271
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %1, i32 0, i32 3, !dbg !11271
  %2 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !11271
  %tobool = icmp ne %struct.VEC_subscript_p_heap* %2, null, !dbg !11271
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11271

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11271
  %subscripts1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %3, i32 0, i32 3, !dbg !11271
  %4 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts1, align 8, !dbg !11271
  %base = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %4, i32 0, i32 0, !dbg !11271
  br label %cond.end, !dbg !11271

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !11271

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_subscript_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11271
  %call = call i32 @VEC_subscript_p_base_length(%struct.VEC_subscript_p_base* %cond), !dbg !11271
  %cmp = icmp ult i32 %0, %call, !dbg !11272
  br i1 %cmp, label %for.body, label %for.end, !dbg !11273

for.body:                                         ; preds = %cond.end
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11274
  %a = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 0, !dbg !11274
  %6 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !11274
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %6, i32 0, i32 5, !dbg !11274
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !11274
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !11274
  %tobool2 = icmp ne %struct.VEC_tree_heap* %7, null, !dbg !11274
  br i1 %tobool2, label %cond.true3, label %cond.false8, !dbg !11274

cond.true3:                                       ; preds = %for.body
  %8 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11274
  %a4 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %8, i32 0, i32 0, !dbg !11274
  %9 = load %struct.data_reference*, %struct.data_reference** %a4, align 8, !dbg !11274
  %indices5 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %9, i32 0, i32 5, !dbg !11274
  %access_fns6 = getelementptr inbounds %struct.indices, %struct.indices* %indices5, i32 0, i32 1, !dbg !11274
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns6, align 8, !dbg !11274
  %base7 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %10, i32 0, i32 0, !dbg !11274
  br label %cond.end9, !dbg !11274

cond.false8:                                      ; preds = %for.body
  br label %cond.end9, !dbg !11274

cond.end9:                                        ; preds = %cond.false8, %cond.true3
  %cond10 = phi %struct.VEC_tree_base* [ %base7, %cond.true3 ], [ null, %cond.false8 ], !dbg !11274
  %11 = load i32, i32* %i, align 4, !dbg !11274
  %call11 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond10, i32 %11), !dbg !11274
  %12 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11276
  %b = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %12, i32 0, i32 1, !dbg !11276
  %13 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !11276
  %indices12 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %13, i32 0, i32 5, !dbg !11276
  %access_fns13 = getelementptr inbounds %struct.indices, %struct.indices* %indices12, i32 0, i32 1, !dbg !11276
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns13, align 8, !dbg !11276
  %tobool14 = icmp ne %struct.VEC_tree_heap* %14, null, !dbg !11276
  br i1 %tobool14, label %cond.true15, label %cond.false20, !dbg !11276

cond.true15:                                      ; preds = %cond.end9
  %15 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11276
  %b16 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %15, i32 0, i32 1, !dbg !11276
  %16 = load %struct.data_reference*, %struct.data_reference** %b16, align 8, !dbg !11276
  %indices17 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %16, i32 0, i32 5, !dbg !11276
  %access_fns18 = getelementptr inbounds %struct.indices, %struct.indices* %indices17, i32 0, i32 1, !dbg !11276
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns18, align 8, !dbg !11276
  %base19 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i32 0, i32 0, !dbg !11276
  br label %cond.end21, !dbg !11276

cond.false20:                                     ; preds = %cond.end9
  br label %cond.end21, !dbg !11276

cond.end21:                                       ; preds = %cond.false20, %cond.true15
  %cond22 = phi %struct.VEC_tree_base* [ %base19, %cond.true15 ], [ null, %cond.false20 ], !dbg !11276
  %18 = load i32, i32* %i, align 4, !dbg !11276
  %call23 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond22, i32 %18), !dbg !11276
  %call24 = call zeroext i8 @eq_evolutions_p(%union.tree_node* %call11, %union.tree_node* %call23), !dbg !11277
  %tobool25 = icmp ne i8 %call24, 0, !dbg !11277
  br i1 %tobool25, label %if.end, label %if.then, !dbg !11278

if.then:                                          ; preds = %cond.end21
  store i8 0, i8* %retval, align 1, !dbg !11279
  br label %return, !dbg !11279

if.end:                                           ; preds = %cond.end21
  br label %for.inc, !dbg !11280

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4, !dbg !11281
  %inc = add i32 %19, 1, !dbg !11281
  store i32 %inc, i32* %i, align 4, !dbg !11281
  br label %for.cond, !dbg !11282, !llvm.loop !11283

for.end:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !11285
  br label %return, !dbg !11285

return:                                           ; preds = %for.end, %if.then
  %20 = load i8, i8* %retval, align 1, !dbg !11286
  ret i8 %20, !dbg !11286
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @lambda_vector_new(i32 %size) #0 !dbg !11287 {
entry:
  %size.addr = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !11290, metadata !DIExpression()), !dbg !11291
  %0 = load i32, i32* %size.addr, align 4, !dbg !11292
  %conv = sext i32 %0 to i64, !dbg !11292
  %mul = mul i64 %conv, 4, !dbg !11292
  %call = call i8* @ggc_alloc_cleared_stat(i64 %mul), !dbg !11292
  %1 = bitcast i8* %call to i32*, !dbg !11292
  ret i32* %1, !dbg !11293
}

; Function Attrs: noinline nounwind uwtable
define internal void @save_dist_v(%struct.data_dependence_relation* %ddr, i32* %dist_v) #0 !dbg !11294 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %dist_v.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %v = alloca i32*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !11297, metadata !DIExpression()), !dbg !11298
  store i32* %dist_v, i32** %dist_v.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %dist_v.addr, metadata !11299, metadata !DIExpression()), !dbg !11300
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11301, metadata !DIExpression()), !dbg !11302
  call void @llvm.dbg.declare(metadata i32** %v, metadata !11303, metadata !DIExpression()), !dbg !11304
  store i32 0, i32* %i, align 4, !dbg !11305
  br label %for.cond, !dbg !11307

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11308
  %dist_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 6, !dbg !11308
  %1 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects, align 8, !dbg !11308
  %tobool = icmp ne %struct.VEC_lambda_vector_heap* %1, null, !dbg !11308
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11308

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11308
  %dist_vects1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 6, !dbg !11308
  %3 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects1, align 8, !dbg !11308
  %base = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %3, i32 0, i32 0, !dbg !11308
  br label %cond.end, !dbg !11308

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !11308

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lambda_vector_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11308
  %4 = load i32, i32* %i, align 4, !dbg !11308
  %call = call i32 @VEC_lambda_vector_base_iterate(%struct.VEC_lambda_vector_base* %cond, i32 %4, i32** %v), !dbg !11308
  %tobool2 = icmp ne i32 %call, 0, !dbg !11310
  br i1 %tobool2, label %for.body, label %for.end, !dbg !11310

for.body:                                         ; preds = %cond.end
  %5 = load i32*, i32** %v, align 8, !dbg !11311
  %6 = load i32*, i32** %dist_v.addr, align 8, !dbg !11313
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11314
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 4, !dbg !11314
  %8 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !11314
  %tobool3 = icmp ne %struct.VEC_loop_p_heap* %8, null, !dbg !11314
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !11314

cond.true4:                                       ; preds = %for.body
  %9 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11314
  %loop_nest5 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %9, i32 0, i32 4, !dbg !11314
  %10 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest5, align 8, !dbg !11314
  %base6 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %10, i32 0, i32 0, !dbg !11314
  br label %cond.end8, !dbg !11314

cond.false7:                                      ; preds = %for.body
  br label %cond.end8, !dbg !11314

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !11314
  %call10 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond9), !dbg !11314
  %call11 = call zeroext i8 @lambda_vector_equal(i32* %5, i32* %6, i32 %call10), !dbg !11315
  %tobool12 = icmp ne i8 %call11, 0, !dbg !11315
  br i1 %tobool12, label %if.then, label %if.end, !dbg !11316

if.then:                                          ; preds = %cond.end8
  br label %return, !dbg !11317

if.end:                                           ; preds = %cond.end8
  br label %for.inc, !dbg !11318

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !11319
  %inc = add i32 %11, 1, !dbg !11319
  store i32 %inc, i32* %i, align 4, !dbg !11319
  br label %for.cond, !dbg !11320, !llvm.loop !11321

for.end:                                          ; preds = %cond.end
  %12 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11323
  %dist_vects13 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %12, i32 0, i32 6, !dbg !11323
  %13 = load i32*, i32** %dist_v.addr, align 8, !dbg !11323
  %call14 = call i32** @VEC_lambda_vector_heap_safe_push(%struct.VEC_lambda_vector_heap** %dist_vects13, i32* %13), !dbg !11323
  br label %return, !dbg !11324

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !11324
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @constant_access_functions(%struct.data_dependence_relation* %ddr) #0 !dbg !11325 {
entry:
  %retval = alloca i8, align 1
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %i = alloca i32, align 4
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !11326, metadata !DIExpression()), !dbg !11327
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11328, metadata !DIExpression()), !dbg !11329
  store i32 0, i32* %i, align 4, !dbg !11330
  br label %for.cond, !dbg !11332

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !11333
  %1 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11335
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %1, i32 0, i32 3, !dbg !11335
  %2 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !11335
  %tobool = icmp ne %struct.VEC_subscript_p_heap* %2, null, !dbg !11335
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11335

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11335
  %subscripts1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %3, i32 0, i32 3, !dbg !11335
  %4 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts1, align 8, !dbg !11335
  %base = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %4, i32 0, i32 0, !dbg !11335
  br label %cond.end, !dbg !11335

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !11335

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_subscript_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11335
  %call = call i32 @VEC_subscript_p_base_length(%struct.VEC_subscript_p_base* %cond), !dbg !11335
  %cmp = icmp ult i32 %0, %call, !dbg !11336
  br i1 %cmp, label %for.body, label %for.end, !dbg !11337

for.body:                                         ; preds = %cond.end
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11338
  %a = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 0, !dbg !11338
  %6 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !11338
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %6, i32 0, i32 5, !dbg !11338
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !11338
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !11338
  %tobool2 = icmp ne %struct.VEC_tree_heap* %7, null, !dbg !11338
  br i1 %tobool2, label %cond.true3, label %cond.false8, !dbg !11338

cond.true3:                                       ; preds = %for.body
  %8 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11338
  %a4 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %8, i32 0, i32 0, !dbg !11338
  %9 = load %struct.data_reference*, %struct.data_reference** %a4, align 8, !dbg !11338
  %indices5 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %9, i32 0, i32 5, !dbg !11338
  %access_fns6 = getelementptr inbounds %struct.indices, %struct.indices* %indices5, i32 0, i32 1, !dbg !11338
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns6, align 8, !dbg !11338
  %base7 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %10, i32 0, i32 0, !dbg !11338
  br label %cond.end9, !dbg !11338

cond.false8:                                      ; preds = %for.body
  br label %cond.end9, !dbg !11338

cond.end9:                                        ; preds = %cond.false8, %cond.true3
  %cond10 = phi %struct.VEC_tree_base* [ %base7, %cond.true3 ], [ null, %cond.false8 ], !dbg !11338
  %11 = load i32, i32* %i, align 4, !dbg !11338
  %call11 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond10, i32 %11), !dbg !11338
  %call12 = call zeroext i8 @evolution_function_is_constant_p(%union.tree_node* %call11), !dbg !11340
  %tobool13 = icmp ne i8 %call12, 0, !dbg !11340
  br i1 %tobool13, label %lor.lhs.false, label %if.then, !dbg !11341

lor.lhs.false:                                    ; preds = %cond.end9
  %12 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11342
  %b = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %12, i32 0, i32 1, !dbg !11342
  %13 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !11342
  %indices14 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %13, i32 0, i32 5, !dbg !11342
  %access_fns15 = getelementptr inbounds %struct.indices, %struct.indices* %indices14, i32 0, i32 1, !dbg !11342
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns15, align 8, !dbg !11342
  %tobool16 = icmp ne %struct.VEC_tree_heap* %14, null, !dbg !11342
  br i1 %tobool16, label %cond.true17, label %cond.false22, !dbg !11342

cond.true17:                                      ; preds = %lor.lhs.false
  %15 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11342
  %b18 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %15, i32 0, i32 1, !dbg !11342
  %16 = load %struct.data_reference*, %struct.data_reference** %b18, align 8, !dbg !11342
  %indices19 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %16, i32 0, i32 5, !dbg !11342
  %access_fns20 = getelementptr inbounds %struct.indices, %struct.indices* %indices19, i32 0, i32 1, !dbg !11342
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns20, align 8, !dbg !11342
  %base21 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i32 0, i32 0, !dbg !11342
  br label %cond.end23, !dbg !11342

cond.false22:                                     ; preds = %lor.lhs.false
  br label %cond.end23, !dbg !11342

cond.end23:                                       ; preds = %cond.false22, %cond.true17
  %cond24 = phi %struct.VEC_tree_base* [ %base21, %cond.true17 ], [ null, %cond.false22 ], !dbg !11342
  %18 = load i32, i32* %i, align 4, !dbg !11342
  %call25 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond24, i32 %18), !dbg !11342
  %call26 = call zeroext i8 @evolution_function_is_constant_p(%union.tree_node* %call25), !dbg !11343
  %tobool27 = icmp ne i8 %call26, 0, !dbg !11343
  br i1 %tobool27, label %if.end, label %if.then, !dbg !11344

if.then:                                          ; preds = %cond.end23, %cond.end9
  store i8 0, i8* %retval, align 1, !dbg !11345
  br label %return, !dbg !11345

if.end:                                           ; preds = %cond.end23
  br label %for.inc, !dbg !11346

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4, !dbg !11347
  %inc = add i32 %19, 1, !dbg !11347
  store i32 %inc, i32* %i, align 4, !dbg !11347
  br label %for.cond, !dbg !11348, !llvm.loop !11349

for.end:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !11351
  br label %return, !dbg !11351

return:                                           ; preds = %for.end, %if.then
  %20 = load i8, i8* %retval, align 1, !dbg !11352
  ret i8 %20, !dbg !11352
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_distance_for_zero_overlaps(%struct.data_dependence_relation* %ddr) #0 !dbg !11353 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sub = alloca %struct.subscript*, align 8
  %ca = alloca %struct.conflict_function*, align 8
  %cb = alloca %struct.conflict_function*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !11354, metadata !DIExpression()), !dbg !11355
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11356, metadata !DIExpression()), !dbg !11357
  call void @llvm.dbg.declare(metadata i32* %j, metadata !11358, metadata !DIExpression()), !dbg !11359
  store i32 0, i32* %i, align 4, !dbg !11360
  br label %for.cond, !dbg !11362

for.cond:                                         ; preds = %for.inc30, %entry
  %0 = load i32, i32* %i, align 4, !dbg !11363
  %1 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11365
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %1, i32 0, i32 3, !dbg !11365
  %2 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !11365
  %tobool = icmp ne %struct.VEC_subscript_p_heap* %2, null, !dbg !11365
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11365

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11365
  %subscripts1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %3, i32 0, i32 3, !dbg !11365
  %4 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts1, align 8, !dbg !11365
  %base = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %4, i32 0, i32 0, !dbg !11365
  br label %cond.end, !dbg !11365

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !11365

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_subscript_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11365
  %call = call i32 @VEC_subscript_p_base_length(%struct.VEC_subscript_p_base* %cond), !dbg !11365
  %cmp = icmp ult i32 %0, %call, !dbg !11366
  br i1 %cmp, label %for.body, label %for.end32, !dbg !11367

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.subscript** %sub, metadata !11368, metadata !DIExpression()), !dbg !11370
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11371
  %subscripts2 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 3, !dbg !11371
  %6 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts2, align 8, !dbg !11371
  %tobool3 = icmp ne %struct.VEC_subscript_p_heap* %6, null, !dbg !11371
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !11371

cond.true4:                                       ; preds = %for.body
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11371
  %subscripts5 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 3, !dbg !11371
  %8 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts5, align 8, !dbg !11371
  %base6 = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %8, i32 0, i32 0, !dbg !11371
  br label %cond.end8, !dbg !11371

cond.false7:                                      ; preds = %for.body
  br label %cond.end8, !dbg !11371

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_subscript_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !11371
  %9 = load i32, i32* %i, align 4, !dbg !11371
  %call10 = call %struct.subscript* @VEC_subscript_p_base_index(%struct.VEC_subscript_p_base* %cond9, i32 %9), !dbg !11371
  store %struct.subscript* %call10, %struct.subscript** %sub, align 8, !dbg !11370
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %ca, metadata !11372, metadata !DIExpression()), !dbg !11373
  %10 = load %struct.subscript*, %struct.subscript** %sub, align 8, !dbg !11374
  %conflicting_iterations_in_a = getelementptr inbounds %struct.subscript, %struct.subscript* %10, i32 0, i32 0, !dbg !11374
  %11 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_a, align 8, !dbg !11374
  store %struct.conflict_function* %11, %struct.conflict_function** %ca, align 8, !dbg !11373
  call void @llvm.dbg.declare(metadata %struct.conflict_function** %cb, metadata !11375, metadata !DIExpression()), !dbg !11376
  %12 = load %struct.subscript*, %struct.subscript** %sub, align 8, !dbg !11377
  %conflicting_iterations_in_b = getelementptr inbounds %struct.subscript, %struct.subscript* %12, i32 0, i32 1, !dbg !11377
  %13 = load %struct.conflict_function*, %struct.conflict_function** %conflicting_iterations_in_b, align 8, !dbg !11377
  store %struct.conflict_function* %13, %struct.conflict_function** %cb, align 8, !dbg !11376
  store i32 0, i32* %j, align 4, !dbg !11378
  br label %for.cond11, !dbg !11380

for.cond11:                                       ; preds = %for.inc, %cond.end8
  %14 = load i32, i32* %j, align 4, !dbg !11381
  %15 = load %struct.conflict_function*, %struct.conflict_function** %ca, align 8, !dbg !11383
  %n = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %15, i32 0, i32 0, !dbg !11384
  %16 = load i32, i32* %n, align 8, !dbg !11384
  %cmp12 = icmp ult i32 %14, %16, !dbg !11385
  br i1 %cmp12, label %for.body13, label %for.end, !dbg !11386

for.body13:                                       ; preds = %for.cond11
  %17 = load %struct.conflict_function*, %struct.conflict_function** %ca, align 8, !dbg !11387
  %fns = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %17, i32 0, i32 1, !dbg !11389
  %18 = load i32, i32* %j, align 4, !dbg !11390
  %idxprom = zext i32 %18 to i64, !dbg !11387
  %arrayidx = getelementptr inbounds [2 x %struct.VEC_tree_heap*], [2 x %struct.VEC_tree_heap*]* %fns, i64 0, i64 %idxprom, !dbg !11387
  %19 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %arrayidx, align 8, !dbg !11387
  %call14 = call zeroext i8 @affine_function_zero_p(%struct.VEC_tree_heap* %19), !dbg !11391
  %tobool15 = icmp ne i8 %call14, 0, !dbg !11391
  br i1 %tobool15, label %if.then, label %if.end, !dbg !11392

if.then:                                          ; preds = %for.body13
  %20 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11393
  call void @insert_innermost_unit_dist_vector(%struct.data_dependence_relation* %20), !dbg !11395
  br label %for.end32, !dbg !11396

if.end:                                           ; preds = %for.body13
  br label %for.inc, !dbg !11397

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %j, align 4, !dbg !11398
  %inc = add i32 %21, 1, !dbg !11398
  store i32 %inc, i32* %j, align 4, !dbg !11398
  br label %for.cond11, !dbg !11399, !llvm.loop !11400

for.end:                                          ; preds = %for.cond11
  store i32 0, i32* %j, align 4, !dbg !11402
  br label %for.cond16, !dbg !11404

for.cond16:                                       ; preds = %for.inc27, %for.end
  %22 = load i32, i32* %j, align 4, !dbg !11405
  %23 = load %struct.conflict_function*, %struct.conflict_function** %cb, align 8, !dbg !11407
  %n17 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %23, i32 0, i32 0, !dbg !11408
  %24 = load i32, i32* %n17, align 8, !dbg !11408
  %cmp18 = icmp ult i32 %22, %24, !dbg !11409
  br i1 %cmp18, label %for.body19, label %for.end29, !dbg !11410

for.body19:                                       ; preds = %for.cond16
  %25 = load %struct.conflict_function*, %struct.conflict_function** %cb, align 8, !dbg !11411
  %fns20 = getelementptr inbounds %struct.conflict_function, %struct.conflict_function* %25, i32 0, i32 1, !dbg !11413
  %26 = load i32, i32* %j, align 4, !dbg !11414
  %idxprom21 = zext i32 %26 to i64, !dbg !11411
  %arrayidx22 = getelementptr inbounds [2 x %struct.VEC_tree_heap*], [2 x %struct.VEC_tree_heap*]* %fns20, i64 0, i64 %idxprom21, !dbg !11411
  %27 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %arrayidx22, align 8, !dbg !11411
  %call23 = call zeroext i8 @affine_function_zero_p(%struct.VEC_tree_heap* %27), !dbg !11415
  %tobool24 = icmp ne i8 %call23, 0, !dbg !11415
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !11416

if.then25:                                        ; preds = %for.body19
  %28 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11417
  call void @insert_innermost_unit_dist_vector(%struct.data_dependence_relation* %28), !dbg !11419
  br label %for.end32, !dbg !11420

if.end26:                                         ; preds = %for.body19
  br label %for.inc27, !dbg !11421

for.inc27:                                        ; preds = %if.end26
  %29 = load i32, i32* %j, align 4, !dbg !11422
  %inc28 = add i32 %29, 1, !dbg !11422
  store i32 %inc28, i32* %j, align 4, !dbg !11422
  br label %for.cond16, !dbg !11423, !llvm.loop !11424

for.end29:                                        ; preds = %for.cond16
  br label %for.inc30, !dbg !11426

for.inc30:                                        ; preds = %for.end29
  %30 = load i32, i32* %i, align 4, !dbg !11427
  %inc31 = add i32 %30, 1, !dbg !11427
  store i32 %inc31, i32* %i, align 4, !dbg !11427
  br label %for.cond, !dbg !11428, !llvm.loop !11429

for.end32:                                        ; preds = %if.then, %if.then25, %cond.end
  ret void, !dbg !11431
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_other_self_distances(%struct.data_dependence_relation* %ddr) #0 !dbg !11432 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %dist_v = alloca i32*, align 8
  %i = alloca i32, align 4
  %index_carry = alloca i32, align 4
  %access_fun = alloca %union.tree_node*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !11433, metadata !DIExpression()), !dbg !11434
  call void @llvm.dbg.declare(metadata i32** %dist_v, metadata !11435, metadata !DIExpression()), !dbg !11436
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11437, metadata !DIExpression()), !dbg !11438
  call void @llvm.dbg.declare(metadata i32* %index_carry, metadata !11439, metadata !DIExpression()), !dbg !11440
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11441
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 4, !dbg !11441
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !11441
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !11441
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11441

cond.true:                                        ; preds = %entry
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11441
  %loop_nest1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 4, !dbg !11441
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest1, align 8, !dbg !11441
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %3, i32 0, i32 0, !dbg !11441
  br label %cond.end, !dbg !11441

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11441

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11441
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !11441
  store i32 %call, i32* %index_carry, align 4, !dbg !11440
  store i32 0, i32* %i, align 4, !dbg !11442
  br label %for.cond, !dbg !11444

for.cond:                                         ; preds = %for.inc, %cond.end
  %4 = load i32, i32* %i, align 4, !dbg !11445
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11447
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 3, !dbg !11447
  %6 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !11447
  %tobool2 = icmp ne %struct.VEC_subscript_p_heap* %6, null, !dbg !11447
  br i1 %tobool2, label %cond.true3, label %cond.false6, !dbg !11447

cond.true3:                                       ; preds = %for.cond
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11447
  %subscripts4 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 3, !dbg !11447
  %8 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts4, align 8, !dbg !11447
  %base5 = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %8, i32 0, i32 0, !dbg !11447
  br label %cond.end7, !dbg !11447

cond.false6:                                      ; preds = %for.cond
  br label %cond.end7, !dbg !11447

cond.end7:                                        ; preds = %cond.false6, %cond.true3
  %cond8 = phi %struct.VEC_subscript_p_base* [ %base5, %cond.true3 ], [ null, %cond.false6 ], !dbg !11447
  %call9 = call i32 @VEC_subscript_p_base_length(%struct.VEC_subscript_p_base* %cond8), !dbg !11447
  %cmp = icmp ult i32 %4, %call9, !dbg !11448
  br i1 %cmp, label %for.body, label %for.end, !dbg !11449

for.body:                                         ; preds = %cond.end7
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_fun, metadata !11450, metadata !DIExpression()), !dbg !11452
  %9 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11453
  %a = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %9, i32 0, i32 0, !dbg !11453
  %10 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !11453
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %10, i32 0, i32 5, !dbg !11453
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !11453
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !11453
  %tobool10 = icmp ne %struct.VEC_tree_heap* %11, null, !dbg !11453
  br i1 %tobool10, label %cond.true11, label %cond.false16, !dbg !11453

cond.true11:                                      ; preds = %for.body
  %12 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11453
  %a12 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %12, i32 0, i32 0, !dbg !11453
  %13 = load %struct.data_reference*, %struct.data_reference** %a12, align 8, !dbg !11453
  %indices13 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %13, i32 0, i32 5, !dbg !11453
  %access_fns14 = getelementptr inbounds %struct.indices, %struct.indices* %indices13, i32 0, i32 1, !dbg !11453
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns14, align 8, !dbg !11453
  %base15 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %14, i32 0, i32 0, !dbg !11453
  br label %cond.end17, !dbg !11453

cond.false16:                                     ; preds = %for.body
  br label %cond.end17, !dbg !11453

cond.end17:                                       ; preds = %cond.false16, %cond.true11
  %cond18 = phi %struct.VEC_tree_base* [ %base15, %cond.true11 ], [ null, %cond.false16 ], !dbg !11453
  %15 = load i32, i32* %i, align 4, !dbg !11453
  %call19 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond18, i32 %15), !dbg !11453
  store %union.tree_node* %call19, %union.tree_node** %access_fun, align 8, !dbg !11452
  %16 = load %union.tree_node*, %union.tree_node** %access_fun, align 8, !dbg !11454
  %base20 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !11454
  %17 = bitcast %struct.tree_base* %base20 to i64*, !dbg !11454
  %bf.load = load i64, i64* %17, align 8, !dbg !11454
  %bf.clear = and i64 %bf.load, 65535, !dbg !11454
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11454
  %cmp21 = icmp eq i32 %bf.cast, 146, !dbg !11456
  br i1 %cmp21, label %if.then, label %if.end78, !dbg !11457

if.then:                                          ; preds = %cond.end17
  %18 = load %union.tree_node*, %union.tree_node** %access_fun, align 8, !dbg !11458
  %call22 = call zeroext i8 @evolution_function_is_univariate_p(%union.tree_node* %18), !dbg !11461
  %tobool23 = icmp ne i8 %call22, 0, !dbg !11461
  br i1 %tobool23, label %if.end56, label %if.then24, !dbg !11462

if.then24:                                        ; preds = %if.then
  %19 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11463
  %subscripts25 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %19, i32 0, i32 3, !dbg !11463
  %20 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts25, align 8, !dbg !11463
  %tobool26 = icmp ne %struct.VEC_subscript_p_heap* %20, null, !dbg !11463
  br i1 %tobool26, label %cond.true27, label %cond.false30, !dbg !11463

cond.true27:                                      ; preds = %if.then24
  %21 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11463
  %subscripts28 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %21, i32 0, i32 3, !dbg !11463
  %22 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts28, align 8, !dbg !11463
  %base29 = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %22, i32 0, i32 0, !dbg !11463
  br label %cond.end31, !dbg !11463

cond.false30:                                     ; preds = %if.then24
  br label %cond.end31, !dbg !11463

cond.end31:                                       ; preds = %cond.false30, %cond.true27
  %cond32 = phi %struct.VEC_subscript_p_base* [ %base29, %cond.true27 ], [ null, %cond.false30 ], !dbg !11463
  %call33 = call i32 @VEC_subscript_p_base_length(%struct.VEC_subscript_p_base* %cond32), !dbg !11463
  %cmp34 = icmp ne i32 %call33, 1, !dbg !11466
  br i1 %cmp34, label %if.then35, label %if.end, !dbg !11467

if.then35:                                        ; preds = %cond.end31
  %23 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !11468
  %24 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11470
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %24, i32 0, i32 2, !dbg !11470
  store %union.tree_node* %23, %union.tree_node** %are_dependent, align 8, !dbg !11471
  br label %return, !dbg !11472

if.end:                                           ; preds = %cond.end31
  %25 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11473
  %a36 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %25, i32 0, i32 0, !dbg !11473
  %26 = load %struct.data_reference*, %struct.data_reference** %a36, align 8, !dbg !11473
  %indices37 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %26, i32 0, i32 5, !dbg !11473
  %access_fns38 = getelementptr inbounds %struct.indices, %struct.indices* %indices37, i32 0, i32 1, !dbg !11473
  %27 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns38, align 8, !dbg !11473
  %tobool39 = icmp ne %struct.VEC_tree_heap* %27, null, !dbg !11473
  br i1 %tobool39, label %cond.true40, label %cond.false45, !dbg !11473

cond.true40:                                      ; preds = %if.end
  %28 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11473
  %a41 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %28, i32 0, i32 0, !dbg !11473
  %29 = load %struct.data_reference*, %struct.data_reference** %a41, align 8, !dbg !11473
  %indices42 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %29, i32 0, i32 5, !dbg !11473
  %access_fns43 = getelementptr inbounds %struct.indices, %struct.indices* %indices42, i32 0, i32 1, !dbg !11473
  %30 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns43, align 8, !dbg !11473
  %base44 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %30, i32 0, i32 0, !dbg !11473
  br label %cond.end46, !dbg !11473

cond.false45:                                     ; preds = %if.end
  br label %cond.end46, !dbg !11473

cond.end46:                                       ; preds = %cond.false45, %cond.true40
  %cond47 = phi %struct.VEC_tree_base* [ %base44, %cond.true40 ], [ null, %cond.false45 ], !dbg !11473
  %call48 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond47, i32 0), !dbg !11473
  store %union.tree_node* %call48, %union.tree_node** %access_fun, align 8, !dbg !11474
  %31 = load %union.tree_node*, %union.tree_node** %access_fun, align 8, !dbg !11475
  %exp = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !11475
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11475
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !11475
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11475
  %base49 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !11475
  %33 = bitcast %struct.tree_base* %base49 to i64*, !dbg !11475
  %bf.load50 = load i64, i64* %33, align 8, !dbg !11475
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !11475
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !11475
  %cmp53 = icmp eq i32 %bf.cast52, 146, !dbg !11477
  br i1 %cmp53, label %if.then54, label %if.else, !dbg !11478

if.then54:                                        ; preds = %cond.end46
  %34 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11479
  %35 = load %union.tree_node*, %union.tree_node** %access_fun, align 8, !dbg !11480
  call void @add_multivariate_self_dist(%struct.data_dependence_relation* %34, %union.tree_node* %35), !dbg !11481
  br label %if.end55, !dbg !11481

if.else:                                          ; preds = %cond.end46
  %36 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11482
  %affine_p = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %36, i32 0, i32 9, !dbg !11482
  store i8 0, i8* %affine_p, align 1, !dbg !11483
  br label %if.end55

if.end55:                                         ; preds = %if.else, %if.then54
  br label %return, !dbg !11484

if.end56:                                         ; preds = %if.then
  %37 = load i32, i32* %index_carry, align 4, !dbg !11485
  %38 = load %union.tree_node*, %union.tree_node** %access_fun, align 8, !dbg !11485
  %exp57 = bitcast %union.tree_node* %38 to %struct.tree_exp*, !dbg !11485
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 3, !dbg !11485
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i64 0, i64 0, !dbg !11485
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8, !dbg !11485
  %int_cst = bitcast %union.tree_node* %39 to %struct.tree_int_cst*, !dbg !11485
  %int_cst60 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !11485
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst60, i32 0, i32 0, !dbg !11485
  %40 = load i64, i64* %low, align 8, !dbg !11485
  %conv = trunc i64 %40 to i32, !dbg !11485
  %41 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11485
  %loop_nest61 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %41, i32 0, i32 4, !dbg !11485
  %42 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest61, align 8, !dbg !11485
  %call62 = call i32 @index_in_loop_nest(i32 %conv, %struct.VEC_loop_p_heap* %42), !dbg !11485
  %cmp63 = icmp slt i32 %37, %call62, !dbg !11485
  br i1 %cmp63, label %cond.true65, label %cond.false66, !dbg !11485

cond.true65:                                      ; preds = %if.end56
  %43 = load i32, i32* %index_carry, align 4, !dbg !11485
  br label %cond.end76, !dbg !11485

cond.false66:                                     ; preds = %if.end56
  %44 = load %union.tree_node*, %union.tree_node** %access_fun, align 8, !dbg !11485
  %exp67 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !11485
  %operands68 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp67, i32 0, i32 3, !dbg !11485
  %arrayidx69 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands68, i64 0, i64 0, !dbg !11485
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx69, align 8, !dbg !11485
  %int_cst70 = bitcast %union.tree_node* %45 to %struct.tree_int_cst*, !dbg !11485
  %int_cst71 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst70, i32 0, i32 1, !dbg !11485
  %low72 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst71, i32 0, i32 0, !dbg !11485
  %46 = load i64, i64* %low72, align 8, !dbg !11485
  %conv73 = trunc i64 %46 to i32, !dbg !11485
  %47 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11485
  %loop_nest74 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %47, i32 0, i32 4, !dbg !11485
  %48 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest74, align 8, !dbg !11485
  %call75 = call i32 @index_in_loop_nest(i32 %conv73, %struct.VEC_loop_p_heap* %48), !dbg !11485
  br label %cond.end76, !dbg !11485

cond.end76:                                       ; preds = %cond.false66, %cond.true65
  %cond77 = phi i32 [ %43, %cond.true65 ], [ %call75, %cond.false66 ], !dbg !11485
  store i32 %cond77, i32* %index_carry, align 4, !dbg !11486
  br label %if.end78, !dbg !11487

if.end78:                                         ; preds = %cond.end76, %cond.end17
  br label %for.inc, !dbg !11488

for.inc:                                          ; preds = %if.end78
  %49 = load i32, i32* %i, align 4, !dbg !11489
  %inc = add i32 %49, 1, !dbg !11489
  store i32 %inc, i32* %i, align 4, !dbg !11489
  br label %for.cond, !dbg !11490, !llvm.loop !11491

for.end:                                          ; preds = %cond.end7
  %50 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11493
  %loop_nest79 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %50, i32 0, i32 4, !dbg !11493
  %51 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest79, align 8, !dbg !11493
  %tobool80 = icmp ne %struct.VEC_loop_p_heap* %51, null, !dbg !11493
  br i1 %tobool80, label %cond.true81, label %cond.false84, !dbg !11493

cond.true81:                                      ; preds = %for.end
  %52 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11493
  %loop_nest82 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %52, i32 0, i32 4, !dbg !11493
  %53 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest82, align 8, !dbg !11493
  %base83 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %53, i32 0, i32 0, !dbg !11493
  br label %cond.end85, !dbg !11493

cond.false84:                                     ; preds = %for.end
  br label %cond.end85, !dbg !11493

cond.end85:                                       ; preds = %cond.false84, %cond.true81
  %cond86 = phi %struct.VEC_loop_p_base* [ %base83, %cond.true81 ], [ null, %cond.false84 ], !dbg !11493
  %call87 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond86), !dbg !11493
  %call88 = call i32* @lambda_vector_new(i32 %call87), !dbg !11494
  store i32* %call88, i32** %dist_v, align 8, !dbg !11495
  %54 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11496
  %55 = load i32*, i32** %dist_v, align 8, !dbg !11497
  %56 = load i32, i32* %index_carry, align 4, !dbg !11498
  call void @add_outer_distances(%struct.data_dependence_relation* %54, i32* %55, i32 %56), !dbg !11499
  br label %return, !dbg !11500

return:                                           ; preds = %cond.end85, %if.end55, %if.then35
  ret void, !dbg !11500
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @build_classic_dist_vector_1(%struct.data_dependence_relation* %ddr, %struct.data_reference* %ddr_a, %struct.data_reference* %ddr_b, i32* %dist_v, i8* %init_b, i32* %index_carry) #0 !dbg !11501 {
entry:
  %retval = alloca i8, align 1
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %ddr_a.addr = alloca %struct.data_reference*, align 8
  %ddr_b.addr = alloca %struct.data_reference*, align 8
  %dist_v.addr = alloca i32*, align 8
  %init_b.addr = alloca i8*, align 8
  %index_carry.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %init_v = alloca i32*, align 8
  %access_fn_a = alloca %union.tree_node*, align 8
  %access_fn_b = alloca %union.tree_node*, align 8
  %subscript = alloca %struct.subscript*, align 8
  %dist = alloca i32, align 4
  %index = alloca i32, align 4
  %index_a = alloca i32, align 4
  %index_b = alloca i32, align 4
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !11504, metadata !DIExpression()), !dbg !11505
  store %struct.data_reference* %ddr_a, %struct.data_reference** %ddr_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %ddr_a.addr, metadata !11506, metadata !DIExpression()), !dbg !11507
  store %struct.data_reference* %ddr_b, %struct.data_reference** %ddr_b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %ddr_b.addr, metadata !11508, metadata !DIExpression()), !dbg !11509
  store i32* %dist_v, i32** %dist_v.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %dist_v.addr, metadata !11510, metadata !DIExpression()), !dbg !11511
  store i8* %init_b, i8** %init_b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %init_b.addr, metadata !11512, metadata !DIExpression()), !dbg !11513
  store i32* %index_carry, i32** %index_carry.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %index_carry.addr, metadata !11514, metadata !DIExpression()), !dbg !11515
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11516, metadata !DIExpression()), !dbg !11517
  call void @llvm.dbg.declare(metadata i32** %init_v, metadata !11518, metadata !DIExpression()), !dbg !11519
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11520
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 4, !dbg !11520
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !11520
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !11520
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11520

cond.true:                                        ; preds = %entry
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11520
  %loop_nest1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 4, !dbg !11520
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest1, align 8, !dbg !11520
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %3, i32 0, i32 0, !dbg !11520
  br label %cond.end, !dbg !11520

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11520

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11520
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !11520
  %call2 = call i32* @lambda_vector_new(i32 %call), !dbg !11521
  store i32* %call2, i32** %init_v, align 8, !dbg !11519
  store i32 0, i32* %i, align 4, !dbg !11522
  br label %for.cond, !dbg !11524

for.cond:                                         ; preds = %for.inc, %cond.end
  %4 = load i32, i32* %i, align 4, !dbg !11525
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11527
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 3, !dbg !11527
  %6 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !11527
  %tobool3 = icmp ne %struct.VEC_subscript_p_heap* %6, null, !dbg !11527
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !11527

cond.true4:                                       ; preds = %for.cond
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11527
  %subscripts5 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 3, !dbg !11527
  %8 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts5, align 8, !dbg !11527
  %base6 = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %8, i32 0, i32 0, !dbg !11527
  br label %cond.end8, !dbg !11527

cond.false7:                                      ; preds = %for.cond
  br label %cond.end8, !dbg !11527

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_subscript_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !11527
  %call10 = call i32 @VEC_subscript_p_base_length(%struct.VEC_subscript_p_base* %cond9), !dbg !11527
  %cmp = icmp ult i32 %4, %call10, !dbg !11528
  br i1 %cmp, label %for.body, label %for.end, !dbg !11529

for.body:                                         ; preds = %cond.end8
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_fn_a, metadata !11530, metadata !DIExpression()), !dbg !11532
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_fn_b, metadata !11533, metadata !DIExpression()), !dbg !11534
  call void @llvm.dbg.declare(metadata %struct.subscript** %subscript, metadata !11535, metadata !DIExpression()), !dbg !11536
  %9 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11537
  %subscripts11 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %9, i32 0, i32 3, !dbg !11537
  %10 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts11, align 8, !dbg !11537
  %tobool12 = icmp ne %struct.VEC_subscript_p_heap* %10, null, !dbg !11537
  br i1 %tobool12, label %cond.true13, label %cond.false16, !dbg !11537

cond.true13:                                      ; preds = %for.body
  %11 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11537
  %subscripts14 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %11, i32 0, i32 3, !dbg !11537
  %12 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts14, align 8, !dbg !11537
  %base15 = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %12, i32 0, i32 0, !dbg !11537
  br label %cond.end17, !dbg !11537

cond.false16:                                     ; preds = %for.body
  br label %cond.end17, !dbg !11537

cond.end17:                                       ; preds = %cond.false16, %cond.true13
  %cond18 = phi %struct.VEC_subscript_p_base* [ %base15, %cond.true13 ], [ null, %cond.false16 ], !dbg !11537
  %13 = load i32, i32* %i, align 4, !dbg !11537
  %call19 = call %struct.subscript* @VEC_subscript_p_base_index(%struct.VEC_subscript_p_base* %cond18, i32 %13), !dbg !11537
  store %struct.subscript* %call19, %struct.subscript** %subscript, align 8, !dbg !11536
  %14 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !11538
  %distance = getelementptr inbounds %struct.subscript, %struct.subscript* %14, i32 0, i32 3, !dbg !11538
  %15 = load %union.tree_node*, %union.tree_node** %distance, align 8, !dbg !11538
  %call20 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %15), !dbg !11540
  %tobool21 = icmp ne i8 %call20, 0, !dbg !11540
  br i1 %tobool21, label %if.then, label %if.end, !dbg !11541

if.then:                                          ; preds = %cond.end17
  %16 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11542
  call void @non_affine_dependence_relation(%struct.data_dependence_relation* %16), !dbg !11544
  store i8 0, i8* %retval, align 1, !dbg !11545
  br label %return, !dbg !11545

if.end:                                           ; preds = %cond.end17
  %17 = load %struct.data_reference*, %struct.data_reference** %ddr_a.addr, align 8, !dbg !11546
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %17, i32 0, i32 5, !dbg !11546
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !11546
  %18 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !11546
  %tobool22 = icmp ne %struct.VEC_tree_heap* %18, null, !dbg !11546
  br i1 %tobool22, label %cond.true23, label %cond.false27, !dbg !11546

cond.true23:                                      ; preds = %if.end
  %19 = load %struct.data_reference*, %struct.data_reference** %ddr_a.addr, align 8, !dbg !11546
  %indices24 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %19, i32 0, i32 5, !dbg !11546
  %access_fns25 = getelementptr inbounds %struct.indices, %struct.indices* %indices24, i32 0, i32 1, !dbg !11546
  %20 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns25, align 8, !dbg !11546
  %base26 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %20, i32 0, i32 0, !dbg !11546
  br label %cond.end28, !dbg !11546

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !11546

cond.end28:                                       ; preds = %cond.false27, %cond.true23
  %cond29 = phi %struct.VEC_tree_base* [ %base26, %cond.true23 ], [ null, %cond.false27 ], !dbg !11546
  %21 = load i32, i32* %i, align 4, !dbg !11546
  %call30 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond29, i32 %21), !dbg !11546
  store %union.tree_node* %call30, %union.tree_node** %access_fn_a, align 8, !dbg !11547
  %22 = load %struct.data_reference*, %struct.data_reference** %ddr_b.addr, align 8, !dbg !11548
  %indices31 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %22, i32 0, i32 5, !dbg !11548
  %access_fns32 = getelementptr inbounds %struct.indices, %struct.indices* %indices31, i32 0, i32 1, !dbg !11548
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns32, align 8, !dbg !11548
  %tobool33 = icmp ne %struct.VEC_tree_heap* %23, null, !dbg !11548
  br i1 %tobool33, label %cond.true34, label %cond.false38, !dbg !11548

cond.true34:                                      ; preds = %cond.end28
  %24 = load %struct.data_reference*, %struct.data_reference** %ddr_b.addr, align 8, !dbg !11548
  %indices35 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %24, i32 0, i32 5, !dbg !11548
  %access_fns36 = getelementptr inbounds %struct.indices, %struct.indices* %indices35, i32 0, i32 1, !dbg !11548
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns36, align 8, !dbg !11548
  %base37 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %25, i32 0, i32 0, !dbg !11548
  br label %cond.end39, !dbg !11548

cond.false38:                                     ; preds = %cond.end28
  br label %cond.end39, !dbg !11548

cond.end39:                                       ; preds = %cond.false38, %cond.true34
  %cond40 = phi %struct.VEC_tree_base* [ %base37, %cond.true34 ], [ null, %cond.false38 ], !dbg !11548
  %26 = load i32, i32* %i, align 4, !dbg !11548
  %call41 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond40, i32 %26), !dbg !11548
  store %union.tree_node* %call41, %union.tree_node** %access_fn_b, align 8, !dbg !11549
  %27 = load %union.tree_node*, %union.tree_node** %access_fn_a, align 8, !dbg !11550
  %base42 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !11550
  %28 = bitcast %struct.tree_base* %base42 to i64*, !dbg !11550
  %bf.load = load i64, i64* %28, align 8, !dbg !11550
  %bf.clear = and i64 %bf.load, 65535, !dbg !11550
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11550
  %cmp43 = icmp eq i32 %bf.cast, 146, !dbg !11552
  br i1 %cmp43, label %land.lhs.true, label %if.else, !dbg !11553

land.lhs.true:                                    ; preds = %cond.end39
  %29 = load %union.tree_node*, %union.tree_node** %access_fn_b, align 8, !dbg !11554
  %base44 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !11554
  %30 = bitcast %struct.tree_base* %base44 to i64*, !dbg !11554
  %bf.load45 = load i64, i64* %30, align 8, !dbg !11554
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !11554
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !11554
  %cmp48 = icmp eq i32 %bf.cast47, 146, !dbg !11555
  br i1 %cmp48, label %if.then49, label %if.else, !dbg !11556

if.then49:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %dist, metadata !11557, metadata !DIExpression()), !dbg !11559
  call void @llvm.dbg.declare(metadata i32* %index, metadata !11560, metadata !DIExpression()), !dbg !11561
  call void @llvm.dbg.declare(metadata i32* %index_a, metadata !11562, metadata !DIExpression()), !dbg !11563
  %31 = load %union.tree_node*, %union.tree_node** %access_fn_a, align 8, !dbg !11564
  %exp = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !11564
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11564
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !11564
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11564
  %int_cst = bitcast %union.tree_node* %32 to %struct.tree_int_cst*, !dbg !11564
  %int_cst50 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !11564
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst50, i32 0, i32 0, !dbg !11564
  %33 = load i64, i64* %low, align 8, !dbg !11564
  %conv = trunc i64 %33 to i32, !dbg !11564
  %34 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11565
  %loop_nest51 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %34, i32 0, i32 4, !dbg !11565
  %35 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest51, align 8, !dbg !11565
  %call52 = call i32 @index_in_loop_nest(i32 %conv, %struct.VEC_loop_p_heap* %35), !dbg !11566
  store i32 %call52, i32* %index_a, align 4, !dbg !11563
  call void @llvm.dbg.declare(metadata i32* %index_b, metadata !11567, metadata !DIExpression()), !dbg !11568
  %36 = load %union.tree_node*, %union.tree_node** %access_fn_b, align 8, !dbg !11569
  %exp53 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !11569
  %operands54 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp53, i32 0, i32 3, !dbg !11569
  %arrayidx55 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands54, i64 0, i64 0, !dbg !11569
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx55, align 8, !dbg !11569
  %int_cst56 = bitcast %union.tree_node* %37 to %struct.tree_int_cst*, !dbg !11569
  %int_cst57 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst56, i32 0, i32 1, !dbg !11569
  %low58 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst57, i32 0, i32 0, !dbg !11569
  %38 = load i64, i64* %low58, align 8, !dbg !11569
  %conv59 = trunc i64 %38 to i32, !dbg !11569
  %39 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11570
  %loop_nest60 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %39, i32 0, i32 4, !dbg !11570
  %40 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest60, align 8, !dbg !11570
  %call61 = call i32 @index_in_loop_nest(i32 %conv59, %struct.VEC_loop_p_heap* %40), !dbg !11571
  store i32 %call61, i32* %index_b, align 4, !dbg !11568
  %41 = load i32, i32* %index_a, align 4, !dbg !11572
  %42 = load i32, i32* %index_b, align 4, !dbg !11573
  %cmp62 = icmp slt i32 %41, %42, !dbg !11574
  br i1 %cmp62, label %cond.true64, label %cond.false65, !dbg !11572

cond.true64:                                      ; preds = %if.then49
  %43 = load i32, i32* %index_a, align 4, !dbg !11575
  br label %cond.end66, !dbg !11572

cond.false65:                                     ; preds = %if.then49
  %44 = load i32, i32* %index_b, align 4, !dbg !11576
  br label %cond.end66, !dbg !11572

cond.end66:                                       ; preds = %cond.false65, %cond.true64
  %cond67 = phi i32 [ %43, %cond.true64 ], [ %44, %cond.false65 ], !dbg !11572
  store i32 %cond67, i32* %index, align 4, !dbg !11577
  %45 = load i32, i32* %index, align 4, !dbg !11578
  %46 = load i32*, i32** %index_carry.addr, align 8, !dbg !11578
  %47 = load i32, i32* %46, align 4, !dbg !11578
  %cmp68 = icmp slt i32 %45, %47, !dbg !11578
  br i1 %cmp68, label %cond.true70, label %cond.false71, !dbg !11578

cond.true70:                                      ; preds = %cond.end66
  %48 = load i32, i32* %index, align 4, !dbg !11578
  br label %cond.end72, !dbg !11578

cond.false71:                                     ; preds = %cond.end66
  %49 = load i32*, i32** %index_carry.addr, align 8, !dbg !11578
  %50 = load i32, i32* %49, align 4, !dbg !11578
  br label %cond.end72, !dbg !11578

cond.end72:                                       ; preds = %cond.false71, %cond.true70
  %cond73 = phi i32 [ %48, %cond.true70 ], [ %50, %cond.false71 ], !dbg !11578
  %51 = load i32*, i32** %index_carry.addr, align 8, !dbg !11579
  store i32 %cond73, i32* %51, align 4, !dbg !11580
  %52 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !11581
  %distance74 = getelementptr inbounds %struct.subscript, %struct.subscript* %52, i32 0, i32 3, !dbg !11581
  %53 = load %union.tree_node*, %union.tree_node** %distance74, align 8, !dbg !11581
  %call75 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %53), !dbg !11583
  %tobool76 = icmp ne i8 %call75, 0, !dbg !11583
  br i1 %tobool76, label %if.then77, label %if.end78, !dbg !11584

if.then77:                                        ; preds = %cond.end72
  %54 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11585
  call void @non_affine_dependence_relation(%struct.data_dependence_relation* %54), !dbg !11587
  store i8 0, i8* %retval, align 1, !dbg !11588
  br label %return, !dbg !11588

if.end78:                                         ; preds = %cond.end72
  %55 = load %struct.subscript*, %struct.subscript** %subscript, align 8, !dbg !11589
  %distance79 = getelementptr inbounds %struct.subscript, %struct.subscript* %55, i32 0, i32 3, !dbg !11589
  %56 = load %union.tree_node*, %union.tree_node** %distance79, align 8, !dbg !11589
  %call80 = call i64 @int_cst_value(%union.tree_node* %56), !dbg !11590
  %conv81 = trunc i64 %call80 to i32, !dbg !11590
  store i32 %conv81, i32* %dist, align 4, !dbg !11591
  %57 = load i32*, i32** %init_v, align 8, !dbg !11592
  %58 = load i32, i32* %index, align 4, !dbg !11594
  %idxprom = sext i32 %58 to i64, !dbg !11592
  %arrayidx82 = getelementptr inbounds i32, i32* %57, i64 %idxprom, !dbg !11592
  %59 = load i32, i32* %arrayidx82, align 4, !dbg !11592
  %cmp83 = icmp ne i32 %59, 0, !dbg !11595
  br i1 %cmp83, label %land.lhs.true85, label %if.end91, !dbg !11596

land.lhs.true85:                                  ; preds = %if.end78
  %60 = load i32*, i32** %dist_v.addr, align 8, !dbg !11597
  %61 = load i32, i32* %index, align 4, !dbg !11598
  %idxprom86 = sext i32 %61 to i64, !dbg !11597
  %arrayidx87 = getelementptr inbounds i32, i32* %60, i64 %idxprom86, !dbg !11597
  %62 = load i32, i32* %arrayidx87, align 4, !dbg !11597
  %63 = load i32, i32* %dist, align 4, !dbg !11599
  %cmp88 = icmp ne i32 %62, %63, !dbg !11600
  br i1 %cmp88, label %if.then90, label %if.end91, !dbg !11601

if.then90:                                        ; preds = %land.lhs.true85
  %64 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11602
  %65 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !11604
  call void @finalize_ddr_dependent(%struct.data_dependence_relation* %64, %union.tree_node* %65), !dbg !11605
  store i8 0, i8* %retval, align 1, !dbg !11606
  br label %return, !dbg !11606

if.end91:                                         ; preds = %land.lhs.true85, %if.end78
  %66 = load i32, i32* %dist, align 4, !dbg !11607
  %67 = load i32*, i32** %dist_v.addr, align 8, !dbg !11608
  %68 = load i32, i32* %index, align 4, !dbg !11609
  %idxprom92 = sext i32 %68 to i64, !dbg !11608
  %arrayidx93 = getelementptr inbounds i32, i32* %67, i64 %idxprom92, !dbg !11608
  store i32 %66, i32* %arrayidx93, align 4, !dbg !11610
  %69 = load i32*, i32** %init_v, align 8, !dbg !11611
  %70 = load i32, i32* %index, align 4, !dbg !11612
  %idxprom94 = sext i32 %70 to i64, !dbg !11611
  %arrayidx95 = getelementptr inbounds i32, i32* %69, i64 %idxprom94, !dbg !11611
  store i32 1, i32* %arrayidx95, align 4, !dbg !11613
  %71 = load i8*, i8** %init_b.addr, align 8, !dbg !11614
  store i8 1, i8* %71, align 1, !dbg !11615
  br label %if.end100, !dbg !11616

if.else:                                          ; preds = %land.lhs.true, %cond.end39
  %72 = load %union.tree_node*, %union.tree_node** %access_fn_a, align 8, !dbg !11617
  %73 = load %union.tree_node*, %union.tree_node** %access_fn_b, align 8, !dbg !11619
  %call96 = call i32 @operand_equal_p(%union.tree_node* %72, %union.tree_node* %73, i32 0), !dbg !11620
  %tobool97 = icmp ne i32 %call96, 0, !dbg !11620
  br i1 %tobool97, label %if.end99, label %if.then98, !dbg !11621

if.then98:                                        ; preds = %if.else
  %74 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11622
  call void @non_affine_dependence_relation(%struct.data_dependence_relation* %74), !dbg !11624
  store i8 0, i8* %retval, align 1, !dbg !11625
  br label %return, !dbg !11625

if.end99:                                         ; preds = %if.else
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.end91
  br label %for.inc, !dbg !11626

for.inc:                                          ; preds = %if.end100
  %75 = load i32, i32* %i, align 4, !dbg !11627
  %inc = add i32 %75, 1, !dbg !11627
  store i32 %inc, i32* %i, align 4, !dbg !11627
  br label %for.cond, !dbg !11628, !llvm.loop !11629

for.end:                                          ; preds = %cond.end8
  store i8 1, i8* %retval, align 1, !dbg !11631
  br label %return, !dbg !11631

return:                                           ; preds = %for.end, %if.then98, %if.then90, %if.then77, %if.then
  %76 = load i8, i8* %retval, align 1, !dbg !11632
  ret i8 %76, !dbg !11632
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lambda_vector_lexico_pos(i32* %v, i32 %n) #0 !dbg !11633 {
entry:
  %retval = alloca i8, align 1
  %v.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %v, i32** %v.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %v.addr, metadata !11636, metadata !DIExpression()), !dbg !11637
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !11638, metadata !DIExpression()), !dbg !11639
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11640, metadata !DIExpression()), !dbg !11641
  store i32 0, i32* %i, align 4, !dbg !11642
  br label %for.cond, !dbg !11644

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !11645
  %1 = load i32, i32* %n.addr, align 4, !dbg !11647
  %cmp = icmp ult i32 %0, %1, !dbg !11648
  br i1 %cmp, label %for.body, label %for.end, !dbg !11649

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %v.addr, align 8, !dbg !11650
  %3 = load i32, i32* %i, align 4, !dbg !11653
  %idxprom = zext i32 %3 to i64, !dbg !11650
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !11650
  %4 = load i32, i32* %arrayidx, align 4, !dbg !11650
  %cmp1 = icmp eq i32 %4, 0, !dbg !11654
  br i1 %cmp1, label %if.then, label %if.end, !dbg !11655

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !11656

if.end:                                           ; preds = %for.body
  %5 = load i32*, i32** %v.addr, align 8, !dbg !11657
  %6 = load i32, i32* %i, align 4, !dbg !11659
  %idxprom2 = zext i32 %6 to i64, !dbg !11657
  %arrayidx3 = getelementptr inbounds i32, i32* %5, i64 %idxprom2, !dbg !11657
  %7 = load i32, i32* %arrayidx3, align 4, !dbg !11657
  %cmp4 = icmp slt i32 %7, 0, !dbg !11660
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !11661

if.then5:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !11662
  br label %return, !dbg !11662

if.end6:                                          ; preds = %if.end
  %8 = load i32*, i32** %v.addr, align 8, !dbg !11663
  %9 = load i32, i32* %i, align 4, !dbg !11665
  %idxprom7 = zext i32 %9 to i64, !dbg !11663
  %arrayidx8 = getelementptr inbounds i32, i32* %8, i64 %idxprom7, !dbg !11663
  %10 = load i32, i32* %arrayidx8, align 4, !dbg !11663
  %cmp9 = icmp sgt i32 %10, 0, !dbg !11666
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !11667

if.then10:                                        ; preds = %if.end6
  store i8 1, i8* %retval, align 1, !dbg !11668
  br label %return, !dbg !11668

if.end11:                                         ; preds = %if.end6
  br label %for.inc, !dbg !11669

for.inc:                                          ; preds = %if.end11, %if.then
  %11 = load i32, i32* %i, align 4, !dbg !11670
  %inc = add i32 %11, 1, !dbg !11670
  store i32 %inc, i32* %i, align 4, !dbg !11670
  br label %for.cond, !dbg !11671, !llvm.loop !11672

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !11674
  br label %return, !dbg !11674

return:                                           ; preds = %for.end, %if.then10, %if.then5
  %12 = load i8, i8* %retval, align 1, !dbg !11675
  ret i8 %12, !dbg !11675
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_outer_distances(%struct.data_dependence_relation* %ddr, i32* %dist_v, i32 %index) #0 !dbg !11676 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %dist_v.addr = alloca i32*, align 8
  %index.addr = alloca i32, align 4
  %save_v = alloca i32*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !11679, metadata !DIExpression()), !dbg !11680
  store i32* %dist_v, i32** %dist_v.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %dist_v.addr, metadata !11681, metadata !DIExpression()), !dbg !11682
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !11683, metadata !DIExpression()), !dbg !11684
  br label %while.cond, !dbg !11685

while.cond:                                       ; preds = %cond.end9, %entry
  %0 = load i32, i32* %index.addr, align 4, !dbg !11686
  %dec = add nsw i32 %0, -1, !dbg !11686
  store i32 %dec, i32* %index.addr, align 4, !dbg !11686
  %cmp = icmp sge i32 %dec, 0, !dbg !11687
  br i1 %cmp, label %while.body, label %while.end, !dbg !11685

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32** %save_v, metadata !11688, metadata !DIExpression()), !dbg !11690
  %1 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11691
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %1, i32 0, i32 4, !dbg !11691
  %2 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !11691
  %tobool = icmp ne %struct.VEC_loop_p_heap* %2, null, !dbg !11691
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11691

cond.true:                                        ; preds = %while.body
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11691
  %loop_nest1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %3, i32 0, i32 4, !dbg !11691
  %4 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest1, align 8, !dbg !11691
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %4, i32 0, i32 0, !dbg !11691
  br label %cond.end, !dbg !11691

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !11691

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11691
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !11691
  %call2 = call i32* @lambda_vector_new(i32 %call), !dbg !11692
  store i32* %call2, i32** %save_v, align 8, !dbg !11690
  %5 = load i32*, i32** %dist_v.addr, align 8, !dbg !11693
  %6 = load i32*, i32** %save_v, align 8, !dbg !11694
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11695
  %loop_nest3 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 4, !dbg !11695
  %8 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest3, align 8, !dbg !11695
  %tobool4 = icmp ne %struct.VEC_loop_p_heap* %8, null, !dbg !11695
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !11695

cond.true5:                                       ; preds = %cond.end
  %9 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11695
  %loop_nest6 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %9, i32 0, i32 4, !dbg !11695
  %10 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest6, align 8, !dbg !11695
  %base7 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %10, i32 0, i32 0, !dbg !11695
  br label %cond.end9, !dbg !11695

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !11695

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_loop_p_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !11695
  %call11 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond10), !dbg !11695
  call void @lambda_vector_copy(i32* %5, i32* %6, i32 %call11), !dbg !11696
  %11 = load i32*, i32** %save_v, align 8, !dbg !11697
  %12 = load i32, i32* %index.addr, align 4, !dbg !11698
  %idxprom = sext i32 %12 to i64, !dbg !11697
  %arrayidx = getelementptr inbounds i32, i32* %11, i64 %idxprom, !dbg !11697
  store i32 1, i32* %arrayidx, align 4, !dbg !11699
  %13 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11700
  %14 = load i32*, i32** %save_v, align 8, !dbg !11701
  call void @save_dist_v(%struct.data_dependence_relation* %13, i32* %14), !dbg !11702
  br label %while.cond, !dbg !11685, !llvm.loop !11703

while.end:                                        ; preds = %while.cond
  ret void, !dbg !11705
}

; Function Attrs: noinline nounwind uwtable
define internal void @lambda_vector_copy(i32* %vec1, i32* %vec2, i32 %size) #0 !dbg !11706 {
entry:
  %vec1.addr = alloca i32*, align 8
  %vec2.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  store i32* %vec1, i32** %vec1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec1.addr, metadata !11709, metadata !DIExpression()), !dbg !11710
  store i32* %vec2, i32** %vec2.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec2.addr, metadata !11711, metadata !DIExpression()), !dbg !11712
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !11713, metadata !DIExpression()), !dbg !11714
  %0 = load i32*, i32** %vec2.addr, align 8, !dbg !11715
  %1 = bitcast i32* %0 to i8*, !dbg !11716
  %2 = load i32*, i32** %vec1.addr, align 8, !dbg !11717
  %3 = bitcast i32* %2 to i8*, !dbg !11716
  %4 = load i32, i32* %size.addr, align 4, !dbg !11718
  %conv = sext i32 %4 to i64, !dbg !11718
  %mul = mul i64 %conv, 4, !dbg !11719
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %3, i64 %mul, i1 false), !dbg !11716
  ret void, !dbg !11720
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @lambda_vector_first_nz(i32* %vec1, i32 %n, i32 %start) #0 !dbg !11721 {
entry:
  %vec1.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %start.addr = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %vec1, i32** %vec1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec1.addr, metadata !11724, metadata !DIExpression()), !dbg !11725
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !11726, metadata !DIExpression()), !dbg !11727
  store i32 %start, i32* %start.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start.addr, metadata !11728, metadata !DIExpression()), !dbg !11729
  call void @llvm.dbg.declare(metadata i32* %j, metadata !11730, metadata !DIExpression()), !dbg !11731
  %0 = load i32, i32* %start.addr, align 4, !dbg !11732
  store i32 %0, i32* %j, align 4, !dbg !11731
  br label %while.cond, !dbg !11733

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %j, align 4, !dbg !11734
  %2 = load i32, i32* %n.addr, align 4, !dbg !11735
  %cmp = icmp slt i32 %1, %2, !dbg !11736
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !11737

land.rhs:                                         ; preds = %while.cond
  %3 = load i32*, i32** %vec1.addr, align 8, !dbg !11738
  %4 = load i32, i32* %j, align 4, !dbg !11739
  %idxprom = sext i32 %4 to i64, !dbg !11738
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !11738
  %5 = load i32, i32* %arrayidx, align 4, !dbg !11738
  %cmp1 = icmp eq i32 %5, 0, !dbg !11740
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ], !dbg !11741
  br i1 %6, label %while.body, label %while.end, !dbg !11733

while.body:                                       ; preds = %land.end
  %7 = load i32, i32* %j, align 4, !dbg !11742
  %inc = add nsw i32 %7, 1, !dbg !11742
  store i32 %inc, i32* %j, align 4, !dbg !11742
  br label %while.cond, !dbg !11733, !llvm.loop !11743

while.end:                                        ; preds = %land.end
  %8 = load i32, i32* %j, align 4, !dbg !11744
  ret i32 %8, !dbg !11745
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lambda_vector_equal(i32* %vec1, i32* %vec2, i32 %size) #0 !dbg !11746 {
entry:
  %retval = alloca i8, align 1
  %vec1.addr = alloca i32*, align 8
  %vec2.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %vec1, i32** %vec1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec1.addr, metadata !11749, metadata !DIExpression()), !dbg !11750
  store i32* %vec2, i32** %vec2.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec2.addr, metadata !11751, metadata !DIExpression()), !dbg !11752
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !11753, metadata !DIExpression()), !dbg !11754
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11755, metadata !DIExpression()), !dbg !11756
  store i32 0, i32* %i, align 4, !dbg !11757
  br label %for.cond, !dbg !11759

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !11760
  %1 = load i32, i32* %size.addr, align 4, !dbg !11762
  %cmp = icmp slt i32 %0, %1, !dbg !11763
  br i1 %cmp, label %for.body, label %for.end, !dbg !11764

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %vec1.addr, align 8, !dbg !11765
  %3 = load i32, i32* %i, align 4, !dbg !11767
  %idxprom = sext i32 %3 to i64, !dbg !11765
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !11765
  %4 = load i32, i32* %arrayidx, align 4, !dbg !11765
  %5 = load i32*, i32** %vec2.addr, align 8, !dbg !11768
  %6 = load i32, i32* %i, align 4, !dbg !11769
  %idxprom1 = sext i32 %6 to i64, !dbg !11768
  %arrayidx2 = getelementptr inbounds i32, i32* %5, i64 %idxprom1, !dbg !11768
  %7 = load i32, i32* %arrayidx2, align 4, !dbg !11768
  %cmp3 = icmp ne i32 %4, %7, !dbg !11770
  br i1 %cmp3, label %if.then, label %if.end, !dbg !11771

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !11772
  br label %return, !dbg !11772

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !11773

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4, !dbg !11774
  %inc = add nsw i32 %8, 1, !dbg !11774
  store i32 %inc, i32* %i, align 4, !dbg !11774
  br label %for.cond, !dbg !11775, !llvm.loop !11776

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !11778
  br label %return, !dbg !11778

return:                                           ; preds = %for.end, %if.then
  %9 = load i8, i8* %retval, align 1, !dbg !11779
  ret i8 %9, !dbg !11779
}

; Function Attrs: noinline nounwind uwtable
define internal i32** @VEC_lambda_vector_heap_safe_push(%struct.VEC_lambda_vector_heap** %vec_, i32* %obj_) #0 !dbg !11780 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_vector_heap**, align 8
  %obj_.addr = alloca i32*, align 8
  store %struct.VEC_lambda_vector_heap** %vec_, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_heap*** %vec_.addr, metadata !11783, metadata !DIExpression()), !dbg !11784
  store i32* %obj_, i32** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %obj_.addr, metadata !11785, metadata !DIExpression()), !dbg !11784
  %0 = load %struct.VEC_lambda_vector_heap**, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8, !dbg !11784
  %call = call i32 @VEC_lambda_vector_heap_reserve(%struct.VEC_lambda_vector_heap** %0, i32 1), !dbg !11784
  %1 = load %struct.VEC_lambda_vector_heap**, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8, !dbg !11784
  %2 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %1, align 8, !dbg !11784
  %tobool = icmp ne %struct.VEC_lambda_vector_heap* %2, null, !dbg !11784
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11784

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_lambda_vector_heap**, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8, !dbg !11784
  %4 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %3, align 8, !dbg !11784
  %base = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %4, i32 0, i32 0, !dbg !11784
  br label %cond.end, !dbg !11784

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11784

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lambda_vector_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11784
  %5 = load i32*, i32** %obj_.addr, align 8, !dbg !11784
  %call1 = call i32** @VEC_lambda_vector_base_quick_push(%struct.VEC_lambda_vector_base* %cond, i32* %5), !dbg !11784
  ret i32** %call1, !dbg !11784
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_lambda_vector_heap_reserve(%struct.VEC_lambda_vector_heap** %vec_, i32 %alloc_) #0 !dbg !11786 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_vector_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_lambda_vector_heap** %vec_, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_heap*** %vec_.addr, metadata !11789, metadata !DIExpression()), !dbg !11790
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11791, metadata !DIExpression()), !dbg !11790
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !11792, metadata !DIExpression()), !dbg !11790
  %0 = load %struct.VEC_lambda_vector_heap**, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8, !dbg !11790
  %1 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %0, align 8, !dbg !11790
  %tobool = icmp ne %struct.VEC_lambda_vector_heap* %1, null, !dbg !11790
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11790

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_lambda_vector_heap**, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8, !dbg !11790
  %3 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %2, align 8, !dbg !11790
  %base = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %3, i32 0, i32 0, !dbg !11790
  br label %cond.end, !dbg !11790

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11790

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lambda_vector_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11790
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !11790
  %call = call i32 @VEC_lambda_vector_base_space(%struct.VEC_lambda_vector_base* %cond, i32 %4), !dbg !11790
  %tobool1 = icmp ne i32 %call, 0, !dbg !11790
  %lnot = xor i1 %tobool1, true, !dbg !11790
  %lnot.ext = zext i1 %lnot to i32, !dbg !11790
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !11790
  %5 = load i32, i32* %extend, align 4, !dbg !11793
  %tobool2 = icmp ne i32 %5, 0, !dbg !11793
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11790

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_lambda_vector_heap**, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8, !dbg !11793
  %7 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %6, align 8, !dbg !11793
  %8 = bitcast %struct.VEC_lambda_vector_heap* %7 to i8*, !dbg !11793
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !11793
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !11793
  %10 = bitcast i8* %call3 to %struct.VEC_lambda_vector_heap*, !dbg !11793
  %11 = load %struct.VEC_lambda_vector_heap**, %struct.VEC_lambda_vector_heap*** %vec_.addr, align 8, !dbg !11793
  store %struct.VEC_lambda_vector_heap* %10, %struct.VEC_lambda_vector_heap** %11, align 8, !dbg !11793
  br label %if.end, !dbg !11793

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !11790
  ret i32 %12, !dbg !11790
}

; Function Attrs: noinline nounwind uwtable
define internal i32** @VEC_lambda_vector_base_quick_push(%struct.VEC_lambda_vector_base* %vec_, i32* %obj_) #0 !dbg !11795 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_vector_base*, align 8
  %obj_.addr = alloca i32*, align 8
  %slot_ = alloca i32**, align 8
  store %struct.VEC_lambda_vector_base* %vec_, %struct.VEC_lambda_vector_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_base** %vec_.addr, metadata !11799, metadata !DIExpression()), !dbg !11800
  store i32* %obj_, i32** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %obj_.addr, metadata !11801, metadata !DIExpression()), !dbg !11800
  call void @llvm.dbg.declare(metadata i32*** %slot_, metadata !11802, metadata !DIExpression()), !dbg !11800
  %0 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !11800
  %num = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %0, i32 0, i32 0, !dbg !11800
  %1 = load i32, i32* %num, align 8, !dbg !11800
  %2 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !11800
  %alloc = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %2, i32 0, i32 1, !dbg !11800
  %3 = load i32, i32* %alloc, align 4, !dbg !11800
  %cmp = icmp ult i32 %1, %3, !dbg !11800
  %conv = zext i1 %cmp to i32, !dbg !11800
  %4 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !11800
  %vec = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %4, i32 0, i32 2, !dbg !11800
  %5 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !11800
  %num1 = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %5, i32 0, i32 0, !dbg !11800
  %6 = load i32, i32* %num1, align 8, !dbg !11800
  %inc = add i32 %6, 1, !dbg !11800
  store i32 %inc, i32* %num1, align 8, !dbg !11800
  %idxprom = zext i32 %6 to i64, !dbg !11800
  %arrayidx = getelementptr inbounds [1 x i32*], [1 x i32*]* %vec, i64 0, i64 %idxprom, !dbg !11800
  store i32** %arrayidx, i32*** %slot_, align 8, !dbg !11800
  %7 = load i32*, i32** %obj_.addr, align 8, !dbg !11800
  %8 = load i32**, i32*** %slot_, align 8, !dbg !11800
  store i32* %7, i32** %8, align 8, !dbg !11800
  %9 = load i32**, i32*** %slot_, align 8, !dbg !11800
  ret i32** %9, !dbg !11800
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_lambda_vector_base_space(%struct.VEC_lambda_vector_base* %vec_, i32 %alloc_) #0 !dbg !11803 {
entry:
  %vec_.addr = alloca %struct.VEC_lambda_vector_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_lambda_vector_base* %vec_, %struct.VEC_lambda_vector_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_lambda_vector_base** %vec_.addr, metadata !11806, metadata !DIExpression()), !dbg !11807
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11808, metadata !DIExpression()), !dbg !11807
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11807
  %cmp = icmp sge i32 %0, 0, !dbg !11807
  %conv = zext i1 %cmp to i32, !dbg !11807
  %1 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !11807
  %tobool = icmp ne %struct.VEC_lambda_vector_base* %1, null, !dbg !11807
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11807

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !11807
  %alloc = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %2, i32 0, i32 1, !dbg !11807
  %3 = load i32, i32* %alloc, align 4, !dbg !11807
  %4 = load %struct.VEC_lambda_vector_base*, %struct.VEC_lambda_vector_base** %vec_.addr, align 8, !dbg !11807
  %num = getelementptr inbounds %struct.VEC_lambda_vector_base, %struct.VEC_lambda_vector_base* %4, i32 0, i32 0, !dbg !11807
  %5 = load i32, i32* %num, align 8, !dbg !11807
  %sub = sub i32 %3, %5, !dbg !11807
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !11807
  %cmp1 = icmp uge i32 %sub, %6, !dbg !11807
  %conv2 = zext i1 %cmp1 to i32, !dbg !11807
  br label %cond.end, !dbg !11807

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !11807
  %tobool3 = icmp ne i32 %7, 0, !dbg !11807
  %lnot = xor i1 %tobool3, true, !dbg !11807
  %lnot.ext = zext i1 %lnot to i32, !dbg !11807
  br label %cond.end, !dbg !11807

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !11807
  ret i32 %cond, !dbg !11807
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @affine_function_zero_p(%struct.VEC_tree_heap* %fn) #0 !dbg !11809 {
entry:
  %fn.addr = alloca %struct.VEC_tree_heap*, align 8
  store %struct.VEC_tree_heap* %fn, %struct.VEC_tree_heap** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fn.addr, metadata !11810, metadata !DIExpression()), !dbg !11811
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn.addr, align 8, !dbg !11812
  %call = call %union.tree_node* @affine_function_base(%struct.VEC_tree_heap* %0), !dbg !11813
  %call1 = call i32 @integer_zerop(%union.tree_node* %call), !dbg !11814
  %tobool = icmp ne i32 %call1, 0, !dbg !11814
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !11815

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fn.addr, align 8, !dbg !11816
  %call2 = call zeroext i8 @affine_function_constant_p(%struct.VEC_tree_heap* %1), !dbg !11817
  %conv = zext i8 %call2 to i32, !dbg !11817
  %tobool3 = icmp ne i32 %conv, 0, !dbg !11815
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !11818
  %land.ext = zext i1 %2 to i32, !dbg !11815
  %conv4 = trunc i32 %land.ext to i8, !dbg !11819
  ret i8 %conv4, !dbg !11820
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_innermost_unit_dist_vector(%struct.data_dependence_relation* %ddr) #0 !dbg !11821 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %dist_v = alloca i32*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !11822, metadata !DIExpression()), !dbg !11823
  call void @llvm.dbg.declare(metadata i32** %dist_v, metadata !11824, metadata !DIExpression()), !dbg !11825
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11826
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 4, !dbg !11826
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !11826
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !11826
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11826

cond.true:                                        ; preds = %entry
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11826
  %loop_nest1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 4, !dbg !11826
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest1, align 8, !dbg !11826
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %3, i32 0, i32 0, !dbg !11826
  br label %cond.end, !dbg !11826

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11826

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11826
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !11826
  %call2 = call i32* @lambda_vector_new(i32 %call), !dbg !11827
  store i32* %call2, i32** %dist_v, align 8, !dbg !11825
  %4 = load i32*, i32** %dist_v, align 8, !dbg !11828
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11829
  %inner_loop = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 7, !dbg !11829
  %6 = load i32, i32* %inner_loop, align 8, !dbg !11829
  %idxprom = zext i32 %6 to i64, !dbg !11828
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom, !dbg !11828
  store i32 1, i32* %arrayidx, align 4, !dbg !11830
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11831
  %8 = load i32*, i32** %dist_v, align 8, !dbg !11832
  call void @save_dist_v(%struct.data_dependence_relation* %7, i32* %8), !dbg !11833
  ret void, !dbg !11834
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_multivariate_self_dist(%struct.data_dependence_relation* %ddr, %union.tree_node* %c_2) #0 !dbg !11835 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %c_2.addr = alloca %union.tree_node*, align 8
  %x_1 = alloca i32, align 4
  %x_2 = alloca i32, align 4
  %c_1 = alloca %union.tree_node*, align 8
  %c_0 = alloca %union.tree_node*, align 8
  %dist_v = alloca i32*, align 8
  %v1 = alloca i32, align 4
  %v2 = alloca i32, align 4
  %cd = alloca i32, align 4
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !11836, metadata !DIExpression()), !dbg !11837
  store %union.tree_node* %c_2, %union.tree_node** %c_2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %c_2.addr, metadata !11838, metadata !DIExpression()), !dbg !11839
  call void @llvm.dbg.declare(metadata i32* %x_1, metadata !11840, metadata !DIExpression()), !dbg !11841
  call void @llvm.dbg.declare(metadata i32* %x_2, metadata !11842, metadata !DIExpression()), !dbg !11843
  call void @llvm.dbg.declare(metadata %union.tree_node** %c_1, metadata !11844, metadata !DIExpression()), !dbg !11845
  %0 = load %union.tree_node*, %union.tree_node** %c_2.addr, align 8, !dbg !11846
  %exp = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !11846
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11846
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !11846
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11846
  store %union.tree_node* %1, %union.tree_node** %c_1, align 8, !dbg !11845
  call void @llvm.dbg.declare(metadata %union.tree_node** %c_0, metadata !11847, metadata !DIExpression()), !dbg !11848
  %2 = load %union.tree_node*, %union.tree_node** %c_1, align 8, !dbg !11849
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !11849
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !11849
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 1, !dbg !11849
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !11849
  store %union.tree_node* %3, %union.tree_node** %c_0, align 8, !dbg !11848
  call void @llvm.dbg.declare(metadata i32** %dist_v, metadata !11850, metadata !DIExpression()), !dbg !11851
  call void @llvm.dbg.declare(metadata i32* %v1, metadata !11852, metadata !DIExpression()), !dbg !11853
  call void @llvm.dbg.declare(metadata i32* %v2, metadata !11854, metadata !DIExpression()), !dbg !11855
  call void @llvm.dbg.declare(metadata i32* %cd, metadata !11856, metadata !DIExpression()), !dbg !11857
  %4 = load %union.tree_node*, %union.tree_node** %c_0, align 8, !dbg !11858
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !11858
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !11858
  %bf.load = load i64, i64* %5, align 8, !dbg !11858
  %bf.clear = and i64 %bf.load, 65535, !dbg !11858
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11858
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !11860
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !11861

lor.lhs.false:                                    ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %c_1, align 8, !dbg !11862
  %exp4 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !11862
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !11862
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 2, !dbg !11862
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !11862
  %base7 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !11862
  %8 = bitcast %struct.tree_base* %base7 to i64*, !dbg !11862
  %bf.load8 = load i64, i64* %8, align 8, !dbg !11862
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !11862
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !11862
  %cmp11 = icmp ne i32 %bf.cast10, 23, !dbg !11863
  br i1 %cmp11, label %if.then, label %lor.lhs.false12, !dbg !11864

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %c_2.addr, align 8, !dbg !11865
  %exp13 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !11865
  %operands14 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp13, i32 0, i32 3, !dbg !11865
  %arrayidx15 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands14, i64 0, i64 2, !dbg !11865
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx15, align 8, !dbg !11865
  %base16 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !11865
  %11 = bitcast %struct.tree_base* %base16 to i64*, !dbg !11865
  %bf.load17 = load i64, i64* %11, align 8, !dbg !11865
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !11865
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !11865
  %cmp20 = icmp ne i32 %bf.cast19, 23, !dbg !11866
  br i1 %cmp20, label %if.then, label %if.end, !dbg !11867

if.then:                                          ; preds = %lor.lhs.false12, %lor.lhs.false, %entry
  %12 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11868
  %affine_p = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %12, i32 0, i32 9, !dbg !11868
  store i8 0, i8* %affine_p, align 1, !dbg !11870
  br label %return, !dbg !11871

if.end:                                           ; preds = %lor.lhs.false12
  %13 = load %union.tree_node*, %union.tree_node** %c_2.addr, align 8, !dbg !11872
  %exp21 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !11872
  %operands22 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp21, i32 0, i32 3, !dbg !11872
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands22, i64 0, i64 0, !dbg !11872
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx23, align 8, !dbg !11872
  %int_cst = bitcast %union.tree_node* %14 to %struct.tree_int_cst*, !dbg !11872
  %int_cst24 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !11872
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst24, i32 0, i32 0, !dbg !11872
  %15 = load i64, i64* %low, align 8, !dbg !11872
  %conv = trunc i64 %15 to i32, !dbg !11872
  %16 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11873
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %16, i32 0, i32 4, !dbg !11873
  %17 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !11873
  %call = call i32 @index_in_loop_nest(i32 %conv, %struct.VEC_loop_p_heap* %17), !dbg !11874
  store i32 %call, i32* %x_2, align 4, !dbg !11875
  %18 = load %union.tree_node*, %union.tree_node** %c_1, align 8, !dbg !11876
  %exp25 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !11876
  %operands26 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp25, i32 0, i32 3, !dbg !11876
  %arrayidx27 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands26, i64 0, i64 0, !dbg !11876
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx27, align 8, !dbg !11876
  %int_cst28 = bitcast %union.tree_node* %19 to %struct.tree_int_cst*, !dbg !11876
  %int_cst29 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst28, i32 0, i32 1, !dbg !11876
  %low30 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst29, i32 0, i32 0, !dbg !11876
  %20 = load i64, i64* %low30, align 8, !dbg !11876
  %conv31 = trunc i64 %20 to i32, !dbg !11876
  %21 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11877
  %loop_nest32 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %21, i32 0, i32 4, !dbg !11877
  %22 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest32, align 8, !dbg !11877
  %call33 = call i32 @index_in_loop_nest(i32 %conv31, %struct.VEC_loop_p_heap* %22), !dbg !11878
  store i32 %call33, i32* %x_1, align 4, !dbg !11879
  %23 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11880
  %loop_nest34 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %23, i32 0, i32 4, !dbg !11880
  %24 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest34, align 8, !dbg !11880
  %tobool = icmp ne %struct.VEC_loop_p_heap* %24, null, !dbg !11880
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11880

cond.true:                                        ; preds = %if.end
  %25 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11880
  %loop_nest35 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %25, i32 0, i32 4, !dbg !11880
  %26 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest35, align 8, !dbg !11880
  %base36 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %26, i32 0, i32 0, !dbg !11880
  br label %cond.end, !dbg !11880

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !11880

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base36, %cond.true ], [ null, %cond.false ], !dbg !11880
  %call37 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !11880
  %call38 = call i32* @lambda_vector_new(i32 %call37), !dbg !11881
  store i32* %call38, i32** %dist_v, align 8, !dbg !11882
  %27 = load %union.tree_node*, %union.tree_node** %c_1, align 8, !dbg !11883
  %exp39 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !11883
  %operands40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp39, i32 0, i32 3, !dbg !11883
  %arrayidx41 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands40, i64 0, i64 2, !dbg !11883
  %28 = load %union.tree_node*, %union.tree_node** %arrayidx41, align 8, !dbg !11883
  %call42 = call i64 @int_cst_value(%union.tree_node* %28), !dbg !11884
  %conv43 = trunc i64 %call42 to i32, !dbg !11884
  store i32 %conv43, i32* %v1, align 4, !dbg !11885
  %29 = load %union.tree_node*, %union.tree_node** %c_2.addr, align 8, !dbg !11886
  %exp44 = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !11886
  %operands45 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp44, i32 0, i32 3, !dbg !11886
  %arrayidx46 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands45, i64 0, i64 2, !dbg !11886
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx46, align 8, !dbg !11886
  %call47 = call i64 @int_cst_value(%union.tree_node* %30), !dbg !11887
  %conv48 = trunc i64 %call47 to i32, !dbg !11887
  store i32 %conv48, i32* %v2, align 4, !dbg !11888
  %31 = load i32, i32* %v1, align 4, !dbg !11889
  %32 = load i32, i32* %v2, align 4, !dbg !11890
  %call49 = call i32 @gcd(i32 %31, i32 %32), !dbg !11891
  store i32 %call49, i32* %cd, align 4, !dbg !11892
  %33 = load i32, i32* %cd, align 4, !dbg !11893
  %34 = load i32, i32* %v1, align 4, !dbg !11894
  %div = sdiv i32 %34, %33, !dbg !11894
  store i32 %div, i32* %v1, align 4, !dbg !11894
  %35 = load i32, i32* %cd, align 4, !dbg !11895
  %36 = load i32, i32* %v2, align 4, !dbg !11896
  %div50 = sdiv i32 %36, %35, !dbg !11896
  store i32 %div50, i32* %v2, align 4, !dbg !11896
  %37 = load i32, i32* %v2, align 4, !dbg !11897
  %cmp51 = icmp slt i32 %37, 0, !dbg !11899
  br i1 %cmp51, label %if.then53, label %if.end55, !dbg !11900

if.then53:                                        ; preds = %cond.end
  %38 = load i32, i32* %v2, align 4, !dbg !11901
  %sub = sub nsw i32 0, %38, !dbg !11903
  store i32 %sub, i32* %v2, align 4, !dbg !11904
  %39 = load i32, i32* %v1, align 4, !dbg !11905
  %sub54 = sub nsw i32 0, %39, !dbg !11906
  store i32 %sub54, i32* %v1, align 4, !dbg !11907
  br label %if.end55, !dbg !11908

if.end55:                                         ; preds = %if.then53, %cond.end
  %40 = load i32, i32* %v2, align 4, !dbg !11909
  %41 = load i32*, i32** %dist_v, align 8, !dbg !11910
  %42 = load i32, i32* %x_1, align 4, !dbg !11911
  %idxprom = sext i32 %42 to i64, !dbg !11910
  %arrayidx56 = getelementptr inbounds i32, i32* %41, i64 %idxprom, !dbg !11910
  store i32 %40, i32* %arrayidx56, align 4, !dbg !11912
  %43 = load i32, i32* %v1, align 4, !dbg !11913
  %sub57 = sub nsw i32 0, %43, !dbg !11914
  %44 = load i32*, i32** %dist_v, align 8, !dbg !11915
  %45 = load i32, i32* %x_2, align 4, !dbg !11916
  %idxprom58 = sext i32 %45 to i64, !dbg !11915
  %arrayidx59 = getelementptr inbounds i32, i32* %44, i64 %idxprom58, !dbg !11915
  store i32 %sub57, i32* %arrayidx59, align 4, !dbg !11917
  %46 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11918
  %47 = load i32*, i32** %dist_v, align 8, !dbg !11919
  call void @save_dist_v(%struct.data_dependence_relation* %46, i32* %47), !dbg !11920
  %48 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11921
  %49 = load i32*, i32** %dist_v, align 8, !dbg !11922
  %50 = load i32, i32* %x_1, align 4, !dbg !11923
  call void @add_outer_distances(%struct.data_dependence_relation* %48, i32* %49, i32 %50), !dbg !11924
  br label %return, !dbg !11925

return:                                           ; preds = %if.end55, %if.then
  ret void, !dbg !11925
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @index_in_loop_nest(i32 %var, %struct.VEC_loop_p_heap* %loop_nest) #0 !dbg !11926 {
entry:
  %var.addr = alloca i32, align 4
  %loop_nest.addr = alloca %struct.VEC_loop_p_heap*, align 8
  %loopi = alloca %struct.loop*, align 8
  %var_index = alloca i32, align 4
  store i32 %var, i32* %var.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %var.addr, metadata !11929, metadata !DIExpression()), !dbg !11930
  store %struct.VEC_loop_p_heap* %loop_nest, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap** %loop_nest.addr, metadata !11931, metadata !DIExpression()), !dbg !11932
  call void @llvm.dbg.declare(metadata %struct.loop** %loopi, metadata !11933, metadata !DIExpression()), !dbg !11934
  call void @llvm.dbg.declare(metadata i32* %var_index, metadata !11935, metadata !DIExpression()), !dbg !11936
  store i32 0, i32* %var_index, align 4, !dbg !11937
  br label %for.cond, !dbg !11939

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8, !dbg !11940
  %tobool = icmp ne %struct.VEC_loop_p_heap* %0, null, !dbg !11940
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11940

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest.addr, align 8, !dbg !11940
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %1, i32 0, i32 0, !dbg !11940
  br label %cond.end, !dbg !11940

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !11940

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11940
  %2 = load i32, i32* %var_index, align 4, !dbg !11940
  %call = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond, i32 %2, %struct.loop** %loopi), !dbg !11940
  %tobool1 = icmp ne i32 %call, 0, !dbg !11942
  br i1 %tobool1, label %for.body, label %for.end, !dbg !11942

for.body:                                         ; preds = %cond.end
  %3 = load %struct.loop*, %struct.loop** %loopi, align 8, !dbg !11943
  %num = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 0, !dbg !11945
  %4 = load i32, i32* %num, align 8, !dbg !11945
  %5 = load i32, i32* %var.addr, align 4, !dbg !11946
  %cmp = icmp eq i32 %4, %5, !dbg !11947
  br i1 %cmp, label %if.then, label %if.end, !dbg !11948

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !11949

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !11946

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %var_index, align 4, !dbg !11950
  %inc = add nsw i32 %6, 1, !dbg !11950
  store i32 %inc, i32* %var_index, align 4, !dbg !11950
  br label %for.cond, !dbg !11951, !llvm.loop !11952

for.end:                                          ; preds = %if.then, %cond.end
  %7 = load i32, i32* %var_index, align 4, !dbg !11954
  ret i32 %7, !dbg !11955
}

; Function Attrs: noinline nounwind uwtable
define internal void @non_affine_dependence_relation(%struct.data_dependence_relation* %ddr) #0 !dbg !11956 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !11957, metadata !DIExpression()), !dbg !11958
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11959
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !11959
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !11961

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !11962
  %and = and i32 %1, 8, !dbg !11963
  %tobool1 = icmp ne i32 %and, 0, !dbg !11963
  br i1 %tobool1, label %if.then, label %if.end, !dbg !11964

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11965
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.127, i64 0, i64 0)), !dbg !11966
  br label %if.end, !dbg !11966

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11967
  %affine_p = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %3, i32 0, i32 9, !dbg !11967
  store i8 0, i8* %affine_p, align 1, !dbg !11968
  ret void, !dbg !11969
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @dir_from_dist(i32 %dist) #0 !dbg !11970 {
entry:
  %retval = alloca i32, align 4
  %dist.addr = alloca i32, align 4
  store i32 %dist, i32* %dist.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dist.addr, metadata !11973, metadata !DIExpression()), !dbg !11974
  %0 = load i32, i32* %dist.addr, align 4, !dbg !11975
  %cmp = icmp sgt i32 %0, 0, !dbg !11977
  br i1 %cmp, label %if.then, label %if.else, !dbg !11978

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !11979
  br label %return, !dbg !11979

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %dist.addr, align 4, !dbg !11980
  %cmp1 = icmp slt i32 %1, 0, !dbg !11982
  br i1 %cmp1, label %if.then2, label %if.else3, !dbg !11983

if.then2:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !11984
  br label %return, !dbg !11984

if.else3:                                         ; preds = %if.else
  store i32 2, i32* %retval, align 4, !dbg !11985
  br label %return, !dbg !11985

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !11986
  ret i32 %2, !dbg !11986
}

; Function Attrs: noinline nounwind uwtable
define internal void @save_dir_v(%struct.data_dependence_relation* %ddr, i32* %dir_v) #0 !dbg !11987 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %dir_v.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %v = alloca i32*, align 8
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !11988, metadata !DIExpression()), !dbg !11989
  store i32* %dir_v, i32** %dir_v.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %dir_v.addr, metadata !11990, metadata !DIExpression()), !dbg !11991
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11992, metadata !DIExpression()), !dbg !11993
  call void @llvm.dbg.declare(metadata i32** %v, metadata !11994, metadata !DIExpression()), !dbg !11995
  store i32 0, i32* %i, align 4, !dbg !11996
  br label %for.cond, !dbg !11998

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11999
  %dir_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 5, !dbg !11999
  %1 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects, align 8, !dbg !11999
  %tobool = icmp ne %struct.VEC_lambda_vector_heap* %1, null, !dbg !11999
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11999

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !11999
  %dir_vects1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 5, !dbg !11999
  %3 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dir_vects1, align 8, !dbg !11999
  %base = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %3, i32 0, i32 0, !dbg !11999
  br label %cond.end, !dbg !11999

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !11999

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lambda_vector_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11999
  %4 = load i32, i32* %i, align 4, !dbg !11999
  %call = call i32 @VEC_lambda_vector_base_iterate(%struct.VEC_lambda_vector_base* %cond, i32 %4, i32** %v), !dbg !11999
  %tobool2 = icmp ne i32 %call, 0, !dbg !12001
  br i1 %tobool2, label %for.body, label %for.end, !dbg !12001

for.body:                                         ; preds = %cond.end
  %5 = load i32*, i32** %v, align 8, !dbg !12002
  %6 = load i32*, i32** %dir_v.addr, align 8, !dbg !12004
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12005
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 4, !dbg !12005
  %8 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !12005
  %tobool3 = icmp ne %struct.VEC_loop_p_heap* %8, null, !dbg !12005
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !12005

cond.true4:                                       ; preds = %for.body
  %9 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12005
  %loop_nest5 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %9, i32 0, i32 4, !dbg !12005
  %10 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest5, align 8, !dbg !12005
  %base6 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %10, i32 0, i32 0, !dbg !12005
  br label %cond.end8, !dbg !12005

cond.false7:                                      ; preds = %for.body
  br label %cond.end8, !dbg !12005

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !12005
  %call10 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond9), !dbg !12005
  %call11 = call zeroext i8 @lambda_vector_equal(i32* %5, i32* %6, i32 %call10), !dbg !12006
  %tobool12 = icmp ne i8 %call11, 0, !dbg !12006
  br i1 %tobool12, label %if.then, label %if.end, !dbg !12007

if.then:                                          ; preds = %cond.end8
  br label %return, !dbg !12008

if.end:                                           ; preds = %cond.end8
  br label %for.inc, !dbg !12009

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !12010
  %inc = add i32 %11, 1, !dbg !12010
  store i32 %inc, i32* %i, align 4, !dbg !12010
  br label %for.cond, !dbg !12011, !llvm.loop !12012

for.end:                                          ; preds = %cond.end
  %12 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12014
  %dir_vects13 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %12, i32 0, i32 5, !dbg !12014
  %13 = load i32*, i32** %dir_v.addr, align 8, !dbg !12014
  %call14 = call i32** @VEC_lambda_vector_heap_safe_push(%struct.VEC_lambda_vector_heap** %dir_vects13, i32* %13), !dbg !12014
  br label %return, !dbg !12015

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !12015
}

declare dso_local %struct.omega_pb_d* @omega_alloc_problem(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @init_omega_for_ddr_1(%struct.data_reference* %dra, %struct.data_reference* %drb, %struct.data_dependence_relation* %ddr, %struct.omega_pb_d* %pb, i8* %maybe_dependent) #0 !dbg !12016 {
entry:
  %retval = alloca i8, align 1
  %dra.addr = alloca %struct.data_reference*, align 8
  %drb.addr = alloca %struct.data_reference*, align 8
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %pb.addr = alloca %struct.omega_pb_d*, align 8
  %maybe_dependent.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %ineq = alloca i32, align 4
  %loopi = alloca %struct.loop*, align 8
  %nb_loops = alloca i32, align 4
  %nbi = alloca i64, align 8
  store %struct.data_reference* %dra, %struct.data_reference** %dra.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dra.addr, metadata !12019, metadata !DIExpression()), !dbg !12020
  store %struct.data_reference* %drb, %struct.data_reference** %drb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %drb.addr, metadata !12021, metadata !DIExpression()), !dbg !12022
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !12023, metadata !DIExpression()), !dbg !12024
  store %struct.omega_pb_d* %pb, %struct.omega_pb_d** %pb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.omega_pb_d** %pb.addr, metadata !12025, metadata !DIExpression()), !dbg !12026
  store i8* %maybe_dependent, i8** %maybe_dependent.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %maybe_dependent.addr, metadata !12027, metadata !DIExpression()), !dbg !12028
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12029, metadata !DIExpression()), !dbg !12030
  call void @llvm.dbg.declare(metadata i32* %ineq, metadata !12031, metadata !DIExpression()), !dbg !12032
  call void @llvm.dbg.declare(metadata %struct.loop** %loopi, metadata !12033, metadata !DIExpression()), !dbg !12034
  call void @llvm.dbg.declare(metadata i32* %nb_loops, metadata !12035, metadata !DIExpression()), !dbg !12036
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12037
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 4, !dbg !12037
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !12037
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !12037
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12037

cond.true:                                        ; preds = %entry
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12037
  %loop_nest1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 4, !dbg !12037
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest1, align 8, !dbg !12037
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %3, i32 0, i32 0, !dbg !12037
  br label %cond.end, !dbg !12037

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12037

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12037
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !12037
  store i32 %call, i32* %nb_loops, align 4, !dbg !12036
  store i32 0, i32* %i, align 4, !dbg !12038
  br label %for.cond, !dbg !12040

for.cond:                                         ; preds = %for.inc, %cond.end
  %4 = load i32, i32* %i, align 4, !dbg !12041
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12043
  %subscripts = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 3, !dbg !12043
  %6 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts, align 8, !dbg !12043
  %tobool2 = icmp ne %struct.VEC_subscript_p_heap* %6, null, !dbg !12043
  br i1 %tobool2, label %cond.true3, label %cond.false6, !dbg !12043

cond.true3:                                       ; preds = %for.cond
  %7 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12043
  %subscripts4 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %7, i32 0, i32 3, !dbg !12043
  %8 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %subscripts4, align 8, !dbg !12043
  %base5 = getelementptr inbounds %struct.VEC_subscript_p_heap, %struct.VEC_subscript_p_heap* %8, i32 0, i32 0, !dbg !12043
  br label %cond.end7, !dbg !12043

cond.false6:                                      ; preds = %for.cond
  br label %cond.end7, !dbg !12043

cond.end7:                                        ; preds = %cond.false6, %cond.true3
  %cond8 = phi %struct.VEC_subscript_p_base* [ %base5, %cond.true3 ], [ null, %cond.false6 ], !dbg !12043
  %call9 = call i32 @VEC_subscript_p_base_length(%struct.VEC_subscript_p_base* %cond8), !dbg !12043
  %cmp = icmp ult i32 %4, %call9, !dbg !12044
  br i1 %cmp, label %for.body, label %for.end, !dbg !12045

for.body:                                         ; preds = %cond.end7
  %9 = load %struct.data_reference*, %struct.data_reference** %dra.addr, align 8, !dbg !12046
  %indices = getelementptr inbounds %struct.data_reference, %struct.data_reference* %9, i32 0, i32 5, !dbg !12046
  %access_fns = getelementptr inbounds %struct.indices, %struct.indices* %indices, i32 0, i32 1, !dbg !12046
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns, align 8, !dbg !12046
  %tobool10 = icmp ne %struct.VEC_tree_heap* %10, null, !dbg !12046
  br i1 %tobool10, label %cond.true11, label %cond.false15, !dbg !12046

cond.true11:                                      ; preds = %for.body
  %11 = load %struct.data_reference*, %struct.data_reference** %dra.addr, align 8, !dbg !12046
  %indices12 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %11, i32 0, i32 5, !dbg !12046
  %access_fns13 = getelementptr inbounds %struct.indices, %struct.indices* %indices12, i32 0, i32 1, !dbg !12046
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns13, align 8, !dbg !12046
  %base14 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %12, i32 0, i32 0, !dbg !12046
  br label %cond.end16, !dbg !12046

cond.false15:                                     ; preds = %for.body
  br label %cond.end16, !dbg !12046

cond.end16:                                       ; preds = %cond.false15, %cond.true11
  %cond17 = phi %struct.VEC_tree_base* [ %base14, %cond.true11 ], [ null, %cond.false15 ], !dbg !12046
  %13 = load i32, i32* %i, align 4, !dbg !12046
  %call18 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond17, i32 %13), !dbg !12046
  %14 = load %struct.data_reference*, %struct.data_reference** %drb.addr, align 8, !dbg !12049
  %indices19 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %14, i32 0, i32 5, !dbg !12049
  %access_fns20 = getelementptr inbounds %struct.indices, %struct.indices* %indices19, i32 0, i32 1, !dbg !12049
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns20, align 8, !dbg !12049
  %tobool21 = icmp ne %struct.VEC_tree_heap* %15, null, !dbg !12049
  br i1 %tobool21, label %cond.true22, label %cond.false26, !dbg !12049

cond.true22:                                      ; preds = %cond.end16
  %16 = load %struct.data_reference*, %struct.data_reference** %drb.addr, align 8, !dbg !12049
  %indices23 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %16, i32 0, i32 5, !dbg !12049
  %access_fns24 = getelementptr inbounds %struct.indices, %struct.indices* %indices23, i32 0, i32 1, !dbg !12049
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %access_fns24, align 8, !dbg !12049
  %base25 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i32 0, i32 0, !dbg !12049
  br label %cond.end27, !dbg !12049

cond.false26:                                     ; preds = %cond.end16
  br label %cond.end27, !dbg !12049

cond.end27:                                       ; preds = %cond.false26, %cond.true22
  %cond28 = phi %struct.VEC_tree_base* [ %base25, %cond.true22 ], [ null, %cond.false26 ], !dbg !12049
  %18 = load i32, i32* %i, align 4, !dbg !12049
  %call29 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond28, i32 %18), !dbg !12049
  %19 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12050
  %20 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12051
  %21 = load i8*, i8** %maybe_dependent.addr, align 8, !dbg !12052
  %call30 = call zeroext i8 @omega_setup_subscript(%union.tree_node* %call18, %union.tree_node* %call29, %struct.data_dependence_relation* %19, %struct.omega_pb_d* %20, i8* %21), !dbg !12053
  %tobool31 = icmp ne i8 %call30, 0, !dbg !12053
  br i1 %tobool31, label %if.else, label %if.then, !dbg !12054

if.then:                                          ; preds = %cond.end27
  store i8 0, i8* %retval, align 1, !dbg !12055
  br label %return, !dbg !12055

if.else:                                          ; preds = %cond.end27
  %22 = load i8*, i8** %maybe_dependent.addr, align 8, !dbg !12056
  %23 = load i8, i8* %22, align 1, !dbg !12058
  %conv = zext i8 %23 to i32, !dbg !12058
  %cmp32 = icmp eq i32 %conv, 0, !dbg !12059
  br i1 %cmp32, label %if.then34, label %if.end, !dbg !12060

if.then34:                                        ; preds = %if.else
  %24 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !12061
  %25 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12063
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %25, i32 0, i32 2, !dbg !12063
  store %union.tree_node* %24, %union.tree_node** %are_dependent, align 8, !dbg !12064
  store i8 1, i8* %retval, align 1, !dbg !12065
  br label %return, !dbg !12065

if.end:                                           ; preds = %if.else
  br label %if.end35

if.end35:                                         ; preds = %if.end
  br label %for.inc, !dbg !12066

for.inc:                                          ; preds = %if.end35
  %26 = load i32, i32* %i, align 4, !dbg !12067
  %inc = add i32 %26, 1, !dbg !12067
  store i32 %inc, i32* %i, align 4, !dbg !12067
  br label %for.cond, !dbg !12068, !llvm.loop !12069

for.end:                                          ; preds = %cond.end7
  store i32 0, i32* %i, align 4, !dbg !12071
  br label %for.cond36, !dbg !12073

for.cond36:                                       ; preds = %for.inc140, %for.end
  %27 = load i32, i32* %i, align 4, !dbg !12074
  %28 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12076
  %inner_loop = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %28, i32 0, i32 7, !dbg !12076
  %29 = load i32, i32* %inner_loop, align 8, !dbg !12076
  %cmp37 = icmp ule i32 %27, %29, !dbg !12077
  br i1 %cmp37, label %land.rhs, label %land.end, !dbg !12078

land.rhs:                                         ; preds = %for.cond36
  %30 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12079
  %loop_nest39 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %30, i32 0, i32 4, !dbg !12079
  %31 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest39, align 8, !dbg !12079
  %tobool40 = icmp ne %struct.VEC_loop_p_heap* %31, null, !dbg !12079
  br i1 %tobool40, label %cond.true41, label %cond.false44, !dbg !12079

cond.true41:                                      ; preds = %land.rhs
  %32 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12079
  %loop_nest42 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %32, i32 0, i32 4, !dbg !12079
  %33 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest42, align 8, !dbg !12079
  %base43 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %33, i32 0, i32 0, !dbg !12079
  br label %cond.end45, !dbg !12079

cond.false44:                                     ; preds = %land.rhs
  br label %cond.end45, !dbg !12079

cond.end45:                                       ; preds = %cond.false44, %cond.true41
  %cond46 = phi %struct.VEC_loop_p_base* [ %base43, %cond.true41 ], [ null, %cond.false44 ], !dbg !12079
  %34 = load i32, i32* %i, align 4, !dbg !12079
  %call47 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond46, i32 %34, %struct.loop** %loopi), !dbg !12079
  %tobool48 = icmp ne i32 %call47, 0, !dbg !12078
  br label %land.end

land.end:                                         ; preds = %cond.end45, %for.cond36
  %35 = phi i1 [ false, %for.cond36 ], [ %tobool48, %cond.end45 ], !dbg !12080
  br i1 %35, label %for.body49, label %for.end142, !dbg !12081

for.body49:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata i64* %nbi, metadata !12082, metadata !DIExpression()), !dbg !12084
  %36 = load %struct.loop*, %struct.loop** %loopi, align 8, !dbg !12085
  %call50 = call i64 @estimated_loop_iterations_int(%struct.loop* %36, i8 zeroext 0), !dbg !12086
  store i64 %call50, i64* %nbi, align 8, !dbg !12084
  %37 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12087
  %call51 = call i32 @omega_add_zero_geq(%struct.omega_pb_d* %37, i32 0), !dbg !12088
  store i32 %call51, i32* %ineq, align 4, !dbg !12089
  %38 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12090
  %geqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %38, i32 0, i32 10, !dbg !12091
  %39 = load %struct.eqn_d*, %struct.eqn_d** %geqs, align 8, !dbg !12091
  %40 = load i32, i32* %ineq, align 4, !dbg !12092
  %idxprom = sext i32 %40 to i64, !dbg !12090
  %arrayidx = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %39, i64 %idxprom, !dbg !12090
  %coef = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx, i32 0, i32 3, !dbg !12093
  %41 = load i32*, i32** %coef, align 8, !dbg !12093
  %42 = load i32, i32* %i, align 4, !dbg !12094
  %43 = load i32, i32* %nb_loops, align 4, !dbg !12095
  %add = add i32 %42, %43, !dbg !12096
  %add52 = add i32 %add, 1, !dbg !12097
  %idxprom53 = zext i32 %add52 to i64, !dbg !12090
  %arrayidx54 = getelementptr inbounds i32, i32* %41, i64 %idxprom53, !dbg !12090
  store i32 1, i32* %arrayidx54, align 4, !dbg !12098
  %44 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12099
  %call55 = call i32 @omega_add_zero_geq(%struct.omega_pb_d* %44, i32 0), !dbg !12100
  store i32 %call55, i32* %ineq, align 4, !dbg !12101
  %45 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12102
  %geqs56 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %45, i32 0, i32 10, !dbg !12103
  %46 = load %struct.eqn_d*, %struct.eqn_d** %geqs56, align 8, !dbg !12103
  %47 = load i32, i32* %ineq, align 4, !dbg !12104
  %idxprom57 = sext i32 %47 to i64, !dbg !12102
  %arrayidx58 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %46, i64 %idxprom57, !dbg !12102
  %coef59 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx58, i32 0, i32 3, !dbg !12105
  %48 = load i32*, i32** %coef59, align 8, !dbg !12105
  %49 = load i32, i32* %i, align 4, !dbg !12106
  %50 = load i32, i32* %nb_loops, align 4, !dbg !12107
  %add60 = add i32 %49, %50, !dbg !12108
  %add61 = add i32 %add60, 1, !dbg !12109
  %idxprom62 = zext i32 %add61 to i64, !dbg !12102
  %arrayidx63 = getelementptr inbounds i32, i32* %48, i64 %idxprom62, !dbg !12102
  store i32 1, i32* %arrayidx63, align 4, !dbg !12110
  %51 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12111
  %geqs64 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %51, i32 0, i32 10, !dbg !12112
  %52 = load %struct.eqn_d*, %struct.eqn_d** %geqs64, align 8, !dbg !12112
  %53 = load i32, i32* %ineq, align 4, !dbg !12113
  %idxprom65 = sext i32 %53 to i64, !dbg !12111
  %arrayidx66 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %52, i64 %idxprom65, !dbg !12111
  %coef67 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx66, i32 0, i32 3, !dbg !12114
  %54 = load i32*, i32** %coef67, align 8, !dbg !12114
  %55 = load i32, i32* %i, align 4, !dbg !12115
  %add68 = add i32 %55, 1, !dbg !12116
  %idxprom69 = zext i32 %add68 to i64, !dbg !12111
  %arrayidx70 = getelementptr inbounds i32, i32* %54, i64 %idxprom69, !dbg !12111
  store i32 1, i32* %arrayidx70, align 4, !dbg !12117
  %56 = load i64, i64* %nbi, align 8, !dbg !12118
  %cmp71 = icmp ne i64 %56, -1, !dbg !12120
  br i1 %cmp71, label %if.then73, label %if.end139, !dbg !12121

if.then73:                                        ; preds = %for.body49
  %57 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12122
  %call74 = call i32 @omega_add_zero_geq(%struct.omega_pb_d* %57, i32 0), !dbg !12124
  store i32 %call74, i32* %ineq, align 4, !dbg !12125
  %58 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12126
  %geqs75 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %58, i32 0, i32 10, !dbg !12127
  %59 = load %struct.eqn_d*, %struct.eqn_d** %geqs75, align 8, !dbg !12127
  %60 = load i32, i32* %ineq, align 4, !dbg !12128
  %idxprom76 = sext i32 %60 to i64, !dbg !12126
  %arrayidx77 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %59, i64 %idxprom76, !dbg !12126
  %coef78 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx77, i32 0, i32 3, !dbg !12129
  %61 = load i32*, i32** %coef78, align 8, !dbg !12129
  %62 = load i32, i32* %i, align 4, !dbg !12130
  %63 = load i32, i32* %nb_loops, align 4, !dbg !12131
  %add79 = add i32 %62, %63, !dbg !12132
  %add80 = add i32 %add79, 1, !dbg !12133
  %idxprom81 = zext i32 %add80 to i64, !dbg !12126
  %arrayidx82 = getelementptr inbounds i32, i32* %61, i64 %idxprom81, !dbg !12126
  store i32 -1, i32* %arrayidx82, align 4, !dbg !12134
  %64 = load i64, i64* %nbi, align 8, !dbg !12135
  %conv83 = trunc i64 %64 to i32, !dbg !12135
  %65 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12136
  %geqs84 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %65, i32 0, i32 10, !dbg !12137
  %66 = load %struct.eqn_d*, %struct.eqn_d** %geqs84, align 8, !dbg !12137
  %67 = load i32, i32* %ineq, align 4, !dbg !12138
  %idxprom85 = sext i32 %67 to i64, !dbg !12136
  %arrayidx86 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %66, i64 %idxprom85, !dbg !12136
  %coef87 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx86, i32 0, i32 3, !dbg !12139
  %68 = load i32*, i32** %coef87, align 8, !dbg !12139
  %arrayidx88 = getelementptr inbounds i32, i32* %68, i64 0, !dbg !12136
  store i32 %conv83, i32* %arrayidx88, align 4, !dbg !12140
  %69 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12141
  %call89 = call i32 @omega_add_zero_geq(%struct.omega_pb_d* %69, i32 0), !dbg !12142
  store i32 %call89, i32* %ineq, align 4, !dbg !12143
  %70 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12144
  %geqs90 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %70, i32 0, i32 10, !dbg !12145
  %71 = load %struct.eqn_d*, %struct.eqn_d** %geqs90, align 8, !dbg !12145
  %72 = load i32, i32* %ineq, align 4, !dbg !12146
  %idxprom91 = sext i32 %72 to i64, !dbg !12144
  %arrayidx92 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %71, i64 %idxprom91, !dbg !12144
  %coef93 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx92, i32 0, i32 3, !dbg !12147
  %73 = load i32*, i32** %coef93, align 8, !dbg !12147
  %74 = load i32, i32* %i, align 4, !dbg !12148
  %75 = load i32, i32* %nb_loops, align 4, !dbg !12149
  %add94 = add i32 %74, %75, !dbg !12150
  %add95 = add i32 %add94, 1, !dbg !12151
  %idxprom96 = zext i32 %add95 to i64, !dbg !12144
  %arrayidx97 = getelementptr inbounds i32, i32* %73, i64 %idxprom96, !dbg !12144
  store i32 -1, i32* %arrayidx97, align 4, !dbg !12152
  %76 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12153
  %geqs98 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %76, i32 0, i32 10, !dbg !12154
  %77 = load %struct.eqn_d*, %struct.eqn_d** %geqs98, align 8, !dbg !12154
  %78 = load i32, i32* %ineq, align 4, !dbg !12155
  %idxprom99 = sext i32 %78 to i64, !dbg !12153
  %arrayidx100 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %77, i64 %idxprom99, !dbg !12153
  %coef101 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx100, i32 0, i32 3, !dbg !12156
  %79 = load i32*, i32** %coef101, align 8, !dbg !12156
  %80 = load i32, i32* %i, align 4, !dbg !12157
  %add102 = add i32 %80, 1, !dbg !12158
  %idxprom103 = zext i32 %add102 to i64, !dbg !12153
  %arrayidx104 = getelementptr inbounds i32, i32* %79, i64 %idxprom103, !dbg !12153
  store i32 -1, i32* %arrayidx104, align 4, !dbg !12159
  %81 = load i64, i64* %nbi, align 8, !dbg !12160
  %conv105 = trunc i64 %81 to i32, !dbg !12160
  %82 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12161
  %geqs106 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %82, i32 0, i32 10, !dbg !12162
  %83 = load %struct.eqn_d*, %struct.eqn_d** %geqs106, align 8, !dbg !12162
  %84 = load i32, i32* %ineq, align 4, !dbg !12163
  %idxprom107 = sext i32 %84 to i64, !dbg !12161
  %arrayidx108 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %83, i64 %idxprom107, !dbg !12161
  %coef109 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx108, i32 0, i32 3, !dbg !12164
  %85 = load i32*, i32** %coef109, align 8, !dbg !12164
  %arrayidx110 = getelementptr inbounds i32, i32* %85, i64 0, !dbg !12161
  store i32 %conv105, i32* %arrayidx110, align 4, !dbg !12165
  %86 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12166
  %call111 = call i32 @omega_add_zero_geq(%struct.omega_pb_d* %86, i32 0), !dbg !12167
  store i32 %call111, i32* %ineq, align 4, !dbg !12168
  %87 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12169
  %geqs112 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %87, i32 0, i32 10, !dbg !12170
  %88 = load %struct.eqn_d*, %struct.eqn_d** %geqs112, align 8, !dbg !12170
  %89 = load i32, i32* %ineq, align 4, !dbg !12171
  %idxprom113 = sext i32 %89 to i64, !dbg !12169
  %arrayidx114 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %88, i64 %idxprom113, !dbg !12169
  %coef115 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx114, i32 0, i32 3, !dbg !12172
  %90 = load i32*, i32** %coef115, align 8, !dbg !12172
  %91 = load i32, i32* %i, align 4, !dbg !12173
  %add116 = add i32 %91, 1, !dbg !12174
  %idxprom117 = zext i32 %add116 to i64, !dbg !12169
  %arrayidx118 = getelementptr inbounds i32, i32* %90, i64 %idxprom117, !dbg !12169
  store i32 1, i32* %arrayidx118, align 4, !dbg !12175
  %92 = load i64, i64* %nbi, align 8, !dbg !12176
  %conv119 = trunc i64 %92 to i32, !dbg !12176
  %93 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12177
  %geqs120 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %93, i32 0, i32 10, !dbg !12178
  %94 = load %struct.eqn_d*, %struct.eqn_d** %geqs120, align 8, !dbg !12178
  %95 = load i32, i32* %ineq, align 4, !dbg !12179
  %idxprom121 = sext i32 %95 to i64, !dbg !12177
  %arrayidx122 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %94, i64 %idxprom121, !dbg !12177
  %coef123 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx122, i32 0, i32 3, !dbg !12180
  %96 = load i32*, i32** %coef123, align 8, !dbg !12180
  %arrayidx124 = getelementptr inbounds i32, i32* %96, i64 0, !dbg !12177
  store i32 %conv119, i32* %arrayidx124, align 4, !dbg !12181
  %97 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12182
  %call125 = call i32 @omega_add_zero_geq(%struct.omega_pb_d* %97, i32 0), !dbg !12183
  store i32 %call125, i32* %ineq, align 4, !dbg !12184
  %98 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12185
  %geqs126 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %98, i32 0, i32 10, !dbg !12186
  %99 = load %struct.eqn_d*, %struct.eqn_d** %geqs126, align 8, !dbg !12186
  %100 = load i32, i32* %ineq, align 4, !dbg !12187
  %idxprom127 = sext i32 %100 to i64, !dbg !12185
  %arrayidx128 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %99, i64 %idxprom127, !dbg !12185
  %coef129 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx128, i32 0, i32 3, !dbg !12188
  %101 = load i32*, i32** %coef129, align 8, !dbg !12188
  %102 = load i32, i32* %i, align 4, !dbg !12189
  %add130 = add i32 %102, 1, !dbg !12190
  %idxprom131 = zext i32 %add130 to i64, !dbg !12185
  %arrayidx132 = getelementptr inbounds i32, i32* %101, i64 %idxprom131, !dbg !12185
  store i32 -1, i32* %arrayidx132, align 4, !dbg !12191
  %103 = load i64, i64* %nbi, align 8, !dbg !12192
  %conv133 = trunc i64 %103 to i32, !dbg !12192
  %104 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12193
  %geqs134 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %104, i32 0, i32 10, !dbg !12194
  %105 = load %struct.eqn_d*, %struct.eqn_d** %geqs134, align 8, !dbg !12194
  %106 = load i32, i32* %ineq, align 4, !dbg !12195
  %idxprom135 = sext i32 %106 to i64, !dbg !12193
  %arrayidx136 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %105, i64 %idxprom135, !dbg !12193
  %coef137 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx136, i32 0, i32 3, !dbg !12196
  %107 = load i32*, i32** %coef137, align 8, !dbg !12196
  %arrayidx138 = getelementptr inbounds i32, i32* %107, i64 0, !dbg !12193
  store i32 %conv133, i32* %arrayidx138, align 4, !dbg !12197
  br label %if.end139, !dbg !12198

if.end139:                                        ; preds = %if.then73, %for.body49
  br label %for.inc140, !dbg !12199

for.inc140:                                       ; preds = %if.end139
  %108 = load i32, i32* %i, align 4, !dbg !12200
  %inc141 = add i32 %108, 1, !dbg !12200
  store i32 %inc141, i32* %i, align 4, !dbg !12200
  br label %for.cond36, !dbg !12201, !llvm.loop !12202

for.end142:                                       ; preds = %land.end
  %109 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12204
  %110 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12205
  call void @omega_extract_distance_vectors(%struct.omega_pb_d* %109, %struct.data_dependence_relation* %110), !dbg !12206
  store i8 1, i8* %retval, align 1, !dbg !12207
  br label %return, !dbg !12207

return:                                           ; preds = %for.end142, %if.then34, %if.then
  %111 = load i8, i8* %retval, align 1, !dbg !12208
  ret i8 %111, !dbg !12208
}

; Function Attrs: noinline nounwind uwtable
define internal void @omega_free_problem(%struct.omega_pb_d* %pb) #0 !dbg !12209 {
entry:
  %pb.addr = alloca %struct.omega_pb_d*, align 8
  store %struct.omega_pb_d* %pb, %struct.omega_pb_d** %pb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.omega_pb_d** %pb.addr, metadata !12212, metadata !DIExpression()), !dbg !12213
  %0 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12214
  %var = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %0, i32 0, i32 8, !dbg !12215
  %1 = load i32*, i32** %var, align 8, !dbg !12215
  %2 = bitcast i32* %1 to i8*, !dbg !12214
  call void @free(i8* %2), !dbg !12216
  %3 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12217
  %forwarding_address = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %3, i32 0, i32 9, !dbg !12218
  %4 = load i32*, i32** %forwarding_address, align 8, !dbg !12218
  %5 = bitcast i32* %4 to i8*, !dbg !12217
  call void @free(i8* %5), !dbg !12219
  %6 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12220
  %geqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %6, i32 0, i32 10, !dbg !12221
  %7 = load %struct.eqn_d*, %struct.eqn_d** %geqs, align 8, !dbg !12221
  %8 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !12222
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %8, i64 65, !dbg !12222
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !12222
  %9 = load i32, i32* %value, align 8, !dbg !12222
  call void @omega_free_eqns(%struct.eqn_d* %7, i32 %9), !dbg !12223
  %10 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12224
  %eqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %10, i32 0, i32 11, !dbg !12225
  %11 = load %struct.eqn_d*, %struct.eqn_d** %eqs, align 8, !dbg !12225
  %12 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !12226
  %arrayidx1 = getelementptr inbounds %struct.param_info, %struct.param_info* %12, i64 66, !dbg !12226
  %value2 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx1, i32 0, i32 1, !dbg !12226
  %13 = load i32, i32* %value2, align 8, !dbg !12226
  call void @omega_free_eqns(%struct.eqn_d* %11, i32 %13), !dbg !12227
  %14 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12228
  %subs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %14, i32 0, i32 12, !dbg !12229
  %15 = load %struct.eqn_d*, %struct.eqn_d** %subs, align 8, !dbg !12229
  %16 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !12230
  %arrayidx3 = getelementptr inbounds %struct.param_info, %struct.param_info* %16, i64 64, !dbg !12230
  %value4 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx3, i32 0, i32 1, !dbg !12230
  %17 = load i32, i32* %value4, align 8, !dbg !12230
  %add = add nsw i32 %17, 1, !dbg !12231
  call void @omega_free_eqns(%struct.eqn_d* %15, i32 %add), !dbg !12232
  %18 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12233
  %19 = bitcast %struct.omega_pb_d* %18 to i8*, !dbg !12233
  call void @free(i8* %19), !dbg !12234
  ret void, !dbg !12235
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @omega_setup_subscript(%union.tree_node* %access_fun_a, %union.tree_node* %access_fun_b, %struct.data_dependence_relation* %ddr, %struct.omega_pb_d* %pb, i8* %maybe_dependent) #0 !dbg !12236 {
entry:
  %retval = alloca i8, align 1
  %access_fun_a.addr = alloca %union.tree_node*, align 8
  %access_fun_b.addr = alloca %union.tree_node*, align 8
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %pb.addr = alloca %struct.omega_pb_d*, align 8
  %maybe_dependent.addr = alloca i8*, align 8
  %eq = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %fun_a = alloca %union.tree_node*, align 8
  %fun_b = alloca %union.tree_node*, align 8
  %difference = alloca %union.tree_node*, align 8
  store %union.tree_node* %access_fun_a, %union.tree_node** %access_fun_a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_fun_a.addr, metadata !12239, metadata !DIExpression()), !dbg !12240
  store %union.tree_node* %access_fun_b, %union.tree_node** %access_fun_b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_fun_b.addr, metadata !12241, metadata !DIExpression()), !dbg !12242
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !12243, metadata !DIExpression()), !dbg !12244
  store %struct.omega_pb_d* %pb, %struct.omega_pb_d** %pb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.omega_pb_d** %pb.addr, metadata !12245, metadata !DIExpression()), !dbg !12246
  store i8* %maybe_dependent, i8** %maybe_dependent.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %maybe_dependent.addr, metadata !12247, metadata !DIExpression()), !dbg !12248
  call void @llvm.dbg.declare(metadata i32* %eq, metadata !12249, metadata !DIExpression()), !dbg !12250
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !12251, metadata !DIExpression()), !dbg !12252
  %0 = load %union.tree_node*, %union.tree_node** %access_fun_a.addr, align 8, !dbg !12253
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !12253
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12253
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !12253
  %2 = load %union.tree_node*, %union.tree_node** %access_fun_b.addr, align 8, !dbg !12254
  %common2 = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !12254
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !12254
  %3 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !12254
  %call = call %union.tree_node* @signed_type_for_types(%union.tree_node* %1, %union.tree_node* %3), !dbg !12255
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !12252
  call void @llvm.dbg.declare(metadata %union.tree_node** %fun_a, metadata !12256, metadata !DIExpression()), !dbg !12257
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12258
  %5 = load %union.tree_node*, %union.tree_node** %access_fun_a.addr, align 8, !dbg !12259
  %call4 = call %union.tree_node* @chrec_convert(%union.tree_node* %4, %union.tree_node* %5, %union.gimple_statement_d* null), !dbg !12260
  store %union.tree_node* %call4, %union.tree_node** %fun_a, align 8, !dbg !12257
  call void @llvm.dbg.declare(metadata %union.tree_node** %fun_b, metadata !12261, metadata !DIExpression()), !dbg !12262
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12263
  %7 = load %union.tree_node*, %union.tree_node** %access_fun_b.addr, align 8, !dbg !12264
  %call5 = call %union.tree_node* @chrec_convert(%union.tree_node* %6, %union.tree_node* %7, %union.gimple_statement_d* null), !dbg !12265
  store %union.tree_node* %call5, %union.tree_node** %fun_b, align 8, !dbg !12262
  call void @llvm.dbg.declare(metadata %union.tree_node** %difference, metadata !12266, metadata !DIExpression()), !dbg !12267
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12268
  %9 = load %union.tree_node*, %union.tree_node** %fun_a, align 8, !dbg !12269
  %10 = load %union.tree_node*, %union.tree_node** %fun_b, align 8, !dbg !12270
  %call6 = call %union.tree_node* @chrec_fold_minus(%union.tree_node* %8, %union.tree_node* %9, %union.tree_node* %10), !dbg !12271
  store %union.tree_node* %call6, %union.tree_node** %difference, align 8, !dbg !12267
  %11 = load %union.tree_node*, %union.tree_node** %difference, align 8, !dbg !12272
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !12272
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !12272
  %bf.load = load i64, i64* %12, align 8, !dbg !12272
  %bf.clear = and i64 %bf.load, 65535, !dbg !12272
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12272
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !12274
  br i1 %cmp, label %if.then, label %if.end, !dbg !12275

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !12276
  br label %return, !dbg !12276

if.end:                                           ; preds = %entry
  %13 = load %union.tree_node*, %union.tree_node** %fun_a, align 8, !dbg !12277
  %14 = load %union.tree_node*, %union.tree_node** %fun_b, align 8, !dbg !12279
  %call7 = call zeroext i8 @ziv_subscript_p(%union.tree_node* %13, %union.tree_node* %14), !dbg !12280
  %conv = zext i8 %call7 to i32, !dbg !12280
  %tobool = icmp ne i32 %conv, 0, !dbg !12280
  br i1 %tobool, label %land.lhs.true, label %if.end11, !dbg !12281

land.lhs.true:                                    ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %difference, align 8, !dbg !12282
  %call8 = call i32 @integer_zerop(%union.tree_node* %15), !dbg !12283
  %tobool9 = icmp ne i32 %call8, 0, !dbg !12283
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !12284

if.then10:                                        ; preds = %land.lhs.true
  %16 = load i8*, i8** %maybe_dependent.addr, align 8, !dbg !12285
  store i8 0, i8* %16, align 1, !dbg !12287
  store i8 1, i8* %retval, align 1, !dbg !12288
  br label %return, !dbg !12288

if.end11:                                         ; preds = %land.lhs.true, %if.end
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12289
  %18 = load %union.tree_node*, %union.tree_node** %fun_b, align 8, !dbg !12290
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !dbg !12291
  %call12 = call %union.tree_node* @chrec_fold_multiply(%union.tree_node* %17, %union.tree_node* %18, %union.tree_node* %19), !dbg !12292
  store %union.tree_node* %call12, %union.tree_node** %fun_b, align 8, !dbg !12293
  %20 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12294
  %call13 = call i32 @omega_add_zero_eq(%struct.omega_pb_d* %20, i32 0), !dbg !12295
  store i32 %call13, i32* %eq, align 4, !dbg !12296
  %21 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12297
  %22 = load i32, i32* %eq, align 4, !dbg !12299
  %23 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12300
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %23, i32 0, i32 4, !dbg !12300
  %24 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !12300
  %tobool14 = icmp ne %struct.VEC_loop_p_heap* %24, null, !dbg !12300
  br i1 %tobool14, label %cond.true, label %cond.false, !dbg !12300

cond.true:                                        ; preds = %if.end11
  %25 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12300
  %loop_nest15 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %25, i32 0, i32 4, !dbg !12300
  %26 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest15, align 8, !dbg !12300
  %base16 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %26, i32 0, i32 0, !dbg !12300
  br label %cond.end, !dbg !12300

cond.false:                                       ; preds = %if.end11
  br label %cond.end, !dbg !12300

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base16, %cond.true ], [ null, %cond.false ], !dbg !12300
  %call17 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !12300
  %27 = load %union.tree_node*, %union.tree_node** %fun_a, align 8, !dbg !12301
  %28 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12302
  %call18 = call zeroext i8 @init_omega_eq_with_af(%struct.omega_pb_d* %21, i32 %22, i32 %call17, %union.tree_node* %27, %struct.data_dependence_relation* %28), !dbg !12303
  %tobool19 = icmp ne i8 %call18, 0, !dbg !12303
  br i1 %tobool19, label %lor.lhs.false, label %if.then22, !dbg !12304

lor.lhs.false:                                    ; preds = %cond.end
  %29 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12305
  %30 = load i32, i32* %eq, align 4, !dbg !12306
  %31 = load %union.tree_node*, %union.tree_node** %fun_b, align 8, !dbg !12307
  %32 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12308
  %call20 = call zeroext i8 @init_omega_eq_with_af(%struct.omega_pb_d* %29, i32 %30, i32 0, %union.tree_node* %31, %struct.data_dependence_relation* %32), !dbg !12309
  %tobool21 = icmp ne i8 %call20, 0, !dbg !12309
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !12310

if.then22:                                        ; preds = %lor.lhs.false, %cond.end
  store i8 0, i8* %retval, align 1, !dbg !12311
  br label %return, !dbg !12311

if.end23:                                         ; preds = %lor.lhs.false
  %33 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12312
  %loop_nest24 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %33, i32 0, i32 4, !dbg !12312
  %34 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest24, align 8, !dbg !12312
  %tobool25 = icmp ne %struct.VEC_loop_p_heap* %34, null, !dbg !12312
  br i1 %tobool25, label %cond.true26, label %cond.false29, !dbg !12312

cond.true26:                                      ; preds = %if.end23
  %35 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12312
  %loop_nest27 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %35, i32 0, i32 4, !dbg !12312
  %36 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest27, align 8, !dbg !12312
  %base28 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %36, i32 0, i32 0, !dbg !12312
  br label %cond.end30, !dbg !12312

cond.false29:                                     ; preds = %if.end23
  br label %cond.end30, !dbg !12312

cond.end30:                                       ; preds = %cond.false29, %cond.true26
  %cond31 = phi %struct.VEC_loop_p_base* [ %base28, %cond.true26 ], [ null, %cond.false29 ], !dbg !12312
  %call32 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond31), !dbg !12312
  %cmp33 = icmp ne i32 %call32, 0, !dbg !12314
  br i1 %cmp33, label %land.lhs.true35, label %if.end62, !dbg !12315

land.lhs.true35:                                  ; preds = %cond.end30
  %37 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12316
  %eqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %37, i32 0, i32 11, !dbg !12317
  %38 = load %struct.eqn_d*, %struct.eqn_d** %eqs, align 8, !dbg !12317
  %39 = load i32, i32* %eq, align 4, !dbg !12318
  %idxprom = sext i32 %39 to i64, !dbg !12316
  %arrayidx = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %38, i64 %idxprom, !dbg !12316
  %coef = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx, i32 0, i32 3, !dbg !12319
  %40 = load i32*, i32** %coef, align 8, !dbg !12319
  %arrayidx36 = getelementptr inbounds i32, i32* %40, i64 0, !dbg !12316
  %41 = load i32, i32* %arrayidx36, align 4, !dbg !12316
  %tobool37 = icmp ne i32 %41, 0, !dbg !12316
  br i1 %tobool37, label %land.lhs.true38, label %if.end62, !dbg !12320

land.lhs.true38:                                  ; preds = %land.lhs.true35
  %42 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12321
  %eqs39 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %42, i32 0, i32 11, !dbg !12322
  %43 = load %struct.eqn_d*, %struct.eqn_d** %eqs39, align 8, !dbg !12322
  %44 = load i32, i32* %eq, align 4, !dbg !12323
  %idxprom40 = sext i32 %44 to i64, !dbg !12321
  %arrayidx41 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %43, i64 %idxprom40, !dbg !12321
  %coef42 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx41, i32 0, i32 3, !dbg !12324
  %45 = load i32*, i32** %coef42, align 8, !dbg !12324
  %arrayidx43 = getelementptr inbounds i32, i32* %45, i64 1, !dbg !12321
  %46 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12325
  %loop_nest44 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %46, i32 0, i32 4, !dbg !12325
  %47 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest44, align 8, !dbg !12325
  %tobool45 = icmp ne %struct.VEC_loop_p_heap* %47, null, !dbg !12325
  br i1 %tobool45, label %cond.true46, label %cond.false49, !dbg !12325

cond.true46:                                      ; preds = %land.lhs.true38
  %48 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12325
  %loop_nest47 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %48, i32 0, i32 4, !dbg !12325
  %49 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest47, align 8, !dbg !12325
  %base48 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %49, i32 0, i32 0, !dbg !12325
  br label %cond.end50, !dbg !12325

cond.false49:                                     ; preds = %land.lhs.true38
  br label %cond.end50, !dbg !12325

cond.end50:                                       ; preds = %cond.false49, %cond.true46
  %cond51 = phi %struct.VEC_loop_p_base* [ %base48, %cond.true46 ], [ null, %cond.false49 ], !dbg !12325
  %call52 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond51), !dbg !12325
  %mul = mul i32 2, %call52, !dbg !12326
  %call53 = call i32 @lambda_vector_gcd(i32* %arrayidx43, i32 %mul), !dbg !12327
  %50 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12328
  %eqs54 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %50, i32 0, i32 11, !dbg !12329
  %51 = load %struct.eqn_d*, %struct.eqn_d** %eqs54, align 8, !dbg !12329
  %52 = load i32, i32* %eq, align 4, !dbg !12330
  %idxprom55 = sext i32 %52 to i64, !dbg !12328
  %arrayidx56 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %51, i64 %idxprom55, !dbg !12328
  %coef57 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx56, i32 0, i32 3, !dbg !12331
  %53 = load i32*, i32** %coef57, align 8, !dbg !12331
  %arrayidx58 = getelementptr inbounds i32, i32* %53, i64 0, !dbg !12328
  %54 = load i32, i32* %arrayidx58, align 4, !dbg !12328
  %call59 = call zeroext i8 @int_divides_p(i32 %call53, i32 %54), !dbg !12332
  %tobool60 = icmp ne i8 %call59, 0, !dbg !12332
  br i1 %tobool60, label %if.end62, label %if.then61, !dbg !12333

if.then61:                                        ; preds = %cond.end50
  %55 = load i8*, i8** %maybe_dependent.addr, align 8, !dbg !12334
  store i8 0, i8* %55, align 1, !dbg !12336
  store i8 1, i8* %retval, align 1, !dbg !12337
  br label %return, !dbg !12337

if.end62:                                         ; preds = %cond.end50, %land.lhs.true35, %cond.end30
  store i8 1, i8* %retval, align 1, !dbg !12338
  br label %return, !dbg !12338

return:                                           ; preds = %if.end62, %if.then61, %if.then22, %if.then10, %if.then
  %56 = load i8, i8* %retval, align 1, !dbg !12339
  ret i8 %56, !dbg !12339
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @omega_add_zero_geq(%struct.omega_pb_d* %pb, i32 %color) #0 !dbg !12340 {
entry:
  %pb.addr = alloca %struct.omega_pb_d*, align 8
  %color.addr = alloca i32, align 4
  %idx = alloca i32, align 4
  store %struct.omega_pb_d* %pb, %struct.omega_pb_d** %pb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.omega_pb_d** %pb.addr, metadata !12343, metadata !DIExpression()), !dbg !12344
  store i32 %color, i32* %color.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %color.addr, metadata !12345, metadata !DIExpression()), !dbg !12346
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !12347, metadata !DIExpression()), !dbg !12348
  %0 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12349
  %num_geqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %0, i32 0, i32 3, !dbg !12350
  %1 = load i32, i32* %num_geqs, align 4, !dbg !12350
  store i32 %1, i32* %idx, align 4, !dbg !12348
  %2 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12351
  %num_geqs1 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %2, i32 0, i32 3, !dbg !12352
  %3 = load i32, i32* %num_geqs1, align 4, !dbg !12353
  %inc = add nsw i32 %3, 1, !dbg !12353
  store i32 %inc, i32* %num_geqs1, align 4, !dbg !12353
  %4 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12354
  %num_geqs2 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %4, i32 0, i32 3, !dbg !12354
  %5 = load i32, i32* %num_geqs2, align 4, !dbg !12354
  %6 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !12354
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %6, i64 65, !dbg !12354
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !12354
  %7 = load i32, i32* %value, align 8, !dbg !12354
  %cmp = icmp sle i32 %5, %7, !dbg !12354
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12354

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.128, i64 0, i64 0), i32 274, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !12354
  br label %cond.end, !dbg !12354

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12354

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12354
  %8 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12355
  %geqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %8, i32 0, i32 10, !dbg !12356
  %9 = load %struct.eqn_d*, %struct.eqn_d** %geqs, align 8, !dbg !12356
  %10 = load i32, i32* %idx, align 4, !dbg !12357
  %idxprom = sext i32 %10 to i64, !dbg !12355
  %arrayidx3 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %9, i64 %idxprom, !dbg !12355
  %11 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12358
  %num_vars = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %11, i32 0, i32 0, !dbg !12359
  %12 = load i32, i32* %num_vars, align 8, !dbg !12359
  call void @omega_init_eqn_zero(%struct.eqn_d* %arrayidx3, i32 %12), !dbg !12360
  %13 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12361
  %geqs4 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %13, i32 0, i32 10, !dbg !12362
  %14 = load %struct.eqn_d*, %struct.eqn_d** %geqs4, align 8, !dbg !12362
  %15 = load i32, i32* %idx, align 4, !dbg !12363
  %idxprom5 = sext i32 %15 to i64, !dbg !12361
  %arrayidx6 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %14, i64 %idxprom5, !dbg !12361
  %touched = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx6, i32 0, i32 1, !dbg !12364
  store i32 1, i32* %touched, align 4, !dbg !12365
  %16 = load i32, i32* %color.addr, align 4, !dbg !12366
  %17 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12367
  %geqs7 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %17, i32 0, i32 10, !dbg !12368
  %18 = load %struct.eqn_d*, %struct.eqn_d** %geqs7, align 8, !dbg !12368
  %19 = load i32, i32* %idx, align 4, !dbg !12369
  %idxprom8 = sext i32 %19 to i64, !dbg !12367
  %arrayidx9 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %18, i64 %idxprom8, !dbg !12367
  %color10 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx9, i32 0, i32 2, !dbg !12370
  store i32 %16, i32* %color10, align 8, !dbg !12371
  %20 = load i32, i32* %idx, align 4, !dbg !12372
  ret i32 %20, !dbg !12373
}

; Function Attrs: noinline nounwind uwtable
define internal void @omega_extract_distance_vectors(%struct.omega_pb_d* %pb, %struct.data_dependence_relation* %ddr) #0 !dbg !12374 {
entry:
  %pb.addr = alloca %struct.omega_pb_d*, align 8
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %eq = alloca i32, align 4
  %geq = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %loopi = alloca %struct.loop*, align 8
  %loopj = alloca %struct.loop*, align 8
  %res = alloca i32, align 4
  %dist = alloca i32, align 4
  %copy = alloca %struct.omega_pb_d*, align 8
  %dist_v = alloca i32*, align 8
  %dir_v = alloca i32*, align 8
  store %struct.omega_pb_d* %pb, %struct.omega_pb_d** %pb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.omega_pb_d** %pb.addr, metadata !12377, metadata !DIExpression()), !dbg !12378
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !12379, metadata !DIExpression()), !dbg !12380
  call void @llvm.dbg.declare(metadata i32* %eq, metadata !12381, metadata !DIExpression()), !dbg !12382
  call void @llvm.dbg.declare(metadata i32* %geq, metadata !12383, metadata !DIExpression()), !dbg !12384
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12385, metadata !DIExpression()), !dbg !12386
  call void @llvm.dbg.declare(metadata i32* %j, metadata !12387, metadata !DIExpression()), !dbg !12388
  call void @llvm.dbg.declare(metadata %struct.loop** %loopi, metadata !12389, metadata !DIExpression()), !dbg !12390
  call void @llvm.dbg.declare(metadata %struct.loop** %loopj, metadata !12391, metadata !DIExpression()), !dbg !12392
  call void @llvm.dbg.declare(metadata i32* %res, metadata !12393, metadata !DIExpression()), !dbg !12394
  store i32 0, i32* %i, align 4, !dbg !12395
  br label %for.cond, !dbg !12397

for.cond:                                         ; preds = %for.inc228, %entry
  %0 = load i32, i32* %i, align 4, !dbg !12398
  %1 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12400
  %inner_loop = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %1, i32 0, i32 7, !dbg !12400
  %2 = load i32, i32* %inner_loop, align 8, !dbg !12400
  %cmp = icmp ule i32 %0, %2, !dbg !12401
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !12402

land.rhs:                                         ; preds = %for.cond
  %3 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12403
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %3, i32 0, i32 4, !dbg !12403
  %4 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !12403
  %tobool = icmp ne %struct.VEC_loop_p_heap* %4, null, !dbg !12403
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12403

cond.true:                                        ; preds = %land.rhs
  %5 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12403
  %loop_nest1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %5, i32 0, i32 4, !dbg !12403
  %6 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest1, align 8, !dbg !12403
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %6, i32 0, i32 0, !dbg !12403
  br label %cond.end, !dbg !12403

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !12403

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12403
  %7 = load i32, i32* %i, align 4, !dbg !12403
  %call = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond, i32 %7, %struct.loop** %loopi), !dbg !12403
  %tobool2 = icmp ne i32 %call, 0, !dbg !12402
  br label %land.end

land.end:                                         ; preds = %cond.end, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ %tobool2, %cond.end ], !dbg !12404
  br i1 %8, label %for.body, label %for.end230, !dbg !12405

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata i32* %dist, metadata !12406, metadata !DIExpression()), !dbg !12408
  store i32 0, i32* %dist, align 4, !dbg !12408
  call void @llvm.dbg.declare(metadata %struct.omega_pb_d** %copy, metadata !12409, metadata !DIExpression()), !dbg !12410
  %9 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12411
  %loop_nest3 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %9, i32 0, i32 4, !dbg !12411
  %10 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest3, align 8, !dbg !12411
  %tobool4 = icmp ne %struct.VEC_loop_p_heap* %10, null, !dbg !12411
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !12411

cond.true5:                                       ; preds = %for.body
  %11 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12411
  %loop_nest6 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %11, i32 0, i32 4, !dbg !12411
  %12 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest6, align 8, !dbg !12411
  %base7 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %12, i32 0, i32 0, !dbg !12411
  br label %cond.end9, !dbg !12411

cond.false8:                                      ; preds = %for.body
  br label %cond.end9, !dbg !12411

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_loop_p_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !12411
  %call11 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond10), !dbg !12411
  %mul = mul i32 2, %call11, !dbg !12412
  %13 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12413
  %loop_nest12 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %13, i32 0, i32 4, !dbg !12413
  %14 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest12, align 8, !dbg !12413
  %tobool13 = icmp ne %struct.VEC_loop_p_heap* %14, null, !dbg !12413
  br i1 %tobool13, label %cond.true14, label %cond.false17, !dbg !12413

cond.true14:                                      ; preds = %cond.end9
  %15 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12413
  %loop_nest15 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %15, i32 0, i32 4, !dbg !12413
  %16 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest15, align 8, !dbg !12413
  %base16 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %16, i32 0, i32 0, !dbg !12413
  br label %cond.end18, !dbg !12413

cond.false17:                                     ; preds = %cond.end9
  br label %cond.end18, !dbg !12413

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi %struct.VEC_loop_p_base* [ %base16, %cond.true14 ], [ null, %cond.false17 ], !dbg !12413
  %call20 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond19), !dbg !12413
  %call21 = call %struct.omega_pb_d* @omega_alloc_problem(i32 %mul, i32 %call20), !dbg !12414
  store %struct.omega_pb_d* %call21, %struct.omega_pb_d** %copy, align 8, !dbg !12410
  %17 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12415
  %18 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12416
  call void @omega_copy_problem(%struct.omega_pb_d* %17, %struct.omega_pb_d* %18), !dbg !12417
  store i32 0, i32* %j, align 4, !dbg !12418
  br label %for.cond22, !dbg !12420

for.cond22:                                       ; preds = %for.inc, %cond.end18
  %19 = load i32, i32* %j, align 4, !dbg !12421
  %20 = load i32, i32* %i, align 4, !dbg !12423
  %cmp23 = icmp ult i32 %19, %20, !dbg !12424
  br i1 %cmp23, label %land.rhs24, label %land.end35, !dbg !12425

land.rhs24:                                       ; preds = %for.cond22
  %21 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12426
  %loop_nest25 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %21, i32 0, i32 4, !dbg !12426
  %22 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest25, align 8, !dbg !12426
  %tobool26 = icmp ne %struct.VEC_loop_p_heap* %22, null, !dbg !12426
  br i1 %tobool26, label %cond.true27, label %cond.false30, !dbg !12426

cond.true27:                                      ; preds = %land.rhs24
  %23 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12426
  %loop_nest28 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %23, i32 0, i32 4, !dbg !12426
  %24 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest28, align 8, !dbg !12426
  %base29 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %24, i32 0, i32 0, !dbg !12426
  br label %cond.end31, !dbg !12426

cond.false30:                                     ; preds = %land.rhs24
  br label %cond.end31, !dbg !12426

cond.end31:                                       ; preds = %cond.false30, %cond.true27
  %cond32 = phi %struct.VEC_loop_p_base* [ %base29, %cond.true27 ], [ null, %cond.false30 ], !dbg !12426
  %25 = load i32, i32* %j, align 4, !dbg !12426
  %call33 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond32, i32 %25, %struct.loop** %loopj), !dbg !12426
  %tobool34 = icmp ne i32 %call33, 0, !dbg !12425
  br label %land.end35

land.end35:                                       ; preds = %cond.end31, %for.cond22
  %26 = phi i1 [ false, %for.cond22 ], [ %tobool34, %cond.end31 ], !dbg !12427
  br i1 %26, label %for.body36, label %for.end, !dbg !12428

for.body36:                                       ; preds = %land.end35
  %27 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12429
  %call37 = call i32 @omega_add_zero_eq(%struct.omega_pb_d* %27, i32 0), !dbg !12431
  store i32 %call37, i32* %eq, align 4, !dbg !12432
  %28 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12433
  %eqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %28, i32 0, i32 11, !dbg !12434
  %29 = load %struct.eqn_d*, %struct.eqn_d** %eqs, align 8, !dbg !12434
  %30 = load i32, i32* %eq, align 4, !dbg !12435
  %idxprom = sext i32 %30 to i64, !dbg !12433
  %arrayidx = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %29, i64 %idxprom, !dbg !12433
  %coef = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx, i32 0, i32 3, !dbg !12436
  %31 = load i32*, i32** %coef, align 8, !dbg !12436
  %32 = load i32, i32* %j, align 4, !dbg !12437
  %add = add i32 %32, 1, !dbg !12438
  %idxprom38 = zext i32 %add to i64, !dbg !12433
  %arrayidx39 = getelementptr inbounds i32, i32* %31, i64 %idxprom38, !dbg !12433
  store i32 1, i32* %arrayidx39, align 4, !dbg !12439
  br label %for.inc, !dbg !12440

for.inc:                                          ; preds = %for.body36
  %33 = load i32, i32* %j, align 4, !dbg !12441
  %inc = add i32 %33, 1, !dbg !12441
  store i32 %inc, i32* %j, align 4, !dbg !12441
  br label %for.cond22, !dbg !12442, !llvm.loop !12443

for.end:                                          ; preds = %land.end35
  %34 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12445
  %call40 = call i32 @omega_add_zero_geq(%struct.omega_pb_d* %34, i32 0), !dbg !12446
  store i32 %call40, i32* %geq, align 4, !dbg !12447
  %35 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12448
  %geqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %35, i32 0, i32 10, !dbg !12449
  %36 = load %struct.eqn_d*, %struct.eqn_d** %geqs, align 8, !dbg !12449
  %37 = load i32, i32* %geq, align 4, !dbg !12450
  %idxprom41 = sext i32 %37 to i64, !dbg !12448
  %arrayidx42 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %36, i64 %idxprom41, !dbg !12448
  %coef43 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx42, i32 0, i32 3, !dbg !12451
  %38 = load i32*, i32** %coef43, align 8, !dbg !12451
  %39 = load i32, i32* %i, align 4, !dbg !12452
  %add44 = add i32 %39, 1, !dbg !12453
  %idxprom45 = zext i32 %add44 to i64, !dbg !12448
  %arrayidx46 = getelementptr inbounds i32, i32* %38, i64 %idxprom45, !dbg !12448
  store i32 1, i32* %arrayidx46, align 4, !dbg !12454
  %40 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12455
  %call47 = call i32 @omega_simplify_problem(%struct.omega_pb_d* %40), !dbg !12456
  store i32 %call47, i32* %res, align 4, !dbg !12457
  %41 = load i32, i32* %res, align 4, !dbg !12458
  %cmp48 = icmp eq i32 %41, 0, !dbg !12460
  br i1 %cmp48, label %if.then, label %lor.lhs.false, !dbg !12461

lor.lhs.false:                                    ; preds = %for.end
  %42 = load i32, i32* %res, align 4, !dbg !12462
  %cmp49 = icmp eq i32 %42, 2, !dbg !12463
  br i1 %cmp49, label %if.then, label %lor.lhs.false50, !dbg !12464

lor.lhs.false50:                                  ; preds = %lor.lhs.false
  %43 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12465
  %num_geqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %43, i32 0, i32 3, !dbg !12466
  %44 = load i32, i32* %num_geqs, align 4, !dbg !12466
  %45 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12467
  %loop_nest51 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %45, i32 0, i32 4, !dbg !12467
  %46 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest51, align 8, !dbg !12467
  %tobool52 = icmp ne %struct.VEC_loop_p_heap* %46, null, !dbg !12467
  br i1 %tobool52, label %cond.true53, label %cond.false56, !dbg !12467

cond.true53:                                      ; preds = %lor.lhs.false50
  %47 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12467
  %loop_nest54 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %47, i32 0, i32 4, !dbg !12467
  %48 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest54, align 8, !dbg !12467
  %base55 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %48, i32 0, i32 0, !dbg !12467
  br label %cond.end57, !dbg !12467

cond.false56:                                     ; preds = %lor.lhs.false50
  br label %cond.end57, !dbg !12467

cond.end57:                                       ; preds = %cond.false56, %cond.true53
  %cond58 = phi %struct.VEC_loop_p_base* [ %base55, %cond.true53 ], [ null, %cond.false56 ], !dbg !12467
  %call59 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond58), !dbg !12467
  %cmp60 = icmp sgt i32 %44, %call59, !dbg !12468
  br i1 %cmp60, label %if.then, label %if.end, !dbg !12469

if.then:                                          ; preds = %cond.end57, %lor.lhs.false, %for.end
  br label %next_problem, !dbg !12470

if.end:                                           ; preds = %cond.end57
  store i32 0, i32* %eq, align 4, !dbg !12471
  br label %for.cond61, !dbg !12473

for.cond61:                                       ; preds = %for.inc75, %if.end
  %49 = load i32, i32* %eq, align 4, !dbg !12474
  %50 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12476
  %num_subs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %50, i32 0, i32 4, !dbg !12477
  %51 = load i32, i32* %num_subs, align 8, !dbg !12477
  %cmp62 = icmp slt i32 %49, %51, !dbg !12478
  br i1 %cmp62, label %for.body63, label %for.end77, !dbg !12479

for.body63:                                       ; preds = %for.cond61
  %52 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12480
  %subs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %52, i32 0, i32 12, !dbg !12482
  %53 = load %struct.eqn_d*, %struct.eqn_d** %subs, align 8, !dbg !12482
  %54 = load i32, i32* %eq, align 4, !dbg !12483
  %idxprom64 = sext i32 %54 to i64, !dbg !12480
  %arrayidx65 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %53, i64 %idxprom64, !dbg !12480
  %key = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx65, i32 0, i32 0, !dbg !12484
  %55 = load i32, i32* %key, align 8, !dbg !12484
  %56 = load i32, i32* %i, align 4, !dbg !12485
  %add66 = add nsw i32 %56, 1, !dbg !12486
  %cmp67 = icmp eq i32 %55, %add66, !dbg !12487
  br i1 %cmp67, label %if.then68, label %if.end74, !dbg !12488

if.then68:                                        ; preds = %for.body63
  %57 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12489
  %subs69 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %57, i32 0, i32 12, !dbg !12491
  %58 = load %struct.eqn_d*, %struct.eqn_d** %subs69, align 8, !dbg !12491
  %59 = load i32, i32* %eq, align 4, !dbg !12492
  %idxprom70 = sext i32 %59 to i64, !dbg !12489
  %arrayidx71 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %58, i64 %idxprom70, !dbg !12489
  %coef72 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx71, i32 0, i32 3, !dbg !12493
  %60 = load i32*, i32** %coef72, align 8, !dbg !12493
  %arrayidx73 = getelementptr inbounds i32, i32* %60, i64 0, !dbg !12489
  %61 = load i32, i32* %arrayidx73, align 4, !dbg !12489
  store i32 %61, i32* %dist, align 4, !dbg !12494
  br label %found_dist, !dbg !12495

if.end74:                                         ; preds = %for.body63
  br label %for.inc75, !dbg !12496

for.inc75:                                        ; preds = %if.end74
  %62 = load i32, i32* %eq, align 4, !dbg !12497
  %inc76 = add nsw i32 %62, 1, !dbg !12497
  store i32 %inc76, i32* %eq, align 4, !dbg !12497
  br label %for.cond61, !dbg !12498, !llvm.loop !12499

for.end77:                                        ; preds = %for.cond61
  %63 = load i32, i32* %dist, align 4, !dbg !12501
  %cmp78 = icmp eq i32 %63, 0, !dbg !12503
  br i1 %cmp78, label %if.then79, label %if.end157, !dbg !12504

if.then79:                                        ; preds = %for.end77
  %64 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12505
  %65 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12507
  call void @omega_copy_problem(%struct.omega_pb_d* %64, %struct.omega_pb_d* %65), !dbg !12508
  store i32 0, i32* %j, align 4, !dbg !12509
  br label %for.cond80, !dbg !12511

for.cond80:                                       ; preds = %for.inc103, %if.then79
  %66 = load i32, i32* %j, align 4, !dbg !12512
  %67 = load i32, i32* %i, align 4, !dbg !12514
  %cmp81 = icmp ult i32 %66, %67, !dbg !12515
  br i1 %cmp81, label %land.rhs82, label %land.end93, !dbg !12516

land.rhs82:                                       ; preds = %for.cond80
  %68 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12517
  %loop_nest83 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %68, i32 0, i32 4, !dbg !12517
  %69 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest83, align 8, !dbg !12517
  %tobool84 = icmp ne %struct.VEC_loop_p_heap* %69, null, !dbg !12517
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !12517

cond.true85:                                      ; preds = %land.rhs82
  %70 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12517
  %loop_nest86 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %70, i32 0, i32 4, !dbg !12517
  %71 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest86, align 8, !dbg !12517
  %base87 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %71, i32 0, i32 0, !dbg !12517
  br label %cond.end89, !dbg !12517

cond.false88:                                     ; preds = %land.rhs82
  br label %cond.end89, !dbg !12517

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_loop_p_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !12517
  %72 = load i32, i32* %j, align 4, !dbg !12517
  %call91 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond90, i32 %72, %struct.loop** %loopj), !dbg !12517
  %tobool92 = icmp ne i32 %call91, 0, !dbg !12516
  br label %land.end93

land.end93:                                       ; preds = %cond.end89, %for.cond80
  %73 = phi i1 [ false, %for.cond80 ], [ %tobool92, %cond.end89 ], !dbg !12518
  br i1 %73, label %for.body94, label %for.end105, !dbg !12519

for.body94:                                       ; preds = %land.end93
  %74 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12520
  %call95 = call i32 @omega_add_zero_eq(%struct.omega_pb_d* %74, i32 0), !dbg !12522
  store i32 %call95, i32* %eq, align 4, !dbg !12523
  %75 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12524
  %eqs96 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %75, i32 0, i32 11, !dbg !12525
  %76 = load %struct.eqn_d*, %struct.eqn_d** %eqs96, align 8, !dbg !12525
  %77 = load i32, i32* %eq, align 4, !dbg !12526
  %idxprom97 = sext i32 %77 to i64, !dbg !12524
  %arrayidx98 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %76, i64 %idxprom97, !dbg !12524
  %coef99 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx98, i32 0, i32 3, !dbg !12527
  %78 = load i32*, i32** %coef99, align 8, !dbg !12527
  %79 = load i32, i32* %j, align 4, !dbg !12528
  %add100 = add i32 %79, 1, !dbg !12529
  %idxprom101 = zext i32 %add100 to i64, !dbg !12524
  %arrayidx102 = getelementptr inbounds i32, i32* %78, i64 %idxprom101, !dbg !12524
  store i32 1, i32* %arrayidx102, align 4, !dbg !12530
  br label %for.inc103, !dbg !12531

for.inc103:                                       ; preds = %for.body94
  %80 = load i32, i32* %j, align 4, !dbg !12532
  %inc104 = add i32 %80, 1, !dbg !12532
  store i32 %inc104, i32* %j, align 4, !dbg !12532
  br label %for.cond80, !dbg !12533, !llvm.loop !12534

for.end105:                                       ; preds = %land.end93
  %81 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12536
  %call106 = call i32 @omega_add_zero_eq(%struct.omega_pb_d* %81, i32 0), !dbg !12537
  store i32 %call106, i32* %eq, align 4, !dbg !12538
  %82 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12539
  %eqs107 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %82, i32 0, i32 11, !dbg !12540
  %83 = load %struct.eqn_d*, %struct.eqn_d** %eqs107, align 8, !dbg !12540
  %84 = load i32, i32* %eq, align 4, !dbg !12541
  %idxprom108 = sext i32 %84 to i64, !dbg !12539
  %arrayidx109 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %83, i64 %idxprom108, !dbg !12539
  %coef110 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx109, i32 0, i32 3, !dbg !12542
  %85 = load i32*, i32** %coef110, align 8, !dbg !12542
  %86 = load i32, i32* %i, align 4, !dbg !12543
  %add111 = add i32 %86, 1, !dbg !12544
  %idxprom112 = zext i32 %add111 to i64, !dbg !12539
  %arrayidx113 = getelementptr inbounds i32, i32* %85, i64 %idxprom112, !dbg !12539
  store i32 1, i32* %arrayidx113, align 4, !dbg !12545
  %87 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12546
  %eqs114 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %87, i32 0, i32 11, !dbg !12547
  %88 = load %struct.eqn_d*, %struct.eqn_d** %eqs114, align 8, !dbg !12547
  %89 = load i32, i32* %eq, align 4, !dbg !12548
  %idxprom115 = sext i32 %89 to i64, !dbg !12546
  %arrayidx116 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %88, i64 %idxprom115, !dbg !12546
  %coef117 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx116, i32 0, i32 3, !dbg !12549
  %90 = load i32*, i32** %coef117, align 8, !dbg !12549
  %arrayidx118 = getelementptr inbounds i32, i32* %90, i64 0, !dbg !12546
  store i32 -1, i32* %arrayidx118, align 4, !dbg !12550
  %91 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12551
  %call119 = call i32 @omega_simplify_problem(%struct.omega_pb_d* %91), !dbg !12552
  store i32 %call119, i32* %res, align 4, !dbg !12553
  %92 = load i32, i32* %res, align 4, !dbg !12554
  %cmp120 = icmp eq i32 %92, 0, !dbg !12556
  br i1 %cmp120, label %if.then135, label %lor.lhs.false121, !dbg !12557

lor.lhs.false121:                                 ; preds = %for.end105
  %93 = load i32, i32* %res, align 4, !dbg !12558
  %cmp122 = icmp eq i32 %93, 2, !dbg !12559
  br i1 %cmp122, label %if.then135, label %lor.lhs.false123, !dbg !12560

lor.lhs.false123:                                 ; preds = %lor.lhs.false121
  %94 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12561
  %num_geqs124 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %94, i32 0, i32 3, !dbg !12562
  %95 = load i32, i32* %num_geqs124, align 4, !dbg !12562
  %96 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12563
  %loop_nest125 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %96, i32 0, i32 4, !dbg !12563
  %97 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest125, align 8, !dbg !12563
  %tobool126 = icmp ne %struct.VEC_loop_p_heap* %97, null, !dbg !12563
  br i1 %tobool126, label %cond.true127, label %cond.false130, !dbg !12563

cond.true127:                                     ; preds = %lor.lhs.false123
  %98 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12563
  %loop_nest128 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %98, i32 0, i32 4, !dbg !12563
  %99 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest128, align 8, !dbg !12563
  %base129 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %99, i32 0, i32 0, !dbg !12563
  br label %cond.end131, !dbg !12563

cond.false130:                                    ; preds = %lor.lhs.false123
  br label %cond.end131, !dbg !12563

cond.end131:                                      ; preds = %cond.false130, %cond.true127
  %cond132 = phi %struct.VEC_loop_p_base* [ %base129, %cond.true127 ], [ null, %cond.false130 ], !dbg !12563
  %call133 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond132), !dbg !12563
  %cmp134 = icmp sgt i32 %95, %call133, !dbg !12564
  br i1 %cmp134, label %if.then135, label %if.end136, !dbg !12565

if.then135:                                       ; preds = %cond.end131, %lor.lhs.false121, %for.end105
  br label %next_problem, !dbg !12566

if.end136:                                        ; preds = %cond.end131
  store i32 0, i32* %eq, align 4, !dbg !12567
  br label %for.cond137, !dbg !12569

for.cond137:                                      ; preds = %for.inc154, %if.end136
  %100 = load i32, i32* %eq, align 4, !dbg !12570
  %101 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12572
  %num_subs138 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %101, i32 0, i32 4, !dbg !12573
  %102 = load i32, i32* %num_subs138, align 8, !dbg !12573
  %cmp139 = icmp slt i32 %100, %102, !dbg !12574
  br i1 %cmp139, label %for.body140, label %for.end156, !dbg !12575

for.body140:                                      ; preds = %for.cond137
  %103 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12576
  %subs141 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %103, i32 0, i32 12, !dbg !12578
  %104 = load %struct.eqn_d*, %struct.eqn_d** %subs141, align 8, !dbg !12578
  %105 = load i32, i32* %eq, align 4, !dbg !12579
  %idxprom142 = sext i32 %105 to i64, !dbg !12576
  %arrayidx143 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %104, i64 %idxprom142, !dbg !12576
  %key144 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx143, i32 0, i32 0, !dbg !12580
  %106 = load i32, i32* %key144, align 8, !dbg !12580
  %107 = load i32, i32* %i, align 4, !dbg !12581
  %add145 = add nsw i32 %107, 1, !dbg !12582
  %cmp146 = icmp eq i32 %106, %add145, !dbg !12583
  br i1 %cmp146, label %if.then147, label %if.end153, !dbg !12584

if.then147:                                       ; preds = %for.body140
  %108 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12585
  %subs148 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %108, i32 0, i32 12, !dbg !12587
  %109 = load %struct.eqn_d*, %struct.eqn_d** %subs148, align 8, !dbg !12587
  %110 = load i32, i32* %eq, align 4, !dbg !12588
  %idxprom149 = sext i32 %110 to i64, !dbg !12585
  %arrayidx150 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %109, i64 %idxprom149, !dbg !12585
  %coef151 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx150, i32 0, i32 3, !dbg !12589
  %111 = load i32*, i32** %coef151, align 8, !dbg !12589
  %arrayidx152 = getelementptr inbounds i32, i32* %111, i64 0, !dbg !12585
  %112 = load i32, i32* %arrayidx152, align 4, !dbg !12585
  store i32 %112, i32* %dist, align 4, !dbg !12590
  br label %found_dist, !dbg !12591

if.end153:                                        ; preds = %for.body140
  br label %for.inc154, !dbg !12592

for.inc154:                                       ; preds = %if.end153
  %113 = load i32, i32* %eq, align 4, !dbg !12593
  %inc155 = add nsw i32 %113, 1, !dbg !12593
  store i32 %inc155, i32* %eq, align 4, !dbg !12593
  br label %for.cond137, !dbg !12594, !llvm.loop !12595

for.end156:                                       ; preds = %for.cond137
  br label %if.end157, !dbg !12597

if.end157:                                        ; preds = %for.end156, %for.end77
  br label %found_dist, !dbg !12598

found_dist:                                       ; preds = %if.end157, %if.then147, %if.then68
  call void @llvm.dbg.label(metadata !12599), !dbg !12600
  %114 = load i32, i32* %dist, align 4, !dbg !12601
  %cmp158 = icmp sge i32 %114, 0, !dbg !12603
  br i1 %cmp158, label %if.then159, label %if.end227, !dbg !12604

if.then159:                                       ; preds = %found_dist
  call void @llvm.dbg.declare(metadata i32** %dist_v, metadata !12605, metadata !DIExpression()), !dbg !12607
  %115 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12608
  %loop_nest160 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %115, i32 0, i32 4, !dbg !12608
  %116 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest160, align 8, !dbg !12608
  %tobool161 = icmp ne %struct.VEC_loop_p_heap* %116, null, !dbg !12608
  br i1 %tobool161, label %cond.true162, label %cond.false165, !dbg !12608

cond.true162:                                     ; preds = %if.then159
  %117 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12608
  %loop_nest163 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %117, i32 0, i32 4, !dbg !12608
  %118 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest163, align 8, !dbg !12608
  %base164 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %118, i32 0, i32 0, !dbg !12608
  br label %cond.end166, !dbg !12608

cond.false165:                                    ; preds = %if.then159
  br label %cond.end166, !dbg !12608

cond.end166:                                      ; preds = %cond.false165, %cond.true162
  %cond167 = phi %struct.VEC_loop_p_base* [ %base164, %cond.true162 ], [ null, %cond.false165 ], !dbg !12608
  %call168 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond167), !dbg !12608
  %call169 = call i32* @lambda_vector_new(i32 %call168), !dbg !12609
  store i32* %call169, i32** %dist_v, align 8, !dbg !12607
  call void @llvm.dbg.declare(metadata i32** %dir_v, metadata !12610, metadata !DIExpression()), !dbg !12611
  %119 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12612
  %loop_nest170 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %119, i32 0, i32 4, !dbg !12612
  %120 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest170, align 8, !dbg !12612
  %tobool171 = icmp ne %struct.VEC_loop_p_heap* %120, null, !dbg !12612
  br i1 %tobool171, label %cond.true172, label %cond.false175, !dbg !12612

cond.true172:                                     ; preds = %cond.end166
  %121 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12612
  %loop_nest173 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %121, i32 0, i32 4, !dbg !12612
  %122 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest173, align 8, !dbg !12612
  %base174 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %122, i32 0, i32 0, !dbg !12612
  br label %cond.end176, !dbg !12612

cond.false175:                                    ; preds = %cond.end166
  br label %cond.end176, !dbg !12612

cond.end176:                                      ; preds = %cond.false175, %cond.true172
  %cond177 = phi %struct.VEC_loop_p_base* [ %base174, %cond.true172 ], [ null, %cond.false175 ], !dbg !12612
  %call178 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond177), !dbg !12612
  %call179 = call i32* @lambda_vector_new(i32 %call178), !dbg !12613
  store i32* %call179, i32** %dir_v, align 8, !dbg !12611
  %123 = load i32, i32* %dist, align 4, !dbg !12614
  %124 = load i32*, i32** %dist_v, align 8, !dbg !12615
  %125 = load i32, i32* %i, align 4, !dbg !12616
  %idxprom180 = zext i32 %125 to i64, !dbg !12615
  %arrayidx181 = getelementptr inbounds i32, i32* %124, i64 %idxprom180, !dbg !12615
  store i32 %123, i32* %arrayidx181, align 4, !dbg !12617
  store i32 0, i32* %eq, align 4, !dbg !12618
  br label %for.cond182, !dbg !12620

for.cond182:                                      ; preds = %for.inc204, %cond.end176
  %126 = load i32, i32* %eq, align 4, !dbg !12621
  %127 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12623
  %num_subs183 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %127, i32 0, i32 4, !dbg !12624
  %128 = load i32, i32* %num_subs183, align 8, !dbg !12624
  %cmp184 = icmp slt i32 %126, %128, !dbg !12625
  br i1 %cmp184, label %for.body185, label %for.end206, !dbg !12626

for.body185:                                      ; preds = %for.cond182
  %129 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12627
  %subs186 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %129, i32 0, i32 12, !dbg !12629
  %130 = load %struct.eqn_d*, %struct.eqn_d** %subs186, align 8, !dbg !12629
  %131 = load i32, i32* %eq, align 4, !dbg !12630
  %idxprom187 = sext i32 %131 to i64, !dbg !12627
  %arrayidx188 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %130, i64 %idxprom187, !dbg !12627
  %key189 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx188, i32 0, i32 0, !dbg !12631
  %132 = load i32, i32* %key189, align 8, !dbg !12631
  %cmp190 = icmp sgt i32 %132, 0, !dbg !12632
  br i1 %cmp190, label %if.then191, label %if.end203, !dbg !12633

if.then191:                                       ; preds = %for.body185
  %133 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12634
  %subs192 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %133, i32 0, i32 12, !dbg !12636
  %134 = load %struct.eqn_d*, %struct.eqn_d** %subs192, align 8, !dbg !12636
  %135 = load i32, i32* %eq, align 4, !dbg !12637
  %idxprom193 = sext i32 %135 to i64, !dbg !12634
  %arrayidx194 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %134, i64 %idxprom193, !dbg !12634
  %coef195 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx194, i32 0, i32 3, !dbg !12638
  %136 = load i32*, i32** %coef195, align 8, !dbg !12638
  %arrayidx196 = getelementptr inbounds i32, i32* %136, i64 0, !dbg !12634
  %137 = load i32, i32* %arrayidx196, align 4, !dbg !12634
  store i32 %137, i32* %dist, align 4, !dbg !12639
  %138 = load i32, i32* %dist, align 4, !dbg !12640
  %139 = load i32*, i32** %dist_v, align 8, !dbg !12641
  %140 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12642
  %subs197 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %140, i32 0, i32 12, !dbg !12643
  %141 = load %struct.eqn_d*, %struct.eqn_d** %subs197, align 8, !dbg !12643
  %142 = load i32, i32* %eq, align 4, !dbg !12644
  %idxprom198 = sext i32 %142 to i64, !dbg !12642
  %arrayidx199 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %141, i64 %idxprom198, !dbg !12642
  %key200 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx199, i32 0, i32 0, !dbg !12645
  %143 = load i32, i32* %key200, align 8, !dbg !12645
  %sub = sub nsw i32 %143, 1, !dbg !12646
  %idxprom201 = sext i32 %sub to i64, !dbg !12641
  %arrayidx202 = getelementptr inbounds i32, i32* %139, i64 %idxprom201, !dbg !12641
  store i32 %138, i32* %arrayidx202, align 4, !dbg !12647
  br label %if.end203, !dbg !12648

if.end203:                                        ; preds = %if.then191, %for.body185
  br label %for.inc204, !dbg !12649

for.inc204:                                       ; preds = %if.end203
  %144 = load i32, i32* %eq, align 4, !dbg !12650
  %inc205 = add nsw i32 %144, 1, !dbg !12650
  store i32 %inc205, i32* %eq, align 4, !dbg !12650
  br label %for.cond182, !dbg !12651, !llvm.loop !12652

for.end206:                                       ; preds = %for.cond182
  store i32 0, i32* %j, align 4, !dbg !12654
  br label %for.cond207, !dbg !12656

for.cond207:                                      ; preds = %for.inc224, %for.end206
  %145 = load i32, i32* %j, align 4, !dbg !12657
  %146 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12659
  %loop_nest208 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %146, i32 0, i32 4, !dbg !12659
  %147 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest208, align 8, !dbg !12659
  %tobool209 = icmp ne %struct.VEC_loop_p_heap* %147, null, !dbg !12659
  br i1 %tobool209, label %cond.true210, label %cond.false213, !dbg !12659

cond.true210:                                     ; preds = %for.cond207
  %148 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12659
  %loop_nest211 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %148, i32 0, i32 4, !dbg !12659
  %149 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest211, align 8, !dbg !12659
  %base212 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %149, i32 0, i32 0, !dbg !12659
  br label %cond.end214, !dbg !12659

cond.false213:                                    ; preds = %for.cond207
  br label %cond.end214, !dbg !12659

cond.end214:                                      ; preds = %cond.false213, %cond.true210
  %cond215 = phi %struct.VEC_loop_p_base* [ %base212, %cond.true210 ], [ null, %cond.false213 ], !dbg !12659
  %call216 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond215), !dbg !12659
  %cmp217 = icmp ult i32 %145, %call216, !dbg !12660
  br i1 %cmp217, label %for.body218, label %for.end226, !dbg !12661

for.body218:                                      ; preds = %cond.end214
  %150 = load i32*, i32** %dist_v, align 8, !dbg !12662
  %151 = load i32, i32* %j, align 4, !dbg !12663
  %idxprom219 = zext i32 %151 to i64, !dbg !12662
  %arrayidx220 = getelementptr inbounds i32, i32* %150, i64 %idxprom219, !dbg !12662
  %152 = load i32, i32* %arrayidx220, align 4, !dbg !12662
  %call221 = call i32 @dir_from_dist(i32 %152), !dbg !12664
  %153 = load i32*, i32** %dir_v, align 8, !dbg !12665
  %154 = load i32, i32* %j, align 4, !dbg !12666
  %idxprom222 = zext i32 %154 to i64, !dbg !12665
  %arrayidx223 = getelementptr inbounds i32, i32* %153, i64 %idxprom222, !dbg !12665
  store i32 %call221, i32* %arrayidx223, align 4, !dbg !12667
  br label %for.inc224, !dbg !12665

for.inc224:                                       ; preds = %for.body218
  %155 = load i32, i32* %j, align 4, !dbg !12668
  %inc225 = add i32 %155, 1, !dbg !12668
  store i32 %inc225, i32* %j, align 4, !dbg !12668
  br label %for.cond207, !dbg !12669, !llvm.loop !12670

for.end226:                                       ; preds = %cond.end214
  %156 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12672
  %157 = load i32*, i32** %dist_v, align 8, !dbg !12673
  call void @save_dist_v(%struct.data_dependence_relation* %156, i32* %157), !dbg !12674
  %158 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12675
  %159 = load i32*, i32** %dir_v, align 8, !dbg !12676
  call void @save_dir_v(%struct.data_dependence_relation* %158, i32* %159), !dbg !12677
  br label %if.end227, !dbg !12678

if.end227:                                        ; preds = %for.end226, %found_dist
  br label %next_problem, !dbg !12679

next_problem:                                     ; preds = %if.end227, %if.then135, %if.then
  call void @llvm.dbg.label(metadata !12680), !dbg !12681
  %160 = load %struct.omega_pb_d*, %struct.omega_pb_d** %copy, align 8, !dbg !12682
  call void @omega_free_problem(%struct.omega_pb_d* %160), !dbg !12683
  br label %for.inc228, !dbg !12684

for.inc228:                                       ; preds = %next_problem
  %161 = load i32, i32* %i, align 4, !dbg !12685
  %inc229 = add i32 %161, 1, !dbg !12685
  store i32 %inc229, i32* %i, align 4, !dbg !12685
  br label %for.cond, !dbg !12686, !llvm.loop !12687

for.end230:                                       ; preds = %land.end
  ret void, !dbg !12689
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @omega_add_zero_eq(%struct.omega_pb_d* %pb, i32 %color) #0 !dbg !12690 {
entry:
  %pb.addr = alloca %struct.omega_pb_d*, align 8
  %color.addr = alloca i32, align 4
  %idx = alloca i32, align 4
  store %struct.omega_pb_d* %pb, %struct.omega_pb_d** %pb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.omega_pb_d** %pb.addr, metadata !12691, metadata !DIExpression()), !dbg !12692
  store i32 %color, i32* %color.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %color.addr, metadata !12693, metadata !DIExpression()), !dbg !12694
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !12695, metadata !DIExpression()), !dbg !12696
  %0 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12697
  %num_eqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %0, i32 0, i32 2, !dbg !12698
  %1 = load i32, i32* %num_eqs, align 8, !dbg !12699
  %inc = add nsw i32 %1, 1, !dbg !12699
  store i32 %inc, i32* %num_eqs, align 8, !dbg !12699
  store i32 %1, i32* %idx, align 4, !dbg !12696
  %2 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12700
  %num_eqs1 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %2, i32 0, i32 2, !dbg !12700
  %3 = load i32, i32* %num_eqs1, align 8, !dbg !12700
  %4 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !12700
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %4, i64 66, !dbg !12700
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !12700
  %5 = load i32, i32* %value, align 8, !dbg !12700
  %cmp = icmp sle i32 %3, %5, !dbg !12700
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12700

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.128, i64 0, i64 0), i32 259, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !12700
  br label %cond.end, !dbg !12700

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12700

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12700
  %6 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12701
  %eqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %6, i32 0, i32 11, !dbg !12702
  %7 = load %struct.eqn_d*, %struct.eqn_d** %eqs, align 8, !dbg !12702
  %8 = load i32, i32* %idx, align 4, !dbg !12703
  %idxprom = sext i32 %8 to i64, !dbg !12701
  %arrayidx2 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %7, i64 %idxprom, !dbg !12701
  %9 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12704
  %num_vars = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %9, i32 0, i32 0, !dbg !12705
  %10 = load i32, i32* %num_vars, align 8, !dbg !12705
  call void @omega_init_eqn_zero(%struct.eqn_d* %arrayidx2, i32 %10), !dbg !12706
  %11 = load i32, i32* %color.addr, align 4, !dbg !12707
  %12 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12708
  %eqs3 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %12, i32 0, i32 11, !dbg !12709
  %13 = load %struct.eqn_d*, %struct.eqn_d** %eqs3, align 8, !dbg !12709
  %14 = load i32, i32* %idx, align 4, !dbg !12710
  %idxprom4 = sext i32 %14 to i64, !dbg !12708
  %arrayidx5 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %13, i64 %idxprom4, !dbg !12708
  %color6 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx5, i32 0, i32 2, !dbg !12711
  store i32 %11, i32* %color6, align 8, !dbg !12712
  %15 = load i32, i32* %idx, align 4, !dbg !12713
  ret i32 %15, !dbg !12714
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @init_omega_eq_with_af(%struct.omega_pb_d* %pb, i32 %eq, i32 %offset, %union.tree_node* %access_fun, %struct.data_dependence_relation* %ddr) #0 !dbg !12715 {
entry:
  %retval = alloca i8, align 1
  %pb.addr = alloca %struct.omega_pb_d*, align 8
  %eq.addr = alloca i32, align 4
  %offset.addr = alloca i32, align 4
  %access_fun.addr = alloca %union.tree_node*, align 8
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %left = alloca %union.tree_node*, align 8
  %right = alloca %union.tree_node*, align 8
  %var = alloca i32, align 4
  %var_idx = alloca i32, align 4
  store %struct.omega_pb_d* %pb, %struct.omega_pb_d** %pb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.omega_pb_d** %pb.addr, metadata !12718, metadata !DIExpression()), !dbg !12719
  store i32 %eq, i32* %eq.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %eq.addr, metadata !12720, metadata !DIExpression()), !dbg !12721
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !12722, metadata !DIExpression()), !dbg !12723
  store %union.tree_node* %access_fun, %union.tree_node** %access_fun.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_fun.addr, metadata !12724, metadata !DIExpression()), !dbg !12725
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !12726, metadata !DIExpression()), !dbg !12727
  %0 = load %union.tree_node*, %union.tree_node** %access_fun.addr, align 8, !dbg !12728
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !12728
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12728
  %bf.load = load i64, i64* %1, align 8, !dbg !12728
  %bf.clear = and i64 %bf.load, 65535, !dbg !12728
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12728
  switch i32 %bf.cast, label %sw.default73 [
    i32 146, label %sw.bb
    i32 23, label %sw.bb63
  ], !dbg !12729

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %left, metadata !12730, metadata !DIExpression()), !dbg !12733
  %2 = load %union.tree_node*, %union.tree_node** %access_fun.addr, align 8, !dbg !12734
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !12734
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !12734
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !12734
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !12734
  store %union.tree_node* %3, %union.tree_node** %left, align 8, !dbg !12733
  call void @llvm.dbg.declare(metadata %union.tree_node** %right, metadata !12735, metadata !DIExpression()), !dbg !12736
  %4 = load %union.tree_node*, %union.tree_node** %access_fun.addr, align 8, !dbg !12737
  %exp1 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !12737
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !12737
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 2, !dbg !12737
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !12737
  store %union.tree_node* %5, %union.tree_node** %right, align 8, !dbg !12736
  call void @llvm.dbg.declare(metadata i32* %var, metadata !12738, metadata !DIExpression()), !dbg !12739
  %6 = load %union.tree_node*, %union.tree_node** %access_fun.addr, align 8, !dbg !12740
  %exp4 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !12740
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !12740
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 0, !dbg !12740
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !12740
  %int_cst = bitcast %union.tree_node* %7 to %struct.tree_int_cst*, !dbg !12740
  %int_cst7 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !12740
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst7, i32 0, i32 0, !dbg !12740
  %8 = load i64, i64* %low, align 8, !dbg !12740
  %conv = trunc i64 %8 to i32, !dbg !12740
  store i32 %conv, i32* %var, align 4, !dbg !12739
  call void @llvm.dbg.declare(metadata i32* %var_idx, metadata !12741, metadata !DIExpression()), !dbg !12742
  %9 = load %union.tree_node*, %union.tree_node** %right, align 8, !dbg !12743
  %base8 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !12743
  %10 = bitcast %struct.tree_base* %base8 to i64*, !dbg !12743
  %bf.load9 = load i64, i64* %10, align 8, !dbg !12743
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !12743
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !12743
  %cmp = icmp ne i32 %bf.cast11, 23, !dbg !12745
  br i1 %cmp, label %if.then, label %if.end, !dbg !12746

if.then:                                          ; preds = %sw.bb
  store i8 0, i8* %retval, align 1, !dbg !12747
  br label %return, !dbg !12747

if.end:                                           ; preds = %sw.bb
  %11 = load i32, i32* %var, align 4, !dbg !12748
  %12 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12749
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %12, i32 0, i32 4, !dbg !12749
  %13 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !12749
  %call = call i32 @index_in_loop_nest(i32 %11, %struct.VEC_loop_p_heap* %13), !dbg !12750
  store i32 %call, i32* %var_idx, align 4, !dbg !12751
  %14 = load %union.tree_node*, %union.tree_node** %right, align 8, !dbg !12752
  %call13 = call i64 @int_cst_value(%union.tree_node* %14), !dbg !12753
  %conv14 = trunc i64 %call13 to i32, !dbg !12753
  %15 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12754
  %eqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %15, i32 0, i32 11, !dbg !12755
  %16 = load %struct.eqn_d*, %struct.eqn_d** %eqs, align 8, !dbg !12755
  %17 = load i32, i32* %eq.addr, align 4, !dbg !12756
  %idxprom = zext i32 %17 to i64, !dbg !12754
  %arrayidx15 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %16, i64 %idxprom, !dbg !12754
  %coef = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx15, i32 0, i32 3, !dbg !12757
  %18 = load i32*, i32** %coef, align 8, !dbg !12757
  %19 = load i32, i32* %offset.addr, align 4, !dbg !12758
  %20 = load i32, i32* %var_idx, align 4, !dbg !12759
  %add = add i32 %19, %20, !dbg !12760
  %add16 = add i32 %add, 1, !dbg !12761
  %idxprom17 = zext i32 %add16 to i64, !dbg !12754
  %arrayidx18 = getelementptr inbounds i32, i32* %18, i64 %idxprom17, !dbg !12754
  store i32 %conv14, i32* %arrayidx18, align 4, !dbg !12762
  %21 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12763
  %inner_loop = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %21, i32 0, i32 7, !dbg !12763
  %22 = load i32, i32* %inner_loop, align 8, !dbg !12763
  %23 = load i32, i32* %var_idx, align 4, !dbg !12763
  %cmp19 = icmp ugt i32 %22, %23, !dbg !12763
  br i1 %cmp19, label %cond.true, label %cond.false, !dbg !12763

cond.true:                                        ; preds = %if.end
  %24 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12763
  %inner_loop21 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %24, i32 0, i32 7, !dbg !12763
  %25 = load i32, i32* %inner_loop21, align 8, !dbg !12763
  br label %cond.end, !dbg !12763

cond.false:                                       ; preds = %if.end
  %26 = load i32, i32* %var_idx, align 4, !dbg !12763
  br label %cond.end, !dbg !12763

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %25, %cond.true ], [ %26, %cond.false ], !dbg !12763
  %27 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12764
  %inner_loop22 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %27, i32 0, i32 7, !dbg !12764
  store i32 %cond, i32* %inner_loop22, align 8, !dbg !12765
  %28 = load i32, i32* %offset.addr, align 4, !dbg !12766
  %cmp23 = icmp eq i32 %28, 0, !dbg !12768
  br i1 %cmp23, label %if.then25, label %if.end46, !dbg !12769

if.then25:                                        ; preds = %cond.end
  %29 = load %union.tree_node*, %union.tree_node** %right, align 8, !dbg !12770
  %call26 = call i64 @int_cst_value(%union.tree_node* %29), !dbg !12771
  %30 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12772
  %eqs27 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %30, i32 0, i32 11, !dbg !12773
  %31 = load %struct.eqn_d*, %struct.eqn_d** %eqs27, align 8, !dbg !12773
  %32 = load i32, i32* %eq.addr, align 4, !dbg !12774
  %idxprom28 = zext i32 %32 to i64, !dbg !12772
  %arrayidx29 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %31, i64 %idxprom28, !dbg !12772
  %coef30 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx29, i32 0, i32 3, !dbg !12775
  %33 = load i32*, i32** %coef30, align 8, !dbg !12775
  %34 = load i32, i32* %var_idx, align 4, !dbg !12776
  %35 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12777
  %loop_nest31 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %35, i32 0, i32 4, !dbg !12777
  %36 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest31, align 8, !dbg !12777
  %tobool = icmp ne %struct.VEC_loop_p_heap* %36, null, !dbg !12777
  br i1 %tobool, label %cond.true32, label %cond.false35, !dbg !12777

cond.true32:                                      ; preds = %if.then25
  %37 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12777
  %loop_nest33 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %37, i32 0, i32 4, !dbg !12777
  %38 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest33, align 8, !dbg !12777
  %base34 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %38, i32 0, i32 0, !dbg !12777
  br label %cond.end36, !dbg !12777

cond.false35:                                     ; preds = %if.then25
  br label %cond.end36, !dbg !12777

cond.end36:                                       ; preds = %cond.false35, %cond.true32
  %cond37 = phi %struct.VEC_loop_p_base* [ %base34, %cond.true32 ], [ null, %cond.false35 ], !dbg !12777
  %call38 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond37), !dbg !12777
  %add39 = add i32 %34, %call38, !dbg !12778
  %add40 = add i32 %add39, 1, !dbg !12779
  %idxprom41 = zext i32 %add40 to i64, !dbg !12772
  %arrayidx42 = getelementptr inbounds i32, i32* %33, i64 %idxprom41, !dbg !12772
  %39 = load i32, i32* %arrayidx42, align 4, !dbg !12780
  %conv43 = sext i32 %39 to i64, !dbg !12780
  %add44 = add nsw i64 %conv43, %call26, !dbg !12780
  %conv45 = trunc i64 %add44 to i32, !dbg !12780
  store i32 %conv45, i32* %arrayidx42, align 4, !dbg !12780
  br label %if.end46, !dbg !12772

if.end46:                                         ; preds = %cond.end36, %cond.end
  %40 = load %union.tree_node*, %union.tree_node** %left, align 8, !dbg !12781
  %base47 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !12781
  %41 = bitcast %struct.tree_base* %base47 to i64*, !dbg !12781
  %bf.load48 = load i64, i64* %41, align 8, !dbg !12781
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !12781
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !12781
  switch i32 %bf.cast50, label %sw.default [
    i32 146, label %sw.bb51
    i32 23, label %sw.bb53
  ], !dbg !12782

sw.bb51:                                          ; preds = %if.end46
  %42 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12783
  %43 = load i32, i32* %eq.addr, align 4, !dbg !12785
  %44 = load i32, i32* %offset.addr, align 4, !dbg !12786
  %45 = load %union.tree_node*, %union.tree_node** %left, align 8, !dbg !12787
  %46 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !12788
  %call52 = call zeroext i8 @init_omega_eq_with_af(%struct.omega_pb_d* %42, i32 %43, i32 %44, %union.tree_node* %45, %struct.data_dependence_relation* %46), !dbg !12789
  store i8 %call52, i8* %retval, align 1, !dbg !12790
  br label %return, !dbg !12790

sw.bb53:                                          ; preds = %if.end46
  %47 = load %union.tree_node*, %union.tree_node** %left, align 8, !dbg !12791
  %call54 = call i64 @int_cst_value(%union.tree_node* %47), !dbg !12792
  %48 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12793
  %eqs55 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %48, i32 0, i32 11, !dbg !12794
  %49 = load %struct.eqn_d*, %struct.eqn_d** %eqs55, align 8, !dbg !12794
  %50 = load i32, i32* %eq.addr, align 4, !dbg !12795
  %idxprom56 = zext i32 %50 to i64, !dbg !12793
  %arrayidx57 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %49, i64 %idxprom56, !dbg !12793
  %coef58 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx57, i32 0, i32 3, !dbg !12796
  %51 = load i32*, i32** %coef58, align 8, !dbg !12796
  %arrayidx59 = getelementptr inbounds i32, i32* %51, i64 0, !dbg !12793
  %52 = load i32, i32* %arrayidx59, align 4, !dbg !12797
  %conv60 = sext i32 %52 to i64, !dbg !12797
  %add61 = add nsw i64 %conv60, %call54, !dbg !12797
  %conv62 = trunc i64 %add61 to i32, !dbg !12797
  store i32 %conv62, i32* %arrayidx59, align 4, !dbg !12797
  store i8 1, i8* %retval, align 1, !dbg !12798
  br label %return, !dbg !12798

sw.default:                                       ; preds = %if.end46
  store i8 0, i8* %retval, align 1, !dbg !12799
  br label %return, !dbg !12799

sw.bb63:                                          ; preds = %entry
  %53 = load %union.tree_node*, %union.tree_node** %access_fun.addr, align 8, !dbg !12800
  %call64 = call i64 @int_cst_value(%union.tree_node* %53), !dbg !12801
  %54 = load %struct.omega_pb_d*, %struct.omega_pb_d** %pb.addr, align 8, !dbg !12802
  %eqs65 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %54, i32 0, i32 11, !dbg !12803
  %55 = load %struct.eqn_d*, %struct.eqn_d** %eqs65, align 8, !dbg !12803
  %56 = load i32, i32* %eq.addr, align 4, !dbg !12804
  %idxprom66 = zext i32 %56 to i64, !dbg !12802
  %arrayidx67 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %55, i64 %idxprom66, !dbg !12802
  %coef68 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx67, i32 0, i32 3, !dbg !12805
  %57 = load i32*, i32** %coef68, align 8, !dbg !12805
  %arrayidx69 = getelementptr inbounds i32, i32* %57, i64 0, !dbg !12802
  %58 = load i32, i32* %arrayidx69, align 4, !dbg !12806
  %conv70 = sext i32 %58 to i64, !dbg !12806
  %add71 = add nsw i64 %conv70, %call64, !dbg !12806
  %conv72 = trunc i64 %add71 to i32, !dbg !12806
  store i32 %conv72, i32* %arrayidx69, align 4, !dbg !12806
  store i8 1, i8* %retval, align 1, !dbg !12807
  br label %return, !dbg !12807

sw.default73:                                     ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !12808
  br label %return, !dbg !12808

return:                                           ; preds = %sw.default73, %sw.bb63, %sw.default, %sw.bb53, %sw.bb51, %if.then
  %59 = load i8, i8* %retval, align 1, !dbg !12809
  ret i8 %59, !dbg !12809
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @lambda_vector_gcd(i32* %vector, i32 %size) #0 !dbg !12810 {
entry:
  %vector.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %gcd1 = alloca i32, align 4
  store i32* %vector, i32** %vector.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vector.addr, metadata !12813, metadata !DIExpression()), !dbg !12814
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !12815, metadata !DIExpression()), !dbg !12816
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12817, metadata !DIExpression()), !dbg !12818
  call void @llvm.dbg.declare(metadata i32* %gcd1, metadata !12819, metadata !DIExpression()), !dbg !12820
  store i32 0, i32* %gcd1, align 4, !dbg !12820
  %0 = load i32, i32* %size.addr, align 4, !dbg !12821
  %cmp = icmp sgt i32 %0, 0, !dbg !12823
  br i1 %cmp, label %if.then, label %if.end, !dbg !12824

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %vector.addr, align 8, !dbg !12825
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 0, !dbg !12825
  %2 = load i32, i32* %arrayidx, align 4, !dbg !12825
  store i32 %2, i32* %gcd1, align 4, !dbg !12827
  store i32 1, i32* %i, align 4, !dbg !12828
  br label %for.cond, !dbg !12830

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4, !dbg !12831
  %4 = load i32, i32* %size.addr, align 4, !dbg !12833
  %cmp1 = icmp slt i32 %3, %4, !dbg !12834
  br i1 %cmp1, label %for.body, label %for.end, !dbg !12835

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %gcd1, align 4, !dbg !12836
  %6 = load i32*, i32** %vector.addr, align 8, !dbg !12837
  %7 = load i32, i32* %i, align 4, !dbg !12838
  %idxprom = sext i32 %7 to i64, !dbg !12837
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !12837
  %8 = load i32, i32* %arrayidx2, align 4, !dbg !12837
  %call = call i32 @gcd(i32 %5, i32 %8), !dbg !12839
  store i32 %call, i32* %gcd1, align 4, !dbg !12840
  br label %for.inc, !dbg !12841

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !12842
  %inc = add nsw i32 %9, 1, !dbg !12842
  store i32 %inc, i32* %i, align 4, !dbg !12842
  br label %for.cond, !dbg !12843, !llvm.loop !12844

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !12846

if.end:                                           ; preds = %for.end, %entry
  %10 = load i32, i32* %gcd1, align 4, !dbg !12847
  ret i32 %10, !dbg !12848
}

; Function Attrs: noinline nounwind uwtable
define internal void @omega_init_eqn_zero(%struct.eqn_d* %e, i32 %s) #0 !dbg !12849 {
entry:
  %e.addr = alloca %struct.eqn_d*, align 8
  %s.addr = alloca i32, align 4
  store %struct.eqn_d* %e, %struct.eqn_d** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eqn_d** %e.addr, metadata !12852, metadata !DIExpression()), !dbg !12853
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !12854, metadata !DIExpression()), !dbg !12855
  %0 = load %struct.eqn_d*, %struct.eqn_d** %e.addr, align 8, !dbg !12856
  %key = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %0, i32 0, i32 0, !dbg !12857
  store i32 0, i32* %key, align 8, !dbg !12858
  %1 = load %struct.eqn_d*, %struct.eqn_d** %e.addr, align 8, !dbg !12859
  %touched = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %1, i32 0, i32 1, !dbg !12860
  store i32 0, i32* %touched, align 4, !dbg !12861
  %2 = load %struct.eqn_d*, %struct.eqn_d** %e.addr, align 8, !dbg !12862
  %color = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %2, i32 0, i32 2, !dbg !12863
  store i32 0, i32* %color, align 8, !dbg !12864
  %3 = load %struct.eqn_d*, %struct.eqn_d** %e.addr, align 8, !dbg !12865
  %coef = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %3, i32 0, i32 3, !dbg !12866
  %4 = load i32*, i32** %coef, align 8, !dbg !12866
  %5 = bitcast i32* %4 to i8*, !dbg !12867
  %6 = load i32, i32* %s.addr, align 4, !dbg !12868
  %add = add nsw i32 %6, 1, !dbg !12869
  %conv = sext i32 %add to i64, !dbg !12870
  %mul = mul i64 %conv, 4, !dbg !12871
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 %mul, i1 false), !dbg !12867
  ret void, !dbg !12872
}

; Function Attrs: noinline nounwind uwtable
define internal void @omega_copy_problem(%struct.omega_pb_d* %p1, %struct.omega_pb_d* %p2) #0 !dbg !12873 {
entry:
  %p1.addr = alloca %struct.omega_pb_d*, align 8
  %p2.addr = alloca %struct.omega_pb_d*, align 8
  %e = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.omega_pb_d* %p1, %struct.omega_pb_d** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.omega_pb_d** %p1.addr, metadata !12876, metadata !DIExpression()), !dbg !12877
  store %struct.omega_pb_d* %p2, %struct.omega_pb_d** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.omega_pb_d** %p2.addr, metadata !12878, metadata !DIExpression()), !dbg !12879
  call void @llvm.dbg.declare(metadata i32* %e, metadata !12880, metadata !DIExpression()), !dbg !12881
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12882, metadata !DIExpression()), !dbg !12883
  %0 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12884
  %num_vars = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %0, i32 0, i32 0, !dbg !12885
  %1 = load i32, i32* %num_vars, align 8, !dbg !12885
  %2 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !12886
  %num_vars1 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %2, i32 0, i32 0, !dbg !12887
  store i32 %1, i32* %num_vars1, align 8, !dbg !12888
  %3 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12889
  %hash_version = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %3, i32 0, i32 5, !dbg !12890
  %4 = load i32, i32* %hash_version, align 4, !dbg !12890
  %5 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !12891
  %hash_version2 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %5, i32 0, i32 5, !dbg !12892
  store i32 %4, i32* %hash_version2, align 4, !dbg !12893
  %6 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12894
  %variables_initialized = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %6, i32 0, i32 6, !dbg !12895
  %7 = load i8, i8* %variables_initialized, align 8, !dbg !12895
  %8 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !12896
  %variables_initialized3 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %8, i32 0, i32 6, !dbg !12897
  store i8 %7, i8* %variables_initialized3, align 8, !dbg !12898
  %9 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12899
  %variables_freed = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %9, i32 0, i32 7, !dbg !12900
  %10 = load i8, i8* %variables_freed, align 1, !dbg !12900
  %11 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !12901
  %variables_freed4 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %11, i32 0, i32 7, !dbg !12902
  store i8 %10, i8* %variables_freed4, align 1, !dbg !12903
  %12 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12904
  %safe_vars = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %12, i32 0, i32 1, !dbg !12905
  %13 = load i32, i32* %safe_vars, align 4, !dbg !12905
  %14 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !12906
  %safe_vars5 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %14, i32 0, i32 1, !dbg !12907
  store i32 %13, i32* %safe_vars5, align 4, !dbg !12908
  %15 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12909
  %num_eqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %15, i32 0, i32 2, !dbg !12910
  %16 = load i32, i32* %num_eqs, align 8, !dbg !12910
  %17 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !12911
  %num_eqs6 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %17, i32 0, i32 2, !dbg !12912
  store i32 %16, i32* %num_eqs6, align 8, !dbg !12913
  %18 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12914
  %num_subs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %18, i32 0, i32 4, !dbg !12915
  %19 = load i32, i32* %num_subs, align 8, !dbg !12915
  %20 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !12916
  %num_subs7 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %20, i32 0, i32 4, !dbg !12917
  store i32 %19, i32* %num_subs7, align 8, !dbg !12918
  %21 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12919
  %num_geqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %21, i32 0, i32 3, !dbg !12920
  %22 = load i32, i32* %num_geqs, align 4, !dbg !12920
  %23 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !12921
  %num_geqs8 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %23, i32 0, i32 3, !dbg !12922
  store i32 %22, i32* %num_geqs8, align 4, !dbg !12923
  %24 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12924
  %num_eqs9 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %24, i32 0, i32 2, !dbg !12926
  %25 = load i32, i32* %num_eqs9, align 8, !dbg !12926
  %sub = sub nsw i32 %25, 1, !dbg !12927
  store i32 %sub, i32* %e, align 4, !dbg !12928
  br label %for.cond, !dbg !12929

for.cond:                                         ; preds = %for.inc, %entry
  %26 = load i32, i32* %e, align 4, !dbg !12930
  %cmp = icmp sge i32 %26, 0, !dbg !12932
  br i1 %cmp, label %for.body, label %for.end, !dbg !12933

for.body:                                         ; preds = %for.cond
  %27 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !12934
  %eqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %27, i32 0, i32 11, !dbg !12935
  %28 = load %struct.eqn_d*, %struct.eqn_d** %eqs, align 8, !dbg !12935
  %29 = load i32, i32* %e, align 4, !dbg !12936
  %idxprom = sext i32 %29 to i64, !dbg !12934
  %arrayidx = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %28, i64 %idxprom, !dbg !12934
  %30 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12937
  %eqs10 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %30, i32 0, i32 11, !dbg !12938
  %31 = load %struct.eqn_d*, %struct.eqn_d** %eqs10, align 8, !dbg !12938
  %32 = load i32, i32* %e, align 4, !dbg !12939
  %idxprom11 = sext i32 %32 to i64, !dbg !12937
  %arrayidx12 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %31, i64 %idxprom11, !dbg !12937
  %33 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12940
  %num_vars13 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %33, i32 0, i32 0, !dbg !12941
  %34 = load i32, i32* %num_vars13, align 8, !dbg !12941
  call void @omega_copy_eqn(%struct.eqn_d* %arrayidx, %struct.eqn_d* %arrayidx12, i32 %34), !dbg !12942
  br label %for.inc, !dbg !12942

for.inc:                                          ; preds = %for.body
  %35 = load i32, i32* %e, align 4, !dbg !12943
  %dec = add nsw i32 %35, -1, !dbg !12943
  store i32 %dec, i32* %e, align 4, !dbg !12943
  br label %for.cond, !dbg !12944, !llvm.loop !12945

for.end:                                          ; preds = %for.cond
  %36 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12947
  %num_geqs14 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %36, i32 0, i32 3, !dbg !12949
  %37 = load i32, i32* %num_geqs14, align 4, !dbg !12949
  %sub15 = sub nsw i32 %37, 1, !dbg !12950
  store i32 %sub15, i32* %e, align 4, !dbg !12951
  br label %for.cond16, !dbg !12952

for.cond16:                                       ; preds = %for.inc25, %for.end
  %38 = load i32, i32* %e, align 4, !dbg !12953
  %cmp17 = icmp sge i32 %38, 0, !dbg !12955
  br i1 %cmp17, label %for.body18, label %for.end27, !dbg !12956

for.body18:                                       ; preds = %for.cond16
  %39 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !12957
  %geqs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %39, i32 0, i32 10, !dbg !12958
  %40 = load %struct.eqn_d*, %struct.eqn_d** %geqs, align 8, !dbg !12958
  %41 = load i32, i32* %e, align 4, !dbg !12959
  %idxprom19 = sext i32 %41 to i64, !dbg !12957
  %arrayidx20 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %40, i64 %idxprom19, !dbg !12957
  %42 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12960
  %geqs21 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %42, i32 0, i32 10, !dbg !12961
  %43 = load %struct.eqn_d*, %struct.eqn_d** %geqs21, align 8, !dbg !12961
  %44 = load i32, i32* %e, align 4, !dbg !12962
  %idxprom22 = sext i32 %44 to i64, !dbg !12960
  %arrayidx23 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %43, i64 %idxprom22, !dbg !12960
  %45 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12963
  %num_vars24 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %45, i32 0, i32 0, !dbg !12964
  %46 = load i32, i32* %num_vars24, align 8, !dbg !12964
  call void @omega_copy_eqn(%struct.eqn_d* %arrayidx20, %struct.eqn_d* %arrayidx23, i32 %46), !dbg !12965
  br label %for.inc25, !dbg !12965

for.inc25:                                        ; preds = %for.body18
  %47 = load i32, i32* %e, align 4, !dbg !12966
  %dec26 = add nsw i32 %47, -1, !dbg !12966
  store i32 %dec26, i32* %e, align 4, !dbg !12966
  br label %for.cond16, !dbg !12967, !llvm.loop !12968

for.end27:                                        ; preds = %for.cond16
  %48 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12970
  %num_subs28 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %48, i32 0, i32 4, !dbg !12972
  %49 = load i32, i32* %num_subs28, align 8, !dbg !12972
  %sub29 = sub nsw i32 %49, 1, !dbg !12973
  store i32 %sub29, i32* %e, align 4, !dbg !12974
  br label %for.cond30, !dbg !12975

for.cond30:                                       ; preds = %for.inc39, %for.end27
  %50 = load i32, i32* %e, align 4, !dbg !12976
  %cmp31 = icmp sge i32 %50, 0, !dbg !12978
  br i1 %cmp31, label %for.body32, label %for.end41, !dbg !12979

for.body32:                                       ; preds = %for.cond30
  %51 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !12980
  %subs = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %51, i32 0, i32 12, !dbg !12981
  %52 = load %struct.eqn_d*, %struct.eqn_d** %subs, align 8, !dbg !12981
  %53 = load i32, i32* %e, align 4, !dbg !12982
  %idxprom33 = sext i32 %53 to i64, !dbg !12980
  %arrayidx34 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %52, i64 %idxprom33, !dbg !12980
  %54 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12983
  %subs35 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %54, i32 0, i32 12, !dbg !12984
  %55 = load %struct.eqn_d*, %struct.eqn_d** %subs35, align 8, !dbg !12984
  %56 = load i32, i32* %e, align 4, !dbg !12985
  %idxprom36 = sext i32 %56 to i64, !dbg !12983
  %arrayidx37 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %55, i64 %idxprom36, !dbg !12983
  %57 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12986
  %num_vars38 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %57, i32 0, i32 0, !dbg !12987
  %58 = load i32, i32* %num_vars38, align 8, !dbg !12987
  call void @omega_copy_eqn(%struct.eqn_d* %arrayidx34, %struct.eqn_d* %arrayidx37, i32 %58), !dbg !12988
  br label %for.inc39, !dbg !12988

for.inc39:                                        ; preds = %for.body32
  %59 = load i32, i32* %e, align 4, !dbg !12989
  %dec40 = add nsw i32 %59, -1, !dbg !12989
  store i32 %dec40, i32* %e, align 4, !dbg !12989
  br label %for.cond30, !dbg !12990, !llvm.loop !12991

for.end41:                                        ; preds = %for.cond30
  %60 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !12993
  %num_vars42 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %60, i32 0, i32 0, !dbg !12995
  %61 = load i32, i32* %num_vars42, align 8, !dbg !12995
  store i32 %61, i32* %i, align 4, !dbg !12996
  br label %for.cond43, !dbg !12997

for.cond43:                                       ; preds = %for.inc51, %for.end41
  %62 = load i32, i32* %i, align 4, !dbg !12998
  %cmp44 = icmp sge i32 %62, 0, !dbg !13000
  br i1 %cmp44, label %for.body45, label %for.end53, !dbg !13001

for.body45:                                       ; preds = %for.cond43
  %63 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !13002
  %var = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %63, i32 0, i32 8, !dbg !13003
  %64 = load i32*, i32** %var, align 8, !dbg !13003
  %65 = load i32, i32* %i, align 4, !dbg !13004
  %idxprom46 = sext i32 %65 to i64, !dbg !13002
  %arrayidx47 = getelementptr inbounds i32, i32* %64, i64 %idxprom46, !dbg !13002
  %66 = load i32, i32* %arrayidx47, align 4, !dbg !13002
  %67 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !13005
  %var48 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %67, i32 0, i32 8, !dbg !13006
  %68 = load i32*, i32** %var48, align 8, !dbg !13006
  %69 = load i32, i32* %i, align 4, !dbg !13007
  %idxprom49 = sext i32 %69 to i64, !dbg !13005
  %arrayidx50 = getelementptr inbounds i32, i32* %68, i64 %idxprom49, !dbg !13005
  store i32 %66, i32* %arrayidx50, align 4, !dbg !13008
  br label %for.inc51, !dbg !13005

for.inc51:                                        ; preds = %for.body45
  %70 = load i32, i32* %i, align 4, !dbg !13009
  %dec52 = add nsw i32 %70, -1, !dbg !13009
  store i32 %dec52, i32* %i, align 4, !dbg !13009
  br label %for.cond43, !dbg !13010, !llvm.loop !13011

for.end53:                                        ; preds = %for.cond43
  %71 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !13013
  %arrayidx54 = getelementptr inbounds %struct.param_info, %struct.param_info* %71, i64 64, !dbg !13013
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx54, i32 0, i32 1, !dbg !13013
  %72 = load i32, i32* %value, align 8, !dbg !13013
  store i32 %72, i32* %i, align 4, !dbg !13015
  br label %for.cond55, !dbg !13016

for.cond55:                                       ; preds = %for.inc63, %for.end53
  %73 = load i32, i32* %i, align 4, !dbg !13017
  %cmp56 = icmp sge i32 %73, 0, !dbg !13019
  br i1 %cmp56, label %for.body57, label %for.end65, !dbg !13020

for.body57:                                       ; preds = %for.cond55
  %74 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p2.addr, align 8, !dbg !13021
  %forwarding_address = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %74, i32 0, i32 9, !dbg !13022
  %75 = load i32*, i32** %forwarding_address, align 8, !dbg !13022
  %76 = load i32, i32* %i, align 4, !dbg !13023
  %idxprom58 = sext i32 %76 to i64, !dbg !13021
  %arrayidx59 = getelementptr inbounds i32, i32* %75, i64 %idxprom58, !dbg !13021
  %77 = load i32, i32* %arrayidx59, align 4, !dbg !13021
  %78 = load %struct.omega_pb_d*, %struct.omega_pb_d** %p1.addr, align 8, !dbg !13024
  %forwarding_address60 = getelementptr inbounds %struct.omega_pb_d, %struct.omega_pb_d* %78, i32 0, i32 9, !dbg !13025
  %79 = load i32*, i32** %forwarding_address60, align 8, !dbg !13025
  %80 = load i32, i32* %i, align 4, !dbg !13026
  %idxprom61 = sext i32 %80 to i64, !dbg !13024
  %arrayidx62 = getelementptr inbounds i32, i32* %79, i64 %idxprom61, !dbg !13024
  store i32 %77, i32* %arrayidx62, align 4, !dbg !13027
  br label %for.inc63, !dbg !13024

for.inc63:                                        ; preds = %for.body57
  %81 = load i32, i32* %i, align 4, !dbg !13028
  %dec64 = add nsw i32 %81, -1, !dbg !13028
  store i32 %dec64, i32* %i, align 4, !dbg !13028
  br label %for.cond55, !dbg !13029, !llvm.loop !13030

for.end65:                                        ; preds = %for.cond55
  ret void, !dbg !13032
}

declare dso_local i32 @omega_simplify_problem(%struct.omega_pb_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @omega_copy_eqn(%struct.eqn_d* %e1, %struct.eqn_d* %e2, i32 %s) #0 !dbg !13033 {
entry:
  %e1.addr = alloca %struct.eqn_d*, align 8
  %e2.addr = alloca %struct.eqn_d*, align 8
  %s.addr = alloca i32, align 4
  store %struct.eqn_d* %e1, %struct.eqn_d** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eqn_d** %e1.addr, metadata !13036, metadata !DIExpression()), !dbg !13037
  store %struct.eqn_d* %e2, %struct.eqn_d** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eqn_d** %e2.addr, metadata !13038, metadata !DIExpression()), !dbg !13039
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !13040, metadata !DIExpression()), !dbg !13041
  %0 = load %struct.eqn_d*, %struct.eqn_d** %e2.addr, align 8, !dbg !13042
  %key = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %0, i32 0, i32 0, !dbg !13043
  %1 = load i32, i32* %key, align 8, !dbg !13043
  %2 = load %struct.eqn_d*, %struct.eqn_d** %e1.addr, align 8, !dbg !13044
  %key1 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %2, i32 0, i32 0, !dbg !13045
  store i32 %1, i32* %key1, align 8, !dbg !13046
  %3 = load %struct.eqn_d*, %struct.eqn_d** %e2.addr, align 8, !dbg !13047
  %touched = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %3, i32 0, i32 1, !dbg !13048
  %4 = load i32, i32* %touched, align 4, !dbg !13048
  %5 = load %struct.eqn_d*, %struct.eqn_d** %e1.addr, align 8, !dbg !13049
  %touched2 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %5, i32 0, i32 1, !dbg !13050
  store i32 %4, i32* %touched2, align 4, !dbg !13051
  %6 = load %struct.eqn_d*, %struct.eqn_d** %e2.addr, align 8, !dbg !13052
  %color = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %6, i32 0, i32 2, !dbg !13053
  %7 = load i32, i32* %color, align 8, !dbg !13053
  %8 = load %struct.eqn_d*, %struct.eqn_d** %e1.addr, align 8, !dbg !13054
  %color3 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %8, i32 0, i32 2, !dbg !13055
  store i32 %7, i32* %color3, align 8, !dbg !13056
  %9 = load %struct.eqn_d*, %struct.eqn_d** %e1.addr, align 8, !dbg !13057
  %coef = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %9, i32 0, i32 3, !dbg !13058
  %10 = load i32*, i32** %coef, align 8, !dbg !13058
  %11 = bitcast i32* %10 to i8*, !dbg !13059
  %12 = load %struct.eqn_d*, %struct.eqn_d** %e2.addr, align 8, !dbg !13060
  %coef4 = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %12, i32 0, i32 3, !dbg !13061
  %13 = load i32*, i32** %coef4, align 8, !dbg !13061
  %14 = bitcast i32* %13 to i8*, !dbg !13059
  %15 = load i32, i32* %s.addr, align 4, !dbg !13062
  %add = add nsw i32 %15, 1, !dbg !13063
  %conv = sext i32 %add to i64, !dbg !13064
  %mul = mul i64 %conv, 4, !dbg !13065
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %11, i8* align 4 %14, i64 %mul, i1 false), !dbg !13059
  ret void, !dbg !13066
}

; Function Attrs: noinline nounwind uwtable
define internal void @omega_free_eqns(%struct.eqn_d* %eq, i32 %n) #0 !dbg !13067 {
entry:
  %eq.addr = alloca %struct.eqn_d*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.eqn_d* %eq, %struct.eqn_d** %eq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eqn_d** %eq.addr, metadata !13068, metadata !DIExpression()), !dbg !13069
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !13070, metadata !DIExpression()), !dbg !13071
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13072, metadata !DIExpression()), !dbg !13073
  %0 = load i32, i32* %n.addr, align 4, !dbg !13074
  %sub = sub nsw i32 %0, 1, !dbg !13076
  store i32 %sub, i32* %i, align 4, !dbg !13077
  br label %for.cond, !dbg !13078

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !13079
  %cmp = icmp sge i32 %1, 0, !dbg !13081
  br i1 %cmp, label %for.body, label %for.end, !dbg !13082

for.body:                                         ; preds = %for.cond
  %2 = load %struct.eqn_d*, %struct.eqn_d** %eq.addr, align 8, !dbg !13083
  %3 = load i32, i32* %i, align 4, !dbg !13084
  %idxprom = sext i32 %3 to i64, !dbg !13083
  %arrayidx = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %2, i64 %idxprom, !dbg !13083
  %coef = getelementptr inbounds %struct.eqn_d, %struct.eqn_d* %arrayidx, i32 0, i32 3, !dbg !13085
  %4 = load i32*, i32** %coef, align 8, !dbg !13085
  %5 = bitcast i32* %4 to i8*, !dbg !13083
  call void @free(i8* %5), !dbg !13086
  br label %for.inc, !dbg !13086

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !13087
  %dec = add nsw i32 %6, -1, !dbg !13087
  store i32 %dec, i32* %i, align 4, !dbg !13087
  br label %for.cond, !dbg !13088, !llvm.loop !13089

for.end:                                          ; preds = %for.cond
  %7 = load %struct.eqn_d*, %struct.eqn_d** %eq.addr, align 8, !dbg !13091
  %8 = bitcast %struct.eqn_d* %7 to i8*, !dbg !13091
  call void @free(i8* %8), !dbg !13092
  ret void, !dbg !13093
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !13094 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !13095, metadata !DIExpression()), !dbg !13096
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13097
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !13098
  %cmp = icmp uge i32 %call, 6, !dbg !13099
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !13100

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13101
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !13102
  %cmp2 = icmp ule i32 %call1, 9, !dbg !13103
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !13104
  %land.ext = zext i1 %2 to i32, !dbg !13100
  %conv = trunc i32 %land.ext to i8, !dbg !13098
  ret i8 %conv, !dbg !13105
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !13106 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !13107, metadata !DIExpression()), !dbg !13108
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !13109, metadata !DIExpression()), !dbg !13110
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !13111
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !13113
  %tobool = icmp ne i8 %call, 0, !dbg !13113
  br i1 %tobool, label %if.then, label %if.else, !dbg !13114

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !13115
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !13117
  %2 = load i32, i32* %i.addr, align 4, !dbg !13118
  %idx.ext = zext i32 %2 to i64, !dbg !13119
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !13119
  store %union.tree_node** %add.ptr, %union.tree_node*** %retval, align 8, !dbg !13120
  br label %return, !dbg !13120

if.else:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !13121
  br label %return, !dbg !13121

return:                                           ; preds = %if.else, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !13122
  ret %union.tree_node** %3, !dbg !13122
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_data_ref_loc_heap_reserve(%struct.VEC_data_ref_loc_heap** %vec_, i32 %alloc_) #0 !dbg !13123 {
entry:
  %vec_.addr = alloca %struct.VEC_data_ref_loc_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_data_ref_loc_heap** %vec_, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_heap*** %vec_.addr, metadata !13126, metadata !DIExpression()), !dbg !13127
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13128, metadata !DIExpression()), !dbg !13127
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !13129, metadata !DIExpression()), !dbg !13127
  %0 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8, !dbg !13127
  %1 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %0, align 8, !dbg !13127
  %tobool = icmp ne %struct.VEC_data_ref_loc_heap* %1, null, !dbg !13127
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13127

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8, !dbg !13127
  %3 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %2, align 8, !dbg !13127
  %base = getelementptr inbounds %struct.VEC_data_ref_loc_heap, %struct.VEC_data_ref_loc_heap* %3, i32 0, i32 0, !dbg !13127
  br label %cond.end, !dbg !13127

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13127

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_ref_loc_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13127
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !13127
  %call = call i32 @VEC_data_ref_loc_base_space(%struct.VEC_data_ref_loc_base* %cond, i32 %4), !dbg !13127
  %tobool1 = icmp ne i32 %call, 0, !dbg !13127
  %lnot = xor i1 %tobool1, true, !dbg !13127
  %lnot.ext = zext i1 %lnot to i32, !dbg !13127
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !13127
  %5 = load i32, i32* %extend, align 4, !dbg !13130
  %tobool2 = icmp ne i32 %5, 0, !dbg !13130
  br i1 %tobool2, label %if.then, label %if.end, !dbg !13127

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8, !dbg !13130
  %7 = load %struct.VEC_data_ref_loc_heap*, %struct.VEC_data_ref_loc_heap** %6, align 8, !dbg !13130
  %8 = bitcast %struct.VEC_data_ref_loc_heap* %7 to i8*, !dbg !13130
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !13130
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 16), !dbg !13130
  %10 = bitcast i8* %call3 to %struct.VEC_data_ref_loc_heap*, !dbg !13130
  %11 = load %struct.VEC_data_ref_loc_heap**, %struct.VEC_data_ref_loc_heap*** %vec_.addr, align 8, !dbg !13130
  store %struct.VEC_data_ref_loc_heap* %10, %struct.VEC_data_ref_loc_heap** %11, align 8, !dbg !13130
  br label %if.end, !dbg !13130

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !13127
  ret i32 %12, !dbg !13127
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.data_ref_loc_d* @VEC_data_ref_loc_base_quick_push(%struct.VEC_data_ref_loc_base* %vec_, %struct.data_ref_loc_d* %obj_) #0 !dbg !13132 {
entry:
  %vec_.addr = alloca %struct.VEC_data_ref_loc_base*, align 8
  %obj_.addr = alloca %struct.data_ref_loc_d*, align 8
  %slot_ = alloca %struct.data_ref_loc_d*, align 8
  store %struct.VEC_data_ref_loc_base* %vec_, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_base** %vec_.addr, metadata !13135, metadata !DIExpression()), !dbg !13136
  store %struct.data_ref_loc_d* %obj_, %struct.data_ref_loc_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_ref_loc_d** %obj_.addr, metadata !13137, metadata !DIExpression()), !dbg !13136
  call void @llvm.dbg.declare(metadata %struct.data_ref_loc_d** %slot_, metadata !13138, metadata !DIExpression()), !dbg !13136
  %0 = load %struct.VEC_data_ref_loc_base*, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8, !dbg !13136
  %num = getelementptr inbounds %struct.VEC_data_ref_loc_base, %struct.VEC_data_ref_loc_base* %0, i32 0, i32 0, !dbg !13136
  %1 = load i32, i32* %num, align 8, !dbg !13136
  %2 = load %struct.VEC_data_ref_loc_base*, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8, !dbg !13136
  %alloc = getelementptr inbounds %struct.VEC_data_ref_loc_base, %struct.VEC_data_ref_loc_base* %2, i32 0, i32 1, !dbg !13136
  %3 = load i32, i32* %alloc, align 4, !dbg !13136
  %cmp = icmp ult i32 %1, %3, !dbg !13136
  %conv = zext i1 %cmp to i32, !dbg !13136
  %4 = load %struct.VEC_data_ref_loc_base*, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8, !dbg !13136
  %vec = getelementptr inbounds %struct.VEC_data_ref_loc_base, %struct.VEC_data_ref_loc_base* %4, i32 0, i32 2, !dbg !13136
  %5 = load %struct.VEC_data_ref_loc_base*, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8, !dbg !13136
  %num1 = getelementptr inbounds %struct.VEC_data_ref_loc_base, %struct.VEC_data_ref_loc_base* %5, i32 0, i32 0, !dbg !13136
  %6 = load i32, i32* %num1, align 8, !dbg !13136
  %inc = add i32 %6, 1, !dbg !13136
  store i32 %inc, i32* %num1, align 8, !dbg !13136
  %idxprom = zext i32 %6 to i64, !dbg !13136
  %arrayidx = getelementptr inbounds [1 x %struct.data_ref_loc_d], [1 x %struct.data_ref_loc_d]* %vec, i64 0, i64 %idxprom, !dbg !13136
  store %struct.data_ref_loc_d* %arrayidx, %struct.data_ref_loc_d** %slot_, align 8, !dbg !13136
  %7 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %obj_.addr, align 8, !dbg !13139
  %tobool = icmp ne %struct.data_ref_loc_d* %7, null, !dbg !13139
  br i1 %tobool, label %if.then, label %if.end, !dbg !13136

if.then:                                          ; preds = %entry
  %8 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %slot_, align 8, !dbg !13139
  %9 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %obj_.addr, align 8, !dbg !13139
  %10 = bitcast %struct.data_ref_loc_d* %8 to i8*, !dbg !13139
  %11 = bitcast %struct.data_ref_loc_d* %9 to i8*, !dbg !13139
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !13139
  br label %if.end, !dbg !13139

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.data_ref_loc_d*, %struct.data_ref_loc_d** %slot_, align 8, !dbg !13136
  ret %struct.data_ref_loc_d* %12, !dbg !13136
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_data_ref_loc_base_space(%struct.VEC_data_ref_loc_base* %vec_, i32 %alloc_) #0 !dbg !13141 {
entry:
  %vec_.addr = alloca %struct.VEC_data_ref_loc_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_data_ref_loc_base* %vec_, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_ref_loc_base** %vec_.addr, metadata !13144, metadata !DIExpression()), !dbg !13145
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13146, metadata !DIExpression()), !dbg !13145
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !13145
  %cmp = icmp sge i32 %0, 0, !dbg !13145
  %conv = zext i1 %cmp to i32, !dbg !13145
  %1 = load %struct.VEC_data_ref_loc_base*, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8, !dbg !13145
  %tobool = icmp ne %struct.VEC_data_ref_loc_base* %1, null, !dbg !13145
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13145

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_data_ref_loc_base*, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8, !dbg !13145
  %alloc = getelementptr inbounds %struct.VEC_data_ref_loc_base, %struct.VEC_data_ref_loc_base* %2, i32 0, i32 1, !dbg !13145
  %3 = load i32, i32* %alloc, align 4, !dbg !13145
  %4 = load %struct.VEC_data_ref_loc_base*, %struct.VEC_data_ref_loc_base** %vec_.addr, align 8, !dbg !13145
  %num = getelementptr inbounds %struct.VEC_data_ref_loc_base, %struct.VEC_data_ref_loc_base* %4, i32 0, i32 0, !dbg !13145
  %5 = load i32, i32* %num, align 8, !dbg !13145
  %sub = sub i32 %3, %5, !dbg !13145
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !13145
  %cmp1 = icmp uge i32 %sub, %6, !dbg !13145
  %conv2 = zext i1 %cmp1 to i32, !dbg !13145
  br label %cond.end, !dbg !13145

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !13145
  %tobool3 = icmp ne i32 %7, 0, !dbg !13145
  %lnot = xor i1 %tobool3, true, !dbg !13145
  %lnot.ext = zext i1 %lnot to i32, !dbg !13145
  br label %cond.end, !dbg !13145

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !13145
  ret i32 %cond, !dbg !13145
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

declare dso_local zeroext i8 @tree_contains_chrecs(%union.tree_node*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_data_reference_p_heap_reserve(%struct.VEC_data_reference_p_heap** %vec_, i32 %alloc_) #0 !dbg !13147 {
entry:
  %vec_.addr = alloca %struct.VEC_data_reference_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_data_reference_p_heap** %vec_, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap*** %vec_.addr, metadata !13150, metadata !DIExpression()), !dbg !13151
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13152, metadata !DIExpression()), !dbg !13151
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !13153, metadata !DIExpression()), !dbg !13151
  %0 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8, !dbg !13151
  %1 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %0, align 8, !dbg !13151
  %tobool = icmp ne %struct.VEC_data_reference_p_heap* %1, null, !dbg !13151
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13151

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8, !dbg !13151
  %3 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %2, align 8, !dbg !13151
  %base = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %3, i32 0, i32 0, !dbg !13151
  br label %cond.end, !dbg !13151

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13151

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_reference_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13151
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !13151
  %call = call i32 @VEC_data_reference_p_base_space(%struct.VEC_data_reference_p_base* %cond, i32 %4), !dbg !13151
  %tobool1 = icmp ne i32 %call, 0, !dbg !13151
  %lnot = xor i1 %tobool1, true, !dbg !13151
  %lnot.ext = zext i1 %lnot to i32, !dbg !13151
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !13151
  %5 = load i32, i32* %extend, align 4, !dbg !13154
  %tobool2 = icmp ne i32 %5, 0, !dbg !13154
  br i1 %tobool2, label %if.then, label %if.end, !dbg !13151

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8, !dbg !13154
  %7 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %6, align 8, !dbg !13154
  %8 = bitcast %struct.VEC_data_reference_p_heap* %7 to i8*, !dbg !13154
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !13154
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !13154
  %10 = bitcast i8* %call3 to %struct.VEC_data_reference_p_heap*, !dbg !13154
  %11 = load %struct.VEC_data_reference_p_heap**, %struct.VEC_data_reference_p_heap*** %vec_.addr, align 8, !dbg !13154
  store %struct.VEC_data_reference_p_heap* %10, %struct.VEC_data_reference_p_heap** %11, align 8, !dbg !13154
  br label %if.end, !dbg !13154

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !13151
  ret i32 %12, !dbg !13151
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.data_reference** @VEC_data_reference_p_base_quick_push(%struct.VEC_data_reference_p_base* %vec_, %struct.data_reference* %obj_) #0 !dbg !13156 {
entry:
  %vec_.addr = alloca %struct.VEC_data_reference_p_base*, align 8
  %obj_.addr = alloca %struct.data_reference*, align 8
  %slot_ = alloca %struct.data_reference**, align 8
  store %struct.VEC_data_reference_p_base* %vec_, %struct.VEC_data_reference_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_base** %vec_.addr, metadata !13160, metadata !DIExpression()), !dbg !13161
  store %struct.data_reference* %obj_, %struct.data_reference** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %obj_.addr, metadata !13162, metadata !DIExpression()), !dbg !13161
  call void @llvm.dbg.declare(metadata %struct.data_reference*** %slot_, metadata !13163, metadata !DIExpression()), !dbg !13161
  %0 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !13161
  %num = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %0, i32 0, i32 0, !dbg !13161
  %1 = load i32, i32* %num, align 8, !dbg !13161
  %2 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !13161
  %alloc = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %2, i32 0, i32 1, !dbg !13161
  %3 = load i32, i32* %alloc, align 4, !dbg !13161
  %cmp = icmp ult i32 %1, %3, !dbg !13161
  %conv = zext i1 %cmp to i32, !dbg !13161
  %4 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !13161
  %vec = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %4, i32 0, i32 2, !dbg !13161
  %5 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !13161
  %num1 = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %5, i32 0, i32 0, !dbg !13161
  %6 = load i32, i32* %num1, align 8, !dbg !13161
  %inc = add i32 %6, 1, !dbg !13161
  store i32 %inc, i32* %num1, align 8, !dbg !13161
  %idxprom = zext i32 %6 to i64, !dbg !13161
  %arrayidx = getelementptr inbounds [1 x %struct.data_reference*], [1 x %struct.data_reference*]* %vec, i64 0, i64 %idxprom, !dbg !13161
  store %struct.data_reference** %arrayidx, %struct.data_reference*** %slot_, align 8, !dbg !13161
  %7 = load %struct.data_reference*, %struct.data_reference** %obj_.addr, align 8, !dbg !13161
  %8 = load %struct.data_reference**, %struct.data_reference*** %slot_, align 8, !dbg !13161
  store %struct.data_reference* %7, %struct.data_reference** %8, align 8, !dbg !13161
  %9 = load %struct.data_reference**, %struct.data_reference*** %slot_, align 8, !dbg !13161
  ret %struct.data_reference** %9, !dbg !13161
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_data_reference_p_base_space(%struct.VEC_data_reference_p_base* %vec_, i32 %alloc_) #0 !dbg !13164 {
entry:
  %vec_.addr = alloca %struct.VEC_data_reference_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_data_reference_p_base* %vec_, %struct.VEC_data_reference_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_base** %vec_.addr, metadata !13167, metadata !DIExpression()), !dbg !13168
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13169, metadata !DIExpression()), !dbg !13168
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !13168
  %cmp = icmp sge i32 %0, 0, !dbg !13168
  %conv = zext i1 %cmp to i32, !dbg !13168
  %1 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !13168
  %tobool = icmp ne %struct.VEC_data_reference_p_base* %1, null, !dbg !13168
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13168

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !13168
  %alloc = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %2, i32 0, i32 1, !dbg !13168
  %3 = load i32, i32* %alloc, align 4, !dbg !13168
  %4 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !13168
  %num = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %4, i32 0, i32 0, !dbg !13168
  %5 = load i32, i32* %num, align 8, !dbg !13168
  %sub = sub i32 %3, %5, !dbg !13168
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !13168
  %cmp1 = icmp uge i32 %sub, %6, !dbg !13168
  %conv2 = zext i1 %cmp1 to i32, !dbg !13168
  br label %cond.end, !dbg !13168

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !13168
  %tobool3 = icmp ne i32 %7, 0, !dbg !13168
  %lnot = xor i1 %tobool3, true, !dbg !13168
  %lnot.ext = zext i1 %lnot to i32, !dbg !13168
  br label %cond.end, !dbg !13168

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !13168
  ret i32 %cond, !dbg !13168
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_heap_reserve(%struct.VEC_loop_p_heap** %vec_, i32 %alloc_) #0 !dbg !13170 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_loop_p_heap** %vec_, %struct.VEC_loop_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap*** %vec_.addr, metadata !13173, metadata !DIExpression()), !dbg !13174
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13175, metadata !DIExpression()), !dbg !13174
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !13176, metadata !DIExpression()), !dbg !13174
  %0 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !13174
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %0, align 8, !dbg !13174
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !13174
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13174

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !13174
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %2, align 8, !dbg !13174
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %3, i32 0, i32 0, !dbg !13174
  br label %cond.end, !dbg !13174

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13174

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13174
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !13174
  %call = call i32 @VEC_loop_p_base_space(%struct.VEC_loop_p_base* %cond, i32 %4), !dbg !13174
  %tobool1 = icmp ne i32 %call, 0, !dbg !13174
  %lnot = xor i1 %tobool1, true, !dbg !13174
  %lnot.ext = zext i1 %lnot to i32, !dbg !13174
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !13174
  %5 = load i32, i32* %extend, align 4, !dbg !13177
  %tobool2 = icmp ne i32 %5, 0, !dbg !13177
  br i1 %tobool2, label %if.then, label %if.end, !dbg !13174

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !13177
  %7 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %6, align 8, !dbg !13177
  %8 = bitcast %struct.VEC_loop_p_heap* %7 to i8*, !dbg !13177
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !13177
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !13177
  %10 = bitcast i8* %call3 to %struct.VEC_loop_p_heap*, !dbg !13177
  %11 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !13177
  store %struct.VEC_loop_p_heap* %10, %struct.VEC_loop_p_heap** %11, align 8, !dbg !13177
  br label %if.end, !dbg !13177

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !13174
  ret i32 %12, !dbg !13174
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %vec_, %struct.loop* %obj_) #0 !dbg !13179 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %obj_.addr = alloca %struct.loop*, align 8
  %slot_ = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !13183, metadata !DIExpression()), !dbg !13184
  store %struct.loop* %obj_, %struct.loop** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %obj_.addr, metadata !13185, metadata !DIExpression()), !dbg !13184
  call void @llvm.dbg.declare(metadata %struct.loop*** %slot_, metadata !13186, metadata !DIExpression()), !dbg !13184
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13184
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %0, i32 0, i32 0, !dbg !13184
  %1 = load i32, i32* %num, align 8, !dbg !13184
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13184
  %alloc = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 1, !dbg !13184
  %3 = load i32, i32* %alloc, align 4, !dbg !13184
  %cmp = icmp ult i32 %1, %3, !dbg !13184
  %conv = zext i1 %cmp to i32, !dbg !13184
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13184
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !13184
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13184
  %num1 = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 0, !dbg !13184
  %6 = load i32, i32* %num1, align 8, !dbg !13184
  %inc = add i32 %6, 1, !dbg !13184
  store i32 %inc, i32* %num1, align 8, !dbg !13184
  %idxprom = zext i32 %6 to i64, !dbg !13184
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !13184
  store %struct.loop** %arrayidx, %struct.loop*** %slot_, align 8, !dbg !13184
  %7 = load %struct.loop*, %struct.loop** %obj_.addr, align 8, !dbg !13184
  %8 = load %struct.loop**, %struct.loop*** %slot_, align 8, !dbg !13184
  store %struct.loop* %7, %struct.loop** %8, align 8, !dbg !13184
  %9 = load %struct.loop**, %struct.loop*** %slot_, align 8, !dbg !13184
  ret %struct.loop** %9, !dbg !13184
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_space(%struct.VEC_loop_p_base* %vec_, i32 %alloc_) #0 !dbg !13187 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !13190, metadata !DIExpression()), !dbg !13191
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13192, metadata !DIExpression()), !dbg !13191
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !13191
  %cmp = icmp sge i32 %0, 0, !dbg !13191
  %conv = zext i1 %cmp to i32, !dbg !13191
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13191
  %tobool = icmp ne %struct.VEC_loop_p_base* %1, null, !dbg !13191
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13191

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13191
  %alloc = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 1, !dbg !13191
  %3 = load i32, i32* %alloc, align 4, !dbg !13191
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13191
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 0, !dbg !13191
  %5 = load i32, i32* %num, align 8, !dbg !13191
  %sub = sub i32 %3, %5, !dbg !13191
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !13191
  %cmp1 = icmp uge i32 %sub, %6, !dbg !13191
  %conv2 = zext i1 %cmp1 to i32, !dbg !13191
  br label %cond.end, !dbg !13191

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !13191
  %tobool3 = icmp ne i32 %7, 0, !dbg !13191
  %lnot = xor i1 %tobool3, true, !dbg !13191
  %lnot.ext = zext i1 %lnot to i32, !dbg !13191
  br label %cond.end, !dbg !13191

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !13191
  ret i32 %cond, !dbg !13191
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !13193 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13196, metadata !DIExpression()), !dbg !13197
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !13197
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !13197
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !13197
  ret %struct.VEC_int_heap* %1, !dbg !13197
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !13198 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13201
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !13201
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !13201
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !13201
  %tobool = icmp ne %struct.loops* %1, null, !dbg !13201
  br i1 %tobool, label %if.end, label %if.then, !dbg !13203

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !13204
  br label %return, !dbg !13204

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13205
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !13205
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !13205
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !13205
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !13205
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !13205
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !13205
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !13205

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13205
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !13205
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !13205
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !13205
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !13205
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !13205
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !13205
  br label %cond.end, !dbg !13205

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !13205

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13205
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !13205
  store i32 %call, i32* %retval, align 4, !dbg !13206
  br label %return, !dbg !13206

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !13207
  ret i32 %8, !dbg !13207
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !13208 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !13212, metadata !DIExpression()), !dbg !13213
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !13214, metadata !DIExpression()), !dbg !13213
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !13215, metadata !DIExpression()), !dbg !13213
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !13213
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !13213
  %1 = load i32, i32* %num, align 4, !dbg !13213
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !13213
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !13213
  %3 = load i32, i32* %alloc, align 4, !dbg !13213
  %cmp = icmp ult i32 %1, %3, !dbg !13213
  %conv = zext i1 %cmp to i32, !dbg !13213
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !13213
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !13213
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !13213
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !13213
  %6 = load i32, i32* %num1, align 4, !dbg !13213
  %inc = add i32 %6, 1, !dbg !13213
  store i32 %inc, i32* %num1, align 4, !dbg !13213
  %idxprom = zext i32 %6 to i64, !dbg !13213
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !13213
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !13213
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !13213
  %8 = load i32*, i32** %slot_, align 8, !dbg !13213
  store i32 %7, i32* %8, align 4, !dbg !13213
  %9 = load i32*, i32** %slot_, align 8, !dbg !13213
  ret i32* %9, !dbg !13213
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !13216 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !13219, metadata !DIExpression()), !dbg !13220
  call void @llvm.dbg.declare(metadata i32* %n, metadata !13221, metadata !DIExpression()), !dbg !13222
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13223
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !13223
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !13223
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !13223
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13223

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13223
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !13223
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !13223
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !13223
  br label %cond.end, !dbg !13223

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13223

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13223
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !13223
  store i32 %call, i32* %n, align 4, !dbg !13222
  %4 = load i32, i32* %n, align 4, !dbg !13224
  %cmp = icmp eq i32 %4, 0, !dbg !13226
  br i1 %cmp, label %if.then, label %if.end, !dbg !13227

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !13228
  br label %return, !dbg !13228

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13229
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !13229
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !13229
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !13229
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !13229

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13229
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !13229
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !13229
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !13229
  br label %cond.end8, !dbg !13229

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !13229

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !13229
  %9 = load i32, i32* %n, align 4, !dbg !13229
  %sub = sub i32 %9, 1, !dbg !13229
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !13229
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !13230
  br label %return, !dbg !13230

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !13231
  ret %struct.loop* %10, !dbg !13231
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

declare dso_local void @gather_stats_on_scev_database() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !13232 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !13237, metadata !DIExpression()), !dbg !13238
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !13239, metadata !DIExpression()), !dbg !13238
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !13240, metadata !DIExpression()), !dbg !13238
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !13241
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !13241
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !13241

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !13241
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !13241
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !13241
  %3 = load i32, i32* %num, align 4, !dbg !13241
  %cmp = icmp ult i32 %1, %3, !dbg !13241
  br i1 %cmp, label %if.then, label %if.else, !dbg !13238

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !13243
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !13243
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !13243
  %idxprom = zext i32 %5 to i64, !dbg !13243
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !13243
  %6 = load i32, i32* %arrayidx, align 4, !dbg !13243
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !13243
  store i32 %6, i32* %7, align 4, !dbg !13243
  store i32 1, i32* %retval, align 4, !dbg !13243
  br label %return, !dbg !13243

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !13245
  store i32 0, i32* %8, align 4, !dbg !13245
  store i32 0, i32* %retval, align 4, !dbg !13245
  br label %return, !dbg !13245

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !13238
  ret i32 %9, !dbg !13238
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !13247 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !13251, metadata !DIExpression()), !dbg !13252
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !13253
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !13253
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !13253
  br i1 %tobool, label %if.then, label %if.end, !dbg !13252

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !13253
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !13253
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !13253
  call void @free(i8* %4), !dbg !13253
  br label %if.end, !dbg !13253

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !13252
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !13252
  ret void, !dbg !13252
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_subscript_p_heap_free(%struct.VEC_subscript_p_heap** %vec_) #0 !dbg !13255 {
entry:
  %vec_.addr = alloca %struct.VEC_subscript_p_heap**, align 8
  store %struct.VEC_subscript_p_heap** %vec_, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_subscript_p_heap*** %vec_.addr, metadata !13258, metadata !DIExpression()), !dbg !13259
  %0 = load %struct.VEC_subscript_p_heap**, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8, !dbg !13260
  %1 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %0, align 8, !dbg !13260
  %tobool = icmp ne %struct.VEC_subscript_p_heap* %1, null, !dbg !13260
  br i1 %tobool, label %if.then, label %if.end, !dbg !13259

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_subscript_p_heap**, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8, !dbg !13260
  %3 = load %struct.VEC_subscript_p_heap*, %struct.VEC_subscript_p_heap** %2, align 8, !dbg !13260
  %4 = bitcast %struct.VEC_subscript_p_heap* %3 to i8*, !dbg !13260
  call void @free(i8* %4), !dbg !13260
  br label %if.end, !dbg !13260

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_subscript_p_heap**, %struct.VEC_subscript_p_heap*** %vec_.addr, align 8, !dbg !13259
  store %struct.VEC_subscript_p_heap* null, %struct.VEC_subscript_p_heap** %5, align 8, !dbg !13259
  ret void, !dbg !13259
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @create_rdg_edge_for_ddr(%struct.graph* %rdg, %struct.data_dependence_relation* %ddr) #0 !dbg !13262 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %e = alloca %struct.graph_edge*, align 8
  %va = alloca i32, align 4
  %vb = alloca i32, align 4
  %dra = alloca %struct.data_reference*, align 8
  %drb = alloca %struct.data_reference*, align 8
  %level = alloca i32, align 4
  %tmp = alloca %struct.data_reference*, align 8
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !13265, metadata !DIExpression()), !dbg !13266
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !13267, metadata !DIExpression()), !dbg !13268
  call void @llvm.dbg.declare(metadata %struct.graph_edge** %e, metadata !13269, metadata !DIExpression()), !dbg !13270
  call void @llvm.dbg.declare(metadata i32* %va, metadata !13271, metadata !DIExpression()), !dbg !13272
  call void @llvm.dbg.declare(metadata i32* %vb, metadata !13273, metadata !DIExpression()), !dbg !13274
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dra, metadata !13275, metadata !DIExpression()), !dbg !13276
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13277
  %a = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 0, !dbg !13277
  %1 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !13277
  store %struct.data_reference* %1, %struct.data_reference** %dra, align 8, !dbg !13276
  call void @llvm.dbg.declare(metadata %struct.data_reference** %drb, metadata !13278, metadata !DIExpression()), !dbg !13279
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13280
  %b = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 1, !dbg !13280
  %3 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !13280
  store %struct.data_reference* %3, %struct.data_reference** %drb, align 8, !dbg !13279
  call void @llvm.dbg.declare(metadata i32* %level, metadata !13281, metadata !DIExpression()), !dbg !13282
  %4 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13283
  %call = call i32 @ddr_dependence_level(%struct.data_dependence_relation* %4), !dbg !13284
  store i32 %call, i32* %level, align 4, !dbg !13282
  %5 = load i32, i32* %level, align 4, !dbg !13285
  %cmp = icmp ugt i32 %5, 0, !dbg !13287
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !13288

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13289
  %reversed_p = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %6, i32 0, i32 8, !dbg !13289
  %7 = load i8, i8* %reversed_p, align 4, !dbg !13289
  %tobool = icmp ne i8 %7, 0, !dbg !13289
  br i1 %tobool, label %if.end, label %if.then, !dbg !13290

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.data_reference** %tmp, metadata !13291, metadata !DIExpression()), !dbg !13293
  %8 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !13294
  store %struct.data_reference* %8, %struct.data_reference** %tmp, align 8, !dbg !13293
  %9 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !13295
  store %struct.data_reference* %9, %struct.data_reference** %dra, align 8, !dbg !13296
  %10 = load %struct.data_reference*, %struct.data_reference** %tmp, align 8, !dbg !13297
  store %struct.data_reference* %10, %struct.data_reference** %drb, align 8, !dbg !13298
  br label %if.end, !dbg !13299

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %11 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !13300
  %12 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !13301
  %stmt = getelementptr inbounds %struct.data_reference, %struct.data_reference* %12, i32 0, i32 0, !dbg !13301
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13301
  %call1 = call i32 @rdg_vertex_for_stmt(%struct.graph* %11, %union.gimple_statement_d* %13), !dbg !13302
  store i32 %call1, i32* %va, align 4, !dbg !13303
  %14 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !13304
  %15 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !13305
  %stmt2 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %15, i32 0, i32 0, !dbg !13305
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !13305
  %call3 = call i32 @rdg_vertex_for_stmt(%struct.graph* %14, %union.gimple_statement_d* %16), !dbg !13306
  store i32 %call3, i32* %vb, align 4, !dbg !13307
  %17 = load i32, i32* %va, align 4, !dbg !13308
  %cmp4 = icmp slt i32 %17, 0, !dbg !13310
  br i1 %cmp4, label %if.then6, label %lor.lhs.false, !dbg !13311

lor.lhs.false:                                    ; preds = %if.end
  %18 = load i32, i32* %vb, align 4, !dbg !13312
  %cmp5 = icmp slt i32 %18, 0, !dbg !13313
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !13314

if.then6:                                         ; preds = %lor.lhs.false, %if.end
  br label %if.end51, !dbg !13315

if.end7:                                          ; preds = %lor.lhs.false
  %19 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !13316
  %20 = load i32, i32* %va, align 4, !dbg !13317
  %21 = load i32, i32* %vb, align 4, !dbg !13318
  %call8 = call %struct.graph_edge* @add_edge(%struct.graph* %19, i32 %20, i32 %21), !dbg !13319
  store %struct.graph_edge* %call8, %struct.graph_edge** %e, align 8, !dbg !13320
  %call9 = call i8* @xmalloc(i64 16), !dbg !13321
  %22 = bitcast i8* %call9 to %struct.rdg_edge*, !dbg !13321
  %23 = bitcast %struct.rdg_edge* %22 to i8*, !dbg !13321
  %24 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !13322
  %data = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %24, i32 0, i32 4, !dbg !13323
  store i8* %23, i8** %data, align 8, !dbg !13324
  %25 = load i32, i32* %level, align 4, !dbg !13325
  %26 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !13326
  %data10 = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %26, i32 0, i32 4, !dbg !13326
  %27 = load i8*, i8** %data10, align 8, !dbg !13326
  %28 = bitcast i8* %27 to %struct.rdg_edge*, !dbg !13326
  %level11 = getelementptr inbounds %struct.rdg_edge, %struct.rdg_edge* %28, i32 0, i32 1, !dbg !13326
  store i32 %25, i32* %level11, align 4, !dbg !13327
  %29 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13328
  %30 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !13329
  %data12 = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %30, i32 0, i32 4, !dbg !13329
  %31 = load i8*, i8** %data12, align 8, !dbg !13329
  %32 = bitcast i8* %31 to %struct.rdg_edge*, !dbg !13329
  %relation = getelementptr inbounds %struct.rdg_edge, %struct.rdg_edge* %32, i32 0, i32 2, !dbg !13329
  store %struct.data_dependence_relation* %29, %struct.data_dependence_relation** %relation, align 8, !dbg !13330
  %33 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !13331
  %is_read = getelementptr inbounds %struct.data_reference, %struct.data_reference* %33, i32 0, i32 3, !dbg !13331
  %34 = load i8, i8* %is_read, align 8, !dbg !13331
  %conv = zext i8 %34 to i32, !dbg !13331
  %tobool13 = icmp ne i32 %conv, 0, !dbg !13331
  br i1 %tobool13, label %land.lhs.true14, label %if.else, !dbg !13333

land.lhs.true14:                                  ; preds = %if.end7
  %35 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !13334
  %is_read15 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %35, i32 0, i32 3, !dbg !13334
  %36 = load i8, i8* %is_read15, align 8, !dbg !13334
  %conv16 = zext i8 %36 to i32, !dbg !13334
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !13334
  br i1 %tobool17, label %if.then18, label %if.else, !dbg !13335

if.then18:                                        ; preds = %land.lhs.true14
  %37 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !13336
  %data19 = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %37, i32 0, i32 4, !dbg !13336
  %38 = load i8*, i8** %data19, align 8, !dbg !13336
  %39 = bitcast i8* %38 to %struct.rdg_edge*, !dbg !13336
  %type = getelementptr inbounds %struct.rdg_edge, %struct.rdg_edge* %39, i32 0, i32 0, !dbg !13336
  store i32 105, i32* %type, align 8, !dbg !13337
  br label %if.end51, !dbg !13336

if.else:                                          ; preds = %land.lhs.true14, %if.end7
  %40 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !13338
  %is_read20 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %40, i32 0, i32 3, !dbg !13338
  %41 = load i8, i8* %is_read20, align 8, !dbg !13338
  %tobool21 = icmp ne i8 %41, 0, !dbg !13338
  br i1 %tobool21, label %if.else28, label %land.lhs.true22, !dbg !13340

land.lhs.true22:                                  ; preds = %if.else
  %42 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !13341
  %is_read23 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %42, i32 0, i32 3, !dbg !13341
  %43 = load i8, i8* %is_read23, align 8, !dbg !13341
  %tobool24 = icmp ne i8 %43, 0, !dbg !13341
  br i1 %tobool24, label %if.else28, label %if.then25, !dbg !13342

if.then25:                                        ; preds = %land.lhs.true22
  %44 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !13343
  %data26 = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %44, i32 0, i32 4, !dbg !13343
  %45 = load i8*, i8** %data26, align 8, !dbg !13343
  %46 = bitcast i8* %45 to %struct.rdg_edge*, !dbg !13343
  %type27 = getelementptr inbounds %struct.rdg_edge, %struct.rdg_edge* %46, i32 0, i32 0, !dbg !13343
  store i32 111, i32* %type27, align 8, !dbg !13344
  br label %if.end50, !dbg !13343

if.else28:                                        ; preds = %land.lhs.true22, %if.else
  %47 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !13345
  %is_read29 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %47, i32 0, i32 3, !dbg !13345
  %48 = load i8, i8* %is_read29, align 8, !dbg !13345
  %tobool30 = icmp ne i8 %48, 0, !dbg !13345
  br i1 %tobool30, label %if.else38, label %land.lhs.true31, !dbg !13347

land.lhs.true31:                                  ; preds = %if.else28
  %49 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !13348
  %is_read32 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %49, i32 0, i32 3, !dbg !13348
  %50 = load i8, i8* %is_read32, align 8, !dbg !13348
  %conv33 = zext i8 %50 to i32, !dbg !13348
  %tobool34 = icmp ne i32 %conv33, 0, !dbg !13348
  br i1 %tobool34, label %if.then35, label %if.else38, !dbg !13349

if.then35:                                        ; preds = %land.lhs.true31
  %51 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !13350
  %data36 = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %51, i32 0, i32 4, !dbg !13350
  %52 = load i8*, i8** %data36, align 8, !dbg !13350
  %53 = bitcast i8* %52 to %struct.rdg_edge*, !dbg !13350
  %type37 = getelementptr inbounds %struct.rdg_edge, %struct.rdg_edge* %53, i32 0, i32 0, !dbg !13350
  store i32 102, i32* %type37, align 8, !dbg !13351
  br label %if.end49, !dbg !13350

if.else38:                                        ; preds = %land.lhs.true31, %if.else28
  %54 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !13352
  %is_read39 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %54, i32 0, i32 3, !dbg !13352
  %55 = load i8, i8* %is_read39, align 8, !dbg !13352
  %conv40 = zext i8 %55 to i32, !dbg !13352
  %tobool41 = icmp ne i32 %conv40, 0, !dbg !13352
  br i1 %tobool41, label %land.lhs.true42, label %if.end48, !dbg !13354

land.lhs.true42:                                  ; preds = %if.else38
  %56 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !13355
  %is_read43 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %56, i32 0, i32 3, !dbg !13355
  %57 = load i8, i8* %is_read43, align 8, !dbg !13355
  %tobool44 = icmp ne i8 %57, 0, !dbg !13355
  br i1 %tobool44, label %if.end48, label %if.then45, !dbg !13356

if.then45:                                        ; preds = %land.lhs.true42
  %58 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !13357
  %data46 = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %58, i32 0, i32 4, !dbg !13357
  %59 = load i8*, i8** %data46, align 8, !dbg !13357
  %60 = bitcast i8* %59 to %struct.rdg_edge*, !dbg !13357
  %type47 = getelementptr inbounds %struct.rdg_edge, %struct.rdg_edge* %60, i32 0, i32 0, !dbg !13357
  store i32 97, i32* %type47, align 8, !dbg !13358
  br label %if.end48, !dbg !13357

if.end48:                                         ; preds = %if.then45, %land.lhs.true42, %if.else38
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then35
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then25
  br label %if.end51

if.end51:                                         ; preds = %if.then6, %if.end50, %if.then18
  ret void, !dbg !13359
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_rdg_edges_for_scalar(%struct.graph* %rdg, %union.tree_node* %def, i32 %idef) #0 !dbg !13360 {
entry:
  %rdg.addr = alloca %struct.graph*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %idef.addr = alloca i32, align 4
  %imm_use_p = alloca %struct.ssa_use_operand_d*, align 8
  %iterator = alloca %struct.immediate_use_iterator_d, align 8
  %e = alloca %struct.graph_edge*, align 8
  %use = alloca i32, align 4
  store %struct.graph* %rdg, %struct.graph** %rdg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph** %rdg.addr, metadata !13363, metadata !DIExpression()), !dbg !13364
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !13365, metadata !DIExpression()), !dbg !13366
  store i32 %idef, i32* %idef.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idef.addr, metadata !13367, metadata !DIExpression()), !dbg !13368
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %imm_use_p, metadata !13369, metadata !DIExpression()), !dbg !13370
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iterator, metadata !13371, metadata !DIExpression()), !dbg !13372
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !13373
  %call = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %iterator, %union.tree_node* %0), !dbg !13373
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %imm_use_p, align 8, !dbg !13373
  br label %for.cond, !dbg !13373

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %iterator), !dbg !13375
  %tobool = icmp ne i8 %call1, 0, !dbg !13375
  %lnot = xor i1 %tobool, true, !dbg !13375
  br i1 %lnot, label %for.body, label %for.end, !dbg !13373

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.graph_edge** %e, metadata !13377, metadata !DIExpression()), !dbg !13379
  call void @llvm.dbg.declare(metadata i32* %use, metadata !13380, metadata !DIExpression()), !dbg !13381
  %1 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !13382
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use_p, align 8, !dbg !13383
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 2, !dbg !13383
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !13383
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13383
  %call2 = call i32 @rdg_vertex_for_stmt(%struct.graph* %1, %union.gimple_statement_d* %3), !dbg !13384
  store i32 %call2, i32* %use, align 4, !dbg !13381
  %4 = load i32, i32* %use, align 4, !dbg !13385
  %cmp = icmp slt i32 %4, 0, !dbg !13387
  br i1 %cmp, label %if.then, label %if.end, !dbg !13388

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !13389

if.end:                                           ; preds = %for.body
  %5 = load %struct.graph*, %struct.graph** %rdg.addr, align 8, !dbg !13390
  %6 = load i32, i32* %idef.addr, align 4, !dbg !13391
  %7 = load i32, i32* %use, align 4, !dbg !13392
  %call3 = call %struct.graph_edge* @add_edge(%struct.graph* %5, i32 %6, i32 %7), !dbg !13393
  store %struct.graph_edge* %call3, %struct.graph_edge** %e, align 8, !dbg !13394
  %call4 = call i8* @xmalloc(i64 16), !dbg !13395
  %8 = bitcast i8* %call4 to %struct.rdg_edge*, !dbg !13395
  %9 = bitcast %struct.rdg_edge* %8 to i8*, !dbg !13395
  %10 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !13396
  %data = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %10, i32 0, i32 4, !dbg !13397
  store i8* %9, i8** %data, align 8, !dbg !13398
  %11 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !13399
  %data5 = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %11, i32 0, i32 4, !dbg !13399
  %12 = load i8*, i8** %data5, align 8, !dbg !13399
  %13 = bitcast i8* %12 to %struct.rdg_edge*, !dbg !13399
  %type = getelementptr inbounds %struct.rdg_edge, %struct.rdg_edge* %13, i32 0, i32 0, !dbg !13399
  store i32 102, i32* %type, align 8, !dbg !13400
  %14 = load %struct.graph_edge*, %struct.graph_edge** %e, align 8, !dbg !13401
  %data6 = getelementptr inbounds %struct.graph_edge, %struct.graph_edge* %14, i32 0, i32 4, !dbg !13401
  %15 = load i8*, i8** %data6, align 8, !dbg !13401
  %16 = bitcast i8* %15 to %struct.rdg_edge*, !dbg !13401
  %relation = getelementptr inbounds %struct.rdg_edge, %struct.rdg_edge* %16, i32 0, i32 2, !dbg !13401
  store %struct.data_dependence_relation* null, %struct.data_dependence_relation** %relation, align 8, !dbg !13402
  br label %for.inc, !dbg !13403

for.inc:                                          ; preds = %if.end, %if.then
  %call7 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %iterator), !dbg !13375
  store %struct.ssa_use_operand_d* %call7, %struct.ssa_use_operand_d** %imm_use_p, align 8, !dbg !13375
  br label %for.cond, !dbg !13375, !llvm.loop !13404

for.end:                                          ; preds = %for.cond
  ret void, !dbg !13406
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ddr_dependence_level(%struct.data_dependence_relation* %ddr) #0 !dbg !13407 {
entry:
  %ddr.addr = alloca %struct.data_dependence_relation*, align 8
  %vector = alloca i32, align 4
  %level = alloca i32, align 4
  store %struct.data_dependence_relation* %ddr, %struct.data_dependence_relation** %ddr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr.addr, metadata !13410, metadata !DIExpression()), !dbg !13411
  call void @llvm.dbg.declare(metadata i32* %vector, metadata !13412, metadata !DIExpression()), !dbg !13413
  call void @llvm.dbg.declare(metadata i32* %level, metadata !13414, metadata !DIExpression()), !dbg !13415
  store i32 0, i32* %level, align 4, !dbg !13415
  %0 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13416
  %dist_vects = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %0, i32 0, i32 6, !dbg !13416
  %1 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects, align 8, !dbg !13416
  %tobool = icmp ne %struct.VEC_lambda_vector_heap* %1, null, !dbg !13416
  br i1 %tobool, label %if.then, label %if.end, !dbg !13418

if.then:                                          ; preds = %entry
  %2 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13419
  %dist_vects1 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %2, i32 0, i32 6, !dbg !13419
  %3 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects1, align 8, !dbg !13419
  %tobool2 = icmp ne %struct.VEC_lambda_vector_heap* %3, null, !dbg !13419
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !13419

cond.true:                                        ; preds = %if.then
  %4 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13419
  %dist_vects3 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %4, i32 0, i32 6, !dbg !13419
  %5 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects3, align 8, !dbg !13419
  %base = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %5, i32 0, i32 0, !dbg !13419
  br label %cond.end, !dbg !13419

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !13419

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_lambda_vector_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13419
  %call = call i32* @VEC_lambda_vector_base_index(%struct.VEC_lambda_vector_base* %cond, i32 0), !dbg !13419
  %6 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13420
  %loop_nest = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %6, i32 0, i32 4, !dbg !13420
  %7 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !13420
  %tobool4 = icmp ne %struct.VEC_loop_p_heap* %7, null, !dbg !13420
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !13420

cond.true5:                                       ; preds = %cond.end
  %8 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13420
  %loop_nest6 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %8, i32 0, i32 4, !dbg !13420
  %9 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest6, align 8, !dbg !13420
  %base7 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %9, i32 0, i32 0, !dbg !13420
  br label %cond.end9, !dbg !13420

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !13420

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_loop_p_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !13420
  %call11 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond10), !dbg !13420
  %call12 = call i32 @dependence_level(i32* %call, i32 %call11), !dbg !13421
  store i32 %call12, i32* %level, align 4, !dbg !13422
  br label %if.end, !dbg !13423

if.end:                                           ; preds = %cond.end9, %entry
  store i32 1, i32* %vector, align 4, !dbg !13424
  br label %for.cond, !dbg !13426

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %vector, align 4, !dbg !13427
  %11 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13429
  %dist_vects13 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %11, i32 0, i32 6, !dbg !13429
  %12 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects13, align 8, !dbg !13429
  %tobool14 = icmp ne %struct.VEC_lambda_vector_heap* %12, null, !dbg !13429
  br i1 %tobool14, label %cond.true15, label %cond.false18, !dbg !13429

cond.true15:                                      ; preds = %for.cond
  %13 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13429
  %dist_vects16 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %13, i32 0, i32 6, !dbg !13429
  %14 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects16, align 8, !dbg !13429
  %base17 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %14, i32 0, i32 0, !dbg !13429
  br label %cond.end19, !dbg !13429

cond.false18:                                     ; preds = %for.cond
  br label %cond.end19, !dbg !13429

cond.end19:                                       ; preds = %cond.false18, %cond.true15
  %cond20 = phi %struct.VEC_lambda_vector_base* [ %base17, %cond.true15 ], [ null, %cond.false18 ], !dbg !13429
  %call21 = call i32 @VEC_lambda_vector_base_length(%struct.VEC_lambda_vector_base* %cond20), !dbg !13429
  %cmp = icmp ult i32 %10, %call21, !dbg !13430
  br i1 %cmp, label %for.body, label %for.end, !dbg !13431

for.body:                                         ; preds = %cond.end19
  %15 = load i32, i32* %level, align 4, !dbg !13432
  %16 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13432
  %dist_vects22 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %16, i32 0, i32 6, !dbg !13432
  %17 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects22, align 8, !dbg !13432
  %tobool23 = icmp ne %struct.VEC_lambda_vector_heap* %17, null, !dbg !13432
  br i1 %tobool23, label %cond.true24, label %cond.false27, !dbg !13432

cond.true24:                                      ; preds = %for.body
  %18 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13432
  %dist_vects25 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %18, i32 0, i32 6, !dbg !13432
  %19 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects25, align 8, !dbg !13432
  %base26 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %19, i32 0, i32 0, !dbg !13432
  br label %cond.end28, !dbg !13432

cond.false27:                                     ; preds = %for.body
  br label %cond.end28, !dbg !13432

cond.end28:                                       ; preds = %cond.false27, %cond.true24
  %cond29 = phi %struct.VEC_lambda_vector_base* [ %base26, %cond.true24 ], [ null, %cond.false27 ], !dbg !13432
  %20 = load i32, i32* %vector, align 4, !dbg !13432
  %call30 = call i32* @VEC_lambda_vector_base_index(%struct.VEC_lambda_vector_base* %cond29, i32 %20), !dbg !13432
  %21 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13432
  %loop_nest31 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %21, i32 0, i32 4, !dbg !13432
  %22 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest31, align 8, !dbg !13432
  %tobool32 = icmp ne %struct.VEC_loop_p_heap* %22, null, !dbg !13432
  br i1 %tobool32, label %cond.true33, label %cond.false36, !dbg !13432

cond.true33:                                      ; preds = %cond.end28
  %23 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13432
  %loop_nest34 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %23, i32 0, i32 4, !dbg !13432
  %24 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest34, align 8, !dbg !13432
  %base35 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %24, i32 0, i32 0, !dbg !13432
  br label %cond.end37, !dbg !13432

cond.false36:                                     ; preds = %cond.end28
  br label %cond.end37, !dbg !13432

cond.end37:                                       ; preds = %cond.false36, %cond.true33
  %cond38 = phi %struct.VEC_loop_p_base* [ %base35, %cond.true33 ], [ null, %cond.false36 ], !dbg !13432
  %call39 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond38), !dbg !13432
  %call40 = call i32 @dependence_level(i32* %call30, i32 %call39), !dbg !13432
  %cmp41 = icmp ult i32 %15, %call40, !dbg !13432
  br i1 %cmp41, label %cond.true42, label %cond.false43, !dbg !13432

cond.true42:                                      ; preds = %cond.end37
  %25 = load i32, i32* %level, align 4, !dbg !13432
  br label %cond.end63, !dbg !13432

cond.false43:                                     ; preds = %cond.end37
  %26 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13432
  %dist_vects44 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %26, i32 0, i32 6, !dbg !13432
  %27 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects44, align 8, !dbg !13432
  %tobool45 = icmp ne %struct.VEC_lambda_vector_heap* %27, null, !dbg !13432
  br i1 %tobool45, label %cond.true46, label %cond.false49, !dbg !13432

cond.true46:                                      ; preds = %cond.false43
  %28 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13432
  %dist_vects47 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %28, i32 0, i32 6, !dbg !13432
  %29 = load %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap** %dist_vects47, align 8, !dbg !13432
  %base48 = getelementptr inbounds %struct.VEC_lambda_vector_heap, %struct.VEC_lambda_vector_heap* %29, i32 0, i32 0, !dbg !13432
  br label %cond.end50, !dbg !13432

cond.false49:                                     ; preds = %cond.false43
  br label %cond.end50, !dbg !13432

cond.end50:                                       ; preds = %cond.false49, %cond.true46
  %cond51 = phi %struct.VEC_lambda_vector_base* [ %base48, %cond.true46 ], [ null, %cond.false49 ], !dbg !13432
  %30 = load i32, i32* %vector, align 4, !dbg !13432
  %call52 = call i32* @VEC_lambda_vector_base_index(%struct.VEC_lambda_vector_base* %cond51, i32 %30), !dbg !13432
  %31 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13432
  %loop_nest53 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %31, i32 0, i32 4, !dbg !13432
  %32 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest53, align 8, !dbg !13432
  %tobool54 = icmp ne %struct.VEC_loop_p_heap* %32, null, !dbg !13432
  br i1 %tobool54, label %cond.true55, label %cond.false58, !dbg !13432

cond.true55:                                      ; preds = %cond.end50
  %33 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr.addr, align 8, !dbg !13432
  %loop_nest56 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %33, i32 0, i32 4, !dbg !13432
  %34 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest56, align 8, !dbg !13432
  %base57 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %34, i32 0, i32 0, !dbg !13432
  br label %cond.end59, !dbg !13432

cond.false58:                                     ; preds = %cond.end50
  br label %cond.end59, !dbg !13432

cond.end59:                                       ; preds = %cond.false58, %cond.true55
  %cond60 = phi %struct.VEC_loop_p_base* [ %base57, %cond.true55 ], [ null, %cond.false58 ], !dbg !13432
  %call61 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond60), !dbg !13432
  %call62 = call i32 @dependence_level(i32* %call52, i32 %call61), !dbg !13432
  br label %cond.end63, !dbg !13432

cond.end63:                                       ; preds = %cond.end59, %cond.true42
  %cond64 = phi i32 [ %25, %cond.true42 ], [ %call62, %cond.end59 ], !dbg !13432
  store i32 %cond64, i32* %level, align 4, !dbg !13433
  br label %for.inc, !dbg !13434

for.inc:                                          ; preds = %cond.end63
  %35 = load i32, i32* %vector, align 4, !dbg !13435
  %inc = add i32 %35, 1, !dbg !13435
  store i32 %inc, i32* %vector, align 4, !dbg !13435
  br label %for.cond, !dbg !13436, !llvm.loop !13437

for.end:                                          ; preds = %cond.end19
  %36 = load i32, i32* %level, align 4, !dbg !13439
  ret i32 %36, !dbg !13440
}

declare dso_local %struct.graph_edge* @add_edge(%struct.graph*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @dependence_level(i32* %dist_vect, i32 %length) #0 !dbg !13441 {
entry:
  %retval = alloca i32, align 4
  %dist_vect.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %dist_vect, i32** %dist_vect.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %dist_vect.addr, metadata !13444, metadata !DIExpression()), !dbg !13445
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !13446, metadata !DIExpression()), !dbg !13447
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13448, metadata !DIExpression()), !dbg !13449
  store i32 0, i32* %i, align 4, !dbg !13450
  br label %for.cond, !dbg !13452

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !13453
  %1 = load i32, i32* %length.addr, align 4, !dbg !13455
  %cmp = icmp slt i32 %0, %1, !dbg !13456
  br i1 %cmp, label %for.body, label %for.end, !dbg !13457

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %dist_vect.addr, align 8, !dbg !13458
  %3 = load i32, i32* %i, align 4, !dbg !13460
  %idxprom = sext i32 %3 to i64, !dbg !13458
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !13458
  %4 = load i32, i32* %arrayidx, align 4, !dbg !13458
  %cmp1 = icmp ne i32 %4, 0, !dbg !13461
  br i1 %cmp1, label %if.then, label %if.end, !dbg !13462

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !13463
  %add = add nsw i32 %5, 1, !dbg !13464
  store i32 %add, i32* %retval, align 4, !dbg !13465
  br label %return, !dbg !13465

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !13466

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !dbg !13467
  %inc = add nsw i32 %6, 1, !dbg !13467
  store i32 %inc, i32* %i, align 4, !dbg !13467
  br label %for.cond, !dbg !13468, !llvm.loop !13469

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !13471
  br label %return, !dbg !13471

return:                                           ; preds = %for.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !13472
  ret i32 %7, !dbg !13472
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !13473 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !13479, metadata !DIExpression()), !dbg !13480
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13481
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !13482
  %1 = load i32, i32* %flags, align 8, !dbg !13482
  %and = and i32 %1, 512, !dbg !13483
  %tobool = icmp ne i32 %and, 0, !dbg !13483
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !13484

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13485
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !13486
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !13487
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !13487
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !13485
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !13488

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13489
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !13490
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !13491
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !13491
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !13492
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !13492
  br label %cond.end, !dbg !13488

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !13488

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !13488
  ret %struct.gimple_seq_d* %cond, !dbg !13493
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !13494 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !13500, metadata !DIExpression()), !dbg !13501
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !13502
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !13502
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13502

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !13503
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !13504
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !13504
  br label %cond.end, !dbg !13502

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13502

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !13502
  ret %struct.gimple_seq_node_d* %cond, !dbg !13505
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) #0 !dbg !13506 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !13509, metadata !DIExpression()), !dbg !13510
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13511, metadata !DIExpression()), !dbg !13510
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !13512, metadata !DIExpression()), !dbg !13510
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !13510
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !13510
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !13510
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13510

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !13510
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !13510
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !13510
  br label %cond.end, !dbg !13510

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13510

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13510
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !13510
  %call = call i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 %4), !dbg !13510
  %tobool1 = icmp ne i32 %call, 0, !dbg !13510
  %lnot = xor i1 %tobool1, true, !dbg !13510
  %lnot.ext = zext i1 %lnot to i32, !dbg !13510
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !13510
  %5 = load i32, i32* %extend, align 4, !dbg !13513
  %tobool2 = icmp ne i32 %5, 0, !dbg !13513
  br i1 %tobool2, label %if.then, label %if.end, !dbg !13510

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !13513
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %6, align 8, !dbg !13513
  %8 = bitcast %struct.VEC_gimple_heap* %7 to i8*, !dbg !13513
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !13513
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !13513
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_heap*, !dbg !13513
  %11 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !13513
  store %struct.VEC_gimple_heap* %10, %struct.VEC_gimple_heap** %11, align 8, !dbg !13513
  br label %if.end, !dbg !13513

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !13510
  ret i32 %12, !dbg !13510
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !13515 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %slot_ = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !13518, metadata !DIExpression()), !dbg !13519
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !13520, metadata !DIExpression()), !dbg !13519
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !13521, metadata !DIExpression()), !dbg !13519
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !13519
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !13519
  %1 = load i32, i32* %num, align 8, !dbg !13519
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !13519
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !13519
  %3 = load i32, i32* %alloc, align 4, !dbg !13519
  %cmp = icmp ult i32 %1, %3, !dbg !13519
  %conv = zext i1 %cmp to i32, !dbg !13519
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !13519
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !13519
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !13519
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !13519
  %6 = load i32, i32* %num1, align 8, !dbg !13519
  %inc = add i32 %6, 1, !dbg !13519
  store i32 %inc, i32* %num1, align 8, !dbg !13519
  %idxprom = zext i32 %6 to i64, !dbg !13519
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !13519
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !13519
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !13519
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !13519
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %8, align 8, !dbg !13519
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !13519
  ret %union.gimple_statement_d** %9, !dbg !13519
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) #0 !dbg !13522 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !13525, metadata !DIExpression()), !dbg !13526
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13527, metadata !DIExpression()), !dbg !13526
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !13526
  %cmp = icmp sge i32 %0, 0, !dbg !13526
  %conv = zext i1 %cmp to i32, !dbg !13526
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !13526
  %tobool = icmp ne %struct.VEC_gimple_base* %1, null, !dbg !13526
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13526

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !13526
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !13526
  %3 = load i32, i32* %alloc, align 4, !dbg !13526
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !13526
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 0, !dbg !13526
  %5 = load i32, i32* %num, align 8, !dbg !13526
  %sub = sub i32 %3, %5, !dbg !13526
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !13526
  %cmp1 = icmp uge i32 %sub, %6, !dbg !13526
  %conv2 = zext i1 %cmp1 to i32, !dbg !13526
  br label %cond.end, !dbg !13526

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !13526
  %tobool3 = icmp ne i32 %7, 0, !dbg !13526
  %lnot = xor i1 %tobool3, true, !dbg !13526
  %lnot.ext = zext i1 %lnot to i32, !dbg !13526
  br label %cond.end, !dbg !13526

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !13526
  ret i32 %cond, !dbg !13526
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !13528 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !13529, metadata !DIExpression()), !dbg !13530
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !13531
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !13532
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !13533
  ret %union.tree_node** %result, !dbg !13534
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !13535 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !13538, metadata !DIExpression()), !dbg !13539
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13540
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !13541
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !13542
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13543
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !13544
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !13545
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13546
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !13547
  store i32 0, i32* %iter_type, align 4, !dbg !13548
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13549
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !13550
  store i32 0, i32* %phi_i, align 8, !dbg !13551
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13552
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !13553
  store i32 0, i32* %num_phi, align 4, !dbg !13554
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13555
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !13556
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !13557
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13558
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !13559
  store i8 1, i8* %done, align 8, !dbg !13560
  ret void, !dbg !13561
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !13562 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !13565, metadata !DIExpression()), !dbg !13566
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !13567, metadata !DIExpression()), !dbg !13568
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !13569, metadata !DIExpression()), !dbg !13570
  %0 = load i32, i32* %flags.addr, align 4, !dbg !13571
  %and = and i32 %0, 8, !dbg !13571
  %tobool = icmp ne i32 %and, 0, !dbg !13571
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !13571

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !13571
  %and1 = and i32 %1, 2, !dbg !13571
  %tobool2 = icmp ne i32 %and1, 0, !dbg !13571
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !13571

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !13571
  %and3 = and i32 %2, 4, !dbg !13571
  %tobool4 = icmp ne i32 %and3, 0, !dbg !13571
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !13571

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !13571
  %and6 = and i32 %3, 1, !dbg !13571
  %tobool7 = icmp ne i32 %and6, 0, !dbg !13571
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !13571

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.139, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0)), !dbg !13571
  br label %cond.end, !dbg !13571

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !13571

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13571
  %4 = load i32, i32* %flags.addr, align 4, !dbg !13572
  %and8 = and i32 %4, 10, !dbg !13573
  %tobool9 = icmp ne i32 %and8, 0, !dbg !13573
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !13574

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13575
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !13576
  br label %cond.end12, !dbg !13574

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !13574

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !13574
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13577
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !13578
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !13579
  %7 = load i32, i32* %flags.addr, align 4, !dbg !13580
  %and14 = and i32 %7, 8, !dbg !13582
  %tobool15 = icmp ne i32 %and14, 0, !dbg !13582
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !13583

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13584
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !13585
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !13585
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !13584
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !13586

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13587
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !13588
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !13589
  br i1 %cmp, label %if.then, label %if.end, !dbg !13590

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13591
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !13592
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !13592
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !13593
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !13593
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13594
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !13595
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !13596
  br label %if.end, !dbg !13594

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !13597
  %and23 = and i32 %15, 5, !dbg !13598
  %tobool24 = icmp ne i32 %and23, 0, !dbg !13598
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !13599

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13600
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !13601
  br label %cond.end28, !dbg !13599

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !13599

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !13599
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13602
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !13603
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !13604
  %18 = load i32, i32* %flags.addr, align 4, !dbg !13605
  %and30 = and i32 %18, 4, !dbg !13607
  %tobool31 = icmp ne i32 %and30, 0, !dbg !13607
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !13608

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13609
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !13610
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !13610
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !13609
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !13611

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13612
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !13613
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !13614
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !13615

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13616
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !13617
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !13617
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !13618
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !13618
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13619
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !13620
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !13621
  br label %if.end42, !dbg !13619

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13622
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !13623
  store i8 0, i8* %done, align 8, !dbg !13624
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13625
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !13626
  store i32 0, i32* %phi_i, align 8, !dbg !13627
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13628
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !13629
  store i32 0, i32* %num_phi, align 4, !dbg !13630
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13631
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !13632
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !13633
  ret void, !dbg !13634
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !13635 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !13638, metadata !DIExpression()), !dbg !13639
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13640
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !13642
  %tobool = icmp ne i8 %call, 0, !dbg !13642
  br i1 %tobool, label %if.end, label %if.then, !dbg !13643

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !13644
  br label %return, !dbg !13644

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13645
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !13646
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !13647
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !13648
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !13648
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !13649
  br label %return, !dbg !13649

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !13650
  ret %struct.def_optype_d* %3, !dbg !13650
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !13651 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !13654, metadata !DIExpression()), !dbg !13655
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13656
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !13658
  %tobool = icmp ne i8 %call, 0, !dbg !13658
  br i1 %tobool, label %if.end, label %if.then, !dbg !13659

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !13660
  br label %return, !dbg !13660

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13661
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !13662
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !13663
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !13664
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !13664
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !13665
  br label %return, !dbg !13665

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !13666
  ret %struct.use_optype_d* %3, !dbg !13666
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2386, !2387, !2388}
!llvm.ident = !{!2389}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "dependence_stats", scope: !2, file: !3, line: 123, type: !2365, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !810, globals: !2364, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-data-ref.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !154, !158, !163, !182, !189, !196, !390, !401, !408, !421, !460, !465, !472, !498, !504, !638, !643, !766, !772, !785, !790, !796}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !146, line: 31, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149, !150, !151, !152, !153}
!148 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!150 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!151 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!152 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!153 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !146, line: 91, baseType: !7, size: 32, elements: !155)
!155 = !{!156, !157}
!156 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!157 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!158 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !159, line: 474, baseType: !7, size: 32, elements: !160)
!159 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!160 = !{!161, !162}
!161 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!162 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!163 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !164, line: 280, baseType: !7, size: 32, elements: !165)
!164 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!165 = !{!166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181}
!166 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!182 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !164, line: 1817, baseType: !7, size: 32, elements: !183)
!183 = !{!184, !185, !186, !187, !188}
!184 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !164, line: 1805, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !164, line: 39, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389}
!198 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!203 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!204 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!205 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!206 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!207 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!208 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!209 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!210 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!213 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!214 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!215 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!216 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!217 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!218 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!219 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!220 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!221 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!222 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!223 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!224 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!225 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!226 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!227 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!228 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!229 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!230 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!231 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!232 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!233 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!234 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!235 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!236 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!237 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!238 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!239 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!240 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!241 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!242 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!243 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!244 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!245 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!246 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!247 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!248 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!249 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!250 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!251 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!252 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!253 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!254 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!255 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!256 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!257 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!258 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!259 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!260 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!261 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!262 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!263 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!264 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!265 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!266 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!267 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!268 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!269 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!270 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!271 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!272 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!273 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!274 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!275 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!276 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!277 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!278 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!280 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!281 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!282 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!283 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!284 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!285 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!286 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!287 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!288 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!289 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!290 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!291 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!292 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!293 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!294 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!295 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!296 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!297 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!298 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!299 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!300 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!301 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!302 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!303 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!304 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!305 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!306 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!307 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!308 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!309 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!310 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!311 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!312 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!313 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!314 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!315 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!316 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!317 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!318 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!320 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!321 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!322 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!323 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!324 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!325 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!326 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!327 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!328 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!329 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!330 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!331 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!332 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!333 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!334 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!335 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!336 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!337 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!338 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!339 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!340 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!341 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!342 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!343 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!344 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!345 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!346 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!347 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!348 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!349 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!350 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!362 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!363 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!364 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!365 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!366 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!367 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!370 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!371 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!372 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!373 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!374 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!383 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!384 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!385 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!386 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!387 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!388 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!389 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "data_dependence_direction", file: !391, line: 211, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./tree-data-ref.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395, !396, !397, !398, !399, !400}
!393 = !DIEnumerator(name: "dir_positive", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "dir_negative", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "dir_equal", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "dir_positive_or_negative", value: 3, isUnsigned: true)
!397 = !DIEnumerator(name: "dir_positive_or_equal", value: 4, isUnsigned: true)
!398 = !DIEnumerator(name: "dir_negative_or_equal", value: 5, isUnsigned: true)
!399 = !DIEnumerator(name: "dir_star", value: 6, isUnsigned: true)
!400 = !DIEnumerator(name: "dir_independent", value: 7, isUnsigned: true)
!401 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !164, line: 4288, baseType: !7, size: 32, elements: !402)
!402 = !{!403, !404, !405, !406, !407}
!403 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!404 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!405 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!406 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!407 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!408 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !164, line: 58, baseType: !7, size: 32, elements: !409)
!409 = !{!410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420}
!410 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!411 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!412 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!413 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!414 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!415 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!416 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!417 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!418 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!419 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!420 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!421 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !422, line: 51, baseType: !7, size: 32, elements: !423)
!422 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!423 = !{!424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459}
!424 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!425 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!426 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!427 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!428 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!429 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!430 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!431 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!432 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!433 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!434 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!435 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!436 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!437 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!438 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!439 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!440 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!441 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!442 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!443 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!444 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!445 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!446 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!447 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!448 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!449 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!450 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!451 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!452 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!453 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!454 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!455 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!456 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!457 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!458 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!459 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!460 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !461, line: 147, baseType: !7, size: 32, elements: !462)
!461 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!462 = !{!463, !464}
!463 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!464 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!465 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !466, line: 119, baseType: !7, size: 32, elements: !467)
!466 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!467 = !{!468, !469, !470, !471}
!468 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!469 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!470 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!471 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!472 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !422, line: 727, baseType: !7, size: 32, elements: !473)
!473 = !{!474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497}
!474 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!475 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!476 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!477 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!478 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!479 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!480 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!481 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!482 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!483 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!484 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!485 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!486 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!487 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!488 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!489 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!490 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!491 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!492 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!493 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!494 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!495 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!496 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!497 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!498 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !422, line: 80, baseType: !7, size: 32, elements: !499)
!499 = !{!500, !501, !502, !503}
!500 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!501 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!502 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!503 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!504 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !164, line: 3410, baseType: !7, size: 32, elements: !505)
!505 = !{!506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637}
!506 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!511 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!512 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!513 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!514 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!515 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!516 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!517 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!518 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!519 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!520 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!521 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!522 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!523 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!524 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!525 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!526 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!527 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!528 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!529 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!530 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!531 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!532 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!533 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!534 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!535 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!536 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!537 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!538 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!539 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!540 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!541 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!542 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!543 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!544 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!545 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!546 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!547 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!548 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!549 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!550 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!551 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!552 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!553 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!554 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!555 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!556 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!557 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!558 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!559 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!560 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!561 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!562 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!563 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!564 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!565 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!566 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!567 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!568 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!569 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!570 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!571 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!572 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!573 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!574 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!575 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!576 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!577 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!578 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!579 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!580 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!581 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!582 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!583 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!584 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!585 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!586 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!587 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!588 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!589 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!590 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!591 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!592 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!593 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!594 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!595 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!596 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!597 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!598 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!599 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!600 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!601 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!602 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!603 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!604 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!605 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!606 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!607 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!608 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!609 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!610 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!611 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!612 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!613 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!614 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!615 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!616 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!617 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!618 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!619 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!620 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!621 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!622 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!623 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!624 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!625 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!626 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!627 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!628 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!629 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!630 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!631 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!632 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!633 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!634 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!635 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!636 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!637 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!638 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omega_eqn_color", file: !639, line: 55, baseType: !7, size: 32, elements: !640)
!639 = !DIFile(filename: "./omega.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!640 = !{!641, !642}
!641 = !DIEnumerator(name: "omega_black", value: 0, isUnsigned: true)
!642 = !DIEnumerator(name: "omega_red", value: 1, isUnsigned: true)
!643 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !644, line: 82, baseType: !7, size: 32, elements: !645)
!644 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!645 = !{!646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765}
!646 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!647 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!648 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!649 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!650 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!651 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!652 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!653 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!654 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!655 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!656 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!657 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!658 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!659 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!660 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!661 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!662 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!663 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!664 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!665 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!666 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!667 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!668 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!669 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!670 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!671 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!672 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!673 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!674 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!675 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!676 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!677 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!678 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!679 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!680 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!681 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!682 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!683 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!684 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!685 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!686 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!687 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!688 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!689 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!690 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!691 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!692 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!693 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!694 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!695 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!696 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!697 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!698 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!699 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!700 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!701 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!702 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!703 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!704 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!705 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!706 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!707 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!708 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!709 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!710 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!711 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!712 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!713 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!714 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!715 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!716 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!717 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!718 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!719 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!720 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!721 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!722 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!723 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!724 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!725 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!726 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!727 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!728 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!729 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!730 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!731 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!732 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!733 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!734 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!735 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!736 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!737 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!738 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!739 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!740 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!741 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!742 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!743 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!744 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!745 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!746 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!747 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!748 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!749 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!750 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!751 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!752 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!753 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!754 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!755 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!756 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!757 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!758 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!759 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!760 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!761 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!762 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!763 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!764 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!765 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!766 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omega_result", file: !639, line: 41, baseType: !7, size: 32, elements: !767)
!767 = !{!768, !769, !770, !771}
!768 = !DIEnumerator(name: "omega_false", value: 0, isUnsigned: true)
!769 = !DIEnumerator(name: "omega_true", value: 1, isUnsigned: true)
!770 = !DIEnumerator(name: "omega_unknown", value: 2, isUnsigned: true)
!771 = !DIEnumerator(name: "omega_simplify", value: 3, isUnsigned: true)
!772 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gf_mask", file: !422, line: 100, baseType: !7, size: 32, elements: !773)
!773 = !{!774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784}
!774 = !DIEnumerator(name: "GF_ASM_INPUT", value: 1, isUnsigned: true)
!775 = !DIEnumerator(name: "GF_ASM_VOLATILE", value: 2, isUnsigned: true)
!776 = !DIEnumerator(name: "GF_CALL_CANNOT_INLINE", value: 1, isUnsigned: true)
!777 = !DIEnumerator(name: "GF_CALL_FROM_THUNK", value: 2, isUnsigned: true)
!778 = !DIEnumerator(name: "GF_CALL_RETURN_SLOT_OPT", value: 4, isUnsigned: true)
!779 = !DIEnumerator(name: "GF_CALL_TAILCALL", value: 8, isUnsigned: true)
!780 = !DIEnumerator(name: "GF_CALL_VA_ARG_PACK", value: 16, isUnsigned: true)
!781 = !DIEnumerator(name: "GF_OMP_PARALLEL_COMBINED", value: 1, isUnsigned: true)
!782 = !DIEnumerator(name: "GF_OMP_RETURN_NOWAIT", value: 1, isUnsigned: true)
!783 = !DIEnumerator(name: "GF_OMP_SECTION_LAST", value: 1, isUnsigned: true)
!784 = !DIEnumerator(name: "GF_PREDICT_TAKEN", value: 32768, isUnsigned: true)
!785 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !146, line: 498, baseType: !7, size: 32, elements: !786)
!786 = !{!787, !788, !789}
!787 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!788 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!789 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!790 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rdg_dep_type", file: !391, line: 514, baseType: !7, size: 32, elements: !791)
!791 = !{!792, !793, !794, !795}
!792 = !DIEnumerator(name: "flow_dd", value: 102, isUnsigned: true)
!793 = !DIEnumerator(name: "anti_dd", value: 97, isUnsigned: true)
!794 = !DIEnumerator(name: "output_dd", value: 111, isUnsigned: true)
!795 = !DIEnumerator(name: "input_dd", value: 105, isUnsigned: true)
!796 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !135, line: 295, baseType: !7, size: 32, elements: !797)
!797 = !{!798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809}
!798 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!799 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!800 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!801 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!802 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!803 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!804 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!805 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!806 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!807 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!808 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!809 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!810 = !{!390, !811, !1095, !813, !2169, !196, !941, !908, !2171, !2229, !1711, !2235, !2240, !2241, !2242, !2227, !1384, !1143, !2290, !1176, !1080, !498, !2191, !7, !2243, !2263, !2250, !2267, !2292, !2262, !2228, !2280, !2304, !2321, !2206, !2333, !1142, !2346, !2348, !2353, !2359, !2360, !2363}
!811 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !812, line: 56, baseType: !813)
!812 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !814, size: 64)
!814 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !164, line: 3371, size: 1792, elements: !815)
!815 = !{!816, !849, !855, !868, !887, !898, !903, !914, !920, !934, !946, !984, !1498, !1526, !1543, !1544, !1549, !1558, !1564, !1569, !1573, !1577, !1820, !1867, !1873, !1879, !1886, !1899, !1913, !1930, !1942, !1964, !1979, !2151}
!816 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !814, file: !164, line: 3372, baseType: !817, size: 64)
!817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !164, line: 360, size: 64, elements: !818)
!818 = !{!819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848}
!819 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !817, file: !164, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !817, file: !164, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !817, file: !164, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !817, file: !164, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !817, file: !164, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !817, file: !164, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !817, file: !164, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!826 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !817, file: !164, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!827 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !817, file: !164, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !817, file: !164, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !817, file: !164, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !817, file: !164, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !817, file: !164, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !817, file: !164, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !817, file: !164, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !817, file: !164, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !817, file: !164, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !817, file: !164, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !817, file: !164, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !817, file: !164, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !817, file: !164, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !817, file: !164, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !817, file: !164, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !817, file: !164, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !817, file: !164, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !817, file: !164, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !817, file: !164, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !817, file: !164, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !817, file: !164, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !817, file: !164, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !814, file: !164, line: 3373, baseType: !850, size: 192)
!850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !164, line: 402, size: 192, elements: !851)
!851 = !{!852, !853, !854}
!852 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !850, file: !164, line: 403, baseType: !817, size: 64)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !850, file: !164, line: 404, baseType: !811, size: 64, offset: 64)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !850, file: !164, line: 405, baseType: !811, size: 64, offset: 128)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !814, file: !164, line: 3374, baseType: !856, size: 320)
!856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !164, line: 1384, size: 320, elements: !857)
!857 = !{!858, !859}
!858 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !856, file: !164, line: 1385, baseType: !850, size: 192)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !856, file: !164, line: 1386, baseType: !860, size: 128, offset: 192)
!860 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !861, line: 58, baseType: !862)
!861 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!862 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !861, line: 54, size: 128, elements: !863)
!863 = !{!864, !866}
!864 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !862, file: !861, line: 56, baseType: !865, size: 64)
!865 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !862, file: !861, line: 57, baseType: !867, size: 64, offset: 64)
!867 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !814, file: !164, line: 3375, baseType: !869, size: 256)
!869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !164, line: 1397, size: 256, elements: !870)
!870 = !{!871, !872}
!871 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !869, file: !164, line: 1398, baseType: !850, size: 192)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !869, file: !164, line: 1399, baseType: !873, size: 64, offset: 192)
!873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !874, size: 64)
!874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !875, line: 52, size: 256, elements: !876)
!875 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!876 = !{!877, !878, !879, !880, !881, !882, !883}
!877 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !874, file: !875, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !874, file: !875, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !874, file: !875, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !874, file: !875, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !874, file: !875, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !874, file: !875, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !874, file: !875, line: 62, baseType: !884, size: 192, offset: 64)
!884 = !DICompositeType(tag: DW_TAG_array_type, baseType: !865, size: 192, elements: !885)
!885 = !{!886}
!886 = !DISubrange(count: 3)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !814, file: !164, line: 3376, baseType: !888, size: 256)
!888 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !164, line: 1408, size: 256, elements: !889)
!889 = !{!890, !891}
!890 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !888, file: !164, line: 1409, baseType: !850, size: 192)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !888, file: !164, line: 1410, baseType: !892, size: 64, offset: 192)
!892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !893, size: 64)
!893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !894, line: 27, size: 192, elements: !895)
!894 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!895 = !{!896, !897}
!896 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !893, file: !894, line: 29, baseType: !860, size: 128)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !893, file: !894, line: 30, baseType: !5, size: 32, offset: 128)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !814, file: !164, line: 3377, baseType: !899, size: 256)
!899 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !164, line: 1437, size: 256, elements: !900)
!900 = !{!901, !902}
!901 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !899, file: !164, line: 1438, baseType: !850, size: 192)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !899, file: !164, line: 1439, baseType: !811, size: 64, offset: 192)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !814, file: !164, line: 3378, baseType: !904, size: 256)
!904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !164, line: 1418, size: 256, elements: !905)
!905 = !{!906, !907, !909}
!906 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !904, file: !164, line: 1419, baseType: !850, size: 192)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !904, file: !164, line: 1420, baseType: !908, size: 32, offset: 192)
!908 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !904, file: !164, line: 1421, baseType: !910, size: 8, offset: 224)
!910 = !DICompositeType(tag: DW_TAG_array_type, baseType: !911, size: 8, elements: !912)
!911 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!912 = !{!913}
!913 = !DISubrange(count: 1)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !814, file: !164, line: 3379, baseType: !915, size: 320)
!915 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !164, line: 1428, size: 320, elements: !916)
!916 = !{!917, !918, !919}
!917 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !915, file: !164, line: 1429, baseType: !850, size: 192)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !915, file: !164, line: 1430, baseType: !811, size: 64, offset: 192)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !915, file: !164, line: 1431, baseType: !811, size: 64, offset: 256)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !814, file: !164, line: 3380, baseType: !921, size: 320)
!921 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !164, line: 1460, size: 320, elements: !922)
!922 = !{!923, !924}
!923 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !921, file: !164, line: 1461, baseType: !850, size: 192)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !921, file: !164, line: 1462, baseType: !925, size: 128, offset: 192)
!925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !926, line: 31, size: 128, elements: !927)
!926 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!927 = !{!928, !932, !933}
!928 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !925, file: !926, line: 32, baseType: !929, size: 64)
!929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !930, size: 64)
!930 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !931)
!931 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !925, file: !926, line: 33, baseType: !7, size: 32, offset: 64)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !925, file: !926, line: 34, baseType: !7, size: 32, offset: 96)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !814, file: !164, line: 3381, baseType: !935, size: 384)
!935 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !164, line: 2507, size: 384, elements: !936)
!936 = !{!937, !938, !943, !944, !945}
!937 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !935, file: !164, line: 2508, baseType: !850, size: 192)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !935, file: !164, line: 2509, baseType: !939, size: 32, offset: 192)
!939 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !940, line: 58, baseType: !941)
!940 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!941 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !942, line: 44, baseType: !7)
!942 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!943 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !935, file: !164, line: 2510, baseType: !7, size: 32, offset: 224)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !935, file: !164, line: 2511, baseType: !811, size: 64, offset: 256)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !935, file: !164, line: 2512, baseType: !811, size: 64, offset: 320)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !814, file: !164, line: 3382, baseType: !947, size: 896)
!947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !164, line: 2652, size: 896, elements: !948)
!948 = !{!949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981}
!949 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !947, file: !164, line: 2653, baseType: !935, size: 384)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !947, file: !164, line: 2654, baseType: !811, size: 64, offset: 384)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !947, file: !164, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !947, file: !164, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !947, file: !164, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !947, file: !164, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !947, file: !164, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !947, file: !164, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !947, file: !164, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !947, file: !164, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !947, file: !164, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !947, file: !164, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !947, file: !164, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !947, file: !164, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !947, file: !164, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !947, file: !164, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !947, file: !164, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !947, file: !164, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !947, file: !164, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !947, file: !164, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !947, file: !164, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !947, file: !164, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !947, file: !164, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !947, file: !164, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !947, file: !164, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !947, file: !164, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !947, file: !164, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !947, file: !164, line: 2703, baseType: !7, size: 32, offset: 512)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !947, file: !164, line: 2705, baseType: !811, size: 64, offset: 576)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !947, file: !164, line: 2706, baseType: !811, size: 64, offset: 640)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !947, file: !164, line: 2707, baseType: !811, size: 64, offset: 704)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !947, file: !164, line: 2708, baseType: !811, size: 64, offset: 768)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !947, file: !164, line: 2711, baseType: !982, size: 64, offset: 832)
!982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !983, size: 64)
!983 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !164, line: 2711, flags: DIFlagFwdDecl)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !814, file: !164, line: 3383, baseType: !985, size: 960)
!985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !164, line: 2756, size: 960, elements: !986)
!986 = !{!987, !988}
!987 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !985, file: !164, line: 2757, baseType: !947, size: 896)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !985, file: !164, line: 2758, baseType: !989, size: 64, offset: 896)
!989 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !812, line: 50, baseType: !990)
!990 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !991, size: 64)
!991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !992, line: 240, size: 384, elements: !993)
!992 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!993 = !{!994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004}
!994 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !991, file: !992, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !991, file: !992, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !991, file: !992, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !991, file: !992, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !991, file: !992, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !991, file: !992, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !991, file: !992, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !991, file: !992, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !991, file: !992, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !991, file: !992, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !991, file: !992, line: 321, baseType: !1005, size: 320, offset: 64)
!1005 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !992, line: 315, size: 320, elements: !1006)
!1006 = !{!1007, !1465, !1467, !1496, !1497}
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1005, file: !992, line: 316, baseType: !1008, size: 64)
!1008 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1009, size: 64, elements: !912)
!1009 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !992, line: 183, baseType: !1010)
!1010 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !992, line: 166, size: 64, elements: !1011)
!1011 = !{!1012, !1013, !1014, !1017, !1018, !1026, !1027, !1039, !1042, !1104, !1105, !1442, !1455, !1462}
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1010, file: !992, line: 168, baseType: !908, size: 32)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1010, file: !992, line: 169, baseType: !7, size: 32)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1010, file: !992, line: 170, baseType: !1015, size: 64)
!1015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1016, size: 64)
!1016 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !911)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1010, file: !992, line: 171, baseType: !989, size: 64)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1010, file: !992, line: 172, baseType: !1019, size: 64)
!1019 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !812, line: 53, baseType: !1020)
!1020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1021, size: 64)
!1021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !992, line: 359, size: 128, elements: !1022)
!1022 = !{!1023, !1024}
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1021, file: !992, line: 360, baseType: !908, size: 32)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1021, file: !992, line: 361, baseType: !1025, size: 64, offset: 64)
!1025 = !DICompositeType(tag: DW_TAG_array_type, baseType: !989, size: 64, elements: !912)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1010, file: !992, line: 173, baseType: !5, size: 32)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1010, file: !992, line: 174, baseType: !1028, size: 32)
!1028 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !992, line: 133, baseType: !1029)
!1029 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !992, line: 115, size: 32, elements: !1030)
!1030 = !{!1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038}
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1029, file: !992, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1029, file: !992, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1029, file: !992, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1029, file: !992, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1029, file: !992, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1029, file: !992, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1029, file: !992, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1029, file: !992, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1010, file: !992, line: 175, baseType: !1040, size: 64)
!1040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1041, size: 64)
!1041 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !992, line: 175, flags: DIFlagFwdDecl)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1010, file: !992, line: 176, baseType: !1043, size: 64)
!1043 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1044, size: 64)
!1044 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1045, line: 75, size: 256, elements: !1046)
!1045 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1046 = !{!1047, !1061, !1062, !1063}
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1044, file: !1045, line: 76, baseType: !1048, size: 64)
!1048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1049, size: 64)
!1049 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1045, line: 68, baseType: !1050)
!1050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1045, line: 63, size: 320, elements: !1051)
!1051 = !{!1052, !1054, !1055, !1056}
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1050, file: !1045, line: 64, baseType: !1053, size: 64)
!1053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1050, size: 64)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1050, file: !1045, line: 65, baseType: !1053, size: 64, offset: 64)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1050, file: !1045, line: 66, baseType: !7, size: 32, offset: 128)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1050, file: !1045, line: 67, baseType: !1057, size: 128, offset: 192)
!1057 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1058, size: 128, elements: !1059)
!1058 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1045, line: 29, baseType: !865)
!1059 = !{!1060}
!1060 = !DISubrange(count: 2)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1044, file: !1045, line: 77, baseType: !1048, size: 64, offset: 64)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1044, file: !1045, line: 78, baseType: !7, size: 32, offset: 128)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1044, file: !1045, line: 79, baseType: !1064, size: 64, offset: 192)
!1064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1065, size: 64)
!1065 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1045, line: 49, baseType: !1066)
!1066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1045, line: 45, size: 832, elements: !1067)
!1067 = !{!1068, !1069, !1070}
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1066, file: !1045, line: 46, baseType: !1053, size: 64)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1066, file: !1045, line: 47, baseType: !1043, size: 64, offset: 64)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1066, file: !1045, line: 48, baseType: !1071, size: 704, offset: 128)
!1071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1072, line: 164, size: 704, elements: !1073)
!1072 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1073 = !{!1074, !1075, !1086, !1087, !1088, !1089, !1090, !1091, !1096, !1100, !1101, !1102, !1103}
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1071, file: !1072, line: 166, baseType: !867, size: 64)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1071, file: !1072, line: 167, baseType: !1076, size: 64, offset: 64)
!1076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1077, size: 64)
!1077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1072, line: 157, size: 192, elements: !1078)
!1078 = !{!1079, !1081, !1082}
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1077, file: !1072, line: 159, baseType: !1080, size: 64)
!1080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !911, size: 64)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1077, file: !1072, line: 160, baseType: !1076, size: 64, offset: 64)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1077, file: !1072, line: 161, baseType: !1083, size: 32, offset: 128)
!1083 = !DICompositeType(tag: DW_TAG_array_type, baseType: !911, size: 32, elements: !1084)
!1084 = !{!1085}
!1085 = !DISubrange(count: 4)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1071, file: !1072, line: 168, baseType: !1080, size: 64, offset: 128)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1071, file: !1072, line: 169, baseType: !1080, size: 64, offset: 192)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1071, file: !1072, line: 170, baseType: !1080, size: 64, offset: 256)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1071, file: !1072, line: 171, baseType: !867, size: 64, offset: 320)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1071, file: !1072, line: 172, baseType: !908, size: 32, offset: 384)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1071, file: !1072, line: 176, baseType: !1092, size: 64, offset: 448)
!1092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1093, size: 64)
!1093 = !DISubroutineType(types: !1094)
!1094 = !{!1076, !1095, !867}
!1095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1071, file: !1072, line: 177, baseType: !1097, size: 64, offset: 512)
!1097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1098, size: 64)
!1098 = !DISubroutineType(types: !1099)
!1099 = !{null, !1095, !1076}
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1071, file: !1072, line: 178, baseType: !1095, size: 64, offset: 576)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1071, file: !1072, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1071, file: !1072, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1071, file: !1072, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1010, file: !992, line: 177, baseType: !811, size: 64)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1010, file: !992, line: 178, baseType: !1106, size: 64)
!1106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1107, size: 64)
!1107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !1108)
!1108 = !{!1109, !1354, !1355, !1356, !1412, !1416, !1417, !1418, !1436, !1437, !1438, !1439, !1440, !1441}
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1107, file: !135, line: 219, baseType: !1110, size: 64)
!1110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1111, size: 64)
!1111 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !1112)
!1112 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !1113)
!1113 = !{!1114}
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1112, file: !135, line: 151, baseType: !1115, size: 128)
!1115 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !1116)
!1116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !1117)
!1117 = !{!1118, !1119, !1120}
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1116, file: !135, line: 150, baseType: !7, size: 32)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1116, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1116, file: !135, line: 150, baseType: !1121, size: 64, offset: 64)
!1121 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1122, size: 64, elements: !912)
!1122 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !812, line: 108, baseType: !1123)
!1123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1124, size: 64)
!1124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !1125)
!1125 = !{!1126, !1127, !1128, !1346, !1347, !1348, !1349, !1350, !1351, !1352}
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1124, file: !135, line: 124, baseType: !1106, size: 64)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1124, file: !135, line: 125, baseType: !1106, size: 64, offset: 64)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1124, file: !135, line: 131, baseType: !1129, size: 64, offset: 128)
!1129 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !1130)
!1130 = !{!1131, !1345}
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1129, file: !135, line: 129, baseType: !1132, size: 64)
!1132 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !812, line: 66, baseType: !1133)
!1133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1134, size: 64)
!1134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !422, line: 143, size: 192, elements: !1135)
!1135 = !{!1136, !1343, !1344}
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1134, file: !422, line: 145, baseType: !1137, size: 64)
!1137 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !812, line: 69, baseType: !1138)
!1138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1139, size: 64)
!1139 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !422, line: 136, size: 192, elements: !1140)
!1140 = !{!1141, !1341, !1342}
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1139, file: !422, line: 137, baseType: !1142, size: 64)
!1142 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !812, line: 58, baseType: !1143)
!1143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1144, size: 64)
!1144 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !422, line: 737, size: 768, elements: !1145)
!1145 = !{!1146, !1163, !1196, !1202, !1207, !1212, !1219, !1225, !1231, !1236, !1250, !1255, !1261, !1266, !1276, !1281, !1299, !1306, !1313, !1319, !1324, !1330, !1336}
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1144, file: !422, line: 738, baseType: !1147, size: 256)
!1147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !422, line: 271, size: 256, elements: !1148)
!1148 = !{!1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162}
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1147, file: !422, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1147, file: !422, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1147, file: !422, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1147, file: !422, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1147, file: !422, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1147, file: !422, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1147, file: !422, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1147, file: !422, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1147, file: !422, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1147, file: !422, line: 312, baseType: !7, size: 32, offset: 32)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1147, file: !422, line: 316, baseType: !939, size: 32, offset: 64)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1147, file: !422, line: 319, baseType: !7, size: 32, offset: 96)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1147, file: !422, line: 323, baseType: !1106, size: 64, offset: 128)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1147, file: !422, line: 327, baseType: !811, size: 64, offset: 192)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1144, file: !422, line: 739, baseType: !1164, size: 448)
!1164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !422, line: 350, size: 448, elements: !1165)
!1165 = !{!1166, !1194}
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1164, file: !422, line: 353, baseType: !1167, size: 384)
!1167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !422, line: 333, size: 384, elements: !1168)
!1168 = !{!1169, !1170, !1177}
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1167, file: !422, line: 336, baseType: !1147, size: 256)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1167, file: !422, line: 343, baseType: !1171, size: 64, offset: 256)
!1171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1172, size: 64)
!1172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !466, line: 37, size: 128, elements: !1173)
!1173 = !{!1174, !1175}
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1172, file: !466, line: 39, baseType: !1171, size: 64)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1172, file: !466, line: 40, baseType: !1176, size: 64, offset: 64)
!1176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !811, size: 64)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1167, file: !422, line: 344, baseType: !1178, size: 64, offset: 320)
!1178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1179, size: 64)
!1179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !466, line: 45, size: 320, elements: !1180)
!1180 = !{!1181, !1182}
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1179, file: !466, line: 47, baseType: !1178, size: 64)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1179, file: !466, line: 48, baseType: !1183, size: 256, offset: 64)
!1183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !164, line: 1883, size: 256, elements: !1184)
!1184 = !{!1185, !1187, !1188, !1193}
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1183, file: !164, line: 1884, baseType: !1186, size: 64)
!1186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1183, size: 64)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1183, file: !164, line: 1885, baseType: !1186, size: 64, offset: 64)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1183, file: !164, line: 1891, baseType: !1189, size: 64, offset: 128)
!1189 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1183, file: !164, line: 1891, size: 64, elements: !1190)
!1190 = !{!1191, !1192}
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1189, file: !164, line: 1891, baseType: !1142, size: 64)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1189, file: !164, line: 1891, baseType: !811, size: 64)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1183, file: !164, line: 1892, baseType: !1176, size: 64, offset: 192)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1164, file: !422, line: 359, baseType: !1195, size: 64, offset: 384)
!1195 = !DICompositeType(tag: DW_TAG_array_type, baseType: !811, size: 64, elements: !912)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1144, file: !422, line: 740, baseType: !1197, size: 512)
!1197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !422, line: 365, size: 512, elements: !1198)
!1198 = !{!1199, !1200, !1201}
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1197, file: !422, line: 368, baseType: !1167, size: 384)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1197, file: !422, line: 373, baseType: !811, size: 64, offset: 384)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1197, file: !422, line: 374, baseType: !811, size: 64, offset: 448)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1144, file: !422, line: 741, baseType: !1203, size: 576)
!1203 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !422, line: 380, size: 576, elements: !1204)
!1204 = !{!1205, !1206}
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1203, file: !422, line: 383, baseType: !1197, size: 512)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1203, file: !422, line: 389, baseType: !1195, size: 64, offset: 512)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1144, file: !422, line: 742, baseType: !1208, size: 320)
!1208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !422, line: 395, size: 320, elements: !1209)
!1209 = !{!1210, !1211}
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1208, file: !422, line: 397, baseType: !1147, size: 256)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1208, file: !422, line: 400, baseType: !1132, size: 64, offset: 256)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1144, file: !422, line: 743, baseType: !1213, size: 448)
!1213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !422, line: 406, size: 448, elements: !1214)
!1214 = !{!1215, !1216, !1217, !1218}
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1213, file: !422, line: 408, baseType: !1147, size: 256)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1213, file: !422, line: 412, baseType: !811, size: 64, offset: 256)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1213, file: !422, line: 420, baseType: !811, size: 64, offset: 320)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1213, file: !422, line: 423, baseType: !1132, size: 64, offset: 384)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1144, file: !422, line: 744, baseType: !1220, size: 384)
!1220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !422, line: 429, size: 384, elements: !1221)
!1221 = !{!1222, !1223, !1224}
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1220, file: !422, line: 431, baseType: !1147, size: 256)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1220, file: !422, line: 434, baseType: !811, size: 64, offset: 256)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1220, file: !422, line: 437, baseType: !1132, size: 64, offset: 320)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1144, file: !422, line: 745, baseType: !1226, size: 384)
!1226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !422, line: 443, size: 384, elements: !1227)
!1227 = !{!1228, !1229, !1230}
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1226, file: !422, line: 445, baseType: !1147, size: 256)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1226, file: !422, line: 449, baseType: !811, size: 64, offset: 256)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1226, file: !422, line: 453, baseType: !1132, size: 64, offset: 320)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1144, file: !422, line: 746, baseType: !1232, size: 320)
!1232 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !422, line: 459, size: 320, elements: !1233)
!1233 = !{!1234, !1235}
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1232, file: !422, line: 461, baseType: !1147, size: 256)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1232, file: !422, line: 464, baseType: !811, size: 64, offset: 256)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1144, file: !422, line: 747, baseType: !1237, size: 768)
!1237 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !422, line: 469, size: 768, elements: !1238)
!1238 = !{!1239, !1240, !1241, !1242, !1243}
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1237, file: !422, line: 471, baseType: !1147, size: 256)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1237, file: !422, line: 474, baseType: !7, size: 32, offset: 256)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1237, file: !422, line: 475, baseType: !7, size: 32, offset: 288)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1237, file: !422, line: 478, baseType: !811, size: 64, offset: 320)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1237, file: !422, line: 481, baseType: !1244, size: 384, offset: 384)
!1244 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1245, size: 384, elements: !912)
!1245 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !164, line: 1917, size: 384, elements: !1246)
!1246 = !{!1247, !1248, !1249}
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1245, file: !164, line: 1920, baseType: !1183, size: 256)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1245, file: !164, line: 1921, baseType: !811, size: 64, offset: 256)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1245, file: !164, line: 1922, baseType: !939, size: 32, offset: 320)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1144, file: !422, line: 748, baseType: !1251, size: 320)
!1251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !422, line: 487, size: 320, elements: !1252)
!1252 = !{!1253, !1254}
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1251, file: !422, line: 490, baseType: !1147, size: 256)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1251, file: !422, line: 494, baseType: !908, size: 32, offset: 256)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1144, file: !422, line: 749, baseType: !1256, size: 384)
!1256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !422, line: 500, size: 384, elements: !1257)
!1257 = !{!1258, !1259, !1260}
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1256, file: !422, line: 502, baseType: !1147, size: 256)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1256, file: !422, line: 506, baseType: !1132, size: 64, offset: 256)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1256, file: !422, line: 510, baseType: !1132, size: 64, offset: 320)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1144, file: !422, line: 750, baseType: !1262, size: 320)
!1262 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !422, line: 529, size: 320, elements: !1263)
!1263 = !{!1264, !1265}
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1262, file: !422, line: 531, baseType: !1147, size: 256)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1262, file: !422, line: 540, baseType: !1132, size: 64, offset: 256)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1144, file: !422, line: 751, baseType: !1267, size: 704)
!1267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !422, line: 546, size: 704, elements: !1268)
!1268 = !{!1269, !1270, !1271, !1272, !1273, !1274, !1275}
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1267, file: !422, line: 549, baseType: !1197, size: 512)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1267, file: !422, line: 553, baseType: !1015, size: 64, offset: 512)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1267, file: !422, line: 557, baseType: !931, size: 8, offset: 576)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1267, file: !422, line: 558, baseType: !931, size: 8, offset: 584)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1267, file: !422, line: 559, baseType: !931, size: 8, offset: 592)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1267, file: !422, line: 560, baseType: !931, size: 8, offset: 600)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1267, file: !422, line: 566, baseType: !1195, size: 64, offset: 640)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1144, file: !422, line: 752, baseType: !1277, size: 384)
!1277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !422, line: 571, size: 384, elements: !1278)
!1278 = !{!1279, !1280}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1277, file: !422, line: 573, baseType: !1208, size: 320)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1277, file: !422, line: 577, baseType: !811, size: 64, offset: 320)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1144, file: !422, line: 753, baseType: !1282, size: 576)
!1282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !422, line: 600, size: 576, elements: !1283)
!1283 = !{!1284, !1285, !1286, !1289, !1298}
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1282, file: !422, line: 602, baseType: !1208, size: 320)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1282, file: !422, line: 605, baseType: !811, size: 64, offset: 320)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1282, file: !422, line: 609, baseType: !1287, size: 64, offset: 384)
!1287 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1288, line: 46, baseType: !865)
!1288 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1282, file: !422, line: 612, baseType: !1290, size: 64, offset: 448)
!1290 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1291, size: 64)
!1291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !422, line: 581, size: 320, elements: !1292)
!1292 = !{!1293, !1294, !1295, !1296, !1297}
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1291, file: !422, line: 583, baseType: !196, size: 32)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1291, file: !422, line: 586, baseType: !811, size: 64, offset: 64)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1291, file: !422, line: 589, baseType: !811, size: 64, offset: 128)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1291, file: !422, line: 592, baseType: !811, size: 64, offset: 192)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1291, file: !422, line: 595, baseType: !811, size: 64, offset: 256)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1282, file: !422, line: 616, baseType: !1132, size: 64, offset: 512)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1144, file: !422, line: 754, baseType: !1300, size: 512)
!1300 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !422, line: 622, size: 512, elements: !1301)
!1301 = !{!1302, !1303, !1304, !1305}
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1300, file: !422, line: 624, baseType: !1208, size: 320)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1300, file: !422, line: 628, baseType: !811, size: 64, offset: 320)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1300, file: !422, line: 632, baseType: !811, size: 64, offset: 384)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1300, file: !422, line: 636, baseType: !811, size: 64, offset: 448)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1144, file: !422, line: 755, baseType: !1307, size: 704)
!1307 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !422, line: 642, size: 704, elements: !1308)
!1308 = !{!1309, !1310, !1311, !1312}
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1307, file: !422, line: 644, baseType: !1300, size: 512)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1307, file: !422, line: 648, baseType: !811, size: 64, offset: 512)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1307, file: !422, line: 652, baseType: !811, size: 64, offset: 576)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1307, file: !422, line: 653, baseType: !811, size: 64, offset: 640)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1144, file: !422, line: 756, baseType: !1314, size: 448)
!1314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !422, line: 663, size: 448, elements: !1315)
!1315 = !{!1316, !1317, !1318}
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1314, file: !422, line: 665, baseType: !1208, size: 320)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1314, file: !422, line: 668, baseType: !811, size: 64, offset: 320)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1314, file: !422, line: 673, baseType: !811, size: 64, offset: 384)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1144, file: !422, line: 757, baseType: !1320, size: 384)
!1320 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !422, line: 694, size: 384, elements: !1321)
!1321 = !{!1322, !1323}
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1320, file: !422, line: 696, baseType: !1208, size: 320)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1320, file: !422, line: 699, baseType: !811, size: 64, offset: 320)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1144, file: !422, line: 758, baseType: !1325, size: 384)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !422, line: 681, size: 384, elements: !1326)
!1326 = !{!1327, !1328, !1329}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1325, file: !422, line: 683, baseType: !1147, size: 256)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1325, file: !422, line: 686, baseType: !811, size: 64, offset: 256)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1325, file: !422, line: 689, baseType: !811, size: 64, offset: 320)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1144, file: !422, line: 759, baseType: !1331, size: 384)
!1331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !422, line: 707, size: 384, elements: !1332)
!1332 = !{!1333, !1334, !1335}
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1331, file: !422, line: 709, baseType: !1147, size: 256)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1331, file: !422, line: 712, baseType: !811, size: 64, offset: 256)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1331, file: !422, line: 712, baseType: !811, size: 64, offset: 320)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1144, file: !422, line: 760, baseType: !1337, size: 320)
!1337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !422, line: 718, size: 320, elements: !1338)
!1338 = !{!1339, !1340}
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1337, file: !422, line: 720, baseType: !1147, size: 256)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1337, file: !422, line: 723, baseType: !811, size: 64, offset: 256)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1139, file: !422, line: 138, baseType: !1138, size: 64, offset: 64)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1139, file: !422, line: 139, baseType: !1138, size: 64, offset: 128)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1134, file: !422, line: 146, baseType: !1137, size: 64, offset: 64)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1134, file: !422, line: 152, baseType: !1132, size: 64, offset: 128)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1129, file: !135, line: 130, baseType: !989, size: 64)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1124, file: !135, line: 134, baseType: !1095, size: 64, offset: 192)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1124, file: !135, line: 137, baseType: !811, size: 64, offset: 256)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1124, file: !135, line: 138, baseType: !939, size: 32, offset: 320)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1124, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1124, file: !135, line: 144, baseType: !908, size: 32, offset: 384)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1124, file: !135, line: 145, baseType: !908, size: 32, offset: 416)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1124, file: !135, line: 146, baseType: !1353, size: 64, offset: 448)
!1353 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !867)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1107, file: !135, line: 220, baseType: !1110, size: 64, offset: 64)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1107, file: !135, line: 223, baseType: !1095, size: 64, offset: 128)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1107, file: !135, line: 226, baseType: !1357, size: 64, offset: 192)
!1357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1358, size: 64)
!1358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !146, line: 100, size: 1216, elements: !1359)
!1359 = !{!1360, !1361, !1362, !1363, !1364, !1369, !1370, !1371, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1402, !1410, !1411}
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1358, file: !146, line: 102, baseType: !908, size: 32)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1358, file: !146, line: 105, baseType: !7, size: 32, offset: 32)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1358, file: !146, line: 108, baseType: !1106, size: 64, offset: 64)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1358, file: !146, line: 111, baseType: !1106, size: 64, offset: 128)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1358, file: !146, line: 114, baseType: !1365, size: 64, offset: 192)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !146, line: 41, size: 64, elements: !1366)
!1366 = !{!1367, !1368}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1365, file: !146, line: 42, baseType: !145, size: 32)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1365, file: !146, line: 43, baseType: !7, size: 32, offset: 32)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1358, file: !146, line: 117, baseType: !7, size: 32, offset: 256)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1358, file: !146, line: 120, baseType: !7, size: 32, offset: 288)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1358, file: !146, line: 123, baseType: !1372, size: 64, offset: 320)
!1372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1373, size: 64)
!1373 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !146, line: 87, baseType: !1374)
!1374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !146, line: 87, size: 128, elements: !1375)
!1375 = !{!1376}
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1374, file: !146, line: 87, baseType: !1377, size: 128)
!1377 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !146, line: 85, baseType: !1378)
!1378 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !146, line: 85, size: 128, elements: !1379)
!1379 = !{!1380, !1381, !1382}
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1378, file: !146, line: 85, baseType: !7, size: 32)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1378, file: !146, line: 85, baseType: !7, size: 32, offset: 32)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1378, file: !146, line: 85, baseType: !1383, size: 64, offset: 64)
!1383 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1384, size: 64, elements: !912)
!1384 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !146, line: 84, baseType: !1357)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1358, file: !146, line: 126, baseType: !1357, size: 64, offset: 384)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1358, file: !146, line: 129, baseType: !1357, size: 64, offset: 448)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1358, file: !146, line: 132, baseType: !1095, size: 64, offset: 512)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1358, file: !146, line: 139, baseType: !811, size: 64, offset: 576)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1358, file: !146, line: 143, baseType: !860, size: 128, offset: 640)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1358, file: !146, line: 146, baseType: !860, size: 128, offset: 768)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1358, file: !146, line: 148, baseType: !931, size: 8, offset: 896)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1358, file: !146, line: 149, baseType: !931, size: 8, offset: 904)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1358, file: !146, line: 153, baseType: !154, size: 32, offset: 928)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1358, file: !146, line: 156, baseType: !1395, size: 64, offset: 960)
!1395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1396, size: 64)
!1396 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !146, line: 48, size: 320, elements: !1397)
!1397 = !{!1398, !1399, !1400, !1401}
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1396, file: !146, line: 50, baseType: !1142, size: 64)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1396, file: !146, line: 59, baseType: !860, size: 128, offset: 64)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1396, file: !146, line: 64, baseType: !931, size: 8, offset: 192)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1396, file: !146, line: 67, baseType: !1395, size: 64, offset: 256)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1358, file: !146, line: 159, baseType: !1403, size: 64, offset: 1024)
!1403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1404, size: 64)
!1404 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !146, line: 72, size: 256, elements: !1405)
!1405 = !{!1406, !1407, !1408, !1409}
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1404, file: !146, line: 74, baseType: !1123, size: 64)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1404, file: !146, line: 77, baseType: !1403, size: 64, offset: 64)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1404, file: !146, line: 78, baseType: !1403, size: 64, offset: 128)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1404, file: !146, line: 81, baseType: !1403, size: 64, offset: 192)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1358, file: !146, line: 162, baseType: !931, size: 8, offset: 1088)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1358, file: !146, line: 166, baseType: !811, size: 64, offset: 1152)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1107, file: !135, line: 229, baseType: !1413, size: 128, offset: 256)
!1413 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1414, size: 128, elements: !1059)
!1414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1415, size: 64)
!1415 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1107, file: !135, line: 232, baseType: !1106, size: 64, offset: 384)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1107, file: !135, line: 233, baseType: !1106, size: 64, offset: 448)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1107, file: !135, line: 238, baseType: !1419, size: 64, offset: 512)
!1419 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !1420)
!1420 = !{!1421, !1427}
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1419, file: !135, line: 236, baseType: !1422, size: 64)
!1422 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1423, size: 64)
!1423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !1424)
!1424 = !{!1425, !1426}
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1423, file: !135, line: 275, baseType: !1132, size: 64)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1423, file: !135, line: 278, baseType: !1132, size: 64, offset: 64)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1419, file: !135, line: 237, baseType: !1428, size: 64)
!1428 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1429, size: 64)
!1429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !1430)
!1430 = !{!1431, !1432, !1433, !1434, !1435}
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1429, file: !135, line: 261, baseType: !989, size: 64)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1429, file: !135, line: 262, baseType: !989, size: 64, offset: 64)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1429, file: !135, line: 266, baseType: !989, size: 64, offset: 128)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1429, file: !135, line: 267, baseType: !989, size: 64, offset: 192)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1429, file: !135, line: 270, baseType: !908, size: 32, offset: 256)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1107, file: !135, line: 241, baseType: !1353, size: 64, offset: 576)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1107, file: !135, line: 244, baseType: !908, size: 32, offset: 640)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1107, file: !135, line: 247, baseType: !908, size: 32, offset: 672)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1107, file: !135, line: 250, baseType: !908, size: 32, offset: 704)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1107, file: !135, line: 253, baseType: !908, size: 32, offset: 736)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1107, file: !135, line: 256, baseType: !908, size: 32, offset: 768)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1010, file: !992, line: 179, baseType: !1443, size: 64)
!1443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1444, size: 64)
!1444 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !992, line: 150, baseType: !1445)
!1445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !992, line: 142, size: 320, elements: !1446)
!1446 = !{!1447, !1448, !1449, !1450, !1453, !1454}
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1445, file: !992, line: 144, baseType: !811, size: 64)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1445, file: !992, line: 145, baseType: !989, size: 64, offset: 64)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1445, file: !992, line: 146, baseType: !989, size: 64, offset: 128)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1445, file: !992, line: 147, baseType: !1451, size: 32, offset: 192)
!1451 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1452, line: 31, baseType: !908)
!1452 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1445, file: !992, line: 148, baseType: !7, size: 32, offset: 224)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1445, file: !992, line: 149, baseType: !931, size: 8, offset: 256)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1010, file: !992, line: 180, baseType: !1456, size: 64)
!1456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1457, size: 64)
!1457 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !992, line: 162, baseType: !1458)
!1458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !992, line: 159, size: 128, elements: !1459)
!1459 = !{!1460, !1461}
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1458, file: !992, line: 160, baseType: !811, size: 64)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1458, file: !992, line: 161, baseType: !867, size: 64, offset: 64)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1010, file: !992, line: 181, baseType: !1463, size: 64)
!1463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1464, size: 64)
!1464 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !992, line: 181, flags: DIFlagFwdDecl)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1005, file: !992, line: 317, baseType: !1466, size: 64)
!1466 = !DICompositeType(tag: DW_TAG_array_type, baseType: !867, size: 64, elements: !912)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1005, file: !992, line: 318, baseType: !1468, size: 320)
!1468 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !992, line: 188, size: 320, elements: !1469)
!1469 = !{!1470, !1472, !1495}
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1468, file: !992, line: 190, baseType: !1471, size: 192)
!1471 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1009, size: 192, elements: !885)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1468, file: !992, line: 193, baseType: !1473, size: 64, offset: 192)
!1473 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1474, size: 64)
!1474 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !992, line: 206, size: 320, elements: !1475)
!1475 = !{!1476, !1480, !1481, !1482, !1494}
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1474, file: !992, line: 208, baseType: !1477, size: 64)
!1477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1478, size: 64)
!1478 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !812, line: 62, baseType: !1479)
!1479 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !812, line: 61, flags: DIFlagFwdDecl)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1474, file: !992, line: 211, baseType: !7, size: 32, offset: 64)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1474, file: !992, line: 214, baseType: !867, size: 64, offset: 128)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1474, file: !992, line: 224, baseType: !1483, size: 64, offset: 192)
!1483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1484, size: 64)
!1484 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !992, line: 202, baseType: !1485)
!1485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !992, line: 202, size: 128, elements: !1486)
!1486 = !{!1487}
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1485, file: !992, line: 202, baseType: !1488, size: 128)
!1488 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !992, line: 200, baseType: !1489)
!1489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !992, line: 200, size: 128, elements: !1490)
!1490 = !{!1491, !1492, !1493}
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1489, file: !992, line: 200, baseType: !7, size: 32)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1489, file: !992, line: 200, baseType: !7, size: 32, offset: 32)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1489, file: !992, line: 200, baseType: !1025, size: 64, offset: 64)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1474, file: !992, line: 234, baseType: !1483, size: 64, offset: 256)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1468, file: !992, line: 197, baseType: !867, size: 64, offset: 256)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1005, file: !992, line: 319, baseType: !874, size: 256)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1005, file: !992, line: 320, baseType: !893, size: 192)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !814, file: !164, line: 3384, baseType: !1499, size: 1472)
!1499 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !164, line: 3114, size: 1472, elements: !1500)
!1500 = !{!1501, !1522, !1523, !1524, !1525}
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1499, file: !164, line: 3115, baseType: !1502, size: 1216)
!1502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !164, line: 2984, size: 1216, elements: !1503)
!1503 = !{!1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521}
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1502, file: !164, line: 2985, baseType: !985, size: 960)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1502, file: !164, line: 2986, baseType: !811, size: 64, offset: 960)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1502, file: !164, line: 2987, baseType: !811, size: 64, offset: 1024)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1502, file: !164, line: 2988, baseType: !811, size: 64, offset: 1088)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1502, file: !164, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1502, file: !164, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1502, file: !164, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1502, file: !164, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1502, file: !164, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1502, file: !164, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1502, file: !164, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1502, file: !164, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1502, file: !164, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1502, file: !164, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1502, file: !164, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1502, file: !164, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1502, file: !164, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1502, file: !164, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1499, file: !164, line: 3117, baseType: !811, size: 64, offset: 1216)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1499, file: !164, line: 3119, baseType: !811, size: 64, offset: 1280)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1499, file: !164, line: 3121, baseType: !811, size: 64, offset: 1344)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1499, file: !164, line: 3123, baseType: !811, size: 64, offset: 1408)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !814, file: !164, line: 3385, baseType: !1527, size: 1088)
!1527 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !164, line: 2874, size: 1088, elements: !1528)
!1528 = !{!1529, !1530, !1531}
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1527, file: !164, line: 2875, baseType: !985, size: 960)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1527, file: !164, line: 2876, baseType: !989, size: 64, offset: 960)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1527, file: !164, line: 2877, baseType: !1532, size: 64, offset: 1024)
!1532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1533, size: 64)
!1533 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1534, line: 172, size: 128, elements: !1535)
!1534 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1535 = !{!1536, !1537, !1538, !1539, !1540, !1541, !1542}
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1533, file: !1534, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1533, file: !1534, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1533, file: !1534, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1533, file: !1534, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1533, file: !1534, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1533, file: !1534, line: 195, baseType: !7, size: 32, offset: 32)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1533, file: !1534, line: 199, baseType: !811, size: 64, offset: 64)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !814, file: !164, line: 3386, baseType: !1502, size: 1216)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !814, file: !164, line: 3387, baseType: !1545, size: 1280)
!1545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !164, line: 3093, size: 1280, elements: !1546)
!1546 = !{!1547, !1548}
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1545, file: !164, line: 3094, baseType: !1502, size: 1216)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1545, file: !164, line: 3095, baseType: !1532, size: 64, offset: 1216)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !814, file: !164, line: 3388, baseType: !1550, size: 1216)
!1550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !164, line: 2824, size: 1216, elements: !1551)
!1551 = !{!1552, !1553, !1554, !1555, !1556, !1557}
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1550, file: !164, line: 2825, baseType: !947, size: 896)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1550, file: !164, line: 2827, baseType: !811, size: 64, offset: 896)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1550, file: !164, line: 2828, baseType: !811, size: 64, offset: 960)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1550, file: !164, line: 2829, baseType: !811, size: 64, offset: 1024)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1550, file: !164, line: 2830, baseType: !811, size: 64, offset: 1088)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1550, file: !164, line: 2831, baseType: !811, size: 64, offset: 1152)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !814, file: !164, line: 3389, baseType: !1559, size: 1024)
!1559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !164, line: 2850, size: 1024, elements: !1560)
!1560 = !{!1561, !1562, !1563}
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1559, file: !164, line: 2851, baseType: !985, size: 960)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1559, file: !164, line: 2852, baseType: !908, size: 32, offset: 960)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1559, file: !164, line: 2853, baseType: !908, size: 32, offset: 992)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !814, file: !164, line: 3390, baseType: !1565, size: 1024)
!1565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !164, line: 2857, size: 1024, elements: !1566)
!1566 = !{!1567, !1568}
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1565, file: !164, line: 2858, baseType: !985, size: 960)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1565, file: !164, line: 2859, baseType: !1532, size: 64, offset: 960)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !814, file: !164, line: 3391, baseType: !1570, size: 960)
!1570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !164, line: 2862, size: 960, elements: !1571)
!1571 = !{!1572}
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1570, file: !164, line: 2863, baseType: !985, size: 960)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !814, file: !164, line: 3392, baseType: !1574, size: 1472)
!1574 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !164, line: 3304, size: 1472, elements: !1575)
!1575 = !{!1576}
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1574, file: !164, line: 3305, baseType: !1499, size: 1472)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !814, file: !164, line: 3393, baseType: !1578, size: 1792)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !164, line: 3248, size: 1792, elements: !1579)
!1579 = !{!1580, !1581, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1578, file: !164, line: 3249, baseType: !1499, size: 1472)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1578, file: !164, line: 3251, baseType: !1582, size: 64, offset: 1472)
!1582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1583, size: 64)
!1583 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1584, line: 463, size: 1152, elements: !1585)
!1584 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1585 = !{!1586, !1589, !1620, !1621, !1735, !1743, !1744, !1745, !1746, !1747, !1748, !1772, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798}
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1583, file: !1584, line: 464, baseType: !1587, size: 64)
!1587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1588, size: 64)
!1588 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1584, line: 464, flags: DIFlagFwdDecl)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1583, file: !1584, line: 467, baseType: !1590, size: 64, offset: 64)
!1590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1591, size: 64)
!1591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !1592)
!1592 = !{!1593, !1595, !1596, !1609, !1610, !1611, !1612, !1613, !1614, !1616, !1618, !1619}
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1591, file: !135, line: 377, baseType: !1594, size: 64)
!1594 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !812, line: 111, baseType: !1106)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1591, file: !135, line: 378, baseType: !1594, size: 64, offset: 64)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1591, file: !135, line: 381, baseType: !1597, size: 64, offset: 128)
!1597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1598, size: 64)
!1598 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !1599)
!1599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !1600)
!1600 = !{!1601}
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1599, file: !135, line: 282, baseType: !1602, size: 128)
!1602 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !1603)
!1603 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !1604)
!1604 = !{!1605, !1606, !1607}
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1603, file: !135, line: 281, baseType: !7, size: 32)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1603, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1603, file: !135, line: 281, baseType: !1608, size: 64, offset: 64)
!1608 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1594, size: 64, elements: !912)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1591, file: !135, line: 384, baseType: !908, size: 32, offset: 192)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1591, file: !135, line: 387, baseType: !908, size: 32, offset: 224)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1591, file: !135, line: 390, baseType: !908, size: 32, offset: 256)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1591, file: !135, line: 394, baseType: !1597, size: 64, offset: 320)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1591, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1591, file: !135, line: 399, baseType: !1615, size: 64, offset: 416)
!1615 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !1059)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1591, file: !135, line: 402, baseType: !1617, size: 64, offset: 480)
!1617 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1059)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1591, file: !135, line: 406, baseType: !908, size: 32, offset: 544)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1591, file: !135, line: 409, baseType: !908, size: 32, offset: 576)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1583, file: !1584, line: 470, baseType: !1133, size: 64, offset: 128)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1583, file: !1584, line: 473, baseType: !1622, size: 64, offset: 192)
!1622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1623, size: 64)
!1623 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1534, line: 39, size: 1152, elements: !1624)
!1624 = !{!1625, !1674, !1687, !1699, !1700, !1712, !1713, !1717, !1718, !1719, !1720, !1721}
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1623, file: !1534, line: 41, baseType: !1626, size: 64)
!1626 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !461, line: 144, baseType: !1627)
!1627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1628, size: 64)
!1628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !461, line: 100, size: 896, elements: !1629)
!1629 = !{!1630, !1638, !1643, !1648, !1650, !1651, !1652, !1653, !1654, !1655, !1660, !1662, !1663, !1668, !1673}
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1628, file: !461, line: 102, baseType: !1631, size: 64)
!1631 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !461, line: 52, baseType: !1632)
!1632 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1633, size: 64)
!1633 = !DISubroutineType(types: !1634)
!1634 = !{!1635, !1636}
!1635 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !461, line: 47, baseType: !7)
!1636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1637, size: 64)
!1637 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1628, file: !461, line: 105, baseType: !1639, size: 64, offset: 64)
!1639 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !461, line: 59, baseType: !1640)
!1640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1641, size: 64)
!1641 = !DISubroutineType(types: !1642)
!1642 = !{!908, !1636, !1636}
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1628, file: !461, line: 108, baseType: !1644, size: 64, offset: 128)
!1644 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !461, line: 63, baseType: !1645)
!1645 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1646, size: 64)
!1646 = !DISubroutineType(types: !1647)
!1647 = !{null, !1095}
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1628, file: !461, line: 111, baseType: !1649, size: 64, offset: 192)
!1649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1095, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1628, file: !461, line: 114, baseType: !1287, size: 64, offset: 256)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1628, file: !461, line: 117, baseType: !1287, size: 64, offset: 320)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1628, file: !461, line: 120, baseType: !1287, size: 64, offset: 384)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1628, file: !461, line: 124, baseType: !7, size: 32, offset: 448)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1628, file: !461, line: 128, baseType: !7, size: 32, offset: 480)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1628, file: !461, line: 131, baseType: !1656, size: 64, offset: 512)
!1656 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !461, line: 75, baseType: !1657)
!1657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1658, size: 64)
!1658 = !DISubroutineType(types: !1659)
!1659 = !{!1095, !1287, !1287}
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1628, file: !461, line: 132, baseType: !1661, size: 64, offset: 576)
!1661 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !461, line: 78, baseType: !1645)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1628, file: !461, line: 135, baseType: !1095, size: 64, offset: 640)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1628, file: !461, line: 136, baseType: !1664, size: 64, offset: 704)
!1664 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !461, line: 82, baseType: !1665)
!1665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1666, size: 64)
!1666 = !DISubroutineType(types: !1667)
!1667 = !{!1095, !1095, !1287, !1287}
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1628, file: !461, line: 137, baseType: !1669, size: 64, offset: 768)
!1669 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !461, line: 83, baseType: !1670)
!1670 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1671, size: 64)
!1671 = !DISubroutineType(types: !1672)
!1672 = !{null, !1095, !1095}
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1628, file: !461, line: 141, baseType: !7, size: 32, offset: 832)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1623, file: !1534, line: 48, baseType: !1675, size: 64, offset: 64)
!1675 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1676, size: 64)
!1676 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !422, line: 35, baseType: !1677)
!1677 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !422, line: 35, size: 128, elements: !1678)
!1678 = !{!1679}
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1677, file: !422, line: 35, baseType: !1680, size: 128)
!1680 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !422, line: 33, baseType: !1681)
!1681 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !422, line: 33, size: 128, elements: !1682)
!1682 = !{!1683, !1684, !1685}
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1681, file: !422, line: 33, baseType: !7, size: 32)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1681, file: !422, line: 33, baseType: !7, size: 32, offset: 32)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1681, file: !422, line: 33, baseType: !1686, size: 64, offset: 64)
!1686 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1142, size: 64, elements: !912)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1623, file: !1534, line: 51, baseType: !1688, size: 64, offset: 128)
!1688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1689, size: 64)
!1689 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !164, line: 183, baseType: !1690)
!1690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !164, line: 183, size: 128, elements: !1691)
!1691 = !{!1692}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1690, file: !164, line: 183, baseType: !1693, size: 128)
!1693 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !164, line: 182, baseType: !1694)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !164, line: 182, size: 128, elements: !1695)
!1695 = !{!1696, !1697, !1698}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1694, file: !164, line: 182, baseType: !7, size: 32)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1694, file: !164, line: 182, baseType: !7, size: 32, offset: 32)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1694, file: !164, line: 182, baseType: !1195, size: 64, offset: 64)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1623, file: !1534, line: 54, baseType: !811, size: 64, offset: 192)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1623, file: !1534, line: 57, baseType: !1701, size: 128, offset: 256)
!1701 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1702, line: 31, size: 128, elements: !1703)
!1702 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1703 = !{!1704, !1705, !1706, !1707, !1708, !1709, !1710}
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1701, file: !1702, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1701, file: !1702, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1701, file: !1702, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1701, file: !1702, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1701, file: !1702, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1701, file: !1702, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1701, file: !1702, line: 56, baseType: !1711, size: 64, offset: 64)
!1711 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !812, line: 47, baseType: !1043)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1623, file: !1534, line: 60, baseType: !1701, size: 128, offset: 384)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1623, file: !1534, line: 64, baseType: !1714, size: 64, offset: 512)
!1714 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1715, size: 64)
!1715 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1716, line: 33, flags: DIFlagFwdDecl)
!1716 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1623, file: !1534, line: 67, baseType: !811, size: 64, offset: 576)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1623, file: !1534, line: 73, baseType: !1626, size: 64, offset: 640)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1623, file: !1534, line: 77, baseType: !1711, size: 64, offset: 704)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1623, file: !1534, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1623, file: !1534, line: 82, baseType: !1722, size: 320, offset: 832)
!1722 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !466, line: 62, size: 320, elements: !1723)
!1723 = !{!1724, !1730, !1731, !1732, !1733, !1734}
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1722, file: !466, line: 63, baseType: !1725, size: 64)
!1725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1726, size: 64)
!1726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !466, line: 56, size: 128, elements: !1727)
!1727 = !{!1728, !1729}
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1726, file: !466, line: 57, baseType: !1725, size: 64)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1726, file: !466, line: 58, baseType: !910, size: 8, offset: 64)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1722, file: !466, line: 64, baseType: !7, size: 32, offset: 64)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1722, file: !466, line: 66, baseType: !7, size: 32, offset: 96)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1722, file: !466, line: 68, baseType: !931, size: 8, offset: 128)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1722, file: !466, line: 70, baseType: !1171, size: 64, offset: 192)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1722, file: !466, line: 71, baseType: !1178, size: 64, offset: 256)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1583, file: !1584, line: 476, baseType: !1736, size: 64, offset: 256)
!1736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1737, size: 64)
!1737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !146, line: 187, size: 256, elements: !1738)
!1738 = !{!1739, !1740, !1741, !1742}
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1737, file: !146, line: 189, baseType: !908, size: 32)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1737, file: !146, line: 192, baseType: !1372, size: 64, offset: 64)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1737, file: !146, line: 197, baseType: !1626, size: 64, offset: 128)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1737, file: !146, line: 200, baseType: !1357, size: 64, offset: 192)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1583, file: !1584, line: 479, baseType: !1626, size: 64, offset: 320)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1583, file: !1584, line: 484, baseType: !811, size: 64, offset: 384)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1583, file: !1584, line: 488, baseType: !811, size: 64, offset: 448)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1583, file: !1584, line: 493, baseType: !811, size: 64, offset: 512)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1583, file: !1584, line: 496, baseType: !811, size: 64, offset: 576)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1583, file: !1584, line: 501, baseType: !1749, size: 64, offset: 640)
!1749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1750, size: 64)
!1750 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !159, line: 2355, size: 576, elements: !1751)
!1751 = !{!1752, !1755, !1756, !1757, !1758, !1760, !1761, !1766, !1767, !1768, !1769, !1770, !1771}
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1750, file: !159, line: 2356, baseType: !1753, size: 64)
!1753 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1754, size: 64)
!1754 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !159, line: 2356, flags: DIFlagFwdDecl)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1750, file: !159, line: 2357, baseType: !1015, size: 64, offset: 64)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1750, file: !159, line: 2358, baseType: !908, size: 32, offset: 128)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1750, file: !159, line: 2359, baseType: !908, size: 32, offset: 160)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1750, file: !159, line: 2360, baseType: !1759, size: 128, offset: 192)
!1759 = !DICompositeType(tag: DW_TAG_array_type, baseType: !908, size: 128, elements: !1084)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1750, file: !159, line: 2364, baseType: !908, size: 32, offset: 320)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1750, file: !159, line: 2367, baseType: !1762, size: 128, offset: 384)
!1762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !159, line: 2349, size: 128, elements: !1763)
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1762, file: !159, line: 2351, baseType: !989, size: 64)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1762, file: !159, line: 2352, baseType: !867, size: 64, offset: 64)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1750, file: !159, line: 2371, baseType: !158, size: 32, offset: 512)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1750, file: !159, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1750, file: !159, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1750, file: !159, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1750, file: !159, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1750, file: !159, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1583, file: !1584, line: 504, baseType: !1773, size: 64, offset: 704)
!1773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1774, size: 64)
!1774 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1584, line: 504, flags: DIFlagFwdDecl)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1583, file: !1584, line: 507, baseType: !1626, size: 64, offset: 768)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1583, file: !1584, line: 510, baseType: !908, size: 32, offset: 832)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1583, file: !1584, line: 513, baseType: !908, size: 32, offset: 864)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1583, file: !1584, line: 516, baseType: !939, size: 32, offset: 896)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1583, file: !1584, line: 519, baseType: !939, size: 32, offset: 928)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1583, file: !1584, line: 522, baseType: !7, size: 32, offset: 960)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1583, file: !1584, line: 523, baseType: !7, size: 32, offset: 992)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1583, file: !1584, line: 528, baseType: !1015, size: 64, offset: 1024)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1583, file: !1584, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1583, file: !1584, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1583, file: !1584, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1583, file: !1584, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1583, file: !1584, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1583, file: !1584, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1583, file: !1584, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1583, file: !1584, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1583, file: !1584, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1583, file: !1584, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1583, file: !1584, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1583, file: !1584, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1583, file: !1584, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1583, file: !1584, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1583, file: !1584, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1583, file: !1584, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1578, file: !164, line: 3254, baseType: !811, size: 64, offset: 1536)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1578, file: !164, line: 3257, baseType: !811, size: 64, offset: 1600)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1578, file: !164, line: 3258, baseType: !811, size: 64, offset: 1664)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1578, file: !164, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1578, file: !164, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1578, file: !164, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1578, file: !164, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1578, file: !164, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1578, file: !164, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1578, file: !164, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1578, file: !164, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1578, file: !164, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1578, file: !164, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1578, file: !164, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1578, file: !164, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1578, file: !164, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1578, file: !164, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1578, file: !164, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1578, file: !164, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1578, file: !164, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1578, file: !164, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !814, file: !164, line: 3394, baseType: !1821, size: 1344)
!1821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !164, line: 2279, size: 1344, elements: !1822)
!1822 = !{!1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864}
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1821, file: !164, line: 2280, baseType: !850, size: 192)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1821, file: !164, line: 2281, baseType: !811, size: 64, offset: 192)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1821, file: !164, line: 2282, baseType: !811, size: 64, offset: 256)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1821, file: !164, line: 2283, baseType: !811, size: 64, offset: 320)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1821, file: !164, line: 2284, baseType: !811, size: 64, offset: 384)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1821, file: !164, line: 2285, baseType: !7, size: 32, offset: 448)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1821, file: !164, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1821, file: !164, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1821, file: !164, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1821, file: !164, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1821, file: !164, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1821, file: !164, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1821, file: !164, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1821, file: !164, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1821, file: !164, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1821, file: !164, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1821, file: !164, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1821, file: !164, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1821, file: !164, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1821, file: !164, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1821, file: !164, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1821, file: !164, line: 2305, baseType: !7, size: 32, offset: 512)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1821, file: !164, line: 2306, baseType: !1451, size: 32, offset: 544)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1821, file: !164, line: 2307, baseType: !811, size: 64, offset: 576)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1821, file: !164, line: 2308, baseType: !811, size: 64, offset: 640)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1821, file: !164, line: 2314, baseType: !1849, size: 64, offset: 704)
!1849 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !164, line: 2309, size: 64, elements: !1850)
!1850 = !{!1851, !1852, !1853}
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1849, file: !164, line: 2310, baseType: !908, size: 32)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1849, file: !164, line: 2311, baseType: !1015, size: 64)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1849, file: !164, line: 2312, baseType: !1854, size: 64)
!1854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1855, size: 64)
!1855 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !164, line: 2277, flags: DIFlagFwdDecl)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1821, file: !164, line: 2315, baseType: !811, size: 64, offset: 768)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1821, file: !164, line: 2316, baseType: !811, size: 64, offset: 832)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1821, file: !164, line: 2317, baseType: !811, size: 64, offset: 896)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1821, file: !164, line: 2318, baseType: !811, size: 64, offset: 960)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1821, file: !164, line: 2319, baseType: !811, size: 64, offset: 1024)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1821, file: !164, line: 2320, baseType: !811, size: 64, offset: 1088)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1821, file: !164, line: 2321, baseType: !811, size: 64, offset: 1152)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1821, file: !164, line: 2322, baseType: !811, size: 64, offset: 1216)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1821, file: !164, line: 2324, baseType: !1865, size: 64, offset: 1280)
!1865 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1866, size: 64)
!1866 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !164, line: 2324, flags: DIFlagFwdDecl)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !814, file: !164, line: 3395, baseType: !1868, size: 320)
!1868 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !164, line: 1469, size: 320, elements: !1869)
!1869 = !{!1870, !1871, !1872}
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1868, file: !164, line: 1470, baseType: !850, size: 192)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1868, file: !164, line: 1471, baseType: !811, size: 64, offset: 192)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1868, file: !164, line: 1472, baseType: !811, size: 64, offset: 256)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !814, file: !164, line: 3396, baseType: !1874, size: 320)
!1874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !164, line: 1482, size: 320, elements: !1875)
!1875 = !{!1876, !1877, !1878}
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1874, file: !164, line: 1483, baseType: !850, size: 192)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1874, file: !164, line: 1484, baseType: !908, size: 32, offset: 192)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1874, file: !164, line: 1485, baseType: !1195, size: 64, offset: 256)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !814, file: !164, line: 3397, baseType: !1880, size: 384)
!1880 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !164, line: 1829, size: 384, elements: !1881)
!1881 = !{!1882, !1883, !1884, !1885}
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1880, file: !164, line: 1830, baseType: !850, size: 192)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1880, file: !164, line: 1831, baseType: !939, size: 32, offset: 192)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1880, file: !164, line: 1832, baseType: !811, size: 64, offset: 256)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1880, file: !164, line: 1835, baseType: !1195, size: 64, offset: 320)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !814, file: !164, line: 3398, baseType: !1887, size: 704)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !164, line: 1898, size: 704, elements: !1888)
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1898}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1887, file: !164, line: 1899, baseType: !850, size: 192)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1887, file: !164, line: 1902, baseType: !811, size: 64, offset: 192)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1887, file: !164, line: 1905, baseType: !1142, size: 64, offset: 256)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1887, file: !164, line: 1908, baseType: !7, size: 32, offset: 320)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1887, file: !164, line: 1911, baseType: !1894, size: 64, offset: 384)
!1894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1895, size: 64)
!1895 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1534, line: 117, size: 128, elements: !1896)
!1896 = !{!1897}
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1895, file: !1534, line: 120, baseType: !1701, size: 128)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1887, file: !164, line: 1914, baseType: !1183, size: 256, offset: 448)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !814, file: !164, line: 3399, baseType: !1900, size: 704)
!1900 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !164, line: 2008, size: 704, elements: !1901)
!1901 = !{!1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912}
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1900, file: !164, line: 2009, baseType: !850, size: 192)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1900, file: !164, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1900, file: !164, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1900, file: !164, line: 2014, baseType: !939, size: 32, offset: 224)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1900, file: !164, line: 2016, baseType: !811, size: 64, offset: 256)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1900, file: !164, line: 2017, baseType: !1688, size: 64, offset: 320)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1900, file: !164, line: 2019, baseType: !811, size: 64, offset: 384)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1900, file: !164, line: 2020, baseType: !811, size: 64, offset: 448)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1900, file: !164, line: 2021, baseType: !811, size: 64, offset: 512)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1900, file: !164, line: 2022, baseType: !811, size: 64, offset: 576)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1900, file: !164, line: 2023, baseType: !811, size: 64, offset: 640)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !814, file: !164, line: 3400, baseType: !1914, size: 832)
!1914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !164, line: 2430, size: 832, elements: !1915)
!1915 = !{!1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925}
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1914, file: !164, line: 2431, baseType: !850, size: 192)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1914, file: !164, line: 2433, baseType: !811, size: 64, offset: 192)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1914, file: !164, line: 2434, baseType: !811, size: 64, offset: 256)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1914, file: !164, line: 2435, baseType: !811, size: 64, offset: 320)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1914, file: !164, line: 2436, baseType: !811, size: 64, offset: 384)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1914, file: !164, line: 2437, baseType: !1688, size: 64, offset: 448)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1914, file: !164, line: 2438, baseType: !811, size: 64, offset: 512)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1914, file: !164, line: 2440, baseType: !811, size: 64, offset: 576)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1914, file: !164, line: 2441, baseType: !811, size: 64, offset: 640)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1914, file: !164, line: 2443, baseType: !1926, size: 128, offset: 704)
!1926 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !164, line: 182, baseType: !1927)
!1927 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !164, line: 182, size: 128, elements: !1928)
!1928 = !{!1929}
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1927, file: !164, line: 182, baseType: !1693, size: 128)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !814, file: !164, line: 3401, baseType: !1931, size: 320)
!1931 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !164, line: 3327, size: 320, elements: !1932)
!1932 = !{!1933, !1934, !1941}
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1931, file: !164, line: 3329, baseType: !850, size: 192)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1931, file: !164, line: 3330, baseType: !1935, size: 64, offset: 192)
!1935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1936, size: 64)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !164, line: 3320, size: 192, elements: !1937)
!1937 = !{!1938, !1939, !1940}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1936, file: !164, line: 3322, baseType: !1935, size: 64)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1936, file: !164, line: 3323, baseType: !1935, size: 64, offset: 64)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1936, file: !164, line: 3324, baseType: !811, size: 64, offset: 128)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1931, file: !164, line: 3331, baseType: !1935, size: 64, offset: 256)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !814, file: !164, line: 3402, baseType: !1943, size: 256)
!1943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !164, line: 1540, size: 256, elements: !1944)
!1944 = !{!1945, !1946}
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1943, file: !164, line: 1541, baseType: !850, size: 192)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1943, file: !164, line: 1542, baseType: !1947, size: 64, offset: 192)
!1947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1948, size: 64)
!1948 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !164, line: 1538, baseType: !1949)
!1949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !164, line: 1538, size: 192, elements: !1950)
!1950 = !{!1951}
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1949, file: !164, line: 1538, baseType: !1952, size: 192)
!1952 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !164, line: 1537, baseType: !1953)
!1953 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !164, line: 1537, size: 192, elements: !1954)
!1954 = !{!1955, !1956, !1957}
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1953, file: !164, line: 1537, baseType: !7, size: 32)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1953, file: !164, line: 1537, baseType: !7, size: 32, offset: 32)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1953, file: !164, line: 1537, baseType: !1958, size: 128, offset: 64)
!1958 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1959, size: 128, elements: !912)
!1959 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !164, line: 1535, baseType: !1960)
!1960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !164, line: 1532, size: 128, elements: !1961)
!1961 = !{!1962, !1963}
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1960, file: !164, line: 1533, baseType: !811, size: 64)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1960, file: !164, line: 1534, baseType: !811, size: 64, offset: 64)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !814, file: !164, line: 3403, baseType: !1965, size: 512)
!1965 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !164, line: 1938, size: 512, elements: !1966)
!1966 = !{!1967, !1968, !1969, !1970, !1976, !1977, !1978}
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1965, file: !164, line: 1939, baseType: !850, size: 192)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1965, file: !164, line: 1940, baseType: !939, size: 32, offset: 192)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1965, file: !164, line: 1941, baseType: !163, size: 32, offset: 224)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1965, file: !164, line: 1946, baseType: !1971, size: 32, offset: 256)
!1971 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !164, line: 1942, size: 32, elements: !1972)
!1972 = !{!1973, !1974, !1975}
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1971, file: !164, line: 1943, baseType: !182, size: 32)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1971, file: !164, line: 1944, baseType: !189, size: 32)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1971, file: !164, line: 1945, baseType: !196, size: 32)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1965, file: !164, line: 1950, baseType: !1132, size: 64, offset: 320)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1965, file: !164, line: 1951, baseType: !1132, size: 64, offset: 384)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1965, file: !164, line: 1953, baseType: !1195, size: 64, offset: 448)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !814, file: !164, line: 3404, baseType: !1980, size: 1664)
!1980 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !164, line: 3337, size: 1664, elements: !1981)
!1981 = !{!1982, !1983}
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1980, file: !164, line: 3338, baseType: !850, size: 192)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1980, file: !164, line: 3341, baseType: !1984, size: 1472, offset: 192)
!1984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1985, line: 410, size: 1472, elements: !1986)
!1985 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1986 = !{!1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150}
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1984, file: !1985, line: 412, baseType: !908, size: 32)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1984, file: !1985, line: 413, baseType: !908, size: 32, offset: 32)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1984, file: !1985, line: 414, baseType: !908, size: 32, offset: 64)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1984, file: !1985, line: 415, baseType: !908, size: 32, offset: 96)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1984, file: !1985, line: 416, baseType: !908, size: 32, offset: 128)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1984, file: !1985, line: 417, baseType: !908, size: 32, offset: 160)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1984, file: !1985, line: 418, baseType: !931, size: 8, offset: 192)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1984, file: !1985, line: 419, baseType: !931, size: 8, offset: 200)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1984, file: !1985, line: 420, baseType: !1996, size: 8, offset: 208)
!1996 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1984, file: !1985, line: 421, baseType: !1996, size: 8, offset: 216)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1984, file: !1985, line: 422, baseType: !1996, size: 8, offset: 224)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1984, file: !1985, line: 423, baseType: !1996, size: 8, offset: 232)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1984, file: !1985, line: 424, baseType: !1996, size: 8, offset: 240)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1984, file: !1985, line: 425, baseType: !1996, size: 8, offset: 248)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1984, file: !1985, line: 426, baseType: !1996, size: 8, offset: 256)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1984, file: !1985, line: 427, baseType: !1996, size: 8, offset: 264)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1984, file: !1985, line: 428, baseType: !1996, size: 8, offset: 272)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1984, file: !1985, line: 429, baseType: !1996, size: 8, offset: 280)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1984, file: !1985, line: 430, baseType: !1996, size: 8, offset: 288)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1984, file: !1985, line: 431, baseType: !1996, size: 8, offset: 296)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1984, file: !1985, line: 432, baseType: !1996, size: 8, offset: 304)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1984, file: !1985, line: 433, baseType: !1996, size: 8, offset: 312)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1984, file: !1985, line: 434, baseType: !1996, size: 8, offset: 320)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1984, file: !1985, line: 435, baseType: !1996, size: 8, offset: 328)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1984, file: !1985, line: 436, baseType: !1996, size: 8, offset: 336)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1984, file: !1985, line: 437, baseType: !1996, size: 8, offset: 344)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1984, file: !1985, line: 438, baseType: !1996, size: 8, offset: 352)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1984, file: !1985, line: 439, baseType: !1996, size: 8, offset: 360)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1984, file: !1985, line: 440, baseType: !1996, size: 8, offset: 368)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1984, file: !1985, line: 441, baseType: !1996, size: 8, offset: 376)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1984, file: !1985, line: 442, baseType: !1996, size: 8, offset: 384)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1984, file: !1985, line: 443, baseType: !1996, size: 8, offset: 392)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1984, file: !1985, line: 444, baseType: !1996, size: 8, offset: 400)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1984, file: !1985, line: 445, baseType: !1996, size: 8, offset: 408)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1984, file: !1985, line: 446, baseType: !1996, size: 8, offset: 416)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1984, file: !1985, line: 447, baseType: !1996, size: 8, offset: 424)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1984, file: !1985, line: 448, baseType: !1996, size: 8, offset: 432)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1984, file: !1985, line: 449, baseType: !1996, size: 8, offset: 440)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1984, file: !1985, line: 450, baseType: !1996, size: 8, offset: 448)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1984, file: !1985, line: 451, baseType: !1996, size: 8, offset: 456)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1984, file: !1985, line: 452, baseType: !1996, size: 8, offset: 464)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1984, file: !1985, line: 453, baseType: !1996, size: 8, offset: 472)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1984, file: !1985, line: 454, baseType: !1996, size: 8, offset: 480)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1984, file: !1985, line: 455, baseType: !1996, size: 8, offset: 488)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1984, file: !1985, line: 456, baseType: !1996, size: 8, offset: 496)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1984, file: !1985, line: 457, baseType: !1996, size: 8, offset: 504)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1984, file: !1985, line: 458, baseType: !1996, size: 8, offset: 512)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1984, file: !1985, line: 459, baseType: !1996, size: 8, offset: 520)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1984, file: !1985, line: 460, baseType: !1996, size: 8, offset: 528)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1984, file: !1985, line: 461, baseType: !1996, size: 8, offset: 536)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1984, file: !1985, line: 462, baseType: !1996, size: 8, offset: 544)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1984, file: !1985, line: 463, baseType: !1996, size: 8, offset: 552)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1984, file: !1985, line: 464, baseType: !1996, size: 8, offset: 560)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1984, file: !1985, line: 465, baseType: !1996, size: 8, offset: 568)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1984, file: !1985, line: 466, baseType: !1996, size: 8, offset: 576)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1984, file: !1985, line: 467, baseType: !1996, size: 8, offset: 584)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1984, file: !1985, line: 468, baseType: !1996, size: 8, offset: 592)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1984, file: !1985, line: 469, baseType: !1996, size: 8, offset: 600)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1984, file: !1985, line: 470, baseType: !1996, size: 8, offset: 608)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1984, file: !1985, line: 471, baseType: !1996, size: 8, offset: 616)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1984, file: !1985, line: 472, baseType: !1996, size: 8, offset: 624)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1984, file: !1985, line: 473, baseType: !1996, size: 8, offset: 632)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1984, file: !1985, line: 474, baseType: !1996, size: 8, offset: 640)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1984, file: !1985, line: 475, baseType: !1996, size: 8, offset: 648)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1984, file: !1985, line: 476, baseType: !1996, size: 8, offset: 656)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1984, file: !1985, line: 477, baseType: !1996, size: 8, offset: 664)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1984, file: !1985, line: 478, baseType: !1996, size: 8, offset: 672)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1984, file: !1985, line: 479, baseType: !1996, size: 8, offset: 680)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1984, file: !1985, line: 480, baseType: !1996, size: 8, offset: 688)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1984, file: !1985, line: 481, baseType: !1996, size: 8, offset: 696)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1984, file: !1985, line: 482, baseType: !1996, size: 8, offset: 704)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1984, file: !1985, line: 483, baseType: !1996, size: 8, offset: 712)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1984, file: !1985, line: 484, baseType: !1996, size: 8, offset: 720)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1984, file: !1985, line: 485, baseType: !1996, size: 8, offset: 728)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1984, file: !1985, line: 486, baseType: !1996, size: 8, offset: 736)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1984, file: !1985, line: 487, baseType: !1996, size: 8, offset: 744)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1984, file: !1985, line: 488, baseType: !1996, size: 8, offset: 752)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1984, file: !1985, line: 489, baseType: !1996, size: 8, offset: 760)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1984, file: !1985, line: 490, baseType: !1996, size: 8, offset: 768)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1984, file: !1985, line: 491, baseType: !1996, size: 8, offset: 776)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1984, file: !1985, line: 492, baseType: !1996, size: 8, offset: 784)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1984, file: !1985, line: 493, baseType: !1996, size: 8, offset: 792)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1984, file: !1985, line: 494, baseType: !1996, size: 8, offset: 800)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1984, file: !1985, line: 495, baseType: !1996, size: 8, offset: 808)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1984, file: !1985, line: 496, baseType: !1996, size: 8, offset: 816)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1984, file: !1985, line: 497, baseType: !1996, size: 8, offset: 824)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1984, file: !1985, line: 498, baseType: !1996, size: 8, offset: 832)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1984, file: !1985, line: 499, baseType: !1996, size: 8, offset: 840)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1984, file: !1985, line: 500, baseType: !1996, size: 8, offset: 848)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1984, file: !1985, line: 501, baseType: !1996, size: 8, offset: 856)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1984, file: !1985, line: 502, baseType: !1996, size: 8, offset: 864)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1984, file: !1985, line: 503, baseType: !1996, size: 8, offset: 872)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1984, file: !1985, line: 504, baseType: !1996, size: 8, offset: 880)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1984, file: !1985, line: 505, baseType: !1996, size: 8, offset: 888)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1984, file: !1985, line: 506, baseType: !1996, size: 8, offset: 896)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1984, file: !1985, line: 507, baseType: !1996, size: 8, offset: 904)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1984, file: !1985, line: 508, baseType: !1996, size: 8, offset: 912)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1984, file: !1985, line: 509, baseType: !1996, size: 8, offset: 920)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1984, file: !1985, line: 510, baseType: !1996, size: 8, offset: 928)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1984, file: !1985, line: 511, baseType: !1996, size: 8, offset: 936)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1984, file: !1985, line: 512, baseType: !1996, size: 8, offset: 944)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1984, file: !1985, line: 513, baseType: !1996, size: 8, offset: 952)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1984, file: !1985, line: 514, baseType: !1996, size: 8, offset: 960)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1984, file: !1985, line: 515, baseType: !1996, size: 8, offset: 968)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1984, file: !1985, line: 516, baseType: !1996, size: 8, offset: 976)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1984, file: !1985, line: 517, baseType: !1996, size: 8, offset: 984)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1984, file: !1985, line: 518, baseType: !1996, size: 8, offset: 992)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1984, file: !1985, line: 519, baseType: !1996, size: 8, offset: 1000)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1984, file: !1985, line: 520, baseType: !1996, size: 8, offset: 1008)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1984, file: !1985, line: 521, baseType: !1996, size: 8, offset: 1016)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1984, file: !1985, line: 522, baseType: !1996, size: 8, offset: 1024)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1984, file: !1985, line: 523, baseType: !1996, size: 8, offset: 1032)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1984, file: !1985, line: 524, baseType: !1996, size: 8, offset: 1040)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1984, file: !1985, line: 525, baseType: !1996, size: 8, offset: 1048)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1984, file: !1985, line: 526, baseType: !1996, size: 8, offset: 1056)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1984, file: !1985, line: 527, baseType: !1996, size: 8, offset: 1064)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1984, file: !1985, line: 528, baseType: !1996, size: 8, offset: 1072)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1984, file: !1985, line: 529, baseType: !1996, size: 8, offset: 1080)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1984, file: !1985, line: 530, baseType: !1996, size: 8, offset: 1088)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1984, file: !1985, line: 531, baseType: !1996, size: 8, offset: 1096)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1984, file: !1985, line: 532, baseType: !1996, size: 8, offset: 1104)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1984, file: !1985, line: 533, baseType: !1996, size: 8, offset: 1112)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1984, file: !1985, line: 534, baseType: !1996, size: 8, offset: 1120)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1984, file: !1985, line: 535, baseType: !1996, size: 8, offset: 1128)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1984, file: !1985, line: 536, baseType: !1996, size: 8, offset: 1136)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1984, file: !1985, line: 537, baseType: !1996, size: 8, offset: 1144)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1984, file: !1985, line: 538, baseType: !1996, size: 8, offset: 1152)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1984, file: !1985, line: 539, baseType: !1996, size: 8, offset: 1160)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1984, file: !1985, line: 540, baseType: !1996, size: 8, offset: 1168)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1984, file: !1985, line: 541, baseType: !1996, size: 8, offset: 1176)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1984, file: !1985, line: 542, baseType: !1996, size: 8, offset: 1184)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1984, file: !1985, line: 543, baseType: !1996, size: 8, offset: 1192)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1984, file: !1985, line: 544, baseType: !1996, size: 8, offset: 1200)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1984, file: !1985, line: 545, baseType: !1996, size: 8, offset: 1208)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1984, file: !1985, line: 546, baseType: !1996, size: 8, offset: 1216)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1984, file: !1985, line: 547, baseType: !1996, size: 8, offset: 1224)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1984, file: !1985, line: 548, baseType: !1996, size: 8, offset: 1232)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1984, file: !1985, line: 549, baseType: !1996, size: 8, offset: 1240)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1984, file: !1985, line: 550, baseType: !1996, size: 8, offset: 1248)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1984, file: !1985, line: 551, baseType: !1996, size: 8, offset: 1256)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1984, file: !1985, line: 552, baseType: !1996, size: 8, offset: 1264)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1984, file: !1985, line: 553, baseType: !1996, size: 8, offset: 1272)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1984, file: !1985, line: 554, baseType: !1996, size: 8, offset: 1280)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1984, file: !1985, line: 555, baseType: !1996, size: 8, offset: 1288)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1984, file: !1985, line: 556, baseType: !1996, size: 8, offset: 1296)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1984, file: !1985, line: 557, baseType: !1996, size: 8, offset: 1304)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1984, file: !1985, line: 558, baseType: !1996, size: 8, offset: 1312)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1984, file: !1985, line: 559, baseType: !1996, size: 8, offset: 1320)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1984, file: !1985, line: 560, baseType: !1996, size: 8, offset: 1328)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1984, file: !1985, line: 561, baseType: !1996, size: 8, offset: 1336)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1984, file: !1985, line: 562, baseType: !1996, size: 8, offset: 1344)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1984, file: !1985, line: 563, baseType: !1996, size: 8, offset: 1352)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1984, file: !1985, line: 564, baseType: !1996, size: 8, offset: 1360)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1984, file: !1985, line: 565, baseType: !1996, size: 8, offset: 1368)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1984, file: !1985, line: 566, baseType: !1996, size: 8, offset: 1376)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1984, file: !1985, line: 567, baseType: !1996, size: 8, offset: 1384)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1984, file: !1985, line: 568, baseType: !1996, size: 8, offset: 1392)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1984, file: !1985, line: 569, baseType: !1996, size: 8, offset: 1400)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1984, file: !1985, line: 570, baseType: !1996, size: 8, offset: 1408)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1984, file: !1985, line: 571, baseType: !1996, size: 8, offset: 1416)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1984, file: !1985, line: 572, baseType: !1996, size: 8, offset: 1424)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1984, file: !1985, line: 573, baseType: !1996, size: 8, offset: 1432)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1984, file: !1985, line: 574, baseType: !1996, size: 8, offset: 1440)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !814, file: !164, line: 3405, baseType: !2152, size: 384)
!2152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !164, line: 3352, size: 384, elements: !2153)
!2153 = !{!2154, !2155}
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2152, file: !164, line: 3353, baseType: !850, size: 192)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2152, file: !164, line: 3356, baseType: !2156, size: 192, offset: 192)
!2156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1985, line: 578, size: 192, elements: !2157)
!2157 = !{!2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168}
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2156, file: !1985, line: 580, baseType: !908, size: 32)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2156, file: !1985, line: 581, baseType: !908, size: 32, offset: 32)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2156, file: !1985, line: 582, baseType: !908, size: 32, offset: 64)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2156, file: !1985, line: 583, baseType: !908, size: 32, offset: 96)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2156, file: !1985, line: 584, baseType: !931, size: 8, offset: 128)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2156, file: !1985, line: 585, baseType: !931, size: 8, offset: 136)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2156, file: !1985, line: 586, baseType: !931, size: 8, offset: 144)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2156, file: !1985, line: 587, baseType: !931, size: 8, offset: 152)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2156, file: !1985, line: 588, baseType: !931, size: 8, offset: 160)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2156, file: !1985, line: 589, baseType: !931, size: 8, offset: 168)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2156, file: !1985, line: 590, baseType: !931, size: 8, offset: 176)
!2169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2170, size: 64)
!2170 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !814)
!2171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2172, size: 64)
!2172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_reference", file: !391, line: 165, size: 896, elements: !2173)
!2173 = !{!2174, !2175, !2176, !2177, !2178, !2186, !2196, !2201}
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2172, file: !391, line: 168, baseType: !1142, size: 64)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !2172, file: !391, line: 171, baseType: !811, size: 64, offset: 64)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2172, file: !391, line: 174, baseType: !1095, size: 64, offset: 128)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "is_read", scope: !2172, file: !391, line: 177, baseType: !931, size: 8, offset: 192)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "innermost", scope: !2172, file: !391, line: 180, baseType: !2179, size: 320, offset: 256)
!2179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "innermost_loop_behavior", file: !391, line: 51, size: 320, elements: !2180)
!2180 = !{!2181, !2182, !2183, !2184, !2185}
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "base_address", scope: !2179, file: !391, line: 53, baseType: !811, size: 64)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2179, file: !391, line: 54, baseType: !811, size: 64, offset: 64)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !2179, file: !391, line: 55, baseType: !811, size: 64, offset: 128)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !2179, file: !391, line: 56, baseType: !811, size: 64, offset: 192)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "aligned_to", scope: !2179, file: !391, line: 60, baseType: !811, size: 64, offset: 256)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "indices", scope: !2172, file: !391, line: 183, baseType: !2187, size: 128, offset: 576)
!2187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "indices", file: !391, line: 78, size: 128, elements: !2188)
!2188 = !{!2189, !2190}
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "base_object", scope: !2187, file: !391, line: 81, baseType: !811, size: 64)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "access_fns", scope: !2187, file: !391, line: 84, baseType: !2191, size: 64, offset: 64)
!2191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2192, size: 64)
!2192 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !164, line: 184, baseType: !2193)
!2193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !164, line: 184, size: 128, elements: !2194)
!2194 = !{!2195}
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2193, file: !164, line: 184, baseType: !1693, size: 128)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2172, file: !391, line: 186, baseType: !2197, size: 128, offset: 704)
!2197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dr_alias", file: !391, line: 87, size: 128, elements: !2198)
!2198 = !{!2199, !2200}
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2197, file: !391, line: 91, baseType: !1894, size: 64)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "vops", scope: !2197, file: !391, line: 96, baseType: !1711, size: 64, offset: 64)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "access_matrix", scope: !2172, file: !391, line: 189, baseType: !2202, size: 64, offset: 832)
!2202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2203, size: 64)
!2203 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "access_matrix", file: !391, line: 127, size: 256, elements: !2204)
!2204 = !{!2205, !2211, !2212, !2213}
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2203, file: !391, line: 129, baseType: !2206, size: 64)
!2206 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2207, size: 64)
!2207 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_heap", file: !146, line: 86, baseType: !2208)
!2208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_heap", file: !146, line: 86, size: 128, elements: !2209)
!2209 = !{!2210}
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2208, file: !146, line: 86, baseType: !1377, size: 128)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "nb_induction_vars", scope: !2203, file: !391, line: 130, baseType: !908, size: 32, offset: 64)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "parameters", scope: !2203, file: !391, line: 131, baseType: !2191, size: 64, offset: 128)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "matrix", scope: !2203, file: !391, line: 132, baseType: !2214, size: 64, offset: 192)
!2214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2215, size: 64)
!2215 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_gc", file: !2216, line: 34, baseType: !2217)
!2216 = !DIFile(filename: "./lambda.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_gc", file: !2216, line: 34, size: 128, elements: !2218)
!2218 = !{!2219}
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2217, file: !2216, line: 34, baseType: !2220, size: 128)
!2220 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_base", file: !2216, line: 32, baseType: !2221)
!2221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_base", file: !2216, line: 32, size: 128, elements: !2222)
!2222 = !{!2223, !2224, !2225}
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2221, file: !2216, line: 32, baseType: !7, size: 32)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2221, file: !2216, line: 32, baseType: !7, size: 32, offset: 32)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2221, file: !2216, line: 32, baseType: !2226, size: 64, offset: 64)
!2226 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2227, size: 64, elements: !912)
!2227 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_vector", file: !2216, line: 31, baseType: !2228)
!2228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !908, size: 64)
!2229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2230, size: 64)
!2230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rdg_vertex", file: !391, line: 485, size: 128, elements: !2231)
!2231 = !{!2232, !2233, !2234}
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2230, file: !391, line: 488, baseType: !1142, size: 64)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "has_mem_write", scope: !2230, file: !391, line: 491, baseType: !931, size: 8, offset: 64)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "has_mem_reads", scope: !2230, file: !391, line: 494, baseType: !931, size: 8, offset: 72)
!2235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2236, size: 64)
!2236 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rdg_vertex_info", file: !3, line: 4668, size: 128, elements: !2237)
!2237 = !{!2238, !2239}
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2236, file: !3, line: 4670, baseType: !1142, size: 64)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2236, file: !3, line: 4671, baseType: !908, size: 32, offset: 64)
!2240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2235, size: 64)
!2241 = !DIDerivedType(tag: DW_TAG_typedef, name: "data_reference_p", file: !391, line: 207, baseType: !2171)
!2242 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddr_p", file: !391, line: 331, baseType: !2243)
!2243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2244, size: 64)
!2244 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_dependence_relation", file: !391, line: 282, size: 512, elements: !2245)
!2245 = !{!2246, !2247, !2248, !2249, !2278, !2279, !2285, !2286, !2287, !2288, !2289}
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2244, file: !391, line: 285, baseType: !2171, size: 64)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !2244, file: !391, line: 286, baseType: !2171, size: 64, offset: 64)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "are_dependent", scope: !2244, file: !391, line: 299, baseType: !811, size: 64, offset: 128)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "subscripts", scope: !2244, file: !391, line: 304, baseType: !2250, size: 64, offset: 192)
!2250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2251, size: 64)
!2251 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_heap", file: !391, line: 272, baseType: !2252)
!2252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_heap", file: !391, line: 272, size: 128, elements: !2253)
!2253 = !{!2254}
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2252, file: !391, line: 272, baseType: !2255, size: 128)
!2255 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_base", file: !391, line: 271, baseType: !2256)
!2256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_base", file: !391, line: 271, size: 128, elements: !2257)
!2257 = !{!2258, !2259, !2260}
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2256, file: !391, line: 271, baseType: !7, size: 32)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2256, file: !391, line: 271, baseType: !7, size: 32, offset: 32)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2256, file: !391, line: 271, baseType: !2261, size: 64, offset: 64)
!2261 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2262, size: 64, elements: !912)
!2262 = !DIDerivedType(tag: DW_TAG_typedef, name: "subscript_p", file: !391, line: 270, baseType: !2263)
!2263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2264, size: 64)
!2264 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "subscript", file: !391, line: 252, size: 256, elements: !2265)
!2265 = !{!2266, !2275, !2276, !2277}
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_a", scope: !2264, file: !391, line: 256, baseType: !2267, size: 64)
!2267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2268, size: 64)
!2268 = !DIDerivedType(tag: DW_TAG_typedef, name: "conflict_function", file: !391, line: 243, baseType: !2269)
!2269 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !391, line: 239, size: 192, elements: !2270)
!2270 = !{!2271, !2272}
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !2269, file: !391, line: 241, baseType: !7, size: 32)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "fns", scope: !2269, file: !391, line: 242, baseType: !2273, size: 128, offset: 64)
!2273 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2274, size: 128, elements: !1059)
!2274 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_fn", file: !391, line: 237, baseType: !2191)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_b", scope: !2264, file: !391, line: 257, baseType: !2267, size: 64, offset: 64)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "last_conflict", scope: !2264, file: !391, line: 261, baseType: !811, size: 64, offset: 128)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "distance", scope: !2264, file: !391, line: 267, baseType: !811, size: 64, offset: 192)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2244, file: !391, line: 307, baseType: !2206, size: 64, offset: 256)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "dir_vects", scope: !2244, file: !391, line: 310, baseType: !2280, size: 64, offset: 320)
!2280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2281, size: 64)
!2281 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_heap", file: !2216, line: 33, baseType: !2282)
!2282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_heap", file: !2216, line: 33, size: 128, elements: !2283)
!2283 = !{!2284}
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2282, file: !2216, line: 33, baseType: !2220, size: 128)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "dist_vects", scope: !2244, file: !391, line: 313, baseType: !2280, size: 64, offset: 384)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "inner_loop", scope: !2244, file: !391, line: 317, baseType: !7, size: 32, offset: 448)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "reversed_p", scope: !2244, file: !391, line: 320, baseType: !931, size: 8, offset: 480)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "affine_p", scope: !2244, file: !391, line: 324, baseType: !931, size: 8, offset: 488)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "self_reference_p", scope: !2244, file: !391, line: 328, baseType: !931, size: 8, offset: 496)
!2290 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2291, size: 64)
!2291 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1144)
!2292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2293, size: 64)
!2293 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_heap", file: !391, line: 333, baseType: !2294)
!2294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_heap", file: !391, line: 333, size: 128, elements: !2295)
!2295 = !{!2296}
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2294, file: !391, line: 333, baseType: !2297, size: 128)
!2297 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_base", file: !391, line: 332, baseType: !2298)
!2298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_base", file: !391, line: 332, size: 128, elements: !2299)
!2299 = !{!2300, !2301, !2302}
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2298, file: !391, line: 332, baseType: !7, size: 32)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2298, file: !391, line: 332, baseType: !7, size: 32, offset: 32)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2298, file: !391, line: 332, baseType: !2303, size: 64, offset: 64)
!2303 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2242, size: 64, elements: !912)
!2304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2305, size: 64)
!2305 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_ref_loc_heap", file: !391, line: 376, baseType: !2306)
!2306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_ref_loc_heap", file: !391, line: 376, size: 192, elements: !2307)
!2307 = !{!2308}
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2306, file: !391, line: 376, baseType: !2309, size: 192)
!2309 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_ref_loc_base", file: !391, line: 375, baseType: !2310)
!2310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_ref_loc_base", file: !391, line: 375, size: 192, elements: !2311)
!2311 = !{!2312, !2313, !2314}
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2310, file: !391, line: 375, baseType: !7, size: 32)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2310, file: !391, line: 375, baseType: !7, size: 32, offset: 32)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2310, file: !391, line: 375, baseType: !2315, size: 128, offset: 64)
!2315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2316, size: 128, elements: !912)
!2316 = !DIDerivedType(tag: DW_TAG_typedef, name: "data_ref_loc", file: !391, line: 373, baseType: !2317)
!2317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_ref_loc_d", file: !391, line: 366, size: 128, elements: !2318)
!2318 = !{!2319, !2320}
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !2317, file: !391, line: 369, baseType: !1176, size: 64)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "is_read", scope: !2317, file: !391, line: 372, baseType: !931, size: 8, offset: 64)
!2321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2322, size: 64)
!2322 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_heap", file: !391, line: 209, baseType: !2323)
!2323 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_heap", file: !391, line: 209, size: 128, elements: !2324)
!2324 = !{!2325}
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2323, file: !391, line: 209, baseType: !2326, size: 128)
!2326 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_base", file: !391, line: 208, baseType: !2327)
!2327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_base", file: !391, line: 208, size: 128, elements: !2328)
!2328 = !{!2329, !2330, !2331}
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2327, file: !391, line: 208, baseType: !7, size: 32)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2327, file: !391, line: 208, baseType: !7, size: 32, offset: 32)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2327, file: !391, line: 208, baseType: !2332, size: 64, offset: 64)
!2332 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2241, size: 64, elements: !912)
!2333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2334, size: 64)
!2334 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2335, line: 32, baseType: !2336)
!2335 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2335, line: 32, size: 96, elements: !2337)
!2337 = !{!2338}
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2336, file: !2335, line: 32, baseType: !2339, size: 96)
!2339 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2335, line: 31, baseType: !2340)
!2340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2335, line: 31, size: 96, elements: !2341)
!2341 = !{!2342, !2343, !2344}
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2340, file: !2335, line: 31, baseType: !7, size: 32)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2340, file: !2335, line: 31, baseType: !7, size: 32, offset: 32)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2340, file: !2335, line: 31, baseType: !2345, size: 32, offset: 64)
!2345 = !DICompositeType(tag: DW_TAG_array_type, baseType: !908, size: 32, elements: !912)
!2346 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2347, size: 64)
!2347 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2236)
!2348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2349, size: 64)
!2349 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !422, line: 34, baseType: !2350)
!2350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !422, line: 34, size: 128, elements: !2351)
!2351 = !{!2352}
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2350, file: !422, line: 34, baseType: !1680, size: 128)
!2353 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2354, size: 64)
!2354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rdg_edge", file: !391, line: 531, size: 128, elements: !2355)
!2355 = !{!2356, !2357, !2358}
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2354, file: !391, line: 534, baseType: !790, size: 32)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !2354, file: !391, line: 538, baseType: !7, size: 32, offset: 32)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "relation", scope: !2354, file: !391, line: 542, baseType: !2242, size: 64, offset: 64)
!2359 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !466, line: 27, baseType: !1176)
!2360 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !466, line: 30, baseType: !2361)
!2361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2362, size: 64)
!2362 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !164, line: 1893, baseType: !1183)
!2363 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !812, line: 60, baseType: !2290)
!2364 = !{!0}
!2365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "datadep_stats", file: !3, line: 98, size: 608, elements: !2366)
!2366 = !{!2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385}
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "num_dependence_tests", scope: !2365, file: !3, line: 100, baseType: !908, size: 32)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "num_dependence_dependent", scope: !2365, file: !3, line: 101, baseType: !908, size: 32, offset: 32)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "num_dependence_independent", scope: !2365, file: !3, line: 102, baseType: !908, size: 32, offset: 64)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "num_dependence_undetermined", scope: !2365, file: !3, line: 103, baseType: !908, size: 32, offset: 96)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "num_subscript_tests", scope: !2365, file: !3, line: 105, baseType: !908, size: 32, offset: 128)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "num_subscript_undetermined", scope: !2365, file: !3, line: 106, baseType: !908, size: 32, offset: 160)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "num_same_subscript_function", scope: !2365, file: !3, line: 107, baseType: !908, size: 32, offset: 192)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "num_ziv", scope: !2365, file: !3, line: 109, baseType: !908, size: 32, offset: 224)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "num_ziv_independent", scope: !2365, file: !3, line: 110, baseType: !908, size: 32, offset: 256)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "num_ziv_dependent", scope: !2365, file: !3, line: 111, baseType: !908, size: 32, offset: 288)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "num_ziv_unimplemented", scope: !2365, file: !3, line: 112, baseType: !908, size: 32, offset: 320)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "num_siv", scope: !2365, file: !3, line: 114, baseType: !908, size: 32, offset: 352)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "num_siv_independent", scope: !2365, file: !3, line: 115, baseType: !908, size: 32, offset: 384)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "num_siv_dependent", scope: !2365, file: !3, line: 116, baseType: !908, size: 32, offset: 416)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "num_siv_unimplemented", scope: !2365, file: !3, line: 117, baseType: !908, size: 32, offset: 448)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "num_miv", scope: !2365, file: !3, line: 119, baseType: !908, size: 32, offset: 480)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "num_miv_independent", scope: !2365, file: !3, line: 120, baseType: !908, size: 32, offset: 512)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "num_miv_dependent", scope: !2365, file: !3, line: 121, baseType: !908, size: 32, offset: 544)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "num_miv_unimplemented", scope: !2365, file: !3, line: 122, baseType: !908, size: 32, offset: 576)
!2386 = !{i32 7, !"Dwarf Version", i32 4}
!2387 = !{i32 2, !"Debug Info Version", i32 3}
!2388 = !{i32 1, !"wchar_size", i32 4}
!2389 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2390 = distinct !DISubprogram(name: "dump_data_references", scope: !3, file: !3, line: 152, type: !2391, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2391 = !DISubroutineType(types: !2392)
!2392 = !{null, !2393, !2321}
!2393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2394, size: 64)
!2394 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2395, line: 7, baseType: !2396)
!2395 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2396 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2397, line: 49, size: 1728, elements: !2398)
!2397 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2398 = !{!2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2414, !2416, !2417, !2418, !2421, !2423, !2424, !2425, !2428, !2430, !2433, !2436, !2437, !2438, !2439, !2440}
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2396, file: !2397, line: 51, baseType: !908, size: 32)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2396, file: !2397, line: 54, baseType: !1080, size: 64, offset: 64)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2396, file: !2397, line: 55, baseType: !1080, size: 64, offset: 128)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2396, file: !2397, line: 56, baseType: !1080, size: 64, offset: 192)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2396, file: !2397, line: 57, baseType: !1080, size: 64, offset: 256)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2396, file: !2397, line: 58, baseType: !1080, size: 64, offset: 320)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2396, file: !2397, line: 59, baseType: !1080, size: 64, offset: 384)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2396, file: !2397, line: 60, baseType: !1080, size: 64, offset: 448)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2396, file: !2397, line: 61, baseType: !1080, size: 64, offset: 512)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2396, file: !2397, line: 64, baseType: !1080, size: 64, offset: 576)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2396, file: !2397, line: 65, baseType: !1080, size: 64, offset: 640)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2396, file: !2397, line: 66, baseType: !1080, size: 64, offset: 704)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2396, file: !2397, line: 68, baseType: !2412, size: 64, offset: 768)
!2412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2413, size: 64)
!2413 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2397, line: 36, flags: DIFlagFwdDecl)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2396, file: !2397, line: 70, baseType: !2415, size: 64, offset: 832)
!2415 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2396, size: 64)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2396, file: !2397, line: 72, baseType: !908, size: 32, offset: 896)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2396, file: !2397, line: 73, baseType: !908, size: 32, offset: 928)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2396, file: !2397, line: 74, baseType: !2419, size: 64, offset: 960)
!2419 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2420, line: 152, baseType: !867)
!2420 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2396, file: !2397, line: 77, baseType: !2422, size: 16, offset: 1024)
!2422 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2396, file: !2397, line: 78, baseType: !1996, size: 8, offset: 1040)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2396, file: !2397, line: 79, baseType: !910, size: 8, offset: 1048)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2396, file: !2397, line: 81, baseType: !2426, size: 64, offset: 1088)
!2426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2427, size: 64)
!2427 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2397, line: 43, baseType: null)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2396, file: !2397, line: 89, baseType: !2429, size: 64, offset: 1152)
!2429 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2420, line: 153, baseType: !867)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2396, file: !2397, line: 91, baseType: !2431, size: 64, offset: 1216)
!2431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2432, size: 64)
!2432 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2397, line: 37, flags: DIFlagFwdDecl)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2396, file: !2397, line: 92, baseType: !2434, size: 64, offset: 1280)
!2434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2435, size: 64)
!2435 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2397, line: 38, flags: DIFlagFwdDecl)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2396, file: !2397, line: 93, baseType: !2415, size: 64, offset: 1344)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2396, file: !2397, line: 94, baseType: !1095, size: 64, offset: 1408)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2396, file: !2397, line: 95, baseType: !1287, size: 64, offset: 1472)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2396, file: !2397, line: 96, baseType: !908, size: 32, offset: 1536)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2396, file: !2397, line: 98, baseType: !2441, size: 160, offset: 1568)
!2441 = !DICompositeType(tag: DW_TAG_array_type, baseType: !911, size: 160, elements: !2442)
!2442 = !{!2443}
!2443 = !DISubrange(count: 20)
!2444 = !{}
!2445 = !DILocalVariable(name: "file", arg: 1, scope: !2390, file: !3, line: 152, type: !2393)
!2446 = !DILocation(line: 152, column: 29, scope: !2390)
!2447 = !DILocalVariable(name: "datarefs", arg: 2, scope: !2390, file: !3, line: 152, type: !2321)
!2448 = !DILocation(line: 152, column: 65, scope: !2390)
!2449 = !DILocalVariable(name: "i", scope: !2390, file: !3, line: 154, type: !7)
!2450 = !DILocation(line: 154, column: 16, scope: !2390)
!2451 = !DILocalVariable(name: "dr", scope: !2390, file: !3, line: 155, type: !2171)
!2452 = !DILocation(line: 155, column: 26, scope: !2390)
!2453 = !DILocation(line: 157, column: 10, scope: !2454)
!2454 = distinct !DILexicalBlock(scope: !2390, file: !3, line: 157, column: 3)
!2455 = !DILocation(line: 157, column: 8, scope: !2454)
!2456 = !DILocation(line: 157, column: 15, scope: !2457)
!2457 = distinct !DILexicalBlock(scope: !2454, file: !3, line: 157, column: 3)
!2458 = !DILocation(line: 157, column: 3, scope: !2454)
!2459 = !DILocation(line: 158, column: 26, scope: !2457)
!2460 = !DILocation(line: 158, column: 32, scope: !2457)
!2461 = !DILocation(line: 158, column: 5, scope: !2457)
!2462 = !DILocation(line: 157, column: 65, scope: !2457)
!2463 = !DILocation(line: 157, column: 3, scope: !2457)
!2464 = distinct !{!2464, !2458, !2465}
!2465 = !DILocation(line: 158, column: 34, scope: !2454)
!2466 = !DILocation(line: 159, column: 1, scope: !2390)
!2467 = distinct !DISubprogram(name: "VEC_data_reference_p_base_iterate", scope: !391, file: !391, line: 208, type: !2468, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2468 = !DISubroutineType(types: !2469)
!2469 = !{!908, !2470, !7, !2472}
!2470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2471, size: 64)
!2471 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2326)
!2472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2241, size: 64)
!2473 = !DILocalVariable(name: "vec_", arg: 1, scope: !2467, file: !391, line: 208, type: !2470)
!2474 = !DILocation(line: 208, column: 1, scope: !2467)
!2475 = !DILocalVariable(name: "ix_", arg: 2, scope: !2467, file: !391, line: 208, type: !7)
!2476 = !DILocalVariable(name: "ptr", arg: 3, scope: !2467, file: !391, line: 208, type: !2472)
!2477 = !DILocation(line: 208, column: 1, scope: !2478)
!2478 = distinct !DILexicalBlock(scope: !2467, file: !391, line: 208, column: 1)
!2479 = !DILocation(line: 208, column: 1, scope: !2480)
!2480 = distinct !DILexicalBlock(scope: !2478, file: !391, line: 208, column: 1)
!2481 = !DILocation(line: 208, column: 1, scope: !2482)
!2482 = distinct !DILexicalBlock(scope: !2478, file: !391, line: 208, column: 1)
!2483 = distinct !DISubprogram(name: "dump_data_reference", scope: !3, file: !3, line: 201, type: !2484, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2484 = !DISubroutineType(types: !2485)
!2485 = !{null, !2393, !2171}
!2486 = !DILocalVariable(name: "outf", arg: 1, scope: !2483, file: !3, line: 201, type: !2393)
!2487 = !DILocation(line: 201, column: 28, scope: !2483)
!2488 = !DILocalVariable(name: "dr", arg: 2, scope: !2483, file: !3, line: 202, type: !2171)
!2489 = !DILocation(line: 202, column: 31, scope: !2483)
!2490 = !DILocalVariable(name: "i", scope: !2483, file: !3, line: 204, type: !7)
!2491 = !DILocation(line: 204, column: 16, scope: !2483)
!2492 = !DILocation(line: 206, column: 12, scope: !2483)
!2493 = !DILocation(line: 206, column: 3, scope: !2483)
!2494 = !DILocation(line: 207, column: 22, scope: !2483)
!2495 = !DILocation(line: 207, column: 28, scope: !2483)
!2496 = !DILocation(line: 207, column: 3, scope: !2483)
!2497 = !DILocation(line: 208, column: 12, scope: !2483)
!2498 = !DILocation(line: 208, column: 3, scope: !2483)
!2499 = !DILocation(line: 209, column: 23, scope: !2483)
!2500 = !DILocation(line: 209, column: 29, scope: !2483)
!2501 = !DILocation(line: 209, column: 3, scope: !2483)
!2502 = !DILocation(line: 210, column: 12, scope: !2483)
!2503 = !DILocation(line: 210, column: 3, scope: !2483)
!2504 = !DILocation(line: 211, column: 23, scope: !2483)
!2505 = !DILocation(line: 211, column: 29, scope: !2483)
!2506 = !DILocation(line: 211, column: 3, scope: !2483)
!2507 = !DILocation(line: 213, column: 10, scope: !2508)
!2508 = distinct !DILexicalBlock(scope: !2483, file: !3, line: 213, column: 3)
!2509 = !DILocation(line: 213, column: 8, scope: !2508)
!2510 = !DILocation(line: 213, column: 15, scope: !2511)
!2511 = distinct !DILexicalBlock(scope: !2508, file: !3, line: 213, column: 3)
!2512 = !DILocation(line: 213, column: 19, scope: !2511)
!2513 = !DILocation(line: 213, column: 17, scope: !2511)
!2514 = !DILocation(line: 213, column: 3, scope: !2508)
!2515 = !DILocation(line: 215, column: 16, scope: !2516)
!2516 = distinct !DILexicalBlock(scope: !2511, file: !3, line: 214, column: 5)
!2517 = !DILocation(line: 215, column: 49, scope: !2516)
!2518 = !DILocation(line: 215, column: 7, scope: !2516)
!2519 = !DILocation(line: 216, column: 27, scope: !2516)
!2520 = !DILocation(line: 216, column: 33, scope: !2516)
!2521 = !DILocation(line: 216, column: 7, scope: !2516)
!2522 = !DILocation(line: 217, column: 5, scope: !2516)
!2523 = !DILocation(line: 213, column: 44, scope: !2511)
!2524 = !DILocation(line: 213, column: 3, scope: !2511)
!2525 = distinct !{!2525, !2514, !2526}
!2526 = !DILocation(line: 217, column: 5, scope: !2508)
!2527 = !DILocation(line: 218, column: 12, scope: !2483)
!2528 = !DILocation(line: 218, column: 3, scope: !2483)
!2529 = !DILocation(line: 219, column: 1, scope: !2483)
!2530 = distinct !DISubprogram(name: "debug_data_references", scope: !3, file: !3, line: 164, type: !2531, scopeLine: 165, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2531 = !DISubroutineType(types: !2532)
!2532 = !{null, !2321}
!2533 = !DILocalVariable(name: "datarefs", arg: 1, scope: !2530, file: !3, line: 164, type: !2321)
!2534 = !DILocation(line: 164, column: 54, scope: !2530)
!2535 = !DILocation(line: 166, column: 25, scope: !2530)
!2536 = !DILocation(line: 166, column: 33, scope: !2530)
!2537 = !DILocation(line: 166, column: 3, scope: !2530)
!2538 = !DILocation(line: 167, column: 1, scope: !2530)
!2539 = distinct !DISubprogram(name: "debug_data_dependence_relations", scope: !3, file: !3, line: 172, type: !2540, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2540 = !DISubroutineType(types: !2541)
!2541 = !{null, !2292}
!2542 = !DILocalVariable(name: "ddrs", arg: 1, scope: !2539, file: !3, line: 172, type: !2292)
!2543 = !DILocation(line: 172, column: 53, scope: !2539)
!2544 = !DILocation(line: 174, column: 35, scope: !2539)
!2545 = !DILocation(line: 174, column: 43, scope: !2539)
!2546 = !DILocation(line: 174, column: 3, scope: !2539)
!2547 = !DILocation(line: 175, column: 1, scope: !2539)
!2548 = distinct !DISubprogram(name: "dump_data_dependence_relations", scope: !3, file: !3, line: 180, type: !2549, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2549 = !DISubroutineType(types: !2550)
!2550 = !{null, !2393, !2292}
!2551 = !DILocalVariable(name: "file", arg: 1, scope: !2548, file: !3, line: 180, type: !2393)
!2552 = !DILocation(line: 180, column: 39, scope: !2548)
!2553 = !DILocalVariable(name: "ddrs", arg: 2, scope: !2548, file: !3, line: 181, type: !2292)
!2554 = !DILocation(line: 181, column: 24, scope: !2548)
!2555 = !DILocalVariable(name: "i", scope: !2548, file: !3, line: 183, type: !7)
!2556 = !DILocation(line: 183, column: 16, scope: !2548)
!2557 = !DILocalVariable(name: "ddr", scope: !2548, file: !3, line: 184, type: !2243)
!2558 = !DILocation(line: 184, column: 36, scope: !2548)
!2559 = !DILocation(line: 186, column: 10, scope: !2560)
!2560 = distinct !DILexicalBlock(scope: !2548, file: !3, line: 186, column: 3)
!2561 = !DILocation(line: 186, column: 8, scope: !2560)
!2562 = !DILocation(line: 186, column: 15, scope: !2563)
!2563 = distinct !DILexicalBlock(scope: !2560, file: !3, line: 186, column: 3)
!2564 = !DILocation(line: 186, column: 3, scope: !2560)
!2565 = !DILocation(line: 187, column: 36, scope: !2563)
!2566 = !DILocation(line: 187, column: 42, scope: !2563)
!2567 = !DILocation(line: 187, column: 5, scope: !2563)
!2568 = !DILocation(line: 186, column: 51, scope: !2563)
!2569 = !DILocation(line: 186, column: 3, scope: !2563)
!2570 = distinct !{!2570, !2564, !2571}
!2571 = !DILocation(line: 187, column: 45, scope: !2560)
!2572 = !DILocation(line: 188, column: 1, scope: !2548)
!2573 = distinct !DISubprogram(name: "VEC_ddr_p_base_iterate", scope: !391, file: !391, line: 332, type: !2574, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2574 = !DISubroutineType(types: !2575)
!2575 = !{!908, !2576, !7, !2578}
!2576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2577, size: 64)
!2577 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2297)
!2578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2242, size: 64)
!2579 = !DILocalVariable(name: "vec_", arg: 1, scope: !2573, file: !391, line: 332, type: !2576)
!2580 = !DILocation(line: 332, column: 1, scope: !2573)
!2581 = !DILocalVariable(name: "ix_", arg: 2, scope: !2573, file: !391, line: 332, type: !7)
!2582 = !DILocalVariable(name: "ptr", arg: 3, scope: !2573, file: !391, line: 332, type: !2578)
!2583 = !DILocation(line: 332, column: 1, scope: !2584)
!2584 = distinct !DILexicalBlock(scope: !2573, file: !391, line: 332, column: 1)
!2585 = !DILocation(line: 332, column: 1, scope: !2586)
!2586 = distinct !DILexicalBlock(scope: !2584, file: !391, line: 332, column: 1)
!2587 = !DILocation(line: 332, column: 1, scope: !2588)
!2588 = distinct !DILexicalBlock(scope: !2584, file: !391, line: 332, column: 1)
!2589 = distinct !DISubprogram(name: "dump_data_dependence_relation", scope: !3, file: !3, line: 375, type: !2590, scopeLine: 377, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2590 = !DISubroutineType(types: !2591)
!2591 = !{null, !2393, !2243}
!2592 = !DILocalVariable(name: "outf", arg: 1, scope: !2589, file: !3, line: 375, type: !2393)
!2593 = !DILocation(line: 375, column: 38, scope: !2589)
!2594 = !DILocalVariable(name: "ddr", arg: 2, scope: !2589, file: !3, line: 376, type: !2243)
!2595 = !DILocation(line: 376, column: 44, scope: !2589)
!2596 = !DILocalVariable(name: "dra", scope: !2589, file: !3, line: 378, type: !2171)
!2597 = !DILocation(line: 378, column: 26, scope: !2589)
!2598 = !DILocalVariable(name: "drb", scope: !2589, file: !3, line: 378, type: !2171)
!2599 = !DILocation(line: 378, column: 32, scope: !2589)
!2600 = !DILocation(line: 380, column: 12, scope: !2589)
!2601 = !DILocation(line: 380, column: 3, scope: !2589)
!2602 = !DILocation(line: 382, column: 8, scope: !2603)
!2603 = distinct !DILexicalBlock(scope: !2589, file: !3, line: 382, column: 7)
!2604 = !DILocation(line: 382, column: 12, scope: !2603)
!2605 = !DILocation(line: 382, column: 15, scope: !2603)
!2606 = !DILocation(line: 382, column: 42, scope: !2603)
!2607 = !DILocation(line: 382, column: 39, scope: !2603)
!2608 = !DILocation(line: 382, column: 7, scope: !2589)
!2609 = !DILocation(line: 384, column: 11, scope: !2610)
!2610 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 384, column: 11)
!2611 = distinct !DILexicalBlock(scope: !2603, file: !3, line: 383, column: 5)
!2612 = !DILocation(line: 384, column: 11, scope: !2611)
!2613 = !DILocation(line: 386, column: 10, scope: !2614)
!2614 = distinct !DILexicalBlock(scope: !2610, file: !3, line: 385, column: 2)
!2615 = !DILocation(line: 386, column: 8, scope: !2614)
!2616 = !DILocation(line: 387, column: 10, scope: !2614)
!2617 = !DILocation(line: 387, column: 8, scope: !2614)
!2618 = !DILocation(line: 388, column: 8, scope: !2619)
!2619 = distinct !DILexicalBlock(scope: !2614, file: !3, line: 388, column: 8)
!2620 = !DILocation(line: 388, column: 8, scope: !2614)
!2621 = !DILocation(line: 389, column: 27, scope: !2619)
!2622 = !DILocation(line: 389, column: 33, scope: !2619)
!2623 = !DILocation(line: 389, column: 6, scope: !2619)
!2624 = !DILocation(line: 391, column: 15, scope: !2619)
!2625 = !DILocation(line: 391, column: 6, scope: !2619)
!2626 = !DILocation(line: 392, column: 8, scope: !2627)
!2627 = distinct !DILexicalBlock(scope: !2614, file: !3, line: 392, column: 8)
!2628 = !DILocation(line: 392, column: 8, scope: !2614)
!2629 = !DILocation(line: 393, column: 27, scope: !2627)
!2630 = !DILocation(line: 393, column: 33, scope: !2627)
!2631 = !DILocation(line: 393, column: 6, scope: !2627)
!2632 = !DILocation(line: 395, column: 15, scope: !2627)
!2633 = !DILocation(line: 395, column: 6, scope: !2627)
!2634 = !DILocation(line: 396, column: 2, scope: !2614)
!2635 = !DILocation(line: 397, column: 16, scope: !2611)
!2636 = !DILocation(line: 397, column: 7, scope: !2611)
!2637 = !DILocation(line: 398, column: 7, scope: !2611)
!2638 = !DILocation(line: 401, column: 9, scope: !2589)
!2639 = !DILocation(line: 401, column: 7, scope: !2589)
!2640 = !DILocation(line: 402, column: 9, scope: !2589)
!2641 = !DILocation(line: 402, column: 7, scope: !2589)
!2642 = !DILocation(line: 403, column: 24, scope: !2589)
!2643 = !DILocation(line: 403, column: 30, scope: !2589)
!2644 = !DILocation(line: 403, column: 3, scope: !2589)
!2645 = !DILocation(line: 404, column: 24, scope: !2589)
!2646 = !DILocation(line: 404, column: 30, scope: !2589)
!2647 = !DILocation(line: 404, column: 3, scope: !2589)
!2648 = !DILocation(line: 406, column: 7, scope: !2649)
!2649 = distinct !DILexicalBlock(scope: !2589, file: !3, line: 406, column: 7)
!2650 = !DILocation(line: 406, column: 34, scope: !2649)
!2651 = !DILocation(line: 406, column: 31, scope: !2649)
!2652 = !DILocation(line: 406, column: 7, scope: !2589)
!2653 = !DILocation(line: 407, column: 14, scope: !2649)
!2654 = !DILocation(line: 407, column: 5, scope: !2649)
!2655 = !DILocation(line: 409, column: 12, scope: !2656)
!2656 = distinct !DILexicalBlock(scope: !2649, file: !3, line: 409, column: 12)
!2657 = !DILocation(line: 409, column: 36, scope: !2656)
!2658 = !DILocation(line: 409, column: 12, scope: !2649)
!2659 = !DILocalVariable(name: "i", scope: !2660, file: !3, line: 411, type: !7)
!2660 = distinct !DILexicalBlock(scope: !2656, file: !3, line: 410, column: 5)
!2661 = !DILocation(line: 411, column: 20, scope: !2660)
!2662 = !DILocalVariable(name: "loopi", scope: !2660, file: !3, line: 412, type: !1357)
!2663 = !DILocation(line: 412, column: 20, scope: !2660)
!2664 = !DILocation(line: 414, column: 14, scope: !2665)
!2665 = distinct !DILexicalBlock(scope: !2660, file: !3, line: 414, column: 7)
!2666 = !DILocation(line: 414, column: 12, scope: !2665)
!2667 = !DILocation(line: 414, column: 19, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2665, file: !3, line: 414, column: 7)
!2669 = !DILocation(line: 414, column: 23, scope: !2668)
!2670 = !DILocation(line: 414, column: 21, scope: !2668)
!2671 = !DILocation(line: 414, column: 7, scope: !2665)
!2672 = !DILocation(line: 416, column: 13, scope: !2673)
!2673 = distinct !DILexicalBlock(scope: !2668, file: !3, line: 415, column: 2)
!2674 = !DILocation(line: 416, column: 4, scope: !2673)
!2675 = !DILocation(line: 417, column: 24, scope: !2673)
!2676 = !DILocation(line: 417, column: 30, scope: !2673)
!2677 = !DILocation(line: 417, column: 4, scope: !2673)
!2678 = !DILocation(line: 418, column: 13, scope: !2673)
!2679 = !DILocation(line: 418, column: 4, scope: !2673)
!2680 = !DILocation(line: 419, column: 24, scope: !2673)
!2681 = !DILocation(line: 419, column: 30, scope: !2673)
!2682 = !DILocation(line: 419, column: 4, scope: !2673)
!2683 = !DILocation(line: 420, column: 20, scope: !2673)
!2684 = !DILocation(line: 420, column: 26, scope: !2673)
!2685 = !DILocation(line: 420, column: 4, scope: !2673)
!2686 = !DILocation(line: 421, column: 2, scope: !2673)
!2687 = !DILocation(line: 414, column: 50, scope: !2668)
!2688 = !DILocation(line: 414, column: 7, scope: !2668)
!2689 = distinct !{!2689, !2671, !2690}
!2690 = !DILocation(line: 421, column: 2, scope: !2665)
!2691 = !DILocation(line: 423, column: 16, scope: !2660)
!2692 = !DILocation(line: 423, column: 50, scope: !2660)
!2693 = !DILocation(line: 423, column: 7, scope: !2660)
!2694 = !DILocation(line: 424, column: 16, scope: !2660)
!2695 = !DILocation(line: 424, column: 7, scope: !2660)
!2696 = !DILocation(line: 425, column: 14, scope: !2697)
!2697 = distinct !DILexicalBlock(scope: !2660, file: !3, line: 425, column: 7)
!2698 = !DILocation(line: 425, column: 12, scope: !2697)
!2699 = !DILocation(line: 425, column: 19, scope: !2700)
!2700 = distinct !DILexicalBlock(scope: !2697, file: !3, line: 425, column: 7)
!2701 = !DILocation(line: 425, column: 7, scope: !2697)
!2702 = !DILocation(line: 426, column: 11, scope: !2700)
!2703 = !DILocation(line: 426, column: 24, scope: !2700)
!2704 = !DILocation(line: 426, column: 31, scope: !2700)
!2705 = !DILocation(line: 426, column: 2, scope: !2700)
!2706 = !DILocation(line: 425, column: 73, scope: !2700)
!2707 = !DILocation(line: 425, column: 7, scope: !2700)
!2708 = distinct !{!2708, !2701, !2709}
!2709 = !DILocation(line: 426, column: 34, scope: !2697)
!2710 = !DILocation(line: 427, column: 16, scope: !2660)
!2711 = !DILocation(line: 427, column: 7, scope: !2660)
!2712 = !DILocation(line: 429, column: 14, scope: !2713)
!2713 = distinct !DILexicalBlock(scope: !2660, file: !3, line: 429, column: 7)
!2714 = !DILocation(line: 429, column: 12, scope: !2713)
!2715 = !DILocation(line: 429, column: 19, scope: !2716)
!2716 = distinct !DILexicalBlock(scope: !2713, file: !3, line: 429, column: 7)
!2717 = !DILocation(line: 429, column: 23, scope: !2716)
!2718 = !DILocation(line: 429, column: 21, scope: !2716)
!2719 = !DILocation(line: 429, column: 7, scope: !2713)
!2720 = !DILocation(line: 431, column: 13, scope: !2721)
!2721 = distinct !DILexicalBlock(scope: !2716, file: !3, line: 430, column: 2)
!2722 = !DILocation(line: 431, column: 4, scope: !2721)
!2723 = !DILocation(line: 432, column: 25, scope: !2721)
!2724 = !DILocation(line: 432, column: 31, scope: !2721)
!2725 = !DILocation(line: 433, column: 11, scope: !2721)
!2726 = !DILocation(line: 432, column: 4, scope: !2721)
!2727 = !DILocation(line: 434, column: 2, scope: !2721)
!2728 = !DILocation(line: 429, column: 50, scope: !2716)
!2729 = !DILocation(line: 429, column: 7, scope: !2716)
!2730 = distinct !{!2730, !2719, !2731}
!2731 = !DILocation(line: 434, column: 2, scope: !2713)
!2732 = !DILocation(line: 436, column: 14, scope: !2733)
!2733 = distinct !DILexicalBlock(scope: !2660, file: !3, line: 436, column: 7)
!2734 = !DILocation(line: 436, column: 12, scope: !2733)
!2735 = !DILocation(line: 436, column: 19, scope: !2736)
!2736 = distinct !DILexicalBlock(scope: !2733, file: !3, line: 436, column: 7)
!2737 = !DILocation(line: 436, column: 23, scope: !2736)
!2738 = !DILocation(line: 436, column: 21, scope: !2736)
!2739 = !DILocation(line: 436, column: 7, scope: !2733)
!2740 = !DILocation(line: 438, column: 13, scope: !2741)
!2741 = distinct !DILexicalBlock(scope: !2736, file: !3, line: 437, column: 2)
!2742 = !DILocation(line: 438, column: 4, scope: !2741)
!2743 = !DILocation(line: 439, column: 28, scope: !2741)
!2744 = !DILocation(line: 439, column: 34, scope: !2741)
!2745 = !DILocation(line: 440, column: 7, scope: !2741)
!2746 = !DILocation(line: 439, column: 4, scope: !2741)
!2747 = !DILocation(line: 441, column: 2, scope: !2741)
!2748 = !DILocation(line: 436, column: 49, scope: !2736)
!2749 = !DILocation(line: 436, column: 7, scope: !2736)
!2750 = distinct !{!2750, !2739, !2751}
!2751 = !DILocation(line: 441, column: 2, scope: !2733)
!2752 = !DILocation(line: 442, column: 5, scope: !2660)
!2753 = !DILocation(line: 444, column: 12, scope: !2589)
!2754 = !DILocation(line: 444, column: 3, scope: !2589)
!2755 = !DILocation(line: 445, column: 1, scope: !2589)
!2756 = distinct !DISubprogram(name: "debug_data_reference", scope: !3, file: !3, line: 193, type: !2757, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2757 = !DISubroutineType(types: !2758)
!2758 = !{null, !2171}
!2759 = !DILocalVariable(name: "dr", arg: 1, scope: !2756, file: !3, line: 193, type: !2171)
!2760 = !DILocation(line: 193, column: 46, scope: !2756)
!2761 = !DILocation(line: 195, column: 24, scope: !2756)
!2762 = !DILocation(line: 195, column: 32, scope: !2756)
!2763 = !DILocation(line: 195, column: 3, scope: !2756)
!2764 = !DILocation(line: 196, column: 1, scope: !2756)
!2765 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !164, file: !164, line: 182, type: !2766, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2766 = !DISubroutineType(types: !2767)
!2767 = !{!7, !2768}
!2768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2769, size: 64)
!2769 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1693)
!2770 = !DILocalVariable(name: "vec_", arg: 1, scope: !2765, file: !164, line: 182, type: !2768)
!2771 = !DILocation(line: 182, column: 1, scope: !2765)
!2772 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !164, file: !164, line: 182, type: !2773, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2773 = !DISubroutineType(types: !2774)
!2774 = !{!811, !2768, !7}
!2775 = !DILocalVariable(name: "vec_", arg: 1, scope: !2772, file: !164, line: 182, type: !2768)
!2776 = !DILocation(line: 182, column: 1, scope: !2772)
!2777 = !DILocalVariable(name: "ix_", arg: 2, scope: !2772, file: !164, line: 182, type: !7)
!2778 = !DILocation(line: 0, scope: !2772)
!2779 = distinct !DISubprogram(name: "dump_subscript", scope: !3, file: !3, line: 263, type: !2780, scopeLine: 264, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2780 = !DISubroutineType(types: !2781)
!2781 = !{null, !2393, !2263}
!2782 = !DILocalVariable(name: "outf", arg: 1, scope: !2779, file: !3, line: 263, type: !2393)
!2783 = !DILocation(line: 263, column: 23, scope: !2779)
!2784 = !DILocalVariable(name: "subscript", arg: 2, scope: !2779, file: !3, line: 263, type: !2263)
!2785 = !DILocation(line: 263, column: 47, scope: !2779)
!2786 = !DILocalVariable(name: "cf", scope: !2779, file: !3, line: 265, type: !2267)
!2787 = !DILocation(line: 265, column: 22, scope: !2779)
!2788 = !DILocation(line: 265, column: 27, scope: !2779)
!2789 = !DILocation(line: 267, column: 12, scope: !2779)
!2790 = !DILocation(line: 267, column: 3, scope: !2779)
!2791 = !DILocation(line: 268, column: 12, scope: !2779)
!2792 = !DILocation(line: 268, column: 3, scope: !2779)
!2793 = !DILocation(line: 269, column: 27, scope: !2779)
!2794 = !DILocation(line: 269, column: 33, scope: !2779)
!2795 = !DILocation(line: 269, column: 3, scope: !2779)
!2796 = !DILocation(line: 270, column: 7, scope: !2797)
!2797 = distinct !DILexicalBlock(scope: !2779, file: !3, line: 270, column: 7)
!2798 = !DILocation(line: 270, column: 7, scope: !2779)
!2799 = !DILocalVariable(name: "last_iteration", scope: !2800, file: !3, line: 272, type: !811)
!2800 = distinct !DILexicalBlock(scope: !2797, file: !3, line: 271, column: 5)
!2801 = !DILocation(line: 272, column: 12, scope: !2800)
!2802 = !DILocation(line: 272, column: 29, scope: !2800)
!2803 = !DILocation(line: 273, column: 16, scope: !2800)
!2804 = !DILocation(line: 273, column: 7, scope: !2800)
!2805 = !DILocation(line: 274, column: 27, scope: !2800)
!2806 = !DILocation(line: 274, column: 33, scope: !2800)
!2807 = !DILocation(line: 274, column: 7, scope: !2800)
!2808 = !DILocation(line: 275, column: 5, scope: !2800)
!2809 = !DILocation(line: 277, column: 8, scope: !2779)
!2810 = !DILocation(line: 277, column: 6, scope: !2779)
!2811 = !DILocation(line: 278, column: 12, scope: !2779)
!2812 = !DILocation(line: 278, column: 3, scope: !2779)
!2813 = !DILocation(line: 279, column: 27, scope: !2779)
!2814 = !DILocation(line: 279, column: 33, scope: !2779)
!2815 = !DILocation(line: 279, column: 3, scope: !2779)
!2816 = !DILocation(line: 280, column: 7, scope: !2817)
!2817 = distinct !DILexicalBlock(scope: !2779, file: !3, line: 280, column: 7)
!2818 = !DILocation(line: 280, column: 7, scope: !2779)
!2819 = !DILocalVariable(name: "last_iteration", scope: !2820, file: !3, line: 282, type: !811)
!2820 = distinct !DILexicalBlock(scope: !2817, file: !3, line: 281, column: 5)
!2821 = !DILocation(line: 282, column: 12, scope: !2820)
!2822 = !DILocation(line: 282, column: 29, scope: !2820)
!2823 = !DILocation(line: 283, column: 16, scope: !2820)
!2824 = !DILocation(line: 283, column: 7, scope: !2820)
!2825 = !DILocation(line: 284, column: 27, scope: !2820)
!2826 = !DILocation(line: 284, column: 33, scope: !2820)
!2827 = !DILocation(line: 284, column: 7, scope: !2820)
!2828 = !DILocation(line: 285, column: 5, scope: !2820)
!2829 = !DILocation(line: 287, column: 12, scope: !2779)
!2830 = !DILocation(line: 287, column: 3, scope: !2779)
!2831 = !DILocation(line: 288, column: 23, scope: !2779)
!2832 = !DILocation(line: 288, column: 29, scope: !2779)
!2833 = !DILocation(line: 288, column: 3, scope: !2779)
!2834 = !DILocation(line: 289, column: 12, scope: !2779)
!2835 = !DILocation(line: 289, column: 3, scope: !2779)
!2836 = !DILocation(line: 290, column: 12, scope: !2779)
!2837 = !DILocation(line: 290, column: 3, scope: !2779)
!2838 = !DILocation(line: 291, column: 1, scope: !2779)
!2839 = distinct !DISubprogram(name: "dump_conflict_function", scope: !3, file: !3, line: 241, type: !2840, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2840 = !DISubroutineType(types: !2841)
!2841 = !{null, !2393, !2267}
!2842 = !DILocalVariable(name: "outf", arg: 1, scope: !2839, file: !3, line: 241, type: !2393)
!2843 = !DILocation(line: 241, column: 31, scope: !2839)
!2844 = !DILocalVariable(name: "cf", arg: 2, scope: !2839, file: !3, line: 241, type: !2267)
!2845 = !DILocation(line: 241, column: 56, scope: !2839)
!2846 = !DILocalVariable(name: "i", scope: !2839, file: !3, line: 243, type: !7)
!2847 = !DILocation(line: 243, column: 12, scope: !2839)
!2848 = !DILocation(line: 245, column: 7, scope: !2849)
!2849 = distinct !DILexicalBlock(scope: !2839, file: !3, line: 245, column: 7)
!2850 = !DILocation(line: 245, column: 11, scope: !2849)
!2851 = !DILocation(line: 245, column: 13, scope: !2849)
!2852 = !DILocation(line: 245, column: 7, scope: !2839)
!2853 = !DILocation(line: 246, column: 14, scope: !2849)
!2854 = !DILocation(line: 246, column: 5, scope: !2849)
!2855 = !DILocation(line: 247, column: 12, scope: !2856)
!2856 = distinct !DILexicalBlock(scope: !2849, file: !3, line: 247, column: 12)
!2857 = !DILocation(line: 247, column: 16, scope: !2856)
!2858 = !DILocation(line: 247, column: 18, scope: !2856)
!2859 = !DILocation(line: 247, column: 12, scope: !2849)
!2860 = !DILocation(line: 248, column: 14, scope: !2856)
!2861 = !DILocation(line: 248, column: 5, scope: !2856)
!2862 = !DILocation(line: 251, column: 14, scope: !2863)
!2863 = distinct !DILexicalBlock(scope: !2864, file: !3, line: 251, column: 7)
!2864 = distinct !DILexicalBlock(scope: !2856, file: !3, line: 250, column: 5)
!2865 = !DILocation(line: 251, column: 12, scope: !2863)
!2866 = !DILocation(line: 251, column: 19, scope: !2867)
!2867 = distinct !DILexicalBlock(scope: !2863, file: !3, line: 251, column: 7)
!2868 = !DILocation(line: 251, column: 23, scope: !2867)
!2869 = !DILocation(line: 251, column: 27, scope: !2867)
!2870 = !DILocation(line: 251, column: 21, scope: !2867)
!2871 = !DILocation(line: 251, column: 7, scope: !2863)
!2872 = !DILocation(line: 253, column: 13, scope: !2873)
!2873 = distinct !DILexicalBlock(scope: !2867, file: !3, line: 252, column: 2)
!2874 = !DILocation(line: 253, column: 4, scope: !2873)
!2875 = !DILocation(line: 254, column: 26, scope: !2873)
!2876 = !DILocation(line: 254, column: 32, scope: !2873)
!2877 = !DILocation(line: 254, column: 36, scope: !2873)
!2878 = !DILocation(line: 254, column: 40, scope: !2873)
!2879 = !DILocation(line: 254, column: 4, scope: !2873)
!2880 = !DILocation(line: 255, column: 13, scope: !2873)
!2881 = !DILocation(line: 255, column: 4, scope: !2873)
!2882 = !DILocation(line: 256, column: 2, scope: !2873)
!2883 = !DILocation(line: 251, column: 31, scope: !2867)
!2884 = !DILocation(line: 251, column: 7, scope: !2867)
!2885 = distinct !{!2885, !2871, !2886}
!2886 = !DILocation(line: 256, column: 2, scope: !2863)
!2887 = !DILocation(line: 258, column: 1, scope: !2839)
!2888 = distinct !DISubprogram(name: "print_direction_vector", scope: !3, file: !3, line: 296, type: !2889, scopeLine: 299, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2889 = !DISubroutineType(types: !2890)
!2890 = !{null, !2393, !2227, !908}
!2891 = !DILocalVariable(name: "outf", arg: 1, scope: !2888, file: !3, line: 296, type: !2393)
!2892 = !DILocation(line: 296, column: 31, scope: !2888)
!2893 = !DILocalVariable(name: "dirv", arg: 2, scope: !2888, file: !3, line: 297, type: !2227)
!2894 = !DILocation(line: 297, column: 18, scope: !2888)
!2895 = !DILocalVariable(name: "length", arg: 3, scope: !2888, file: !3, line: 298, type: !908)
!2896 = !DILocation(line: 298, column: 8, scope: !2888)
!2897 = !DILocalVariable(name: "eq", scope: !2888, file: !3, line: 300, type: !908)
!2898 = !DILocation(line: 300, column: 7, scope: !2888)
!2899 = !DILocation(line: 302, column: 11, scope: !2900)
!2900 = distinct !DILexicalBlock(scope: !2888, file: !3, line: 302, column: 3)
!2901 = !DILocation(line: 302, column: 8, scope: !2900)
!2902 = !DILocation(line: 302, column: 16, scope: !2903)
!2903 = distinct !DILexicalBlock(scope: !2900, file: !3, line: 302, column: 3)
!2904 = !DILocation(line: 302, column: 21, scope: !2903)
!2905 = !DILocation(line: 302, column: 19, scope: !2903)
!2906 = !DILocation(line: 302, column: 3, scope: !2900)
!2907 = !DILocalVariable(name: "dir", scope: !2908, file: !3, line: 304, type: !390)
!2908 = distinct !DILexicalBlock(scope: !2903, file: !3, line: 303, column: 5)
!2909 = !DILocation(line: 304, column: 38, scope: !2908)
!2910 = !DILocation(line: 305, column: 10, scope: !2908)
!2911 = !DILocation(line: 305, column: 15, scope: !2908)
!2912 = !DILocation(line: 307, column: 15, scope: !2908)
!2913 = !DILocation(line: 307, column: 7, scope: !2908)
!2914 = !DILocation(line: 310, column: 13, scope: !2915)
!2915 = distinct !DILexicalBlock(scope: !2908, file: !3, line: 308, column: 2)
!2916 = !DILocation(line: 310, column: 4, scope: !2915)
!2917 = !DILocation(line: 311, column: 4, scope: !2915)
!2918 = !DILocation(line: 313, column: 13, scope: !2915)
!2919 = !DILocation(line: 313, column: 4, scope: !2915)
!2920 = !DILocation(line: 314, column: 4, scope: !2915)
!2921 = !DILocation(line: 316, column: 13, scope: !2915)
!2922 = !DILocation(line: 316, column: 4, scope: !2915)
!2923 = !DILocation(line: 317, column: 4, scope: !2915)
!2924 = !DILocation(line: 319, column: 13, scope: !2915)
!2925 = !DILocation(line: 319, column: 4, scope: !2915)
!2926 = !DILocation(line: 320, column: 4, scope: !2915)
!2927 = !DILocation(line: 322, column: 13, scope: !2915)
!2928 = !DILocation(line: 322, column: 4, scope: !2915)
!2929 = !DILocation(line: 323, column: 4, scope: !2915)
!2930 = !DILocation(line: 325, column: 13, scope: !2915)
!2931 = !DILocation(line: 325, column: 4, scope: !2915)
!2932 = !DILocation(line: 326, column: 4, scope: !2915)
!2933 = !DILocation(line: 328, column: 13, scope: !2915)
!2934 = !DILocation(line: 328, column: 4, scope: !2915)
!2935 = !DILocation(line: 329, column: 4, scope: !2915)
!2936 = !DILocation(line: 331, column: 13, scope: !2915)
!2937 = !DILocation(line: 331, column: 4, scope: !2915)
!2938 = !DILocation(line: 332, column: 4, scope: !2915)
!2939 = !DILocation(line: 334, column: 5, scope: !2908)
!2940 = !DILocation(line: 302, column: 31, scope: !2903)
!2941 = !DILocation(line: 302, column: 3, scope: !2903)
!2942 = distinct !{!2942, !2906, !2943}
!2943 = !DILocation(line: 334, column: 5, scope: !2900)
!2944 = !DILocation(line: 335, column: 12, scope: !2888)
!2945 = !DILocation(line: 335, column: 3, scope: !2888)
!2946 = !DILocation(line: 336, column: 1, scope: !2888)
!2947 = distinct !DISubprogram(name: "print_dir_vectors", scope: !3, file: !3, line: 341, type: !2948, scopeLine: 343, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2948 = !DISubroutineType(types: !2949)
!2949 = !{null, !2393, !2280, !908}
!2950 = !DILocalVariable(name: "outf", arg: 1, scope: !2947, file: !3, line: 341, type: !2393)
!2951 = !DILocation(line: 341, column: 26, scope: !2947)
!2952 = !DILocalVariable(name: "dir_vects", arg: 2, scope: !2947, file: !3, line: 341, type: !2280)
!2953 = !DILocation(line: 341, column: 59, scope: !2947)
!2954 = !DILocalVariable(name: "length", arg: 3, scope: !2947, file: !3, line: 342, type: !908)
!2955 = !DILocation(line: 342, column: 10, scope: !2947)
!2956 = !DILocalVariable(name: "j", scope: !2947, file: !3, line: 344, type: !7)
!2957 = !DILocation(line: 344, column: 12, scope: !2947)
!2958 = !DILocalVariable(name: "v", scope: !2947, file: !3, line: 345, type: !2227)
!2959 = !DILocation(line: 345, column: 17, scope: !2947)
!2960 = !DILocation(line: 347, column: 10, scope: !2961)
!2961 = distinct !DILexicalBlock(scope: !2947, file: !3, line: 347, column: 3)
!2962 = !DILocation(line: 347, column: 8, scope: !2961)
!2963 = !DILocation(line: 347, column: 15, scope: !2964)
!2964 = distinct !DILexicalBlock(scope: !2961, file: !3, line: 347, column: 3)
!2965 = !DILocation(line: 347, column: 3, scope: !2961)
!2966 = !DILocation(line: 348, column: 29, scope: !2964)
!2967 = !DILocation(line: 348, column: 35, scope: !2964)
!2968 = !DILocation(line: 348, column: 38, scope: !2964)
!2969 = !DILocation(line: 348, column: 5, scope: !2964)
!2970 = !DILocation(line: 347, column: 62, scope: !2964)
!2971 = !DILocation(line: 347, column: 3, scope: !2964)
!2972 = distinct !{!2972, !2965, !2973}
!2973 = !DILocation(line: 348, column: 44, scope: !2961)
!2974 = !DILocation(line: 349, column: 1, scope: !2947)
!2975 = distinct !DISubprogram(name: "VEC_lambda_vector_base_iterate", scope: !2216, file: !2216, line: 32, type: !2976, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2976 = !DISubroutineType(types: !2977)
!2977 = !{!908, !2978, !7, !2980}
!2978 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2979, size: 64)
!2979 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2220)
!2980 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2227, size: 64)
!2981 = !DILocalVariable(name: "vec_", arg: 1, scope: !2975, file: !2216, line: 32, type: !2978)
!2982 = !DILocation(line: 32, column: 1, scope: !2975)
!2983 = !DILocalVariable(name: "ix_", arg: 2, scope: !2975, file: !2216, line: 32, type: !7)
!2984 = !DILocalVariable(name: "ptr", arg: 3, scope: !2975, file: !2216, line: 32, type: !2980)
!2985 = !DILocation(line: 32, column: 1, scope: !2986)
!2986 = distinct !DILexicalBlock(scope: !2975, file: !2216, line: 32, column: 1)
!2987 = !DILocation(line: 32, column: 1, scope: !2988)
!2988 = distinct !DILexicalBlock(scope: !2986, file: !2216, line: 32, column: 1)
!2989 = !DILocation(line: 32, column: 1, scope: !2990)
!2990 = distinct !DILexicalBlock(scope: !2986, file: !2216, line: 32, column: 1)
!2991 = distinct !DISubprogram(name: "print_dist_vectors", scope: !3, file: !3, line: 354, type: !2948, scopeLine: 356, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!2992 = !DILocalVariable(name: "outf", arg: 1, scope: !2991, file: !3, line: 354, type: !2393)
!2993 = !DILocation(line: 354, column: 28, scope: !2991)
!2994 = !DILocalVariable(name: "dist_vects", arg: 2, scope: !2991, file: !3, line: 354, type: !2280)
!2995 = !DILocation(line: 354, column: 61, scope: !2991)
!2996 = !DILocalVariable(name: "length", arg: 3, scope: !2991, file: !3, line: 355, type: !908)
!2997 = !DILocation(line: 355, column: 12, scope: !2991)
!2998 = !DILocalVariable(name: "j", scope: !2991, file: !3, line: 357, type: !7)
!2999 = !DILocation(line: 357, column: 12, scope: !2991)
!3000 = !DILocalVariable(name: "v", scope: !2991, file: !3, line: 358, type: !2227)
!3001 = !DILocation(line: 358, column: 17, scope: !2991)
!3002 = !DILocation(line: 360, column: 10, scope: !3003)
!3003 = distinct !DILexicalBlock(scope: !2991, file: !3, line: 360, column: 3)
!3004 = !DILocation(line: 360, column: 8, scope: !3003)
!3005 = !DILocation(line: 360, column: 15, scope: !3006)
!3006 = distinct !DILexicalBlock(scope: !3003, file: !3, line: 360, column: 3)
!3007 = !DILocation(line: 360, column: 3, scope: !3003)
!3008 = !DILocation(line: 361, column: 26, scope: !3006)
!3009 = !DILocation(line: 361, column: 32, scope: !3006)
!3010 = !DILocation(line: 361, column: 35, scope: !3006)
!3011 = !DILocation(line: 361, column: 5, scope: !3006)
!3012 = !DILocation(line: 360, column: 63, scope: !3006)
!3013 = !DILocation(line: 360, column: 3, scope: !3006)
!3014 = distinct !{!3014, !3007, !3015}
!3015 = !DILocation(line: 361, column: 41, scope: !3003)
!3016 = !DILocation(line: 362, column: 1, scope: !2991)
!3017 = distinct !DISubprogram(name: "print_lambda_vector", scope: !2216, file: !2216, line: 414, type: !2889, scopeLine: 415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3018 = !DILocalVariable(name: "outfile", arg: 1, scope: !3017, file: !2216, line: 414, type: !2393)
!3019 = !DILocation(line: 414, column: 29, scope: !3017)
!3020 = !DILocalVariable(name: "vector", arg: 2, scope: !3017, file: !2216, line: 414, type: !2227)
!3021 = !DILocation(line: 414, column: 52, scope: !3017)
!3022 = !DILocalVariable(name: "n", arg: 3, scope: !3017, file: !2216, line: 414, type: !908)
!3023 = !DILocation(line: 414, column: 64, scope: !3017)
!3024 = !DILocalVariable(name: "i", scope: !3017, file: !2216, line: 416, type: !908)
!3025 = !DILocation(line: 416, column: 7, scope: !3017)
!3026 = !DILocation(line: 418, column: 10, scope: !3027)
!3027 = distinct !DILexicalBlock(scope: !3017, file: !2216, line: 418, column: 3)
!3028 = !DILocation(line: 418, column: 8, scope: !3027)
!3029 = !DILocation(line: 418, column: 15, scope: !3030)
!3030 = distinct !DILexicalBlock(scope: !3027, file: !2216, line: 418, column: 3)
!3031 = !DILocation(line: 418, column: 19, scope: !3030)
!3032 = !DILocation(line: 418, column: 17, scope: !3030)
!3033 = !DILocation(line: 418, column: 3, scope: !3027)
!3034 = !DILocation(line: 419, column: 14, scope: !3030)
!3035 = !DILocation(line: 419, column: 31, scope: !3030)
!3036 = !DILocation(line: 419, column: 38, scope: !3030)
!3037 = !DILocation(line: 419, column: 5, scope: !3030)
!3038 = !DILocation(line: 418, column: 23, scope: !3030)
!3039 = !DILocation(line: 418, column: 3, scope: !3030)
!3040 = distinct !{!3040, !3033, !3041}
!3041 = !DILocation(line: 419, column: 40, scope: !3027)
!3042 = !DILocation(line: 420, column: 12, scope: !3017)
!3043 = !DILocation(line: 420, column: 3, scope: !3017)
!3044 = !DILocation(line: 421, column: 1, scope: !3017)
!3045 = distinct !DISubprogram(name: "debug_data_dependence_relation", scope: !3, file: !3, line: 367, type: !3046, scopeLine: 368, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3046 = !DISubroutineType(types: !3047)
!3047 = !{null, !2243}
!3048 = !DILocalVariable(name: "ddr", arg: 1, scope: !3045, file: !3, line: 367, type: !2243)
!3049 = !DILocation(line: 367, column: 66, scope: !3045)
!3050 = !DILocation(line: 369, column: 34, scope: !3045)
!3051 = !DILocation(line: 369, column: 42, scope: !3045)
!3052 = !DILocation(line: 369, column: 3, scope: !3045)
!3053 = !DILocation(line: 370, column: 1, scope: !3045)
!3054 = distinct !DISubprogram(name: "VEC_subscript_p_base_length", scope: !391, file: !391, line: 271, type: !3055, scopeLine: 271, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3055 = !DISubroutineType(types: !3056)
!3056 = !{!7, !3057}
!3057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3058, size: 64)
!3058 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2255)
!3059 = !DILocalVariable(name: "vec_", arg: 1, scope: !3054, file: !391, line: 271, type: !3057)
!3060 = !DILocation(line: 271, column: 1, scope: !3054)
!3061 = distinct !DISubprogram(name: "VEC_subscript_p_base_index", scope: !391, file: !391, line: 271, type: !3062, scopeLine: 271, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3062 = !DISubroutineType(types: !3063)
!3063 = !{!2262, !3057, !7}
!3064 = !DILocalVariable(name: "vec_", arg: 1, scope: !3061, file: !391, line: 271, type: !3057)
!3065 = !DILocation(line: 271, column: 1, scope: !3061)
!3066 = !DILocalVariable(name: "ix_", arg: 2, scope: !3061, file: !391, line: 271, type: !7)
!3067 = !DILocation(line: 0, scope: !3061)
!3068 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !146, file: !146, line: 85, type: !3069, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3069 = !DISubroutineType(types: !3070)
!3070 = !{!908, !3071, !7, !3073}
!3071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3072, size: 64)
!3072 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1377)
!3073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1384, size: 64)
!3074 = !DILocalVariable(name: "vec_", arg: 1, scope: !3068, file: !146, line: 85, type: !3071)
!3075 = !DILocation(line: 85, column: 1, scope: !3068)
!3076 = !DILocalVariable(name: "ix_", arg: 2, scope: !3068, file: !146, line: 85, type: !7)
!3077 = !DILocalVariable(name: "ptr", arg: 3, scope: !3068, file: !146, line: 85, type: !3073)
!3078 = !DILocation(line: 85, column: 1, scope: !3079)
!3079 = distinct !DILexicalBlock(scope: !3068, file: !146, line: 85, column: 1)
!3080 = !DILocation(line: 85, column: 1, scope: !3081)
!3081 = distinct !DILexicalBlock(scope: !3079, file: !146, line: 85, column: 1)
!3082 = !DILocation(line: 85, column: 1, scope: !3083)
!3083 = distinct !DILexicalBlock(scope: !3079, file: !146, line: 85, column: 1)
!3084 = distinct !DISubprogram(name: "VEC_lambda_vector_base_length", scope: !2216, file: !2216, line: 32, type: !3085, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3085 = !DISubroutineType(types: !3086)
!3086 = !{!7, !2978}
!3087 = !DILocalVariable(name: "vec_", arg: 1, scope: !3084, file: !2216, line: 32, type: !2978)
!3088 = !DILocation(line: 32, column: 1, scope: !3084)
!3089 = distinct !DISubprogram(name: "VEC_lambda_vector_base_index", scope: !2216, file: !2216, line: 32, type: !3090, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3090 = !DISubroutineType(types: !3091)
!3091 = !{!2227, !2978, !7}
!3092 = !DILocalVariable(name: "vec_", arg: 1, scope: !3089, file: !2216, line: 32, type: !2978)
!3093 = !DILocation(line: 32, column: 1, scope: !3089)
!3094 = !DILocalVariable(name: "ix_", arg: 2, scope: !3089, file: !2216, line: 32, type: !7)
!3095 = !DILocation(line: 0, scope: !3089)
!3096 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !146, file: !146, line: 85, type: !3097, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3097 = !DISubroutineType(types: !3098)
!3098 = !{!7, !3071}
!3099 = !DILocalVariable(name: "vec_", arg: 1, scope: !3096, file: !146, line: 85, type: !3071)
!3100 = !DILocation(line: 85, column: 1, scope: !3096)
!3101 = distinct !DISubprogram(name: "dump_data_dependence_direction", scope: !3, file: !3, line: 450, type: !3102, scopeLine: 452, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3102 = !DISubroutineType(types: !3103)
!3103 = !{null, !2393, !390}
!3104 = !DILocalVariable(name: "file", arg: 1, scope: !3101, file: !3, line: 450, type: !2393)
!3105 = !DILocation(line: 450, column: 39, scope: !3101)
!3106 = !DILocalVariable(name: "dir", arg: 2, scope: !3101, file: !3, line: 451, type: !390)
!3107 = !DILocation(line: 451, column: 36, scope: !3101)
!3108 = !DILocation(line: 453, column: 11, scope: !3101)
!3109 = !DILocation(line: 453, column: 3, scope: !3101)
!3110 = !DILocation(line: 456, column: 16, scope: !3111)
!3111 = distinct !DILexicalBlock(scope: !3101, file: !3, line: 454, column: 5)
!3112 = !DILocation(line: 456, column: 7, scope: !3111)
!3113 = !DILocation(line: 457, column: 7, scope: !3111)
!3114 = !DILocation(line: 460, column: 16, scope: !3111)
!3115 = !DILocation(line: 460, column: 7, scope: !3111)
!3116 = !DILocation(line: 461, column: 7, scope: !3111)
!3117 = !DILocation(line: 464, column: 16, scope: !3111)
!3118 = !DILocation(line: 464, column: 7, scope: !3111)
!3119 = !DILocation(line: 465, column: 7, scope: !3111)
!3120 = !DILocation(line: 468, column: 16, scope: !3111)
!3121 = !DILocation(line: 468, column: 7, scope: !3111)
!3122 = !DILocation(line: 469, column: 7, scope: !3111)
!3123 = !DILocation(line: 472, column: 16, scope: !3111)
!3124 = !DILocation(line: 472, column: 7, scope: !3111)
!3125 = !DILocation(line: 473, column: 7, scope: !3111)
!3126 = !DILocation(line: 476, column: 16, scope: !3111)
!3127 = !DILocation(line: 476, column: 7, scope: !3111)
!3128 = !DILocation(line: 477, column: 7, scope: !3111)
!3129 = !DILocation(line: 480, column: 16, scope: !3111)
!3130 = !DILocation(line: 480, column: 7, scope: !3111)
!3131 = !DILocation(line: 481, column: 7, scope: !3111)
!3132 = !DILocation(line: 484, column: 7, scope: !3111)
!3133 = !DILocation(line: 486, column: 1, scope: !3101)
!3134 = distinct !DISubprogram(name: "dump_dist_dir_vectors", scope: !3, file: !3, line: 494, type: !2549, scopeLine: 495, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3135 = !DILocalVariable(name: "file", arg: 1, scope: !3134, file: !3, line: 494, type: !2393)
!3136 = !DILocation(line: 494, column: 30, scope: !3134)
!3137 = !DILocalVariable(name: "ddrs", arg: 2, scope: !3134, file: !3, line: 494, type: !2292)
!3138 = !DILocation(line: 494, column: 55, scope: !3134)
!3139 = !DILocalVariable(name: "i", scope: !3134, file: !3, line: 496, type: !7)
!3140 = !DILocation(line: 496, column: 16, scope: !3134)
!3141 = !DILocalVariable(name: "j", scope: !3134, file: !3, line: 496, type: !7)
!3142 = !DILocation(line: 496, column: 19, scope: !3134)
!3143 = !DILocalVariable(name: "ddr", scope: !3134, file: !3, line: 497, type: !2243)
!3144 = !DILocation(line: 497, column: 36, scope: !3134)
!3145 = !DILocalVariable(name: "v", scope: !3134, file: !3, line: 498, type: !2227)
!3146 = !DILocation(line: 498, column: 17, scope: !3134)
!3147 = !DILocation(line: 500, column: 10, scope: !3148)
!3148 = distinct !DILexicalBlock(scope: !3134, file: !3, line: 500, column: 3)
!3149 = !DILocation(line: 500, column: 8, scope: !3148)
!3150 = !DILocation(line: 500, column: 15, scope: !3151)
!3151 = distinct !DILexicalBlock(scope: !3148, file: !3, line: 500, column: 3)
!3152 = !DILocation(line: 500, column: 3, scope: !3148)
!3153 = !DILocation(line: 501, column: 9, scope: !3154)
!3154 = distinct !DILexicalBlock(scope: !3151, file: !3, line: 501, column: 9)
!3155 = !DILocation(line: 501, column: 33, scope: !3154)
!3156 = !DILocation(line: 501, column: 46, scope: !3154)
!3157 = !DILocation(line: 501, column: 49, scope: !3154)
!3158 = !DILocation(line: 501, column: 9, scope: !3151)
!3159 = !DILocation(line: 503, column: 9, scope: !3160)
!3160 = distinct !DILexicalBlock(scope: !3161, file: !3, line: 503, column: 2)
!3161 = distinct !DILexicalBlock(scope: !3154, file: !3, line: 502, column: 7)
!3162 = !DILocation(line: 503, column: 7, scope: !3160)
!3163 = !DILocation(line: 503, column: 14, scope: !3164)
!3164 = distinct !DILexicalBlock(scope: !3160, file: !3, line: 503, column: 2)
!3165 = !DILocation(line: 503, column: 2, scope: !3160)
!3166 = !DILocation(line: 505, column: 15, scope: !3167)
!3167 = distinct !DILexicalBlock(scope: !3164, file: !3, line: 504, column: 4)
!3168 = !DILocation(line: 505, column: 6, scope: !3167)
!3169 = !DILocation(line: 506, column: 27, scope: !3167)
!3170 = !DILocation(line: 506, column: 33, scope: !3167)
!3171 = !DILocation(line: 506, column: 36, scope: !3167)
!3172 = !DILocation(line: 506, column: 6, scope: !3167)
!3173 = !DILocation(line: 507, column: 15, scope: !3167)
!3174 = !DILocation(line: 507, column: 6, scope: !3167)
!3175 = !DILocation(line: 508, column: 4, scope: !3167)
!3176 = !DILocation(line: 503, column: 72, scope: !3164)
!3177 = !DILocation(line: 503, column: 2, scope: !3164)
!3178 = distinct !{!3178, !3165, !3179}
!3179 = !DILocation(line: 508, column: 4, scope: !3160)
!3180 = !DILocation(line: 510, column: 9, scope: !3181)
!3181 = distinct !DILexicalBlock(scope: !3161, file: !3, line: 510, column: 2)
!3182 = !DILocation(line: 510, column: 7, scope: !3181)
!3183 = !DILocation(line: 510, column: 14, scope: !3184)
!3184 = distinct !DILexicalBlock(scope: !3181, file: !3, line: 510, column: 2)
!3185 = !DILocation(line: 510, column: 2, scope: !3181)
!3186 = !DILocation(line: 512, column: 15, scope: !3187)
!3187 = distinct !DILexicalBlock(scope: !3184, file: !3, line: 511, column: 4)
!3188 = !DILocation(line: 512, column: 6, scope: !3187)
!3189 = !DILocation(line: 513, column: 30, scope: !3187)
!3190 = !DILocation(line: 513, column: 36, scope: !3187)
!3191 = !DILocation(line: 513, column: 39, scope: !3187)
!3192 = !DILocation(line: 513, column: 6, scope: !3187)
!3193 = !DILocation(line: 514, column: 15, scope: !3187)
!3194 = !DILocation(line: 514, column: 6, scope: !3187)
!3195 = !DILocation(line: 515, column: 4, scope: !3187)
!3196 = !DILocation(line: 510, column: 71, scope: !3184)
!3197 = !DILocation(line: 510, column: 2, scope: !3184)
!3198 = distinct !{!3198, !3185, !3199}
!3199 = !DILocation(line: 515, column: 4, scope: !3181)
!3200 = !DILocation(line: 516, column: 7, scope: !3161)
!3201 = !DILocation(line: 500, column: 51, scope: !3151)
!3202 = !DILocation(line: 500, column: 3, scope: !3151)
!3203 = distinct !{!3203, !3152, !3204}
!3204 = !DILocation(line: 516, column: 7, scope: !3148)
!3205 = !DILocation(line: 518, column: 12, scope: !3134)
!3206 = !DILocation(line: 518, column: 3, scope: !3134)
!3207 = !DILocation(line: 519, column: 1, scope: !3134)
!3208 = distinct !DISubprogram(name: "dump_ddrs", scope: !3, file: !3, line: 524, type: !2549, scopeLine: 525, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3209 = !DILocalVariable(name: "file", arg: 1, scope: !3208, file: !3, line: 524, type: !2393)
!3210 = !DILocation(line: 524, column: 18, scope: !3208)
!3211 = !DILocalVariable(name: "ddrs", arg: 2, scope: !3208, file: !3, line: 524, type: !2292)
!3212 = !DILocation(line: 524, column: 43, scope: !3208)
!3213 = !DILocalVariable(name: "i", scope: !3208, file: !3, line: 526, type: !7)
!3214 = !DILocation(line: 526, column: 16, scope: !3208)
!3215 = !DILocalVariable(name: "ddr", scope: !3208, file: !3, line: 527, type: !2243)
!3216 = !DILocation(line: 527, column: 36, scope: !3208)
!3217 = !DILocation(line: 529, column: 10, scope: !3218)
!3218 = distinct !DILexicalBlock(scope: !3208, file: !3, line: 529, column: 3)
!3219 = !DILocation(line: 529, column: 8, scope: !3218)
!3220 = !DILocation(line: 529, column: 15, scope: !3221)
!3221 = distinct !DILexicalBlock(scope: !3218, file: !3, line: 529, column: 3)
!3222 = !DILocation(line: 529, column: 3, scope: !3218)
!3223 = !DILocation(line: 530, column: 36, scope: !3221)
!3224 = !DILocation(line: 530, column: 42, scope: !3221)
!3225 = !DILocation(line: 530, column: 5, scope: !3221)
!3226 = !DILocation(line: 529, column: 51, scope: !3221)
!3227 = !DILocation(line: 529, column: 3, scope: !3221)
!3228 = distinct !{!3228, !3222, !3229}
!3229 = !DILocation(line: 530, column: 45, scope: !3218)
!3230 = !DILocation(line: 532, column: 12, scope: !3208)
!3231 = !DILocation(line: 532, column: 3, scope: !3208)
!3232 = !DILocation(line: 533, column: 1, scope: !3208)
!3233 = distinct !DISubprogram(name: "split_constant_offset", scope: !3, file: !3, line: 676, type: !3234, scopeLine: 677, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3234 = !DISubroutineType(types: !3235)
!3235 = !{null, !811, !1176, !1176}
!3236 = !DILocalVariable(name: "exp", arg: 1, scope: !3233, file: !3, line: 676, type: !811)
!3237 = !DILocation(line: 676, column: 29, scope: !3233)
!3238 = !DILocalVariable(name: "var", arg: 2, scope: !3233, file: !3, line: 676, type: !1176)
!3239 = !DILocation(line: 676, column: 40, scope: !3233)
!3240 = !DILocalVariable(name: "off", arg: 3, scope: !3233, file: !3, line: 676, type: !1176)
!3241 = !DILocation(line: 676, column: 51, scope: !3233)
!3242 = !DILocalVariable(name: "type", scope: !3233, file: !3, line: 678, type: !811)
!3243 = !DILocation(line: 678, column: 8, scope: !3233)
!3244 = !DILocation(line: 678, column: 15, scope: !3233)
!3245 = !DILocalVariable(name: "otype", scope: !3233, file: !3, line: 678, type: !811)
!3246 = !DILocation(line: 678, column: 32, scope: !3233)
!3247 = !DILocalVariable(name: "op0", scope: !3233, file: !3, line: 678, type: !811)
!3248 = !DILocation(line: 678, column: 39, scope: !3233)
!3249 = !DILocalVariable(name: "op1", scope: !3233, file: !3, line: 678, type: !811)
!3250 = !DILocation(line: 678, column: 44, scope: !3233)
!3251 = !DILocalVariable(name: "e", scope: !3233, file: !3, line: 678, type: !811)
!3252 = !DILocation(line: 678, column: 49, scope: !3233)
!3253 = !DILocalVariable(name: "o", scope: !3233, file: !3, line: 678, type: !811)
!3254 = !DILocation(line: 678, column: 52, scope: !3233)
!3255 = !DILocalVariable(name: "code", scope: !3233, file: !3, line: 679, type: !196)
!3256 = !DILocation(line: 679, column: 18, scope: !3233)
!3257 = !DILocation(line: 681, column: 10, scope: !3233)
!3258 = !DILocation(line: 681, column: 4, scope: !3233)
!3259 = !DILocation(line: 681, column: 8, scope: !3233)
!3260 = !DILocation(line: 682, column: 10, scope: !3233)
!3261 = !DILocation(line: 682, column: 4, scope: !3233)
!3262 = !DILocation(line: 682, column: 8, scope: !3233)
!3263 = !DILocation(line: 683, column: 3, scope: !3233)
!3264 = !DILocation(line: 685, column: 40, scope: !3265)
!3265 = distinct !DILexicalBlock(scope: !3233, file: !3, line: 685, column: 7)
!3266 = !DILocation(line: 685, column: 7, scope: !3265)
!3267 = !DILocation(line: 685, column: 7, scope: !3233)
!3268 = !DILocation(line: 686, column: 5, scope: !3265)
!3269 = !DILocation(line: 688, column: 11, scope: !3233)
!3270 = !DILocation(line: 688, column: 9, scope: !3233)
!3271 = !DILocation(line: 689, column: 10, scope: !3233)
!3272 = !DILocation(line: 689, column: 8, scope: !3233)
!3273 = !DILocation(line: 690, column: 26, scope: !3233)
!3274 = !DILocation(line: 690, column: 3, scope: !3233)
!3275 = !DILocation(line: 691, column: 32, scope: !3276)
!3276 = distinct !DILexicalBlock(scope: !3233, file: !3, line: 691, column: 7)
!3277 = !DILocation(line: 691, column: 39, scope: !3276)
!3278 = !DILocation(line: 691, column: 44, scope: !3276)
!3279 = !DILocation(line: 691, column: 50, scope: !3276)
!3280 = !DILocation(line: 691, column: 7, scope: !3276)
!3281 = !DILocation(line: 691, column: 7, scope: !3233)
!3282 = !DILocation(line: 693, column: 14, scope: !3283)
!3283 = distinct !DILexicalBlock(scope: !3276, file: !3, line: 692, column: 5)
!3284 = !DILocation(line: 693, column: 8, scope: !3283)
!3285 = !DILocation(line: 693, column: 12, scope: !3283)
!3286 = !DILocation(line: 694, column: 14, scope: !3283)
!3287 = !DILocation(line: 694, column: 8, scope: !3283)
!3288 = !DILocation(line: 694, column: 12, scope: !3283)
!3289 = !DILocation(line: 695, column: 5, scope: !3283)
!3290 = !DILocation(line: 696, column: 1, scope: !3233)
!3291 = distinct !DISubprogram(name: "automatically_generated_chrec_p", scope: !3292, file: !3292, line: 37, type: !3293, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3292 = !DIFile(filename: "./tree-chrec.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3293 = !DISubroutineType(types: !3294)
!3294 = !{!931, !3295}
!3295 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !812, line: 59, baseType: !2169)
!3296 = !DILocalVariable(name: "chrec", arg: 1, scope: !3291, file: !3292, line: 37, type: !3295)
!3297 = !DILocation(line: 37, column: 45, scope: !3291)
!3298 = !DILocation(line: 39, column: 11, scope: !3291)
!3299 = !DILocation(line: 39, column: 20, scope: !3291)
!3300 = !DILocation(line: 39, column: 17, scope: !3291)
!3301 = !DILocation(line: 40, column: 4, scope: !3291)
!3302 = !DILocation(line: 40, column: 7, scope: !3291)
!3303 = !DILocation(line: 40, column: 16, scope: !3291)
!3304 = !DILocation(line: 40, column: 13, scope: !3291)
!3305 = !DILocation(line: 39, column: 10, scope: !3291)
!3306 = !DILocation(line: 39, column: 3, scope: !3291)
!3307 = distinct !DISubprogram(name: "split_constant_offset_1", scope: !3, file: !3, line: 542, type: !3308, scopeLine: 544, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3308 = !DISubroutineType(types: !3309)
!3309 = !{!931, !811, !811, !196, !811, !1176, !1176}
!3310 = !DILocalVariable(name: "type", arg: 1, scope: !3307, file: !3, line: 542, type: !811)
!3311 = !DILocation(line: 542, column: 31, scope: !3307)
!3312 = !DILocalVariable(name: "op0", arg: 2, scope: !3307, file: !3, line: 542, type: !811)
!3313 = !DILocation(line: 542, column: 42, scope: !3307)
!3314 = !DILocalVariable(name: "code", arg: 3, scope: !3307, file: !3, line: 542, type: !196)
!3315 = !DILocation(line: 542, column: 62, scope: !3307)
!3316 = !DILocalVariable(name: "op1", arg: 4, scope: !3307, file: !3, line: 542, type: !811)
!3317 = !DILocation(line: 542, column: 73, scope: !3307)
!3318 = !DILocalVariable(name: "var", arg: 5, scope: !3307, file: !3, line: 543, type: !1176)
!3319 = !DILocation(line: 543, column: 11, scope: !3307)
!3320 = !DILocalVariable(name: "off", arg: 6, scope: !3307, file: !3, line: 543, type: !1176)
!3321 = !DILocation(line: 543, column: 22, scope: !3307)
!3322 = !DILocalVariable(name: "var0", scope: !3307, file: !3, line: 545, type: !811)
!3323 = !DILocation(line: 545, column: 8, scope: !3307)
!3324 = !DILocalVariable(name: "var1", scope: !3307, file: !3, line: 545, type: !811)
!3325 = !DILocation(line: 545, column: 14, scope: !3307)
!3326 = !DILocalVariable(name: "off0", scope: !3307, file: !3, line: 546, type: !811)
!3327 = !DILocation(line: 546, column: 8, scope: !3307)
!3328 = !DILocalVariable(name: "off1", scope: !3307, file: !3, line: 546, type: !811)
!3329 = !DILocation(line: 546, column: 14, scope: !3307)
!3330 = !DILocalVariable(name: "ocode", scope: !3307, file: !3, line: 547, type: !196)
!3331 = !DILocation(line: 547, column: 18, scope: !3307)
!3332 = !DILocation(line: 547, column: 26, scope: !3307)
!3333 = !DILocation(line: 549, column: 4, scope: !3307)
!3334 = !DILocation(line: 549, column: 8, scope: !3307)
!3335 = !DILocation(line: 550, column: 4, scope: !3307)
!3336 = !DILocation(line: 550, column: 8, scope: !3307)
!3337 = !DILocation(line: 552, column: 11, scope: !3307)
!3338 = !DILocation(line: 552, column: 3, scope: !3307)
!3339 = !DILocation(line: 555, column: 29, scope: !3340)
!3340 = distinct !DILexicalBlock(scope: !3307, file: !3, line: 553, column: 5)
!3341 = !DILocation(line: 555, column: 14, scope: !3340)
!3342 = !DILocation(line: 555, column: 8, scope: !3340)
!3343 = !DILocation(line: 555, column: 12, scope: !3340)
!3344 = !DILocation(line: 556, column: 14, scope: !3340)
!3345 = !DILocation(line: 556, column: 8, scope: !3340)
!3346 = !DILocation(line: 556, column: 12, scope: !3340)
!3347 = !DILocation(line: 557, column: 7, scope: !3340)
!3348 = !DILocation(line: 560, column: 13, scope: !3340)
!3349 = !DILocation(line: 560, column: 7, scope: !3340)
!3350 = !DILocation(line: 564, column: 30, scope: !3340)
!3351 = !DILocation(line: 564, column: 7, scope: !3340)
!3352 = !DILocation(line: 565, column: 30, scope: !3340)
!3353 = !DILocation(line: 565, column: 7, scope: !3340)
!3354 = !DILocation(line: 566, column: 14, scope: !3340)
!3355 = !DILocation(line: 566, column: 8, scope: !3340)
!3356 = !DILocation(line: 566, column: 12, scope: !3340)
!3357 = !DILocation(line: 567, column: 14, scope: !3340)
!3358 = !DILocation(line: 567, column: 8, scope: !3340)
!3359 = !DILocation(line: 567, column: 12, scope: !3340)
!3360 = !DILocation(line: 568, column: 7, scope: !3340)
!3361 = !DILocation(line: 571, column: 11, scope: !3362)
!3362 = distinct !DILexicalBlock(scope: !3340, file: !3, line: 571, column: 11)
!3363 = !DILocation(line: 571, column: 27, scope: !3362)
!3364 = !DILocation(line: 571, column: 11, scope: !3340)
!3365 = !DILocation(line: 572, column: 2, scope: !3362)
!3366 = !DILocation(line: 574, column: 30, scope: !3340)
!3367 = !DILocation(line: 574, column: 7, scope: !3340)
!3368 = !DILocation(line: 575, column: 14, scope: !3340)
!3369 = !DILocation(line: 575, column: 8, scope: !3340)
!3370 = !DILocation(line: 575, column: 12, scope: !3340)
!3371 = !DILocation(line: 576, column: 14, scope: !3340)
!3372 = !DILocation(line: 576, column: 8, scope: !3340)
!3373 = !DILocation(line: 576, column: 12, scope: !3340)
!3374 = !DILocation(line: 577, column: 7, scope: !3340)
!3375 = !DILocalVariable(name: "base", scope: !3376, file: !3, line: 581, type: !811)
!3376 = distinct !DILexicalBlock(scope: !3340, file: !3, line: 580, column: 7)
!3377 = !DILocation(line: 581, column: 7, scope: !3376)
!3378 = !DILocalVariable(name: "poffset", scope: !3376, file: !3, line: 581, type: !811)
!3379 = !DILocation(line: 581, column: 13, scope: !3376)
!3380 = !DILocalVariable(name: "pbitsize", scope: !3376, file: !3, line: 582, type: !867)
!3381 = !DILocation(line: 582, column: 16, scope: !3376)
!3382 = !DILocalVariable(name: "pbitpos", scope: !3376, file: !3, line: 582, type: !867)
!3383 = !DILocation(line: 582, column: 26, scope: !3376)
!3384 = !DILocalVariable(name: "pmode", scope: !3376, file: !3, line: 583, type: !5)
!3385 = !DILocation(line: 583, column: 20, scope: !3376)
!3386 = !DILocalVariable(name: "punsignedp", scope: !3376, file: !3, line: 584, type: !908)
!3387 = !DILocation(line: 584, column: 6, scope: !3376)
!3388 = !DILocalVariable(name: "pvolatilep", scope: !3376, file: !3, line: 584, type: !908)
!3389 = !DILocation(line: 584, column: 18, scope: !3376)
!3390 = !DILocation(line: 586, column: 8, scope: !3376)
!3391 = !DILocation(line: 586, column: 6, scope: !3376)
!3392 = !DILocation(line: 587, column: 28, scope: !3393)
!3393 = distinct !DILexicalBlock(scope: !3376, file: !3, line: 587, column: 6)
!3394 = !DILocation(line: 587, column: 7, scope: !3393)
!3395 = !DILocation(line: 587, column: 6, scope: !3376)
!3396 = !DILocation(line: 588, column: 4, scope: !3393)
!3397 = !DILocation(line: 590, column: 30, scope: !3376)
!3398 = !DILocation(line: 590, column: 9, scope: !3376)
!3399 = !DILocation(line: 590, column: 7, scope: !3376)
!3400 = !DILocation(line: 593, column: 6, scope: !3401)
!3401 = distinct !DILexicalBlock(scope: !3376, file: !3, line: 593, column: 6)
!3402 = !DILocation(line: 593, column: 14, scope: !3401)
!3403 = !DILocation(line: 593, column: 30, scope: !3401)
!3404 = !DILocation(line: 593, column: 6, scope: !3376)
!3405 = !DILocation(line: 594, column: 4, scope: !3401)
!3406 = !DILocation(line: 595, column: 9, scope: !3376)
!3407 = !DILocation(line: 595, column: 7, scope: !3376)
!3408 = !DILocation(line: 596, column: 9, scope: !3376)
!3409 = !DILocation(line: 596, column: 7, scope: !3376)
!3410 = !DILocation(line: 598, column: 6, scope: !3411)
!3411 = distinct !DILexicalBlock(scope: !3376, file: !3, line: 598, column: 6)
!3412 = !DILocation(line: 598, column: 6, scope: !3376)
!3413 = !DILocation(line: 600, column: 29, scope: !3414)
!3414 = distinct !DILexicalBlock(scope: !3411, file: !3, line: 599, column: 4)
!3415 = !DILocation(line: 600, column: 6, scope: !3414)
!3416 = !DILocation(line: 601, column: 13, scope: !3414)
!3417 = !DILocation(line: 601, column: 11, scope: !3414)
!3418 = !DILocation(line: 602, column: 10, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3414, file: !3, line: 602, column: 10)
!3420 = !DILocation(line: 602, column: 10, scope: !3414)
!3421 = !DILocation(line: 603, column: 15, scope: !3419)
!3422 = !DILocation(line: 603, column: 13, scope: !3419)
!3423 = !DILocation(line: 603, column: 8, scope: !3419)
!3424 = !DILocation(line: 606, column: 15, scope: !3419)
!3425 = !DILocation(line: 606, column: 13, scope: !3419)
!3426 = !DILocation(line: 608, column: 4, scope: !3414)
!3427 = !DILocation(line: 610, column: 9, scope: !3376)
!3428 = !DILocation(line: 610, column: 7, scope: !3376)
!3429 = !DILocation(line: 624, column: 2, scope: !3376)
!3430 = !DILocation(line: 624, column: 9, scope: !3376)
!3431 = !DILocation(line: 625, column: 11, scope: !3376)
!3432 = !DILocation(line: 625, column: 9, scope: !3376)
!3433 = distinct !{!3433, !3429, !3431}
!3434 = !DILocation(line: 626, column: 25, scope: !3435)
!3435 = distinct !DILexicalBlock(scope: !3376, file: !3, line: 626, column: 6)
!3436 = !DILocation(line: 626, column: 6, scope: !3435)
!3437 = !DILocation(line: 626, column: 31, scope: !3435)
!3438 = !DILocation(line: 626, column: 6, scope: !3376)
!3439 = !DILocation(line: 627, column: 4, scope: !3435)
!3440 = !DILocation(line: 629, column: 9, scope: !3376)
!3441 = !DILocation(line: 629, column: 3, scope: !3376)
!3442 = !DILocation(line: 629, column: 7, scope: !3376)
!3443 = !DILocation(line: 630, column: 9, scope: !3376)
!3444 = !DILocation(line: 630, column: 3, scope: !3376)
!3445 = !DILocation(line: 630, column: 7, scope: !3376)
!3446 = !DILocation(line: 631, column: 2, scope: !3376)
!3447 = !DILocalVariable(name: "def_stmt", scope: !3448, file: !3, line: 636, type: !1142)
!3448 = distinct !DILexicalBlock(scope: !3340, file: !3, line: 635, column: 7)
!3449 = !DILocation(line: 636, column: 9, scope: !3448)
!3450 = !DILocation(line: 636, column: 20, scope: !3448)
!3451 = !DILocalVariable(name: "subcode", scope: !3448, file: !3, line: 637, type: !196)
!3452 = !DILocation(line: 637, column: 17, scope: !3448)
!3453 = !DILocation(line: 639, column: 19, scope: !3454)
!3454 = distinct !DILexicalBlock(scope: !3448, file: !3, line: 639, column: 6)
!3455 = !DILocation(line: 639, column: 6, scope: !3454)
!3456 = !DILocation(line: 639, column: 29, scope: !3454)
!3457 = !DILocation(line: 639, column: 6, scope: !3448)
!3458 = !DILocation(line: 640, column: 4, scope: !3454)
!3459 = !DILocation(line: 642, column: 29, scope: !3448)
!3460 = !DILocation(line: 642, column: 9, scope: !3448)
!3461 = !DILocation(line: 642, column: 7, scope: !3448)
!3462 = !DILocation(line: 643, column: 36, scope: !3448)
!3463 = !DILocation(line: 643, column: 12, scope: !3448)
!3464 = !DILocation(line: 643, column: 10, scope: !3448)
!3465 = !DILocation(line: 644, column: 29, scope: !3448)
!3466 = !DILocation(line: 644, column: 9, scope: !3448)
!3467 = !DILocation(line: 644, column: 7, scope: !3448)
!3468 = !DILocation(line: 646, column: 34, scope: !3448)
!3469 = !DILocation(line: 646, column: 40, scope: !3448)
!3470 = !DILocation(line: 646, column: 46, scope: !3448)
!3471 = !DILocation(line: 646, column: 55, scope: !3448)
!3472 = !DILocation(line: 646, column: 61, scope: !3448)
!3473 = !DILocation(line: 646, column: 66, scope: !3448)
!3474 = !DILocation(line: 646, column: 9, scope: !3448)
!3475 = !DILocation(line: 646, column: 2, scope: !3448)
!3476 = !DILocalVariable(name: "itype", scope: !3477, file: !3, line: 654, type: !811)
!3477 = distinct !DILexicalBlock(scope: !3340, file: !3, line: 649, column: 7)
!3478 = !DILocation(line: 654, column: 7, scope: !3477)
!3479 = !DILocation(line: 654, column: 15, scope: !3477)
!3480 = !DILocation(line: 655, column: 7, scope: !3481)
!3481 = distinct !DILexicalBlock(scope: !3477, file: !3, line: 655, column: 6)
!3482 = !DILocation(line: 656, column: 7, scope: !3481)
!3483 = !DILocation(line: 656, column: 11, scope: !3481)
!3484 = !DILocation(line: 656, column: 35, scope: !3481)
!3485 = !DILocation(line: 656, column: 38, scope: !3481)
!3486 = !DILocation(line: 657, column: 6, scope: !3481)
!3487 = !DILocation(line: 657, column: 9, scope: !3481)
!3488 = !DILocation(line: 657, column: 34, scope: !3481)
!3489 = !DILocation(line: 657, column: 31, scope: !3481)
!3490 = !DILocation(line: 658, column: 6, scope: !3481)
!3491 = !DILocation(line: 658, column: 10, scope: !3481)
!3492 = !DILocation(line: 658, column: 32, scope: !3481)
!3493 = !DILocation(line: 658, column: 35, scope: !3481)
!3494 = !DILocation(line: 655, column: 6, scope: !3477)
!3495 = !DILocation(line: 660, column: 29, scope: !3496)
!3496 = distinct !DILexicalBlock(scope: !3481, file: !3, line: 659, column: 4)
!3497 = !DILocation(line: 660, column: 41, scope: !3496)
!3498 = !DILocation(line: 660, column: 6, scope: !3496)
!3499 = !DILocation(line: 661, column: 13, scope: !3496)
!3500 = !DILocation(line: 661, column: 7, scope: !3496)
!3501 = !DILocation(line: 661, column: 11, scope: !3496)
!3502 = !DILocation(line: 662, column: 6, scope: !3496)
!3503 = !DILocation(line: 664, column: 2, scope: !3477)
!3504 = !DILocation(line: 668, column: 7, scope: !3340)
!3505 = !DILocation(line: 670, column: 1, scope: !3307)
!3506 = distinct !DISubprogram(name: "dr_analyze_innermost", scope: !3, file: !3, line: 724, type: !3507, scopeLine: 725, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3507 = !DISubroutineType(types: !3508)
!3508 = !{!931, !2171}
!3509 = !DILocalVariable(name: "dr", arg: 1, scope: !3506, file: !3, line: 724, type: !2171)
!3510 = !DILocation(line: 724, column: 46, scope: !3506)
!3511 = !DILocalVariable(name: "stmt", scope: !3506, file: !3, line: 726, type: !1142)
!3512 = !DILocation(line: 726, column: 10, scope: !3506)
!3513 = !DILocation(line: 726, column: 17, scope: !3506)
!3514 = !DILocalVariable(name: "loop", scope: !3506, file: !3, line: 727, type: !1357)
!3515 = !DILocation(line: 727, column: 16, scope: !3506)
!3516 = !DILocation(line: 727, column: 45, scope: !3506)
!3517 = !DILocation(line: 727, column: 23, scope: !3506)
!3518 = !DILocalVariable(name: "ref", scope: !3506, file: !3, line: 728, type: !811)
!3519 = !DILocation(line: 728, column: 8, scope: !3506)
!3520 = !DILocation(line: 728, column: 14, scope: !3506)
!3521 = !DILocalVariable(name: "pbitsize", scope: !3506, file: !3, line: 729, type: !867)
!3522 = !DILocation(line: 729, column: 17, scope: !3506)
!3523 = !DILocalVariable(name: "pbitpos", scope: !3506, file: !3, line: 729, type: !867)
!3524 = !DILocation(line: 729, column: 27, scope: !3506)
!3525 = !DILocalVariable(name: "base", scope: !3506, file: !3, line: 730, type: !811)
!3526 = !DILocation(line: 730, column: 8, scope: !3506)
!3527 = !DILocalVariable(name: "poffset", scope: !3506, file: !3, line: 730, type: !811)
!3528 = !DILocation(line: 730, column: 14, scope: !3506)
!3529 = !DILocalVariable(name: "pmode", scope: !3506, file: !3, line: 731, type: !5)
!3530 = !DILocation(line: 731, column: 21, scope: !3506)
!3531 = !DILocalVariable(name: "punsignedp", scope: !3506, file: !3, line: 732, type: !908)
!3532 = !DILocation(line: 732, column: 7, scope: !3506)
!3533 = !DILocalVariable(name: "pvolatilep", scope: !3506, file: !3, line: 732, type: !908)
!3534 = !DILocation(line: 732, column: 19, scope: !3506)
!3535 = !DILocalVariable(name: "base_iv", scope: !3506, file: !3, line: 733, type: !3536)
!3536 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_iv", file: !1534, line: 651, baseType: !3537)
!3537 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1534, line: 644, size: 192, elements: !3538)
!3538 = !{!3539, !3540, !3541}
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3537, file: !1534, line: 647, baseType: !811, size: 64)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !3537, file: !1534, line: 647, baseType: !811, size: 64, offset: 64)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "no_overflow", scope: !3537, file: !1534, line: 650, baseType: !931, size: 8, offset: 128)
!3542 = !DILocation(line: 733, column: 13, scope: !3506)
!3543 = !DILocalVariable(name: "offset_iv", scope: !3506, file: !3, line: 733, type: !3536)
!3544 = !DILocation(line: 733, column: 22, scope: !3506)
!3545 = !DILocalVariable(name: "init", scope: !3506, file: !3, line: 734, type: !811)
!3546 = !DILocation(line: 734, column: 8, scope: !3506)
!3547 = !DILocalVariable(name: "dinit", scope: !3506, file: !3, line: 734, type: !811)
!3548 = !DILocation(line: 734, column: 14, scope: !3506)
!3549 = !DILocalVariable(name: "step", scope: !3506, file: !3, line: 734, type: !811)
!3550 = !DILocation(line: 734, column: 21, scope: !3506)
!3551 = !DILocalVariable(name: "in_loop", scope: !3506, file: !3, line: 735, type: !931)
!3552 = !DILocation(line: 735, column: 8, scope: !3506)
!3553 = !DILocation(line: 735, column: 19, scope: !3506)
!3554 = !DILocation(line: 735, column: 24, scope: !3506)
!3555 = !DILocation(line: 735, column: 27, scope: !3506)
!3556 = !DILocation(line: 735, column: 33, scope: !3506)
!3557 = !DILocation(line: 0, scope: !3506)
!3558 = !DILocation(line: 735, column: 18, scope: !3506)
!3559 = !DILocation(line: 737, column: 7, scope: !3560)
!3560 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 737, column: 7)
!3561 = !DILocation(line: 737, column: 17, scope: !3560)
!3562 = !DILocation(line: 737, column: 21, scope: !3560)
!3563 = !DILocation(line: 737, column: 32, scope: !3560)
!3564 = !DILocation(line: 737, column: 7, scope: !3506)
!3565 = !DILocation(line: 738, column: 14, scope: !3560)
!3566 = !DILocation(line: 738, column: 5, scope: !3560)
!3567 = !DILocation(line: 740, column: 31, scope: !3506)
!3568 = !DILocation(line: 740, column: 10, scope: !3506)
!3569 = !DILocation(line: 740, column: 8, scope: !3506)
!3570 = !DILocation(line: 742, column: 3, scope: !3506)
!3571 = !DILocation(line: 744, column: 7, scope: !3572)
!3572 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 744, column: 7)
!3573 = !DILocation(line: 744, column: 15, scope: !3572)
!3574 = !DILocation(line: 744, column: 31, scope: !3572)
!3575 = !DILocation(line: 744, column: 7, scope: !3506)
!3576 = !DILocation(line: 746, column: 11, scope: !3577)
!3577 = distinct !DILexicalBlock(scope: !3578, file: !3, line: 746, column: 11)
!3578 = distinct !DILexicalBlock(scope: !3572, file: !3, line: 745, column: 5)
!3579 = !DILocation(line: 746, column: 21, scope: !3577)
!3580 = !DILocation(line: 746, column: 25, scope: !3577)
!3581 = !DILocation(line: 746, column: 36, scope: !3577)
!3582 = !DILocation(line: 746, column: 11, scope: !3578)
!3583 = !DILocation(line: 747, column: 11, scope: !3577)
!3584 = !DILocation(line: 747, column: 2, scope: !3577)
!3585 = !DILocation(line: 748, column: 7, scope: !3578)
!3586 = !DILocation(line: 751, column: 10, scope: !3506)
!3587 = !DILocation(line: 751, column: 8, scope: !3506)
!3588 = !DILocation(line: 752, column: 7, scope: !3589)
!3589 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 752, column: 7)
!3590 = !DILocation(line: 752, column: 7, scope: !3506)
!3591 = !DILocation(line: 754, column: 23, scope: !3592)
!3592 = distinct !DILexicalBlock(scope: !3593, file: !3, line: 754, column: 11)
!3593 = distinct !DILexicalBlock(scope: !3589, file: !3, line: 753, column: 5)
!3594 = !DILocation(line: 754, column: 51, scope: !3592)
!3595 = !DILocation(line: 754, column: 29, scope: !3592)
!3596 = !DILocation(line: 754, column: 58, scope: !3592)
!3597 = !DILocation(line: 754, column: 12, scope: !3592)
!3598 = !DILocation(line: 754, column: 11, scope: !3593)
!3599 = !DILocation(line: 757, column: 15, scope: !3600)
!3600 = distinct !DILexicalBlock(scope: !3601, file: !3, line: 757, column: 15)
!3601 = distinct !DILexicalBlock(scope: !3592, file: !3, line: 756, column: 9)
!3602 = !DILocation(line: 757, column: 25, scope: !3600)
!3603 = !DILocation(line: 757, column: 29, scope: !3600)
!3604 = !DILocation(line: 757, column: 40, scope: !3600)
!3605 = !DILocation(line: 757, column: 15, scope: !3601)
!3606 = !DILocation(line: 758, column: 15, scope: !3600)
!3607 = !DILocation(line: 758, column: 6, scope: !3600)
!3608 = !DILocation(line: 759, column: 11, scope: !3601)
!3609 = !DILocation(line: 761, column: 5, scope: !3593)
!3610 = !DILocation(line: 764, column: 22, scope: !3611)
!3611 = distinct !DILexicalBlock(scope: !3589, file: !3, line: 763, column: 5)
!3612 = !DILocation(line: 764, column: 15, scope: !3611)
!3613 = !DILocation(line: 764, column: 20, scope: !3611)
!3614 = !DILocation(line: 765, column: 22, scope: !3611)
!3615 = !DILocation(line: 765, column: 15, scope: !3611)
!3616 = !DILocation(line: 765, column: 20, scope: !3611)
!3617 = !DILocation(line: 766, column: 15, scope: !3611)
!3618 = !DILocation(line: 766, column: 27, scope: !3611)
!3619 = !DILocation(line: 769, column: 8, scope: !3620)
!3620 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 769, column: 7)
!3621 = !DILocation(line: 769, column: 7, scope: !3506)
!3622 = !DILocation(line: 771, column: 24, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3620, file: !3, line: 770, column: 5)
!3624 = !DILocation(line: 771, column: 17, scope: !3623)
!3625 = !DILocation(line: 771, column: 22, scope: !3623)
!3626 = !DILocation(line: 772, column: 24, scope: !3623)
!3627 = !DILocation(line: 772, column: 17, scope: !3623)
!3628 = !DILocation(line: 772, column: 22, scope: !3623)
!3629 = !DILocation(line: 773, column: 5, scope: !3623)
!3630 = !DILocation(line: 776, column: 12, scope: !3631)
!3631 = distinct !DILexicalBlock(scope: !3632, file: !3, line: 776, column: 11)
!3632 = distinct !DILexicalBlock(scope: !3620, file: !3, line: 775, column: 5)
!3633 = !DILocation(line: 776, column: 11, scope: !3632)
!3634 = !DILocation(line: 778, column: 28, scope: !3635)
!3635 = distinct !DILexicalBlock(scope: !3631, file: !3, line: 777, column: 9)
!3636 = !DILocation(line: 778, column: 21, scope: !3635)
!3637 = !DILocation(line: 778, column: 26, scope: !3635)
!3638 = !DILocation(line: 779, column: 28, scope: !3635)
!3639 = !DILocation(line: 779, column: 21, scope: !3635)
!3640 = !DILocation(line: 779, column: 26, scope: !3635)
!3641 = !DILocation(line: 780, column: 9, scope: !3635)
!3642 = !DILocation(line: 781, column: 28, scope: !3643)
!3643 = distinct !DILexicalBlock(scope: !3631, file: !3, line: 781, column: 16)
!3644 = !DILocation(line: 781, column: 56, scope: !3643)
!3645 = !DILocation(line: 781, column: 34, scope: !3643)
!3646 = !DILocation(line: 782, column: 28, scope: !3643)
!3647 = !DILocation(line: 781, column: 17, scope: !3643)
!3648 = !DILocation(line: 781, column: 16, scope: !3631)
!3649 = !DILocation(line: 784, column: 15, scope: !3650)
!3650 = distinct !DILexicalBlock(scope: !3651, file: !3, line: 784, column: 15)
!3651 = distinct !DILexicalBlock(scope: !3643, file: !3, line: 783, column: 9)
!3652 = !DILocation(line: 784, column: 25, scope: !3650)
!3653 = !DILocation(line: 784, column: 29, scope: !3650)
!3654 = !DILocation(line: 784, column: 40, scope: !3650)
!3655 = !DILocation(line: 784, column: 15, scope: !3651)
!3656 = !DILocation(line: 785, column: 22, scope: !3650)
!3657 = !DILocation(line: 785, column: 13, scope: !3650)
!3658 = !DILocation(line: 787, column: 11, scope: !3651)
!3659 = !DILocation(line: 791, column: 10, scope: !3506)
!3660 = !DILocation(line: 791, column: 8, scope: !3506)
!3661 = !DILocation(line: 792, column: 34, scope: !3506)
!3662 = !DILocation(line: 792, column: 49, scope: !3506)
!3663 = !DILocation(line: 792, column: 3, scope: !3506)
!3664 = !DILocation(line: 793, column: 11, scope: !3506)
!3665 = !DILocation(line: 793, column: 8, scope: !3506)
!3666 = !DILocation(line: 794, column: 36, scope: !3506)
!3667 = !DILocation(line: 794, column: 53, scope: !3506)
!3668 = !DILocation(line: 794, column: 3, scope: !3506)
!3669 = !DILocation(line: 795, column: 11, scope: !3506)
!3670 = !DILocation(line: 795, column: 8, scope: !3506)
!3671 = !DILocation(line: 797, column: 10, scope: !3506)
!3672 = !DILocation(line: 797, column: 8, scope: !3506)
!3673 = !DILocation(line: 801, column: 68, scope: !3506)
!3674 = !DILocation(line: 801, column: 26, scope: !3506)
!3675 = !DILocation(line: 801, column: 3, scope: !3506)
!3676 = !DILocation(line: 801, column: 24, scope: !3506)
!3677 = !DILocation(line: 803, column: 20, scope: !3506)
!3678 = !DILocation(line: 803, column: 3, scope: !3506)
!3679 = !DILocation(line: 803, column: 18, scope: !3506)
!3680 = !DILocation(line: 804, column: 18, scope: !3506)
!3681 = !DILocation(line: 804, column: 3, scope: !3506)
!3682 = !DILocation(line: 804, column: 16, scope: !3506)
!3683 = !DILocation(line: 805, column: 18, scope: !3506)
!3684 = !DILocation(line: 805, column: 3, scope: !3506)
!3685 = !DILocation(line: 805, column: 16, scope: !3506)
!3686 = !DILocation(line: 807, column: 24, scope: !3506)
!3687 = !DILocation(line: 807, column: 3, scope: !3506)
!3688 = !DILocation(line: 807, column: 22, scope: !3506)
!3689 = !DILocation(line: 809, column: 7, scope: !3690)
!3690 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 809, column: 7)
!3691 = !DILocation(line: 809, column: 17, scope: !3690)
!3692 = !DILocation(line: 809, column: 21, scope: !3690)
!3693 = !DILocation(line: 809, column: 32, scope: !3690)
!3694 = !DILocation(line: 809, column: 7, scope: !3506)
!3695 = !DILocation(line: 810, column: 14, scope: !3690)
!3696 = !DILocation(line: 810, column: 5, scope: !3690)
!3697 = !DILocation(line: 812, column: 3, scope: !3506)
!3698 = !DILocation(line: 813, column: 1, scope: !3506)
!3699 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !3700, file: !3700, line: 617, type: !3701, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3700 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3701 = !DISubroutineType(types: !3702)
!3702 = !{!1357, !1142}
!3703 = !DILocalVariable(name: "stmt", arg: 1, scope: !3699, file: !3700, line: 617, type: !1142)
!3704 = !DILocation(line: 617, column: 30, scope: !3699)
!3705 = !DILocalVariable(name: "bb", scope: !3699, file: !3700, line: 619, type: !1594)
!3706 = !DILocation(line: 619, column: 15, scope: !3699)
!3707 = !DILocation(line: 619, column: 31, scope: !3699)
!3708 = !DILocation(line: 619, column: 20, scope: !3699)
!3709 = !DILocation(line: 620, column: 8, scope: !3710)
!3710 = distinct !DILexicalBlock(scope: !3699, file: !3700, line: 620, column: 7)
!3711 = !DILocation(line: 620, column: 7, scope: !3699)
!3712 = !DILocation(line: 621, column: 5, scope: !3710)
!3713 = !DILocation(line: 623, column: 10, scope: !3699)
!3714 = !DILocation(line: 623, column: 14, scope: !3699)
!3715 = !DILocation(line: 623, column: 3, scope: !3699)
!3716 = !DILocation(line: 624, column: 1, scope: !3699)
!3717 = distinct !DISubprogram(name: "canonicalize_base_object_address", scope: !3, file: !3, line: 702, type: !3718, scopeLine: 703, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3718 = !DISubroutineType(types: !3719)
!3719 = !{!811, !811}
!3720 = !DILocalVariable(name: "addr", arg: 1, scope: !3717, file: !3, line: 702, type: !811)
!3721 = !DILocation(line: 702, column: 40, scope: !3717)
!3722 = !DILocalVariable(name: "orig", scope: !3717, file: !3, line: 704, type: !811)
!3723 = !DILocation(line: 704, column: 8, scope: !3717)
!3724 = !DILocation(line: 704, column: 15, scope: !3717)
!3725 = !DILocation(line: 706, column: 3, scope: !3717)
!3726 = !DILocation(line: 710, column: 8, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3717, file: !3, line: 710, column: 7)
!3728 = !DILocation(line: 710, column: 7, scope: !3717)
!3729 = !DILocation(line: 711, column: 12, scope: !3727)
!3730 = !DILocation(line: 711, column: 5, scope: !3727)
!3731 = !DILocation(line: 713, column: 7, scope: !3732)
!3732 = distinct !DILexicalBlock(scope: !3717, file: !3, line: 713, column: 7)
!3733 = !DILocation(line: 713, column: 24, scope: !3732)
!3734 = !DILocation(line: 713, column: 7, scope: !3717)
!3735 = !DILocation(line: 714, column: 12, scope: !3732)
!3736 = !DILocation(line: 714, column: 5, scope: !3732)
!3737 = !DILocation(line: 716, column: 10, scope: !3717)
!3738 = !DILocation(line: 716, column: 3, scope: !3717)
!3739 = !DILocation(line: 717, column: 1, scope: !3717)
!3740 = distinct !DISubprogram(name: "free_data_ref", scope: !3, file: !3, line: 901, type: !3741, scopeLine: 902, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3741 = !DISubroutineType(types: !3742)
!3742 = !{null, !2241}
!3743 = !DILocalVariable(name: "dr", arg: 1, scope: !3740, file: !3, line: 901, type: !2241)
!3744 = !DILocation(line: 901, column: 33, scope: !3740)
!3745 = !DILocation(line: 903, column: 3, scope: !3740)
!3746 = !DILocation(line: 904, column: 9, scope: !3740)
!3747 = !DILocation(line: 904, column: 3, scope: !3740)
!3748 = !DILocation(line: 905, column: 1, scope: !3740)
!3749 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !164, file: !164, line: 184, type: !3750, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3750 = !DISubroutineType(types: !3751)
!3751 = !{null, !3752}
!3752 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2191, size: 64)
!3753 = !DILocalVariable(name: "vec_", arg: 1, scope: !3749, file: !164, line: 184, type: !3752)
!3754 = !DILocation(line: 184, column: 1, scope: !3749)
!3755 = !DILocation(line: 184, column: 1, scope: !3756)
!3756 = distinct !DILexicalBlock(scope: !3749, file: !164, line: 184, column: 1)
!3757 = distinct !DISubprogram(name: "create_data_ref", scope: !3, file: !3, line: 913, type: !3758, scopeLine: 914, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3758 = !DISubroutineType(types: !3759)
!3759 = !{!2171, !1357, !811, !1142, !931}
!3760 = !DILocalVariable(name: "nest", arg: 1, scope: !3757, file: !3, line: 913, type: !1357)
!3761 = !DILocation(line: 913, column: 31, scope: !3757)
!3762 = !DILocalVariable(name: "memref", arg: 2, scope: !3757, file: !3, line: 913, type: !811)
!3763 = !DILocation(line: 913, column: 42, scope: !3757)
!3764 = !DILocalVariable(name: "stmt", arg: 3, scope: !3757, file: !3, line: 913, type: !1142)
!3765 = !DILocation(line: 913, column: 57, scope: !3757)
!3766 = !DILocalVariable(name: "is_read", arg: 4, scope: !3757, file: !3, line: 913, type: !931)
!3767 = !DILocation(line: 913, column: 68, scope: !3757)
!3768 = !DILocalVariable(name: "dr", scope: !3757, file: !3, line: 915, type: !2171)
!3769 = !DILocation(line: 915, column: 26, scope: !3757)
!3770 = !DILocation(line: 917, column: 7, scope: !3771)
!3771 = distinct !DILexicalBlock(scope: !3757, file: !3, line: 917, column: 7)
!3772 = !DILocation(line: 917, column: 17, scope: !3771)
!3773 = !DILocation(line: 917, column: 21, scope: !3771)
!3774 = !DILocation(line: 917, column: 32, scope: !3771)
!3775 = !DILocation(line: 917, column: 7, scope: !3757)
!3776 = !DILocation(line: 919, column: 16, scope: !3777)
!3777 = distinct !DILexicalBlock(scope: !3771, file: !3, line: 918, column: 5)
!3778 = !DILocation(line: 919, column: 7, scope: !3777)
!3779 = !DILocation(line: 920, column: 27, scope: !3777)
!3780 = !DILocation(line: 920, column: 38, scope: !3777)
!3781 = !DILocation(line: 920, column: 7, scope: !3777)
!3782 = !DILocation(line: 921, column: 16, scope: !3777)
!3783 = !DILocation(line: 921, column: 7, scope: !3777)
!3784 = !DILocation(line: 922, column: 5, scope: !3777)
!3785 = !DILocation(line: 924, column: 8, scope: !3757)
!3786 = !DILocation(line: 924, column: 6, scope: !3757)
!3787 = !DILocation(line: 925, column: 18, scope: !3757)
!3788 = !DILocation(line: 925, column: 3, scope: !3757)
!3789 = !DILocation(line: 925, column: 16, scope: !3757)
!3790 = !DILocation(line: 926, column: 17, scope: !3757)
!3791 = !DILocation(line: 926, column: 3, scope: !3757)
!3792 = !DILocation(line: 926, column: 15, scope: !3757)
!3793 = !DILocation(line: 927, column: 21, scope: !3757)
!3794 = !DILocation(line: 927, column: 3, scope: !3757)
!3795 = !DILocation(line: 927, column: 19, scope: !3757)
!3796 = !DILocation(line: 929, column: 25, scope: !3757)
!3797 = !DILocation(line: 929, column: 3, scope: !3757)
!3798 = !DILocation(line: 930, column: 23, scope: !3757)
!3799 = !DILocation(line: 930, column: 27, scope: !3757)
!3800 = !DILocation(line: 930, column: 3, scope: !3757)
!3801 = !DILocation(line: 931, column: 21, scope: !3757)
!3802 = !DILocation(line: 931, column: 3, scope: !3757)
!3803 = !DILocation(line: 933, column: 7, scope: !3804)
!3804 = distinct !DILexicalBlock(scope: !3757, file: !3, line: 933, column: 7)
!3805 = !DILocation(line: 933, column: 17, scope: !3804)
!3806 = !DILocation(line: 933, column: 21, scope: !3804)
!3807 = !DILocation(line: 933, column: 32, scope: !3804)
!3808 = !DILocation(line: 933, column: 7, scope: !3757)
!3809 = !DILocation(line: 935, column: 16, scope: !3810)
!3810 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 934, column: 5)
!3811 = !DILocation(line: 935, column: 7, scope: !3810)
!3812 = !DILocation(line: 936, column: 27, scope: !3810)
!3813 = !DILocation(line: 936, column: 38, scope: !3810)
!3814 = !DILocation(line: 936, column: 7, scope: !3810)
!3815 = !DILocation(line: 937, column: 16, scope: !3810)
!3816 = !DILocation(line: 937, column: 7, scope: !3810)
!3817 = !DILocation(line: 938, column: 27, scope: !3810)
!3818 = !DILocation(line: 938, column: 38, scope: !3810)
!3819 = !DILocation(line: 938, column: 7, scope: !3810)
!3820 = !DILocation(line: 939, column: 16, scope: !3810)
!3821 = !DILocation(line: 939, column: 7, scope: !3810)
!3822 = !DILocation(line: 940, column: 27, scope: !3810)
!3823 = !DILocation(line: 940, column: 38, scope: !3810)
!3824 = !DILocation(line: 940, column: 7, scope: !3810)
!3825 = !DILocation(line: 941, column: 16, scope: !3810)
!3826 = !DILocation(line: 941, column: 7, scope: !3810)
!3827 = !DILocation(line: 942, column: 27, scope: !3810)
!3828 = !DILocation(line: 942, column: 38, scope: !3810)
!3829 = !DILocation(line: 942, column: 7, scope: !3810)
!3830 = !DILocation(line: 943, column: 16, scope: !3810)
!3831 = !DILocation(line: 943, column: 7, scope: !3810)
!3832 = !DILocation(line: 944, column: 27, scope: !3810)
!3833 = !DILocation(line: 944, column: 38, scope: !3810)
!3834 = !DILocation(line: 944, column: 7, scope: !3810)
!3835 = !DILocation(line: 945, column: 16, scope: !3810)
!3836 = !DILocation(line: 945, column: 7, scope: !3810)
!3837 = !DILocation(line: 946, column: 27, scope: !3810)
!3838 = !DILocation(line: 946, column: 38, scope: !3810)
!3839 = !DILocation(line: 946, column: 7, scope: !3810)
!3840 = !DILocation(line: 947, column: 16, scope: !3810)
!3841 = !DILocation(line: 947, column: 7, scope: !3810)
!3842 = !DILocation(line: 948, column: 5, scope: !3810)
!3843 = !DILocation(line: 950, column: 10, scope: !3757)
!3844 = !DILocation(line: 950, column: 3, scope: !3757)
!3845 = distinct !DISubprogram(name: "dr_analyze_indices", scope: !3, file: !3, line: 819, type: !3846, scopeLine: 820, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3846 = !DISubroutineType(types: !3847)
!3847 = !{null, !2171, !1357}
!3848 = !DILocalVariable(name: "dr", arg: 1, scope: !3845, file: !3, line: 819, type: !2171)
!3849 = !DILocation(line: 819, column: 44, scope: !3845)
!3850 = !DILocalVariable(name: "nest", arg: 2, scope: !3845, file: !3, line: 819, type: !1357)
!3851 = !DILocation(line: 819, column: 61, scope: !3845)
!3852 = !DILocalVariable(name: "stmt", scope: !3845, file: !3, line: 821, type: !1142)
!3853 = !DILocation(line: 821, column: 10, scope: !3845)
!3854 = !DILocation(line: 821, column: 17, scope: !3845)
!3855 = !DILocalVariable(name: "loop", scope: !3845, file: !3, line: 822, type: !1357)
!3856 = !DILocation(line: 822, column: 16, scope: !3845)
!3857 = !DILocation(line: 822, column: 45, scope: !3845)
!3858 = !DILocation(line: 822, column: 23, scope: !3845)
!3859 = !DILocalVariable(name: "access_fns", scope: !3845, file: !3, line: 823, type: !2191)
!3860 = !DILocation(line: 823, column: 21, scope: !3845)
!3861 = !DILocalVariable(name: "ref", scope: !3845, file: !3, line: 824, type: !811)
!3862 = !DILocation(line: 824, column: 8, scope: !3845)
!3863 = !DILocation(line: 824, column: 28, scope: !3845)
!3864 = !DILocation(line: 824, column: 14, scope: !3845)
!3865 = !DILocalVariable(name: "aref", scope: !3845, file: !3, line: 824, type: !811)
!3866 = !DILocation(line: 824, column: 42, scope: !3845)
!3867 = !DILocation(line: 824, column: 49, scope: !3845)
!3868 = !DILocalVariable(name: "op", scope: !3845, file: !3, line: 824, type: !811)
!3869 = !DILocation(line: 824, column: 54, scope: !3845)
!3870 = !DILocalVariable(name: "base", scope: !3845, file: !3, line: 825, type: !811)
!3871 = !DILocation(line: 825, column: 8, scope: !3845)
!3872 = !DILocalVariable(name: "off", scope: !3845, file: !3, line: 825, type: !811)
!3873 = !DILocation(line: 825, column: 14, scope: !3845)
!3874 = !DILocalVariable(name: "access_fn", scope: !3845, file: !3, line: 825, type: !811)
!3875 = !DILocation(line: 825, column: 19, scope: !3845)
!3876 = !DILocalVariable(name: "before_loop", scope: !3845, file: !3, line: 826, type: !1594)
!3877 = !DILocation(line: 826, column: 15, scope: !3845)
!3878 = !DILocation(line: 828, column: 7, scope: !3879)
!3879 = distinct !DILexicalBlock(scope: !3845, file: !3, line: 828, column: 7)
!3880 = !DILocation(line: 828, column: 7, scope: !3845)
!3881 = !DILocation(line: 829, column: 38, scope: !3879)
!3882 = !DILocation(line: 829, column: 19, scope: !3879)
!3883 = !DILocation(line: 829, column: 17, scope: !3879)
!3884 = !DILocation(line: 829, column: 5, scope: !3879)
!3885 = !DILocation(line: 831, column: 3, scope: !3845)
!3886 = !DILocation(line: 831, column: 31, scope: !3845)
!3887 = !DILocation(line: 831, column: 10, scope: !3845)
!3888 = !DILocation(line: 833, column: 11, scope: !3889)
!3889 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 833, column: 11)
!3890 = distinct !DILexicalBlock(scope: !3845, file: !3, line: 832, column: 5)
!3891 = !DILocation(line: 833, column: 28, scope: !3889)
!3892 = !DILocation(line: 833, column: 11, scope: !3890)
!3893 = !DILocation(line: 835, column: 9, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3889, file: !3, line: 834, column: 2)
!3895 = !DILocation(line: 835, column: 7, scope: !3894)
!3896 = !DILocation(line: 836, column: 8, scope: !3897)
!3897 = distinct !DILexicalBlock(scope: !3894, file: !3, line: 836, column: 8)
!3898 = !DILocation(line: 836, column: 8, scope: !3894)
!3899 = !DILocation(line: 838, column: 48, scope: !3900)
!3900 = distinct !DILexicalBlock(scope: !3897, file: !3, line: 837, column: 6)
!3901 = !DILocation(line: 838, column: 54, scope: !3900)
!3902 = !DILocation(line: 838, column: 22, scope: !3900)
!3903 = !DILocation(line: 838, column: 20, scope: !3900)
!3904 = !DILocation(line: 839, column: 38, scope: !3900)
!3905 = !DILocation(line: 839, column: 51, scope: !3900)
!3906 = !DILocation(line: 839, column: 57, scope: !3900)
!3907 = !DILocation(line: 839, column: 20, scope: !3900)
!3908 = !DILocation(line: 839, column: 18, scope: !3900)
!3909 = !DILocation(line: 840, column: 8, scope: !3900)
!3910 = !DILocation(line: 841, column: 6, scope: !3900)
!3911 = !DILocation(line: 843, column: 44, scope: !3894)
!3912 = !DILocation(line: 843, column: 29, scope: !3894)
!3913 = !DILocation(line: 843, column: 4, scope: !3894)
!3914 = !DILocation(line: 843, column: 27, scope: !3894)
!3915 = !DILocation(line: 844, column: 2, scope: !3894)
!3916 = !DILocation(line: 846, column: 14, scope: !3890)
!3917 = !DILocation(line: 846, column: 12, scope: !3890)
!3918 = distinct !{!3918, !3885, !3919}
!3919 = !DILocation(line: 847, column: 5, scope: !3845)
!3920 = !DILocation(line: 849, column: 7, scope: !3921)
!3921 = distinct !DILexicalBlock(scope: !3845, file: !3, line: 849, column: 7)
!3922 = !DILocation(line: 849, column: 12, scope: !3921)
!3923 = !DILocation(line: 849, column: 15, scope: !3921)
!3924 = !DILocation(line: 849, column: 7, scope: !3845)
!3925 = !DILocation(line: 851, column: 12, scope: !3926)
!3926 = distinct !DILexicalBlock(scope: !3921, file: !3, line: 850, column: 5)
!3927 = !DILocation(line: 851, column: 10, scope: !3926)
!3928 = !DILocation(line: 852, column: 45, scope: !3926)
!3929 = !DILocation(line: 852, column: 51, scope: !3926)
!3930 = !DILocation(line: 852, column: 19, scope: !3926)
!3931 = !DILocation(line: 852, column: 17, scope: !3926)
!3932 = !DILocation(line: 853, column: 37, scope: !3926)
!3933 = !DILocation(line: 853, column: 50, scope: !3926)
!3934 = !DILocation(line: 853, column: 56, scope: !3926)
!3935 = !DILocation(line: 853, column: 19, scope: !3926)
!3936 = !DILocation(line: 853, column: 17, scope: !3926)
!3937 = !DILocation(line: 854, column: 33, scope: !3926)
!3938 = !DILocation(line: 854, column: 14, scope: !3926)
!3939 = !DILocation(line: 854, column: 12, scope: !3926)
!3940 = !DILocation(line: 855, column: 30, scope: !3926)
!3941 = !DILocation(line: 855, column: 7, scope: !3926)
!3942 = !DILocation(line: 856, column: 52, scope: !3926)
!3943 = !DILocation(line: 857, column: 4, scope: !3926)
!3944 = !DILocation(line: 856, column: 19, scope: !3926)
!3945 = !DILocation(line: 856, column: 17, scope: !3926)
!3946 = !DILocation(line: 859, column: 32, scope: !3926)
!3947 = !DILocation(line: 859, column: 7, scope: !3926)
!3948 = !DILocation(line: 859, column: 30, scope: !3926)
!3949 = !DILocation(line: 860, column: 7, scope: !3926)
!3950 = !DILocation(line: 861, column: 5, scope: !3926)
!3951 = !DILocation(line: 863, column: 25, scope: !3845)
!3952 = !DILocation(line: 863, column: 3, scope: !3845)
!3953 = !DILocation(line: 863, column: 23, scope: !3845)
!3954 = !DILocation(line: 864, column: 24, scope: !3845)
!3955 = !DILocation(line: 864, column: 3, scope: !3845)
!3956 = !DILocation(line: 864, column: 22, scope: !3845)
!3957 = !DILocation(line: 865, column: 1, scope: !3845)
!3958 = distinct !DISubprogram(name: "dr_analyze_alias", scope: !3, file: !3, line: 870, type: !2757, scopeLine: 871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3959 = !DILocalVariable(name: "dr", arg: 1, scope: !3958, file: !3, line: 870, type: !2171)
!3960 = !DILocation(line: 870, column: 42, scope: !3958)
!3961 = !DILocalVariable(name: "ref", scope: !3958, file: !3, line: 872, type: !811)
!3962 = !DILocation(line: 872, column: 8, scope: !3958)
!3963 = !DILocation(line: 872, column: 14, scope: !3958)
!3964 = !DILocalVariable(name: "base", scope: !3958, file: !3, line: 873, type: !811)
!3965 = !DILocation(line: 873, column: 8, scope: !3958)
!3966 = !DILocation(line: 873, column: 33, scope: !3958)
!3967 = !DILocation(line: 873, column: 15, scope: !3958)
!3968 = !DILocalVariable(name: "addr", scope: !3958, file: !3, line: 873, type: !811)
!3969 = !DILocation(line: 873, column: 39, scope: !3958)
!3970 = !DILocation(line: 875, column: 7, scope: !3971)
!3971 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 875, column: 7)
!3972 = !DILocation(line: 875, column: 7, scope: !3958)
!3973 = !DILocation(line: 877, column: 14, scope: !3974)
!3974 = distinct !DILexicalBlock(scope: !3971, file: !3, line: 876, column: 5)
!3975 = !DILocation(line: 877, column: 12, scope: !3974)
!3976 = !DILocation(line: 878, column: 11, scope: !3977)
!3977 = distinct !DILexicalBlock(scope: !3974, file: !3, line: 878, column: 11)
!3978 = !DILocation(line: 878, column: 28, scope: !3977)
!3979 = !DILocation(line: 878, column: 11, scope: !3974)
!3980 = !DILocation(line: 879, column: 21, scope: !3977)
!3981 = !DILocation(line: 879, column: 2, scope: !3977)
!3982 = !DILocation(line: 879, column: 19, scope: !3977)
!3983 = !DILocation(line: 880, column: 5, scope: !3974)
!3984 = !DILocation(line: 881, column: 1, scope: !3958)
!3985 = distinct !DISubprogram(name: "dr_may_alias_p", scope: !3, file: !3, line: 1289, type: !3986, scopeLine: 1290, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!3986 = !DISubroutineType(types: !3987)
!3987 = !{!931, !3988, !3988}
!3988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3989, size: 64)
!3989 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2172)
!3990 = !DILocalVariable(name: "a", arg: 1, scope: !3985, file: !3, line: 1289, type: !3988)
!3991 = !DILocation(line: 1289, column: 46, scope: !3985)
!3992 = !DILocalVariable(name: "b", arg: 2, scope: !3985, file: !3, line: 1289, type: !3988)
!3993 = !DILocation(line: 1289, column: 78, scope: !3985)
!3994 = !DILocalVariable(name: "addr_a", scope: !3985, file: !3, line: 1291, type: !3295)
!3995 = !DILocation(line: 1291, column: 14, scope: !3985)
!3996 = !DILocation(line: 1291, column: 23, scope: !3985)
!3997 = !DILocalVariable(name: "addr_b", scope: !3985, file: !3, line: 1292, type: !3295)
!3998 = !DILocation(line: 1292, column: 14, scope: !3985)
!3999 = !DILocation(line: 1292, column: 23, scope: !3985)
!4000 = !DILocalVariable(name: "type_a", scope: !3985, file: !3, line: 1293, type: !3295)
!4001 = !DILocation(line: 1293, column: 14, scope: !3985)
!4002 = !DILocalVariable(name: "type_b", scope: !3985, file: !3, line: 1293, type: !3295)
!4003 = !DILocation(line: 1293, column: 22, scope: !3985)
!4004 = !DILocalVariable(name: "decl_a", scope: !3985, file: !3, line: 1294, type: !3295)
!4005 = !DILocation(line: 1294, column: 14, scope: !3985)
!4006 = !DILocalVariable(name: "decl_b", scope: !3985, file: !3, line: 1294, type: !3295)
!4007 = !DILocation(line: 1294, column: 34, scope: !3985)
!4008 = !DILocation(line: 1298, column: 27, scope: !4009)
!4009 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 1298, column: 7)
!4010 = !DILocation(line: 1298, column: 47, scope: !4009)
!4011 = !DILocation(line: 1298, column: 7, scope: !4009)
!4012 = !DILocation(line: 1298, column: 7, scope: !3985)
!4013 = !DILocation(line: 1299, column: 5, scope: !4009)
!4014 = !DILocation(line: 1302, column: 8, scope: !4015)
!4015 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 1302, column: 7)
!4016 = !DILocation(line: 1302, column: 23, scope: !4015)
!4017 = !DILocation(line: 1302, column: 27, scope: !4015)
!4018 = !DILocation(line: 1302, column: 7, scope: !3985)
!4019 = !DILocation(line: 1304, column: 37, scope: !4020)
!4020 = distinct !DILexicalBlock(scope: !4021, file: !3, line: 1304, column: 11)
!4021 = distinct !DILexicalBlock(scope: !4015, file: !3, line: 1303, column: 5)
!4022 = !DILocation(line: 1304, column: 49, scope: !4020)
!4023 = !DILocation(line: 1304, column: 12, scope: !4020)
!4024 = !DILocation(line: 1304, column: 11, scope: !4021)
!4025 = !DILocation(line: 1305, column: 2, scope: !4020)
!4026 = !DILocation(line: 1306, column: 5, scope: !4021)
!4027 = !DILocation(line: 1307, column: 12, scope: !4028)
!4028 = distinct !DILexicalBlock(scope: !4015, file: !3, line: 1307, column: 12)
!4029 = !DILocation(line: 1307, column: 27, scope: !4028)
!4030 = !DILocation(line: 1307, column: 31, scope: !4028)
!4031 = !DILocation(line: 1307, column: 12, scope: !4015)
!4032 = !DILocation(line: 1309, column: 35, scope: !4033)
!4033 = distinct !DILexicalBlock(scope: !4034, file: !3, line: 1309, column: 11)
!4034 = distinct !DILexicalBlock(scope: !4028, file: !3, line: 1308, column: 5)
!4035 = !DILocation(line: 1309, column: 47, scope: !4033)
!4036 = !DILocation(line: 1309, column: 12, scope: !4033)
!4037 = !DILocation(line: 1309, column: 11, scope: !4034)
!4038 = !DILocation(line: 1310, column: 2, scope: !4033)
!4039 = !DILocation(line: 1311, column: 5, scope: !4034)
!4040 = !DILocation(line: 1312, column: 31, scope: !4041)
!4041 = distinct !DILexicalBlock(scope: !4028, file: !3, line: 1312, column: 12)
!4042 = !DILocation(line: 1312, column: 43, scope: !4041)
!4043 = !DILocation(line: 1312, column: 13, scope: !4041)
!4044 = !DILocation(line: 1312, column: 12, scope: !4028)
!4045 = !DILocation(line: 1313, column: 5, scope: !4041)
!4046 = !DILocation(line: 1315, column: 8, scope: !4047)
!4047 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 1315, column: 7)
!4048 = !DILocation(line: 1315, column: 15, scope: !4047)
!4049 = !DILocation(line: 1315, column: 19, scope: !4047)
!4050 = !DILocation(line: 1315, column: 7, scope: !3985)
!4051 = !DILocation(line: 1316, column: 5, scope: !4047)
!4052 = !DILocation(line: 1321, column: 7, scope: !4053)
!4053 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 1321, column: 7)
!4054 = !DILocation(line: 1321, column: 26, scope: !4053)
!4055 = !DILocation(line: 1322, column: 7, scope: !4053)
!4056 = !DILocation(line: 1322, column: 10, scope: !4053)
!4057 = !DILocation(line: 1322, column: 29, scope: !4053)
!4058 = !DILocation(line: 1321, column: 7, scope: !3985)
!4059 = !DILocation(line: 1323, column: 12, scope: !4053)
!4060 = !DILocation(line: 1323, column: 40, scope: !4053)
!4061 = !DILocation(line: 1323, column: 37, scope: !4053)
!4062 = !DILocation(line: 1323, column: 5, scope: !4053)
!4063 = !DILocation(line: 1329, column: 12, scope: !3985)
!4064 = !DILocation(line: 1329, column: 10, scope: !3985)
!4065 = !DILocation(line: 1330, column: 12, scope: !3985)
!4066 = !DILocation(line: 1330, column: 10, scope: !3985)
!4067 = !DILocation(line: 1331, column: 3, scope: !3985)
!4068 = !DILocation(line: 1333, column: 7, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 1333, column: 7)
!4070 = !DILocation(line: 1333, column: 26, scope: !4069)
!4071 = !DILocation(line: 1333, column: 7, scope: !3985)
!4072 = !DILocation(line: 1334, column: 14, scope: !4069)
!4073 = !DILocation(line: 1334, column: 12, scope: !4069)
!4074 = !DILocation(line: 1334, column: 5, scope: !4069)
!4075 = !DILocation(line: 1335, column: 7, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 1335, column: 7)
!4077 = !DILocation(line: 1335, column: 26, scope: !4076)
!4078 = !DILocation(line: 1335, column: 7, scope: !3985)
!4079 = !DILocation(line: 1336, column: 14, scope: !4076)
!4080 = !DILocation(line: 1336, column: 12, scope: !4076)
!4081 = !DILocation(line: 1336, column: 5, scope: !4076)
!4082 = !DILocation(line: 1338, column: 7, scope: !4083)
!4083 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 1338, column: 7)
!4084 = !DILocation(line: 1338, column: 30, scope: !4083)
!4085 = !DILocation(line: 1338, column: 33, scope: !4083)
!4086 = !DILocation(line: 1339, column: 7, scope: !4083)
!4087 = !DILocation(line: 1339, column: 12, scope: !4083)
!4088 = !DILocation(line: 1339, column: 27, scope: !4083)
!4089 = !DILocation(line: 1339, column: 31, scope: !4083)
!4090 = !DILocation(line: 1340, column: 7, scope: !4083)
!4091 = !DILocation(line: 1340, column: 10, scope: !4083)
!4092 = !DILocation(line: 1340, column: 17, scope: !4083)
!4093 = !DILocation(line: 1340, column: 20, scope: !4083)
!4094 = !DILocation(line: 1341, column: 7, scope: !4083)
!4095 = !DILocation(line: 1341, column: 10, scope: !4083)
!4096 = !DILocation(line: 1341, column: 17, scope: !4083)
!4097 = !DILocation(line: 1341, column: 20, scope: !4083)
!4098 = !DILocation(line: 1342, column: 7, scope: !4083)
!4099 = !DILocation(line: 1342, column: 10, scope: !4083)
!4100 = !DILocation(line: 1342, column: 20, scope: !4083)
!4101 = !DILocation(line: 1342, column: 17, scope: !4083)
!4102 = !DILocation(line: 1343, column: 7, scope: !4083)
!4103 = !DILocation(line: 1343, column: 10, scope: !4083)
!4104 = !DILocation(line: 1343, column: 44, scope: !4083)
!4105 = !DILocation(line: 1344, column: 7, scope: !4083)
!4106 = !DILocation(line: 1344, column: 10, scope: !4083)
!4107 = !DILocation(line: 1344, column: 35, scope: !4083)
!4108 = !DILocation(line: 1344, column: 32, scope: !4083)
!4109 = !DILocation(line: 1338, column: 7, scope: !3985)
!4110 = !DILocation(line: 1345, column: 5, scope: !4083)
!4111 = !DILocation(line: 1347, column: 3, scope: !3985)
!4112 = !DILocation(line: 1348, column: 1, scope: !3985)
!4113 = distinct !DISubprogram(name: "disjoint_objects_p", scope: !3, file: !3, line: 1204, type: !4114, scopeLine: 1205, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4114 = !DISubroutineType(types: !4115)
!4115 = !{!931, !811, !811}
!4116 = !DILocalVariable(name: "a", arg: 1, scope: !4113, file: !3, line: 1204, type: !811)
!4117 = !DILocation(line: 1204, column: 26, scope: !4113)
!4118 = !DILocalVariable(name: "b", arg: 2, scope: !4113, file: !3, line: 1204, type: !811)
!4119 = !DILocation(line: 1204, column: 34, scope: !4113)
!4120 = !DILocalVariable(name: "base_a", scope: !4113, file: !3, line: 1206, type: !811)
!4121 = !DILocation(line: 1206, column: 8, scope: !4113)
!4122 = !DILocalVariable(name: "base_b", scope: !4113, file: !3, line: 1206, type: !811)
!4123 = !DILocation(line: 1206, column: 16, scope: !4113)
!4124 = !DILocalVariable(name: "comp_a", scope: !4113, file: !3, line: 1207, type: !2191)
!4125 = !DILocation(line: 1207, column: 21, scope: !4113)
!4126 = !DILocalVariable(name: "comp_b", scope: !4113, file: !3, line: 1207, type: !2191)
!4127 = !DILocation(line: 1207, column: 37, scope: !4113)
!4128 = !DILocalVariable(name: "ret", scope: !4113, file: !3, line: 1208, type: !931)
!4129 = !DILocation(line: 1208, column: 8, scope: !4113)
!4130 = !DILocation(line: 1210, column: 30, scope: !4113)
!4131 = !DILocation(line: 1210, column: 12, scope: !4113)
!4132 = !DILocation(line: 1210, column: 10, scope: !4113)
!4133 = !DILocation(line: 1211, column: 30, scope: !4113)
!4134 = !DILocation(line: 1211, column: 12, scope: !4113)
!4135 = !DILocation(line: 1211, column: 10, scope: !4113)
!4136 = !DILocation(line: 1213, column: 7, scope: !4137)
!4137 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 1213, column: 7)
!4138 = !DILocation(line: 1214, column: 7, scope: !4137)
!4139 = !DILocation(line: 1214, column: 10, scope: !4137)
!4140 = !DILocation(line: 1215, column: 7, scope: !4137)
!4141 = !DILocation(line: 1215, column: 10, scope: !4137)
!4142 = !DILocation(line: 1215, column: 20, scope: !4137)
!4143 = !DILocation(line: 1215, column: 17, scope: !4137)
!4144 = !DILocation(line: 1213, column: 7, scope: !4113)
!4145 = !DILocation(line: 1216, column: 5, scope: !4137)
!4146 = !DILocation(line: 1218, column: 25, scope: !4147)
!4147 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 1218, column: 7)
!4148 = !DILocation(line: 1218, column: 33, scope: !4147)
!4149 = !DILocation(line: 1218, column: 8, scope: !4147)
!4150 = !DILocation(line: 1218, column: 7, scope: !4113)
!4151 = !DILocation(line: 1219, column: 5, scope: !4147)
!4152 = !DILocation(line: 1223, column: 3, scope: !4113)
!4153 = !DILocation(line: 1223, column: 31, scope: !4113)
!4154 = !DILocation(line: 1223, column: 10, scope: !4113)
!4155 = !DILocation(line: 1225, column: 7, scope: !4156)
!4156 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 1224, column: 5)
!4157 = !DILocation(line: 1226, column: 11, scope: !4156)
!4158 = !DILocation(line: 1226, column: 9, scope: !4156)
!4159 = distinct !{!4159, !4152, !4160}
!4160 = !DILocation(line: 1227, column: 5, scope: !4113)
!4161 = !DILocation(line: 1228, column: 3, scope: !4113)
!4162 = !DILocation(line: 1228, column: 31, scope: !4113)
!4163 = !DILocation(line: 1228, column: 10, scope: !4113)
!4164 = !DILocation(line: 1230, column: 7, scope: !4165)
!4165 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 1229, column: 5)
!4166 = !DILocation(line: 1231, column: 11, scope: !4165)
!4167 = !DILocation(line: 1231, column: 9, scope: !4165)
!4168 = distinct !{!4168, !4161, !4169}
!4169 = !DILocation(line: 1232, column: 5, scope: !4113)
!4170 = !DILocation(line: 1234, column: 7, scope: !4113)
!4171 = !DILocation(line: 1235, column: 3, scope: !4113)
!4172 = !DILocation(line: 1237, column: 11, scope: !4173)
!4173 = distinct !DILexicalBlock(scope: !4174, file: !3, line: 1237, column: 11)
!4174 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 1236, column: 5)
!4175 = !DILocation(line: 1237, column: 37, scope: !4173)
!4176 = !DILocation(line: 1238, column: 4, scope: !4173)
!4177 = !DILocation(line: 1238, column: 7, scope: !4173)
!4178 = !DILocation(line: 1238, column: 33, scope: !4173)
!4179 = !DILocation(line: 1237, column: 11, scope: !4174)
!4180 = !DILocation(line: 1239, column: 2, scope: !4173)
!4181 = !DILocation(line: 1241, column: 11, scope: !4174)
!4182 = !DILocation(line: 1241, column: 9, scope: !4174)
!4183 = !DILocation(line: 1242, column: 11, scope: !4174)
!4184 = !DILocation(line: 1242, column: 9, scope: !4174)
!4185 = !DILocation(line: 1245, column: 12, scope: !4186)
!4186 = distinct !DILexicalBlock(scope: !4174, file: !3, line: 1245, column: 11)
!4187 = !DILocation(line: 1245, column: 26, scope: !4186)
!4188 = !DILocation(line: 1246, column: 5, scope: !4186)
!4189 = !DILocation(line: 1246, column: 8, scope: !4186)
!4190 = !DILocation(line: 1246, column: 22, scope: !4186)
!4191 = !DILocation(line: 1247, column: 4, scope: !4186)
!4192 = !DILocation(line: 1247, column: 8, scope: !4186)
!4193 = !DILocation(line: 1247, column: 22, scope: !4186)
!4194 = !DILocation(line: 1248, column: 8, scope: !4186)
!4195 = !DILocation(line: 1248, column: 11, scope: !4186)
!4196 = !DILocation(line: 1248, column: 25, scope: !4186)
!4197 = !DILocation(line: 1245, column: 11, scope: !4174)
!4198 = !DILocation(line: 1250, column: 8, scope: !4199)
!4199 = distinct !DILexicalBlock(scope: !4186, file: !3, line: 1249, column: 2)
!4200 = !DILocation(line: 1251, column: 4, scope: !4199)
!4201 = !DILocation(line: 1254, column: 11, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !4174, file: !3, line: 1254, column: 11)
!4203 = !DILocation(line: 1254, column: 28, scope: !4202)
!4204 = !DILocation(line: 1254, column: 25, scope: !4202)
!4205 = !DILocation(line: 1254, column: 11, scope: !4174)
!4206 = !DILocation(line: 1255, column: 2, scope: !4202)
!4207 = !DILocation(line: 1259, column: 11, scope: !4208)
!4208 = distinct !DILexicalBlock(scope: !4174, file: !3, line: 1259, column: 11)
!4209 = !DILocation(line: 1259, column: 25, scope: !4208)
!4210 = !DILocation(line: 1259, column: 11, scope: !4174)
!4211 = !DILocation(line: 1260, column: 2, scope: !4208)
!4212 = distinct !{!4212, !4171, !4213}
!4213 = !DILocation(line: 1277, column: 5, scope: !4113)
!4214 = !DILocation(line: 1261, column: 16, scope: !4215)
!4215 = distinct !DILexicalBlock(scope: !4208, file: !3, line: 1261, column: 16)
!4216 = !DILocation(line: 1261, column: 30, scope: !4215)
!4217 = !DILocation(line: 1261, column: 16, scope: !4208)
!4218 = !DILocation(line: 1263, column: 25, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4220, file: !3, line: 1263, column: 8)
!4220 = distinct !DILexicalBlock(scope: !4215, file: !3, line: 1262, column: 2)
!4221 = !DILocation(line: 1263, column: 46, scope: !4219)
!4222 = !DILocation(line: 1263, column: 8, scope: !4219)
!4223 = !DILocation(line: 1263, column: 8, scope: !4220)
!4224 = !DILocation(line: 1264, column: 6, scope: !4219)
!4225 = !DILocation(line: 1267, column: 13, scope: !4220)
!4226 = !DILocation(line: 1267, column: 11, scope: !4220)
!4227 = !DILocation(line: 1268, column: 8, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !4220, file: !3, line: 1268, column: 8)
!4229 = !DILocation(line: 1268, column: 39, scope: !4228)
!4230 = !DILocation(line: 1268, column: 8, scope: !4220)
!4231 = !DILocation(line: 1269, column: 6, scope: !4228)
!4232 = !DILocation(line: 1272, column: 8, scope: !4220)
!4233 = !DILocation(line: 1273, column: 4, scope: !4220)
!4234 = !DILocation(line: 1276, column: 2, scope: !4215)
!4235 = !DILocation(line: 1279, column: 3, scope: !4113)
!4236 = !DILocation(line: 1280, column: 3, scope: !4113)
!4237 = !DILocation(line: 1282, column: 10, scope: !4113)
!4238 = !DILocation(line: 1282, column: 3, scope: !4113)
!4239 = !DILocation(line: 1283, column: 1, scope: !4113)
!4240 = distinct !DISubprogram(name: "estimated_loop_iterations", scope: !3, file: !3, line: 1673, type: !4241, scopeLine: 1675, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4241 = !DISubroutineType(types: !4242)
!4242 = !{!931, !1357, !931, !4243}
!4243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !860, size: 64)
!4244 = !DILocalVariable(name: "loop", arg: 1, scope: !4240, file: !3, line: 1673, type: !1357)
!4245 = !DILocation(line: 1673, column: 41, scope: !4240)
!4246 = !DILocalVariable(name: "conservative", arg: 2, scope: !4240, file: !3, line: 1673, type: !931)
!4247 = !DILocation(line: 1673, column: 52, scope: !4240)
!4248 = !DILocalVariable(name: "nit", arg: 3, scope: !4240, file: !3, line: 1674, type: !4243)
!4249 = !DILocation(line: 1674, column: 19, scope: !4240)
!4250 = !DILocation(line: 1676, column: 40, scope: !4240)
!4251 = !DILocation(line: 1676, column: 3, scope: !4240)
!4252 = !DILocation(line: 1677, column: 7, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !4240, file: !3, line: 1677, column: 7)
!4254 = !DILocation(line: 1677, column: 7, scope: !4240)
!4255 = !DILocation(line: 1679, column: 12, scope: !4256)
!4256 = distinct !DILexicalBlock(scope: !4257, file: !3, line: 1679, column: 11)
!4257 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 1678, column: 5)
!4258 = !DILocation(line: 1679, column: 18, scope: !4256)
!4259 = !DILocation(line: 1679, column: 11, scope: !4257)
!4260 = !DILocation(line: 1680, column: 2, scope: !4256)
!4261 = !DILocation(line: 1682, column: 8, scope: !4257)
!4262 = !DILocation(line: 1682, column: 14, scope: !4257)
!4263 = !DILocation(line: 1682, column: 20, scope: !4257)
!4264 = !DILocation(line: 1683, column: 5, scope: !4257)
!4265 = !DILocation(line: 1686, column: 12, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !4267, file: !3, line: 1686, column: 11)
!4267 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 1685, column: 5)
!4268 = !DILocation(line: 1686, column: 18, scope: !4266)
!4269 = !DILocation(line: 1686, column: 11, scope: !4267)
!4270 = !DILocation(line: 1687, column: 2, scope: !4266)
!4271 = !DILocation(line: 1689, column: 8, scope: !4267)
!4272 = !DILocation(line: 1689, column: 14, scope: !4267)
!4273 = !DILocation(line: 1689, column: 20, scope: !4267)
!4274 = !DILocation(line: 1692, column: 3, scope: !4240)
!4275 = !DILocation(line: 1693, column: 1, scope: !4240)
!4276 = distinct !DISubprogram(name: "estimated_loop_iterations_int", scope: !3, file: !3, line: 1700, type: !4277, scopeLine: 1701, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4277 = !DISubroutineType(types: !4278)
!4278 = !{!867, !1357, !931}
!4279 = !DILocalVariable(name: "loop", arg: 1, scope: !4276, file: !3, line: 1700, type: !1357)
!4280 = !DILocation(line: 1700, column: 45, scope: !4276)
!4281 = !DILocalVariable(name: "conservative", arg: 2, scope: !4276, file: !3, line: 1700, type: !931)
!4282 = !DILocation(line: 1700, column: 56, scope: !4276)
!4283 = !DILocalVariable(name: "nit", scope: !4276, file: !3, line: 1702, type: !860)
!4284 = !DILocation(line: 1702, column: 14, scope: !4276)
!4285 = !DILocalVariable(name: "hwi_nit", scope: !4276, file: !3, line: 1703, type: !867)
!4286 = !DILocation(line: 1703, column: 17, scope: !4276)
!4287 = !DILocation(line: 1705, column: 35, scope: !4288)
!4288 = distinct !DILexicalBlock(scope: !4276, file: !3, line: 1705, column: 7)
!4289 = !DILocation(line: 1705, column: 41, scope: !4288)
!4290 = !DILocation(line: 1705, column: 8, scope: !4288)
!4291 = !DILocation(line: 1705, column: 7, scope: !4276)
!4292 = !DILocation(line: 1706, column: 5, scope: !4288)
!4293 = !DILocation(line: 1708, column: 8, scope: !4294)
!4294 = distinct !DILexicalBlock(scope: !4276, file: !3, line: 1708, column: 7)
!4295 = !DILocation(line: 1708, column: 7, scope: !4276)
!4296 = !DILocation(line: 1709, column: 5, scope: !4294)
!4297 = !DILocation(line: 1710, column: 13, scope: !4276)
!4298 = !DILocation(line: 1710, column: 11, scope: !4276)
!4299 = !DILocation(line: 1712, column: 10, scope: !4276)
!4300 = !DILocation(line: 1712, column: 18, scope: !4276)
!4301 = !DILocation(line: 1712, column: 29, scope: !4276)
!4302 = !DILocation(line: 1712, column: 3, scope: !4276)
!4303 = !DILocation(line: 1713, column: 1, scope: !4276)
!4304 = distinct !DISubprogram(name: "compute_all_dependences", scope: !3, file: !3, line: 4052, type: !4305, scopeLine: 4056, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4305 = !DISubroutineType(types: !4306)
!4306 = !{null, !2321, !4307, !2206, !931}
!4307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2292, size: 64)
!4308 = !DILocalVariable(name: "datarefs", arg: 1, scope: !4304, file: !3, line: 4052, type: !2321)
!4309 = !DILocation(line: 4052, column: 56, scope: !4304)
!4310 = !DILocalVariable(name: "dependence_relations", arg: 2, scope: !4304, file: !3, line: 4053, type: !4307)
!4311 = !DILocation(line: 4053, column: 25, scope: !4304)
!4312 = !DILocalVariable(name: "loop_nest", arg: 3, scope: !4304, file: !3, line: 4054, type: !2206)
!4313 = !DILocation(line: 4054, column: 25, scope: !4304)
!4314 = !DILocalVariable(name: "compute_self_and_rr", arg: 4, scope: !4304, file: !3, line: 4055, type: !931)
!4315 = !DILocation(line: 4055, column: 10, scope: !4304)
!4316 = !DILocalVariable(name: "ddr", scope: !4304, file: !3, line: 4057, type: !2243)
!4317 = !DILocation(line: 4057, column: 36, scope: !4304)
!4318 = !DILocalVariable(name: "a", scope: !4304, file: !3, line: 4058, type: !2171)
!4319 = !DILocation(line: 4058, column: 26, scope: !4304)
!4320 = !DILocalVariable(name: "b", scope: !4304, file: !3, line: 4058, type: !2171)
!4321 = !DILocation(line: 4058, column: 30, scope: !4304)
!4322 = !DILocalVariable(name: "i", scope: !4304, file: !3, line: 4059, type: !7)
!4323 = !DILocation(line: 4059, column: 16, scope: !4304)
!4324 = !DILocalVariable(name: "j", scope: !4304, file: !3, line: 4059, type: !7)
!4325 = !DILocation(line: 4059, column: 19, scope: !4304)
!4326 = !DILocation(line: 4061, column: 10, scope: !4327)
!4327 = distinct !DILexicalBlock(scope: !4304, file: !3, line: 4061, column: 3)
!4328 = !DILocation(line: 4061, column: 8, scope: !4327)
!4329 = !DILocation(line: 4061, column: 15, scope: !4330)
!4330 = distinct !DILexicalBlock(scope: !4327, file: !3, line: 4061, column: 3)
!4331 = !DILocation(line: 4061, column: 3, scope: !4327)
!4332 = !DILocation(line: 4062, column: 14, scope: !4333)
!4333 = distinct !DILexicalBlock(scope: !4330, file: !3, line: 4062, column: 5)
!4334 = !DILocation(line: 4062, column: 16, scope: !4333)
!4335 = !DILocation(line: 4062, column: 12, scope: !4333)
!4336 = !DILocation(line: 4062, column: 10, scope: !4333)
!4337 = !DILocation(line: 4062, column: 21, scope: !4338)
!4338 = distinct !DILexicalBlock(scope: !4333, file: !3, line: 4062, column: 5)
!4339 = !DILocation(line: 4062, column: 5, scope: !4333)
!4340 = !DILocation(line: 4063, column: 12, scope: !4341)
!4341 = distinct !DILexicalBlock(scope: !4338, file: !3, line: 4063, column: 11)
!4342 = !DILocation(line: 4063, column: 27, scope: !4341)
!4343 = !DILocation(line: 4063, column: 31, scope: !4341)
!4344 = !DILocation(line: 4063, column: 46, scope: !4341)
!4345 = !DILocation(line: 4063, column: 49, scope: !4341)
!4346 = !DILocation(line: 4063, column: 11, scope: !4338)
!4347 = !DILocation(line: 4065, column: 47, scope: !4348)
!4348 = distinct !DILexicalBlock(scope: !4341, file: !3, line: 4064, column: 2)
!4349 = !DILocation(line: 4065, column: 50, scope: !4348)
!4350 = !DILocation(line: 4065, column: 53, scope: !4348)
!4351 = !DILocation(line: 4065, column: 10, scope: !4348)
!4352 = !DILocation(line: 4065, column: 8, scope: !4348)
!4353 = !DILocation(line: 4066, column: 4, scope: !4348)
!4354 = !DILocation(line: 4067, column: 15, scope: !4355)
!4355 = distinct !DILexicalBlock(scope: !4348, file: !3, line: 4067, column: 15)
!4356 = !DILocation(line: 4067, column: 15, scope: !4348)
!4357 = !DILocation(line: 4068, column: 36, scope: !4355)
!4358 = !DILocation(line: 4068, column: 41, scope: !4355)
!4359 = !DILocation(line: 4068, column: 9, scope: !4355)
!4360 = !DILocation(line: 4069, column: 2, scope: !4348)
!4361 = !DILocation(line: 4062, column: 70, scope: !4338)
!4362 = !DILocation(line: 4062, column: 5, scope: !4338)
!4363 = distinct !{!4363, !4339, !4364}
!4364 = !DILocation(line: 4069, column: 2, scope: !4333)
!4365 = !DILocation(line: 4061, column: 64, scope: !4330)
!4366 = !DILocation(line: 4061, column: 3, scope: !4330)
!4367 = distinct !{!4367, !4331, !4368}
!4368 = !DILocation(line: 4069, column: 2, scope: !4327)
!4369 = !DILocation(line: 4071, column: 7, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4304, file: !3, line: 4071, column: 7)
!4371 = !DILocation(line: 4071, column: 7, scope: !4304)
!4372 = !DILocation(line: 4072, column: 12, scope: !4373)
!4373 = distinct !DILexicalBlock(scope: !4370, file: !3, line: 4072, column: 5)
!4374 = !DILocation(line: 4072, column: 10, scope: !4373)
!4375 = !DILocation(line: 4072, column: 17, scope: !4376)
!4376 = distinct !DILexicalBlock(scope: !4373, file: !3, line: 4072, column: 5)
!4377 = !DILocation(line: 4072, column: 5, scope: !4373)
!4378 = !DILocation(line: 4074, column: 45, scope: !4379)
!4379 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 4073, column: 7)
!4380 = !DILocation(line: 4074, column: 48, scope: !4379)
!4381 = !DILocation(line: 4074, column: 51, scope: !4379)
!4382 = !DILocation(line: 4074, column: 8, scope: !4379)
!4383 = !DILocation(line: 4074, column: 6, scope: !4379)
!4384 = !DILocation(line: 4075, column: 2, scope: !4379)
!4385 = !DILocation(line: 4076, column: 27, scope: !4379)
!4386 = !DILocation(line: 4076, column: 2, scope: !4379)
!4387 = !DILocation(line: 4077, column: 7, scope: !4379)
!4388 = !DILocation(line: 4072, column: 66, scope: !4376)
!4389 = !DILocation(line: 4072, column: 5, scope: !4376)
!4390 = distinct !{!4390, !4377, !4391}
!4391 = !DILocation(line: 4077, column: 7, scope: !4373)
!4392 = !DILocation(line: 4078, column: 1, scope: !4304)
!4393 = distinct !DISubprogram(name: "initialize_data_dependence_relation", scope: !3, file: !3, line: 1357, type: !4394, scopeLine: 1360, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4394 = !DISubroutineType(types: !4395)
!4395 = !{!2243, !2171, !2171, !2206}
!4396 = !DILocalVariable(name: "a", arg: 1, scope: !4393, file: !3, line: 1357, type: !2171)
!4397 = !DILocation(line: 1357, column: 61, scope: !4393)
!4398 = !DILocalVariable(name: "b", arg: 2, scope: !4393, file: !3, line: 1358, type: !2171)
!4399 = !DILocation(line: 1358, column: 33, scope: !4393)
!4400 = !DILocalVariable(name: "loop_nest", arg: 3, scope: !4393, file: !3, line: 1359, type: !2206)
!4401 = !DILocation(line: 1359, column: 31, scope: !4393)
!4402 = !DILocalVariable(name: "res", scope: !4393, file: !3, line: 1361, type: !2243)
!4403 = !DILocation(line: 1361, column: 36, scope: !4393)
!4404 = !DILocalVariable(name: "i", scope: !4393, file: !3, line: 1362, type: !7)
!4405 = !DILocation(line: 1362, column: 16, scope: !4393)
!4406 = !DILocation(line: 1364, column: 9, scope: !4393)
!4407 = !DILocation(line: 1364, column: 7, scope: !4393)
!4408 = !DILocation(line: 1365, column: 17, scope: !4393)
!4409 = !DILocation(line: 1365, column: 3, scope: !4393)
!4410 = !DILocation(line: 1365, column: 15, scope: !4393)
!4411 = !DILocation(line: 1366, column: 17, scope: !4393)
!4412 = !DILocation(line: 1366, column: 3, scope: !4393)
!4413 = !DILocation(line: 1366, column: 15, scope: !4393)
!4414 = !DILocation(line: 1367, column: 3, scope: !4393)
!4415 = !DILocation(line: 1367, column: 23, scope: !4393)
!4416 = !DILocation(line: 1368, column: 3, scope: !4393)
!4417 = !DILocation(line: 1368, column: 24, scope: !4393)
!4418 = !DILocation(line: 1369, column: 3, scope: !4393)
!4419 = !DILocation(line: 1369, column: 24, scope: !4393)
!4420 = !DILocation(line: 1370, column: 3, scope: !4393)
!4421 = !DILocation(line: 1370, column: 23, scope: !4393)
!4422 = !DILocation(line: 1371, column: 3, scope: !4393)
!4423 = !DILocation(line: 1371, column: 24, scope: !4393)
!4424 = !DILocation(line: 1373, column: 7, scope: !4425)
!4425 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 1373, column: 7)
!4426 = !DILocation(line: 1373, column: 9, scope: !4425)
!4427 = !DILocation(line: 1373, column: 17, scope: !4425)
!4428 = !DILocation(line: 1373, column: 20, scope: !4425)
!4429 = !DILocation(line: 1373, column: 22, scope: !4425)
!4430 = !DILocation(line: 1373, column: 7, scope: !4393)
!4431 = !DILocation(line: 1375, column: 33, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4425, file: !3, line: 1374, column: 5)
!4433 = !DILocation(line: 1375, column: 7, scope: !4432)
!4434 = !DILocation(line: 1375, column: 31, scope: !4432)
!4435 = !DILocation(line: 1376, column: 14, scope: !4432)
!4436 = !DILocation(line: 1376, column: 7, scope: !4432)
!4437 = !DILocation(line: 1380, column: 24, scope: !4438)
!4438 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 1380, column: 7)
!4439 = !DILocation(line: 1380, column: 27, scope: !4438)
!4440 = !DILocation(line: 1380, column: 8, scope: !4438)
!4441 = !DILocation(line: 1380, column: 7, scope: !4393)
!4442 = !DILocation(line: 1382, column: 33, scope: !4443)
!4443 = distinct !DILexicalBlock(scope: !4438, file: !3, line: 1381, column: 5)
!4444 = !DILocation(line: 1382, column: 7, scope: !4443)
!4445 = !DILocation(line: 1382, column: 31, scope: !4443)
!4446 = !DILocation(line: 1383, column: 14, scope: !4443)
!4447 = !DILocation(line: 1383, column: 7, scope: !4443)
!4448 = !DILocation(line: 1388, column: 24, scope: !4449)
!4449 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 1388, column: 7)
!4450 = !DILocation(line: 1388, column: 36, scope: !4449)
!4451 = !DILocation(line: 1388, column: 7, scope: !4449)
!4452 = !DILocation(line: 1388, column: 7, scope: !4393)
!4453 = !DILocation(line: 1390, column: 7, scope: !4454)
!4454 = distinct !DILexicalBlock(scope: !4449, file: !3, line: 1389, column: 5)
!4455 = !DILocation(line: 1390, column: 26, scope: !4454)
!4456 = !DILocation(line: 1391, column: 7, scope: !4454)
!4457 = !DILocation(line: 1391, column: 31, scope: !4454)
!4458 = !DILocation(line: 1392, column: 30, scope: !4454)
!4459 = !DILocation(line: 1392, column: 7, scope: !4454)
!4460 = !DILocation(line: 1392, column: 28, scope: !4454)
!4461 = !DILocation(line: 1393, column: 29, scope: !4454)
!4462 = !DILocation(line: 1393, column: 7, scope: !4454)
!4463 = !DILocation(line: 1393, column: 27, scope: !4454)
!4464 = !DILocation(line: 1394, column: 7, scope: !4454)
!4465 = !DILocation(line: 1394, column: 28, scope: !4454)
!4466 = !DILocation(line: 1395, column: 7, scope: !4454)
!4467 = !DILocation(line: 1395, column: 32, scope: !4454)
!4468 = !DILocation(line: 1396, column: 32, scope: !4454)
!4469 = !DILocation(line: 1396, column: 7, scope: !4454)
!4470 = !DILocation(line: 1397, column: 14, scope: !4454)
!4471 = !DILocation(line: 1397, column: 7, scope: !4454)
!4472 = !DILocation(line: 1402, column: 25, scope: !4473)
!4473 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 1402, column: 7)
!4474 = !DILocation(line: 1402, column: 45, scope: !4473)
!4475 = !DILocation(line: 1402, column: 8, scope: !4473)
!4476 = !DILocation(line: 1402, column: 7, scope: !4393)
!4477 = !DILocation(line: 1404, column: 33, scope: !4478)
!4478 = distinct !DILexicalBlock(scope: !4473, file: !3, line: 1403, column: 5)
!4479 = !DILocation(line: 1404, column: 7, scope: !4478)
!4480 = !DILocation(line: 1404, column: 31, scope: !4478)
!4481 = !DILocation(line: 1405, column: 14, scope: !4478)
!4482 = !DILocation(line: 1405, column: 7, scope: !4478)
!4483 = !DILocation(line: 1411, column: 7, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 1411, column: 7)
!4485 = !DILocation(line: 1412, column: 7, scope: !4484)
!4486 = !DILocation(line: 1412, column: 47, scope: !4484)
!4487 = !DILocation(line: 1413, column: 17, scope: !4484)
!4488 = !DILocation(line: 1412, column: 11, scope: !4484)
!4489 = !DILocation(line: 1411, column: 7, scope: !4393)
!4490 = !DILocation(line: 1415, column: 33, scope: !4491)
!4491 = distinct !DILexicalBlock(scope: !4484, file: !3, line: 1414, column: 5)
!4492 = !DILocation(line: 1415, column: 7, scope: !4491)
!4493 = !DILocation(line: 1415, column: 31, scope: !4491)
!4494 = !DILocation(line: 1416, column: 14, scope: !4491)
!4495 = !DILocation(line: 1416, column: 7, scope: !4491)
!4496 = !DILocation(line: 1419, column: 3, scope: !4393)
!4497 = !DILocation(line: 1421, column: 3, scope: !4393)
!4498 = !DILocation(line: 1421, column: 22, scope: !4393)
!4499 = !DILocation(line: 1422, column: 3, scope: !4393)
!4500 = !DILocation(line: 1422, column: 27, scope: !4393)
!4501 = !DILocation(line: 1423, column: 26, scope: !4393)
!4502 = !DILocation(line: 1423, column: 3, scope: !4393)
!4503 = !DILocation(line: 1423, column: 24, scope: !4393)
!4504 = !DILocation(line: 1424, column: 25, scope: !4393)
!4505 = !DILocation(line: 1424, column: 3, scope: !4393)
!4506 = !DILocation(line: 1424, column: 23, scope: !4393)
!4507 = !DILocation(line: 1425, column: 3, scope: !4393)
!4508 = !DILocation(line: 1425, column: 24, scope: !4393)
!4509 = !DILocation(line: 1426, column: 3, scope: !4393)
!4510 = !DILocation(line: 1426, column: 28, scope: !4393)
!4511 = !DILocation(line: 1428, column: 10, scope: !4512)
!4512 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 1428, column: 3)
!4513 = !DILocation(line: 1428, column: 8, scope: !4512)
!4514 = !DILocation(line: 1428, column: 15, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4512, file: !3, line: 1428, column: 3)
!4516 = !DILocation(line: 1428, column: 19, scope: !4515)
!4517 = !DILocation(line: 1428, column: 17, scope: !4515)
!4518 = !DILocation(line: 1428, column: 3, scope: !4512)
!4519 = !DILocalVariable(name: "subscript", scope: !4520, file: !3, line: 1430, type: !2263)
!4520 = distinct !DILexicalBlock(scope: !4515, file: !3, line: 1429, column: 5)
!4521 = !DILocation(line: 1430, column: 25, scope: !4520)
!4522 = !DILocation(line: 1432, column: 19, scope: !4520)
!4523 = !DILocation(line: 1432, column: 17, scope: !4520)
!4524 = !DILocation(line: 1433, column: 40, scope: !4520)
!4525 = !DILocation(line: 1433, column: 7, scope: !4520)
!4526 = !DILocation(line: 1433, column: 38, scope: !4520)
!4527 = !DILocation(line: 1434, column: 40, scope: !4520)
!4528 = !DILocation(line: 1434, column: 7, scope: !4520)
!4529 = !DILocation(line: 1434, column: 38, scope: !4520)
!4530 = !DILocation(line: 1435, column: 39, scope: !4520)
!4531 = !DILocation(line: 1435, column: 7, scope: !4520)
!4532 = !DILocation(line: 1435, column: 37, scope: !4520)
!4533 = !DILocation(line: 1436, column: 34, scope: !4520)
!4534 = !DILocation(line: 1436, column: 7, scope: !4520)
!4535 = !DILocation(line: 1436, column: 32, scope: !4520)
!4536 = !DILocation(line: 1437, column: 7, scope: !4520)
!4537 = !DILocation(line: 1438, column: 5, scope: !4520)
!4538 = !DILocation(line: 1428, column: 43, scope: !4515)
!4539 = !DILocation(line: 1428, column: 3, scope: !4515)
!4540 = distinct !{!4540, !4518, !4541}
!4541 = !DILocation(line: 1438, column: 5, scope: !4512)
!4542 = !DILocation(line: 1440, column: 10, scope: !4393)
!4543 = !DILocation(line: 1440, column: 3, scope: !4393)
!4544 = !DILocation(line: 1441, column: 1, scope: !4393)
!4545 = distinct !DISubprogram(name: "VEC_ddr_p_heap_safe_push", scope: !391, file: !391, line: 333, type: !4546, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4546 = !DISubroutineType(types: !4547)
!4547 = !{!2578, !4307, !2242}
!4548 = !DILocalVariable(name: "vec_", arg: 1, scope: !4545, file: !391, line: 333, type: !4307)
!4549 = !DILocation(line: 333, column: 1, scope: !4545)
!4550 = !DILocalVariable(name: "obj_", arg: 2, scope: !4545, file: !391, line: 333, type: !2242)
!4551 = distinct !DISubprogram(name: "compute_affine_dependence", scope: !3, file: !3, line: 3920, type: !4552, scopeLine: 3922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4552 = !DISubroutineType(types: !4553)
!4553 = !{null, !2243, !1357}
!4554 = !DILocalVariable(name: "ddr", arg: 1, scope: !4551, file: !3, line: 3920, type: !2243)
!4555 = !DILocation(line: 3920, column: 61, scope: !4551)
!4556 = !DILocalVariable(name: "loop_nest", arg: 2, scope: !4551, file: !3, line: 3921, type: !1357)
!4557 = !DILocation(line: 3921, column: 20, scope: !4551)
!4558 = !DILocalVariable(name: "dra", scope: !4551, file: !3, line: 3923, type: !2171)
!4559 = !DILocation(line: 3923, column: 26, scope: !4551)
!4560 = !DILocation(line: 3923, column: 32, scope: !4551)
!4561 = !DILocalVariable(name: "drb", scope: !4551, file: !3, line: 3924, type: !2171)
!4562 = !DILocation(line: 3924, column: 26, scope: !4551)
!4563 = !DILocation(line: 3924, column: 32, scope: !4551)
!4564 = !DILocation(line: 3926, column: 7, scope: !4565)
!4565 = distinct !DILexicalBlock(scope: !4551, file: !3, line: 3926, column: 7)
!4566 = !DILocation(line: 3926, column: 17, scope: !4565)
!4567 = !DILocation(line: 3926, column: 21, scope: !4565)
!4568 = !DILocation(line: 3926, column: 32, scope: !4565)
!4569 = !DILocation(line: 3926, column: 7, scope: !4551)
!4570 = !DILocation(line: 3928, column: 16, scope: !4571)
!4571 = distinct !DILexicalBlock(scope: !4565, file: !3, line: 3927, column: 5)
!4572 = !DILocation(line: 3928, column: 7, scope: !4571)
!4573 = !DILocation(line: 3929, column: 16, scope: !4571)
!4574 = !DILocation(line: 3929, column: 7, scope: !4571)
!4575 = !DILocation(line: 3930, column: 26, scope: !4571)
!4576 = !DILocation(line: 3930, column: 37, scope: !4571)
!4577 = !DILocation(line: 3930, column: 7, scope: !4571)
!4578 = !DILocation(line: 3931, column: 16, scope: !4571)
!4579 = !DILocation(line: 3931, column: 7, scope: !4571)
!4580 = !DILocation(line: 3932, column: 26, scope: !4571)
!4581 = !DILocation(line: 3932, column: 37, scope: !4571)
!4582 = !DILocation(line: 3932, column: 7, scope: !4571)
!4583 = !DILocation(line: 3933, column: 16, scope: !4571)
!4584 = !DILocation(line: 3933, column: 7, scope: !4571)
!4585 = !DILocation(line: 3934, column: 5, scope: !4571)
!4586 = !DILocation(line: 3937, column: 7, scope: !4587)
!4587 = distinct !DILexicalBlock(scope: !4551, file: !3, line: 3937, column: 7)
!4588 = !DILocation(line: 3937, column: 31, scope: !4587)
!4589 = !DILocation(line: 3938, column: 7, scope: !4587)
!4590 = !DILocation(line: 3938, column: 11, scope: !4587)
!4591 = !DILocation(line: 3937, column: 7, scope: !4551)
!4592 = !DILocation(line: 3940, column: 44, scope: !4593)
!4593 = distinct !DILexicalBlock(scope: !4587, file: !3, line: 3939, column: 5)
!4594 = !DILocation(line: 3942, column: 54, scope: !4595)
!4595 = distinct !DILexicalBlock(scope: !4593, file: !3, line: 3942, column: 11)
!4596 = !DILocation(line: 3942, column: 59, scope: !4595)
!4597 = !DILocation(line: 3942, column: 11, scope: !4595)
!4598 = !DILocation(line: 3943, column: 4, scope: !4595)
!4599 = !DILocation(line: 3943, column: 50, scope: !4595)
!4600 = !DILocation(line: 3943, column: 55, scope: !4595)
!4601 = !DILocation(line: 3943, column: 7, scope: !4595)
!4602 = !DILocation(line: 3942, column: 11, scope: !4593)
!4603 = !DILocation(line: 3945, column: 8, scope: !4604)
!4604 = distinct !DILexicalBlock(scope: !4605, file: !3, line: 3945, column: 8)
!4605 = distinct !DILexicalBlock(scope: !4595, file: !3, line: 3944, column: 2)
!4606 = !DILocation(line: 3945, column: 8, scope: !4605)
!4607 = !DILocation(line: 3948, column: 37, scope: !4608)
!4608 = distinct !DILexicalBlock(scope: !4604, file: !3, line: 3946, column: 6)
!4609 = !DILocation(line: 3948, column: 42, scope: !4608)
!4610 = !DILocation(line: 3948, column: 8, scope: !4608)
!4611 = !DILocation(line: 3950, column: 12, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4608, file: !3, line: 3950, column: 12)
!4613 = !DILocation(line: 3950, column: 22, scope: !4612)
!4614 = !DILocation(line: 3950, column: 26, scope: !4612)
!4615 = !DILocation(line: 3950, column: 37, scope: !4612)
!4616 = !DILocation(line: 3950, column: 12, scope: !4608)
!4617 = !DILocation(line: 3952, column: 14, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4612, file: !3, line: 3951, column: 3)
!4619 = !DILocation(line: 3952, column: 5, scope: !4618)
!4620 = !DILocation(line: 3953, column: 36, scope: !4618)
!4621 = !DILocation(line: 3953, column: 47, scope: !4618)
!4622 = !DILocation(line: 3953, column: 5, scope: !4618)
!4623 = !DILocation(line: 3954, column: 3, scope: !4618)
!4624 = !DILocation(line: 3956, column: 12, scope: !4625)
!4625 = distinct !DILexicalBlock(scope: !4608, file: !3, line: 3956, column: 12)
!4626 = !DILocation(line: 3956, column: 36, scope: !4625)
!4627 = !DILocation(line: 3956, column: 12, scope: !4608)
!4628 = !DILocalVariable(name: "maybe_dependent", scope: !4629, file: !3, line: 3958, type: !931)
!4629 = distinct !DILexicalBlock(scope: !4625, file: !3, line: 3957, column: 3)
!4630 = !DILocation(line: 3958, column: 10, scope: !4629)
!4631 = !DILocalVariable(name: "dir_vects", scope: !4629, file: !3, line: 3959, type: !2280)
!4632 = !DILocation(line: 3959, column: 32, scope: !4629)
!4633 = !DILocalVariable(name: "dist_vects", scope: !4629, file: !3, line: 3959, type: !2280)
!4634 = !DILocation(line: 3959, column: 44, scope: !4629)
!4635 = !DILocation(line: 3962, column: 18, scope: !4629)
!4636 = !DILocation(line: 3962, column: 16, scope: !4629)
!4637 = !DILocation(line: 3963, column: 17, scope: !4629)
!4638 = !DILocation(line: 3963, column: 15, scope: !4629)
!4639 = !DILocation(line: 3966, column: 5, scope: !4629)
!4640 = !DILocation(line: 3966, column: 26, scope: !4629)
!4641 = !DILocation(line: 3967, column: 5, scope: !4629)
!4642 = !DILocation(line: 3967, column: 25, scope: !4629)
!4643 = !DILocation(line: 3970, column: 30, scope: !4644)
!4644 = distinct !DILexicalBlock(scope: !4629, file: !3, line: 3970, column: 9)
!4645 = !DILocation(line: 3970, column: 10, scope: !4644)
!4646 = !DILocation(line: 3970, column: 9, scope: !4629)
!4647 = !DILocation(line: 3971, column: 7, scope: !4644)
!4648 = !DILocation(line: 3973, column: 9, scope: !4649)
!4649 = distinct !DILexicalBlock(scope: !4629, file: !3, line: 3973, column: 9)
!4650 = !DILocation(line: 3973, column: 19, scope: !4649)
!4651 = !DILocation(line: 3973, column: 23, scope: !4649)
!4652 = !DILocation(line: 3973, column: 34, scope: !4649)
!4653 = !DILocation(line: 3973, column: 9, scope: !4629)
!4654 = !DILocation(line: 3975, column: 18, scope: !4655)
!4655 = distinct !DILexicalBlock(scope: !4649, file: !3, line: 3974, column: 7)
!4656 = !DILocation(line: 3975, column: 9, scope: !4655)
!4657 = !DILocation(line: 3976, column: 40, scope: !4655)
!4658 = !DILocation(line: 3976, column: 51, scope: !4655)
!4659 = !DILocation(line: 3976, column: 9, scope: !4655)
!4660 = !DILocation(line: 3977, column: 7, scope: !4655)
!4661 = !DILocation(line: 3980, column: 9, scope: !4662)
!4662 = distinct !DILexicalBlock(scope: !4629, file: !3, line: 3980, column: 9)
!4663 = !DILocation(line: 3980, column: 9, scope: !4629)
!4664 = !DILocation(line: 3981, column: 7, scope: !4662)
!4665 = !DILocation(line: 3983, column: 3, scope: !4629)
!4666 = !DILocation(line: 3984, column: 6, scope: !4608)
!4667 = !DILocation(line: 3986, column: 35, scope: !4604)
!4668 = !DILocation(line: 3986, column: 40, scope: !4604)
!4669 = !DILocation(line: 3986, column: 6, scope: !4604)
!4670 = !DILocation(line: 3987, column: 2, scope: !4605)
!4671 = !DILocation(line: 3993, column: 2, scope: !4595)
!4672 = !DILabel(scope: !4673, name: "csys_dont_know", file: !3, line: 3994)
!4673 = distinct !DILexicalBlock(scope: !4595, file: !3, line: 3993, column: 2)
!4674 = !DILocation(line: 3994, column: 2, scope: !4673)
!4675 = !DILocation(line: 3995, column: 48, scope: !4673)
!4676 = !DILocation(line: 3997, column: 8, scope: !4677)
!4677 = distinct !DILexicalBlock(scope: !4673, file: !3, line: 3997, column: 8)
!4678 = !DILocation(line: 3997, column: 18, scope: !4677)
!4679 = !DILocation(line: 3997, column: 22, scope: !4677)
!4680 = !DILocation(line: 3997, column: 33, scope: !4677)
!4681 = !DILocation(line: 3997, column: 8, scope: !4673)
!4682 = !DILocation(line: 3999, column: 17, scope: !4683)
!4683 = distinct !DILexicalBlock(scope: !4677, file: !3, line: 3998, column: 6)
!4684 = !DILocation(line: 3999, column: 8, scope: !4683)
!4685 = !DILocation(line: 4000, column: 29, scope: !4683)
!4686 = !DILocation(line: 4000, column: 40, scope: !4683)
!4687 = !DILocation(line: 4000, column: 8, scope: !4683)
!4688 = !DILocation(line: 4001, column: 17, scope: !4683)
!4689 = !DILocation(line: 4001, column: 8, scope: !4683)
!4690 = !DILocation(line: 4002, column: 29, scope: !4683)
!4691 = !DILocation(line: 4002, column: 40, scope: !4683)
!4692 = !DILocation(line: 4002, column: 8, scope: !4683)
!4693 = !DILocation(line: 4003, column: 17, scope: !4683)
!4694 = !DILocation(line: 4003, column: 8, scope: !4683)
!4695 = !DILocation(line: 4004, column: 6, scope: !4683)
!4696 = !DILocation(line: 4005, column: 28, scope: !4673)
!4697 = !DILocation(line: 4005, column: 33, scope: !4673)
!4698 = !DILocation(line: 4005, column: 4, scope: !4673)
!4699 = !DILocation(line: 4007, column: 5, scope: !4593)
!4700 = !DILocation(line: 4009, column: 7, scope: !4701)
!4701 = distinct !DILexicalBlock(scope: !4551, file: !3, line: 4009, column: 7)
!4702 = !DILocation(line: 4009, column: 17, scope: !4701)
!4703 = !DILocation(line: 4009, column: 21, scope: !4701)
!4704 = !DILocation(line: 4009, column: 32, scope: !4701)
!4705 = !DILocation(line: 4009, column: 7, scope: !4551)
!4706 = !DILocation(line: 4010, column: 14, scope: !4701)
!4707 = !DILocation(line: 4010, column: 5, scope: !4701)
!4708 = !DILocation(line: 4011, column: 1, scope: !4551)
!4709 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !146, file: !146, line: 85, type: !4710, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4710 = !DISubroutineType(types: !4711)
!4711 = !{!1384, !3071, !7}
!4712 = !DILocalVariable(name: "vec_", arg: 1, scope: !4709, file: !146, line: 85, type: !3071)
!4713 = !DILocation(line: 85, column: 1, scope: !4709)
!4714 = !DILocalVariable(name: "ix_", arg: 2, scope: !4709, file: !146, line: 85, type: !7)
!4715 = !DILocation(line: 0, scope: !4709)
!4716 = distinct !DISubprogram(name: "compute_self_dependence", scope: !3, file: !3, line: 4017, type: !3046, scopeLine: 4018, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4717 = !DILocalVariable(name: "ddr", arg: 1, scope: !4716, file: !3, line: 4017, type: !2243)
!4718 = !DILocation(line: 4017, column: 59, scope: !4716)
!4719 = !DILocalVariable(name: "i", scope: !4716, file: !3, line: 4019, type: !7)
!4720 = !DILocation(line: 4019, column: 16, scope: !4716)
!4721 = !DILocalVariable(name: "subscript", scope: !4716, file: !3, line: 4020, type: !2263)
!4722 = !DILocation(line: 4020, column: 21, scope: !4716)
!4723 = !DILocation(line: 4022, column: 7, scope: !4724)
!4724 = distinct !DILexicalBlock(scope: !4716, file: !3, line: 4022, column: 7)
!4725 = !DILocation(line: 4022, column: 31, scope: !4724)
!4726 = !DILocation(line: 4022, column: 7, scope: !4716)
!4727 = !DILocation(line: 4023, column: 5, scope: !4724)
!4728 = !DILocation(line: 4025, column: 10, scope: !4729)
!4729 = distinct !DILexicalBlock(scope: !4716, file: !3, line: 4025, column: 3)
!4730 = !DILocation(line: 4025, column: 8, scope: !4729)
!4731 = !DILocation(line: 4025, column: 15, scope: !4732)
!4732 = distinct !DILexicalBlock(scope: !4729, file: !3, line: 4025, column: 3)
!4733 = !DILocation(line: 4025, column: 3, scope: !4729)
!4734 = !DILocation(line: 4028, column: 11, scope: !4735)
!4735 = distinct !DILexicalBlock(scope: !4736, file: !3, line: 4028, column: 11)
!4736 = distinct !DILexicalBlock(scope: !4732, file: !3, line: 4027, column: 5)
!4737 = !DILocation(line: 4028, column: 11, scope: !4736)
!4738 = !DILocation(line: 4029, column: 26, scope: !4735)
!4739 = !DILocation(line: 4029, column: 2, scope: !4735)
!4740 = !DILocation(line: 4030, column: 11, scope: !4741)
!4741 = distinct !DILexicalBlock(scope: !4736, file: !3, line: 4030, column: 11)
!4742 = !DILocation(line: 4030, column: 11, scope: !4736)
!4743 = !DILocation(line: 4031, column: 26, scope: !4741)
!4744 = !DILocation(line: 4031, column: 2, scope: !4741)
!4745 = !DILocation(line: 4035, column: 35, scope: !4736)
!4746 = !DILocation(line: 4035, column: 20, scope: !4736)
!4747 = !DILocation(line: 4035, column: 4, scope: !4736)
!4748 = !DILocation(line: 4034, column: 7, scope: !4736)
!4749 = !DILocation(line: 4035, column: 2, scope: !4736)
!4750 = !DILocation(line: 4037, column: 35, scope: !4736)
!4751 = !DILocation(line: 4037, column: 20, scope: !4736)
!4752 = !DILocation(line: 4037, column: 4, scope: !4736)
!4753 = !DILocation(line: 4036, column: 7, scope: !4736)
!4754 = !DILocation(line: 4037, column: 2, scope: !4736)
!4755 = !DILocation(line: 4038, column: 39, scope: !4736)
!4756 = !DILocation(line: 4038, column: 7, scope: !4736)
!4757 = !DILocation(line: 4038, column: 37, scope: !4736)
!4758 = !DILocation(line: 4039, column: 5, scope: !4736)
!4759 = !DILocation(line: 4026, column: 9, scope: !4732)
!4760 = !DILocation(line: 4025, column: 3, scope: !4732)
!4761 = distinct !{!4761, !4733, !4762}
!4762 = !DILocation(line: 4039, column: 5, scope: !4729)
!4763 = !DILocation(line: 4042, column: 16, scope: !4716)
!4764 = !DILocation(line: 4042, column: 40, scope: !4716)
!4765 = !DILocation(line: 4042, column: 21, scope: !4716)
!4766 = !DILocation(line: 4042, column: 3, scope: !4716)
!4767 = !DILocation(line: 4043, column: 15, scope: !4716)
!4768 = !DILocation(line: 4043, column: 39, scope: !4716)
!4769 = !DILocation(line: 4043, column: 20, scope: !4716)
!4770 = !DILocation(line: 4043, column: 3, scope: !4716)
!4771 = !DILocation(line: 4044, column: 1, scope: !4716)
!4772 = distinct !DISubprogram(name: "get_references_in_stmt", scope: !3, file: !3, line: 4084, type: !4773, scopeLine: 4085, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4773 = !DISubroutineType(types: !4774)
!4774 = !{!931, !1142, !4775}
!4775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2304, size: 64)
!4776 = !DILocalVariable(name: "stmt", arg: 1, scope: !4772, file: !3, line: 4084, type: !1142)
!4777 = !DILocation(line: 4084, column: 32, scope: !4772)
!4778 = !DILocalVariable(name: "references", arg: 2, scope: !4772, file: !3, line: 4084, type: !4775)
!4779 = !DILocation(line: 4084, column: 65, scope: !4772)
!4780 = !DILocalVariable(name: "clobbers_memory", scope: !4772, file: !3, line: 4086, type: !931)
!4781 = !DILocation(line: 4086, column: 8, scope: !4772)
!4782 = !DILocalVariable(name: "ref", scope: !4772, file: !3, line: 4087, type: !4783)
!4783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2316, size: 64)
!4784 = !DILocation(line: 4087, column: 17, scope: !4772)
!4785 = !DILocalVariable(name: "op0", scope: !4772, file: !3, line: 4088, type: !1176)
!4786 = !DILocation(line: 4088, column: 9, scope: !4772)
!4787 = !DILocalVariable(name: "op1", scope: !4772, file: !3, line: 4088, type: !1176)
!4788 = !DILocation(line: 4088, column: 15, scope: !4772)
!4789 = !DILocalVariable(name: "stmt_code", scope: !4772, file: !3, line: 4089, type: !421)
!4790 = !DILocation(line: 4089, column: 20, scope: !4772)
!4791 = !DILocation(line: 4089, column: 45, scope: !4772)
!4792 = !DILocation(line: 4089, column: 32, scope: !4772)
!4793 = !DILocation(line: 4091, column: 4, scope: !4772)
!4794 = !DILocation(line: 4091, column: 15, scope: !4772)
!4795 = !DILocation(line: 4096, column: 8, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 4096, column: 7)
!4797 = !DILocation(line: 4096, column: 18, scope: !4796)
!4798 = !DILocation(line: 4097, column: 8, scope: !4796)
!4799 = !DILocation(line: 4097, column: 32, scope: !4796)
!4800 = !DILocation(line: 4097, column: 13, scope: !4796)
!4801 = !DILocation(line: 4097, column: 38, scope: !4796)
!4802 = !DILocation(line: 4098, column: 7, scope: !4796)
!4803 = !DILocation(line: 4098, column: 11, scope: !4796)
!4804 = !DILocation(line: 4098, column: 21, scope: !4796)
!4805 = !DILocation(line: 4099, column: 4, scope: !4796)
!4806 = !DILocation(line: 4099, column: 30, scope: !4796)
!4807 = !DILocation(line: 4099, column: 7, scope: !4796)
!4808 = !DILocation(line: 4096, column: 7, scope: !4772)
!4809 = !DILocation(line: 4100, column: 21, scope: !4796)
!4810 = !DILocation(line: 4100, column: 5, scope: !4796)
!4811 = !DILocation(line: 4102, column: 21, scope: !4812)
!4812 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 4102, column: 7)
!4813 = !DILocation(line: 4102, column: 8, scope: !4812)
!4814 = !DILocation(line: 4102, column: 7, scope: !4772)
!4815 = !DILocation(line: 4103, column: 12, scope: !4812)
!4816 = !DILocation(line: 4103, column: 5, scope: !4812)
!4817 = !DILocation(line: 4105, column: 7, scope: !4818)
!4818 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 4105, column: 7)
!4819 = !DILocation(line: 4105, column: 17, scope: !4818)
!4820 = !DILocation(line: 4105, column: 7, scope: !4772)
!4821 = !DILocalVariable(name: "base", scope: !4822, file: !3, line: 4107, type: !811)
!4822 = distinct !DILexicalBlock(scope: !4818, file: !3, line: 4106, column: 5)
!4823 = !DILocation(line: 4107, column: 12, scope: !4822)
!4824 = !DILocation(line: 4108, column: 36, scope: !4822)
!4825 = !DILocation(line: 4108, column: 13, scope: !4822)
!4826 = !DILocation(line: 4108, column: 11, scope: !4822)
!4827 = !DILocation(line: 4109, column: 37, scope: !4822)
!4828 = !DILocation(line: 4109, column: 13, scope: !4822)
!4829 = !DILocation(line: 4109, column: 11, scope: !4822)
!4830 = !DILocation(line: 4111, column: 11, scope: !4831)
!4831 = distinct !DILexicalBlock(scope: !4822, file: !3, line: 4111, column: 11)
!4832 = !DILocation(line: 4112, column: 4, scope: !4831)
!4833 = !DILocation(line: 4112, column: 8, scope: !4831)
!4834 = !DILocation(line: 4113, column: 8, scope: !4831)
!4835 = !DILocation(line: 4113, column: 38, scope: !4831)
!4836 = !DILocation(line: 4113, column: 37, scope: !4831)
!4837 = !DILocation(line: 4113, column: 19, scope: !4831)
!4838 = !DILocation(line: 4113, column: 17, scope: !4831)
!4839 = !DILocation(line: 4114, column: 8, scope: !4831)
!4840 = !DILocation(line: 4114, column: 11, scope: !4831)
!4841 = !DILocation(line: 4114, column: 28, scope: !4831)
!4842 = !DILocation(line: 4111, column: 11, scope: !4822)
!4843 = !DILocation(line: 4116, column: 10, scope: !4844)
!4844 = distinct !DILexicalBlock(scope: !4831, file: !3, line: 4115, column: 2)
!4845 = !DILocation(line: 4116, column: 8, scope: !4844)
!4846 = !DILocation(line: 4117, column: 15, scope: !4844)
!4847 = !DILocation(line: 4117, column: 4, scope: !4844)
!4848 = !DILocation(line: 4117, column: 9, scope: !4844)
!4849 = !DILocation(line: 4117, column: 13, scope: !4844)
!4850 = !DILocation(line: 4118, column: 4, scope: !4844)
!4851 = !DILocation(line: 4118, column: 9, scope: !4844)
!4852 = !DILocation(line: 4118, column: 17, scope: !4844)
!4853 = !DILocation(line: 4119, column: 2, scope: !4844)
!4854 = !DILocation(line: 4121, column: 11, scope: !4855)
!4855 = distinct !DILexicalBlock(scope: !4822, file: !3, line: 4121, column: 11)
!4856 = !DILocation(line: 4122, column: 4, scope: !4855)
!4857 = !DILocation(line: 4122, column: 8, scope: !4855)
!4858 = !DILocation(line: 4122, column: 33, scope: !4855)
!4859 = !DILocation(line: 4122, column: 55, scope: !4855)
!4860 = !DILocation(line: 4122, column: 54, scope: !4855)
!4861 = !DILocation(line: 4122, column: 36, scope: !4855)
!4862 = !DILocation(line: 4121, column: 11, scope: !4822)
!4863 = !DILocation(line: 4124, column: 10, scope: !4864)
!4864 = distinct !DILexicalBlock(scope: !4855, file: !3, line: 4123, column: 2)
!4865 = !DILocation(line: 4124, column: 8, scope: !4864)
!4866 = !DILocation(line: 4125, column: 15, scope: !4864)
!4867 = !DILocation(line: 4125, column: 4, scope: !4864)
!4868 = !DILocation(line: 4125, column: 9, scope: !4864)
!4869 = !DILocation(line: 4125, column: 13, scope: !4864)
!4870 = !DILocation(line: 4126, column: 4, scope: !4864)
!4871 = !DILocation(line: 4126, column: 9, scope: !4864)
!4872 = !DILocation(line: 4126, column: 17, scope: !4864)
!4873 = !DILocation(line: 4127, column: 2, scope: !4864)
!4874 = !DILocation(line: 4128, column: 5, scope: !4822)
!4875 = !DILocation(line: 4129, column: 12, scope: !4876)
!4876 = distinct !DILexicalBlock(scope: !4818, file: !3, line: 4129, column: 12)
!4877 = !DILocation(line: 4129, column: 22, scope: !4876)
!4878 = !DILocation(line: 4129, column: 12, scope: !4818)
!4879 = !DILocalVariable(name: "i", scope: !4880, file: !3, line: 4131, type: !7)
!4880 = distinct !DILexicalBlock(scope: !4876, file: !3, line: 4130, column: 5)
!4881 = !DILocation(line: 4131, column: 16, scope: !4880)
!4882 = !DILocalVariable(name: "n", scope: !4880, file: !3, line: 4131, type: !7)
!4883 = !DILocation(line: 4131, column: 19, scope: !4880)
!4884 = !DILocation(line: 4131, column: 45, scope: !4880)
!4885 = !DILocation(line: 4131, column: 23, scope: !4880)
!4886 = !DILocation(line: 4133, column: 14, scope: !4887)
!4887 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 4133, column: 7)
!4888 = !DILocation(line: 4133, column: 12, scope: !4887)
!4889 = !DILocation(line: 4133, column: 19, scope: !4890)
!4890 = distinct !DILexicalBlock(scope: !4887, file: !3, line: 4133, column: 7)
!4891 = !DILocation(line: 4133, column: 23, scope: !4890)
!4892 = !DILocation(line: 4133, column: 21, scope: !4890)
!4893 = !DILocation(line: 4133, column: 7, scope: !4887)
!4894 = !DILocation(line: 4135, column: 31, scope: !4895)
!4895 = distinct !DILexicalBlock(scope: !4890, file: !3, line: 4134, column: 2)
!4896 = !DILocation(line: 4135, column: 37, scope: !4895)
!4897 = !DILocation(line: 4135, column: 10, scope: !4895)
!4898 = !DILocation(line: 4135, column: 8, scope: !4895)
!4899 = !DILocation(line: 4137, column: 8, scope: !4900)
!4900 = distinct !DILexicalBlock(scope: !4895, file: !3, line: 4137, column: 8)
!4901 = !DILocation(line: 4138, column: 8, scope: !4900)
!4902 = !DILocation(line: 4138, column: 12, scope: !4900)
!4903 = !DILocation(line: 4138, column: 37, scope: !4900)
!4904 = !DILocation(line: 4138, column: 59, scope: !4900)
!4905 = !DILocation(line: 4138, column: 58, scope: !4900)
!4906 = !DILocation(line: 4138, column: 40, scope: !4900)
!4907 = !DILocation(line: 4137, column: 8, scope: !4895)
!4908 = !DILocation(line: 4140, column: 14, scope: !4909)
!4909 = distinct !DILexicalBlock(scope: !4900, file: !3, line: 4139, column: 6)
!4910 = !DILocation(line: 4140, column: 12, scope: !4909)
!4911 = !DILocation(line: 4141, column: 19, scope: !4909)
!4912 = !DILocation(line: 4141, column: 8, scope: !4909)
!4913 = !DILocation(line: 4141, column: 13, scope: !4909)
!4914 = !DILocation(line: 4141, column: 17, scope: !4909)
!4915 = !DILocation(line: 4142, column: 8, scope: !4909)
!4916 = !DILocation(line: 4142, column: 13, scope: !4909)
!4917 = !DILocation(line: 4142, column: 21, scope: !4909)
!4918 = !DILocation(line: 4143, column: 6, scope: !4909)
!4919 = !DILocation(line: 4144, column: 2, scope: !4895)
!4920 = !DILocation(line: 4133, column: 27, scope: !4890)
!4921 = !DILocation(line: 4133, column: 7, scope: !4890)
!4922 = distinct !{!4922, !4893, !4923}
!4923 = !DILocation(line: 4144, column: 2, scope: !4887)
!4924 = !DILocation(line: 4145, column: 5, scope: !4880)
!4925 = !DILocation(line: 4147, column: 10, scope: !4772)
!4926 = !DILocation(line: 4147, column: 3, scope: !4772)
!4927 = !DILocation(line: 4148, column: 1, scope: !4772)
!4928 = distinct !DISubprogram(name: "gimple_code", scope: !422, file: !422, line: 1052, type: !4929, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4929 = !DISubroutineType(types: !4930)
!4930 = !{!421, !2363}
!4931 = !DILocalVariable(name: "g", arg: 1, scope: !4928, file: !422, line: 1052, type: !2363)
!4932 = !DILocation(line: 1052, column: 27, scope: !4928)
!4933 = !DILocation(line: 1054, column: 10, scope: !4928)
!4934 = !DILocation(line: 1054, column: 13, scope: !4928)
!4935 = !DILocation(line: 1054, column: 20, scope: !4928)
!4936 = !DILocation(line: 1054, column: 3, scope: !4928)
!4937 = distinct !DISubprogram(name: "gimple_asm_volatile_p", scope: !422, file: !422, line: 2739, type: !4938, scopeLine: 2740, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4938 = !DISubroutineType(types: !4939)
!4939 = !{!931, !2363}
!4940 = !DILocalVariable(name: "gs", arg: 1, scope: !4937, file: !422, line: 2739, type: !2363)
!4941 = !DILocation(line: 2739, column: 37, scope: !4937)
!4942 = !DILocation(line: 2742, column: 11, scope: !4937)
!4943 = !DILocation(line: 2742, column: 15, scope: !4937)
!4944 = !DILocation(line: 2742, column: 22, scope: !4937)
!4945 = !DILocation(line: 2742, column: 30, scope: !4937)
!4946 = !DILocation(line: 2742, column: 49, scope: !4937)
!4947 = !DILocation(line: 2742, column: 10, scope: !4937)
!4948 = !DILocation(line: 2742, column: 3, scope: !4937)
!4949 = distinct !DISubprogram(name: "gimple_vuse", scope: !422, file: !422, line: 1365, type: !4950, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4950 = !DISubroutineType(types: !4951)
!4951 = !{!811, !2363}
!4952 = !DILocalVariable(name: "g", arg: 1, scope: !4949, file: !422, line: 1365, type: !2363)
!4953 = !DILocation(line: 1365, column: 27, scope: !4949)
!4954 = !DILocation(line: 1367, column: 28, scope: !4955)
!4955 = distinct !DILexicalBlock(scope: !4949, file: !422, line: 1367, column: 7)
!4956 = !DILocation(line: 1367, column: 8, scope: !4955)
!4957 = !DILocation(line: 1367, column: 7, scope: !4949)
!4958 = !DILocation(line: 1368, column: 5, scope: !4955)
!4959 = !DILocation(line: 1369, column: 10, scope: !4949)
!4960 = !DILocation(line: 1369, column: 13, scope: !4949)
!4961 = !DILocation(line: 1369, column: 23, scope: !4949)
!4962 = !DILocation(line: 1369, column: 3, scope: !4949)
!4963 = !DILocation(line: 1370, column: 1, scope: !4949)
!4964 = distinct !DISubprogram(name: "gimple_assign_lhs_ptr", scope: !422, file: !422, line: 1704, type: !4965, scopeLine: 1705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4965 = !DISubroutineType(types: !4966)
!4966 = !{!1176, !2363}
!4967 = !DILocalVariable(name: "gs", arg: 1, scope: !4964, file: !422, line: 1704, type: !2363)
!4968 = !DILocation(line: 1704, column: 37, scope: !4964)
!4969 = !DILocation(line: 1707, column: 25, scope: !4964)
!4970 = !DILocation(line: 1707, column: 10, scope: !4964)
!4971 = !DILocation(line: 1707, column: 3, scope: !4964)
!4972 = distinct !DISubprogram(name: "gimple_assign_rhs1_ptr", scope: !422, file: !422, line: 1738, type: !4965, scopeLine: 1739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4973 = !DILocalVariable(name: "gs", arg: 1, scope: !4972, file: !422, line: 1738, type: !2363)
!4974 = !DILocation(line: 1738, column: 38, scope: !4972)
!4975 = !DILocation(line: 1741, column: 25, scope: !4972)
!4976 = !DILocation(line: 1741, column: 10, scope: !4972)
!4977 = !DILocation(line: 1741, column: 3, scope: !4972)
!4978 = distinct !DISubprogram(name: "VEC_data_ref_loc_heap_safe_push", scope: !391, file: !391, line: 376, type: !4979, scopeLine: 376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4979 = !DISubroutineType(types: !4980)
!4980 = !{!4783, !4775, !4981}
!4981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4982, size: 64)
!4982 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2316)
!4983 = !DILocalVariable(name: "vec_", arg: 1, scope: !4978, file: !391, line: 376, type: !4775)
!4984 = !DILocation(line: 376, column: 1, scope: !4978)
!4985 = !DILocalVariable(name: "obj_", arg: 2, scope: !4978, file: !391, line: 376, type: !4981)
!4986 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !422, file: !422, line: 2013, type: !4987, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!4987 = !DISubroutineType(types: !4988)
!4988 = !{!7, !2363}
!4989 = !DILocalVariable(name: "gs", arg: 1, scope: !4986, file: !422, line: 2013, type: !2363)
!4990 = !DILocation(line: 2013, column: 36, scope: !4986)
!4991 = !DILocalVariable(name: "num_ops", scope: !4986, file: !422, line: 2015, type: !7)
!4992 = !DILocation(line: 2015, column: 12, scope: !4986)
!4993 = !DILocation(line: 2017, column: 29, scope: !4986)
!4994 = !DILocation(line: 2017, column: 13, scope: !4986)
!4995 = !DILocation(line: 2017, column: 11, scope: !4986)
!4996 = !DILocation(line: 2018, column: 10, scope: !4986)
!4997 = !DILocation(line: 2018, column: 18, scope: !4986)
!4998 = !DILocation(line: 2018, column: 3, scope: !4986)
!4999 = distinct !DISubprogram(name: "gimple_call_arg_ptr", scope: !422, file: !422, line: 2036, type: !5000, scopeLine: 2037, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5000 = !DISubroutineType(types: !5001)
!5001 = !{!1176, !2363, !7}
!5002 = !DILocalVariable(name: "gs", arg: 1, scope: !4999, file: !422, line: 2036, type: !2363)
!5003 = !DILocation(line: 2036, column: 35, scope: !4999)
!5004 = !DILocalVariable(name: "index", arg: 2, scope: !4999, file: !422, line: 2036, type: !7)
!5005 = !DILocation(line: 2036, column: 48, scope: !4999)
!5006 = !DILocation(line: 2039, column: 25, scope: !4999)
!5007 = !DILocation(line: 2039, column: 29, scope: !4999)
!5008 = !DILocation(line: 2039, column: 35, scope: !4999)
!5009 = !DILocation(line: 2039, column: 10, scope: !4999)
!5010 = !DILocation(line: 2039, column: 3, scope: !4999)
!5011 = distinct !DISubprogram(name: "find_data_references_in_stmt", scope: !3, file: !3, line: 4155, type: !5012, scopeLine: 4157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5012 = !DISubroutineType(types: !5013)
!5013 = !{!931, !1357, !1142, !5014}
!5014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2321, size: 64)
!5015 = !DILocalVariable(name: "nest", arg: 1, scope: !5011, file: !3, line: 4155, type: !1357)
!5016 = !DILocation(line: 4155, column: 44, scope: !5011)
!5017 = !DILocalVariable(name: "stmt", arg: 2, scope: !5011, file: !3, line: 4155, type: !1142)
!5018 = !DILocation(line: 4155, column: 57, scope: !5011)
!5019 = !DILocalVariable(name: "datarefs", arg: 3, scope: !5011, file: !3, line: 4156, type: !5014)
!5020 = !DILocation(line: 4156, column: 41, scope: !5011)
!5021 = !DILocalVariable(name: "i", scope: !5011, file: !3, line: 4158, type: !7)
!5022 = !DILocation(line: 4158, column: 12, scope: !5011)
!5023 = !DILocalVariable(name: "references", scope: !5011, file: !3, line: 4159, type: !2304)
!5024 = !DILocation(line: 4159, column: 29, scope: !5011)
!5025 = !DILocalVariable(name: "ref", scope: !5011, file: !3, line: 4160, type: !4783)
!5026 = !DILocation(line: 4160, column: 17, scope: !5011)
!5027 = !DILocalVariable(name: "ret", scope: !5011, file: !3, line: 4161, type: !931)
!5028 = !DILocation(line: 4161, column: 8, scope: !5011)
!5029 = !DILocalVariable(name: "dr", scope: !5011, file: !3, line: 4162, type: !2241)
!5030 = !DILocation(line: 4162, column: 20, scope: !5011)
!5031 = !DILocation(line: 4164, column: 31, scope: !5032)
!5032 = distinct !DILexicalBlock(scope: !5011, file: !3, line: 4164, column: 7)
!5033 = !DILocation(line: 4164, column: 7, scope: !5032)
!5034 = !DILocation(line: 4164, column: 7, scope: !5011)
!5035 = !DILocation(line: 4166, column: 7, scope: !5036)
!5036 = distinct !DILexicalBlock(scope: !5032, file: !3, line: 4165, column: 5)
!5037 = !DILocation(line: 4167, column: 7, scope: !5036)
!5038 = !DILocation(line: 4170, column: 10, scope: !5039)
!5039 = distinct !DILexicalBlock(scope: !5011, file: !3, line: 4170, column: 3)
!5040 = !DILocation(line: 4170, column: 8, scope: !5039)
!5041 = !DILocation(line: 4170, column: 15, scope: !5042)
!5042 = distinct !DILexicalBlock(scope: !5039, file: !3, line: 4170, column: 3)
!5043 = !DILocation(line: 4170, column: 3, scope: !5039)
!5044 = !DILocation(line: 4172, column: 29, scope: !5045)
!5045 = distinct !DILexicalBlock(scope: !5042, file: !3, line: 4171, column: 5)
!5046 = !DILocation(line: 4172, column: 36, scope: !5045)
!5047 = !DILocation(line: 4172, column: 41, scope: !5045)
!5048 = !DILocation(line: 4172, column: 35, scope: !5045)
!5049 = !DILocation(line: 4172, column: 46, scope: !5045)
!5050 = !DILocation(line: 4172, column: 52, scope: !5045)
!5051 = !DILocation(line: 4172, column: 57, scope: !5045)
!5052 = !DILocation(line: 4172, column: 12, scope: !5045)
!5053 = !DILocation(line: 4172, column: 10, scope: !5045)
!5054 = !DILocation(line: 4173, column: 7, scope: !5045)
!5055 = !DILocation(line: 4178, column: 35, scope: !5056)
!5056 = distinct !DILexicalBlock(scope: !5045, file: !3, line: 4178, column: 11)
!5057 = !DILocation(line: 4178, column: 11, scope: !5056)
!5058 = !DILocation(line: 4178, column: 39, scope: !5056)
!5059 = !DILocation(line: 4178, column: 42, scope: !5056)
!5060 = !DILocation(line: 4178, column: 11, scope: !5045)
!5061 = !DILocation(line: 4180, column: 19, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !5056, file: !3, line: 4179, column: 2)
!5063 = !DILocation(line: 4180, column: 4, scope: !5062)
!5064 = !DILocation(line: 4181, column: 8, scope: !5065)
!5065 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 4181, column: 8)
!5066 = !DILocation(line: 4181, column: 18, scope: !5065)
!5067 = !DILocation(line: 4181, column: 22, scope: !5065)
!5068 = !DILocation(line: 4181, column: 33, scope: !5065)
!5069 = !DILocation(line: 4181, column: 8, scope: !5062)
!5070 = !DILocation(line: 4182, column: 15, scope: !5065)
!5071 = !DILocation(line: 4182, column: 6, scope: !5065)
!5072 = !DILocation(line: 4183, column: 8, scope: !5062)
!5073 = !DILocation(line: 4184, column: 4, scope: !5062)
!5074 = !DILocation(line: 4187, column: 7, scope: !5045)
!5075 = !DILocation(line: 4188, column: 5, scope: !5045)
!5076 = !DILocation(line: 4170, column: 64, scope: !5042)
!5077 = !DILocation(line: 4170, column: 3, scope: !5042)
!5078 = distinct !{!5078, !5043, !5079}
!5079 = !DILocation(line: 4188, column: 5, scope: !5039)
!5080 = !DILocation(line: 4189, column: 3, scope: !5011)
!5081 = !DILocation(line: 4190, column: 10, scope: !5011)
!5082 = !DILocation(line: 4190, column: 3, scope: !5011)
!5083 = !DILocation(line: 4191, column: 1, scope: !5011)
!5084 = distinct !DISubprogram(name: "VEC_data_ref_loc_heap_free", scope: !391, file: !391, line: 376, type: !5085, scopeLine: 376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5085 = !DISubroutineType(types: !5086)
!5086 = !{null, !4775}
!5087 = !DILocalVariable(name: "vec_", arg: 1, scope: !5084, file: !391, line: 376, type: !4775)
!5088 = !DILocation(line: 376, column: 1, scope: !5084)
!5089 = !DILocation(line: 376, column: 1, scope: !5090)
!5090 = distinct !DILexicalBlock(scope: !5084, file: !391, line: 376, column: 1)
!5091 = distinct !DISubprogram(name: "VEC_data_ref_loc_base_iterate", scope: !391, file: !391, line: 375, type: !5092, scopeLine: 375, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5092 = !DISubroutineType(types: !5093)
!5093 = !{!908, !5094, !7, !5095}
!5094 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2309, size: 64)
!5095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4783, size: 64)
!5096 = !DILocalVariable(name: "vec_", arg: 1, scope: !5091, file: !391, line: 375, type: !5094)
!5097 = !DILocation(line: 375, column: 1, scope: !5091)
!5098 = !DILocalVariable(name: "ix_", arg: 2, scope: !5091, file: !391, line: 375, type: !7)
!5099 = !DILocalVariable(name: "ptr", arg: 3, scope: !5091, file: !391, line: 375, type: !5095)
!5100 = !DILocation(line: 375, column: 1, scope: !5101)
!5101 = distinct !DILexicalBlock(scope: !5091, file: !391, line: 375, column: 1)
!5102 = !DILocation(line: 375, column: 1, scope: !5103)
!5103 = distinct !DILexicalBlock(scope: !5101, file: !391, line: 375, column: 1)
!5104 = !DILocation(line: 375, column: 1, scope: !5105)
!5105 = distinct !DILexicalBlock(scope: !5101, file: !391, line: 375, column: 1)
!5106 = distinct !DISubprogram(name: "dr_address_invariant_p", scope: !3, file: !3, line: 886, type: !3507, scopeLine: 887, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5107 = !DILocalVariable(name: "dr", arg: 1, scope: !5106, file: !3, line: 886, type: !2171)
!5108 = !DILocation(line: 886, column: 48, scope: !5106)
!5109 = !DILocalVariable(name: "i", scope: !5106, file: !3, line: 888, type: !7)
!5110 = !DILocation(line: 888, column: 12, scope: !5106)
!5111 = !DILocalVariable(name: "idx", scope: !5106, file: !3, line: 889, type: !811)
!5112 = !DILocation(line: 889, column: 8, scope: !5106)
!5113 = !DILocation(line: 891, column: 10, scope: !5114)
!5114 = distinct !DILexicalBlock(scope: !5106, file: !3, line: 891, column: 3)
!5115 = !DILocation(line: 891, column: 8, scope: !5114)
!5116 = !DILocation(line: 891, column: 15, scope: !5117)
!5117 = distinct !DILexicalBlock(scope: !5114, file: !3, line: 891, column: 3)
!5118 = !DILocation(line: 891, column: 3, scope: !5114)
!5119 = !DILocation(line: 892, column: 31, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !5117, file: !3, line: 892, column: 9)
!5121 = !DILocation(line: 892, column: 9, scope: !5120)
!5122 = !DILocation(line: 892, column: 9, scope: !5117)
!5123 = !DILocation(line: 893, column: 7, scope: !5120)
!5124 = !DILocation(line: 892, column: 40, scope: !5120)
!5125 = !DILocation(line: 891, column: 64, scope: !5117)
!5126 = !DILocation(line: 891, column: 3, scope: !5117)
!5127 = distinct !{!5127, !5118, !5128}
!5128 = !DILocation(line: 893, column: 14, scope: !5114)
!5129 = !DILocation(line: 895, column: 3, scope: !5106)
!5130 = !DILocation(line: 896, column: 1, scope: !5106)
!5131 = distinct !DISubprogram(name: "VEC_data_reference_p_heap_safe_push", scope: !391, file: !391, line: 209, type: !5132, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5132 = !DISubroutineType(types: !5133)
!5133 = !{!2472, !5014, !2241}
!5134 = !DILocalVariable(name: "vec_", arg: 1, scope: !5131, file: !391, line: 209, type: !5014)
!5135 = !DILocation(line: 209, column: 1, scope: !5131)
!5136 = !DILocalVariable(name: "obj_", arg: 2, scope: !5131, file: !391, line: 209, type: !2241)
!5137 = distinct !DISubprogram(name: "graphite_find_data_references_in_stmt", scope: !3, file: !3, line: 4198, type: !5012, scopeLine: 4200, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5138 = !DILocalVariable(name: "nest", arg: 1, scope: !5137, file: !3, line: 4198, type: !1357)
!5139 = !DILocation(line: 4198, column: 53, scope: !5137)
!5140 = !DILocalVariable(name: "stmt", arg: 2, scope: !5137, file: !3, line: 4198, type: !1142)
!5141 = !DILocation(line: 4198, column: 66, scope: !5137)
!5142 = !DILocalVariable(name: "datarefs", arg: 3, scope: !5137, file: !3, line: 4199, type: !5014)
!5143 = !DILocation(line: 4199, column: 43, scope: !5137)
!5144 = !DILocalVariable(name: "i", scope: !5137, file: !3, line: 4201, type: !7)
!5145 = !DILocation(line: 4201, column: 12, scope: !5137)
!5146 = !DILocalVariable(name: "references", scope: !5137, file: !3, line: 4202, type: !2304)
!5147 = !DILocation(line: 4202, column: 29, scope: !5137)
!5148 = !DILocalVariable(name: "ref", scope: !5137, file: !3, line: 4203, type: !4783)
!5149 = !DILocation(line: 4203, column: 17, scope: !5137)
!5150 = !DILocalVariable(name: "ret", scope: !5137, file: !3, line: 4204, type: !931)
!5151 = !DILocation(line: 4204, column: 8, scope: !5137)
!5152 = !DILocalVariable(name: "dr", scope: !5137, file: !3, line: 4205, type: !2241)
!5153 = !DILocation(line: 4205, column: 20, scope: !5137)
!5154 = !DILocation(line: 4207, column: 31, scope: !5155)
!5155 = distinct !DILexicalBlock(scope: !5137, file: !3, line: 4207, column: 7)
!5156 = !DILocation(line: 4207, column: 7, scope: !5155)
!5157 = !DILocation(line: 4207, column: 7, scope: !5137)
!5158 = !DILocation(line: 4209, column: 7, scope: !5159)
!5159 = distinct !DILexicalBlock(scope: !5155, file: !3, line: 4208, column: 5)
!5160 = !DILocation(line: 4210, column: 7, scope: !5159)
!5161 = !DILocation(line: 4213, column: 10, scope: !5162)
!5162 = distinct !DILexicalBlock(scope: !5137, file: !3, line: 4213, column: 3)
!5163 = !DILocation(line: 4213, column: 8, scope: !5162)
!5164 = !DILocation(line: 4213, column: 15, scope: !5165)
!5165 = distinct !DILexicalBlock(scope: !5162, file: !3, line: 4213, column: 3)
!5166 = !DILocation(line: 4213, column: 3, scope: !5162)
!5167 = !DILocation(line: 4215, column: 29, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !5165, file: !3, line: 4214, column: 5)
!5169 = !DILocation(line: 4215, column: 36, scope: !5168)
!5170 = !DILocation(line: 4215, column: 41, scope: !5168)
!5171 = !DILocation(line: 4215, column: 35, scope: !5168)
!5172 = !DILocation(line: 4215, column: 46, scope: !5168)
!5173 = !DILocation(line: 4215, column: 52, scope: !5168)
!5174 = !DILocation(line: 4215, column: 57, scope: !5168)
!5175 = !DILocation(line: 4215, column: 12, scope: !5168)
!5176 = !DILocation(line: 4215, column: 10, scope: !5168)
!5177 = !DILocation(line: 4216, column: 7, scope: !5168)
!5178 = !DILocation(line: 4217, column: 7, scope: !5168)
!5179 = !DILocation(line: 4218, column: 5, scope: !5168)
!5180 = !DILocation(line: 4213, column: 64, scope: !5165)
!5181 = !DILocation(line: 4213, column: 3, scope: !5165)
!5182 = distinct !{!5182, !5166, !5183}
!5183 = !DILocation(line: 4218, column: 5, scope: !5162)
!5184 = !DILocation(line: 4220, column: 3, scope: !5137)
!5185 = !DILocation(line: 4221, column: 10, scope: !5137)
!5186 = !DILocation(line: 4221, column: 3, scope: !5137)
!5187 = !DILocation(line: 4222, column: 1, scope: !5137)
!5188 = distinct !DISubprogram(name: "find_data_references_in_loop", scope: !3, file: !3, line: 4259, type: !5189, scopeLine: 4261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5189 = !DISubroutineType(types: !5190)
!5190 = !{!811, !1357, !5014}
!5191 = !DILocalVariable(name: "loop", arg: 1, scope: !5188, file: !3, line: 4259, type: !1357)
!5192 = !DILocation(line: 4259, column: 44, scope: !5188)
!5193 = !DILocalVariable(name: "datarefs", arg: 2, scope: !5188, file: !3, line: 4260, type: !5014)
!5194 = !DILocation(line: 4260, column: 41, scope: !5188)
!5195 = !DILocalVariable(name: "bb", scope: !5188, file: !3, line: 4262, type: !1594)
!5196 = !DILocation(line: 4262, column: 15, scope: !5188)
!5197 = !DILocalVariable(name: "bbs", scope: !5188, file: !3, line: 4262, type: !5198)
!5198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1594, size: 64)
!5199 = !DILocation(line: 4262, column: 20, scope: !5188)
!5200 = !DILocalVariable(name: "i", scope: !5188, file: !3, line: 4263, type: !7)
!5201 = !DILocation(line: 4263, column: 16, scope: !5188)
!5202 = !DILocation(line: 4265, column: 37, scope: !5188)
!5203 = !DILocation(line: 4265, column: 9, scope: !5188)
!5204 = !DILocation(line: 4265, column: 7, scope: !5188)
!5205 = !DILocation(line: 4267, column: 10, scope: !5206)
!5206 = distinct !DILexicalBlock(scope: !5188, file: !3, line: 4267, column: 3)
!5207 = !DILocation(line: 4267, column: 8, scope: !5206)
!5208 = !DILocation(line: 4267, column: 15, scope: !5209)
!5209 = distinct !DILexicalBlock(scope: !5206, file: !3, line: 4267, column: 3)
!5210 = !DILocation(line: 4267, column: 19, scope: !5209)
!5211 = !DILocation(line: 4267, column: 25, scope: !5209)
!5212 = !DILocation(line: 4267, column: 17, scope: !5209)
!5213 = !DILocation(line: 4267, column: 3, scope: !5206)
!5214 = !DILocation(line: 4269, column: 12, scope: !5215)
!5215 = distinct !DILexicalBlock(scope: !5209, file: !3, line: 4268, column: 5)
!5216 = !DILocation(line: 4269, column: 16, scope: !5215)
!5217 = !DILocation(line: 4269, column: 10, scope: !5215)
!5218 = !DILocation(line: 4271, column: 39, scope: !5219)
!5219 = distinct !DILexicalBlock(scope: !5215, file: !3, line: 4271, column: 11)
!5220 = !DILocation(line: 4271, column: 45, scope: !5219)
!5221 = !DILocation(line: 4271, column: 49, scope: !5219)
!5222 = !DILocation(line: 4271, column: 11, scope: !5219)
!5223 = !DILocation(line: 4271, column: 62, scope: !5219)
!5224 = !DILocation(line: 4271, column: 59, scope: !5219)
!5225 = !DILocation(line: 4271, column: 11, scope: !5215)
!5226 = !DILocation(line: 4273, column: 17, scope: !5227)
!5227 = distinct !DILexicalBlock(scope: !5219, file: !3, line: 4272, column: 9)
!5228 = !DILocation(line: 4273, column: 11, scope: !5227)
!5229 = !DILocation(line: 4274, column: 18, scope: !5227)
!5230 = !DILocation(line: 4274, column: 11, scope: !5227)
!5231 = !DILocation(line: 4276, column: 5, scope: !5215)
!5232 = !DILocation(line: 4267, column: 37, scope: !5209)
!5233 = !DILocation(line: 4267, column: 3, scope: !5209)
!5234 = distinct !{!5234, !5213, !5235}
!5235 = !DILocation(line: 4276, column: 5, scope: !5206)
!5236 = !DILocation(line: 4277, column: 9, scope: !5188)
!5237 = !DILocation(line: 4277, column: 3, scope: !5188)
!5238 = !DILocation(line: 4279, column: 3, scope: !5188)
!5239 = !DILocation(line: 4280, column: 1, scope: !5188)
!5240 = distinct !DISubprogram(name: "find_data_references_in_bb", scope: !3, file: !3, line: 4229, type: !5241, scopeLine: 4231, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5241 = !DISubroutineType(types: !5242)
!5242 = !{!811, !1357, !1594, !5014}
!5243 = !DILocalVariable(name: "loop", arg: 1, scope: !5240, file: !3, line: 4229, type: !1357)
!5244 = !DILocation(line: 4229, column: 42, scope: !5240)
!5245 = !DILocalVariable(name: "bb", arg: 2, scope: !5240, file: !3, line: 4229, type: !1594)
!5246 = !DILocation(line: 4229, column: 60, scope: !5240)
!5247 = !DILocalVariable(name: "datarefs", arg: 3, scope: !5240, file: !3, line: 4230, type: !5014)
!5248 = !DILocation(line: 4230, column: 60, scope: !5240)
!5249 = !DILocalVariable(name: "bsi", scope: !5240, file: !3, line: 4232, type: !5250)
!5250 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !422, line: 265, baseType: !5251)
!5251 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !422, line: 254, size: 192, elements: !5252)
!5252 = !{!5253, !5254, !5255}
!5253 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !5251, file: !422, line: 257, baseType: !1137, size: 64)
!5254 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !5251, file: !422, line: 263, baseType: !1132, size: 64, offset: 64)
!5255 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !5251, file: !422, line: 264, baseType: !1594, size: 64, offset: 128)
!5256 = !DILocation(line: 4232, column: 24, scope: !5240)
!5257 = !DILocation(line: 4234, column: 28, scope: !5258)
!5258 = distinct !DILexicalBlock(scope: !5240, file: !3, line: 4234, column: 3)
!5259 = !DILocation(line: 4234, column: 14, scope: !5258)
!5260 = !DILocation(line: 4234, column: 8, scope: !5258)
!5261 = !DILocation(line: 4234, column: 34, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5258, file: !3, line: 4234, column: 3)
!5263 = !DILocation(line: 4234, column: 33, scope: !5262)
!5264 = !DILocation(line: 4234, column: 3, scope: !5258)
!5265 = !DILocalVariable(name: "stmt", scope: !5266, file: !3, line: 4236, type: !1142)
!5266 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 4235, column: 5)
!5267 = !DILocation(line: 4236, column: 14, scope: !5266)
!5268 = !DILocation(line: 4236, column: 21, scope: !5266)
!5269 = !DILocation(line: 4238, column: 42, scope: !5270)
!5270 = distinct !DILexicalBlock(scope: !5266, file: !3, line: 4238, column: 11)
!5271 = !DILocation(line: 4238, column: 48, scope: !5270)
!5272 = !DILocation(line: 4238, column: 54, scope: !5270)
!5273 = !DILocation(line: 4238, column: 12, scope: !5270)
!5274 = !DILocation(line: 4238, column: 11, scope: !5266)
!5275 = !DILocalVariable(name: "res", scope: !5276, file: !3, line: 4240, type: !2171)
!5276 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 4239, column: 9)
!5277 = !DILocation(line: 4240, column: 34, scope: !5276)
!5278 = !DILocation(line: 4241, column: 17, scope: !5276)
!5279 = !DILocation(line: 4241, column: 15, scope: !5276)
!5280 = !DILocation(line: 4242, column: 11, scope: !5276)
!5281 = !DILocation(line: 4244, column: 18, scope: !5276)
!5282 = !DILocation(line: 4244, column: 11, scope: !5276)
!5283 = !DILocation(line: 4246, column: 5, scope: !5266)
!5284 = !DILocation(line: 4234, column: 51, scope: !5262)
!5285 = !DILocation(line: 4234, column: 3, scope: !5262)
!5286 = distinct !{!5286, !5264, !5287}
!5287 = !DILocation(line: 4246, column: 5, scope: !5258)
!5288 = !DILocation(line: 4248, column: 3, scope: !5240)
!5289 = !DILocation(line: 4249, column: 1, scope: !5240)
!5290 = distinct !DISubprogram(name: "find_loop_nest", scope: !3, file: !3, line: 4316, type: !5291, scopeLine: 4317, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5291 = !DISubroutineType(types: !5292)
!5292 = !{!931, !1357, !5293}
!5293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2206, size: 64)
!5294 = !DILocalVariable(name: "loop", arg: 1, scope: !5290, file: !3, line: 4316, type: !1357)
!5295 = !DILocation(line: 4316, column: 30, scope: !5290)
!5296 = !DILocalVariable(name: "loop_nest", arg: 2, scope: !5290, file: !3, line: 4316, type: !5293)
!5297 = !DILocation(line: 4316, column: 57, scope: !5290)
!5298 = !DILocation(line: 4318, column: 3, scope: !5290)
!5299 = !DILocation(line: 4319, column: 7, scope: !5300)
!5300 = distinct !DILexicalBlock(scope: !5290, file: !3, line: 4319, column: 7)
!5301 = !DILocation(line: 4319, column: 13, scope: !5300)
!5302 = !DILocation(line: 4319, column: 7, scope: !5290)
!5303 = !DILocation(line: 4320, column: 30, scope: !5300)
!5304 = !DILocation(line: 4320, column: 36, scope: !5300)
!5305 = !DILocation(line: 4320, column: 43, scope: !5300)
!5306 = !DILocation(line: 4320, column: 12, scope: !5300)
!5307 = !DILocation(line: 4320, column: 5, scope: !5300)
!5308 = !DILocation(line: 4321, column: 3, scope: !5290)
!5309 = !DILocation(line: 4322, column: 1, scope: !5290)
!5310 = distinct !DISubprogram(name: "VEC_loop_p_heap_safe_push", scope: !146, file: !146, line: 86, type: !5311, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5311 = !DISubroutineType(types: !5312)
!5312 = !{!3073, !5293, !1384}
!5313 = !DILocalVariable(name: "vec_", arg: 1, scope: !5310, file: !146, line: 86, type: !5293)
!5314 = !DILocation(line: 86, column: 1, scope: !5310)
!5315 = !DILocalVariable(name: "obj_", arg: 2, scope: !5310, file: !146, line: 86, type: !1384)
!5316 = distinct !DISubprogram(name: "find_loop_nest_1", scope: !3, file: !3, line: 4285, type: !5291, scopeLine: 4286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5317 = !DILocalVariable(name: "loop", arg: 1, scope: !5316, file: !3, line: 4285, type: !1357)
!5318 = !DILocation(line: 4285, column: 32, scope: !5316)
!5319 = !DILocalVariable(name: "loop_nest", arg: 2, scope: !5316, file: !3, line: 4285, type: !5293)
!5320 = !DILocation(line: 4285, column: 59, scope: !5316)
!5321 = !DILocation(line: 4301, column: 7, scope: !5322)
!5322 = distinct !DILexicalBlock(scope: !5316, file: !3, line: 4301, column: 7)
!5323 = !DILocation(line: 4301, column: 13, scope: !5322)
!5324 = !DILocation(line: 4301, column: 7, scope: !5316)
!5325 = !DILocation(line: 4302, column: 5, scope: !5322)
!5326 = !DILocation(line: 4304, column: 3, scope: !5316)
!5327 = !DILocation(line: 4305, column: 7, scope: !5328)
!5328 = distinct !DILexicalBlock(scope: !5316, file: !3, line: 4305, column: 7)
!5329 = !DILocation(line: 4305, column: 13, scope: !5328)
!5330 = !DILocation(line: 4305, column: 7, scope: !5316)
!5331 = !DILocation(line: 4306, column: 30, scope: !5328)
!5332 = !DILocation(line: 4306, column: 36, scope: !5328)
!5333 = !DILocation(line: 4306, column: 43, scope: !5328)
!5334 = !DILocation(line: 4306, column: 12, scope: !5328)
!5335 = !DILocation(line: 4306, column: 5, scope: !5328)
!5336 = !DILocation(line: 4307, column: 3, scope: !5316)
!5337 = !DILocation(line: 4308, column: 1, scope: !5316)
!5338 = distinct !DISubprogram(name: "compute_data_dependences_for_loop", scope: !3, file: !3, line: 4332, type: !5339, scopeLine: 4336, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5339 = !DISubroutineType(types: !5340)
!5340 = !{!931, !1357, !931, !5014, !4307}
!5341 = !DILocalVariable(name: "loop", arg: 1, scope: !5338, file: !3, line: 4332, type: !1357)
!5342 = !DILocation(line: 4332, column: 49, scope: !5338)
!5343 = !DILocalVariable(name: "compute_self_and_read_read_dependences", arg: 2, scope: !5338, file: !3, line: 4333, type: !931)
!5344 = !DILocation(line: 4333, column: 13, scope: !5338)
!5345 = !DILocalVariable(name: "datarefs", arg: 3, scope: !5338, file: !3, line: 4334, type: !5014)
!5346 = !DILocation(line: 4334, column: 39, scope: !5338)
!5347 = !DILocalVariable(name: "dependence_relations", arg: 4, scope: !5338, file: !3, line: 4335, type: !4307)
!5348 = !DILocation(line: 4335, column: 28, scope: !5338)
!5349 = !DILocalVariable(name: "res", scope: !5338, file: !3, line: 4337, type: !931)
!5350 = !DILocation(line: 4337, column: 8, scope: !5338)
!5351 = !DILocalVariable(name: "vloops", scope: !5338, file: !3, line: 4338, type: !2206)
!5352 = !DILocation(line: 4338, column: 23, scope: !5338)
!5353 = !DILocation(line: 4338, column: 32, scope: !5338)
!5354 = !DILocation(line: 4340, column: 3, scope: !5338)
!5355 = !DILocation(line: 4345, column: 8, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5338, file: !3, line: 4345, column: 7)
!5357 = !DILocation(line: 4346, column: 7, scope: !5356)
!5358 = !DILocation(line: 4346, column: 27, scope: !5356)
!5359 = !DILocation(line: 4346, column: 11, scope: !5356)
!5360 = !DILocation(line: 4347, column: 7, scope: !5356)
!5361 = !DILocation(line: 4347, column: 40, scope: !5356)
!5362 = !DILocation(line: 4347, column: 46, scope: !5356)
!5363 = !DILocation(line: 4347, column: 10, scope: !5356)
!5364 = !DILocation(line: 4347, column: 59, scope: !5356)
!5365 = !DILocation(line: 4347, column: 56, scope: !5356)
!5366 = !DILocation(line: 4345, column: 7, scope: !5338)
!5367 = !DILocalVariable(name: "ddr", scope: !5368, file: !3, line: 4349, type: !2243)
!5368 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 4348, column: 5)
!5369 = !DILocation(line: 4349, column: 40, scope: !5368)
!5370 = !DILocation(line: 4353, column: 62, scope: !5368)
!5371 = !DILocation(line: 4353, column: 13, scope: !5368)
!5372 = !DILocation(line: 4353, column: 11, scope: !5368)
!5373 = !DILocation(line: 4354, column: 7, scope: !5368)
!5374 = !DILocation(line: 4355, column: 11, scope: !5368)
!5375 = !DILocation(line: 4356, column: 5, scope: !5368)
!5376 = !DILocation(line: 4358, column: 31, scope: !5356)
!5377 = !DILocation(line: 4358, column: 30, scope: !5356)
!5378 = !DILocation(line: 4358, column: 41, scope: !5356)
!5379 = !DILocation(line: 4358, column: 63, scope: !5356)
!5380 = !DILocation(line: 4359, column: 9, scope: !5356)
!5381 = !DILocation(line: 4358, column: 5, scope: !5356)
!5382 = !DILocation(line: 4361, column: 7, scope: !5383)
!5383 = distinct !DILexicalBlock(scope: !5338, file: !3, line: 4361, column: 7)
!5384 = !DILocation(line: 4361, column: 17, scope: !5383)
!5385 = !DILocation(line: 4361, column: 21, scope: !5383)
!5386 = !DILocation(line: 4361, column: 32, scope: !5383)
!5387 = !DILocation(line: 4361, column: 7, scope: !5338)
!5388 = !DILocation(line: 4363, column: 16, scope: !5389)
!5389 = distinct !DILexicalBlock(scope: !5383, file: !3, line: 4362, column: 5)
!5390 = !DILocation(line: 4363, column: 7, scope: !5389)
!5391 = !DILocation(line: 4365, column: 16, scope: !5389)
!5392 = !DILocation(line: 4366, column: 26, scope: !5389)
!5393 = !DILocation(line: 4365, column: 7, scope: !5389)
!5394 = !DILocation(line: 4367, column: 16, scope: !5389)
!5395 = !DILocation(line: 4368, column: 26, scope: !5389)
!5396 = !DILocation(line: 4367, column: 7, scope: !5389)
!5397 = !DILocation(line: 4369, column: 16, scope: !5389)
!5398 = !DILocation(line: 4370, column: 26, scope: !5389)
!5399 = !DILocation(line: 4369, column: 7, scope: !5389)
!5400 = !DILocation(line: 4371, column: 16, scope: !5389)
!5401 = !DILocation(line: 4372, column: 26, scope: !5389)
!5402 = !DILocation(line: 4371, column: 7, scope: !5389)
!5403 = !DILocation(line: 4374, column: 16, scope: !5389)
!5404 = !DILocation(line: 4375, column: 26, scope: !5389)
!5405 = !DILocation(line: 4374, column: 7, scope: !5389)
!5406 = !DILocation(line: 4376, column: 16, scope: !5389)
!5407 = !DILocation(line: 4377, column: 26, scope: !5389)
!5408 = !DILocation(line: 4376, column: 7, scope: !5389)
!5409 = !DILocation(line: 4378, column: 16, scope: !5389)
!5410 = !DILocation(line: 4379, column: 26, scope: !5389)
!5411 = !DILocation(line: 4378, column: 7, scope: !5389)
!5412 = !DILocation(line: 4381, column: 16, scope: !5389)
!5413 = !DILocation(line: 4382, column: 26, scope: !5389)
!5414 = !DILocation(line: 4381, column: 7, scope: !5389)
!5415 = !DILocation(line: 4383, column: 16, scope: !5389)
!5416 = !DILocation(line: 4384, column: 26, scope: !5389)
!5417 = !DILocation(line: 4383, column: 7, scope: !5389)
!5418 = !DILocation(line: 4385, column: 16, scope: !5389)
!5419 = !DILocation(line: 4386, column: 26, scope: !5389)
!5420 = !DILocation(line: 4385, column: 7, scope: !5389)
!5421 = !DILocation(line: 4387, column: 16, scope: !5389)
!5422 = !DILocation(line: 4388, column: 26, scope: !5389)
!5423 = !DILocation(line: 4387, column: 7, scope: !5389)
!5424 = !DILocation(line: 4390, column: 16, scope: !5389)
!5425 = !DILocation(line: 4391, column: 26, scope: !5389)
!5426 = !DILocation(line: 4390, column: 7, scope: !5389)
!5427 = !DILocation(line: 4392, column: 16, scope: !5389)
!5428 = !DILocation(line: 4393, column: 26, scope: !5389)
!5429 = !DILocation(line: 4392, column: 7, scope: !5389)
!5430 = !DILocation(line: 4394, column: 16, scope: !5389)
!5431 = !DILocation(line: 4395, column: 26, scope: !5389)
!5432 = !DILocation(line: 4394, column: 7, scope: !5389)
!5433 = !DILocation(line: 4396, column: 16, scope: !5389)
!5434 = !DILocation(line: 4397, column: 26, scope: !5389)
!5435 = !DILocation(line: 4396, column: 7, scope: !5389)
!5436 = !DILocation(line: 4399, column: 16, scope: !5389)
!5437 = !DILocation(line: 4400, column: 26, scope: !5389)
!5438 = !DILocation(line: 4399, column: 7, scope: !5389)
!5439 = !DILocation(line: 4401, column: 16, scope: !5389)
!5440 = !DILocation(line: 4402, column: 26, scope: !5389)
!5441 = !DILocation(line: 4401, column: 7, scope: !5389)
!5442 = !DILocation(line: 4403, column: 16, scope: !5389)
!5443 = !DILocation(line: 4404, column: 26, scope: !5389)
!5444 = !DILocation(line: 4403, column: 7, scope: !5389)
!5445 = !DILocation(line: 4405, column: 16, scope: !5389)
!5446 = !DILocation(line: 4406, column: 26, scope: !5389)
!5447 = !DILocation(line: 4405, column: 7, scope: !5389)
!5448 = !DILocation(line: 4407, column: 5, scope: !5389)
!5449 = !DILocation(line: 4409, column: 10, scope: !5338)
!5450 = !DILocation(line: 4409, column: 3, scope: !5338)
!5451 = distinct !DISubprogram(name: "VEC_loop_p_heap_alloc", scope: !146, file: !146, line: 86, type: !5452, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5452 = !DISubroutineType(types: !5453)
!5453 = !{!2206, !908}
!5454 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5451, file: !146, line: 86, type: !908)
!5455 = !DILocation(line: 86, column: 1, scope: !5451)
!5456 = distinct !DISubprogram(name: "compute_data_dependences_for_bb", scope: !3, file: !3, line: 4419, type: !5457, scopeLine: 4423, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5457 = !DISubroutineType(types: !5458)
!5458 = !{!931, !1594, !931, !5014, !4307}
!5459 = !DILocalVariable(name: "bb", arg: 1, scope: !5456, file: !3, line: 4419, type: !1594)
!5460 = !DILocation(line: 4419, column: 46, scope: !5456)
!5461 = !DILocalVariable(name: "compute_self_and_read_read_dependences", arg: 2, scope: !5456, file: !3, line: 4420, type: !931)
!5462 = !DILocation(line: 4420, column: 39, scope: !5456)
!5463 = !DILocalVariable(name: "datarefs", arg: 3, scope: !5456, file: !3, line: 4421, type: !5014)
!5464 = !DILocation(line: 4421, column: 65, scope: !5456)
!5465 = !DILocalVariable(name: "dependence_relations", arg: 4, scope: !5456, file: !3, line: 4422, type: !4307)
!5466 = !DILocation(line: 4422, column: 54, scope: !5456)
!5467 = !DILocation(line: 4424, column: 41, scope: !5468)
!5468 = distinct !DILexicalBlock(scope: !5456, file: !3, line: 4424, column: 7)
!5469 = !DILocation(line: 4424, column: 45, scope: !5468)
!5470 = !DILocation(line: 4424, column: 7, scope: !5468)
!5471 = !DILocation(line: 4424, column: 58, scope: !5468)
!5472 = !DILocation(line: 4424, column: 55, scope: !5468)
!5473 = !DILocation(line: 4424, column: 7, scope: !5456)
!5474 = !DILocation(line: 4425, column: 5, scope: !5468)
!5475 = !DILocation(line: 4427, column: 29, scope: !5456)
!5476 = !DILocation(line: 4427, column: 28, scope: !5456)
!5477 = !DILocation(line: 4427, column: 39, scope: !5456)
!5478 = !DILocation(line: 4428, column: 28, scope: !5456)
!5479 = !DILocation(line: 4427, column: 3, scope: !5456)
!5480 = !DILocation(line: 4429, column: 3, scope: !5456)
!5481 = !DILocation(line: 4430, column: 1, scope: !5456)
!5482 = distinct !DISubprogram(name: "tree_check_data_deps", scope: !3, file: !3, line: 4506, type: !5483, scopeLine: 4507, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5483 = !DISubroutineType(types: !5484)
!5484 = !{null}
!5485 = !DILocalVariable(name: "li", scope: !5482, file: !3, line: 4508, type: !5486)
!5486 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !146, line: 515, baseType: !5487)
!5487 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !146, line: 508, size: 128, elements: !5488)
!5488 = !{!5489, !5490}
!5489 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !5487, file: !146, line: 511, baseType: !2333, size: 64)
!5490 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !5487, file: !146, line: 514, baseType: !7, size: 32, offset: 64)
!5491 = !DILocation(line: 4508, column: 17, scope: !5482)
!5492 = !DILocalVariable(name: "loop_nest", scope: !5482, file: !3, line: 4509, type: !1357)
!5493 = !DILocation(line: 4509, column: 16, scope: !5482)
!5494 = !DILocation(line: 4511, column: 3, scope: !5495)
!5495 = distinct !DILexicalBlock(scope: !5482, file: !3, line: 4511, column: 3)
!5496 = !DILocation(line: 4511, column: 3, scope: !5497)
!5497 = distinct !DILexicalBlock(scope: !5495, file: !3, line: 4511, column: 3)
!5498 = !DILocation(line: 4512, column: 35, scope: !5497)
!5499 = !DILocation(line: 4512, column: 5, scope: !5497)
!5500 = distinct !{!5500, !5494, !5501}
!5501 = !DILocation(line: 4512, column: 44, scope: !5495)
!5502 = !DILocation(line: 4513, column: 1, scope: !5482)
!5503 = distinct !DISubprogram(name: "fel_init", scope: !146, file: !146, line: 535, type: !5504, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5504 = !DISubroutineType(types: !5505)
!5505 = !{null, !5506, !3073, !7}
!5506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5486, size: 64)
!5507 = !DILocalVariable(name: "li", arg: 1, scope: !5503, file: !146, line: 535, type: !5506)
!5508 = !DILocation(line: 535, column: 26, scope: !5503)
!5509 = !DILocalVariable(name: "loop", arg: 2, scope: !5503, file: !146, line: 535, type: !3073)
!5510 = !DILocation(line: 535, column: 38, scope: !5503)
!5511 = !DILocalVariable(name: "flags", arg: 3, scope: !5503, file: !146, line: 535, type: !7)
!5512 = !DILocation(line: 535, column: 53, scope: !5503)
!5513 = !DILocalVariable(name: "aloop", scope: !5503, file: !146, line: 537, type: !1357)
!5514 = !DILocation(line: 537, column: 16, scope: !5503)
!5515 = !DILocalVariable(name: "i", scope: !5503, file: !146, line: 538, type: !7)
!5516 = !DILocation(line: 538, column: 12, scope: !5503)
!5517 = !DILocalVariable(name: "mn", scope: !5503, file: !146, line: 539, type: !908)
!5518 = !DILocation(line: 539, column: 7, scope: !5503)
!5519 = !DILocation(line: 541, column: 3, scope: !5503)
!5520 = !DILocation(line: 541, column: 7, scope: !5503)
!5521 = !DILocation(line: 541, column: 11, scope: !5503)
!5522 = !DILocation(line: 542, column: 8, scope: !5523)
!5523 = distinct !DILexicalBlock(scope: !5503, file: !146, line: 542, column: 7)
!5524 = !DILocation(line: 542, column: 7, scope: !5503)
!5525 = !DILocation(line: 544, column: 7, scope: !5526)
!5526 = distinct !DILexicalBlock(scope: !5523, file: !146, line: 543, column: 5)
!5527 = !DILocation(line: 544, column: 11, scope: !5526)
!5528 = !DILocation(line: 544, column: 20, scope: !5526)
!5529 = !DILocation(line: 545, column: 8, scope: !5526)
!5530 = !DILocation(line: 545, column: 13, scope: !5526)
!5531 = !DILocation(line: 546, column: 7, scope: !5526)
!5532 = !DILocation(line: 549, column: 18, scope: !5503)
!5533 = !DILocation(line: 549, column: 3, scope: !5503)
!5534 = !DILocation(line: 549, column: 7, scope: !5503)
!5535 = !DILocation(line: 549, column: 16, scope: !5503)
!5536 = !DILocation(line: 550, column: 9, scope: !5503)
!5537 = !DILocation(line: 550, column: 15, scope: !5503)
!5538 = !DILocation(line: 550, column: 8, scope: !5503)
!5539 = !DILocation(line: 550, column: 6, scope: !5503)
!5540 = !DILocation(line: 552, column: 7, scope: !5541)
!5541 = distinct !DILexicalBlock(scope: !5503, file: !146, line: 552, column: 7)
!5542 = !DILocation(line: 552, column: 13, scope: !5541)
!5543 = !DILocation(line: 552, column: 7, scope: !5503)
!5544 = !DILocation(line: 554, column: 14, scope: !5545)
!5545 = distinct !DILexicalBlock(scope: !5546, file: !146, line: 554, column: 7)
!5546 = distinct !DILexicalBlock(scope: !5541, file: !146, line: 553, column: 5)
!5547 = !DILocation(line: 554, column: 12, scope: !5545)
!5548 = !DILocation(line: 554, column: 19, scope: !5549)
!5549 = distinct !DILexicalBlock(scope: !5545, file: !146, line: 554, column: 7)
!5550 = !DILocation(line: 554, column: 7, scope: !5545)
!5551 = !DILocation(line: 555, column: 6, scope: !5552)
!5552 = distinct !DILexicalBlock(scope: !5549, file: !146, line: 555, column: 6)
!5553 = !DILocation(line: 555, column: 12, scope: !5552)
!5554 = !DILocation(line: 556, column: 6, scope: !5552)
!5555 = !DILocation(line: 556, column: 9, scope: !5552)
!5556 = !DILocation(line: 556, column: 16, scope: !5552)
!5557 = !DILocation(line: 556, column: 22, scope: !5552)
!5558 = !DILocation(line: 557, column: 6, scope: !5552)
!5559 = !DILocation(line: 557, column: 9, scope: !5552)
!5560 = !DILocation(line: 557, column: 16, scope: !5552)
!5561 = !DILocation(line: 557, column: 23, scope: !5552)
!5562 = !DILocation(line: 557, column: 20, scope: !5552)
!5563 = !DILocation(line: 555, column: 6, scope: !5549)
!5564 = !DILocation(line: 558, column: 4, scope: !5552)
!5565 = !DILocation(line: 554, column: 75, scope: !5549)
!5566 = !DILocation(line: 554, column: 7, scope: !5549)
!5567 = distinct !{!5567, !5550, !5568}
!5568 = !DILocation(line: 558, column: 4, scope: !5545)
!5569 = !DILocation(line: 559, column: 5, scope: !5546)
!5570 = !DILocation(line: 560, column: 12, scope: !5571)
!5571 = distinct !DILexicalBlock(scope: !5541, file: !146, line: 560, column: 12)
!5572 = !DILocation(line: 560, column: 18, scope: !5571)
!5573 = !DILocation(line: 560, column: 12, scope: !5541)
!5574 = !DILocation(line: 563, column: 20, scope: !5575)
!5575 = distinct !DILexicalBlock(scope: !5576, file: !146, line: 563, column: 7)
!5576 = distinct !DILexicalBlock(scope: !5571, file: !146, line: 561, column: 5)
!5577 = !DILocation(line: 563, column: 35, scope: !5575)
!5578 = !DILocation(line: 563, column: 18, scope: !5575)
!5579 = !DILocation(line: 563, column: 12, scope: !5575)
!5580 = !DILocation(line: 564, column: 5, scope: !5581)
!5581 = distinct !DILexicalBlock(scope: !5575, file: !146, line: 563, column: 7)
!5582 = !DILocation(line: 564, column: 12, scope: !5581)
!5583 = !DILocation(line: 564, column: 18, scope: !5581)
!5584 = !DILocation(line: 563, column: 7, scope: !5575)
!5585 = !DILocation(line: 566, column: 2, scope: !5581)
!5586 = !DILocation(line: 565, column: 13, scope: !5581)
!5587 = !DILocation(line: 565, column: 20, scope: !5581)
!5588 = !DILocation(line: 565, column: 11, scope: !5581)
!5589 = !DILocation(line: 563, column: 7, scope: !5581)
!5590 = distinct !{!5590, !5584, !5591}
!5591 = !DILocation(line: 566, column: 2, scope: !5575)
!5592 = !DILocation(line: 568, column: 7, scope: !5576)
!5593 = !DILocation(line: 570, column: 8, scope: !5594)
!5594 = distinct !DILexicalBlock(scope: !5595, file: !146, line: 570, column: 8)
!5595 = distinct !DILexicalBlock(scope: !5576, file: !146, line: 569, column: 2)
!5596 = !DILocation(line: 570, column: 15, scope: !5594)
!5597 = !DILocation(line: 570, column: 22, scope: !5594)
!5598 = !DILocation(line: 570, column: 19, scope: !5594)
!5599 = !DILocation(line: 570, column: 8, scope: !5595)
!5600 = !DILocation(line: 571, column: 6, scope: !5594)
!5601 = !DILocation(line: 573, column: 8, scope: !5602)
!5602 = distinct !DILexicalBlock(scope: !5595, file: !146, line: 573, column: 8)
!5603 = !DILocation(line: 573, column: 15, scope: !5602)
!5604 = !DILocation(line: 573, column: 8, scope: !5595)
!5605 = !DILocation(line: 575, column: 21, scope: !5606)
!5606 = distinct !DILexicalBlock(scope: !5607, file: !146, line: 575, column: 8)
!5607 = distinct !DILexicalBlock(scope: !5602, file: !146, line: 574, column: 6)
!5608 = !DILocation(line: 575, column: 28, scope: !5606)
!5609 = !DILocation(line: 575, column: 19, scope: !5606)
!5610 = !DILocation(line: 575, column: 13, scope: !5606)
!5611 = !DILocation(line: 576, column: 6, scope: !5612)
!5612 = distinct !DILexicalBlock(scope: !5606, file: !146, line: 575, column: 8)
!5613 = !DILocation(line: 576, column: 13, scope: !5612)
!5614 = !DILocation(line: 576, column: 19, scope: !5612)
!5615 = !DILocation(line: 575, column: 8, scope: !5606)
!5616 = !DILocation(line: 578, column: 3, scope: !5612)
!5617 = !DILocation(line: 577, column: 14, scope: !5612)
!5618 = !DILocation(line: 577, column: 21, scope: !5612)
!5619 = !DILocation(line: 577, column: 12, scope: !5612)
!5620 = !DILocation(line: 575, column: 8, scope: !5612)
!5621 = distinct !{!5621, !5615, !5622}
!5622 = !DILocation(line: 578, column: 3, scope: !5606)
!5623 = !DILocation(line: 579, column: 6, scope: !5607)
!5624 = !DILocation(line: 580, column: 26, scope: !5625)
!5625 = distinct !DILexicalBlock(scope: !5602, file: !146, line: 580, column: 13)
!5626 = !DILocation(line: 580, column: 14, scope: !5625)
!5627 = !DILocation(line: 580, column: 13, scope: !5602)
!5628 = !DILocation(line: 581, column: 6, scope: !5625)
!5629 = !DILocation(line: 583, column: 26, scope: !5625)
!5630 = !DILocation(line: 583, column: 14, scope: !5625)
!5631 = !DILocation(line: 583, column: 12, scope: !5625)
!5632 = distinct !{!5632, !5592, !5633}
!5633 = !DILocation(line: 584, column: 2, scope: !5576)
!5634 = !DILocation(line: 585, column: 5, scope: !5576)
!5635 = !DILocation(line: 589, column: 15, scope: !5636)
!5636 = distinct !DILexicalBlock(scope: !5571, file: !146, line: 587, column: 5)
!5637 = !DILocation(line: 589, column: 30, scope: !5636)
!5638 = !DILocation(line: 589, column: 13, scope: !5636)
!5639 = !DILocation(line: 590, column: 7, scope: !5636)
!5640 = !DILocation(line: 592, column: 8, scope: !5641)
!5641 = distinct !DILexicalBlock(scope: !5642, file: !146, line: 592, column: 8)
!5642 = distinct !DILexicalBlock(scope: !5636, file: !146, line: 591, column: 2)
!5643 = !DILocation(line: 592, column: 15, scope: !5641)
!5644 = !DILocation(line: 592, column: 22, scope: !5641)
!5645 = !DILocation(line: 592, column: 19, scope: !5641)
!5646 = !DILocation(line: 592, column: 8, scope: !5642)
!5647 = !DILocation(line: 593, column: 6, scope: !5641)
!5648 = !DILocation(line: 595, column: 8, scope: !5649)
!5649 = distinct !DILexicalBlock(scope: !5642, file: !146, line: 595, column: 8)
!5650 = !DILocation(line: 595, column: 15, scope: !5649)
!5651 = !DILocation(line: 595, column: 21, scope: !5649)
!5652 = !DILocation(line: 595, column: 8, scope: !5642)
!5653 = !DILocation(line: 596, column: 14, scope: !5649)
!5654 = !DILocation(line: 596, column: 21, scope: !5649)
!5655 = !DILocation(line: 596, column: 12, scope: !5649)
!5656 = !DILocation(line: 596, column: 6, scope: !5649)
!5657 = !DILocation(line: 599, column: 8, scope: !5658)
!5658 = distinct !DILexicalBlock(scope: !5649, file: !146, line: 598, column: 6)
!5659 = !DILocation(line: 599, column: 15, scope: !5658)
!5660 = !DILocation(line: 599, column: 21, scope: !5658)
!5661 = !DILocation(line: 599, column: 29, scope: !5658)
!5662 = !DILocation(line: 599, column: 32, scope: !5658)
!5663 = !DILocation(line: 599, column: 39, scope: !5658)
!5664 = !DILocation(line: 599, column: 44, scope: !5658)
!5665 = !DILocation(line: 0, scope: !5658)
!5666 = !DILocation(line: 600, column: 23, scope: !5658)
!5667 = !DILocation(line: 600, column: 11, scope: !5658)
!5668 = !DILocation(line: 600, column: 9, scope: !5658)
!5669 = distinct !{!5669, !5657, !5670}
!5670 = !DILocation(line: 600, column: 28, scope: !5658)
!5671 = !DILocation(line: 601, column: 12, scope: !5672)
!5672 = distinct !DILexicalBlock(scope: !5658, file: !146, line: 601, column: 12)
!5673 = !DILocation(line: 601, column: 18, scope: !5672)
!5674 = !DILocation(line: 601, column: 12, scope: !5658)
!5675 = !DILocation(line: 602, column: 3, scope: !5672)
!5676 = !DILocation(line: 603, column: 16, scope: !5658)
!5677 = !DILocation(line: 603, column: 23, scope: !5658)
!5678 = !DILocation(line: 603, column: 14, scope: !5658)
!5679 = distinct !{!5679, !5639, !5680}
!5680 = !DILocation(line: 605, column: 2, scope: !5636)
!5681 = !DILocation(line: 608, column: 13, scope: !5503)
!5682 = !DILocation(line: 608, column: 17, scope: !5503)
!5683 = !DILocation(line: 608, column: 3, scope: !5503)
!5684 = !DILocation(line: 609, column: 1, scope: !5503)
!5685 = distinct !DISubprogram(name: "analyze_all_data_dependences", scope: !3, file: !3, line: 4454, type: !5686, scopeLine: 4455, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5686 = !DISubroutineType(types: !5687)
!5687 = !{null, !1357}
!5688 = !DILocalVariable(name: "loop", arg: 1, scope: !5685, file: !3, line: 4454, type: !1357)
!5689 = !DILocation(line: 4454, column: 44, scope: !5685)
!5690 = !DILocalVariable(name: "i", scope: !5685, file: !3, line: 4456, type: !7)
!5691 = !DILocation(line: 4456, column: 16, scope: !5685)
!5692 = !DILocalVariable(name: "nb_data_refs", scope: !5685, file: !3, line: 4457, type: !908)
!5693 = !DILocation(line: 4457, column: 7, scope: !5685)
!5694 = !DILocalVariable(name: "datarefs", scope: !5685, file: !3, line: 4458, type: !2321)
!5695 = !DILocation(line: 4458, column: 33, scope: !5685)
!5696 = !DILocation(line: 4459, column: 5, scope: !5685)
!5697 = !DILocalVariable(name: "dependence_relations", scope: !5685, file: !3, line: 4460, type: !2292)
!5698 = !DILocation(line: 4460, column: 22, scope: !5685)
!5699 = !DILocation(line: 4461, column: 5, scope: !5685)
!5700 = !DILocation(line: 4464, column: 38, scope: !5685)
!5701 = !DILocation(line: 4464, column: 3, scope: !5685)
!5702 = !DILocation(line: 4467, column: 7, scope: !5703)
!5703 = distinct !DILexicalBlock(scope: !5685, file: !3, line: 4467, column: 7)
!5704 = !DILocation(line: 4467, column: 7, scope: !5685)
!5705 = !DILocation(line: 4469, column: 39, scope: !5706)
!5706 = distinct !DILexicalBlock(scope: !5703, file: !3, line: 4468, column: 5)
!5707 = !DILocation(line: 4469, column: 50, scope: !5706)
!5708 = !DILocation(line: 4469, column: 7, scope: !5706)
!5709 = !DILocation(line: 4470, column: 16, scope: !5706)
!5710 = !DILocation(line: 4470, column: 7, scope: !5706)
!5711 = !DILocation(line: 4472, column: 11, scope: !5712)
!5712 = distinct !DILexicalBlock(scope: !5706, file: !3, line: 4472, column: 11)
!5713 = !DILocation(line: 4472, column: 22, scope: !5712)
!5714 = !DILocation(line: 4472, column: 11, scope: !5706)
!5715 = !DILocation(line: 4473, column: 25, scope: !5712)
!5716 = !DILocation(line: 4473, column: 36, scope: !5712)
!5717 = !DILocation(line: 4473, column: 2, scope: !5712)
!5718 = !DILocation(line: 4475, column: 11, scope: !5719)
!5719 = distinct !DILexicalBlock(scope: !5706, file: !3, line: 4475, column: 11)
!5720 = !DILocation(line: 4475, column: 22, scope: !5719)
!5721 = !DILocation(line: 4475, column: 11, scope: !5706)
!5722 = !DILocalVariable(name: "nb_top_relations", scope: !5723, file: !3, line: 4477, type: !7)
!5723 = distinct !DILexicalBlock(scope: !5719, file: !3, line: 4476, column: 2)
!5724 = !DILocation(line: 4477, column: 13, scope: !5723)
!5725 = !DILocalVariable(name: "nb_bot_relations", scope: !5723, file: !3, line: 4478, type: !7)
!5726 = !DILocation(line: 4478, column: 13, scope: !5723)
!5727 = !DILocalVariable(name: "nb_chrec_relations", scope: !5723, file: !3, line: 4479, type: !7)
!5728 = !DILocation(line: 4479, column: 13, scope: !5723)
!5729 = !DILocalVariable(name: "ddr", scope: !5723, file: !3, line: 4480, type: !2243)
!5730 = !DILocation(line: 4480, column: 37, scope: !5723)
!5731 = !DILocation(line: 4482, column: 11, scope: !5732)
!5732 = distinct !DILexicalBlock(scope: !5723, file: !3, line: 4482, column: 4)
!5733 = !DILocation(line: 4482, column: 9, scope: !5732)
!5734 = !DILocation(line: 4482, column: 16, scope: !5735)
!5735 = distinct !DILexicalBlock(scope: !5732, file: !3, line: 4482, column: 4)
!5736 = !DILocation(line: 4482, column: 4, scope: !5732)
!5737 = !DILocation(line: 4484, column: 41, scope: !5738)
!5738 = distinct !DILexicalBlock(scope: !5739, file: !3, line: 4484, column: 12)
!5739 = distinct !DILexicalBlock(scope: !5735, file: !3, line: 4483, column: 6)
!5740 = !DILocation(line: 4484, column: 12, scope: !5738)
!5741 = !DILocation(line: 4484, column: 12, scope: !5739)
!5742 = !DILocation(line: 4485, column: 19, scope: !5738)
!5743 = !DILocation(line: 4485, column: 3, scope: !5738)
!5744 = !DILocation(line: 4487, column: 17, scope: !5745)
!5745 = distinct !DILexicalBlock(scope: !5738, file: !3, line: 4487, column: 17)
!5746 = !DILocation(line: 4487, column: 44, scope: !5745)
!5747 = !DILocation(line: 4487, column: 41, scope: !5745)
!5748 = !DILocation(line: 4487, column: 17, scope: !5738)
!5749 = !DILocation(line: 4488, column: 19, scope: !5745)
!5750 = !DILocation(line: 4488, column: 3, scope: !5745)
!5751 = !DILocation(line: 4491, column: 21, scope: !5745)
!5752 = !DILocation(line: 4492, column: 6, scope: !5739)
!5753 = !DILocation(line: 4482, column: 68, scope: !5735)
!5754 = !DILocation(line: 4482, column: 4, scope: !5735)
!5755 = distinct !{!5755, !5736, !5756}
!5756 = !DILocation(line: 4492, column: 6, scope: !5732)
!5757 = !DILocation(line: 4494, column: 4, scope: !5723)
!5758 = !DILocation(line: 4495, column: 2, scope: !5723)
!5759 = !DILocation(line: 4496, column: 5, scope: !5706)
!5760 = !DILocation(line: 4498, column: 30, scope: !5685)
!5761 = !DILocation(line: 4498, column: 3, scope: !5685)
!5762 = !DILocation(line: 4499, column: 19, scope: !5685)
!5763 = !DILocation(line: 4499, column: 3, scope: !5685)
!5764 = !DILocation(line: 4500, column: 1, scope: !5685)
!5765 = distinct !DISubprogram(name: "fel_next", scope: !146, file: !146, line: 518, type: !5766, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5766 = !DISubroutineType(types: !5767)
!5767 = !{null, !5506, !3073}
!5768 = !DILocalVariable(name: "li", arg: 1, scope: !5765, file: !146, line: 518, type: !5506)
!5769 = !DILocation(line: 518, column: 26, scope: !5765)
!5770 = !DILocalVariable(name: "loop", arg: 2, scope: !5765, file: !146, line: 518, type: !3073)
!5771 = !DILocation(line: 518, column: 38, scope: !5765)
!5772 = !DILocalVariable(name: "anum", scope: !5765, file: !146, line: 520, type: !908)
!5773 = !DILocation(line: 520, column: 7, scope: !5765)
!5774 = !DILocation(line: 522, column: 3, scope: !5765)
!5775 = !DILocation(line: 522, column: 10, scope: !5765)
!5776 = !DILocation(line: 524, column: 7, scope: !5777)
!5777 = distinct !DILexicalBlock(scope: !5765, file: !146, line: 523, column: 5)
!5778 = !DILocation(line: 524, column: 11, scope: !5777)
!5779 = !DILocation(line: 524, column: 14, scope: !5777)
!5780 = !DILocation(line: 525, column: 25, scope: !5777)
!5781 = !DILocation(line: 525, column: 15, scope: !5777)
!5782 = !DILocation(line: 525, column: 8, scope: !5777)
!5783 = !DILocation(line: 525, column: 13, scope: !5777)
!5784 = !DILocation(line: 526, column: 12, scope: !5785)
!5785 = distinct !DILexicalBlock(scope: !5777, file: !146, line: 526, column: 11)
!5786 = !DILocation(line: 526, column: 11, scope: !5785)
!5787 = !DILocation(line: 526, column: 11, scope: !5777)
!5788 = !DILocation(line: 527, column: 2, scope: !5785)
!5789 = distinct !{!5789, !5774, !5790}
!5790 = !DILocation(line: 528, column: 5, scope: !5765)
!5791 = !DILocation(line: 530, column: 3, scope: !5765)
!5792 = !DILocation(line: 531, column: 4, scope: !5765)
!5793 = !DILocation(line: 531, column: 9, scope: !5765)
!5794 = !DILocation(line: 532, column: 1, scope: !5765)
!5795 = distinct !DISubprogram(name: "free_dependence_relation", scope: !3, file: !3, line: 4518, type: !3046, scopeLine: 4519, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5796 = !DILocalVariable(name: "ddr", arg: 1, scope: !5795, file: !3, line: 4518, type: !2243)
!5797 = !DILocation(line: 4518, column: 60, scope: !5795)
!5798 = !DILocation(line: 4520, column: 7, scope: !5799)
!5799 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 4520, column: 7)
!5800 = !DILocation(line: 4520, column: 11, scope: !5799)
!5801 = !DILocation(line: 4520, column: 7, scope: !5795)
!5802 = !DILocation(line: 4521, column: 5, scope: !5799)
!5803 = !DILocation(line: 4523, column: 7, scope: !5804)
!5804 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 4523, column: 7)
!5805 = !DILocation(line: 4523, column: 7, scope: !5795)
!5806 = !DILocation(line: 4524, column: 22, scope: !5804)
!5807 = !DILocation(line: 4524, column: 5, scope: !5804)
!5808 = !DILocation(line: 4525, column: 7, scope: !5809)
!5809 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 4525, column: 7)
!5810 = !DILocation(line: 4525, column: 7, scope: !5795)
!5811 = !DILocation(line: 4526, column: 5, scope: !5809)
!5812 = !DILocation(line: 4527, column: 7, scope: !5813)
!5813 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 4527, column: 7)
!5814 = !DILocation(line: 4527, column: 7, scope: !5795)
!5815 = !DILocation(line: 4528, column: 5, scope: !5813)
!5816 = !DILocation(line: 4530, column: 9, scope: !5795)
!5817 = !DILocation(line: 4530, column: 3, scope: !5795)
!5818 = !DILocation(line: 4531, column: 1, scope: !5795)
!5819 = distinct !DISubprogram(name: "free_subscripts", scope: !3, file: !3, line: 1461, type: !5820, scopeLine: 1462, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5820 = !DISubroutineType(types: !5821)
!5821 = !{null, !2250}
!5822 = !DILocalVariable(name: "subscripts", arg: 1, scope: !5819, file: !3, line: 1461, type: !2250)
!5823 = !DILocation(line: 1461, column: 43, scope: !5819)
!5824 = !DILocalVariable(name: "i", scope: !5819, file: !3, line: 1463, type: !7)
!5825 = !DILocation(line: 1463, column: 12, scope: !5819)
!5826 = !DILocalVariable(name: "s", scope: !5819, file: !3, line: 1464, type: !2262)
!5827 = !DILocation(line: 1464, column: 15, scope: !5819)
!5828 = !DILocation(line: 1466, column: 10, scope: !5829)
!5829 = distinct !DILexicalBlock(scope: !5819, file: !3, line: 1466, column: 3)
!5830 = !DILocation(line: 1466, column: 8, scope: !5829)
!5831 = !DILocation(line: 1466, column: 15, scope: !5832)
!5832 = distinct !DILexicalBlock(scope: !5829, file: !3, line: 1466, column: 3)
!5833 = !DILocation(line: 1466, column: 3, scope: !5829)
!5834 = !DILocation(line: 1468, column: 31, scope: !5835)
!5835 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 1467, column: 5)
!5836 = !DILocation(line: 1468, column: 34, scope: !5835)
!5837 = !DILocation(line: 1468, column: 7, scope: !5835)
!5838 = !DILocation(line: 1469, column: 31, scope: !5835)
!5839 = !DILocation(line: 1469, column: 34, scope: !5835)
!5840 = !DILocation(line: 1469, column: 7, scope: !5835)
!5841 = !DILocation(line: 1470, column: 13, scope: !5835)
!5842 = !DILocation(line: 1470, column: 7, scope: !5835)
!5843 = !DILocation(line: 1471, column: 5, scope: !5835)
!5844 = !DILocation(line: 1466, column: 61, scope: !5832)
!5845 = !DILocation(line: 1466, column: 3, scope: !5832)
!5846 = distinct !{!5846, !5833, !5847}
!5847 = !DILocation(line: 1471, column: 5, scope: !5829)
!5848 = !DILocation(line: 1472, column: 3, scope: !5819)
!5849 = !DILocation(line: 1473, column: 1, scope: !5819)
!5850 = distinct !DISubprogram(name: "VEC_lambda_vector_heap_free", scope: !2216, file: !2216, line: 33, type: !5851, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5851 = !DISubroutineType(types: !5852)
!5852 = !{null, !5853}
!5853 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2280, size: 64)
!5854 = !DILocalVariable(name: "vec_", arg: 1, scope: !5850, file: !2216, line: 33, type: !5853)
!5855 = !DILocation(line: 33, column: 1, scope: !5850)
!5856 = !DILocation(line: 33, column: 1, scope: !5857)
!5857 = distinct !DILexicalBlock(scope: !5850, file: !2216, line: 33, column: 1)
!5858 = distinct !DISubprogram(name: "free_dependence_relations", scope: !3, file: !3, line: 4537, type: !2540, scopeLine: 4538, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5859 = !DILocalVariable(name: "dependence_relations", arg: 1, scope: !5858, file: !3, line: 4537, type: !2292)
!5860 = !DILocation(line: 4537, column: 47, scope: !5858)
!5861 = !DILocalVariable(name: "i", scope: !5858, file: !3, line: 4539, type: !7)
!5862 = !DILocation(line: 4539, column: 16, scope: !5858)
!5863 = !DILocalVariable(name: "ddr", scope: !5858, file: !3, line: 4540, type: !2243)
!5864 = !DILocation(line: 4540, column: 36, scope: !5858)
!5865 = !DILocalVariable(name: "loop_nest", scope: !5858, file: !3, line: 4541, type: !2206)
!5866 = !DILocation(line: 4541, column: 23, scope: !5858)
!5867 = !DILocation(line: 4543, column: 10, scope: !5868)
!5868 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 4543, column: 3)
!5869 = !DILocation(line: 4543, column: 8, scope: !5868)
!5870 = !DILocation(line: 4543, column: 15, scope: !5871)
!5871 = distinct !DILexicalBlock(scope: !5868, file: !3, line: 4543, column: 3)
!5872 = !DILocation(line: 4543, column: 3, scope: !5868)
!5873 = !DILocation(line: 4545, column: 11, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5875, file: !3, line: 4545, column: 11)
!5875 = distinct !DILexicalBlock(scope: !5871, file: !3, line: 4544, column: 5)
!5876 = !DILocation(line: 4545, column: 15, scope: !5874)
!5877 = !DILocation(line: 4545, column: 11, scope: !5875)
!5878 = !DILocation(line: 4546, column: 2, scope: !5874)
!5879 = !DILocation(line: 4547, column: 11, scope: !5880)
!5880 = distinct !DILexicalBlock(scope: !5875, file: !3, line: 4547, column: 11)
!5881 = !DILocation(line: 4547, column: 21, scope: !5880)
!5882 = !DILocation(line: 4547, column: 11, scope: !5875)
!5883 = !DILocation(line: 4548, column: 14, scope: !5880)
!5884 = !DILocation(line: 4548, column: 12, scope: !5880)
!5885 = !DILocation(line: 4548, column: 2, scope: !5880)
!5886 = !DILocation(line: 4550, column: 2, scope: !5880)
!5887 = !DILocation(line: 4552, column: 33, scope: !5875)
!5888 = !DILocation(line: 4552, column: 7, scope: !5875)
!5889 = !DILocation(line: 4553, column: 5, scope: !5875)
!5890 = !DILocation(line: 4543, column: 67, scope: !5871)
!5891 = !DILocation(line: 4543, column: 3, scope: !5871)
!5892 = distinct !{!5892, !5872, !5893}
!5893 = !DILocation(line: 4553, column: 5, scope: !5868)
!5894 = !DILocation(line: 4555, column: 7, scope: !5895)
!5895 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 4555, column: 7)
!5896 = !DILocation(line: 4555, column: 7, scope: !5858)
!5897 = !DILocation(line: 4556, column: 5, scope: !5895)
!5898 = !DILocation(line: 4557, column: 3, scope: !5858)
!5899 = !DILocation(line: 4558, column: 1, scope: !5858)
!5900 = distinct !DISubprogram(name: "VEC_loop_p_heap_free", scope: !146, file: !146, line: 86, type: !5901, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5901 = !DISubroutineType(types: !5902)
!5902 = !{null, !5293}
!5903 = !DILocalVariable(name: "vec_", arg: 1, scope: !5900, file: !146, line: 86, type: !5293)
!5904 = !DILocation(line: 86, column: 1, scope: !5900)
!5905 = !DILocation(line: 86, column: 1, scope: !5906)
!5906 = distinct !DILexicalBlock(scope: !5900, file: !146, line: 86, column: 1)
!5907 = distinct !DISubprogram(name: "VEC_ddr_p_heap_free", scope: !391, file: !391, line: 333, type: !5908, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5908 = !DISubroutineType(types: !5909)
!5909 = !{null, !4307}
!5910 = !DILocalVariable(name: "vec_", arg: 1, scope: !5907, file: !391, line: 333, type: !4307)
!5911 = !DILocation(line: 333, column: 1, scope: !5907)
!5912 = !DILocation(line: 333, column: 1, scope: !5913)
!5913 = distinct !DILexicalBlock(scope: !5907, file: !391, line: 333, column: 1)
!5914 = distinct !DISubprogram(name: "free_data_refs", scope: !3, file: !3, line: 4563, type: !2531, scopeLine: 4564, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5915 = !DILocalVariable(name: "datarefs", arg: 1, scope: !5914, file: !3, line: 4563, type: !2321)
!5916 = !DILocation(line: 4563, column: 47, scope: !5914)
!5917 = !DILocalVariable(name: "i", scope: !5914, file: !3, line: 4565, type: !7)
!5918 = !DILocation(line: 4565, column: 16, scope: !5914)
!5919 = !DILocalVariable(name: "dr", scope: !5914, file: !3, line: 4566, type: !2171)
!5920 = !DILocation(line: 4566, column: 26, scope: !5914)
!5921 = !DILocation(line: 4568, column: 10, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5914, file: !3, line: 4568, column: 3)
!5923 = !DILocation(line: 4568, column: 8, scope: !5922)
!5924 = !DILocation(line: 4568, column: 15, scope: !5925)
!5925 = distinct !DILexicalBlock(scope: !5922, file: !3, line: 4568, column: 3)
!5926 = !DILocation(line: 4568, column: 3, scope: !5922)
!5927 = !DILocation(line: 4569, column: 20, scope: !5925)
!5928 = !DILocation(line: 4569, column: 5, scope: !5925)
!5929 = !DILocation(line: 4568, column: 65, scope: !5925)
!5930 = !DILocation(line: 4568, column: 3, scope: !5925)
!5931 = distinct !{!5931, !5926, !5932}
!5932 = !DILocation(line: 4569, column: 22, scope: !5922)
!5933 = !DILocation(line: 4570, column: 3, scope: !5914)
!5934 = !DILocation(line: 4571, column: 1, scope: !5914)
!5935 = distinct !DISubprogram(name: "VEC_data_reference_p_heap_free", scope: !391, file: !391, line: 209, type: !5936, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5936 = !DISubroutineType(types: !5937)
!5937 = !{null, !5014}
!5938 = !DILocalVariable(name: "vec_", arg: 1, scope: !5935, file: !391, line: 209, type: !5014)
!5939 = !DILocation(line: 209, column: 1, scope: !5935)
!5940 = !DILocation(line: 209, column: 1, scope: !5941)
!5941 = distinct !DILexicalBlock(scope: !5935, file: !391, line: 209, column: 1)
!5942 = distinct !DISubprogram(name: "dump_rdg_vertex", scope: !3, file: !3, line: 4578, type: !5943, scopeLine: 4579, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!5943 = !DISubroutineType(types: !5944)
!5944 = !{null, !2393, !5945, !908}
!5945 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5946, size: 64)
!5946 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "graph", file: !5947, line: 45, size: 192, elements: !5948)
!5947 = !DIFile(filename: "./graphds.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5948 = !{!5949, !5950, !5967}
!5949 = !DIDerivedType(tag: DW_TAG_member, name: "n_vertices", scope: !5946, file: !5947, line: 47, baseType: !908, size: 32)
!5950 = !DIDerivedType(tag: DW_TAG_member, name: "vertices", scope: !5946, file: !5947, line: 48, baseType: !5951, size: 64, offset: 64)
!5951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5952, size: 64)
!5952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vertex", file: !5947, line: 33, size: 256, elements: !5953)
!5953 = !{!5954, !5963, !5964, !5965, !5966}
!5954 = !DIDerivedType(tag: DW_TAG_member, name: "pred", scope: !5952, file: !5947, line: 35, baseType: !5955, size: 64)
!5955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5956, size: 64)
!5956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "graph_edge", file: !5947, line: 23, size: 256, elements: !5957)
!5957 = !{!5958, !5959, !5960, !5961, !5962}
!5958 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !5956, file: !5947, line: 25, baseType: !908, size: 32)
!5959 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !5956, file: !5947, line: 25, baseType: !908, size: 32, offset: 32)
!5960 = !DIDerivedType(tag: DW_TAG_member, name: "pred_next", scope: !5956, file: !5947, line: 26, baseType: !5955, size: 64, offset: 64)
!5961 = !DIDerivedType(tag: DW_TAG_member, name: "succ_next", scope: !5956, file: !5947, line: 26, baseType: !5955, size: 64, offset: 128)
!5962 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !5956, file: !5947, line: 28, baseType: !1095, size: 64, offset: 192)
!5963 = !DIDerivedType(tag: DW_TAG_member, name: "succ", scope: !5952, file: !5947, line: 35, baseType: !5955, size: 64, offset: 64)
!5964 = !DIDerivedType(tag: DW_TAG_member, name: "component", scope: !5952, file: !5947, line: 37, baseType: !908, size: 32, offset: 128)
!5965 = !DIDerivedType(tag: DW_TAG_member, name: "post", scope: !5952, file: !5947, line: 39, baseType: !908, size: 32, offset: 160)
!5966 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !5952, file: !5947, line: 40, baseType: !1095, size: 64, offset: 192)
!5967 = !DIDerivedType(tag: DW_TAG_member, name: "indices", scope: !5946, file: !5947, line: 50, baseType: !1626, size: 64, offset: 128)
!5968 = !DILocalVariable(name: "file", arg: 1, scope: !5942, file: !3, line: 4578, type: !2393)
!5969 = !DILocation(line: 4578, column: 24, scope: !5942)
!5970 = !DILocalVariable(name: "rdg", arg: 2, scope: !5942, file: !3, line: 4578, type: !5945)
!5971 = !DILocation(line: 4578, column: 44, scope: !5942)
!5972 = !DILocalVariable(name: "i", arg: 3, scope: !5942, file: !3, line: 4578, type: !908)
!5973 = !DILocation(line: 4578, column: 53, scope: !5942)
!5974 = !DILocalVariable(name: "v", scope: !5942, file: !3, line: 4580, type: !5951)
!5975 = !DILocation(line: 4580, column: 18, scope: !5942)
!5976 = !DILocation(line: 4580, column: 24, scope: !5942)
!5977 = !DILocation(line: 4580, column: 29, scope: !5942)
!5978 = !DILocation(line: 4580, column: 38, scope: !5942)
!5979 = !DILocalVariable(name: "e", scope: !5942, file: !3, line: 4581, type: !5955)
!5980 = !DILocation(line: 4581, column: 22, scope: !5942)
!5981 = !DILocation(line: 4583, column: 12, scope: !5942)
!5982 = !DILocation(line: 4583, column: 45, scope: !5942)
!5983 = !DILocation(line: 4584, column: 5, scope: !5942)
!5984 = !DILocation(line: 4585, column: 5, scope: !5942)
!5985 = !DILocation(line: 4583, column: 3, scope: !5942)
!5986 = !DILocation(line: 4587, column: 7, scope: !5987)
!5987 = distinct !DILexicalBlock(scope: !5942, file: !3, line: 4587, column: 7)
!5988 = !DILocation(line: 4587, column: 10, scope: !5987)
!5989 = !DILocation(line: 4587, column: 7, scope: !5942)
!5990 = !DILocation(line: 4588, column: 14, scope: !5991)
!5991 = distinct !DILexicalBlock(scope: !5987, file: !3, line: 4588, column: 5)
!5992 = !DILocation(line: 4588, column: 17, scope: !5991)
!5993 = !DILocation(line: 4588, column: 12, scope: !5991)
!5994 = !DILocation(line: 4588, column: 10, scope: !5991)
!5995 = !DILocation(line: 4588, column: 23, scope: !5996)
!5996 = distinct !DILexicalBlock(scope: !5991, file: !3, line: 4588, column: 5)
!5997 = !DILocation(line: 4588, column: 5, scope: !5991)
!5998 = !DILocation(line: 4589, column: 16, scope: !5996)
!5999 = !DILocation(line: 4589, column: 29, scope: !5996)
!6000 = !DILocation(line: 4589, column: 32, scope: !5996)
!6001 = !DILocation(line: 4589, column: 7, scope: !5996)
!6002 = !DILocation(line: 4588, column: 30, scope: !5996)
!6003 = !DILocation(line: 4588, column: 33, scope: !5996)
!6004 = !DILocation(line: 4588, column: 28, scope: !5996)
!6005 = !DILocation(line: 4588, column: 5, scope: !5996)
!6006 = distinct !{!6006, !5997, !6007}
!6007 = !DILocation(line: 4589, column: 35, scope: !5991)
!6008 = !DILocation(line: 4591, column: 12, scope: !5942)
!6009 = !DILocation(line: 4591, column: 3, scope: !5942)
!6010 = !DILocation(line: 4593, column: 7, scope: !6011)
!6011 = distinct !DILexicalBlock(scope: !5942, file: !3, line: 4593, column: 7)
!6012 = !DILocation(line: 4593, column: 10, scope: !6011)
!6013 = !DILocation(line: 4593, column: 7, scope: !5942)
!6014 = !DILocation(line: 4594, column: 14, scope: !6015)
!6015 = distinct !DILexicalBlock(scope: !6011, file: !3, line: 4594, column: 5)
!6016 = !DILocation(line: 4594, column: 17, scope: !6015)
!6017 = !DILocation(line: 4594, column: 12, scope: !6015)
!6018 = !DILocation(line: 4594, column: 10, scope: !6015)
!6019 = !DILocation(line: 4594, column: 23, scope: !6020)
!6020 = distinct !DILexicalBlock(scope: !6015, file: !3, line: 4594, column: 5)
!6021 = !DILocation(line: 4594, column: 5, scope: !6015)
!6022 = !DILocation(line: 4595, column: 16, scope: !6020)
!6023 = !DILocation(line: 4595, column: 29, scope: !6020)
!6024 = !DILocation(line: 4595, column: 32, scope: !6020)
!6025 = !DILocation(line: 4595, column: 7, scope: !6020)
!6026 = !DILocation(line: 4594, column: 30, scope: !6020)
!6027 = !DILocation(line: 4594, column: 33, scope: !6020)
!6028 = !DILocation(line: 4594, column: 28, scope: !6020)
!6029 = !DILocation(line: 4594, column: 5, scope: !6020)
!6030 = distinct !{!6030, !6021, !6031}
!6031 = !DILocation(line: 4595, column: 36, scope: !6015)
!6032 = !DILocation(line: 4597, column: 12, scope: !5942)
!6033 = !DILocation(line: 4597, column: 3, scope: !5942)
!6034 = !DILocation(line: 4598, column: 22, scope: !5942)
!6035 = !DILocation(line: 4598, column: 28, scope: !5942)
!6036 = !DILocation(line: 4598, column: 3, scope: !5942)
!6037 = !DILocation(line: 4599, column: 12, scope: !5942)
!6038 = !DILocation(line: 4599, column: 3, scope: !5942)
!6039 = !DILocation(line: 4600, column: 1, scope: !5942)
!6040 = distinct !DISubprogram(name: "debug_rdg_vertex", scope: !3, file: !3, line: 4605, type: !6041, scopeLine: 4606, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6041 = !DISubroutineType(types: !6042)
!6042 = !{null, !5945, !908}
!6043 = !DILocalVariable(name: "rdg", arg: 1, scope: !6040, file: !3, line: 4605, type: !5945)
!6044 = !DILocation(line: 4605, column: 33, scope: !6040)
!6045 = !DILocalVariable(name: "i", arg: 2, scope: !6040, file: !3, line: 4605, type: !908)
!6046 = !DILocation(line: 4605, column: 42, scope: !6040)
!6047 = !DILocation(line: 4607, column: 20, scope: !6040)
!6048 = !DILocation(line: 4607, column: 28, scope: !6040)
!6049 = !DILocation(line: 4607, column: 33, scope: !6040)
!6050 = !DILocation(line: 4607, column: 3, scope: !6040)
!6051 = !DILocation(line: 4608, column: 1, scope: !6040)
!6052 = distinct !DISubprogram(name: "dump_rdg_component", scope: !3, file: !3, line: 4613, type: !6053, scopeLine: 4614, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6053 = !DISubroutineType(types: !6054)
!6054 = !{null, !2393, !5945, !908, !1711}
!6055 = !DILocalVariable(name: "file", arg: 1, scope: !6052, file: !3, line: 4613, type: !2393)
!6056 = !DILocation(line: 4613, column: 32, scope: !6052)
!6057 = !DILocalVariable(name: "rdg", arg: 2, scope: !6052, file: !3, line: 4613, type: !5945)
!6058 = !DILocation(line: 4613, column: 52, scope: !6052)
!6059 = !DILocalVariable(name: "c", arg: 3, scope: !6052, file: !3, line: 4613, type: !908)
!6060 = !DILocation(line: 4613, column: 61, scope: !6052)
!6061 = !DILocalVariable(name: "dumped", arg: 4, scope: !6052, file: !3, line: 4613, type: !1711)
!6062 = !DILocation(line: 4613, column: 71, scope: !6052)
!6063 = !DILocalVariable(name: "i", scope: !6052, file: !3, line: 4615, type: !908)
!6064 = !DILocation(line: 4615, column: 7, scope: !6052)
!6065 = !DILocation(line: 4617, column: 12, scope: !6052)
!6066 = !DILocation(line: 4617, column: 27, scope: !6052)
!6067 = !DILocation(line: 4617, column: 3, scope: !6052)
!6068 = !DILocation(line: 4619, column: 10, scope: !6069)
!6069 = distinct !DILexicalBlock(scope: !6052, file: !3, line: 4619, column: 3)
!6070 = !DILocation(line: 4619, column: 8, scope: !6069)
!6071 = !DILocation(line: 4619, column: 15, scope: !6072)
!6072 = distinct !DILexicalBlock(scope: !6069, file: !3, line: 4619, column: 3)
!6073 = !DILocation(line: 4619, column: 19, scope: !6072)
!6074 = !DILocation(line: 4619, column: 24, scope: !6072)
!6075 = !DILocation(line: 4619, column: 17, scope: !6072)
!6076 = !DILocation(line: 4619, column: 3, scope: !6069)
!6077 = !DILocation(line: 4620, column: 9, scope: !6078)
!6078 = distinct !DILexicalBlock(scope: !6072, file: !3, line: 4620, column: 9)
!6079 = !DILocation(line: 4620, column: 14, scope: !6078)
!6080 = !DILocation(line: 4620, column: 23, scope: !6078)
!6081 = !DILocation(line: 4620, column: 26, scope: !6078)
!6082 = !DILocation(line: 4620, column: 39, scope: !6078)
!6083 = !DILocation(line: 4620, column: 36, scope: !6078)
!6084 = !DILocation(line: 4620, column: 9, scope: !6072)
!6085 = !DILocation(line: 4622, column: 6, scope: !6086)
!6086 = distinct !DILexicalBlock(scope: !6087, file: !3, line: 4622, column: 6)
!6087 = distinct !DILexicalBlock(scope: !6078, file: !3, line: 4621, column: 7)
!6088 = !DILocation(line: 4622, column: 6, scope: !6087)
!6089 = !DILocation(line: 4623, column: 20, scope: !6086)
!6090 = !DILocation(line: 4623, column: 28, scope: !6086)
!6091 = !DILocation(line: 4623, column: 4, scope: !6086)
!6092 = !DILocation(line: 4625, column: 19, scope: !6087)
!6093 = !DILocation(line: 4625, column: 25, scope: !6087)
!6094 = !DILocation(line: 4625, column: 30, scope: !6087)
!6095 = !DILocation(line: 4625, column: 2, scope: !6087)
!6096 = !DILocation(line: 4626, column: 7, scope: !6087)
!6097 = !DILocation(line: 4619, column: 37, scope: !6072)
!6098 = !DILocation(line: 4619, column: 3, scope: !6072)
!6099 = distinct !{!6099, !6076, !6100}
!6100 = !DILocation(line: 4626, column: 7, scope: !6069)
!6101 = !DILocation(line: 4628, column: 12, scope: !6052)
!6102 = !DILocation(line: 4628, column: 3, scope: !6052)
!6103 = !DILocation(line: 4629, column: 1, scope: !6052)
!6104 = distinct !DISubprogram(name: "debug_rdg_component", scope: !3, file: !3, line: 4634, type: !6041, scopeLine: 4635, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6105 = !DILocalVariable(name: "rdg", arg: 1, scope: !6104, file: !3, line: 4634, type: !5945)
!6106 = !DILocation(line: 4634, column: 36, scope: !6104)
!6107 = !DILocalVariable(name: "c", arg: 2, scope: !6104, file: !3, line: 4634, type: !908)
!6108 = !DILocation(line: 4634, column: 45, scope: !6104)
!6109 = !DILocation(line: 4636, column: 23, scope: !6104)
!6110 = !DILocation(line: 4636, column: 31, scope: !6104)
!6111 = !DILocation(line: 4636, column: 36, scope: !6104)
!6112 = !DILocation(line: 4636, column: 3, scope: !6104)
!6113 = !DILocation(line: 4637, column: 1, scope: !6104)
!6114 = distinct !DISubprogram(name: "dump_rdg", scope: !3, file: !3, line: 4642, type: !6115, scopeLine: 4643, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6115 = !DISubroutineType(types: !6116)
!6116 = !{null, !2393, !5945}
!6117 = !DILocalVariable(name: "file", arg: 1, scope: !6114, file: !3, line: 4642, type: !2393)
!6118 = !DILocation(line: 4642, column: 17, scope: !6114)
!6119 = !DILocalVariable(name: "rdg", arg: 2, scope: !6114, file: !3, line: 4642, type: !5945)
!6120 = !DILocation(line: 4642, column: 37, scope: !6114)
!6121 = !DILocalVariable(name: "i", scope: !6114, file: !3, line: 4644, type: !908)
!6122 = !DILocation(line: 4644, column: 7, scope: !6114)
!6123 = !DILocalVariable(name: "dumped", scope: !6114, file: !3, line: 4645, type: !1711)
!6124 = !DILocation(line: 4645, column: 10, scope: !6114)
!6125 = !DILocation(line: 4645, column: 19, scope: !6114)
!6126 = !DILocation(line: 4647, column: 12, scope: !6114)
!6127 = !DILocation(line: 4647, column: 3, scope: !6114)
!6128 = !DILocation(line: 4649, column: 10, scope: !6129)
!6129 = distinct !DILexicalBlock(scope: !6114, file: !3, line: 4649, column: 3)
!6130 = !DILocation(line: 4649, column: 8, scope: !6129)
!6131 = !DILocation(line: 4649, column: 15, scope: !6132)
!6132 = distinct !DILexicalBlock(scope: !6129, file: !3, line: 4649, column: 3)
!6133 = !DILocation(line: 4649, column: 19, scope: !6132)
!6134 = !DILocation(line: 4649, column: 24, scope: !6132)
!6135 = !DILocation(line: 4649, column: 17, scope: !6132)
!6136 = !DILocation(line: 4649, column: 3, scope: !6129)
!6137 = !DILocation(line: 4650, column: 24, scope: !6138)
!6138 = distinct !DILexicalBlock(scope: !6132, file: !3, line: 4650, column: 9)
!6139 = !DILocation(line: 4650, column: 32, scope: !6138)
!6140 = !DILocation(line: 4650, column: 10, scope: !6138)
!6141 = !DILocation(line: 4650, column: 9, scope: !6132)
!6142 = !DILocation(line: 4651, column: 27, scope: !6138)
!6143 = !DILocation(line: 4651, column: 33, scope: !6138)
!6144 = !DILocation(line: 4651, column: 38, scope: !6138)
!6145 = !DILocation(line: 4651, column: 43, scope: !6138)
!6146 = !DILocation(line: 4651, column: 52, scope: !6138)
!6147 = !DILocation(line: 4651, column: 55, scope: !6138)
!6148 = !DILocation(line: 4651, column: 66, scope: !6138)
!6149 = !DILocation(line: 4651, column: 7, scope: !6138)
!6150 = !DILocation(line: 4650, column: 33, scope: !6138)
!6151 = !DILocation(line: 4649, column: 37, scope: !6132)
!6152 = !DILocation(line: 4649, column: 3, scope: !6132)
!6153 = distinct !{!6153, !6136, !6154}
!6154 = !DILocation(line: 4651, column: 72, scope: !6129)
!6155 = !DILocation(line: 4653, column: 12, scope: !6114)
!6156 = !DILocation(line: 4653, column: 3, scope: !6114)
!6157 = !DILocation(line: 4654, column: 3, scope: !6114)
!6158 = !DILocation(line: 4655, column: 1, scope: !6114)
!6159 = distinct !DISubprogram(name: "debug_rdg", scope: !3, file: !3, line: 4660, type: !6160, scopeLine: 4661, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6160 = !DISubroutineType(types: !6161)
!6161 = !{null, !5945}
!6162 = !DILocalVariable(name: "rdg", arg: 1, scope: !6159, file: !3, line: 4660, type: !5945)
!6163 = !DILocation(line: 4660, column: 26, scope: !6159)
!6164 = !DILocation(line: 4662, column: 13, scope: !6159)
!6165 = !DILocation(line: 4662, column: 21, scope: !6159)
!6166 = !DILocation(line: 4662, column: 3, scope: !6159)
!6167 = !DILocation(line: 4663, column: 1, scope: !6159)
!6168 = distinct !DISubprogram(name: "rdg_vertex_for_stmt", scope: !3, file: !3, line: 4677, type: !6169, scopeLine: 4678, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6169 = !DISubroutineType(types: !6170)
!6170 = !{!908, !5945, !1142}
!6171 = !DILocalVariable(name: "rdg", arg: 1, scope: !6168, file: !3, line: 4677, type: !5945)
!6172 = !DILocation(line: 4677, column: 36, scope: !6168)
!6173 = !DILocalVariable(name: "stmt", arg: 2, scope: !6168, file: !3, line: 4677, type: !1142)
!6174 = !DILocation(line: 4677, column: 48, scope: !6168)
!6175 = !DILocalVariable(name: "rvi", scope: !6168, file: !3, line: 4679, type: !2236)
!6176 = !DILocation(line: 4679, column: 26, scope: !6168)
!6177 = !DILocalVariable(name: "slot", scope: !6168, file: !3, line: 4679, type: !2235)
!6178 = !DILocation(line: 4679, column: 32, scope: !6168)
!6179 = !DILocation(line: 4681, column: 14, scope: !6168)
!6180 = !DILocation(line: 4681, column: 7, scope: !6168)
!6181 = !DILocation(line: 4681, column: 12, scope: !6168)
!6182 = !DILocation(line: 4682, column: 48, scope: !6168)
!6183 = !DILocation(line: 4682, column: 53, scope: !6168)
!6184 = !DILocation(line: 4682, column: 62, scope: !6168)
!6185 = !DILocation(line: 4682, column: 37, scope: !6168)
!6186 = !DILocation(line: 4682, column: 10, scope: !6168)
!6187 = !DILocation(line: 4682, column: 8, scope: !6168)
!6188 = !DILocation(line: 4684, column: 8, scope: !6189)
!6189 = distinct !DILexicalBlock(scope: !6168, file: !3, line: 4684, column: 7)
!6190 = !DILocation(line: 4684, column: 7, scope: !6168)
!6191 = !DILocation(line: 4685, column: 5, scope: !6189)
!6192 = !DILocation(line: 4687, column: 10, scope: !6168)
!6193 = !DILocation(line: 4687, column: 16, scope: !6168)
!6194 = !DILocation(line: 4687, column: 3, scope: !6168)
!6195 = !DILocation(line: 4688, column: 1, scope: !6168)
!6196 = distinct !DISubprogram(name: "create_rdg_vertices", scope: !3, file: !3, line: 4783, type: !6197, scopeLine: 4784, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6197 = !DISubroutineType(types: !6198)
!6198 = !{null, !5945, !2348}
!6199 = !DILocalVariable(name: "rdg", arg: 1, scope: !6196, file: !3, line: 4783, type: !5945)
!6200 = !DILocation(line: 4783, column: 36, scope: !6196)
!6201 = !DILocalVariable(name: "stmts", arg: 2, scope: !6196, file: !3, line: 4783, type: !2348)
!6202 = !DILocation(line: 4783, column: 61, scope: !6196)
!6203 = !DILocalVariable(name: "i", scope: !6196, file: !3, line: 4785, type: !908)
!6204 = !DILocation(line: 4785, column: 7, scope: !6196)
!6205 = !DILocalVariable(name: "j", scope: !6196, file: !3, line: 4785, type: !908)
!6206 = !DILocation(line: 4785, column: 10, scope: !6196)
!6207 = !DILocalVariable(name: "stmt", scope: !6196, file: !3, line: 4786, type: !1142)
!6208 = !DILocation(line: 4786, column: 10, scope: !6196)
!6209 = !DILocation(line: 4788, column: 10, scope: !6210)
!6210 = distinct !DILexicalBlock(scope: !6196, file: !3, line: 4788, column: 3)
!6211 = !DILocation(line: 4788, column: 8, scope: !6210)
!6212 = !DILocation(line: 4788, column: 15, scope: !6213)
!6213 = distinct !DILexicalBlock(scope: !6210, file: !3, line: 4788, column: 3)
!6214 = !DILocation(line: 4788, column: 3, scope: !6210)
!6215 = !DILocalVariable(name: "references", scope: !6216, file: !3, line: 4790, type: !2304)
!6216 = distinct !DILexicalBlock(scope: !6213, file: !3, line: 4789, column: 5)
!6217 = !DILocation(line: 4790, column: 33, scope: !6216)
!6218 = !DILocalVariable(name: "ref", scope: !6216, file: !3, line: 4791, type: !4783)
!6219 = !DILocation(line: 4791, column: 21, scope: !6216)
!6220 = !DILocalVariable(name: "v", scope: !6216, file: !3, line: 4792, type: !5951)
!6221 = !DILocation(line: 4792, column: 22, scope: !6216)
!6222 = !DILocation(line: 4792, column: 28, scope: !6216)
!6223 = !DILocation(line: 4792, column: 33, scope: !6216)
!6224 = !DILocation(line: 4792, column: 42, scope: !6216)
!6225 = !DILocalVariable(name: "rvi", scope: !6216, file: !3, line: 4793, type: !2235)
!6226 = !DILocation(line: 4793, column: 31, scope: !6216)
!6227 = !DILocation(line: 4793, column: 37, scope: !6216)
!6228 = !DILocalVariable(name: "slot", scope: !6216, file: !3, line: 4794, type: !2240)
!6229 = !DILocation(line: 4794, column: 32, scope: !6216)
!6230 = !DILocation(line: 4796, column: 19, scope: !6216)
!6231 = !DILocation(line: 4796, column: 7, scope: !6216)
!6232 = !DILocation(line: 4796, column: 12, scope: !6216)
!6233 = !DILocation(line: 4796, column: 17, scope: !6216)
!6234 = !DILocation(line: 4797, column: 20, scope: !6216)
!6235 = !DILocation(line: 4797, column: 7, scope: !6216)
!6236 = !DILocation(line: 4797, column: 12, scope: !6216)
!6237 = !DILocation(line: 4797, column: 18, scope: !6216)
!6238 = !DILocation(line: 4798, column: 58, scope: !6216)
!6239 = !DILocation(line: 4798, column: 63, scope: !6216)
!6240 = !DILocation(line: 4798, column: 72, scope: !6216)
!6241 = !DILocation(line: 4798, column: 42, scope: !6216)
!6242 = !DILocation(line: 4798, column: 14, scope: !6216)
!6243 = !DILocation(line: 4798, column: 12, scope: !6216)
!6244 = !DILocation(line: 4800, column: 13, scope: !6245)
!6245 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 4800, column: 11)
!6246 = !DILocation(line: 4800, column: 12, scope: !6245)
!6247 = !DILocation(line: 4800, column: 11, scope: !6216)
!6248 = !DILocation(line: 4801, column: 10, scope: !6245)
!6249 = !DILocation(line: 4801, column: 3, scope: !6245)
!6250 = !DILocation(line: 4801, column: 8, scope: !6245)
!6251 = !DILocation(line: 4801, column: 2, scope: !6245)
!6252 = !DILocation(line: 4803, column: 8, scope: !6245)
!6253 = !DILocation(line: 4803, column: 2, scope: !6245)
!6254 = !DILocation(line: 4805, column: 17, scope: !6216)
!6255 = !DILocation(line: 4805, column: 7, scope: !6216)
!6256 = !DILocation(line: 4805, column: 10, scope: !6216)
!6257 = !DILocation(line: 4805, column: 15, scope: !6216)
!6258 = !DILocation(line: 4806, column: 27, scope: !6216)
!6259 = !DILocation(line: 4806, column: 7, scope: !6216)
!6260 = !DILocation(line: 4806, column: 25, scope: !6216)
!6261 = !DILocation(line: 4808, column: 7, scope: !6216)
!6262 = !DILocation(line: 4808, column: 35, scope: !6216)
!6263 = !DILocation(line: 4809, column: 7, scope: !6216)
!6264 = !DILocation(line: 4809, column: 35, scope: !6216)
!6265 = !DILocation(line: 4810, column: 24, scope: !6266)
!6266 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 4810, column: 11)
!6267 = !DILocation(line: 4810, column: 11, scope: !6266)
!6268 = !DILocation(line: 4810, column: 30, scope: !6266)
!6269 = !DILocation(line: 4810, column: 11, scope: !6216)
!6270 = !DILocation(line: 4811, column: 2, scope: !6266)
!6271 = !DILocation(line: 4813, column: 31, scope: !6216)
!6272 = !DILocation(line: 4813, column: 7, scope: !6216)
!6273 = !DILocation(line: 4814, column: 14, scope: !6274)
!6274 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 4814, column: 7)
!6275 = !DILocation(line: 4814, column: 12, scope: !6274)
!6276 = !DILocation(line: 4814, column: 19, scope: !6277)
!6277 = distinct !DILexicalBlock(scope: !6274, file: !3, line: 4814, column: 7)
!6278 = !DILocation(line: 4814, column: 7, scope: !6274)
!6279 = !DILocation(line: 4815, column: 7, scope: !6280)
!6280 = distinct !DILexicalBlock(scope: !6277, file: !3, line: 4815, column: 6)
!6281 = !DILocation(line: 4815, column: 12, scope: !6280)
!6282 = !DILocation(line: 4815, column: 6, scope: !6277)
!6283 = !DILocation(line: 4816, column: 4, scope: !6280)
!6284 = !DILocation(line: 4816, column: 32, scope: !6280)
!6285 = !DILocation(line: 4818, column: 4, scope: !6280)
!6286 = !DILocation(line: 4818, column: 32, scope: !6280)
!6287 = !DILocation(line: 4814, column: 68, scope: !6277)
!6288 = !DILocation(line: 4814, column: 7, scope: !6277)
!6289 = distinct !{!6289, !6278, !6290}
!6290 = !DILocation(line: 4818, column: 34, scope: !6274)
!6291 = !DILocation(line: 4820, column: 7, scope: !6216)
!6292 = !DILocation(line: 4821, column: 5, scope: !6216)
!6293 = !DILocation(line: 4788, column: 54, scope: !6213)
!6294 = !DILocation(line: 4788, column: 3, scope: !6213)
!6295 = distinct !{!6295, !6214, !6296}
!6296 = !DILocation(line: 4821, column: 5, scope: !6210)
!6297 = !DILocation(line: 4822, column: 1, scope: !6196)
!6298 = distinct !DISubprogram(name: "VEC_gimple_base_iterate", scope: !422, file: !422, line: 33, type: !6299, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6299 = !DISubroutineType(types: !6300)
!6300 = !{!908, !6301, !7, !6303}
!6301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6302, size: 64)
!6302 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1680)
!6303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1142, size: 64)
!6304 = !DILocalVariable(name: "vec_", arg: 1, scope: !6298, file: !422, line: 33, type: !6301)
!6305 = !DILocation(line: 33, column: 1, scope: !6298)
!6306 = !DILocalVariable(name: "ix_", arg: 2, scope: !6298, file: !422, line: 33, type: !7)
!6307 = !DILocalVariable(name: "ptr", arg: 3, scope: !6298, file: !422, line: 33, type: !6303)
!6308 = !DILocation(line: 33, column: 1, scope: !6309)
!6309 = distinct !DILexicalBlock(scope: !6298, file: !422, line: 33, column: 1)
!6310 = !DILocation(line: 33, column: 1, scope: !6311)
!6311 = distinct !DILexicalBlock(scope: !6309, file: !422, line: 33, column: 1)
!6312 = !DILocation(line: 33, column: 1, scope: !6313)
!6313 = distinct !DILexicalBlock(scope: !6309, file: !422, line: 33, column: 1)
!6314 = distinct !DISubprogram(name: "build_empty_rdg", scope: !3, file: !3, line: 4907, type: !6315, scopeLine: 4908, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6315 = !DISubroutineType(types: !6316)
!6316 = !{!5945, !908}
!6317 = !DILocalVariable(name: "n_stmts", arg: 1, scope: !6314, file: !3, line: 4907, type: !908)
!6318 = !DILocation(line: 4907, column: 22, scope: !6314)
!6319 = !DILocalVariable(name: "nb_data_refs", scope: !6314, file: !3, line: 4909, type: !908)
!6320 = !DILocation(line: 4909, column: 7, scope: !6314)
!6321 = !DILocalVariable(name: "rdg", scope: !6314, file: !3, line: 4910, type: !5945)
!6322 = !DILocation(line: 4910, column: 17, scope: !6314)
!6323 = !DILocation(line: 4910, column: 34, scope: !6314)
!6324 = !DILocation(line: 4910, column: 23, scope: !6314)
!6325 = !DILocation(line: 4912, column: 31, scope: !6314)
!6326 = !DILocation(line: 4912, column: 18, scope: !6314)
!6327 = !DILocation(line: 4912, column: 3, scope: !6314)
!6328 = !DILocation(line: 4912, column: 8, scope: !6314)
!6329 = !DILocation(line: 4912, column: 16, scope: !6314)
!6330 = !DILocation(line: 4914, column: 10, scope: !6314)
!6331 = !DILocation(line: 4914, column: 3, scope: !6314)
!6332 = distinct !DISubprogram(name: "hash_stmt_vertex_info", scope: !3, file: !3, line: 4874, type: !1633, scopeLine: 4875, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6333 = !DILocalVariable(name: "elt", arg: 1, scope: !6332, file: !3, line: 4874, type: !1636)
!6334 = !DILocation(line: 4874, column: 36, scope: !6332)
!6335 = !DILocalVariable(name: "rvi", scope: !6332, file: !3, line: 4876, type: !6336)
!6336 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2346)
!6337 = !DILocation(line: 4876, column: 39, scope: !6332)
!6338 = !DILocation(line: 4877, column: 38, scope: !6332)
!6339 = !DILocation(line: 4877, column: 5, scope: !6332)
!6340 = !DILocalVariable(name: "stmt", scope: !6332, file: !3, line: 4878, type: !1142)
!6341 = !DILocation(line: 4878, column: 10, scope: !6332)
!6342 = !DILocation(line: 4878, column: 17, scope: !6332)
!6343 = !DILocation(line: 4878, column: 22, scope: !6332)
!6344 = !DILocation(line: 4880, column: 10, scope: !6332)
!6345 = !DILocation(line: 4880, column: 29, scope: !6332)
!6346 = !DILocation(line: 4880, column: 3, scope: !6332)
!6347 = distinct !DISubprogram(name: "eq_stmt_vertex_info", scope: !3, file: !3, line: 4886, type: !1641, scopeLine: 4887, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6348 = !DILocalVariable(name: "e1", arg: 1, scope: !6347, file: !3, line: 4886, type: !1636)
!6349 = !DILocation(line: 4886, column: 34, scope: !6347)
!6350 = !DILocalVariable(name: "e2", arg: 2, scope: !6347, file: !3, line: 4886, type: !1636)
!6351 = !DILocation(line: 4886, column: 50, scope: !6347)
!6352 = !DILocalVariable(name: "elt1", scope: !6347, file: !3, line: 4888, type: !2346)
!6353 = !DILocation(line: 4888, column: 33, scope: !6347)
!6354 = !DILocation(line: 4888, column: 73, scope: !6347)
!6355 = !DILocation(line: 4888, column: 40, scope: !6347)
!6356 = !DILocalVariable(name: "elt2", scope: !6347, file: !3, line: 4889, type: !2346)
!6357 = !DILocation(line: 4889, column: 33, scope: !6347)
!6358 = !DILocation(line: 4889, column: 73, scope: !6347)
!6359 = !DILocation(line: 4889, column: 40, scope: !6347)
!6360 = !DILocation(line: 4891, column: 10, scope: !6347)
!6361 = !DILocation(line: 4891, column: 16, scope: !6347)
!6362 = !DILocation(line: 4891, column: 24, scope: !6347)
!6363 = !DILocation(line: 4891, column: 30, scope: !6347)
!6364 = !DILocation(line: 4891, column: 21, scope: !6347)
!6365 = !DILocation(line: 4891, column: 3, scope: !6347)
!6366 = distinct !DISubprogram(name: "hash_stmt_vertex_del", scope: !3, file: !3, line: 4897, type: !1646, scopeLine: 4898, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6367 = !DILocalVariable(name: "e", arg: 1, scope: !6366, file: !3, line: 4897, type: !1095)
!6368 = !DILocation(line: 4897, column: 29, scope: !6366)
!6369 = !DILocation(line: 4899, column: 9, scope: !6366)
!6370 = !DILocation(line: 4899, column: 3, scope: !6366)
!6371 = !DILocation(line: 4900, column: 1, scope: !6366)
!6372 = distinct !DISubprogram(name: "build_rdg", scope: !3, file: !3, line: 4922, type: !6373, scopeLine: 4923, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6373 = !DISubroutineType(types: !6374)
!6374 = !{!5945, !1357}
!6375 = !DILocalVariable(name: "loop", arg: 1, scope: !6372, file: !3, line: 4922, type: !1357)
!6376 = !DILocation(line: 4922, column: 25, scope: !6372)
!6377 = !DILocalVariable(name: "nb_data_refs", scope: !6372, file: !3, line: 4924, type: !908)
!6378 = !DILocation(line: 4924, column: 7, scope: !6372)
!6379 = !DILocalVariable(name: "rdg", scope: !6372, file: !3, line: 4925, type: !5945)
!6380 = !DILocation(line: 4925, column: 17, scope: !6372)
!6381 = !DILocalVariable(name: "dependence_relations", scope: !6372, file: !3, line: 4926, type: !2292)
!6382 = !DILocation(line: 4926, column: 22, scope: !6372)
!6383 = !DILocalVariable(name: "datarefs", scope: !6372, file: !3, line: 4927, type: !2321)
!6384 = !DILocation(line: 4927, column: 33, scope: !6372)
!6385 = !DILocalVariable(name: "stmts", scope: !6372, file: !3, line: 4928, type: !2348)
!6386 = !DILocation(line: 4928, column: 23, scope: !6372)
!6387 = !DILocation(line: 4928, column: 31, scope: !6372)
!6388 = !DILocation(line: 4930, column: 26, scope: !6372)
!6389 = !DILocation(line: 4930, column: 24, scope: !6372)
!6390 = !DILocation(line: 4931, column: 14, scope: !6372)
!6391 = !DILocation(line: 4931, column: 12, scope: !6372)
!6392 = !DILocation(line: 4932, column: 38, scope: !6372)
!6393 = !DILocation(line: 4932, column: 3, scope: !6372)
!6394 = !DILocation(line: 4937, column: 29, scope: !6395)
!6395 = distinct !DILexicalBlock(scope: !6372, file: !3, line: 4937, column: 7)
!6396 = !DILocation(line: 4937, column: 8, scope: !6395)
!6397 = !DILocation(line: 4937, column: 7, scope: !6372)
!6398 = !DILocation(line: 4939, column: 34, scope: !6399)
!6399 = distinct !DILexicalBlock(scope: !6395, file: !3, line: 4938, column: 5)
!6400 = !DILocation(line: 4939, column: 7, scope: !6399)
!6401 = !DILocation(line: 4940, column: 23, scope: !6399)
!6402 = !DILocation(line: 4940, column: 7, scope: !6399)
!6403 = !DILocation(line: 4941, column: 7, scope: !6399)
!6404 = !DILocation(line: 4943, column: 14, scope: !6399)
!6405 = !DILocation(line: 4943, column: 7, scope: !6399)
!6406 = !DILocation(line: 4946, column: 20, scope: !6372)
!6407 = !DILocation(line: 4946, column: 3, scope: !6372)
!6408 = !DILocation(line: 4947, column: 26, scope: !6372)
!6409 = !DILocation(line: 4947, column: 9, scope: !6372)
!6410 = !DILocation(line: 4947, column: 7, scope: !6372)
!6411 = !DILocation(line: 4949, column: 31, scope: !6372)
!6412 = !DILocation(line: 4949, column: 18, scope: !6372)
!6413 = !DILocation(line: 4949, column: 3, scope: !6372)
!6414 = !DILocation(line: 4949, column: 8, scope: !6372)
!6415 = !DILocation(line: 4949, column: 16, scope: !6372)
!6416 = !DILocation(line: 4951, column: 24, scope: !6372)
!6417 = !DILocation(line: 4951, column: 29, scope: !6372)
!6418 = !DILocation(line: 4951, column: 3, scope: !6372)
!6419 = !DILocation(line: 4952, column: 21, scope: !6372)
!6420 = !DILocation(line: 4952, column: 26, scope: !6372)
!6421 = !DILocation(line: 4952, column: 3, scope: !6372)
!6422 = !DILocation(line: 4954, column: 3, scope: !6372)
!6423 = !DILocation(line: 4955, column: 10, scope: !6372)
!6424 = !DILocation(line: 4955, column: 3, scope: !6372)
!6425 = !DILocation(line: 4956, column: 1, scope: !6372)
!6426 = distinct !DISubprogram(name: "VEC_gimple_heap_alloc", scope: !422, file: !422, line: 34, type: !6427, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6427 = !DISubroutineType(types: !6428)
!6428 = !{!2348, !908}
!6429 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6426, file: !422, line: 34, type: !908)
!6430 = !DILocation(line: 34, column: 1, scope: !6426)
!6431 = distinct !DISubprogram(name: "VEC_ddr_p_heap_alloc", scope: !391, file: !391, line: 333, type: !6432, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6432 = !DISubroutineType(types: !6433)
!6433 = !{!2292, !908}
!6434 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6431, file: !391, line: 333, type: !908)
!6435 = !DILocation(line: 333, column: 1, scope: !6431)
!6436 = distinct !DISubprogram(name: "VEC_data_reference_p_heap_alloc", scope: !391, file: !391, line: 209, type: !6437, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6437 = !DISubroutineType(types: !6438)
!6438 = !{!2321, !908}
!6439 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6436, file: !391, line: 209, type: !908)
!6440 = !DILocation(line: 209, column: 1, scope: !6436)
!6441 = distinct !DISubprogram(name: "known_dependences_p", scope: !3, file: !3, line: 4859, type: !6442, scopeLine: 4860, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6442 = !DISubroutineType(types: !6443)
!6443 = !{!931, !2292}
!6444 = !DILocalVariable(name: "dependence_relations", arg: 1, scope: !6441, file: !3, line: 4859, type: !2292)
!6445 = !DILocation(line: 4859, column: 41, scope: !6441)
!6446 = !DILocalVariable(name: "ddr", scope: !6441, file: !3, line: 4861, type: !2242)
!6447 = !DILocation(line: 4861, column: 9, scope: !6441)
!6448 = !DILocalVariable(name: "i", scope: !6441, file: !3, line: 4862, type: !7)
!6449 = !DILocation(line: 4862, column: 16, scope: !6441)
!6450 = !DILocation(line: 4864, column: 10, scope: !6451)
!6451 = distinct !DILexicalBlock(scope: !6441, file: !3, line: 4864, column: 3)
!6452 = !DILocation(line: 4864, column: 8, scope: !6451)
!6453 = !DILocation(line: 4864, column: 15, scope: !6454)
!6454 = distinct !DILexicalBlock(scope: !6451, file: !3, line: 4864, column: 3)
!6455 = !DILocation(line: 4864, column: 3, scope: !6451)
!6456 = !DILocation(line: 4865, column: 9, scope: !6457)
!6457 = distinct !DILexicalBlock(scope: !6454, file: !3, line: 4865, column: 9)
!6458 = !DILocation(line: 4865, column: 36, scope: !6457)
!6459 = !DILocation(line: 4865, column: 33, scope: !6457)
!6460 = !DILocation(line: 4865, column: 9, scope: !6454)
!6461 = !DILocation(line: 4866, column: 7, scope: !6457)
!6462 = !DILocation(line: 4864, column: 67, scope: !6454)
!6463 = !DILocation(line: 4864, column: 3, scope: !6454)
!6464 = distinct !{!6464, !6455, !6465}
!6465 = !DILocation(line: 4866, column: 14, scope: !6451)
!6466 = !DILocation(line: 4868, column: 3, scope: !6441)
!6467 = !DILocation(line: 4869, column: 1, scope: !6441)
!6468 = distinct !DISubprogram(name: "VEC_gimple_heap_free", scope: !422, file: !422, line: 34, type: !6469, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6469 = !DISubroutineType(types: !6470)
!6470 = !{null, !6471}
!6471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2348, size: 64)
!6472 = !DILocalVariable(name: "vec_", arg: 1, scope: !6468, file: !422, line: 34, type: !6471)
!6473 = !DILocation(line: 34, column: 1, scope: !6468)
!6474 = !DILocation(line: 34, column: 1, scope: !6475)
!6475 = distinct !DILexicalBlock(scope: !6468, file: !422, line: 34, column: 1)
!6476 = distinct !DISubprogram(name: "stmts_from_loop", scope: !3, file: !3, line: 4831, type: !6477, scopeLine: 4832, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6477 = !DISubroutineType(types: !6478)
!6478 = !{null, !1357, !6471}
!6479 = !DILocalVariable(name: "loop", arg: 1, scope: !6476, file: !3, line: 4831, type: !1357)
!6480 = !DILocation(line: 4831, column: 31, scope: !6476)
!6481 = !DILocalVariable(name: "stmts", arg: 2, scope: !6476, file: !3, line: 4831, type: !6471)
!6482 = !DILocation(line: 4831, column: 58, scope: !6476)
!6483 = !DILocalVariable(name: "i", scope: !6476, file: !3, line: 4833, type: !7)
!6484 = !DILocation(line: 4833, column: 16, scope: !6476)
!6485 = !DILocalVariable(name: "bbs", scope: !6476, file: !3, line: 4834, type: !5198)
!6486 = !DILocation(line: 4834, column: 16, scope: !6476)
!6487 = !DILocation(line: 4834, column: 50, scope: !6476)
!6488 = !DILocation(line: 4834, column: 22, scope: !6476)
!6489 = !DILocation(line: 4836, column: 10, scope: !6490)
!6490 = distinct !DILexicalBlock(scope: !6476, file: !3, line: 4836, column: 3)
!6491 = !DILocation(line: 4836, column: 8, scope: !6490)
!6492 = !DILocation(line: 4836, column: 15, scope: !6493)
!6493 = distinct !DILexicalBlock(scope: !6490, file: !3, line: 4836, column: 3)
!6494 = !DILocation(line: 4836, column: 19, scope: !6493)
!6495 = !DILocation(line: 4836, column: 25, scope: !6493)
!6496 = !DILocation(line: 4836, column: 17, scope: !6493)
!6497 = !DILocation(line: 4836, column: 3, scope: !6490)
!6498 = !DILocalVariable(name: "bb", scope: !6499, file: !3, line: 4838, type: !1594)
!6499 = distinct !DILexicalBlock(scope: !6493, file: !3, line: 4837, column: 5)
!6500 = !DILocation(line: 4838, column: 19, scope: !6499)
!6501 = !DILocation(line: 4838, column: 24, scope: !6499)
!6502 = !DILocation(line: 4838, column: 28, scope: !6499)
!6503 = !DILocalVariable(name: "bsi", scope: !6499, file: !3, line: 4839, type: !5250)
!6504 = !DILocation(line: 4839, column: 28, scope: !6499)
!6505 = !DILocalVariable(name: "stmt", scope: !6499, file: !3, line: 4840, type: !1142)
!6506 = !DILocation(line: 4840, column: 14, scope: !6499)
!6507 = !DILocation(line: 4842, column: 34, scope: !6508)
!6508 = distinct !DILexicalBlock(scope: !6499, file: !3, line: 4842, column: 7)
!6509 = !DILocation(line: 4842, column: 18, scope: !6508)
!6510 = !DILocation(line: 4842, column: 12, scope: !6508)
!6511 = !DILocation(line: 4842, column: 40, scope: !6512)
!6512 = distinct !DILexicalBlock(scope: !6508, file: !3, line: 4842, column: 7)
!6513 = !DILocation(line: 4842, column: 39, scope: !6512)
!6514 = !DILocation(line: 4842, column: 7, scope: !6508)
!6515 = !DILocation(line: 4843, column: 2, scope: !6512)
!6516 = !DILocation(line: 4842, column: 57, scope: !6512)
!6517 = !DILocation(line: 4842, column: 7, scope: !6512)
!6518 = distinct !{!6518, !6514, !6519}
!6519 = !DILocation(line: 4843, column: 2, scope: !6508)
!6520 = !DILocation(line: 4845, column: 32, scope: !6521)
!6521 = distinct !DILexicalBlock(scope: !6499, file: !3, line: 4845, column: 7)
!6522 = !DILocation(line: 4845, column: 18, scope: !6521)
!6523 = !DILocation(line: 4845, column: 12, scope: !6521)
!6524 = !DILocation(line: 4845, column: 38, scope: !6525)
!6525 = distinct !DILexicalBlock(scope: !6521, file: !3, line: 4845, column: 7)
!6526 = !DILocation(line: 4845, column: 37, scope: !6525)
!6527 = !DILocation(line: 4845, column: 7, scope: !6521)
!6528 = !DILocation(line: 4847, column: 11, scope: !6529)
!6529 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 4846, column: 2)
!6530 = !DILocation(line: 4847, column: 9, scope: !6529)
!6531 = !DILocation(line: 4848, column: 21, scope: !6532)
!6532 = distinct !DILexicalBlock(scope: !6529, file: !3, line: 4848, column: 8)
!6533 = !DILocation(line: 4848, column: 8, scope: !6532)
!6534 = !DILocation(line: 4848, column: 27, scope: !6532)
!6535 = !DILocation(line: 4848, column: 8, scope: !6529)
!6536 = !DILocation(line: 4849, column: 6, scope: !6532)
!6537 = !DILocation(line: 4850, column: 2, scope: !6529)
!6538 = !DILocation(line: 4845, column: 55, scope: !6525)
!6539 = !DILocation(line: 4845, column: 7, scope: !6525)
!6540 = distinct !{!6540, !6527, !6541}
!6541 = !DILocation(line: 4850, column: 2, scope: !6521)
!6542 = !DILocation(line: 4851, column: 5, scope: !6499)
!6543 = !DILocation(line: 4836, column: 37, scope: !6493)
!6544 = !DILocation(line: 4836, column: 3, scope: !6493)
!6545 = distinct !{!6545, !6497, !6546}
!6546 = !DILocation(line: 4851, column: 5, scope: !6490)
!6547 = !DILocation(line: 4853, column: 9, scope: !6476)
!6548 = !DILocation(line: 4853, column: 3, scope: !6476)
!6549 = !DILocation(line: 4854, column: 1, scope: !6476)
!6550 = distinct !DISubprogram(name: "VEC_gimple_base_length", scope: !422, file: !422, line: 33, type: !6551, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6551 = !DISubroutineType(types: !6552)
!6552 = !{!7, !6301}
!6553 = !DILocalVariable(name: "vec_", arg: 1, scope: !6550, file: !422, line: 33, type: !6301)
!6554 = !DILocation(line: 33, column: 1, scope: !6550)
!6555 = distinct !DISubprogram(name: "create_rdg_edges", scope: !3, file: !3, line: 4763, type: !6556, scopeLine: 4764, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6556 = !DISubroutineType(types: !6557)
!6557 = !{null, !5945, !2292}
!6558 = !DILocalVariable(name: "rdg", arg: 1, scope: !6555, file: !3, line: 4763, type: !5945)
!6559 = !DILocation(line: 4763, column: 33, scope: !6555)
!6560 = !DILocalVariable(name: "ddrs", arg: 2, scope: !6555, file: !3, line: 4763, type: !2292)
!6561 = !DILocation(line: 4763, column: 57, scope: !6555)
!6562 = !DILocalVariable(name: "i", scope: !6555, file: !3, line: 4765, type: !908)
!6563 = !DILocation(line: 4765, column: 7, scope: !6555)
!6564 = !DILocalVariable(name: "ddr", scope: !6555, file: !3, line: 4766, type: !2243)
!6565 = !DILocation(line: 4766, column: 36, scope: !6555)
!6566 = !DILocalVariable(name: "def_p", scope: !6555, file: !3, line: 4767, type: !2359)
!6567 = !DILocation(line: 4767, column: 17, scope: !6555)
!6568 = !DILocalVariable(name: "iter", scope: !6555, file: !3, line: 4768, type: !6569)
!6569 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !466, line: 140, baseType: !6570)
!6570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !466, line: 131, size: 320, elements: !6571)
!6571 = !{!6572, !6573, !6574, !6576, !6578, !6579, !6580}
!6572 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !6570, file: !466, line: 133, baseType: !931, size: 8)
!6573 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !6570, file: !466, line: 134, baseType: !465, size: 32, offset: 32)
!6574 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !6570, file: !466, line: 135, baseType: !6575, size: 64, offset: 64)
!6575 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !466, line: 42, baseType: !1171)
!6576 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !6570, file: !466, line: 136, baseType: !6577, size: 64, offset: 128)
!6577 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !466, line: 50, baseType: !1178)
!6578 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !6570, file: !466, line: 137, baseType: !908, size: 32, offset: 192)
!6579 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !6570, file: !466, line: 138, baseType: !908, size: 32, offset: 224)
!6580 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !6570, file: !466, line: 139, baseType: !1142, size: 64, offset: 256)
!6581 = !DILocation(line: 4768, column: 15, scope: !6555)
!6582 = !DILocation(line: 4770, column: 10, scope: !6583)
!6583 = distinct !DILexicalBlock(scope: !6555, file: !3, line: 4770, column: 3)
!6584 = !DILocation(line: 4770, column: 8, scope: !6583)
!6585 = !DILocation(line: 4770, column: 15, scope: !6586)
!6586 = distinct !DILexicalBlock(scope: !6583, file: !3, line: 4770, column: 3)
!6587 = !DILocation(line: 4770, column: 3, scope: !6583)
!6588 = !DILocation(line: 4771, column: 9, scope: !6589)
!6589 = distinct !DILexicalBlock(scope: !6586, file: !3, line: 4771, column: 9)
!6590 = !DILocation(line: 4771, column: 33, scope: !6589)
!6591 = !DILocation(line: 4771, column: 9, scope: !6586)
!6592 = !DILocation(line: 4772, column: 32, scope: !6589)
!6593 = !DILocation(line: 4772, column: 37, scope: !6589)
!6594 = !DILocation(line: 4772, column: 7, scope: !6589)
!6595 = !DILocation(line: 4771, column: 36, scope: !6589)
!6596 = !DILocation(line: 4770, column: 51, scope: !6586)
!6597 = !DILocation(line: 4770, column: 3, scope: !6586)
!6598 = distinct !{!6598, !6587, !6599}
!6599 = !DILocation(line: 4772, column: 40, scope: !6583)
!6600 = !DILocation(line: 4774, column: 10, scope: !6601)
!6601 = distinct !DILexicalBlock(scope: !6555, file: !3, line: 4774, column: 3)
!6602 = !DILocation(line: 4774, column: 8, scope: !6601)
!6603 = !DILocation(line: 4774, column: 15, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6601, file: !3, line: 4774, column: 3)
!6605 = !DILocation(line: 4774, column: 19, scope: !6604)
!6606 = !DILocation(line: 4774, column: 24, scope: !6604)
!6607 = !DILocation(line: 4774, column: 17, scope: !6604)
!6608 = !DILocation(line: 4774, column: 3, scope: !6601)
!6609 = !DILocation(line: 4775, column: 5, scope: !6610)
!6610 = distinct !DILexicalBlock(scope: !6604, file: !3, line: 4775, column: 5)
!6611 = !DILocation(line: 4775, column: 5, scope: !6612)
!6612 = distinct !DILexicalBlock(scope: !6610, file: !3, line: 4775, column: 5)
!6613 = !DILocation(line: 4777, column: 36, scope: !6612)
!6614 = !DILocation(line: 4777, column: 41, scope: !6612)
!6615 = !DILocation(line: 4777, column: 63, scope: !6612)
!6616 = !DILocation(line: 4777, column: 7, scope: !6612)
!6617 = distinct !{!6617, !6609, !6618}
!6618 = !DILocation(line: 4777, column: 64, scope: !6610)
!6619 = !DILocation(line: 4774, column: 37, scope: !6604)
!6620 = !DILocation(line: 4774, column: 3, scope: !6604)
!6621 = distinct !{!6621, !6608, !6622}
!6622 = !DILocation(line: 4777, column: 64, scope: !6601)
!6623 = !DILocation(line: 4778, column: 1, scope: !6555)
!6624 = distinct !DISubprogram(name: "free_rdg", scope: !3, file: !3, line: 4961, type: !6160, scopeLine: 4962, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6625 = !DILocalVariable(name: "rdg", arg: 1, scope: !6624, file: !3, line: 4961, type: !5945)
!6626 = !DILocation(line: 4961, column: 25, scope: !6624)
!6627 = !DILocalVariable(name: "i", scope: !6624, file: !3, line: 4963, type: !908)
!6628 = !DILocation(line: 4963, column: 7, scope: !6624)
!6629 = !DILocation(line: 4965, column: 10, scope: !6630)
!6630 = distinct !DILexicalBlock(scope: !6624, file: !3, line: 4965, column: 3)
!6631 = !DILocation(line: 4965, column: 8, scope: !6630)
!6632 = !DILocation(line: 4965, column: 15, scope: !6633)
!6633 = distinct !DILexicalBlock(scope: !6630, file: !3, line: 4965, column: 3)
!6634 = !DILocation(line: 4965, column: 19, scope: !6633)
!6635 = !DILocation(line: 4965, column: 24, scope: !6633)
!6636 = !DILocation(line: 4965, column: 17, scope: !6633)
!6637 = !DILocation(line: 4965, column: 3, scope: !6630)
!6638 = !DILocation(line: 4966, column: 11, scope: !6633)
!6639 = !DILocation(line: 4966, column: 16, scope: !6633)
!6640 = !DILocation(line: 4966, column: 25, scope: !6633)
!6641 = !DILocation(line: 4966, column: 28, scope: !6633)
!6642 = !DILocation(line: 4966, column: 5, scope: !6633)
!6643 = !DILocation(line: 4965, column: 37, scope: !6633)
!6644 = !DILocation(line: 4965, column: 3, scope: !6633)
!6645 = distinct !{!6645, !6637, !6646}
!6646 = !DILocation(line: 4966, column: 32, scope: !6630)
!6647 = !DILocation(line: 4968, column: 16, scope: !6624)
!6648 = !DILocation(line: 4968, column: 21, scope: !6624)
!6649 = !DILocation(line: 4968, column: 3, scope: !6624)
!6650 = !DILocation(line: 4969, column: 15, scope: !6624)
!6651 = !DILocation(line: 4969, column: 3, scope: !6624)
!6652 = !DILocation(line: 4970, column: 1, scope: !6624)
!6653 = distinct !DISubprogram(name: "stores_from_loop", scope: !3, file: !3, line: 4976, type: !6477, scopeLine: 4977, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6654 = !DILocalVariable(name: "loop", arg: 1, scope: !6653, file: !3, line: 4976, type: !1357)
!6655 = !DILocation(line: 4976, column: 32, scope: !6653)
!6656 = !DILocalVariable(name: "stmts", arg: 2, scope: !6653, file: !3, line: 4976, type: !6471)
!6657 = !DILocation(line: 4976, column: 59, scope: !6653)
!6658 = !DILocalVariable(name: "i", scope: !6653, file: !3, line: 4978, type: !7)
!6659 = !DILocation(line: 4978, column: 16, scope: !6653)
!6660 = !DILocalVariable(name: "bbs", scope: !6653, file: !3, line: 4979, type: !5198)
!6661 = !DILocation(line: 4979, column: 16, scope: !6653)
!6662 = !DILocation(line: 4979, column: 50, scope: !6653)
!6663 = !DILocation(line: 4979, column: 22, scope: !6653)
!6664 = !DILocation(line: 4981, column: 10, scope: !6665)
!6665 = distinct !DILexicalBlock(scope: !6653, file: !3, line: 4981, column: 3)
!6666 = !DILocation(line: 4981, column: 8, scope: !6665)
!6667 = !DILocation(line: 4981, column: 15, scope: !6668)
!6668 = distinct !DILexicalBlock(scope: !6665, file: !3, line: 4981, column: 3)
!6669 = !DILocation(line: 4981, column: 19, scope: !6668)
!6670 = !DILocation(line: 4981, column: 25, scope: !6668)
!6671 = !DILocation(line: 4981, column: 17, scope: !6668)
!6672 = !DILocation(line: 4981, column: 3, scope: !6665)
!6673 = !DILocalVariable(name: "bb", scope: !6674, file: !3, line: 4983, type: !1594)
!6674 = distinct !DILexicalBlock(scope: !6668, file: !3, line: 4982, column: 5)
!6675 = !DILocation(line: 4983, column: 19, scope: !6674)
!6676 = !DILocation(line: 4983, column: 24, scope: !6674)
!6677 = !DILocation(line: 4983, column: 28, scope: !6674)
!6678 = !DILocalVariable(name: "bsi", scope: !6674, file: !3, line: 4984, type: !5250)
!6679 = !DILocation(line: 4984, column: 28, scope: !6674)
!6680 = !DILocation(line: 4986, column: 32, scope: !6681)
!6681 = distinct !DILexicalBlock(scope: !6674, file: !3, line: 4986, column: 7)
!6682 = !DILocation(line: 4986, column: 18, scope: !6681)
!6683 = !DILocation(line: 4986, column: 12, scope: !6681)
!6684 = !DILocation(line: 4986, column: 38, scope: !6685)
!6685 = distinct !DILexicalBlock(scope: !6681, file: !3, line: 4986, column: 7)
!6686 = !DILocation(line: 4986, column: 37, scope: !6685)
!6687 = !DILocation(line: 4986, column: 7, scope: !6681)
!6688 = !DILocation(line: 4987, column: 19, scope: !6689)
!6689 = distinct !DILexicalBlock(scope: !6685, file: !3, line: 4987, column: 6)
!6690 = !DILocation(line: 4987, column: 6, scope: !6689)
!6691 = !DILocation(line: 4987, column: 6, scope: !6685)
!6692 = !DILocation(line: 4988, column: 4, scope: !6689)
!6693 = !DILocation(line: 4987, column: 33, scope: !6689)
!6694 = !DILocation(line: 4986, column: 55, scope: !6685)
!6695 = !DILocation(line: 4986, column: 7, scope: !6685)
!6696 = distinct !{!6696, !6687, !6697}
!6697 = !DILocation(line: 4988, column: 4, scope: !6681)
!6698 = !DILocation(line: 4989, column: 5, scope: !6674)
!6699 = !DILocation(line: 4981, column: 37, scope: !6668)
!6700 = !DILocation(line: 4981, column: 3, scope: !6668)
!6701 = distinct !{!6701, !6672, !6702}
!6702 = !DILocation(line: 4989, column: 5, scope: !6665)
!6703 = !DILocation(line: 4991, column: 9, scope: !6653)
!6704 = !DILocation(line: 4991, column: 3, scope: !6653)
!6705 = !DILocation(line: 4992, column: 1, scope: !6653)
!6706 = distinct !DISubprogram(name: "gsi_start_bb", scope: !422, file: !422, line: 4418, type: !6707, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6707 = !DISubroutineType(types: !6708)
!6708 = !{!5250, !1594}
!6709 = !DILocalVariable(name: "bb", arg: 1, scope: !6706, file: !422, line: 4418, type: !1594)
!6710 = !DILocation(line: 4418, column: 27, scope: !6706)
!6711 = !DILocalVariable(name: "i", scope: !6706, file: !422, line: 4420, type: !5250)
!6712 = !DILocation(line: 4420, column: 24, scope: !6706)
!6713 = !DILocalVariable(name: "seq", scope: !6706, file: !422, line: 4421, type: !1132)
!6714 = !DILocation(line: 4421, column: 14, scope: !6706)
!6715 = !DILocation(line: 4423, column: 17, scope: !6706)
!6716 = !DILocation(line: 4423, column: 9, scope: !6706)
!6717 = !DILocation(line: 4423, column: 7, scope: !6706)
!6718 = !DILocation(line: 4424, column: 29, scope: !6706)
!6719 = !DILocation(line: 4424, column: 11, scope: !6706)
!6720 = !DILocation(line: 4424, column: 5, scope: !6706)
!6721 = !DILocation(line: 4424, column: 9, scope: !6706)
!6722 = !DILocation(line: 4425, column: 11, scope: !6706)
!6723 = !DILocation(line: 4425, column: 5, scope: !6706)
!6724 = !DILocation(line: 4425, column: 9, scope: !6706)
!6725 = !DILocation(line: 4426, column: 10, scope: !6706)
!6726 = !DILocation(line: 4426, column: 5, scope: !6706)
!6727 = !DILocation(line: 4426, column: 8, scope: !6706)
!6728 = !DILocation(line: 4428, column: 3, scope: !6706)
!6729 = distinct !DISubprogram(name: "gsi_end_p", scope: !422, file: !422, line: 4467, type: !6730, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6730 = !DISubroutineType(types: !6731)
!6731 = !{!931, !5250}
!6732 = !DILocalVariable(name: "i", arg: 1, scope: !6729, file: !422, line: 4467, type: !5250)
!6733 = !DILocation(line: 4467, column: 33, scope: !6729)
!6734 = !DILocation(line: 4469, column: 12, scope: !6729)
!6735 = !DILocation(line: 4469, column: 16, scope: !6729)
!6736 = !DILocation(line: 4469, column: 10, scope: !6729)
!6737 = !DILocation(line: 4469, column: 3, scope: !6729)
!6738 = distinct !DISubprogram(name: "gimple_vdef", scope: !422, file: !422, line: 1375, type: !4950, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6739 = !DILocalVariable(name: "g", arg: 1, scope: !6738, file: !422, line: 1375, type: !2363)
!6740 = !DILocation(line: 1375, column: 27, scope: !6738)
!6741 = !DILocation(line: 1377, column: 28, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6738, file: !422, line: 1377, column: 7)
!6743 = !DILocation(line: 1377, column: 8, scope: !6742)
!6744 = !DILocation(line: 1377, column: 7, scope: !6738)
!6745 = !DILocation(line: 1378, column: 5, scope: !6742)
!6746 = !DILocation(line: 1379, column: 10, scope: !6738)
!6747 = !DILocation(line: 1379, column: 13, scope: !6738)
!6748 = !DILocation(line: 1379, column: 23, scope: !6738)
!6749 = !DILocation(line: 1379, column: 3, scope: !6738)
!6750 = !DILocation(line: 1380, column: 1, scope: !6738)
!6751 = distinct !DISubprogram(name: "gsi_stmt", scope: !422, file: !422, line: 4501, type: !6752, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6752 = !DISubroutineType(types: !6753)
!6753 = !{!1142, !5250}
!6754 = !DILocalVariable(name: "i", arg: 1, scope: !6751, file: !422, line: 4501, type: !5250)
!6755 = !DILocation(line: 4501, column: 32, scope: !6751)
!6756 = !DILocation(line: 4503, column: 12, scope: !6751)
!6757 = !DILocation(line: 4503, column: 17, scope: !6751)
!6758 = !DILocation(line: 4503, column: 3, scope: !6751)
!6759 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !422, file: !422, line: 34, type: !6760, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6760 = !DISubroutineType(types: !6761)
!6761 = !{!6303, !6471, !1142}
!6762 = !DILocalVariable(name: "vec_", arg: 1, scope: !6759, file: !422, line: 34, type: !6471)
!6763 = !DILocation(line: 34, column: 1, scope: !6759)
!6764 = !DILocalVariable(name: "obj_", arg: 2, scope: !6759, file: !422, line: 34, type: !1142)
!6765 = distinct !DISubprogram(name: "gsi_next", scope: !422, file: !422, line: 4485, type: !6766, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6766 = !DISubroutineType(types: !6767)
!6767 = !{null, !6768}
!6768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5250, size: 64)
!6769 = !DILocalVariable(name: "i", arg: 1, scope: !6765, file: !422, line: 4485, type: !6768)
!6770 = !DILocation(line: 4485, column: 33, scope: !6765)
!6771 = !DILocation(line: 4487, column: 12, scope: !6765)
!6772 = !DILocation(line: 4487, column: 15, scope: !6765)
!6773 = !DILocation(line: 4487, column: 20, scope: !6765)
!6774 = !DILocation(line: 4487, column: 3, scope: !6765)
!6775 = !DILocation(line: 4487, column: 6, scope: !6765)
!6776 = !DILocation(line: 4487, column: 10, scope: !6765)
!6777 = !DILocation(line: 4488, column: 1, scope: !6765)
!6778 = distinct !DISubprogram(name: "rdg_defs_used_in_other_loops_p", scope: !3, file: !3, line: 5032, type: !6779, scopeLine: 5033, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6779 = !DISubroutineType(types: !6780)
!6780 = !{!931, !5945, !908}
!6781 = !DILocalVariable(name: "rdg", arg: 1, scope: !6778, file: !3, line: 5032, type: !5945)
!6782 = !DILocation(line: 5032, column: 47, scope: !6778)
!6783 = !DILocalVariable(name: "v", arg: 2, scope: !6778, file: !3, line: 5032, type: !908)
!6784 = !DILocation(line: 5032, column: 56, scope: !6778)
!6785 = !DILocalVariable(name: "stmt", scope: !6778, file: !3, line: 5034, type: !1142)
!6786 = !DILocation(line: 5034, column: 10, scope: !6778)
!6787 = !DILocation(line: 5034, column: 17, scope: !6778)
!6788 = !DILocalVariable(name: "loop", scope: !6778, file: !3, line: 5035, type: !1357)
!6789 = !DILocation(line: 5035, column: 16, scope: !6778)
!6790 = !DILocation(line: 5035, column: 45, scope: !6778)
!6791 = !DILocation(line: 5035, column: 23, scope: !6778)
!6792 = !DILocalVariable(name: "imm_use_p", scope: !6778, file: !3, line: 5036, type: !2360)
!6793 = !DILocation(line: 5036, column: 17, scope: !6778)
!6794 = !DILocalVariable(name: "iterator", scope: !6778, file: !3, line: 5037, type: !6795)
!6795 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !1534, line: 249, baseType: !6796)
!6796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !1534, line: 238, size: 448, elements: !6797)
!6797 = !{!6798, !6799, !6800, !6801}
!6798 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !6796, file: !1534, line: 241, baseType: !2361, size: 64)
!6799 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !6796, file: !1534, line: 243, baseType: !2361, size: 64, offset: 64)
!6800 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !6796, file: !1534, line: 245, baseType: !2362, size: 256, offset: 128)
!6801 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !6796, file: !1534, line: 248, baseType: !2361, size: 64, offset: 384)
!6802 = !DILocation(line: 5037, column: 20, scope: !6778)
!6803 = !DILocalVariable(name: "it", scope: !6778, file: !3, line: 5038, type: !6569)
!6804 = !DILocation(line: 5038, column: 15, scope: !6778)
!6805 = !DILocalVariable(name: "def_p", scope: !6778, file: !3, line: 5039, type: !2359)
!6806 = !DILocation(line: 5039, column: 17, scope: !6778)
!6807 = !DILocation(line: 5041, column: 8, scope: !6808)
!6808 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 5041, column: 7)
!6809 = !DILocation(line: 5041, column: 7, scope: !6778)
!6810 = !DILocation(line: 5042, column: 5, scope: !6808)
!6811 = !DILocation(line: 5044, column: 3, scope: !6812)
!6812 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 5044, column: 3)
!6813 = !DILocation(line: 5044, column: 3, scope: !6814)
!6814 = distinct !DILexicalBlock(scope: !6812, file: !3, line: 5044, column: 3)
!6815 = !DILocation(line: 5046, column: 7, scope: !6816)
!6816 = distinct !DILexicalBlock(scope: !6817, file: !3, line: 5046, column: 7)
!6817 = distinct !DILexicalBlock(scope: !6814, file: !3, line: 5045, column: 5)
!6818 = !DILocation(line: 5046, column: 7, scope: !6819)
!6819 = distinct !DILexicalBlock(scope: !6816, file: !3, line: 5046, column: 7)
!6820 = !DILocation(line: 5048, column: 30, scope: !6821)
!6821 = distinct !DILexicalBlock(scope: !6822, file: !3, line: 5048, column: 8)
!6822 = distinct !DILexicalBlock(scope: !6819, file: !3, line: 5047, column: 2)
!6823 = !DILocation(line: 5048, column: 8, scope: !6821)
!6824 = !DILocation(line: 5048, column: 55, scope: !6821)
!6825 = !DILocation(line: 5048, column: 52, scope: !6821)
!6826 = !DILocation(line: 5048, column: 8, scope: !6822)
!6827 = !DILocation(line: 5049, column: 6, scope: !6821)
!6828 = !DILocation(line: 5050, column: 2, scope: !6822)
!6829 = distinct !{!6829, !6815, !6830}
!6830 = !DILocation(line: 5050, column: 2, scope: !6816)
!6831 = !DILocation(line: 5051, column: 5, scope: !6817)
!6832 = distinct !{!6832, !6811, !6833}
!6833 = !DILocation(line: 5051, column: 5, scope: !6812)
!6834 = !DILocation(line: 5053, column: 3, scope: !6778)
!6835 = !DILocation(line: 5054, column: 1, scope: !6778)
!6836 = distinct !DISubprogram(name: "op_iter_init_phidef", scope: !3700, file: !3700, line: 939, type: !6837, scopeLine: 940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6837 = !DISubroutineType(types: !6838)
!6838 = !{!2359, !6839, !1142, !908}
!6839 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6569, size: 64)
!6840 = !DILocalVariable(name: "ptr", arg: 1, scope: !6836, file: !3700, line: 939, type: !6839)
!6841 = !DILocation(line: 939, column: 35, scope: !6836)
!6842 = !DILocalVariable(name: "phi", arg: 2, scope: !6836, file: !3700, line: 939, type: !1142)
!6843 = !DILocation(line: 939, column: 47, scope: !6836)
!6844 = !DILocalVariable(name: "flags", arg: 3, scope: !6836, file: !3700, line: 939, type: !908)
!6845 = !DILocation(line: 939, column: 56, scope: !6836)
!6846 = !DILocalVariable(name: "phi_def", scope: !6836, file: !3700, line: 941, type: !811)
!6847 = !DILocation(line: 941, column: 8, scope: !6836)
!6848 = !DILocation(line: 941, column: 18, scope: !6836)
!6849 = !DILocalVariable(name: "comp", scope: !6836, file: !3700, line: 942, type: !908)
!6850 = !DILocation(line: 942, column: 7, scope: !6836)
!6851 = !DILocation(line: 944, column: 28, scope: !6836)
!6852 = !DILocation(line: 944, column: 3, scope: !6836)
!6853 = !DILocation(line: 945, column: 3, scope: !6836)
!6854 = !DILocation(line: 945, column: 8, scope: !6836)
!6855 = !DILocation(line: 945, column: 13, scope: !6836)
!6856 = !DILocation(line: 947, column: 3, scope: !6836)
!6857 = !DILocation(line: 949, column: 26, scope: !6836)
!6858 = !DILocation(line: 949, column: 11, scope: !6836)
!6859 = !DILocation(line: 949, column: 8, scope: !6836)
!6860 = !DILocation(line: 953, column: 8, scope: !6861)
!6861 = distinct !DILexicalBlock(scope: !6836, file: !3700, line: 953, column: 7)
!6862 = !DILocation(line: 953, column: 16, scope: !6861)
!6863 = !DILocation(line: 953, column: 14, scope: !6861)
!6864 = !DILocation(line: 953, column: 22, scope: !6861)
!6865 = !DILocation(line: 953, column: 7, scope: !6836)
!6866 = !DILocation(line: 955, column: 7, scope: !6867)
!6867 = distinct !DILexicalBlock(scope: !6861, file: !3700, line: 954, column: 5)
!6868 = !DILocation(line: 955, column: 12, scope: !6867)
!6869 = !DILocation(line: 955, column: 17, scope: !6867)
!6870 = !DILocation(line: 956, column: 7, scope: !6867)
!6871 = !DILocation(line: 959, column: 3, scope: !6836)
!6872 = !DILocation(line: 959, column: 8, scope: !6836)
!6873 = !DILocation(line: 959, column: 18, scope: !6836)
!6874 = !DILocation(line: 963, column: 10, scope: !6836)
!6875 = !DILocation(line: 963, column: 3, scope: !6836)
!6876 = !DILocation(line: 964, column: 1, scope: !6836)
!6877 = distinct !DISubprogram(name: "op_iter_init_def", scope: !3700, file: !3700, line: 780, type: !6837, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6878 = !DILocalVariable(name: "ptr", arg: 1, scope: !6877, file: !3700, line: 780, type: !6839)
!6879 = !DILocation(line: 780, column: 32, scope: !6877)
!6880 = !DILocalVariable(name: "stmt", arg: 2, scope: !6877, file: !3700, line: 780, type: !1142)
!6881 = !DILocation(line: 780, column: 44, scope: !6877)
!6882 = !DILocalVariable(name: "flags", arg: 3, scope: !6877, file: !3700, line: 780, type: !908)
!6883 = !DILocation(line: 780, column: 54, scope: !6877)
!6884 = !DILocation(line: 782, column: 3, scope: !6877)
!6885 = !DILocation(line: 784, column: 17, scope: !6877)
!6886 = !DILocation(line: 784, column: 22, scope: !6877)
!6887 = !DILocation(line: 784, column: 28, scope: !6877)
!6888 = !DILocation(line: 784, column: 3, scope: !6877)
!6889 = !DILocation(line: 785, column: 3, scope: !6877)
!6890 = !DILocation(line: 785, column: 8, scope: !6877)
!6891 = !DILocation(line: 785, column: 18, scope: !6877)
!6892 = !DILocation(line: 786, column: 28, scope: !6877)
!6893 = !DILocation(line: 786, column: 10, scope: !6877)
!6894 = !DILocation(line: 786, column: 3, scope: !6877)
!6895 = distinct !DISubprogram(name: "op_iter_done", scope: !3700, file: !3700, line: 652, type: !6896, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6896 = !DISubroutineType(types: !6897)
!6897 = !{!931, !6898}
!6898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6899, size: 64)
!6899 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6569)
!6900 = !DILocalVariable(name: "ptr", arg: 1, scope: !6895, file: !3700, line: 652, type: !6898)
!6901 = !DILocation(line: 652, column: 34, scope: !6895)
!6902 = !DILocation(line: 654, column: 10, scope: !6895)
!6903 = !DILocation(line: 654, column: 15, scope: !6895)
!6904 = !DILocation(line: 654, column: 3, scope: !6895)
!6905 = distinct !DISubprogram(name: "first_readonly_imm_use", scope: !3700, file: !3700, line: 292, type: !6906, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6906 = !DISubroutineType(types: !6907)
!6907 = !{!2360, !6908, !811}
!6908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6795, size: 64)
!6909 = !DILocalVariable(name: "imm", arg: 1, scope: !6905, file: !3700, line: 292, type: !6908)
!6910 = !DILocation(line: 292, column: 43, scope: !6905)
!6911 = !DILocalVariable(name: "var", arg: 2, scope: !6905, file: !3700, line: 292, type: !811)
!6912 = !DILocation(line: 292, column: 53, scope: !6905)
!6913 = !DILocation(line: 294, column: 18, scope: !6905)
!6914 = !DILocation(line: 294, column: 3, scope: !6905)
!6915 = !DILocation(line: 294, column: 8, scope: !6905)
!6916 = !DILocation(line: 294, column: 14, scope: !6905)
!6917 = !DILocation(line: 295, column: 18, scope: !6905)
!6918 = !DILocation(line: 295, column: 23, scope: !6905)
!6919 = !DILocation(line: 295, column: 30, scope: !6905)
!6920 = !DILocation(line: 295, column: 3, scope: !6905)
!6921 = !DILocation(line: 295, column: 8, scope: !6905)
!6922 = !DILocation(line: 295, column: 16, scope: !6905)
!6923 = !DILocation(line: 299, column: 31, scope: !6924)
!6924 = distinct !DILexicalBlock(scope: !6905, file: !3700, line: 299, column: 7)
!6925 = !DILocation(line: 299, column: 7, scope: !6924)
!6926 = !DILocation(line: 299, column: 7, scope: !6905)
!6927 = !DILocation(line: 300, column: 5, scope: !6924)
!6928 = !DILocation(line: 301, column: 10, scope: !6905)
!6929 = !DILocation(line: 301, column: 15, scope: !6905)
!6930 = !DILocation(line: 301, column: 3, scope: !6905)
!6931 = !DILocation(line: 302, column: 1, scope: !6905)
!6932 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !3700, file: !3700, line: 434, type: !6933, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6933 = !DISubroutineType(types: !6934)
!6934 = !{!811, !2359}
!6935 = !DILocalVariable(name: "def", arg: 1, scope: !6932, file: !3700, line: 434, type: !2359)
!6936 = !DILocation(line: 434, column: 33, scope: !6932)
!6937 = !DILocation(line: 436, column: 11, scope: !6932)
!6938 = !DILocation(line: 436, column: 10, scope: !6932)
!6939 = !DILocation(line: 436, column: 3, scope: !6932)
!6940 = distinct !DISubprogram(name: "end_readonly_imm_use_p", scope: !3700, file: !3700, line: 285, type: !6941, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6941 = !DISubroutineType(types: !6942)
!6942 = !{!931, !6943}
!6943 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6944, size: 64)
!6944 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6795)
!6945 = !DILocalVariable(name: "imm", arg: 1, scope: !6940, file: !3700, line: 285, type: !6943)
!6946 = !DILocation(line: 285, column: 49, scope: !6940)
!6947 = !DILocation(line: 287, column: 11, scope: !6940)
!6948 = !DILocation(line: 287, column: 16, scope: !6940)
!6949 = !DILocation(line: 287, column: 27, scope: !6940)
!6950 = !DILocation(line: 287, column: 32, scope: !6940)
!6951 = !DILocation(line: 287, column: 24, scope: !6940)
!6952 = !DILocation(line: 287, column: 10, scope: !6940)
!6953 = !DILocation(line: 287, column: 3, scope: !6940)
!6954 = distinct !DISubprogram(name: "next_readonly_imm_use", scope: !3700, file: !3700, line: 306, type: !6955, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6955 = !DISubroutineType(types: !6956)
!6956 = !{!2360, !6908}
!6957 = !DILocalVariable(name: "imm", arg: 1, scope: !6954, file: !3700, line: 306, type: !6908)
!6958 = !DILocation(line: 306, column: 42, scope: !6954)
!6959 = !DILocalVariable(name: "old", scope: !6954, file: !3700, line: 308, type: !2360)
!6960 = !DILocation(line: 308, column: 17, scope: !6954)
!6961 = !DILocation(line: 308, column: 23, scope: !6954)
!6962 = !DILocation(line: 308, column: 28, scope: !6954)
!6963 = !DILocation(line: 319, column: 18, scope: !6954)
!6964 = !DILocation(line: 319, column: 23, scope: !6954)
!6965 = !DILocation(line: 319, column: 3, scope: !6954)
!6966 = !DILocation(line: 319, column: 8, scope: !6954)
!6967 = !DILocation(line: 319, column: 16, scope: !6954)
!6968 = !DILocation(line: 320, column: 31, scope: !6969)
!6969 = distinct !DILexicalBlock(scope: !6954, file: !3700, line: 320, column: 7)
!6970 = !DILocation(line: 320, column: 7, scope: !6969)
!6971 = !DILocation(line: 320, column: 7, scope: !6954)
!6972 = !DILocation(line: 321, column: 5, scope: !6969)
!6973 = !DILocation(line: 322, column: 10, scope: !6954)
!6974 = !DILocation(line: 322, column: 15, scope: !6954)
!6975 = !DILocation(line: 322, column: 3, scope: !6954)
!6976 = !DILocation(line: 323, column: 1, scope: !6954)
!6977 = distinct !DISubprogram(name: "op_iter_next_def", scope: !3700, file: !3700, line: 681, type: !6978, scopeLine: 682, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!6978 = !DISubroutineType(types: !6979)
!6979 = !{!2359, !6839}
!6980 = !DILocalVariable(name: "ptr", arg: 1, scope: !6977, file: !3700, line: 681, type: !6839)
!6981 = !DILocation(line: 681, column: 32, scope: !6977)
!6982 = !DILocalVariable(name: "def_p", scope: !6977, file: !3700, line: 683, type: !2359)
!6983 = !DILocation(line: 683, column: 17, scope: !6977)
!6984 = !DILocation(line: 687, column: 7, scope: !6985)
!6985 = distinct !DILexicalBlock(scope: !6977, file: !3700, line: 687, column: 7)
!6986 = !DILocation(line: 687, column: 12, scope: !6985)
!6987 = !DILocation(line: 687, column: 7, scope: !6977)
!6988 = !DILocation(line: 689, column: 15, scope: !6989)
!6989 = distinct !DILexicalBlock(scope: !6985, file: !3700, line: 688, column: 5)
!6990 = !DILocation(line: 689, column: 13, scope: !6989)
!6991 = !DILocation(line: 690, column: 19, scope: !6989)
!6992 = !DILocation(line: 690, column: 24, scope: !6989)
!6993 = !DILocation(line: 690, column: 30, scope: !6989)
!6994 = !DILocation(line: 690, column: 7, scope: !6989)
!6995 = !DILocation(line: 690, column: 12, scope: !6989)
!6996 = !DILocation(line: 690, column: 17, scope: !6989)
!6997 = !DILocation(line: 691, column: 14, scope: !6989)
!6998 = !DILocation(line: 691, column: 7, scope: !6989)
!6999 = !DILocation(line: 693, column: 3, scope: !6977)
!7000 = !DILocation(line: 693, column: 8, scope: !6977)
!7001 = !DILocation(line: 693, column: 13, scope: !6977)
!7002 = !DILocation(line: 694, column: 3, scope: !6977)
!7003 = !DILocation(line: 695, column: 1, scope: !6977)
!7004 = distinct !DISubprogram(name: "have_similar_memory_accesses", scope: !3, file: !3, line: 5062, type: !7005, scopeLine: 5063, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7005 = !DISubroutineType(types: !7006)
!7006 = !{!931, !1142, !1142}
!7007 = !DILocalVariable(name: "s1", arg: 1, scope: !7004, file: !3, line: 5062, type: !1142)
!7008 = !DILocation(line: 5062, column: 38, scope: !7004)
!7009 = !DILocalVariable(name: "s2", arg: 2, scope: !7004, file: !3, line: 5062, type: !1142)
!7010 = !DILocation(line: 5062, column: 49, scope: !7004)
!7011 = !DILocalVariable(name: "res", scope: !7004, file: !3, line: 5064, type: !931)
!7012 = !DILocation(line: 5064, column: 8, scope: !7004)
!7013 = !DILocalVariable(name: "i", scope: !7004, file: !3, line: 5065, type: !7)
!7014 = !DILocation(line: 5065, column: 12, scope: !7004)
!7015 = !DILocalVariable(name: "j", scope: !7004, file: !3, line: 5065, type: !7)
!7016 = !DILocation(line: 5065, column: 15, scope: !7004)
!7017 = !DILocalVariable(name: "refs1", scope: !7004, file: !3, line: 5066, type: !2304)
!7018 = !DILocation(line: 5066, column: 29, scope: !7004)
!7019 = !DILocalVariable(name: "refs2", scope: !7004, file: !3, line: 5066, type: !2304)
!7020 = !DILocation(line: 5066, column: 37, scope: !7004)
!7021 = !DILocalVariable(name: "ref1", scope: !7004, file: !3, line: 5067, type: !4783)
!7022 = !DILocation(line: 5067, column: 17, scope: !7004)
!7023 = !DILocalVariable(name: "ref2", scope: !7004, file: !3, line: 5067, type: !4783)
!7024 = !DILocation(line: 5067, column: 24, scope: !7004)
!7025 = !DILocation(line: 5069, column: 27, scope: !7004)
!7026 = !DILocation(line: 5069, column: 3, scope: !7004)
!7027 = !DILocation(line: 5070, column: 27, scope: !7004)
!7028 = !DILocation(line: 5070, column: 3, scope: !7004)
!7029 = !DILocation(line: 5072, column: 10, scope: !7030)
!7030 = distinct !DILexicalBlock(scope: !7004, file: !3, line: 5072, column: 3)
!7031 = !DILocation(line: 5072, column: 8, scope: !7030)
!7032 = !DILocation(line: 5072, column: 15, scope: !7033)
!7033 = distinct !DILexicalBlock(scope: !7030, file: !3, line: 5072, column: 3)
!7034 = !DILocation(line: 5072, column: 3, scope: !7030)
!7035 = !DILocalVariable(name: "base1", scope: !7036, file: !3, line: 5074, type: !811)
!7036 = distinct !DILexicalBlock(scope: !7033, file: !3, line: 5073, column: 5)
!7037 = !DILocation(line: 5074, column: 12, scope: !7036)
!7038 = !DILocation(line: 5074, column: 38, scope: !7036)
!7039 = !DILocation(line: 5074, column: 42, scope: !7036)
!7040 = !DILocation(line: 5074, column: 20, scope: !7036)
!7041 = !DILocation(line: 5076, column: 11, scope: !7042)
!7042 = distinct !DILexicalBlock(scope: !7036, file: !3, line: 5076, column: 11)
!7043 = !DILocation(line: 5076, column: 11, scope: !7036)
!7044 = !DILocation(line: 5077, column: 9, scope: !7045)
!7045 = distinct !DILexicalBlock(scope: !7042, file: !3, line: 5077, column: 2)
!7046 = !DILocation(line: 5077, column: 7, scope: !7045)
!7047 = !DILocation(line: 5077, column: 14, scope: !7048)
!7048 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 5077, column: 2)
!7049 = !DILocation(line: 5077, column: 2, scope: !7045)
!7050 = !DILocation(line: 5078, column: 8, scope: !7051)
!7051 = distinct !DILexicalBlock(scope: !7048, file: !3, line: 5078, column: 8)
!7052 = !DILocation(line: 5078, column: 35, scope: !7051)
!7053 = !DILocation(line: 5078, column: 39, scope: !7051)
!7054 = !DILocation(line: 5078, column: 17, scope: !7051)
!7055 = !DILocation(line: 5078, column: 14, scope: !7051)
!7056 = !DILocation(line: 5078, column: 8, scope: !7048)
!7057 = !DILocation(line: 5080, column: 12, scope: !7058)
!7058 = distinct !DILexicalBlock(scope: !7051, file: !3, line: 5079, column: 6)
!7059 = !DILocation(line: 5081, column: 8, scope: !7058)
!7060 = !DILocation(line: 5078, column: 43, scope: !7051)
!7061 = !DILocation(line: 5077, column: 59, scope: !7048)
!7062 = !DILocation(line: 5077, column: 2, scope: !7048)
!7063 = distinct !{!7063, !7049, !7064}
!7064 = !DILocation(line: 5082, column: 6, scope: !7045)
!7065 = !DILocation(line: 5083, column: 5, scope: !7036)
!7066 = !DILocation(line: 5072, column: 60, scope: !7033)
!7067 = !DILocation(line: 5072, column: 3, scope: !7033)
!7068 = distinct !{!7068, !7034, !7069}
!7069 = !DILocation(line: 5083, column: 5, scope: !7030)
!7070 = !DILabel(scope: !7004, name: "end", file: !3, line: 5085)
!7071 = !DILocation(line: 5085, column: 2, scope: !7004)
!7072 = !DILocation(line: 5086, column: 3, scope: !7004)
!7073 = !DILocation(line: 5087, column: 3, scope: !7004)
!7074 = !DILocation(line: 5088, column: 10, scope: !7004)
!7075 = !DILocation(line: 5088, column: 3, scope: !7004)
!7076 = distinct !DISubprogram(name: "ref_base_address", scope: !3, file: !3, line: 4998, type: !7077, scopeLine: 4999, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7077 = !DISubroutineType(types: !7078)
!7078 = !{!811, !1142, !4783}
!7079 = !DILocalVariable(name: "stmt", arg: 1, scope: !7076, file: !3, line: 4998, type: !1142)
!7080 = !DILocation(line: 4998, column: 26, scope: !7076)
!7081 = !DILocalVariable(name: "ref", arg: 2, scope: !7076, file: !3, line: 4998, type: !4783)
!7082 = !DILocation(line: 4998, column: 46, scope: !7076)
!7083 = !DILocalVariable(name: "base", scope: !7076, file: !3, line: 5000, type: !811)
!7084 = !DILocation(line: 5000, column: 8, scope: !7076)
!7085 = !DILocalVariable(name: "base_address", scope: !7076, file: !3, line: 5001, type: !811)
!7086 = !DILocation(line: 5001, column: 8, scope: !7076)
!7087 = !DILocalVariable(name: "dr", scope: !7076, file: !3, line: 5002, type: !2171)
!7088 = !DILocation(line: 5002, column: 26, scope: !7076)
!7089 = !DILocation(line: 5002, column: 31, scope: !7076)
!7090 = !DILocation(line: 5004, column: 18, scope: !7076)
!7091 = !DILocation(line: 5004, column: 3, scope: !7076)
!7092 = !DILocation(line: 5004, column: 16, scope: !7076)
!7093 = !DILocation(line: 5005, column: 18, scope: !7076)
!7094 = !DILocation(line: 5005, column: 23, scope: !7076)
!7095 = !DILocation(line: 5005, column: 17, scope: !7076)
!7096 = !DILocation(line: 5005, column: 3, scope: !7076)
!7097 = !DILocation(line: 5005, column: 15, scope: !7076)
!7098 = !DILocation(line: 5006, column: 25, scope: !7076)
!7099 = !DILocation(line: 5006, column: 3, scope: !7076)
!7100 = !DILocation(line: 5007, column: 18, scope: !7076)
!7101 = !DILocation(line: 5007, column: 16, scope: !7076)
!7102 = !DILocation(line: 5009, column: 8, scope: !7103)
!7103 = distinct !DILexicalBlock(scope: !7076, file: !3, line: 5009, column: 7)
!7104 = !DILocation(line: 5009, column: 7, scope: !7076)
!7105 = !DILocation(line: 5010, column: 5, scope: !7103)
!7106 = !DILocation(line: 5012, column: 11, scope: !7076)
!7107 = !DILocation(line: 5012, column: 3, scope: !7076)
!7108 = !DILocation(line: 5015, column: 14, scope: !7109)
!7109 = distinct !DILexicalBlock(scope: !7076, file: !3, line: 5013, column: 5)
!7110 = !DILocation(line: 5015, column: 12, scope: !7109)
!7111 = !DILocation(line: 5016, column: 7, scope: !7109)
!7112 = !DILocation(line: 5019, column: 14, scope: !7109)
!7113 = !DILocation(line: 5019, column: 12, scope: !7109)
!7114 = !DILocation(line: 5020, column: 7, scope: !7109)
!7115 = !DILocation(line: 5021, column: 5, scope: !7109)
!7116 = !DILabel(scope: !7076, name: "end", file: !3, line: 5023)
!7117 = !DILocation(line: 5023, column: 2, scope: !7076)
!7118 = !DILocation(line: 5024, column: 18, scope: !7076)
!7119 = !DILocation(line: 5024, column: 3, scope: !7076)
!7120 = !DILocation(line: 5025, column: 10, scope: !7076)
!7121 = !DILocation(line: 5025, column: 3, scope: !7076)
!7122 = distinct !DISubprogram(name: "remove_similar_memory_refs", scope: !3, file: !3, line: 5127, type: !6469, scopeLine: 5128, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7123 = !DILocalVariable(name: "stmts", arg: 1, scope: !7122, file: !3, line: 5127, type: !6471)
!7124 = !DILocation(line: 5127, column: 50, scope: !7122)
!7125 = !DILocalVariable(name: "i", scope: !7122, file: !3, line: 5129, type: !7)
!7126 = !DILocation(line: 5129, column: 12, scope: !7122)
!7127 = !DILocalVariable(name: "stmt", scope: !7122, file: !3, line: 5130, type: !1142)
!7128 = !DILocation(line: 5130, column: 10, scope: !7122)
!7129 = !DILocalVariable(name: "seen", scope: !7122, file: !3, line: 5131, type: !1626)
!7130 = !DILocation(line: 5131, column: 10, scope: !7122)
!7131 = !DILocation(line: 5131, column: 30, scope: !7122)
!7132 = !DILocation(line: 5131, column: 17, scope: !7122)
!7133 = !DILocation(line: 5134, column: 10, scope: !7134)
!7134 = distinct !DILexicalBlock(scope: !7122, file: !3, line: 5134, column: 3)
!7135 = !DILocation(line: 5134, column: 8, scope: !7134)
!7136 = !DILocation(line: 5134, column: 15, scope: !7137)
!7137 = distinct !DILexicalBlock(scope: !7134, file: !3, line: 5134, column: 3)
!7138 = !DILocation(line: 5134, column: 3, scope: !7134)
!7139 = !DILocalVariable(name: "slot", scope: !7140, file: !3, line: 5136, type: !1649)
!7140 = distinct !DILexicalBlock(scope: !7137, file: !3, line: 5135, column: 5)
!7141 = !DILocation(line: 5136, column: 14, scope: !7140)
!7142 = !DILocation(line: 5138, column: 30, scope: !7140)
!7143 = !DILocation(line: 5138, column: 36, scope: !7140)
!7144 = !DILocation(line: 5138, column: 14, scope: !7140)
!7145 = !DILocation(line: 5138, column: 12, scope: !7140)
!7146 = !DILocation(line: 5140, column: 12, scope: !7147)
!7147 = distinct !DILexicalBlock(scope: !7140, file: !3, line: 5140, column: 11)
!7148 = !DILocation(line: 5140, column: 11, scope: !7147)
!7149 = !DILocation(line: 5140, column: 11, scope: !7140)
!7150 = !DILocation(line: 5141, column: 2, scope: !7147)
!7151 = !DILocation(line: 5144, column: 21, scope: !7152)
!7152 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 5143, column: 2)
!7153 = !DILocation(line: 5144, column: 12, scope: !7152)
!7154 = !DILocation(line: 5144, column: 5, scope: !7152)
!7155 = !DILocation(line: 5144, column: 10, scope: !7152)
!7156 = !DILocation(line: 5145, column: 5, scope: !7152)
!7157 = !DILocation(line: 5134, column: 3, scope: !7137)
!7158 = distinct !{!7158, !7138, !7159}
!7159 = !DILocation(line: 5147, column: 5, scope: !7134)
!7160 = !DILocation(line: 5149, column: 16, scope: !7122)
!7161 = !DILocation(line: 5149, column: 3, scope: !7122)
!7162 = !DILocation(line: 5150, column: 1, scope: !7122)
!7163 = distinct !DISubprogram(name: "ref_base_address_1", scope: !3, file: !3, line: 5103, type: !1633, scopeLine: 5104, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7164 = !DILocalVariable(name: "s", arg: 1, scope: !7163, file: !3, line: 5103, type: !1636)
!7165 = !DILocation(line: 5103, column: 33, scope: !7163)
!7166 = !DILocalVariable(name: "stmt", scope: !7163, file: !3, line: 5105, type: !1142)
!7167 = !DILocation(line: 5105, column: 10, scope: !7163)
!7168 = !DILocation(line: 5105, column: 17, scope: !7163)
!7169 = !DILocalVariable(name: "i", scope: !7163, file: !3, line: 5106, type: !7)
!7170 = !DILocation(line: 5106, column: 12, scope: !7163)
!7171 = !DILocalVariable(name: "refs", scope: !7163, file: !3, line: 5107, type: !2304)
!7172 = !DILocation(line: 5107, column: 29, scope: !7163)
!7173 = !DILocalVariable(name: "ref", scope: !7163, file: !3, line: 5108, type: !4783)
!7174 = !DILocation(line: 5108, column: 17, scope: !7163)
!7175 = !DILocalVariable(name: "res", scope: !7163, file: !3, line: 5109, type: !1635)
!7176 = !DILocation(line: 5109, column: 13, scope: !7163)
!7177 = !DILocation(line: 5111, column: 27, scope: !7163)
!7178 = !DILocation(line: 5111, column: 3, scope: !7163)
!7179 = !DILocation(line: 5113, column: 10, scope: !7180)
!7180 = distinct !DILexicalBlock(scope: !7163, file: !3, line: 5113, column: 3)
!7181 = !DILocation(line: 5113, column: 8, scope: !7180)
!7182 = !DILocation(line: 5113, column: 15, scope: !7183)
!7183 = distinct !DILexicalBlock(scope: !7180, file: !3, line: 5113, column: 3)
!7184 = !DILocation(line: 5113, column: 3, scope: !7180)
!7185 = !DILocation(line: 5114, column: 10, scope: !7186)
!7186 = distinct !DILexicalBlock(scope: !7183, file: !3, line: 5114, column: 9)
!7187 = !DILocation(line: 5114, column: 15, scope: !7186)
!7188 = !DILocation(line: 5114, column: 9, scope: !7183)
!7189 = !DILocation(line: 5116, column: 8, scope: !7190)
!7190 = distinct !DILexicalBlock(scope: !7186, file: !3, line: 5115, column: 7)
!7191 = !DILocation(line: 5116, column: 45, scope: !7190)
!7192 = !DILocation(line: 5116, column: 51, scope: !7190)
!7193 = !DILocation(line: 5116, column: 27, scope: !7190)
!7194 = !DILocation(line: 5116, column: 6, scope: !7190)
!7195 = !DILocation(line: 5117, column: 2, scope: !7190)
!7196 = !DILocation(line: 5113, column: 58, scope: !7183)
!7197 = !DILocation(line: 5113, column: 3, scope: !7183)
!7198 = distinct !{!7198, !7184, !7199}
!7199 = !DILocation(line: 5118, column: 7, scope: !7180)
!7200 = !DILocation(line: 5120, column: 3, scope: !7163)
!7201 = !DILocation(line: 5121, column: 10, scope: !7163)
!7202 = !DILocation(line: 5121, column: 3, scope: !7163)
!7203 = distinct !DISubprogram(name: "have_similar_memory_accesses_1", scope: !3, file: !3, line: 5094, type: !1641, scopeLine: 5095, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7204 = !DILocalVariable(name: "s1", arg: 1, scope: !7203, file: !3, line: 5094, type: !1636)
!7205 = !DILocation(line: 5094, column: 45, scope: !7203)
!7206 = !DILocalVariable(name: "s2", arg: 2, scope: !7203, file: !3, line: 5094, type: !1636)
!7207 = !DILocation(line: 5094, column: 61, scope: !7203)
!7208 = !DILocation(line: 5096, column: 40, scope: !7203)
!7209 = !DILocation(line: 5097, column: 12, scope: !7203)
!7210 = !DILocation(line: 5096, column: 10, scope: !7203)
!7211 = !DILocation(line: 5096, column: 3, scope: !7203)
!7212 = distinct !DISubprogram(name: "VEC_gimple_base_ordered_remove", scope: !422, file: !422, line: 33, type: !7213, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7213 = !DISubroutineType(types: !7214)
!7214 = !{!1142, !7215, !7}
!7215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1680, size: 64)
!7216 = !DILocalVariable(name: "vec_", arg: 1, scope: !7212, file: !422, line: 33, type: !7215)
!7217 = !DILocation(line: 33, column: 1, scope: !7212)
!7218 = !DILocalVariable(name: "ix_", arg: 2, scope: !7212, file: !422, line: 33, type: !7)
!7219 = !DILocalVariable(name: "slot_", scope: !7212, file: !422, line: 33, type: !6303)
!7220 = !DILocalVariable(name: "obj_", scope: !7212, file: !422, line: 33, type: !1142)
!7221 = distinct !DISubprogram(name: "access_matrix_get_index_for_parameter", scope: !3, file: !3, line: 5156, type: !7222, scopeLine: 5158, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7222 = !DISubroutineType(types: !7223)
!7223 = !{!908, !811, !2202}
!7224 = !DILocalVariable(name: "parameter", arg: 1, scope: !7221, file: !3, line: 5156, type: !811)
!7225 = !DILocation(line: 5156, column: 45, scope: !7221)
!7226 = !DILocalVariable(name: "access_matrix", arg: 2, scope: !7221, file: !3, line: 5157, type: !2202)
!7227 = !DILocation(line: 5157, column: 34, scope: !7221)
!7228 = !DILocalVariable(name: "i", scope: !7221, file: !3, line: 5159, type: !908)
!7229 = !DILocation(line: 5159, column: 7, scope: !7221)
!7230 = !DILocalVariable(name: "lambda_parameters", scope: !7221, file: !3, line: 5160, type: !2191)
!7231 = !DILocation(line: 5160, column: 20, scope: !7221)
!7232 = !DILocation(line: 5160, column: 40, scope: !7221)
!7233 = !DILocalVariable(name: "lambda_parameter", scope: !7221, file: !3, line: 5161, type: !811)
!7234 = !DILocation(line: 5161, column: 8, scope: !7221)
!7235 = !DILocation(line: 5163, column: 10, scope: !7236)
!7236 = distinct !DILexicalBlock(scope: !7221, file: !3, line: 5163, column: 3)
!7237 = !DILocation(line: 5163, column: 8, scope: !7236)
!7238 = !DILocation(line: 5163, column: 15, scope: !7239)
!7239 = distinct !DILexicalBlock(scope: !7236, file: !3, line: 5163, column: 3)
!7240 = !DILocation(line: 5163, column: 3, scope: !7236)
!7241 = !DILocation(line: 5164, column: 9, scope: !7242)
!7242 = distinct !DILexicalBlock(scope: !7239, file: !3, line: 5164, column: 9)
!7243 = !DILocation(line: 5164, column: 29, scope: !7242)
!7244 = !DILocation(line: 5164, column: 26, scope: !7242)
!7245 = !DILocation(line: 5164, column: 9, scope: !7239)
!7246 = !DILocation(line: 5165, column: 14, scope: !7242)
!7247 = !DILocation(line: 5165, column: 18, scope: !7242)
!7248 = !DILocation(line: 5165, column: 16, scope: !7242)
!7249 = !DILocation(line: 5165, column: 7, scope: !7242)
!7250 = !DILocation(line: 5163, column: 76, scope: !7239)
!7251 = !DILocation(line: 5163, column: 3, scope: !7239)
!7252 = distinct !{!7252, !7240, !7253}
!7253 = !DILocation(line: 5165, column: 18, scope: !7236)
!7254 = !DILocation(line: 5167, column: 3, scope: !7221)
!7255 = !DILocation(line: 5168, column: 1, scope: !7221)
!7256 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !164, file: !164, line: 182, type: !7257, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7257 = !DISubroutineType(types: !7258)
!7258 = !{!908, !2768, !7, !1176}
!7259 = !DILocalVariable(name: "vec_", arg: 1, scope: !7256, file: !164, line: 182, type: !2768)
!7260 = !DILocation(line: 182, column: 1, scope: !7256)
!7261 = !DILocalVariable(name: "ix_", arg: 2, scope: !7256, file: !164, line: 182, type: !7)
!7262 = !DILocalVariable(name: "ptr", arg: 3, scope: !7256, file: !164, line: 182, type: !1176)
!7263 = !DILocation(line: 182, column: 1, scope: !7264)
!7264 = distinct !DILexicalBlock(scope: !7256, file: !164, line: 182, column: 1)
!7265 = !DILocation(line: 182, column: 1, scope: !7266)
!7266 = distinct !DILexicalBlock(scope: !7264, file: !164, line: 182, column: 1)
!7267 = !DILocation(line: 182, column: 1, scope: !7268)
!7268 = distinct !DILexicalBlock(scope: !7264, file: !164, line: 182, column: 1)
!7269 = distinct !DISubprogram(name: "dump_affine_function", scope: !3, file: !3, line: 224, type: !7270, scopeLine: 225, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7270 = !DISubroutineType(types: !7271)
!7271 = !{null, !2393, !2274}
!7272 = !DILocalVariable(name: "outf", arg: 1, scope: !7269, file: !3, line: 224, type: !2393)
!7273 = !DILocation(line: 224, column: 29, scope: !7269)
!7274 = !DILocalVariable(name: "fn", arg: 2, scope: !7269, file: !3, line: 224, type: !2274)
!7275 = !DILocation(line: 224, column: 45, scope: !7269)
!7276 = !DILocalVariable(name: "i", scope: !7269, file: !3, line: 226, type: !7)
!7277 = !DILocation(line: 226, column: 12, scope: !7269)
!7278 = !DILocalVariable(name: "coef", scope: !7269, file: !3, line: 227, type: !811)
!7279 = !DILocation(line: 227, column: 8, scope: !7269)
!7280 = !DILocation(line: 229, column: 23, scope: !7269)
!7281 = !DILocation(line: 229, column: 29, scope: !7269)
!7282 = !DILocation(line: 229, column: 3, scope: !7269)
!7283 = !DILocation(line: 230, column: 10, scope: !7284)
!7284 = distinct !DILexicalBlock(scope: !7269, file: !3, line: 230, column: 3)
!7285 = !DILocation(line: 230, column: 8, scope: !7284)
!7286 = !DILocation(line: 230, column: 15, scope: !7287)
!7287 = distinct !DILexicalBlock(scope: !7284, file: !3, line: 230, column: 3)
!7288 = !DILocation(line: 230, column: 3, scope: !7284)
!7289 = !DILocation(line: 232, column: 16, scope: !7290)
!7290 = distinct !DILexicalBlock(scope: !7287, file: !3, line: 231, column: 5)
!7291 = !DILocation(line: 232, column: 7, scope: !7290)
!7292 = !DILocation(line: 233, column: 27, scope: !7290)
!7293 = !DILocation(line: 233, column: 33, scope: !7290)
!7294 = !DILocation(line: 233, column: 7, scope: !7290)
!7295 = !DILocation(line: 234, column: 16, scope: !7290)
!7296 = !DILocation(line: 234, column: 33, scope: !7290)
!7297 = !DILocation(line: 234, column: 7, scope: !7290)
!7298 = !DILocation(line: 235, column: 5, scope: !7290)
!7299 = !DILocation(line: 230, column: 49, scope: !7287)
!7300 = !DILocation(line: 230, column: 3, scope: !7287)
!7301 = distinct !{!7301, !7288, !7302}
!7302 = !DILocation(line: 235, column: 5, scope: !7284)
!7303 = !DILocation(line: 236, column: 1, scope: !7269)
!7304 = distinct !DISubprogram(name: "handled_component_p", scope: !164, file: !164, line: 4551, type: !3293, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7305 = !DILocalVariable(name: "t", arg: 1, scope: !7304, file: !164, line: 4551, type: !3295)
!7306 = !DILocation(line: 4551, column: 33, scope: !7304)
!7307 = !DILocation(line: 4553, column: 11, scope: !7304)
!7308 = !DILocation(line: 4553, column: 3, scope: !7304)
!7309 = !DILocation(line: 4562, column: 7, scope: !7310)
!7310 = distinct !DILexicalBlock(scope: !7304, file: !164, line: 4554, column: 5)
!7311 = !DILocation(line: 4565, column: 7, scope: !7310)
!7312 = !DILocation(line: 4567, column: 1, scope: !7304)
!7313 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !422, file: !422, line: 1727, type: !4950, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7314 = !DILocalVariable(name: "gs", arg: 1, scope: !7313, file: !422, line: 1727, type: !2363)
!7315 = !DILocation(line: 1727, column: 34, scope: !7313)
!7316 = !DILocation(line: 1730, column: 21, scope: !7313)
!7317 = !DILocation(line: 1730, column: 10, scope: !7313)
!7318 = !DILocation(line: 1730, column: 3, scope: !7313)
!7319 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !422, file: !422, line: 1815, type: !7320, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7320 = !DISubroutineType(types: !7321)
!7321 = !{!196, !2363}
!7322 = !DILocalVariable(name: "gs", arg: 1, scope: !7319, file: !422, line: 1815, type: !2363)
!7323 = !DILocation(line: 1815, column: 38, scope: !7319)
!7324 = !DILocalVariable(name: "code", scope: !7319, file: !422, line: 1817, type: !196)
!7325 = !DILocation(line: 1817, column: 18, scope: !7319)
!7326 = !DILocation(line: 1820, column: 28, scope: !7319)
!7327 = !DILocation(line: 1820, column: 10, scope: !7319)
!7328 = !DILocation(line: 1820, column: 8, scope: !7319)
!7329 = !DILocation(line: 1821, column: 29, scope: !7330)
!7330 = distinct !DILexicalBlock(scope: !7319, file: !422, line: 1821, column: 7)
!7331 = !DILocation(line: 1821, column: 7, scope: !7330)
!7332 = !DILocation(line: 1821, column: 35, scope: !7330)
!7333 = !DILocation(line: 1821, column: 7, scope: !7319)
!7334 = !DILocation(line: 1822, column: 12, scope: !7330)
!7335 = !DILocation(line: 1822, column: 10, scope: !7330)
!7336 = !DILocation(line: 1822, column: 5, scope: !7330)
!7337 = !DILocation(line: 1824, column: 10, scope: !7319)
!7338 = !DILocation(line: 1824, column: 3, scope: !7319)
!7339 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !422, file: !422, line: 1759, type: !4950, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7340 = !DILocalVariable(name: "gs", arg: 1, scope: !7339, file: !422, line: 1759, type: !2363)
!7341 = !DILocation(line: 1759, column: 34, scope: !7339)
!7342 = !DILocation(line: 1763, column: 23, scope: !7343)
!7343 = distinct !DILexicalBlock(scope: !7339, file: !422, line: 1763, column: 7)
!7344 = !DILocation(line: 1763, column: 7, scope: !7343)
!7345 = !DILocation(line: 1763, column: 27, scope: !7343)
!7346 = !DILocation(line: 1763, column: 7, scope: !7339)
!7347 = !DILocation(line: 1764, column: 23, scope: !7343)
!7348 = !DILocation(line: 1764, column: 12, scope: !7343)
!7349 = !DILocation(line: 1764, column: 5, scope: !7343)
!7350 = !DILocation(line: 1766, column: 5, scope: !7343)
!7351 = !DILocation(line: 1767, column: 1, scope: !7339)
!7352 = distinct !DISubprogram(name: "gimple_op", scope: !422, file: !422, line: 1631, type: !7353, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7353 = !DISubroutineType(types: !7354)
!7354 = !{!811, !2363, !7}
!7355 = !DILocalVariable(name: "gs", arg: 1, scope: !7352, file: !422, line: 1631, type: !2363)
!7356 = !DILocation(line: 1631, column: 25, scope: !7352)
!7357 = !DILocalVariable(name: "i", arg: 2, scope: !7352, file: !422, line: 1631, type: !7)
!7358 = !DILocation(line: 1631, column: 38, scope: !7352)
!7359 = !DILocation(line: 1633, column: 23, scope: !7360)
!7360 = distinct !DILexicalBlock(scope: !7352, file: !422, line: 1633, column: 7)
!7361 = !DILocation(line: 1633, column: 7, scope: !7360)
!7362 = !DILocation(line: 1633, column: 7, scope: !7352)
!7363 = !DILocation(line: 1638, column: 26, scope: !7364)
!7364 = distinct !DILexicalBlock(scope: !7360, file: !422, line: 1634, column: 5)
!7365 = !DILocation(line: 1638, column: 14, scope: !7364)
!7366 = !DILocation(line: 1638, column: 50, scope: !7364)
!7367 = !DILocation(line: 1638, column: 7, scope: !7364)
!7368 = !DILocation(line: 1641, column: 5, scope: !7360)
!7369 = !DILocation(line: 1642, column: 1, scope: !7352)
!7370 = distinct !DISubprogram(name: "gimple_has_ops", scope: !422, file: !422, line: 1274, type: !4938, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7371 = !DILocalVariable(name: "g", arg: 1, scope: !7370, file: !422, line: 1274, type: !2363)
!7372 = !DILocation(line: 1274, column: 30, scope: !7370)
!7373 = !DILocation(line: 1276, column: 23, scope: !7370)
!7374 = !DILocation(line: 1276, column: 10, scope: !7370)
!7375 = !DILocation(line: 1276, column: 26, scope: !7370)
!7376 = !DILocation(line: 1276, column: 41, scope: !7370)
!7377 = !DILocation(line: 1276, column: 57, scope: !7370)
!7378 = !DILocation(line: 1276, column: 44, scope: !7370)
!7379 = !DILocation(line: 1276, column: 60, scope: !7370)
!7380 = !DILocation(line: 0, scope: !7370)
!7381 = !DILocation(line: 1276, column: 3, scope: !7370)
!7382 = distinct !DISubprogram(name: "gimple_ops", scope: !422, file: !422, line: 1614, type: !7383, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7383 = !DISubroutineType(types: !7384)
!7384 = !{!1176, !1142}
!7385 = !DILocalVariable(name: "gs", arg: 1, scope: !7382, file: !422, line: 1614, type: !1142)
!7386 = !DILocation(line: 1614, column: 20, scope: !7382)
!7387 = !DILocalVariable(name: "off", scope: !7382, file: !422, line: 1616, type: !1287)
!7388 = !DILocation(line: 1616, column: 10, scope: !7382)
!7389 = !DILocation(line: 1621, column: 56, scope: !7382)
!7390 = !DILocation(line: 1621, column: 28, scope: !7382)
!7391 = !DILocation(line: 1621, column: 9, scope: !7382)
!7392 = !DILocation(line: 1621, column: 7, scope: !7382)
!7393 = !DILocation(line: 1622, column: 3, scope: !7382)
!7394 = !DILocation(line: 1624, column: 29, scope: !7382)
!7395 = !DILocation(line: 1624, column: 20, scope: !7382)
!7396 = !DILocation(line: 1624, column: 34, scope: !7382)
!7397 = !DILocation(line: 1624, column: 32, scope: !7382)
!7398 = !DILocation(line: 1624, column: 10, scope: !7382)
!7399 = !DILocation(line: 1624, column: 3, scope: !7382)
!7400 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !422, file: !422, line: 1073, type: !7401, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7401 = !DISubroutineType(types: !7402)
!7402 = !{!472, !1142}
!7403 = !DILocalVariable(name: "gs", arg: 1, scope: !7400, file: !422, line: 1073, type: !1142)
!7404 = !DILocation(line: 1073, column: 36, scope: !7400)
!7405 = !DILocation(line: 1075, column: 37, scope: !7400)
!7406 = !DILocation(line: 1075, column: 24, scope: !7400)
!7407 = !DILocation(line: 1075, column: 10, scope: !7400)
!7408 = !DILocation(line: 1075, column: 3, scope: !7400)
!7409 = distinct !DISubprogram(name: "gss_for_code", scope: !422, file: !422, line: 1061, type: !7410, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7410 = !DISubroutineType(types: !7411)
!7411 = !{!472, !421}
!7412 = !DILocalVariable(name: "code", arg: 1, scope: !7409, file: !422, line: 1061, type: !421)
!7413 = !DILocation(line: 1061, column: 32, scope: !7409)
!7414 = !DILocation(line: 1066, column: 24, scope: !7409)
!7415 = !DILocation(line: 1066, column: 10, scope: !7409)
!7416 = !DILocation(line: 1066, column: 3, scope: !7409)
!7417 = distinct !DISubprogram(name: "gimple_expr_code", scope: !422, file: !422, line: 1438, type: !7320, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7418 = !DILocalVariable(name: "stmt", arg: 1, scope: !7417, file: !422, line: 1438, type: !2363)
!7419 = !DILocation(line: 1438, column: 32, scope: !7417)
!7420 = !DILocalVariable(name: "code", scope: !7417, file: !422, line: 1440, type: !421)
!7421 = !DILocation(line: 1440, column: 20, scope: !7417)
!7422 = !DILocation(line: 1440, column: 40, scope: !7417)
!7423 = !DILocation(line: 1440, column: 27, scope: !7417)
!7424 = !DILocation(line: 1441, column: 7, scope: !7425)
!7425 = distinct !DILexicalBlock(scope: !7417, file: !422, line: 1441, column: 7)
!7426 = !DILocation(line: 1441, column: 12, scope: !7425)
!7427 = !DILocation(line: 1441, column: 29, scope: !7425)
!7428 = !DILocation(line: 1441, column: 32, scope: !7425)
!7429 = !DILocation(line: 1441, column: 37, scope: !7425)
!7430 = !DILocation(line: 1441, column: 7, scope: !7417)
!7431 = !DILocation(line: 1442, column: 29, scope: !7425)
!7432 = !DILocation(line: 1442, column: 35, scope: !7425)
!7433 = !DILocation(line: 1442, column: 42, scope: !7425)
!7434 = !DILocation(line: 1442, column: 5, scope: !7425)
!7435 = !DILocation(line: 1443, column: 12, scope: !7436)
!7436 = distinct !DILexicalBlock(scope: !7425, file: !422, line: 1443, column: 12)
!7437 = !DILocation(line: 1443, column: 17, scope: !7436)
!7438 = !DILocation(line: 1443, column: 12, scope: !7425)
!7439 = !DILocation(line: 1444, column: 5, scope: !7436)
!7440 = !DILocation(line: 1446, column: 5, scope: !7436)
!7441 = !DILocation(line: 1448, column: 5, scope: !7417)
!7442 = !DILocation(line: 1450, column: 1, scope: !7417)
!7443 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !422, file: !422, line: 1686, type: !7444, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7444 = !DISubroutineType(types: !7445)
!7445 = !{!498, !196}
!7446 = !DILocalVariable(name: "code", arg: 1, scope: !7443, file: !422, line: 1686, type: !196)
!7447 = !DILocation(line: 1686, column: 38, scope: !7443)
!7448 = !DILocation(line: 1688, column: 63, scope: !7443)
!7449 = !DILocation(line: 1688, column: 34, scope: !7443)
!7450 = !DILocation(line: 1688, column: 10, scope: !7443)
!7451 = !DILocation(line: 1688, column: 3, scope: !7443)
!7452 = distinct !DISubprogram(name: "gimple_num_ops", scope: !422, file: !422, line: 1596, type: !4987, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7453 = !DILocalVariable(name: "gs", arg: 1, scope: !7452, file: !422, line: 1596, type: !2363)
!7454 = !DILocation(line: 1596, column: 30, scope: !7452)
!7455 = !DILocation(line: 1598, column: 10, scope: !7452)
!7456 = !DILocation(line: 1598, column: 14, scope: !7452)
!7457 = !DILocation(line: 1598, column: 21, scope: !7452)
!7458 = !DILocation(line: 1598, column: 3, scope: !7452)
!7459 = distinct !DISubprogram(name: "gimple_bb", scope: !422, file: !422, line: 1112, type: !7460, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7460 = !DISubroutineType(types: !7461)
!7461 = !{!1106, !2363}
!7462 = !DILocalVariable(name: "g", arg: 1, scope: !7459, file: !422, line: 1112, type: !2363)
!7463 = !DILocation(line: 1112, column: 25, scope: !7459)
!7464 = !DILocation(line: 1114, column: 10, scope: !7459)
!7465 = !DILocation(line: 1114, column: 13, scope: !7459)
!7466 = !DILocation(line: 1114, column: 20, scope: !7459)
!7467 = !DILocation(line: 1114, column: 3, scope: !7459)
!7468 = distinct !DISubprogram(name: "block_before_loop", scope: !7469, file: !7469, line: 46, type: !7470, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7469 = !DIFile(filename: "./tree-scalar-evolution.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7470 = !DISubroutineType(types: !7471)
!7471 = !{!1594, !1384}
!7472 = !DILocalVariable(name: "loop", arg: 1, scope: !7468, file: !7469, line: 46, type: !1384)
!7473 = !DILocation(line: 46, column: 27, scope: !7468)
!7474 = !DILocalVariable(name: "preheader", scope: !7468, file: !7469, line: 48, type: !1122)
!7475 = !DILocation(line: 48, column: 8, scope: !7468)
!7476 = !DILocation(line: 48, column: 41, scope: !7468)
!7477 = !DILocation(line: 48, column: 20, scope: !7468)
!7478 = !DILocation(line: 49, column: 11, scope: !7468)
!7479 = !DILocation(line: 49, column: 23, scope: !7468)
!7480 = !DILocation(line: 49, column: 34, scope: !7468)
!7481 = !DILocation(line: 49, column: 40, scope: !7468)
!7482 = !DILocation(line: 49, column: 3, scope: !7468)
!7483 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !164, file: !164, line: 184, type: !7484, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7484 = !DISubroutineType(types: !7485)
!7485 = !{!1176, !3752, !811}
!7486 = !DILocalVariable(name: "vec_", arg: 1, scope: !7483, file: !164, line: 184, type: !3752)
!7487 = !DILocation(line: 184, column: 1, scope: !7483)
!7488 = !DILocalVariable(name: "obj_", arg: 2, scope: !7483, file: !164, line: 184, type: !811)
!7489 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !164, file: !164, line: 184, type: !7490, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7490 = !DISubroutineType(types: !7491)
!7491 = !{!908, !3752, !908}
!7492 = !DILocalVariable(name: "vec_", arg: 1, scope: !7489, file: !164, line: 184, type: !3752)
!7493 = !DILocation(line: 184, column: 1, scope: !7489)
!7494 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7489, file: !164, line: 184, type: !908)
!7495 = !DILocalVariable(name: "extend", scope: !7489, file: !164, line: 184, type: !908)
!7496 = !DILocation(line: 184, column: 1, scope: !7497)
!7497 = distinct !DILexicalBlock(scope: !7489, file: !164, line: 184, column: 1)
!7498 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !164, file: !164, line: 182, type: !7499, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7499 = !DISubroutineType(types: !7500)
!7500 = !{!1176, !7501, !811}
!7501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1693, size: 64)
!7502 = !DILocalVariable(name: "vec_", arg: 1, scope: !7498, file: !164, line: 182, type: !7501)
!7503 = !DILocation(line: 182, column: 1, scope: !7498)
!7504 = !DILocalVariable(name: "obj_", arg: 2, scope: !7498, file: !164, line: 182, type: !811)
!7505 = !DILocalVariable(name: "slot_", scope: !7498, file: !164, line: 182, type: !1176)
!7506 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !164, file: !164, line: 182, type: !7507, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7507 = !DISubroutineType(types: !7508)
!7508 = !{!908, !7501, !908}
!7509 = !DILocalVariable(name: "vec_", arg: 1, scope: !7506, file: !164, line: 182, type: !7501)
!7510 = !DILocation(line: 182, column: 1, scope: !7506)
!7511 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7506, file: !164, line: 182, type: !908)
!7512 = distinct !DISubprogram(name: "VEC_tree_base_pop", scope: !164, file: !164, line: 182, type: !7513, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7513 = !DISubroutineType(types: !7514)
!7514 = !{!811, !7501}
!7515 = !DILocalVariable(name: "vec_", arg: 1, scope: !7512, file: !164, line: 182, type: !7501)
!7516 = !DILocation(line: 182, column: 1, scope: !7512)
!7517 = !DILocalVariable(name: "obj_", scope: !7512, file: !164, line: 182, type: !811)
!7518 = distinct !DISubprogram(name: "VEC_subscript_p_heap_alloc", scope: !391, file: !391, line: 272, type: !7519, scopeLine: 272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7519 = !DISubroutineType(types: !7520)
!7520 = !{!2250, !908}
!7521 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7518, file: !391, line: 272, type: !908)
!7522 = !DILocation(line: 272, column: 1, scope: !7518)
!7523 = distinct !DISubprogram(name: "object_address_invariant_in_loop_p", scope: !3, file: !3, line: 1170, type: !7524, scopeLine: 1171, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7524 = !DISubroutineType(types: !7525)
!7525 = !{!931, !7526, !3295}
!7526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7527, size: 64)
!7527 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1358)
!7528 = !DILocalVariable(name: "loop", arg: 1, scope: !7523, file: !3, line: 1170, type: !7526)
!7529 = !DILocation(line: 1170, column: 56, scope: !7523)
!7530 = !DILocalVariable(name: "obj", arg: 2, scope: !7523, file: !3, line: 1170, type: !3295)
!7531 = !DILocation(line: 1170, column: 73, scope: !7523)
!7532 = !DILocation(line: 1172, column: 3, scope: !7523)
!7533 = !DILocation(line: 1172, column: 31, scope: !7523)
!7534 = !DILocation(line: 1172, column: 10, scope: !7523)
!7535 = !DILocation(line: 1174, column: 11, scope: !7536)
!7536 = distinct !DILexicalBlock(scope: !7537, file: !3, line: 1174, column: 11)
!7537 = distinct !DILexicalBlock(scope: !7523, file: !3, line: 1173, column: 5)
!7538 = !DILocation(line: 1174, column: 27, scope: !7536)
!7539 = !DILocation(line: 1174, column: 11, scope: !7537)
!7540 = !DILocation(line: 1178, column: 48, scope: !7541)
!7541 = distinct !DILexicalBlock(scope: !7542, file: !3, line: 1178, column: 8)
!7542 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 1175, column: 2)
!7543 = !DILocation(line: 1179, column: 13, scope: !7541)
!7544 = !DILocation(line: 1179, column: 19, scope: !7541)
!7545 = !DILocation(line: 1178, column: 8, scope: !7541)
!7546 = !DILocation(line: 1180, column: 8, scope: !7541)
!7547 = !DILocation(line: 1180, column: 51, scope: !7541)
!7548 = !DILocation(line: 1181, column: 9, scope: !7541)
!7549 = !DILocation(line: 1181, column: 15, scope: !7541)
!7550 = !DILocation(line: 1180, column: 11, scope: !7541)
!7551 = !DILocation(line: 1178, column: 8, scope: !7542)
!7552 = !DILocation(line: 1182, column: 6, scope: !7541)
!7553 = !DILocation(line: 1183, column: 2, scope: !7542)
!7554 = !DILocation(line: 1184, column: 16, scope: !7555)
!7555 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 1184, column: 16)
!7556 = !DILocation(line: 1184, column: 32, scope: !7555)
!7557 = !DILocation(line: 1184, column: 16, scope: !7536)
!7558 = !DILocation(line: 1186, column: 48, scope: !7559)
!7559 = distinct !DILexicalBlock(scope: !7560, file: !3, line: 1186, column: 8)
!7560 = distinct !DILexicalBlock(scope: !7555, file: !3, line: 1185, column: 2)
!7561 = !DILocation(line: 1187, column: 13, scope: !7559)
!7562 = !DILocation(line: 1187, column: 19, scope: !7559)
!7563 = !DILocation(line: 1186, column: 8, scope: !7559)
!7564 = !DILocation(line: 1186, column: 8, scope: !7560)
!7565 = !DILocation(line: 1188, column: 6, scope: !7559)
!7566 = !DILocation(line: 1189, column: 2, scope: !7560)
!7567 = !DILocation(line: 1190, column: 13, scope: !7537)
!7568 = !DILocation(line: 1190, column: 11, scope: !7537)
!7569 = distinct !{!7569, !7532, !7570}
!7570 = !DILocation(line: 1191, column: 5, scope: !7523)
!7571 = !DILocation(line: 1193, column: 8, scope: !7572)
!7572 = distinct !DILexicalBlock(scope: !7523, file: !3, line: 1193, column: 7)
!7573 = !DILocation(line: 1193, column: 7, scope: !7523)
!7574 = !DILocation(line: 1194, column: 5, scope: !7572)
!7575 = !DILocation(line: 1196, column: 51, scope: !7523)
!7576 = !DILocation(line: 1197, column: 9, scope: !7523)
!7577 = !DILocation(line: 1197, column: 15, scope: !7523)
!7578 = !DILocation(line: 1196, column: 11, scope: !7523)
!7579 = !DILocation(line: 1196, column: 10, scope: !7523)
!7580 = !DILocation(line: 1196, column: 3, scope: !7523)
!7581 = !DILocation(line: 1198, column: 1, scope: !7523)
!7582 = distinct !DISubprogram(name: "conflict_fn_not_known", scope: !3, file: !3, line: 1148, type: !7583, scopeLine: 1149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7583 = !DISubroutineType(types: !7584)
!7584 = !{!2267}
!7585 = !DILocalVariable(name: "fn", scope: !7582, file: !3, line: 1150, type: !2267)
!7586 = !DILocation(line: 1150, column: 22, scope: !7582)
!7587 = !DILocation(line: 1150, column: 27, scope: !7582)
!7588 = !DILocation(line: 1151, column: 3, scope: !7582)
!7589 = !DILocation(line: 1151, column: 7, scope: !7582)
!7590 = !DILocation(line: 1151, column: 9, scope: !7582)
!7591 = !DILocation(line: 1153, column: 10, scope: !7582)
!7592 = !DILocation(line: 1153, column: 3, scope: !7582)
!7593 = distinct !DISubprogram(name: "VEC_subscript_p_heap_safe_push", scope: !391, file: !391, line: 272, type: !7594, scopeLine: 272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7594 = !DISubroutineType(types: !7595)
!7595 = !{!7596, !7597, !2262}
!7596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2262, size: 64)
!7597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2250, size: 64)
!7598 = !DILocalVariable(name: "vec_", arg: 1, scope: !7593, file: !391, line: 272, type: !7597)
!7599 = !DILocation(line: 272, column: 1, scope: !7593)
!7600 = !DILocalVariable(name: "obj_", arg: 2, scope: !7593, file: !391, line: 272, type: !2262)
!7601 = distinct !DISubprogram(name: "VEC_subscript_p_heap_reserve", scope: !391, file: !391, line: 272, type: !7602, scopeLine: 272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7602 = !DISubroutineType(types: !7603)
!7603 = !{!908, !7597, !908}
!7604 = !DILocalVariable(name: "vec_", arg: 1, scope: !7601, file: !391, line: 272, type: !7597)
!7605 = !DILocation(line: 272, column: 1, scope: !7601)
!7606 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7601, file: !391, line: 272, type: !908)
!7607 = !DILocalVariable(name: "extend", scope: !7601, file: !391, line: 272, type: !908)
!7608 = !DILocation(line: 272, column: 1, scope: !7609)
!7609 = distinct !DILexicalBlock(scope: !7601, file: !391, line: 272, column: 1)
!7610 = distinct !DISubprogram(name: "VEC_subscript_p_base_quick_push", scope: !391, file: !391, line: 271, type: !7611, scopeLine: 271, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7611 = !DISubroutineType(types: !7612)
!7612 = !{!7596, !7613, !2262}
!7613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2255, size: 64)
!7614 = !DILocalVariable(name: "vec_", arg: 1, scope: !7610, file: !391, line: 271, type: !7613)
!7615 = !DILocation(line: 271, column: 1, scope: !7610)
!7616 = !DILocalVariable(name: "obj_", arg: 2, scope: !7610, file: !391, line: 271, type: !2262)
!7617 = !DILocalVariable(name: "slot_", scope: !7610, file: !391, line: 271, type: !7596)
!7618 = distinct !DISubprogram(name: "VEC_subscript_p_base_space", scope: !391, file: !391, line: 271, type: !7619, scopeLine: 271, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7619 = !DISubroutineType(types: !7620)
!7620 = !{!908, !7613, !908}
!7621 = !DILocalVariable(name: "vec_", arg: 1, scope: !7618, file: !391, line: 271, type: !7613)
!7622 = !DILocation(line: 271, column: 1, scope: !7618)
!7623 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7618, file: !391, line: 271, type: !908)
!7624 = distinct !DISubprogram(name: "VEC_ddr_p_heap_reserve", scope: !391, file: !391, line: 333, type: !7625, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7625 = !DISubroutineType(types: !7626)
!7626 = !{!908, !4307, !908}
!7627 = !DILocalVariable(name: "vec_", arg: 1, scope: !7624, file: !391, line: 333, type: !4307)
!7628 = !DILocation(line: 333, column: 1, scope: !7624)
!7629 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7624, file: !391, line: 333, type: !908)
!7630 = !DILocalVariable(name: "extend", scope: !7624, file: !391, line: 333, type: !908)
!7631 = !DILocation(line: 333, column: 1, scope: !7632)
!7632 = distinct !DILexicalBlock(scope: !7624, file: !391, line: 333, column: 1)
!7633 = distinct !DISubprogram(name: "VEC_ddr_p_base_quick_push", scope: !391, file: !391, line: 332, type: !7634, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7634 = !DISubroutineType(types: !7635)
!7635 = !{!2578, !7636, !2242}
!7636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2297, size: 64)
!7637 = !DILocalVariable(name: "vec_", arg: 1, scope: !7633, file: !391, line: 332, type: !7636)
!7638 = !DILocation(line: 332, column: 1, scope: !7633)
!7639 = !DILocalVariable(name: "obj_", arg: 2, scope: !7633, file: !391, line: 332, type: !2242)
!7640 = !DILocalVariable(name: "slot_", scope: !7633, file: !391, line: 332, type: !2578)
!7641 = distinct !DISubprogram(name: "VEC_ddr_p_base_space", scope: !391, file: !391, line: 332, type: !7642, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7642 = !DISubroutineType(types: !7643)
!7643 = !{!908, !7636, !908}
!7644 = !DILocalVariable(name: "vec_", arg: 1, scope: !7641, file: !391, line: 332, type: !7636)
!7645 = !DILocation(line: 332, column: 1, scope: !7641)
!7646 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7641, file: !391, line: 332, type: !908)
!7647 = distinct !DISubprogram(name: "access_functions_are_affine_or_constant_p", scope: !3, file: !3, line: 3370, type: !7648, scopeLine: 3372, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7648 = !DISubroutineType(types: !7649)
!7649 = !{!931, !3988, !7526}
!7650 = !DILocalVariable(name: "a", arg: 1, scope: !7647, file: !3, line: 3370, type: !3988)
!7651 = !DILocation(line: 3370, column: 73, scope: !7647)
!7652 = !DILocalVariable(name: "loop_nest", arg: 2, scope: !7647, file: !3, line: 3371, type: !7526)
!7653 = !DILocation(line: 3371, column: 28, scope: !7647)
!7654 = !DILocalVariable(name: "i", scope: !7647, file: !3, line: 3373, type: !7)
!7655 = !DILocation(line: 3373, column: 16, scope: !7647)
!7656 = !DILocalVariable(name: "fns", scope: !7647, file: !3, line: 3374, type: !2191)
!7657 = !DILocation(line: 3374, column: 19, scope: !7647)
!7658 = !DILocation(line: 3374, column: 25, scope: !7647)
!7659 = !DILocalVariable(name: "t", scope: !7647, file: !3, line: 3375, type: !811)
!7660 = !DILocation(line: 3375, column: 8, scope: !7647)
!7661 = !DILocation(line: 3377, column: 10, scope: !7662)
!7662 = distinct !DILexicalBlock(scope: !7647, file: !3, line: 3377, column: 3)
!7663 = !DILocation(line: 3377, column: 8, scope: !7662)
!7664 = !DILocation(line: 3377, column: 15, scope: !7665)
!7665 = distinct !DILexicalBlock(scope: !7662, file: !3, line: 3377, column: 3)
!7666 = !DILocation(line: 3377, column: 3, scope: !7662)
!7667 = !DILocation(line: 3378, column: 45, scope: !7668)
!7668 = distinct !DILexicalBlock(scope: !7665, file: !3, line: 3378, column: 9)
!7669 = !DILocation(line: 3378, column: 48, scope: !7668)
!7670 = !DILocation(line: 3378, column: 59, scope: !7668)
!7671 = !DILocation(line: 3378, column: 10, scope: !7668)
!7672 = !DILocation(line: 3379, column: 2, scope: !7668)
!7673 = !DILocation(line: 3379, column: 51, scope: !7668)
!7674 = !DILocation(line: 3379, column: 54, scope: !7668)
!7675 = !DILocation(line: 3379, column: 65, scope: !7668)
!7676 = !DILocation(line: 3379, column: 6, scope: !7668)
!7677 = !DILocation(line: 3378, column: 9, scope: !7665)
!7678 = !DILocation(line: 3380, column: 7, scope: !7668)
!7679 = !DILocation(line: 3379, column: 68, scope: !7668)
!7680 = !DILocation(line: 3377, column: 47, scope: !7665)
!7681 = !DILocation(line: 3377, column: 3, scope: !7665)
!7682 = distinct !{!7682, !7666, !7683}
!7683 = !DILocation(line: 3380, column: 14, scope: !7662)
!7684 = !DILocation(line: 3382, column: 3, scope: !7647)
!7685 = !DILocation(line: 3383, column: 1, scope: !7647)
!7686 = distinct !DISubprogram(name: "subscript_dependence_tester", scope: !3, file: !3, line: 3348, type: !4552, scopeLine: 3350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7687 = !DILocalVariable(name: "ddr", arg: 1, scope: !7686, file: !3, line: 3348, type: !2243)
!7688 = !DILocation(line: 3348, column: 63, scope: !7686)
!7689 = !DILocalVariable(name: "loop_nest", arg: 2, scope: !7686, file: !3, line: 3349, type: !1357)
!7690 = !DILocation(line: 3349, column: 22, scope: !7686)
!7691 = !DILocation(line: 3352, column: 7, scope: !7692)
!7692 = distinct !DILexicalBlock(scope: !7686, file: !3, line: 3352, column: 7)
!7693 = !DILocation(line: 3352, column: 17, scope: !7692)
!7694 = !DILocation(line: 3352, column: 21, scope: !7692)
!7695 = !DILocation(line: 3352, column: 32, scope: !7692)
!7696 = !DILocation(line: 3352, column: 7, scope: !7686)
!7697 = !DILocation(line: 3353, column: 14, scope: !7692)
!7698 = !DILocation(line: 3353, column: 5, scope: !7692)
!7699 = !DILocation(line: 3355, column: 38, scope: !7700)
!7700 = distinct !DILexicalBlock(scope: !7686, file: !3, line: 3355, column: 7)
!7701 = !DILocation(line: 3355, column: 43, scope: !7700)
!7702 = !DILocation(line: 3355, column: 56, scope: !7700)
!7703 = !DILocation(line: 3355, column: 69, scope: !7700)
!7704 = !DILocation(line: 3355, column: 7, scope: !7700)
!7705 = !DILocation(line: 3355, column: 7, scope: !7686)
!7706 = !DILocation(line: 3356, column: 46, scope: !7700)
!7707 = !DILocation(line: 3356, column: 5, scope: !7700)
!7708 = !DILocation(line: 3358, column: 31, scope: !7686)
!7709 = !DILocation(line: 3358, column: 3, scope: !7686)
!7710 = !DILocation(line: 3359, column: 34, scope: !7711)
!7711 = distinct !DILexicalBlock(scope: !7686, file: !3, line: 3359, column: 7)
!7712 = !DILocation(line: 3359, column: 39, scope: !7711)
!7713 = !DILocation(line: 3359, column: 7, scope: !7711)
!7714 = !DILocation(line: 3359, column: 7, scope: !7686)
!7715 = !DILocation(line: 3360, column: 31, scope: !7711)
!7716 = !DILocation(line: 3360, column: 5, scope: !7711)
!7717 = !DILocation(line: 3362, column: 7, scope: !7718)
!7718 = distinct !DILexicalBlock(scope: !7686, file: !3, line: 3362, column: 7)
!7719 = !DILocation(line: 3362, column: 17, scope: !7718)
!7720 = !DILocation(line: 3362, column: 21, scope: !7718)
!7721 = !DILocation(line: 3362, column: 32, scope: !7718)
!7722 = !DILocation(line: 3362, column: 7, scope: !7686)
!7723 = !DILocation(line: 3363, column: 14, scope: !7718)
!7724 = !DILocation(line: 3363, column: 5, scope: !7718)
!7725 = !DILocation(line: 3364, column: 1, scope: !7686)
!7726 = distinct !DISubprogram(name: "init_omega_for_ddr", scope: !3, file: !3, line: 3766, type: !7727, scopeLine: 3768, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7727 = !DISubroutineType(types: !7728)
!7728 = !{!931, !2243, !7729}
!7729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !931, size: 64)
!7730 = !DILocalVariable(name: "ddr", arg: 1, scope: !7726, file: !3, line: 3766, type: !2243)
!7731 = !DILocation(line: 3766, column: 54, scope: !7726)
!7732 = !DILocalVariable(name: "maybe_dependent", arg: 2, scope: !7726, file: !3, line: 3767, type: !7729)
!7733 = !DILocation(line: 3767, column: 13, scope: !7726)
!7734 = !DILocalVariable(name: "pb", scope: !7726, file: !3, line: 3769, type: !7735)
!7735 = !DIDerivedType(tag: DW_TAG_typedef, name: "omega_pb", file: !639, line: 115, baseType: !7736)
!7736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7737, size: 64)
!7737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "omega_pb_d", file: !639, line: 75, size: 576, elements: !7738)
!7738 = !{!7739, !7740, !7741, !7742, !7743, !7744, !7745, !7746, !7747, !7748, !7749, !7758, !7759}
!7739 = !DIDerivedType(tag: DW_TAG_member, name: "num_vars", scope: !7737, file: !639, line: 78, baseType: !908, size: 32)
!7740 = !DIDerivedType(tag: DW_TAG_member, name: "safe_vars", scope: !7737, file: !639, line: 85, baseType: !908, size: 32, offset: 32)
!7741 = !DIDerivedType(tag: DW_TAG_member, name: "num_eqs", scope: !7737, file: !639, line: 88, baseType: !908, size: 32, offset: 64)
!7742 = !DIDerivedType(tag: DW_TAG_member, name: "num_geqs", scope: !7737, file: !639, line: 90, baseType: !908, size: 32, offset: 96)
!7743 = !DIDerivedType(tag: DW_TAG_member, name: "num_subs", scope: !7737, file: !639, line: 92, baseType: !908, size: 32, offset: 128)
!7744 = !DIDerivedType(tag: DW_TAG_member, name: "hash_version", scope: !7737, file: !639, line: 94, baseType: !908, size: 32, offset: 160)
!7745 = !DIDerivedType(tag: DW_TAG_member, name: "variables_initialized", scope: !7737, file: !639, line: 95, baseType: !931, size: 8, offset: 192)
!7746 = !DIDerivedType(tag: DW_TAG_member, name: "variables_freed", scope: !7737, file: !639, line: 96, baseType: !931, size: 8, offset: 200)
!7747 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !7737, file: !639, line: 103, baseType: !2228, size: 64, offset: 256)
!7748 = !DIDerivedType(tag: DW_TAG_member, name: "forwarding_address", scope: !7737, file: !639, line: 105, baseType: !2228, size: 64, offset: 320)
!7749 = !DIDerivedType(tag: DW_TAG_member, name: "geqs", scope: !7737, file: !639, line: 108, baseType: !7750, size: 64, offset: 384)
!7750 = !DIDerivedType(tag: DW_TAG_typedef, name: "eqn", file: !639, line: 73, baseType: !7751)
!7751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7752, size: 64)
!7752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eqn_d", file: !639, line: 61, size: 192, elements: !7753)
!7753 = !{!7754, !7755, !7756, !7757}
!7754 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !7752, file: !639, line: 63, baseType: !908, size: 32)
!7755 = !DIDerivedType(tag: DW_TAG_member, name: "touched", scope: !7752, file: !639, line: 64, baseType: !908, size: 32, offset: 32)
!7756 = !DIDerivedType(tag: DW_TAG_member, name: "color", scope: !7752, file: !639, line: 65, baseType: !638, size: 32, offset: 64)
!7757 = !DIDerivedType(tag: DW_TAG_member, name: "coef", scope: !7752, file: !639, line: 72, baseType: !2228, size: 64, offset: 128)
!7758 = !DIDerivedType(tag: DW_TAG_member, name: "eqs", scope: !7737, file: !639, line: 111, baseType: !7750, size: 64, offset: 448)
!7759 = !DIDerivedType(tag: DW_TAG_member, name: "subs", scope: !7737, file: !639, line: 114, baseType: !7750, size: 64, offset: 512)
!7760 = !DILocation(line: 3769, column: 12, scope: !7726)
!7761 = !DILocalVariable(name: "res", scope: !7726, file: !3, line: 3770, type: !931)
!7762 = !DILocation(line: 3770, column: 8, scope: !7726)
!7763 = !DILocation(line: 3772, column: 4, scope: !7726)
!7764 = !DILocation(line: 3772, column: 20, scope: !7726)
!7765 = !DILocation(line: 3774, column: 30, scope: !7766)
!7766 = distinct !DILexicalBlock(scope: !7726, file: !3, line: 3774, column: 7)
!7767 = !DILocation(line: 3774, column: 7, scope: !7766)
!7768 = !DILocation(line: 3774, column: 7, scope: !7726)
!7769 = !DILocalVariable(name: "j", scope: !7770, file: !3, line: 3776, type: !7)
!7770 = distinct !DILexicalBlock(scope: !7766, file: !3, line: 3775, column: 5)
!7771 = !DILocation(line: 3776, column: 16, scope: !7770)
!7772 = !DILocalVariable(name: "dir_v", scope: !7770, file: !3, line: 3777, type: !2227)
!7773 = !DILocation(line: 3777, column: 21, scope: !7770)
!7774 = !DILocation(line: 3780, column: 20, scope: !7770)
!7775 = !DILocation(line: 3780, column: 44, scope: !7770)
!7776 = !DILocation(line: 3780, column: 25, scope: !7770)
!7777 = !DILocation(line: 3780, column: 7, scope: !7770)
!7778 = !DILocation(line: 3781, column: 34, scope: !7770)
!7779 = !DILocation(line: 3781, column: 15, scope: !7770)
!7780 = !DILocation(line: 3781, column: 13, scope: !7770)
!7781 = !DILocation(line: 3782, column: 14, scope: !7782)
!7782 = distinct !DILexicalBlock(scope: !7770, file: !3, line: 3782, column: 7)
!7783 = !DILocation(line: 3782, column: 12, scope: !7782)
!7784 = !DILocation(line: 3782, column: 19, scope: !7785)
!7785 = distinct !DILexicalBlock(scope: !7782, file: !3, line: 3782, column: 7)
!7786 = !DILocation(line: 3782, column: 23, scope: !7785)
!7787 = !DILocation(line: 3782, column: 21, scope: !7785)
!7788 = !DILocation(line: 3782, column: 7, scope: !7782)
!7789 = !DILocation(line: 3783, column: 2, scope: !7785)
!7790 = !DILocation(line: 3783, column: 8, scope: !7785)
!7791 = !DILocation(line: 3783, column: 11, scope: !7785)
!7792 = !DILocation(line: 3782, column: 44, scope: !7785)
!7793 = !DILocation(line: 3782, column: 7, scope: !7785)
!7794 = distinct !{!7794, !7788, !7795}
!7795 = !DILocation(line: 3783, column: 13, scope: !7782)
!7796 = !DILocation(line: 3784, column: 19, scope: !7770)
!7797 = !DILocation(line: 3784, column: 24, scope: !7770)
!7798 = !DILocation(line: 3784, column: 7, scope: !7770)
!7799 = !DILocation(line: 3787, column: 37, scope: !7770)
!7800 = !DILocation(line: 3787, column: 35, scope: !7770)
!7801 = !DILocation(line: 3787, column: 57, scope: !7770)
!7802 = !DILocation(line: 3787, column: 12, scope: !7770)
!7803 = !DILocation(line: 3787, column: 10, scope: !7770)
!7804 = !DILocation(line: 3788, column: 35, scope: !7770)
!7805 = !DILocation(line: 3788, column: 48, scope: !7770)
!7806 = !DILocation(line: 3788, column: 61, scope: !7770)
!7807 = !DILocation(line: 3788, column: 66, scope: !7770)
!7808 = !DILocation(line: 3789, column: 7, scope: !7770)
!7809 = !DILocation(line: 3788, column: 13, scope: !7770)
!7810 = !DILocation(line: 3788, column: 11, scope: !7770)
!7811 = !DILocation(line: 3790, column: 27, scope: !7770)
!7812 = !DILocation(line: 3790, column: 7, scope: !7770)
!7813 = !DILocation(line: 3791, column: 14, scope: !7770)
!7814 = !DILocation(line: 3791, column: 7, scope: !7770)
!7815 = !DILocation(line: 3799, column: 33, scope: !7726)
!7816 = !DILocation(line: 3799, column: 31, scope: !7726)
!7817 = !DILocation(line: 3799, column: 53, scope: !7726)
!7818 = !DILocation(line: 3799, column: 8, scope: !7726)
!7819 = !DILocation(line: 3799, column: 6, scope: !7726)
!7820 = !DILocation(line: 3800, column: 31, scope: !7726)
!7821 = !DILocation(line: 3800, column: 44, scope: !7726)
!7822 = !DILocation(line: 3800, column: 57, scope: !7726)
!7823 = !DILocation(line: 3800, column: 62, scope: !7726)
!7824 = !DILocation(line: 3801, column: 10, scope: !7726)
!7825 = !DILocation(line: 3800, column: 9, scope: !7726)
!7826 = !DILocation(line: 3800, column: 7, scope: !7726)
!7827 = !DILocation(line: 3802, column: 23, scope: !7726)
!7828 = !DILocation(line: 3802, column: 3, scope: !7726)
!7829 = !DILocation(line: 3805, column: 7, scope: !7830)
!7830 = distinct !DILexicalBlock(scope: !7726, file: !3, line: 3805, column: 7)
!7831 = !DILocation(line: 3805, column: 11, scope: !7830)
!7832 = !DILocation(line: 3805, column: 20, scope: !7830)
!7833 = !DILocation(line: 3805, column: 24, scope: !7830)
!7834 = !DILocation(line: 3805, column: 23, scope: !7830)
!7835 = !DILocation(line: 3805, column: 40, scope: !7830)
!7836 = !DILocation(line: 3805, column: 7, scope: !7726)
!7837 = !DILocation(line: 3806, column: 12, scope: !7830)
!7838 = !DILocation(line: 3806, column: 5, scope: !7830)
!7839 = !DILocation(line: 3808, column: 33, scope: !7726)
!7840 = !DILocation(line: 3808, column: 31, scope: !7726)
!7841 = !DILocation(line: 3808, column: 53, scope: !7726)
!7842 = !DILocation(line: 3808, column: 8, scope: !7726)
!7843 = !DILocation(line: 3808, column: 6, scope: !7726)
!7844 = !DILocation(line: 3809, column: 31, scope: !7726)
!7845 = !DILocation(line: 3809, column: 44, scope: !7726)
!7846 = !DILocation(line: 3809, column: 57, scope: !7726)
!7847 = !DILocation(line: 3809, column: 62, scope: !7726)
!7848 = !DILocation(line: 3810, column: 10, scope: !7726)
!7849 = !DILocation(line: 3809, column: 9, scope: !7726)
!7850 = !DILocation(line: 3809, column: 7, scope: !7726)
!7851 = !DILocation(line: 3811, column: 23, scope: !7726)
!7852 = !DILocation(line: 3811, column: 3, scope: !7726)
!7853 = !DILocation(line: 3813, column: 10, scope: !7726)
!7854 = !DILocation(line: 3813, column: 3, scope: !7726)
!7855 = !DILocation(line: 3814, column: 1, scope: !7726)
!7856 = distinct !DISubprogram(name: "ddr_consistent_p", scope: !3, file: !3, line: 3820, type: !7857, scopeLine: 3824, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!7857 = !DISubroutineType(types: !7858)
!7858 = !{!931, !2393, !2243, !2280, !2280}
!7859 = !DILocalVariable(name: "file", arg: 1, scope: !7856, file: !3, line: 3820, type: !2393)
!7860 = !DILocation(line: 3820, column: 25, scope: !7856)
!7861 = !DILocalVariable(name: "ddr", arg: 2, scope: !7856, file: !3, line: 3821, type: !2243)
!7862 = !DILocation(line: 3821, column: 38, scope: !7856)
!7863 = !DILocalVariable(name: "dist_vects", arg: 3, scope: !7856, file: !3, line: 3822, type: !2280)
!7864 = !DILocation(line: 3822, column: 32, scope: !7856)
!7865 = !DILocalVariable(name: "dir_vects", arg: 4, scope: !7856, file: !3, line: 3823, type: !2280)
!7866 = !DILocation(line: 3823, column: 32, scope: !7856)
!7867 = !DILocalVariable(name: "i", scope: !7856, file: !3, line: 3825, type: !7)
!7868 = !DILocation(line: 3825, column: 16, scope: !7856)
!7869 = !DILocalVariable(name: "j", scope: !7856, file: !3, line: 3825, type: !7)
!7870 = !DILocation(line: 3825, column: 19, scope: !7856)
!7871 = !DILocation(line: 3828, column: 7, scope: !7872)
!7872 = distinct !DILexicalBlock(scope: !7856, file: !3, line: 3828, column: 7)
!7873 = !DILocation(line: 3828, column: 17, scope: !7872)
!7874 = !DILocation(line: 3828, column: 21, scope: !7872)
!7875 = !DILocation(line: 3828, column: 32, scope: !7872)
!7876 = !DILocation(line: 3828, column: 7, scope: !7856)
!7877 = !DILocation(line: 3829, column: 12, scope: !7872)
!7878 = !DILocation(line: 3829, column: 10, scope: !7872)
!7879 = !DILocation(line: 3829, column: 5, scope: !7872)
!7880 = !DILocation(line: 3831, column: 7, scope: !7881)
!7881 = distinct !DILexicalBlock(scope: !7856, file: !3, line: 3831, column: 7)
!7882 = !DILocation(line: 3831, column: 49, scope: !7881)
!7883 = !DILocation(line: 3831, column: 46, scope: !7881)
!7884 = !DILocation(line: 3831, column: 7, scope: !7856)
!7885 = !DILocalVariable(name: "b_dist_v", scope: !7886, file: !3, line: 3833, type: !2227)
!7886 = distinct !DILexicalBlock(scope: !7881, file: !3, line: 3832, column: 5)
!7887 = !DILocation(line: 3833, column: 21, scope: !7886)
!7888 = !DILocation(line: 3834, column: 16, scope: !7886)
!7889 = !DILocation(line: 3835, column: 9, scope: !7886)
!7890 = !DILocation(line: 3836, column: 9, scope: !7886)
!7891 = !DILocation(line: 3834, column: 7, scope: !7886)
!7892 = !DILocation(line: 3838, column: 16, scope: !7886)
!7893 = !DILocation(line: 3838, column: 7, scope: !7886)
!7894 = !DILocation(line: 3839, column: 14, scope: !7895)
!7895 = distinct !DILexicalBlock(scope: !7886, file: !3, line: 3839, column: 7)
!7896 = !DILocation(line: 3839, column: 12, scope: !7895)
!7897 = !DILocation(line: 3839, column: 19, scope: !7898)
!7898 = distinct !DILexicalBlock(scope: !7895, file: !3, line: 3839, column: 7)
!7899 = !DILocation(line: 3839, column: 7, scope: !7895)
!7900 = !DILocation(line: 3840, column: 23, scope: !7898)
!7901 = !DILocation(line: 3840, column: 29, scope: !7898)
!7902 = !DILocation(line: 3840, column: 39, scope: !7898)
!7903 = !DILocation(line: 3840, column: 2, scope: !7898)
!7904 = !DILocation(line: 3839, column: 74, scope: !7898)
!7905 = !DILocation(line: 3839, column: 7, scope: !7898)
!7906 = distinct !{!7906, !7899, !7907}
!7907 = !DILocation(line: 3840, column: 57, scope: !7895)
!7908 = !DILocation(line: 3842, column: 16, scope: !7886)
!7909 = !DILocation(line: 3842, column: 7, scope: !7886)
!7910 = !DILocation(line: 3843, column: 14, scope: !7911)
!7911 = distinct !DILexicalBlock(scope: !7886, file: !3, line: 3843, column: 7)
!7912 = !DILocation(line: 3843, column: 12, scope: !7911)
!7913 = !DILocation(line: 3843, column: 19, scope: !7914)
!7914 = distinct !DILexicalBlock(scope: !7911, file: !3, line: 3843, column: 7)
!7915 = !DILocation(line: 3843, column: 23, scope: !7914)
!7916 = !DILocation(line: 3843, column: 21, scope: !7914)
!7917 = !DILocation(line: 3843, column: 7, scope: !7911)
!7918 = !DILocation(line: 3844, column: 23, scope: !7914)
!7919 = !DILocation(line: 3844, column: 29, scope: !7914)
!7920 = !DILocation(line: 3844, column: 53, scope: !7914)
!7921 = !DILocation(line: 3844, column: 2, scope: !7914)
!7922 = !DILocation(line: 3843, column: 50, scope: !7914)
!7923 = !DILocation(line: 3843, column: 7, scope: !7914)
!7924 = distinct !{!7924, !7917, !7925}
!7925 = !DILocation(line: 3844, column: 71, scope: !7911)
!7926 = !DILocation(line: 3846, column: 16, scope: !7886)
!7927 = !DILocation(line: 3846, column: 7, scope: !7886)
!7928 = !DILocation(line: 3847, column: 38, scope: !7886)
!7929 = !DILocation(line: 3847, column: 44, scope: !7886)
!7930 = !DILocation(line: 3847, column: 7, scope: !7886)
!7931 = !DILocation(line: 3849, column: 16, scope: !7886)
!7932 = !DILocation(line: 3849, column: 7, scope: !7886)
!7933 = !DILocation(line: 3850, column: 7, scope: !7886)
!7934 = !DILocation(line: 3853, column: 7, scope: !7935)
!7935 = distinct !DILexicalBlock(scope: !7856, file: !3, line: 3853, column: 7)
!7936 = !DILocation(line: 3853, column: 48, scope: !7935)
!7937 = !DILocation(line: 3853, column: 45, scope: !7935)
!7938 = !DILocation(line: 3853, column: 7, scope: !7856)
!7939 = !DILocation(line: 3855, column: 16, scope: !7940)
!7940 = distinct !DILexicalBlock(scope: !7935, file: !3, line: 3854, column: 5)
!7941 = !DILocation(line: 3856, column: 9, scope: !7940)
!7942 = !DILocation(line: 3857, column: 9, scope: !7940)
!7943 = !DILocation(line: 3855, column: 7, scope: !7940)
!7944 = !DILocation(line: 3858, column: 7, scope: !7940)
!7945 = !DILocation(line: 3861, column: 10, scope: !7946)
!7946 = distinct !DILexicalBlock(scope: !7856, file: !3, line: 3861, column: 3)
!7947 = !DILocation(line: 3861, column: 8, scope: !7946)
!7948 = !DILocation(line: 3861, column: 15, scope: !7949)
!7949 = distinct !DILexicalBlock(scope: !7946, file: !3, line: 3861, column: 3)
!7950 = !DILocation(line: 3861, column: 19, scope: !7949)
!7951 = !DILocation(line: 3861, column: 17, scope: !7949)
!7952 = !DILocation(line: 3861, column: 3, scope: !7946)
!7953 = !DILocalVariable(name: "a_dist_v", scope: !7954, file: !3, line: 3863, type: !2227)
!7954 = distinct !DILexicalBlock(scope: !7949, file: !3, line: 3862, column: 5)
!7955 = !DILocation(line: 3863, column: 21, scope: !7954)
!7956 = !DILocalVariable(name: "b_dist_v", scope: !7954, file: !3, line: 3864, type: !2227)
!7957 = !DILocation(line: 3864, column: 21, scope: !7954)
!7958 = !DILocation(line: 3864, column: 32, scope: !7954)
!7959 = !DILocation(line: 3868, column: 14, scope: !7960)
!7960 = distinct !DILexicalBlock(scope: !7954, file: !3, line: 3868, column: 7)
!7961 = !DILocation(line: 3868, column: 12, scope: !7960)
!7962 = !DILocation(line: 3868, column: 19, scope: !7963)
!7963 = distinct !DILexicalBlock(scope: !7960, file: !3, line: 3868, column: 7)
!7964 = !DILocation(line: 3868, column: 7, scope: !7960)
!7965 = !DILocation(line: 3869, column: 27, scope: !7966)
!7966 = distinct !DILexicalBlock(scope: !7963, file: !3, line: 3869, column: 6)
!7967 = !DILocation(line: 3869, column: 37, scope: !7966)
!7968 = !DILocation(line: 3869, column: 47, scope: !7966)
!7969 = !DILocation(line: 3869, column: 6, scope: !7966)
!7970 = !DILocation(line: 3869, column: 6, scope: !7963)
!7971 = !DILocation(line: 3870, column: 4, scope: !7966)
!7972 = !DILocation(line: 3869, column: 65, scope: !7966)
!7973 = !DILocation(line: 3868, column: 74, scope: !7963)
!7974 = !DILocation(line: 3868, column: 7, scope: !7963)
!7975 = distinct !{!7975, !7964, !7976}
!7976 = !DILocation(line: 3870, column: 4, scope: !7960)
!7977 = !DILocation(line: 3872, column: 11, scope: !7978)
!7978 = distinct !DILexicalBlock(scope: !7954, file: !3, line: 3872, column: 11)
!7979 = !DILocation(line: 3872, column: 16, scope: !7978)
!7980 = !DILocation(line: 3872, column: 13, scope: !7978)
!7981 = !DILocation(line: 3872, column: 11, scope: !7954)
!7982 = !DILocation(line: 3874, column: 13, scope: !7983)
!7983 = distinct !DILexicalBlock(scope: !7978, file: !3, line: 3873, column: 2)
!7984 = !DILocation(line: 3874, column: 4, scope: !7983)
!7985 = !DILocation(line: 3875, column: 24, scope: !7983)
!7986 = !DILocation(line: 3875, column: 30, scope: !7983)
!7987 = !DILocation(line: 3875, column: 42, scope: !7983)
!7988 = !DILocation(line: 3875, column: 4, scope: !7983)
!7989 = !DILocation(line: 3876, column: 13, scope: !7983)
!7990 = !DILocation(line: 3876, column: 4, scope: !7983)
!7991 = !DILocation(line: 3877, column: 24, scope: !7983)
!7992 = !DILocation(line: 3877, column: 30, scope: !7983)
!7993 = !DILocation(line: 3877, column: 52, scope: !7983)
!7994 = !DILocation(line: 3877, column: 4, scope: !7983)
!7995 = !DILocation(line: 3878, column: 13, scope: !7983)
!7996 = !DILocation(line: 3878, column: 4, scope: !7983)
!7997 = !DILocation(line: 3879, column: 35, scope: !7983)
!7998 = !DILocation(line: 3879, column: 41, scope: !7983)
!7999 = !DILocation(line: 3879, column: 4, scope: !7983)
!8000 = !DILocation(line: 3880, column: 13, scope: !7983)
!8001 = !DILocation(line: 3880, column: 4, scope: !7983)
!8002 = !DILocation(line: 3881, column: 2, scope: !7983)
!8003 = !DILocation(line: 3882, column: 5, scope: !7954)
!8004 = !DILocation(line: 3861, column: 46, scope: !7949)
!8005 = !DILocation(line: 3861, column: 3, scope: !7949)
!8006 = distinct !{!8006, !7952, !8007}
!8007 = !DILocation(line: 3882, column: 5, scope: !7946)
!8008 = !DILocation(line: 3884, column: 10, scope: !8009)
!8009 = distinct !DILexicalBlock(scope: !7856, file: !3, line: 3884, column: 3)
!8010 = !DILocation(line: 3884, column: 8, scope: !8009)
!8011 = !DILocation(line: 3884, column: 15, scope: !8012)
!8012 = distinct !DILexicalBlock(scope: !8009, file: !3, line: 3884, column: 3)
!8013 = !DILocation(line: 3884, column: 19, scope: !8012)
!8014 = !DILocation(line: 3884, column: 17, scope: !8012)
!8015 = !DILocation(line: 3884, column: 3, scope: !8009)
!8016 = !DILocalVariable(name: "a_dir_v", scope: !8017, file: !3, line: 3886, type: !2227)
!8017 = distinct !DILexicalBlock(scope: !8012, file: !3, line: 3885, column: 5)
!8018 = !DILocation(line: 3886, column: 21, scope: !8017)
!8019 = !DILocalVariable(name: "b_dir_v", scope: !8017, file: !3, line: 3887, type: !2227)
!8020 = !DILocation(line: 3887, column: 21, scope: !8017)
!8021 = !DILocation(line: 3887, column: 31, scope: !8017)
!8022 = !DILocation(line: 3891, column: 14, scope: !8023)
!8023 = distinct !DILexicalBlock(scope: !8017, file: !3, line: 3891, column: 7)
!8024 = !DILocation(line: 3891, column: 12, scope: !8023)
!8025 = !DILocation(line: 3891, column: 19, scope: !8026)
!8026 = distinct !DILexicalBlock(scope: !8023, file: !3, line: 3891, column: 7)
!8027 = !DILocation(line: 3891, column: 7, scope: !8023)
!8028 = !DILocation(line: 3892, column: 27, scope: !8029)
!8029 = distinct !DILexicalBlock(scope: !8026, file: !3, line: 3892, column: 6)
!8030 = !DILocation(line: 3892, column: 36, scope: !8029)
!8031 = !DILocation(line: 3892, column: 45, scope: !8029)
!8032 = !DILocation(line: 3892, column: 6, scope: !8029)
!8033 = !DILocation(line: 3892, column: 6, scope: !8026)
!8034 = !DILocation(line: 3893, column: 4, scope: !8029)
!8035 = !DILocation(line: 3892, column: 63, scope: !8029)
!8036 = !DILocation(line: 3891, column: 72, scope: !8026)
!8037 = !DILocation(line: 3891, column: 7, scope: !8026)
!8038 = distinct !{!8038, !8027, !8039}
!8039 = !DILocation(line: 3893, column: 4, scope: !8023)
!8040 = !DILocation(line: 3895, column: 11, scope: !8041)
!8041 = distinct !DILexicalBlock(scope: !8017, file: !3, line: 3895, column: 11)
!8042 = !DILocation(line: 3895, column: 16, scope: !8041)
!8043 = !DILocation(line: 3895, column: 13, scope: !8041)
!8044 = !DILocation(line: 3895, column: 11, scope: !8017)
!8045 = !DILocation(line: 3897, column: 13, scope: !8046)
!8046 = distinct !DILexicalBlock(scope: !8041, file: !3, line: 3896, column: 2)
!8047 = !DILocation(line: 3897, column: 4, scope: !8046)
!8048 = !DILocation(line: 3898, column: 23, scope: !8046)
!8049 = !DILocation(line: 3898, column: 29, scope: !8046)
!8050 = !DILocation(line: 3898, column: 40, scope: !8046)
!8051 = !DILocation(line: 3898, column: 4, scope: !8046)
!8052 = !DILocation(line: 3899, column: 13, scope: !8046)
!8053 = !DILocation(line: 3899, column: 4, scope: !8046)
!8054 = !DILocation(line: 3900, column: 23, scope: !8046)
!8055 = !DILocation(line: 3900, column: 29, scope: !8046)
!8056 = !DILocation(line: 3900, column: 50, scope: !8046)
!8057 = !DILocation(line: 3900, column: 4, scope: !8046)
!8058 = !DILocation(line: 3901, column: 13, scope: !8046)
!8059 = !DILocation(line: 3901, column: 4, scope: !8046)
!8060 = !DILocation(line: 3902, column: 35, scope: !8046)
!8061 = !DILocation(line: 3902, column: 41, scope: !8046)
!8062 = !DILocation(line: 3902, column: 4, scope: !8046)
!8063 = !DILocation(line: 3903, column: 13, scope: !8046)
!8064 = !DILocation(line: 3903, column: 4, scope: !8046)
!8065 = !DILocation(line: 3904, column: 2, scope: !8046)
!8066 = !DILocation(line: 3905, column: 5, scope: !8017)
!8067 = !DILocation(line: 3884, column: 45, scope: !8012)
!8068 = !DILocation(line: 3884, column: 3, scope: !8012)
!8069 = distinct !{!8069, !8015, !8070}
!8070 = !DILocation(line: 3905, column: 5, scope: !8009)
!8071 = !DILocation(line: 3907, column: 3, scope: !7856)
!8072 = !DILocation(line: 3908, column: 1, scope: !7856)
!8073 = distinct !DISubprogram(name: "finalize_ddr_dependent", scope: !3, file: !3, line: 1479, type: !8074, scopeLine: 1481, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8074 = !DISubroutineType(types: !8075)
!8075 = !{null, !2243, !811}
!8076 = !DILocalVariable(name: "ddr", arg: 1, scope: !8073, file: !3, line: 1479, type: !2243)
!8077 = !DILocation(line: 1479, column: 58, scope: !8073)
!8078 = !DILocalVariable(name: "chrec", arg: 2, scope: !8073, file: !3, line: 1480, type: !811)
!8079 = !DILocation(line: 1480, column: 9, scope: !8073)
!8080 = !DILocation(line: 1482, column: 7, scope: !8081)
!8081 = distinct !DILexicalBlock(scope: !8073, file: !3, line: 1482, column: 7)
!8082 = !DILocation(line: 1482, column: 17, scope: !8081)
!8083 = !DILocation(line: 1482, column: 21, scope: !8081)
!8084 = !DILocation(line: 1482, column: 32, scope: !8081)
!8085 = !DILocation(line: 1482, column: 7, scope: !8073)
!8086 = !DILocation(line: 1484, column: 16, scope: !8087)
!8087 = distinct !DILexicalBlock(scope: !8081, file: !3, line: 1483, column: 5)
!8088 = !DILocation(line: 1484, column: 7, scope: !8087)
!8089 = !DILocation(line: 1485, column: 27, scope: !8087)
!8090 = !DILocation(line: 1485, column: 38, scope: !8087)
!8091 = !DILocation(line: 1485, column: 7, scope: !8087)
!8092 = !DILocation(line: 1486, column: 16, scope: !8087)
!8093 = !DILocation(line: 1486, column: 7, scope: !8087)
!8094 = !DILocation(line: 1487, column: 5, scope: !8087)
!8095 = !DILocation(line: 1489, column: 29, scope: !8073)
!8096 = !DILocation(line: 1489, column: 3, scope: !8073)
!8097 = !DILocation(line: 1489, column: 27, scope: !8073)
!8098 = !DILocation(line: 1490, column: 20, scope: !8073)
!8099 = !DILocation(line: 1490, column: 3, scope: !8073)
!8100 = !DILocation(line: 1491, column: 3, scope: !8073)
!8101 = !DILocation(line: 1491, column: 24, scope: !8073)
!8102 = !DILocation(line: 1492, column: 1, scope: !8073)
!8103 = distinct !DISubprogram(name: "subscript_dependence_tester_1", scope: !3, file: !3, line: 3290, type: !8104, scopeLine: 3294, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8104 = !DISubroutineType(types: !8105)
!8105 = !{!931, !2243, !2171, !2171, !1357}
!8106 = !DILocalVariable(name: "ddr", arg: 1, scope: !8103, file: !3, line: 3290, type: !2243)
!8107 = !DILocation(line: 3290, column: 65, scope: !8103)
!8108 = !DILocalVariable(name: "dra", arg: 2, scope: !8103, file: !3, line: 3291, type: !2171)
!8109 = !DILocation(line: 3291, column: 34, scope: !8103)
!8110 = !DILocalVariable(name: "drb", arg: 3, scope: !8103, file: !3, line: 3292, type: !2171)
!8111 = !DILocation(line: 3292, column: 34, scope: !8103)
!8112 = !DILocalVariable(name: "loop_nest", arg: 4, scope: !8103, file: !3, line: 3293, type: !1357)
!8113 = !DILocation(line: 3293, column: 24, scope: !8103)
!8114 = !DILocalVariable(name: "i", scope: !8103, file: !3, line: 3295, type: !7)
!8115 = !DILocation(line: 3295, column: 16, scope: !8103)
!8116 = !DILocalVariable(name: "last_conflicts", scope: !8103, file: !3, line: 3296, type: !811)
!8117 = !DILocation(line: 3296, column: 8, scope: !8103)
!8118 = !DILocalVariable(name: "subscript", scope: !8103, file: !3, line: 3297, type: !2263)
!8119 = !DILocation(line: 3297, column: 21, scope: !8103)
!8120 = !DILocation(line: 3299, column: 10, scope: !8121)
!8121 = distinct !DILexicalBlock(scope: !8103, file: !3, line: 3299, column: 3)
!8122 = !DILocation(line: 3299, column: 8, scope: !8121)
!8123 = !DILocation(line: 3299, column: 15, scope: !8124)
!8124 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 3299, column: 3)
!8125 = !DILocation(line: 3299, column: 3, scope: !8121)
!8126 = !DILocalVariable(name: "overlaps_a", scope: !8127, file: !3, line: 3302, type: !2267)
!8127 = distinct !DILexicalBlock(scope: !8124, file: !3, line: 3301, column: 5)
!8128 = !DILocation(line: 3302, column: 26, scope: !8127)
!8129 = !DILocalVariable(name: "overlaps_b", scope: !8127, file: !3, line: 3302, type: !2267)
!8130 = !DILocation(line: 3302, column: 39, scope: !8127)
!8131 = !DILocation(line: 3304, column: 39, scope: !8127)
!8132 = !DILocation(line: 3305, column: 11, scope: !8127)
!8133 = !DILocation(line: 3307, column: 28, scope: !8127)
!8134 = !DILocation(line: 3304, column: 7, scope: !8127)
!8135 = !DILocation(line: 3309, column: 11, scope: !8136)
!8136 = distinct !DILexicalBlock(scope: !8127, file: !3, line: 3309, column: 11)
!8137 = !DILocation(line: 3310, column: 5, scope: !8136)
!8138 = !DILocation(line: 3310, column: 8, scope: !8136)
!8139 = !DILocation(line: 3309, column: 11, scope: !8127)
!8140 = !DILocation(line: 3312, column: 29, scope: !8141)
!8141 = distinct !DILexicalBlock(scope: !8136, file: !3, line: 3311, column: 3)
!8142 = !DILocation(line: 3312, column: 34, scope: !8141)
!8143 = !DILocation(line: 3312, column: 5, scope: !8141)
!8144 = !DILocation(line: 3313, column: 48, scope: !8141)
!8145 = !DILocation(line: 3314, column: 28, scope: !8141)
!8146 = !DILocation(line: 3314, column: 4, scope: !8141)
!8147 = !DILocation(line: 3315, column: 28, scope: !8141)
!8148 = !DILocation(line: 3315, column: 4, scope: !8141)
!8149 = !DILocation(line: 3316, column: 4, scope: !8141)
!8150 = !DILocation(line: 3319, column: 16, scope: !8151)
!8151 = distinct !DILexicalBlock(scope: !8136, file: !3, line: 3319, column: 16)
!8152 = !DILocation(line: 3320, column: 10, scope: !8151)
!8153 = !DILocation(line: 3320, column: 13, scope: !8151)
!8154 = !DILocation(line: 3319, column: 16, scope: !8136)
!8155 = !DILocation(line: 3322, column: 29, scope: !8156)
!8156 = distinct !DILexicalBlock(scope: !8151, file: !3, line: 3321, column: 3)
!8157 = !DILocation(line: 3322, column: 34, scope: !8156)
!8158 = !DILocation(line: 3322, column: 5, scope: !8156)
!8159 = !DILocation(line: 3323, column: 47, scope: !8156)
!8160 = !DILocation(line: 3324, column: 28, scope: !8156)
!8161 = !DILocation(line: 3324, column: 4, scope: !8156)
!8162 = !DILocation(line: 3325, column: 28, scope: !8156)
!8163 = !DILocation(line: 3325, column: 4, scope: !8156)
!8164 = !DILocation(line: 3326, column: 4, scope: !8156)
!8165 = !DILocation(line: 3331, column: 8, scope: !8166)
!8166 = distinct !DILexicalBlock(scope: !8167, file: !3, line: 3331, column: 8)
!8167 = distinct !DILexicalBlock(scope: !8151, file: !3, line: 3330, column: 3)
!8168 = !DILocation(line: 3331, column: 8, scope: !8167)
!8169 = !DILocation(line: 3332, column: 30, scope: !8166)
!8170 = !DILocation(line: 3332, column: 6, scope: !8166)
!8171 = !DILocation(line: 3333, column: 8, scope: !8172)
!8172 = distinct !DILexicalBlock(scope: !8167, file: !3, line: 3333, column: 8)
!8173 = !DILocation(line: 3333, column: 8, scope: !8167)
!8174 = !DILocation(line: 3334, column: 30, scope: !8172)
!8175 = !DILocation(line: 3334, column: 6, scope: !8172)
!8176 = !DILocation(line: 3336, column: 38, scope: !8167)
!8177 = !DILocation(line: 3336, column: 5, scope: !8167)
!8178 = !DILocation(line: 3336, column: 36, scope: !8167)
!8179 = !DILocation(line: 3337, column: 38, scope: !8167)
!8180 = !DILocation(line: 3337, column: 5, scope: !8167)
!8181 = !DILocation(line: 3337, column: 36, scope: !8167)
!8182 = !DILocation(line: 3338, column: 36, scope: !8167)
!8183 = !DILocation(line: 3338, column: 4, scope: !8167)
!8184 = !DILocation(line: 3338, column: 34, scope: !8167)
!8185 = !DILocation(line: 3340, column: 5, scope: !8127)
!8186 = !DILocation(line: 3300, column: 9, scope: !8124)
!8187 = !DILocation(line: 3299, column: 3, scope: !8124)
!8188 = distinct !{!8188, !8125, !8189}
!8189 = !DILocation(line: 3340, column: 5, scope: !8121)
!8190 = !DILocation(line: 3342, column: 3, scope: !8103)
!8191 = !DILocation(line: 3343, column: 1, scope: !8103)
!8192 = distinct !DISubprogram(name: "compute_subscript_distance", scope: !3, file: !3, line: 1109, type: !3046, scopeLine: 1110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8193 = !DILocalVariable(name: "ddr", arg: 1, scope: !8192, file: !3, line: 1109, type: !2243)
!8194 = !DILocation(line: 1109, column: 62, scope: !8192)
!8195 = !DILocalVariable(name: "cf_a", scope: !8192, file: !3, line: 1111, type: !2267)
!8196 = !DILocation(line: 1111, column: 22, scope: !8192)
!8197 = !DILocalVariable(name: "cf_b", scope: !8192, file: !3, line: 1111, type: !2267)
!8198 = !DILocation(line: 1111, column: 29, scope: !8192)
!8199 = !DILocalVariable(name: "fn_a", scope: !8192, file: !3, line: 1112, type: !2274)
!8200 = !DILocation(line: 1112, column: 13, scope: !8192)
!8201 = !DILocalVariable(name: "fn_b", scope: !8192, file: !3, line: 1112, type: !2274)
!8202 = !DILocation(line: 1112, column: 19, scope: !8192)
!8203 = !DILocalVariable(name: "diff", scope: !8192, file: !3, line: 1112, type: !2274)
!8204 = !DILocation(line: 1112, column: 25, scope: !8192)
!8205 = !DILocation(line: 1114, column: 7, scope: !8206)
!8206 = distinct !DILexicalBlock(scope: !8192, file: !3, line: 1114, column: 7)
!8207 = !DILocation(line: 1114, column: 31, scope: !8206)
!8208 = !DILocation(line: 1114, column: 7, scope: !8192)
!8209 = !DILocalVariable(name: "i", scope: !8210, file: !3, line: 1116, type: !7)
!8210 = distinct !DILexicalBlock(scope: !8206, file: !3, line: 1115, column: 5)
!8211 = !DILocation(line: 1116, column: 20, scope: !8210)
!8212 = !DILocation(line: 1118, column: 14, scope: !8213)
!8213 = distinct !DILexicalBlock(scope: !8210, file: !3, line: 1118, column: 7)
!8214 = !DILocation(line: 1118, column: 12, scope: !8213)
!8215 = !DILocation(line: 1118, column: 19, scope: !8216)
!8216 = distinct !DILexicalBlock(scope: !8213, file: !3, line: 1118, column: 7)
!8217 = !DILocation(line: 1118, column: 23, scope: !8216)
!8218 = !DILocation(line: 1118, column: 21, scope: !8216)
!8219 = !DILocation(line: 1118, column: 7, scope: !8213)
!8220 = !DILocalVariable(name: "subscript", scope: !8221, file: !3, line: 1120, type: !2263)
!8221 = distinct !DILexicalBlock(scope: !8216, file: !3, line: 1119, column: 3)
!8222 = !DILocation(line: 1120, column: 23, scope: !8221)
!8223 = !DILocation(line: 1122, column: 17, scope: !8221)
!8224 = !DILocation(line: 1122, column: 15, scope: !8221)
!8225 = !DILocation(line: 1123, column: 12, scope: !8221)
!8226 = !DILocation(line: 1123, column: 10, scope: !8221)
!8227 = !DILocation(line: 1124, column: 12, scope: !8221)
!8228 = !DILocation(line: 1124, column: 10, scope: !8221)
!8229 = !DILocation(line: 1126, column: 35, scope: !8221)
!8230 = !DILocation(line: 1126, column: 11, scope: !8221)
!8231 = !DILocation(line: 1126, column: 9, scope: !8221)
!8232 = !DILocation(line: 1127, column: 35, scope: !8221)
!8233 = !DILocation(line: 1127, column: 11, scope: !8221)
!8234 = !DILocation(line: 1127, column: 9, scope: !8221)
!8235 = !DILocation(line: 1128, column: 9, scope: !8236)
!8236 = distinct !DILexicalBlock(scope: !8221, file: !3, line: 1128, column: 8)
!8237 = !DILocation(line: 1128, column: 14, scope: !8236)
!8238 = !DILocation(line: 1128, column: 18, scope: !8236)
!8239 = !DILocation(line: 1128, column: 8, scope: !8221)
!8240 = !DILocation(line: 1130, column: 35, scope: !8241)
!8241 = distinct !DILexicalBlock(scope: !8236, file: !3, line: 1129, column: 6)
!8242 = !DILocation(line: 1130, column: 8, scope: !8241)
!8243 = !DILocation(line: 1130, column: 33, scope: !8241)
!8244 = !DILocation(line: 1131, column: 8, scope: !8241)
!8245 = !DILocation(line: 1133, column: 28, scope: !8221)
!8246 = !DILocation(line: 1133, column: 34, scope: !8221)
!8247 = !DILocation(line: 1133, column: 11, scope: !8221)
!8248 = !DILocation(line: 1133, column: 9, scope: !8221)
!8249 = !DILocation(line: 1135, column: 37, scope: !8250)
!8250 = distinct !DILexicalBlock(scope: !8221, file: !3, line: 1135, column: 9)
!8251 = !DILocation(line: 1135, column: 9, scope: !8250)
!8252 = !DILocation(line: 1135, column: 9, scope: !8221)
!8253 = !DILocation(line: 1136, column: 56, scope: !8250)
!8254 = !DILocation(line: 1136, column: 34, scope: !8250)
!8255 = !DILocation(line: 1136, column: 7, scope: !8250)
!8256 = !DILocation(line: 1136, column: 32, scope: !8250)
!8257 = !DILocation(line: 1138, column: 34, scope: !8250)
!8258 = !DILocation(line: 1138, column: 7, scope: !8250)
!8259 = !DILocation(line: 1138, column: 32, scope: !8250)
!8260 = !DILocation(line: 1140, column: 20, scope: !8221)
!8261 = !DILocation(line: 1140, column: 4, scope: !8221)
!8262 = !DILocation(line: 1141, column: 3, scope: !8221)
!8263 = !DILocation(line: 1118, column: 50, scope: !8216)
!8264 = !DILocation(line: 1118, column: 7, scope: !8216)
!8265 = distinct !{!8265, !8219, !8266}
!8266 = !DILocation(line: 1141, column: 3, scope: !8213)
!8267 = !DILocation(line: 1142, column: 5, scope: !8210)
!8268 = !DILocation(line: 1143, column: 1, scope: !8192)
!8269 = distinct !DISubprogram(name: "build_classic_dist_vector", scope: !3, file: !3, line: 3101, type: !8270, scopeLine: 3103, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8270 = !DISubroutineType(types: !8271)
!8271 = !{!931, !2243, !1357}
!8272 = !DILocalVariable(name: "ddr", arg: 1, scope: !8269, file: !3, line: 3101, type: !2243)
!8273 = !DILocation(line: 3101, column: 61, scope: !8269)
!8274 = !DILocalVariable(name: "loop_nest", arg: 2, scope: !8269, file: !3, line: 3102, type: !1357)
!8275 = !DILocation(line: 3102, column: 20, scope: !8269)
!8276 = !DILocalVariable(name: "init_b", scope: !8269, file: !3, line: 3104, type: !931)
!8277 = !DILocation(line: 3104, column: 8, scope: !8269)
!8278 = !DILocalVariable(name: "index_carry", scope: !8269, file: !3, line: 3105, type: !908)
!8279 = !DILocation(line: 3105, column: 7, scope: !8269)
!8280 = !DILocation(line: 3105, column: 21, scope: !8269)
!8281 = !DILocalVariable(name: "dist_v", scope: !8269, file: !3, line: 3106, type: !2227)
!8282 = !DILocation(line: 3106, column: 17, scope: !8269)
!8283 = !DILocation(line: 3108, column: 7, scope: !8284)
!8284 = distinct !DILexicalBlock(scope: !8269, file: !3, line: 3108, column: 7)
!8285 = !DILocation(line: 3108, column: 31, scope: !8284)
!8286 = !DILocation(line: 3108, column: 7, scope: !8269)
!8287 = !DILocation(line: 3109, column: 5, scope: !8284)
!8288 = !DILocation(line: 3111, column: 30, scope: !8289)
!8289 = distinct !DILexicalBlock(scope: !8269, file: !3, line: 3111, column: 7)
!8290 = !DILocation(line: 3111, column: 7, scope: !8289)
!8291 = !DILocation(line: 3111, column: 7, scope: !8269)
!8292 = !DILocation(line: 3114, column: 35, scope: !8293)
!8293 = distinct !DILexicalBlock(scope: !8289, file: !3, line: 3112, column: 5)
!8294 = !DILocation(line: 3114, column: 16, scope: !8293)
!8295 = !DILocation(line: 3114, column: 14, scope: !8293)
!8296 = !DILocation(line: 3115, column: 20, scope: !8293)
!8297 = !DILocation(line: 3115, column: 25, scope: !8293)
!8298 = !DILocation(line: 3115, column: 7, scope: !8293)
!8299 = !DILocation(line: 3117, column: 38, scope: !8300)
!8300 = distinct !DILexicalBlock(scope: !8293, file: !3, line: 3117, column: 11)
!8301 = !DILocation(line: 3117, column: 11, scope: !8300)
!8302 = !DILocation(line: 3117, column: 11, scope: !8293)
!8303 = !DILocation(line: 3118, column: 34, scope: !8300)
!8304 = !DILocation(line: 3118, column: 2, scope: !8300)
!8305 = !DILocation(line: 3120, column: 11, scope: !8306)
!8306 = distinct !DILexicalBlock(scope: !8293, file: !3, line: 3120, column: 11)
!8307 = !DILocation(line: 3120, column: 30, scope: !8306)
!8308 = !DILocation(line: 3120, column: 11, scope: !8293)
!8309 = !DILocation(line: 3121, column: 28, scope: !8306)
!8310 = !DILocation(line: 3121, column: 2, scope: !8306)
!8311 = !DILocation(line: 3123, column: 7, scope: !8293)
!8312 = !DILocation(line: 3126, column: 31, scope: !8269)
!8313 = !DILocation(line: 3126, column: 12, scope: !8269)
!8314 = !DILocation(line: 3126, column: 10, scope: !8269)
!8315 = !DILocation(line: 3127, column: 37, scope: !8316)
!8316 = distinct !DILexicalBlock(scope: !8269, file: !3, line: 3127, column: 7)
!8317 = !DILocation(line: 3127, column: 42, scope: !8316)
!8318 = !DILocation(line: 3127, column: 55, scope: !8316)
!8319 = !DILocation(line: 3128, column: 9, scope: !8316)
!8320 = !DILocation(line: 3127, column: 8, scope: !8316)
!8321 = !DILocation(line: 3127, column: 7, scope: !8269)
!8322 = !DILocation(line: 3129, column: 5, scope: !8316)
!8323 = !DILocation(line: 3132, column: 7, scope: !8324)
!8324 = distinct !DILexicalBlock(scope: !8269, file: !3, line: 3132, column: 7)
!8325 = !DILocation(line: 3132, column: 7, scope: !8269)
!8326 = !DILocation(line: 3158, column: 38, scope: !8327)
!8327 = distinct !DILexicalBlock(scope: !8328, file: !3, line: 3158, column: 11)
!8328 = distinct !DILexicalBlock(scope: !8324, file: !3, line: 3133, column: 5)
!8329 = !DILocation(line: 3158, column: 46, scope: !8327)
!8330 = !DILocation(line: 3158, column: 12, scope: !8327)
!8331 = !DILocation(line: 3158, column: 11, scope: !8328)
!8332 = !DILocalVariable(name: "save_v", scope: !8333, file: !3, line: 3160, type: !2227)
!8333 = distinct !DILexicalBlock(scope: !8327, file: !3, line: 3159, column: 2)
!8334 = !DILocation(line: 3160, column: 18, scope: !8333)
!8335 = !DILocation(line: 3160, column: 46, scope: !8333)
!8336 = !DILocation(line: 3160, column: 27, scope: !8333)
!8337 = !DILocation(line: 3161, column: 40, scope: !8338)
!8338 = distinct !DILexicalBlock(scope: !8333, file: !3, line: 3161, column: 8)
!8339 = !DILocation(line: 3161, column: 45, scope: !8338)
!8340 = !DILocation(line: 3161, column: 58, scope: !8338)
!8341 = !DILocation(line: 3162, column: 12, scope: !8338)
!8342 = !DILocation(line: 3161, column: 9, scope: !8338)
!8343 = !DILocation(line: 3161, column: 8, scope: !8333)
!8344 = !DILocation(line: 3163, column: 6, scope: !8338)
!8345 = !DILocation(line: 3164, column: 32, scope: !8333)
!8346 = !DILocation(line: 3164, column: 4, scope: !8333)
!8347 = !DILocation(line: 3165, column: 38, scope: !8348)
!8348 = distinct !DILexicalBlock(scope: !8333, file: !3, line: 3165, column: 8)
!8349 = !DILocation(line: 3165, column: 43, scope: !8348)
!8350 = !DILocation(line: 3165, column: 56, scope: !8348)
!8351 = !DILocation(line: 3166, column: 10, scope: !8348)
!8352 = !DILocation(line: 3165, column: 9, scope: !8348)
!8353 = !DILocation(line: 3165, column: 8, scope: !8333)
!8354 = !DILocation(line: 3167, column: 6, scope: !8348)
!8355 = !DILocation(line: 3168, column: 17, scope: !8333)
!8356 = !DILocation(line: 3168, column: 22, scope: !8333)
!8357 = !DILocation(line: 3168, column: 4, scope: !8333)
!8358 = !DILocation(line: 3169, column: 4, scope: !8333)
!8359 = !DILocation(line: 3169, column: 25, scope: !8333)
!8360 = !DILocation(line: 3187, column: 8, scope: !8361)
!8361 = distinct !DILexicalBlock(scope: !8333, file: !3, line: 3187, column: 8)
!8362 = !DILocation(line: 3187, column: 27, scope: !8361)
!8363 = !DILocation(line: 3187, column: 8, scope: !8333)
!8364 = !DILocation(line: 3189, column: 30, scope: !8365)
!8365 = distinct !DILexicalBlock(scope: !8361, file: !3, line: 3188, column: 6)
!8366 = !DILocation(line: 3189, column: 35, scope: !8365)
!8367 = !DILocation(line: 3189, column: 43, scope: !8365)
!8368 = !DILocation(line: 3189, column: 9, scope: !8365)
!8369 = !DILocation(line: 3190, column: 29, scope: !8365)
!8370 = !DILocation(line: 3190, column: 34, scope: !8365)
!8371 = !DILocation(line: 3190, column: 42, scope: !8365)
!8372 = !DILocation(line: 3190, column: 8, scope: !8365)
!8373 = !DILocation(line: 3191, column: 6, scope: !8365)
!8374 = !DILocation(line: 3192, column: 2, scope: !8333)
!8375 = !DILocalVariable(name: "save_v", scope: !8376, file: !3, line: 3195, type: !2227)
!8376 = distinct !DILexicalBlock(scope: !8327, file: !3, line: 3194, column: 2)
!8377 = !DILocation(line: 3195, column: 18, scope: !8376)
!8378 = !DILocation(line: 3195, column: 46, scope: !8376)
!8379 = !DILocation(line: 3195, column: 27, scope: !8376)
!8380 = !DILocation(line: 3196, column: 24, scope: !8376)
!8381 = !DILocation(line: 3196, column: 32, scope: !8376)
!8382 = !DILocation(line: 3196, column: 40, scope: !8376)
!8383 = !DILocation(line: 3196, column: 4, scope: !8376)
!8384 = !DILocation(line: 3198, column: 8, scope: !8385)
!8385 = distinct !DILexicalBlock(scope: !8376, file: !3, line: 3198, column: 8)
!8386 = !DILocation(line: 3198, column: 27, scope: !8385)
!8387 = !DILocation(line: 3198, column: 8, scope: !8376)
!8388 = !DILocalVariable(name: "opposite_v", scope: !8389, file: !3, line: 3200, type: !2227)
!8389 = distinct !DILexicalBlock(scope: !8385, file: !3, line: 3199, column: 6)
!8390 = !DILocation(line: 3200, column: 22, scope: !8389)
!8391 = !DILocation(line: 3200, column: 54, scope: !8389)
!8392 = !DILocation(line: 3200, column: 35, scope: !8389)
!8393 = !DILocation(line: 3202, column: 44, scope: !8394)
!8394 = distinct !DILexicalBlock(scope: !8389, file: !3, line: 3202, column: 12)
!8395 = !DILocation(line: 3202, column: 49, scope: !8394)
!8396 = !DILocation(line: 3203, column: 9, scope: !8394)
!8397 = !DILocation(line: 3203, column: 22, scope: !8394)
!8398 = !DILocation(line: 3202, column: 13, scope: !8394)
!8399 = !DILocation(line: 3202, column: 12, scope: !8389)
!8400 = !DILocation(line: 3204, column: 3, scope: !8394)
!8401 = !DILocation(line: 3205, column: 36, scope: !8389)
!8402 = !DILocation(line: 3205, column: 8, scope: !8389)
!8403 = !DILocation(line: 3206, column: 42, scope: !8404)
!8404 = distinct !DILexicalBlock(scope: !8389, file: !3, line: 3206, column: 12)
!8405 = !DILocation(line: 3206, column: 47, scope: !8404)
!8406 = !DILocation(line: 3206, column: 60, scope: !8404)
!8407 = !DILocation(line: 3207, column: 7, scope: !8404)
!8408 = !DILocation(line: 3206, column: 13, scope: !8404)
!8409 = !DILocation(line: 3206, column: 12, scope: !8389)
!8410 = !DILocation(line: 3209, column: 3, scope: !8404)
!8411 = !DILocation(line: 3211, column: 21, scope: !8389)
!8412 = !DILocation(line: 3211, column: 26, scope: !8389)
!8413 = !DILocation(line: 3211, column: 8, scope: !8389)
!8414 = !DILocation(line: 3212, column: 29, scope: !8389)
!8415 = !DILocation(line: 3212, column: 34, scope: !8389)
!8416 = !DILocation(line: 3212, column: 42, scope: !8389)
!8417 = !DILocation(line: 3212, column: 8, scope: !8389)
!8418 = !DILocation(line: 3213, column: 29, scope: !8389)
!8419 = !DILocation(line: 3213, column: 34, scope: !8389)
!8420 = !DILocation(line: 3213, column: 46, scope: !8389)
!8421 = !DILocation(line: 3213, column: 8, scope: !8389)
!8422 = !DILocation(line: 3214, column: 6, scope: !8389)
!8423 = !DILocation(line: 3216, column: 19, scope: !8385)
!8424 = !DILocation(line: 3216, column: 24, scope: !8385)
!8425 = !DILocation(line: 3216, column: 6, scope: !8385)
!8426 = !DILocation(line: 3218, column: 5, scope: !8328)
!8427 = !DILocation(line: 3228, column: 28, scope: !8428)
!8428 = distinct !DILexicalBlock(scope: !8324, file: !3, line: 3220, column: 5)
!8429 = !DILocation(line: 3228, column: 33, scope: !8428)
!8430 = !DILocation(line: 3229, column: 31, scope: !8428)
!8431 = !DILocation(line: 3230, column: 10, scope: !8428)
!8432 = !DILocation(line: 3229, column: 7, scope: !8428)
!8433 = !DILocation(line: 3228, column: 7, scope: !8428)
!8434 = !DILocation(line: 3233, column: 7, scope: !8435)
!8435 = distinct !DILexicalBlock(scope: !8269, file: !3, line: 3233, column: 7)
!8436 = !DILocation(line: 3233, column: 17, scope: !8435)
!8437 = !DILocation(line: 3233, column: 21, scope: !8435)
!8438 = !DILocation(line: 3233, column: 32, scope: !8435)
!8439 = !DILocation(line: 3233, column: 7, scope: !8269)
!8440 = !DILocalVariable(name: "i", scope: !8441, file: !3, line: 3235, type: !7)
!8441 = distinct !DILexicalBlock(scope: !8435, file: !3, line: 3234, column: 5)
!8442 = !DILocation(line: 3235, column: 16, scope: !8441)
!8443 = !DILocation(line: 3237, column: 16, scope: !8441)
!8444 = !DILocation(line: 3237, column: 7, scope: !8441)
!8445 = !DILocation(line: 3238, column: 14, scope: !8446)
!8446 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 3238, column: 7)
!8447 = !DILocation(line: 3238, column: 12, scope: !8446)
!8448 = !DILocation(line: 3238, column: 19, scope: !8449)
!8449 = distinct !DILexicalBlock(scope: !8446, file: !3, line: 3238, column: 7)
!8450 = !DILocation(line: 3238, column: 23, scope: !8449)
!8451 = !DILocation(line: 3238, column: 21, scope: !8449)
!8452 = !DILocation(line: 3238, column: 7, scope: !8446)
!8453 = !DILocation(line: 3240, column: 13, scope: !8454)
!8454 = distinct !DILexicalBlock(scope: !8449, file: !3, line: 3239, column: 2)
!8455 = !DILocation(line: 3240, column: 4, scope: !8454)
!8456 = !DILocation(line: 3241, column: 25, scope: !8454)
!8457 = !DILocation(line: 3241, column: 36, scope: !8454)
!8458 = !DILocation(line: 3242, column: 11, scope: !8454)
!8459 = !DILocation(line: 3241, column: 4, scope: !8454)
!8460 = !DILocation(line: 3243, column: 13, scope: !8454)
!8461 = !DILocation(line: 3243, column: 4, scope: !8454)
!8462 = !DILocation(line: 3244, column: 2, scope: !8454)
!8463 = !DILocation(line: 3238, column: 50, scope: !8449)
!8464 = !DILocation(line: 3238, column: 7, scope: !8449)
!8465 = distinct !{!8465, !8452, !8466}
!8466 = !DILocation(line: 3244, column: 2, scope: !8446)
!8467 = !DILocation(line: 3245, column: 16, scope: !8441)
!8468 = !DILocation(line: 3245, column: 7, scope: !8441)
!8469 = !DILocation(line: 3246, column: 5, scope: !8441)
!8470 = !DILocation(line: 3248, column: 3, scope: !8269)
!8471 = !DILocation(line: 3249, column: 1, scope: !8269)
!8472 = distinct !DISubprogram(name: "build_classic_dir_vector", scope: !3, file: !3, line: 3270, type: !3046, scopeLine: 3271, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8473 = !DILocalVariable(name: "ddr", arg: 1, scope: !8472, file: !3, line: 3270, type: !2243)
!8474 = !DILocation(line: 3270, column: 60, scope: !8472)
!8475 = !DILocalVariable(name: "i", scope: !8472, file: !3, line: 3272, type: !7)
!8476 = !DILocation(line: 3272, column: 12, scope: !8472)
!8477 = !DILocalVariable(name: "j", scope: !8472, file: !3, line: 3272, type: !7)
!8478 = !DILocation(line: 3272, column: 15, scope: !8472)
!8479 = !DILocalVariable(name: "dist_v", scope: !8472, file: !3, line: 3273, type: !2227)
!8480 = !DILocation(line: 3273, column: 17, scope: !8472)
!8481 = !DILocation(line: 3275, column: 10, scope: !8482)
!8482 = distinct !DILexicalBlock(scope: !8472, file: !3, line: 3275, column: 3)
!8483 = !DILocation(line: 3275, column: 8, scope: !8482)
!8484 = !DILocation(line: 3275, column: 15, scope: !8485)
!8485 = distinct !DILexicalBlock(scope: !8482, file: !3, line: 3275, column: 3)
!8486 = !DILocation(line: 3275, column: 3, scope: !8482)
!8487 = !DILocalVariable(name: "dir_v", scope: !8488, file: !3, line: 3277, type: !2227)
!8488 = distinct !DILexicalBlock(scope: !8485, file: !3, line: 3276, column: 5)
!8489 = !DILocation(line: 3277, column: 21, scope: !8488)
!8490 = !DILocation(line: 3277, column: 48, scope: !8488)
!8491 = !DILocation(line: 3277, column: 29, scope: !8488)
!8492 = !DILocation(line: 3279, column: 14, scope: !8493)
!8493 = distinct !DILexicalBlock(scope: !8488, file: !3, line: 3279, column: 7)
!8494 = !DILocation(line: 3279, column: 12, scope: !8493)
!8495 = !DILocation(line: 3279, column: 19, scope: !8496)
!8496 = distinct !DILexicalBlock(scope: !8493, file: !3, line: 3279, column: 7)
!8497 = !DILocation(line: 3279, column: 23, scope: !8496)
!8498 = !DILocation(line: 3279, column: 21, scope: !8496)
!8499 = !DILocation(line: 3279, column: 7, scope: !8493)
!8500 = !DILocation(line: 3280, column: 28, scope: !8496)
!8501 = !DILocation(line: 3280, column: 35, scope: !8496)
!8502 = !DILocation(line: 3280, column: 13, scope: !8496)
!8503 = !DILocation(line: 3280, column: 2, scope: !8496)
!8504 = !DILocation(line: 3280, column: 8, scope: !8496)
!8505 = !DILocation(line: 3280, column: 11, scope: !8496)
!8506 = !DILocation(line: 3279, column: 44, scope: !8496)
!8507 = !DILocation(line: 3279, column: 7, scope: !8496)
!8508 = distinct !{!8508, !8499, !8509}
!8509 = !DILocation(line: 3280, column: 37, scope: !8493)
!8510 = !DILocation(line: 3282, column: 19, scope: !8488)
!8511 = !DILocation(line: 3282, column: 24, scope: !8488)
!8512 = !DILocation(line: 3282, column: 7, scope: !8488)
!8513 = !DILocation(line: 3283, column: 5, scope: !8488)
!8514 = !DILocation(line: 3275, column: 78, scope: !8485)
!8515 = !DILocation(line: 3275, column: 3, scope: !8485)
!8516 = distinct !{!8516, !8486, !8517}
!8517 = !DILocation(line: 3283, column: 5, scope: !8482)
!8518 = !DILocation(line: 3284, column: 1, scope: !8472)
!8519 = distinct !DISubprogram(name: "VEC_subscript_p_base_iterate", scope: !391, file: !391, line: 271, type: !8520, scopeLine: 271, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8520 = !DISubroutineType(types: !8521)
!8521 = !{!908, !3057, !7, !7596}
!8522 = !DILocalVariable(name: "vec_", arg: 1, scope: !8519, file: !391, line: 271, type: !3057)
!8523 = !DILocation(line: 271, column: 1, scope: !8519)
!8524 = !DILocalVariable(name: "ix_", arg: 2, scope: !8519, file: !391, line: 271, type: !7)
!8525 = !DILocalVariable(name: "ptr", arg: 3, scope: !8519, file: !391, line: 271, type: !7596)
!8526 = !DILocation(line: 271, column: 1, scope: !8527)
!8527 = distinct !DILexicalBlock(scope: !8519, file: !391, line: 271, column: 1)
!8528 = !DILocation(line: 271, column: 1, scope: !8529)
!8529 = distinct !DILexicalBlock(scope: !8527, file: !391, line: 271, column: 1)
!8530 = !DILocation(line: 271, column: 1, scope: !8531)
!8531 = distinct !DILexicalBlock(scope: !8527, file: !391, line: 271, column: 1)
!8532 = distinct !DISubprogram(name: "analyze_overlapping_iterations", scope: !3, file: !3, line: 2709, type: !8533, scopeLine: 2714, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8533 = !DISubroutineType(types: !8534)
!8534 = !{null, !811, !811, !8535, !8535, !1176, !1357}
!8535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2267, size: 64)
!8536 = !DILocalVariable(name: "chrec_a", arg: 1, scope: !8532, file: !3, line: 2709, type: !811)
!8537 = !DILocation(line: 2709, column: 38, scope: !8532)
!8538 = !DILocalVariable(name: "chrec_b", arg: 2, scope: !8532, file: !3, line: 2710, type: !811)
!8539 = !DILocation(line: 2710, column: 10, scope: !8532)
!8540 = !DILocalVariable(name: "overlap_iterations_a", arg: 3, scope: !8532, file: !3, line: 2711, type: !8535)
!8541 = !DILocation(line: 2711, column: 25, scope: !8532)
!8542 = !DILocalVariable(name: "overlap_iterations_b", arg: 4, scope: !8532, file: !3, line: 2712, type: !8535)
!8543 = !DILocation(line: 2712, column: 25, scope: !8532)
!8544 = !DILocalVariable(name: "last_conflicts", arg: 5, scope: !8532, file: !3, line: 2713, type: !1176)
!8545 = !DILocation(line: 2713, column: 11, scope: !8532)
!8546 = !DILocalVariable(name: "loop_nest", arg: 6, scope: !8532, file: !3, line: 2713, type: !1357)
!8547 = !DILocation(line: 2713, column: 40, scope: !8532)
!8548 = !DILocalVariable(name: "lnn", scope: !8532, file: !3, line: 2715, type: !7)
!8549 = !DILocation(line: 2715, column: 16, scope: !8532)
!8550 = !DILocation(line: 2715, column: 22, scope: !8532)
!8551 = !DILocation(line: 2715, column: 33, scope: !8532)
!8552 = !DILocation(line: 2717, column: 39, scope: !8532)
!8553 = !DILocation(line: 2719, column: 7, scope: !8554)
!8554 = distinct !DILexicalBlock(scope: !8532, file: !3, line: 2719, column: 7)
!8555 = !DILocation(line: 2719, column: 17, scope: !8554)
!8556 = !DILocation(line: 2719, column: 21, scope: !8554)
!8557 = !DILocation(line: 2719, column: 32, scope: !8554)
!8558 = !DILocation(line: 2719, column: 7, scope: !8532)
!8559 = !DILocation(line: 2721, column: 16, scope: !8560)
!8560 = distinct !DILexicalBlock(scope: !8554, file: !3, line: 2720, column: 5)
!8561 = !DILocation(line: 2721, column: 7, scope: !8560)
!8562 = !DILocation(line: 2722, column: 16, scope: !8560)
!8563 = !DILocation(line: 2722, column: 7, scope: !8560)
!8564 = !DILocation(line: 2723, column: 27, scope: !8560)
!8565 = !DILocation(line: 2723, column: 38, scope: !8560)
!8566 = !DILocation(line: 2723, column: 7, scope: !8560)
!8567 = !DILocation(line: 2724, column: 16, scope: !8560)
!8568 = !DILocation(line: 2724, column: 7, scope: !8560)
!8569 = !DILocation(line: 2725, column: 27, scope: !8560)
!8570 = !DILocation(line: 2725, column: 38, scope: !8560)
!8571 = !DILocation(line: 2725, column: 7, scope: !8560)
!8572 = !DILocation(line: 2726, column: 16, scope: !8560)
!8573 = !DILocation(line: 2726, column: 7, scope: !8560)
!8574 = !DILocation(line: 2727, column: 5, scope: !8560)
!8575 = !DILocation(line: 2729, column: 7, scope: !8576)
!8576 = distinct !DILexicalBlock(scope: !8532, file: !3, line: 2729, column: 7)
!8577 = !DILocation(line: 2729, column: 15, scope: !8576)
!8578 = !DILocation(line: 2730, column: 7, scope: !8576)
!8579 = !DILocation(line: 2730, column: 10, scope: !8576)
!8580 = !DILocation(line: 2730, column: 18, scope: !8576)
!8581 = !DILocation(line: 2731, column: 7, scope: !8576)
!8582 = !DILocation(line: 2731, column: 39, scope: !8576)
!8583 = !DILocation(line: 2731, column: 10, scope: !8576)
!8584 = !DILocation(line: 2732, column: 7, scope: !8576)
!8585 = !DILocation(line: 2732, column: 39, scope: !8576)
!8586 = !DILocation(line: 2732, column: 10, scope: !8576)
!8587 = !DILocation(line: 2729, column: 7, scope: !8532)
!8588 = !DILocation(line: 2734, column: 50, scope: !8589)
!8589 = distinct !DILexicalBlock(scope: !8576, file: !3, line: 2733, column: 5)
!8590 = !DILocation(line: 2736, column: 31, scope: !8589)
!8591 = !DILocation(line: 2736, column: 8, scope: !8589)
!8592 = !DILocation(line: 2736, column: 29, scope: !8589)
!8593 = !DILocation(line: 2737, column: 31, scope: !8589)
!8594 = !DILocation(line: 2737, column: 8, scope: !8589)
!8595 = !DILocation(line: 2737, column: 29, scope: !8589)
!8596 = !DILocation(line: 2738, column: 5, scope: !8589)
!8597 = !DILocation(line: 2742, column: 29, scope: !8598)
!8598 = distinct !DILexicalBlock(scope: !8576, file: !3, line: 2742, column: 12)
!8599 = !DILocation(line: 2742, column: 38, scope: !8598)
!8600 = !DILocation(line: 2742, column: 12, scope: !8598)
!8601 = !DILocation(line: 2743, column: 5, scope: !8598)
!8602 = !DILocation(line: 2743, column: 53, scope: !8598)
!8603 = !DILocation(line: 2743, column: 62, scope: !8598)
!8604 = !DILocation(line: 2743, column: 8, scope: !8598)
!8605 = !DILocation(line: 2742, column: 12, scope: !8576)
!8606 = !DILocation(line: 2745, column: 51, scope: !8607)
!8607 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 2744, column: 5)
!8608 = !DILocation(line: 2746, column: 62, scope: !8607)
!8609 = !DILocation(line: 2746, column: 47, scope: !8607)
!8610 = !DILocation(line: 2746, column: 31, scope: !8607)
!8611 = !DILocation(line: 2746, column: 8, scope: !8607)
!8612 = !DILocation(line: 2746, column: 29, scope: !8607)
!8613 = !DILocation(line: 2747, column: 62, scope: !8607)
!8614 = !DILocation(line: 2747, column: 47, scope: !8607)
!8615 = !DILocation(line: 2747, column: 31, scope: !8607)
!8616 = !DILocation(line: 2747, column: 8, scope: !8607)
!8617 = !DILocation(line: 2747, column: 29, scope: !8607)
!8618 = !DILocation(line: 2748, column: 25, scope: !8607)
!8619 = !DILocation(line: 2748, column: 8, scope: !8607)
!8620 = !DILocation(line: 2748, column: 23, scope: !8607)
!8621 = !DILocation(line: 2749, column: 5, scope: !8607)
!8622 = !DILocation(line: 2753, column: 37, scope: !8623)
!8623 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 2753, column: 12)
!8624 = !DILocation(line: 2753, column: 13, scope: !8623)
!8625 = !DILocation(line: 2754, column: 6, scope: !8623)
!8626 = !DILocation(line: 2754, column: 33, scope: !8623)
!8627 = !DILocation(line: 2754, column: 9, scope: !8623)
!8628 = !DILocation(line: 2755, column: 5, scope: !8623)
!8629 = !DILocation(line: 2755, column: 55, scope: !8623)
!8630 = !DILocation(line: 2755, column: 64, scope: !8623)
!8631 = !DILocation(line: 2755, column: 10, scope: !8623)
!8632 = !DILocation(line: 2756, column: 9, scope: !8623)
!8633 = !DILocation(line: 2756, column: 58, scope: !8623)
!8634 = !DILocation(line: 2756, column: 67, scope: !8623)
!8635 = !DILocation(line: 2756, column: 13, scope: !8623)
!8636 = !DILocation(line: 2753, column: 12, scope: !8598)
!8637 = !DILocation(line: 2758, column: 50, scope: !8638)
!8638 = distinct !DILexicalBlock(scope: !8623, file: !3, line: 2757, column: 5)
!8639 = !DILocation(line: 2759, column: 31, scope: !8638)
!8640 = !DILocation(line: 2759, column: 8, scope: !8638)
!8641 = !DILocation(line: 2759, column: 29, scope: !8638)
!8642 = !DILocation(line: 2760, column: 31, scope: !8638)
!8643 = !DILocation(line: 2760, column: 8, scope: !8638)
!8644 = !DILocation(line: 2760, column: 29, scope: !8638)
!8645 = !DILocation(line: 2761, column: 5, scope: !8638)
!8646 = !DILocation(line: 2763, column: 29, scope: !8647)
!8647 = distinct !DILexicalBlock(scope: !8623, file: !3, line: 2763, column: 12)
!8648 = !DILocation(line: 2763, column: 38, scope: !8647)
!8649 = !DILocation(line: 2763, column: 12, scope: !8647)
!8650 = !DILocation(line: 2763, column: 12, scope: !8623)
!8651 = !DILocation(line: 2764, column: 28, scope: !8647)
!8652 = !DILocation(line: 2764, column: 37, scope: !8647)
!8653 = !DILocation(line: 2765, column: 7, scope: !8647)
!8654 = !DILocation(line: 2765, column: 29, scope: !8647)
!8655 = !DILocation(line: 2766, column: 7, scope: !8647)
!8656 = !DILocation(line: 2764, column: 5, scope: !8647)
!8657 = !DILocation(line: 2768, column: 29, scope: !8658)
!8658 = distinct !DILexicalBlock(scope: !8647, file: !3, line: 2768, column: 12)
!8659 = !DILocation(line: 2768, column: 38, scope: !8658)
!8660 = !DILocation(line: 2768, column: 12, scope: !8658)
!8661 = !DILocation(line: 2768, column: 12, scope: !8647)
!8662 = !DILocation(line: 2769, column: 28, scope: !8658)
!8663 = !DILocation(line: 2769, column: 37, scope: !8658)
!8664 = !DILocation(line: 2770, column: 7, scope: !8658)
!8665 = !DILocation(line: 2770, column: 29, scope: !8658)
!8666 = !DILocation(line: 2771, column: 7, scope: !8658)
!8667 = !DILocation(line: 2771, column: 23, scope: !8658)
!8668 = !DILocation(line: 2769, column: 5, scope: !8658)
!8669 = !DILocation(line: 2774, column: 28, scope: !8658)
!8670 = !DILocation(line: 2774, column: 37, scope: !8658)
!8671 = !DILocation(line: 2775, column: 7, scope: !8658)
!8672 = !DILocation(line: 2775, column: 29, scope: !8658)
!8673 = !DILocation(line: 2776, column: 7, scope: !8658)
!8674 = !DILocation(line: 2776, column: 23, scope: !8658)
!8675 = !DILocation(line: 2774, column: 5, scope: !8658)
!8676 = !DILocation(line: 2778, column: 7, scope: !8677)
!8677 = distinct !DILexicalBlock(scope: !8532, file: !3, line: 2778, column: 7)
!8678 = !DILocation(line: 2778, column: 17, scope: !8677)
!8679 = !DILocation(line: 2778, column: 21, scope: !8677)
!8680 = !DILocation(line: 2778, column: 32, scope: !8677)
!8681 = !DILocation(line: 2778, column: 7, scope: !8532)
!8682 = !DILocation(line: 2780, column: 16, scope: !8683)
!8683 = distinct !DILexicalBlock(scope: !8677, file: !3, line: 2779, column: 5)
!8684 = !DILocation(line: 2780, column: 7, scope: !8683)
!8685 = !DILocation(line: 2781, column: 31, scope: !8683)
!8686 = !DILocation(line: 2781, column: 43, scope: !8683)
!8687 = !DILocation(line: 2781, column: 42, scope: !8683)
!8688 = !DILocation(line: 2781, column: 7, scope: !8683)
!8689 = !DILocation(line: 2782, column: 16, scope: !8683)
!8690 = !DILocation(line: 2782, column: 7, scope: !8683)
!8691 = !DILocation(line: 2783, column: 31, scope: !8683)
!8692 = !DILocation(line: 2783, column: 43, scope: !8683)
!8693 = !DILocation(line: 2783, column: 42, scope: !8683)
!8694 = !DILocation(line: 2783, column: 7, scope: !8683)
!8695 = !DILocation(line: 2784, column: 16, scope: !8683)
!8696 = !DILocation(line: 2784, column: 7, scope: !8683)
!8697 = !DILocation(line: 2785, column: 16, scope: !8683)
!8698 = !DILocation(line: 2785, column: 7, scope: !8683)
!8699 = !DILocation(line: 2786, column: 5, scope: !8683)
!8700 = !DILocation(line: 2787, column: 1, scope: !8532)
!8701 = distinct !DISubprogram(name: "free_conflict_function", scope: !3, file: !3, line: 1446, type: !8702, scopeLine: 1447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8702 = !DISubroutineType(types: !8703)
!8703 = !{null, !2267}
!8704 = !DILocalVariable(name: "f", arg: 1, scope: !8701, file: !3, line: 1446, type: !2267)
!8705 = !DILocation(line: 1446, column: 44, scope: !8701)
!8706 = !DILocalVariable(name: "i", scope: !8701, file: !3, line: 1448, type: !7)
!8707 = !DILocation(line: 1448, column: 12, scope: !8701)
!8708 = !DILocation(line: 1450, column: 7, scope: !8709)
!8709 = distinct !DILexicalBlock(scope: !8701, file: !3, line: 1450, column: 7)
!8710 = !DILocation(line: 1450, column: 7, scope: !8701)
!8711 = !DILocation(line: 1452, column: 14, scope: !8712)
!8712 = distinct !DILexicalBlock(scope: !8713, file: !3, line: 1452, column: 7)
!8713 = distinct !DILexicalBlock(scope: !8709, file: !3, line: 1451, column: 5)
!8714 = !DILocation(line: 1452, column: 12, scope: !8712)
!8715 = !DILocation(line: 1452, column: 19, scope: !8716)
!8716 = distinct !DILexicalBlock(scope: !8712, file: !3, line: 1452, column: 7)
!8717 = !DILocation(line: 1452, column: 23, scope: !8716)
!8718 = !DILocation(line: 1452, column: 26, scope: !8716)
!8719 = !DILocation(line: 1452, column: 21, scope: !8716)
!8720 = !DILocation(line: 1452, column: 7, scope: !8712)
!8721 = !DILocation(line: 1453, column: 18, scope: !8716)
!8722 = !DILocation(line: 1453, column: 21, scope: !8716)
!8723 = !DILocation(line: 1453, column: 25, scope: !8716)
!8724 = !DILocation(line: 1453, column: 2, scope: !8716)
!8725 = !DILocation(line: 1452, column: 30, scope: !8716)
!8726 = !DILocation(line: 1452, column: 7, scope: !8716)
!8727 = distinct !{!8727, !8720, !8728}
!8728 = !DILocation(line: 1453, column: 27, scope: !8712)
!8729 = !DILocation(line: 1454, column: 5, scope: !8713)
!8730 = !DILocation(line: 1455, column: 9, scope: !8701)
!8731 = !DILocation(line: 1455, column: 3, scope: !8701)
!8732 = !DILocation(line: 1456, column: 1, scope: !8701)
!8733 = distinct !DISubprogram(name: "conflict_fn", scope: !3, file: !3, line: 1560, type: !8734, scopeLine: 1561, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8734 = !DISubroutineType(types: !8735)
!8735 = !{!2267, !7, null}
!8736 = !DILocalVariable(name: "n", arg: 1, scope: !8733, file: !3, line: 1560, type: !7)
!8737 = !DILocation(line: 1560, column: 23, scope: !8733)
!8738 = !DILocalVariable(name: "i", scope: !8733, file: !3, line: 1562, type: !7)
!8739 = !DILocation(line: 1562, column: 12, scope: !8733)
!8740 = !DILocalVariable(name: "ret", scope: !8733, file: !3, line: 1563, type: !2267)
!8741 = !DILocation(line: 1563, column: 22, scope: !8733)
!8742 = !DILocation(line: 1563, column: 28, scope: !8733)
!8743 = !DILocalVariable(name: "ap", scope: !8733, file: !3, line: 1564, type: !8744)
!8744 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !8745, line: 52, baseType: !8746)
!8745 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!8746 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !8747, line: 32, baseType: !8748)
!8747 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stdarg.h", directory: "/home/venkat/IF-DV")
!8748 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !3, line: 1564, baseType: !8749)
!8749 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8750, size: 192, elements: !912)
!8750 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, line: 1564, size: 192, elements: !8751)
!8751 = !{!8752, !8753, !8754, !8755}
!8752 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !8750, file: !3, line: 1564, baseType: !7, size: 32)
!8753 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !8750, file: !3, line: 1564, baseType: !7, size: 32, offset: 32)
!8754 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !8750, file: !3, line: 1564, baseType: !1095, size: 64, offset: 64)
!8755 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !8750, file: !3, line: 1564, baseType: !1095, size: 64, offset: 128)
!8756 = !DILocation(line: 1564, column: 11, scope: !8733)
!8757 = !DILocation(line: 1566, column: 3, scope: !8733)
!8758 = !DILocation(line: 1567, column: 3, scope: !8733)
!8759 = !DILocation(line: 1569, column: 12, scope: !8733)
!8760 = !DILocation(line: 1569, column: 3, scope: !8733)
!8761 = !DILocation(line: 1569, column: 8, scope: !8733)
!8762 = !DILocation(line: 1569, column: 10, scope: !8733)
!8763 = !DILocation(line: 1570, column: 10, scope: !8764)
!8764 = distinct !DILexicalBlock(scope: !8733, file: !3, line: 1570, column: 3)
!8765 = !DILocation(line: 1570, column: 8, scope: !8764)
!8766 = !DILocation(line: 1570, column: 15, scope: !8767)
!8767 = distinct !DILexicalBlock(scope: !8764, file: !3, line: 1570, column: 3)
!8768 = !DILocation(line: 1570, column: 19, scope: !8767)
!8769 = !DILocation(line: 1570, column: 17, scope: !8767)
!8770 = !DILocation(line: 1570, column: 3, scope: !8764)
!8771 = !DILocation(line: 1571, column: 19, scope: !8767)
!8772 = !DILocation(line: 1571, column: 5, scope: !8767)
!8773 = !DILocation(line: 1571, column: 10, scope: !8767)
!8774 = !DILocation(line: 1571, column: 14, scope: !8767)
!8775 = !DILocation(line: 1571, column: 17, scope: !8767)
!8776 = !DILocation(line: 1570, column: 23, scope: !8767)
!8777 = !DILocation(line: 1570, column: 3, scope: !8767)
!8778 = distinct !{!8778, !8770, !8779}
!8779 = !DILocation(line: 1571, column: 19, scope: !8764)
!8780 = !DILocation(line: 1572, column: 3, scope: !8733)
!8781 = !DILocation(line: 1574, column: 10, scope: !8733)
!8782 = !DILocation(line: 1574, column: 3, scope: !8733)
!8783 = distinct !DISubprogram(name: "affine_fn_cst", scope: !3, file: !3, line: 1580, type: !8784, scopeLine: 1581, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8784 = !DISubroutineType(types: !8785)
!8785 = !{!2274, !811}
!8786 = !DILocalVariable(name: "cst", arg: 1, scope: !8783, file: !3, line: 1580, type: !811)
!8787 = !DILocation(line: 1580, column: 21, scope: !8783)
!8788 = !DILocalVariable(name: "fn", scope: !8783, file: !3, line: 1582, type: !2274)
!8789 = !DILocation(line: 1582, column: 13, scope: !8783)
!8790 = !DILocation(line: 1582, column: 18, scope: !8783)
!8791 = !DILocation(line: 1583, column: 3, scope: !8783)
!8792 = !DILocation(line: 1584, column: 10, scope: !8783)
!8793 = !DILocation(line: 1584, column: 3, scope: !8783)
!8794 = distinct !DISubprogram(name: "ziv_subscript_p", scope: !3, file: !3, line: 1514, type: !8795, scopeLine: 1515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8795 = !DISubroutineType(types: !8796)
!8796 = !{!931, !3295, !3295}
!8797 = !DILocalVariable(name: "chrec_a", arg: 1, scope: !8794, file: !3, line: 1514, type: !3295)
!8798 = !DILocation(line: 1514, column: 29, scope: !8794)
!8799 = !DILocalVariable(name: "chrec_b", arg: 2, scope: !8794, file: !3, line: 1514, type: !3295)
!8800 = !DILocation(line: 1514, column: 49, scope: !8794)
!8801 = !DILocation(line: 1516, column: 45, scope: !8794)
!8802 = !DILocation(line: 1516, column: 11, scope: !8794)
!8803 = !DILocation(line: 1517, column: 4, scope: !8794)
!8804 = !DILocation(line: 1517, column: 41, scope: !8794)
!8805 = !DILocation(line: 1517, column: 7, scope: !8794)
!8806 = !DILocation(line: 0, scope: !8794)
!8807 = !DILocation(line: 1516, column: 10, scope: !8794)
!8808 = !DILocation(line: 1516, column: 3, scope: !8794)
!8809 = distinct !DISubprogram(name: "analyze_ziv_subscript", scope: !3, file: !3, line: 1611, type: !8810, scopeLine: 1616, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8810 = !DISubroutineType(types: !8811)
!8811 = !{null, !811, !811, !8535, !8535, !1176}
!8812 = !DILocalVariable(name: "chrec_a", arg: 1, scope: !8809, file: !3, line: 1611, type: !811)
!8813 = !DILocation(line: 1611, column: 29, scope: !8809)
!8814 = !DILocalVariable(name: "chrec_b", arg: 2, scope: !8809, file: !3, line: 1612, type: !811)
!8815 = !DILocation(line: 1612, column: 15, scope: !8809)
!8816 = !DILocalVariable(name: "overlaps_a", arg: 3, scope: !8809, file: !3, line: 1613, type: !8535)
!8817 = !DILocation(line: 1613, column: 30, scope: !8809)
!8818 = !DILocalVariable(name: "overlaps_b", arg: 4, scope: !8809, file: !3, line: 1614, type: !8535)
!8819 = !DILocation(line: 1614, column: 30, scope: !8809)
!8820 = !DILocalVariable(name: "last_conflicts", arg: 5, scope: !8809, file: !3, line: 1615, type: !1176)
!8821 = !DILocation(line: 1615, column: 16, scope: !8809)
!8822 = !DILocalVariable(name: "type", scope: !8809, file: !3, line: 1617, type: !811)
!8823 = !DILocation(line: 1617, column: 8, scope: !8809)
!8824 = !DILocalVariable(name: "difference", scope: !8809, file: !3, line: 1617, type: !811)
!8825 = !DILocation(line: 1617, column: 14, scope: !8809)
!8826 = !DILocation(line: 1618, column: 27, scope: !8809)
!8827 = !DILocation(line: 1620, column: 7, scope: !8828)
!8828 = distinct !DILexicalBlock(scope: !8809, file: !3, line: 1620, column: 7)
!8829 = !DILocation(line: 1620, column: 17, scope: !8828)
!8830 = !DILocation(line: 1620, column: 21, scope: !8828)
!8831 = !DILocation(line: 1620, column: 32, scope: !8828)
!8832 = !DILocation(line: 1620, column: 7, scope: !8809)
!8833 = !DILocation(line: 1621, column: 14, scope: !8828)
!8834 = !DILocation(line: 1621, column: 5, scope: !8828)
!8835 = !DILocation(line: 1623, column: 33, scope: !8809)
!8836 = !DILocation(line: 1623, column: 54, scope: !8809)
!8837 = !DILocation(line: 1623, column: 10, scope: !8809)
!8838 = !DILocation(line: 1623, column: 8, scope: !8809)
!8839 = !DILocation(line: 1624, column: 28, scope: !8809)
!8840 = !DILocation(line: 1624, column: 34, scope: !8809)
!8841 = !DILocation(line: 1624, column: 13, scope: !8809)
!8842 = !DILocation(line: 1624, column: 11, scope: !8809)
!8843 = !DILocation(line: 1625, column: 28, scope: !8809)
!8844 = !DILocation(line: 1625, column: 34, scope: !8809)
!8845 = !DILocation(line: 1625, column: 13, scope: !8809)
!8846 = !DILocation(line: 1625, column: 11, scope: !8809)
!8847 = !DILocation(line: 1626, column: 34, scope: !8809)
!8848 = !DILocation(line: 1626, column: 40, scope: !8809)
!8849 = !DILocation(line: 1626, column: 49, scope: !8809)
!8850 = !DILocation(line: 1626, column: 16, scope: !8809)
!8851 = !DILocation(line: 1626, column: 14, scope: !8809)
!8852 = !DILocation(line: 1628, column: 11, scope: !8809)
!8853 = !DILocation(line: 1628, column: 3, scope: !8809)
!8854 = !DILocation(line: 1631, column: 26, scope: !8855)
!8855 = distinct !DILexicalBlock(scope: !8856, file: !3, line: 1631, column: 11)
!8856 = distinct !DILexicalBlock(scope: !8809, file: !3, line: 1629, column: 5)
!8857 = !DILocation(line: 1631, column: 11, scope: !8855)
!8858 = !DILocation(line: 1631, column: 11, scope: !8856)
!8859 = !DILocation(line: 1635, column: 49, scope: !8860)
!8860 = distinct !DILexicalBlock(scope: !8855, file: !3, line: 1632, column: 2)
!8861 = !DILocation(line: 1635, column: 34, scope: !8860)
!8862 = !DILocation(line: 1635, column: 18, scope: !8860)
!8863 = !DILocation(line: 1635, column: 5, scope: !8860)
!8864 = !DILocation(line: 1635, column: 16, scope: !8860)
!8865 = !DILocation(line: 1636, column: 49, scope: !8860)
!8866 = !DILocation(line: 1636, column: 34, scope: !8860)
!8867 = !DILocation(line: 1636, column: 18, scope: !8860)
!8868 = !DILocation(line: 1636, column: 5, scope: !8860)
!8869 = !DILocation(line: 1636, column: 16, scope: !8860)
!8870 = !DILocation(line: 1637, column: 22, scope: !8860)
!8871 = !DILocation(line: 1637, column: 5, scope: !8860)
!8872 = !DILocation(line: 1637, column: 20, scope: !8860)
!8873 = !DILocation(line: 1638, column: 38, scope: !8860)
!8874 = !DILocation(line: 1639, column: 2, scope: !8860)
!8875 = !DILocation(line: 1643, column: 18, scope: !8876)
!8876 = distinct !DILexicalBlock(scope: !8855, file: !3, line: 1641, column: 2)
!8877 = !DILocation(line: 1643, column: 5, scope: !8876)
!8878 = !DILocation(line: 1643, column: 16, scope: !8876)
!8879 = !DILocation(line: 1644, column: 18, scope: !8876)
!8880 = !DILocation(line: 1644, column: 5, scope: !8876)
!8881 = !DILocation(line: 1644, column: 16, scope: !8876)
!8882 = !DILocation(line: 1645, column: 22, scope: !8876)
!8883 = !DILocation(line: 1645, column: 5, scope: !8876)
!8884 = !DILocation(line: 1645, column: 20, scope: !8876)
!8885 = !DILocation(line: 1646, column: 40, scope: !8876)
!8886 = !DILocation(line: 1648, column: 7, scope: !8856)
!8887 = !DILocation(line: 1653, column: 11, scope: !8888)
!8888 = distinct !DILexicalBlock(scope: !8856, file: !3, line: 1653, column: 11)
!8889 = !DILocation(line: 1653, column: 21, scope: !8888)
!8890 = !DILocation(line: 1653, column: 25, scope: !8888)
!8891 = !DILocation(line: 1653, column: 36, scope: !8888)
!8892 = !DILocation(line: 1653, column: 11, scope: !8856)
!8893 = !DILocation(line: 1654, column: 11, scope: !8888)
!8894 = !DILocation(line: 1654, column: 2, scope: !8888)
!8895 = !DILocation(line: 1656, column: 21, scope: !8856)
!8896 = !DILocation(line: 1656, column: 8, scope: !8856)
!8897 = !DILocation(line: 1656, column: 19, scope: !8856)
!8898 = !DILocation(line: 1657, column: 21, scope: !8856)
!8899 = !DILocation(line: 1657, column: 8, scope: !8856)
!8900 = !DILocation(line: 1657, column: 19, scope: !8856)
!8901 = !DILocation(line: 1658, column: 25, scope: !8856)
!8902 = !DILocation(line: 1658, column: 8, scope: !8856)
!8903 = !DILocation(line: 1658, column: 23, scope: !8856)
!8904 = !DILocation(line: 1659, column: 45, scope: !8856)
!8905 = !DILocation(line: 1660, column: 7, scope: !8856)
!8906 = !DILocation(line: 1663, column: 7, scope: !8907)
!8907 = distinct !DILexicalBlock(scope: !8809, file: !3, line: 1663, column: 7)
!8908 = !DILocation(line: 1663, column: 17, scope: !8907)
!8909 = !DILocation(line: 1663, column: 21, scope: !8907)
!8910 = !DILocation(line: 1663, column: 32, scope: !8907)
!8911 = !DILocation(line: 1663, column: 7, scope: !8809)
!8912 = !DILocation(line: 1664, column: 14, scope: !8907)
!8913 = !DILocation(line: 1664, column: 5, scope: !8907)
!8914 = !DILocation(line: 1665, column: 1, scope: !8809)
!8915 = distinct !DISubprogram(name: "siv_subscript_p", scope: !3, file: !3, line: 1524, type: !8795, scopeLine: 1525, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8916 = !DILocalVariable(name: "chrec_a", arg: 1, scope: !8915, file: !3, line: 1524, type: !3295)
!8917 = !DILocation(line: 1524, column: 29, scope: !8915)
!8918 = !DILocalVariable(name: "chrec_b", arg: 2, scope: !8915, file: !3, line: 1524, type: !3295)
!8919 = !DILocation(line: 1524, column: 49, scope: !8915)
!8920 = !DILocation(line: 1526, column: 42, scope: !8921)
!8921 = distinct !DILexicalBlock(scope: !8915, file: !3, line: 1526, column: 7)
!8922 = !DILocation(line: 1526, column: 8, scope: !8921)
!8923 = !DILocation(line: 1527, column: 8, scope: !8921)
!8924 = !DILocation(line: 1527, column: 47, scope: !8921)
!8925 = !DILocation(line: 1527, column: 11, scope: !8921)
!8926 = !DILocation(line: 1528, column: 7, scope: !8921)
!8927 = !DILocation(line: 1528, column: 45, scope: !8921)
!8928 = !DILocation(line: 1528, column: 11, scope: !8921)
!8929 = !DILocation(line: 1529, column: 4, scope: !8921)
!8930 = !DILocation(line: 1529, column: 43, scope: !8921)
!8931 = !DILocation(line: 1529, column: 7, scope: !8921)
!8932 = !DILocation(line: 1526, column: 7, scope: !8915)
!8933 = !DILocation(line: 1530, column: 5, scope: !8921)
!8934 = !DILocation(line: 1532, column: 43, scope: !8935)
!8935 = distinct !DILexicalBlock(scope: !8915, file: !3, line: 1532, column: 7)
!8936 = !DILocation(line: 1532, column: 7, scope: !8935)
!8937 = !DILocation(line: 1533, column: 7, scope: !8935)
!8938 = !DILocation(line: 1533, column: 46, scope: !8935)
!8939 = !DILocation(line: 1533, column: 10, scope: !8935)
!8940 = !DILocation(line: 1532, column: 7, scope: !8915)
!8941 = !DILocation(line: 1535, column: 15, scope: !8942)
!8942 = distinct !DILexicalBlock(scope: !8935, file: !3, line: 1534, column: 5)
!8943 = !DILocation(line: 1535, column: 7, scope: !8942)
!8944 = !DILocation(line: 1538, column: 12, scope: !8945)
!8945 = distinct !DILexicalBlock(scope: !8942, file: !3, line: 1536, column: 2)
!8946 = !DILocation(line: 1538, column: 4, scope: !8945)
!8947 = !DILocation(line: 1541, column: 12, scope: !8948)
!8948 = distinct !DILexicalBlock(scope: !8949, file: !3, line: 1541, column: 12)
!8949 = distinct !DILexicalBlock(scope: !8945, file: !3, line: 1539, column: 6)
!8950 = !DILocation(line: 1541, column: 40, scope: !8948)
!8951 = !DILocation(line: 1541, column: 37, scope: !8948)
!8952 = !DILocation(line: 1541, column: 12, scope: !8949)
!8953 = !DILocation(line: 1542, column: 3, scope: !8948)
!8954 = !DILocation(line: 1545, column: 8, scope: !8949)
!8955 = !DILocation(line: 1549, column: 4, scope: !8945)
!8956 = !DILocation(line: 1553, column: 3, scope: !8915)
!8957 = !DILocation(line: 1554, column: 1, scope: !8915)
!8958 = distinct !DISubprogram(name: "analyze_siv_subscript", scope: !3, file: !3, line: 2486, type: !8959, scopeLine: 2492, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!8959 = !DISubroutineType(types: !8960)
!8960 = !{null, !811, !811, !8535, !8535, !1176, !908}
!8961 = !DILocalVariable(name: "chrec_a", arg: 1, scope: !8958, file: !3, line: 2486, type: !811)
!8962 = !DILocation(line: 2486, column: 29, scope: !8958)
!8963 = !DILocalVariable(name: "chrec_b", arg: 2, scope: !8958, file: !3, line: 2487, type: !811)
!8964 = !DILocation(line: 2487, column: 15, scope: !8958)
!8965 = !DILocalVariable(name: "overlaps_a", arg: 3, scope: !8958, file: !3, line: 2488, type: !8535)
!8966 = !DILocation(line: 2488, column: 30, scope: !8958)
!8967 = !DILocalVariable(name: "overlaps_b", arg: 4, scope: !8958, file: !3, line: 2489, type: !8535)
!8968 = !DILocation(line: 2489, column: 30, scope: !8958)
!8969 = !DILocalVariable(name: "last_conflicts", arg: 5, scope: !8958, file: !3, line: 2490, type: !1176)
!8970 = !DILocation(line: 2490, column: 16, scope: !8958)
!8971 = !DILocalVariable(name: "loop_nest_num", arg: 6, scope: !8958, file: !3, line: 2491, type: !908)
!8972 = !DILocation(line: 2491, column: 14, scope: !8958)
!8973 = !DILocation(line: 2493, column: 27, scope: !8958)
!8974 = !DILocation(line: 2495, column: 7, scope: !8975)
!8975 = distinct !DILexicalBlock(scope: !8958, file: !3, line: 2495, column: 7)
!8976 = !DILocation(line: 2495, column: 17, scope: !8975)
!8977 = !DILocation(line: 2495, column: 21, scope: !8975)
!8978 = !DILocation(line: 2495, column: 32, scope: !8975)
!8979 = !DILocation(line: 2495, column: 7, scope: !8958)
!8980 = !DILocation(line: 2496, column: 14, scope: !8975)
!8981 = !DILocation(line: 2496, column: 5, scope: !8975)
!8982 = !DILocation(line: 2498, column: 41, scope: !8983)
!8983 = distinct !DILexicalBlock(scope: !8958, file: !3, line: 2498, column: 7)
!8984 = !DILocation(line: 2498, column: 7, scope: !8983)
!8985 = !DILocation(line: 2499, column: 7, scope: !8983)
!8986 = !DILocation(line: 2499, column: 48, scope: !8983)
!8987 = !DILocation(line: 2499, column: 57, scope: !8983)
!8988 = !DILocation(line: 2499, column: 10, scope: !8983)
!8989 = !DILocation(line: 2498, column: 7, scope: !8958)
!8990 = !DILocation(line: 2500, column: 39, scope: !8983)
!8991 = !DILocation(line: 2500, column: 48, scope: !8983)
!8992 = !DILocation(line: 2501, column: 11, scope: !8983)
!8993 = !DILocation(line: 2501, column: 23, scope: !8983)
!8994 = !DILocation(line: 2501, column: 35, scope: !8983)
!8995 = !DILocation(line: 2500, column: 5, scope: !8983)
!8996 = !DILocation(line: 2503, column: 50, scope: !8997)
!8997 = distinct !DILexicalBlock(scope: !8983, file: !3, line: 2503, column: 12)
!8998 = !DILocation(line: 2503, column: 59, scope: !8997)
!8999 = !DILocation(line: 2503, column: 12, scope: !8997)
!9000 = !DILocation(line: 2504, column: 5, scope: !8997)
!9001 = !DILocation(line: 2504, column: 42, scope: !8997)
!9002 = !DILocation(line: 2504, column: 8, scope: !8997)
!9003 = !DILocation(line: 2503, column: 12, scope: !8983)
!9004 = !DILocation(line: 2505, column: 39, scope: !8997)
!9005 = !DILocation(line: 2505, column: 48, scope: !8997)
!9006 = !DILocation(line: 2506, column: 11, scope: !8997)
!9007 = !DILocation(line: 2506, column: 23, scope: !8997)
!9008 = !DILocation(line: 2506, column: 35, scope: !8997)
!9009 = !DILocation(line: 2505, column: 5, scope: !8997)
!9010 = !DILocation(line: 2508, column: 50, scope: !9011)
!9011 = distinct !DILexicalBlock(scope: !8997, file: !3, line: 2508, column: 12)
!9012 = !DILocation(line: 2508, column: 59, scope: !9011)
!9013 = !DILocation(line: 2508, column: 12, scope: !9011)
!9014 = !DILocation(line: 2509, column: 5, scope: !9011)
!9015 = !DILocation(line: 2509, column: 46, scope: !9011)
!9016 = !DILocation(line: 2509, column: 55, scope: !9011)
!9017 = !DILocation(line: 2509, column: 8, scope: !9011)
!9018 = !DILocation(line: 2508, column: 12, scope: !8997)
!9019 = !DILocation(line: 2511, column: 36, scope: !9020)
!9020 = distinct !DILexicalBlock(scope: !9021, file: !3, line: 2511, column: 11)
!9021 = distinct !DILexicalBlock(scope: !9011, file: !3, line: 2510, column: 5)
!9022 = !DILocation(line: 2511, column: 12, scope: !9020)
!9023 = !DILocation(line: 2512, column: 4, scope: !9020)
!9024 = !DILocation(line: 2512, column: 32, scope: !9020)
!9025 = !DILocation(line: 2512, column: 8, scope: !9020)
!9026 = !DILocation(line: 2511, column: 11, scope: !9021)
!9027 = !DILocation(line: 2514, column: 37, scope: !9028)
!9028 = distinct !DILexicalBlock(scope: !9020, file: !3, line: 2513, column: 2)
!9029 = !DILocation(line: 2514, column: 46, scope: !9028)
!9030 = !DILocation(line: 2515, column: 9, scope: !9028)
!9031 = !DILocation(line: 2515, column: 21, scope: !9028)
!9032 = !DILocation(line: 2516, column: 9, scope: !9028)
!9033 = !DILocation(line: 2514, column: 4, scope: !9028)
!9034 = !DILocation(line: 2518, column: 8, scope: !9035)
!9035 = distinct !DILexicalBlock(scope: !9028, file: !3, line: 2518, column: 8)
!9036 = !DILocation(line: 2519, column: 8, scope: !9035)
!9037 = !DILocation(line: 2519, column: 11, scope: !9035)
!9038 = !DILocation(line: 2518, column: 8, scope: !9028)
!9039 = !DILocation(line: 2520, column: 44, scope: !9035)
!9040 = !DILocation(line: 2520, column: 6, scope: !9035)
!9041 = !DILocation(line: 2521, column: 13, scope: !9042)
!9042 = distinct !DILexicalBlock(scope: !9035, file: !3, line: 2521, column: 13)
!9043 = !DILocation(line: 2522, column: 6, scope: !9042)
!9044 = !DILocation(line: 2522, column: 9, scope: !9042)
!9045 = !DILocation(line: 2521, column: 13, scope: !9035)
!9046 = !DILocation(line: 2523, column: 42, scope: !9042)
!9047 = !DILocation(line: 2523, column: 6, scope: !9042)
!9048 = !DILocation(line: 2525, column: 40, scope: !9042)
!9049 = !DILocation(line: 2526, column: 2, scope: !9028)
!9050 = !DILocation(line: 2527, column: 16, scope: !9051)
!9051 = distinct !DILexicalBlock(scope: !9020, file: !3, line: 2527, column: 16)
!9052 = !DILocation(line: 2527, column: 16, scope: !9020)
!9053 = !DILocation(line: 2530, column: 37, scope: !9054)
!9054 = distinct !DILexicalBlock(scope: !9051, file: !3, line: 2529, column: 2)
!9055 = !DILocation(line: 2530, column: 46, scope: !9054)
!9056 = !DILocation(line: 2531, column: 9, scope: !9054)
!9057 = !DILocation(line: 2531, column: 21, scope: !9054)
!9058 = !DILocation(line: 2532, column: 9, scope: !9054)
!9059 = !DILocation(line: 2530, column: 4, scope: !9054)
!9060 = !DILocation(line: 2534, column: 8, scope: !9061)
!9061 = distinct !DILexicalBlock(scope: !9054, file: !3, line: 2534, column: 8)
!9062 = !DILocation(line: 2535, column: 8, scope: !9061)
!9063 = !DILocation(line: 2535, column: 11, scope: !9061)
!9064 = !DILocation(line: 2534, column: 8, scope: !9054)
!9065 = !DILocation(line: 2536, column: 44, scope: !9061)
!9066 = !DILocation(line: 2536, column: 6, scope: !9061)
!9067 = !DILocation(line: 2537, column: 13, scope: !9068)
!9068 = distinct !DILexicalBlock(scope: !9061, file: !3, line: 2537, column: 13)
!9069 = !DILocation(line: 2538, column: 6, scope: !9068)
!9070 = !DILocation(line: 2538, column: 9, scope: !9068)
!9071 = !DILocation(line: 2537, column: 13, scope: !9061)
!9072 = !DILocation(line: 2539, column: 42, scope: !9068)
!9073 = !DILocation(line: 2539, column: 6, scope: !9068)
!9074 = !DILocation(line: 2541, column: 40, scope: !9068)
!9075 = !DILocation(line: 2542, column: 2, scope: !9054)
!9076 = !DILocation(line: 2544, column: 2, scope: !9051)
!9077 = !DILocation(line: 2545, column: 5, scope: !9021)
!9078 = !DILocation(line: 2548, column: 5, scope: !9011)
!9079 = !DILabel(scope: !9080, name: "siv_subscript_dontknow", file: !3, line: 2549)
!9080 = distinct !DILexicalBlock(scope: !9011, file: !3, line: 2548, column: 5)
!9081 = !DILocation(line: 2549, column: 5, scope: !9080)
!9082 = !DILocation(line: 2550, column: 11, scope: !9083)
!9083 = distinct !DILexicalBlock(scope: !9080, file: !3, line: 2550, column: 11)
!9084 = !DILocation(line: 2550, column: 21, scope: !9083)
!9085 = !DILocation(line: 2550, column: 25, scope: !9083)
!9086 = !DILocation(line: 2550, column: 36, scope: !9083)
!9087 = !DILocation(line: 2550, column: 11, scope: !9080)
!9088 = !DILocation(line: 2551, column: 11, scope: !9083)
!9089 = !DILocation(line: 2551, column: 2, scope: !9083)
!9090 = !DILocation(line: 2552, column: 21, scope: !9080)
!9091 = !DILocation(line: 2552, column: 8, scope: !9080)
!9092 = !DILocation(line: 2552, column: 19, scope: !9080)
!9093 = !DILocation(line: 2553, column: 21, scope: !9080)
!9094 = !DILocation(line: 2553, column: 8, scope: !9080)
!9095 = !DILocation(line: 2553, column: 19, scope: !9080)
!9096 = !DILocation(line: 2554, column: 25, scope: !9080)
!9097 = !DILocation(line: 2554, column: 8, scope: !9080)
!9098 = !DILocation(line: 2554, column: 23, scope: !9080)
!9099 = !DILocation(line: 2555, column: 45, scope: !9080)
!9100 = !DILocation(line: 2558, column: 7, scope: !9101)
!9101 = distinct !DILexicalBlock(scope: !8958, file: !3, line: 2558, column: 7)
!9102 = !DILocation(line: 2558, column: 17, scope: !9101)
!9103 = !DILocation(line: 2558, column: 21, scope: !9101)
!9104 = !DILocation(line: 2558, column: 32, scope: !9101)
!9105 = !DILocation(line: 2558, column: 7, scope: !8958)
!9106 = !DILocation(line: 2559, column: 14, scope: !9101)
!9107 = !DILocation(line: 2559, column: 5, scope: !9101)
!9108 = !DILocation(line: 2560, column: 1, scope: !8958)
!9109 = distinct !DISubprogram(name: "analyze_miv_subscript", scope: !3, file: !3, line: 2596, type: !8533, scopeLine: 2602, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!9110 = !DILocalVariable(name: "chrec_a", arg: 1, scope: !9109, file: !3, line: 2596, type: !811)
!9111 = !DILocation(line: 2596, column: 29, scope: !9109)
!9112 = !DILocalVariable(name: "chrec_b", arg: 2, scope: !9109, file: !3, line: 2597, type: !811)
!9113 = !DILocation(line: 2597, column: 15, scope: !9109)
!9114 = !DILocalVariable(name: "overlaps_a", arg: 3, scope: !9109, file: !3, line: 2598, type: !8535)
!9115 = !DILocation(line: 2598, column: 30, scope: !9109)
!9116 = !DILocalVariable(name: "overlaps_b", arg: 4, scope: !9109, file: !3, line: 2599, type: !8535)
!9117 = !DILocation(line: 2599, column: 30, scope: !9109)
!9118 = !DILocalVariable(name: "last_conflicts", arg: 5, scope: !9109, file: !3, line: 2600, type: !1176)
!9119 = !DILocation(line: 2600, column: 16, scope: !9109)
!9120 = !DILocalVariable(name: "loop_nest", arg: 6, scope: !9109, file: !3, line: 2601, type: !1357)
!9121 = !DILocation(line: 2601, column: 23, scope: !9109)
!9122 = !DILocalVariable(name: "type", scope: !9109, file: !3, line: 2611, type: !811)
!9123 = !DILocation(line: 2611, column: 8, scope: !9109)
!9124 = !DILocalVariable(name: "difference", scope: !9109, file: !3, line: 2611, type: !811)
!9125 = !DILocation(line: 2611, column: 14, scope: !9109)
!9126 = !DILocation(line: 2613, column: 27, scope: !9109)
!9127 = !DILocation(line: 2614, column: 7, scope: !9128)
!9128 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 2614, column: 7)
!9129 = !DILocation(line: 2614, column: 17, scope: !9128)
!9130 = !DILocation(line: 2614, column: 21, scope: !9128)
!9131 = !DILocation(line: 2614, column: 32, scope: !9128)
!9132 = !DILocation(line: 2614, column: 7, scope: !9109)
!9133 = !DILocation(line: 2615, column: 14, scope: !9128)
!9134 = !DILocation(line: 2615, column: 5, scope: !9128)
!9135 = !DILocation(line: 2617, column: 33, scope: !9109)
!9136 = !DILocation(line: 2617, column: 54, scope: !9109)
!9137 = !DILocation(line: 2617, column: 10, scope: !9109)
!9138 = !DILocation(line: 2617, column: 8, scope: !9109)
!9139 = !DILocation(line: 2618, column: 28, scope: !9109)
!9140 = !DILocation(line: 2618, column: 34, scope: !9109)
!9141 = !DILocation(line: 2618, column: 13, scope: !9109)
!9142 = !DILocation(line: 2618, column: 11, scope: !9109)
!9143 = !DILocation(line: 2619, column: 28, scope: !9109)
!9144 = !DILocation(line: 2619, column: 34, scope: !9109)
!9145 = !DILocation(line: 2619, column: 13, scope: !9109)
!9146 = !DILocation(line: 2619, column: 11, scope: !9109)
!9147 = !DILocation(line: 2620, column: 34, scope: !9109)
!9148 = !DILocation(line: 2620, column: 40, scope: !9109)
!9149 = !DILocation(line: 2620, column: 49, scope: !9109)
!9150 = !DILocation(line: 2620, column: 16, scope: !9109)
!9151 = !DILocation(line: 2620, column: 14, scope: !9109)
!9152 = !DILocation(line: 2622, column: 24, scope: !9153)
!9153 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 2622, column: 7)
!9154 = !DILocation(line: 2622, column: 33, scope: !9153)
!9155 = !DILocation(line: 2622, column: 7, scope: !9153)
!9156 = !DILocation(line: 2622, column: 7, scope: !9109)
!9157 = !DILocation(line: 2626, column: 52, scope: !9158)
!9158 = distinct !DILexicalBlock(scope: !9153, file: !3, line: 2623, column: 5)
!9159 = !DILocation(line: 2626, column: 37, scope: !9158)
!9160 = !DILocation(line: 2626, column: 21, scope: !9158)
!9161 = !DILocation(line: 2626, column: 8, scope: !9158)
!9162 = !DILocation(line: 2626, column: 19, scope: !9158)
!9163 = !DILocation(line: 2627, column: 52, scope: !9158)
!9164 = !DILocation(line: 2627, column: 37, scope: !9158)
!9165 = !DILocation(line: 2627, column: 21, scope: !9158)
!9166 = !DILocation(line: 2627, column: 8, scope: !9158)
!9167 = !DILocation(line: 2627, column: 19, scope: !9158)
!9168 = !DILocation(line: 2629, column: 22, scope: !9158)
!9169 = !DILocation(line: 2629, column: 6, scope: !9158)
!9170 = !DILocation(line: 2628, column: 25, scope: !9158)
!9171 = !DILocation(line: 2628, column: 8, scope: !9158)
!9172 = !DILocation(line: 2628, column: 23, scope: !9158)
!9173 = !DILocation(line: 2630, column: 41, scope: !9158)
!9174 = !DILocation(line: 2631, column: 5, scope: !9158)
!9175 = !DILocation(line: 2633, column: 46, scope: !9176)
!9176 = distinct !DILexicalBlock(scope: !9153, file: !3, line: 2633, column: 12)
!9177 = !DILocation(line: 2633, column: 12, scope: !9176)
!9178 = !DILocation(line: 2637, column: 5, scope: !9176)
!9179 = !DILocation(line: 2637, column: 36, scope: !9176)
!9180 = !DILocation(line: 2637, column: 45, scope: !9176)
!9181 = !DILocation(line: 2637, column: 9, scope: !9176)
!9182 = !DILocation(line: 2633, column: 12, scope: !9153)
!9183 = !DILocation(line: 2644, column: 21, scope: !9184)
!9184 = distinct !DILexicalBlock(scope: !9176, file: !3, line: 2638, column: 5)
!9185 = !DILocation(line: 2644, column: 8, scope: !9184)
!9186 = !DILocation(line: 2644, column: 19, scope: !9184)
!9187 = !DILocation(line: 2645, column: 21, scope: !9184)
!9188 = !DILocation(line: 2645, column: 8, scope: !9184)
!9189 = !DILocation(line: 2645, column: 19, scope: !9184)
!9190 = !DILocation(line: 2646, column: 25, scope: !9184)
!9191 = !DILocation(line: 2646, column: 8, scope: !9184)
!9192 = !DILocation(line: 2646, column: 23, scope: !9184)
!9193 = !DILocation(line: 2647, column: 43, scope: !9184)
!9194 = !DILocation(line: 2648, column: 5, scope: !9184)
!9195 = !DILocation(line: 2650, column: 57, scope: !9196)
!9196 = distinct !DILexicalBlock(scope: !9176, file: !3, line: 2650, column: 12)
!9197 = !DILocation(line: 2650, column: 66, scope: !9196)
!9198 = !DILocation(line: 2650, column: 77, scope: !9196)
!9199 = !DILocation(line: 2650, column: 12, scope: !9196)
!9200 = !DILocation(line: 2651, column: 5, scope: !9196)
!9201 = !DILocation(line: 2651, column: 33, scope: !9196)
!9202 = !DILocation(line: 2651, column: 9, scope: !9196)
!9203 = !DILocation(line: 2652, column: 5, scope: !9196)
!9204 = !DILocation(line: 2652, column: 53, scope: !9196)
!9205 = !DILocation(line: 2652, column: 62, scope: !9196)
!9206 = !DILocation(line: 2652, column: 73, scope: !9196)
!9207 = !DILocation(line: 2652, column: 8, scope: !9196)
!9208 = !DILocation(line: 2653, column: 5, scope: !9196)
!9209 = !DILocation(line: 2653, column: 33, scope: !9196)
!9210 = !DILocation(line: 2653, column: 9, scope: !9196)
!9211 = !DILocation(line: 2650, column: 12, scope: !9176)
!9212 = !DILocation(line: 2669, column: 40, scope: !9213)
!9213 = distinct !DILexicalBlock(scope: !9196, file: !3, line: 2654, column: 5)
!9214 = !DILocation(line: 2669, column: 49, scope: !9213)
!9215 = !DILocation(line: 2670, column: 12, scope: !9213)
!9216 = !DILocation(line: 2670, column: 24, scope: !9213)
!9217 = !DILocation(line: 2670, column: 36, scope: !9213)
!9218 = !DILocation(line: 2669, column: 7, scope: !9213)
!9219 = !DILocation(line: 2672, column: 11, scope: !9220)
!9220 = distinct !DILexicalBlock(scope: !9213, file: !3, line: 2672, column: 11)
!9221 = !DILocation(line: 2673, column: 5, scope: !9220)
!9222 = !DILocation(line: 2673, column: 8, scope: !9220)
!9223 = !DILocation(line: 2672, column: 11, scope: !9213)
!9224 = !DILocation(line: 2674, column: 40, scope: !9220)
!9225 = !DILocation(line: 2674, column: 2, scope: !9220)
!9226 = !DILocation(line: 2675, column: 16, scope: !9227)
!9227 = distinct !DILexicalBlock(scope: !9220, file: !3, line: 2675, column: 16)
!9228 = !DILocation(line: 2676, column: 9, scope: !9227)
!9229 = !DILocation(line: 2676, column: 12, scope: !9227)
!9230 = !DILocation(line: 2675, column: 16, scope: !9220)
!9231 = !DILocation(line: 2677, column: 38, scope: !9227)
!9232 = !DILocation(line: 2677, column: 2, scope: !9227)
!9233 = !DILocation(line: 2679, column: 36, scope: !9227)
!9234 = !DILocation(line: 2680, column: 5, scope: !9213)
!9235 = !DILocation(line: 2685, column: 11, scope: !9236)
!9236 = distinct !DILexicalBlock(scope: !9237, file: !3, line: 2685, column: 11)
!9237 = distinct !DILexicalBlock(scope: !9196, file: !3, line: 2683, column: 5)
!9238 = !DILocation(line: 2685, column: 21, scope: !9236)
!9239 = !DILocation(line: 2685, column: 25, scope: !9236)
!9240 = !DILocation(line: 2685, column: 36, scope: !9236)
!9241 = !DILocation(line: 2685, column: 11, scope: !9237)
!9242 = !DILocation(line: 2686, column: 11, scope: !9236)
!9243 = !DILocation(line: 2686, column: 2, scope: !9236)
!9244 = !DILocation(line: 2688, column: 21, scope: !9237)
!9245 = !DILocation(line: 2688, column: 8, scope: !9237)
!9246 = !DILocation(line: 2688, column: 19, scope: !9237)
!9247 = !DILocation(line: 2689, column: 21, scope: !9237)
!9248 = !DILocation(line: 2689, column: 8, scope: !9237)
!9249 = !DILocation(line: 2689, column: 19, scope: !9237)
!9250 = !DILocation(line: 2690, column: 25, scope: !9237)
!9251 = !DILocation(line: 2690, column: 8, scope: !9237)
!9252 = !DILocation(line: 2690, column: 23, scope: !9237)
!9253 = !DILocation(line: 2691, column: 45, scope: !9237)
!9254 = !DILocation(line: 2694, column: 7, scope: !9255)
!9255 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 2694, column: 7)
!9256 = !DILocation(line: 2694, column: 17, scope: !9255)
!9257 = !DILocation(line: 2694, column: 21, scope: !9255)
!9258 = !DILocation(line: 2694, column: 32, scope: !9255)
!9259 = !DILocation(line: 2694, column: 7, scope: !9109)
!9260 = !DILocation(line: 2695, column: 14, scope: !9255)
!9261 = !DILocation(line: 2695, column: 5, scope: !9255)
!9262 = !DILocation(line: 2696, column: 1, scope: !9109)
!9263 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !164, file: !164, line: 184, type: !9264, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!9264 = !DISubroutineType(types: !9265)
!9265 = !{!2191, !908}
!9266 = !DILocalVariable(name: "alloc_", arg: 1, scope: !9263, file: !164, line: 184, type: !908)
!9267 = !DILocation(line: 184, column: 1, scope: !9263)
!9268 = distinct !DISubprogram(name: "evolution_function_is_constant_p", scope: !3292, file: !3292, line: 161, type: !3293, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!9269 = !DILocalVariable(name: "chrec", arg: 1, scope: !9268, file: !3292, line: 161, type: !3295)
!9270 = !DILocation(line: 161, column: 46, scope: !9268)
!9271 = !DILocation(line: 163, column: 7, scope: !9272)
!9272 = distinct !DILexicalBlock(scope: !9268, file: !3292, line: 163, column: 7)
!9273 = !DILocation(line: 163, column: 13, scope: !9272)
!9274 = !DILocation(line: 163, column: 7, scope: !9268)
!9275 = !DILocation(line: 164, column: 5, scope: !9272)
!9276 = !DILocation(line: 166, column: 11, scope: !9268)
!9277 = !DILocation(line: 166, column: 3, scope: !9268)
!9278 = !DILocation(line: 170, column: 7, scope: !9279)
!9279 = distinct !DILexicalBlock(scope: !9268, file: !3292, line: 167, column: 5)
!9280 = !DILocation(line: 173, column: 7, scope: !9279)
!9281 = !DILocation(line: 175, column: 1, scope: !9268)
!9282 = distinct !DISubprogram(name: "signed_type_for_types", scope: !3, file: !3, line: 1028, type: !9283, scopeLine: 1029, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!9283 = !DISubroutineType(types: !9284)
!9284 = !{!811, !811, !811}
!9285 = !DILocalVariable(name: "ta", arg: 1, scope: !9282, file: !3, line: 1028, type: !811)
!9286 = !DILocation(line: 1028, column: 29, scope: !9282)
!9287 = !DILocalVariable(name: "tb", arg: 2, scope: !9282, file: !3, line: 1028, type: !811)
!9288 = !DILocation(line: 1028, column: 38, scope: !9282)
!9289 = !DILocation(line: 1030, column: 7, scope: !9290)
!9290 = distinct !DILexicalBlock(scope: !9282, file: !3, line: 1030, column: 7)
!9291 = !DILocation(line: 1030, column: 29, scope: !9290)
!9292 = !DILocation(line: 1030, column: 27, scope: !9290)
!9293 = !DILocation(line: 1030, column: 7, scope: !9282)
!9294 = !DILocation(line: 1031, column: 29, scope: !9290)
!9295 = !DILocation(line: 1031, column: 12, scope: !9290)
!9296 = !DILocation(line: 1031, column: 5, scope: !9290)
!9297 = !DILocation(line: 1033, column: 29, scope: !9290)
!9298 = !DILocation(line: 1033, column: 12, scope: !9290)
!9299 = !DILocation(line: 1033, column: 5, scope: !9290)
!9300 = !DILocation(line: 1034, column: 1, scope: !9282)
!9301 = distinct !DISubprogram(name: "conflict_fn_no_dependence", scope: !3, file: !3, line: 1159, type: !7583, scopeLine: 1160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!9302 = !DILocalVariable(name: "fn", scope: !9301, file: !3, line: 1161, type: !2267)
!9303 = !DILocation(line: 1161, column: 22, scope: !9301)
!9304 = !DILocation(line: 1161, column: 27, scope: !9301)
!9305 = !DILocation(line: 1162, column: 3, scope: !9301)
!9306 = !DILocation(line: 1162, column: 7, scope: !9301)
!9307 = !DILocation(line: 1162, column: 9, scope: !9301)
!9308 = !DILocation(line: 1164, column: 10, scope: !9301)
!9309 = !DILocation(line: 1164, column: 3, scope: !9301)
!9310 = distinct !DISubprogram(name: "evolution_function_is_affine_in_loop", scope: !3292, file: !3292, line: 180, type: !9311, scopeLine: 181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!9311 = !DISubroutineType(types: !9312)
!9312 = !{!931, !3295, !908}
!9313 = !DILocalVariable(name: "chrec", arg: 1, scope: !9310, file: !3292, line: 180, type: !3295)
!9314 = !DILocation(line: 180, column: 50, scope: !9310)
!9315 = !DILocalVariable(name: "loopnum", arg: 2, scope: !9310, file: !3292, line: 180, type: !908)
!9316 = !DILocation(line: 180, column: 61, scope: !9310)
!9317 = !DILocation(line: 182, column: 7, scope: !9318)
!9318 = distinct !DILexicalBlock(scope: !9310, file: !3292, line: 182, column: 7)
!9319 = !DILocation(line: 182, column: 13, scope: !9318)
!9320 = !DILocation(line: 182, column: 7, scope: !9310)
!9321 = !DILocation(line: 183, column: 5, scope: !9318)
!9322 = !DILocation(line: 185, column: 11, scope: !9310)
!9323 = !DILocation(line: 185, column: 3, scope: !9310)
!9324 = !DILocation(line: 188, column: 46, scope: !9325)
!9325 = distinct !DILexicalBlock(scope: !9326, file: !3292, line: 188, column: 11)
!9326 = distinct !DILexicalBlock(scope: !9310, file: !3292, line: 186, column: 5)
!9327 = !DILocation(line: 188, column: 66, scope: !9325)
!9328 = !DILocation(line: 188, column: 11, scope: !9325)
!9329 = !DILocation(line: 189, column: 4, scope: !9325)
!9330 = !DILocation(line: 189, column: 42, scope: !9325)
!9331 = !DILocation(line: 189, column: 63, scope: !9325)
!9332 = !DILocation(line: 189, column: 7, scope: !9325)
!9333 = !DILocation(line: 188, column: 11, scope: !9326)
!9334 = !DILocation(line: 190, column: 2, scope: !9325)
!9335 = !DILocation(line: 192, column: 2, scope: !9325)
!9336 = !DILocation(line: 195, column: 7, scope: !9326)
!9337 = !DILocation(line: 197, column: 1, scope: !9310)
!9338 = distinct !DISubprogram(name: "analyze_siv_subscript_cst_affine", scope: !3, file: !3, line: 1745, type: !8810, scopeLine: 1750, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!9339 = !DILocalVariable(name: "chrec_a", arg: 1, scope: !9338, file: !3, line: 1745, type: !811)
!9340 = !DILocation(line: 1745, column: 40, scope: !9338)
!9341 = !DILocalVariable(name: "chrec_b", arg: 2, scope: !9338, file: !3, line: 1746, type: !811)
!9342 = !DILocation(line: 1746, column: 12, scope: !9338)
!9343 = !DILocalVariable(name: "overlaps_a", arg: 3, scope: !9338, file: !3, line: 1747, type: !8535)
!9344 = !DILocation(line: 1747, column: 27, scope: !9338)
!9345 = !DILocalVariable(name: "overlaps_b", arg: 4, scope: !9338, file: !3, line: 1748, type: !8535)
!9346 = !DILocation(line: 1748, column: 27, scope: !9338)
!9347 = !DILocalVariable(name: "last_conflicts", arg: 5, scope: !9338, file: !3, line: 1749, type: !1176)
!9348 = !DILocation(line: 1749, column: 13, scope: !9338)
!9349 = !DILocalVariable(name: "value0", scope: !9338, file: !3, line: 1751, type: !931)
!9350 = !DILocation(line: 1751, column: 8, scope: !9338)
!9351 = !DILocalVariable(name: "value1", scope: !9338, file: !3, line: 1751, type: !931)
!9352 = !DILocation(line: 1751, column: 16, scope: !9338)
!9353 = !DILocalVariable(name: "value2", scope: !9338, file: !3, line: 1751, type: !931)
!9354 = !DILocation(line: 1751, column: 24, scope: !9338)
!9355 = !DILocalVariable(name: "type", scope: !9338, file: !3, line: 1752, type: !811)
!9356 = !DILocation(line: 1752, column: 8, scope: !9338)
!9357 = !DILocalVariable(name: "difference", scope: !9338, file: !3, line: 1752, type: !811)
!9358 = !DILocation(line: 1752, column: 14, scope: !9338)
!9359 = !DILocalVariable(name: "tmp", scope: !9338, file: !3, line: 1752, type: !811)
!9360 = !DILocation(line: 1752, column: 26, scope: !9338)
!9361 = !DILocation(line: 1754, column: 33, scope: !9338)
!9362 = !DILocation(line: 1754, column: 54, scope: !9338)
!9363 = !DILocation(line: 1754, column: 10, scope: !9338)
!9364 = !DILocation(line: 1754, column: 8, scope: !9338)
!9365 = !DILocation(line: 1755, column: 28, scope: !9338)
!9366 = !DILocation(line: 1755, column: 34, scope: !9338)
!9367 = !DILocation(line: 1755, column: 13, scope: !9338)
!9368 = !DILocation(line: 1755, column: 11, scope: !9338)
!9369 = !DILocation(line: 1756, column: 28, scope: !9338)
!9370 = !DILocation(line: 1756, column: 34, scope: !9338)
!9371 = !DILocation(line: 1756, column: 13, scope: !9338)
!9372 = !DILocation(line: 1756, column: 11, scope: !9338)
!9373 = !DILocation(line: 1757, column: 34, scope: !9338)
!9374 = !DILocation(line: 1757, column: 59, scope: !9338)
!9375 = !DILocation(line: 1757, column: 40, scope: !9338)
!9376 = !DILocation(line: 1757, column: 69, scope: !9338)
!9377 = !DILocation(line: 1757, column: 16, scope: !9338)
!9378 = !DILocation(line: 1757, column: 14, scope: !9338)
!9379 = !DILocation(line: 1759, column: 46, scope: !9380)
!9380 = distinct !DILexicalBlock(scope: !9338, file: !3, line: 1759, column: 7)
!9381 = !DILocation(line: 1759, column: 27, scope: !9380)
!9382 = !DILocation(line: 1759, column: 8, scope: !9380)
!9383 = !DILocation(line: 1759, column: 7, scope: !9338)
!9384 = !DILocation(line: 1761, column: 11, scope: !9385)
!9385 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 1761, column: 11)
!9386 = distinct !DILexicalBlock(scope: !9380, file: !3, line: 1760, column: 5)
!9387 = !DILocation(line: 1761, column: 21, scope: !9385)
!9388 = !DILocation(line: 1761, column: 25, scope: !9385)
!9389 = !DILocation(line: 1761, column: 36, scope: !9385)
!9390 = !DILocation(line: 1761, column: 11, scope: !9386)
!9391 = !DILocation(line: 1762, column: 11, scope: !9385)
!9392 = !DILocation(line: 1762, column: 2, scope: !9385)
!9393 = !DILocation(line: 1764, column: 45, scope: !9386)
!9394 = !DILocation(line: 1765, column: 21, scope: !9386)
!9395 = !DILocation(line: 1765, column: 8, scope: !9386)
!9396 = !DILocation(line: 1765, column: 19, scope: !9386)
!9397 = !DILocation(line: 1766, column: 21, scope: !9386)
!9398 = !DILocation(line: 1766, column: 8, scope: !9386)
!9399 = !DILocation(line: 1766, column: 19, scope: !9386)
!9400 = !DILocation(line: 1767, column: 25, scope: !9386)
!9401 = !DILocation(line: 1767, column: 8, scope: !9386)
!9402 = !DILocation(line: 1767, column: 23, scope: !9386)
!9403 = !DILocation(line: 1768, column: 7, scope: !9386)
!9404 = !DILocation(line: 1772, column: 11, scope: !9405)
!9405 = distinct !DILexicalBlock(scope: !9406, file: !3, line: 1772, column: 11)
!9406 = distinct !DILexicalBlock(scope: !9380, file: !3, line: 1771, column: 5)
!9407 = !DILocation(line: 1772, column: 18, scope: !9405)
!9408 = !DILocation(line: 1772, column: 11, scope: !9406)
!9409 = !DILocation(line: 1774, column: 28, scope: !9410)
!9410 = distinct !DILexicalBlock(scope: !9411, file: !3, line: 1774, column: 8)
!9411 = distinct !DILexicalBlock(scope: !9405, file: !3, line: 1773, column: 2)
!9412 = !DILocation(line: 1774, column: 9, scope: !9410)
!9413 = !DILocation(line: 1774, column: 8, scope: !9411)
!9414 = !DILocation(line: 1776, column: 12, scope: !9415)
!9415 = distinct !DILexicalBlock(scope: !9416, file: !3, line: 1776, column: 12)
!9416 = distinct !DILexicalBlock(scope: !9410, file: !3, line: 1775, column: 6)
!9417 = !DILocation(line: 1776, column: 22, scope: !9415)
!9418 = !DILocation(line: 1776, column: 26, scope: !9415)
!9419 = !DILocation(line: 1776, column: 37, scope: !9415)
!9420 = !DILocation(line: 1776, column: 12, scope: !9416)
!9421 = !DILocation(line: 1777, column: 12, scope: !9415)
!9422 = !DILocation(line: 1777, column: 3, scope: !9415)
!9423 = !DILocation(line: 1779, column: 22, scope: !9416)
!9424 = !DILocation(line: 1779, column: 9, scope: !9416)
!9425 = !DILocation(line: 1779, column: 20, scope: !9416)
!9426 = !DILocation(line: 1780, column: 22, scope: !9416)
!9427 = !DILocation(line: 1780, column: 9, scope: !9416)
!9428 = !DILocation(line: 1780, column: 20, scope: !9416)
!9429 = !DILocation(line: 1781, column: 26, scope: !9416)
!9430 = !DILocation(line: 1781, column: 9, scope: !9416)
!9431 = !DILocation(line: 1781, column: 24, scope: !9416)
!9432 = !DILocation(line: 1782, column: 46, scope: !9416)
!9433 = !DILocation(line: 1783, column: 8, scope: !9416)
!9434 = !DILocation(line: 1787, column: 12, scope: !9435)
!9435 = distinct !DILexicalBlock(scope: !9436, file: !3, line: 1787, column: 12)
!9436 = distinct !DILexicalBlock(scope: !9410, file: !3, line: 1786, column: 6)
!9437 = !DILocation(line: 1787, column: 19, scope: !9435)
!9438 = !DILocation(line: 1787, column: 12, scope: !9436)
!9439 = !DILocation(line: 1794, column: 30, scope: !9440)
!9440 = distinct !DILexicalBlock(scope: !9441, file: !3, line: 1794, column: 9)
!9441 = distinct !DILexicalBlock(scope: !9435, file: !3, line: 1788, column: 3)
!9442 = !DILocation(line: 1794, column: 53, scope: !9440)
!9443 = !DILocation(line: 1794, column: 9, scope: !9440)
!9444 = !DILocation(line: 1794, column: 9, scope: !9441)
!9445 = !DILocalVariable(name: "numiter", scope: !9446, file: !3, line: 1796, type: !867)
!9446 = distinct !DILexicalBlock(scope: !9440, file: !3, line: 1795, column: 7)
!9447 = !DILocation(line: 1796, column: 23, scope: !9446)
!9448 = !DILocalVariable(name: "loop", scope: !9446, file: !3, line: 1797, type: !1357)
!9449 = !DILocation(line: 1797, column: 22, scope: !9446)
!9450 = !DILocation(line: 1797, column: 45, scope: !9446)
!9451 = !DILocation(line: 1797, column: 29, scope: !9446)
!9452 = !DILocation(line: 1799, column: 54, scope: !9446)
!9453 = !DILocation(line: 1799, column: 39, scope: !9446)
!9454 = !DILocation(line: 1799, column: 23, scope: !9446)
!9455 = !DILocation(line: 1799, column: 10, scope: !9446)
!9456 = !DILocation(line: 1799, column: 21, scope: !9446)
!9457 = !DILocation(line: 1800, column: 15, scope: !9446)
!9458 = !DILocation(line: 1800, column: 13, scope: !9446)
!9459 = !DILocation(line: 1803, column: 54, scope: !9446)
!9460 = !DILocation(line: 1803, column: 39, scope: !9446)
!9461 = !DILocation(line: 1803, column: 23, scope: !9446)
!9462 = !DILocation(line: 1803, column: 10, scope: !9446)
!9463 = !DILocation(line: 1803, column: 21, scope: !9446)
!9464 = !DILocation(line: 1804, column: 27, scope: !9446)
!9465 = !DILocation(line: 1804, column: 10, scope: !9446)
!9466 = !DILocation(line: 1804, column: 25, scope: !9446)
!9467 = !DILocation(line: 1809, column: 50, scope: !9446)
!9468 = !DILocation(line: 1809, column: 19, scope: !9446)
!9469 = !DILocation(line: 1809, column: 17, scope: !9446)
!9470 = !DILocation(line: 1811, column: 13, scope: !9471)
!9471 = distinct !DILexicalBlock(scope: !9446, file: !3, line: 1811, column: 13)
!9472 = !DILocation(line: 1811, column: 21, scope: !9471)
!9473 = !DILocation(line: 1812, column: 6, scope: !9471)
!9474 = !DILocation(line: 1812, column: 27, scope: !9471)
!9475 = !DILocation(line: 1812, column: 32, scope: !9471)
!9476 = !DILocation(line: 1812, column: 9, scope: !9471)
!9477 = !DILocation(line: 1812, column: 41, scope: !9471)
!9478 = !DILocation(line: 1811, column: 13, scope: !9446)
!9479 = !DILocation(line: 1814, column: 31, scope: !9480)
!9480 = distinct !DILexicalBlock(scope: !9471, file: !3, line: 1813, column: 4)
!9481 = !DILocation(line: 1814, column: 30, scope: !9480)
!9482 = !DILocation(line: 1814, column: 6, scope: !9480)
!9483 = !DILocation(line: 1815, column: 31, scope: !9480)
!9484 = !DILocation(line: 1815, column: 30, scope: !9480)
!9485 = !DILocation(line: 1815, column: 6, scope: !9480)
!9486 = !DILocation(line: 1816, column: 20, scope: !9480)
!9487 = !DILocation(line: 1816, column: 7, scope: !9480)
!9488 = !DILocation(line: 1816, column: 18, scope: !9480)
!9489 = !DILocation(line: 1817, column: 20, scope: !9480)
!9490 = !DILocation(line: 1817, column: 7, scope: !9480)
!9491 = !DILocation(line: 1817, column: 18, scope: !9480)
!9492 = !DILocation(line: 1818, column: 24, scope: !9480)
!9493 = !DILocation(line: 1818, column: 7, scope: !9480)
!9494 = !DILocation(line: 1818, column: 22, scope: !9480)
!9495 = !DILocation(line: 1819, column: 42, scope: !9480)
!9496 = !DILocation(line: 1820, column: 6, scope: !9480)
!9497 = !DILocation(line: 1822, column: 43, scope: !9446)
!9498 = !DILocation(line: 1823, column: 9, scope: !9446)
!9499 = !DILocation(line: 1830, column: 23, scope: !9500)
!9500 = distinct !DILexicalBlock(scope: !9440, file: !3, line: 1829, column: 7)
!9501 = !DILocation(line: 1830, column: 10, scope: !9500)
!9502 = !DILocation(line: 1830, column: 21, scope: !9500)
!9503 = !DILocation(line: 1831, column: 23, scope: !9500)
!9504 = !DILocation(line: 1831, column: 10, scope: !9500)
!9505 = !DILocation(line: 1831, column: 21, scope: !9500)
!9506 = !DILocation(line: 1832, column: 27, scope: !9500)
!9507 = !DILocation(line: 1832, column: 10, scope: !9500)
!9508 = !DILocation(line: 1832, column: 25, scope: !9500)
!9509 = !DILocation(line: 1833, column: 45, scope: !9500)
!9510 = !DILocation(line: 1834, column: 9, scope: !9500)
!9511 = !DILocation(line: 1845, column: 19, scope: !9512)
!9512 = distinct !DILexicalBlock(scope: !9435, file: !3, line: 1839, column: 3)
!9513 = !DILocation(line: 1845, column: 6, scope: !9512)
!9514 = !DILocation(line: 1845, column: 17, scope: !9512)
!9515 = !DILocation(line: 1846, column: 19, scope: !9512)
!9516 = !DILocation(line: 1846, column: 6, scope: !9512)
!9517 = !DILocation(line: 1846, column: 17, scope: !9512)
!9518 = !DILocation(line: 1847, column: 23, scope: !9512)
!9519 = !DILocation(line: 1847, column: 6, scope: !9512)
!9520 = !DILocation(line: 1847, column: 21, scope: !9512)
!9521 = !DILocation(line: 1848, column: 41, scope: !9512)
!9522 = !DILocation(line: 1849, column: 5, scope: !9512)
!9523 = !DILocation(line: 1855, column: 28, scope: !9524)
!9524 = distinct !DILexicalBlock(scope: !9525, file: !3, line: 1855, column: 8)
!9525 = distinct !DILexicalBlock(scope: !9405, file: !3, line: 1854, column: 2)
!9526 = !DILocation(line: 1855, column: 9, scope: !9524)
!9527 = !DILocation(line: 1855, column: 8, scope: !9525)
!9528 = !DILocation(line: 1857, column: 12, scope: !9529)
!9529 = distinct !DILexicalBlock(scope: !9530, file: !3, line: 1857, column: 12)
!9530 = distinct !DILexicalBlock(scope: !9524, file: !3, line: 1856, column: 6)
!9531 = !DILocation(line: 1857, column: 22, scope: !9529)
!9532 = !DILocation(line: 1857, column: 26, scope: !9529)
!9533 = !DILocation(line: 1857, column: 37, scope: !9529)
!9534 = !DILocation(line: 1857, column: 12, scope: !9530)
!9535 = !DILocation(line: 1858, column: 12, scope: !9529)
!9536 = !DILocation(line: 1858, column: 3, scope: !9529)
!9537 = !DILocation(line: 1860, column: 22, scope: !9530)
!9538 = !DILocation(line: 1860, column: 9, scope: !9530)
!9539 = !DILocation(line: 1860, column: 20, scope: !9530)
!9540 = !DILocation(line: 1861, column: 22, scope: !9530)
!9541 = !DILocation(line: 1861, column: 9, scope: !9530)
!9542 = !DILocation(line: 1861, column: 20, scope: !9530)
!9543 = !DILocation(line: 1862, column: 26, scope: !9530)
!9544 = !DILocation(line: 1862, column: 9, scope: !9530)
!9545 = !DILocation(line: 1862, column: 24, scope: !9530)
!9546 = !DILocation(line: 1863, column: 46, scope: !9530)
!9547 = !DILocation(line: 1864, column: 8, scope: !9530)
!9548 = !DILocation(line: 1868, column: 12, scope: !9549)
!9549 = distinct !DILexicalBlock(scope: !9550, file: !3, line: 1868, column: 12)
!9550 = distinct !DILexicalBlock(scope: !9524, file: !3, line: 1867, column: 6)
!9551 = !DILocation(line: 1868, column: 19, scope: !9549)
!9552 = !DILocation(line: 1868, column: 12, scope: !9550)
!9553 = !DILocation(line: 1874, column: 30, scope: !9554)
!9554 = distinct !DILexicalBlock(scope: !9555, file: !3, line: 1874, column: 9)
!9555 = distinct !DILexicalBlock(scope: !9549, file: !3, line: 1869, column: 3)
!9556 = !DILocation(line: 1874, column: 53, scope: !9554)
!9557 = !DILocation(line: 1874, column: 9, scope: !9554)
!9558 = !DILocation(line: 1874, column: 9, scope: !9555)
!9559 = !DILocalVariable(name: "numiter", scope: !9560, file: !3, line: 1876, type: !867)
!9560 = distinct !DILexicalBlock(scope: !9554, file: !3, line: 1875, column: 7)
!9561 = !DILocation(line: 1876, column: 23, scope: !9560)
!9562 = !DILocalVariable(name: "loop", scope: !9560, file: !3, line: 1877, type: !1357)
!9563 = !DILocation(line: 1877, column: 22, scope: !9560)
!9564 = !DILocation(line: 1877, column: 45, scope: !9560)
!9565 = !DILocation(line: 1877, column: 29, scope: !9560)
!9566 = !DILocation(line: 1879, column: 54, scope: !9560)
!9567 = !DILocation(line: 1879, column: 39, scope: !9560)
!9568 = !DILocation(line: 1879, column: 23, scope: !9560)
!9569 = !DILocation(line: 1879, column: 10, scope: !9560)
!9570 = !DILocation(line: 1879, column: 21, scope: !9560)
!9571 = !DILocation(line: 1880, column: 15, scope: !9560)
!9572 = !DILocation(line: 1880, column: 13, scope: !9560)
!9573 = !DILocation(line: 1882, column: 54, scope: !9560)
!9574 = !DILocation(line: 1882, column: 39, scope: !9560)
!9575 = !DILocation(line: 1882, column: 23, scope: !9560)
!9576 = !DILocation(line: 1882, column: 10, scope: !9560)
!9577 = !DILocation(line: 1882, column: 21, scope: !9560)
!9578 = !DILocation(line: 1883, column: 27, scope: !9560)
!9579 = !DILocation(line: 1883, column: 10, scope: !9560)
!9580 = !DILocation(line: 1883, column: 25, scope: !9560)
!9581 = !DILocation(line: 1887, column: 50, scope: !9560)
!9582 = !DILocation(line: 1887, column: 19, scope: !9560)
!9583 = !DILocation(line: 1887, column: 17, scope: !9560)
!9584 = !DILocation(line: 1889, column: 13, scope: !9585)
!9585 = distinct !DILexicalBlock(scope: !9560, file: !3, line: 1889, column: 13)
!9586 = !DILocation(line: 1889, column: 21, scope: !9585)
!9587 = !DILocation(line: 1890, column: 6, scope: !9585)
!9588 = !DILocation(line: 1890, column: 27, scope: !9585)
!9589 = !DILocation(line: 1890, column: 32, scope: !9585)
!9590 = !DILocation(line: 1890, column: 9, scope: !9585)
!9591 = !DILocation(line: 1890, column: 41, scope: !9585)
!9592 = !DILocation(line: 1889, column: 13, scope: !9560)
!9593 = !DILocation(line: 1892, column: 31, scope: !9594)
!9594 = distinct !DILexicalBlock(scope: !9585, file: !3, line: 1891, column: 4)
!9595 = !DILocation(line: 1892, column: 30, scope: !9594)
!9596 = !DILocation(line: 1892, column: 6, scope: !9594)
!9597 = !DILocation(line: 1893, column: 31, scope: !9594)
!9598 = !DILocation(line: 1893, column: 30, scope: !9594)
!9599 = !DILocation(line: 1893, column: 6, scope: !9594)
!9600 = !DILocation(line: 1894, column: 20, scope: !9594)
!9601 = !DILocation(line: 1894, column: 7, scope: !9594)
!9602 = !DILocation(line: 1894, column: 18, scope: !9594)
!9603 = !DILocation(line: 1895, column: 20, scope: !9594)
!9604 = !DILocation(line: 1895, column: 7, scope: !9594)
!9605 = !DILocation(line: 1895, column: 18, scope: !9594)
!9606 = !DILocation(line: 1896, column: 24, scope: !9594)
!9607 = !DILocation(line: 1896, column: 7, scope: !9594)
!9608 = !DILocation(line: 1896, column: 22, scope: !9594)
!9609 = !DILocation(line: 1897, column: 42, scope: !9594)
!9610 = !DILocation(line: 1898, column: 6, scope: !9594)
!9611 = !DILocation(line: 1900, column: 43, scope: !9560)
!9612 = !DILocation(line: 1901, column: 9, scope: !9560)
!9613 = !DILocation(line: 1908, column: 23, scope: !9614)
!9614 = distinct !DILexicalBlock(scope: !9554, file: !3, line: 1907, column: 7)
!9615 = !DILocation(line: 1908, column: 10, scope: !9614)
!9616 = !DILocation(line: 1908, column: 21, scope: !9614)
!9617 = !DILocation(line: 1909, column: 23, scope: !9614)
!9618 = !DILocation(line: 1909, column: 10, scope: !9614)
!9619 = !DILocation(line: 1909, column: 21, scope: !9614)
!9620 = !DILocation(line: 1910, column: 27, scope: !9614)
!9621 = !DILocation(line: 1910, column: 10, scope: !9614)
!9622 = !DILocation(line: 1910, column: 25, scope: !9614)
!9623 = !DILocation(line: 1911, column: 45, scope: !9614)
!9624 = !DILocation(line: 1912, column: 9, scope: !9614)
!9625 = !DILocation(line: 1922, column: 19, scope: !9626)
!9626 = distinct !DILexicalBlock(scope: !9549, file: !3, line: 1916, column: 3)
!9627 = !DILocation(line: 1922, column: 6, scope: !9626)
!9628 = !DILocation(line: 1922, column: 17, scope: !9626)
!9629 = !DILocation(line: 1923, column: 19, scope: !9626)
!9630 = !DILocation(line: 1923, column: 6, scope: !9626)
!9631 = !DILocation(line: 1923, column: 17, scope: !9626)
!9632 = !DILocation(line: 1924, column: 23, scope: !9626)
!9633 = !DILocation(line: 1924, column: 6, scope: !9626)
!9634 = !DILocation(line: 1924, column: 21, scope: !9626)
!9635 = !DILocation(line: 1925, column: 41, scope: !9626)
!9636 = !DILocation(line: 1926, column: 5, scope: !9626)
!9637 = !DILocation(line: 1931, column: 1, scope: !9338)
!9638 = distinct !DISubprogram(name: "analyze_subscript_affine_affine", scope: !3, file: !3, line: 2170, type: !8810, scopeLine: 2175, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!9639 = !DILocalVariable(name: "chrec_a", arg: 1, scope: !9638, file: !3, line: 2170, type: !811)
!9640 = !DILocation(line: 2170, column: 39, scope: !9638)
!9641 = !DILocalVariable(name: "chrec_b", arg: 2, scope: !9638, file: !3, line: 2171, type: !811)
!9642 = !DILocation(line: 2171, column: 11, scope: !9638)
!9643 = !DILocalVariable(name: "overlaps_a", arg: 3, scope: !9638, file: !3, line: 2172, type: !8535)
!9644 = !DILocation(line: 2172, column: 26, scope: !9638)
!9645 = !DILocalVariable(name: "overlaps_b", arg: 4, scope: !9638, file: !3, line: 2173, type: !8535)
!9646 = !DILocation(line: 2173, column: 26, scope: !9638)
!9647 = !DILocalVariable(name: "last_conflicts", arg: 5, scope: !9638, file: !3, line: 2174, type: !1176)
!9648 = !DILocation(line: 2174, column: 12, scope: !9638)
!9649 = !DILocalVariable(name: "nb_vars_a", scope: !9638, file: !3, line: 2176, type: !7)
!9650 = !DILocation(line: 2176, column: 12, scope: !9638)
!9651 = !DILocalVariable(name: "nb_vars_b", scope: !9638, file: !3, line: 2176, type: !7)
!9652 = !DILocation(line: 2176, column: 23, scope: !9638)
!9653 = !DILocalVariable(name: "dim", scope: !9638, file: !3, line: 2176, type: !7)
!9654 = !DILocation(line: 2176, column: 34, scope: !9638)
!9655 = !DILocalVariable(name: "init_a", scope: !9638, file: !3, line: 2177, type: !867)
!9656 = !DILocation(line: 2177, column: 17, scope: !9638)
!9657 = !DILocalVariable(name: "init_b", scope: !9638, file: !3, line: 2177, type: !867)
!9658 = !DILocation(line: 2177, column: 25, scope: !9638)
!9659 = !DILocalVariable(name: "gamma", scope: !9638, file: !3, line: 2177, type: !867)
!9660 = !DILocation(line: 2177, column: 33, scope: !9638)
!9661 = !DILocalVariable(name: "gcd_alpha_beta", scope: !9638, file: !3, line: 2177, type: !867)
!9662 = !DILocation(line: 2177, column: 40, scope: !9638)
!9663 = !DILocalVariable(name: "A", scope: !9638, file: !3, line: 2178, type: !9664)
!9664 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_matrix", file: !2216, line: 42, baseType: !2980)
!9665 = !DILocation(line: 2178, column: 17, scope: !9638)
!9666 = !DILocalVariable(name: "U", scope: !9638, file: !3, line: 2178, type: !9664)
!9667 = !DILocation(line: 2178, column: 20, scope: !9638)
!9668 = !DILocalVariable(name: "S", scope: !9638, file: !3, line: 2178, type: !9664)
!9669 = !DILocation(line: 2178, column: 23, scope: !9638)
!9670 = !DILocation(line: 2180, column: 24, scope: !9671)
!9671 = distinct !DILexicalBlock(scope: !9638, file: !3, line: 2180, column: 7)
!9672 = !DILocation(line: 2180, column: 33, scope: !9671)
!9673 = !DILocation(line: 2180, column: 7, scope: !9671)
!9674 = !DILocation(line: 2180, column: 7, scope: !9638)
!9675 = !DILocation(line: 2184, column: 52, scope: !9676)
!9676 = distinct !DILexicalBlock(scope: !9671, file: !3, line: 2181, column: 5)
!9677 = !DILocation(line: 2184, column: 37, scope: !9676)
!9678 = !DILocation(line: 2184, column: 21, scope: !9676)
!9679 = !DILocation(line: 2184, column: 8, scope: !9676)
!9680 = !DILocation(line: 2184, column: 19, scope: !9676)
!9681 = !DILocation(line: 2185, column: 52, scope: !9676)
!9682 = !DILocation(line: 2185, column: 37, scope: !9676)
!9683 = !DILocation(line: 2185, column: 21, scope: !9676)
!9684 = !DILocation(line: 2185, column: 8, scope: !9676)
!9685 = !DILocation(line: 2185, column: 19, scope: !9676)
!9686 = !DILocation(line: 2186, column: 25, scope: !9676)
!9687 = !DILocation(line: 2186, column: 8, scope: !9676)
!9688 = !DILocation(line: 2186, column: 23, scope: !9676)
!9689 = !DILocation(line: 2187, column: 7, scope: !9676)
!9690 = !DILocation(line: 2189, column: 7, scope: !9691)
!9691 = distinct !DILexicalBlock(scope: !9638, file: !3, line: 2189, column: 7)
!9692 = !DILocation(line: 2189, column: 17, scope: !9691)
!9693 = !DILocation(line: 2189, column: 21, scope: !9691)
!9694 = !DILocation(line: 2189, column: 32, scope: !9691)
!9695 = !DILocation(line: 2189, column: 7, scope: !9638)
!9696 = !DILocation(line: 2190, column: 14, scope: !9691)
!9697 = !DILocation(line: 2190, column: 5, scope: !9691)
!9698 = !DILocation(line: 2203, column: 33, scope: !9638)
!9699 = !DILocation(line: 2203, column: 15, scope: !9638)
!9700 = !DILocation(line: 2203, column: 13, scope: !9638)
!9701 = !DILocation(line: 2204, column: 33, scope: !9638)
!9702 = !DILocation(line: 2204, column: 15, scope: !9638)
!9703 = !DILocation(line: 2204, column: 13, scope: !9638)
!9704 = !DILocation(line: 2206, column: 9, scope: !9638)
!9705 = !DILocation(line: 2206, column: 21, scope: !9638)
!9706 = !DILocation(line: 2206, column: 19, scope: !9638)
!9707 = !DILocation(line: 2206, column: 7, scope: !9638)
!9708 = !DILocation(line: 2207, column: 26, scope: !9638)
!9709 = !DILocation(line: 2207, column: 31, scope: !9638)
!9710 = !DILocation(line: 2207, column: 7, scope: !9638)
!9711 = !DILocation(line: 2207, column: 5, scope: !9638)
!9712 = !DILocation(line: 2208, column: 26, scope: !9638)
!9713 = !DILocation(line: 2208, column: 7, scope: !9638)
!9714 = !DILocation(line: 2208, column: 5, scope: !9638)
!9715 = !DILocation(line: 2209, column: 26, scope: !9638)
!9716 = !DILocation(line: 2209, column: 7, scope: !9638)
!9717 = !DILocation(line: 2209, column: 5, scope: !9638)
!9718 = !DILocation(line: 2211, column: 48, scope: !9638)
!9719 = !DILocation(line: 2211, column: 51, scope: !9638)
!9720 = !DILocation(line: 2211, column: 27, scope: !9638)
!9721 = !DILocation(line: 2211, column: 12, scope: !9638)
!9722 = !DILocation(line: 2211, column: 10, scope: !9638)
!9723 = !DILocation(line: 2212, column: 48, scope: !9638)
!9724 = !DILocation(line: 2212, column: 51, scope: !9638)
!9725 = !DILocation(line: 2212, column: 60, scope: !9638)
!9726 = !DILocation(line: 2212, column: 27, scope: !9638)
!9727 = !DILocation(line: 2212, column: 12, scope: !9638)
!9728 = !DILocation(line: 2212, column: 10, scope: !9638)
!9729 = !DILocation(line: 2213, column: 11, scope: !9638)
!9730 = !DILocation(line: 2213, column: 20, scope: !9638)
!9731 = !DILocation(line: 2213, column: 18, scope: !9638)
!9732 = !DILocation(line: 2213, column: 9, scope: !9638)
!9733 = !DILocation(line: 2223, column: 7, scope: !9734)
!9734 = distinct !DILexicalBlock(scope: !9638, file: !3, line: 2223, column: 7)
!9735 = !DILocation(line: 2223, column: 13, scope: !9734)
!9736 = !DILocation(line: 2223, column: 7, scope: !9638)
!9737 = !DILocation(line: 2225, column: 11, scope: !9738)
!9738 = distinct !DILexicalBlock(scope: !9739, file: !3, line: 2225, column: 11)
!9739 = distinct !DILexicalBlock(scope: !9734, file: !3, line: 2224, column: 5)
!9740 = !DILocation(line: 2225, column: 21, scope: !9738)
!9741 = !DILocation(line: 2225, column: 26, scope: !9738)
!9742 = !DILocation(line: 2225, column: 29, scope: !9738)
!9743 = !DILocation(line: 2225, column: 39, scope: !9738)
!9744 = !DILocation(line: 2225, column: 11, scope: !9739)
!9745 = !DILocalVariable(name: "step_a", scope: !9746, file: !3, line: 2227, type: !867)
!9746 = distinct !DILexicalBlock(scope: !9738, file: !3, line: 2226, column: 2)
!9747 = !DILocation(line: 2227, column: 18, scope: !9746)
!9748 = !DILocalVariable(name: "step_b", scope: !9746, file: !3, line: 2227, type: !867)
!9749 = !DILocation(line: 2227, column: 26, scope: !9746)
!9750 = !DILocalVariable(name: "niter", scope: !9746, file: !3, line: 2228, type: !867)
!9751 = !DILocation(line: 2228, column: 18, scope: !9746)
!9752 = !DILocalVariable(name: "niter_a", scope: !9746, file: !3, line: 2228, type: !867)
!9753 = !DILocation(line: 2228, column: 25, scope: !9746)
!9754 = !DILocalVariable(name: "niter_b", scope: !9746, file: !3, line: 2228, type: !867)
!9755 = !DILocation(line: 2228, column: 34, scope: !9746)
!9756 = !DILocalVariable(name: "ova", scope: !9746, file: !3, line: 2229, type: !2274)
!9757 = !DILocation(line: 2229, column: 14, scope: !9746)
!9758 = !DILocalVariable(name: "ovb", scope: !9746, file: !3, line: 2229, type: !2274)
!9759 = !DILocation(line: 2229, column: 19, scope: !9746)
!9760 = !DILocation(line: 2231, column: 61, scope: !9746)
!9761 = !DILocation(line: 2231, column: 45, scope: !9746)
!9762 = !DILocation(line: 2231, column: 14, scope: !9746)
!9763 = !DILocation(line: 2231, column: 12, scope: !9746)
!9764 = !DILocation(line: 2233, column: 61, scope: !9746)
!9765 = !DILocation(line: 2233, column: 45, scope: !9746)
!9766 = !DILocation(line: 2233, column: 14, scope: !9746)
!9767 = !DILocation(line: 2233, column: 12, scope: !9746)
!9768 = !DILocation(line: 2235, column: 12, scope: !9746)
!9769 = !DILocation(line: 2235, column: 10, scope: !9746)
!9770 = !DILocation(line: 2236, column: 28, scope: !9746)
!9771 = !DILocation(line: 2236, column: 13, scope: !9746)
!9772 = !DILocation(line: 2236, column: 11, scope: !9746)
!9773 = !DILocation(line: 2237, column: 28, scope: !9746)
!9774 = !DILocation(line: 2237, column: 13, scope: !9746)
!9775 = !DILocation(line: 2237, column: 11, scope: !9746)
!9776 = !DILocation(line: 2239, column: 45, scope: !9746)
!9777 = !DILocation(line: 2239, column: 52, scope: !9746)
!9778 = !DILocation(line: 2239, column: 60, scope: !9746)
!9779 = !DILocation(line: 2241, column: 10, scope: !9746)
!9780 = !DILocation(line: 2239, column: 4, scope: !9746)
!9781 = !DILocation(line: 2242, column: 34, scope: !9746)
!9782 = !DILocation(line: 2242, column: 18, scope: !9746)
!9783 = !DILocation(line: 2242, column: 5, scope: !9746)
!9784 = !DILocation(line: 2242, column: 16, scope: !9746)
!9785 = !DILocation(line: 2243, column: 34, scope: !9746)
!9786 = !DILocation(line: 2243, column: 18, scope: !9746)
!9787 = !DILocation(line: 2243, column: 5, scope: !9746)
!9788 = !DILocation(line: 2243, column: 16, scope: !9746)
!9789 = !DILocation(line: 2244, column: 2, scope: !9746)
!9790 = !DILocation(line: 2246, column: 16, scope: !9791)
!9791 = distinct !DILexicalBlock(scope: !9738, file: !3, line: 2246, column: 16)
!9792 = !DILocation(line: 2246, column: 26, scope: !9791)
!9793 = !DILocation(line: 2246, column: 31, scope: !9791)
!9794 = !DILocation(line: 2246, column: 34, scope: !9791)
!9795 = !DILocation(line: 2246, column: 44, scope: !9791)
!9796 = !DILocation(line: 2246, column: 16, scope: !9738)
!9797 = !DILocation(line: 2248, column: 5, scope: !9791)
!9798 = !DILocation(line: 2248, column: 14, scope: !9791)
!9799 = !DILocation(line: 2248, column: 23, scope: !9791)
!9800 = !DILocation(line: 2248, column: 35, scope: !9791)
!9801 = !DILocation(line: 2248, column: 47, scope: !9791)
!9802 = !DILocation(line: 2247, column: 2, scope: !9791)
!9803 = !DILocation(line: 2250, column: 16, scope: !9804)
!9804 = distinct !DILexicalBlock(scope: !9791, file: !3, line: 2250, column: 16)
!9805 = !DILocation(line: 2250, column: 26, scope: !9804)
!9806 = !DILocation(line: 2250, column: 31, scope: !9804)
!9807 = !DILocation(line: 2250, column: 34, scope: !9804)
!9808 = !DILocation(line: 2250, column: 44, scope: !9804)
!9809 = !DILocation(line: 2250, column: 16, scope: !9791)
!9810 = !DILocation(line: 2252, column: 5, scope: !9804)
!9811 = !DILocation(line: 2252, column: 14, scope: !9804)
!9812 = !DILocation(line: 2252, column: 23, scope: !9804)
!9813 = !DILocation(line: 2252, column: 35, scope: !9804)
!9814 = !DILocation(line: 2252, column: 47, scope: !9804)
!9815 = !DILocation(line: 2251, column: 2, scope: !9804)
!9816 = !DILocation(line: 2256, column: 8, scope: !9817)
!9817 = distinct !DILexicalBlock(scope: !9818, file: !3, line: 2256, column: 8)
!9818 = distinct !DILexicalBlock(scope: !9804, file: !3, line: 2255, column: 2)
!9819 = !DILocation(line: 2256, column: 18, scope: !9817)
!9820 = !DILocation(line: 2256, column: 22, scope: !9817)
!9821 = !DILocation(line: 2256, column: 33, scope: !9817)
!9822 = !DILocation(line: 2256, column: 8, scope: !9818)
!9823 = !DILocation(line: 2257, column: 15, scope: !9817)
!9824 = !DILocation(line: 2257, column: 6, scope: !9817)
!9825 = !DILocation(line: 2258, column: 18, scope: !9818)
!9826 = !DILocation(line: 2258, column: 5, scope: !9818)
!9827 = !DILocation(line: 2258, column: 16, scope: !9818)
!9828 = !DILocation(line: 2259, column: 18, scope: !9818)
!9829 = !DILocation(line: 2259, column: 5, scope: !9818)
!9830 = !DILocation(line: 2259, column: 16, scope: !9818)
!9831 = !DILocation(line: 2260, column: 22, scope: !9818)
!9832 = !DILocation(line: 2260, column: 5, scope: !9818)
!9833 = !DILocation(line: 2260, column: 20, scope: !9818)
!9834 = !DILocation(line: 2262, column: 7, scope: !9739)
!9835 = !DILocation(line: 2266, column: 32, scope: !9638)
!9836 = !DILocation(line: 2266, column: 35, scope: !9638)
!9837 = !DILocation(line: 2266, column: 43, scope: !9638)
!9838 = !DILocation(line: 2266, column: 46, scope: !9638)
!9839 = !DILocation(line: 2266, column: 3, scope: !9638)
!9840 = !DILocation(line: 2268, column: 7, scope: !9841)
!9841 = distinct !DILexicalBlock(scope: !9638, file: !3, line: 2268, column: 7)
!9842 = !DILocation(line: 2268, column: 15, scope: !9841)
!9843 = !DILocation(line: 2268, column: 7, scope: !9638)
!9844 = !DILocation(line: 2270, column: 7, scope: !9845)
!9845 = distinct !DILexicalBlock(scope: !9841, file: !3, line: 2269, column: 5)
!9846 = !DILocation(line: 2270, column: 15, scope: !9845)
!9847 = !DILocation(line: 2271, column: 33, scope: !9845)
!9848 = !DILocation(line: 2271, column: 36, scope: !9845)
!9849 = !DILocation(line: 2271, column: 7, scope: !9845)
!9850 = !DILocation(line: 2272, column: 5, scope: !9845)
!9851 = !DILocation(line: 2273, column: 20, scope: !9638)
!9852 = !DILocation(line: 2273, column: 18, scope: !9638)
!9853 = !DILocation(line: 2278, column: 7, scope: !9854)
!9854 = distinct !DILexicalBlock(scope: !9638, file: !3, line: 2278, column: 7)
!9855 = !DILocation(line: 2278, column: 22, scope: !9854)
!9856 = !DILocation(line: 2278, column: 7, scope: !9638)
!9857 = !DILocation(line: 2280, column: 21, scope: !9858)
!9858 = distinct !DILexicalBlock(scope: !9854, file: !3, line: 2279, column: 5)
!9859 = !DILocation(line: 2280, column: 8, scope: !9858)
!9860 = !DILocation(line: 2280, column: 19, scope: !9858)
!9861 = !DILocation(line: 2281, column: 21, scope: !9858)
!9862 = !DILocation(line: 2281, column: 8, scope: !9858)
!9863 = !DILocation(line: 2281, column: 19, scope: !9858)
!9864 = !DILocation(line: 2282, column: 25, scope: !9858)
!9865 = !DILocation(line: 2282, column: 8, scope: !9858)
!9866 = !DILocation(line: 2282, column: 23, scope: !9858)
!9867 = !DILocation(line: 2283, column: 7, scope: !9858)
!9868 = !DILocation(line: 2287, column: 23, scope: !9869)
!9869 = distinct !DILexicalBlock(scope: !9638, file: !3, line: 2287, column: 7)
!9870 = !DILocation(line: 2287, column: 39, scope: !9869)
!9871 = !DILocation(line: 2287, column: 8, scope: !9869)
!9872 = !DILocation(line: 2287, column: 7, scope: !9638)
!9873 = !DILocation(line: 2291, column: 21, scope: !9874)
!9874 = distinct !DILexicalBlock(scope: !9869, file: !3, line: 2288, column: 5)
!9875 = !DILocation(line: 2291, column: 8, scope: !9874)
!9876 = !DILocation(line: 2291, column: 19, scope: !9874)
!9877 = !DILocation(line: 2292, column: 21, scope: !9874)
!9878 = !DILocation(line: 2292, column: 8, scope: !9874)
!9879 = !DILocation(line: 2292, column: 19, scope: !9874)
!9880 = !DILocation(line: 2293, column: 25, scope: !9874)
!9881 = !DILocation(line: 2293, column: 8, scope: !9874)
!9882 = !DILocation(line: 2293, column: 23, scope: !9874)
!9883 = !DILocation(line: 2294, column: 5, scope: !9874)
!9884 = !DILocation(line: 2297, column: 12, scope: !9885)
!9885 = distinct !DILexicalBlock(scope: !9869, file: !3, line: 2297, column: 12)
!9886 = !DILocation(line: 2297, column: 22, scope: !9885)
!9887 = !DILocation(line: 2297, column: 27, scope: !9885)
!9888 = !DILocation(line: 2297, column: 30, scope: !9885)
!9889 = !DILocation(line: 2297, column: 40, scope: !9885)
!9890 = !DILocation(line: 2297, column: 12, scope: !9869)
!9891 = !DILocation(line: 2300, column: 13, scope: !9892)
!9892 = distinct !DILexicalBlock(scope: !9893, file: !3, line: 2300, column: 11)
!9893 = distinct !DILexicalBlock(scope: !9885, file: !3, line: 2298, column: 5)
!9894 = !DILocation(line: 2300, column: 21, scope: !9892)
!9895 = !DILocation(line: 2300, column: 25, scope: !9892)
!9896 = !DILocation(line: 2300, column: 29, scope: !9892)
!9897 = !DILocation(line: 2300, column: 28, scope: !9892)
!9898 = !DILocation(line: 2300, column: 37, scope: !9892)
!9899 = !DILocation(line: 2301, column: 5, scope: !9892)
!9900 = !DILocation(line: 2301, column: 9, scope: !9892)
!9901 = !DILocation(line: 2301, column: 17, scope: !9892)
!9902 = !DILocation(line: 2301, column: 21, scope: !9892)
!9903 = !DILocation(line: 2301, column: 25, scope: !9892)
!9904 = !DILocation(line: 2301, column: 24, scope: !9892)
!9905 = !DILocation(line: 2301, column: 33, scope: !9892)
!9906 = !DILocation(line: 2300, column: 11, scope: !9893)
!9907 = !DILocalVariable(name: "i0", scope: !9908, file: !3, line: 2319, type: !867)
!9908 = distinct !DILexicalBlock(scope: !9892, file: !3, line: 2302, column: 2)
!9909 = !DILocation(line: 2319, column: 24, scope: !9908)
!9910 = !DILocalVariable(name: "j0", scope: !9908, file: !3, line: 2319, type: !867)
!9911 = !DILocation(line: 2319, column: 28, scope: !9908)
!9912 = !DILocalVariable(name: "i1", scope: !9908, file: !3, line: 2319, type: !867)
!9913 = !DILocation(line: 2319, column: 32, scope: !9908)
!9914 = !DILocalVariable(name: "j1", scope: !9908, file: !3, line: 2319, type: !867)
!9915 = !DILocation(line: 2319, column: 36, scope: !9908)
!9916 = !DILocation(line: 2321, column: 9, scope: !9908)
!9917 = !DILocation(line: 2321, column: 19, scope: !9908)
!9918 = !DILocation(line: 2321, column: 17, scope: !9908)
!9919 = !DILocation(line: 2321, column: 27, scope: !9908)
!9920 = !DILocation(line: 2321, column: 25, scope: !9908)
!9921 = !DILocation(line: 2321, column: 7, scope: !9908)
!9922 = !DILocation(line: 2322, column: 9, scope: !9908)
!9923 = !DILocation(line: 2322, column: 19, scope: !9908)
!9924 = !DILocation(line: 2322, column: 17, scope: !9908)
!9925 = !DILocation(line: 2322, column: 27, scope: !9908)
!9926 = !DILocation(line: 2322, column: 25, scope: !9908)
!9927 = !DILocation(line: 2322, column: 7, scope: !9908)
!9928 = !DILocation(line: 2323, column: 9, scope: !9908)
!9929 = !DILocation(line: 2323, column: 7, scope: !9908)
!9930 = !DILocation(line: 2324, column: 9, scope: !9908)
!9931 = !DILocation(line: 2324, column: 7, scope: !9908)
!9932 = !DILocation(line: 2326, column: 9, scope: !9933)
!9933 = distinct !DILexicalBlock(scope: !9908, file: !3, line: 2326, column: 8)
!9934 = !DILocation(line: 2326, column: 12, scope: !9933)
!9935 = !DILocation(line: 2326, column: 17, scope: !9933)
!9936 = !DILocation(line: 2326, column: 20, scope: !9933)
!9937 = !DILocation(line: 2326, column: 23, scope: !9933)
!9938 = !DILocation(line: 2327, column: 8, scope: !9933)
!9939 = !DILocation(line: 2327, column: 12, scope: !9933)
!9940 = !DILocation(line: 2327, column: 15, scope: !9933)
!9941 = !DILocation(line: 2327, column: 20, scope: !9933)
!9942 = !DILocation(line: 2327, column: 23, scope: !9933)
!9943 = !DILocation(line: 2327, column: 26, scope: !9933)
!9944 = !DILocation(line: 2326, column: 8, scope: !9908)
!9945 = !DILocation(line: 2333, column: 22, scope: !9946)
!9946 = distinct !DILexicalBlock(scope: !9933, file: !3, line: 2328, column: 6)
!9947 = !DILocation(line: 2333, column: 9, scope: !9946)
!9948 = !DILocation(line: 2333, column: 20, scope: !9946)
!9949 = !DILocation(line: 2334, column: 22, scope: !9946)
!9950 = !DILocation(line: 2334, column: 9, scope: !9946)
!9951 = !DILocation(line: 2334, column: 20, scope: !9946)
!9952 = !DILocation(line: 2335, column: 26, scope: !9946)
!9953 = !DILocation(line: 2335, column: 9, scope: !9946)
!9954 = !DILocation(line: 2335, column: 24, scope: !9946)
!9955 = !DILocation(line: 2336, column: 8, scope: !9946)
!9956 = !DILocation(line: 2339, column: 8, scope: !9957)
!9957 = distinct !DILexicalBlock(scope: !9908, file: !3, line: 2339, column: 8)
!9958 = !DILocation(line: 2339, column: 11, scope: !9957)
!9959 = !DILocation(line: 2339, column: 15, scope: !9957)
!9960 = !DILocation(line: 2339, column: 18, scope: !9957)
!9961 = !DILocation(line: 2339, column: 21, scope: !9957)
!9962 = !DILocation(line: 2339, column: 8, scope: !9908)
!9963 = !DILocalVariable(name: "niter_a", scope: !9964, file: !3, line: 2341, type: !867)
!9964 = distinct !DILexicalBlock(scope: !9957, file: !3, line: 2340, column: 6)
!9965 = !DILocation(line: 2341, column: 22, scope: !9964)
!9966 = !DILocation(line: 2342, column: 20, scope: !9964)
!9967 = !DILocation(line: 2342, column: 4, scope: !9964)
!9968 = !DILocation(line: 2341, column: 32, scope: !9964)
!9969 = !DILocalVariable(name: "niter_b", scope: !9964, file: !3, line: 2343, type: !867)
!9970 = !DILocation(line: 2343, column: 22, scope: !9964)
!9971 = !DILocation(line: 2344, column: 20, scope: !9964)
!9972 = !DILocation(line: 2344, column: 4, scope: !9964)
!9973 = !DILocation(line: 2343, column: 32, scope: !9964)
!9974 = !DILocalVariable(name: "niter", scope: !9964, file: !3, line: 2345, type: !867)
!9975 = !DILocation(line: 2345, column: 22, scope: !9964)
!9976 = !DILocation(line: 2345, column: 30, scope: !9964)
!9977 = !DILocalVariable(name: "tau1", scope: !9964, file: !3, line: 2349, type: !867)
!9978 = !DILocation(line: 2349, column: 22, scope: !9964)
!9979 = !DILocation(line: 2349, column: 29, scope: !9964)
!9980 = !DILocalVariable(name: "x0", scope: !9964, file: !3, line: 2351, type: !867)
!9981 = !DILocation(line: 2351, column: 22, scope: !9964)
!9982 = !DILocation(line: 2351, column: 27, scope: !9964)
!9983 = !DILocation(line: 2351, column: 32, scope: !9964)
!9984 = !DILocation(line: 2351, column: 30, scope: !9964)
!9985 = !DILocation(line: 2351, column: 39, scope: !9964)
!9986 = !DILocation(line: 2351, column: 37, scope: !9964)
!9987 = !DILocalVariable(name: "y0", scope: !9964, file: !3, line: 2352, type: !867)
!9988 = !DILocation(line: 2352, column: 22, scope: !9964)
!9989 = !DILocation(line: 2352, column: 27, scope: !9964)
!9990 = !DILocation(line: 2352, column: 32, scope: !9964)
!9991 = !DILocation(line: 2352, column: 30, scope: !9964)
!9992 = !DILocation(line: 2352, column: 39, scope: !9964)
!9993 = !DILocation(line: 2352, column: 37, scope: !9964)
!9994 = !DILocalVariable(name: "min_multiple", scope: !9964, file: !3, line: 2357, type: !867)
!9995 = !DILocation(line: 2357, column: 22, scope: !9964)
!9996 = !DILocation(line: 2357, column: 37, scope: !9964)
!9997 = !DILocalVariable(name: "x1", scope: !9964, file: !3, line: 2358, type: !867)
!9998 = !DILocation(line: 2358, column: 22, scope: !9964)
!9999 = !DILocation(line: 2358, column: 27, scope: !9964)
!10000 = !DILocation(line: 2358, column: 32, scope: !9964)
!10001 = !DILocation(line: 2358, column: 37, scope: !9964)
!10002 = !DILocation(line: 2358, column: 35, scope: !9964)
!10003 = !DILocation(line: 2358, column: 30, scope: !9964)
!10004 = !DILocalVariable(name: "y1", scope: !9964, file: !3, line: 2359, type: !867)
!10005 = !DILocation(line: 2359, column: 22, scope: !9964)
!10006 = !DILocation(line: 2359, column: 27, scope: !9964)
!10007 = !DILocation(line: 2359, column: 32, scope: !9964)
!10008 = !DILocation(line: 2359, column: 37, scope: !9964)
!10009 = !DILocation(line: 2359, column: 35, scope: !9964)
!10010 = !DILocation(line: 2359, column: 30, scope: !9964)
!10011 = !DILocation(line: 2361, column: 12, scope: !10012)
!10012 = distinct !DILexicalBlock(scope: !9964, file: !3, line: 2361, column: 12)
!10013 = !DILocation(line: 2361, column: 18, scope: !10012)
!10014 = !DILocation(line: 2361, column: 12, scope: !9964)
!10015 = !DILocalVariable(name: "tau2", scope: !10016, file: !3, line: 2363, type: !867)
!10016 = distinct !DILexicalBlock(scope: !10012, file: !3, line: 2362, column: 3)
!10017 = !DILocation(line: 2363, column: 19, scope: !10016)
!10018 = !DILocation(line: 2363, column: 26, scope: !10016)
!10019 = !DILocalVariable(name: "last_conflict", scope: !10016, file: !3, line: 2365, type: !867)
!10020 = !DILocation(line: 2365, column: 19, scope: !10016)
!10021 = !DILocation(line: 2365, column: 35, scope: !10016)
!10022 = !DILocation(line: 2365, column: 43, scope: !10016)
!10023 = !DILocation(line: 2365, column: 48, scope: !10016)
!10024 = !DILocation(line: 2365, column: 46, scope: !10016)
!10025 = !DILocation(line: 2365, column: 52, scope: !10016)
!10026 = !DILocation(line: 2365, column: 51, scope: !10016)
!10027 = !DILocation(line: 2365, column: 40, scope: !10016)
!10028 = !DILocation(line: 2369, column: 9, scope: !10029)
!10029 = distinct !DILexicalBlock(scope: !10016, file: !3, line: 2369, column: 9)
!10030 = !DILocation(line: 2369, column: 15, scope: !10029)
!10031 = !DILocation(line: 2369, column: 12, scope: !10029)
!10032 = !DILocation(line: 2369, column: 21, scope: !10029)
!10033 = !DILocation(line: 2369, column: 24, scope: !10029)
!10034 = !DILocation(line: 2369, column: 30, scope: !10029)
!10035 = !DILocation(line: 2369, column: 27, scope: !10029)
!10036 = !DILocation(line: 2369, column: 9, scope: !10016)
!10037 = !DILocation(line: 2371, column: 23, scope: !10038)
!10038 = distinct !DILexicalBlock(scope: !10029, file: !3, line: 2370, column: 7)
!10039 = !DILocation(line: 2371, column: 10, scope: !10038)
!10040 = !DILocation(line: 2371, column: 21, scope: !10038)
!10041 = !DILocation(line: 2372, column: 23, scope: !10038)
!10042 = !DILocation(line: 2372, column: 10, scope: !10038)
!10043 = !DILocation(line: 2372, column: 21, scope: !10038)
!10044 = !DILocation(line: 2373, column: 27, scope: !10038)
!10045 = !DILocation(line: 2373, column: 10, scope: !10038)
!10046 = !DILocation(line: 2373, column: 25, scope: !10038)
!10047 = !DILocation(line: 2374, column: 9, scope: !10038)
!10048 = !DILocation(line: 2377, column: 51, scope: !10029)
!10049 = !DILocation(line: 2377, column: 25, scope: !10029)
!10050 = !DILocation(line: 2377, column: 8, scope: !10029)
!10051 = !DILocation(line: 2377, column: 23, scope: !10029)
!10052 = !DILocation(line: 2378, column: 3, scope: !10016)
!10053 = !DILocation(line: 2380, column: 21, scope: !10012)
!10054 = !DILocation(line: 2380, column: 4, scope: !10012)
!10055 = !DILocation(line: 2380, column: 19, scope: !10012)
!10056 = !DILocation(line: 2384, column: 55, scope: !9964)
!10057 = !DILocation(line: 2384, column: 29, scope: !9964)
!10058 = !DILocation(line: 2386, column: 34, scope: !9964)
!10059 = !DILocation(line: 2386, column: 8, scope: !9964)
!10060 = !DILocation(line: 2384, column: 11, scope: !9964)
!10061 = !DILocation(line: 2383, column: 5, scope: !9964)
!10062 = !DILocation(line: 2382, column: 9, scope: !9964)
!10063 = !DILocation(line: 2383, column: 3, scope: !9964)
!10064 = !DILocation(line: 2389, column: 55, scope: !9964)
!10065 = !DILocation(line: 2389, column: 29, scope: !9964)
!10066 = !DILocation(line: 2391, column: 34, scope: !9964)
!10067 = !DILocation(line: 2391, column: 8, scope: !9964)
!10068 = !DILocation(line: 2389, column: 11, scope: !9964)
!10069 = !DILocation(line: 2388, column: 5, scope: !9964)
!10070 = !DILocation(line: 2387, column: 9, scope: !9964)
!10071 = !DILocation(line: 2388, column: 3, scope: !9964)
!10072 = !DILocation(line: 2392, column: 6, scope: !9964)
!10073 = !DILocation(line: 2397, column: 12, scope: !10074)
!10074 = distinct !DILexicalBlock(scope: !10075, file: !3, line: 2397, column: 12)
!10075 = distinct !DILexicalBlock(scope: !9957, file: !3, line: 2394, column: 6)
!10076 = !DILocation(line: 2397, column: 22, scope: !10074)
!10077 = !DILocation(line: 2397, column: 26, scope: !10074)
!10078 = !DILocation(line: 2397, column: 37, scope: !10074)
!10079 = !DILocation(line: 2397, column: 12, scope: !10075)
!10080 = !DILocation(line: 2398, column: 12, scope: !10074)
!10081 = !DILocation(line: 2398, column: 3, scope: !10074)
!10082 = !DILocation(line: 2399, column: 22, scope: !10075)
!10083 = !DILocation(line: 2399, column: 9, scope: !10075)
!10084 = !DILocation(line: 2399, column: 20, scope: !10075)
!10085 = !DILocation(line: 2400, column: 22, scope: !10075)
!10086 = !DILocation(line: 2400, column: 9, scope: !10075)
!10087 = !DILocation(line: 2400, column: 20, scope: !10075)
!10088 = !DILocation(line: 2401, column: 26, scope: !10075)
!10089 = !DILocation(line: 2401, column: 9, scope: !10075)
!10090 = !DILocation(line: 2401, column: 24, scope: !10075)
!10091 = !DILocation(line: 2403, column: 2, scope: !9908)
!10092 = !DILocation(line: 2406, column: 8, scope: !10093)
!10093 = distinct !DILexicalBlock(scope: !10094, file: !3, line: 2406, column: 8)
!10094 = distinct !DILexicalBlock(scope: !9892, file: !3, line: 2405, column: 2)
!10095 = !DILocation(line: 2406, column: 18, scope: !10093)
!10096 = !DILocation(line: 2406, column: 22, scope: !10093)
!10097 = !DILocation(line: 2406, column: 33, scope: !10093)
!10098 = !DILocation(line: 2406, column: 8, scope: !10094)
!10099 = !DILocation(line: 2407, column: 15, scope: !10093)
!10100 = !DILocation(line: 2407, column: 6, scope: !10093)
!10101 = !DILocation(line: 2408, column: 18, scope: !10094)
!10102 = !DILocation(line: 2408, column: 5, scope: !10094)
!10103 = !DILocation(line: 2408, column: 16, scope: !10094)
!10104 = !DILocation(line: 2409, column: 18, scope: !10094)
!10105 = !DILocation(line: 2409, column: 5, scope: !10094)
!10106 = !DILocation(line: 2409, column: 16, scope: !10094)
!10107 = !DILocation(line: 2410, column: 22, scope: !10094)
!10108 = !DILocation(line: 2410, column: 5, scope: !10094)
!10109 = !DILocation(line: 2410, column: 20, scope: !10094)
!10110 = !DILocation(line: 2412, column: 5, scope: !9893)
!10111 = !DILocation(line: 2415, column: 11, scope: !10112)
!10112 = distinct !DILexicalBlock(scope: !10113, file: !3, line: 2415, column: 11)
!10113 = distinct !DILexicalBlock(scope: !9885, file: !3, line: 2414, column: 5)
!10114 = !DILocation(line: 2415, column: 21, scope: !10112)
!10115 = !DILocation(line: 2415, column: 25, scope: !10112)
!10116 = !DILocation(line: 2415, column: 36, scope: !10112)
!10117 = !DILocation(line: 2415, column: 11, scope: !10113)
!10118 = !DILocation(line: 2416, column: 11, scope: !10112)
!10119 = !DILocation(line: 2416, column: 2, scope: !10112)
!10120 = !DILocation(line: 2417, column: 21, scope: !10113)
!10121 = !DILocation(line: 2417, column: 8, scope: !10113)
!10122 = !DILocation(line: 2417, column: 19, scope: !10113)
!10123 = !DILocation(line: 2418, column: 21, scope: !10113)
!10124 = !DILocation(line: 2418, column: 8, scope: !10113)
!10125 = !DILocation(line: 2418, column: 19, scope: !10113)
!10126 = !DILocation(line: 2419, column: 25, scope: !10113)
!10127 = !DILocation(line: 2419, column: 8, scope: !10113)
!10128 = !DILocation(line: 2419, column: 23, scope: !10113)
!10129 = !DILocation(line: 2287, column: 44, scope: !9869)
!10130 = !DILabel(scope: !9638, name: "end_analyze_subs_aa", file: !3, line: 2422)
!10131 = !DILocation(line: 2422, column: 1, scope: !9638)
!10132 = !DILocation(line: 2423, column: 7, scope: !10133)
!10133 = distinct !DILexicalBlock(scope: !9638, file: !3, line: 2423, column: 7)
!10134 = !DILocation(line: 2423, column: 17, scope: !10133)
!10135 = !DILocation(line: 2423, column: 21, scope: !10133)
!10136 = !DILocation(line: 2423, column: 32, scope: !10133)
!10137 = !DILocation(line: 2423, column: 7, scope: !9638)
!10138 = !DILocation(line: 2425, column: 16, scope: !10139)
!10139 = distinct !DILexicalBlock(scope: !10133, file: !3, line: 2424, column: 5)
!10140 = !DILocation(line: 2425, column: 7, scope: !10139)
!10141 = !DILocation(line: 2426, column: 31, scope: !10139)
!10142 = !DILocation(line: 2426, column: 43, scope: !10139)
!10143 = !DILocation(line: 2426, column: 42, scope: !10139)
!10144 = !DILocation(line: 2426, column: 7, scope: !10139)
!10145 = !DILocation(line: 2427, column: 16, scope: !10139)
!10146 = !DILocation(line: 2427, column: 7, scope: !10139)
!10147 = !DILocation(line: 2428, column: 31, scope: !10139)
!10148 = !DILocation(line: 2428, column: 43, scope: !10139)
!10149 = !DILocation(line: 2428, column: 42, scope: !10139)
!10150 = !DILocation(line: 2428, column: 7, scope: !10139)
!10151 = !DILocation(line: 2429, column: 16, scope: !10139)
!10152 = !DILocation(line: 2429, column: 7, scope: !10139)
!10153 = !DILocation(line: 2430, column: 16, scope: !10139)
!10154 = !DILocation(line: 2430, column: 7, scope: !10139)
!10155 = !DILocation(line: 2431, column: 5, scope: !10139)
!10156 = !DILocation(line: 2432, column: 1, scope: !9638)
!10157 = distinct !DISubprogram(name: "can_use_analyze_subscript_affine_affine", scope: !3, file: !3, line: 2449, type: !10158, scopeLine: 2450, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10158 = !DISubroutineType(types: !10159)
!10159 = !{!931, !1176, !1176}
!10160 = !DILocalVariable(name: "chrec_a", arg: 1, scope: !10157, file: !3, line: 2449, type: !1176)
!10161 = !DILocation(line: 2449, column: 48, scope: !10157)
!10162 = !DILocalVariable(name: "chrec_b", arg: 2, scope: !10157, file: !3, line: 2449, type: !1176)
!10163 = !DILocation(line: 2449, column: 63, scope: !10157)
!10164 = !DILocalVariable(name: "diff", scope: !10157, file: !3, line: 2451, type: !811)
!10165 = !DILocation(line: 2451, column: 8, scope: !10157)
!10166 = !DILocalVariable(name: "type", scope: !10157, file: !3, line: 2451, type: !811)
!10167 = !DILocation(line: 2451, column: 14, scope: !10157)
!10168 = !DILocalVariable(name: "left_a", scope: !10157, file: !3, line: 2451, type: !811)
!10169 = !DILocation(line: 2451, column: 20, scope: !10157)
!10170 = !DILocalVariable(name: "left_b", scope: !10157, file: !3, line: 2451, type: !811)
!10171 = !DILocation(line: 2451, column: 28, scope: !10157)
!10172 = !DILocalVariable(name: "right_b", scope: !10157, file: !3, line: 2451, type: !811)
!10173 = !DILocation(line: 2451, column: 36, scope: !10157)
!10174 = !DILocation(line: 2453, column: 31, scope: !10175)
!10175 = distinct !DILexicalBlock(scope: !10157, file: !3, line: 2453, column: 7)
!10176 = !DILocation(line: 2453, column: 7, scope: !10175)
!10177 = !DILocation(line: 2454, column: 7, scope: !10175)
!10178 = !DILocation(line: 2454, column: 34, scope: !10175)
!10179 = !DILocation(line: 2454, column: 10, scope: !10175)
!10180 = !DILocation(line: 2453, column: 7, scope: !10157)
!10181 = !DILocation(line: 2456, column: 5, scope: !10175)
!10182 = !DILocation(line: 2458, column: 23, scope: !10157)
!10183 = !DILocation(line: 2458, column: 22, scope: !10157)
!10184 = !DILocation(line: 2458, column: 10, scope: !10157)
!10185 = !DILocation(line: 2458, column: 8, scope: !10157)
!10186 = !DILocation(line: 2459, column: 12, scope: !10157)
!10187 = !DILocation(line: 2459, column: 10, scope: !10157)
!10188 = !DILocation(line: 2460, column: 27, scope: !10157)
!10189 = !DILocation(line: 2460, column: 33, scope: !10157)
!10190 = !DILocation(line: 2460, column: 12, scope: !10157)
!10191 = !DILocation(line: 2460, column: 10, scope: !10157)
!10192 = !DILocation(line: 2461, column: 28, scope: !10157)
!10193 = !DILocation(line: 2461, column: 34, scope: !10157)
!10194 = !DILocation(line: 2461, column: 42, scope: !10157)
!10195 = !DILocation(line: 2461, column: 10, scope: !10157)
!10196 = !DILocation(line: 2461, column: 8, scope: !10157)
!10197 = !DILocation(line: 2463, column: 42, scope: !10198)
!10198 = distinct !DILexicalBlock(scope: !10157, file: !3, line: 2463, column: 7)
!10199 = !DILocation(line: 2463, column: 8, scope: !10198)
!10200 = !DILocation(line: 2463, column: 7, scope: !10157)
!10201 = !DILocation(line: 2464, column: 5, scope: !10198)
!10202 = !DILocation(line: 2466, column: 7, scope: !10203)
!10203 = distinct !DILexicalBlock(scope: !10157, file: !3, line: 2466, column: 7)
!10204 = !DILocation(line: 2466, column: 17, scope: !10203)
!10205 = !DILocation(line: 2466, column: 21, scope: !10203)
!10206 = !DILocation(line: 2466, column: 32, scope: !10203)
!10207 = !DILocation(line: 2466, column: 7, scope: !10157)
!10208 = !DILocation(line: 2467, column: 14, scope: !10203)
!10209 = !DILocation(line: 2467, column: 5, scope: !10203)
!10210 = !DILocation(line: 2469, column: 38, scope: !10157)
!10211 = !DILocation(line: 2470, column: 10, scope: !10157)
!10212 = !DILocation(line: 2470, column: 16, scope: !10157)
!10213 = !DILocation(line: 2469, column: 14, scope: !10157)
!10214 = !DILocation(line: 2469, column: 4, scope: !10157)
!10215 = !DILocation(line: 2469, column: 12, scope: !10157)
!10216 = !DILocation(line: 2471, column: 28, scope: !10157)
!10217 = !DILocation(line: 2471, column: 34, scope: !10157)
!10218 = !DILocation(line: 2471, column: 13, scope: !10157)
!10219 = !DILocation(line: 2471, column: 11, scope: !10157)
!10220 = !DILocation(line: 2472, column: 38, scope: !10157)
!10221 = !DILocation(line: 2473, column: 25, scope: !10157)
!10222 = !DILocation(line: 2473, column: 10, scope: !10157)
!10223 = !DILocation(line: 2474, column: 10, scope: !10157)
!10224 = !DILocation(line: 2472, column: 14, scope: !10157)
!10225 = !DILocation(line: 2472, column: 4, scope: !10157)
!10226 = !DILocation(line: 2472, column: 12, scope: !10157)
!10227 = !DILocation(line: 2475, column: 3, scope: !10157)
!10228 = !DILocation(line: 2476, column: 1, scope: !10157)
!10229 = distinct !DISubprogram(name: "tree_fold_divides_p", scope: !3, file: !3, line: 132, type: !8795, scopeLine: 133, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10230 = !DILocalVariable(name: "a", arg: 1, scope: !10229, file: !3, line: 132, type: !3295)
!10231 = !DILocation(line: 132, column: 33, scope: !10229)
!10232 = !DILocalVariable(name: "b", arg: 2, scope: !10229, file: !3, line: 132, type: !3295)
!10233 = !DILocation(line: 132, column: 47, scope: !10229)
!10234 = !DILocation(line: 134, column: 3, scope: !10229)
!10235 = !DILocation(line: 135, column: 3, scope: !10229)
!10236 = !DILocation(line: 136, column: 58, scope: !10229)
!10237 = !DILocation(line: 136, column: 61, scope: !10229)
!10238 = !DILocation(line: 136, column: 25, scope: !10229)
!10239 = !DILocation(line: 136, column: 10, scope: !10229)
!10240 = !DILocation(line: 136, column: 3, scope: !10229)
!10241 = distinct !DISubprogram(name: "get_chrec_loop", scope: !7469, file: !7469, line: 65, type: !10242, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10242 = !DISubroutineType(types: !10243)
!10243 = !{!1357, !3295}
!10244 = !DILocalVariable(name: "chrec", arg: 1, scope: !10241, file: !7469, line: 65, type: !3295)
!10245 = !DILocation(line: 65, column: 28, scope: !10241)
!10246 = !DILocation(line: 67, column: 20, scope: !10241)
!10247 = !DILocation(line: 67, column: 10, scope: !10241)
!10248 = !DILocation(line: 67, column: 3, scope: !10241)
!10249 = distinct !DISubprogram(name: "get_loop", scope: !146, file: !146, line: 417, type: !10250, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10250 = !DISubroutineType(types: !10251)
!10251 = !{!1357, !7}
!10252 = !DILocalVariable(name: "num", arg: 1, scope: !10249, file: !146, line: 417, type: !7)
!10253 = !DILocation(line: 417, column: 20, scope: !10249)
!10254 = !DILocation(line: 419, column: 10, scope: !10249)
!10255 = !DILocation(line: 419, column: 3, scope: !10249)
!10256 = distinct !DISubprogram(name: "initialize_matrix_A", scope: !3, file: !3, line: 1937, type: !10257, scopeLine: 1938, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10257 = !DISubroutineType(types: !10258)
!10258 = !{!811, !9664, !811, !7, !908}
!10259 = !DILocalVariable(name: "A", arg: 1, scope: !10256, file: !3, line: 1937, type: !9664)
!10260 = !DILocation(line: 1937, column: 36, scope: !10256)
!10261 = !DILocalVariable(name: "chrec", arg: 2, scope: !10256, file: !3, line: 1937, type: !811)
!10262 = !DILocation(line: 1937, column: 44, scope: !10256)
!10263 = !DILocalVariable(name: "index", arg: 3, scope: !10256, file: !3, line: 1937, type: !7)
!10264 = !DILocation(line: 1937, column: 60, scope: !10256)
!10265 = !DILocalVariable(name: "mult", arg: 4, scope: !10256, file: !3, line: 1937, type: !908)
!10266 = !DILocation(line: 1937, column: 71, scope: !10256)
!10267 = !DILocation(line: 1939, column: 3, scope: !10256)
!10268 = !DILocation(line: 1941, column: 11, scope: !10256)
!10269 = !DILocation(line: 1941, column: 3, scope: !10256)
!10270 = !DILocation(line: 1944, column: 7, scope: !10271)
!10271 = distinct !DILexicalBlock(scope: !10256, file: !3, line: 1942, column: 5)
!10272 = !DILocation(line: 1946, column: 21, scope: !10271)
!10273 = !DILocation(line: 1946, column: 43, scope: !10271)
!10274 = !DILocation(line: 1946, column: 28, scope: !10271)
!10275 = !DILocation(line: 1946, column: 26, scope: !10271)
!10276 = !DILocation(line: 1946, column: 7, scope: !10271)
!10277 = !DILocation(line: 1946, column: 9, scope: !10271)
!10278 = !DILocation(line: 1946, column: 19, scope: !10271)
!10279 = !DILocation(line: 1947, column: 35, scope: !10271)
!10280 = !DILocation(line: 1947, column: 38, scope: !10271)
!10281 = !DILocation(line: 1947, column: 58, scope: !10271)
!10282 = !DILocation(line: 1947, column: 64, scope: !10271)
!10283 = !DILocation(line: 1947, column: 69, scope: !10271)
!10284 = !DILocation(line: 1947, column: 14, scope: !10271)
!10285 = !DILocation(line: 1947, column: 7, scope: !10271)
!10286 = !DILocalVariable(name: "op0", scope: !10287, file: !3, line: 1953, type: !811)
!10287 = distinct !DILexicalBlock(scope: !10271, file: !3, line: 1952, column: 7)
!10288 = !DILocation(line: 1953, column: 7, scope: !10287)
!10289 = !DILocation(line: 1953, column: 34, scope: !10287)
!10290 = !DILocation(line: 1953, column: 37, scope: !10287)
!10291 = !DILocation(line: 1953, column: 62, scope: !10287)
!10292 = !DILocation(line: 1953, column: 69, scope: !10287)
!10293 = !DILocation(line: 1953, column: 13, scope: !10287)
!10294 = !DILocalVariable(name: "op1", scope: !10287, file: !3, line: 1954, type: !811)
!10295 = !DILocation(line: 1954, column: 7, scope: !10287)
!10296 = !DILocation(line: 1954, column: 34, scope: !10287)
!10297 = !DILocation(line: 1954, column: 37, scope: !10287)
!10298 = !DILocation(line: 1954, column: 62, scope: !10287)
!10299 = !DILocation(line: 1954, column: 69, scope: !10287)
!10300 = !DILocation(line: 1954, column: 13, scope: !10287)
!10301 = !DILocation(line: 1956, column: 24, scope: !10287)
!10302 = !DILocation(line: 1956, column: 55, scope: !10287)
!10303 = !DILocation(line: 1956, column: 43, scope: !10287)
!10304 = !DILocation(line: 1956, column: 63, scope: !10287)
!10305 = !DILocation(line: 1956, column: 68, scope: !10287)
!10306 = !DILocation(line: 1956, column: 9, scope: !10287)
!10307 = !DILocation(line: 1956, column: 2, scope: !10287)
!10308 = !DILocalVariable(name: "op", scope: !10309, file: !3, line: 1961, type: !811)
!10309 = distinct !DILexicalBlock(scope: !10271, file: !3, line: 1960, column: 7)
!10310 = !DILocation(line: 1961, column: 7, scope: !10309)
!10311 = !DILocation(line: 1961, column: 33, scope: !10309)
!10312 = !DILocation(line: 1961, column: 36, scope: !10309)
!10313 = !DILocation(line: 1961, column: 61, scope: !10309)
!10314 = !DILocation(line: 1961, column: 68, scope: !10309)
!10315 = !DILocation(line: 1961, column: 12, scope: !10309)
!10316 = !DILocation(line: 1962, column: 36, scope: !10309)
!10317 = !DILocation(line: 1962, column: 24, scope: !10309)
!10318 = !DILocation(line: 1962, column: 44, scope: !10309)
!10319 = !DILocation(line: 1962, column: 9, scope: !10309)
!10320 = !DILocation(line: 1962, column: 2, scope: !10309)
!10321 = !DILocalVariable(name: "op", scope: !10322, file: !3, line: 1968, type: !811)
!10322 = distinct !DILexicalBlock(scope: !10271, file: !3, line: 1966, column: 7)
!10323 = !DILocation(line: 1968, column: 7, scope: !10322)
!10324 = !DILocation(line: 1968, column: 33, scope: !10322)
!10325 = !DILocation(line: 1968, column: 36, scope: !10322)
!10326 = !DILocation(line: 1968, column: 61, scope: !10322)
!10327 = !DILocation(line: 1968, column: 68, scope: !10322)
!10328 = !DILocation(line: 1968, column: 12, scope: !10322)
!10329 = !DILocation(line: 1969, column: 48, scope: !10322)
!10330 = !DILocation(line: 1969, column: 36, scope: !10322)
!10331 = !DILocation(line: 1970, column: 25, scope: !10322)
!10332 = !DILocation(line: 1970, column: 10, scope: !10322)
!10333 = !DILocation(line: 1970, column: 49, scope: !10322)
!10334 = !DILocation(line: 1969, column: 9, scope: !10322)
!10335 = !DILocation(line: 1969, column: 2, scope: !10322)
!10336 = !DILocation(line: 1974, column: 14, scope: !10271)
!10337 = !DILocation(line: 1974, column: 7, scope: !10271)
!10338 = !DILocation(line: 1977, column: 7, scope: !10271)
!10339 = !DILocation(line: 1978, column: 7, scope: !10271)
!10340 = !DILocation(line: 1980, column: 1, scope: !10256)
!10341 = distinct !DISubprogram(name: "compute_overlap_steps_for_affine_univar", scope: !3, file: !3, line: 1992, type: !10342, scopeLine: 1996, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10342 = !DISubroutineType(types: !10343)
!10343 = !{null, !908, !908, !908, !10344, !10344, !1176, !908}
!10344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2274, size: 64)
!10345 = !DILocalVariable(name: "niter", arg: 1, scope: !10341, file: !3, line: 1992, type: !908)
!10346 = !DILocation(line: 1992, column: 46, scope: !10341)
!10347 = !DILocalVariable(name: "step_a", arg: 2, scope: !10341, file: !3, line: 1992, type: !908)
!10348 = !DILocation(line: 1992, column: 57, scope: !10341)
!10349 = !DILocalVariable(name: "step_b", arg: 3, scope: !10341, file: !3, line: 1992, type: !908)
!10350 = !DILocation(line: 1992, column: 69, scope: !10341)
!10351 = !DILocalVariable(name: "overlaps_a", arg: 4, scope: !10341, file: !3, line: 1993, type: !10344)
!10352 = !DILocation(line: 1993, column: 18, scope: !10341)
!10353 = !DILocalVariable(name: "overlaps_b", arg: 5, scope: !10341, file: !3, line: 1994, type: !10344)
!10354 = !DILocation(line: 1994, column: 18, scope: !10341)
!10355 = !DILocalVariable(name: "last_conflicts", arg: 6, scope: !10341, file: !3, line: 1995, type: !1176)
!10356 = !DILocation(line: 1995, column: 13, scope: !10341)
!10357 = !DILocalVariable(name: "dim", arg: 7, scope: !10341, file: !3, line: 1995, type: !908)
!10358 = !DILocation(line: 1995, column: 33, scope: !10341)
!10359 = !DILocation(line: 1997, column: 9, scope: !10360)
!10360 = distinct !DILexicalBlock(scope: !10341, file: !3, line: 1997, column: 7)
!10361 = !DILocation(line: 1997, column: 16, scope: !10360)
!10362 = !DILocation(line: 1997, column: 20, scope: !10360)
!10363 = !DILocation(line: 1997, column: 23, scope: !10360)
!10364 = !DILocation(line: 1997, column: 30, scope: !10360)
!10365 = !DILocation(line: 1998, column: 8, scope: !10360)
!10366 = !DILocation(line: 1998, column: 12, scope: !10360)
!10367 = !DILocation(line: 1998, column: 19, scope: !10360)
!10368 = !DILocation(line: 1998, column: 23, scope: !10360)
!10369 = !DILocation(line: 1998, column: 26, scope: !10360)
!10370 = !DILocation(line: 1998, column: 33, scope: !10360)
!10371 = !DILocation(line: 1997, column: 7, scope: !10341)
!10372 = !DILocalVariable(name: "step_overlaps_a", scope: !10373, file: !3, line: 2000, type: !908)
!10373 = distinct !DILexicalBlock(scope: !10360, file: !3, line: 1999, column: 5)
!10374 = !DILocation(line: 2000, column: 11, scope: !10373)
!10375 = !DILocalVariable(name: "step_overlaps_b", scope: !10373, file: !3, line: 2000, type: !908)
!10376 = !DILocation(line: 2000, column: 28, scope: !10373)
!10377 = !DILocalVariable(name: "gcd_steps_a_b", scope: !10373, file: !3, line: 2001, type: !908)
!10378 = !DILocation(line: 2001, column: 11, scope: !10373)
!10379 = !DILocalVariable(name: "last_conflict", scope: !10373, file: !3, line: 2001, type: !908)
!10380 = !DILocation(line: 2001, column: 26, scope: !10373)
!10381 = !DILocalVariable(name: "tau2", scope: !10373, file: !3, line: 2001, type: !908)
!10382 = !DILocation(line: 2001, column: 41, scope: !10373)
!10383 = !DILocation(line: 2003, column: 28, scope: !10373)
!10384 = !DILocation(line: 2003, column: 36, scope: !10373)
!10385 = !DILocation(line: 2003, column: 23, scope: !10373)
!10386 = !DILocation(line: 2003, column: 21, scope: !10373)
!10387 = !DILocation(line: 2004, column: 25, scope: !10373)
!10388 = !DILocation(line: 2004, column: 34, scope: !10373)
!10389 = !DILocation(line: 2004, column: 32, scope: !10373)
!10390 = !DILocation(line: 2004, column: 23, scope: !10373)
!10391 = !DILocation(line: 2005, column: 25, scope: !10373)
!10392 = !DILocation(line: 2005, column: 34, scope: !10373)
!10393 = !DILocation(line: 2005, column: 32, scope: !10373)
!10394 = !DILocation(line: 2005, column: 23, scope: !10373)
!10395 = !DILocation(line: 2007, column: 11, scope: !10396)
!10396 = distinct !DILexicalBlock(scope: !10373, file: !3, line: 2007, column: 11)
!10397 = !DILocation(line: 2007, column: 17, scope: !10396)
!10398 = !DILocation(line: 2007, column: 11, scope: !10373)
!10399 = !DILocation(line: 2009, column: 11, scope: !10400)
!10400 = distinct !DILexicalBlock(scope: !10396, file: !3, line: 2008, column: 2)
!10401 = !DILocation(line: 2009, column: 9, scope: !10400)
!10402 = !DILocation(line: 2010, column: 11, scope: !10400)
!10403 = !DILocation(line: 2010, column: 9, scope: !10400)
!10404 = !DILocation(line: 2011, column: 20, scope: !10400)
!10405 = !DILocation(line: 2011, column: 18, scope: !10400)
!10406 = !DILocation(line: 2012, column: 48, scope: !10400)
!10407 = !DILocation(line: 2012, column: 22, scope: !10400)
!10408 = !DILocation(line: 2012, column: 5, scope: !10400)
!10409 = !DILocation(line: 2012, column: 20, scope: !10400)
!10410 = !DILocation(line: 2013, column: 2, scope: !10400)
!10411 = !DILocation(line: 2015, column: 20, scope: !10396)
!10412 = !DILocation(line: 2015, column: 3, scope: !10396)
!10413 = !DILocation(line: 2015, column: 18, scope: !10396)
!10414 = !DILocation(line: 2017, column: 39, scope: !10373)
!10415 = !DILocation(line: 2017, column: 58, scope: !10373)
!10416 = !DILocation(line: 2019, column: 12, scope: !10373)
!10417 = !DILocation(line: 2018, column: 11, scope: !10373)
!10418 = !DILocation(line: 2017, column: 21, scope: !10373)
!10419 = !DILocation(line: 2017, column: 8, scope: !10373)
!10420 = !DILocation(line: 2017, column: 19, scope: !10373)
!10421 = !DILocation(line: 2020, column: 39, scope: !10373)
!10422 = !DILocation(line: 2020, column: 58, scope: !10373)
!10423 = !DILocation(line: 2022, column: 12, scope: !10373)
!10424 = !DILocation(line: 2021, column: 11, scope: !10373)
!10425 = !DILocation(line: 2020, column: 21, scope: !10373)
!10426 = !DILocation(line: 2020, column: 8, scope: !10373)
!10427 = !DILocation(line: 2020, column: 19, scope: !10373)
!10428 = !DILocation(line: 2023, column: 5, scope: !10373)
!10429 = !DILocation(line: 2027, column: 36, scope: !10430)
!10430 = distinct !DILexicalBlock(scope: !10360, file: !3, line: 2026, column: 5)
!10431 = !DILocation(line: 2027, column: 21, scope: !10430)
!10432 = !DILocation(line: 2027, column: 8, scope: !10430)
!10433 = !DILocation(line: 2027, column: 19, scope: !10430)
!10434 = !DILocation(line: 2028, column: 36, scope: !10430)
!10435 = !DILocation(line: 2028, column: 21, scope: !10430)
!10436 = !DILocation(line: 2028, column: 8, scope: !10430)
!10437 = !DILocation(line: 2028, column: 19, scope: !10430)
!10438 = !DILocation(line: 2029, column: 25, scope: !10430)
!10439 = !DILocation(line: 2029, column: 8, scope: !10430)
!10440 = !DILocation(line: 2029, column: 23, scope: !10430)
!10441 = !DILocation(line: 2031, column: 1, scope: !10341)
!10442 = distinct !DISubprogram(name: "compute_overlap_steps_for_affine_1_2", scope: !3, file: !3, line: 2049, type: !8810, scopeLine: 2053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10443 = !DILocalVariable(name: "chrec_a", arg: 1, scope: !10442, file: !3, line: 2049, type: !811)
!10444 = !DILocation(line: 2049, column: 44, scope: !10442)
!10445 = !DILocalVariable(name: "chrec_b", arg: 2, scope: !10442, file: !3, line: 2049, type: !811)
!10446 = !DILocation(line: 2049, column: 58, scope: !10442)
!10447 = !DILocalVariable(name: "overlaps_a", arg: 3, scope: !10442, file: !3, line: 2050, type: !8535)
!10448 = !DILocation(line: 2050, column: 31, scope: !10442)
!10449 = !DILocalVariable(name: "overlaps_b", arg: 4, scope: !10442, file: !3, line: 2051, type: !8535)
!10450 = !DILocation(line: 2051, column: 31, scope: !10442)
!10451 = !DILocalVariable(name: "last_conflicts", arg: 5, scope: !10442, file: !3, line: 2052, type: !1176)
!10452 = !DILocation(line: 2052, column: 17, scope: !10442)
!10453 = !DILocalVariable(name: "xz_p", scope: !10442, file: !3, line: 2054, type: !931)
!10454 = !DILocation(line: 2054, column: 8, scope: !10442)
!10455 = !DILocalVariable(name: "yz_p", scope: !10442, file: !3, line: 2054, type: !931)
!10456 = !DILocation(line: 2054, column: 14, scope: !10442)
!10457 = !DILocalVariable(name: "xyz_p", scope: !10442, file: !3, line: 2054, type: !931)
!10458 = !DILocation(line: 2054, column: 20, scope: !10442)
!10459 = !DILocalVariable(name: "step_x", scope: !10442, file: !3, line: 2055, type: !908)
!10460 = !DILocation(line: 2055, column: 7, scope: !10442)
!10461 = !DILocalVariable(name: "step_y", scope: !10442, file: !3, line: 2055, type: !908)
!10462 = !DILocation(line: 2055, column: 15, scope: !10442)
!10463 = !DILocalVariable(name: "step_z", scope: !10442, file: !3, line: 2055, type: !908)
!10464 = !DILocation(line: 2055, column: 23, scope: !10442)
!10465 = !DILocalVariable(name: "niter_x", scope: !10442, file: !3, line: 2056, type: !867)
!10466 = !DILocation(line: 2056, column: 17, scope: !10442)
!10467 = !DILocalVariable(name: "niter_y", scope: !10442, file: !3, line: 2056, type: !867)
!10468 = !DILocation(line: 2056, column: 26, scope: !10442)
!10469 = !DILocalVariable(name: "niter_z", scope: !10442, file: !3, line: 2056, type: !867)
!10470 = !DILocation(line: 2056, column: 35, scope: !10442)
!10471 = !DILocalVariable(name: "niter", scope: !10442, file: !3, line: 2056, type: !867)
!10472 = !DILocation(line: 2056, column: 44, scope: !10442)
!10473 = !DILocalVariable(name: "overlaps_a_xz", scope: !10442, file: !3, line: 2057, type: !2274)
!10474 = !DILocation(line: 2057, column: 13, scope: !10442)
!10475 = !DILocalVariable(name: "overlaps_b_xz", scope: !10442, file: !3, line: 2057, type: !2274)
!10476 = !DILocation(line: 2057, column: 28, scope: !10442)
!10477 = !DILocalVariable(name: "overlaps_a_yz", scope: !10442, file: !3, line: 2058, type: !2274)
!10478 = !DILocation(line: 2058, column: 13, scope: !10442)
!10479 = !DILocalVariable(name: "overlaps_b_yz", scope: !10442, file: !3, line: 2058, type: !2274)
!10480 = !DILocation(line: 2058, column: 28, scope: !10442)
!10481 = !DILocalVariable(name: "overlaps_a_xyz", scope: !10442, file: !3, line: 2059, type: !2274)
!10482 = !DILocation(line: 2059, column: 13, scope: !10442)
!10483 = !DILocalVariable(name: "overlaps_b_xyz", scope: !10442, file: !3, line: 2059, type: !2274)
!10484 = !DILocation(line: 2059, column: 29, scope: !10442)
!10485 = !DILocalVariable(name: "ova1", scope: !10442, file: !3, line: 2060, type: !2274)
!10486 = !DILocation(line: 2060, column: 13, scope: !10442)
!10487 = !DILocalVariable(name: "ova2", scope: !10442, file: !3, line: 2060, type: !2274)
!10488 = !DILocation(line: 2060, column: 19, scope: !10442)
!10489 = !DILocalVariable(name: "ovb", scope: !10442, file: !3, line: 2060, type: !2274)
!10490 = !DILocation(line: 2060, column: 25, scope: !10442)
!10491 = !DILocalVariable(name: "last_conflicts_xz", scope: !10442, file: !3, line: 2061, type: !811)
!10492 = !DILocation(line: 2061, column: 8, scope: !10442)
!10493 = !DILocalVariable(name: "last_conflicts_yz", scope: !10442, file: !3, line: 2061, type: !811)
!10494 = !DILocation(line: 2061, column: 27, scope: !10442)
!10495 = !DILocalVariable(name: "last_conflicts_xyz", scope: !10442, file: !3, line: 2061, type: !811)
!10496 = !DILocation(line: 2061, column: 46, scope: !10442)
!10497 = !DILocation(line: 2063, column: 27, scope: !10442)
!10498 = !DILocation(line: 2063, column: 12, scope: !10442)
!10499 = !DILocation(line: 2063, column: 10, scope: !10442)
!10500 = !DILocation(line: 2064, column: 27, scope: !10442)
!10501 = !DILocation(line: 2064, column: 12, scope: !10442)
!10502 = !DILocation(line: 2064, column: 10, scope: !10442)
!10503 = !DILocation(line: 2065, column: 27, scope: !10442)
!10504 = !DILocation(line: 2065, column: 12, scope: !10442)
!10505 = !DILocation(line: 2065, column: 10, scope: !10442)
!10506 = !DILocation(line: 2068, column: 52, scope: !10442)
!10507 = !DILocation(line: 2068, column: 36, scope: !10442)
!10508 = !DILocation(line: 2068, column: 5, scope: !10442)
!10509 = !DILocation(line: 2067, column: 11, scope: !10442)
!10510 = !DILocation(line: 2070, column: 60, scope: !10442)
!10511 = !DILocation(line: 2070, column: 44, scope: !10442)
!10512 = !DILocation(line: 2070, column: 13, scope: !10442)
!10513 = !DILocation(line: 2070, column: 11, scope: !10442)
!10514 = !DILocation(line: 2071, column: 60, scope: !10442)
!10515 = !DILocation(line: 2071, column: 44, scope: !10442)
!10516 = !DILocation(line: 2071, column: 13, scope: !10442)
!10517 = !DILocation(line: 2071, column: 11, scope: !10442)
!10518 = !DILocation(line: 2073, column: 7, scope: !10519)
!10519 = distinct !DILexicalBlock(scope: !10442, file: !3, line: 2073, column: 7)
!10520 = !DILocation(line: 2073, column: 15, scope: !10519)
!10521 = !DILocation(line: 2073, column: 19, scope: !10519)
!10522 = !DILocation(line: 2073, column: 22, scope: !10519)
!10523 = !DILocation(line: 2073, column: 30, scope: !10519)
!10524 = !DILocation(line: 2073, column: 34, scope: !10519)
!10525 = !DILocation(line: 2073, column: 37, scope: !10519)
!10526 = !DILocation(line: 2073, column: 45, scope: !10519)
!10527 = !DILocation(line: 2073, column: 7, scope: !10442)
!10528 = !DILocation(line: 2075, column: 11, scope: !10529)
!10529 = distinct !DILexicalBlock(scope: !10530, file: !3, line: 2075, column: 11)
!10530 = distinct !DILexicalBlock(scope: !10519, file: !3, line: 2074, column: 5)
!10531 = !DILocation(line: 2075, column: 21, scope: !10529)
!10532 = !DILocation(line: 2075, column: 25, scope: !10529)
!10533 = !DILocation(line: 2075, column: 36, scope: !10529)
!10534 = !DILocation(line: 2075, column: 11, scope: !10530)
!10535 = !DILocation(line: 2076, column: 11, scope: !10529)
!10536 = !DILocation(line: 2076, column: 2, scope: !10529)
!10537 = !DILocation(line: 2078, column: 21, scope: !10530)
!10538 = !DILocation(line: 2078, column: 8, scope: !10530)
!10539 = !DILocation(line: 2078, column: 19, scope: !10530)
!10540 = !DILocation(line: 2079, column: 21, scope: !10530)
!10541 = !DILocation(line: 2079, column: 8, scope: !10530)
!10542 = !DILocation(line: 2079, column: 19, scope: !10530)
!10543 = !DILocation(line: 2080, column: 25, scope: !10530)
!10544 = !DILocation(line: 2080, column: 8, scope: !10530)
!10545 = !DILocation(line: 2080, column: 23, scope: !10530)
!10546 = !DILocation(line: 2081, column: 7, scope: !10530)
!10547 = !DILocation(line: 2084, column: 11, scope: !10442)
!10548 = !DILocation(line: 2084, column: 9, scope: !10442)
!10549 = !DILocation(line: 2085, column: 44, scope: !10442)
!10550 = !DILocation(line: 2085, column: 51, scope: !10442)
!10551 = !DILocation(line: 2085, column: 59, scope: !10442)
!10552 = !DILocation(line: 2085, column: 3, scope: !10442)
!10553 = !DILocation(line: 2089, column: 11, scope: !10442)
!10554 = !DILocation(line: 2089, column: 9, scope: !10442)
!10555 = !DILocation(line: 2090, column: 44, scope: !10442)
!10556 = !DILocation(line: 2090, column: 51, scope: !10442)
!10557 = !DILocation(line: 2090, column: 59, scope: !10442)
!10558 = !DILocation(line: 2090, column: 3, scope: !10442)
!10559 = !DILocation(line: 2094, column: 11, scope: !10442)
!10560 = !DILocation(line: 2094, column: 9, scope: !10442)
!10561 = !DILocation(line: 2095, column: 11, scope: !10442)
!10562 = !DILocation(line: 2095, column: 9, scope: !10442)
!10563 = !DILocation(line: 2096, column: 44, scope: !10442)
!10564 = !DILocation(line: 2096, column: 51, scope: !10442)
!10565 = !DILocation(line: 2096, column: 60, scope: !10442)
!10566 = !DILocation(line: 2096, column: 58, scope: !10442)
!10567 = !DILocation(line: 2096, column: 68, scope: !10442)
!10568 = !DILocation(line: 2096, column: 3, scope: !10442)
!10569 = !DILocation(line: 2101, column: 26, scope: !10442)
!10570 = !DILocation(line: 2101, column: 11, scope: !10442)
!10571 = !DILocation(line: 2101, column: 10, scope: !10442)
!10572 = !DILocation(line: 2101, column: 8, scope: !10442)
!10573 = !DILocation(line: 2102, column: 26, scope: !10442)
!10574 = !DILocation(line: 2102, column: 11, scope: !10442)
!10575 = !DILocation(line: 2102, column: 10, scope: !10442)
!10576 = !DILocation(line: 2102, column: 8, scope: !10442)
!10577 = !DILocation(line: 2103, column: 27, scope: !10442)
!10578 = !DILocation(line: 2103, column: 12, scope: !10442)
!10579 = !DILocation(line: 2103, column: 11, scope: !10442)
!10580 = !DILocation(line: 2103, column: 9, scope: !10442)
!10581 = !DILocation(line: 2105, column: 7, scope: !10582)
!10582 = distinct !DILexicalBlock(scope: !10442, file: !3, line: 2105, column: 7)
!10583 = !DILocation(line: 2105, column: 12, scope: !10582)
!10584 = !DILocation(line: 2105, column: 15, scope: !10582)
!10585 = !DILocation(line: 2105, column: 20, scope: !10582)
!10586 = !DILocation(line: 2105, column: 23, scope: !10582)
!10587 = !DILocation(line: 2105, column: 7, scope: !10442)
!10588 = !DILocation(line: 2107, column: 29, scope: !10589)
!10589 = distinct !DILexicalBlock(scope: !10582, file: !3, line: 2106, column: 5)
!10590 = !DILocation(line: 2107, column: 14, scope: !10589)
!10591 = !DILocation(line: 2107, column: 12, scope: !10589)
!10592 = !DILocation(line: 2108, column: 29, scope: !10589)
!10593 = !DILocation(line: 2108, column: 14, scope: !10589)
!10594 = !DILocation(line: 2108, column: 12, scope: !10589)
!10595 = !DILocation(line: 2109, column: 28, scope: !10589)
!10596 = !DILocation(line: 2109, column: 13, scope: !10589)
!10597 = !DILocation(line: 2109, column: 11, scope: !10589)
!10598 = !DILocation(line: 2110, column: 11, scope: !10599)
!10599 = distinct !DILexicalBlock(scope: !10589, file: !3, line: 2110, column: 11)
!10600 = !DILocation(line: 2110, column: 11, scope: !10589)
!10601 = !DILocalVariable(name: "t0", scope: !10602, file: !3, line: 2112, type: !2274)
!10602 = distinct !DILexicalBlock(scope: !10599, file: !3, line: 2111, column: 2)
!10603 = !DILocation(line: 2112, column: 14, scope: !10602)
!10604 = !DILocation(line: 2112, column: 19, scope: !10602)
!10605 = !DILocalVariable(name: "t2", scope: !10602, file: !3, line: 2113, type: !2274)
!10606 = !DILocation(line: 2113, column: 14, scope: !10602)
!10607 = !DILocation(line: 2113, column: 19, scope: !10602)
!10608 = !DILocation(line: 2115, column: 27, scope: !10602)
!10609 = !DILocation(line: 2115, column: 33, scope: !10602)
!10610 = !DILocation(line: 2115, column: 11, scope: !10602)
!10611 = !DILocation(line: 2115, column: 9, scope: !10602)
!10612 = !DILocation(line: 2116, column: 26, scope: !10602)
!10613 = !DILocation(line: 2116, column: 31, scope: !10602)
!10614 = !DILocation(line: 2116, column: 10, scope: !10602)
!10615 = !DILocation(line: 2116, column: 8, scope: !10602)
!10616 = !DILocation(line: 2117, column: 20, scope: !10602)
!10617 = !DILocation(line: 2117, column: 4, scope: !10602)
!10618 = !DILocation(line: 2118, column: 20, scope: !10602)
!10619 = !DILocation(line: 2118, column: 4, scope: !10602)
!10620 = !DILocation(line: 2119, column: 22, scope: !10602)
!10621 = !DILocation(line: 2119, column: 5, scope: !10602)
!10622 = !DILocation(line: 2119, column: 20, scope: !10602)
!10623 = !DILocation(line: 2120, column: 2, scope: !10602)
!10624 = !DILocation(line: 2121, column: 11, scope: !10625)
!10625 = distinct !DILexicalBlock(scope: !10589, file: !3, line: 2121, column: 11)
!10626 = !DILocation(line: 2121, column: 11, scope: !10589)
!10627 = !DILocalVariable(name: "t0", scope: !10628, file: !3, line: 2123, type: !2274)
!10628 = distinct !DILexicalBlock(scope: !10625, file: !3, line: 2122, column: 2)
!10629 = !DILocation(line: 2123, column: 14, scope: !10628)
!10630 = !DILocation(line: 2123, column: 19, scope: !10628)
!10631 = !DILocalVariable(name: "t2", scope: !10628, file: !3, line: 2124, type: !2274)
!10632 = !DILocation(line: 2124, column: 14, scope: !10628)
!10633 = !DILocation(line: 2124, column: 19, scope: !10628)
!10634 = !DILocation(line: 2126, column: 27, scope: !10628)
!10635 = !DILocation(line: 2126, column: 33, scope: !10628)
!10636 = !DILocation(line: 2126, column: 11, scope: !10628)
!10637 = !DILocation(line: 2126, column: 9, scope: !10628)
!10638 = !DILocation(line: 2127, column: 26, scope: !10628)
!10639 = !DILocation(line: 2127, column: 31, scope: !10628)
!10640 = !DILocation(line: 2127, column: 10, scope: !10628)
!10641 = !DILocation(line: 2127, column: 8, scope: !10628)
!10642 = !DILocation(line: 2128, column: 20, scope: !10628)
!10643 = !DILocation(line: 2128, column: 4, scope: !10628)
!10644 = !DILocation(line: 2129, column: 20, scope: !10628)
!10645 = !DILocation(line: 2129, column: 4, scope: !10628)
!10646 = !DILocation(line: 2130, column: 22, scope: !10628)
!10647 = !DILocation(line: 2130, column: 5, scope: !10628)
!10648 = !DILocation(line: 2130, column: 20, scope: !10628)
!10649 = !DILocation(line: 2131, column: 2, scope: !10628)
!10650 = !DILocation(line: 2132, column: 11, scope: !10651)
!10651 = distinct !DILexicalBlock(scope: !10589, file: !3, line: 2132, column: 11)
!10652 = !DILocation(line: 2132, column: 11, scope: !10589)
!10653 = !DILocalVariable(name: "t0", scope: !10654, file: !3, line: 2134, type: !2274)
!10654 = distinct !DILexicalBlock(scope: !10651, file: !3, line: 2133, column: 2)
!10655 = !DILocation(line: 2134, column: 14, scope: !10654)
!10656 = !DILocation(line: 2134, column: 19, scope: !10654)
!10657 = !DILocalVariable(name: "t2", scope: !10654, file: !3, line: 2135, type: !2274)
!10658 = !DILocation(line: 2135, column: 14, scope: !10654)
!10659 = !DILocation(line: 2135, column: 19, scope: !10654)
!10660 = !DILocalVariable(name: "t4", scope: !10654, file: !3, line: 2136, type: !2274)
!10661 = !DILocation(line: 2136, column: 14, scope: !10654)
!10662 = !DILocation(line: 2136, column: 19, scope: !10654)
!10663 = !DILocation(line: 2138, column: 27, scope: !10654)
!10664 = !DILocation(line: 2138, column: 33, scope: !10654)
!10665 = !DILocation(line: 2138, column: 11, scope: !10654)
!10666 = !DILocation(line: 2138, column: 9, scope: !10654)
!10667 = !DILocation(line: 2139, column: 27, scope: !10654)
!10668 = !DILocation(line: 2139, column: 33, scope: !10654)
!10669 = !DILocation(line: 2139, column: 11, scope: !10654)
!10670 = !DILocation(line: 2139, column: 9, scope: !10654)
!10671 = !DILocation(line: 2140, column: 26, scope: !10654)
!10672 = !DILocation(line: 2140, column: 31, scope: !10654)
!10673 = !DILocation(line: 2140, column: 10, scope: !10654)
!10674 = !DILocation(line: 2140, column: 8, scope: !10654)
!10675 = !DILocation(line: 2141, column: 20, scope: !10654)
!10676 = !DILocation(line: 2141, column: 4, scope: !10654)
!10677 = !DILocation(line: 2142, column: 20, scope: !10654)
!10678 = !DILocation(line: 2142, column: 4, scope: !10654)
!10679 = !DILocation(line: 2143, column: 20, scope: !10654)
!10680 = !DILocation(line: 2143, column: 4, scope: !10654)
!10681 = !DILocation(line: 2144, column: 22, scope: !10654)
!10682 = !DILocation(line: 2144, column: 5, scope: !10654)
!10683 = !DILocation(line: 2144, column: 20, scope: !10654)
!10684 = !DILocation(line: 2145, column: 2, scope: !10654)
!10685 = !DILocation(line: 2146, column: 37, scope: !10589)
!10686 = !DILocation(line: 2146, column: 43, scope: !10589)
!10687 = !DILocation(line: 2146, column: 21, scope: !10589)
!10688 = !DILocation(line: 2146, column: 8, scope: !10589)
!10689 = !DILocation(line: 2146, column: 19, scope: !10589)
!10690 = !DILocation(line: 2147, column: 37, scope: !10589)
!10691 = !DILocation(line: 2147, column: 21, scope: !10589)
!10692 = !DILocation(line: 2147, column: 8, scope: !10589)
!10693 = !DILocation(line: 2147, column: 19, scope: !10589)
!10694 = !DILocation(line: 2148, column: 5, scope: !10589)
!10695 = !DILocation(line: 2151, column: 52, scope: !10696)
!10696 = distinct !DILexicalBlock(scope: !10582, file: !3, line: 2150, column: 5)
!10697 = !DILocation(line: 2151, column: 37, scope: !10696)
!10698 = !DILocation(line: 2151, column: 21, scope: !10696)
!10699 = !DILocation(line: 2151, column: 8, scope: !10696)
!10700 = !DILocation(line: 2151, column: 19, scope: !10696)
!10701 = !DILocation(line: 2152, column: 52, scope: !10696)
!10702 = !DILocation(line: 2152, column: 37, scope: !10696)
!10703 = !DILocation(line: 2152, column: 21, scope: !10696)
!10704 = !DILocation(line: 2152, column: 8, scope: !10696)
!10705 = !DILocation(line: 2152, column: 19, scope: !10696)
!10706 = !DILocation(line: 2153, column: 25, scope: !10696)
!10707 = !DILocation(line: 2153, column: 8, scope: !10696)
!10708 = !DILocation(line: 2153, column: 23, scope: !10696)
!10709 = !DILocation(line: 2156, column: 19, scope: !10442)
!10710 = !DILocation(line: 2156, column: 3, scope: !10442)
!10711 = !DILocation(line: 2157, column: 19, scope: !10442)
!10712 = !DILocation(line: 2157, column: 3, scope: !10442)
!10713 = !DILocation(line: 2158, column: 19, scope: !10442)
!10714 = !DILocation(line: 2158, column: 3, scope: !10442)
!10715 = !DILocation(line: 2159, column: 19, scope: !10442)
!10716 = !DILocation(line: 2159, column: 3, scope: !10442)
!10717 = !DILocation(line: 2160, column: 19, scope: !10442)
!10718 = !DILocation(line: 2160, column: 3, scope: !10442)
!10719 = !DILocation(line: 2161, column: 19, scope: !10442)
!10720 = !DILocation(line: 2161, column: 3, scope: !10442)
!10721 = !DILocation(line: 2162, column: 1, scope: !10442)
!10722 = distinct !DISubprogram(name: "int_divides_p", scope: !3, file: !3, line: 142, type: !10723, scopeLine: 143, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10723 = !DISubroutineType(types: !10724)
!10724 = !{!931, !908, !908}
!10725 = !DILocalVariable(name: "a", arg: 1, scope: !10722, file: !3, line: 142, type: !908)
!10726 = !DILocation(line: 142, column: 20, scope: !10722)
!10727 = !DILocalVariable(name: "b", arg: 2, scope: !10722, file: !3, line: 142, type: !908)
!10728 = !DILocation(line: 142, column: 27, scope: !10722)
!10729 = !DILocation(line: 144, column: 12, scope: !10722)
!10730 = !DILocation(line: 144, column: 16, scope: !10722)
!10731 = !DILocation(line: 144, column: 14, scope: !10722)
!10732 = !DILocation(line: 144, column: 19, scope: !10722)
!10733 = !DILocation(line: 144, column: 10, scope: !10722)
!10734 = !DILocation(line: 144, column: 3, scope: !10722)
!10735 = distinct !DISubprogram(name: "affine_fn_univar", scope: !3, file: !3, line: 1590, type: !10736, scopeLine: 1591, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10736 = !DISubroutineType(types: !10737)
!10737 = !{!2274, !811, !7, !811}
!10738 = !DILocalVariable(name: "cst", arg: 1, scope: !10735, file: !3, line: 1590, type: !811)
!10739 = !DILocation(line: 1590, column: 24, scope: !10735)
!10740 = !DILocalVariable(name: "dim", arg: 2, scope: !10735, file: !3, line: 1590, type: !7)
!10741 = !DILocation(line: 1590, column: 38, scope: !10735)
!10742 = !DILocalVariable(name: "coef", arg: 3, scope: !10735, file: !3, line: 1590, type: !811)
!10743 = !DILocation(line: 1590, column: 48, scope: !10735)
!10744 = !DILocalVariable(name: "fn", scope: !10735, file: !3, line: 1592, type: !2274)
!10745 = !DILocation(line: 1592, column: 13, scope: !10735)
!10746 = !DILocation(line: 1592, column: 18, scope: !10735)
!10747 = !DILocalVariable(name: "i", scope: !10735, file: !3, line: 1593, type: !7)
!10748 = !DILocation(line: 1593, column: 12, scope: !10735)
!10749 = !DILocation(line: 1595, column: 3, scope: !10735)
!10750 = !DILocation(line: 1596, column: 3, scope: !10735)
!10751 = !DILocation(line: 1597, column: 10, scope: !10752)
!10752 = distinct !DILexicalBlock(scope: !10735, file: !3, line: 1597, column: 3)
!10753 = !DILocation(line: 1597, column: 8, scope: !10752)
!10754 = !DILocation(line: 1597, column: 15, scope: !10755)
!10755 = distinct !DILexicalBlock(scope: !10752, file: !3, line: 1597, column: 3)
!10756 = !DILocation(line: 1597, column: 19, scope: !10755)
!10757 = !DILocation(line: 1597, column: 17, scope: !10755)
!10758 = !DILocation(line: 1597, column: 3, scope: !10752)
!10759 = !DILocation(line: 1598, column: 5, scope: !10755)
!10760 = !DILocation(line: 1597, column: 25, scope: !10755)
!10761 = !DILocation(line: 1597, column: 3, scope: !10755)
!10762 = distinct !{!10762, !10758, !10763}
!10763 = !DILocation(line: 1598, column: 5, scope: !10752)
!10764 = !DILocation(line: 1599, column: 3, scope: !10735)
!10765 = !DILocation(line: 1600, column: 10, scope: !10735)
!10766 = !DILocation(line: 1600, column: 3, scope: !10735)
!10767 = distinct !DISubprogram(name: "chrec_fold_op", scope: !3292, file: !3292, line: 243, type: !10768, scopeLine: 244, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10768 = !DISubroutineType(types: !10769)
!10769 = !{!811, !196, !811, !811, !811}
!10770 = !DILocalVariable(name: "code", arg: 1, scope: !10767, file: !3292, line: 243, type: !196)
!10771 = !DILocation(line: 243, column: 31, scope: !10767)
!10772 = !DILocalVariable(name: "type", arg: 2, scope: !10767, file: !3292, line: 243, type: !811)
!10773 = !DILocation(line: 243, column: 42, scope: !10767)
!10774 = !DILocalVariable(name: "op0", arg: 3, scope: !10767, file: !3292, line: 243, type: !811)
!10775 = !DILocation(line: 243, column: 53, scope: !10767)
!10776 = !DILocalVariable(name: "op1", arg: 4, scope: !10767, file: !3292, line: 243, type: !811)
!10777 = !DILocation(line: 243, column: 63, scope: !10767)
!10778 = !DILocation(line: 245, column: 11, scope: !10767)
!10779 = !DILocation(line: 245, column: 3, scope: !10767)
!10780 = !DILocation(line: 248, column: 31, scope: !10781)
!10781 = distinct !DILexicalBlock(scope: !10767, file: !3292, line: 246, column: 5)
!10782 = !DILocation(line: 248, column: 37, scope: !10781)
!10783 = !DILocation(line: 248, column: 42, scope: !10781)
!10784 = !DILocation(line: 248, column: 14, scope: !10781)
!10785 = !DILocation(line: 248, column: 7, scope: !10781)
!10786 = !DILocation(line: 251, column: 32, scope: !10781)
!10787 = !DILocation(line: 251, column: 38, scope: !10781)
!10788 = !DILocation(line: 251, column: 43, scope: !10781)
!10789 = !DILocation(line: 251, column: 14, scope: !10781)
!10790 = !DILocation(line: 251, column: 7, scope: !10781)
!10791 = !DILocation(line: 254, column: 35, scope: !10781)
!10792 = !DILocation(line: 254, column: 41, scope: !10781)
!10793 = !DILocation(line: 254, column: 46, scope: !10781)
!10794 = !DILocation(line: 254, column: 14, scope: !10781)
!10795 = !DILocation(line: 254, column: 7, scope: !10781)
!10796 = !DILocation(line: 257, column: 7, scope: !10781)
!10797 = !DILocation(line: 258, column: 5, scope: !10781)
!10798 = !DILocation(line: 260, column: 5, scope: !10767)
!10799 = !DILocation(line: 263, column: 1, scope: !10767)
!10800 = distinct !DISubprogram(name: "chrec_type", scope: !3292, file: !3292, line: 234, type: !10801, scopeLine: 235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10801 = !DISubroutineType(types: !10802)
!10802 = !{!811, !3295}
!10803 = !DILocalVariable(name: "chrec", arg: 1, scope: !10800, file: !3292, line: 234, type: !3295)
!10804 = !DILocation(line: 234, column: 24, scope: !10800)
!10805 = !DILocation(line: 236, column: 40, scope: !10806)
!10806 = distinct !DILexicalBlock(scope: !10800, file: !3292, line: 236, column: 7)
!10807 = !DILocation(line: 236, column: 7, scope: !10806)
!10808 = !DILocation(line: 236, column: 7, scope: !10800)
!10809 = !DILocation(line: 237, column: 5, scope: !10806)
!10810 = !DILocation(line: 239, column: 10, scope: !10800)
!10811 = !DILocation(line: 239, column: 3, scope: !10800)
!10812 = !DILocation(line: 240, column: 1, scope: !10800)
!10813 = distinct !DISubprogram(name: "gcd", scope: !2216, file: !2216, line: 427, type: !10814, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10814 = !DISubroutineType(types: !10815)
!10815 = !{!908, !908, !908}
!10816 = !DILocalVariable(name: "a", arg: 1, scope: !10813, file: !2216, line: 427, type: !908)
!10817 = !DILocation(line: 427, column: 10, scope: !10813)
!10818 = !DILocalVariable(name: "b", arg: 2, scope: !10813, file: !2216, line: 427, type: !908)
!10819 = !DILocation(line: 427, column: 17, scope: !10813)
!10820 = !DILocalVariable(name: "x", scope: !10813, file: !2216, line: 429, type: !908)
!10821 = !DILocation(line: 429, column: 7, scope: !10813)
!10822 = !DILocalVariable(name: "y", scope: !10813, file: !2216, line: 429, type: !908)
!10823 = !DILocation(line: 429, column: 10, scope: !10813)
!10824 = !DILocalVariable(name: "z", scope: !10813, file: !2216, line: 429, type: !908)
!10825 = !DILocation(line: 429, column: 13, scope: !10813)
!10826 = !DILocation(line: 431, column: 12, scope: !10813)
!10827 = !DILocation(line: 431, column: 7, scope: !10813)
!10828 = !DILocation(line: 431, column: 5, scope: !10813)
!10829 = !DILocation(line: 432, column: 12, scope: !10813)
!10830 = !DILocation(line: 432, column: 7, scope: !10813)
!10831 = !DILocation(line: 432, column: 5, scope: !10813)
!10832 = !DILocation(line: 434, column: 3, scope: !10813)
!10833 = !DILocation(line: 434, column: 10, scope: !10813)
!10834 = !DILocation(line: 434, column: 12, scope: !10813)
!10835 = !DILocation(line: 436, column: 11, scope: !10836)
!10836 = distinct !DILexicalBlock(scope: !10813, file: !2216, line: 435, column: 5)
!10837 = !DILocation(line: 436, column: 15, scope: !10836)
!10838 = !DILocation(line: 436, column: 13, scope: !10836)
!10839 = !DILocation(line: 436, column: 9, scope: !10836)
!10840 = !DILocation(line: 437, column: 11, scope: !10836)
!10841 = !DILocation(line: 437, column: 9, scope: !10836)
!10842 = !DILocation(line: 438, column: 11, scope: !10836)
!10843 = !DILocation(line: 438, column: 9, scope: !10836)
!10844 = distinct !{!10844, !10832, !10845}
!10845 = !DILocation(line: 439, column: 5, scope: !10813)
!10846 = !DILocation(line: 441, column: 10, scope: !10813)
!10847 = !DILocation(line: 441, column: 3, scope: !10813)
!10848 = distinct !DISubprogram(name: "affine_fn_plus", scope: !3, file: !3, line: 1084, type: !10849, scopeLine: 1085, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10849 = !DISubroutineType(types: !10850)
!10850 = !{!2274, !2274, !2274}
!10851 = !DILocalVariable(name: "fna", arg: 1, scope: !10848, file: !3, line: 1084, type: !2274)
!10852 = !DILocation(line: 1084, column: 27, scope: !10848)
!10853 = !DILocalVariable(name: "fnb", arg: 2, scope: !10848, file: !3, line: 1084, type: !2274)
!10854 = !DILocation(line: 1084, column: 42, scope: !10848)
!10855 = !DILocation(line: 1086, column: 35, scope: !10848)
!10856 = !DILocation(line: 1086, column: 40, scope: !10848)
!10857 = !DILocation(line: 1086, column: 10, scope: !10848)
!10858 = !DILocation(line: 1086, column: 3, scope: !10848)
!10859 = distinct !DISubprogram(name: "affine_fn_free", scope: !3, file: !3, line: 1100, type: !10860, scopeLine: 1101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10860 = !DISubroutineType(types: !10861)
!10861 = !{null, !2274}
!10862 = !DILocalVariable(name: "fn", arg: 1, scope: !10859, file: !3, line: 1100, type: !2274)
!10863 = !DILocation(line: 1100, column: 27, scope: !10859)
!10864 = !DILocation(line: 1102, column: 3, scope: !10859)
!10865 = !DILocation(line: 1103, column: 1, scope: !10859)
!10866 = distinct !DISubprogram(name: "affine_fn_op", scope: !3, file: !3, line: 1040, type: !10867, scopeLine: 1041, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10867 = !DISubroutineType(types: !10868)
!10868 = !{!2274, !196, !2274, !2274}
!10869 = !DILocalVariable(name: "op", arg: 1, scope: !10866, file: !3, line: 1040, type: !196)
!10870 = !DILocation(line: 1040, column: 30, scope: !10866)
!10871 = !DILocalVariable(name: "fna", arg: 2, scope: !10866, file: !3, line: 1040, type: !2274)
!10872 = !DILocation(line: 1040, column: 44, scope: !10866)
!10873 = !DILocalVariable(name: "fnb", arg: 3, scope: !10866, file: !3, line: 1040, type: !2274)
!10874 = !DILocation(line: 1040, column: 59, scope: !10866)
!10875 = !DILocalVariable(name: "i", scope: !10866, file: !3, line: 1042, type: !7)
!10876 = !DILocation(line: 1042, column: 12, scope: !10866)
!10877 = !DILocalVariable(name: "n", scope: !10866, file: !3, line: 1042, type: !7)
!10878 = !DILocation(line: 1042, column: 15, scope: !10866)
!10879 = !DILocalVariable(name: "m", scope: !10866, file: !3, line: 1042, type: !7)
!10880 = !DILocation(line: 1042, column: 18, scope: !10866)
!10881 = !DILocalVariable(name: "ret", scope: !10866, file: !3, line: 1043, type: !2274)
!10882 = !DILocation(line: 1043, column: 13, scope: !10866)
!10883 = !DILocalVariable(name: "coef", scope: !10866, file: !3, line: 1044, type: !811)
!10884 = !DILocation(line: 1044, column: 8, scope: !10866)
!10885 = !DILocation(line: 1046, column: 7, scope: !10886)
!10886 = distinct !DILexicalBlock(scope: !10866, file: !3, line: 1046, column: 7)
!10887 = !DILocation(line: 1046, column: 32, scope: !10886)
!10888 = !DILocation(line: 1046, column: 30, scope: !10886)
!10889 = !DILocation(line: 1046, column: 7, scope: !10866)
!10890 = !DILocation(line: 1048, column: 11, scope: !10891)
!10891 = distinct !DILexicalBlock(scope: !10886, file: !3, line: 1047, column: 5)
!10892 = !DILocation(line: 1048, column: 9, scope: !10891)
!10893 = !DILocation(line: 1049, column: 11, scope: !10891)
!10894 = !DILocation(line: 1049, column: 9, scope: !10891)
!10895 = !DILocation(line: 1050, column: 5, scope: !10891)
!10896 = !DILocation(line: 1053, column: 11, scope: !10897)
!10897 = distinct !DILexicalBlock(scope: !10886, file: !3, line: 1052, column: 5)
!10898 = !DILocation(line: 1053, column: 9, scope: !10897)
!10899 = !DILocation(line: 1054, column: 11, scope: !10897)
!10900 = !DILocation(line: 1054, column: 9, scope: !10897)
!10901 = !DILocation(line: 1057, column: 9, scope: !10866)
!10902 = !DILocation(line: 1057, column: 7, scope: !10866)
!10903 = !DILocation(line: 1058, column: 10, scope: !10904)
!10904 = distinct !DILexicalBlock(scope: !10866, file: !3, line: 1058, column: 3)
!10905 = !DILocation(line: 1058, column: 8, scope: !10904)
!10906 = !DILocation(line: 1058, column: 15, scope: !10907)
!10907 = distinct !DILexicalBlock(scope: !10904, file: !3, line: 1058, column: 3)
!10908 = !DILocation(line: 1058, column: 19, scope: !10907)
!10909 = !DILocation(line: 1058, column: 17, scope: !10907)
!10910 = !DILocation(line: 1058, column: 3, scope: !10904)
!10911 = !DILocalVariable(name: "type", scope: !10912, file: !3, line: 1060, type: !811)
!10912 = distinct !DILexicalBlock(scope: !10907, file: !3, line: 1059, column: 5)
!10913 = !DILocation(line: 1060, column: 12, scope: !10912)
!10914 = !DILocation(line: 1060, column: 42, scope: !10912)
!10915 = !DILocation(line: 1061, column: 7, scope: !10912)
!10916 = !DILocation(line: 1060, column: 19, scope: !10912)
!10917 = !DILocation(line: 1063, column: 7, scope: !10912)
!10918 = !DILocation(line: 1067, column: 5, scope: !10912)
!10919 = !DILocation(line: 1058, column: 23, scope: !10907)
!10920 = !DILocation(line: 1058, column: 3, scope: !10907)
!10921 = distinct !{!10921, !10910, !10922}
!10922 = !DILocation(line: 1067, column: 5, scope: !10904)
!10923 = !DILocation(line: 1069, column: 3, scope: !10866)
!10924 = !DILocation(line: 1069, column: 10, scope: !10925)
!10925 = distinct !DILexicalBlock(scope: !10926, file: !3, line: 1069, column: 3)
!10926 = distinct !DILexicalBlock(scope: !10866, file: !3, line: 1069, column: 3)
!10927 = !DILocation(line: 1069, column: 3, scope: !10926)
!10928 = !DILocation(line: 1070, column: 5, scope: !10925)
!10929 = !DILocation(line: 1069, column: 45, scope: !10925)
!10930 = !DILocation(line: 1069, column: 3, scope: !10925)
!10931 = distinct !{!10931, !10927, !10932}
!10932 = !DILocation(line: 1070, column: 5, scope: !10926)
!10933 = !DILocation(line: 1073, column: 3, scope: !10866)
!10934 = !DILocation(line: 1073, column: 10, scope: !10935)
!10935 = distinct !DILexicalBlock(scope: !10936, file: !3, line: 1073, column: 3)
!10936 = distinct !DILexicalBlock(scope: !10866, file: !3, line: 1073, column: 3)
!10937 = !DILocation(line: 1073, column: 3, scope: !10936)
!10938 = !DILocation(line: 1074, column: 5, scope: !10935)
!10939 = !DILocation(line: 1073, column: 45, scope: !10935)
!10940 = !DILocation(line: 1073, column: 3, scope: !10935)
!10941 = distinct !{!10941, !10937, !10942}
!10942 = !DILocation(line: 1074, column: 5, scope: !10936)
!10943 = !DILocation(line: 1078, column: 10, scope: !10866)
!10944 = !DILocation(line: 1078, column: 3, scope: !10866)
!10945 = distinct !DISubprogram(name: "build_polynomial_chrec", scope: !3292, file: !3292, line: 127, type: !10946, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10946 = !DISubroutineType(types: !10947)
!10947 = !{!811, !7, !811, !811}
!10948 = !DILocalVariable(name: "loop_num", arg: 1, scope: !10945, file: !3292, line: 127, type: !7)
!10949 = !DILocation(line: 127, column: 34, scope: !10945)
!10950 = !DILocalVariable(name: "left", arg: 2, scope: !10945, file: !3292, line: 128, type: !811)
!10951 = !DILocation(line: 128, column: 9, scope: !10945)
!10952 = !DILocalVariable(name: "right", arg: 3, scope: !10945, file: !3292, line: 129, type: !811)
!10953 = !DILocation(line: 129, column: 9, scope: !10945)
!10954 = !DILocalVariable(name: "val", scope: !10945, file: !3292, line: 131, type: !931)
!10955 = !DILocation(line: 131, column: 8, scope: !10945)
!10956 = !DILocation(line: 133, column: 7, scope: !10957)
!10957 = distinct !DILexicalBlock(scope: !10945, file: !3292, line: 133, column: 7)
!10958 = !DILocation(line: 133, column: 15, scope: !10957)
!10959 = !DILocation(line: 133, column: 12, scope: !10957)
!10960 = !DILocation(line: 134, column: 7, scope: !10957)
!10961 = !DILocation(line: 134, column: 10, scope: !10957)
!10962 = !DILocation(line: 134, column: 19, scope: !10957)
!10963 = !DILocation(line: 134, column: 16, scope: !10957)
!10964 = !DILocation(line: 133, column: 7, scope: !10945)
!10965 = !DILocation(line: 135, column: 12, scope: !10957)
!10966 = !DILocation(line: 135, column: 5, scope: !10957)
!10967 = !DILocation(line: 137, column: 32, scope: !10968)
!10968 = distinct !DILexicalBlock(scope: !10945, file: !3292, line: 137, column: 7)
!10969 = !DILocation(line: 137, column: 38, scope: !10968)
!10970 = !DILocation(line: 137, column: 8, scope: !10968)
!10971 = !DILocation(line: 138, column: 7, scope: !10968)
!10972 = !DILocation(line: 138, column: 11, scope: !10968)
!10973 = !DILocation(line: 137, column: 7, scope: !10945)
!10974 = !DILocation(line: 139, column: 12, scope: !10968)
!10975 = !DILocation(line: 139, column: 5, scope: !10968)
!10976 = !DILocation(line: 143, column: 3, scope: !10945)
!10977 = !DILocation(line: 146, column: 7, scope: !10978)
!10978 = distinct !DILexicalBlock(scope: !10945, file: !3292, line: 146, column: 7)
!10979 = !DILocation(line: 146, column: 7, scope: !10945)
!10980 = !DILocation(line: 147, column: 5, scope: !10978)
!10981 = !DILocation(line: 149, column: 5, scope: !10978)
!10982 = !DILocation(line: 151, column: 20, scope: !10983)
!10983 = distinct !DILexicalBlock(scope: !10945, file: !3292, line: 151, column: 7)
!10984 = !DILocation(line: 151, column: 7, scope: !10983)
!10985 = !DILocation(line: 151, column: 7, scope: !10945)
!10986 = !DILocation(line: 152, column: 12, scope: !10983)
!10987 = !DILocation(line: 152, column: 5, scope: !10983)
!10988 = !DILocation(line: 154, column: 10, scope: !10945)
!10989 = !DILocation(line: 154, column: 3, scope: !10945)
!10990 = !DILocation(line: 156, column: 1, scope: !10945)
!10991 = distinct !DISubprogram(name: "no_evolution_in_loop_p", scope: !3292, file: !3292, line: 109, type: !10992, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!10992 = !DISubroutineType(types: !10993)
!10993 = !{!931, !811, !7, !7729}
!10994 = !DILocalVariable(name: "chrec", arg: 1, scope: !10991, file: !3292, line: 109, type: !811)
!10995 = !DILocation(line: 109, column: 30, scope: !10991)
!10996 = !DILocalVariable(name: "loop_num", arg: 2, scope: !10991, file: !3292, line: 109, type: !7)
!10997 = !DILocation(line: 109, column: 46, scope: !10991)
!10998 = !DILocalVariable(name: "res", arg: 3, scope: !10991, file: !3292, line: 109, type: !7729)
!10999 = !DILocation(line: 109, column: 62, scope: !10991)
!11000 = !DILocalVariable(name: "scev", scope: !10991, file: !3292, line: 111, type: !811)
!11001 = !DILocation(line: 111, column: 8, scope: !10991)
!11002 = !DILocation(line: 113, column: 7, scope: !11003)
!11003 = distinct !DILexicalBlock(scope: !10991, file: !3292, line: 113, column: 7)
!11004 = !DILocation(line: 113, column: 16, scope: !11003)
!11005 = !DILocation(line: 113, column: 13, scope: !11003)
!11006 = !DILocation(line: 114, column: 7, scope: !11003)
!11007 = !DILocation(line: 114, column: 10, scope: !11003)
!11008 = !DILocation(line: 114, column: 19, scope: !11003)
!11009 = !DILocation(line: 114, column: 16, scope: !11003)
!11010 = !DILocation(line: 115, column: 7, scope: !11003)
!11011 = !DILocation(line: 115, column: 50, scope: !11003)
!11012 = !DILocation(line: 115, column: 57, scope: !11003)
!11013 = !DILocation(line: 115, column: 10, scope: !11003)
!11014 = !DILocation(line: 113, column: 7, scope: !10991)
!11015 = !DILocation(line: 116, column: 5, scope: !11003)
!11016 = !DILocation(line: 118, column: 3, scope: !10991)
!11017 = !DILocation(line: 119, column: 51, scope: !10991)
!11018 = !DILocation(line: 119, column: 58, scope: !10991)
!11019 = !DILocation(line: 119, column: 10, scope: !10991)
!11020 = !DILocation(line: 119, column: 8, scope: !10991)
!11021 = !DILocation(line: 120, column: 26, scope: !10991)
!11022 = !DILocation(line: 120, column: 11, scope: !10991)
!11023 = !DILocation(line: 120, column: 10, scope: !10991)
!11024 = !DILocation(line: 120, column: 4, scope: !10991)
!11025 = !DILocation(line: 120, column: 8, scope: !10991)
!11026 = !DILocation(line: 121, column: 3, scope: !10991)
!11027 = !DILocation(line: 122, column: 1, scope: !10991)
!11028 = distinct !DISubprogram(name: "chrec_zerop", scope: !3292, file: !3292, line: 94, type: !3293, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11029 = !DILocalVariable(name: "chrec", arg: 1, scope: !11028, file: !3292, line: 94, type: !3295)
!11030 = !DILocation(line: 94, column: 25, scope: !11028)
!11031 = !DILocation(line: 96, column: 7, scope: !11032)
!11032 = distinct !DILexicalBlock(scope: !11028, file: !3292, line: 96, column: 7)
!11033 = !DILocation(line: 96, column: 13, scope: !11032)
!11034 = !DILocation(line: 96, column: 7, scope: !11028)
!11035 = !DILocation(line: 97, column: 5, scope: !11032)
!11036 = !DILocation(line: 99, column: 7, scope: !11037)
!11037 = distinct !DILexicalBlock(scope: !11028, file: !3292, line: 99, column: 7)
!11038 = !DILocation(line: 99, column: 25, scope: !11037)
!11039 = !DILocation(line: 99, column: 7, scope: !11028)
!11040 = !DILocation(line: 100, column: 27, scope: !11037)
!11041 = !DILocation(line: 100, column: 12, scope: !11037)
!11042 = !DILocation(line: 100, column: 5, scope: !11037)
!11043 = !DILocation(line: 102, column: 3, scope: !11028)
!11044 = !DILocation(line: 103, column: 1, scope: !11028)
!11045 = distinct !DISubprogram(name: "tree_is_chrec", scope: !3292, file: !3292, line: 46, type: !3293, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11046 = !DILocalVariable(name: "expr", arg: 1, scope: !11045, file: !3292, line: 46, type: !3295)
!11047 = !DILocation(line: 46, column: 27, scope: !11045)
!11048 = !DILocation(line: 48, column: 7, scope: !11049)
!11049 = distinct !DILexicalBlock(scope: !11045, file: !3292, line: 48, column: 7)
!11050 = !DILocation(line: 48, column: 24, scope: !11049)
!11051 = !DILocation(line: 49, column: 7, scope: !11049)
!11052 = !DILocation(line: 49, column: 43, scope: !11049)
!11053 = !DILocation(line: 49, column: 10, scope: !11049)
!11054 = !DILocation(line: 48, column: 7, scope: !11045)
!11055 = !DILocation(line: 50, column: 5, scope: !11049)
!11056 = !DILocation(line: 52, column: 5, scope: !11049)
!11057 = !DILocation(line: 53, column: 1, scope: !11045)
!11058 = distinct !DISubprogram(name: "estimated_loop_iterations_tree", scope: !3, file: !3, line: 1721, type: !11059, scopeLine: 1722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11059 = !DISubroutineType(types: !11060)
!11060 = !{!811, !1357, !931}
!11061 = !DILocalVariable(name: "loop", arg: 1, scope: !11058, file: !3, line: 1721, type: !1357)
!11062 = !DILocation(line: 1721, column: 46, scope: !11058)
!11063 = !DILocalVariable(name: "conservative", arg: 2, scope: !11058, file: !3, line: 1721, type: !931)
!11064 = !DILocation(line: 1721, column: 57, scope: !11058)
!11065 = !DILocalVariable(name: "nit", scope: !11058, file: !3, line: 1723, type: !860)
!11066 = !DILocation(line: 1723, column: 14, scope: !11058)
!11067 = !DILocalVariable(name: "type", scope: !11058, file: !3, line: 1724, type: !811)
!11068 = !DILocation(line: 1724, column: 8, scope: !11058)
!11069 = !DILocation(line: 1726, column: 35, scope: !11070)
!11070 = distinct !DILexicalBlock(scope: !11058, file: !3, line: 1726, column: 7)
!11071 = !DILocation(line: 1726, column: 41, scope: !11070)
!11072 = !DILocation(line: 1726, column: 8, scope: !11070)
!11073 = !DILocation(line: 1726, column: 7, scope: !11058)
!11074 = !DILocation(line: 1727, column: 12, scope: !11070)
!11075 = !DILocation(line: 1727, column: 5, scope: !11070)
!11076 = !DILocation(line: 1729, column: 27, scope: !11058)
!11077 = !DILocation(line: 1729, column: 10, scope: !11058)
!11078 = !DILocation(line: 1729, column: 8, scope: !11058)
!11079 = !DILocation(line: 1730, column: 35, scope: !11080)
!11080 = distinct !DILexicalBlock(scope: !11058, file: !3, line: 1730, column: 7)
!11081 = !DILocation(line: 1730, column: 8, scope: !11080)
!11082 = !DILocation(line: 1730, column: 7, scope: !11058)
!11083 = !DILocation(line: 1731, column: 12, scope: !11080)
!11084 = !DILocation(line: 1731, column: 5, scope: !11080)
!11085 = !DILocation(line: 1733, column: 30, scope: !11058)
!11086 = !DILocation(line: 1733, column: 10, scope: !11058)
!11087 = !DILocation(line: 1733, column: 3, scope: !11058)
!11088 = !DILocation(line: 1734, column: 1, scope: !11058)
!11089 = distinct !DISubprogram(name: "gcd_of_steps_may_divide_p", scope: !3, file: !3, line: 2566, type: !8795, scopeLine: 2567, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11090 = !DILocalVariable(name: "chrec", arg: 1, scope: !11089, file: !3, line: 2566, type: !3295)
!11091 = !DILocation(line: 2566, column: 39, scope: !11089)
!11092 = !DILocalVariable(name: "cst", arg: 2, scope: !11089, file: !3, line: 2566, type: !3295)
!11093 = !DILocation(line: 2566, column: 57, scope: !11089)
!11094 = !DILocalVariable(name: "cd", scope: !11089, file: !3, line: 2568, type: !867)
!11095 = !DILocation(line: 2568, column: 17, scope: !11089)
!11096 = !DILocalVariable(name: "val", scope: !11089, file: !3, line: 2568, type: !867)
!11097 = !DILocation(line: 2568, column: 25, scope: !11089)
!11098 = !DILocalVariable(name: "step", scope: !11089, file: !3, line: 2569, type: !811)
!11099 = !DILocation(line: 2569, column: 8, scope: !11089)
!11100 = !DILocation(line: 2571, column: 23, scope: !11101)
!11101 = distinct !DILexicalBlock(scope: !11089, file: !3, line: 2571, column: 7)
!11102 = !DILocation(line: 2571, column: 8, scope: !11101)
!11103 = !DILocation(line: 2571, column: 7, scope: !11089)
!11104 = !DILocation(line: 2572, column: 5, scope: !11101)
!11105 = !DILocation(line: 2573, column: 23, scope: !11089)
!11106 = !DILocation(line: 2573, column: 9, scope: !11089)
!11107 = !DILocation(line: 2573, column: 7, scope: !11089)
!11108 = !DILocation(line: 2575, column: 3, scope: !11089)
!11109 = !DILocation(line: 2575, column: 10, scope: !11089)
!11110 = !DILocation(line: 2575, column: 28, scope: !11089)
!11111 = !DILocation(line: 2577, column: 14, scope: !11112)
!11112 = distinct !DILexicalBlock(scope: !11089, file: !3, line: 2576, column: 5)
!11113 = !DILocation(line: 2577, column: 12, scope: !11112)
!11114 = !DILocation(line: 2578, column: 27, scope: !11115)
!11115 = distinct !DILexicalBlock(scope: !11112, file: !3, line: 2578, column: 11)
!11116 = !DILocation(line: 2578, column: 12, scope: !11115)
!11117 = !DILocation(line: 2578, column: 11, scope: !11112)
!11118 = !DILocation(line: 2579, column: 2, scope: !11115)
!11119 = !DILocation(line: 2580, column: 17, scope: !11112)
!11120 = !DILocation(line: 2580, column: 35, scope: !11112)
!11121 = !DILocation(line: 2580, column: 21, scope: !11112)
!11122 = !DILocation(line: 2580, column: 12, scope: !11112)
!11123 = !DILocation(line: 2580, column: 10, scope: !11112)
!11124 = !DILocation(line: 2581, column: 15, scope: !11112)
!11125 = !DILocation(line: 2581, column: 13, scope: !11112)
!11126 = distinct !{!11126, !11108, !11127}
!11127 = !DILocation(line: 2582, column: 5, scope: !11089)
!11128 = !DILocation(line: 2584, column: 10, scope: !11089)
!11129 = !DILocation(line: 2584, column: 16, scope: !11089)
!11130 = !DILocation(line: 2584, column: 14, scope: !11089)
!11131 = !DILocation(line: 2584, column: 19, scope: !11089)
!11132 = !DILocation(line: 2584, column: 3, scope: !11089)
!11133 = !DILocation(line: 2585, column: 1, scope: !11089)
!11134 = distinct !DISubprogram(name: "common_affine_function", scope: !3, file: !3, line: 975, type: !11135, scopeLine: 976, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11135 = !DISubroutineType(types: !11136)
!11136 = !{!2274, !2267}
!11137 = !DILocalVariable(name: "cf", arg: 1, scope: !11134, file: !3, line: 975, type: !2267)
!11138 = !DILocation(line: 975, column: 44, scope: !11134)
!11139 = !DILocalVariable(name: "i", scope: !11134, file: !3, line: 977, type: !7)
!11140 = !DILocation(line: 977, column: 12, scope: !11134)
!11141 = !DILocalVariable(name: "comm", scope: !11134, file: !3, line: 978, type: !2274)
!11142 = !DILocation(line: 978, column: 13, scope: !11134)
!11143 = !DILocation(line: 980, column: 8, scope: !11144)
!11144 = distinct !DILexicalBlock(scope: !11134, file: !3, line: 980, column: 7)
!11145 = !DILocation(line: 980, column: 7, scope: !11134)
!11146 = !DILocation(line: 981, column: 5, scope: !11144)
!11147 = !DILocation(line: 983, column: 10, scope: !11134)
!11148 = !DILocation(line: 983, column: 14, scope: !11134)
!11149 = !DILocation(line: 983, column: 8, scope: !11134)
!11150 = !DILocation(line: 985, column: 10, scope: !11151)
!11151 = distinct !DILexicalBlock(scope: !11134, file: !3, line: 985, column: 3)
!11152 = !DILocation(line: 985, column: 8, scope: !11151)
!11153 = !DILocation(line: 985, column: 15, scope: !11154)
!11154 = distinct !DILexicalBlock(scope: !11151, file: !3, line: 985, column: 3)
!11155 = !DILocation(line: 985, column: 19, scope: !11154)
!11156 = !DILocation(line: 985, column: 23, scope: !11154)
!11157 = !DILocation(line: 985, column: 17, scope: !11154)
!11158 = !DILocation(line: 985, column: 3, scope: !11151)
!11159 = !DILocation(line: 986, column: 35, scope: !11160)
!11160 = distinct !DILexicalBlock(scope: !11154, file: !3, line: 986, column: 9)
!11161 = !DILocation(line: 986, column: 41, scope: !11160)
!11162 = !DILocation(line: 986, column: 45, scope: !11160)
!11163 = !DILocation(line: 986, column: 49, scope: !11160)
!11164 = !DILocation(line: 986, column: 10, scope: !11160)
!11165 = !DILocation(line: 986, column: 9, scope: !11154)
!11166 = !DILocation(line: 987, column: 7, scope: !11160)
!11167 = !DILocation(line: 986, column: 51, scope: !11160)
!11168 = !DILocation(line: 985, column: 27, scope: !11154)
!11169 = !DILocation(line: 985, column: 3, scope: !11154)
!11170 = distinct !{!11170, !11158, !11171}
!11171 = !DILocation(line: 987, column: 14, scope: !11151)
!11172 = !DILocation(line: 989, column: 10, scope: !11134)
!11173 = !DILocation(line: 989, column: 3, scope: !11134)
!11174 = !DILocation(line: 990, column: 1, scope: !11134)
!11175 = distinct !DISubprogram(name: "affine_fn_minus", scope: !3, file: !3, line: 1092, type: !10849, scopeLine: 1093, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11176 = !DILocalVariable(name: "fna", arg: 1, scope: !11175, file: !3, line: 1092, type: !2274)
!11177 = !DILocation(line: 1092, column: 28, scope: !11175)
!11178 = !DILocalVariable(name: "fnb", arg: 2, scope: !11175, file: !3, line: 1092, type: !2274)
!11179 = !DILocation(line: 1092, column: 43, scope: !11175)
!11180 = !DILocation(line: 1094, column: 36, scope: !11175)
!11181 = !DILocation(line: 1094, column: 41, scope: !11175)
!11182 = !DILocation(line: 1094, column: 10, scope: !11175)
!11183 = !DILocation(line: 1094, column: 3, scope: !11175)
!11184 = distinct !DISubprogram(name: "affine_function_constant_p", scope: !3, file: !3, line: 1003, type: !11185, scopeLine: 1004, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11185 = !DISubroutineType(types: !11186)
!11186 = !{!931, !2274}
!11187 = !DILocalVariable(name: "fn", arg: 1, scope: !11184, file: !3, line: 1003, type: !2274)
!11188 = !DILocation(line: 1003, column: 39, scope: !11184)
!11189 = !DILocalVariable(name: "i", scope: !11184, file: !3, line: 1005, type: !7)
!11190 = !DILocation(line: 1005, column: 12, scope: !11184)
!11191 = !DILocalVariable(name: "coef", scope: !11184, file: !3, line: 1006, type: !811)
!11192 = !DILocation(line: 1006, column: 8, scope: !11184)
!11193 = !DILocation(line: 1008, column: 10, scope: !11194)
!11194 = distinct !DILexicalBlock(scope: !11184, file: !3, line: 1008, column: 3)
!11195 = !DILocation(line: 1008, column: 8, scope: !11194)
!11196 = !DILocation(line: 1008, column: 15, scope: !11197)
!11197 = distinct !DILexicalBlock(scope: !11194, file: !3, line: 1008, column: 3)
!11198 = !DILocation(line: 1008, column: 3, scope: !11194)
!11199 = !DILocation(line: 1009, column: 25, scope: !11200)
!11200 = distinct !DILexicalBlock(scope: !11197, file: !3, line: 1009, column: 9)
!11201 = !DILocation(line: 1009, column: 10, scope: !11200)
!11202 = !DILocation(line: 1009, column: 9, scope: !11197)
!11203 = !DILocation(line: 1010, column: 7, scope: !11200)
!11204 = !DILocation(line: 1009, column: 29, scope: !11200)
!11205 = !DILocation(line: 1008, column: 49, scope: !11197)
!11206 = !DILocation(line: 1008, column: 3, scope: !11197)
!11207 = distinct !{!11207, !11198, !11208}
!11208 = !DILocation(line: 1010, column: 14, scope: !11194)
!11209 = !DILocation(line: 1012, column: 3, scope: !11184)
!11210 = !DILocation(line: 1013, column: 1, scope: !11184)
!11211 = distinct !DISubprogram(name: "affine_function_base", scope: !3, file: !3, line: 995, type: !11212, scopeLine: 996, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11212 = !DISubroutineType(types: !11213)
!11213 = !{!811, !2274}
!11214 = !DILocalVariable(name: "fn", arg: 1, scope: !11211, file: !3, line: 995, type: !2274)
!11215 = !DILocation(line: 995, column: 33, scope: !11211)
!11216 = !DILocation(line: 997, column: 10, scope: !11211)
!11217 = !DILocation(line: 997, column: 3, scope: !11211)
!11218 = distinct !DISubprogram(name: "affine_function_equal_p", scope: !3, file: !3, line: 956, type: !11219, scopeLine: 957, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11219 = !DISubroutineType(types: !11220)
!11220 = !{!931, !2274, !2274}
!11221 = !DILocalVariable(name: "fna", arg: 1, scope: !11218, file: !3, line: 956, type: !2274)
!11222 = !DILocation(line: 956, column: 36, scope: !11218)
!11223 = !DILocalVariable(name: "fnb", arg: 2, scope: !11218, file: !3, line: 956, type: !2274)
!11224 = !DILocation(line: 956, column: 51, scope: !11218)
!11225 = !DILocalVariable(name: "i", scope: !11218, file: !3, line: 958, type: !7)
!11226 = !DILocation(line: 958, column: 12, scope: !11218)
!11227 = !DILocalVariable(name: "n", scope: !11218, file: !3, line: 958, type: !7)
!11228 = !DILocation(line: 958, column: 15, scope: !11218)
!11229 = !DILocation(line: 958, column: 19, scope: !11218)
!11230 = !DILocation(line: 960, column: 7, scope: !11231)
!11231 = distinct !DILexicalBlock(scope: !11218, file: !3, line: 960, column: 7)
!11232 = !DILocation(line: 960, column: 12, scope: !11231)
!11233 = !DILocation(line: 960, column: 9, scope: !11231)
!11234 = !DILocation(line: 960, column: 7, scope: !11218)
!11235 = !DILocation(line: 961, column: 5, scope: !11231)
!11236 = !DILocation(line: 963, column: 10, scope: !11237)
!11237 = distinct !DILexicalBlock(scope: !11218, file: !3, line: 963, column: 3)
!11238 = !DILocation(line: 963, column: 8, scope: !11237)
!11239 = !DILocation(line: 963, column: 15, scope: !11240)
!11240 = distinct !DILexicalBlock(scope: !11237, file: !3, line: 963, column: 3)
!11241 = !DILocation(line: 963, column: 19, scope: !11240)
!11242 = !DILocation(line: 963, column: 17, scope: !11240)
!11243 = !DILocation(line: 963, column: 3, scope: !11237)
!11244 = !DILocation(line: 964, column: 27, scope: !11245)
!11245 = distinct !DILexicalBlock(scope: !11240, file: !3, line: 964, column: 9)
!11246 = !DILocation(line: 965, column: 6, scope: !11245)
!11247 = !DILocation(line: 964, column: 10, scope: !11245)
!11248 = !DILocation(line: 964, column: 9, scope: !11240)
!11249 = !DILocation(line: 966, column: 7, scope: !11245)
!11250 = !DILocation(line: 965, column: 33, scope: !11245)
!11251 = !DILocation(line: 963, column: 23, scope: !11240)
!11252 = !DILocation(line: 963, column: 3, scope: !11240)
!11253 = distinct !{!11253, !11243, !11254}
!11254 = !DILocation(line: 966, column: 14, scope: !11237)
!11255 = !DILocation(line: 968, column: 3, scope: !11218)
!11256 = !DILocation(line: 969, column: 1, scope: !11218)
!11257 = distinct !DISubprogram(name: "same_access_functions", scope: !391, file: !391, line: 427, type: !11258, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11258 = !DISubroutineType(types: !11259)
!11259 = !{!931, !11260}
!11260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11261, size: 64)
!11261 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2244)
!11262 = !DILocalVariable(name: "ddr", arg: 1, scope: !11257, file: !391, line: 427, type: !11260)
!11263 = !DILocation(line: 427, column: 63, scope: !11257)
!11264 = !DILocalVariable(name: "i", scope: !11257, file: !391, line: 429, type: !7)
!11265 = !DILocation(line: 429, column: 12, scope: !11257)
!11266 = !DILocation(line: 431, column: 10, scope: !11267)
!11267 = distinct !DILexicalBlock(scope: !11257, file: !391, line: 431, column: 3)
!11268 = !DILocation(line: 431, column: 8, scope: !11267)
!11269 = !DILocation(line: 431, column: 15, scope: !11270)
!11270 = distinct !DILexicalBlock(scope: !11267, file: !391, line: 431, column: 3)
!11271 = !DILocation(line: 431, column: 19, scope: !11270)
!11272 = !DILocation(line: 431, column: 17, scope: !11270)
!11273 = !DILocation(line: 431, column: 3, scope: !11267)
!11274 = !DILocation(line: 432, column: 27, scope: !11275)
!11275 = distinct !DILexicalBlock(scope: !11270, file: !391, line: 432, column: 9)
!11276 = !DILocation(line: 433, column: 6, scope: !11275)
!11277 = !DILocation(line: 432, column: 10, scope: !11275)
!11278 = !DILocation(line: 432, column: 9, scope: !11270)
!11279 = !DILocation(line: 434, column: 7, scope: !11275)
!11280 = !DILocation(line: 433, column: 35, scope: !11275)
!11281 = !DILocation(line: 431, column: 46, scope: !11270)
!11282 = !DILocation(line: 431, column: 3, scope: !11270)
!11283 = distinct !{!11283, !11273, !11284}
!11284 = !DILocation(line: 434, column: 14, scope: !11267)
!11285 = !DILocation(line: 436, column: 3, scope: !11257)
!11286 = !DILocation(line: 437, column: 1, scope: !11257)
!11287 = distinct !DISubprogram(name: "lambda_vector_new", scope: !2216, file: !2216, line: 240, type: !11288, scopeLine: 241, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11288 = !DISubroutineType(types: !11289)
!11289 = !{!2227, !908}
!11290 = !DILocalVariable(name: "size", arg: 1, scope: !11287, file: !2216, line: 240, type: !908)
!11291 = !DILocation(line: 240, column: 24, scope: !11287)
!11292 = !DILocation(line: 242, column: 10, scope: !11287)
!11293 = !DILocation(line: 242, column: 3, scope: !11287)
!11294 = distinct !DISubprogram(name: "save_dist_v", scope: !3, file: !3, line: 2792, type: !11295, scopeLine: 2793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11295 = !DISubroutineType(types: !11296)
!11296 = !{null, !2243, !2227}
!11297 = !DILocalVariable(name: "ddr", arg: 1, scope: !11294, file: !3, line: 2792, type: !2243)
!11298 = !DILocation(line: 2792, column: 47, scope: !11294)
!11299 = !DILocalVariable(name: "dist_v", arg: 2, scope: !11294, file: !3, line: 2792, type: !2227)
!11300 = !DILocation(line: 2792, column: 66, scope: !11294)
!11301 = !DILocalVariable(name: "i", scope: !11294, file: !3, line: 2794, type: !7)
!11302 = !DILocation(line: 2794, column: 12, scope: !11294)
!11303 = !DILocalVariable(name: "v", scope: !11294, file: !3, line: 2795, type: !2227)
!11304 = !DILocation(line: 2795, column: 17, scope: !11294)
!11305 = !DILocation(line: 2797, column: 10, scope: !11306)
!11306 = distinct !DILexicalBlock(scope: !11294, file: !3, line: 2797, column: 3)
!11307 = !DILocation(line: 2797, column: 8, scope: !11306)
!11308 = !DILocation(line: 2797, column: 15, scope: !11309)
!11309 = distinct !DILexicalBlock(scope: !11306, file: !3, line: 2797, column: 3)
!11310 = !DILocation(line: 2797, column: 3, scope: !11306)
!11311 = !DILocation(line: 2798, column: 30, scope: !11312)
!11312 = distinct !DILexicalBlock(scope: !11309, file: !3, line: 2798, column: 9)
!11313 = !DILocation(line: 2798, column: 33, scope: !11312)
!11314 = !DILocation(line: 2798, column: 41, scope: !11312)
!11315 = !DILocation(line: 2798, column: 9, scope: !11312)
!11316 = !DILocation(line: 2798, column: 9, scope: !11309)
!11317 = !DILocation(line: 2799, column: 7, scope: !11312)
!11318 = !DILocation(line: 2798, column: 59, scope: !11312)
!11319 = !DILocation(line: 2797, column: 73, scope: !11309)
!11320 = !DILocation(line: 2797, column: 3, scope: !11309)
!11321 = distinct !{!11321, !11310, !11322}
!11322 = !DILocation(line: 2799, column: 7, scope: !11306)
!11323 = !DILocation(line: 2801, column: 3, scope: !11294)
!11324 = !DILocation(line: 2802, column: 1, scope: !11294)
!11325 = distinct !DISubprogram(name: "constant_access_functions", scope: !3, file: !3, line: 2941, type: !11258, scopeLine: 2942, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11326 = !DILocalVariable(name: "ddr", arg: 1, scope: !11325, file: !3, line: 2941, type: !11260)
!11327 = !DILocation(line: 2941, column: 67, scope: !11325)
!11328 = !DILocalVariable(name: "i", scope: !11325, file: !3, line: 2943, type: !7)
!11329 = !DILocation(line: 2943, column: 12, scope: !11325)
!11330 = !DILocation(line: 2945, column: 10, scope: !11331)
!11331 = distinct !DILexicalBlock(scope: !11325, file: !3, line: 2945, column: 3)
!11332 = !DILocation(line: 2945, column: 8, scope: !11331)
!11333 = !DILocation(line: 2945, column: 15, scope: !11334)
!11334 = distinct !DILexicalBlock(scope: !11331, file: !3, line: 2945, column: 3)
!11335 = !DILocation(line: 2945, column: 19, scope: !11334)
!11336 = !DILocation(line: 2945, column: 17, scope: !11334)
!11337 = !DILocation(line: 2945, column: 3, scope: !11331)
!11338 = !DILocation(line: 2946, column: 44, scope: !11339)
!11339 = distinct !DILexicalBlock(scope: !11334, file: !3, line: 2946, column: 9)
!11340 = !DILocation(line: 2946, column: 10, scope: !11339)
!11341 = !DILocation(line: 2947, column: 2, scope: !11339)
!11342 = !DILocation(line: 2947, column: 40, scope: !11339)
!11343 = !DILocation(line: 2947, column: 6, scope: !11339)
!11344 = !DILocation(line: 2946, column: 9, scope: !11334)
!11345 = !DILocation(line: 2948, column: 7, scope: !11339)
!11346 = !DILocation(line: 2947, column: 69, scope: !11339)
!11347 = !DILocation(line: 2945, column: 46, scope: !11334)
!11348 = !DILocation(line: 2945, column: 3, scope: !11334)
!11349 = distinct !{!11349, !11337, !11350}
!11350 = !DILocation(line: 2948, column: 14, scope: !11331)
!11351 = !DILocation(line: 2950, column: 3, scope: !11325)
!11352 = !DILocation(line: 2951, column: 1, scope: !11325)
!11353 = distinct !DISubprogram(name: "add_distance_for_zero_overlaps", scope: !3, file: !3, line: 3070, type: !3046, scopeLine: 3071, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11354 = !DILocalVariable(name: "ddr", arg: 1, scope: !11353, file: !3, line: 3070, type: !2243)
!11355 = !DILocation(line: 3070, column: 66, scope: !11353)
!11356 = !DILocalVariable(name: "i", scope: !11353, file: !3, line: 3072, type: !7)
!11357 = !DILocation(line: 3072, column: 12, scope: !11353)
!11358 = !DILocalVariable(name: "j", scope: !11353, file: !3, line: 3072, type: !7)
!11359 = !DILocation(line: 3072, column: 15, scope: !11353)
!11360 = !DILocation(line: 3074, column: 10, scope: !11361)
!11361 = distinct !DILexicalBlock(scope: !11353, file: !3, line: 3074, column: 3)
!11362 = !DILocation(line: 3074, column: 8, scope: !11361)
!11363 = !DILocation(line: 3074, column: 15, scope: !11364)
!11364 = distinct !DILexicalBlock(scope: !11361, file: !3, line: 3074, column: 3)
!11365 = !DILocation(line: 3074, column: 19, scope: !11364)
!11366 = !DILocation(line: 3074, column: 17, scope: !11364)
!11367 = !DILocation(line: 3074, column: 3, scope: !11361)
!11368 = !DILocalVariable(name: "sub", scope: !11369, file: !3, line: 3076, type: !2262)
!11369 = distinct !DILexicalBlock(scope: !11364, file: !3, line: 3075, column: 5)
!11370 = !DILocation(line: 3076, column: 19, scope: !11369)
!11371 = !DILocation(line: 3076, column: 25, scope: !11369)
!11372 = !DILocalVariable(name: "ca", scope: !11369, file: !3, line: 3077, type: !2267)
!11373 = !DILocation(line: 3077, column: 26, scope: !11369)
!11374 = !DILocation(line: 3077, column: 31, scope: !11369)
!11375 = !DILocalVariable(name: "cb", scope: !11369, file: !3, line: 3078, type: !2267)
!11376 = !DILocation(line: 3078, column: 26, scope: !11369)
!11377 = !DILocation(line: 3078, column: 31, scope: !11369)
!11378 = !DILocation(line: 3080, column: 14, scope: !11379)
!11379 = distinct !DILexicalBlock(scope: !11369, file: !3, line: 3080, column: 7)
!11380 = !DILocation(line: 3080, column: 12, scope: !11379)
!11381 = !DILocation(line: 3080, column: 19, scope: !11382)
!11382 = distinct !DILexicalBlock(scope: !11379, file: !3, line: 3080, column: 7)
!11383 = !DILocation(line: 3080, column: 23, scope: !11382)
!11384 = !DILocation(line: 3080, column: 27, scope: !11382)
!11385 = !DILocation(line: 3080, column: 21, scope: !11382)
!11386 = !DILocation(line: 3080, column: 7, scope: !11379)
!11387 = !DILocation(line: 3081, column: 30, scope: !11388)
!11388 = distinct !DILexicalBlock(scope: !11382, file: !3, line: 3081, column: 6)
!11389 = !DILocation(line: 3081, column: 34, scope: !11388)
!11390 = !DILocation(line: 3081, column: 38, scope: !11388)
!11391 = !DILocation(line: 3081, column: 6, scope: !11388)
!11392 = !DILocation(line: 3081, column: 6, scope: !11382)
!11393 = !DILocation(line: 3083, column: 41, scope: !11394)
!11394 = distinct !DILexicalBlock(scope: !11388, file: !3, line: 3082, column: 4)
!11395 = !DILocation(line: 3083, column: 6, scope: !11394)
!11396 = !DILocation(line: 3084, column: 6, scope: !11394)
!11397 = !DILocation(line: 3081, column: 40, scope: !11388)
!11398 = !DILocation(line: 3080, column: 31, scope: !11382)
!11399 = !DILocation(line: 3080, column: 7, scope: !11382)
!11400 = distinct !{!11400, !11386, !11401}
!11401 = !DILocation(line: 3085, column: 4, scope: !11379)
!11402 = !DILocation(line: 3087, column: 14, scope: !11403)
!11403 = distinct !DILexicalBlock(scope: !11369, file: !3, line: 3087, column: 7)
!11404 = !DILocation(line: 3087, column: 12, scope: !11403)
!11405 = !DILocation(line: 3087, column: 19, scope: !11406)
!11406 = distinct !DILexicalBlock(scope: !11403, file: !3, line: 3087, column: 7)
!11407 = !DILocation(line: 3087, column: 23, scope: !11406)
!11408 = !DILocation(line: 3087, column: 27, scope: !11406)
!11409 = !DILocation(line: 3087, column: 21, scope: !11406)
!11410 = !DILocation(line: 3087, column: 7, scope: !11403)
!11411 = !DILocation(line: 3088, column: 30, scope: !11412)
!11412 = distinct !DILexicalBlock(scope: !11406, file: !3, line: 3088, column: 6)
!11413 = !DILocation(line: 3088, column: 34, scope: !11412)
!11414 = !DILocation(line: 3088, column: 38, scope: !11412)
!11415 = !DILocation(line: 3088, column: 6, scope: !11412)
!11416 = !DILocation(line: 3088, column: 6, scope: !11406)
!11417 = !DILocation(line: 3090, column: 41, scope: !11418)
!11418 = distinct !DILexicalBlock(scope: !11412, file: !3, line: 3089, column: 4)
!11419 = !DILocation(line: 3090, column: 6, scope: !11418)
!11420 = !DILocation(line: 3091, column: 6, scope: !11418)
!11421 = !DILocation(line: 3088, column: 40, scope: !11412)
!11422 = !DILocation(line: 3087, column: 31, scope: !11406)
!11423 = !DILocation(line: 3087, column: 7, scope: !11406)
!11424 = distinct !{!11424, !11410, !11425}
!11425 = !DILocation(line: 3092, column: 4, scope: !11403)
!11426 = !DILocation(line: 3093, column: 5, scope: !11369)
!11427 = !DILocation(line: 3074, column: 46, scope: !11364)
!11428 = !DILocation(line: 3074, column: 3, scope: !11364)
!11429 = distinct !{!11429, !11367, !11430}
!11430 = !DILocation(line: 3093, column: 5, scope: !11361)
!11431 = !DILocation(line: 3094, column: 1, scope: !11353)
!11432 = distinct !DISubprogram(name: "add_other_self_distances", scope: !3, file: !3, line: 3005, type: !3046, scopeLine: 3006, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11433 = !DILocalVariable(name: "ddr", arg: 1, scope: !11432, file: !3, line: 3005, type: !2243)
!11434 = !DILocation(line: 3005, column: 60, scope: !11432)
!11435 = !DILocalVariable(name: "dist_v", scope: !11432, file: !3, line: 3007, type: !2227)
!11436 = !DILocation(line: 3007, column: 17, scope: !11432)
!11437 = !DILocalVariable(name: "i", scope: !11432, file: !3, line: 3008, type: !7)
!11438 = !DILocation(line: 3008, column: 12, scope: !11432)
!11439 = !DILocalVariable(name: "index_carry", scope: !11432, file: !3, line: 3009, type: !908)
!11440 = !DILocation(line: 3009, column: 7, scope: !11432)
!11441 = !DILocation(line: 3009, column: 21, scope: !11432)
!11442 = !DILocation(line: 3011, column: 10, scope: !11443)
!11443 = distinct !DILexicalBlock(scope: !11432, file: !3, line: 3011, column: 3)
!11444 = !DILocation(line: 3011, column: 8, scope: !11443)
!11445 = !DILocation(line: 3011, column: 15, scope: !11446)
!11446 = distinct !DILexicalBlock(scope: !11443, file: !3, line: 3011, column: 3)
!11447 = !DILocation(line: 3011, column: 19, scope: !11446)
!11448 = !DILocation(line: 3011, column: 17, scope: !11446)
!11449 = !DILocation(line: 3011, column: 3, scope: !11443)
!11450 = !DILocalVariable(name: "access_fun", scope: !11451, file: !3, line: 3013, type: !811)
!11451 = distinct !DILexicalBlock(scope: !11446, file: !3, line: 3012, column: 5)
!11452 = !DILocation(line: 3013, column: 12, scope: !11451)
!11453 = !DILocation(line: 3013, column: 25, scope: !11451)
!11454 = !DILocation(line: 3015, column: 11, scope: !11455)
!11455 = distinct !DILexicalBlock(scope: !11451, file: !3, line: 3015, column: 11)
!11456 = !DILocation(line: 3015, column: 34, scope: !11455)
!11457 = !DILocation(line: 3015, column: 11, scope: !11451)
!11458 = !DILocation(line: 3017, column: 45, scope: !11459)
!11459 = distinct !DILexicalBlock(scope: !11460, file: !3, line: 3017, column: 8)
!11460 = distinct !DILexicalBlock(scope: !11455, file: !3, line: 3016, column: 2)
!11461 = !DILocation(line: 3017, column: 9, scope: !11459)
!11462 = !DILocation(line: 3017, column: 8, scope: !11460)
!11463 = !DILocation(line: 3019, column: 12, scope: !11464)
!11464 = distinct !DILexicalBlock(scope: !11465, file: !3, line: 3019, column: 12)
!11465 = distinct !DILexicalBlock(scope: !11459, file: !3, line: 3018, column: 6)
!11466 = !DILocation(line: 3019, column: 37, scope: !11464)
!11467 = !DILocation(line: 3019, column: 12, scope: !11465)
!11468 = !DILocation(line: 3021, column: 31, scope: !11469)
!11469 = distinct !DILexicalBlock(scope: !11464, file: !3, line: 3020, column: 3)
!11470 = !DILocation(line: 3021, column: 5, scope: !11469)
!11471 = !DILocation(line: 3021, column: 29, scope: !11469)
!11472 = !DILocation(line: 3022, column: 5, scope: !11469)
!11473 = !DILocation(line: 3025, column: 21, scope: !11465)
!11474 = !DILocation(line: 3025, column: 19, scope: !11465)
!11475 = !DILocation(line: 3027, column: 12, scope: !11476)
!11476 = distinct !DILexicalBlock(scope: !11465, file: !3, line: 3027, column: 12)
!11477 = !DILocation(line: 3027, column: 48, scope: !11476)
!11478 = !DILocation(line: 3027, column: 12, scope: !11465)
!11479 = !DILocation(line: 3028, column: 31, scope: !11476)
!11480 = !DILocation(line: 3028, column: 36, scope: !11476)
!11481 = !DILocation(line: 3028, column: 3, scope: !11476)
!11482 = !DILocation(line: 3034, column: 3, scope: !11476)
!11483 = !DILocation(line: 3034, column: 22, scope: !11476)
!11484 = !DILocation(line: 3036, column: 8, scope: !11465)
!11485 = !DILocation(line: 3039, column: 18, scope: !11460)
!11486 = !DILocation(line: 3039, column: 16, scope: !11460)
!11487 = !DILocation(line: 3042, column: 2, scope: !11460)
!11488 = !DILocation(line: 3043, column: 5, scope: !11451)
!11489 = !DILocation(line: 3011, column: 46, scope: !11446)
!11490 = !DILocation(line: 3011, column: 3, scope: !11446)
!11491 = distinct !{!11491, !11449, !11492}
!11492 = !DILocation(line: 3043, column: 5, scope: !11443)
!11493 = !DILocation(line: 3045, column: 31, scope: !11432)
!11494 = !DILocation(line: 3045, column: 12, scope: !11432)
!11495 = !DILocation(line: 3045, column: 10, scope: !11432)
!11496 = !DILocation(line: 3046, column: 24, scope: !11432)
!11497 = !DILocation(line: 3046, column: 29, scope: !11432)
!11498 = !DILocation(line: 3046, column: 37, scope: !11432)
!11499 = !DILocation(line: 3046, column: 3, scope: !11432)
!11500 = !DILocation(line: 3047, column: 1, scope: !11432)
!11501 = distinct !DISubprogram(name: "build_classic_dist_vector_1", scope: !3, file: !3, line: 2854, type: !11502, scopeLine: 2859, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11502 = !DISubroutineType(types: !11503)
!11503 = !{!931, !2243, !2171, !2171, !2227, !7729, !2228}
!11504 = !DILocalVariable(name: "ddr", arg: 1, scope: !11501, file: !3, line: 2854, type: !2243)
!11505 = !DILocation(line: 2854, column: 63, scope: !11501)
!11506 = !DILocalVariable(name: "ddr_a", arg: 2, scope: !11501, file: !3, line: 2855, type: !2171)
!11507 = !DILocation(line: 2855, column: 32, scope: !11501)
!11508 = !DILocalVariable(name: "ddr_b", arg: 3, scope: !11501, file: !3, line: 2856, type: !2171)
!11509 = !DILocation(line: 2856, column: 32, scope: !11501)
!11510 = !DILocalVariable(name: "dist_v", arg: 4, scope: !11501, file: !3, line: 2857, type: !2227)
!11511 = !DILocation(line: 2857, column: 23, scope: !11501)
!11512 = !DILocalVariable(name: "init_b", arg: 5, scope: !11501, file: !3, line: 2857, type: !7729)
!11513 = !DILocation(line: 2857, column: 37, scope: !11501)
!11514 = !DILocalVariable(name: "index_carry", arg: 6, scope: !11501, file: !3, line: 2858, type: !2228)
!11515 = !DILocation(line: 2858, column: 14, scope: !11501)
!11516 = !DILocalVariable(name: "i", scope: !11501, file: !3, line: 2860, type: !7)
!11517 = !DILocation(line: 2860, column: 12, scope: !11501)
!11518 = !DILocalVariable(name: "init_v", scope: !11501, file: !3, line: 2861, type: !2227)
!11519 = !DILocation(line: 2861, column: 17, scope: !11501)
!11520 = !DILocation(line: 2861, column: 45, scope: !11501)
!11521 = !DILocation(line: 2861, column: 26, scope: !11501)
!11522 = !DILocation(line: 2863, column: 10, scope: !11523)
!11523 = distinct !DILexicalBlock(scope: !11501, file: !3, line: 2863, column: 3)
!11524 = !DILocation(line: 2863, column: 8, scope: !11523)
!11525 = !DILocation(line: 2863, column: 15, scope: !11526)
!11526 = distinct !DILexicalBlock(scope: !11523, file: !3, line: 2863, column: 3)
!11527 = !DILocation(line: 2863, column: 19, scope: !11526)
!11528 = !DILocation(line: 2863, column: 17, scope: !11526)
!11529 = !DILocation(line: 2863, column: 3, scope: !11523)
!11530 = !DILocalVariable(name: "access_fn_a", scope: !11531, file: !3, line: 2865, type: !811)
!11531 = distinct !DILexicalBlock(scope: !11526, file: !3, line: 2864, column: 5)
!11532 = !DILocation(line: 2865, column: 12, scope: !11531)
!11533 = !DILocalVariable(name: "access_fn_b", scope: !11531, file: !3, line: 2865, type: !811)
!11534 = !DILocation(line: 2865, column: 25, scope: !11531)
!11535 = !DILocalVariable(name: "subscript", scope: !11531, file: !3, line: 2866, type: !2263)
!11536 = !DILocation(line: 2866, column: 25, scope: !11531)
!11537 = !DILocation(line: 2866, column: 37, scope: !11531)
!11538 = !DILocation(line: 2868, column: 40, scope: !11539)
!11539 = distinct !DILexicalBlock(scope: !11531, file: !3, line: 2868, column: 11)
!11540 = !DILocation(line: 2868, column: 11, scope: !11539)
!11541 = !DILocation(line: 2868, column: 11, scope: !11531)
!11542 = !DILocation(line: 2870, column: 36, scope: !11543)
!11543 = distinct !DILexicalBlock(scope: !11539, file: !3, line: 2869, column: 2)
!11544 = !DILocation(line: 2870, column: 4, scope: !11543)
!11545 = !DILocation(line: 2871, column: 4, scope: !11543)
!11546 = !DILocation(line: 2874, column: 21, scope: !11531)
!11547 = !DILocation(line: 2874, column: 19, scope: !11531)
!11548 = !DILocation(line: 2875, column: 21, scope: !11531)
!11549 = !DILocation(line: 2875, column: 19, scope: !11531)
!11550 = !DILocation(line: 2877, column: 11, scope: !11551)
!11551 = distinct !DILexicalBlock(scope: !11531, file: !3, line: 2877, column: 11)
!11552 = !DILocation(line: 2877, column: 35, scope: !11551)
!11553 = !DILocation(line: 2878, column: 4, scope: !11551)
!11554 = !DILocation(line: 2878, column: 7, scope: !11551)
!11555 = !DILocation(line: 2878, column: 31, scope: !11551)
!11556 = !DILocation(line: 2877, column: 11, scope: !11531)
!11557 = !DILocalVariable(name: "dist", scope: !11558, file: !3, line: 2880, type: !908)
!11558 = distinct !DILexicalBlock(scope: !11551, file: !3, line: 2879, column: 2)
!11559 = !DILocation(line: 2880, column: 8, scope: !11558)
!11560 = !DILocalVariable(name: "index", scope: !11558, file: !3, line: 2880, type: !908)
!11561 = !DILocation(line: 2880, column: 14, scope: !11558)
!11562 = !DILocalVariable(name: "index_a", scope: !11558, file: !3, line: 2881, type: !908)
!11563 = !DILocation(line: 2881, column: 8, scope: !11558)
!11564 = !DILocation(line: 2881, column: 38, scope: !11558)
!11565 = !DILocation(line: 2882, column: 10, scope: !11558)
!11566 = !DILocation(line: 2881, column: 18, scope: !11558)
!11567 = !DILocalVariable(name: "index_b", scope: !11558, file: !3, line: 2883, type: !908)
!11568 = !DILocation(line: 2883, column: 8, scope: !11558)
!11569 = !DILocation(line: 2883, column: 38, scope: !11558)
!11570 = !DILocation(line: 2884, column: 10, scope: !11558)
!11571 = !DILocation(line: 2883, column: 18, scope: !11558)
!11572 = !DILocation(line: 2894, column: 12, scope: !11558)
!11573 = !DILocation(line: 2894, column: 22, scope: !11558)
!11574 = !DILocation(line: 2894, column: 20, scope: !11558)
!11575 = !DILocation(line: 2894, column: 32, scope: !11558)
!11576 = !DILocation(line: 2894, column: 42, scope: !11558)
!11577 = !DILocation(line: 2894, column: 10, scope: !11558)
!11578 = !DILocation(line: 2895, column: 19, scope: !11558)
!11579 = !DILocation(line: 2895, column: 5, scope: !11558)
!11580 = !DILocation(line: 2895, column: 17, scope: !11558)
!11581 = !DILocation(line: 2897, column: 37, scope: !11582)
!11582 = distinct !DILexicalBlock(scope: !11558, file: !3, line: 2897, column: 8)
!11583 = !DILocation(line: 2897, column: 8, scope: !11582)
!11584 = !DILocation(line: 2897, column: 8, scope: !11558)
!11585 = !DILocation(line: 2899, column: 40, scope: !11586)
!11586 = distinct !DILexicalBlock(scope: !11582, file: !3, line: 2898, column: 6)
!11587 = !DILocation(line: 2899, column: 8, scope: !11586)
!11588 = !DILocation(line: 2900, column: 8, scope: !11586)
!11589 = !DILocation(line: 2903, column: 26, scope: !11558)
!11590 = !DILocation(line: 2903, column: 11, scope: !11558)
!11591 = !DILocation(line: 2903, column: 9, scope: !11558)
!11592 = !DILocation(line: 2915, column: 8, scope: !11593)
!11593 = distinct !DILexicalBlock(scope: !11558, file: !3, line: 2915, column: 8)
!11594 = !DILocation(line: 2915, column: 15, scope: !11593)
!11595 = !DILocation(line: 2915, column: 22, scope: !11593)
!11596 = !DILocation(line: 2915, column: 27, scope: !11593)
!11597 = !DILocation(line: 2915, column: 30, scope: !11593)
!11598 = !DILocation(line: 2915, column: 37, scope: !11593)
!11599 = !DILocation(line: 2915, column: 47, scope: !11593)
!11600 = !DILocation(line: 2915, column: 44, scope: !11593)
!11601 = !DILocation(line: 2915, column: 8, scope: !11558)
!11602 = !DILocation(line: 2917, column: 32, scope: !11603)
!11603 = distinct !DILexicalBlock(scope: !11593, file: !3, line: 2916, column: 6)
!11604 = !DILocation(line: 2917, column: 37, scope: !11603)
!11605 = !DILocation(line: 2917, column: 8, scope: !11603)
!11606 = !DILocation(line: 2918, column: 8, scope: !11603)
!11607 = !DILocation(line: 2921, column: 20, scope: !11558)
!11608 = !DILocation(line: 2921, column: 4, scope: !11558)
!11609 = !DILocation(line: 2921, column: 11, scope: !11558)
!11610 = !DILocation(line: 2921, column: 18, scope: !11558)
!11611 = !DILocation(line: 2922, column: 4, scope: !11558)
!11612 = !DILocation(line: 2922, column: 11, scope: !11558)
!11613 = !DILocation(line: 2922, column: 18, scope: !11558)
!11614 = !DILocation(line: 2923, column: 5, scope: !11558)
!11615 = !DILocation(line: 2923, column: 12, scope: !11558)
!11616 = !DILocation(line: 2924, column: 2, scope: !11558)
!11617 = !DILocation(line: 2925, column: 34, scope: !11618)
!11618 = distinct !DILexicalBlock(scope: !11551, file: !3, line: 2925, column: 16)
!11619 = !DILocation(line: 2925, column: 47, scope: !11618)
!11620 = !DILocation(line: 2925, column: 17, scope: !11618)
!11621 = !DILocation(line: 2925, column: 16, scope: !11551)
!11622 = !DILocation(line: 2930, column: 36, scope: !11623)
!11623 = distinct !DILexicalBlock(scope: !11618, file: !3, line: 2926, column: 2)
!11624 = !DILocation(line: 2930, column: 4, scope: !11623)
!11625 = !DILocation(line: 2931, column: 4, scope: !11623)
!11626 = !DILocation(line: 2933, column: 5, scope: !11531)
!11627 = !DILocation(line: 2863, column: 46, scope: !11526)
!11628 = !DILocation(line: 2863, column: 3, scope: !11526)
!11629 = distinct !{!11629, !11529, !11630}
!11630 = !DILocation(line: 2933, column: 5, scope: !11523)
!11631 = !DILocation(line: 2935, column: 3, scope: !11501)
!11632 = !DILocation(line: 2936, column: 1, scope: !11501)
!11633 = distinct !DISubprogram(name: "lambda_vector_lexico_pos", scope: !2216, file: !2216, line: 465, type: !11634, scopeLine: 467, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11634 = !DISubroutineType(types: !11635)
!11635 = !{!931, !2227, !7}
!11636 = !DILocalVariable(name: "v", arg: 1, scope: !11633, file: !2216, line: 465, type: !2227)
!11637 = !DILocation(line: 465, column: 41, scope: !11633)
!11638 = !DILocalVariable(name: "n", arg: 2, scope: !11633, file: !2216, line: 466, type: !7)
!11639 = !DILocation(line: 466, column: 15, scope: !11633)
!11640 = !DILocalVariable(name: "i", scope: !11633, file: !2216, line: 468, type: !7)
!11641 = !DILocation(line: 468, column: 12, scope: !11633)
!11642 = !DILocation(line: 469, column: 10, scope: !11643)
!11643 = distinct !DILexicalBlock(scope: !11633, file: !2216, line: 469, column: 3)
!11644 = !DILocation(line: 469, column: 8, scope: !11643)
!11645 = !DILocation(line: 469, column: 15, scope: !11646)
!11646 = distinct !DILexicalBlock(scope: !11643, file: !2216, line: 469, column: 3)
!11647 = !DILocation(line: 469, column: 19, scope: !11646)
!11648 = !DILocation(line: 469, column: 17, scope: !11646)
!11649 = !DILocation(line: 469, column: 3, scope: !11643)
!11650 = !DILocation(line: 471, column: 11, scope: !11651)
!11651 = distinct !DILexicalBlock(scope: !11652, file: !2216, line: 471, column: 11)
!11652 = distinct !DILexicalBlock(scope: !11646, file: !2216, line: 470, column: 5)
!11653 = !DILocation(line: 471, column: 13, scope: !11651)
!11654 = !DILocation(line: 471, column: 16, scope: !11651)
!11655 = !DILocation(line: 471, column: 11, scope: !11652)
!11656 = !DILocation(line: 472, column: 2, scope: !11651)
!11657 = !DILocation(line: 473, column: 11, scope: !11658)
!11658 = distinct !DILexicalBlock(scope: !11652, file: !2216, line: 473, column: 11)
!11659 = !DILocation(line: 473, column: 13, scope: !11658)
!11660 = !DILocation(line: 473, column: 16, scope: !11658)
!11661 = !DILocation(line: 473, column: 11, scope: !11652)
!11662 = !DILocation(line: 474, column: 2, scope: !11658)
!11663 = !DILocation(line: 475, column: 11, scope: !11664)
!11664 = distinct !DILexicalBlock(scope: !11652, file: !2216, line: 475, column: 11)
!11665 = !DILocation(line: 475, column: 13, scope: !11664)
!11666 = !DILocation(line: 475, column: 16, scope: !11664)
!11667 = !DILocation(line: 475, column: 11, scope: !11652)
!11668 = !DILocation(line: 476, column: 2, scope: !11664)
!11669 = !DILocation(line: 477, column: 5, scope: !11652)
!11670 = !DILocation(line: 469, column: 23, scope: !11646)
!11671 = !DILocation(line: 469, column: 3, scope: !11646)
!11672 = distinct !{!11672, !11649, !11673}
!11673 = !DILocation(line: 477, column: 5, scope: !11643)
!11674 = !DILocation(line: 478, column: 3, scope: !11633)
!11675 = !DILocation(line: 479, column: 1, scope: !11633)
!11676 = distinct !DISubprogram(name: "add_outer_distances", scope: !3, file: !3, line: 2834, type: !11677, scopeLine: 2836, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11677 = !DISubroutineType(types: !11678)
!11678 = !{null, !2243, !2227, !908}
!11679 = !DILocalVariable(name: "ddr", arg: 1, scope: !11676, file: !3, line: 2834, type: !2243)
!11680 = !DILocation(line: 2834, column: 55, scope: !11676)
!11681 = !DILocalVariable(name: "dist_v", arg: 2, scope: !11676, file: !3, line: 2835, type: !2227)
!11682 = !DILocation(line: 2835, column: 22, scope: !11676)
!11683 = !DILocalVariable(name: "index", arg: 3, scope: !11676, file: !3, line: 2835, type: !908)
!11684 = !DILocation(line: 2835, column: 34, scope: !11676)
!11685 = !DILocation(line: 2839, column: 3, scope: !11676)
!11686 = !DILocation(line: 2839, column: 10, scope: !11676)
!11687 = !DILocation(line: 2839, column: 18, scope: !11676)
!11688 = !DILocalVariable(name: "save_v", scope: !11689, file: !3, line: 2841, type: !2227)
!11689 = distinct !DILexicalBlock(scope: !11676, file: !3, line: 2840, column: 5)
!11690 = !DILocation(line: 2841, column: 21, scope: !11689)
!11691 = !DILocation(line: 2841, column: 49, scope: !11689)
!11692 = !DILocation(line: 2841, column: 30, scope: !11689)
!11693 = !DILocation(line: 2842, column: 27, scope: !11689)
!11694 = !DILocation(line: 2842, column: 35, scope: !11689)
!11695 = !DILocation(line: 2842, column: 43, scope: !11689)
!11696 = !DILocation(line: 2842, column: 7, scope: !11689)
!11697 = !DILocation(line: 2843, column: 7, scope: !11689)
!11698 = !DILocation(line: 2843, column: 14, scope: !11689)
!11699 = !DILocation(line: 2843, column: 21, scope: !11689)
!11700 = !DILocation(line: 2844, column: 20, scope: !11689)
!11701 = !DILocation(line: 2844, column: 25, scope: !11689)
!11702 = !DILocation(line: 2844, column: 7, scope: !11689)
!11703 = distinct !{!11703, !11685, !11704}
!11704 = !DILocation(line: 2845, column: 5, scope: !11676)
!11705 = !DILocation(line: 2846, column: 1, scope: !11676)
!11706 = distinct !DISubprogram(name: "lambda_vector_copy", scope: !2216, file: !2216, line: 298, type: !11707, scopeLine: 300, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11707 = !DISubroutineType(types: !11708)
!11708 = !{null, !2227, !2227, !908}
!11709 = !DILocalVariable(name: "vec1", arg: 1, scope: !11706, file: !2216, line: 298, type: !2227)
!11710 = !DILocation(line: 298, column: 35, scope: !11706)
!11711 = !DILocalVariable(name: "vec2", arg: 2, scope: !11706, file: !2216, line: 298, type: !2227)
!11712 = !DILocation(line: 298, column: 55, scope: !11706)
!11713 = !DILocalVariable(name: "size", arg: 3, scope: !11706, file: !2216, line: 299, type: !908)
!11714 = !DILocation(line: 299, column: 11, scope: !11706)
!11715 = !DILocation(line: 301, column: 11, scope: !11706)
!11716 = !DILocation(line: 301, column: 3, scope: !11706)
!11717 = !DILocation(line: 301, column: 17, scope: !11706)
!11718 = !DILocation(line: 301, column: 23, scope: !11706)
!11719 = !DILocation(line: 301, column: 28, scope: !11706)
!11720 = !DILocation(line: 302, column: 1, scope: !11706)
!11721 = distinct !DISubprogram(name: "lambda_vector_first_nz", scope: !2216, file: !2216, line: 361, type: !11722, scopeLine: 362, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11722 = !DISubroutineType(types: !11723)
!11723 = !{!908, !2227, !908, !908}
!11724 = !DILocalVariable(name: "vec1", arg: 1, scope: !11721, file: !2216, line: 361, type: !2227)
!11725 = !DILocation(line: 361, column: 39, scope: !11721)
!11726 = !DILocalVariable(name: "n", arg: 2, scope: !11721, file: !2216, line: 361, type: !908)
!11727 = !DILocation(line: 361, column: 49, scope: !11721)
!11728 = !DILocalVariable(name: "start", arg: 3, scope: !11721, file: !2216, line: 361, type: !908)
!11729 = !DILocation(line: 361, column: 56, scope: !11721)
!11730 = !DILocalVariable(name: "j", scope: !11721, file: !2216, line: 363, type: !908)
!11731 = !DILocation(line: 363, column: 7, scope: !11721)
!11732 = !DILocation(line: 363, column: 11, scope: !11721)
!11733 = !DILocation(line: 364, column: 3, scope: !11721)
!11734 = !DILocation(line: 364, column: 10, scope: !11721)
!11735 = !DILocation(line: 364, column: 14, scope: !11721)
!11736 = !DILocation(line: 364, column: 12, scope: !11721)
!11737 = !DILocation(line: 364, column: 16, scope: !11721)
!11738 = !DILocation(line: 364, column: 19, scope: !11721)
!11739 = !DILocation(line: 364, column: 24, scope: !11721)
!11740 = !DILocation(line: 364, column: 27, scope: !11721)
!11741 = !DILocation(line: 0, scope: !11721)
!11742 = !DILocation(line: 365, column: 6, scope: !11721)
!11743 = distinct !{!11743, !11733, !11742}
!11744 = !DILocation(line: 366, column: 10, scope: !11721)
!11745 = !DILocation(line: 366, column: 3, scope: !11721)
!11746 = distinct !DISubprogram(name: "lambda_vector_equal", scope: !2216, file: !2216, line: 327, type: !11747, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11747 = !DISubroutineType(types: !11748)
!11748 = !{!931, !2227, !2227, !908}
!11749 = !DILocalVariable(name: "vec1", arg: 1, scope: !11746, file: !2216, line: 327, type: !2227)
!11750 = !DILocation(line: 327, column: 36, scope: !11746)
!11751 = !DILocalVariable(name: "vec2", arg: 2, scope: !11746, file: !2216, line: 327, type: !2227)
!11752 = !DILocation(line: 327, column: 56, scope: !11746)
!11753 = !DILocalVariable(name: "size", arg: 3, scope: !11746, file: !2216, line: 327, type: !908)
!11754 = !DILocation(line: 327, column: 66, scope: !11746)
!11755 = !DILocalVariable(name: "i", scope: !11746, file: !2216, line: 329, type: !908)
!11756 = !DILocation(line: 329, column: 7, scope: !11746)
!11757 = !DILocation(line: 330, column: 10, scope: !11758)
!11758 = distinct !DILexicalBlock(scope: !11746, file: !2216, line: 330, column: 3)
!11759 = !DILocation(line: 330, column: 8, scope: !11758)
!11760 = !DILocation(line: 330, column: 15, scope: !11761)
!11761 = distinct !DILexicalBlock(scope: !11758, file: !2216, line: 330, column: 3)
!11762 = !DILocation(line: 330, column: 19, scope: !11761)
!11763 = !DILocation(line: 330, column: 17, scope: !11761)
!11764 = !DILocation(line: 330, column: 3, scope: !11758)
!11765 = !DILocation(line: 331, column: 9, scope: !11766)
!11766 = distinct !DILexicalBlock(scope: !11761, file: !2216, line: 331, column: 9)
!11767 = !DILocation(line: 331, column: 14, scope: !11766)
!11768 = !DILocation(line: 331, column: 20, scope: !11766)
!11769 = !DILocation(line: 331, column: 25, scope: !11766)
!11770 = !DILocation(line: 331, column: 17, scope: !11766)
!11771 = !DILocation(line: 331, column: 9, scope: !11761)
!11772 = !DILocation(line: 332, column: 7, scope: !11766)
!11773 = !DILocation(line: 331, column: 26, scope: !11766)
!11774 = !DILocation(line: 330, column: 26, scope: !11761)
!11775 = !DILocation(line: 330, column: 3, scope: !11761)
!11776 = distinct !{!11776, !11764, !11777}
!11777 = !DILocation(line: 332, column: 14, scope: !11758)
!11778 = !DILocation(line: 333, column: 3, scope: !11746)
!11779 = !DILocation(line: 334, column: 1, scope: !11746)
!11780 = distinct !DISubprogram(name: "VEC_lambda_vector_heap_safe_push", scope: !2216, file: !2216, line: 33, type: !11781, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11781 = !DISubroutineType(types: !11782)
!11782 = !{!2980, !5853, !2227}
!11783 = !DILocalVariable(name: "vec_", arg: 1, scope: !11780, file: !2216, line: 33, type: !5853)
!11784 = !DILocation(line: 33, column: 1, scope: !11780)
!11785 = !DILocalVariable(name: "obj_", arg: 2, scope: !11780, file: !2216, line: 33, type: !2227)
!11786 = distinct !DISubprogram(name: "VEC_lambda_vector_heap_reserve", scope: !2216, file: !2216, line: 33, type: !11787, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11787 = !DISubroutineType(types: !11788)
!11788 = !{!908, !5853, !908}
!11789 = !DILocalVariable(name: "vec_", arg: 1, scope: !11786, file: !2216, line: 33, type: !5853)
!11790 = !DILocation(line: 33, column: 1, scope: !11786)
!11791 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11786, file: !2216, line: 33, type: !908)
!11792 = !DILocalVariable(name: "extend", scope: !11786, file: !2216, line: 33, type: !908)
!11793 = !DILocation(line: 33, column: 1, scope: !11794)
!11794 = distinct !DILexicalBlock(scope: !11786, file: !2216, line: 33, column: 1)
!11795 = distinct !DISubprogram(name: "VEC_lambda_vector_base_quick_push", scope: !2216, file: !2216, line: 32, type: !11796, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11796 = !DISubroutineType(types: !11797)
!11797 = !{!2980, !11798, !2227}
!11798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2220, size: 64)
!11799 = !DILocalVariable(name: "vec_", arg: 1, scope: !11795, file: !2216, line: 32, type: !11798)
!11800 = !DILocation(line: 32, column: 1, scope: !11795)
!11801 = !DILocalVariable(name: "obj_", arg: 2, scope: !11795, file: !2216, line: 32, type: !2227)
!11802 = !DILocalVariable(name: "slot_", scope: !11795, file: !2216, line: 32, type: !2980)
!11803 = distinct !DISubprogram(name: "VEC_lambda_vector_base_space", scope: !2216, file: !2216, line: 32, type: !11804, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11804 = !DISubroutineType(types: !11805)
!11805 = !{!908, !11798, !908}
!11806 = !DILocalVariable(name: "vec_", arg: 1, scope: !11803, file: !2216, line: 32, type: !11798)
!11807 = !DILocation(line: 32, column: 1, scope: !11803)
!11808 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11803, file: !2216, line: 32, type: !908)
!11809 = distinct !DISubprogram(name: "affine_function_zero_p", scope: !3, file: !3, line: 1018, type: !11185, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11810 = !DILocalVariable(name: "fn", arg: 1, scope: !11809, file: !3, line: 1018, type: !2274)
!11811 = !DILocation(line: 1018, column: 35, scope: !11809)
!11812 = !DILocation(line: 1020, column: 48, scope: !11809)
!11813 = !DILocation(line: 1020, column: 26, scope: !11809)
!11814 = !DILocation(line: 1020, column: 11, scope: !11809)
!11815 = !DILocation(line: 1021, column: 4, scope: !11809)
!11816 = !DILocation(line: 1021, column: 35, scope: !11809)
!11817 = !DILocation(line: 1021, column: 7, scope: !11809)
!11818 = !DILocation(line: 0, scope: !11809)
!11819 = !DILocation(line: 1020, column: 10, scope: !11809)
!11820 = !DILocation(line: 1020, column: 3, scope: !11809)
!11821 = distinct !DISubprogram(name: "insert_innermost_unit_dist_vector", scope: !3, file: !3, line: 3050, type: !3046, scopeLine: 3051, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11822 = !DILocalVariable(name: "ddr", arg: 1, scope: !11821, file: !3, line: 3050, type: !2243)
!11823 = !DILocation(line: 3050, column: 69, scope: !11821)
!11824 = !DILocalVariable(name: "dist_v", scope: !11821, file: !3, line: 3052, type: !2227)
!11825 = !DILocation(line: 3052, column: 17, scope: !11821)
!11826 = !DILocation(line: 3052, column: 45, scope: !11821)
!11827 = !DILocation(line: 3052, column: 26, scope: !11821)
!11828 = !DILocation(line: 3054, column: 3, scope: !11821)
!11829 = !DILocation(line: 3054, column: 10, scope: !11821)
!11830 = !DILocation(line: 3054, column: 32, scope: !11821)
!11831 = !DILocation(line: 3055, column: 16, scope: !11821)
!11832 = !DILocation(line: 3055, column: 21, scope: !11821)
!11833 = !DILocation(line: 3055, column: 3, scope: !11821)
!11834 = !DILocation(line: 3056, column: 1, scope: !11821)
!11835 = distinct !DISubprogram(name: "add_multivariate_self_dist", scope: !3, file: !3, line: 2958, type: !8074, scopeLine: 2959, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11836 = !DILocalVariable(name: "ddr", arg: 1, scope: !11835, file: !3, line: 2958, type: !2243)
!11837 = !DILocation(line: 2958, column: 62, scope: !11835)
!11838 = !DILocalVariable(name: "c_2", arg: 2, scope: !11835, file: !3, line: 2958, type: !811)
!11839 = !DILocation(line: 2958, column: 72, scope: !11835)
!11840 = !DILocalVariable(name: "x_1", scope: !11835, file: !3, line: 2960, type: !908)
!11841 = !DILocation(line: 2960, column: 7, scope: !11835)
!11842 = !DILocalVariable(name: "x_2", scope: !11835, file: !3, line: 2960, type: !908)
!11843 = !DILocation(line: 2960, column: 12, scope: !11835)
!11844 = !DILocalVariable(name: "c_1", scope: !11835, file: !3, line: 2961, type: !811)
!11845 = !DILocation(line: 2961, column: 8, scope: !11835)
!11846 = !DILocation(line: 2961, column: 14, scope: !11835)
!11847 = !DILocalVariable(name: "c_0", scope: !11835, file: !3, line: 2962, type: !811)
!11848 = !DILocation(line: 2962, column: 8, scope: !11835)
!11849 = !DILocation(line: 2962, column: 14, scope: !11835)
!11850 = !DILocalVariable(name: "dist_v", scope: !11835, file: !3, line: 2963, type: !2227)
!11851 = !DILocation(line: 2963, column: 17, scope: !11835)
!11852 = !DILocalVariable(name: "v1", scope: !11835, file: !3, line: 2964, type: !908)
!11853 = !DILocation(line: 2964, column: 7, scope: !11835)
!11854 = !DILocalVariable(name: "v2", scope: !11835, file: !3, line: 2964, type: !908)
!11855 = !DILocation(line: 2964, column: 11, scope: !11835)
!11856 = !DILocalVariable(name: "cd", scope: !11835, file: !3, line: 2964, type: !908)
!11857 = !DILocation(line: 2964, column: 15, scope: !11835)
!11858 = !DILocation(line: 2969, column: 7, scope: !11859)
!11859 = distinct !DILexicalBlock(scope: !11835, file: !3, line: 2969, column: 7)
!11860 = !DILocation(line: 2969, column: 23, scope: !11859)
!11861 = !DILocation(line: 2970, column: 7, scope: !11859)
!11862 = !DILocation(line: 2970, column: 10, scope: !11859)
!11863 = !DILocation(line: 2970, column: 40, scope: !11859)
!11864 = !DILocation(line: 2971, column: 7, scope: !11859)
!11865 = !DILocation(line: 2971, column: 10, scope: !11859)
!11866 = !DILocation(line: 2971, column: 40, scope: !11859)
!11867 = !DILocation(line: 2969, column: 7, scope: !11835)
!11868 = !DILocation(line: 2973, column: 7, scope: !11869)
!11869 = distinct !DILexicalBlock(scope: !11859, file: !3, line: 2972, column: 5)
!11870 = !DILocation(line: 2973, column: 26, scope: !11869)
!11871 = !DILocation(line: 2974, column: 7, scope: !11869)
!11872 = !DILocation(line: 2977, column: 29, scope: !11835)
!11873 = !DILocation(line: 2977, column: 51, scope: !11835)
!11874 = !DILocation(line: 2977, column: 9, scope: !11835)
!11875 = !DILocation(line: 2977, column: 7, scope: !11835)
!11876 = !DILocation(line: 2978, column: 29, scope: !11835)
!11877 = !DILocation(line: 2978, column: 51, scope: !11835)
!11878 = !DILocation(line: 2978, column: 9, scope: !11835)
!11879 = !DILocation(line: 2978, column: 7, scope: !11835)
!11880 = !DILocation(line: 2981, column: 31, scope: !11835)
!11881 = !DILocation(line: 2981, column: 12, scope: !11835)
!11882 = !DILocation(line: 2981, column: 10, scope: !11835)
!11883 = !DILocation(line: 2982, column: 23, scope: !11835)
!11884 = !DILocation(line: 2982, column: 8, scope: !11835)
!11885 = !DILocation(line: 2982, column: 6, scope: !11835)
!11886 = !DILocation(line: 2983, column: 23, scope: !11835)
!11887 = !DILocation(line: 2983, column: 8, scope: !11835)
!11888 = !DILocation(line: 2983, column: 6, scope: !11835)
!11889 = !DILocation(line: 2984, column: 13, scope: !11835)
!11890 = !DILocation(line: 2984, column: 17, scope: !11835)
!11891 = !DILocation(line: 2984, column: 8, scope: !11835)
!11892 = !DILocation(line: 2984, column: 6, scope: !11835)
!11893 = !DILocation(line: 2985, column: 9, scope: !11835)
!11894 = !DILocation(line: 2985, column: 6, scope: !11835)
!11895 = !DILocation(line: 2986, column: 9, scope: !11835)
!11896 = !DILocation(line: 2986, column: 6, scope: !11835)
!11897 = !DILocation(line: 2988, column: 7, scope: !11898)
!11898 = distinct !DILexicalBlock(scope: !11835, file: !3, line: 2988, column: 7)
!11899 = !DILocation(line: 2988, column: 10, scope: !11898)
!11900 = !DILocation(line: 2988, column: 7, scope: !11835)
!11901 = !DILocation(line: 2990, column: 13, scope: !11902)
!11902 = distinct !DILexicalBlock(scope: !11898, file: !3, line: 2989, column: 5)
!11903 = !DILocation(line: 2990, column: 12, scope: !11902)
!11904 = !DILocation(line: 2990, column: 10, scope: !11902)
!11905 = !DILocation(line: 2991, column: 13, scope: !11902)
!11906 = !DILocation(line: 2991, column: 12, scope: !11902)
!11907 = !DILocation(line: 2991, column: 10, scope: !11902)
!11908 = !DILocation(line: 2992, column: 5, scope: !11902)
!11909 = !DILocation(line: 2994, column: 17, scope: !11835)
!11910 = !DILocation(line: 2994, column: 3, scope: !11835)
!11911 = !DILocation(line: 2994, column: 10, scope: !11835)
!11912 = !DILocation(line: 2994, column: 15, scope: !11835)
!11913 = !DILocation(line: 2995, column: 18, scope: !11835)
!11914 = !DILocation(line: 2995, column: 17, scope: !11835)
!11915 = !DILocation(line: 2995, column: 3, scope: !11835)
!11916 = !DILocation(line: 2995, column: 10, scope: !11835)
!11917 = !DILocation(line: 2995, column: 15, scope: !11835)
!11918 = !DILocation(line: 2996, column: 16, scope: !11835)
!11919 = !DILocation(line: 2996, column: 21, scope: !11835)
!11920 = !DILocation(line: 2996, column: 3, scope: !11835)
!11921 = !DILocation(line: 2998, column: 24, scope: !11835)
!11922 = !DILocation(line: 2998, column: 29, scope: !11835)
!11923 = !DILocation(line: 2998, column: 37, scope: !11835)
!11924 = !DILocation(line: 2998, column: 3, scope: !11835)
!11925 = !DILocation(line: 2999, column: 1, scope: !11835)
!11926 = distinct !DISubprogram(name: "index_in_loop_nest", scope: !391, file: !391, line: 556, type: !11927, scopeLine: 557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11927 = !DISubroutineType(types: !11928)
!11928 = !{!908, !908, !2206}
!11929 = !DILocalVariable(name: "var", arg: 1, scope: !11926, file: !391, line: 556, type: !908)
!11930 = !DILocation(line: 556, column: 25, scope: !11926)
!11931 = !DILocalVariable(name: "loop_nest", arg: 2, scope: !11926, file: !391, line: 556, type: !2206)
!11932 = !DILocation(line: 556, column: 50, scope: !11926)
!11933 = !DILocalVariable(name: "loopi", scope: !11926, file: !391, line: 558, type: !1357)
!11934 = !DILocation(line: 558, column: 16, scope: !11926)
!11935 = !DILocalVariable(name: "var_index", scope: !11926, file: !391, line: 559, type: !908)
!11936 = !DILocation(line: 559, column: 7, scope: !11926)
!11937 = !DILocation(line: 561, column: 18, scope: !11938)
!11938 = distinct !DILexicalBlock(scope: !11926, file: !391, line: 561, column: 3)
!11939 = !DILocation(line: 561, column: 8, scope: !11938)
!11940 = !DILocation(line: 561, column: 23, scope: !11941)
!11941 = distinct !DILexicalBlock(scope: !11938, file: !391, line: 561, column: 3)
!11942 = !DILocation(line: 561, column: 3, scope: !11938)
!11943 = !DILocation(line: 563, column: 9, scope: !11944)
!11944 = distinct !DILexicalBlock(scope: !11941, file: !391, line: 563, column: 9)
!11945 = !DILocation(line: 563, column: 16, scope: !11944)
!11946 = !DILocation(line: 563, column: 23, scope: !11944)
!11947 = !DILocation(line: 563, column: 20, scope: !11944)
!11948 = !DILocation(line: 563, column: 9, scope: !11941)
!11949 = !DILocation(line: 564, column: 7, scope: !11944)
!11950 = !DILocation(line: 562, column: 17, scope: !11941)
!11951 = !DILocation(line: 561, column: 3, scope: !11941)
!11952 = distinct !{!11952, !11942, !11953}
!11953 = !DILocation(line: 564, column: 7, scope: !11938)
!11954 = !DILocation(line: 566, column: 10, scope: !11926)
!11955 = !DILocation(line: 566, column: 3, scope: !11926)
!11956 = distinct !DISubprogram(name: "non_affine_dependence_relation", scope: !3, file: !3, line: 1498, type: !3046, scopeLine: 1499, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11957 = !DILocalVariable(name: "ddr", arg: 1, scope: !11956, file: !3, line: 1498, type: !2243)
!11958 = !DILocation(line: 1498, column: 66, scope: !11956)
!11959 = !DILocation(line: 1500, column: 7, scope: !11960)
!11960 = distinct !DILexicalBlock(scope: !11956, file: !3, line: 1500, column: 7)
!11961 = !DILocation(line: 1500, column: 17, scope: !11960)
!11962 = !DILocation(line: 1500, column: 21, scope: !11960)
!11963 = !DILocation(line: 1500, column: 32, scope: !11960)
!11964 = !DILocation(line: 1500, column: 7, scope: !11956)
!11965 = !DILocation(line: 1501, column: 14, scope: !11960)
!11966 = !DILocation(line: 1501, column: 5, scope: !11960)
!11967 = !DILocation(line: 1503, column: 3, scope: !11956)
!11968 = !DILocation(line: 1503, column: 22, scope: !11956)
!11969 = !DILocation(line: 1504, column: 1, scope: !11956)
!11970 = distinct !DISubprogram(name: "dir_from_dist", scope: !3, file: !3, line: 3256, type: !11971, scopeLine: 3257, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11971 = !DISubroutineType(types: !11972)
!11972 = !{!390, !908}
!11973 = !DILocalVariable(name: "dist", arg: 1, scope: !11970, file: !3, line: 3256, type: !908)
!11974 = !DILocation(line: 3256, column: 20, scope: !11970)
!11975 = !DILocation(line: 3258, column: 7, scope: !11976)
!11976 = distinct !DILexicalBlock(scope: !11970, file: !3, line: 3258, column: 7)
!11977 = !DILocation(line: 3258, column: 12, scope: !11976)
!11978 = !DILocation(line: 3258, column: 7, scope: !11970)
!11979 = !DILocation(line: 3259, column: 5, scope: !11976)
!11980 = !DILocation(line: 3260, column: 12, scope: !11981)
!11981 = distinct !DILexicalBlock(scope: !11976, file: !3, line: 3260, column: 12)
!11982 = !DILocation(line: 3260, column: 17, scope: !11981)
!11983 = !DILocation(line: 3260, column: 12, scope: !11976)
!11984 = !DILocation(line: 3261, column: 5, scope: !11981)
!11985 = !DILocation(line: 3263, column: 5, scope: !11981)
!11986 = !DILocation(line: 3264, column: 1, scope: !11970)
!11987 = distinct !DISubprogram(name: "save_dir_v", scope: !3, file: !3, line: 2807, type: !11295, scopeLine: 2808, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!11988 = !DILocalVariable(name: "ddr", arg: 1, scope: !11987, file: !3, line: 2807, type: !2243)
!11989 = !DILocation(line: 2807, column: 46, scope: !11987)
!11990 = !DILocalVariable(name: "dir_v", arg: 2, scope: !11987, file: !3, line: 2807, type: !2227)
!11991 = !DILocation(line: 2807, column: 65, scope: !11987)
!11992 = !DILocalVariable(name: "i", scope: !11987, file: !3, line: 2809, type: !7)
!11993 = !DILocation(line: 2809, column: 12, scope: !11987)
!11994 = !DILocalVariable(name: "v", scope: !11987, file: !3, line: 2810, type: !2227)
!11995 = !DILocation(line: 2810, column: 17, scope: !11987)
!11996 = !DILocation(line: 2812, column: 10, scope: !11997)
!11997 = distinct !DILexicalBlock(scope: !11987, file: !3, line: 2812, column: 3)
!11998 = !DILocation(line: 2812, column: 8, scope: !11997)
!11999 = !DILocation(line: 2812, column: 15, scope: !12000)
!12000 = distinct !DILexicalBlock(scope: !11997, file: !3, line: 2812, column: 3)
!12001 = !DILocation(line: 2812, column: 3, scope: !11997)
!12002 = !DILocation(line: 2813, column: 30, scope: !12003)
!12003 = distinct !DILexicalBlock(scope: !12000, file: !3, line: 2813, column: 9)
!12004 = !DILocation(line: 2813, column: 33, scope: !12003)
!12005 = !DILocation(line: 2813, column: 40, scope: !12003)
!12006 = !DILocation(line: 2813, column: 9, scope: !12003)
!12007 = !DILocation(line: 2813, column: 9, scope: !12000)
!12008 = !DILocation(line: 2814, column: 7, scope: !12003)
!12009 = !DILocation(line: 2813, column: 58, scope: !12003)
!12010 = !DILocation(line: 2812, column: 72, scope: !12000)
!12011 = !DILocation(line: 2812, column: 3, scope: !12000)
!12012 = distinct !{!12012, !12001, !12013}
!12013 = !DILocation(line: 2814, column: 7, scope: !11997)
!12014 = !DILocation(line: 2816, column: 3, scope: !11987)
!12015 = !DILocation(line: 2817, column: 1, scope: !11987)
!12016 = distinct !DISubprogram(name: "init_omega_for_ddr_1", scope: !3, file: !3, line: 3614, type: !12017, scopeLine: 3617, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!12017 = !DISubroutineType(types: !12018)
!12018 = !{!931, !2171, !2171, !2243, !7735, !7729}
!12019 = !DILocalVariable(name: "dra", arg: 1, scope: !12016, file: !3, line: 3614, type: !2171)
!12020 = !DILocation(line: 3614, column: 46, scope: !12016)
!12021 = !DILocalVariable(name: "drb", arg: 2, scope: !12016, file: !3, line: 3614, type: !2171)
!12022 = !DILocation(line: 3614, column: 74, scope: !12016)
!12023 = !DILocalVariable(name: "ddr", arg: 3, scope: !12016, file: !3, line: 3615, type: !2243)
!12024 = !DILocation(line: 3615, column: 42, scope: !12016)
!12025 = !DILocalVariable(name: "pb", arg: 4, scope: !12016, file: !3, line: 3616, type: !7735)
!12026 = !DILocation(line: 3616, column: 18, scope: !12016)
!12027 = !DILocalVariable(name: "maybe_dependent", arg: 5, scope: !12016, file: !3, line: 3616, type: !7729)
!12028 = !DILocation(line: 3616, column: 28, scope: !12016)
!12029 = !DILocalVariable(name: "i", scope: !12016, file: !3, line: 3618, type: !7)
!12030 = !DILocation(line: 3618, column: 12, scope: !12016)
!12031 = !DILocalVariable(name: "ineq", scope: !12016, file: !3, line: 3619, type: !908)
!12032 = !DILocation(line: 3619, column: 7, scope: !12016)
!12033 = !DILocalVariable(name: "loopi", scope: !12016, file: !3, line: 3620, type: !1357)
!12034 = !DILocation(line: 3620, column: 16, scope: !12016)
!12035 = !DILocalVariable(name: "nb_loops", scope: !12016, file: !3, line: 3621, type: !7)
!12036 = !DILocation(line: 3621, column: 12, scope: !12016)
!12037 = !DILocation(line: 3621, column: 23, scope: !12016)
!12038 = !DILocation(line: 3624, column: 10, scope: !12039)
!12039 = distinct !DILexicalBlock(scope: !12016, file: !3, line: 3624, column: 3)
!12040 = !DILocation(line: 3624, column: 8, scope: !12039)
!12041 = !DILocation(line: 3624, column: 15, scope: !12042)
!12042 = distinct !DILexicalBlock(scope: !12039, file: !3, line: 3624, column: 3)
!12043 = !DILocation(line: 3624, column: 19, scope: !12042)
!12044 = !DILocation(line: 3624, column: 17, scope: !12042)
!12045 = !DILocation(line: 3624, column: 3, scope: !12039)
!12046 = !DILocation(line: 3626, column: 35, scope: !12047)
!12047 = distinct !DILexicalBlock(scope: !12048, file: !3, line: 3626, column: 11)
!12048 = distinct !DILexicalBlock(scope: !12042, file: !3, line: 3625, column: 5)
!12049 = !DILocation(line: 3626, column: 58, scope: !12047)
!12050 = !DILocation(line: 3627, column: 7, scope: !12047)
!12051 = !DILocation(line: 3627, column: 12, scope: !12047)
!12052 = !DILocation(line: 3627, column: 16, scope: !12047)
!12053 = !DILocation(line: 3626, column: 12, scope: !12047)
!12054 = !DILocation(line: 3626, column: 11, scope: !12048)
!12055 = !DILocation(line: 3628, column: 2, scope: !12047)
!12056 = !DILocation(line: 3629, column: 17, scope: !12057)
!12057 = distinct !DILexicalBlock(scope: !12047, file: !3, line: 3629, column: 16)
!12058 = !DILocation(line: 3629, column: 16, scope: !12057)
!12059 = !DILocation(line: 3629, column: 33, scope: !12057)
!12060 = !DILocation(line: 3629, column: 16, scope: !12047)
!12061 = !DILocation(line: 3632, column: 30, scope: !12062)
!12062 = distinct !DILexicalBlock(scope: !12057, file: !3, line: 3630, column: 2)
!12063 = !DILocation(line: 3632, column: 4, scope: !12062)
!12064 = !DILocation(line: 3632, column: 28, scope: !12062)
!12065 = !DILocation(line: 3633, column: 4, scope: !12062)
!12066 = !DILocation(line: 3635, column: 5, scope: !12048)
!12067 = !DILocation(line: 3624, column: 46, scope: !12042)
!12068 = !DILocation(line: 3624, column: 3, scope: !12042)
!12069 = distinct !{!12069, !12045, !12070}
!12070 = !DILocation(line: 3635, column: 5, scope: !12039)
!12071 = !DILocation(line: 3646, column: 10, scope: !12072)
!12072 = distinct !DILexicalBlock(scope: !12016, file: !3, line: 3646, column: 3)
!12073 = !DILocation(line: 3646, column: 8, scope: !12072)
!12074 = !DILocation(line: 3646, column: 15, scope: !12075)
!12075 = distinct !DILexicalBlock(scope: !12072, file: !3, line: 3646, column: 3)
!12076 = !DILocation(line: 3646, column: 20, scope: !12075)
!12077 = !DILocation(line: 3646, column: 17, scope: !12075)
!12078 = !DILocation(line: 3647, column: 3, scope: !12075)
!12079 = !DILocation(line: 3647, column: 6, scope: !12075)
!12080 = !DILocation(line: 0, scope: !12075)
!12081 = !DILocation(line: 3646, column: 3, scope: !12072)
!12082 = !DILocalVariable(name: "nbi", scope: !12083, file: !3, line: 3649, type: !867)
!12083 = distinct !DILexicalBlock(scope: !12075, file: !3, line: 3648, column: 5)
!12084 = !DILocation(line: 3649, column: 21, scope: !12083)
!12085 = !DILocation(line: 3649, column: 58, scope: !12083)
!12086 = !DILocation(line: 3649, column: 27, scope: !12083)
!12087 = !DILocation(line: 3652, column: 34, scope: !12083)
!12088 = !DILocation(line: 3652, column: 14, scope: !12083)
!12089 = !DILocation(line: 3652, column: 12, scope: !12083)
!12090 = !DILocation(line: 3653, column: 7, scope: !12083)
!12091 = !DILocation(line: 3653, column: 11, scope: !12083)
!12092 = !DILocation(line: 3653, column: 16, scope: !12083)
!12093 = !DILocation(line: 3653, column: 22, scope: !12083)
!12094 = !DILocation(line: 3653, column: 27, scope: !12083)
!12095 = !DILocation(line: 3653, column: 31, scope: !12083)
!12096 = !DILocation(line: 3653, column: 29, scope: !12083)
!12097 = !DILocation(line: 3653, column: 40, scope: !12083)
!12098 = !DILocation(line: 3653, column: 45, scope: !12083)
!12099 = !DILocation(line: 3656, column: 34, scope: !12083)
!12100 = !DILocation(line: 3656, column: 14, scope: !12083)
!12101 = !DILocation(line: 3656, column: 12, scope: !12083)
!12102 = !DILocation(line: 3657, column: 7, scope: !12083)
!12103 = !DILocation(line: 3657, column: 11, scope: !12083)
!12104 = !DILocation(line: 3657, column: 16, scope: !12083)
!12105 = !DILocation(line: 3657, column: 22, scope: !12083)
!12106 = !DILocation(line: 3657, column: 27, scope: !12083)
!12107 = !DILocation(line: 3657, column: 31, scope: !12083)
!12108 = !DILocation(line: 3657, column: 29, scope: !12083)
!12109 = !DILocation(line: 3657, column: 40, scope: !12083)
!12110 = !DILocation(line: 3657, column: 45, scope: !12083)
!12111 = !DILocation(line: 3658, column: 7, scope: !12083)
!12112 = !DILocation(line: 3658, column: 11, scope: !12083)
!12113 = !DILocation(line: 3658, column: 16, scope: !12083)
!12114 = !DILocation(line: 3658, column: 22, scope: !12083)
!12115 = !DILocation(line: 3658, column: 27, scope: !12083)
!12116 = !DILocation(line: 3658, column: 29, scope: !12083)
!12117 = !DILocation(line: 3658, column: 34, scope: !12083)
!12118 = !DILocation(line: 3660, column: 11, scope: !12119)
!12119 = distinct !DILexicalBlock(scope: !12083, file: !3, line: 3660, column: 11)
!12120 = !DILocation(line: 3660, column: 15, scope: !12119)
!12121 = !DILocation(line: 3660, column: 11, scope: !12083)
!12122 = !DILocation(line: 3663, column: 31, scope: !12123)
!12123 = distinct !DILexicalBlock(scope: !12119, file: !3, line: 3661, column: 2)
!12124 = !DILocation(line: 3663, column: 11, scope: !12123)
!12125 = !DILocation(line: 3663, column: 9, scope: !12123)
!12126 = !DILocation(line: 3664, column: 4, scope: !12123)
!12127 = !DILocation(line: 3664, column: 8, scope: !12123)
!12128 = !DILocation(line: 3664, column: 13, scope: !12123)
!12129 = !DILocation(line: 3664, column: 19, scope: !12123)
!12130 = !DILocation(line: 3664, column: 24, scope: !12123)
!12131 = !DILocation(line: 3664, column: 28, scope: !12123)
!12132 = !DILocation(line: 3664, column: 26, scope: !12123)
!12133 = !DILocation(line: 3664, column: 37, scope: !12123)
!12134 = !DILocation(line: 3664, column: 42, scope: !12123)
!12135 = !DILocation(line: 3665, column: 29, scope: !12123)
!12136 = !DILocation(line: 3665, column: 4, scope: !12123)
!12137 = !DILocation(line: 3665, column: 8, scope: !12123)
!12138 = !DILocation(line: 3665, column: 13, scope: !12123)
!12139 = !DILocation(line: 3665, column: 19, scope: !12123)
!12140 = !DILocation(line: 3665, column: 27, scope: !12123)
!12141 = !DILocation(line: 3668, column: 31, scope: !12123)
!12142 = !DILocation(line: 3668, column: 11, scope: !12123)
!12143 = !DILocation(line: 3668, column: 9, scope: !12123)
!12144 = !DILocation(line: 3669, column: 4, scope: !12123)
!12145 = !DILocation(line: 3669, column: 8, scope: !12123)
!12146 = !DILocation(line: 3669, column: 13, scope: !12123)
!12147 = !DILocation(line: 3669, column: 19, scope: !12123)
!12148 = !DILocation(line: 3669, column: 24, scope: !12123)
!12149 = !DILocation(line: 3669, column: 28, scope: !12123)
!12150 = !DILocation(line: 3669, column: 26, scope: !12123)
!12151 = !DILocation(line: 3669, column: 37, scope: !12123)
!12152 = !DILocation(line: 3669, column: 42, scope: !12123)
!12153 = !DILocation(line: 3670, column: 4, scope: !12123)
!12154 = !DILocation(line: 3670, column: 8, scope: !12123)
!12155 = !DILocation(line: 3670, column: 13, scope: !12123)
!12156 = !DILocation(line: 3670, column: 19, scope: !12123)
!12157 = !DILocation(line: 3670, column: 24, scope: !12123)
!12158 = !DILocation(line: 3670, column: 26, scope: !12123)
!12159 = !DILocation(line: 3670, column: 31, scope: !12123)
!12160 = !DILocation(line: 3671, column: 29, scope: !12123)
!12161 = !DILocation(line: 3671, column: 4, scope: !12123)
!12162 = !DILocation(line: 3671, column: 8, scope: !12123)
!12163 = !DILocation(line: 3671, column: 13, scope: !12123)
!12164 = !DILocation(line: 3671, column: 19, scope: !12123)
!12165 = !DILocation(line: 3671, column: 27, scope: !12123)
!12166 = !DILocation(line: 3675, column: 31, scope: !12123)
!12167 = !DILocation(line: 3675, column: 11, scope: !12123)
!12168 = !DILocation(line: 3675, column: 9, scope: !12123)
!12169 = !DILocation(line: 3676, column: 4, scope: !12123)
!12170 = !DILocation(line: 3676, column: 8, scope: !12123)
!12171 = !DILocation(line: 3676, column: 13, scope: !12123)
!12172 = !DILocation(line: 3676, column: 19, scope: !12123)
!12173 = !DILocation(line: 3676, column: 24, scope: !12123)
!12174 = !DILocation(line: 3676, column: 26, scope: !12123)
!12175 = !DILocation(line: 3676, column: 31, scope: !12123)
!12176 = !DILocation(line: 3677, column: 29, scope: !12123)
!12177 = !DILocation(line: 3677, column: 4, scope: !12123)
!12178 = !DILocation(line: 3677, column: 8, scope: !12123)
!12179 = !DILocation(line: 3677, column: 13, scope: !12123)
!12180 = !DILocation(line: 3677, column: 19, scope: !12123)
!12181 = !DILocation(line: 3677, column: 27, scope: !12123)
!12182 = !DILocation(line: 3679, column: 31, scope: !12123)
!12183 = !DILocation(line: 3679, column: 11, scope: !12123)
!12184 = !DILocation(line: 3679, column: 9, scope: !12123)
!12185 = !DILocation(line: 3680, column: 4, scope: !12123)
!12186 = !DILocation(line: 3680, column: 8, scope: !12123)
!12187 = !DILocation(line: 3680, column: 13, scope: !12123)
!12188 = !DILocation(line: 3680, column: 19, scope: !12123)
!12189 = !DILocation(line: 3680, column: 24, scope: !12123)
!12190 = !DILocation(line: 3680, column: 26, scope: !12123)
!12191 = !DILocation(line: 3680, column: 31, scope: !12123)
!12192 = !DILocation(line: 3681, column: 29, scope: !12123)
!12193 = !DILocation(line: 3681, column: 4, scope: !12123)
!12194 = !DILocation(line: 3681, column: 8, scope: !12123)
!12195 = !DILocation(line: 3681, column: 13, scope: !12123)
!12196 = !DILocation(line: 3681, column: 19, scope: !12123)
!12197 = !DILocation(line: 3681, column: 27, scope: !12123)
!12198 = !DILocation(line: 3682, column: 2, scope: !12123)
!12199 = !DILocation(line: 3683, column: 5, scope: !12083)
!12200 = !DILocation(line: 3647, column: 60, scope: !12075)
!12201 = !DILocation(line: 3646, column: 3, scope: !12075)
!12202 = distinct !{!12202, !12081, !12203}
!12203 = !DILocation(line: 3683, column: 5, scope: !12072)
!12204 = !DILocation(line: 3685, column: 35, scope: !12016)
!12205 = !DILocation(line: 3685, column: 39, scope: !12016)
!12206 = !DILocation(line: 3685, column: 3, scope: !12016)
!12207 = !DILocation(line: 3687, column: 3, scope: !12016)
!12208 = !DILocation(line: 3688, column: 1, scope: !12016)
!12209 = distinct !DISubprogram(name: "omega_free_problem", scope: !639, file: !639, line: 297, type: !12210, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!12210 = !DISubroutineType(types: !12211)
!12211 = !{null, !7735}
!12212 = !DILocalVariable(name: "pb", arg: 1, scope: !12209, file: !639, line: 297, type: !7735)
!12213 = !DILocation(line: 297, column: 30, scope: !12209)
!12214 = !DILocation(line: 299, column: 9, scope: !12209)
!12215 = !DILocation(line: 299, column: 13, scope: !12209)
!12216 = !DILocation(line: 299, column: 3, scope: !12209)
!12217 = !DILocation(line: 300, column: 9, scope: !12209)
!12218 = !DILocation(line: 300, column: 13, scope: !12209)
!12219 = !DILocation(line: 300, column: 3, scope: !12209)
!12220 = !DILocation(line: 301, column: 20, scope: !12209)
!12221 = !DILocation(line: 301, column: 24, scope: !12209)
!12222 = !DILocation(line: 301, column: 30, scope: !12209)
!12223 = !DILocation(line: 301, column: 3, scope: !12209)
!12224 = !DILocation(line: 302, column: 20, scope: !12209)
!12225 = !DILocation(line: 302, column: 24, scope: !12209)
!12226 = !DILocation(line: 302, column: 29, scope: !12209)
!12227 = !DILocation(line: 302, column: 3, scope: !12209)
!12228 = !DILocation(line: 303, column: 20, scope: !12209)
!12229 = !DILocation(line: 303, column: 24, scope: !12209)
!12230 = !DILocation(line: 303, column: 30, scope: !12209)
!12231 = !DILocation(line: 303, column: 45, scope: !12209)
!12232 = !DILocation(line: 303, column: 3, scope: !12209)
!12233 = !DILocation(line: 304, column: 9, scope: !12209)
!12234 = !DILocation(line: 304, column: 3, scope: !12209)
!12235 = !DILocation(line: 305, column: 1, scope: !12209)
!12236 = distinct !DISubprogram(name: "omega_setup_subscript", scope: !3, file: !3, line: 3562, type: !12237, scopeLine: 3565, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!12237 = !DISubroutineType(types: !12238)
!12238 = !{!931, !811, !811, !2243, !7735, !7729}
!12239 = !DILocalVariable(name: "access_fun_a", arg: 1, scope: !12236, file: !3, line: 3562, type: !811)
!12240 = !DILocation(line: 3562, column: 29, scope: !12236)
!12241 = !DILocalVariable(name: "access_fun_b", arg: 2, scope: !12236, file: !3, line: 3562, type: !811)
!12242 = !DILocation(line: 3562, column: 48, scope: !12236)
!12243 = !DILocalVariable(name: "ddr", arg: 3, scope: !12236, file: !3, line: 3563, type: !2243)
!12244 = !DILocation(line: 3563, column: 43, scope: !12236)
!12245 = !DILocalVariable(name: "pb", arg: 4, scope: !12236, file: !3, line: 3564, type: !7735)
!12246 = !DILocation(line: 3564, column: 19, scope: !12236)
!12247 = !DILocalVariable(name: "maybe_dependent", arg: 5, scope: !12236, file: !3, line: 3564, type: !7729)
!12248 = !DILocation(line: 3564, column: 29, scope: !12236)
!12249 = !DILocalVariable(name: "eq", scope: !12236, file: !3, line: 3566, type: !908)
!12250 = !DILocation(line: 3566, column: 7, scope: !12236)
!12251 = !DILocalVariable(name: "type", scope: !12236, file: !3, line: 3567, type: !811)
!12252 = !DILocation(line: 3567, column: 8, scope: !12236)
!12253 = !DILocation(line: 3567, column: 38, scope: !12236)
!12254 = !DILocation(line: 3568, column: 10, scope: !12236)
!12255 = !DILocation(line: 3567, column: 15, scope: !12236)
!12256 = !DILocalVariable(name: "fun_a", scope: !12236, file: !3, line: 3569, type: !811)
!12257 = !DILocation(line: 3569, column: 8, scope: !12236)
!12258 = !DILocation(line: 3569, column: 31, scope: !12236)
!12259 = !DILocation(line: 3569, column: 37, scope: !12236)
!12260 = !DILocation(line: 3569, column: 16, scope: !12236)
!12261 = !DILocalVariable(name: "fun_b", scope: !12236, file: !3, line: 3570, type: !811)
!12262 = !DILocation(line: 3570, column: 8, scope: !12236)
!12263 = !DILocation(line: 3570, column: 31, scope: !12236)
!12264 = !DILocation(line: 3570, column: 37, scope: !12236)
!12265 = !DILocation(line: 3570, column: 16, scope: !12236)
!12266 = !DILocalVariable(name: "difference", scope: !12236, file: !3, line: 3571, type: !811)
!12267 = !DILocation(line: 3571, column: 8, scope: !12236)
!12268 = !DILocation(line: 3571, column: 39, scope: !12236)
!12269 = !DILocation(line: 3571, column: 45, scope: !12236)
!12270 = !DILocation(line: 3571, column: 52, scope: !12236)
!12271 = !DILocation(line: 3571, column: 21, scope: !12236)
!12272 = !DILocation(line: 3575, column: 7, scope: !12273)
!12273 = distinct !DILexicalBlock(scope: !12236, file: !3, line: 3575, column: 7)
!12274 = !DILocation(line: 3575, column: 30, scope: !12273)
!12275 = !DILocation(line: 3575, column: 7, scope: !12236)
!12276 = !DILocation(line: 3576, column: 5, scope: !12273)
!12277 = !DILocation(line: 3579, column: 24, scope: !12278)
!12278 = distinct !DILexicalBlock(scope: !12236, file: !3, line: 3579, column: 7)
!12279 = !DILocation(line: 3579, column: 31, scope: !12278)
!12280 = !DILocation(line: 3579, column: 7, scope: !12278)
!12281 = !DILocation(line: 3579, column: 38, scope: !12278)
!12282 = !DILocation(line: 3579, column: 57, scope: !12278)
!12283 = !DILocation(line: 3579, column: 42, scope: !12278)
!12284 = !DILocation(line: 3579, column: 7, scope: !12236)
!12285 = !DILocation(line: 3582, column: 8, scope: !12286)
!12286 = distinct !DILexicalBlock(scope: !12278, file: !3, line: 3580, column: 5)
!12287 = !DILocation(line: 3582, column: 24, scope: !12286)
!12288 = !DILocation(line: 3583, column: 7, scope: !12286)
!12289 = !DILocation(line: 3586, column: 32, scope: !12236)
!12290 = !DILocation(line: 3586, column: 38, scope: !12236)
!12291 = !DILocation(line: 3586, column: 45, scope: !12236)
!12292 = !DILocation(line: 3586, column: 11, scope: !12236)
!12293 = !DILocation(line: 3586, column: 9, scope: !12236)
!12294 = !DILocation(line: 3588, column: 27, scope: !12236)
!12295 = !DILocation(line: 3588, column: 8, scope: !12236)
!12296 = !DILocation(line: 3588, column: 6, scope: !12236)
!12297 = !DILocation(line: 3589, column: 31, scope: !12298)
!12298 = distinct !DILexicalBlock(scope: !12236, file: !3, line: 3589, column: 7)
!12299 = !DILocation(line: 3589, column: 35, scope: !12298)
!12300 = !DILocation(line: 3589, column: 39, scope: !12298)
!12301 = !DILocation(line: 3589, column: 59, scope: !12298)
!12302 = !DILocation(line: 3589, column: 66, scope: !12298)
!12303 = !DILocation(line: 3589, column: 8, scope: !12298)
!12304 = !DILocation(line: 3590, column: 7, scope: !12298)
!12305 = !DILocation(line: 3590, column: 34, scope: !12298)
!12306 = !DILocation(line: 3590, column: 38, scope: !12298)
!12307 = !DILocation(line: 3590, column: 45, scope: !12298)
!12308 = !DILocation(line: 3590, column: 52, scope: !12298)
!12309 = !DILocation(line: 3590, column: 11, scope: !12298)
!12310 = !DILocation(line: 3589, column: 7, scope: !12236)
!12311 = !DILocation(line: 3593, column: 5, scope: !12298)
!12312 = !DILocation(line: 3596, column: 7, scope: !12313)
!12313 = distinct !DILexicalBlock(scope: !12236, file: !3, line: 3596, column: 7)
!12314 = !DILocation(line: 3596, column: 26, scope: !12313)
!12315 = !DILocation(line: 3596, column: 31, scope: !12313)
!12316 = !DILocation(line: 3596, column: 34, scope: !12313)
!12317 = !DILocation(line: 3596, column: 38, scope: !12313)
!12318 = !DILocation(line: 3596, column: 42, scope: !12313)
!12319 = !DILocation(line: 3596, column: 46, scope: !12313)
!12320 = !DILocation(line: 3597, column: 7, scope: !12313)
!12321 = !DILocation(line: 3598, column: 24, scope: !12313)
!12322 = !DILocation(line: 3598, column: 28, scope: !12313)
!12323 = !DILocation(line: 3598, column: 32, scope: !12313)
!12324 = !DILocation(line: 3598, column: 36, scope: !12313)
!12325 = !DILocation(line: 3599, column: 10, scope: !12313)
!12326 = !DILocation(line: 3599, column: 8, scope: !12313)
!12327 = !DILocation(line: 3597, column: 26, scope: !12313)
!12328 = !DILocation(line: 3600, column: 5, scope: !12313)
!12329 = !DILocation(line: 3600, column: 9, scope: !12313)
!12330 = !DILocation(line: 3600, column: 13, scope: !12313)
!12331 = !DILocation(line: 3600, column: 17, scope: !12313)
!12332 = !DILocation(line: 3597, column: 11, scope: !12313)
!12333 = !DILocation(line: 3596, column: 7, scope: !12236)
!12334 = !DILocation(line: 3603, column: 8, scope: !12335)
!12335 = distinct !DILexicalBlock(scope: !12313, file: !3, line: 3601, column: 5)
!12336 = !DILocation(line: 3603, column: 24, scope: !12335)
!12337 = !DILocation(line: 3604, column: 7, scope: !12335)
!12338 = !DILocation(line: 3607, column: 3, scope: !12236)
!12339 = !DILocation(line: 3608, column: 1, scope: !12236)
!12340 = distinct !DISubprogram(name: "omega_add_zero_geq", scope: !639, file: !639, line: 269, type: !12341, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!12341 = !DISubroutineType(types: !12342)
!12342 = !{!908, !7735, !638}
!12343 = !DILocalVariable(name: "pb", arg: 1, scope: !12340, file: !639, line: 269, type: !7735)
!12344 = !DILocation(line: 269, column: 30, scope: !12340)
!12345 = !DILocalVariable(name: "color", arg: 2, scope: !12340, file: !639, line: 269, type: !638)
!12346 = !DILocation(line: 269, column: 55, scope: !12340)
!12347 = !DILocalVariable(name: "idx", scope: !12340, file: !639, line: 271, type: !908)
!12348 = !DILocation(line: 271, column: 7, scope: !12340)
!12349 = !DILocation(line: 271, column: 13, scope: !12340)
!12350 = !DILocation(line: 271, column: 17, scope: !12340)
!12351 = !DILocation(line: 273, column: 3, scope: !12340)
!12352 = !DILocation(line: 273, column: 7, scope: !12340)
!12353 = !DILocation(line: 273, column: 15, scope: !12340)
!12354 = !DILocation(line: 274, column: 3, scope: !12340)
!12355 = !DILocation(line: 275, column: 25, scope: !12340)
!12356 = !DILocation(line: 275, column: 29, scope: !12340)
!12357 = !DILocation(line: 275, column: 34, scope: !12340)
!12358 = !DILocation(line: 275, column: 40, scope: !12340)
!12359 = !DILocation(line: 275, column: 44, scope: !12340)
!12360 = !DILocation(line: 275, column: 3, scope: !12340)
!12361 = !DILocation(line: 276, column: 3, scope: !12340)
!12362 = !DILocation(line: 276, column: 7, scope: !12340)
!12363 = !DILocation(line: 276, column: 12, scope: !12340)
!12364 = !DILocation(line: 276, column: 17, scope: !12340)
!12365 = !DILocation(line: 276, column: 25, scope: !12340)
!12366 = !DILocation(line: 277, column: 25, scope: !12340)
!12367 = !DILocation(line: 277, column: 3, scope: !12340)
!12368 = !DILocation(line: 277, column: 7, scope: !12340)
!12369 = !DILocation(line: 277, column: 12, scope: !12340)
!12370 = !DILocation(line: 277, column: 17, scope: !12340)
!12371 = !DILocation(line: 277, column: 23, scope: !12340)
!12372 = !DILocation(line: 278, column: 10, scope: !12340)
!12373 = !DILocation(line: 278, column: 3, scope: !12340)
!12374 = distinct !DISubprogram(name: "omega_extract_distance_vectors", scope: !3, file: !3, line: 3453, type: !12375, scopeLine: 3455, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!12375 = !DISubroutineType(types: !12376)
!12376 = !{null, !7735, !2243}
!12377 = !DILocalVariable(name: "pb", arg: 1, scope: !12374, file: !3, line: 3453, type: !7735)
!12378 = !DILocation(line: 3453, column: 42, scope: !12374)
!12379 = !DILocalVariable(name: "ddr", arg: 2, scope: !12374, file: !3, line: 3454, type: !2243)
!12380 = !DILocation(line: 3454, column: 38, scope: !12374)
!12381 = !DILocalVariable(name: "eq", scope: !12374, file: !3, line: 3456, type: !908)
!12382 = !DILocation(line: 3456, column: 7, scope: !12374)
!12383 = !DILocalVariable(name: "geq", scope: !12374, file: !3, line: 3456, type: !908)
!12384 = !DILocation(line: 3456, column: 11, scope: !12374)
!12385 = !DILocalVariable(name: "i", scope: !12374, file: !3, line: 3457, type: !7)
!12386 = !DILocation(line: 3457, column: 12, scope: !12374)
!12387 = !DILocalVariable(name: "j", scope: !12374, file: !3, line: 3457, type: !7)
!12388 = !DILocation(line: 3457, column: 15, scope: !12374)
!12389 = !DILocalVariable(name: "loopi", scope: !12374, file: !3, line: 3458, type: !1357)
!12390 = !DILocation(line: 3458, column: 16, scope: !12374)
!12391 = !DILocalVariable(name: "loopj", scope: !12374, file: !3, line: 3458, type: !1357)
!12392 = !DILocation(line: 3458, column: 24, scope: !12374)
!12393 = !DILocalVariable(name: "res", scope: !12374, file: !3, line: 3459, type: !766)
!12394 = !DILocation(line: 3459, column: 21, scope: !12374)
!12395 = !DILocation(line: 3464, column: 10, scope: !12396)
!12396 = distinct !DILexicalBlock(scope: !12374, file: !3, line: 3464, column: 3)
!12397 = !DILocation(line: 3464, column: 8, scope: !12396)
!12398 = !DILocation(line: 3464, column: 15, scope: !12399)
!12399 = distinct !DILexicalBlock(scope: !12396, file: !3, line: 3464, column: 3)
!12400 = !DILocation(line: 3464, column: 20, scope: !12399)
!12401 = !DILocation(line: 3464, column: 17, scope: !12399)
!12402 = !DILocation(line: 3465, column: 3, scope: !12399)
!12403 = !DILocation(line: 3465, column: 6, scope: !12399)
!12404 = !DILocation(line: 0, scope: !12399)
!12405 = !DILocation(line: 3464, column: 3, scope: !12396)
!12406 = !DILocalVariable(name: "dist", scope: !12407, file: !3, line: 3467, type: !908)
!12407 = distinct !DILexicalBlock(scope: !12399, file: !3, line: 3466, column: 5)
!12408 = !DILocation(line: 3467, column: 11, scope: !12407)
!12409 = !DILocalVariable(name: "copy", scope: !12407, file: !3, line: 3468, type: !7735)
!12410 = !DILocation(line: 3468, column: 16, scope: !12407)
!12411 = !DILocation(line: 3468, column: 48, scope: !12407)
!12412 = !DILocation(line: 3468, column: 46, scope: !12407)
!12413 = !DILocation(line: 3469, column: 9, scope: !12407)
!12414 = !DILocation(line: 3468, column: 23, scope: !12407)
!12415 = !DILocation(line: 3471, column: 27, scope: !12407)
!12416 = !DILocation(line: 3471, column: 33, scope: !12407)
!12417 = !DILocation(line: 3471, column: 7, scope: !12407)
!12418 = !DILocation(line: 3474, column: 14, scope: !12419)
!12419 = distinct !DILexicalBlock(scope: !12407, file: !3, line: 3474, column: 7)
!12420 = !DILocation(line: 3474, column: 12, scope: !12419)
!12421 = !DILocation(line: 3475, column: 5, scope: !12422)
!12422 = distinct !DILexicalBlock(scope: !12419, file: !3, line: 3474, column: 7)
!12423 = !DILocation(line: 3475, column: 9, scope: !12422)
!12424 = !DILocation(line: 3475, column: 7, scope: !12422)
!12425 = !DILocation(line: 3475, column: 11, scope: !12422)
!12426 = !DILocation(line: 3475, column: 14, scope: !12422)
!12427 = !DILocation(line: 0, scope: !12422)
!12428 = !DILocation(line: 3474, column: 7, scope: !12419)
!12429 = !DILocation(line: 3477, column: 28, scope: !12430)
!12430 = distinct !DILexicalBlock(scope: !12422, file: !3, line: 3476, column: 2)
!12431 = !DILocation(line: 3477, column: 9, scope: !12430)
!12432 = !DILocation(line: 3477, column: 7, scope: !12430)
!12433 = !DILocation(line: 3478, column: 4, scope: !12430)
!12434 = !DILocation(line: 3478, column: 10, scope: !12430)
!12435 = !DILocation(line: 3478, column: 14, scope: !12430)
!12436 = !DILocation(line: 3478, column: 18, scope: !12430)
!12437 = !DILocation(line: 3478, column: 23, scope: !12430)
!12438 = !DILocation(line: 3478, column: 25, scope: !12430)
!12439 = !DILocation(line: 3478, column: 30, scope: !12430)
!12440 = !DILocation(line: 3479, column: 2, scope: !12430)
!12441 = !DILocation(line: 3475, column: 68, scope: !12422)
!12442 = !DILocation(line: 3474, column: 7, scope: !12422)
!12443 = distinct !{!12443, !12428, !12444}
!12444 = !DILocation(line: 3479, column: 2, scope: !12419)
!12445 = !DILocation(line: 3482, column: 33, scope: !12407)
!12446 = !DILocation(line: 3482, column: 13, scope: !12407)
!12447 = !DILocation(line: 3482, column: 11, scope: !12407)
!12448 = !DILocation(line: 3483, column: 7, scope: !12407)
!12449 = !DILocation(line: 3483, column: 13, scope: !12407)
!12450 = !DILocation(line: 3483, column: 18, scope: !12407)
!12451 = !DILocation(line: 3483, column: 23, scope: !12407)
!12452 = !DILocation(line: 3483, column: 28, scope: !12407)
!12453 = !DILocation(line: 3483, column: 30, scope: !12407)
!12454 = !DILocation(line: 3483, column: 35, scope: !12407)
!12455 = !DILocation(line: 3487, column: 37, scope: !12407)
!12456 = !DILocation(line: 3487, column: 13, scope: !12407)
!12457 = !DILocation(line: 3487, column: 11, scope: !12407)
!12458 = !DILocation(line: 3488, column: 11, scope: !12459)
!12459 = distinct !DILexicalBlock(scope: !12407, file: !3, line: 3488, column: 11)
!12460 = !DILocation(line: 3488, column: 15, scope: !12459)
!12461 = !DILocation(line: 3489, column: 4, scope: !12459)
!12462 = !DILocation(line: 3489, column: 7, scope: !12459)
!12463 = !DILocation(line: 3489, column: 11, scope: !12459)
!12464 = !DILocation(line: 3490, column: 4, scope: !12459)
!12465 = !DILocation(line: 3490, column: 7, scope: !12459)
!12466 = !DILocation(line: 3490, column: 13, scope: !12459)
!12467 = !DILocation(line: 3490, column: 30, scope: !12459)
!12468 = !DILocation(line: 3490, column: 22, scope: !12459)
!12469 = !DILocation(line: 3488, column: 11, scope: !12407)
!12470 = !DILocation(line: 3491, column: 2, scope: !12459)
!12471 = !DILocation(line: 3493, column: 15, scope: !12472)
!12472 = distinct !DILexicalBlock(scope: !12407, file: !3, line: 3493, column: 7)
!12473 = !DILocation(line: 3493, column: 12, scope: !12472)
!12474 = !DILocation(line: 3493, column: 20, scope: !12475)
!12475 = distinct !DILexicalBlock(scope: !12472, file: !3, line: 3493, column: 7)
!12476 = !DILocation(line: 3493, column: 25, scope: !12475)
!12477 = !DILocation(line: 3493, column: 31, scope: !12475)
!12478 = !DILocation(line: 3493, column: 23, scope: !12475)
!12479 = !DILocation(line: 3493, column: 7, scope: !12472)
!12480 = !DILocation(line: 3494, column: 6, scope: !12481)
!12481 = distinct !DILexicalBlock(scope: !12475, file: !3, line: 3494, column: 6)
!12482 = !DILocation(line: 3494, column: 12, scope: !12481)
!12483 = !DILocation(line: 3494, column: 17, scope: !12481)
!12484 = !DILocation(line: 3494, column: 21, scope: !12481)
!12485 = !DILocation(line: 3494, column: 34, scope: !12481)
!12486 = !DILocation(line: 3494, column: 36, scope: !12481)
!12487 = !DILocation(line: 3494, column: 25, scope: !12481)
!12488 = !DILocation(line: 3494, column: 6, scope: !12475)
!12489 = !DILocation(line: 3496, column: 13, scope: !12490)
!12490 = distinct !DILexicalBlock(scope: !12481, file: !3, line: 3495, column: 4)
!12491 = !DILocation(line: 3496, column: 19, scope: !12490)
!12492 = !DILocation(line: 3496, column: 24, scope: !12490)
!12493 = !DILocation(line: 3496, column: 28, scope: !12490)
!12494 = !DILocation(line: 3496, column: 11, scope: !12490)
!12495 = !DILocation(line: 3497, column: 6, scope: !12490)
!12496 = !DILocation(line: 3494, column: 38, scope: !12481)
!12497 = !DILocation(line: 3493, column: 43, scope: !12475)
!12498 = !DILocation(line: 3493, column: 7, scope: !12475)
!12499 = distinct !{!12499, !12479, !12500}
!12500 = !DILocation(line: 3498, column: 4, scope: !12472)
!12501 = !DILocation(line: 3500, column: 11, scope: !12502)
!12502 = distinct !DILexicalBlock(scope: !12407, file: !3, line: 3500, column: 11)
!12503 = !DILocation(line: 3500, column: 16, scope: !12502)
!12504 = !DILocation(line: 3500, column: 11, scope: !12407)
!12505 = !DILocation(line: 3503, column: 24, scope: !12506)
!12506 = distinct !DILexicalBlock(scope: !12502, file: !3, line: 3501, column: 2)
!12507 = !DILocation(line: 3503, column: 30, scope: !12506)
!12508 = !DILocation(line: 3503, column: 4, scope: !12506)
!12509 = !DILocation(line: 3504, column: 11, scope: !12510)
!12510 = distinct !DILexicalBlock(scope: !12506, file: !3, line: 3504, column: 4)
!12511 = !DILocation(line: 3504, column: 9, scope: !12510)
!12512 = !DILocation(line: 3505, column: 9, scope: !12513)
!12513 = distinct !DILexicalBlock(scope: !12510, file: !3, line: 3504, column: 4)
!12514 = !DILocation(line: 3505, column: 13, scope: !12513)
!12515 = !DILocation(line: 3505, column: 11, scope: !12513)
!12516 = !DILocation(line: 3505, column: 15, scope: !12513)
!12517 = !DILocation(line: 3505, column: 18, scope: !12513)
!12518 = !DILocation(line: 0, scope: !12513)
!12519 = !DILocation(line: 3504, column: 4, scope: !12510)
!12520 = !DILocation(line: 3507, column: 32, scope: !12521)
!12521 = distinct !DILexicalBlock(scope: !12513, file: !3, line: 3506, column: 6)
!12522 = !DILocation(line: 3507, column: 13, scope: !12521)
!12523 = !DILocation(line: 3507, column: 11, scope: !12521)
!12524 = !DILocation(line: 3508, column: 8, scope: !12521)
!12525 = !DILocation(line: 3508, column: 14, scope: !12521)
!12526 = !DILocation(line: 3508, column: 18, scope: !12521)
!12527 = !DILocation(line: 3508, column: 22, scope: !12521)
!12528 = !DILocation(line: 3508, column: 27, scope: !12521)
!12529 = !DILocation(line: 3508, column: 29, scope: !12521)
!12530 = !DILocation(line: 3508, column: 34, scope: !12521)
!12531 = !DILocation(line: 3509, column: 6, scope: !12521)
!12532 = !DILocation(line: 3505, column: 72, scope: !12513)
!12533 = !DILocation(line: 3504, column: 4, scope: !12513)
!12534 = distinct !{!12534, !12519, !12535}
!12535 = !DILocation(line: 3509, column: 6, scope: !12510)
!12536 = !DILocation(line: 3512, column: 28, scope: !12506)
!12537 = !DILocation(line: 3512, column: 9, scope: !12506)
!12538 = !DILocation(line: 3512, column: 7, scope: !12506)
!12539 = !DILocation(line: 3513, column: 4, scope: !12506)
!12540 = !DILocation(line: 3513, column: 10, scope: !12506)
!12541 = !DILocation(line: 3513, column: 14, scope: !12506)
!12542 = !DILocation(line: 3513, column: 18, scope: !12506)
!12543 = !DILocation(line: 3513, column: 23, scope: !12506)
!12544 = !DILocation(line: 3513, column: 25, scope: !12506)
!12545 = !DILocation(line: 3513, column: 30, scope: !12506)
!12546 = !DILocation(line: 3514, column: 4, scope: !12506)
!12547 = !DILocation(line: 3514, column: 10, scope: !12506)
!12548 = !DILocation(line: 3514, column: 14, scope: !12506)
!12549 = !DILocation(line: 3514, column: 18, scope: !12506)
!12550 = !DILocation(line: 3514, column: 26, scope: !12506)
!12551 = !DILocation(line: 3516, column: 34, scope: !12506)
!12552 = !DILocation(line: 3516, column: 10, scope: !12506)
!12553 = !DILocation(line: 3516, column: 8, scope: !12506)
!12554 = !DILocation(line: 3517, column: 8, scope: !12555)
!12555 = distinct !DILexicalBlock(scope: !12506, file: !3, line: 3517, column: 8)
!12556 = !DILocation(line: 3517, column: 12, scope: !12555)
!12557 = !DILocation(line: 3518, column: 8, scope: !12555)
!12558 = !DILocation(line: 3518, column: 11, scope: !12555)
!12559 = !DILocation(line: 3518, column: 15, scope: !12555)
!12560 = !DILocation(line: 3519, column: 8, scope: !12555)
!12561 = !DILocation(line: 3519, column: 11, scope: !12555)
!12562 = !DILocation(line: 3519, column: 17, scope: !12555)
!12563 = !DILocation(line: 3519, column: 34, scope: !12555)
!12564 = !DILocation(line: 3519, column: 26, scope: !12555)
!12565 = !DILocation(line: 3517, column: 8, scope: !12506)
!12566 = !DILocation(line: 3520, column: 6, scope: !12555)
!12567 = !DILocation(line: 3522, column: 12, scope: !12568)
!12568 = distinct !DILexicalBlock(scope: !12506, file: !3, line: 3522, column: 4)
!12569 = !DILocation(line: 3522, column: 9, scope: !12568)
!12570 = !DILocation(line: 3522, column: 17, scope: !12571)
!12571 = distinct !DILexicalBlock(scope: !12568, file: !3, line: 3522, column: 4)
!12572 = !DILocation(line: 3522, column: 22, scope: !12571)
!12573 = !DILocation(line: 3522, column: 28, scope: !12571)
!12574 = !DILocation(line: 3522, column: 20, scope: !12571)
!12575 = !DILocation(line: 3522, column: 4, scope: !12568)
!12576 = !DILocation(line: 3523, column: 10, scope: !12577)
!12577 = distinct !DILexicalBlock(scope: !12571, file: !3, line: 3523, column: 10)
!12578 = !DILocation(line: 3523, column: 16, scope: !12577)
!12579 = !DILocation(line: 3523, column: 21, scope: !12577)
!12580 = !DILocation(line: 3523, column: 25, scope: !12577)
!12581 = !DILocation(line: 3523, column: 38, scope: !12577)
!12582 = !DILocation(line: 3523, column: 40, scope: !12577)
!12583 = !DILocation(line: 3523, column: 29, scope: !12577)
!12584 = !DILocation(line: 3523, column: 10, scope: !12571)
!12585 = !DILocation(line: 3525, column: 10, scope: !12586)
!12586 = distinct !DILexicalBlock(scope: !12577, file: !3, line: 3524, column: 8)
!12587 = !DILocation(line: 3525, column: 16, scope: !12586)
!12588 = !DILocation(line: 3525, column: 21, scope: !12586)
!12589 = !DILocation(line: 3525, column: 25, scope: !12586)
!12590 = !DILocation(line: 3525, column: 8, scope: !12586)
!12591 = !DILocation(line: 3526, column: 3, scope: !12586)
!12592 = !DILocation(line: 3523, column: 42, scope: !12577)
!12593 = !DILocation(line: 3522, column: 40, scope: !12571)
!12594 = !DILocation(line: 3522, column: 4, scope: !12571)
!12595 = distinct !{!12595, !12575, !12596}
!12596 = !DILocation(line: 3527, column: 8, scope: !12568)
!12597 = !DILocation(line: 3528, column: 2, scope: !12506)
!12598 = !DILocation(line: 3500, column: 19, scope: !12502)
!12599 = !DILabel(scope: !12407, name: "found_dist", file: !3, line: 3530)
!12600 = !DILocation(line: 3530, column: 5, scope: !12407)
!12601 = !DILocation(line: 3532, column: 11, scope: !12602)
!12602 = distinct !DILexicalBlock(scope: !12407, file: !3, line: 3532, column: 11)
!12603 = !DILocation(line: 3532, column: 16, scope: !12602)
!12604 = !DILocation(line: 3532, column: 11, scope: !12407)
!12605 = !DILocalVariable(name: "dist_v", scope: !12606, file: !3, line: 3534, type: !2227)
!12606 = distinct !DILexicalBlock(scope: !12602, file: !3, line: 3533, column: 2)
!12607 = !DILocation(line: 3534, column: 18, scope: !12606)
!12608 = !DILocation(line: 3534, column: 46, scope: !12606)
!12609 = !DILocation(line: 3534, column: 27, scope: !12606)
!12610 = !DILocalVariable(name: "dir_v", scope: !12606, file: !3, line: 3535, type: !2227)
!12611 = !DILocation(line: 3535, column: 18, scope: !12606)
!12612 = !DILocation(line: 3535, column: 45, scope: !12606)
!12613 = !DILocation(line: 3535, column: 26, scope: !12606)
!12614 = !DILocation(line: 3537, column: 16, scope: !12606)
!12615 = !DILocation(line: 3537, column: 4, scope: !12606)
!12616 = !DILocation(line: 3537, column: 11, scope: !12606)
!12617 = !DILocation(line: 3537, column: 14, scope: !12606)
!12618 = !DILocation(line: 3539, column: 12, scope: !12619)
!12619 = distinct !DILexicalBlock(scope: !12606, file: !3, line: 3539, column: 4)
!12620 = !DILocation(line: 3539, column: 9, scope: !12619)
!12621 = !DILocation(line: 3539, column: 17, scope: !12622)
!12622 = distinct !DILexicalBlock(scope: !12619, file: !3, line: 3539, column: 4)
!12623 = !DILocation(line: 3539, column: 22, scope: !12622)
!12624 = !DILocation(line: 3539, column: 28, scope: !12622)
!12625 = !DILocation(line: 3539, column: 20, scope: !12622)
!12626 = !DILocation(line: 3539, column: 4, scope: !12619)
!12627 = !DILocation(line: 3540, column: 10, scope: !12628)
!12628 = distinct !DILexicalBlock(scope: !12622, file: !3, line: 3540, column: 10)
!12629 = !DILocation(line: 3540, column: 16, scope: !12628)
!12630 = !DILocation(line: 3540, column: 21, scope: !12628)
!12631 = !DILocation(line: 3540, column: 25, scope: !12628)
!12632 = !DILocation(line: 3540, column: 29, scope: !12628)
!12633 = !DILocation(line: 3540, column: 10, scope: !12622)
!12634 = !DILocation(line: 3542, column: 10, scope: !12635)
!12635 = distinct !DILexicalBlock(scope: !12628, file: !3, line: 3541, column: 8)
!12636 = !DILocation(line: 3542, column: 16, scope: !12635)
!12637 = !DILocation(line: 3542, column: 21, scope: !12635)
!12638 = !DILocation(line: 3542, column: 25, scope: !12635)
!12639 = !DILocation(line: 3542, column: 8, scope: !12635)
!12640 = !DILocation(line: 3543, column: 36, scope: !12635)
!12641 = !DILocation(line: 3543, column: 3, scope: !12635)
!12642 = !DILocation(line: 3543, column: 10, scope: !12635)
!12643 = !DILocation(line: 3543, column: 16, scope: !12635)
!12644 = !DILocation(line: 3543, column: 21, scope: !12635)
!12645 = !DILocation(line: 3543, column: 25, scope: !12635)
!12646 = !DILocation(line: 3543, column: 29, scope: !12635)
!12647 = !DILocation(line: 3543, column: 34, scope: !12635)
!12648 = !DILocation(line: 3544, column: 8, scope: !12635)
!12649 = !DILocation(line: 3540, column: 31, scope: !12628)
!12650 = !DILocation(line: 3539, column: 40, scope: !12622)
!12651 = !DILocation(line: 3539, column: 4, scope: !12622)
!12652 = distinct !{!12652, !12626, !12653}
!12653 = !DILocation(line: 3544, column: 8, scope: !12619)
!12654 = !DILocation(line: 3546, column: 11, scope: !12655)
!12655 = distinct !DILexicalBlock(scope: !12606, file: !3, line: 3546, column: 4)
!12656 = !DILocation(line: 3546, column: 9, scope: !12655)
!12657 = !DILocation(line: 3546, column: 16, scope: !12658)
!12658 = distinct !DILexicalBlock(scope: !12655, file: !3, line: 3546, column: 4)
!12659 = !DILocation(line: 3546, column: 20, scope: !12658)
!12660 = !DILocation(line: 3546, column: 18, scope: !12658)
!12661 = !DILocation(line: 3546, column: 4, scope: !12655)
!12662 = !DILocation(line: 3547, column: 32, scope: !12658)
!12663 = !DILocation(line: 3547, column: 39, scope: !12658)
!12664 = !DILocation(line: 3547, column: 17, scope: !12658)
!12665 = !DILocation(line: 3547, column: 6, scope: !12658)
!12666 = !DILocation(line: 3547, column: 12, scope: !12658)
!12667 = !DILocation(line: 3547, column: 15, scope: !12658)
!12668 = !DILocation(line: 3546, column: 41, scope: !12658)
!12669 = !DILocation(line: 3546, column: 4, scope: !12658)
!12670 = distinct !{!12670, !12661, !12671}
!12671 = !DILocation(line: 3547, column: 41, scope: !12655)
!12672 = !DILocation(line: 3549, column: 17, scope: !12606)
!12673 = !DILocation(line: 3549, column: 22, scope: !12606)
!12674 = !DILocation(line: 3549, column: 4, scope: !12606)
!12675 = !DILocation(line: 3550, column: 16, scope: !12606)
!12676 = !DILocation(line: 3550, column: 21, scope: !12606)
!12677 = !DILocation(line: 3550, column: 4, scope: !12606)
!12678 = !DILocation(line: 3551, column: 2, scope: !12606)
!12679 = !DILocation(line: 3532, column: 19, scope: !12602)
!12680 = !DILabel(scope: !12407, name: "next_problem", file: !3, line: 3553)
!12681 = !DILocation(line: 3553, column: 5, scope: !12407)
!12682 = !DILocation(line: 3554, column: 27, scope: !12407)
!12683 = !DILocation(line: 3554, column: 7, scope: !12407)
!12684 = !DILocation(line: 3555, column: 5, scope: !12407)
!12685 = !DILocation(line: 3465, column: 60, scope: !12399)
!12686 = !DILocation(line: 3464, column: 3, scope: !12399)
!12687 = distinct !{!12687, !12405, !12688}
!12688 = !DILocation(line: 3555, column: 5, scope: !12396)
!12689 = !DILocation(line: 3556, column: 1, scope: !12374)
!12690 = distinct !DISubprogram(name: "omega_add_zero_eq", scope: !639, file: !639, line: 255, type: !12341, scopeLine: 256, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!12691 = !DILocalVariable(name: "pb", arg: 1, scope: !12690, file: !639, line: 255, type: !7735)
!12692 = !DILocation(line: 255, column: 29, scope: !12690)
!12693 = !DILocalVariable(name: "color", arg: 2, scope: !12690, file: !639, line: 255, type: !638)
!12694 = !DILocation(line: 255, column: 54, scope: !12690)
!12695 = !DILocalVariable(name: "idx", scope: !12690, file: !639, line: 257, type: !908)
!12696 = !DILocation(line: 257, column: 7, scope: !12690)
!12697 = !DILocation(line: 257, column: 13, scope: !12690)
!12698 = !DILocation(line: 257, column: 17, scope: !12690)
!12699 = !DILocation(line: 257, column: 24, scope: !12690)
!12700 = !DILocation(line: 259, column: 3, scope: !12690)
!12701 = !DILocation(line: 260, column: 25, scope: !12690)
!12702 = !DILocation(line: 260, column: 29, scope: !12690)
!12703 = !DILocation(line: 260, column: 33, scope: !12690)
!12704 = !DILocation(line: 260, column: 39, scope: !12690)
!12705 = !DILocation(line: 260, column: 43, scope: !12690)
!12706 = !DILocation(line: 260, column: 3, scope: !12690)
!12707 = !DILocation(line: 261, column: 24, scope: !12690)
!12708 = !DILocation(line: 261, column: 3, scope: !12690)
!12709 = !DILocation(line: 261, column: 7, scope: !12690)
!12710 = !DILocation(line: 261, column: 11, scope: !12690)
!12711 = !DILocation(line: 261, column: 16, scope: !12690)
!12712 = !DILocation(line: 261, column: 22, scope: !12690)
!12713 = !DILocation(line: 262, column: 10, scope: !12690)
!12714 = !DILocation(line: 262, column: 3, scope: !12690)
!12715 = distinct !DISubprogram(name: "init_omega_eq_with_af", scope: !3, file: !3, line: 3398, type: !12716, scopeLine: 3401, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!12716 = !DISubroutineType(types: !12717)
!12717 = !{!931, !7735, !7, !7, !811, !2243}
!12718 = !DILocalVariable(name: "pb", arg: 1, scope: !12715, file: !3, line: 3398, type: !7735)
!12719 = !DILocation(line: 3398, column: 33, scope: !12715)
!12720 = !DILocalVariable(name: "eq", arg: 2, scope: !12715, file: !3, line: 3398, type: !7)
!12721 = !DILocation(line: 3398, column: 46, scope: !12715)
!12722 = !DILocalVariable(name: "offset", arg: 3, scope: !12715, file: !3, line: 3399, type: !7)
!12723 = !DILocation(line: 3399, column: 23, scope: !12715)
!12724 = !DILocalVariable(name: "access_fun", arg: 4, scope: !12715, file: !3, line: 3399, type: !811)
!12725 = !DILocation(line: 3399, column: 36, scope: !12715)
!12726 = !DILocalVariable(name: "ddr", arg: 5, scope: !12715, file: !3, line: 3400, type: !2243)
!12727 = !DILocation(line: 3400, column: 43, scope: !12715)
!12728 = !DILocation(line: 3402, column: 11, scope: !12715)
!12729 = !DILocation(line: 3402, column: 3, scope: !12715)
!12730 = !DILocalVariable(name: "left", scope: !12731, file: !3, line: 3406, type: !811)
!12731 = distinct !DILexicalBlock(scope: !12732, file: !3, line: 3405, column: 7)
!12732 = distinct !DILexicalBlock(scope: !12715, file: !3, line: 3403, column: 5)
!12733 = !DILocation(line: 3406, column: 7, scope: !12731)
!12734 = !DILocation(line: 3406, column: 14, scope: !12731)
!12735 = !DILocalVariable(name: "right", scope: !12731, file: !3, line: 3407, type: !811)
!12736 = !DILocation(line: 3407, column: 7, scope: !12731)
!12737 = !DILocation(line: 3407, column: 15, scope: !12731)
!12738 = !DILocalVariable(name: "var", scope: !12731, file: !3, line: 3408, type: !908)
!12739 = !DILocation(line: 3408, column: 6, scope: !12731)
!12740 = !DILocation(line: 3408, column: 12, scope: !12731)
!12741 = !DILocalVariable(name: "var_idx", scope: !12731, file: !3, line: 3409, type: !7)
!12742 = !DILocation(line: 3409, column: 11, scope: !12731)
!12743 = !DILocation(line: 3411, column: 6, scope: !12744)
!12744 = distinct !DILexicalBlock(scope: !12731, file: !3, line: 3411, column: 6)
!12745 = !DILocation(line: 3411, column: 24, scope: !12744)
!12746 = !DILocation(line: 3411, column: 6, scope: !12731)
!12747 = !DILocation(line: 3412, column: 4, scope: !12744)
!12748 = !DILocation(line: 3414, column: 32, scope: !12731)
!12749 = !DILocation(line: 3414, column: 37, scope: !12731)
!12750 = !DILocation(line: 3414, column: 12, scope: !12731)
!12751 = !DILocation(line: 3414, column: 10, scope: !12731)
!12752 = !DILocation(line: 3415, column: 58, scope: !12731)
!12753 = !DILocation(line: 3415, column: 43, scope: !12731)
!12754 = !DILocation(line: 3415, column: 2, scope: !12731)
!12755 = !DILocation(line: 3415, column: 6, scope: !12731)
!12756 = !DILocation(line: 3415, column: 10, scope: !12731)
!12757 = !DILocation(line: 3415, column: 14, scope: !12731)
!12758 = !DILocation(line: 3415, column: 19, scope: !12731)
!12759 = !DILocation(line: 3415, column: 28, scope: !12731)
!12760 = !DILocation(line: 3415, column: 26, scope: !12731)
!12761 = !DILocation(line: 3415, column: 36, scope: !12731)
!12762 = !DILocation(line: 3415, column: 41, scope: !12731)
!12763 = !DILocation(line: 3418, column: 25, scope: !12731)
!12764 = !DILocation(line: 3418, column: 2, scope: !12731)
!12765 = !DILocation(line: 3418, column: 23, scope: !12731)
!12766 = !DILocation(line: 3420, column: 6, scope: !12767)
!12767 = distinct !DILexicalBlock(scope: !12731, file: !3, line: 3420, column: 6)
!12768 = !DILocation(line: 3420, column: 13, scope: !12767)
!12769 = !DILocation(line: 3420, column: 6, scope: !12731)
!12770 = !DILocation(line: 3422, column: 24, scope: !12767)
!12771 = !DILocation(line: 3422, column: 9, scope: !12767)
!12772 = !DILocation(line: 3421, column: 4, scope: !12767)
!12773 = !DILocation(line: 3421, column: 8, scope: !12767)
!12774 = !DILocation(line: 3421, column: 12, scope: !12767)
!12775 = !DILocation(line: 3421, column: 16, scope: !12767)
!12776 = !DILocation(line: 3421, column: 21, scope: !12767)
!12777 = !DILocation(line: 3421, column: 31, scope: !12767)
!12778 = !DILocation(line: 3421, column: 29, scope: !12767)
!12779 = !DILocation(line: 3421, column: 50, scope: !12767)
!12780 = !DILocation(line: 3422, column: 6, scope: !12767)
!12781 = !DILocation(line: 3424, column: 10, scope: !12731)
!12782 = !DILocation(line: 3424, column: 2, scope: !12731)
!12783 = !DILocation(line: 3427, column: 36, scope: !12784)
!12784 = distinct !DILexicalBlock(scope: !12731, file: !3, line: 3425, column: 4)
!12785 = !DILocation(line: 3427, column: 40, scope: !12784)
!12786 = !DILocation(line: 3427, column: 44, scope: !12784)
!12787 = !DILocation(line: 3427, column: 52, scope: !12784)
!12788 = !DILocation(line: 3427, column: 58, scope: !12784)
!12789 = !DILocation(line: 3427, column: 13, scope: !12784)
!12790 = !DILocation(line: 3427, column: 6, scope: !12784)
!12791 = !DILocation(line: 3430, column: 44, scope: !12784)
!12792 = !DILocation(line: 3430, column: 29, scope: !12784)
!12793 = !DILocation(line: 3430, column: 6, scope: !12784)
!12794 = !DILocation(line: 3430, column: 10, scope: !12784)
!12795 = !DILocation(line: 3430, column: 14, scope: !12784)
!12796 = !DILocation(line: 3430, column: 18, scope: !12784)
!12797 = !DILocation(line: 3430, column: 26, scope: !12784)
!12798 = !DILocation(line: 3431, column: 6, scope: !12784)
!12799 = !DILocation(line: 3434, column: 6, scope: !12784)
!12800 = !DILocation(line: 3439, column: 45, scope: !12732)
!12801 = !DILocation(line: 3439, column: 30, scope: !12732)
!12802 = !DILocation(line: 3439, column: 7, scope: !12732)
!12803 = !DILocation(line: 3439, column: 11, scope: !12732)
!12804 = !DILocation(line: 3439, column: 15, scope: !12732)
!12805 = !DILocation(line: 3439, column: 19, scope: !12732)
!12806 = !DILocation(line: 3439, column: 27, scope: !12732)
!12807 = !DILocation(line: 3440, column: 7, scope: !12732)
!12808 = !DILocation(line: 3443, column: 7, scope: !12732)
!12809 = !DILocation(line: 3445, column: 1, scope: !12715)
!12810 = distinct !DISubprogram(name: "lambda_vector_gcd", scope: !2216, file: !2216, line: 447, type: !12811, scopeLine: 448, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!12811 = !DISubroutineType(types: !12812)
!12812 = !{!908, !2227, !908}
!12813 = !DILocalVariable(name: "vector", arg: 1, scope: !12810, file: !2216, line: 447, type: !2227)
!12814 = !DILocation(line: 447, column: 34, scope: !12810)
!12815 = !DILocalVariable(name: "size", arg: 2, scope: !12810, file: !2216, line: 447, type: !908)
!12816 = !DILocation(line: 447, column: 46, scope: !12810)
!12817 = !DILocalVariable(name: "i", scope: !12810, file: !2216, line: 449, type: !908)
!12818 = !DILocation(line: 449, column: 7, scope: !12810)
!12819 = !DILocalVariable(name: "gcd1", scope: !12810, file: !2216, line: 450, type: !908)
!12820 = !DILocation(line: 450, column: 7, scope: !12810)
!12821 = !DILocation(line: 452, column: 7, scope: !12822)
!12822 = distinct !DILexicalBlock(scope: !12810, file: !2216, line: 452, column: 7)
!12823 = !DILocation(line: 452, column: 12, scope: !12822)
!12824 = !DILocation(line: 452, column: 7, scope: !12810)
!12825 = !DILocation(line: 454, column: 14, scope: !12826)
!12826 = distinct !DILexicalBlock(scope: !12822, file: !2216, line: 453, column: 5)
!12827 = !DILocation(line: 454, column: 12, scope: !12826)
!12828 = !DILocation(line: 455, column: 14, scope: !12829)
!12829 = distinct !DILexicalBlock(scope: !12826, file: !2216, line: 455, column: 7)
!12830 = !DILocation(line: 455, column: 12, scope: !12829)
!12831 = !DILocation(line: 455, column: 19, scope: !12832)
!12832 = distinct !DILexicalBlock(scope: !12829, file: !2216, line: 455, column: 7)
!12833 = !DILocation(line: 455, column: 23, scope: !12832)
!12834 = !DILocation(line: 455, column: 21, scope: !12832)
!12835 = !DILocation(line: 455, column: 7, scope: !12829)
!12836 = !DILocation(line: 456, column: 14, scope: !12832)
!12837 = !DILocation(line: 456, column: 20, scope: !12832)
!12838 = !DILocation(line: 456, column: 27, scope: !12832)
!12839 = !DILocation(line: 456, column: 9, scope: !12832)
!12840 = !DILocation(line: 456, column: 7, scope: !12832)
!12841 = !DILocation(line: 456, column: 2, scope: !12832)
!12842 = !DILocation(line: 455, column: 30, scope: !12832)
!12843 = !DILocation(line: 455, column: 7, scope: !12832)
!12844 = distinct !{!12844, !12835, !12845}
!12845 = !DILocation(line: 456, column: 29, scope: !12829)
!12846 = !DILocation(line: 457, column: 5, scope: !12826)
!12847 = !DILocation(line: 458, column: 10, scope: !12810)
!12848 = !DILocation(line: 458, column: 3, scope: !12810)
!12849 = distinct !DISubprogram(name: "omega_init_eqn_zero", scope: !639, file: !639, line: 203, type: !12850, scopeLine: 204, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!12850 = !DISubroutineType(types: !12851)
!12851 = !{null, !7750, !908}
!12852 = !DILocalVariable(name: "e", arg: 1, scope: !12849, file: !639, line: 203, type: !7750)
!12853 = !DILocation(line: 203, column: 26, scope: !12849)
!12854 = !DILocalVariable(name: "s", arg: 2, scope: !12849, file: !639, line: 203, type: !908)
!12855 = !DILocation(line: 203, column: 33, scope: !12849)
!12856 = !DILocation(line: 205, column: 3, scope: !12849)
!12857 = !DILocation(line: 205, column: 6, scope: !12849)
!12858 = !DILocation(line: 205, column: 10, scope: !12849)
!12859 = !DILocation(line: 206, column: 3, scope: !12849)
!12860 = !DILocation(line: 206, column: 6, scope: !12849)
!12861 = !DILocation(line: 206, column: 14, scope: !12849)
!12862 = !DILocation(line: 207, column: 3, scope: !12849)
!12863 = !DILocation(line: 207, column: 6, scope: !12849)
!12864 = !DILocation(line: 207, column: 12, scope: !12849)
!12865 = !DILocation(line: 209, column: 11, scope: !12849)
!12866 = !DILocation(line: 209, column: 14, scope: !12849)
!12867 = !DILocation(line: 209, column: 3, scope: !12849)
!12868 = !DILocation(line: 209, column: 24, scope: !12849)
!12869 = !DILocation(line: 209, column: 26, scope: !12849)
!12870 = !DILocation(line: 209, column: 23, scope: !12849)
!12871 = !DILocation(line: 209, column: 31, scope: !12849)
!12872 = !DILocation(line: 210, column: 1, scope: !12849)
!12873 = distinct !DISubprogram(name: "omega_copy_problem", scope: !639, file: !639, line: 310, type: !12874, scopeLine: 311, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!12874 = !DISubroutineType(types: !12875)
!12875 = !{null, !7735, !7735}
!12876 = !DILocalVariable(name: "p1", arg: 1, scope: !12873, file: !639, line: 310, type: !7735)
!12877 = !DILocation(line: 310, column: 30, scope: !12873)
!12878 = !DILocalVariable(name: "p2", arg: 2, scope: !12873, file: !639, line: 310, type: !7735)
!12879 = !DILocation(line: 310, column: 43, scope: !12873)
!12880 = !DILocalVariable(name: "e", scope: !12873, file: !639, line: 312, type: !908)
!12881 = !DILocation(line: 312, column: 7, scope: !12873)
!12882 = !DILocalVariable(name: "i", scope: !12873, file: !639, line: 312, type: !908)
!12883 = !DILocation(line: 312, column: 10, scope: !12873)
!12884 = !DILocation(line: 314, column: 18, scope: !12873)
!12885 = !DILocation(line: 314, column: 22, scope: !12873)
!12886 = !DILocation(line: 314, column: 3, scope: !12873)
!12887 = !DILocation(line: 314, column: 7, scope: !12873)
!12888 = !DILocation(line: 314, column: 16, scope: !12873)
!12889 = !DILocation(line: 315, column: 22, scope: !12873)
!12890 = !DILocation(line: 315, column: 26, scope: !12873)
!12891 = !DILocation(line: 315, column: 3, scope: !12873)
!12892 = !DILocation(line: 315, column: 7, scope: !12873)
!12893 = !DILocation(line: 315, column: 20, scope: !12873)
!12894 = !DILocation(line: 316, column: 31, scope: !12873)
!12895 = !DILocation(line: 316, column: 35, scope: !12873)
!12896 = !DILocation(line: 316, column: 3, scope: !12873)
!12897 = !DILocation(line: 316, column: 7, scope: !12873)
!12898 = !DILocation(line: 316, column: 29, scope: !12873)
!12899 = !DILocation(line: 317, column: 25, scope: !12873)
!12900 = !DILocation(line: 317, column: 29, scope: !12873)
!12901 = !DILocation(line: 317, column: 3, scope: !12873)
!12902 = !DILocation(line: 317, column: 7, scope: !12873)
!12903 = !DILocation(line: 317, column: 23, scope: !12873)
!12904 = !DILocation(line: 318, column: 19, scope: !12873)
!12905 = !DILocation(line: 318, column: 23, scope: !12873)
!12906 = !DILocation(line: 318, column: 3, scope: !12873)
!12907 = !DILocation(line: 318, column: 7, scope: !12873)
!12908 = !DILocation(line: 318, column: 17, scope: !12873)
!12909 = !DILocation(line: 319, column: 17, scope: !12873)
!12910 = !DILocation(line: 319, column: 21, scope: !12873)
!12911 = !DILocation(line: 319, column: 3, scope: !12873)
!12912 = !DILocation(line: 319, column: 7, scope: !12873)
!12913 = !DILocation(line: 319, column: 15, scope: !12873)
!12914 = !DILocation(line: 320, column: 18, scope: !12873)
!12915 = !DILocation(line: 320, column: 22, scope: !12873)
!12916 = !DILocation(line: 320, column: 3, scope: !12873)
!12917 = !DILocation(line: 320, column: 7, scope: !12873)
!12918 = !DILocation(line: 320, column: 16, scope: !12873)
!12919 = !DILocation(line: 321, column: 18, scope: !12873)
!12920 = !DILocation(line: 321, column: 22, scope: !12873)
!12921 = !DILocation(line: 321, column: 3, scope: !12873)
!12922 = !DILocation(line: 321, column: 7, scope: !12873)
!12923 = !DILocation(line: 321, column: 16, scope: !12873)
!12924 = !DILocation(line: 323, column: 12, scope: !12925)
!12925 = distinct !DILexicalBlock(scope: !12873, file: !639, line: 323, column: 3)
!12926 = !DILocation(line: 323, column: 16, scope: !12925)
!12927 = !DILocation(line: 323, column: 24, scope: !12925)
!12928 = !DILocation(line: 323, column: 10, scope: !12925)
!12929 = !DILocation(line: 323, column: 8, scope: !12925)
!12930 = !DILocation(line: 323, column: 29, scope: !12931)
!12931 = distinct !DILexicalBlock(scope: !12925, file: !639, line: 323, column: 3)
!12932 = !DILocation(line: 323, column: 31, scope: !12931)
!12933 = !DILocation(line: 323, column: 3, scope: !12925)
!12934 = !DILocation(line: 324, column: 23, scope: !12931)
!12935 = !DILocation(line: 324, column: 27, scope: !12931)
!12936 = !DILocation(line: 324, column: 31, scope: !12931)
!12937 = !DILocation(line: 324, column: 38, scope: !12931)
!12938 = !DILocation(line: 324, column: 42, scope: !12931)
!12939 = !DILocation(line: 324, column: 46, scope: !12931)
!12940 = !DILocation(line: 324, column: 51, scope: !12931)
!12941 = !DILocation(line: 324, column: 55, scope: !12931)
!12942 = !DILocation(line: 324, column: 5, scope: !12931)
!12943 = !DILocation(line: 323, column: 38, scope: !12931)
!12944 = !DILocation(line: 323, column: 3, scope: !12931)
!12945 = distinct !{!12945, !12933, !12946}
!12946 = !DILocation(line: 324, column: 63, scope: !12925)
!12947 = !DILocation(line: 326, column: 12, scope: !12948)
!12948 = distinct !DILexicalBlock(scope: !12873, file: !639, line: 326, column: 3)
!12949 = !DILocation(line: 326, column: 16, scope: !12948)
!12950 = !DILocation(line: 326, column: 25, scope: !12948)
!12951 = !DILocation(line: 326, column: 10, scope: !12948)
!12952 = !DILocation(line: 326, column: 8, scope: !12948)
!12953 = !DILocation(line: 326, column: 30, scope: !12954)
!12954 = distinct !DILexicalBlock(scope: !12948, file: !639, line: 326, column: 3)
!12955 = !DILocation(line: 326, column: 32, scope: !12954)
!12956 = !DILocation(line: 326, column: 3, scope: !12948)
!12957 = !DILocation(line: 327, column: 23, scope: !12954)
!12958 = !DILocation(line: 327, column: 27, scope: !12954)
!12959 = !DILocation(line: 327, column: 32, scope: !12954)
!12960 = !DILocation(line: 327, column: 39, scope: !12954)
!12961 = !DILocation(line: 327, column: 43, scope: !12954)
!12962 = !DILocation(line: 327, column: 48, scope: !12954)
!12963 = !DILocation(line: 327, column: 53, scope: !12954)
!12964 = !DILocation(line: 327, column: 57, scope: !12954)
!12965 = !DILocation(line: 327, column: 5, scope: !12954)
!12966 = !DILocation(line: 326, column: 39, scope: !12954)
!12967 = !DILocation(line: 326, column: 3, scope: !12954)
!12968 = distinct !{!12968, !12956, !12969}
!12969 = !DILocation(line: 327, column: 65, scope: !12948)
!12970 = !DILocation(line: 329, column: 12, scope: !12971)
!12971 = distinct !DILexicalBlock(scope: !12873, file: !639, line: 329, column: 3)
!12972 = !DILocation(line: 329, column: 16, scope: !12971)
!12973 = !DILocation(line: 329, column: 25, scope: !12971)
!12974 = !DILocation(line: 329, column: 10, scope: !12971)
!12975 = !DILocation(line: 329, column: 8, scope: !12971)
!12976 = !DILocation(line: 329, column: 30, scope: !12977)
!12977 = distinct !DILexicalBlock(scope: !12971, file: !639, line: 329, column: 3)
!12978 = !DILocation(line: 329, column: 32, scope: !12977)
!12979 = !DILocation(line: 329, column: 3, scope: !12971)
!12980 = !DILocation(line: 330, column: 23, scope: !12977)
!12981 = !DILocation(line: 330, column: 27, scope: !12977)
!12982 = !DILocation(line: 330, column: 32, scope: !12977)
!12983 = !DILocation(line: 330, column: 39, scope: !12977)
!12984 = !DILocation(line: 330, column: 43, scope: !12977)
!12985 = !DILocation(line: 330, column: 48, scope: !12977)
!12986 = !DILocation(line: 330, column: 53, scope: !12977)
!12987 = !DILocation(line: 330, column: 57, scope: !12977)
!12988 = !DILocation(line: 330, column: 5, scope: !12977)
!12989 = !DILocation(line: 329, column: 39, scope: !12977)
!12990 = !DILocation(line: 329, column: 3, scope: !12977)
!12991 = distinct !{!12991, !12979, !12992}
!12992 = !DILocation(line: 330, column: 65, scope: !12971)
!12993 = !DILocation(line: 332, column: 12, scope: !12994)
!12994 = distinct !DILexicalBlock(scope: !12873, file: !639, line: 332, column: 3)
!12995 = !DILocation(line: 332, column: 16, scope: !12994)
!12996 = !DILocation(line: 332, column: 10, scope: !12994)
!12997 = !DILocation(line: 332, column: 8, scope: !12994)
!12998 = !DILocation(line: 332, column: 26, scope: !12999)
!12999 = distinct !DILexicalBlock(scope: !12994, file: !639, line: 332, column: 3)
!13000 = !DILocation(line: 332, column: 28, scope: !12999)
!13001 = !DILocation(line: 332, column: 3, scope: !12994)
!13002 = !DILocation(line: 333, column: 18, scope: !12999)
!13003 = !DILocation(line: 333, column: 22, scope: !12999)
!13004 = !DILocation(line: 333, column: 26, scope: !12999)
!13005 = !DILocation(line: 333, column: 5, scope: !12999)
!13006 = !DILocation(line: 333, column: 9, scope: !12999)
!13007 = !DILocation(line: 333, column: 13, scope: !12999)
!13008 = !DILocation(line: 333, column: 16, scope: !12999)
!13009 = !DILocation(line: 332, column: 35, scope: !12999)
!13010 = !DILocation(line: 332, column: 3, scope: !12999)
!13011 = distinct !{!13011, !13001, !13012}
!13012 = !DILocation(line: 333, column: 27, scope: !12994)
!13013 = !DILocation(line: 335, column: 12, scope: !13014)
!13014 = distinct !DILexicalBlock(scope: !12873, file: !639, line: 335, column: 3)
!13015 = !DILocation(line: 335, column: 10, scope: !13014)
!13016 = !DILocation(line: 335, column: 8, scope: !13014)
!13017 = !DILocation(line: 335, column: 28, scope: !13018)
!13018 = distinct !DILexicalBlock(scope: !13014, file: !639, line: 335, column: 3)
!13019 = !DILocation(line: 335, column: 30, scope: !13018)
!13020 = !DILocation(line: 335, column: 3, scope: !13014)
!13021 = !DILocation(line: 336, column: 33, scope: !13018)
!13022 = !DILocation(line: 336, column: 37, scope: !13018)
!13023 = !DILocation(line: 336, column: 56, scope: !13018)
!13024 = !DILocation(line: 336, column: 5, scope: !13018)
!13025 = !DILocation(line: 336, column: 9, scope: !13018)
!13026 = !DILocation(line: 336, column: 28, scope: !13018)
!13027 = !DILocation(line: 336, column: 31, scope: !13018)
!13028 = !DILocation(line: 335, column: 37, scope: !13018)
!13029 = !DILocation(line: 335, column: 3, scope: !13018)
!13030 = distinct !{!13030, !13020, !13031}
!13031 = !DILocation(line: 336, column: 57, scope: !13014)
!13032 = !DILocation(line: 337, column: 1, scope: !12873)
!13033 = distinct !DISubprogram(name: "omega_copy_eqn", scope: !639, file: !639, line: 191, type: !13034, scopeLine: 192, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13034 = !DISubroutineType(types: !13035)
!13035 = !{null, !7750, !7750, !908}
!13036 = !DILocalVariable(name: "e1", arg: 1, scope: !13033, file: !639, line: 191, type: !7750)
!13037 = !DILocation(line: 191, column: 21, scope: !13033)
!13038 = !DILocalVariable(name: "e2", arg: 2, scope: !13033, file: !639, line: 191, type: !7750)
!13039 = !DILocation(line: 191, column: 29, scope: !13033)
!13040 = !DILocalVariable(name: "s", arg: 3, scope: !13033, file: !639, line: 191, type: !908)
!13041 = !DILocation(line: 191, column: 37, scope: !13033)
!13042 = !DILocation(line: 193, column: 13, scope: !13033)
!13043 = !DILocation(line: 193, column: 17, scope: !13033)
!13044 = !DILocation(line: 193, column: 3, scope: !13033)
!13045 = !DILocation(line: 193, column: 7, scope: !13033)
!13046 = !DILocation(line: 193, column: 11, scope: !13033)
!13047 = !DILocation(line: 194, column: 17, scope: !13033)
!13048 = !DILocation(line: 194, column: 21, scope: !13033)
!13049 = !DILocation(line: 194, column: 3, scope: !13033)
!13050 = !DILocation(line: 194, column: 7, scope: !13033)
!13051 = !DILocation(line: 194, column: 15, scope: !13033)
!13052 = !DILocation(line: 195, column: 15, scope: !13033)
!13053 = !DILocation(line: 195, column: 19, scope: !13033)
!13054 = !DILocation(line: 195, column: 3, scope: !13033)
!13055 = !DILocation(line: 195, column: 7, scope: !13033)
!13056 = !DILocation(line: 195, column: 13, scope: !13033)
!13057 = !DILocation(line: 197, column: 11, scope: !13033)
!13058 = !DILocation(line: 197, column: 15, scope: !13033)
!13059 = !DILocation(line: 197, column: 3, scope: !13033)
!13060 = !DILocation(line: 197, column: 21, scope: !13033)
!13061 = !DILocation(line: 197, column: 25, scope: !13033)
!13062 = !DILocation(line: 197, column: 32, scope: !13033)
!13063 = !DILocation(line: 197, column: 34, scope: !13033)
!13064 = !DILocation(line: 197, column: 31, scope: !13033)
!13065 = !DILocation(line: 197, column: 39, scope: !13033)
!13066 = !DILocation(line: 198, column: 1, scope: !13033)
!13067 = distinct !DISubprogram(name: "omega_free_eqns", scope: !639, file: !639, line: 232, type: !12850, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13068 = !DILocalVariable(name: "eq", arg: 1, scope: !13067, file: !639, line: 232, type: !7750)
!13069 = !DILocation(line: 232, column: 22, scope: !13067)
!13070 = !DILocalVariable(name: "n", arg: 2, scope: !13067, file: !639, line: 232, type: !908)
!13071 = !DILocation(line: 232, column: 30, scope: !13067)
!13072 = !DILocalVariable(name: "i", scope: !13067, file: !639, line: 234, type: !908)
!13073 = !DILocation(line: 234, column: 7, scope: !13067)
!13074 = !DILocation(line: 236, column: 12, scope: !13075)
!13075 = distinct !DILexicalBlock(scope: !13067, file: !639, line: 236, column: 3)
!13076 = !DILocation(line: 236, column: 14, scope: !13075)
!13077 = !DILocation(line: 236, column: 10, scope: !13075)
!13078 = !DILocation(line: 236, column: 8, scope: !13075)
!13079 = !DILocation(line: 236, column: 19, scope: !13080)
!13080 = distinct !DILexicalBlock(scope: !13075, file: !639, line: 236, column: 3)
!13081 = !DILocation(line: 236, column: 21, scope: !13080)
!13082 = !DILocation(line: 236, column: 3, scope: !13075)
!13083 = !DILocation(line: 237, column: 11, scope: !13080)
!13084 = !DILocation(line: 237, column: 14, scope: !13080)
!13085 = !DILocation(line: 237, column: 17, scope: !13080)
!13086 = !DILocation(line: 237, column: 5, scope: !13080)
!13087 = !DILocation(line: 236, column: 28, scope: !13080)
!13088 = !DILocation(line: 236, column: 3, scope: !13080)
!13089 = distinct !{!13089, !13082, !13090}
!13090 = !DILocation(line: 237, column: 21, scope: !13075)
!13091 = !DILocation(line: 239, column: 9, scope: !13067)
!13092 = !DILocation(line: 239, column: 3, scope: !13067)
!13093 = !DILocation(line: 240, column: 1, scope: !13067)
!13094 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !422, file: !422, line: 1283, type: !4938, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13095 = !DILocalVariable(name: "g", arg: 1, scope: !13094, file: !422, line: 1283, type: !2363)
!13096 = !DILocation(line: 1283, column: 34, scope: !13094)
!13097 = !DILocation(line: 1285, column: 23, scope: !13094)
!13098 = !DILocation(line: 1285, column: 10, scope: !13094)
!13099 = !DILocation(line: 1285, column: 26, scope: !13094)
!13100 = !DILocation(line: 1285, column: 43, scope: !13094)
!13101 = !DILocation(line: 1285, column: 59, scope: !13094)
!13102 = !DILocation(line: 1285, column: 46, scope: !13094)
!13103 = !DILocation(line: 1285, column: 62, scope: !13094)
!13104 = !DILocation(line: 0, scope: !13094)
!13105 = !DILocation(line: 1285, column: 3, scope: !13094)
!13106 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !422, file: !422, line: 1647, type: !5000, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13107 = !DILocalVariable(name: "gs", arg: 1, scope: !13106, file: !422, line: 1647, type: !2363)
!13108 = !DILocation(line: 1647, column: 29, scope: !13106)
!13109 = !DILocalVariable(name: "i", arg: 2, scope: !13106, file: !422, line: 1647, type: !7)
!13110 = !DILocation(line: 1647, column: 42, scope: !13106)
!13111 = !DILocation(line: 1649, column: 23, scope: !13112)
!13112 = distinct !DILexicalBlock(scope: !13106, file: !422, line: 1649, column: 7)
!13113 = !DILocation(line: 1649, column: 7, scope: !13112)
!13114 = !DILocation(line: 1649, column: 7, scope: !13106)
!13115 = !DILocation(line: 1654, column: 26, scope: !13116)
!13116 = distinct !DILexicalBlock(scope: !13112, file: !422, line: 1650, column: 5)
!13117 = !DILocation(line: 1654, column: 14, scope: !13116)
!13118 = !DILocation(line: 1654, column: 52, scope: !13116)
!13119 = !DILocation(line: 1654, column: 50, scope: !13116)
!13120 = !DILocation(line: 1654, column: 7, scope: !13116)
!13121 = !DILocation(line: 1657, column: 5, scope: !13112)
!13122 = !DILocation(line: 1658, column: 1, scope: !13106)
!13123 = distinct !DISubprogram(name: "VEC_data_ref_loc_heap_reserve", scope: !391, file: !391, line: 376, type: !13124, scopeLine: 376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13124 = !DISubroutineType(types: !13125)
!13125 = !{!908, !4775, !908}
!13126 = !DILocalVariable(name: "vec_", arg: 1, scope: !13123, file: !391, line: 376, type: !4775)
!13127 = !DILocation(line: 376, column: 1, scope: !13123)
!13128 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13123, file: !391, line: 376, type: !908)
!13129 = !DILocalVariable(name: "extend", scope: !13123, file: !391, line: 376, type: !908)
!13130 = !DILocation(line: 376, column: 1, scope: !13131)
!13131 = distinct !DILexicalBlock(scope: !13123, file: !391, line: 376, column: 1)
!13132 = distinct !DISubprogram(name: "VEC_data_ref_loc_base_quick_push", scope: !391, file: !391, line: 375, type: !13133, scopeLine: 375, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13133 = !DISubroutineType(types: !13134)
!13134 = !{!4783, !5094, !4981}
!13135 = !DILocalVariable(name: "vec_", arg: 1, scope: !13132, file: !391, line: 375, type: !5094)
!13136 = !DILocation(line: 375, column: 1, scope: !13132)
!13137 = !DILocalVariable(name: "obj_", arg: 2, scope: !13132, file: !391, line: 375, type: !4981)
!13138 = !DILocalVariable(name: "slot_", scope: !13132, file: !391, line: 375, type: !4783)
!13139 = !DILocation(line: 375, column: 1, scope: !13140)
!13140 = distinct !DILexicalBlock(scope: !13132, file: !391, line: 375, column: 1)
!13141 = distinct !DISubprogram(name: "VEC_data_ref_loc_base_space", scope: !391, file: !391, line: 375, type: !13142, scopeLine: 375, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13142 = !DISubroutineType(types: !13143)
!13143 = !{!908, !5094, !908}
!13144 = !DILocalVariable(name: "vec_", arg: 1, scope: !13141, file: !391, line: 375, type: !5094)
!13145 = !DILocation(line: 375, column: 1, scope: !13141)
!13146 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13141, file: !391, line: 375, type: !908)
!13147 = distinct !DISubprogram(name: "VEC_data_reference_p_heap_reserve", scope: !391, file: !391, line: 209, type: !13148, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13148 = !DISubroutineType(types: !13149)
!13149 = !{!908, !5014, !908}
!13150 = !DILocalVariable(name: "vec_", arg: 1, scope: !13147, file: !391, line: 209, type: !5014)
!13151 = !DILocation(line: 209, column: 1, scope: !13147)
!13152 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13147, file: !391, line: 209, type: !908)
!13153 = !DILocalVariable(name: "extend", scope: !13147, file: !391, line: 209, type: !908)
!13154 = !DILocation(line: 209, column: 1, scope: !13155)
!13155 = distinct !DILexicalBlock(scope: !13147, file: !391, line: 209, column: 1)
!13156 = distinct !DISubprogram(name: "VEC_data_reference_p_base_quick_push", scope: !391, file: !391, line: 208, type: !13157, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13157 = !DISubroutineType(types: !13158)
!13158 = !{!2472, !13159, !2241}
!13159 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2326, size: 64)
!13160 = !DILocalVariable(name: "vec_", arg: 1, scope: !13156, file: !391, line: 208, type: !13159)
!13161 = !DILocation(line: 208, column: 1, scope: !13156)
!13162 = !DILocalVariable(name: "obj_", arg: 2, scope: !13156, file: !391, line: 208, type: !2241)
!13163 = !DILocalVariable(name: "slot_", scope: !13156, file: !391, line: 208, type: !2472)
!13164 = distinct !DISubprogram(name: "VEC_data_reference_p_base_space", scope: !391, file: !391, line: 208, type: !13165, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13165 = !DISubroutineType(types: !13166)
!13166 = !{!908, !13159, !908}
!13167 = !DILocalVariable(name: "vec_", arg: 1, scope: !13164, file: !391, line: 208, type: !13159)
!13168 = !DILocation(line: 208, column: 1, scope: !13164)
!13169 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13164, file: !391, line: 208, type: !908)
!13170 = distinct !DISubprogram(name: "VEC_loop_p_heap_reserve", scope: !146, file: !146, line: 86, type: !13171, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13171 = !DISubroutineType(types: !13172)
!13172 = !{!908, !5293, !908}
!13173 = !DILocalVariable(name: "vec_", arg: 1, scope: !13170, file: !146, line: 86, type: !5293)
!13174 = !DILocation(line: 86, column: 1, scope: !13170)
!13175 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13170, file: !146, line: 86, type: !908)
!13176 = !DILocalVariable(name: "extend", scope: !13170, file: !146, line: 86, type: !908)
!13177 = !DILocation(line: 86, column: 1, scope: !13178)
!13178 = distinct !DILexicalBlock(scope: !13170, file: !146, line: 86, column: 1)
!13179 = distinct !DISubprogram(name: "VEC_loop_p_base_quick_push", scope: !146, file: !146, line: 85, type: !13180, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13180 = !DISubroutineType(types: !13181)
!13181 = !{!3073, !13182, !1384}
!13182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1377, size: 64)
!13183 = !DILocalVariable(name: "vec_", arg: 1, scope: !13179, file: !146, line: 85, type: !13182)
!13184 = !DILocation(line: 85, column: 1, scope: !13179)
!13185 = !DILocalVariable(name: "obj_", arg: 2, scope: !13179, file: !146, line: 85, type: !1384)
!13186 = !DILocalVariable(name: "slot_", scope: !13179, file: !146, line: 85, type: !3073)
!13187 = distinct !DISubprogram(name: "VEC_loop_p_base_space", scope: !146, file: !146, line: 85, type: !13188, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13188 = !DISubroutineType(types: !13189)
!13189 = !{!908, !13182, !908}
!13190 = !DILocalVariable(name: "vec_", arg: 1, scope: !13187, file: !146, line: 85, type: !13182)
!13191 = !DILocation(line: 85, column: 1, scope: !13187)
!13192 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13187, file: !146, line: 85, type: !908)
!13193 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !2335, file: !2335, line: 32, type: !13194, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13194 = !DISubroutineType(types: !13195)
!13195 = !{!2333, !908}
!13196 = !DILocalVariable(name: "alloc_", arg: 1, scope: !13193, file: !2335, line: 32, type: !908)
!13197 = !DILocation(line: 32, column: 1, scope: !13193)
!13198 = distinct !DISubprogram(name: "number_of_loops", scope: !146, file: !146, line: 459, type: !13199, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13199 = !DISubroutineType(types: !13200)
!13200 = !{!7}
!13201 = !DILocation(line: 461, column: 8, scope: !13202)
!13202 = distinct !DILexicalBlock(scope: !13198, file: !146, line: 461, column: 7)
!13203 = !DILocation(line: 461, column: 7, scope: !13198)
!13204 = !DILocation(line: 462, column: 5, scope: !13202)
!13205 = !DILocation(line: 464, column: 10, scope: !13198)
!13206 = !DILocation(line: 464, column: 3, scope: !13198)
!13207 = !DILocation(line: 465, column: 1, scope: !13198)
!13208 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !2335, file: !2335, line: 31, type: !13209, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13209 = !DISubroutineType(types: !13210)
!13210 = !{!2228, !13211, !908}
!13211 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2339, size: 64)
!13212 = !DILocalVariable(name: "vec_", arg: 1, scope: !13208, file: !2335, line: 31, type: !13211)
!13213 = !DILocation(line: 31, column: 1, scope: !13208)
!13214 = !DILocalVariable(name: "obj_", arg: 2, scope: !13208, file: !2335, line: 31, type: !908)
!13215 = !DILocalVariable(name: "slot_", scope: !13208, file: !2335, line: 31, type: !2228)
!13216 = distinct !DISubprogram(name: "loop_outer", scope: !146, file: !146, line: 434, type: !13217, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13217 = !DISubroutineType(types: !13218)
!13218 = !{!1357, !7526}
!13219 = !DILocalVariable(name: "loop", arg: 1, scope: !13216, file: !146, line: 434, type: !7526)
!13220 = !DILocation(line: 434, column: 32, scope: !13216)
!13221 = !DILocalVariable(name: "n", scope: !13216, file: !146, line: 436, type: !7)
!13222 = !DILocation(line: 436, column: 12, scope: !13216)
!13223 = !DILocation(line: 436, column: 16, scope: !13216)
!13224 = !DILocation(line: 438, column: 7, scope: !13225)
!13225 = distinct !DILexicalBlock(scope: !13216, file: !146, line: 438, column: 7)
!13226 = !DILocation(line: 438, column: 9, scope: !13225)
!13227 = !DILocation(line: 438, column: 7, scope: !13216)
!13228 = !DILocation(line: 439, column: 5, scope: !13225)
!13229 = !DILocation(line: 441, column: 10, scope: !13216)
!13230 = !DILocation(line: 441, column: 3, scope: !13216)
!13231 = !DILocation(line: 442, column: 1, scope: !13216)
!13232 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !2335, file: !2335, line: 31, type: !13233, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13233 = !DISubroutineType(types: !13234)
!13234 = !{!908, !13235, !7, !2228}
!13235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13236, size: 64)
!13236 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2339)
!13237 = !DILocalVariable(name: "vec_", arg: 1, scope: !13232, file: !2335, line: 31, type: !13235)
!13238 = !DILocation(line: 31, column: 1, scope: !13232)
!13239 = !DILocalVariable(name: "ix_", arg: 2, scope: !13232, file: !2335, line: 31, type: !7)
!13240 = !DILocalVariable(name: "ptr", arg: 3, scope: !13232, file: !2335, line: 31, type: !2228)
!13241 = !DILocation(line: 31, column: 1, scope: !13242)
!13242 = distinct !DILexicalBlock(scope: !13232, file: !2335, line: 31, column: 1)
!13243 = !DILocation(line: 31, column: 1, scope: !13244)
!13244 = distinct !DILexicalBlock(scope: !13242, file: !2335, line: 31, column: 1)
!13245 = !DILocation(line: 31, column: 1, scope: !13246)
!13246 = distinct !DILexicalBlock(scope: !13242, file: !2335, line: 31, column: 1)
!13247 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !2335, file: !2335, line: 32, type: !13248, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13248 = !DISubroutineType(types: !13249)
!13249 = !{null, !13250}
!13250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2333, size: 64)
!13251 = !DILocalVariable(name: "vec_", arg: 1, scope: !13247, file: !2335, line: 32, type: !13250)
!13252 = !DILocation(line: 32, column: 1, scope: !13247)
!13253 = !DILocation(line: 32, column: 1, scope: !13254)
!13254 = distinct !DILexicalBlock(scope: !13247, file: !2335, line: 32, column: 1)
!13255 = distinct !DISubprogram(name: "VEC_subscript_p_heap_free", scope: !391, file: !391, line: 272, type: !13256, scopeLine: 272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13256 = !DISubroutineType(types: !13257)
!13257 = !{null, !7597}
!13258 = !DILocalVariable(name: "vec_", arg: 1, scope: !13255, file: !391, line: 272, type: !7597)
!13259 = !DILocation(line: 272, column: 1, scope: !13255)
!13260 = !DILocation(line: 272, column: 1, scope: !13261)
!13261 = distinct !DILexicalBlock(scope: !13255, file: !391, line: 272, column: 1)
!13262 = distinct !DISubprogram(name: "create_rdg_edge_for_ddr", scope: !3, file: !3, line: 4695, type: !13263, scopeLine: 4696, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13263 = !DISubroutineType(types: !13264)
!13264 = !{null, !5945, !2242}
!13265 = !DILocalVariable(name: "rdg", arg: 1, scope: !13262, file: !3, line: 4695, type: !5945)
!13266 = !DILocation(line: 4695, column: 40, scope: !13262)
!13267 = !DILocalVariable(name: "ddr", arg: 2, scope: !13262, file: !3, line: 4695, type: !2242)
!13268 = !DILocation(line: 4695, column: 51, scope: !13262)
!13269 = !DILocalVariable(name: "e", scope: !13262, file: !3, line: 4697, type: !5955)
!13270 = !DILocation(line: 4697, column: 22, scope: !13262)
!13271 = !DILocalVariable(name: "va", scope: !13262, file: !3, line: 4698, type: !908)
!13272 = !DILocation(line: 4698, column: 7, scope: !13262)
!13273 = !DILocalVariable(name: "vb", scope: !13262, file: !3, line: 4698, type: !908)
!13274 = !DILocation(line: 4698, column: 11, scope: !13262)
!13275 = !DILocalVariable(name: "dra", scope: !13262, file: !3, line: 4699, type: !2241)
!13276 = !DILocation(line: 4699, column: 20, scope: !13262)
!13277 = !DILocation(line: 4699, column: 26, scope: !13262)
!13278 = !DILocalVariable(name: "drb", scope: !13262, file: !3, line: 4700, type: !2241)
!13279 = !DILocation(line: 4700, column: 20, scope: !13262)
!13280 = !DILocation(line: 4700, column: 26, scope: !13262)
!13281 = !DILocalVariable(name: "level", scope: !13262, file: !3, line: 4701, type: !7)
!13282 = !DILocation(line: 4701, column: 12, scope: !13262)
!13283 = !DILocation(line: 4701, column: 42, scope: !13262)
!13284 = !DILocation(line: 4701, column: 20, scope: !13262)
!13285 = !DILocation(line: 4705, column: 7, scope: !13286)
!13286 = distinct !DILexicalBlock(scope: !13262, file: !3, line: 4705, column: 7)
!13287 = !DILocation(line: 4705, column: 13, scope: !13286)
!13288 = !DILocation(line: 4706, column: 7, scope: !13286)
!13289 = !DILocation(line: 4706, column: 11, scope: !13286)
!13290 = !DILocation(line: 4705, column: 7, scope: !13262)
!13291 = !DILocalVariable(name: "tmp", scope: !13292, file: !3, line: 4708, type: !2241)
!13292 = distinct !DILexicalBlock(scope: !13286, file: !3, line: 4707, column: 5)
!13293 = !DILocation(line: 4708, column: 24, scope: !13292)
!13294 = !DILocation(line: 4708, column: 30, scope: !13292)
!13295 = !DILocation(line: 4709, column: 13, scope: !13292)
!13296 = !DILocation(line: 4709, column: 11, scope: !13292)
!13297 = !DILocation(line: 4710, column: 13, scope: !13292)
!13298 = !DILocation(line: 4710, column: 11, scope: !13292)
!13299 = !DILocation(line: 4711, column: 5, scope: !13292)
!13300 = !DILocation(line: 4713, column: 29, scope: !13262)
!13301 = !DILocation(line: 4713, column: 34, scope: !13262)
!13302 = !DILocation(line: 4713, column: 8, scope: !13262)
!13303 = !DILocation(line: 4713, column: 6, scope: !13262)
!13304 = !DILocation(line: 4714, column: 29, scope: !13262)
!13305 = !DILocation(line: 4714, column: 34, scope: !13262)
!13306 = !DILocation(line: 4714, column: 8, scope: !13262)
!13307 = !DILocation(line: 4714, column: 6, scope: !13262)
!13308 = !DILocation(line: 4716, column: 7, scope: !13309)
!13309 = distinct !DILexicalBlock(scope: !13262, file: !3, line: 4716, column: 7)
!13310 = !DILocation(line: 4716, column: 10, scope: !13309)
!13311 = !DILocation(line: 4716, column: 14, scope: !13309)
!13312 = !DILocation(line: 4716, column: 17, scope: !13309)
!13313 = !DILocation(line: 4716, column: 20, scope: !13309)
!13314 = !DILocation(line: 4716, column: 7, scope: !13262)
!13315 = !DILocation(line: 4717, column: 5, scope: !13309)
!13316 = !DILocation(line: 4719, column: 17, scope: !13262)
!13317 = !DILocation(line: 4719, column: 22, scope: !13262)
!13318 = !DILocation(line: 4719, column: 26, scope: !13262)
!13319 = !DILocation(line: 4719, column: 7, scope: !13262)
!13320 = !DILocation(line: 4719, column: 5, scope: !13262)
!13321 = !DILocation(line: 4720, column: 13, scope: !13262)
!13322 = !DILocation(line: 4720, column: 3, scope: !13262)
!13323 = !DILocation(line: 4720, column: 6, scope: !13262)
!13324 = !DILocation(line: 4720, column: 11, scope: !13262)
!13325 = !DILocation(line: 4722, column: 20, scope: !13262)
!13326 = !DILocation(line: 4722, column: 3, scope: !13262)
!13327 = !DILocation(line: 4722, column: 18, scope: !13262)
!13328 = !DILocation(line: 4723, column: 23, scope: !13262)
!13329 = !DILocation(line: 4723, column: 3, scope: !13262)
!13330 = !DILocation(line: 4723, column: 21, scope: !13262)
!13331 = !DILocation(line: 4726, column: 7, scope: !13332)
!13332 = distinct !DILexicalBlock(scope: !13262, file: !3, line: 4726, column: 7)
!13333 = !DILocation(line: 4726, column: 24, scope: !13332)
!13334 = !DILocation(line: 4726, column: 27, scope: !13332)
!13335 = !DILocation(line: 4726, column: 7, scope: !13262)
!13336 = !DILocation(line: 4727, column: 5, scope: !13332)
!13337 = !DILocation(line: 4727, column: 19, scope: !13332)
!13338 = !DILocation(line: 4728, column: 13, scope: !13339)
!13339 = distinct !DILexicalBlock(scope: !13332, file: !3, line: 4728, column: 12)
!13340 = !DILocation(line: 4728, column: 30, scope: !13339)
!13341 = !DILocation(line: 4728, column: 34, scope: !13339)
!13342 = !DILocation(line: 4728, column: 12, scope: !13332)
!13343 = !DILocation(line: 4729, column: 5, scope: !13339)
!13344 = !DILocation(line: 4729, column: 19, scope: !13339)
!13345 = !DILocation(line: 4730, column: 13, scope: !13346)
!13346 = distinct !DILexicalBlock(scope: !13339, file: !3, line: 4730, column: 12)
!13347 = !DILocation(line: 4730, column: 30, scope: !13346)
!13348 = !DILocation(line: 4730, column: 33, scope: !13346)
!13349 = !DILocation(line: 4730, column: 12, scope: !13339)
!13350 = !DILocation(line: 4731, column: 5, scope: !13346)
!13351 = !DILocation(line: 4731, column: 19, scope: !13346)
!13352 = !DILocation(line: 4732, column: 12, scope: !13353)
!13353 = distinct !DILexicalBlock(scope: !13346, file: !3, line: 4732, column: 12)
!13354 = !DILocation(line: 4732, column: 29, scope: !13353)
!13355 = !DILocation(line: 4732, column: 33, scope: !13353)
!13356 = !DILocation(line: 4732, column: 12, scope: !13346)
!13357 = !DILocation(line: 4733, column: 5, scope: !13353)
!13358 = !DILocation(line: 4733, column: 19, scope: !13353)
!13359 = !DILocation(line: 4734, column: 1, scope: !13262)
!13360 = distinct !DISubprogram(name: "create_rdg_edges_for_scalar", scope: !3, file: !3, line: 4740, type: !13361, scopeLine: 4741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13361 = !DISubroutineType(types: !13362)
!13362 = !{null, !5945, !811, !908}
!13363 = !DILocalVariable(name: "rdg", arg: 1, scope: !13360, file: !3, line: 4740, type: !5945)
!13364 = !DILocation(line: 4740, column: 44, scope: !13360)
!13365 = !DILocalVariable(name: "def", arg: 2, scope: !13360, file: !3, line: 4740, type: !811)
!13366 = !DILocation(line: 4740, column: 54, scope: !13360)
!13367 = !DILocalVariable(name: "idef", arg: 3, scope: !13360, file: !3, line: 4740, type: !908)
!13368 = !DILocation(line: 4740, column: 63, scope: !13360)
!13369 = !DILocalVariable(name: "imm_use_p", scope: !13360, file: !3, line: 4742, type: !2360)
!13370 = !DILocation(line: 4742, column: 17, scope: !13360)
!13371 = !DILocalVariable(name: "iterator", scope: !13360, file: !3, line: 4743, type: !6795)
!13372 = !DILocation(line: 4743, column: 20, scope: !13360)
!13373 = !DILocation(line: 4745, column: 3, scope: !13374)
!13374 = distinct !DILexicalBlock(scope: !13360, file: !3, line: 4745, column: 3)
!13375 = !DILocation(line: 4745, column: 3, scope: !13376)
!13376 = distinct !DILexicalBlock(scope: !13374, file: !3, line: 4745, column: 3)
!13377 = !DILocalVariable(name: "e", scope: !13378, file: !3, line: 4747, type: !5955)
!13378 = distinct !DILexicalBlock(scope: !13376, file: !3, line: 4746, column: 5)
!13379 = !DILocation(line: 4747, column: 26, scope: !13378)
!13380 = !DILocalVariable(name: "use", scope: !13378, file: !3, line: 4748, type: !908)
!13381 = !DILocation(line: 4748, column: 11, scope: !13378)
!13382 = !DILocation(line: 4748, column: 38, scope: !13378)
!13383 = !DILocation(line: 4748, column: 43, scope: !13378)
!13384 = !DILocation(line: 4748, column: 17, scope: !13378)
!13385 = !DILocation(line: 4750, column: 11, scope: !13386)
!13386 = distinct !DILexicalBlock(scope: !13378, file: !3, line: 4750, column: 11)
!13387 = !DILocation(line: 4750, column: 15, scope: !13386)
!13388 = !DILocation(line: 4750, column: 11, scope: !13378)
!13389 = !DILocation(line: 4751, column: 2, scope: !13386)
!13390 = !DILocation(line: 4753, column: 21, scope: !13378)
!13391 = !DILocation(line: 4753, column: 26, scope: !13378)
!13392 = !DILocation(line: 4753, column: 32, scope: !13378)
!13393 = !DILocation(line: 4753, column: 11, scope: !13378)
!13394 = !DILocation(line: 4753, column: 9, scope: !13378)
!13395 = !DILocation(line: 4754, column: 17, scope: !13378)
!13396 = !DILocation(line: 4754, column: 7, scope: !13378)
!13397 = !DILocation(line: 4754, column: 10, scope: !13378)
!13398 = !DILocation(line: 4754, column: 15, scope: !13378)
!13399 = !DILocation(line: 4755, column: 7, scope: !13378)
!13400 = !DILocation(line: 4755, column: 21, scope: !13378)
!13401 = !DILocation(line: 4756, column: 7, scope: !13378)
!13402 = !DILocation(line: 4756, column: 25, scope: !13378)
!13403 = !DILocation(line: 4757, column: 5, scope: !13378)
!13404 = distinct !{!13404, !13373, !13405}
!13405 = !DILocation(line: 4757, column: 5, scope: !13374)
!13406 = !DILocation(line: 4758, column: 1, scope: !13360)
!13407 = distinct !DISubprogram(name: "ddr_dependence_level", scope: !391, file: !391, line: 468, type: !13408, scopeLine: 469, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13408 = !DISubroutineType(types: !13409)
!13409 = !{!7, !2242}
!13410 = !DILocalVariable(name: "ddr", arg: 1, scope: !13407, file: !391, line: 468, type: !2242)
!13411 = !DILocation(line: 468, column: 29, scope: !13407)
!13412 = !DILocalVariable(name: "vector", scope: !13407, file: !391, line: 470, type: !7)
!13413 = !DILocation(line: 470, column: 12, scope: !13407)
!13414 = !DILocalVariable(name: "level", scope: !13407, file: !391, line: 471, type: !7)
!13415 = !DILocation(line: 471, column: 12, scope: !13407)
!13416 = !DILocation(line: 473, column: 7, scope: !13417)
!13417 = distinct !DILexicalBlock(scope: !13407, file: !391, line: 473, column: 7)
!13418 = !DILocation(line: 473, column: 7, scope: !13407)
!13419 = !DILocation(line: 474, column: 31, scope: !13417)
!13420 = !DILocation(line: 474, column: 55, scope: !13417)
!13421 = !DILocation(line: 474, column: 13, scope: !13417)
!13422 = !DILocation(line: 474, column: 11, scope: !13417)
!13423 = !DILocation(line: 474, column: 5, scope: !13417)
!13424 = !DILocation(line: 476, column: 15, scope: !13425)
!13425 = distinct !DILexicalBlock(scope: !13407, file: !391, line: 476, column: 3)
!13426 = !DILocation(line: 476, column: 8, scope: !13425)
!13427 = !DILocation(line: 476, column: 20, scope: !13428)
!13428 = distinct !DILexicalBlock(scope: !13425, file: !391, line: 476, column: 3)
!13429 = !DILocation(line: 476, column: 29, scope: !13428)
!13430 = !DILocation(line: 476, column: 27, scope: !13428)
!13431 = !DILocation(line: 476, column: 3, scope: !13425)
!13432 = !DILocation(line: 477, column: 13, scope: !13428)
!13433 = !DILocation(line: 477, column: 11, scope: !13428)
!13434 = !DILocation(line: 477, column: 5, scope: !13428)
!13435 = !DILocation(line: 476, column: 61, scope: !13428)
!13436 = !DILocation(line: 476, column: 3, scope: !13428)
!13437 = distinct !{!13437, !13431, !13438}
!13438 = !DILocation(line: 477, column: 13, scope: !13425)
!13439 = !DILocation(line: 479, column: 10, scope: !13407)
!13440 = !DILocation(line: 479, column: 3, scope: !13407)
!13441 = distinct !DISubprogram(name: "dependence_level", scope: !2216, file: !2216, line: 514, type: !13442, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13442 = !DISubroutineType(types: !13443)
!13443 = !{!7, !2227, !908}
!13444 = !DILocalVariable(name: "dist_vect", arg: 1, scope: !13441, file: !2216, line: 514, type: !2227)
!13445 = !DILocation(line: 514, column: 33, scope: !13441)
!13446 = !DILocalVariable(name: "length", arg: 2, scope: !13441, file: !2216, line: 514, type: !908)
!13447 = !DILocation(line: 514, column: 48, scope: !13441)
!13448 = !DILocalVariable(name: "i", scope: !13441, file: !2216, line: 516, type: !908)
!13449 = !DILocation(line: 516, column: 7, scope: !13441)
!13450 = !DILocation(line: 518, column: 10, scope: !13451)
!13451 = distinct !DILexicalBlock(scope: !13441, file: !2216, line: 518, column: 3)
!13452 = !DILocation(line: 518, column: 8, scope: !13451)
!13453 = !DILocation(line: 518, column: 15, scope: !13454)
!13454 = distinct !DILexicalBlock(scope: !13451, file: !2216, line: 518, column: 3)
!13455 = !DILocation(line: 518, column: 19, scope: !13454)
!13456 = !DILocation(line: 518, column: 17, scope: !13454)
!13457 = !DILocation(line: 518, column: 3, scope: !13451)
!13458 = !DILocation(line: 519, column: 9, scope: !13459)
!13459 = distinct !DILexicalBlock(scope: !13454, file: !2216, line: 519, column: 9)
!13460 = !DILocation(line: 519, column: 19, scope: !13459)
!13461 = !DILocation(line: 519, column: 22, scope: !13459)
!13462 = !DILocation(line: 519, column: 9, scope: !13454)
!13463 = !DILocation(line: 520, column: 14, scope: !13459)
!13464 = !DILocation(line: 520, column: 16, scope: !13459)
!13465 = !DILocation(line: 520, column: 7, scope: !13459)
!13466 = !DILocation(line: 519, column: 25, scope: !13459)
!13467 = !DILocation(line: 518, column: 28, scope: !13454)
!13468 = !DILocation(line: 518, column: 3, scope: !13454)
!13469 = distinct !{!13469, !13457, !13470}
!13470 = !DILocation(line: 520, column: 18, scope: !13451)
!13471 = !DILocation(line: 522, column: 3, scope: !13441)
!13472 = !DILocation(line: 523, column: 1, scope: !13441)
!13473 = distinct !DISubprogram(name: "bb_seq", scope: !422, file: !422, line: 237, type: !13474, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13474 = !DISubroutineType(types: !13475)
!13475 = !{!1132, !13476}
!13476 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !812, line: 112, baseType: !13477)
!13477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13478, size: 64)
!13478 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1107)
!13479 = !DILocalVariable(name: "bb", arg: 1, scope: !13473, file: !422, line: 237, type: !13476)
!13480 = !DILocation(line: 237, column: 27, scope: !13473)
!13481 = !DILocation(line: 239, column: 13, scope: !13473)
!13482 = !DILocation(line: 239, column: 17, scope: !13473)
!13483 = !DILocation(line: 239, column: 23, scope: !13473)
!13484 = !DILocation(line: 239, column: 33, scope: !13473)
!13485 = !DILocation(line: 239, column: 36, scope: !13473)
!13486 = !DILocation(line: 239, column: 40, scope: !13473)
!13487 = !DILocation(line: 239, column: 43, scope: !13473)
!13488 = !DILocation(line: 239, column: 10, scope: !13473)
!13489 = !DILocation(line: 239, column: 53, scope: !13473)
!13490 = !DILocation(line: 239, column: 57, scope: !13473)
!13491 = !DILocation(line: 239, column: 60, scope: !13473)
!13492 = !DILocation(line: 239, column: 68, scope: !13473)
!13493 = !DILocation(line: 239, column: 3, scope: !13473)
!13494 = distinct !DISubprogram(name: "gimple_seq_first", scope: !422, file: !422, line: 159, type: !13495, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13495 = !DISubroutineType(types: !13496)
!13496 = !{!1137, !13497}
!13497 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !812, line: 67, baseType: !13498)
!13498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13499, size: 64)
!13499 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1134)
!13500 = !DILocalVariable(name: "s", arg: 1, scope: !13494, file: !422, line: 159, type: !13497)
!13501 = !DILocation(line: 159, column: 36, scope: !13494)
!13502 = !DILocation(line: 161, column: 10, scope: !13494)
!13503 = !DILocation(line: 161, column: 14, scope: !13494)
!13504 = !DILocation(line: 161, column: 17, scope: !13494)
!13505 = !DILocation(line: 161, column: 3, scope: !13494)
!13506 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !422, file: !422, line: 34, type: !13507, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13507 = !DISubroutineType(types: !13508)
!13508 = !{!908, !6471, !908}
!13509 = !DILocalVariable(name: "vec_", arg: 1, scope: !13506, file: !422, line: 34, type: !6471)
!13510 = !DILocation(line: 34, column: 1, scope: !13506)
!13511 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13506, file: !422, line: 34, type: !908)
!13512 = !DILocalVariable(name: "extend", scope: !13506, file: !422, line: 34, type: !908)
!13513 = !DILocation(line: 34, column: 1, scope: !13514)
!13514 = distinct !DILexicalBlock(scope: !13506, file: !422, line: 34, column: 1)
!13515 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !422, file: !422, line: 33, type: !13516, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13516 = !DISubroutineType(types: !13517)
!13517 = !{!6303, !7215, !1142}
!13518 = !DILocalVariable(name: "vec_", arg: 1, scope: !13515, file: !422, line: 33, type: !7215)
!13519 = !DILocation(line: 33, column: 1, scope: !13515)
!13520 = !DILocalVariable(name: "obj_", arg: 2, scope: !13515, file: !422, line: 33, type: !1142)
!13521 = !DILocalVariable(name: "slot_", scope: !13515, file: !422, line: 33, type: !6303)
!13522 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !422, file: !422, line: 33, type: !13523, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13523 = !DISubroutineType(types: !13524)
!13524 = !{!908, !7215, !908}
!13525 = !DILocalVariable(name: "vec_", arg: 1, scope: !13522, file: !422, line: 33, type: !7215)
!13526 = !DILocation(line: 33, column: 1, scope: !13522)
!13527 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13522, file: !422, line: 33, type: !908)
!13528 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !422, file: !422, line: 3080, type: !7383, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13529 = !DILocalVariable(name: "gs", arg: 1, scope: !13528, file: !422, line: 3080, type: !1142)
!13530 = !DILocation(line: 3080, column: 31, scope: !13528)
!13531 = !DILocation(line: 3083, column: 11, scope: !13528)
!13532 = !DILocation(line: 3083, column: 15, scope: !13528)
!13533 = !DILocation(line: 3083, column: 26, scope: !13528)
!13534 = !DILocation(line: 3083, column: 3, scope: !13528)
!13535 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !3700, file: !3700, line: 729, type: !13536, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13536 = !DISubroutineType(types: !13537)
!13537 = !{null, !6839}
!13538 = !DILocalVariable(name: "ptr", arg: 1, scope: !13535, file: !3700, line: 729, type: !6839)
!13539 = !DILocation(line: 729, column: 39, scope: !13535)
!13540 = !DILocation(line: 731, column: 3, scope: !13535)
!13541 = !DILocation(line: 731, column: 8, scope: !13535)
!13542 = !DILocation(line: 731, column: 13, scope: !13535)
!13543 = !DILocation(line: 732, column: 3, scope: !13535)
!13544 = !DILocation(line: 732, column: 8, scope: !13535)
!13545 = !DILocation(line: 732, column: 13, scope: !13535)
!13546 = !DILocation(line: 733, column: 3, scope: !13535)
!13547 = !DILocation(line: 733, column: 8, scope: !13535)
!13548 = !DILocation(line: 733, column: 18, scope: !13535)
!13549 = !DILocation(line: 734, column: 3, scope: !13535)
!13550 = !DILocation(line: 734, column: 8, scope: !13535)
!13551 = !DILocation(line: 734, column: 14, scope: !13535)
!13552 = !DILocation(line: 735, column: 3, scope: !13535)
!13553 = !DILocation(line: 735, column: 8, scope: !13535)
!13554 = !DILocation(line: 735, column: 16, scope: !13535)
!13555 = !DILocation(line: 736, column: 3, scope: !13535)
!13556 = !DILocation(line: 736, column: 8, scope: !13535)
!13557 = !DILocation(line: 736, column: 17, scope: !13535)
!13558 = !DILocation(line: 737, column: 3, scope: !13535)
!13559 = !DILocation(line: 737, column: 8, scope: !13535)
!13560 = !DILocation(line: 737, column: 13, scope: !13535)
!13561 = !DILocation(line: 738, column: 1, scope: !13535)
!13562 = distinct !DISubprogram(name: "op_iter_init", scope: !3700, file: !3700, line: 742, type: !13563, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13563 = !DISubroutineType(types: !13564)
!13564 = !{null, !6839, !1142, !908}
!13565 = !DILocalVariable(name: "ptr", arg: 1, scope: !13562, file: !3700, line: 742, type: !6839)
!13566 = !DILocation(line: 742, column: 28, scope: !13562)
!13567 = !DILocalVariable(name: "stmt", arg: 2, scope: !13562, file: !3700, line: 742, type: !1142)
!13568 = !DILocation(line: 742, column: 40, scope: !13562)
!13569 = !DILocalVariable(name: "flags", arg: 3, scope: !13562, file: !3700, line: 742, type: !908)
!13570 = !DILocation(line: 742, column: 50, scope: !13562)
!13571 = !DILocation(line: 746, column: 3, scope: !13562)
!13572 = !DILocation(line: 748, column: 16, scope: !13562)
!13573 = !DILocation(line: 748, column: 22, scope: !13562)
!13574 = !DILocation(line: 748, column: 15, scope: !13562)
!13575 = !DILocation(line: 748, column: 68, scope: !13562)
!13576 = !DILocation(line: 748, column: 52, scope: !13562)
!13577 = !DILocation(line: 748, column: 3, scope: !13562)
!13578 = !DILocation(line: 748, column: 8, scope: !13562)
!13579 = !DILocation(line: 748, column: 13, scope: !13562)
!13580 = !DILocation(line: 749, column: 9, scope: !13581)
!13581 = distinct !DILexicalBlock(scope: !13562, file: !3700, line: 749, column: 7)
!13582 = !DILocation(line: 749, column: 15, scope: !13581)
!13583 = !DILocation(line: 750, column: 7, scope: !13581)
!13584 = !DILocation(line: 750, column: 10, scope: !13581)
!13585 = !DILocation(line: 750, column: 15, scope: !13581)
!13586 = !DILocation(line: 751, column: 7, scope: !13581)
!13587 = !DILocation(line: 751, column: 23, scope: !13581)
!13588 = !DILocation(line: 751, column: 10, scope: !13581)
!13589 = !DILocation(line: 751, column: 29, scope: !13581)
!13590 = !DILocation(line: 749, column: 7, scope: !13562)
!13591 = !DILocation(line: 752, column: 17, scope: !13581)
!13592 = !DILocation(line: 752, column: 22, scope: !13581)
!13593 = !DILocation(line: 752, column: 28, scope: !13581)
!13594 = !DILocation(line: 752, column: 5, scope: !13581)
!13595 = !DILocation(line: 752, column: 10, scope: !13581)
!13596 = !DILocation(line: 752, column: 15, scope: !13581)
!13597 = !DILocation(line: 753, column: 16, scope: !13562)
!13598 = !DILocation(line: 753, column: 22, scope: !13562)
!13599 = !DILocation(line: 753, column: 15, scope: !13562)
!13600 = !DILocation(line: 753, column: 68, scope: !13562)
!13601 = !DILocation(line: 753, column: 52, scope: !13562)
!13602 = !DILocation(line: 753, column: 3, scope: !13562)
!13603 = !DILocation(line: 753, column: 8, scope: !13562)
!13604 = !DILocation(line: 753, column: 13, scope: !13562)
!13605 = !DILocation(line: 754, column: 9, scope: !13606)
!13606 = distinct !DILexicalBlock(scope: !13562, file: !3700, line: 754, column: 7)
!13607 = !DILocation(line: 754, column: 15, scope: !13606)
!13608 = !DILocation(line: 755, column: 7, scope: !13606)
!13609 = !DILocation(line: 755, column: 10, scope: !13606)
!13610 = !DILocation(line: 755, column: 15, scope: !13606)
!13611 = !DILocation(line: 756, column: 7, scope: !13606)
!13612 = !DILocation(line: 756, column: 23, scope: !13606)
!13613 = !DILocation(line: 756, column: 10, scope: !13606)
!13614 = !DILocation(line: 756, column: 29, scope: !13606)
!13615 = !DILocation(line: 754, column: 7, scope: !13562)
!13616 = !DILocation(line: 757, column: 17, scope: !13606)
!13617 = !DILocation(line: 757, column: 22, scope: !13606)
!13618 = !DILocation(line: 757, column: 28, scope: !13606)
!13619 = !DILocation(line: 757, column: 5, scope: !13606)
!13620 = !DILocation(line: 757, column: 10, scope: !13606)
!13621 = !DILocation(line: 757, column: 15, scope: !13606)
!13622 = !DILocation(line: 758, column: 3, scope: !13562)
!13623 = !DILocation(line: 758, column: 8, scope: !13562)
!13624 = !DILocation(line: 758, column: 13, scope: !13562)
!13625 = !DILocation(line: 760, column: 3, scope: !13562)
!13626 = !DILocation(line: 760, column: 8, scope: !13562)
!13627 = !DILocation(line: 760, column: 14, scope: !13562)
!13628 = !DILocation(line: 761, column: 3, scope: !13562)
!13629 = !DILocation(line: 761, column: 8, scope: !13562)
!13630 = !DILocation(line: 761, column: 16, scope: !13562)
!13631 = !DILocation(line: 762, column: 3, scope: !13562)
!13632 = !DILocation(line: 762, column: 8, scope: !13562)
!13633 = !DILocation(line: 762, column: 17, scope: !13562)
!13634 = !DILocation(line: 763, column: 1, scope: !13562)
!13635 = distinct !DISubprogram(name: "gimple_def_ops", scope: !422, file: !422, line: 1292, type: !13636, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13636 = !DISubroutineType(types: !13637)
!13637 = !{!1171, !2363}
!13638 = !DILocalVariable(name: "g", arg: 1, scope: !13635, file: !422, line: 1292, type: !2363)
!13639 = !DILocation(line: 1292, column: 30, scope: !13635)
!13640 = !DILocation(line: 1294, column: 24, scope: !13641)
!13641 = distinct !DILexicalBlock(scope: !13635, file: !422, line: 1294, column: 7)
!13642 = !DILocation(line: 1294, column: 8, scope: !13641)
!13643 = !DILocation(line: 1294, column: 7, scope: !13635)
!13644 = !DILocation(line: 1295, column: 5, scope: !13641)
!13645 = !DILocation(line: 1296, column: 10, scope: !13635)
!13646 = !DILocation(line: 1296, column: 13, scope: !13635)
!13647 = !DILocation(line: 1296, column: 19, scope: !13635)
!13648 = !DILocation(line: 1296, column: 26, scope: !13635)
!13649 = !DILocation(line: 1296, column: 3, scope: !13635)
!13650 = !DILocation(line: 1297, column: 1, scope: !13635)
!13651 = distinct !DISubprogram(name: "gimple_use_ops", scope: !422, file: !422, line: 1313, type: !13652, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2444)
!13652 = !DISubroutineType(types: !13653)
!13653 = !{!1178, !2363}
!13654 = !DILocalVariable(name: "g", arg: 1, scope: !13651, file: !422, line: 1313, type: !2363)
!13655 = !DILocation(line: 1313, column: 30, scope: !13651)
!13656 = !DILocation(line: 1315, column: 24, scope: !13657)
!13657 = distinct !DILexicalBlock(scope: !13651, file: !422, line: 1315, column: 7)
!13658 = !DILocation(line: 1315, column: 8, scope: !13657)
!13659 = !DILocation(line: 1315, column: 7, scope: !13651)
!13660 = !DILocation(line: 1316, column: 5, scope: !13657)
!13661 = !DILocation(line: 1317, column: 10, scope: !13651)
!13662 = !DILocation(line: 1317, column: 13, scope: !13651)
!13663 = !DILocation(line: 1317, column: 19, scope: !13651)
!13664 = !DILocation(line: 1317, column: 26, scope: !13651)
!13665 = !DILocation(line: 1317, column: 3, scope: !13651)
!13666 = !DILocation(line: 1318, column: 1, scope: !13651)
