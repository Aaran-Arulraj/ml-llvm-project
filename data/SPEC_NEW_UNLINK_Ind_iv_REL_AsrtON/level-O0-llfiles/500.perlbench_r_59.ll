; ModuleID = 'sv.c'
source_filename = "sv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gv = type { %struct.xpvgv*, i32, i32, %union.anon.6 }
%struct.xpvgv = type { %struct.hv*, %union._xmgu, i64, %union.anon.5, %union._xivu, %union._xnvu }
%struct.hv = type { %struct.xpvhv*, i32, i32, %union.anon.4 }
%struct.xpvhv = type { %struct.hv*, %union._xmgu, i64, i64 }
%union.anon.4 = type { i8* }
%union._xmgu = type { %struct.magic* }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, i64, %struct.sv*, i8* }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)*, i32 (%struct.sv*, %struct.magic*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter*, %struct.interpreter*, %struct.av* }
%struct.interpreter = type { i8 }
%struct.av = type { %struct.xpvav*, i32, i32, %union.anon.3 }
%struct.xpvav = type { %struct.hv*, %union._xmgu, i64, i64, %struct.sv** }
%union.anon.3 = type { i8* }
%struct.sv = type { i8*, i32, i32, %union.anon }
%union.anon = type { i8* }
%union.anon.5 = type { i64 }
%union._xivu = type { i64 }
%union._xnvu = type { double }
%union.anon.6 = type { i8* }
%struct.body_details = type { i8, i8, i8, i8, i32 }
%struct.op = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8 }
%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, i32, %struct.hv*, %struct.gv*, i32, i32, i64*, %struct.refcounted_he* }
%struct.refcounted_he = type { %struct.refcounted_he*, %struct.hek*, %union.anon.21, i32, [1 x i8] }
%struct.hek = type { i32, i32, [1 x i8] }
%union.anon.21 = type { i64 }
%union.any = type { i8* }
%struct.he = type { %struct.he*, %struct.hek*, %union.anon.0 }
%union.anon.0 = type { %struct.sv* }
%struct.padname = type { i8*, %struct.hv*, %union.anon.26, i32, i32, i32, i32, i8, i8 }
%union.anon.26 = type { %struct.hv* }
%struct.stackinfo = type { %struct.av*, %struct.context*, %struct.stackinfo*, %struct.stackinfo*, i32, i32, i32, i32 }
%struct.context = type { %union.anon.27 }
%union.anon.27 = type { %struct.subst }
%struct.subst = type { i8, i8, i16, i32, i64, i64, i8*, %struct.sv*, %struct.sv*, i8*, i8*, i8*, i8*, %struct.p5rx* }
%struct.p5rx = type { %struct.regexp*, i32, i32, %union.anon.15 }
%struct.regexp = type { %struct.hv*, %union._xmgu, i64, %union.anon.14, %struct.regexp_engine*, %struct.p5rx*, %struct.hv*, i32, i64, i64, i64, %struct.reg_substr_data*, i32, i32, i8*, i32, i32, %struct.regexp_paren_pair*, i8*, %struct.sv*, i64, i64, i64, i64, i16, %struct.cv* }
%union.anon.14 = type { i64 }
%struct.regexp_engine = type { %struct.p5rx* (%struct.sv*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* }
%struct.re_scream_pos_data_s = type { i8**, i64* }
%struct.reg_substr_data = type { i8, [3 x %struct.reg_substr_datum] }
%struct.reg_substr_datum = type { i64, i64, %struct.sv*, %struct.sv*, i64 }
%struct.regexp_paren_pair = type { i64, i64, i64 }
%struct.cv = type { %struct.xpvcv*, i32, i32, %union.anon.2 }
%struct.xpvcv = type { %struct.hv*, %union._xmgu, i64, %union.anon.7, %struct.hv*, %union.anon.8, %union.anon.9, %union.anon.10, i8*, %union.anon.11, %struct.cv*, i32, i32, i32 }
%union.anon.7 = type { i64 }
%union.anon.8 = type { %struct.op* }
%union.anon.9 = type { %struct.op* }
%union.anon.10 = type { %struct.gv* }
%union.anon.11 = type { %struct.padlist* }
%struct.padlist = type { i64, %struct.av**, i32, i32 }
%union.anon.2 = type { i8* }
%union.anon.15 = type { i8* }
%union.UNOP_AUX_item = type { i64 }
%struct.gp = type { %struct.sv*, %struct.io*, %struct.cv*, i32, i32, %struct.hv*, %struct.av*, %struct.cv*, %struct.gv*, i32, %struct.hek* }
%struct.io = type { %struct.xpvio*, i32, i32, %union.anon.1 }
%struct.xpvio = type { %struct.hv*, %union._xmgu, i64, %union.anon.12, %union._xivu, %struct._PerlIO**, %union.anon.13, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i8, i8 }
%union.anon.12 = type { i64 }
%struct._PerlIO = type opaque
%union.anon.13 = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%union.anon.1 = type { i8* }
%struct.arena_set = type { %struct.arena_set*, i32, i32, [169 x %struct.arena_desc] }
%struct.arena_desc = type { i8*, i64, i32 }
%struct.xpviv = type { %struct.hv*, %union._xmgu, i64, %union.anon.16, %union._xivu }
%union.anon.16 = type { i64 }
%struct.xpvnv = type { %struct.hv*, %union._xmgu, i64, %union.anon.17, %union._xivu, %union._xnvu }
%union.anon.17 = type { i64 }
%struct.ptr_tbl_ent = type { %struct.ptr_tbl_ent*, i8*, i8* }
%struct.xpvmg = type { %struct.hv*, %union._xmgu, i64, %union.anon.18, %union._xivu, %union._xnvu }
%union.anon.18 = type { i64 }
%struct.xpv = type { %struct.hv*, %union._xmgu, i64, %union.anon.19 }
%union.anon.19 = type { i64 }
%struct.xpvlv = type { %struct.hv*, %union._xmgu, i64, %union.anon.22, %union._xivu, %union._xnvu, %union.anon.23, i64, %struct.sv*, i8, i8 }
%union.anon.22 = type { i64 }
%union.anon.23 = type { i64 }
%union.XOPRETANY = type { i8* }
%struct.xpvuv = type { %struct.hv*, %union._xmgu, i64, %union.anon.20, %union._xivu }
%union.anon.20 = type { i64 }
%struct.xpvhv_aux = type { %union._xhvnameu, %struct.av*, %struct.he*, i32, i32, %struct.mro_meta*, i32, i32, i32, i32 }
%union._xhvnameu = type { %struct.hek* }
%struct.mro_meta = type { %struct.hv*, %struct.sv*, %struct.hv*, i32, i32, %struct.mro_alg*, %struct.hv*, %struct.hv*, i32 }
%struct.mro_alg = type { %struct.av* (%struct.hv*, i32)*, i8*, i16, i16, i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.shared_he = type { %struct.he, %struct.hek }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op*, %struct.p5rx*, i32, %union.anon.24, %union.anon.25, %struct.op* }
%union.anon.24 = type { %struct.op* }
%union.anon.25 = type { %struct.op* }
%struct.ptr_tbl = type { %struct.ptr_tbl_ent**, i64, i64, %struct.ptr_tbl_arena*, %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent* }
%struct.ptr_tbl_arena = type { %struct.ptr_tbl_arena*, [341 x %struct.ptr_tbl_ent] }
%struct.padnamelist = type { i64, %struct.padname**, i64, i64, i32 }
%struct.unop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op* }
%struct.svop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.sv* }
%struct.binop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op* }
%struct.unop_aux = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %union.UNOP_AUX_item* }

@PL_in_clean_objs = external dso_local global i8, align 1
@PL_defoutgv = external dso_local global %struct.gv*, align 8
@PL_stderrgv = external dso_local global %struct.gv*, align 8
@PL_in_clean_all = external dso_local global i8, align 1
@PL_sv_arenaroot = external dso_local global %struct.sv*, align 8
@PL_body_arenas = external dso_local global i8*, align 8
@PL_body_roots = external dso_local global [16 x i8*], align 16
@PL_sv_root = external dso_local global %struct.sv*, align 8
@bodies_by_type = internal constant [16 x %struct.body_details] [%struct.body_details { i8 0, i8 0, i8 0, i8 32, i32 0 }, %struct.body_details { i8 0, i8 8, i8 32, i8 33, i32 0 }, %struct.body_details { i8 0, i8 8, i8 40, i8 2, i32 0 }, %struct.body_details { i8 16, i8 16, i8 16, i8 99, i32 3536 }, %struct.body_details { i8 40, i8 33, i8 16, i8 116, i32 3120 }, %struct.body_details { i8 24, i8 24, i8 16, i8 101, i32 3424 }, %struct.body_details { i8 32, i8 32, i8 16, i8 70, i32 3296 }, %struct.body_details { i8 48, i8 48, i8 0, i8 71, i32 4080 }, %struct.body_details { i8 -64, i8 -64, i8 0, i8 120, i32 4032 }, %struct.body_details { i8 48, i8 48, i8 0, i8 89, i32 4080 }, %struct.body_details { i8 80, i8 80, i8 0, i8 90, i32 4080 }, %struct.body_details { i8 40, i8 40, i8 0, i8 123, i32 4080 }, %struct.body_details { i8 32, i8 32, i8 0, i8 124, i32 4064 }, %struct.body_details { i8 104, i8 104, i8 0, i8 125, i32 4056 }, %struct.body_details { i8 104, i8 104, i8 0, i8 62, i32 2080 }, %struct.body_details { i8 -120, i8 -120, i8 0, i8 127, i32 3264 }], align 16
@fake_rv = internal constant %struct.body_details { i8 0, i8 0, i8 0, i8 33, i32 0 }, align 4
@.str = private unnamed_addr constant [30 x i8] c"Can't upgrade %s (%lu) to %lu\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"sv_upgrade from type %d down to type %d\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"IO::File::\00", align 1
@PL_stashcache = external dso_local global %struct.hv*, align 8
@.str.3 = private unnamed_addr constant [38 x i8] c"panic: sv_upgrade to unknown type %lu\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"Can't coerce %s to integer in %s\00", align 1
@PL_op = external dso_local global %struct.op*, align 8
@PL_op_desc = external dso_local constant [0 x i8*], align 8
@PL_tainting = external dso_local global i8, align 1
@PL_tainted = external dso_local global i8, align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"Can't coerce %s to number in %s\00", align 1
@PL_sv_undef = external dso_local global %struct.sv, align 8
@PL_localizing = external dso_local global i8, align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"NULLREF\00", align 1
@PL_curcop = external dso_local global %struct.cop*, align 8
@.str.7 = private unnamed_addr constant [9 x i8] c"__ANON__\00", align 1
@PL_hexdigit = external dso_local constant [0 x i8], align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"%.*g\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PL_encoding = external dso_local global %struct.sv*, align 8
@PL_lex_encoding = external dso_local global %struct.sv*, align 8
@.str.11 = private unnamed_addr constant [21 x i8] c"Wide character in %s\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"Wide character\00", align 1
@PL_savestack_ix = external dso_local global i32, align 4
@PL_savestack = external dso_local global %union.any*, align 8
@PL_savestack_max = external dso_local global i32, align 4
@.str.13 = private unnamed_addr constant [9 x i8] c"%2p::%2p\00", align 1
@PL_sub_generation = external dso_local global i32, align 4
@.str.14 = private unnamed_addr constant [4 x i8] c"ISA\00", align 1
@.str.15 = private unnamed_addr constant [54 x i8] c"panic: attempt to copy value %-p to a freed scalar %p\00", align 1
@.str.16 = private unnamed_addr constant [45 x i8] c"panic: attempt to copy freed scalar %p to %p\00", align 1
@.str.17 = private unnamed_addr constant [25 x i8] c"Bizarre copy of %s in %s\00", align 1
@.str.18 = private unnamed_addr constant [19 x i8] c"Bizarre copy of %s\00", align 1
@.str.19 = private unnamed_addr constant [24 x i8] c"Cannot copy to %s in %s\00", align 1
@.str.20 = private unnamed_addr constant [18 x i8] c"Cannot copy to %s\00", align 1
@.str.21 = private unnamed_addr constant [37 x i8] c"Undefined value assigned to typeglob\00", align 1
@PL_sv_count = external dso_local global i64, align 8
@.str.22 = private unnamed_addr constant [49 x i8] c"panic: sv_setpvn called with negative strlen %ld\00", align 1
@.str.23 = private unnamed_addr constant [40 x i8] c"panic: sv_chop ptr=%p, start=%p, end=%p\00", align 1
@PL_magic_vtables = external dso_local constant [31 x %struct.mgvtbl], align 16
@PL_magic_data = external dso_local constant [256 x i8], align 16
@.str.24 = private unnamed_addr constant [43 x i8] c"Don't know how to handle magic of type \\%o\00", align 1
@.str.25 = private unnamed_addr constant [28 x i8] c"Can't weaken a nonreference\00", align 1
@.str.26 = private unnamed_addr constant [26 x i8] c"Reference is already weak\00", align 1
@PL_phase = external dso_local global i32, align 4
@.str.27 = private unnamed_addr constant [26 x i8] c"panic: del_backref, svp=0\00", align 1
@.str.28 = private unnamed_addr constant [48 x i8] c"panic: del_backref, *svp=%p phase=%s refcnt=%lu\00", align 1
@PL_phase_names = external dso_local constant [0 x i8*], align 8
@.str.29 = private unnamed_addr constant [35 x i8] c"panic: del_backref, *svp=%p, sv=%p\00", align 1
@.str.30 = private unnamed_addr constant [48 x i8] c"panic: magic_killbackrefs (freed backref AV/SV)\00", align 1
@.str.31 = private unnamed_addr constant [38 x i8] c"panic: magic_killbackrefs (flags=%lx)\00", align 1
@.str.32 = private unnamed_addr constant [39 x i8] c"panic: sv_insert, midend=%p, bigend=%p\00", align 1
@.str.33 = private unnamed_addr constant [60 x i8] c"panic: reference miscount on nsv in sv_replace() (%lu != 1)\00", align 1
@PL_statgv = external dso_local global %struct.gv*, align 8
@PL_last_swash_hv = external dso_local global %struct.hv*, align 8
@PL_comppad = external dso_local global %struct.av*, align 8
@PL_curpad = external dso_local global %struct.sv**, align 8
@PL_hv_fetch_ent_mh = external dso_local global %struct.he*, align 8
@PL_last_in_gv = external dso_local global %struct.gv*, align 8
@PL_sv_yes = external dso_local global %struct.sv, align 8
@PL_sv_no = external dso_local global %struct.sv, align 8
@PL_sv_placeholder = external dso_local global %struct.sv, align 8
@.str.34 = private unnamed_addr constant [46 x i8] c"Attempt to free unreferenced scalar: SV 0x%lx\00", align 1
@PL_utf8cache = external dso_local global i8, align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"sv_len_utf8\00", align 1
@.str.36 = private unnamed_addr constant [55 x i8] c"panic: sv_pos_b2u: bad byte offset, blen=%lu, byte=%lu\00", align 1
@.str.37 = private unnamed_addr constant [11 x i8] c"sv_pos_b2u\00", align 1
@PL_compiling = external dso_local global %struct.cop, align 8
@.str.38 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@PL_rs = external dso_local global %struct.sv*, align 8
@.str.39 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.40 = private unnamed_addr constant [21 x i8] c"Wide character in $/\00", align 1
@.str.41 = private unnamed_addr constant [41 x i8] c"Lost precision when incrementing %f by 1\00", align 1
@PL_charclass = external dso_local constant [0 x i32], align 4
@.str.42 = private unnamed_addr constant [41 x i8] c"Lost precision when decrementing %f by 1\00", align 1
@PL_tmps_ix = external dso_local global i64, align 8
@PL_tmps_max = external dso_local global i64, align 8
@PL_tmps_stack = external dso_local global %struct.sv**, align 8
@.str.43 = private unnamed_addr constant [17 x i8] c"Too Hot To Hoot!\00", align 1
@.str.44 = private unnamed_addr constant [40 x i8] c"semi-panic: attempt to dup freed string\00", align 1
@.str.45 = private unnamed_addr constant [20 x i8] c"Bad filehandle: %2p\00", align 1
@PL_no_usym = external dso_local constant [0 x i8], align 1
@.str.46 = private unnamed_addr constant [11 x i8] c"filehandle\00", align 1
@.str.47 = private unnamed_addr constant [20 x i8] c"Bad filehandle: %-p\00", align 1
@.str.48 = private unnamed_addr constant [27 x i8] c"Not a subroutine reference\00", align 1
@.str.49 = private unnamed_addr constant [32 x i8] c"Can't coerce %s to string in %s\00", align 1
@.str.50 = private unnamed_addr constant [8 x i8] c"VSTRING\00", align 1
@.str.51 = private unnamed_addr constant [4 x i8] c"REF\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"SCALAR\00", align 1
@.str.53 = private unnamed_addr constant [7 x i8] c"LVALUE\00", align 1
@.str.54 = private unnamed_addr constant [6 x i8] c"ARRAY\00", align 1
@.str.55 = private unnamed_addr constant [5 x i8] c"HASH\00", align 1
@.str.56 = private unnamed_addr constant [5 x i8] c"CODE\00", align 1
@.str.57 = private unnamed_addr constant [5 x i8] c"GLOB\00", align 1
@.str.58 = private unnamed_addr constant [7 x i8] c"FORMAT\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"IO\00", align 1
@.str.60 = private unnamed_addr constant [8 x i8] c"INVLIST\00", align 1
@.str.61 = private unnamed_addr constant [7 x i8] c"REGEXP\00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c"UNKNOWN\00", align 1
@.str.63 = private unnamed_addr constant [32 x i8] c"Can't bless non-reference value\00", align 1
@Perl_sv_vcatpvfn_flags.nullstr = internal constant [7 x i8] c"(null)\00", align 1
@.str.64 = private unnamed_addr constant [25 x i8] c"Redundant argument in %s\00", align 1
@.str.65 = private unnamed_addr constant [14 x i8] c"sv_vcatpvfn()\00", align 1
@.str.66 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.67 = private unnamed_addr constant [8 x i8] c"d%lu%4p\00", align 1
@.str.68 = private unnamed_addr constant [63 x i8] c"internal %%<num>p might conflict with future printf extensions\00", align 1
@PL_Sv = external dso_local global %struct.sv*, align 8
@.str.69 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.70 = private unnamed_addr constant [6 x i8] c"alpha\00", align 1
@.str.71 = private unnamed_addr constant [50 x i8] c"vector argument not supported with alpha versions\00", align 1
@.str.72 = private unnamed_addr constant [14 x i8] c"BbcDdiOopuUXx\00", align 1
@.str.73 = private unnamed_addr constant [27 x i8] c"Cannot printf %g with '%c'\00", align 1
@.str.74 = private unnamed_addr constant [18 x i8] c"panic: frexp: %Lg\00", align 1
@PL_efloatsize = external dso_local global i64, align 8
@PL_efloatbuf = external dso_local global i8*, align 8
@.str.75 = private unnamed_addr constant [6 x i8] c"%c%+d\00", align 1
@Perl_sv_vcatpvfn_flags.ldblf = internal constant [3 x i8] c"Lf\00", align 1
@.str.76 = private unnamed_addr constant [33 x i8] c"Invalid conversion in %sprintf: \00", align 1
@.str.77 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.78 = private unnamed_addr constant [3 x i8] c"\22%\00", align 1
@.str.79 = private unnamed_addr constant [7 x i8] c"\\%03lo\00", align 1
@.str.80 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.81 = private unnamed_addr constant [14 x i8] c"end of string\00", align 1
@.str.82 = private unnamed_addr constant [4 x i8] c"%-p\00", align 1
@PL_No = external dso_local constant [0 x i8], align 1
@PL_Yes = external dso_local constant [0 x i8], align 1
@PL_padname_const = external dso_local global %struct.padname, align 8
@PL_stack_sp = external dso_local global %struct.sv**, align 8
@PL_curstackinfo = external dso_local global %struct.stackinfo*, align 8
@PL_stack_base = external dso_local global %struct.sv**, align 8
@PL_curstack = external dso_local global %struct.av*, align 8
@PL_stack_max = external dso_local global %struct.sv**, align 8
@PL_tmps_floor = external dso_local global i64, align 8
@PL_markstack_ptr = external dso_local global i32*, align 8
@PL_markstack_max = external dso_local global i32*, align 8
@.str.83 = private unnamed_addr constant [7 x i8] c"decode\00", align 1
@.str.84 = private unnamed_addr constant [11 x i8] c"cat_decode\00", align 1
@.str.85 = private unnamed_addr constant [34 x i8] c"Invalid argument to sv_cat_decode\00", align 1
@.str.86 = private unnamed_addr constant [5 x i8] c"{%s}\00", align 1
@.str.87 = private unnamed_addr constant [6 x i8] c"[%ld]\00", align 1
@.str.88 = private unnamed_addr constant [8 x i8] c"within \00", align 1
@.str.89 = private unnamed_addr constant [15 x i8] c"join or string\00", align 1
@.str.90 = private unnamed_addr constant [2 x i8] c" \00", align 1
@PL_warn_uninit_sv = external dso_local constant [0 x i8], align 1
@.str.91 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@PL_warn_uninit = external dso_local constant [0 x i8], align 1
@PL_fdpid = external dso_local global %struct.av*, align 8
@PL_strtab = external dso_local global %struct.hv*, align 8
@.str.92 = private unnamed_addr constant [34 x i8] c"Argument \22%s\22 isn't numeric in %s\00", align 1
@.str.93 = private unnamed_addr constant [28 x i8] c"Argument \22%s\22 isn't numeric\00", align 1
@.str.94 = private unnamed_addr constant [107 x i8] c"sv_2iv assumed (U_V(fabs((double)SvNVX(sv))) < (UV)IV_MAX) but SvNVX(sv)=%g U_V is 0x%lx, IV_MAX is 0x%lx\0A\00", align 1
@.str.95 = private unnamed_addr constant [11 x i8] c"::__ANON__\00", align 1
@PL_defstash = external dso_local global %struct.hv*, align 8
@PL_destroyhook = external dso_local global i1 (%struct.sv*)*, align 8
@.str.96 = private unnamed_addr constant [8 x i8] c"DESTROY\00", align 1
@.str.97 = private unnamed_addr constant [51 x i8] c"DESTROY created new reference to dead object '%2p'\00", align 1
@.str.98 = private unnamed_addr constant [17 x i8] c"sv_pos_u2b_cache\00", align 1
@PL_utf8skip = external dso_local constant [0 x i8], align 1
@.str.99 = private unnamed_addr constant [25 x i8] c"utf8_mg_pos_cache_update\00", align 1
@.str.100 = private unnamed_addr constant [37 x i8] c"panic: %s cache %lu real %lu for %-p\00", align 1
@.str.101 = private unnamed_addr constant [45 x i8] c"Argument \22%s\22 treated as 0 in increment (++)\00", align 1
@.str.102 = private unnamed_addr constant [23 x i8] c"Missing argument in %s\00", align 1
@.str.103 = private unnamed_addr constant [41 x i8] c"Integer overflow in format string for %s\00", align 1
@.str.104 = private unnamed_addr constant [12 x i8] c"sv_vcatpvfn\00", align 1
@.str.105 = private unnamed_addr constant [42 x i8] c"Hexadecimal float: internal error (entry)\00", align 1
@.str.106 = private unnamed_addr constant [45 x i8] c"Hexadecimal float: internal error (overflow)\00", align 1
@.str.107 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@PL_memory_wrap = external dso_local constant [0 x i8], align 1
@.str.108 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@PL_multideref_pc = external dso_local global %union.UNOP_AUX_item*, align 8
@.str.109 = private unnamed_addr constant [7 x i8] c"exists\00", align 1
@.str.110 = private unnamed_addr constant [7 x i8] c"delete\00", align 1
@.str.111 = private unnamed_addr constant [13 x i8] c"hash element\00", align 1
@.str.112 = private unnamed_addr constant [14 x i8] c"array element\00", align 1
@PL_defgv = external dso_local global %struct.gv*, align 8
@.str.113 = private unnamed_addr constant [3 x i8] c"$_\00", align 1
@.str.114 = private unnamed_addr constant [3 x i8] c"$.\00", align 1
@.str.115 = private unnamed_addr constant [6 x i8] c"${$/}\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_report_used() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_clean_objs() #0 {
entry:
  %olddef = alloca %struct.gv*, align 8
  %olderr = alloca %struct.gv*, align 8
  store i8 1, i8* @PL_in_clean_objs, align 1
  %call = call i32 @S_visit(void (%struct.sv*)* @do_clean_objs, i32 2048, i32 2048)
  %call1 = call i32 @S_visit(void (%struct.sv*)* @do_clean_named_objs, i32 32777, i32 49407)
  %call2 = call i32 @S_visit(void (%struct.sv*)* @do_clean_named_io_objs, i32 32777, i32 49407)
  %call3 = call i32 @S_visit(void (%struct.sv*)* @do_curse, i32 1048576, i32 1048576)
  %0 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  store %struct.gv* %0, %struct.gv** %olddef, align 8
  store %struct.gv* null, %struct.gv** @PL_defoutgv, align 8
  %1 = load %struct.gv*, %struct.gv** %olddef, align 8
  %tobool = icmp ne %struct.gv* %1, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.gv*, %struct.gv** %olddef, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 49152
  %cmp = icmp eq i32 %and, 32768
  br i1 %cmp, label %land.lhs.true4, label %if.end

land.lhs.true4:                                   ; preds = %land.lhs.true
  %4 = load %struct.gv*, %struct.gv** %olddef, align 8
  %sv_flags5 = getelementptr inbounds %struct.gv, %struct.gv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %5, 255
  %cmp7 = icmp eq i32 %and6, 9
  br i1 %cmp7, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true4
  %6 = load %struct.gv*, %struct.gv** %olddef, align 8
  %sv_flags8 = getelementptr inbounds %struct.gv, %struct.gv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %7, 255
  %cmp10 = icmp eq i32 %and9, 10
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true4
  %8 = load %struct.gv*, %struct.gv** %olddef, align 8
  %9 = bitcast %struct.gv* %8 to i8*
  %10 = bitcast i8* %9 to %struct.sv*
  call void @do_clean_named_io_objs(%struct.sv* %10)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false, %land.lhs.true, %entry
  %11 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  store %struct.gv* %11, %struct.gv** %olderr, align 8
  store %struct.gv* null, %struct.gv** @PL_stderrgv, align 8
  %12 = load %struct.gv*, %struct.gv** %olderr, align 8
  %tobool11 = icmp ne %struct.gv* %12, null
  br i1 %tobool11, label %land.lhs.true12, label %if.end25

land.lhs.true12:                                  ; preds = %if.end
  %13 = load %struct.gv*, %struct.gv** %olderr, align 8
  %sv_flags13 = getelementptr inbounds %struct.gv, %struct.gv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %14, 49152
  %cmp15 = icmp eq i32 %and14, 32768
  br i1 %cmp15, label %land.lhs.true16, label %if.end25

land.lhs.true16:                                  ; preds = %land.lhs.true12
  %15 = load %struct.gv*, %struct.gv** %olderr, align 8
  %sv_flags17 = getelementptr inbounds %struct.gv, %struct.gv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %16, 255
  %cmp19 = icmp eq i32 %and18, 9
  br i1 %cmp19, label %if.then24, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %land.lhs.true16
  %17 = load %struct.gv*, %struct.gv** %olderr, align 8
  %sv_flags21 = getelementptr inbounds %struct.gv, %struct.gv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %18, 255
  %cmp23 = icmp eq i32 %and22, 10
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %lor.lhs.false20, %land.lhs.true16
  %19 = load %struct.gv*, %struct.gv** %olderr, align 8
  %20 = bitcast %struct.gv* %19 to i8*
  %21 = bitcast i8* %20 to %struct.sv*
  call void @do_clean_named_io_objs(%struct.sv* %21)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %lor.lhs.false20, %land.lhs.true12, %if.end
  %22 = load %struct.gv*, %struct.gv** %olddef, align 8
  %23 = bitcast %struct.gv* %22 to i8*
  %24 = bitcast i8* %23 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %24)
  store i8 0, i8* @PL_in_clean_objs, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_visit(void (%struct.sv*)* %f, i32 %flags, i32 %mask) #0 {
entry:
  %f.addr = alloca void (%struct.sv*)*, align 8
  %flags.addr = alloca i32, align 4
  %mask.addr = alloca i32, align 4
  %sva = alloca %struct.sv*, align 8
  %visited = alloca i32, align 4
  %svend = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  store void (%struct.sv*)* %f, void (%struct.sv*)** %f.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %mask, i32* %mask.addr, align 4
  store i32 0, i32* %visited, align 4
  %0 = load %struct.sv*, %struct.sv** @PL_sv_arenaroot, align 8
  store %struct.sv* %0, %struct.sv** %sva, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %entry
  %1 = load %struct.sv*, %struct.sv** %sva, align 8
  %tobool = icmp ne %struct.sv* %1, null
  br i1 %tobool, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %2 = load %struct.sv*, %struct.sv** %sva, align 8
  %3 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 1
  %4 = load i32, i32* %sv_refcnt, align 8
  %idxprom = zext i32 %4 to i64
  %arrayidx = getelementptr inbounds %struct.sv, %struct.sv* %2, i64 %idxprom
  store %struct.sv* %arrayidx, %struct.sv** %svend, align 8
  %5 = load %struct.sv*, %struct.sv** %sva, align 8
  %add.ptr = getelementptr inbounds %struct.sv, %struct.sv* %5, i64 1
  store %struct.sv* %add.ptr, %struct.sv** %sv, align 8
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %7 = load %struct.sv*, %struct.sv** %svend, align 8
  %cmp = icmp ult %struct.sv* %6, %7
  br i1 %cmp, label %for.body2, label %for.end

for.body2:                                        ; preds = %for.cond1
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags, align 4
  %and = and i32 %9, 255
  %cmp3 = icmp ne i32 %and, 255
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body2
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags4, align 4
  %12 = load i32, i32* %mask.addr, align 4
  %and5 = and i32 %11, %12
  %13 = load i32, i32* %flags.addr, align 4
  %cmp6 = icmp eq i32 %and5, %13
  br i1 %cmp6, label %land.lhs.true7, label %if.end

land.lhs.true7:                                   ; preds = %land.lhs.true
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt8 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 1
  %15 = load i32, i32* %sv_refcnt8, align 8
  %tobool9 = icmp ne i32 %15, 0
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true7
  %16 = load void (%struct.sv*)*, void (%struct.sv*)** %f.addr, align 8
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  call void %16(%struct.sv* %17)
  %18 = load i32, i32* %visited, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %visited, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true7, %land.lhs.true, %for.body2
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 1
  store %struct.sv* %incdec.ptr, %struct.sv** %sv, align 8
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %20 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any, align 8
  %22 = bitcast i8* %21 to %struct.sv*
  store %struct.sv* %22, %struct.sv** %sva, align 8
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  %23 = load i32, i32* %visited, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_clean_objs(%struct.sv* %ref) #0 {
entry:
  %ref.addr = alloca %struct.sv*, align 8
  %target = alloca %struct.sv*, align 8
  store %struct.sv* %ref, %struct.sv** %ref.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %1 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %1, %struct.sv** %target, align 8
  %2 = load %struct.sv*, %struct.sv** %target, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 1048576
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end14

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %5, -2147481600
  %cmp = icmp eq i32 %and2, -2147481600
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then
  %6 = load %struct.sv*, %struct.sv** %target, align 8
  %7 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  call void @Perl_sv_del_backref(%struct.sv* %6, %struct.sv* %7)
  %8 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %9, 2147481599
  store i32 %and5, i32* %sv_flags4, align 4
  br label %do.body

do.body:                                          ; preds = %if.then3
  %10 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  %sv_u6 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 3
  %svu_rv7 = bitcast %union.anon* %sv_u6 to %struct.sv**
  store %struct.sv* null, %struct.sv** %svu_rv7, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %if.then
  %11 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %12, -2049
  store i32 %and9, i32* %sv_flags8, align 4
  br label %do.body10

do.body10:                                        ; preds = %if.else
  %13 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  %sv_u11 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 3
  %svu_rv12 = bitcast %union.anon* %sv_u11 to %struct.sv**
  store %struct.sv* null, %struct.sv** %svu_rv12, align 8
  br label %do.end13

do.end13:                                         ; preds = %do.body10
  %14 = load %struct.sv*, %struct.sv** %target, align 8
  %15 = bitcast %struct.sv* %14 to i8*
  %16 = bitcast i8* %15 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %16)
  br label %if.end

if.end:                                           ; preds = %do.end13, %do.end
  br label %if.end14

if.end14:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_clean_named_objs(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %obj = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 3
  %svu_gp = bitcast %union.anon* %sv_u to %struct.gp**
  %1 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %1, i64 0
  %tobool = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %4 = bitcast i8* %3 to %struct.sv*
  %call = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %4)
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 3
  %svu_gp2 = bitcast %union.anon* %sv_u1 to %struct.gp**
  %6 = load %struct.gp*, %struct.gp** %svu_gp2, align 8
  %add.ptr3 = getelementptr inbounds %struct.gp, %struct.gp* %6, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr3, i32 0, i32 0
  %7 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  store %struct.sv* %7, %struct.sv** %obj, align 8
  %tobool4 = icmp ne %struct.sv* %7, null
  br i1 %tobool4, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.sv*, %struct.sv** %obj, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags, align 4
  %and = and i32 %9, 1048576
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %if.then6, label %if.end11

if.then6:                                         ; preds = %land.lhs.true
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u7 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 3
  %svu_gp8 = bitcast %union.anon* %sv_u7 to %struct.gp**
  %11 = load %struct.gp*, %struct.gp** %svu_gp8, align 8
  %add.ptr9 = getelementptr inbounds %struct.gp, %struct.gp* %11, i64 0
  %gp_sv10 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr9, i32 0, i32 0
  store %struct.sv* null, %struct.sv** %gp_sv10, align 8
  %12 = load %struct.sv*, %struct.sv** %obj, align 8
  %13 = bitcast %struct.sv* %12 to i8*
  %14 = bitcast i8* %13 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %14)
  br label %if.end11

if.end11:                                         ; preds = %if.then6, %land.lhs.true, %if.end
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u12 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 3
  %svu_gp13 = bitcast %union.anon* %sv_u12 to %struct.gp**
  %16 = load %struct.gp*, %struct.gp** %svu_gp13, align 8
  %add.ptr14 = getelementptr inbounds %struct.gp, %struct.gp* %16, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr14, i32 0, i32 6
  %17 = load %struct.av*, %struct.av** %gp_av, align 8
  %18 = bitcast %struct.av* %17 to i8*
  %19 = bitcast i8* %18 to %struct.sv*
  store %struct.sv* %19, %struct.sv** %obj, align 8
  %tobool15 = icmp ne %struct.sv* %19, null
  br i1 %tobool15, label %land.lhs.true16, label %if.end25

land.lhs.true16:                                  ; preds = %if.end11
  %20 = load %struct.sv*, %struct.sv** %obj, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %21, 1048576
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.then20, label %if.end25

if.then20:                                        ; preds = %land.lhs.true16
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u21 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_gp22 = bitcast %union.anon* %sv_u21 to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp22, align 8
  %add.ptr23 = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %gp_av24 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr23, i32 0, i32 6
  store %struct.av* null, %struct.av** %gp_av24, align 8
  %24 = load %struct.sv*, %struct.sv** %obj, align 8
  %25 = bitcast %struct.sv* %24 to i8*
  %26 = bitcast i8* %25 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %26)
  br label %if.end25

if.end25:                                         ; preds = %if.then20, %land.lhs.true16, %if.end11
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u26 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 3
  %svu_gp27 = bitcast %union.anon* %sv_u26 to %struct.gp**
  %28 = load %struct.gp*, %struct.gp** %svu_gp27, align 8
  %add.ptr28 = getelementptr inbounds %struct.gp, %struct.gp* %28, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr28, i32 0, i32 5
  %29 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %30 = bitcast %struct.hv* %29 to i8*
  %31 = bitcast i8* %30 to %struct.sv*
  store %struct.sv* %31, %struct.sv** %obj, align 8
  %tobool29 = icmp ne %struct.sv* %31, null
  br i1 %tobool29, label %land.lhs.true30, label %if.end39

land.lhs.true30:                                  ; preds = %if.end25
  %32 = load %struct.sv*, %struct.sv** %obj, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %33, 1048576
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %if.then34, label %if.end39

if.then34:                                        ; preds = %land.lhs.true30
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u35 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 3
  %svu_gp36 = bitcast %union.anon* %sv_u35 to %struct.gp**
  %35 = load %struct.gp*, %struct.gp** %svu_gp36, align 8
  %add.ptr37 = getelementptr inbounds %struct.gp, %struct.gp* %35, i64 0
  %gp_hv38 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr37, i32 0, i32 5
  store %struct.hv* null, %struct.hv** %gp_hv38, align 8
  %36 = load %struct.sv*, %struct.sv** %obj, align 8
  %37 = bitcast %struct.sv* %36 to i8*
  %38 = bitcast i8* %37 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %38)
  br label %if.end39

if.end39:                                         ; preds = %if.then34, %land.lhs.true30, %if.end25
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u40 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 3
  %svu_gp41 = bitcast %union.anon* %sv_u40 to %struct.gp**
  %40 = load %struct.gp*, %struct.gp** %svu_gp41, align 8
  %add.ptr42 = getelementptr inbounds %struct.gp, %struct.gp* %40, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr42, i32 0, i32 2
  %41 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr43 = getelementptr inbounds %struct.cv, %struct.cv* %41, i64 0
  %42 = bitcast %struct.cv* %add.ptr43 to i8*
  %43 = bitcast i8* %42 to %struct.sv*
  store %struct.sv* %43, %struct.sv** %obj, align 8
  %tobool44 = icmp ne %struct.sv* %43, null
  br i1 %tobool44, label %land.lhs.true45, label %if.end54

land.lhs.true45:                                  ; preds = %if.end39
  %44 = load %struct.sv*, %struct.sv** %obj, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %45, 1048576
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %if.then49, label %if.end54

if.then49:                                        ; preds = %land.lhs.true45
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u50 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 3
  %svu_gp51 = bitcast %union.anon* %sv_u50 to %struct.gp**
  %47 = load %struct.gp*, %struct.gp** %svu_gp51, align 8
  %add.ptr52 = getelementptr inbounds %struct.gp, %struct.gp* %47, i64 0
  %gp_cv53 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr52, i32 0, i32 2
  store %struct.cv* null, %struct.cv** %gp_cv53, align 8
  %48 = load %struct.sv*, %struct.sv** %obj, align 8
  %49 = bitcast %struct.sv* %48 to i8*
  %50 = bitcast i8* %49 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %50)
  br label %if.end54

if.end54:                                         ; preds = %if.then49, %land.lhs.true45, %if.end39
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %52 = bitcast %struct.sv* %51 to i8*
  %53 = bitcast i8* %52 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %53)
  br label %return

return:                                           ; preds = %if.end54, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_clean_named_io_objs(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %obj = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 3
  %svu_gp = bitcast %union.anon* %sv_u to %struct.gp**
  %1 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %1, i64 0
  %tobool = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %3 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %4 = bitcast %struct.gv* %3 to %struct.sv*
  %cmp = icmp eq %struct.sv* %2, %4
  br i1 %cmp, label %if.then, label %lor.lhs.false1

lor.lhs.false1:                                   ; preds = %lor.lhs.false
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %6 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %7 = bitcast %struct.gv* %6 to %struct.sv*
  %cmp2 = icmp eq %struct.sv* %5, %7
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false1, %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false1
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %9 = bitcast %struct.sv* %8 to i8*
  %10 = bitcast i8* %9 to %struct.sv*
  %call = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %10)
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool3 = icmp ne %struct.sv* %11, null
  br i1 %tobool3, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags, align 4
  %and = and i32 %13, 255
  %cmp4 = icmp eq i32 %and, 9
  br i1 %cmp4, label %land.lhs.true9, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %15, 255
  %cmp8 = icmp eq i32 %and7, 10
  br i1 %cmp8, label %land.lhs.true9, label %cond.false

land.lhs.true9:                                   ; preds = %lor.lhs.false5, %land.lhs.true
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u10 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 3
  %svu_gp11 = bitcast %union.anon* %sv_u10 to %struct.gp**
  %17 = load %struct.gp*, %struct.gp** %svu_gp11, align 8
  %add.ptr12 = getelementptr inbounds %struct.gp, %struct.gp* %17, i64 0
  %tobool13 = icmp ne %struct.gp* %add.ptr12, null
  br i1 %tobool13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true9
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u14 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 3
  %svu_gp15 = bitcast %union.anon* %sv_u14 to %struct.gp**
  %19 = load %struct.gp*, %struct.gp** %svu_gp15, align 8
  %add.ptr16 = getelementptr inbounds %struct.gp, %struct.gp* %19, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr16, i32 0, i32 1
  %20 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true9, %lor.lhs.false5, %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.io* [ %20, %cond.true ], [ null, %cond.false ]
  %21 = bitcast %struct.io* %cond to i8*
  %22 = bitcast i8* %21 to %struct.sv*
  store %struct.sv* %22, %struct.sv** %obj, align 8
  %tobool17 = icmp ne %struct.sv* %22, null
  br i1 %tobool17, label %land.lhs.true18, label %if.end27

land.lhs.true18:                                  ; preds = %cond.end
  %23 = load %struct.sv*, %struct.sv** %obj, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %24, 1048576
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then22, label %if.end27

if.then22:                                        ; preds = %land.lhs.true18
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u23 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 3
  %svu_gp24 = bitcast %union.anon* %sv_u23 to %struct.gp**
  %26 = load %struct.gp*, %struct.gp** %svu_gp24, align 8
  %add.ptr25 = getelementptr inbounds %struct.gp, %struct.gp* %26, i64 0
  %gp_io26 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr25, i32 0, i32 1
  store %struct.io* null, %struct.io** %gp_io26, align 8
  %27 = load %struct.sv*, %struct.sv** %obj, align 8
  %28 = bitcast %struct.sv* %27 to i8*
  %29 = bitcast i8* %28 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %29)
  br label %if.end27

if.end27:                                         ; preds = %if.then22, %land.lhs.true18, %cond.end
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %31 = bitcast %struct.sv* %30 to i8*
  %32 = bitcast i8* %31 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %32)
  br label %return

return:                                           ; preds = %if.end27, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_curse(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %tobool = icmp ne %struct.gv* %0, null
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false17

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %1, i32 0, i32 3
  %svu_gp = bitcast %union.anon.6* %sv_u to %struct.gp**
  %2 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %2, i64 0
  %tobool1 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool1, label %land.lhs.true2, label %lor.lhs.false17

land.lhs.true2:                                   ; preds = %land.lhs.true
  %3 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %tobool3 = icmp ne %struct.gv* %3, null
  br i1 %tobool3, label %land.lhs.true4, label %cond.false

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %4 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %5 = bitcast %struct.gv* %4 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags, align 4
  %and = and i32 %6, 255
  %cmp = icmp eq i32 %and, 9
  br i1 %cmp, label %land.lhs.true8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true4
  %7 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %8 = bitcast %struct.gv* %7 to %struct.sv*
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %9, 255
  %cmp7 = icmp eq i32 %and6, 10
  br i1 %cmp7, label %land.lhs.true8, label %cond.false

land.lhs.true8:                                   ; preds = %lor.lhs.false, %land.lhs.true4
  %10 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u9 = getelementptr inbounds %struct.gv, %struct.gv* %10, i32 0, i32 3
  %svu_gp10 = bitcast %union.anon.6* %sv_u9 to %struct.gp**
  %11 = load %struct.gp*, %struct.gp** %svu_gp10, align 8
  %add.ptr11 = getelementptr inbounds %struct.gp, %struct.gp* %11, i64 0
  %tobool12 = icmp ne %struct.gp* %add.ptr11, null
  br i1 %tobool12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true8
  %12 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %sv_u13 = getelementptr inbounds %struct.gv, %struct.gv* %12, i32 0, i32 3
  %svu_gp14 = bitcast %union.anon.6* %sv_u13 to %struct.gp**
  %13 = load %struct.gp*, %struct.gp** %svu_gp14, align 8
  %add.ptr15 = getelementptr inbounds %struct.gp, %struct.gp* %13, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr15, i32 0, i32 1
  %14 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true8, %lor.lhs.false, %land.lhs.true2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.io* [ %14, %cond.true ], [ null, %cond.false ]
  %15 = bitcast %struct.io* %cond to %struct.sv*
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp16 = icmp eq %struct.sv* %15, %16
  br i1 %cmp16, label %if.then, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %cond.end, %land.lhs.true, %entry
  %17 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %tobool18 = icmp ne %struct.gv* %17, null
  br i1 %tobool18, label %land.lhs.true19, label %if.end

land.lhs.true19:                                  ; preds = %lor.lhs.false17
  %18 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %sv_u20 = getelementptr inbounds %struct.gv, %struct.gv* %18, i32 0, i32 3
  %svu_gp21 = bitcast %union.anon.6* %sv_u20 to %struct.gp**
  %19 = load %struct.gp*, %struct.gp** %svu_gp21, align 8
  %add.ptr22 = getelementptr inbounds %struct.gp, %struct.gp* %19, i64 0
  %tobool23 = icmp ne %struct.gp* %add.ptr22, null
  br i1 %tobool23, label %land.lhs.true24, label %if.end

land.lhs.true24:                                  ; preds = %land.lhs.true19
  %20 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %tobool25 = icmp ne %struct.gv* %20, null
  br i1 %tobool25, label %land.lhs.true26, label %cond.false44

land.lhs.true26:                                  ; preds = %land.lhs.true24
  %21 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %22 = bitcast %struct.gv* %21 to %struct.sv*
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %23, 255
  %cmp29 = icmp eq i32 %and28, 9
  br i1 %cmp29, label %land.lhs.true34, label %lor.lhs.false30

lor.lhs.false30:                                  ; preds = %land.lhs.true26
  %24 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %25 = bitcast %struct.gv* %24 to %struct.sv*
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %26, 255
  %cmp33 = icmp eq i32 %and32, 10
  br i1 %cmp33, label %land.lhs.true34, label %cond.false44

land.lhs.true34:                                  ; preds = %lor.lhs.false30, %land.lhs.true26
  %27 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %sv_u35 = getelementptr inbounds %struct.gv, %struct.gv* %27, i32 0, i32 3
  %svu_gp36 = bitcast %union.anon.6* %sv_u35 to %struct.gp**
  %28 = load %struct.gp*, %struct.gp** %svu_gp36, align 8
  %add.ptr37 = getelementptr inbounds %struct.gp, %struct.gp* %28, i64 0
  %tobool38 = icmp ne %struct.gp* %add.ptr37, null
  br i1 %tobool38, label %cond.true39, label %cond.false44

cond.true39:                                      ; preds = %land.lhs.true34
  %29 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %sv_u40 = getelementptr inbounds %struct.gv, %struct.gv* %29, i32 0, i32 3
  %svu_gp41 = bitcast %union.anon.6* %sv_u40 to %struct.gp**
  %30 = load %struct.gp*, %struct.gp** %svu_gp41, align 8
  %add.ptr42 = getelementptr inbounds %struct.gp, %struct.gp* %30, i64 0
  %gp_io43 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr42, i32 0, i32 1
  %31 = load %struct.io*, %struct.io** %gp_io43, align 8
  br label %cond.end45

cond.false44:                                     ; preds = %land.lhs.true34, %lor.lhs.false30, %land.lhs.true24
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false44, %cond.true39
  %cond46 = phi %struct.io* [ %31, %cond.true39 ], [ null, %cond.false44 ]
  %32 = bitcast %struct.io* %cond46 to %struct.sv*
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp47 = icmp eq %struct.sv* %32, %33
  br i1 %cmp47, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end45, %cond.end
  br label %return

if.end:                                           ; preds = %cond.end45, %land.lhs.true19, %lor.lhs.false17
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call zeroext i1 @S_curse(%struct.sv* %34, i1 zeroext false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end6

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end6

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  store i32 %2, i32* %rc, align 4
  %3 = load i32, i32* %rc, align 4
  %cmp1 = icmp ugt i32 %3, 1
  br i1 %cmp1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %if.then
  br i1 true, label %if.then4, label %if.else

cond.false3:                                      ; preds = %if.then
  br i1 false, label %if.then4, label %if.else

if.then4:                                         ; preds = %cond.false3, %cond.true2
  %4 = load i32, i32* %rc, align 4
  %sub = sub i32 %4, 1
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt5 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt5, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false3, %cond.true2
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %7 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end6

if.end6:                                          ; preds = %if.end, %cond.false, %cond.true
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_sv_clean_all() #0 {
entry:
  %cleaned = alloca i32, align 4
  store i8 1, i8* @PL_in_clean_all, align 1
  %call = call i32 @S_visit(void (%struct.sv*)* @do_clean_all, i32 0, i32 0)
  store i32 %call, i32* %cleaned, align 4
  %0 = load i32, i32* %cleaned, align 4
  ret i32 %0
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_clean_all(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load %struct.av*, %struct.av** @PL_fdpid, align 8
  %2 = bitcast %struct.av* %1 to %struct.sv*
  %cmp = icmp eq %struct.sv* %0, %2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %4 = load %struct.hv*, %struct.hv** @PL_strtab, align 8
  %5 = bitcast %struct.hv* %4 to %struct.sv*
  %cmp1 = icmp eq %struct.sv* %3, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %or = or i32 %7, 67108864
  store i32 %or, i32* %sv_flags, align 4
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %9 = bitcast %struct.sv* %8 to i8*
  %10 = bitcast i8* %9 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %10)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_free_arenas() #0 {
entry:
  %sva = alloca %struct.sv*, align 8
  %svanext = alloca %struct.sv*, align 8
  %i = alloca i32, align 4
  %aroot = alloca %struct.arena_set*, align 8
  %current = alloca %struct.arena_set*, align 8
  %0 = load %struct.sv*, %struct.sv** @PL_sv_arenaroot, align 8
  store %struct.sv* %0, %struct.sv** %sva, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.sv*, %struct.sv** %sva, align 8
  %tobool = icmp ne %struct.sv* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** %svanext, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %5 = load %struct.sv*, %struct.sv** %svanext, align 8
  %tobool1 = icmp ne %struct.sv* %5, null
  br i1 %tobool1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load %struct.sv*, %struct.sv** %svanext, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 16777216
  %tobool2 = icmp ne i32 %and, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load %struct.sv*, %struct.sv** %svanext, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any3, align 8
  %11 = bitcast i8* %10 to %struct.sv*
  store %struct.sv* %11, %struct.sv** %svanext, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %12 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %13, 16777216
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.end, label %if.then

if.then:                                          ; preds = %while.end
  %14 = load %struct.sv*, %struct.sv** %sva, align 8
  %15 = bitcast %struct.sv* %14 to i8*
  call void @Perl_safesysfree(i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load %struct.sv*, %struct.sv** %svanext, align 8
  store %struct.sv* %16, %struct.sv** %sva, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i8*, i8** @PL_body_arenas, align 8
  %18 = bitcast i8* %17 to %struct.arena_set*
  store %struct.arena_set* %18, %struct.arena_set** %aroot, align 8
  br label %while.cond7

while.cond7:                                      ; preds = %while.end13, %for.end
  %19 = load %struct.arena_set*, %struct.arena_set** %aroot, align 8
  %tobool8 = icmp ne %struct.arena_set* %19, null
  br i1 %tobool8, label %while.body9, label %while.end14

while.body9:                                      ; preds = %while.cond7
  %20 = load %struct.arena_set*, %struct.arena_set** %aroot, align 8
  store %struct.arena_set* %20, %struct.arena_set** %current, align 8
  %21 = load %struct.arena_set*, %struct.arena_set** %aroot, align 8
  %curr = getelementptr inbounds %struct.arena_set, %struct.arena_set* %21, i32 0, i32 2
  %22 = load i32, i32* %curr, align 4
  store i32 %22, i32* %i, align 4
  br label %while.cond10

while.cond10:                                     ; preds = %while.body12, %while.body9
  %23 = load i32, i32* %i, align 4
  %dec = add i32 %23, -1
  store i32 %dec, i32* %i, align 4
  %tobool11 = icmp ne i32 %23, 0
  br i1 %tobool11, label %while.body12, label %while.end13

while.body12:                                     ; preds = %while.cond10
  %24 = load %struct.arena_set*, %struct.arena_set** %aroot, align 8
  %set = getelementptr inbounds %struct.arena_set, %struct.arena_set* %24, i32 0, i32 3
  %25 = load i32, i32* %i, align 4
  %idxprom = zext i32 %25 to i64
  %arrayidx = getelementptr inbounds [169 x %struct.arena_desc], [169 x %struct.arena_desc]* %set, i64 0, i64 %idxprom
  %arena = getelementptr inbounds %struct.arena_desc, %struct.arena_desc* %arrayidx, i32 0, i32 0
  %26 = load i8*, i8** %arena, align 8
  call void @Perl_safesysfree(i8* %26)
  br label %while.cond10

while.end13:                                      ; preds = %while.cond10
  %27 = load %struct.arena_set*, %struct.arena_set** %aroot, align 8
  %next = getelementptr inbounds %struct.arena_set, %struct.arena_set* %27, i32 0, i32 0
  %28 = load %struct.arena_set*, %struct.arena_set** %next, align 8
  store %struct.arena_set* %28, %struct.arena_set** %aroot, align 8
  %29 = load %struct.arena_set*, %struct.arena_set** %current, align 8
  %30 = bitcast %struct.arena_set* %29 to i8*
  call void @Perl_safesysfree(i8* %30)
  br label %while.cond7

while.end14:                                      ; preds = %while.cond7
  store i8* null, i8** @PL_body_arenas, align 8
  store i32 16, i32* %i, align 4
  br label %while.cond15

while.cond15:                                     ; preds = %while.body18, %while.end14
  %31 = load i32, i32* %i, align 4
  %dec16 = add i32 %31, -1
  store i32 %dec16, i32* %i, align 4
  %tobool17 = icmp ne i32 %31, 0
  br i1 %tobool17, label %while.body18, label %while.end21

while.body18:                                     ; preds = %while.cond15
  %32 = load i32, i32* %i, align 4
  %idxprom19 = zext i32 %32 to i64
  %arrayidx20 = getelementptr inbounds [16 x i8*], [16 x i8*]* @PL_body_roots, i64 0, i64 %idxprom19
  store i8* null, i8** %arrayidx20, align 8
  br label %while.cond15

while.end21:                                      ; preds = %while.cond15
  store %struct.sv* null, %struct.sv** @PL_sv_arenaroot, align 8
  store %struct.sv* null, %struct.sv** @PL_sv_root, align 8
  ret void
}

declare dso_local void @Perl_safesysfree(i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_more_bodies(i32 %sv_type, i64 %body_size, i64 %arena_size) #0 {
entry:
  %sv_type.addr = alloca i32, align 4
  %body_size.addr = alloca i64, align 8
  %arena_size.addr = alloca i64, align 8
  %root = alloca i8**, align 8
  %adesc = alloca %struct.arena_desc*, align 8
  %aroot = alloca %struct.arena_set*, align 8
  %curr = alloca i32, align 4
  %start = alloca i8*, align 8
  %end = alloca i8*, align 8
  %good_arena_size = alloca i64, align 8
  %newroot = alloca %struct.arena_set*, align 8
  %next9 = alloca i8*, align 8
  store i32 %sv_type, i32* %sv_type.addr, align 4
  store i64 %body_size, i64* %body_size.addr, align 8
  store i64 %arena_size, i64* %arena_size.addr, align 8
  %0 = load i32, i32* %sv_type.addr, align 4
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [16 x i8*], [16 x i8*]* @PL_body_roots, i64 0, i64 %idxprom
  store i8** %arrayidx, i8*** %root, align 8
  %1 = load i8*, i8** @PL_body_arenas, align 8
  %2 = bitcast i8* %1 to %struct.arena_set*
  store %struct.arena_set* %2, %struct.arena_set** %aroot, align 8
  %3 = load i64, i64* %arena_size.addr, align 8
  store i64 %3, i64* %good_arena_size, align 8
  %4 = load %struct.arena_set*, %struct.arena_set** %aroot, align 8
  %tobool = icmp ne %struct.arena_set* %4, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.arena_set*, %struct.arena_set** %aroot, align 8
  %curr1 = getelementptr inbounds %struct.arena_set, %struct.arena_set* %5, i32 0, i32 2
  %6 = load i32, i32* %curr1, align 4
  %7 = load %struct.arena_set*, %struct.arena_set** %aroot, align 8
  %set_size = getelementptr inbounds %struct.arena_set, %struct.arena_set* %7, i32 0, i32 1
  %8 = load i32, i32* %set_size, align 8
  %cmp = icmp uge i32 %6, %8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call i8* @Perl_safesyscalloc(i64 1, i64 4072)
  %9 = bitcast i8* %call to %struct.arena_set*
  store %struct.arena_set* %9, %struct.arena_set** %newroot, align 8
  %10 = load %struct.arena_set*, %struct.arena_set** %newroot, align 8
  %set_size2 = getelementptr inbounds %struct.arena_set, %struct.arena_set* %10, i32 0, i32 1
  store i32 169, i32* %set_size2, align 8
  %11 = load %struct.arena_set*, %struct.arena_set** %aroot, align 8
  %12 = load %struct.arena_set*, %struct.arena_set** %newroot, align 8
  %next = getelementptr inbounds %struct.arena_set, %struct.arena_set* %12, i32 0, i32 0
  store %struct.arena_set* %11, %struct.arena_set** %next, align 8
  %13 = load %struct.arena_set*, %struct.arena_set** %newroot, align 8
  store %struct.arena_set* %13, %struct.arena_set** %aroot, align 8
  %14 = load %struct.arena_set*, %struct.arena_set** %newroot, align 8
  %15 = bitcast %struct.arena_set* %14 to i8*
  store i8* %15, i8** @PL_body_arenas, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %16 = load %struct.arena_set*, %struct.arena_set** %aroot, align 8
  %curr3 = getelementptr inbounds %struct.arena_set, %struct.arena_set* %16, i32 0, i32 2
  %17 = load i32, i32* %curr3, align 4
  %inc = add i32 %17, 1
  store i32 %inc, i32* %curr3, align 4
  store i32 %17, i32* %curr, align 4
  %18 = load %struct.arena_set*, %struct.arena_set** %aroot, align 8
  %set = getelementptr inbounds %struct.arena_set, %struct.arena_set* %18, i32 0, i32 3
  %19 = load i32, i32* %curr, align 4
  %idxprom4 = zext i32 %19 to i64
  %arrayidx5 = getelementptr inbounds [169 x %struct.arena_desc], [169 x %struct.arena_desc]* %set, i64 0, i64 %idxprom4
  store %struct.arena_desc* %arrayidx5, %struct.arena_desc** %adesc, align 8
  %20 = load i64, i64* %good_arena_size, align 8
  %mul = mul i64 %20, 1
  %call6 = call i8* @Perl_safesysmalloc(i64 %mul)
  %21 = load %struct.arena_desc*, %struct.arena_desc** %adesc, align 8
  %arena = getelementptr inbounds %struct.arena_desc, %struct.arena_desc* %21, i32 0, i32 0
  store i8* %call6, i8** %arena, align 8
  %22 = load i64, i64* %good_arena_size, align 8
  %23 = load %struct.arena_desc*, %struct.arena_desc** %adesc, align 8
  %size = getelementptr inbounds %struct.arena_desc, %struct.arena_desc* %23, i32 0, i32 1
  store i64 %22, i64* %size, align 8
  %24 = load i32, i32* %sv_type.addr, align 4
  %25 = load %struct.arena_desc*, %struct.arena_desc** %adesc, align 8
  %utype = getelementptr inbounds %struct.arena_desc, %struct.arena_desc* %25, i32 0, i32 2
  store i32 %24, i32* %utype, align 8
  %26 = load %struct.arena_desc*, %struct.arena_desc** %adesc, align 8
  %arena7 = getelementptr inbounds %struct.arena_desc, %struct.arena_desc* %26, i32 0, i32 0
  %27 = load i8*, i8** %arena7, align 8
  store i8* %27, i8** %start, align 8
  %28 = load i8*, i8** %start, align 8
  %29 = load i64, i64* %good_arena_size, align 8
  %30 = load i64, i64* %body_size.addr, align 8
  %div = udiv i64 %29, %30
  %31 = load i64, i64* %body_size.addr, align 8
  %mul8 = mul i64 %div, %31
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 %mul8
  store i8* %add.ptr, i8** %end, align 8
  %32 = load i8*, i8** %start, align 8
  %33 = load i8**, i8*** %root, align 8
  store i8* %32, i8** %33, align 8
  br label %while.body

while.body:                                       ; preds = %if.end, %if.end13
  %34 = load i8*, i8** %start, align 8
  %35 = load i64, i64* %body_size.addr, align 8
  %add.ptr10 = getelementptr inbounds i8, i8* %34, i64 %35
  store i8* %add.ptr10, i8** %next9, align 8
  %36 = load i8*, i8** %next9, align 8
  %37 = load i8*, i8** %end, align 8
  %cmp11 = icmp uge i8* %36, %37
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %while.body
  %38 = load i8*, i8** %start, align 8
  %39 = bitcast i8* %38 to i8**
  store i8* null, i8** %39, align 8
  %40 = load i8**, i8*** %root, align 8
  %41 = load i8*, i8** %40, align 8
  ret i8* %41

if.end13:                                         ; preds = %while.body
  %42 = load i8*, i8** %next9, align 8
  %43 = load i8*, i8** %start, align 8
  %44 = bitcast i8* %43 to i8**
  store i8* %42, i8** %44, align 8
  %45 = load i8*, i8** %next9, align 8
  store i8* %45, i8** %start, align 8
  br label %while.body
}

declare dso_local i8* @Perl_safesyscalloc(i64, i64) #1

declare dso_local i8* @Perl_safesysmalloc(i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_upgrade(%struct.sv* %sv, i32 %new_type) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %new_type.addr = alloca i32, align 4
  %old_body = alloca i8*, align 8
  %new_body = alloca i8*, align 8
  %old_type = alloca i32, align 4
  %new_type_details = alloca %struct.body_details*, align 8
  %old_type_details = alloca %struct.body_details*, align 8
  %referant = alloca %struct.sv*, align 8
  %r3wt = alloca i8**, align 8
  %r3wt134 = alloca i8**, align 8
  %offset171 = alloca i32, align 4
  %length = alloca i32, align 4
  %difference = alloca i32, align 4
  %io = alloca %struct.io*, align 8
  %iogv = alloca %struct.gv*, align 8
  %thing_copy = alloca i8**, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %new_type, i32* %new_type.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  store i32 %and, i32* %old_type, align 4
  %2 = load i32, i32* %old_type, align 4
  %idx.ext = zext i32 %2 to i64
  %add.ptr = getelementptr inbounds %struct.body_details, %struct.body_details* getelementptr inbounds ([16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 0), i64 %idx.ext
  store %struct.body_details* %add.ptr, %struct.body_details** %old_type_details, align 8
  store %struct.sv* null, %struct.sv** %referant, align 8
  %3 = load i32, i32* %old_type, align 4
  %4 = load i32, i32* %new_type.addr, align 4
  %cmp = icmp eq i32 %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end244

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %new_type.addr, align 4
  %cmp1 = icmp ugt i32 %5, 7
  br i1 %cmp1, label %land.lhs.true, label %if.end5

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %7, 268435456
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %land.lhs.true
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %8, i32 0)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %land.lhs.true, %if.end
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  store i8* %10, i8** %old_body, align 8
  %11 = load i32, i32* %old_type, align 4
  switch i32 %11, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb6
    i32 2, label %sw.bb19
    i32 3, label %sw.bb23
    i32 5, label %sw.bb24
    i32 6, label %sw.bb25
    i32 7, label %sw.bb26
  ]

sw.bb:                                            ; preds = %if.end5
  br label %sw.epilog

sw.bb6:                                           ; preds = %if.end5
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %13, 2048
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %sw.bb6
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %15 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %15, %struct.sv** %referant, align 8
  store %struct.body_details* @fake_rv, %struct.body_details** %old_type_details, align 8
  %16 = load i32, i32* %new_type.addr, align 4
  %cmp11 = icmp eq i32 %16, 2
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.then10
  store i32 6, i32* %new_type.addr, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.then10
  br label %if.end18

if.else:                                          ; preds = %sw.bb6
  %17 = load i32, i32* %new_type.addr, align 4
  %cmp14 = icmp ult i32 %17, 5
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.else
  %18 = load i32, i32* %new_type.addr, align 4
  %cmp16 = icmp eq i32 %18, 2
  %19 = zext i1 %cmp16 to i64
  %cond = select i1 %cmp16, i32 6, i32 5
  store i32 %cond, i32* %new_type.addr, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %if.else
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.end13
  br label %sw.epilog

sw.bb19:                                          ; preds = %if.end5
  %20 = load i32, i32* %new_type.addr, align 4
  %cmp20 = icmp ult i32 %20, 6
  br i1 %cmp20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %sw.bb19
  store i32 6, i32* %new_type.addr, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %sw.bb19
  br label %sw.epilog

sw.bb23:                                          ; preds = %if.end5
  br label %sw.epilog

sw.bb24:                                          ; preds = %if.end5
  br label %sw.epilog

sw.bb25:                                          ; preds = %if.end5
  br label %sw.epilog

sw.bb26:                                          ; preds = %if.end5
  br label %sw.epilog

sw.default:                                       ; preds = %if.end5
  %21 = load %struct.body_details*, %struct.body_details** %old_type_details, align 8
  %cant_upgrade = getelementptr inbounds %struct.body_details, %struct.body_details* %21, i32 0, i32 3
  %bf.load = load i8, i8* %cant_upgrade, align 1
  %bf.lshr = lshr i8 %bf.load, 4
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool27 = icmp ne i32 %bf.cast, 0
  br i1 %tobool27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.default
  br i1 true, label %if.then28, label %if.end30

cond.false:                                       ; preds = %sw.default
  br i1 false, label %if.then28, label %if.end30

if.then28:                                        ; preds = %cond.false, %cond.true
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_reftype(%struct.sv* %22, i32 0)
  %23 = load i32, i32* %old_type, align 4
  %conv = zext i32 %23 to i64
  %24 = load i32, i32* %new_type.addr, align 4
  %conv29 = zext i32 %24 to i64
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* %call, i64 %conv, i64 %conv29)
  br label %if.end30

if.end30:                                         ; preds = %if.then28, %cond.false, %cond.true
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end30, %sw.bb26, %sw.bb25, %sw.bb24, %sw.bb23, %if.end22, %if.end18, %sw.bb
  %25 = load i32, i32* %old_type, align 4
  %26 = load i32, i32* %new_type.addr, align 4
  %cmp31 = icmp ugt i32 %25, %26
  br i1 %cmp31, label %cond.true33, label %cond.false34

cond.true33:                                      ; preds = %sw.epilog
  br i1 true, label %if.then35, label %if.end36

cond.false34:                                     ; preds = %sw.epilog
  br i1 false, label %if.then35, label %if.end36

if.then35:                                        ; preds = %cond.false34, %cond.true33
  %27 = load i32, i32* %old_type, align 4
  %28 = load i32, i32* %new_type.addr, align 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i32 %27, i32 %28)
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %cond.false34, %cond.true33
  %29 = load i32, i32* %new_type.addr, align 4
  %idx.ext37 = zext i32 %29 to i64
  %add.ptr38 = getelementptr inbounds %struct.body_details, %struct.body_details* getelementptr inbounds ([16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 0), i64 %idx.ext37
  store %struct.body_details* %add.ptr38, %struct.body_details** %new_type_details, align 8
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %31, -256
  store i32 %and40, i32* %sv_flags39, align 4
  %32 = load i32, i32* %new_type.addr, align 4
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags41, align 4
  %or = or i32 %34, %32
  store i32 %or, i32* %sv_flags41, align 4
  %35 = load i32, i32* %new_type.addr, align 4
  switch i32 %35, label %sw.default228 [
    i32 1, label %sw.bb42
    i32 2, label %sw.bb47
    i32 12, label %sw.bb54
    i32 11, label %sw.bb54
    i32 5, label %sw.bb125
    i32 15, label %sw.bb126
    i32 14, label %sw.bb126
    i32 9, label %sw.bb126
    i32 13, label %sw.bb126
    i32 10, label %sw.bb126
    i32 4, label %sw.bb126
    i32 8, label %sw.bb126
    i32 7, label %sw.bb126
    i32 6, label %sw.bb126
    i32 3, label %sw.bb126
  ]

sw.bb42:                                          ; preds = %if.end36
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u43 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 3
  %svu_iv = bitcast %union.anon* %sv_u43 to i64*
  %37 = bitcast i64* %svu_iv to i8*
  %add.ptr44 = getelementptr inbounds i8, i8* %37, i64 sub (i64 0, i64 ptrtoint (i64* getelementptr inbounds (%struct.xpviv, %struct.xpviv* null, i32 0, i32 4, i32 0) to i64))
  %38 = bitcast i8* %add.ptr44 to %struct.xpviv*
  %39 = bitcast %struct.xpviv* %38 to i8*
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any45 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  store i8* %39, i8** %sv_any45, align 8
  br label %do.body

do.body:                                          ; preds = %sw.bb42
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any46 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any46, align 8
  %43 = bitcast i8* %42 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %43, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  store i64 0, i64* %xivu_iv, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end244

sw.bb47:                                          ; preds = %if.end36
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u48 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 3
  %svu_nv = bitcast %union.anon* %sv_u48 to double*
  %45 = bitcast double* %svu_nv to i8*
  %add.ptr49 = getelementptr inbounds i8, i8* %45, i64 sub (i64 0, i64 ptrtoint (double* getelementptr inbounds (%struct.xpvnv, %struct.xpvnv* null, i32 0, i32 5, i32 0) to i64))
  %46 = bitcast i8* %add.ptr49 to %struct.xpvnv*
  %47 = bitcast %struct.xpvnv* %46 to i8*
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any50 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  store i8* %47, i8** %sv_any50, align 8
  br label %do.body51

do.body51:                                        ; preds = %sw.bb47
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any52 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any52, align 8
  %51 = bitcast i8* %50 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %51, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  store double 0.000000e+00, double* %xnv_nv, align 8
  br label %do.end53

do.end53:                                         ; preds = %do.body51
  br label %if.end244

sw.bb54:                                          ; preds = %if.end36, %if.end36
  br label %do.body55

do.body55:                                        ; preds = %sw.bb54
  %52 = load i32, i32* %new_type.addr, align 4
  %idxprom = zext i32 %52 to i64
  %arrayidx = getelementptr inbounds [16 x i8*], [16 x i8*]* @PL_body_roots, i64 0, i64 %idxprom
  store i8** %arrayidx, i8*** %r3wt, align 8
  %53 = load i8**, i8*** %r3wt, align 8
  %54 = load i8*, i8** %53, align 8
  %tobool56 = icmp ne i8* %54, null
  br i1 %tobool56, label %cond.true57, label %cond.false58

cond.true57:                                      ; preds = %do.body55
  %55 = load i8**, i8*** %r3wt, align 8
  %56 = load i8*, i8** %55, align 8
  br label %cond.end

cond.false58:                                     ; preds = %do.body55
  %57 = load i32, i32* %new_type.addr, align 4
  %58 = load i32, i32* %new_type.addr, align 4
  %idxprom59 = zext i32 %58 to i64
  %arrayidx60 = getelementptr inbounds [16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 %idxprom59
  %body_size = getelementptr inbounds %struct.body_details, %struct.body_details* %arrayidx60, i32 0, i32 0
  %59 = load i8, i8* %body_size, align 8
  %conv61 = zext i8 %59 to i64
  %60 = load i32, i32* %new_type.addr, align 4
  %idxprom62 = zext i32 %60 to i64
  %arrayidx63 = getelementptr inbounds [16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 %idxprom62
  %arena_size = getelementptr inbounds %struct.body_details, %struct.body_details* %arrayidx63, i32 0, i32 4
  %61 = load i32, i32* %arena_size, align 4
  %conv64 = zext i32 %61 to i64
  %call65 = call i8* @Perl_more_bodies(i32 %57, i64 %conv61, i64 %conv64)
  br label %cond.end

cond.end:                                         ; preds = %cond.false58, %cond.true57
  %cond66 = phi i8* [ %56, %cond.true57 ], [ %call65, %cond.false58 ]
  %62 = bitcast i8* %cond66 to %struct.ptr_tbl_ent*
  %63 = bitcast %struct.ptr_tbl_ent* %62 to i8*
  store i8* %63, i8** %new_body, align 8
  %64 = load i8*, i8** %new_body, align 8
  %65 = bitcast i8* %64 to i8**
  %66 = load i8*, i8** %65, align 8
  %67 = load i8**, i8*** %r3wt, align 8
  store i8* %66, i8** %67, align 8
  br label %do.end67

do.end67:                                         ; preds = %cond.end
  %68 = load i8*, i8** %new_body, align 8
  %69 = load %struct.body_details*, %struct.body_details** %new_type_details, align 8
  %body_size68 = getelementptr inbounds %struct.body_details, %struct.body_details* %69, i32 0, i32 0
  %70 = load i8, i8* %body_size68, align 4
  %conv69 = zext i8 %70 to i64
  %mul = mul i64 %conv69, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 0, i64 %mul, i1 false)
  %71 = load i8*, i8** %new_body, align 8
  %72 = load %struct.body_details*, %struct.body_details** %new_type_details, align 8
  %offset = getelementptr inbounds %struct.body_details, %struct.body_details* %72, i32 0, i32 2
  %73 = load i8, i8* %offset, align 2
  %conv70 = zext i8 %73 to i32
  %idx.ext71 = sext i32 %conv70 to i64
  %idx.neg = sub i64 0, %idx.ext71
  %add.ptr72 = getelementptr inbounds i8, i8* %71, i64 %idx.neg
  store i8* %add.ptr72, i8** %new_body, align 8
  %74 = load i8*, i8** %new_body, align 8
  %75 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any73 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 0
  store i8* %74, i8** %sv_any73, align 8
  %76 = load i32, i32* %new_type.addr, align 4
  %cmp74 = icmp eq i32 %76, 11
  br i1 %cmp74, label %if.then76, label %if.else89

if.then76:                                        ; preds = %do.end67
  %77 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any77 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 0
  %78 = load i8*, i8** %sv_any77, align 8
  %79 = bitcast i8* %78 to %struct.xpvav*
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %79, i32 0, i32 3
  store i64 -1, i64* %xav_max, align 8
  %80 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any78 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 0
  %81 = load i8*, i8** %sv_any78, align 8
  %82 = bitcast i8* %81 to %struct.xpvav*
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %82, i32 0, i32 2
  store i64 -1, i64* %xav_fill, align 8
  %83 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %84, 2147483647
  store i32 %and80, i32* %sv_flags79, align 4
  %85 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags81, align 4
  %or82 = or i32 %86, 1073741824
  store i32 %or82, i32* %sv_flags81, align 4
  %87 = load %struct.body_details*, %struct.body_details** %old_type_details, align 8
  %body_size83 = getelementptr inbounds %struct.body_details, %struct.body_details* %87, i32 0, i32 0
  %88 = load i8, i8* %body_size83, align 4
  %tobool84 = icmp ne i8 %88, 0
  br i1 %tobool84, label %if.then85, label %if.else87

if.then85:                                        ; preds = %if.then76
  %89 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any86 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 0
  %90 = load i8*, i8** %sv_any86, align 8
  %91 = bitcast i8* %90 to %struct.xpvav*
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %91, i32 0, i32 4
  store %struct.sv** null, %struct.sv*** %xav_alloc, align 8
  br label %if.end88

if.else87:                                        ; preds = %if.then76
  br label %if.end88

if.end88:                                         ; preds = %if.else87, %if.then85
  br label %if.end100

if.else89:                                        ; preds = %do.end67
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags90 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags90, align 4
  %and91 = and i32 %93, 1610547455
  store i32 %and91, i32* %sv_flags90, align 4
  %94 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags92 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags92, align 4
  %and93 = and i32 %95, 33554432
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.else89
  %96 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call95 = call i32 @Perl_sv_backoff(%struct.sv* %96)
  %tobool96 = icmp ne i32 %call95, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else89
  %97 = phi i1 [ false, %if.else89 ], [ %tobool96, %land.rhs ]
  %land.ext = zext i1 %97 to i32
  %98 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags97 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags97, align 4
  %or98 = or i32 %99, 536870912
  store i32 %or98, i32* %sv_flags97, align 4
  %100 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any99 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 0
  %101 = load i8*, i8** %sv_any99, align 8
  %102 = bitcast i8* %101 to %struct.xpvhv*
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %102, i32 0, i32 3
  store i64 7, i64* %xhv_max, align 8
  br label %if.end100

if.end100:                                        ; preds = %land.end, %if.end88
  %103 = load i32, i32* %old_type, align 4
  %cmp101 = icmp eq i32 %103, 1
  br i1 %cmp101, label %if.then103, label %if.else104

if.then103:                                       ; preds = %if.end100
  br label %if.end109

if.else104:                                       ; preds = %if.end100
  %104 = load i32, i32* %old_type, align 4
  %cmp105 = icmp uge i32 %104, 3
  br i1 %cmp105, label %if.then107, label %if.end108

if.then107:                                       ; preds = %if.else104
  br label %if.end108

if.end108:                                        ; preds = %if.then107, %if.else104
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.then103
  %105 = load i32, i32* %old_type, align 4
  %cmp110 = icmp uge i32 %105, 7
  br i1 %cmp110, label %if.then112, label %if.else122

if.then112:                                       ; preds = %if.end109
  br label %do.body113

do.body113:                                       ; preds = %if.then112
  %106 = load i8*, i8** %old_body, align 8
  %107 = bitcast i8* %106 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %107, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %108 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %109 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any114 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 0
  %110 = load i8*, i8** %sv_any114, align 8
  %111 = bitcast i8* %110 to %struct.xpvmg*
  %xmg_u115 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %111, i32 0, i32 1
  %xmg_magic116 = bitcast %union._xmgu* %xmg_u115 to %struct.magic**
  store %struct.magic* %108, %struct.magic** %xmg_magic116, align 8
  br label %do.end117

do.end117:                                        ; preds = %do.body113
  br label %do.body118

do.body118:                                       ; preds = %do.end117
  %112 = load i8*, i8** %old_body, align 8
  %113 = bitcast i8* %112 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %113, i32 0, i32 0
  %114 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %115 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any119 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 0
  %116 = load i8*, i8** %sv_any119, align 8
  %117 = bitcast i8* %116 to %struct.xpvmg*
  %xmg_stash120 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %117, i32 0, i32 0
  store %struct.hv* %114, %struct.hv** %xmg_stash120, align 8
  br label %do.end121

do.end121:                                        ; preds = %do.body118
  br label %if.end124

if.else122:                                       ; preds = %if.end109
  %118 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u123 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 3
  %svu_array = bitcast %union.anon* %sv_u123 to %struct.sv***
  store %struct.sv** null, %struct.sv*** %svu_array, align 8
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %do.end121
  br label %sw.epilog230

sw.bb125:                                         ; preds = %if.end36
  br label %sw.bb126

sw.bb126:                                         ; preds = %if.end36, %if.end36, %if.end36, %if.end36, %if.end36, %if.end36, %if.end36, %if.end36, %if.end36, %if.end36, %sw.bb125
  %119 = load %struct.body_details*, %struct.body_details** %new_type_details, align 8
  %arena = getelementptr inbounds %struct.body_details, %struct.body_details* %119, i32 0, i32 3
  %bf.load127 = load i8, i8* %arena, align 1
  %bf.lshr128 = lshr i8 %bf.load127, 6
  %bf.clear129 = and i8 %bf.lshr128, 1
  %bf.cast130 = zext i8 %bf.clear129 to i32
  %tobool131 = icmp ne i32 %bf.cast130, 0
  br i1 %tobool131, label %if.then132, label %if.else160

if.then132:                                       ; preds = %sw.bb126
  br label %do.body133

do.body133:                                       ; preds = %if.then132
  %120 = load i32, i32* %new_type.addr, align 4
  %idxprom135 = zext i32 %120 to i64
  %arrayidx136 = getelementptr inbounds [16 x i8*], [16 x i8*]* @PL_body_roots, i64 0, i64 %idxprom135
  store i8** %arrayidx136, i8*** %r3wt134, align 8
  %121 = load i8**, i8*** %r3wt134, align 8
  %122 = load i8*, i8** %121, align 8
  %tobool137 = icmp ne i8* %122, null
  br i1 %tobool137, label %cond.true138, label %cond.false139

cond.true138:                                     ; preds = %do.body133
  %123 = load i8**, i8*** %r3wt134, align 8
  %124 = load i8*, i8** %123, align 8
  br label %cond.end149

cond.false139:                                    ; preds = %do.body133
  %125 = load i32, i32* %new_type.addr, align 4
  %126 = load i32, i32* %new_type.addr, align 4
  %idxprom140 = zext i32 %126 to i64
  %arrayidx141 = getelementptr inbounds [16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 %idxprom140
  %body_size142 = getelementptr inbounds %struct.body_details, %struct.body_details* %arrayidx141, i32 0, i32 0
  %127 = load i8, i8* %body_size142, align 8
  %conv143 = zext i8 %127 to i64
  %128 = load i32, i32* %new_type.addr, align 4
  %idxprom144 = zext i32 %128 to i64
  %arrayidx145 = getelementptr inbounds [16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 %idxprom144
  %arena_size146 = getelementptr inbounds %struct.body_details, %struct.body_details* %arrayidx145, i32 0, i32 4
  %129 = load i32, i32* %arena_size146, align 4
  %conv147 = zext i32 %129 to i64
  %call148 = call i8* @Perl_more_bodies(i32 %125, i64 %conv143, i64 %conv147)
  br label %cond.end149

cond.end149:                                      ; preds = %cond.false139, %cond.true138
  %cond150 = phi i8* [ %124, %cond.true138 ], [ %call148, %cond.false139 ]
  %130 = bitcast i8* %cond150 to %struct.ptr_tbl_ent*
  %131 = bitcast %struct.ptr_tbl_ent* %130 to i8*
  store i8* %131, i8** %new_body, align 8
  %132 = load i8*, i8** %new_body, align 8
  %133 = bitcast i8* %132 to i8**
  %134 = load i8*, i8** %133, align 8
  %135 = load i8**, i8*** %r3wt134, align 8
  store i8* %134, i8** %135, align 8
  br label %do.end151

do.end151:                                        ; preds = %cond.end149
  %136 = load i8*, i8** %new_body, align 8
  %137 = load %struct.body_details*, %struct.body_details** %new_type_details, align 8
  %body_size152 = getelementptr inbounds %struct.body_details, %struct.body_details* %137, i32 0, i32 0
  %138 = load i8, i8* %body_size152, align 4
  %conv153 = zext i8 %138 to i64
  %mul154 = mul i64 %conv153, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %136, i8 0, i64 %mul154, i1 false)
  %139 = load i8*, i8** %new_body, align 8
  %140 = load %struct.body_details*, %struct.body_details** %new_type_details, align 8
  %offset155 = getelementptr inbounds %struct.body_details, %struct.body_details* %140, i32 0, i32 2
  %141 = load i8, i8* %offset155, align 2
  %conv156 = zext i8 %141 to i32
  %idx.ext157 = sext i32 %conv156 to i64
  %idx.neg158 = sub i64 0, %idx.ext157
  %add.ptr159 = getelementptr inbounds i8, i8* %139, i64 %idx.neg158
  store i8* %add.ptr159, i8** %new_body, align 8
  br label %if.end167

if.else160:                                       ; preds = %sw.bb126
  %142 = load %struct.body_details*, %struct.body_details** %new_type_details, align 8
  %body_size161 = getelementptr inbounds %struct.body_details, %struct.body_details* %142, i32 0, i32 0
  %143 = load i8, i8* %body_size161, align 4
  %conv162 = zext i8 %143 to i32
  %144 = load %struct.body_details*, %struct.body_details** %new_type_details, align 8
  %offset163 = getelementptr inbounds %struct.body_details, %struct.body_details* %144, i32 0, i32 2
  %145 = load i8, i8* %offset163, align 2
  %conv164 = zext i8 %145 to i32
  %add = add nsw i32 %conv162, %conv164
  %conv165 = sext i32 %add to i64
  %call166 = call i8* @Perl_safesyscalloc(i64 %conv165, i64 1)
  store i8* %call166, i8** %new_body, align 8
  br label %if.end167

if.end167:                                        ; preds = %if.else160, %do.end151
  %146 = load i8*, i8** %new_body, align 8
  %147 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any168 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 0
  store i8* %146, i8** %sv_any168, align 8
  %148 = load %struct.body_details*, %struct.body_details** %old_type_details, align 8
  %copy = getelementptr inbounds %struct.body_details, %struct.body_details* %148, i32 0, i32 1
  %149 = load i8, i8* %copy, align 1
  %tobool169 = icmp ne i8 %149, 0
  br i1 %tobool169, label %if.then170, label %if.end196

if.then170:                                       ; preds = %if.end167
  %150 = load %struct.body_details*, %struct.body_details** %old_type_details, align 8
  %offset172 = getelementptr inbounds %struct.body_details, %struct.body_details* %150, i32 0, i32 2
  %151 = load i8, i8* %offset172, align 2
  %conv173 = zext i8 %151 to i32
  store i32 %conv173, i32* %offset171, align 4
  %152 = load %struct.body_details*, %struct.body_details** %old_type_details, align 8
  %copy174 = getelementptr inbounds %struct.body_details, %struct.body_details* %152, i32 0, i32 1
  %153 = load i8, i8* %copy174, align 1
  %conv175 = zext i8 %153 to i32
  store i32 %conv175, i32* %length, align 4
  %154 = load %struct.body_details*, %struct.body_details** %new_type_details, align 8
  %offset176 = getelementptr inbounds %struct.body_details, %struct.body_details* %154, i32 0, i32 2
  %155 = load i8, i8* %offset176, align 2
  %conv177 = zext i8 %155 to i32
  %156 = load %struct.body_details*, %struct.body_details** %old_type_details, align 8
  %offset178 = getelementptr inbounds %struct.body_details, %struct.body_details* %156, i32 0, i32 2
  %157 = load i8, i8* %offset178, align 2
  %conv179 = zext i8 %157 to i32
  %cmp180 = icmp sgt i32 %conv177, %conv179
  br i1 %cmp180, label %if.then182, label %if.end189

if.then182:                                       ; preds = %if.then170
  %158 = load %struct.body_details*, %struct.body_details** %new_type_details, align 8
  %offset183 = getelementptr inbounds %struct.body_details, %struct.body_details* %158, i32 0, i32 2
  %159 = load i8, i8* %offset183, align 2
  %conv184 = zext i8 %159 to i32
  %160 = load %struct.body_details*, %struct.body_details** %old_type_details, align 8
  %offset185 = getelementptr inbounds %struct.body_details, %struct.body_details* %160, i32 0, i32 2
  %161 = load i8, i8* %offset185, align 2
  %conv186 = zext i8 %161 to i32
  %sub = sub nsw i32 %conv184, %conv186
  store i32 %sub, i32* %difference, align 4
  %162 = load i32, i32* %difference, align 4
  %163 = load i32, i32* %offset171, align 4
  %add187 = add nsw i32 %163, %162
  store i32 %add187, i32* %offset171, align 4
  %164 = load i32, i32* %difference, align 4
  %165 = load i32, i32* %length, align 4
  %sub188 = sub nsw i32 %165, %164
  store i32 %sub188, i32* %length, align 4
  br label %if.end189

if.end189:                                        ; preds = %if.then182, %if.then170
  %166 = load i8*, i8** %new_body, align 8
  %167 = load i32, i32* %offset171, align 4
  %idx.ext190 = sext i32 %167 to i64
  %add.ptr191 = getelementptr inbounds i8, i8* %166, i64 %idx.ext190
  %168 = load i8*, i8** %old_body, align 8
  %169 = load i32, i32* %offset171, align 4
  %idx.ext192 = sext i32 %169 to i64
  %add.ptr193 = getelementptr inbounds i8, i8* %168, i64 %idx.ext192
  %170 = load i32, i32* %length, align 4
  %conv194 = sext i32 %170 to i64
  %mul195 = mul i64 %conv194, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr191, i8* align 1 %add.ptr193, i64 %mul195, i1 false)
  br label %if.end196

if.end196:                                        ; preds = %if.end189, %if.end167
  %171 = load i32, i32* %new_type.addr, align 4
  %cmp197 = icmp eq i32 %171, 15
  br i1 %cmp197, label %cond.true199, label %cond.false200

cond.true199:                                     ; preds = %if.end196
  br i1 true, label %if.then201, label %if.end213

cond.false200:                                    ; preds = %if.end196
  br i1 false, label %if.then201, label %if.end213

if.then201:                                       ; preds = %cond.false200, %cond.true199
  %172 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %173 = bitcast %struct.sv* %172 to i8*
  %174 = bitcast i8* %173 to %struct.io*
  store %struct.io* %174, %struct.io** %io, align 8
  %call202 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i64 10, i32 1, i32 12)
  store %struct.gv* %call202, %struct.gv** %iogv, align 8
  %175 = load %struct.io*, %struct.io** %io, align 8
  %sv_flags203 = getelementptr inbounds %struct.io, %struct.io* %175, i32 0, i32 2
  %176 = load i32, i32* %sv_flags203, align 4
  %or204 = or i32 %176, 1048576
  store i32 %or204, i32* %sv_flags203, align 4
  %177 = load %struct.hv*, %struct.hv** @PL_stashcache, align 8
  call void @Perl_hv_clear(%struct.hv* %177)
  br label %do.body205

do.body205:                                       ; preds = %if.then201
  %178 = load %struct.gv*, %struct.gv** %iogv, align 8
  %sv_u206 = getelementptr inbounds %struct.gv, %struct.gv* %178, i32 0, i32 3
  %svu_gp = bitcast %union.anon.6* %sv_u206 to %struct.gp**
  %179 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr207 = getelementptr inbounds %struct.gp, %struct.gp* %179, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr207, i32 0, i32 5
  %180 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %181 = bitcast %struct.hv* %180 to i8*
  %182 = bitcast i8* %181 to %struct.sv*
  %call208 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %182)
  %183 = bitcast %struct.sv* %call208 to i8*
  %184 = bitcast i8* %183 to %struct.hv*
  %185 = load %struct.io*, %struct.io** %io, align 8
  %sv_any209 = getelementptr inbounds %struct.io, %struct.io* %185, i32 0, i32 0
  %186 = load %struct.xpvio*, %struct.xpvio** %sv_any209, align 8
  %187 = bitcast %struct.xpvio* %186 to %struct.xpvmg*
  %xmg_stash210 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %187, i32 0, i32 0
  store %struct.hv* %184, %struct.hv** %xmg_stash210, align 8
  br label %do.end211

do.end211:                                        ; preds = %do.body205
  %188 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any212 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 0
  %189 = load i8*, i8** %sv_any212, align 8
  %190 = bitcast i8* %189 to %struct.xpvio*
  %xio_page_len = getelementptr inbounds %struct.xpvio, %struct.xpvio* %190, i32 0, i32 8
  store i64 60, i64* %xio_page_len, align 8
  br label %if.end213

if.end213:                                        ; preds = %do.end211, %cond.false200, %cond.true199
  %191 = load i32, i32* %new_type.addr, align 4
  %cmp214 = icmp eq i32 %191, 8
  br i1 %cmp214, label %cond.true216, label %cond.false217

cond.true216:                                     ; preds = %if.end213
  br i1 true, label %if.then218, label %if.else220

cond.false217:                                    ; preds = %if.end213
  br i1 false, label %if.then218, label %if.else220

if.then218:                                       ; preds = %cond.false217, %cond.true216
  %192 = load i8*, i8** %new_body, align 8
  %193 = bitcast i8* %192 to %struct.regexp*
  %194 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u219 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 3
  %svu_rx = bitcast %union.anon* %sv_u219 to %struct.regexp**
  store %struct.regexp* %193, %struct.regexp** %svu_rx, align 8
  br label %if.end227

if.else220:                                       ; preds = %cond.false217, %cond.true216
  %195 = load i32, i32* %old_type, align 4
  %cmp221 = icmp ult i32 %195, 3
  br i1 %cmp221, label %if.then223, label %if.end226

if.then223:                                       ; preds = %if.else220
  %196 = load %struct.sv*, %struct.sv** %referant, align 8
  %197 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u224 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 3
  %svu_rv225 = bitcast %union.anon* %sv_u224 to %struct.sv**
  store %struct.sv* %196, %struct.sv** %svu_rv225, align 8
  br label %if.end226

if.end226:                                        ; preds = %if.then223, %if.else220
  br label %if.end227

if.end227:                                        ; preds = %if.end226, %if.then218
  br label %sw.epilog230

sw.default228:                                    ; preds = %if.end36
  %198 = load i32, i32* %new_type.addr, align 4
  %conv229 = zext i32 %198 to i64
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0), i64 %conv229)
  br label %sw.epilog230

sw.epilog230:                                     ; preds = %sw.default228, %if.end227, %if.end124
  %199 = load %struct.body_details*, %struct.body_details** %old_type_details, align 8
  %body_size231 = getelementptr inbounds %struct.body_details, %struct.body_details* %199, i32 0, i32 0
  %200 = load i8, i8* %body_size231, align 4
  %tobool232 = icmp ne i8 %200, 0
  br i1 %tobool232, label %if.then233, label %if.end244

if.then233:                                       ; preds = %sw.epilog230
  br label %do.body234

do.body234:                                       ; preds = %if.then233
  %201 = load i8*, i8** %old_body, align 8
  %202 = load %struct.body_details*, %struct.body_details** %old_type_details, align 8
  %offset235 = getelementptr inbounds %struct.body_details, %struct.body_details* %202, i32 0, i32 2
  %203 = load i8, i8* %offset235, align 2
  %conv236 = zext i8 %203 to i32
  %idx.ext237 = sext i32 %conv236 to i64
  %add.ptr238 = getelementptr inbounds i8, i8* %201, i64 %idx.ext237
  %204 = bitcast i8* %add.ptr238 to i8**
  store i8** %204, i8*** %thing_copy, align 8
  %205 = load i32, i32* %old_type, align 4
  %idxprom239 = zext i32 %205 to i64
  %arrayidx240 = getelementptr inbounds [16 x i8*], [16 x i8*]* @PL_body_roots, i64 0, i64 %idxprom239
  %206 = load i8*, i8** %arrayidx240, align 8
  %207 = load i8**, i8*** %thing_copy, align 8
  store i8* %206, i8** %207, align 8
  %208 = load i8**, i8*** %thing_copy, align 8
  %209 = bitcast i8** %208 to i8*
  %210 = load i32, i32* %old_type, align 4
  %idxprom241 = zext i32 %210 to i64
  %arrayidx242 = getelementptr inbounds [16 x i8*], [16 x i8*]* @PL_body_roots, i64 0, i64 %idxprom241
  store i8* %209, i8** %arrayidx242, align 8
  br label %do.end243

do.end243:                                        ; preds = %do.body234
  br label %if.end244

if.end244:                                        ; preds = %if.then, %do.end, %do.end53, %do.end243, %sw.epilog230
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %islv = alloca i8, align 1
  %new_type = alloca i32, align 4
  %temp = alloca %struct.sv*, align 8
  %temp_p = alloca %struct.regexp*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 134283264
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @Perl_croak_no_modify()
  br label %if.end7

if.else:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 268435456
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %5, 255
  %cmp = icmp ne i32 %and5, 12
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br i1 true, label %if.then6, label %if.end

cond.false:                                       ; preds = %land.lhs.true
  br i1 false, label %if.then6, label %if.end

if.then6:                                         ; preds = %cond.false, %cond.true
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %7 = load i32, i32* %flags.addr, align 4
  call void @S_sv_uncow(%struct.sv* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then6, %cond.false, %cond.true, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %9, 2048
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.else12

if.then11:                                        ; preds = %if.end7
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %11 = load i32, i32* %flags.addr, align 4
  call void @Perl_sv_unref_flags(%struct.sv* %10, i32 %11)
  br label %if.end137

if.else12:                                        ; preds = %if.end7
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %13, 16777216
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %land.lhs.true16, label %if.else28

land.lhs.true16:                                  ; preds = %if.else12
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %15, 49152
  %cmp19 = icmp eq i32 %and18, 32768
  br i1 %cmp19, label %land.lhs.true20, label %if.else28

land.lhs.true20:                                  ; preds = %land.lhs.true16
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %17, 255
  %cmp23 = icmp eq i32 %and22, 9
  br i1 %cmp23, label %if.then27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true20
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %19, 255
  %cmp26 = icmp eq i32 %and25, 10
  br i1 %cmp26, label %if.then27, label %if.else28

if.then27:                                        ; preds = %lor.lhs.false, %land.lhs.true20
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %21 = load i32, i32* %flags.addr, align 4
  call void @S_sv_unglob(%struct.sv* %20, i32 %21)
  br label %if.end136

if.else28:                                        ; preds = %lor.lhs.false, %land.lhs.true16, %if.else12
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %23, 16777216
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %land.lhs.true32, label %if.else125

land.lhs.true32:                                  ; preds = %if.else28
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %25, 255
  %cmp35 = icmp eq i32 %and34, 8
  br i1 %cmp35, label %if.then40, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true32
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %27, 16826623
  %cmp39 = icmp eq i32 %and38, 16777226
  br i1 %cmp39, label %if.then40, label %if.else125

if.then40:                                        ; preds = %lor.lhs.false36, %land.lhs.true32
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %29, 255
  %cmp43 = icmp eq i32 %and42, 10
  %frombool = zext i1 %cmp43 to i8
  store i8 %frombool, i8* %islv, align 1
  %30 = load i8, i8* %islv, align 1
  %tobool44 = trunc i8 %30 to i1
  br i1 %tobool44, label %cond.true45, label %cond.false46

cond.true45:                                      ; preds = %if.then40
  br label %cond.end

cond.false46:                                     ; preds = %if.then40
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any, align 8
  %33 = bitcast i8* %32 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %33, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %34 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool47 = icmp ne %struct.magic* %34, null
  br i1 %tobool47, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.false46
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any48 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any48, align 8
  %37 = bitcast i8* %36 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %37, i32 0, i32 0
  %38 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %tobool49 = icmp ne %struct.hv* %38, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.false46
  %39 = phi i1 [ true, %cond.false46 ], [ %tobool49, %lor.rhs ]
  %40 = zext i1 %39 to i64
  %cond = select i1 %39, i32 7, i32 3
  br label %cond.end

cond.end:                                         ; preds = %lor.end, %cond.true45
  %cond50 = phi i32 [ 0, %cond.true45 ], [ %cond, %lor.end ]
  store i32 %cond50, i32* %new_type, align 4
  %41 = load i32, i32* %new_type, align 4
  %call = call %struct.sv* @Perl_newSV_type(i32 %41)
  store %struct.sv* %call, %struct.sv** %temp, align 8
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %43 = bitcast %struct.sv* %42 to %struct.p5rx*
  %call51 = call %struct.regexp* @S_ReANY(%struct.p5rx* %43)
  store %struct.regexp* %call51, %struct.regexp** %temp_p, align 8
  %44 = load i32, i32* %new_type, align 4
  %cmp52 = icmp eq i32 %44, 7
  br i1 %cmp52, label %if.then53, label %if.end75

if.then53:                                        ; preds = %cond.end
  br label %do.body

do.body:                                          ; preds = %if.then53
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any54 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any54, align 8
  %47 = bitcast i8* %46 to %struct.xpvmg*
  %xmg_u55 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %47, i32 0, i32 1
  %xmg_magic56 = bitcast %union._xmgu* %xmg_u55 to %struct.magic**
  %48 = load %struct.magic*, %struct.magic** %xmg_magic56, align 8
  %49 = load %struct.sv*, %struct.sv** %temp, align 8
  %sv_any57 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any57, align 8
  %51 = bitcast i8* %50 to %struct.xpvmg*
  %xmg_u58 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %51, i32 0, i32 1
  %xmg_magic59 = bitcast %union._xmgu* %xmg_u58 to %struct.magic**
  store %struct.magic* %48, %struct.magic** %xmg_magic59, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body60

do.body60:                                        ; preds = %do.end
  %52 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any61 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 0
  %53 = load i8*, i8** %sv_any61, align 8
  %54 = bitcast i8* %53 to %struct.xpvmg*
  %xmg_u62 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %54, i32 0, i32 1
  %xmg_magic63 = bitcast %union._xmgu* %xmg_u62 to %struct.magic**
  store %struct.magic* null, %struct.magic** %xmg_magic63, align 8
  br label %do.end64

do.end64:                                         ; preds = %do.body60
  br label %do.body65

do.body65:                                        ; preds = %do.end64
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any66 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any66, align 8
  %57 = bitcast i8* %56 to %struct.xpvmg*
  %xmg_stash67 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %57, i32 0, i32 0
  %58 = load %struct.hv*, %struct.hv** %xmg_stash67, align 8
  %59 = load %struct.sv*, %struct.sv** %temp, align 8
  %sv_any68 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any68, align 8
  %61 = bitcast i8* %60 to %struct.xpvmg*
  %xmg_stash69 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %61, i32 0, i32 0
  store %struct.hv* %58, %struct.hv** %xmg_stash69, align 8
  br label %do.end70

do.end70:                                         ; preds = %do.body65
  br label %do.body71

do.body71:                                        ; preds = %do.end70
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any72 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any72, align 8
  %64 = bitcast i8* %63 to %struct.xpvmg*
  %xmg_stash73 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %64, i32 0, i32 0
  store %struct.hv* null, %struct.hv** %xmg_stash73, align 8
  br label %do.end74

do.end74:                                         ; preds = %do.body71
  br label %if.end75

if.end75:                                         ; preds = %do.end74, %cond.end
  %65 = load i8, i8* %islv, align 1
  %tobool76 = trunc i8 %65 to i1
  br i1 %tobool76, label %if.end83, label %if.then77

if.then77:                                        ; preds = %if.end75
  br label %do.body78

do.body78:                                        ; preds = %if.then77
  %66 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any79 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 0
  %67 = load i8*, i8** %sv_any79, align 8
  %68 = bitcast i8* %67 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %68, i32 0, i32 2
  %69 = load i64, i64* %xpv_cur, align 8
  %70 = load %struct.sv*, %struct.sv** %temp, align 8
  %sv_any80 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 0
  %71 = load i8*, i8** %sv_any80, align 8
  %72 = bitcast i8* %71 to %struct.xpv*
  %xpv_cur81 = getelementptr inbounds %struct.xpv, %struct.xpv* %72, i32 0, i32 2
  store i64 %69, i64* %xpv_cur81, align 8
  br label %do.end82

do.end82:                                         ; preds = %do.body78
  br label %if.end83

if.end83:                                         ; preds = %do.end82, %if.end75
  %73 = load i32, i32* %flags.addr, align 4
  %and84 = and i32 %73, 4
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %if.then86, label %if.else87

if.then86:                                        ; preds = %if.end83
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  store i8* null, i8** %svu_pv, align 8
  br label %if.end107

if.else87:                                        ; preds = %if.end83
  %75 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %76 = bitcast %struct.sv* %75 to %struct.p5rx*
  %call88 = call %struct.regexp* @S_ReANY(%struct.p5rx* %76)
  %xpv_len_u = getelementptr inbounds %struct.regexp, %struct.regexp* %call88, i32 0, i32 3
  %xpvlenu_pv = bitcast %union.anon.14* %xpv_len_u to i8**
  %77 = load i8*, i8** %xpvlenu_pv, align 8
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any89 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any89, align 8
  %80 = bitcast i8* %79 to %struct.xpv*
  %xpv_cur90 = getelementptr inbounds %struct.xpv, %struct.xpv* %80, i32 0, i32 2
  %81 = load i64, i64* %xpv_cur90, align 8
  %conv = trunc i64 %81 to i32
  %call91 = call i8* @Perl_savepvn(i8* %77, i32 %conv)
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u92 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 3
  %svu_pv93 = bitcast %union.anon* %sv_u92 to i8**
  store i8* %call91, i8** %svu_pv93, align 8
  br label %do.body94

do.body94:                                        ; preds = %if.else87
  %83 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any95 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any95, align 8
  %85 = bitcast i8* %84 to %struct.xpv*
  %xpv_cur96 = getelementptr inbounds %struct.xpv, %struct.xpv* %85, i32 0, i32 2
  %86 = load i64, i64* %xpv_cur96, align 8
  %add = add i64 %86, 1
  %87 = load i8, i8* %islv, align 1
  %tobool97 = trunc i8 %87 to i1
  br i1 %tobool97, label %cond.true99, label %cond.false100

cond.true99:                                      ; preds = %do.body94
  %88 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  br label %cond.end101

cond.false100:                                    ; preds = %do.body94
  %89 = load %struct.sv*, %struct.sv** %temp, align 8
  br label %cond.end101

cond.end101:                                      ; preds = %cond.false100, %cond.true99
  %cond102 = phi %struct.sv* [ %88, %cond.true99 ], [ %89, %cond.false100 ]
  %sv_any103 = getelementptr inbounds %struct.sv, %struct.sv* %cond102, i32 0, i32 0
  %90 = load i8*, i8** %sv_any103, align 8
  %91 = bitcast i8* %90 to %struct.xpv*
  %xpv_len_u104 = getelementptr inbounds %struct.xpv, %struct.xpv* %91, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u104 to i64*
  store i64 %add, i64* %xpvlenu_len, align 8
  br label %do.end105

do.end105:                                        ; preds = %cond.end101
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags106 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags106, align 4
  %or = or i32 %93, 17408
  store i32 %or, i32* %sv_flags106, align 4
  br label %if.end107

if.end107:                                        ; preds = %do.end105, %if.then86
  %94 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags108 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags108, align 4
  %and109 = and i32 %95, -16777217
  store i32 %and109, i32* %sv_flags108, align 4
  %96 = load i8, i8* %islv, align 1
  %tobool110 = trunc i8 %96 to i1
  br i1 %tobool110, label %if.end118, label %if.then111

if.then111:                                       ; preds = %if.end107
  %97 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags112 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 2
  %98 = load i32, i32* %sv_flags112, align 4
  %and113 = and i32 %98, -256
  store i32 %and113, i32* %sv_flags112, align 4
  %99 = load i32, i32* %new_type, align 4
  %100 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags114 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 2
  %101 = load i32, i32* %sv_flags114, align 4
  %or115 = or i32 %101, %99
  store i32 %or115, i32* %sv_flags114, align 4
  %102 = load %struct.sv*, %struct.sv** %temp, align 8
  %sv_any116 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 0
  %103 = load i8*, i8** %sv_any116, align 8
  %104 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any117 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 0
  store i8* %103, i8** %sv_any117, align 8
  br label %if.end118

if.end118:                                        ; preds = %if.then111, %if.end107
  %105 = load %struct.sv*, %struct.sv** %temp, align 8
  %sv_flags119 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 2
  %106 = load i32, i32* %sv_flags119, align 4
  %and120 = and i32 %106, -256
  store i32 %and120, i32* %sv_flags119, align 4
  %107 = load %struct.sv*, %struct.sv** %temp, align 8
  %sv_flags121 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 2
  %108 = load i32, i32* %sv_flags121, align 4
  %or122 = or i32 %108, 16777224
  store i32 %or122, i32* %sv_flags121, align 4
  %109 = load %struct.regexp*, %struct.regexp** %temp_p, align 8
  %110 = bitcast %struct.regexp* %109 to i8*
  %111 = load %struct.sv*, %struct.sv** %temp, align 8
  %sv_any123 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 0
  store i8* %110, i8** %sv_any123, align 8
  %112 = load %struct.regexp*, %struct.regexp** %temp_p, align 8
  %113 = load %struct.sv*, %struct.sv** %temp, align 8
  %sv_u124 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 3
  %svu_rx = bitcast %union.anon* %sv_u124 to %struct.regexp**
  store %struct.regexp* %112, %struct.regexp** %svu_rx, align 8
  %114 = load %struct.sv*, %struct.sv** %temp, align 8
  %115 = bitcast %struct.sv* %114 to i8*
  %116 = bitcast i8* %115 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %116)
  br label %if.end135

if.else125:                                       ; preds = %lor.lhs.false36, %if.else28
  %117 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags126 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags126, align 4
  %and127 = and i32 %118, 14680064
  %tobool128 = icmp ne i32 %and127, 0
  br i1 %tobool128, label %land.lhs.true129, label %if.end134

land.lhs.true129:                                 ; preds = %if.else125
  %119 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call130 = call %struct.magic* @Perl_mg_find(%struct.sv* %119, i32 86)
  %tobool131 = icmp ne %struct.magic* %call130, null
  br i1 %tobool131, label %if.then132, label %if.end134

if.then132:                                       ; preds = %land.lhs.true129
  %120 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call133 = call i32 @Perl_sv_unmagic(%struct.sv* %120, i32 86)
  br label %if.end134

if.end134:                                        ; preds = %if.then132, %land.lhs.true129, %if.else125
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %if.end118
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.then27
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.then11
  ret void
}

declare dso_local void @Perl_croak(i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_sv_reftype(%struct.sv* %sv, i32 %ob) #0 {
entry:
  %retval = alloca i8*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %ob.addr = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %ob, i32* %ob.addr, align 4
  %0 = load i32, i32* %ob.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 1048576
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %4 = load i32, i32* %ob.addr, align 4
  %call = call %struct.sv* @Perl_sv_ref(%struct.sv* null, %struct.sv* %3, i32 %4)
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %call, i32 0, i32 2
  %5 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %5, 2098176
  %cmp = icmp eq i32 %and3, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %7 = load i32, i32* %ob.addr, align 4
  %call4 = call %struct.sv* @Perl_sv_ref(%struct.sv* null, %struct.sv* %6, i32 %7)
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %call4, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %8 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 0
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %10 = load i32, i32* %ob.addr, align 4
  %call5 = call %struct.sv* @Perl_sv_ref(%struct.sv* null, %struct.sv* %9, i32 %10)
  %call6 = call i8* @Perl_sv_2pv_flags(%struct.sv* %call5, i64* null, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call6, %cond.false ]
  store i8* %cond, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %12, 255
  switch i32 %and8, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 7, label %sw.bb
    i32 10, label %sw.bb21
    i32 11, label %sw.bb33
    i32 12, label %sw.bb34
    i32 13, label %sw.bb35
    i32 9, label %sw.bb36
    i32 14, label %sw.bb50
    i32 15, label %sw.bb51
    i32 4, label %sw.bb52
    i32 8, label %sw.bb53
  ]

sw.bb:                                            ; preds = %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %14, 14680064
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %land.lhs.true12, label %if.end

land.lhs.true12:                                  ; preds = %sw.bb
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call13 = call %struct.magic* @Perl_mg_find(%struct.sv* %15, i32 86)
  %tobool14 = icmp ne %struct.magic* %call13, null
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %land.lhs.true12
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.50, i64 0, i64 0), i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true12, %sw.bb
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %17, 2048
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.else20

if.then19:                                        ; preds = %if.end
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.51, i64 0, i64 0), i8** %retval, align 8
  br label %return

if.else20:                                        ; preds = %if.end
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb21:                                          ; preds = %if.else
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %19, 2048
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %cond.true25, label %cond.false26

cond.true25:                                      ; preds = %sw.bb21
  br label %cond.end31

cond.false26:                                     ; preds = %sw.bb21
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any, align 8
  %22 = bitcast i8* %21 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %22, i32 0, i32 9
  %23 = load i8, i8* %xlv_type, align 8
  %conv = sext i8 %23 to i32
  %and27 = and i32 %conv, -33
  %cmp28 = icmp eq i32 %and27, 84
  %24 = zext i1 %cmp28 to i64
  %cond30 = select i1 %cmp28, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.53, i64 0, i64 0)
  br label %cond.end31

cond.end31:                                       ; preds = %cond.false26, %cond.true25
  %cond32 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.51, i64 0, i64 0), %cond.true25 ], [ %cond30, %cond.false26 ]
  store i8* %cond32, i8** %retval, align 8
  br label %return

sw.bb33:                                          ; preds = %if.else
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb34:                                          ; preds = %if.else
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb35:                                          ; preds = %if.else
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.56, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb36:                                          ; preds = %if.else
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %26, 49152
  %cmp39 = icmp eq i32 %and38, 32768
  br i1 %cmp39, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.bb36
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %28, 255
  %cmp43 = icmp eq i32 %and42, 9
  br i1 %cmp43, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %30, 255
  %cmp47 = icmp eq i32 %and46, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %31 = phi i1 [ true, %land.rhs ], [ %cmp47, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %sw.bb36
  %32 = phi i1 [ false, %sw.bb36 ], [ %31, %lor.end ]
  %33 = zext i1 %32 to i64
  %cond49 = select i1 %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.57, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i64 0, i64 0)
  store i8* %cond49, i8** %retval, align 8
  br label %return

sw.bb50:                                          ; preds = %if.else
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.58, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb51:                                          ; preds = %if.else
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb52:                                          ; preds = %if.else
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.60, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb53:                                          ; preds = %if.else
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.61, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.default:                                       ; preds = %if.else
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.62, i64 0, i64 0), i8** %retval, align 8
  br label %return

return:                                           ; preds = %sw.default, %sw.bb53, %sw.bb52, %sw.bb51, %sw.bb50, %land.end, %sw.bb35, %sw.bb34, %sw.bb33, %cond.end31, %if.else20, %if.then19, %if.then15, %cond.end
  %34 = load i8*, i8** %retval, align 8
  ret i8* %34
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_sv_backoff(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %delta = alloca i64, align 8
  %s = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %1 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  store i8* %add.ptr, i8** %s, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 3
  %svu_pv2 = bitcast %union.anon* %sv_u1 to i8**
  %5 = load i8*, i8** %svu_pv2, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %5, i64 0
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr3, i64 -1
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i64
  store i64 %conv, i64* %delta, align 8
  %7 = load i64, i64* %delta, align 8
  %tobool4 = icmp ne i64 %7, 0
  br i1 %tobool4, label %if.end, label %if.then5

if.then5:                                         ; preds = %if.then
  %8 = bitcast i64* %delta to i8*
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u6 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_pv7 = bitcast %union.anon* %sv_u6 to i8**
  %10 = load i8*, i8** %svu_pv7, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %10, i64 0
  %add.ptr9 = getelementptr inbounds i8, i8* %add.ptr8, i64 -1
  %add.ptr10 = getelementptr inbounds i8, i8* %add.ptr9, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 1 %add.ptr10, i64 8, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.then
  br label %if.end11

if.else:                                          ; preds = %do.body
  store i64 0, i64* %delta, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.end
  br label %do.end

do.end:                                           ; preds = %if.end11
  br label %do.body12

do.body12:                                        ; preds = %do.end
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %13 = bitcast i8* %12 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %14 = load i64, i64* %xpvlenu_len, align 8
  %15 = load i64, i64* %delta, align 8
  %add = add i64 %14, %15
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any13 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any13, align 8
  %18 = bitcast i8* %17 to %struct.xpv*
  %xpv_len_u14 = getelementptr inbounds %struct.xpv, %struct.xpv* %18, i32 0, i32 3
  %xpvlenu_len15 = bitcast %union.anon.19* %xpv_len_u14 to i64*
  store i64 %add, i64* %xpvlenu_len15, align 8
  br label %do.end16

do.end16:                                         ; preds = %do.body12
  br label %do.body17

do.body17:                                        ; preds = %do.end16
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u18 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 3
  %svu_pv19 = bitcast %union.anon* %sv_u18 to i8**
  %20 = load i8*, i8** %svu_pv19, align 8
  %21 = load i64, i64* %delta, align 8
  %idx.neg = sub i64 0, %21
  %add.ptr20 = getelementptr inbounds i8, i8* %20, i64 %idx.neg
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u21 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_pv22 = bitcast %union.anon* %sv_u21 to i8**
  store i8* %add.ptr20, i8** %svu_pv22, align 8
  br label %do.end23

do.end23:                                         ; preds = %do.body17
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u24 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 3
  %svu_pv25 = bitcast %union.anon* %sv_u24 to i8**
  %24 = load i8*, i8** %svu_pv25, align 8
  %25 = load i8*, i8** %s, align 8
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any26 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any26, align 8
  %28 = bitcast i8* %27 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %28, i32 0, i32 2
  %29 = load i64, i64* %xpv_cur, align 8
  %add27 = add i64 %29, 1
  %mul = mul i64 %add27, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 %25, i64 %mul, i1 false)
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %31, -33554433
  store i32 %and29, i32* %sv_flags28, align 4
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local %struct.gv* @Perl_gv_fetchpvn_flags(i8*, i64, i32, i32) #1

declare dso_local void @Perl_hv_clear(%struct.hv*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_SvREFCNT_inc(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %2, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  ret %struct.sv* %3
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_sv_grow(%struct.sv* %sv, i64 %newlen) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %newlen.addr = alloca i64, align 8
  %s = alloca i8*, align 8
  %minlen = alloca i64, align 8
  %rounded = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %newlen, i64* %newlen.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2048
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_unref_flags(%struct.sv* %2, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 255
  %cmp = icmp ult i32 %and2, 3
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %5, i32 3)
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %7 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 0
  store i8* %add.ptr, i8** %s, align 8
  br label %if.end25

if.else:                                          ; preds = %if.end
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %9, 33554432
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then7, label %if.else15

if.then7:                                         ; preds = %if.else
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_sv_backoff(%struct.sv* %10)
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u8 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 3
  %svu_pv9 = bitcast %union.anon* %sv_u8 to i8**
  %12 = load i8*, i8** %svu_pv9, align 8
  %add.ptr10 = getelementptr inbounds i8, i8* %12, i64 0
  store i8* %add.ptr10, i8** %s, align 8
  %13 = load i64, i64* %newlen.addr, align 8
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %16, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %17 = load i64, i64* %xpvlenu_len, align 8
  %cmp11 = icmp ugt i64 %13, %17
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.then7
  %18 = load i64, i64* %newlen.addr, align 8
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any13 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any13, align 8
  %21 = bitcast i8* %20 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %21, i32 0, i32 2
  %22 = load i64, i64* %xpv_cur, align 8
  %sub = sub i64 %18, %22
  %mul = mul i64 10, %sub
  %23 = load i64, i64* %newlen.addr, align 8
  %add = add i64 %23, %mul
  store i64 %add, i64* %newlen.addr, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.then7
  br label %if.end24

if.else15:                                        ; preds = %if.else
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %25, 268435456
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.else15
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_sv_uncow(%struct.sv* %26, i32 0)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.else15
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u21 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 3
  %svu_pv22 = bitcast %union.anon* %sv_u21 to i8**
  %28 = load i8*, i8** %svu_pv22, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %28, i64 0
  store i8* %add.ptr23, i8** %s, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.end20, %if.end14
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.then3
  %29 = load i64, i64* %newlen.addr, align 8
  %and26 = and i64 %29, 255
  %tobool27 = icmp ne i64 %and26, 0
  br i1 %tobool27, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %if.end25
  %30 = load i64, i64* %newlen.addr, align 8
  %cmp28 = icmp ne i64 %30, -1
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %land.lhs.true
  %31 = load i64, i64* %newlen.addr, align 8
  %inc = add i64 %31, 1
  store i64 %inc, i64* %newlen.addr, align 8
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %land.lhs.true, %if.end25
  %32 = load i64, i64* %newlen.addr, align 8
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any31 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any31, align 8
  %35 = bitcast i8* %34 to %struct.xpv*
  %xpv_len_u32 = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 3
  %xpvlenu_len33 = bitcast %union.anon.19* %xpv_len_u32 to i64*
  %36 = load i64, i64* %xpvlenu_len33, align 8
  %cmp34 = icmp ugt i64 %32, %36
  br i1 %cmp34, label %if.then35, label %if.end92

if.then35:                                        ; preds = %if.end30
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any36 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any36, align 8
  %39 = bitcast i8* %38 to %struct.xpv*
  %xpv_cur37 = getelementptr inbounds %struct.xpv, %struct.xpv* %39, i32 0, i32 2
  %40 = load i64, i64* %xpv_cur37, align 8
  store i64 %40, i64* %minlen, align 8
  %41 = load i64, i64* %minlen, align 8
  %shr = lshr i64 %41, 2
  %add38 = add i64 %shr, 10
  %42 = load i64, i64* %minlen, align 8
  %add39 = add i64 %42, %add38
  store i64 %add39, i64* %minlen, align 8
  %43 = load i64, i64* %newlen.addr, align 8
  %44 = load i64, i64* %minlen, align 8
  %cmp40 = icmp ult i64 %43, %44
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.then35
  %45 = load i64, i64* %minlen, align 8
  store i64 %45, i64* %newlen.addr, align 8
  br label %if.end42

if.end42:                                         ; preds = %if.then41, %if.then35
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any43 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any43, align 8
  %48 = bitcast i8* %47 to %struct.xpv*
  %xpv_len_u44 = getelementptr inbounds %struct.xpv, %struct.xpv* %48, i32 0, i32 3
  %xpvlenu_len45 = bitcast %union.anon.19* %xpv_len_u44 to i64*
  %49 = load i64, i64* %xpvlenu_len45, align 8
  %tobool46 = icmp ne i64 %49, 0
  br i1 %tobool46, label %if.then47, label %if.end54

if.then47:                                        ; preds = %if.end42
  %50 = load i64, i64* %newlen.addr, align 8
  %sub48 = sub i64 %50, 1
  %add49 = add i64 %sub48, 8
  %and50 = and i64 %add49, -8
  store i64 %and50, i64* %rounded, align 8
  %51 = load i64, i64* %rounded, align 8
  %52 = load i64, i64* %newlen.addr, align 8
  %cmp51 = icmp ugt i64 %51, %52
  br i1 %cmp51, label %if.then52, label %if.end53

if.then52:                                        ; preds = %if.then47
  %53 = load i64, i64* %rounded, align 8
  store i64 %53, i64* %newlen.addr, align 8
  br label %if.end53

if.end53:                                         ; preds = %if.then52, %if.then47
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.end42
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any55 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any55, align 8
  %56 = bitcast i8* %55 to %struct.xpv*
  %xpv_len_u56 = getelementptr inbounds %struct.xpv, %struct.xpv* %56, i32 0, i32 3
  %xpvlenu_len57 = bitcast %union.anon.19* %xpv_len_u56 to i64*
  %57 = load i64, i64* %xpvlenu_len57, align 8
  %tobool58 = icmp ne i64 %57, 0
  br i1 %tobool58, label %land.lhs.true59, label %if.else63

land.lhs.true59:                                  ; preds = %if.end54
  %58 = load i8*, i8** %s, align 8
  %tobool60 = icmp ne i8* %58, null
  br i1 %tobool60, label %if.then61, label %if.else63

if.then61:                                        ; preds = %land.lhs.true59
  %59 = load i8*, i8** %s, align 8
  %60 = load i64, i64* %newlen.addr, align 8
  %call62 = call i8* @Perl_safesysrealloc(i8* %59, i64 %60)
  store i8* %call62, i8** %s, align 8
  br label %if.end84

if.else63:                                        ; preds = %land.lhs.true59, %if.end54
  %61 = load i64, i64* %newlen.addr, align 8
  %call64 = call i8* @Perl_safesysmalloc(i64 %61)
  store i8* %call64, i8** %s, align 8
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u65 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 3
  %svu_pv66 = bitcast %union.anon* %sv_u65 to i8**
  %63 = load i8*, i8** %svu_pv66, align 8
  %add.ptr67 = getelementptr inbounds i8, i8* %63, i64 0
  %tobool68 = icmp ne i8* %add.ptr67, null
  br i1 %tobool68, label %land.lhs.true69, label %if.end83

land.lhs.true69:                                  ; preds = %if.else63
  %64 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any70 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any70, align 8
  %66 = bitcast i8* %65 to %struct.xpv*
  %xpv_cur71 = getelementptr inbounds %struct.xpv, %struct.xpv* %66, i32 0, i32 2
  %67 = load i64, i64* %xpv_cur71, align 8
  %tobool72 = icmp ne i64 %67, 0
  br i1 %tobool72, label %if.then73, label %if.end83

if.then73:                                        ; preds = %land.lhs.true69
  %68 = load i8*, i8** %s, align 8
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u74 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 3
  %svu_pv75 = bitcast %union.anon* %sv_u74 to i8**
  %70 = load i8*, i8** %svu_pv75, align 8
  %add.ptr76 = getelementptr inbounds i8, i8* %70, i64 0
  %71 = load i64, i64* %newlen.addr, align 8
  %72 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any77 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 0
  %73 = load i8*, i8** %sv_any77, align 8
  %74 = bitcast i8* %73 to %struct.xpv*
  %xpv_cur78 = getelementptr inbounds %struct.xpv, %struct.xpv* %74, i32 0, i32 2
  %75 = load i64, i64* %xpv_cur78, align 8
  %cmp79 = icmp ult i64 %71, %75
  br i1 %cmp79, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then73
  %76 = load i64, i64* %newlen.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then73
  %77 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any80 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 0
  %78 = load i8*, i8** %sv_any80, align 8
  %79 = bitcast i8* %78 to %struct.xpv*
  %xpv_cur81 = getelementptr inbounds %struct.xpv, %struct.xpv* %79, i32 0, i32 2
  %80 = load i64, i64* %xpv_cur81, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %76, %cond.true ], [ %80, %cond.false ]
  %mul82 = mul i64 %cond, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %add.ptr76, i64 %mul82, i1 false)
  br label %if.end83

if.end83:                                         ; preds = %cond.end, %land.lhs.true69, %if.else63
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.then61
  br label %do.body

do.body:                                          ; preds = %if.end84
  %81 = load i8*, i8** %s, align 8
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u85 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 3
  %svu_pv86 = bitcast %union.anon* %sv_u85 to i8**
  store i8* %81, i8** %svu_pv86, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body87

do.body87:                                        ; preds = %do.end
  %83 = load i64, i64* %newlen.addr, align 8
  %84 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any88 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 0
  %85 = load i8*, i8** %sv_any88, align 8
  %86 = bitcast i8* %85 to %struct.xpv*
  %xpv_len_u89 = getelementptr inbounds %struct.xpv, %struct.xpv* %86, i32 0, i32 3
  %xpvlenu_len90 = bitcast %union.anon.19* %xpv_len_u89 to i64*
  store i64 %83, i64* %xpvlenu_len90, align 8
  br label %do.end91

do.end91:                                         ; preds = %do.body87
  br label %if.end92

if.end92:                                         ; preds = %do.end91, %if.end30
  %87 = load i8*, i8** %s, align 8
  ret i8* %87
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_unref_flags(%struct.sv* %ref, i32 %flags) #0 {
entry:
  %ref.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %target = alloca %struct.sv*, align 8
  store %struct.sv* %ref, %struct.sv** %ref.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %1 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %1, %struct.sv** %target, align 8
  %2 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, -2147481600
  %cmp = icmp eq i32 %and, -2147481600
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %target, align 8
  %5 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  call void @Perl_sv_del_backref(%struct.sv* %4, %struct.sv* %5)
  %6 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %7, 2147481599
  store i32 %and2, i32* %sv_flags1, align 4
  br label %do.body

do.body:                                          ; preds = %if.then
  %8 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  %sv_u3 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 3
  %svu_rv4 = bitcast %union.anon* %sv_u3 to %struct.sv**
  store %struct.sv* null, %struct.sv** %svu_rv4, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end14

if.end:                                           ; preds = %entry
  br label %do.body5

do.body5:                                         ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  %sv_u6 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_rv7 = bitcast %union.anon* %sv_u6 to %struct.sv**
  store %struct.sv* null, %struct.sv** %svu_rv7, align 8
  br label %do.end8

do.end8:                                          ; preds = %do.body5
  %10 = load %struct.sv*, %struct.sv** %ref.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %11, -2049
  store i32 %and10, i32* %sv_flags9, align 4
  %12 = load %struct.sv*, %struct.sv** %target, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 1
  %13 = load i32, i32* %sv_refcnt, align 8
  %cmp11 = icmp ne i32 %13, 1
  br i1 %cmp11, label %if.then13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end8
  %14 = load i32, i32* %flags.addr, align 4
  %and12 = and i32 %14, 1
  %tobool = icmp ne i32 %and12, 0
  br i1 %tobool, label %if.then13, label %if.else

if.then13:                                        ; preds = %lor.lhs.false, %do.end8
  %15 = load %struct.sv*, %struct.sv** %target, align 8
  %16 = bitcast %struct.sv* %15 to i8*
  %17 = bitcast i8* %16 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %17)
  br label %if.end14

if.else:                                          ; preds = %lor.lhs.false
  %18 = load %struct.sv*, %struct.sv** %target, align 8
  %call = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %18)
  br label %if.end14

if.end14:                                         ; preds = %do.end, %if.else, %if.then13
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_sv_uncow(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %pvx = alloca i8*, align 8
  %len = alloca i64, align 8
  %cur = alloca i64, align 8
  %cowrefcnt = alloca i8, align 1
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %1 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  store i8* %add.ptr, i8** %pvx, align 8
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %5 = load i64, i64* %xpvlenu_len, align 8
  store i64 %5, i64* %len, align 8
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any1, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 2
  %9 = load i64, i64* %xpv_cur, align 8
  store i64 %9, i64* %cur, align 8
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %and = and i32 %11, -268435457
  store i32 %and, i32* %sv_flags, align 4
  %12 = load i64, i64* %len, align 8
  %tobool = icmp ne i64 %12, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 3
  %svu_pv3 = bitcast %union.anon* %sv_u2 to i8**
  %14 = load i8*, i8** %svu_pv3, align 8
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any4 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any4, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %xpv_len_u5 = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 3
  %xpvlenu_len6 = bitcast %union.anon.19* %xpv_len_u5 to i64*
  %18 = load i64, i64* %xpvlenu_len6, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %14, i64 %18
  %add.ptr8 = getelementptr inbounds i8, i8* %add.ptr7, i64 -1
  %19 = load i8, i8* %add.ptr8, align 1
  store i8 %19, i8* %cowrefcnt, align 1
  %20 = load i8, i8* %cowrefcnt, align 1
  %conv = zext i8 %20 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then
  %21 = load i8, i8* %cowrefcnt, align 1
  %dec = add i8 %21, -1
  store i8 %dec, i8* %cowrefcnt, align 1
  %22 = load i8, i8* %cowrefcnt, align 1
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u11 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 3
  %svu_pv12 = bitcast %union.anon* %sv_u11 to i8**
  %24 = load i8*, i8** %svu_pv12, align 8
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any13 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any13, align 8
  %27 = bitcast i8* %26 to %struct.xpv*
  %xpv_len_u14 = getelementptr inbounds %struct.xpv, %struct.xpv* %27, i32 0, i32 3
  %xpvlenu_len15 = bitcast %union.anon.19* %xpv_len_u14 to i64*
  %28 = load i64, i64* %xpvlenu_len15, align 8
  %add.ptr16 = getelementptr inbounds i8, i8* %24, i64 %28
  %add.ptr17 = getelementptr inbounds i8, i8* %add.ptr16, i64 -1
  store i8 %22, i8* %add.ptr17, align 1
  br label %copy_over

if.end:                                           ; preds = %if.then
  br label %if.end63

if.else:                                          ; preds = %entry
  br label %copy_over

copy_over:                                        ; preds = %if.else, %if.then10
  br label %do.body

do.body:                                          ; preds = %copy_over
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u18 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 3
  %svu_pv19 = bitcast %union.anon* %sv_u18 to i8**
  store i8* null, i8** %svu_pv19, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body20

do.body20:                                        ; preds = %do.end
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  %31 = load i8*, i8** %sv_any21, align 8
  %32 = bitcast i8* %31 to %struct.xpv*
  %xpv_cur22 = getelementptr inbounds %struct.xpv, %struct.xpv* %32, i32 0, i32 2
  store i64 0, i64* %xpv_cur22, align 8
  br label %do.end23

do.end23:                                         ; preds = %do.body20
  br label %do.body24

do.body24:                                        ; preds = %do.end23
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any25 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any25, align 8
  %35 = bitcast i8* %34 to %struct.xpv*
  %xpv_len_u26 = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 3
  %xpvlenu_len27 = bitcast %union.anon.19* %xpv_len_u26 to i64*
  store i64 0, i64* %xpvlenu_len27, align 8
  br label %do.end28

do.end28:                                         ; preds = %do.body24
  %36 = load i32, i32* %flags.addr, align 4
  %and29 = and i32 %36, 4
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %if.then31, label %if.else34

if.then31:                                        ; preds = %do.end28
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %38, -17409
  store i32 %and33, i32* %sv_flags32, align 4
  br label %if.end57

if.else34:                                        ; preds = %do.end28
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %40, 268435456
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else34
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any38, align 8
  %43 = bitcast i8* %42 to %struct.xpv*
  %xpv_len_u39 = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 3
  %xpvlenu_len40 = bitcast %union.anon.19* %xpv_len_u39 to i64*
  %44 = load i64, i64* %xpvlenu_len40, align 8
  %45 = load i64, i64* %cur, align 8
  %add = add i64 %45, 1
  %cmp41 = icmp ult i64 %44, %add
  br i1 %cmp41, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.else34
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %47 = load i64, i64* %cur, align 8
  %add43 = add i64 %47, 1
  %call = call i8* @Perl_sv_grow(%struct.sv* %46, i64 %add43)
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u44 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 3
  %svu_pv45 = bitcast %union.anon* %sv_u44 to i8**
  %49 = load i8*, i8** %svu_pv45, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %49, %cond.false ]
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u46 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 3
  %svu_pv47 = bitcast %union.anon* %sv_u46 to i8**
  %51 = load i8*, i8** %svu_pv47, align 8
  %52 = load i8*, i8** %pvx, align 8
  %53 = load i64, i64* %cur, align 8
  %mul = mul i64 %53, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %52, i64 %mul, i1 false)
  br label %do.body48

do.body48:                                        ; preds = %cond.end
  %54 = load i64, i64* %cur, align 8
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any49 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any49, align 8
  %57 = bitcast i8* %56 to %struct.xpv*
  %xpv_cur50 = getelementptr inbounds %struct.xpv, %struct.xpv* %57, i32 0, i32 2
  store i64 %54, i64* %xpv_cur50, align 8
  br label %do.end51

do.end51:                                         ; preds = %do.body48
  %58 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u52 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 3
  %svu_pv53 = bitcast %union.anon* %sv_u52 to i8**
  %59 = load i8*, i8** %svu_pv53, align 8
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any54 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any54, align 8
  %62 = bitcast i8* %61 to %struct.xpv*
  %xpv_cur55 = getelementptr inbounds %struct.xpv, %struct.xpv* %62, i32 0, i32 2
  %63 = load i64, i64* %xpv_cur55, align 8
  %add.ptr56 = getelementptr inbounds i8, i8* %59, i64 %63
  store i8 0, i8* %add.ptr56, align 1
  br label %if.end57

if.end57:                                         ; preds = %do.end51, %if.then31
  %64 = load i64, i64* %len, align 8
  %tobool58 = icmp ne i64 %64, 0
  br i1 %tobool58, label %if.then59, label %if.else60

if.then59:                                        ; preds = %if.end57
  br label %if.end62

if.else60:                                        ; preds = %if.end57
  %65 = load i8*, i8** %pvx, align 8
  %add.ptr61 = getelementptr inbounds i8, i8* %65, i64 sub (i64 0, i64 ptrtoint ([1 x i8]* getelementptr inbounds (%struct.hek, %struct.hek* null, i32 0, i32 2) to i64))
  %66 = bitcast i8* %add.ptr61 to %struct.hek*
  call void @Perl_unshare_hek(%struct.hek* %66)
  br label %if.end62

if.end62:                                         ; preds = %if.else60, %if.then59
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.end
  ret void
}

declare dso_local i8* @Perl_safesysrealloc(i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setiv(%struct.sv* %sv, i64 %i) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %i.addr = alloca i64, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %i, i64* %i.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 427886592
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %2, i32 4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 255
  switch i32 %and2, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb3
    i32 9, label %sw.bb4
    i32 11, label %sw.bb15
    i32 12, label %sw.bb15
    i32 13, label %sw.bb15
    i32 14, label %sw.bb15
    i32 15, label %sw.bb15
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %5, i32 1)
  br label %sw.epilog

sw.bb3:                                           ; preds = %if.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %6, i32 5)
  br label %sw.epilog

sw.bb4:                                           ; preds = %if.end
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %8, 49152
  %cmp = icmp eq i32 %and6, 32768
  br i1 %cmp, label %land.lhs.true, label %if.then13

land.lhs.true:                                    ; preds = %sw.bb4
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %10, 255
  %cmp9 = icmp eq i32 %and8, 9
  br i1 %cmp9, label %if.end14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %12, 255
  %cmp12 = icmp eq i32 %and11, 10
  br i1 %cmp12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %lor.lhs.false, %sw.bb4
  br label %sw.epilog

if.end14:                                         ; preds = %lor.lhs.false, %land.lhs.true
  br label %sw.bb15

sw.bb15:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end14
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_reftype(%struct.sv* %13, i32 0)
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp16 = icmp eq i32 %bf.cast, 380
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb15
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %call17 = call i8* @Perl_custom_op_get_field(%struct.op* %15, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call17, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %16 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false:                                       ; preds = %sw.bb15
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type18 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 4
  %bf.load19 = load i16, i16* %op_type18, align 8
  %bf.clear20 = and i16 %bf.load19, 511
  %bf.cast21 = zext i16 %bf.clear20 to i32
  %idxprom = zext i32 %bf.cast21 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %18 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %16, %cond.true ], [ %18, %cond.false ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0), i8* %call, i8* %cond)
  br label %sw.default

sw.default:                                       ; preds = %if.end, %cond.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.then13, %sw.bb3, %sw.bb
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %20, 1610547455
  store i32 %and23, i32* %sv_flags22, align 4
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %22, 33554432
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.epilog
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call27 = call i32 @Perl_sv_backoff(%struct.sv* %23)
  %tobool28 = icmp ne i32 %call27, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.epilog
  %24 = phi i1 [ false, %sw.epilog ], [ %tobool28, %land.rhs ]
  %land.ext = zext i1 %24 to i32
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags29, align 4
  %or = or i32 %26, 4352
  store i32 %or, i32* %sv_flags29, align 4
  br label %do.body

do.body:                                          ; preds = %land.end
  %27 = load i64, i64* %i.addr, align 8
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any, align 8
  %30 = bitcast i8* %29 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %30, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  store i64 %27, i64* %xivu_iv, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body30

do.body30:                                        ; preds = %do.end
  %31 = load i8, i8* @PL_tainting, align 1
  %tobool31 = trunc i8 %31 to i1
  br i1 %tobool31, label %cond.true32, label %cond.false33

cond.true32:                                      ; preds = %do.body30
  br i1 true, label %if.then34, label %if.end47

cond.false33:                                     ; preds = %do.body30
  br i1 false, label %if.then34, label %if.end47

if.then34:                                        ; preds = %cond.false33, %cond.true32
  %32 = load i8, i8* @PL_tainted, align 1
  %tobool35 = trunc i8 %32 to i1
  br i1 %tobool35, label %cond.true36, label %cond.false37

cond.true36:                                      ; preds = %if.then34
  br i1 true, label %if.then38, label %if.end46

cond.false37:                                     ; preds = %if.then34
  br i1 false, label %if.then38, label %if.end46

if.then38:                                        ; preds = %cond.false37, %cond.true36
  br label %do.body39

do.body39:                                        ; preds = %if.then38
  %33 = load i8, i8* @PL_tainting, align 1
  %tobool40 = trunc i8 %33 to i1
  br i1 %tobool40, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %do.body39
  br i1 true, label %if.then43, label %if.end44

cond.false42:                                     ; preds = %do.body39
  br i1 false, label %if.then43, label %if.end44

if.then43:                                        ; preds = %cond.false42, %cond.true41
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %34, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %cond.false42, %cond.true41
  br label %do.end45

do.end45:                                         ; preds = %if.end44
  br label %if.end46

if.end46:                                         ; preds = %do.end45, %cond.false37, %cond.true36
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %cond.false33, %cond.true32
  br label %do.end48

do.end48:                                         ; preds = %if.end47
  ret void
}

declare dso_local i8* @Perl_custom_op_get_field(%struct.op*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* %obj, i32 %how, i8* %name, i32 %namlen) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %obj.addr = alloca %struct.sv*, align 8
  %how.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %namlen.addr = alloca i32, align 4
  %vtable = alloca %struct.mgvtbl*, align 8
  %mg = alloca %struct.magic*, align 8
  %flags = alloca i32, align 4
  %vtable_index = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.sv* %obj, %struct.sv** %obj.addr, align 8
  store i32 %how, i32* %how.addr, align 4
  store i8* %name, i8** %name.addr, align 8
  store i32 %namlen, i32* %namlen.addr, align 4
  store i32 0, i32* %vtable_index, align 4
  %0 = load i32, i32* %how.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %how.addr, align 4
  %conv = zext i32 %1 to i64
  %cmp1 = icmp uge i64 %conv, 256
  br i1 %cmp1, label %if.then, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %how.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @PL_magic_data, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv4 = zext i8 %3 to i32
  store i32 %conv4, i32* %flags, align 4
  %4 = load i32, i32* %flags, align 4
  %and = and i32 %4, 63
  store i32 %and, i32* %vtable_index, align 4
  %cmp5 = icmp ugt i32 %and, 31
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  %5 = load i32, i32* %how.addr, align 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.24, i64 0, i64 0), i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false3
  %6 = load i32, i32* %vtable_index, align 4
  %cmp7 = icmp eq i32 %6, 31
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %7 = load i32, i32* %vtable_index, align 4
  %idx.ext = zext i32 %7 to i64
  %add.ptr = getelementptr inbounds %struct.mgvtbl, %struct.mgvtbl* getelementptr inbounds ([31 x %struct.mgvtbl], [31 x %struct.mgvtbl]* @PL_magic_vtables, i64 0, i64 0), i64 %idx.ext
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.mgvtbl* [ null, %cond.true ], [ %add.ptr, %cond.false ]
  store %struct.mgvtbl* %cond, %struct.mgvtbl** %vtable, align 8
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags, align 4
  %and9 = and i32 %9, 134283264
  %tobool = icmp ne i32 %and9, 0
  br i1 %tobool, label %if.then10, label %if.end19

if.then10:                                        ; preds = %cond.end
  %10 = load i32, i32* %how.addr, align 4
  %conv11 = trunc i32 %10 to i8
  %idxprom12 = zext i8 %conv11 to i64
  %arrayidx13 = getelementptr inbounds [256 x i8], [256 x i8]* @PL_magic_data, i64 0, i64 %idxprom12
  %11 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %11 to i32
  %and15 = and i32 %conv14, 64
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %if.then10
  call void @Perl_croak_no_modify()
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.then10
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %cond.end
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %13, 14680064
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then30, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %if.end19
  %14 = load i32, i32* %how.addr, align 4
  %cmp24 = icmp eq i32 %14, 116
  br i1 %cmp24, label %land.lhs.true, label %if.end40

land.lhs.true:                                    ; preds = %lor.lhs.false23
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %16, 255
  %cmp28 = icmp uge i32 %and27, 7
  br i1 %cmp28, label %if.then30, label %if.end40

if.then30:                                        ; preds = %land.lhs.true, %if.end19
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %19, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %20 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool31 = icmp ne %struct.magic* %20, null
  br i1 %tobool31, label %land.lhs.true32, label %if.end39

land.lhs.true32:                                  ; preds = %if.then30
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %22 = load i32, i32* %how.addr, align 4
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %21, i32 %22)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %tobool33 = icmp ne %struct.magic* %call, null
  br i1 %tobool33, label %if.then34, label %if.end39

if.then34:                                        ; preds = %land.lhs.true32
  %23 = load i32, i32* %how.addr, align 4
  %cmp35 = icmp eq i32 %23, 116
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.then34
  %24 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %24, i32 0, i32 5
  %25 = load i64, i64* %mg_len, align 8
  %or = or i64 %25, 1
  store i64 %or, i64* %mg_len, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %if.then34
  br label %sw.epilog

if.end39:                                         ; preds = %land.lhs.true32, %if.then30
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %land.lhs.true, %lor.lhs.false23
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %27, 14680064
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %land.lhs.true44, label %if.end70

land.lhs.true44:                                  ; preds = %if.end40
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %29, 536870912
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %land.lhs.true48, label %if.end70

land.lhs.true48:                                  ; preds = %land.lhs.true44
  %30 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %30, i32 0, i32 10
  %31 = load i32, i32* %cop_hints, align 8
  %add = add i32 %31, 0
  %and49 = and i32 %add, 8
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.end70, label %land.lhs.true51

land.lhs.true51:                                  ; preds = %land.lhs.true48
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call52 = call %struct.magic* @Perl_mg_find(%struct.sv* %32, i32 103)
  store %struct.magic* %call52, %struct.magic** %mg, align 8
  %tobool53 = icmp ne %struct.magic* %call52, null
  br i1 %tobool53, label %land.lhs.true54, label %if.end70

land.lhs.true54:                                  ; preds = %land.lhs.true51
  %33 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len55 = getelementptr inbounds %struct.magic, %struct.magic* %33, i32 0, i32 5
  %34 = load i64, i64* %mg_len55, align 8
  %cmp56 = icmp ne i64 %34, -1
  br i1 %cmp56, label %land.lhs.true58, label %if.end70

land.lhs.true58:                                  ; preds = %land.lhs.true54
  %35 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %35, i32 0, i32 4
  %36 = load i8, i8* %mg_flags, align 1
  %conv59 = zext i8 %36 to i32
  %and60 = and i32 %conv59, 64
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %if.then62, label %if.end70

if.then62:                                        ; preds = %land.lhs.true58
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %38 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len63 = getelementptr inbounds %struct.magic, %struct.magic* %38, i32 0, i32 5
  %39 = load i64, i64* %mg_len63, align 8
  %call64 = call i64 @Perl_sv_pos_b2u_flags(%struct.sv* %37, i64 %39, i32 32)
  %40 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len65 = getelementptr inbounds %struct.magic, %struct.magic* %40, i32 0, i32 5
  store i64 %call64, i64* %mg_len65, align 8
  %41 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags66 = getelementptr inbounds %struct.magic, %struct.magic* %41, i32 0, i32 4
  %42 = load i8, i8* %mg_flags66, align 1
  %conv67 = zext i8 %42 to i32
  %and68 = and i32 %conv67, -65
  %conv69 = trunc i32 %and68 to i8
  store i8 %conv69, i8* %mg_flags66, align 1
  br label %if.end70

if.end70:                                         ; preds = %if.then62, %land.lhs.true58, %land.lhs.true54, %land.lhs.true51, %land.lhs.true48, %land.lhs.true44, %if.end40
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %44 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %45 = load i32, i32* %how.addr, align 4
  %46 = load %struct.mgvtbl*, %struct.mgvtbl** %vtable, align 8
  %47 = load i8*, i8** %name.addr, align 8
  %48 = load i32, i32* %namlen.addr, align 4
  %call71 = call %struct.magic* @Perl_sv_magicext(%struct.sv* %43, %struct.sv* %44, i32 %45, %struct.mgvtbl* %46, i8* %47, i32 %48)
  store %struct.magic* %call71, %struct.magic** %mg, align 8
  %49 = load i32, i32* %how.addr, align 4
  switch i32 %49, label %sw.epilog [
    i32 116, label %sw.bb
    i32 126, label %sw.bb73
    i32 76, label %sw.bb73
  ]

sw.bb:                                            ; preds = %if.end70
  %50 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len72 = getelementptr inbounds %struct.magic, %struct.magic* %50, i32 0, i32 5
  store i64 1, i64* %mg_len72, align 8
  br label %sw.epilog

sw.bb73:                                          ; preds = %if.end70, %if.end70
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags74 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags74, align 4
  %or75 = or i32 %52, 8388608
  store i32 %or75, i32* %sv_flags74, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end38, %if.end70, %sw.bb73, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setiv_mg(%struct.sv* %sv, i64 %i) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %i.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %i, i64* %i.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i64, i64* %i.addr, align 8
  call void @Perl_sv_setiv(%struct.sv* %0, i64 %1)
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

declare dso_local i32 @Perl_mg_set(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setuv(%struct.sv* %sv, i64 %u) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %u.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %u, i64* %u.addr, align 8
  %0 = load i64, i64* %u.addr, align 8
  %cmp = icmp ule i64 %0, 9223372036854775807
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %2 = load i64, i64* %u.addr, align 8
  call void @Perl_sv_setiv(%struct.sv* %1, i64 %2)
  br label %do.end

if.end:                                           ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setiv(%struct.sv* %3, i64 0)
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %or = or i32 %5, -2147483648
  store i32 %or, i32* %sv_flags, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %6 = load i64, i64* %u.addr, align 8
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %9, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  store i64 %6, i64* %xivu_uv, align 8
  br label %do.end

do.end:                                           ; preds = %if.then, %do.body
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setuv_mg(%struct.sv* %sv, i64 %u) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %u.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %u, i64* %u.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i64, i64* %u.addr, align 8
  call void @Perl_sv_setuv(%struct.sv* %0, i64 %1)
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setnv(%struct.sv* %sv, double %num) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %num.addr = alloca double, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store double %num, double* %num.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 427886592
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %2, i32 4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 255
  switch i32 %and2, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 3, label %sw.bb3
    i32 5, label %sw.bb3
    i32 9, label %sw.bb4
    i32 11, label %sw.bb15
    i32 12, label %sw.bb15
    i32 13, label %sw.bb15
    i32 14, label %sw.bb15
    i32 15, label %sw.bb15
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %5, i32 2)
  br label %sw.epilog

sw.bb3:                                           ; preds = %if.end, %if.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %6, i32 6)
  br label %sw.epilog

sw.bb4:                                           ; preds = %if.end
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %8, 49152
  %cmp = icmp eq i32 %and6, 32768
  br i1 %cmp, label %land.lhs.true, label %if.then13

land.lhs.true:                                    ; preds = %sw.bb4
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %10, 255
  %cmp9 = icmp eq i32 %and8, 9
  br i1 %cmp9, label %if.end14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %12, 255
  %cmp12 = icmp eq i32 %and11, 10
  br i1 %cmp12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %lor.lhs.false, %sw.bb4
  br label %sw.epilog

if.end14:                                         ; preds = %lor.lhs.false, %land.lhs.true
  br label %sw.bb15

sw.bb15:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end14
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_reftype(%struct.sv* %13, i32 0)
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp16 = icmp eq i32 %bf.cast, 380
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb15
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %call17 = call i8* @Perl_custom_op_get_field(%struct.op* %15, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call17, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %16 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false:                                       ; preds = %sw.bb15
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type18 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 4
  %bf.load19 = load i16, i16* %op_type18, align 8
  %bf.clear20 = and i16 %bf.load19, 511
  %bf.cast21 = zext i16 %bf.clear20 to i32
  %idxprom = zext i32 %bf.cast21 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %18 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %16, %cond.true ], [ %18, %cond.false ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i8* %call, i8* %cond)
  br label %sw.default

sw.default:                                       ; preds = %if.end, %cond.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.then13, %sw.bb3, %sw.bb
  br label %do.body

do.body:                                          ; preds = %sw.epilog
  %19 = load double, double* %num.addr, align 8
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any, align 8
  %22 = bitcast i8* %21 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %22, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  store double %19, double* %xnv_nv, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %24, 1610547455
  store i32 %and23, i32* %sv_flags22, align 4
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %26, 33554432
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.end
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call27 = call i32 @Perl_sv_backoff(%struct.sv* %27)
  %tobool28 = icmp ne i32 %call27, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.end
  %28 = phi i1 [ false, %do.end ], [ %tobool28, %land.rhs ]
  %land.ext = zext i1 %28 to i32
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags29, align 4
  %or = or i32 %30, 8704
  store i32 %or, i32* %sv_flags29, align 4
  br label %do.body30

do.body30:                                        ; preds = %land.end
  %31 = load i8, i8* @PL_tainting, align 1
  %tobool31 = trunc i8 %31 to i1
  br i1 %tobool31, label %cond.true32, label %cond.false33

cond.true32:                                      ; preds = %do.body30
  br i1 true, label %if.then34, label %if.end47

cond.false33:                                     ; preds = %do.body30
  br i1 false, label %if.then34, label %if.end47

if.then34:                                        ; preds = %cond.false33, %cond.true32
  %32 = load i8, i8* @PL_tainted, align 1
  %tobool35 = trunc i8 %32 to i1
  br i1 %tobool35, label %cond.true36, label %cond.false37

cond.true36:                                      ; preds = %if.then34
  br i1 true, label %if.then38, label %if.end46

cond.false37:                                     ; preds = %if.then34
  br i1 false, label %if.then38, label %if.end46

if.then38:                                        ; preds = %cond.false37, %cond.true36
  br label %do.body39

do.body39:                                        ; preds = %if.then38
  %33 = load i8, i8* @PL_tainting, align 1
  %tobool40 = trunc i8 %33 to i1
  br i1 %tobool40, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %do.body39
  br i1 true, label %if.then43, label %if.end44

cond.false42:                                     ; preds = %do.body39
  br i1 false, label %if.then43, label %if.end44

if.then43:                                        ; preds = %cond.false42, %cond.true41
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %34, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %cond.false42, %cond.true41
  br label %do.end45

do.end45:                                         ; preds = %if.end44
  br label %if.end46

if.end46:                                         ; preds = %do.end45, %cond.false37, %cond.true36
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %cond.false33, %cond.true32
  br label %do.end48

do.end48:                                         ; preds = %if.end47
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setnv_mg(%struct.sv* %sv, double %num) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %num.addr = alloca double, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store double %num, double* %num.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load double, double* %num.addr, align 8
  call void @Perl_sv_setnv(%struct.sv* %0, double %1)
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_looks_like_number(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  %sbegin = alloca i8*, align 8
  %len = alloca i64, align 8
  %numtype = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 1024
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 16384
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %5, 2098176
  %cmp = icmp eq i32 %and5, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 2
  %9 = load i64, i64* %xpv_cur, align 8
  store i64 %9, i64* %len, align 8
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %11 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 0
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %12, i64* %len, i32 32)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %sbegin, align 8
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %14, 13056
  store i32 %and7, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.end
  %15 = load i8*, i8** %sbegin, align 8
  %16 = load i64, i64* %len, align 8
  %call8 = call i32 @Perl_grok_number(i8* %15, i64 %16, i64* null)
  store i32 %call8, i32* %numtype, align 4
  %17 = load i32, i32* %numtype, align 4
  %and9 = and i32 %17, 64
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %if.end
  br label %cond.end13

cond.false12:                                     ; preds = %if.end
  %18 = load i32, i32* %numtype, align 4
  br label %cond.end13

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond14 = phi i32 [ 0, %cond.true11 ], [ %18, %cond.false12 ]
  store i32 %cond14, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end13, %if.else
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %lp, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %pv = alloca i8*, align 8
  %len = alloca i64, align 8
  %retval81 = alloca i8*, align 8
  %buffer = alloca i8*, align 8
  %referent = alloca %struct.sv*, align 8
  %re = alloca %struct.p5rx*, align 8
  %typestr = alloca i8*, align 8
  %typelen = alloca i64, align 8
  %addr = alloca i64, align 8
  %stashname = alloca i8*, align 8
  %stashnamelen = alloca i64, align 8
  %buffer_end = alloca i8*, align 8
  %name = alloca %struct.hek*, align 8
  %isUIOK = alloca i32, align 4
  %buf = alloca [22 x i8], align 16
  %ebuf = alloca i8*, align 8
  %ptr = alloca i8*, align 8
  %len262 = alloca i64, align 8
  %len324 = alloca i64, align 8
  %size = alloca i64, align 8
  %saved_errno = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %buffer390 = alloca %struct.sv*, align 8
  %len451 = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %flags.addr, align 4
  %and1 = and i32 %2, 2
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 2048
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then6, label %if.end229

if.then6:                                         ; preds = %if.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %7, 2048
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end80

land.lhs.true10:                                  ; preds = %if.then6
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %9 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %10, 1048576
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %land.lhs.true14, label %if.end80

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u15 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 3
  %svu_rv16 = bitcast %union.anon* %sv_u15 to %struct.sv**
  %12 = load %struct.sv*, %struct.sv** %svu_rv16, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any, align 8
  %14 = bitcast i8* %13 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %14, i32 0, i32 0
  %15 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags17 = getelementptr inbounds %struct.hv, %struct.hv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %16, 268435456
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.then20, label %if.end80

if.then20:                                        ; preds = %land.lhs.true14
  %17 = load i32, i32* %flags.addr, align 4
  %and21 = and i32 %17, 8192
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.then20
  store i8* null, i8** %retval, align 8
  br label %return

if.end24:                                         ; preds = %if.then20
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call25 = call %struct.sv* @Perl_amagic_call(%struct.sv* %18, %struct.sv* @PL_sv_undef, i32 10, i32 9)
  store %struct.sv* %call25, %struct.sv** %tmpstr, align 8
  %19 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %tobool26 = icmp ne %struct.sv* %19, null
  br i1 %tobool26, label %land.lhs.true27, label %cond.false

land.lhs.true27:                                  ; preds = %if.end24
  %20 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %21, 14680064
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %land.lhs.true31, label %cond.false

land.lhs.true31:                                  ; preds = %land.lhs.true27
  %22 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call32 = call zeroext i1 @Perl_sv_tainted(%struct.sv* %22)
  br i1 %call32, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true31
  br i1 true, label %if.then33, label %if.end34

cond.false:                                       ; preds = %land.lhs.true31, %land.lhs.true27, %if.end24
  br i1 false, label %if.then33, label %if.end34

if.then33:                                        ; preds = %cond.false, %cond.true
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end34

if.end34:                                         ; preds = %if.then33, %cond.false, %cond.true
  %23 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %tobool35 = icmp ne %struct.sv* %23, null
  br i1 %tobool35, label %land.lhs.true36, label %if.end79

land.lhs.true36:                                  ; preds = %if.end34
  %24 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %25, 2048
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %lor.lhs.false, label %if.then44

lor.lhs.false:                                    ; preds = %land.lhs.true36
  %26 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_u40 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 3
  %svu_rv41 = bitcast %union.anon* %sv_u40 to %struct.sv**
  %27 = load %struct.sv*, %struct.sv** %svu_rv41, align 8
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u42 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 3
  %svu_rv43 = bitcast %union.anon* %sv_u42 to %struct.sv**
  %29 = load %struct.sv*, %struct.sv** %svu_rv43, align 8
  %cmp = icmp ne %struct.sv* %27, %29
  br i1 %cmp, label %if.then44, label %if.end79

if.then44:                                        ; preds = %lor.lhs.false, %land.lhs.true36
  %30 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %31, 1024
  %cmp47 = icmp eq i32 %and46, 1024
  br i1 %cmp47, label %if.then48, label %if.else67

if.then48:                                        ; preds = %if.then44
  %32 = load i32, i32* %flags.addr, align 4
  %and49 = and i32 %32, 32
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.then51, label %if.else

if.then51:                                        ; preds = %if.then48
  %33 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_u52 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u52 to i8**
  %34 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %34, i64 0
  store i8* %add.ptr, i8** %pv, align 8
  br label %if.end62

if.else:                                          ; preds = %if.then48
  %35 = load i32, i32* %flags.addr, align 4
  %and53 = and i32 %35, 64
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %cond.true55, label %cond.false59

cond.true55:                                      ; preds = %if.else
  %36 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_u56 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 3
  %svu_pv57 = bitcast %union.anon* %sv_u56 to i8**
  %37 = load i8*, i8** %svu_pv57, align 8
  %add.ptr58 = getelementptr inbounds i8, i8* %37, i64 0
  br label %cond.end

cond.false59:                                     ; preds = %if.else
  %38 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_u60 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 3
  %svu_pv61 = bitcast %union.anon* %sv_u60 to i8**
  %39 = load i8*, i8** %svu_pv61, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false59, %cond.true55
  %cond = phi i8* [ %add.ptr58, %cond.true55 ], [ %39, %cond.false59 ]
  store i8* %cond, i8** %pv, align 8
  br label %if.end62

if.end62:                                         ; preds = %cond.end, %if.then51
  %40 = load i64*, i64** %lp.addr, align 8
  %tobool63 = icmp ne i64* %40, null
  br i1 %tobool63, label %if.then64, label %if.end66

if.then64:                                        ; preds = %if.end62
  %41 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any65 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any65, align 8
  %43 = bitcast i8* %42 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 2
  %44 = load i64, i64* %xpv_cur, align 8
  %45 = load i64*, i64** %lp.addr, align 8
  store i64 %44, i64* %45, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.then64, %if.end62
  br label %if.end69

if.else67:                                        ; preds = %if.then44
  %46 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %47 = load i64*, i64** %lp.addr, align 8
  %48 = load i32, i32* %flags.addr, align 4
  %call68 = call i8* @Perl_sv_2pv_flags(%struct.sv* %46, i64* %47, i32 %48)
  store i8* %call68, i8** %pv, align 8
  br label %if.end69

if.end69:                                         ; preds = %if.else67, %if.end66
  %49 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags70 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags70, align 4
  %and71 = and i32 %50, 536870912
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %if.then73, label %if.else75

if.then73:                                        ; preds = %if.end69
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags74 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags74, align 4
  %or = or i32 %52, 536870912
  store i32 %or, i32* %sv_flags74, align 4
  br label %if.end78

if.else75:                                        ; preds = %if.end69
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags76 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags76, align 4
  %and77 = and i32 %54, -536870913
  store i32 %and77, i32* %sv_flags76, align 4
  br label %if.end78

if.end78:                                         ; preds = %if.else75, %if.then73
  %55 = load i8*, i8** %pv, align 8
  store i8* %55, i8** %retval, align 8
  br label %return

if.end79:                                         ; preds = %lor.lhs.false, %if.end34
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %land.lhs.true14, %land.lhs.true10, %if.then6
  %56 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u82 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 3
  %svu_rv83 = bitcast %union.anon* %sv_u82 to %struct.sv**
  %57 = load %struct.sv*, %struct.sv** %svu_rv83, align 8
  store %struct.sv* %57, %struct.sv** %referent, align 8
  %58 = load %struct.sv*, %struct.sv** %referent, align 8
  %tobool84 = icmp ne %struct.sv* %58, null
  br i1 %tobool84, label %if.else87, label %if.then85

if.then85:                                        ; preds = %if.end80
  store i64 7, i64* %len, align 8
  %59 = load i64, i64* %len, align 8
  %conv = trunc i64 %59 to i32
  %call86 = call i8* @Perl_savepvn(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i32 %conv)
  store i8* %call86, i8** %buffer, align 8
  store i8* %call86, i8** %retval81, align 8
  br label %if.end225

if.else87:                                        ; preds = %if.end80
  %60 = load %struct.sv*, %struct.sv** %referent, align 8
  %sv_flags88 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags88, align 4
  %and89 = and i32 %61, 255
  %cmp90 = icmp eq i32 %and89, 8
  br i1 %cmp90, label %land.lhs.true92, label %if.else115

land.lhs.true92:                                  ; preds = %if.else87
  %62 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %62, i32 0, i32 10
  %63 = load i32, i32* %cop_hints, align 8
  %and93 = and i32 %63, 16777216
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %lor.lhs.false95, label %if.then98

lor.lhs.false95:                                  ; preds = %land.lhs.true92
  %call96 = call zeroext i1 @Perl_amagic_is_enabled(i32 10)
  br i1 %call96, label %if.then98, label %if.else115

if.then98:                                        ; preds = %lor.lhs.false95, %land.lhs.true92
  %64 = load %struct.sv*, %struct.sv** %referent, align 8
  %65 = bitcast %struct.sv* %64 to i8*
  %66 = bitcast i8* %65 to %struct.p5rx*
  store %struct.p5rx* %66, %struct.p5rx** %re, align 8
  %67 = load %struct.p5rx*, %struct.p5rx** %re, align 8
  %sv_flags99 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags99, align 4
  %and100 = and i32 %68, 536870912
  %tobool101 = icmp ne i32 %and100, 0
  br i1 %tobool101, label %if.then102, label %if.else105

if.then102:                                       ; preds = %if.then98
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags103 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags103, align 4
  %or104 = or i32 %70, 536870912
  store i32 %or104, i32* %sv_flags103, align 4
  br label %if.end108

if.else105:                                       ; preds = %if.then98
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags106 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags106, align 4
  %and107 = and i32 %72, -536870913
  store i32 %and107, i32* %sv_flags106, align 4
  br label %if.end108

if.end108:                                        ; preds = %if.else105, %if.then102
  %73 = load i64*, i64** %lp.addr, align 8
  %tobool109 = icmp ne i64* %73, null
  br i1 %tobool109, label %if.then110, label %if.end113

if.then110:                                       ; preds = %if.end108
  %74 = load %struct.p5rx*, %struct.p5rx** %re, align 8
  %sv_any111 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %74, i32 0, i32 0
  %75 = load %struct.regexp*, %struct.regexp** %sv_any111, align 8
  %76 = bitcast %struct.regexp* %75 to %struct.xpv*
  %xpv_cur112 = getelementptr inbounds %struct.xpv, %struct.xpv* %76, i32 0, i32 2
  %77 = load i64, i64* %xpv_cur112, align 8
  %78 = load i64*, i64** %lp.addr, align 8
  store i64 %77, i64* %78, align 8
  br label %if.end113

if.end113:                                        ; preds = %if.then110, %if.end108
  %79 = load %struct.p5rx*, %struct.p5rx** %re, align 8
  %call114 = call %struct.regexp* @S_ReANY(%struct.p5rx* %79)
  %xpv_len_u = getelementptr inbounds %struct.regexp, %struct.regexp* %call114, i32 0, i32 3
  %xpvlenu_pv = bitcast %union.anon.14* %xpv_len_u to i8**
  %80 = load i8*, i8** %xpvlenu_pv, align 8
  store i8* %80, i8** %retval, align 8
  br label %return

if.else115:                                       ; preds = %lor.lhs.false95, %if.else87
  %81 = load %struct.sv*, %struct.sv** %referent, align 8
  %call116 = call i8* @Perl_sv_reftype(%struct.sv* %81, i32 0)
  store i8* %call116, i8** %typestr, align 8
  %82 = load i8*, i8** %typestr, align 8
  %call117 = call i64 @strlen(i8* %82) #8
  store i64 %call117, i64* %typelen, align 8
  %83 = load %struct.sv*, %struct.sv** %referent, align 8
  %84 = ptrtoint %struct.sv* %83 to i64
  store i64 %84, i64* %addr, align 8
  store i8* null, i8** %stashname, align 8
  store i64 0, i64* %stashnamelen, align 8
  %85 = load %struct.sv*, %struct.sv** %referent, align 8
  %sv_flags118 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags118, align 4
  %and119 = and i32 %86, 1048576
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %if.then121, label %if.else202

if.then121:                                       ; preds = %if.else115
  %87 = load %struct.sv*, %struct.sv** %referent, align 8
  %sv_any122 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 0
  %88 = load i8*, i8** %sv_any122, align 8
  %89 = bitcast i8* %88 to %struct.xpvmg*
  %xmg_stash123 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %89, i32 0, i32 0
  %90 = load %struct.hv*, %struct.hv** %xmg_stash123, align 8
  %sv_flags124 = getelementptr inbounds %struct.hv, %struct.hv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags124, align 4
  %and125 = and i32 %91, 33554432
  %tobool126 = icmp ne i32 %and125, 0
  br i1 %tobool126, label %land.lhs.true127, label %cond.false174

land.lhs.true127:                                 ; preds = %if.then121
  %92 = load %struct.sv*, %struct.sv** %referent, align 8
  %sv_any128 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 0
  %93 = load i8*, i8** %sv_any128, align 8
  %94 = bitcast i8* %93 to %struct.xpvmg*
  %xmg_stash129 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %94, i32 0, i32 0
  %95 = load %struct.hv*, %struct.hv** %xmg_stash129, align 8
  %sv_u130 = getelementptr inbounds %struct.hv, %struct.hv* %95, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u130 to %struct.he***
  %96 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %97 = load %struct.sv*, %struct.sv** %referent, align 8
  %sv_any131 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 0
  %98 = load i8*, i8** %sv_any131, align 8
  %99 = bitcast i8* %98 to %struct.xpvmg*
  %xmg_stash132 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %99, i32 0, i32 0
  %100 = load %struct.hv*, %struct.hv** %xmg_stash132, align 8
  %sv_any133 = getelementptr inbounds %struct.hv, %struct.hv* %100, i32 0, i32 0
  %101 = load %struct.xpvhv*, %struct.xpvhv** %sv_any133, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %101, i32 0, i32 3
  %102 = load i64, i64* %xhv_max, align 8
  %add = add i64 %102, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %96, i64 %add
  %103 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %103, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %104 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool134 = icmp ne %struct.hek* %104, null
  br i1 %tobool134, label %cond.true135, label %cond.false174

cond.true135:                                     ; preds = %land.lhs.true127
  %105 = load %struct.sv*, %struct.sv** %referent, align 8
  %sv_any136 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 0
  %106 = load i8*, i8** %sv_any136, align 8
  %107 = bitcast i8* %106 to %struct.xpvmg*
  %xmg_stash137 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %107, i32 0, i32 0
  %108 = load %struct.hv*, %struct.hv** %xmg_stash137, align 8
  %sv_u138 = getelementptr inbounds %struct.hv, %struct.hv* %108, i32 0, i32 3
  %svu_hash139 = bitcast %union.anon.4* %sv_u138 to %struct.he***
  %109 = load %struct.he**, %struct.he*** %svu_hash139, align 8
  %110 = load %struct.sv*, %struct.sv** %referent, align 8
  %sv_any140 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 0
  %111 = load i8*, i8** %sv_any140, align 8
  %112 = bitcast i8* %111 to %struct.xpvmg*
  %xmg_stash141 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %112, i32 0, i32 0
  %113 = load %struct.hv*, %struct.hv** %xmg_stash141, align 8
  %sv_any142 = getelementptr inbounds %struct.hv, %struct.hv* %113, i32 0, i32 0
  %114 = load %struct.xpvhv*, %struct.xpvhv** %sv_any142, align 8
  %xhv_max143 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %114, i32 0, i32 3
  %115 = load i64, i64* %xhv_max143, align 8
  %add144 = add i64 %115, 1
  %arrayidx145 = getelementptr inbounds %struct.he*, %struct.he** %109, i64 %add144
  %116 = bitcast %struct.he** %arrayidx145 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %116, i32 0, i32 4
  %117 = load i32, i32* %xhv_name_count, align 4
  %tobool146 = icmp ne i32 %117, 0
  br i1 %tobool146, label %cond.true147, label %cond.false159

cond.true147:                                     ; preds = %cond.true135
  %118 = load %struct.sv*, %struct.sv** %referent, align 8
  %sv_any148 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 0
  %119 = load i8*, i8** %sv_any148, align 8
  %120 = bitcast i8* %119 to %struct.xpvmg*
  %xmg_stash149 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %120, i32 0, i32 0
  %121 = load %struct.hv*, %struct.hv** %xmg_stash149, align 8
  %sv_u150 = getelementptr inbounds %struct.hv, %struct.hv* %121, i32 0, i32 3
  %svu_hash151 = bitcast %union.anon.4* %sv_u150 to %struct.he***
  %122 = load %struct.he**, %struct.he*** %svu_hash151, align 8
  %123 = load %struct.sv*, %struct.sv** %referent, align 8
  %sv_any152 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any152, align 8
  %125 = bitcast i8* %124 to %struct.xpvmg*
  %xmg_stash153 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %125, i32 0, i32 0
  %126 = load %struct.hv*, %struct.hv** %xmg_stash153, align 8
  %sv_any154 = getelementptr inbounds %struct.hv, %struct.hv* %126, i32 0, i32 0
  %127 = load %struct.xpvhv*, %struct.xpvhv** %sv_any154, align 8
  %xhv_max155 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %127, i32 0, i32 3
  %128 = load i64, i64* %xhv_max155, align 8
  %add156 = add i64 %128, 1
  %arrayidx157 = getelementptr inbounds %struct.he*, %struct.he** %122, i64 %add156
  %129 = bitcast %struct.he** %arrayidx157 to %struct.xpvhv_aux*
  %xhv_name_u158 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %129, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u158 to %struct.hek***
  %130 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %131 = load %struct.hek*, %struct.hek** %130, align 8
  br label %cond.end172

cond.false159:                                    ; preds = %cond.true135
  %132 = load %struct.sv*, %struct.sv** %referent, align 8
  %sv_any160 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 0
  %133 = load i8*, i8** %sv_any160, align 8
  %134 = bitcast i8* %133 to %struct.xpvmg*
  %xmg_stash161 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %134, i32 0, i32 0
  %135 = load %struct.hv*, %struct.hv** %xmg_stash161, align 8
  %sv_u162 = getelementptr inbounds %struct.hv, %struct.hv* %135, i32 0, i32 3
  %svu_hash163 = bitcast %union.anon.4* %sv_u162 to %struct.he***
  %136 = load %struct.he**, %struct.he*** %svu_hash163, align 8
  %137 = load %struct.sv*, %struct.sv** %referent, align 8
  %sv_any164 = getelementptr inbounds %struct.sv, %struct.sv* %137, i32 0, i32 0
  %138 = load i8*, i8** %sv_any164, align 8
  %139 = bitcast i8* %138 to %struct.xpvmg*
  %xmg_stash165 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %139, i32 0, i32 0
  %140 = load %struct.hv*, %struct.hv** %xmg_stash165, align 8
  %sv_any166 = getelementptr inbounds %struct.hv, %struct.hv* %140, i32 0, i32 0
  %141 = load %struct.xpvhv*, %struct.xpvhv** %sv_any166, align 8
  %xhv_max167 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %141, i32 0, i32 3
  %142 = load i64, i64* %xhv_max167, align 8
  %add168 = add i64 %142, 1
  %arrayidx169 = getelementptr inbounds %struct.he*, %struct.he** %136, i64 %add168
  %143 = bitcast %struct.he** %arrayidx169 to %struct.xpvhv_aux*
  %xhv_name_u170 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %143, i32 0, i32 0
  %xhvnameu_name171 = bitcast %union._xhvnameu* %xhv_name_u170 to %struct.hek**
  %144 = load %struct.hek*, %struct.hek** %xhvnameu_name171, align 8
  br label %cond.end172

cond.end172:                                      ; preds = %cond.false159, %cond.true147
  %cond173 = phi %struct.hek* [ %131, %cond.true147 ], [ %144, %cond.false159 ]
  br label %cond.end175

cond.false174:                                    ; preds = %land.lhs.true127, %if.then121
  br label %cond.end175

cond.end175:                                      ; preds = %cond.false174, %cond.end172
  %cond176 = phi %struct.hek* [ %cond173, %cond.end172 ], [ null, %cond.false174 ]
  store %struct.hek* %cond176, %struct.hek** %name, align 8
  %145 = load %struct.hek*, %struct.hek** %name, align 8
  %tobool177 = icmp ne %struct.hek* %145, null
  br i1 %tobool177, label %if.then178, label %if.else195

if.then178:                                       ; preds = %cond.end175
  %146 = load %struct.hek*, %struct.hek** %name, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %146, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  store i8* %arraydecay, i8** %stashname, align 8
  %147 = load %struct.hek*, %struct.hek** %name, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %147, i32 0, i32 1
  %148 = load i32, i32* %hek_len, align 4
  %conv179 = sext i32 %148 to i64
  store i64 %conv179, i64* %stashnamelen, align 8
  %149 = load %struct.hek*, %struct.hek** %name, align 8
  %hek_key180 = getelementptr inbounds %struct.hek, %struct.hek* %149, i32 0, i32 2
  %arraydecay181 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key180, i64 0, i64 0
  %150 = load %struct.hek*, %struct.hek** %name, align 8
  %hek_len182 = getelementptr inbounds %struct.hek, %struct.hek* %150, i32 0, i32 1
  %151 = load i32, i32* %hek_len182, align 4
  %idx.ext = sext i32 %151 to i64
  %add.ptr183 = getelementptr inbounds i8, i8* %arraydecay181, i64 %idx.ext
  %add.ptr184 = getelementptr inbounds i8, i8* %add.ptr183, i64 1
  %152 = load i8, i8* %add.ptr184, align 1
  %conv185 = zext i8 %152 to i32
  %and186 = and i32 %conv185, 1
  %tobool187 = icmp ne i32 %and186, 0
  br i1 %tobool187, label %if.then188, label %if.else191

if.then188:                                       ; preds = %if.then178
  %153 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags189 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 2
  %154 = load i32, i32* %sv_flags189, align 4
  %or190 = or i32 %154, 536870912
  store i32 %or190, i32* %sv_flags189, align 4
  br label %if.end194

if.else191:                                       ; preds = %if.then178
  %155 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags192 = getelementptr inbounds %struct.sv, %struct.sv* %155, i32 0, i32 2
  %156 = load i32, i32* %sv_flags192, align 4
  %and193 = and i32 %156, -536870913
  store i32 %and193, i32* %sv_flags192, align 4
  br label %if.end194

if.end194:                                        ; preds = %if.else191, %if.then188
  br label %if.end196

if.else195:                                       ; preds = %cond.end175
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i8** %stashname, align 8
  store i64 8, i64* %stashnamelen, align 8
  br label %if.end196

if.end196:                                        ; preds = %if.else195, %if.end194
  %157 = load i64, i64* %stashnamelen, align 8
  %add197 = add i64 %157, 1
  %158 = load i64, i64* %typelen, align 8
  %add198 = add i64 %add197, %158
  %add199 = add i64 %add198, 3
  %add200 = add i64 %add199, 16
  %add201 = add i64 %add200, 2
  store i64 %add201, i64* %len, align 8
  br label %if.end206

if.else202:                                       ; preds = %if.else115
  %159 = load i64, i64* %typelen, align 8
  %add203 = add i64 %159, 3
  %add204 = add i64 %add203, 16
  %add205 = add i64 %add204, 2
  store i64 %add205, i64* %len, align 8
  br label %if.end206

if.end206:                                        ; preds = %if.else202, %if.end196
  %160 = load i64, i64* %len, align 8
  %mul = mul i64 %160, 1
  %call207 = call i8* @Perl_safesysmalloc(i64 %mul)
  store i8* %call207, i8** %buffer, align 8
  %161 = load i8*, i8** %buffer, align 8
  %162 = load i64, i64* %len, align 8
  %add.ptr208 = getelementptr inbounds i8, i8* %161, i64 %162
  store i8* %add.ptr208, i8** %retval81, align 8
  store i8* %add.ptr208, i8** %buffer_end, align 8
  %163 = load i8*, i8** %retval81, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %163, i32 -1
  store i8* %incdec.ptr, i8** %retval81, align 8
  store i8 0, i8* %incdec.ptr, align 1
  %164 = load i8*, i8** %retval81, align 8
  %incdec.ptr209 = getelementptr inbounds i8, i8* %164, i32 -1
  store i8* %incdec.ptr209, i8** %retval81, align 8
  store i8 41, i8* %incdec.ptr209, align 1
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end206
  %165 = load i64, i64* %addr, align 8
  %and210 = and i64 %165, 15
  %arrayidx211 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_hexdigit, i64 0, i64 %and210
  %166 = load i8, i8* %arrayidx211, align 1
  %167 = load i8*, i8** %retval81, align 8
  %incdec.ptr212 = getelementptr inbounds i8, i8* %167, i32 -1
  store i8* %incdec.ptr212, i8** %retval81, align 8
  store i8 %166, i8* %incdec.ptr212, align 1
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %168 = load i64, i64* %addr, align 8
  %shr = lshr i64 %168, 4
  store i64 %shr, i64* %addr, align 8
  %tobool213 = icmp ne i64 %shr, 0
  br i1 %tobool213, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %169 = load i8*, i8** %retval81, align 8
  %incdec.ptr214 = getelementptr inbounds i8, i8* %169, i32 -1
  store i8* %incdec.ptr214, i8** %retval81, align 8
  store i8 120, i8* %incdec.ptr214, align 1
  %170 = load i8*, i8** %retval81, align 8
  %incdec.ptr215 = getelementptr inbounds i8, i8* %170, i32 -1
  store i8* %incdec.ptr215, i8** %retval81, align 8
  store i8 48, i8* %incdec.ptr215, align 1
  %171 = load i8*, i8** %retval81, align 8
  %incdec.ptr216 = getelementptr inbounds i8, i8* %171, i32 -1
  store i8* %incdec.ptr216, i8** %retval81, align 8
  store i8 40, i8* %incdec.ptr216, align 1
  %172 = load i64, i64* %typelen, align 8
  %173 = load i8*, i8** %retval81, align 8
  %idx.neg = sub i64 0, %172
  %add.ptr217 = getelementptr inbounds i8, i8* %173, i64 %idx.neg
  store i8* %add.ptr217, i8** %retval81, align 8
  %174 = load i8*, i8** %retval81, align 8
  %175 = load i8*, i8** %typestr, align 8
  %176 = load i64, i64* %typelen, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* align 1 %175, i64 %176, i1 false)
  %177 = load i8*, i8** %stashname, align 8
  %tobool218 = icmp ne i8* %177, null
  br i1 %tobool218, label %if.then219, label %if.end223

if.then219:                                       ; preds = %do.end
  %178 = load i8*, i8** %retval81, align 8
  %incdec.ptr220 = getelementptr inbounds i8, i8* %178, i32 -1
  store i8* %incdec.ptr220, i8** %retval81, align 8
  store i8 61, i8* %incdec.ptr220, align 1
  %179 = load i64, i64* %stashnamelen, align 8
  %180 = load i8*, i8** %retval81, align 8
  %idx.neg221 = sub i64 0, %179
  %add.ptr222 = getelementptr inbounds i8, i8* %180, i64 %idx.neg221
  store i8* %add.ptr222, i8** %retval81, align 8
  %181 = load i8*, i8** %retval81, align 8
  %182 = load i8*, i8** %stashname, align 8
  %183 = load i64, i64* %stashnamelen, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %181, i8* align 1 %182, i64 %183, i1 false)
  br label %if.end223

if.end223:                                        ; preds = %if.then219, %do.end
  %184 = load i8*, i8** %buffer_end, align 8
  %185 = load i8*, i8** %retval81, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %184 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %185 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %sub.ptr.sub, 1
  store i64 %sub, i64* %len, align 8
  br label %if.end224

if.end224:                                        ; preds = %if.end223
  br label %if.end225

if.end225:                                        ; preds = %if.end224, %if.then85
  %186 = load i64*, i64** %lp.addr, align 8
  %tobool226 = icmp ne i64* %186, null
  br i1 %tobool226, label %if.then227, label %if.end228

if.then227:                                       ; preds = %if.end225
  %187 = load i64, i64* %len, align 8
  %188 = load i64*, i64** %lp.addr, align 8
  store i64 %187, i64* %188, align 8
  br label %if.end228

if.end228:                                        ; preds = %if.then227, %if.end225
  %189 = load i8*, i8** %buffer, align 8
  call void @Perl_save_pushptr(i8* %189, i32 10)
  %190 = load i8*, i8** %retval81, align 8
  store i8* %190, i8** %retval, align 8
  br label %return

if.end229:                                        ; preds = %if.end
  %191 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags230 = getelementptr inbounds %struct.sv, %struct.sv* %191, i32 0, i32 2
  %192 = load i32, i32* %sv_flags230, align 4
  %and231 = and i32 %192, 16384
  %tobool232 = icmp ne i32 %and231, 0
  br i1 %tobool232, label %if.then233, label %if.end255

if.then233:                                       ; preds = %if.end229
  %193 = load i64*, i64** %lp.addr, align 8
  %tobool234 = icmp ne i64* %193, null
  br i1 %tobool234, label %if.then235, label %if.end238

if.then235:                                       ; preds = %if.then233
  %194 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any236 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 0
  %195 = load i8*, i8** %sv_any236, align 8
  %196 = bitcast i8* %195 to %struct.xpv*
  %xpv_cur237 = getelementptr inbounds %struct.xpv, %struct.xpv* %196, i32 0, i32 2
  %197 = load i64, i64* %xpv_cur237, align 8
  %198 = load i64*, i64** %lp.addr, align 8
  store i64 %197, i64* %198, align 8
  br label %if.end238

if.end238:                                        ; preds = %if.then235, %if.then233
  %199 = load i32, i32* %flags.addr, align 4
  %and239 = and i32 %199, 64
  %tobool240 = icmp ne i32 %and239, 0
  br i1 %tobool240, label %if.then241, label %if.end245

if.then241:                                       ; preds = %if.end238
  %200 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u242 = getelementptr inbounds %struct.sv, %struct.sv* %200, i32 0, i32 3
  %svu_pv243 = bitcast %union.anon* %sv_u242 to i8**
  %201 = load i8*, i8** %svu_pv243, align 8
  %add.ptr244 = getelementptr inbounds i8, i8* %201, i64 0
  store i8* %add.ptr244, i8** %retval, align 8
  br label %return

if.end245:                                        ; preds = %if.end238
  %202 = load i32, i32* %flags.addr, align 4
  %and246 = and i32 %202, 32
  %tobool247 = icmp ne i32 %and246, 0
  br i1 %tobool247, label %if.then248, label %if.end252

if.then248:                                       ; preds = %if.end245
  %203 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u249 = getelementptr inbounds %struct.sv, %struct.sv* %203, i32 0, i32 3
  %svu_pv250 = bitcast %union.anon* %sv_u249 to i8**
  %204 = load i8*, i8** %svu_pv250, align 8
  %add.ptr251 = getelementptr inbounds i8, i8* %204, i64 0
  store i8* %add.ptr251, i8** %retval, align 8
  br label %return

if.end252:                                        ; preds = %if.end245
  %205 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u253 = getelementptr inbounds %struct.sv, %struct.sv* %205, i32 0, i32 3
  %svu_pv254 = bitcast %union.anon* %sv_u253 to i8**
  %206 = load i8*, i8** %svu_pv254, align 8
  store i8* %206, i8** %retval, align 8
  br label %return

if.end255:                                        ; preds = %if.end229
  %207 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags256 = getelementptr inbounds %struct.sv, %struct.sv* %207, i32 0, i32 2
  %208 = load i32, i32* %sv_flags256, align 4
  %and257 = and i32 %208, 256
  %tobool258 = icmp ne i32 %and257, 0
  br i1 %tobool258, label %if.then259, label %if.else294

if.then259:                                       ; preds = %if.end255
  %209 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags260 = getelementptr inbounds %struct.sv, %struct.sv* %209, i32 0, i32 2
  %210 = load i32, i32* %sv_flags260, align 4
  %and261 = and i32 %210, -2147483648
  store i32 %and261, i32* %isUIOK, align 4
  %211 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags263 = getelementptr inbounds %struct.sv, %struct.sv* %211, i32 0, i32 2
  %212 = load i32, i32* %sv_flags263, align 4
  %and264 = and i32 %212, 255
  %cmp265 = icmp ult i32 %and264, 5
  br i1 %cmp265, label %if.then267, label %if.end268

if.then267:                                       ; preds = %if.then259
  %213 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %213, i32 5)
  br label %if.end268

if.end268:                                        ; preds = %if.then267, %if.then259
  %arraydecay269 = getelementptr inbounds [22 x i8], [22 x i8]* %buf, i64 0, i64 0
  %214 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any270 = getelementptr inbounds %struct.sv, %struct.sv* %214, i32 0, i32 0
  %215 = load i8*, i8** %sv_any270, align 8
  %216 = bitcast i8* %215 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %216, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %217 = load i64, i64* %xivu_iv, align 8
  %218 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any271 = getelementptr inbounds %struct.sv, %struct.sv* %218, i32 0, i32 0
  %219 = load i8*, i8** %sv_any271, align 8
  %220 = bitcast i8* %219 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %220, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %221 = load i64, i64* %xivu_uv, align 8
  %222 = load i32, i32* %isUIOK, align 4
  %call272 = call i8* @S_uiv_2buf(i8* %arraydecay269, i64 %217, i64 %221, i32 %222, i8** %ebuf)
  store i8* %call272, i8** %ptr, align 8
  %223 = load i8*, i8** %ebuf, align 8
  %224 = load i8*, i8** %ptr, align 8
  %sub.ptr.lhs.cast273 = ptrtoint i8* %223 to i64
  %sub.ptr.rhs.cast274 = ptrtoint i8* %224 to i64
  %sub.ptr.sub275 = sub i64 %sub.ptr.lhs.cast273, %sub.ptr.rhs.cast274
  store i64 %sub.ptr.sub275, i64* %len262, align 8
  %225 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any276 = getelementptr inbounds %struct.sv, %struct.sv* %225, i32 0, i32 0
  %226 = load i8*, i8** %sv_any276, align 8
  %227 = bitcast i8* %226 to %struct.xpv*
  %xpv_len_u277 = getelementptr inbounds %struct.xpv, %struct.xpv* %227, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u277 to i64*
  %228 = load i64, i64* %xpvlenu_len, align 8
  %229 = load i64, i64* %len262, align 8
  %add278 = add i64 %229, 1
  %cmp279 = icmp ult i64 %228, %add278
  br i1 %cmp279, label %cond.true281, label %cond.false284

cond.true281:                                     ; preds = %if.end268
  %230 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %231 = load i64, i64* %len262, align 8
  %add282 = add i64 %231, 1
  %call283 = call i8* @Perl_sv_grow(%struct.sv* %230, i64 %add282)
  br label %cond.end288

cond.false284:                                    ; preds = %if.end268
  %232 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u285 = getelementptr inbounds %struct.sv, %struct.sv* %232, i32 0, i32 3
  %svu_pv286 = bitcast %union.anon* %sv_u285 to i8**
  %233 = load i8*, i8** %svu_pv286, align 8
  %add.ptr287 = getelementptr inbounds i8, i8* %233, i64 0
  br label %cond.end288

cond.end288:                                      ; preds = %cond.false284, %cond.true281
  %cond289 = phi i8* [ %call283, %cond.true281 ], [ %add.ptr287, %cond.false284 ]
  store i8* %cond289, i8** %s, align 8
  %234 = load i8*, i8** %s, align 8
  %235 = load i8*, i8** %ptr, align 8
  %236 = load i64, i64* %len262, align 8
  %mul290 = mul i64 %236, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %234, i8* align 1 %235, i64 %mul290, i1 false)
  %237 = load i64, i64* %len262, align 8
  %238 = load i8*, i8** %s, align 8
  %add.ptr291 = getelementptr inbounds i8, i8* %238, i64 %237
  store i8* %add.ptr291, i8** %s, align 8
  %239 = load i8*, i8** %s, align 8
  store i8 0, i8* %239, align 1
  %240 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags292 = getelementptr inbounds %struct.sv, %struct.sv* %240, i32 0, i32 2
  %241 = load i32, i32* %sv_flags292, align 4
  %or293 = or i32 %241, 17408
  store i32 %or293, i32* %sv_flags292, align 4
  br label %if.end450

if.else294:                                       ; preds = %if.end255
  %242 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags295 = getelementptr inbounds %struct.sv, %struct.sv* %242, i32 0, i32 2
  %243 = load i32, i32* %sv_flags295, align 4
  %and296 = and i32 %243, 512
  %tobool297 = icmp ne i32 %and296, 0
  br i1 %tobool297, label %if.then298, label %if.else374

if.then298:                                       ; preds = %if.else294
  %244 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags299 = getelementptr inbounds %struct.sv, %struct.sv* %244, i32 0, i32 2
  %245 = load i32, i32* %sv_flags299, align 4
  %and300 = and i32 %245, 255
  %cmp301 = icmp ult i32 %and300, 6
  br i1 %cmp301, label %if.then303, label %if.end304

if.then303:                                       ; preds = %if.then298
  %246 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %246, i32 6)
  br label %if.end304

if.end304:                                        ; preds = %if.then303, %if.then298
  %247 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any305 = getelementptr inbounds %struct.sv, %struct.sv* %247, i32 0, i32 0
  %248 = load i8*, i8** %sv_any305, align 8
  %249 = bitcast i8* %248 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %249, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %250 = load double, double* %xnv_nv, align 8
  %cmp306 = fcmp oeq double %250, 0.000000e+00
  br i1 %cmp306, label %if.then308, label %if.else323

if.then308:                                       ; preds = %if.end304
  %251 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any309 = getelementptr inbounds %struct.sv, %struct.sv* %251, i32 0, i32 0
  %252 = load i8*, i8** %sv_any309, align 8
  %253 = bitcast i8* %252 to %struct.xpv*
  %xpv_len_u310 = getelementptr inbounds %struct.xpv, %struct.xpv* %253, i32 0, i32 3
  %xpvlenu_len311 = bitcast %union.anon.19* %xpv_len_u310 to i64*
  %254 = load i64, i64* %xpvlenu_len311, align 8
  %cmp312 = icmp ult i64 %254, 2
  br i1 %cmp312, label %cond.true314, label %cond.false316

cond.true314:                                     ; preds = %if.then308
  %255 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call315 = call i8* @Perl_sv_grow(%struct.sv* %255, i64 2)
  br label %cond.end320

cond.false316:                                    ; preds = %if.then308
  %256 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u317 = getelementptr inbounds %struct.sv, %struct.sv* %256, i32 0, i32 3
  %svu_pv318 = bitcast %union.anon* %sv_u317 to i8**
  %257 = load i8*, i8** %svu_pv318, align 8
  %add.ptr319 = getelementptr inbounds i8, i8* %257, i64 0
  br label %cond.end320

cond.end320:                                      ; preds = %cond.false316, %cond.true314
  %cond321 = phi i8* [ %call315, %cond.true314 ], [ %add.ptr319, %cond.false316 ]
  store i8* %cond321, i8** %s, align 8
  %258 = load i8*, i8** %s, align 8
  %incdec.ptr322 = getelementptr inbounds i8, i8* %258, i32 1
  store i8* %incdec.ptr322, i8** %s, align 8
  store i8 48, i8* %258, align 1
  %259 = load i8*, i8** %s, align 8
  store i8 0, i8* %259, align 1
  br label %if.end373

if.else323:                                       ; preds = %if.end304
  store i64 5, i64* %size, align 8
  %260 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any325 = getelementptr inbounds %struct.sv, %struct.sv* %260, i32 0, i32 0
  %261 = load i8*, i8** %sv_any325, align 8
  %262 = bitcast i8* %261 to %struct.xpv*
  %xpv_len_u326 = getelementptr inbounds %struct.xpv, %struct.xpv* %262, i32 0, i32 3
  %xpvlenu_len327 = bitcast %union.anon.19* %xpv_len_u326 to i64*
  %263 = load i64, i64* %xpvlenu_len327, align 8
  %264 = load i64, i64* %size, align 8
  %cmp328 = icmp ult i64 %263, %264
  br i1 %cmp328, label %cond.true330, label %cond.false332

cond.true330:                                     ; preds = %if.else323
  %265 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %266 = load i64, i64* %size, align 8
  %call331 = call i8* @Perl_sv_grow(%struct.sv* %265, i64 %266)
  br label %cond.end336

cond.false332:                                    ; preds = %if.else323
  %267 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u333 = getelementptr inbounds %struct.sv, %struct.sv* %267, i32 0, i32 3
  %svu_pv334 = bitcast %union.anon* %sv_u333 to i8**
  %268 = load i8*, i8** %svu_pv334, align 8
  %add.ptr335 = getelementptr inbounds i8, i8* %268, i64 0
  br label %cond.end336

cond.end336:                                      ; preds = %cond.false332, %cond.true330
  %cond337 = phi i8* [ %call331, %cond.true330 ], [ %add.ptr335, %cond.false332 ]
  store i8* %cond337, i8** %s, align 8
  %269 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any338 = getelementptr inbounds %struct.sv, %struct.sv* %269, i32 0, i32 0
  %270 = load i8*, i8** %sv_any338, align 8
  %271 = bitcast i8* %270 to %struct.xpvnv*
  %xnv_u339 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %271, i32 0, i32 5
  %xnv_nv340 = bitcast %union._xnvu* %xnv_u339 to double*
  %272 = load double, double* %xnv_nv340, align 8
  %273 = load i8*, i8** %s, align 8
  %274 = load i64, i64* %size, align 8
  %call341 = call i64 @S_infnan_2pv(double %272, i8* %273, i64 %274, i8 signext 0)
  store i64 %call341, i64* %len324, align 8
  %275 = load i64, i64* %len324, align 8
  %cmp342 = icmp ugt i64 %275, 0
  br i1 %cmp342, label %if.then344, label %if.else348

if.then344:                                       ; preds = %cond.end336
  %276 = load i64, i64* %len324, align 8
  %277 = load i8*, i8** %s, align 8
  %add.ptr345 = getelementptr inbounds i8, i8* %277, i64 %276
  store i8* %add.ptr345, i8** %s, align 8
  %278 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags346 = getelementptr inbounds %struct.sv, %struct.sv* %278, i32 0, i32 2
  %279 = load i32, i32* %sv_flags346, align 4
  %or347 = or i32 %279, 17408
  store i32 %or347, i32* %sv_flags346, align 4
  br label %if.end370

if.else348:                                       ; preds = %cond.end336
  %call349 = call i32* @__errno_location() #9
  %280 = load i32, i32* %call349, align 4
  store i32 %280, i32* %saved_errno, align 4
  store i64 27, i64* %size, align 8
  %281 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any350 = getelementptr inbounds %struct.sv, %struct.sv* %281, i32 0, i32 0
  %282 = load i8*, i8** %sv_any350, align 8
  %283 = bitcast i8* %282 to %struct.xpv*
  %xpv_len_u351 = getelementptr inbounds %struct.xpv, %struct.xpv* %283, i32 0, i32 3
  %xpvlenu_len352 = bitcast %union.anon.19* %xpv_len_u351 to i64*
  %284 = load i64, i64* %xpvlenu_len352, align 8
  %285 = load i64, i64* %size, align 8
  %cmp353 = icmp ult i64 %284, %285
  br i1 %cmp353, label %cond.true355, label %cond.false357

cond.true355:                                     ; preds = %if.else348
  %286 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %287 = load i64, i64* %size, align 8
  %call356 = call i8* @Perl_sv_grow(%struct.sv* %286, i64 %287)
  br label %cond.end361

cond.false357:                                    ; preds = %if.else348
  %288 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u358 = getelementptr inbounds %struct.sv, %struct.sv* %288, i32 0, i32 3
  %svu_pv359 = bitcast %union.anon* %sv_u358 to i8**
  %289 = load i8*, i8** %svu_pv359, align 8
  %add.ptr360 = getelementptr inbounds i8, i8* %289, i64 0
  br label %cond.end361

cond.end361:                                      ; preds = %cond.false357, %cond.true355
  %cond362 = phi i8* [ %call356, %cond.true355 ], [ %add.ptr360, %cond.false357 ]
  store i8* %cond362, i8** %s, align 8
  %290 = load i8*, i8** %s, align 8
  %291 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any363 = getelementptr inbounds %struct.sv, %struct.sv* %291, i32 0, i32 0
  %292 = load i8*, i8** %sv_any363, align 8
  %293 = bitcast i8* %292 to %struct.xpvnv*
  %xnv_u364 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %293, i32 0, i32 5
  %xnv_nv365 = bitcast %union._xnvu* %xnv_u364 to double*
  %294 = load double, double* %xnv_nv365, align 8
  %call366 = call i32 (i8*, i8*, ...) @sprintf(i8* %290, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i32 15, double %294) #6
  %295 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags367 = getelementptr inbounds %struct.sv, %struct.sv* %295, i32 0, i32 2
  %296 = load i32, i32* %sv_flags367, align 4
  %or368 = or i32 %296, 17408
  store i32 %or368, i32* %sv_flags367, align 4
  %297 = load i32, i32* %saved_errno, align 4
  %call369 = call i32* @__errno_location() #9
  store i32 %297, i32* %call369, align 4
  br label %if.end370

if.end370:                                        ; preds = %cond.end361, %if.then344
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end370
  %298 = load i8*, i8** %s, align 8
  %299 = load i8, i8* %298, align 1
  %tobool371 = icmp ne i8 %299, 0
  br i1 %tobool371, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %300 = load i8*, i8** %s, align 8
  %incdec.ptr372 = getelementptr inbounds i8, i8* %300, i32 1
  store i8* %incdec.ptr372, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end373

if.end373:                                        ; preds = %while.end, %cond.end320
  br label %if.end449

if.else374:                                       ; preds = %if.else294
  %301 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags375 = getelementptr inbounds %struct.sv, %struct.sv* %301, i32 0, i32 2
  %302 = load i32, i32* %sv_flags375, align 4
  %and376 = and i32 %302, 49152
  %cmp377 = icmp eq i32 %and376, 32768
  br i1 %cmp377, label %land.lhs.true379, label %if.else406

land.lhs.true379:                                 ; preds = %if.else374
  %303 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags380 = getelementptr inbounds %struct.sv, %struct.sv* %303, i32 0, i32 2
  %304 = load i32, i32* %sv_flags380, align 4
  %and381 = and i32 %304, 255
  %cmp382 = icmp eq i32 %and381, 9
  br i1 %cmp382, label %if.then389, label %lor.lhs.false384

lor.lhs.false384:                                 ; preds = %land.lhs.true379
  %305 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags385 = getelementptr inbounds %struct.sv, %struct.sv* %305, i32 0, i32 2
  %306 = load i32, i32* %sv_flags385, align 4
  %and386 = and i32 %306, 255
  %cmp387 = icmp eq i32 %and386, 10
  br i1 %cmp387, label %if.then389, label %if.else406

if.then389:                                       ; preds = %lor.lhs.false384, %land.lhs.true379
  %307 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %308 = bitcast %struct.sv* %307 to i8*
  %309 = bitcast i8* %308 to %struct.gv*
  store %struct.gv* %309, %struct.gv** %gv, align 8
  %call391 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call391, %struct.sv** %buffer390, align 8
  %310 = load %struct.sv*, %struct.sv** %buffer390, align 8
  %311 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_gv_efullname4(%struct.sv* %310, %struct.gv* %311, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i1 zeroext true)
  %312 = load %struct.sv*, %struct.sv** %buffer390, align 8
  %sv_flags392 = getelementptr inbounds %struct.sv, %struct.sv* %312, i32 0, i32 2
  %313 = load i32, i32* %sv_flags392, align 4
  %and393 = and i32 %313, 536870912
  %tobool394 = icmp ne i32 %and393, 0
  br i1 %tobool394, label %if.then395, label %if.end398

if.then395:                                       ; preds = %if.then389
  %314 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags396 = getelementptr inbounds %struct.sv, %struct.sv* %314, i32 0, i32 2
  %315 = load i32, i32* %sv_flags396, align 4
  %or397 = or i32 %315, 536870912
  store i32 %or397, i32* %sv_flags396, align 4
  br label %if.end398

if.end398:                                        ; preds = %if.then395, %if.then389
  %316 = load i64*, i64** %lp.addr, align 8
  %tobool399 = icmp ne i64* %316, null
  br i1 %tobool399, label %if.then400, label %if.end403

if.then400:                                       ; preds = %if.end398
  %317 = load %struct.sv*, %struct.sv** %buffer390, align 8
  %sv_any401 = getelementptr inbounds %struct.sv, %struct.sv* %317, i32 0, i32 0
  %318 = load i8*, i8** %sv_any401, align 8
  %319 = bitcast i8* %318 to %struct.xpv*
  %xpv_cur402 = getelementptr inbounds %struct.xpv, %struct.xpv* %319, i32 0, i32 2
  %320 = load i64, i64* %xpv_cur402, align 8
  %321 = load i64*, i64** %lp.addr, align 8
  store i64 %320, i64* %321, align 8
  br label %if.end403

if.end403:                                        ; preds = %if.then400, %if.end398
  %322 = load %struct.sv*, %struct.sv** %buffer390, align 8
  %sv_u404 = getelementptr inbounds %struct.sv, %struct.sv* %322, i32 0, i32 3
  %svu_pv405 = bitcast %union.anon* %sv_u404 to i8**
  %323 = load i8*, i8** %svu_pv405, align 8
  store i8* %323, i8** %retval, align 8
  br label %return

if.else406:                                       ; preds = %lor.lhs.false384, %if.else374
  %324 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags407 = getelementptr inbounds %struct.sv, %struct.sv* %324, i32 0, i32 2
  %325 = load i32, i32* %sv_flags407, align 4
  %and408 = and i32 %325, 255
  %cmp409 = icmp eq i32 %and408, 8
  br i1 %cmp409, label %if.then416, label %lor.lhs.false411

lor.lhs.false411:                                 ; preds = %if.else406
  %326 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags412 = getelementptr inbounds %struct.sv, %struct.sv* %326, i32 0, i32 2
  %327 = load i32, i32* %sv_flags412, align 4
  %and413 = and i32 %327, 16826623
  %cmp414 = icmp eq i32 %and413, 16777226
  br i1 %cmp414, label %if.then416, label %if.else425

if.then416:                                       ; preds = %lor.lhs.false411, %if.else406
  %328 = load i64*, i64** %lp.addr, align 8
  %tobool417 = icmp ne i64* %328, null
  br i1 %tobool417, label %if.then418, label %if.end421

if.then418:                                       ; preds = %if.then416
  %329 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %330 = bitcast %struct.sv* %329 to %struct.p5rx*
  %sv_any419 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %330, i32 0, i32 0
  %331 = load %struct.regexp*, %struct.regexp** %sv_any419, align 8
  %332 = bitcast %struct.regexp* %331 to %struct.xpv*
  %xpv_cur420 = getelementptr inbounds %struct.xpv, %struct.xpv* %332, i32 0, i32 2
  %333 = load i64, i64* %xpv_cur420, align 8
  %334 = load i64*, i64** %lp.addr, align 8
  store i64 %333, i64* %334, align 8
  br label %if.end421

if.end421:                                        ; preds = %if.then418, %if.then416
  %335 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %336 = bitcast %struct.sv* %335 to %struct.p5rx*
  %call422 = call %struct.regexp* @S_ReANY(%struct.p5rx* %336)
  %xpv_len_u423 = getelementptr inbounds %struct.regexp, %struct.regexp* %call422, i32 0, i32 3
  %xpvlenu_pv424 = bitcast %union.anon.14* %xpv_len_u423 to i8**
  %337 = load i8*, i8** %xpvlenu_pv424, align 8
  store i8* %337, i8** %retval, align 8
  br label %return

if.else425:                                       ; preds = %lor.lhs.false411
  %338 = load i64*, i64** %lp.addr, align 8
  %tobool426 = icmp ne i64* %338, null
  br i1 %tobool426, label %if.then427, label %if.end428

if.then427:                                       ; preds = %if.else425
  %339 = load i64*, i64** %lp.addr, align 8
  store i64 0, i64* %339, align 8
  br label %if.end428

if.end428:                                        ; preds = %if.then427, %if.else425
  %340 = load i32, i32* %flags.addr, align 4
  %and429 = and i32 %340, 2048
  %tobool430 = icmp ne i32 %and429, 0
  br i1 %tobool430, label %if.then431, label %if.end432

if.then431:                                       ; preds = %if.end428
  store i8* null, i8** %retval, align 8
  br label %return

if.end432:                                        ; preds = %if.end428
  %341 = load i8, i8* @PL_localizing, align 1
  %tobool433 = icmp ne i8 %341, 0
  br i1 %tobool433, label %if.end438, label %land.lhs.true434

land.lhs.true434:                                 ; preds = %if.end432
  %call435 = call zeroext i1 @Perl_ckwarn(i32 41)
  br i1 %call435, label %if.then437, label %if.end438

if.then437:                                       ; preds = %land.lhs.true434
  %342 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_report_uninit(%struct.sv* %342)
  br label %if.end438

if.end438:                                        ; preds = %if.then437, %land.lhs.true434, %if.end432
  %343 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags439 = getelementptr inbounds %struct.sv, %struct.sv* %343, i32 0, i32 2
  %344 = load i32, i32* %sv_flags439, align 4
  %and440 = and i32 %344, 134283264
  %tobool441 = icmp ne i32 %and440, 0
  br i1 %tobool441, label %if.end448, label %land.lhs.true442

land.lhs.true442:                                 ; preds = %if.end438
  %345 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags443 = getelementptr inbounds %struct.sv, %struct.sv* %345, i32 0, i32 2
  %346 = load i32, i32* %sv_flags443, align 4
  %and444 = and i32 %346, 255
  %cmp445 = icmp ult i32 %and444, 3
  br i1 %cmp445, label %if.then447, label %if.end448

if.then447:                                       ; preds = %land.lhs.true442
  %347 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %347, i32 3)
  br label %if.end448

if.end448:                                        ; preds = %if.then447, %land.lhs.true442, %if.end438
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8** %retval, align 8
  br label %return

if.end449:                                        ; preds = %if.end373
  br label %if.end450

if.end450:                                        ; preds = %if.end449, %cond.end288
  %348 = load i8*, i8** %s, align 8
  %349 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u452 = getelementptr inbounds %struct.sv, %struct.sv* %349, i32 0, i32 3
  %svu_pv453 = bitcast %union.anon* %sv_u452 to i8**
  %350 = load i8*, i8** %svu_pv453, align 8
  %add.ptr454 = getelementptr inbounds i8, i8* %350, i64 0
  %sub.ptr.lhs.cast455 = ptrtoint i8* %348 to i64
  %sub.ptr.rhs.cast456 = ptrtoint i8* %add.ptr454 to i64
  %sub.ptr.sub457 = sub i64 %sub.ptr.lhs.cast455, %sub.ptr.rhs.cast456
  store i64 %sub.ptr.sub457, i64* %len451, align 8
  %351 = load i64*, i64** %lp.addr, align 8
  %tobool458 = icmp ne i64* %351, null
  br i1 %tobool458, label %if.then459, label %if.end460

if.then459:                                       ; preds = %if.end450
  %352 = load i64, i64* %len451, align 8
  %353 = load i64*, i64** %lp.addr, align 8
  store i64 %352, i64* %353, align 8
  br label %if.end460

if.end460:                                        ; preds = %if.then459, %if.end450
  br label %do.body461

do.body461:                                       ; preds = %if.end460
  %354 = load i64, i64* %len451, align 8
  %355 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any462 = getelementptr inbounds %struct.sv, %struct.sv* %355, i32 0, i32 0
  %356 = load i8*, i8** %sv_any462, align 8
  %357 = bitcast i8* %356 to %struct.xpv*
  %xpv_cur463 = getelementptr inbounds %struct.xpv, %struct.xpv* %357, i32 0, i32 2
  store i64 %354, i64* %xpv_cur463, align 8
  br label %do.end465

do.end465:                                        ; preds = %do.body461
  %358 = load i32, i32* %flags.addr, align 4
  %and466 = and i32 %358, 32
  %tobool467 = icmp ne i32 %and466, 0
  br i1 %tobool467, label %if.then468, label %if.end472

if.then468:                                       ; preds = %do.end465
  %359 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u469 = getelementptr inbounds %struct.sv, %struct.sv* %359, i32 0, i32 3
  %svu_pv470 = bitcast %union.anon* %sv_u469 to i8**
  %360 = load i8*, i8** %svu_pv470, align 8
  %add.ptr471 = getelementptr inbounds i8, i8* %360, i64 0
  store i8* %add.ptr471, i8** %retval, align 8
  br label %return

if.end472:                                        ; preds = %do.end465
  %361 = load i32, i32* %flags.addr, align 4
  %and473 = and i32 %361, 64
  %tobool474 = icmp ne i32 %and473, 0
  br i1 %tobool474, label %if.then475, label %if.end479

if.then475:                                       ; preds = %if.end472
  %362 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u476 = getelementptr inbounds %struct.sv, %struct.sv* %362, i32 0, i32 3
  %svu_pv477 = bitcast %union.anon* %sv_u476 to i8**
  %363 = load i8*, i8** %svu_pv477, align 8
  %add.ptr478 = getelementptr inbounds i8, i8* %363, i64 0
  store i8* %add.ptr478, i8** %retval, align 8
  br label %return

if.end479:                                        ; preds = %if.end472
  %364 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u480 = getelementptr inbounds %struct.sv, %struct.sv* %364, i32 0, i32 3
  %svu_pv481 = bitcast %union.anon* %sv_u480 to i8**
  %365 = load i8*, i8** %svu_pv481, align 8
  store i8* %365, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end479, %if.then475, %if.then468, %if.end448, %if.then431, %if.end421, %if.end403, %if.end252, %if.then248, %if.then241, %if.end228, %if.end113, %if.end78, %if.then23
  %366 = load i8*, i8** %retval, align 8
  ret i8* %366
}

declare dso_local i32 @Perl_grok_number(i8*, i64, i64*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @Perl_sv_2iv_flags(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %tmpstr = alloca %struct.sv*, align 8
  %value = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %numtype = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %flags.addr, align 4
  %and1 = and i32 %2, 2
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 2048
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then6, label %if.end45

if.then6:                                         ; preds = %if.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %7, 2048
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end42

land.lhs.true10:                                  ; preds = %if.then6
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %9 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %10, 1048576
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %land.lhs.true14, label %if.end42

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u15 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 3
  %svu_rv16 = bitcast %union.anon* %sv_u15 to %struct.sv**
  %12 = load %struct.sv*, %struct.sv** %svu_rv16, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any, align 8
  %14 = bitcast i8* %13 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %14, i32 0, i32 0
  %15 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags17 = getelementptr inbounds %struct.hv, %struct.hv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %16, 268435456
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.then20, label %if.end42

if.then20:                                        ; preds = %land.lhs.true14
  %17 = load i32, i32* %flags.addr, align 4
  %and21 = and i32 %17, 8192
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.then20
  store i64 0, i64* %retval, align 8
  br label %return

if.end24:                                         ; preds = %if.then20
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call25 = call %struct.sv* @Perl_amagic_call(%struct.sv* %18, %struct.sv* @PL_sv_undef, i32 9, i32 9)
  store %struct.sv* %call25, %struct.sv** %tmpstr, align 8
  %19 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %tobool26 = icmp ne %struct.sv* %19, null
  br i1 %tobool26, label %land.lhs.true27, label %if.end41

land.lhs.true27:                                  ; preds = %if.end24
  %20 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %21, 2048
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %lor.lhs.false, label %if.then35

lor.lhs.false:                                    ; preds = %land.lhs.true27
  %22 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_u31 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_rv32 = bitcast %union.anon* %sv_u31 to %struct.sv**
  %23 = load %struct.sv*, %struct.sv** %svu_rv32, align 8
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u33 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 3
  %svu_rv34 = bitcast %union.anon* %sv_u33 to %struct.sv**
  %25 = load %struct.sv*, %struct.sv** %svu_rv34, align 8
  %cmp = icmp ne %struct.sv* %23, %25
  br i1 %cmp, label %if.then35, label %if.end41

if.then35:                                        ; preds = %lor.lhs.false, %land.lhs.true27
  %26 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %27, 2097408
  %cmp38 = icmp eq i32 %and37, 256
  br i1 %cmp38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then35
  %28 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any39 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any39, align 8
  %30 = bitcast i8* %29 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %30, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %31 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then35
  %32 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call40 = call i64 @Perl_sv_2iv_flags(%struct.sv* %32, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %31, %cond.true ], [ %call40, %cond.false ]
  store i64 %cond, i64* %retval, align 8
  br label %return

if.end41:                                         ; preds = %lor.lhs.false, %if.end24
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %land.lhs.true14, %land.lhs.true10, %if.then6
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u43 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 3
  %svu_rv44 = bitcast %union.anon* %sv_u43 to %struct.sv**
  %34 = load %struct.sv*, %struct.sv** %svu_rv44, align 8
  %35 = ptrtoint %struct.sv* %34 to i64
  store i64 %35, i64* %retval, align 8
  br label %return

if.end45:                                         ; preds = %if.end
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %37, 1073741824
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %land.lhs.true49, label %lor.lhs.false53

land.lhs.true49:                                  ; preds = %if.end45
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags50 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags50, align 4
  %and51 = and i32 %39, 49152
  %cmp52 = icmp eq i32 %and51, 49152
  br i1 %cmp52, label %lor.lhs.false53, label %if.then61

lor.lhs.false53:                                  ; preds = %land.lhs.true49, %if.end45
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %41, 255
  %cmp56 = icmp eq i32 %and55, 8
  br i1 %cmp56, label %if.then61, label %lor.lhs.false57

lor.lhs.false57:                                  ; preds = %lor.lhs.false53
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags58, align 4
  %and59 = and i32 %43, 16826623
  %cmp60 = icmp eq i32 %and59, 16777226
  br i1 %cmp60, label %if.then61, label %if.end111

if.then61:                                        ; preds = %lor.lhs.false57, %lor.lhs.false53, %land.lhs.true49
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %45, 255
  %cmp64 = icmp eq i32 %and63, 8
  br i1 %cmp64, label %cond.true69, label %lor.lhs.false65

lor.lhs.false65:                                  ; preds = %if.then61
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %47, 16826623
  %cmp68 = icmp eq i32 %and67, 16777226
  br i1 %cmp68, label %cond.true69, label %cond.false71

cond.true69:                                      ; preds = %lor.lhs.false65, %if.then61
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %49 = bitcast %struct.sv* %48 to %struct.p5rx*
  %call70 = call %struct.regexp* @S_ReANY(%struct.p5rx* %49)
  %xpv_len_u = getelementptr inbounds %struct.regexp, %struct.regexp* %call70, i32 0, i32 3
  %xpvlenu_pv = bitcast %union.anon.14* %xpv_len_u to i8**
  %50 = load i8*, i8** %xpvlenu_pv, align 8
  br label %cond.end73

cond.false71:                                     ; preds = %lor.lhs.false65
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u72 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u72 to i8**
  %52 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %52, i64 0
  br label %cond.end73

cond.end73:                                       ; preds = %cond.false71, %cond.true69
  %cond74 = phi i8* [ %50, %cond.true69 ], [ %add.ptr, %cond.false71 ]
  store i8* %cond74, i8** %ptr, align 8
  %53 = load i8*, i8** %ptr, align 8
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any75 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any75, align 8
  %56 = bitcast i8* %55 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %56, i32 0, i32 2
  %57 = load i64, i64* %xpv_cur, align 8
  %call76 = call i32 @Perl_grok_number(i8* %53, i64 %57, i64* %value)
  store i32 %call76, i32* %numtype, align 4
  %58 = load i32, i32* %numtype, align 4
  %and77 = and i32 %58, 5
  %cmp78 = icmp eq i32 %and77, 1
  br i1 %cmp78, label %if.then79, label %if.end90

if.then79:                                        ; preds = %cond.end73
  %59 = load i32, i32* %numtype, align 4
  %and80 = and i32 %59, 8
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %if.then82, label %if.else

if.then82:                                        ; preds = %if.then79
  %60 = load i64, i64* %value, align 8
  %cmp83 = icmp ult i64 %60, -9223372036854775808
  br i1 %cmp83, label %if.then84, label %if.end85

if.then84:                                        ; preds = %if.then82
  %61 = load i64, i64* %value, align 8
  %sub = sub nsw i64 0, %61
  store i64 %sub, i64* %retval, align 8
  br label %return

if.end85:                                         ; preds = %if.then82
  br label %if.end89

if.else:                                          ; preds = %if.then79
  %62 = load i64, i64* %value, align 8
  %cmp86 = icmp ult i64 %62, 9223372036854775807
  br i1 %cmp86, label %if.then87, label %if.end88

if.then87:                                        ; preds = %if.else
  %63 = load i64, i64* %value, align 8
  store i64 %63, i64* %retval, align 8
  br label %return

if.end88:                                         ; preds = %if.else
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %if.end85
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %cond.end73
  %64 = load i32, i32* %numtype, align 4
  %and91 = and i32 %64, 16
  %tobool92 = icmp ne i32 %and91, 0
  br i1 %tobool92, label %if.then93, label %if.else97

if.then93:                                        ; preds = %if.end90
  %65 = load i32, i32* %numtype, align 4
  %and94 = and i32 %65, 8
  %tobool95 = icmp ne i32 %and94, 0
  %66 = zext i1 %tobool95 to i64
  %cond96 = select i1 %tobool95, i64 -9223372036854775808, i64 9223372036854775807
  store i64 %cond96, i64* %retval, align 8
  br label %return

if.else97:                                        ; preds = %if.end90
  %67 = load i32, i32* %numtype, align 4
  %and98 = and i32 %67, 32
  %tobool99 = icmp ne i32 %and98, 0
  br i1 %tobool99, label %if.then100, label %if.end101

if.then100:                                       ; preds = %if.else97
  store i64 0, i64* %retval, align 8
  br label %return

if.end101:                                        ; preds = %if.else97
  br label %if.end102

if.end102:                                        ; preds = %if.end101
  %68 = load i32, i32* %numtype, align 4
  %tobool103 = icmp ne i32 %68, 0
  br i1 %tobool103, label %if.end108, label %if.then104

if.then104:                                       ; preds = %if.end102
  %call105 = call zeroext i1 @Perl_ckwarn(i32 13)
  br i1 %call105, label %if.then106, label %if.end107

if.then106:                                       ; preds = %if.then104
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_a_number(%struct.sv* %69)
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.then104
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %if.end102
  %70 = load i8*, i8** %ptr, align 8
  %call109 = call double @Perl_my_atof(i8* %70)
  %call110 = call i64 @Perl_cast_iv(double %call109)
  store i64 %call110, i64* %retval, align 8
  br label %return

if.end111:                                        ; preds = %lor.lhs.false57
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags112 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags112, align 4
  %and113 = and i32 %72, 427886592
  %tobool114 = icmp ne i32 %and113, 0
  br i1 %tobool114, label %if.then115, label %if.end136

if.then115:                                       ; preds = %if.end111
  %73 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags116 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags116, align 4
  %and117 = and i32 %74, 134283264
  %tobool118 = icmp ne i32 %and117, 0
  br i1 %tobool118, label %land.lhs.true119, label %if.end135

land.lhs.true119:                                 ; preds = %if.then115
  %75 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags120 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags120, align 4
  %and121 = and i32 %76, 65280
  %tobool122 = icmp ne i32 %and121, 0
  br i1 %tobool122, label %if.end135, label %lor.lhs.false123

lor.lhs.false123:                                 ; preds = %land.lhs.true119
  %77 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags124 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags124, align 4
  %and125 = and i32 %78, 255
  %cmp126 = icmp eq i32 %and125, 8
  br i1 %cmp126, label %if.end135, label %lor.lhs.false127

lor.lhs.false127:                                 ; preds = %lor.lhs.false123
  %79 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags128 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags128, align 4
  %and129 = and i32 %80, 16826623
  %cmp130 = icmp eq i32 %and129, 16777226
  br i1 %cmp130, label %if.end135, label %if.then131

if.then131:                                       ; preds = %lor.lhs.false127
  %call132 = call zeroext i1 @Perl_ckwarn(i32 41)
  br i1 %call132, label %if.then133, label %if.end134

if.then133:                                       ; preds = %if.then131
  %81 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_report_uninit(%struct.sv* %81)
  br label %if.end134

if.end134:                                        ; preds = %if.then133, %if.then131
  store i64 0, i64* %retval, align 8
  br label %return

if.end135:                                        ; preds = %lor.lhs.false127, %lor.lhs.false123, %land.lhs.true119, %if.then115
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.end111
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags137 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags137, align 4
  %and138 = and i32 %83, 4096
  %tobool139 = icmp ne i32 %and138, 0
  br i1 %tobool139, label %if.end144, label %if.then140

if.then140:                                       ; preds = %if.end136
  %84 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call141 = call zeroext i1 @S_sv_2iuv_common(%struct.sv* %84)
  br i1 %call141, label %if.then142, label %if.end143

if.then142:                                       ; preds = %if.then140
  store i64 0, i64* %retval, align 8
  br label %return

if.end143:                                        ; preds = %if.then140
  br label %if.end144

if.end144:                                        ; preds = %if.end143, %if.end136
  %85 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags145 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags145, align 4
  %and146 = and i32 %86, -2147483648
  %tobool147 = icmp ne i32 %and146, 0
  br i1 %tobool147, label %cond.true148, label %cond.false150

cond.true148:                                     ; preds = %if.end144
  %87 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any149 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 0
  %88 = load i8*, i8** %sv_any149, align 8
  %89 = bitcast i8* %88 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %89, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %90 = load i64, i64* %xivu_uv, align 8
  br label %cond.end154

cond.false150:                                    ; preds = %if.end144
  %91 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any151 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 0
  %92 = load i8*, i8** %sv_any151, align 8
  %93 = bitcast i8* %92 to %struct.xpviv*
  %xiv_u152 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %93, i32 0, i32 4
  %xivu_iv153 = bitcast %union._xivu* %xiv_u152 to i64*
  %94 = load i64, i64* %xivu_iv153, align 8
  br label %cond.end154

cond.end154:                                      ; preds = %cond.false150, %cond.true148
  %cond155 = phi i64 [ %90, %cond.true148 ], [ %94, %cond.false150 ]
  store i64 %cond155, i64* %retval, align 8
  br label %return

return:                                           ; preds = %cond.end154, %if.then142, %if.end134, %if.end108, %if.then100, %if.then93, %if.then87, %if.then84, %if.end42, %cond.end, %if.then23
  %95 = load i64, i64* %retval, align 8
  ret i64 %95
}

declare dso_local i32 @Perl_mg_get(%struct.sv*) #1

declare dso_local %struct.sv* @Perl_amagic_call(%struct.sv*, %struct.sv*, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.regexp* @S_ReANY(%struct.p5rx* %re) #0 {
entry:
  %re.addr = alloca %struct.p5rx*, align 8
  store %struct.p5rx* %re, %struct.p5rx** %re.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %re.addr, align 8
  %sv_u = getelementptr inbounds %struct.p5rx, %struct.p5rx* %0, i32 0, i32 3
  %svu_rx = bitcast %union.anon.15* %sv_u to %struct.regexp**
  %1 = load %struct.regexp*, %struct.regexp** %svu_rx, align 8
  ret %struct.regexp* %1
}

declare dso_local zeroext i1 @Perl_ckwarn(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_not_a_number(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %tmpbuf = alloca [64 x i8], align 16
  %pv = alloca i8*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %tmpbuf, i64 0, i64 0
  %call = call i8* @S_sv_display(%struct.sv* %0, i8* %arraydecay, i64 64)
  store i8* %call, i8** %pv, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool = icmp ne %struct.op* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %pv, align 8
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 380
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %call1 = call i8* @Perl_custom_op_get_field(%struct.op* %4, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call1, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %5 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load3 = load i16, i16* %op_type2, align 8
  %bf.clear4 = and i16 %bf.load3, 511
  %bf.cast5 = zext i16 %bf.clear4 to i32
  %idxprom = zext i32 %bf.cast5 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %7 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %5, %cond.true ], [ %7, %cond.false ]
  call void (i32, i8*, ...) @Perl_warner(i32 13, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.92, i64 0, i64 0), i8* %2, i8* %cond)
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i8*, i8** %pv, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 13, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.93, i64 0, i64 0), i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  ret void
}

declare dso_local i64 @Perl_cast_iv(double) #1

declare dso_local double @Perl_my_atof(i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_report_uninit(%struct.sv* %uninit_sv) #0 {
entry:
  %uninit_sv.addr = alloca %struct.sv*, align 8
  %varname = alloca %struct.sv*, align 8
  %desc = alloca i8*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.sv* %uninit_sv, %struct.sv** %uninit_sv.addr, align 8
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store %struct.sv* null, %struct.sv** %varname, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 68
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_folded = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load1 = load i16, i16* %op_folded, align 8
  %bf.lshr = lshr i16 %bf.load1, 13
  %bf.clear2 = and i16 %bf.lshr, 1
  %bf.cast3 = zext i16 %bf.clear2 to i32
  %tobool4 = icmp ne i32 %bf.cast3, 0
  br i1 %tobool4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end16

cond.false:                                       ; preds = %land.lhs.true, %if.then
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type5 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_type5, align 8
  %bf.clear7 = and i16 %bf.load6, 511
  %bf.cast8 = zext i16 %bf.clear7 to i32
  %cmp9 = icmp eq i32 %bf.cast8, 380
  br i1 %cmp9, label %cond.true10, label %cond.false11

cond.true10:                                      ; preds = %cond.false
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %call = call i8* @Perl_custom_op_get_field(%struct.op* %4, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %5 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false11:                                     ; preds = %cond.false
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type12 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load13 = load i16, i16* %op_type12, align 8
  %bf.clear14 = and i16 %bf.load13, 511
  %bf.cast15 = zext i16 %bf.clear14 to i32
  %idxprom = zext i32 %bf.cast15 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %7 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false11, %cond.true10
  %cond = phi i8* [ %5, %cond.true10 ], [ %7, %cond.false11 ]
  br label %cond.end16

cond.end16:                                       ; preds = %cond.end, %cond.true
  %cond17 = phi i8* [ getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89, i64 0, i64 0), %cond.true ], [ %cond, %cond.end ]
  store i8* %cond17, i8** %desc, align 8
  %8 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %tobool18 = icmp ne %struct.sv* %8, null
  br i1 %tobool18, label %land.lhs.true19, label %if.end25

land.lhs.true19:                                  ; preds = %cond.end16
  %9 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %tobool20 = icmp ne %struct.sv** %9, null
  br i1 %tobool20, label %if.then21, label %if.end25

if.then21:                                        ; preds = %land.lhs.true19
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %11 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %call22 = call %struct.sv* @S_find_uninit_var(%struct.op* %10, %struct.sv* %11, i1 zeroext false, i8** %desc)
  store %struct.sv* %call22, %struct.sv** %varname, align 8
  %12 = load %struct.sv*, %struct.sv** %varname, align 8
  %tobool23 = icmp ne %struct.sv* %12, null
  br i1 %tobool23, label %if.then24, label %if.end

if.then24:                                        ; preds = %if.then21
  %13 = load %struct.sv*, %struct.sv** %varname, align 8
  call void @Perl_sv_insert_flags(%struct.sv* %13, i64 0, i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.90, i64 0, i64 0), i64 1, i32 2)
  br label %if.end

if.end:                                           ; preds = %if.then24, %if.then21
  br label %if.end25

if.end25:                                         ; preds = %if.end, %land.lhs.true19, %cond.end16
  %14 = load %struct.sv*, %struct.sv** %varname, align 8
  %tobool26 = icmp ne %struct.sv* %14, null
  br i1 %tobool26, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %if.end25
  %15 = load %struct.sv*, %struct.sv** %varname, align 8
  br label %cond.end29

cond.false28:                                     ; preds = %if.end25
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi %struct.sv* [ %15, %cond.true27 ], [ @PL_sv_no, %cond.false28 ]
  %16 = bitcast %struct.sv* %cond30 to i8*
  %17 = load i8*, i8** %desc, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 41, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_warn_uninit_sv, i64 0, i64 0), i8* %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.91, i64 0, i64 0), i8* %17)
  br label %if.end31

if.else:                                          ; preds = %entry
  call void (i32, i8*, ...) @Perl_warner(i32 41, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_warn_uninit, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0))
  br label %if.end31

if.end31:                                         ; preds = %if.else, %cond.end29
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_sv_2iuv_common(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i1, align 1
  %sv.addr = alloca %struct.sv*, align 8
  %value = alloca i64, align 8
  %numtype = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 8192
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else82

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 255
  %cmp = icmp eq i32 %and2, 2
  br i1 %cmp, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %4, i32 6)
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags4, align 4
  %or = or i32 %6, 4096
  store i32 %or, i32* %sv_flags4, align 4
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %9, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %10 = load double, double* %xnv_nv, align 8
  %cmp5 = fcmp olt double %10, 0x43E0000000000000
  br i1 %cmp5, label %if.then6, label %if.else46

if.then6:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then6
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any7 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any7, align 8
  %13 = bitcast i8* %12 to %struct.xpvnv*
  %xnv_u8 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %13, i32 0, i32 5
  %xnv_nv9 = bitcast %union._xnvu* %xnv_u8 to double*
  %14 = load double, double* %xnv_nv9, align 8
  %call = call i64 @Perl_cast_iv(double %14)
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any10 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any10, align 8
  %17 = bitcast i8* %16 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %17, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  store i64 %call, i64* %xivu_iv, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any11 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any11, align 8
  %20 = bitcast i8* %19 to %struct.xpvnv*
  %xnv_u12 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %20, i32 0, i32 5
  %xnv_nv13 = bitcast %union._xnvu* %xnv_u12 to double*
  %21 = load double, double* %xnv_nv13, align 8
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any14 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any14, align 8
  %24 = bitcast i8* %23 to %struct.xpviv*
  %xiv_u15 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %24, i32 0, i32 4
  %xivu_iv16 = bitcast %union._xivu* %xiv_u15 to i64*
  %25 = load i64, i64* %xivu_iv16, align 8
  %conv = sitofp i64 %25 to double
  %cmp17 = fcmp oeq double %21, %conv
  br i1 %cmp17, label %land.lhs.true, label %if.else44

land.lhs.true:                                    ; preds = %do.end
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any19, align 8
  %28 = bitcast i8* %27 to %struct.xpviv*
  %xiv_u20 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %28, i32 0, i32 4
  %xivu_iv21 = bitcast %union._xivu* %xiv_u20 to i64*
  %29 = load i64, i64* %xivu_iv21, align 8
  %cmp22 = icmp ne i64 %29, -9223372036854775808
  br i1 %cmp22, label %land.lhs.true24, label %if.else44

land.lhs.true24:                                  ; preds = %land.lhs.true
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any25 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  %31 = load i8*, i8** %sv_any25, align 8
  %32 = bitcast i8* %31 to %struct.xpviv*
  %xiv_u26 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %32, i32 0, i32 4
  %xivu_iv27 = bitcast %union._xivu* %xiv_u26 to i64*
  %33 = load i64, i64* %xivu_iv27, align 8
  %cmp28 = icmp sgt i64 %33, 0
  br i1 %cmp28, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true24
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any30 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any30, align 8
  %36 = bitcast i8* %35 to %struct.xpviv*
  %xiv_u31 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %36, i32 0, i32 4
  %xivu_iv32 = bitcast %union._xivu* %xiv_u31 to i64*
  %37 = load i64, i64* %xivu_iv32, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true24
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any33 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any33, align 8
  %40 = bitcast i8* %39 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %40, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %41 = load i64, i64* %xivu_uv, align 8
  %sub = sub i64 0, %41
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %37, %cond.true ], [ %sub, %cond.false ]
  %cmp34 = icmp ugt i64 9007199254740992, %cond
  br i1 %cmp34, label %if.then36, label %if.else44

if.then36:                                        ; preds = %cond.end
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %43, 512
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.then40, label %if.else

if.then40:                                        ; preds = %if.then36
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags41, align 4
  %or42 = or i32 %45, 4352
  store i32 %or42, i32* %sv_flags41, align 4
  br label %if.end43

if.else:                                          ; preds = %if.then36
  br label %if.end43

if.end43:                                         ; preds = %if.else, %if.then40
  br label %if.end45

if.else44:                                        ; preds = %cond.end, %land.lhs.true, %do.end
  br label %if.end45

if.end45:                                         ; preds = %if.else44, %if.end43
  br label %if.end81

if.else46:                                        ; preds = %if.end
  br label %do.body47

do.body47:                                        ; preds = %if.else46
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any48 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any48, align 8
  %48 = bitcast i8* %47 to %struct.xpvnv*
  %xnv_u49 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %48, i32 0, i32 5
  %xnv_nv50 = bitcast %union._xnvu* %xnv_u49 to double*
  %49 = load double, double* %xnv_nv50, align 8
  %call51 = call i64 @Perl_cast_uv(double %49)
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any52 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any52, align 8
  %52 = bitcast i8* %51 to %struct.xpvuv*
  %xuv_u53 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %52, i32 0, i32 4
  %xivu_uv54 = bitcast %union._xivu* %xuv_u53 to i64*
  store i64 %call51, i64* %xivu_uv54, align 8
  br label %do.end55

do.end55:                                         ; preds = %do.body47
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any56 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 0
  %54 = load i8*, i8** %sv_any56, align 8
  %55 = bitcast i8* %54 to %struct.xpvnv*
  %xnv_u57 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %55, i32 0, i32 5
  %xnv_nv58 = bitcast %union._xnvu* %xnv_u57 to double*
  %56 = load double, double* %xnv_nv58, align 8
  %57 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any59 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 0
  %58 = load i8*, i8** %sv_any59, align 8
  %59 = bitcast i8* %58 to %struct.xpvuv*
  %xuv_u60 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %59, i32 0, i32 4
  %xivu_uv61 = bitcast %union._xivu* %xuv_u60 to i64*
  %60 = load i64, i64* %xivu_uv61, align 8
  %conv62 = uitofp i64 %60 to double
  %cmp63 = fcmp oeq double %56, %conv62
  br i1 %cmp63, label %land.lhs.true65, label %if.end78

land.lhs.true65:                                  ; preds = %do.end55
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any66 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any66, align 8
  %63 = bitcast i8* %62 to %struct.xpvuv*
  %xuv_u67 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %63, i32 0, i32 4
  %xivu_uv68 = bitcast %union._xivu* %xuv_u67 to i64*
  %64 = load i64, i64* %xivu_uv68, align 8
  %cmp69 = icmp ugt i64 9007199254740992, %64
  br i1 %cmp69, label %land.lhs.true71, label %if.end78

land.lhs.true71:                                  ; preds = %land.lhs.true65
  %65 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags72 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags72, align 4
  %and73 = and i32 %66, 512
  %tobool74 = icmp ne i32 %and73, 0
  br i1 %tobool74, label %if.then75, label %if.end78

if.then75:                                        ; preds = %land.lhs.true71
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags76 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags76, align 4
  %or77 = or i32 %68, 4352
  store i32 %or77, i32* %sv_flags76, align 4
  br label %if.end78

if.end78:                                         ; preds = %if.then75, %land.lhs.true71, %land.lhs.true65, %do.end55
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags79, align 4
  %or80 = or i32 %70, -2147483648
  store i32 %or80, i32* %sv_flags79, align 4
  br label %if.end81

if.end81:                                         ; preds = %if.end78, %if.end45
  br label %if.end320

if.else82:                                        ; preds = %entry
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags83 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %72, 16384
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %if.then86, label %if.else290

if.then86:                                        ; preds = %if.else82
  %73 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %74 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %74, i64 0
  %75 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any87 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 0
  %76 = load i8*, i8** %sv_any87, align 8
  %77 = bitcast i8* %76 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %77, i32 0, i32 2
  %78 = load i64, i64* %xpv_cur, align 8
  %call88 = call i32 @Perl_grok_number(i8* %add.ptr, i64 %78, i64* %value)
  store i32 %call88, i32* %numtype, align 4
  %79 = load i32, i32* %numtype, align 4
  %and89 = and i32 %79, 5
  %cmp90 = icmp eq i32 %and89, 1
  br i1 %cmp90, label %if.then92, label %if.else101

if.then92:                                        ; preds = %if.then86
  %80 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags93 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags93, align 4
  %and94 = and i32 %81, 255
  %cmp95 = icmp ult i32 %and94, 5
  br i1 %cmp95, label %if.then97, label %if.end98

if.then97:                                        ; preds = %if.then92
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %82, i32 5)
  br label %if.end98

if.end98:                                         ; preds = %if.then97, %if.then92
  %83 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags99 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags99, align 4
  %or100 = or i32 %84, 4352
  store i32 %or100, i32* %sv_flags99, align 4
  br label %if.end108

if.else101:                                       ; preds = %if.then86
  %85 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags102 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags102, align 4
  %and103 = and i32 %86, 255
  %cmp104 = icmp ult i32 %and103, 6
  br i1 %cmp104, label %if.then106, label %if.end107

if.then106:                                       ; preds = %if.else101
  %87 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %87, i32 6)
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.else101
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %if.end98
  %88 = load i32, i32* %numtype, align 4
  %and109 = and i32 %88, 48
  %tobool110 = icmp ne i32 %and109, 0
  br i1 %tobool110, label %if.then111, label %if.end119

if.then111:                                       ; preds = %if.end108
  %call112 = call zeroext i1 @Perl_ckwarn(i32 13)
  br i1 %call112, label %land.lhs.true114, label %if.end118

land.lhs.true114:                                 ; preds = %if.then111
  %89 = load i32, i32* %numtype, align 4
  %and115 = and i32 %89, 64
  %tobool116 = icmp ne i32 %and115, 0
  br i1 %tobool116, label %if.then117, label %if.end118

if.then117:                                       ; preds = %land.lhs.true114
  %90 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_a_number(%struct.sv* %90)
  br label %if.end118

if.end118:                                        ; preds = %if.then117, %land.lhs.true114, %if.then111
  %91 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %92 = load i32, i32* %numtype, align 4
  call void @S_sv_setnv(%struct.sv* %91, i32 %92)
  store i1 false, i1* %retval, align 1
  br label %return

if.end119:                                        ; preds = %if.end108
  %93 = load i32, i32* %numtype, align 4
  %and120 = and i32 %93, 1
  %cmp121 = icmp eq i32 %and120, 1
  br i1 %cmp121, label %if.then123, label %if.end188

if.then123:                                       ; preds = %if.end119
  %94 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags124 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags124, align 4
  %or125 = or i32 %95, 4096
  store i32 %or125, i32* %sv_flags124, align 4
  %96 = load i32, i32* %numtype, align 4
  %and126 = and i32 %96, 8
  %tobool127 = icmp ne i32 %and126, 0
  br i1 %tobool127, label %if.else146, label %if.then128

if.then128:                                       ; preds = %if.then123
  %97 = load i64, i64* %value, align 8
  %cmp129 = icmp ule i64 %97, 9223372036854775807
  br i1 %cmp129, label %if.then131, label %if.else137

if.then131:                                       ; preds = %if.then128
  br label %do.body132

do.body132:                                       ; preds = %if.then131
  %98 = load i64, i64* %value, align 8
  %99 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any133 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 0
  %100 = load i8*, i8** %sv_any133, align 8
  %101 = bitcast i8* %100 to %struct.xpviv*
  %xiv_u134 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %101, i32 0, i32 4
  %xivu_iv135 = bitcast %union._xivu* %xiv_u134 to i64*
  store i64 %98, i64* %xivu_iv135, align 8
  br label %do.end136

do.end136:                                        ; preds = %do.body132
  br label %if.end145

if.else137:                                       ; preds = %if.then128
  br label %do.body138

do.body138:                                       ; preds = %if.else137
  %102 = load i64, i64* %value, align 8
  %103 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any139 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 0
  %104 = load i8*, i8** %sv_any139, align 8
  %105 = bitcast i8* %104 to %struct.xpvuv*
  %xuv_u140 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %105, i32 0, i32 4
  %xivu_uv141 = bitcast %union._xivu* %xuv_u140 to i64*
  store i64 %102, i64* %xivu_uv141, align 8
  br label %do.end142

do.end142:                                        ; preds = %do.body138
  %106 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags143 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 2
  %107 = load i32, i32* %sv_flags143, align 4
  %or144 = or i32 %107, -2147483648
  store i32 %or144, i32* %sv_flags143, align 4
  br label %if.end145

if.end145:                                        ; preds = %do.end142, %do.end136
  br label %if.end187

if.else146:                                       ; preds = %if.then123
  %108 = load i64, i64* %value, align 8
  %cmp147 = icmp ule i64 %108, -9223372036854775808
  br i1 %cmp147, label %if.then149, label %if.else162

if.then149:                                       ; preds = %if.else146
  br label %do.body150

do.body150:                                       ; preds = %if.then149
  %109 = load i64, i64* %value, align 8
  %cmp151 = icmp eq i64 %109, -9223372036854775808
  br i1 %cmp151, label %cond.true153, label %cond.false154

cond.true153:                                     ; preds = %do.body150
  br label %cond.end156

cond.false154:                                    ; preds = %do.body150
  %110 = load i64, i64* %value, align 8
  %sub155 = sub nsw i64 0, %110
  br label %cond.end156

cond.end156:                                      ; preds = %cond.false154, %cond.true153
  %cond157 = phi i64 [ -9223372036854775808, %cond.true153 ], [ %sub155, %cond.false154 ]
  %111 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any158 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 0
  %112 = load i8*, i8** %sv_any158, align 8
  %113 = bitcast i8* %112 to %struct.xpviv*
  %xiv_u159 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %113, i32 0, i32 4
  %xivu_iv160 = bitcast %union._xivu* %xiv_u159 to i64*
  store i64 %cond157, i64* %xivu_iv160, align 8
  br label %do.end161

do.end161:                                        ; preds = %cond.end156
  br label %if.end186

if.else162:                                       ; preds = %if.else146
  %114 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags163 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags163, align 4
  %and164 = and i32 %115, 255
  %cmp165 = icmp ult i32 %and164, 6
  br i1 %cmp165, label %if.then167, label %if.end168

if.then167:                                       ; preds = %if.else162
  %116 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %116, i32 6)
  br label %if.end168

if.end168:                                        ; preds = %if.then167, %if.else162
  %117 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags169 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags169, align 4
  %or170 = or i32 %118, 8704
  store i32 %or170, i32* %sv_flags169, align 4
  %119 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags171 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags171, align 4
  %and172 = and i32 %120, 2147479295
  store i32 %and172, i32* %sv_flags171, align 4
  %121 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags173 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags173, align 4
  %or174 = or i32 %122, 4096
  store i32 %or174, i32* %sv_flags173, align 4
  br label %do.body175

do.body175:                                       ; preds = %if.end168
  %123 = load i64, i64* %value, align 8
  %conv176 = uitofp i64 %123 to double
  %fneg = fneg double %conv176
  %124 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any177 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 0
  %125 = load i8*, i8** %sv_any177, align 8
  %126 = bitcast i8* %125 to %struct.xpvnv*
  %xnv_u178 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %126, i32 0, i32 5
  %xnv_nv179 = bitcast %union._xnvu* %xnv_u178 to double*
  store double %fneg, double* %xnv_nv179, align 8
  br label %do.end180

do.end180:                                        ; preds = %do.body175
  br label %do.body181

do.body181:                                       ; preds = %do.end180
  %127 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any182 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 0
  %128 = load i8*, i8** %sv_any182, align 8
  %129 = bitcast i8* %128 to %struct.xpviv*
  %xiv_u183 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %129, i32 0, i32 4
  %xivu_iv184 = bitcast %union._xivu* %xiv_u183 to i64*
  store i64 -9223372036854775808, i64* %xivu_iv184, align 8
  br label %do.end185

do.end185:                                        ; preds = %do.body181
  br label %if.end186

if.end186:                                        ; preds = %do.end185, %do.end161
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %if.end145
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.end119
  %130 = load i32, i32* %numtype, align 4
  %and189 = and i32 %130, 5
  %cmp190 = icmp ne i32 %and189, 1
  br i1 %cmp190, label %if.then192, label %if.end289

if.then192:                                       ; preds = %if.end188
  %131 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %132 = load i32, i32* %numtype, align 4
  call void @S_sv_setnv(%struct.sv* %131, i32 %132)
  %133 = load i32, i32* %numtype, align 4
  %tobool193 = icmp ne i32 %133, 0
  br i1 %tobool193, label %if.end198, label %land.lhs.true194

land.lhs.true194:                                 ; preds = %if.then192
  %call195 = call zeroext i1 @Perl_ckwarn(i32 13)
  br i1 %call195, label %if.then197, label %if.end198

if.then197:                                       ; preds = %land.lhs.true194
  %134 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_a_number(%struct.sv* %134)
  br label %if.end198

if.end198:                                        ; preds = %if.then197, %land.lhs.true194, %if.then192
  %135 = load i32, i32* %numtype, align 4
  %and199 = and i32 %135, 5
  %cmp200 = icmp eq i32 %and199, 5
  br i1 %cmp200, label %if.then202, label %if.else205

if.then202:                                       ; preds = %if.end198
  %136 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags203 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 2
  %137 = load i32, i32* %sv_flags203, align 4
  %or204 = or i32 %137, 8704
  store i32 %or204, i32* %sv_flags203, align 4
  br label %if.end283

if.else205:                                       ; preds = %if.end198
  %138 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any206 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 0
  %139 = load i8*, i8** %sv_any206, align 8
  %140 = bitcast i8* %139 to %struct.xpvnv*
  %xnv_u207 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %140, i32 0, i32 5
  %xnv_nv208 = bitcast %union._xnvu* %xnv_u207 to double*
  %141 = load double, double* %xnv_nv208, align 8
  %cmp209 = fcmp ogt double %141, 0.000000e+00
  br i1 %cmp209, label %cond.true211, label %cond.false215

cond.true211:                                     ; preds = %if.else205
  %142 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any212 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 0
  %143 = load i8*, i8** %sv_any212, align 8
  %144 = bitcast i8* %143 to %struct.xpvnv*
  %xnv_u213 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %144, i32 0, i32 5
  %xnv_nv214 = bitcast %union._xnvu* %xnv_u213 to double*
  %145 = load double, double* %xnv_nv214, align 8
  br label %cond.end220

cond.false215:                                    ; preds = %if.else205
  %146 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any216 = getelementptr inbounds %struct.sv, %struct.sv* %146, i32 0, i32 0
  %147 = load i8*, i8** %sv_any216, align 8
  %148 = bitcast i8* %147 to %struct.xpvnv*
  %xnv_u217 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %148, i32 0, i32 5
  %xnv_nv218 = bitcast %union._xnvu* %xnv_u217 to double*
  %149 = load double, double* %xnv_nv218, align 8
  %fneg219 = fneg double %149
  br label %cond.end220

cond.end220:                                      ; preds = %cond.false215, %cond.true211
  %cond221 = phi double [ %145, %cond.true211 ], [ %fneg219, %cond.false215 ]
  %call222 = call i64 @Perl_cast_uv(double %cond221)
  %cmp223 = icmp ugt i64 9007199254740992, %call222
  br i1 %cmp223, label %if.then225, label %if.else280

if.then225:                                       ; preds = %cond.end220
  %150 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags226 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 2
  %151 = load i32, i32* %sv_flags226, align 4
  %or227 = or i32 %151, 4096
  store i32 %or227, i32* %sv_flags226, align 4
  %152 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags228 = getelementptr inbounds %struct.sv, %struct.sv* %152, i32 0, i32 2
  %153 = load i32, i32* %sv_flags228, align 4
  %or229 = or i32 %153, 8704
  store i32 %or229, i32* %sv_flags228, align 4
  br label %do.body230

do.body230:                                       ; preds = %if.then225
  %154 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any231 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 0
  %155 = load i8*, i8** %sv_any231, align 8
  %156 = bitcast i8* %155 to %struct.xpvnv*
  %xnv_u232 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %156, i32 0, i32 5
  %xnv_nv233 = bitcast %union._xnvu* %xnv_u232 to double*
  %157 = load double, double* %xnv_nv233, align 8
  %call234 = call i64 @Perl_cast_iv(double %157)
  %158 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any235 = getelementptr inbounds %struct.sv, %struct.sv* %158, i32 0, i32 0
  %159 = load i8*, i8** %sv_any235, align 8
  %160 = bitcast i8* %159 to %struct.xpviv*
  %xiv_u236 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %160, i32 0, i32 4
  %xivu_iv237 = bitcast %union._xivu* %xiv_u236 to i64*
  store i64 %call234, i64* %xivu_iv237, align 8
  br label %do.end238

do.end238:                                        ; preds = %do.body230
  %161 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any239 = getelementptr inbounds %struct.sv, %struct.sv* %161, i32 0, i32 0
  %162 = load i8*, i8** %sv_any239, align 8
  %163 = bitcast i8* %162 to %struct.xpviv*
  %xiv_u240 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %163, i32 0, i32 4
  %xivu_iv241 = bitcast %union._xivu* %xiv_u240 to i64*
  %164 = load i64, i64* %xivu_iv241, align 8
  %conv242 = sitofp i64 %164 to double
  %165 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any243 = getelementptr inbounds %struct.sv, %struct.sv* %165, i32 0, i32 0
  %166 = load i8*, i8** %sv_any243, align 8
  %167 = bitcast i8* %166 to %struct.xpvnv*
  %xnv_u244 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %167, i32 0, i32 5
  %xnv_nv245 = bitcast %union._xnvu* %xnv_u244 to double*
  %168 = load double, double* %xnv_nv245, align 8
  %cmp246 = fcmp oeq double %conv242, %168
  br i1 %cmp246, label %if.then248, label %if.end251

if.then248:                                       ; preds = %do.end238
  %169 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags249 = getelementptr inbounds %struct.sv, %struct.sv* %169, i32 0, i32 2
  %170 = load i32, i32* %sv_flags249, align 4
  %or250 = or i32 %170, 4352
  store i32 %or250, i32* %sv_flags249, align 4
  br label %if.end251

if.end251:                                        ; preds = %if.then248, %do.end238
  %171 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any252 = getelementptr inbounds %struct.sv, %struct.sv* %171, i32 0, i32 0
  %172 = load i8*, i8** %sv_any252, align 8
  %173 = bitcast i8* %172 to %struct.xpvnv*
  %xnv_u253 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %173, i32 0, i32 5
  %xnv_nv254 = bitcast %union._xnvu* %xnv_u253 to double*
  %174 = load double, double* %xnv_nv254, align 8
  %cmp255 = fcmp ogt double %174, 0.000000e+00
  br i1 %cmp255, label %cond.true257, label %cond.false261

cond.true257:                                     ; preds = %if.end251
  %175 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any258 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 0
  %176 = load i8*, i8** %sv_any258, align 8
  %177 = bitcast i8* %176 to %struct.xpvnv*
  %xnv_u259 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %177, i32 0, i32 5
  %xnv_nv260 = bitcast %union._xnvu* %xnv_u259 to double*
  %178 = load double, double* %xnv_nv260, align 8
  br label %cond.end266

cond.false261:                                    ; preds = %if.end251
  %179 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any262 = getelementptr inbounds %struct.sv, %struct.sv* %179, i32 0, i32 0
  %180 = load i8*, i8** %sv_any262, align 8
  %181 = bitcast i8* %180 to %struct.xpvnv*
  %xnv_u263 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %181, i32 0, i32 5
  %xnv_nv264 = bitcast %union._xnvu* %xnv_u263 to double*
  %182 = load double, double* %xnv_nv264, align 8
  %fneg265 = fneg double %182
  br label %cond.end266

cond.end266:                                      ; preds = %cond.false261, %cond.true257
  %cond267 = phi double [ %178, %cond.true257 ], [ %fneg265, %cond.false261 ]
  %call268 = call i64 @Perl_cast_uv(double %cond267)
  %cmp269 = icmp ult i64 %call268, 9223372036854775807
  br i1 %cmp269, label %if.end279, label %if.then271

if.then271:                                       ; preds = %cond.end266
  %183 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any272 = getelementptr inbounds %struct.sv, %struct.sv* %183, i32 0, i32 0
  %184 = load i8*, i8** %sv_any272, align 8
  %185 = bitcast i8* %184 to %struct.xpvnv*
  %xnv_u273 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %185, i32 0, i32 5
  %xnv_nv274 = bitcast %union._xnvu* %xnv_u273 to double*
  %186 = load double, double* %xnv_nv274, align 8
  %187 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any275 = getelementptr inbounds %struct.sv, %struct.sv* %187, i32 0, i32 0
  %188 = load i8*, i8** %sv_any275, align 8
  %189 = bitcast i8* %188 to %struct.xpvnv*
  %xnv_u276 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %189, i32 0, i32 5
  %xnv_nv277 = bitcast %union._xnvu* %xnv_u276 to double*
  %190 = load double, double* %xnv_nv277, align 8
  %call278 = call i64 @Perl_cast_uv(double %190)
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.94, i64 0, i64 0), double %186, i64 %call278, i64 9223372036854775807)
  br label %if.end279

if.end279:                                        ; preds = %if.then271, %cond.end266
  br label %if.end282

if.else280:                                       ; preds = %cond.end220
  %191 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call281 = call i32 @S_sv_2iuv_non_preserve(%struct.sv* %191)
  br label %if.end282

if.end282:                                        ; preds = %if.else280, %if.end279
  br label %if.end283

if.end283:                                        ; preds = %if.end282, %if.then202
  %192 = load i32, i32* %numtype, align 4
  %tobool284 = icmp ne i32 %192, 0
  br i1 %tobool284, label %if.end288, label %if.then285

if.then285:                                       ; preds = %if.end283
  %193 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags286 = getelementptr inbounds %struct.sv, %struct.sv* %193, i32 0, i32 2
  %194 = load i32, i32* %sv_flags286, align 4
  %and287 = and i32 %194, -769
  store i32 %and287, i32* %sv_flags286, align 4
  br label %if.end288

if.end288:                                        ; preds = %if.then285, %if.end283
  br label %if.end289

if.end289:                                        ; preds = %if.end288, %if.end188
  br label %if.end319

if.else290:                                       ; preds = %if.else82
  %195 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags291 = getelementptr inbounds %struct.sv, %struct.sv* %195, i32 0, i32 2
  %196 = load i32, i32* %sv_flags291, align 4
  %and292 = and i32 %196, 49152
  %cmp293 = icmp eq i32 %and292, 32768
  br i1 %cmp293, label %land.lhs.true295, label %if.end306

land.lhs.true295:                                 ; preds = %if.else290
  %197 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags296 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 2
  %198 = load i32, i32* %sv_flags296, align 4
  %and297 = and i32 %198, 255
  %cmp298 = icmp eq i32 %and297, 9
  br i1 %cmp298, label %if.then304, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true295
  %199 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags300 = getelementptr inbounds %struct.sv, %struct.sv* %199, i32 0, i32 2
  %200 = load i32, i32* %sv_flags300, align 4
  %and301 = and i32 %200, 255
  %cmp302 = icmp eq i32 %and301, 10
  br i1 %cmp302, label %if.then304, label %if.end306

if.then304:                                       ; preds = %lor.lhs.false, %land.lhs.true295
  %201 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %202 = bitcast %struct.sv* %201 to i8*
  %203 = bitcast i8* %202 to %struct.gv*
  %call305 = call zeroext i1 @S_glob_2number(%struct.gv* %203)
  store i1 %call305, i1* %retval, align 1
  br label %return

if.end306:                                        ; preds = %lor.lhs.false, %if.else290
  %204 = load i8, i8* @PL_localizing, align 1
  %tobool307 = icmp ne i8 %204, 0
  br i1 %tobool307, label %if.end312, label %land.lhs.true308

land.lhs.true308:                                 ; preds = %if.end306
  %call309 = call zeroext i1 @Perl_ckwarn(i32 41)
  br i1 %call309, label %if.then311, label %if.end312

if.then311:                                       ; preds = %land.lhs.true308
  %205 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_report_uninit(%struct.sv* %205)
  br label %if.end312

if.end312:                                        ; preds = %if.then311, %land.lhs.true308, %if.end306
  %206 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags313 = getelementptr inbounds %struct.sv, %struct.sv* %206, i32 0, i32 2
  %207 = load i32, i32* %sv_flags313, align 4
  %and314 = and i32 %207, 255
  %cmp315 = icmp ult i32 %and314, 1
  br i1 %cmp315, label %if.then317, label %if.end318

if.then317:                                       ; preds = %if.end312
  %208 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %208, i32 1)
  br label %if.end318

if.end318:                                        ; preds = %if.then317, %if.end312
  store i1 true, i1* %retval, align 1
  br label %return

if.end319:                                        ; preds = %if.end289
  br label %if.end320

if.end320:                                        ; preds = %if.end319, %if.end81
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end320, %if.end318, %if.then304, %if.end118
  %209 = load i1, i1* %retval, align 1
  ret i1 %209
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @Perl_sv_2uv_flags(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %tmpstr = alloca %struct.sv*, align 8
  %value = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %numtype = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %flags.addr, align 4
  %and1 = and i32 %2, 2
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 2048
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then6, label %if.end45

if.then6:                                         ; preds = %if.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %7, 2048
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end42

land.lhs.true10:                                  ; preds = %if.then6
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %9 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %10, 1048576
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %land.lhs.true14, label %if.end42

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u15 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 3
  %svu_rv16 = bitcast %union.anon* %sv_u15 to %struct.sv**
  %12 = load %struct.sv*, %struct.sv** %svu_rv16, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any, align 8
  %14 = bitcast i8* %13 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %14, i32 0, i32 0
  %15 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags17 = getelementptr inbounds %struct.hv, %struct.hv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %16, 268435456
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.then20, label %if.end42

if.then20:                                        ; preds = %land.lhs.true14
  %17 = load i32, i32* %flags.addr, align 4
  %and21 = and i32 %17, 8192
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.then20
  store i64 0, i64* %retval, align 8
  br label %return

if.end24:                                         ; preds = %if.then20
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call25 = call %struct.sv* @Perl_amagic_call(%struct.sv* %18, %struct.sv* @PL_sv_undef, i32 9, i32 9)
  store %struct.sv* %call25, %struct.sv** %tmpstr, align 8
  %19 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %tobool26 = icmp ne %struct.sv* %19, null
  br i1 %tobool26, label %land.lhs.true27, label %if.end41

land.lhs.true27:                                  ; preds = %if.end24
  %20 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %21, 2048
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %lor.lhs.false, label %if.then35

lor.lhs.false:                                    ; preds = %land.lhs.true27
  %22 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_u31 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_rv32 = bitcast %union.anon* %sv_u31 to %struct.sv**
  %23 = load %struct.sv*, %struct.sv** %svu_rv32, align 8
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u33 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 3
  %svu_rv34 = bitcast %union.anon* %sv_u33 to %struct.sv**
  %25 = load %struct.sv*, %struct.sv** %svu_rv34, align 8
  %cmp = icmp ne %struct.sv* %23, %25
  br i1 %cmp, label %if.then35, label %if.end41

if.then35:                                        ; preds = %lor.lhs.false, %land.lhs.true27
  %26 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %27, -2145386240
  %cmp38 = icmp eq i32 %and37, -2147483392
  br i1 %cmp38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then35
  %28 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any39 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any39, align 8
  %30 = bitcast i8* %29 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %30, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %31 = load i64, i64* %xivu_uv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then35
  %32 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call40 = call i64 @Perl_sv_2uv_flags(%struct.sv* %32, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %31, %cond.true ], [ %call40, %cond.false ]
  store i64 %cond, i64* %retval, align 8
  br label %return

if.end41:                                         ; preds = %lor.lhs.false, %if.end24
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %land.lhs.true14, %land.lhs.true10, %if.then6
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u43 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 3
  %svu_rv44 = bitcast %union.anon* %sv_u43 to %struct.sv**
  %34 = load %struct.sv*, %struct.sv** %svu_rv44, align 8
  %35 = ptrtoint %struct.sv* %34 to i64
  store i64 %35, i64* %retval, align 8
  br label %return

if.end45:                                         ; preds = %if.end
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %37, 1073741824
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %land.lhs.true49, label %lor.lhs.false53

land.lhs.true49:                                  ; preds = %if.end45
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags50 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags50, align 4
  %and51 = and i32 %39, 49152
  %cmp52 = icmp eq i32 %and51, 49152
  br i1 %cmp52, label %lor.lhs.false53, label %if.then61

lor.lhs.false53:                                  ; preds = %land.lhs.true49, %if.end45
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %41, 255
  %cmp56 = icmp eq i32 %and55, 8
  br i1 %cmp56, label %if.then61, label %lor.lhs.false57

lor.lhs.false57:                                  ; preds = %lor.lhs.false53
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags58, align 4
  %and59 = and i32 %43, 16826623
  %cmp60 = icmp eq i32 %and59, 16777226
  br i1 %cmp60, label %if.then61, label %if.end101

if.then61:                                        ; preds = %lor.lhs.false57, %lor.lhs.false53, %land.lhs.true49
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %45, 255
  %cmp64 = icmp eq i32 %and63, 8
  br i1 %cmp64, label %cond.true69, label %lor.lhs.false65

lor.lhs.false65:                                  ; preds = %if.then61
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %47, 16826623
  %cmp68 = icmp eq i32 %and67, 16777226
  br i1 %cmp68, label %cond.true69, label %cond.false71

cond.true69:                                      ; preds = %lor.lhs.false65, %if.then61
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %49 = bitcast %struct.sv* %48 to %struct.p5rx*
  %call70 = call %struct.regexp* @S_ReANY(%struct.p5rx* %49)
  %xpv_len_u = getelementptr inbounds %struct.regexp, %struct.regexp* %call70, i32 0, i32 3
  %xpvlenu_pv = bitcast %union.anon.14* %xpv_len_u to i8**
  %50 = load i8*, i8** %xpvlenu_pv, align 8
  br label %cond.end73

cond.false71:                                     ; preds = %lor.lhs.false65
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u72 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u72 to i8**
  %52 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %52, i64 0
  br label %cond.end73

cond.end73:                                       ; preds = %cond.false71, %cond.true69
  %cond74 = phi i8* [ %50, %cond.true69 ], [ %add.ptr, %cond.false71 ]
  store i8* %cond74, i8** %ptr, align 8
  %53 = load i8*, i8** %ptr, align 8
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any75 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any75, align 8
  %56 = bitcast i8* %55 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %56, i32 0, i32 2
  %57 = load i64, i64* %xpv_cur, align 8
  %call76 = call i32 @Perl_grok_number(i8* %53, i64 %57, i64* %value)
  store i32 %call76, i32* %numtype, align 4
  %58 = load i32, i32* %numtype, align 4
  %and77 = and i32 %58, 5
  %cmp78 = icmp eq i32 %and77, 1
  br i1 %cmp78, label %if.then79, label %if.end84

if.then79:                                        ; preds = %cond.end73
  %59 = load i32, i32* %numtype, align 4
  %and80 = and i32 %59, 8
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %if.end83, label %if.then82

if.then82:                                        ; preds = %if.then79
  %60 = load i64, i64* %value, align 8
  store i64 %60, i64* %retval, align 8
  br label %return

if.end83:                                         ; preds = %if.then79
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %cond.end73
  %61 = load i32, i32* %numtype, align 4
  %and85 = and i32 %61, 16
  %tobool86 = icmp ne i32 %and85, 0
  br i1 %tobool86, label %if.then87, label %if.else

if.then87:                                        ; preds = %if.end84
  store i64 -1, i64* %retval, align 8
  br label %return

if.else:                                          ; preds = %if.end84
  %62 = load i32, i32* %numtype, align 4
  %and88 = and i32 %62, 32
  %tobool89 = icmp ne i32 %and88, 0
  br i1 %tobool89, label %if.then90, label %if.end91

if.then90:                                        ; preds = %if.else
  store i64 0, i64* %retval, align 8
  br label %return

if.end91:                                         ; preds = %if.else
  br label %if.end92

if.end92:                                         ; preds = %if.end91
  %63 = load i32, i32* %numtype, align 4
  %tobool93 = icmp ne i32 %63, 0
  br i1 %tobool93, label %if.end98, label %if.then94

if.then94:                                        ; preds = %if.end92
  %call95 = call zeroext i1 @Perl_ckwarn(i32 13)
  br i1 %call95, label %if.then96, label %if.end97

if.then96:                                        ; preds = %if.then94
  %64 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_a_number(%struct.sv* %64)
  br label %if.end97

if.end97:                                         ; preds = %if.then96, %if.then94
  br label %if.end98

if.end98:                                         ; preds = %if.end97, %if.end92
  %65 = load i8*, i8** %ptr, align 8
  %call99 = call double @Perl_my_atof(i8* %65)
  %call100 = call i64 @Perl_cast_uv(double %call99)
  store i64 %call100, i64* %retval, align 8
  br label %return

if.end101:                                        ; preds = %lor.lhs.false57
  %66 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags102 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags102, align 4
  %and103 = and i32 %67, 427886592
  %tobool104 = icmp ne i32 %and103, 0
  br i1 %tobool104, label %if.then105, label %if.end126

if.then105:                                       ; preds = %if.end101
  %68 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags106 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags106, align 4
  %and107 = and i32 %69, 134283264
  %tobool108 = icmp ne i32 %and107, 0
  br i1 %tobool108, label %land.lhs.true109, label %if.end125

land.lhs.true109:                                 ; preds = %if.then105
  %70 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags110 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags110, align 4
  %and111 = and i32 %71, 65280
  %tobool112 = icmp ne i32 %and111, 0
  br i1 %tobool112, label %if.end125, label %lor.lhs.false113

lor.lhs.false113:                                 ; preds = %land.lhs.true109
  %72 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags114 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags114, align 4
  %and115 = and i32 %73, 255
  %cmp116 = icmp eq i32 %and115, 8
  br i1 %cmp116, label %if.end125, label %lor.lhs.false117

lor.lhs.false117:                                 ; preds = %lor.lhs.false113
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags118 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags118, align 4
  %and119 = and i32 %75, 16826623
  %cmp120 = icmp eq i32 %and119, 16777226
  br i1 %cmp120, label %if.end125, label %if.then121

if.then121:                                       ; preds = %lor.lhs.false117
  %call122 = call zeroext i1 @Perl_ckwarn(i32 41)
  br i1 %call122, label %if.then123, label %if.end124

if.then123:                                       ; preds = %if.then121
  %76 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_report_uninit(%struct.sv* %76)
  br label %if.end124

if.end124:                                        ; preds = %if.then123, %if.then121
  store i64 0, i64* %retval, align 8
  br label %return

if.end125:                                        ; preds = %lor.lhs.false117, %lor.lhs.false113, %land.lhs.true109, %if.then105
  br label %if.end126

if.end126:                                        ; preds = %if.end125, %if.end101
  %77 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags127 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags127, align 4
  %and128 = and i32 %78, 4096
  %tobool129 = icmp ne i32 %and128, 0
  br i1 %tobool129, label %if.end134, label %if.then130

if.then130:                                       ; preds = %if.end126
  %79 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call131 = call zeroext i1 @S_sv_2iuv_common(%struct.sv* %79)
  br i1 %call131, label %if.then132, label %if.end133

if.then132:                                       ; preds = %if.then130
  store i64 0, i64* %retval, align 8
  br label %return

if.end133:                                        ; preds = %if.then130
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.end126
  %80 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags135 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags135, align 4
  %and136 = and i32 %81, -2147483648
  %tobool137 = icmp ne i32 %and136, 0
  br i1 %tobool137, label %cond.true138, label %cond.false142

cond.true138:                                     ; preds = %if.end134
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any139 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 0
  %83 = load i8*, i8** %sv_any139, align 8
  %84 = bitcast i8* %83 to %struct.xpvuv*
  %xuv_u140 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %84, i32 0, i32 4
  %xivu_uv141 = bitcast %union._xivu* %xuv_u140 to i64*
  %85 = load i64, i64* %xivu_uv141, align 8
  br label %cond.end144

cond.false142:                                    ; preds = %if.end134
  %86 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any143 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 0
  %87 = load i8*, i8** %sv_any143, align 8
  %88 = bitcast i8* %87 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %88, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %89 = load i64, i64* %xivu_iv, align 8
  br label %cond.end144

cond.end144:                                      ; preds = %cond.false142, %cond.true138
  %cond145 = phi i64 [ %85, %cond.true138 ], [ %89, %cond.false142 ]
  store i64 %cond145, i64* %retval, align 8
  br label %return

return:                                           ; preds = %cond.end144, %if.then132, %if.end124, %if.end98, %if.then90, %if.then87, %if.then82, %if.end42, %cond.end, %if.then23
  %90 = load i64, i64* %retval, align 8
  ret i64 %90
}

declare dso_local i64 @Perl_cast_uv(double) #1

; Function Attrs: noinline nounwind uwtable
define dso_local double @Perl_sv_2nv_flags(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %retval = alloca double, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %value = alloca i64, align 8
  %numtype = alloca i32, align 4
  %nv = alloca double, align 8
  %nv_as_uv = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 1073741824
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.lhs.true, label %lor.lhs.false6

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %5, 49152
  %cmp = icmp eq i32 %and5, 49152
  br i1 %cmp, label %lor.lhs.false6, label %if.then

lor.lhs.false6:                                   ; preds = %land.lhs.true, %lor.lhs.false
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %7, 255
  %cmp9 = icmp eq i32 %and8, 8
  br i1 %cmp9, label %if.then, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %9, 16826623
  %cmp13 = icmp eq i32 %and12, 16777226
  br i1 %cmp13, label %if.then, label %if.else72

if.then:                                          ; preds = %lor.lhs.false10, %lor.lhs.false6, %land.lhs.true, %entry
  %10 = load i32, i32* %flags.addr, align 4
  %and14 = and i32 %10, 2
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then16, label %if.end

if.then16:                                        ; preds = %if.then
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %11)
  br label %if.end

if.end:                                           ; preds = %if.then16, %if.then
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %13, 8192
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %16, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %17 = load double, double* %xnv_nv, align 8
  store double %17, double* %retval, align 8
  br label %return

if.end21:                                         ; preds = %if.end
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %19, 16384
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %land.lhs.true25, label %if.end42

land.lhs.true25:                                  ; preds = %if.end21
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %21, 4096
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.end42, label %if.then29

if.then29:                                        ; preds = %land.lhs.true25
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %23 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %23, i64 0
  store i8* %add.ptr, i8** %ptr, align 8
  br label %grokpv

grokpv:                                           ; preds = %if.then69, %if.then29
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %25, 4096
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %if.end40, label %land.lhs.true33

land.lhs.true33:                                  ; preds = %grokpv
  %call34 = call zeroext i1 @Perl_ckwarn(i32 13)
  br i1 %call34, label %land.lhs.true35, label %if.end40

land.lhs.true35:                                  ; preds = %land.lhs.true33
  %26 = load i8*, i8** %ptr, align 8
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any36 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any36, align 8
  %29 = bitcast i8* %28 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %29, i32 0, i32 2
  %30 = load i64, i64* %xpv_cur, align 8
  %call37 = call i32 @Perl_grok_number(i8* %26, i64 %30, i64* null)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end40, label %if.then39

if.then39:                                        ; preds = %land.lhs.true35
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_a_number(%struct.sv* %31)
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %land.lhs.true35, %land.lhs.true33, %grokpv
  %32 = load i8*, i8** %ptr, align 8
  %call41 = call double @Perl_my_atof(i8* %32)
  store double %call41, double* %retval, align 8
  br label %return

if.end42:                                         ; preds = %land.lhs.true25, %if.end21
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %34, 4096
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %if.then46, label %if.end54

if.then46:                                        ; preds = %if.end42
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags47 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %36, -2147483648
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %if.then50, label %if.else

if.then50:                                        ; preds = %if.then46
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any51 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any51, align 8
  %39 = bitcast i8* %38 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %39, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %40 = load i64, i64* %xivu_uv, align 8
  %conv = uitofp i64 %40 to double
  store double %conv, double* %retval, align 8
  br label %return

if.else:                                          ; preds = %if.then46
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any52 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any52, align 8
  %43 = bitcast i8* %42 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %43, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %44 = load i64, i64* %xivu_iv, align 8
  %conv53 = sitofp i64 %44 to double
  store double %conv53, double* %retval, align 8
  br label %return

if.end54:                                         ; preds = %if.end42
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags55 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags55, align 4
  %and56 = and i32 %46, 2048
  %tobool57 = icmp ne i32 %and56, 0
  br i1 %tobool57, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.end54
  br label %return_rok

if.end59:                                         ; preds = %if.end54
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %48, 255
  %cmp62 = icmp eq i32 %and61, 8
  br i1 %cmp62, label %if.then69, label %lor.lhs.false64

lor.lhs.false64:                                  ; preds = %if.end59
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %50, 16826623
  %cmp67 = icmp eq i32 %and66, 16777226
  br i1 %cmp67, label %if.then69, label %if.end71

if.then69:                                        ; preds = %lor.lhs.false64, %if.end59
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %52 = bitcast %struct.sv* %51 to %struct.p5rx*
  %call70 = call %struct.regexp* @S_ReANY(%struct.p5rx* %52)
  %xpv_len_u = getelementptr inbounds %struct.regexp, %struct.regexp* %call70, i32 0, i32 3
  %xpvlenu_pv = bitcast %union.anon.14* %xpv_len_u to i8**
  %53 = load i8*, i8** %xpvlenu_pv, align 8
  store i8* %53, i8** %ptr, align 8
  br label %grokpv

if.end71:                                         ; preds = %lor.lhs.false64
  br label %if.end152

if.else72:                                        ; preds = %lor.lhs.false10
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags73 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags73, align 4
  %and74 = and i32 %55, 427886592
  %tobool75 = icmp ne i32 %and74, 0
  br i1 %tobool75, label %if.then76, label %if.end151

if.then76:                                        ; preds = %if.else72
  %56 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags77 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags77, align 4
  %and78 = and i32 %57, 2048
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %if.then80, label %if.end128

if.then80:                                        ; preds = %if.then76
  br label %return_rok

return_rok:                                       ; preds = %if.then80, %if.then58
  %58 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %59, 2048
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %land.lhs.true84, label %if.end124

land.lhs.true84:                                  ; preds = %return_rok
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u85 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u85 to %struct.sv**
  %61 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags86 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags86, align 4
  %and87 = and i32 %62, 1048576
  %tobool88 = icmp ne i32 %and87, 0
  br i1 %tobool88, label %land.lhs.true89, label %if.end124

land.lhs.true89:                                  ; preds = %land.lhs.true84
  %63 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u90 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 3
  %svu_rv91 = bitcast %union.anon* %sv_u90 to %struct.sv**
  %64 = load %struct.sv*, %struct.sv** %svu_rv91, align 8
  %sv_any92 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any92, align 8
  %66 = bitcast i8* %65 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %66, i32 0, i32 0
  %67 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags93 = getelementptr inbounds %struct.hv, %struct.hv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags93, align 4
  %and94 = and i32 %68, 268435456
  %tobool95 = icmp ne i32 %and94, 0
  br i1 %tobool95, label %if.then96, label %if.end124

if.then96:                                        ; preds = %land.lhs.true89
  %69 = load i32, i32* %flags.addr, align 4
  %and97 = and i32 %69, 8192
  %tobool98 = icmp ne i32 %and97, 0
  br i1 %tobool98, label %if.then99, label %if.end100

if.then99:                                        ; preds = %if.then96
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end100:                                        ; preds = %if.then96
  %70 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call101 = call %struct.sv* @Perl_amagic_call(%struct.sv* %70, %struct.sv* @PL_sv_undef, i32 9, i32 9)
  store %struct.sv* %call101, %struct.sv** %tmpstr, align 8
  %71 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %tobool102 = icmp ne %struct.sv* %71, null
  br i1 %tobool102, label %land.lhs.true103, label %if.end123

land.lhs.true103:                                 ; preds = %if.end100
  %72 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags104 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags104, align 4
  %and105 = and i32 %73, 2048
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %lor.lhs.false107, label %if.then114

lor.lhs.false107:                                 ; preds = %land.lhs.true103
  %74 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_u108 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 3
  %svu_rv109 = bitcast %union.anon* %sv_u108 to %struct.sv**
  %75 = load %struct.sv*, %struct.sv** %svu_rv109, align 8
  %76 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u110 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 3
  %svu_rv111 = bitcast %union.anon* %sv_u110 to %struct.sv**
  %77 = load %struct.sv*, %struct.sv** %svu_rv111, align 8
  %cmp112 = icmp ne %struct.sv* %75, %77
  br i1 %cmp112, label %if.then114, label %if.end123

if.then114:                                       ; preds = %lor.lhs.false107, %land.lhs.true103
  %78 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags115, align 4
  %and116 = and i32 %79, 2097664
  %cmp117 = icmp eq i32 %and116, 512
  br i1 %cmp117, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then114
  %80 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any119 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 0
  %81 = load i8*, i8** %sv_any119, align 8
  %82 = bitcast i8* %81 to %struct.xpvnv*
  %xnv_u120 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %82, i32 0, i32 5
  %xnv_nv121 = bitcast %union._xnvu* %xnv_u120 to double*
  %83 = load double, double* %xnv_nv121, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then114
  %84 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call122 = call double @Perl_sv_2nv_flags(%struct.sv* %84, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %83, %cond.true ], [ %call122, %cond.false ]
  store double %cond, double* %retval, align 8
  br label %return

if.end123:                                        ; preds = %lor.lhs.false107, %if.end100
  br label %if.end124

if.end124:                                        ; preds = %if.end123, %land.lhs.true89, %land.lhs.true84, %return_rok
  %85 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u125 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 3
  %svu_rv126 = bitcast %union.anon* %sv_u125 to %struct.sv**
  %86 = load %struct.sv*, %struct.sv** %svu_rv126, align 8
  %87 = ptrtoint %struct.sv* %86 to i64
  %conv127 = uitofp i64 %87 to double
  store double %conv127, double* %retval, align 8
  br label %return

if.end128:                                        ; preds = %if.then76
  %88 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags129 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 2
  %89 = load i32, i32* %sv_flags129, align 4
  %and130 = and i32 %89, 134283264
  %tobool131 = icmp ne i32 %and130, 0
  br i1 %tobool131, label %land.lhs.true132, label %if.end150

land.lhs.true132:                                 ; preds = %if.end128
  %90 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags133 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags133, align 4
  %and134 = and i32 %91, 65280
  %tobool135 = icmp ne i32 %and134, 0
  br i1 %tobool135, label %if.end150, label %lor.lhs.false136

lor.lhs.false136:                                 ; preds = %land.lhs.true132
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags137 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags137, align 4
  %and138 = and i32 %93, 255
  %cmp139 = icmp eq i32 %and138, 8
  br i1 %cmp139, label %if.end150, label %lor.lhs.false141

lor.lhs.false141:                                 ; preds = %lor.lhs.false136
  %94 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags142 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags142, align 4
  %and143 = and i32 %95, 16826623
  %cmp144 = icmp eq i32 %and143, 16777226
  br i1 %cmp144, label %if.end150, label %if.then146

if.then146:                                       ; preds = %lor.lhs.false141
  %call147 = call zeroext i1 @Perl_ckwarn(i32 41)
  br i1 %call147, label %if.then148, label %if.end149

if.then148:                                       ; preds = %if.then146
  %96 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_report_uninit(%struct.sv* %96)
  br label %if.end149

if.end149:                                        ; preds = %if.then148, %if.then146
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end150:                                        ; preds = %lor.lhs.false141, %lor.lhs.false136, %land.lhs.true132, %if.end128
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %if.else72
  br label %if.end152

if.end152:                                        ; preds = %if.end151, %if.end71
  %97 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags153 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 2
  %98 = load i32, i32* %sv_flags153, align 4
  %and154 = and i32 %98, 255
  %cmp155 = icmp ult i32 %and154, 2
  br i1 %cmp155, label %if.then157, label %if.else158

if.then157:                                       ; preds = %if.end152
  %99 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %99, i32 2)
  br label %if.end165

if.else158:                                       ; preds = %if.end152
  %100 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags159 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 2
  %101 = load i32, i32* %sv_flags159, align 4
  %and160 = and i32 %101, 255
  %cmp161 = icmp ult i32 %and160, 6
  br i1 %cmp161, label %if.then163, label %if.end164

if.then163:                                       ; preds = %if.else158
  %102 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %102, i32 6)
  br label %if.end164

if.end164:                                        ; preds = %if.then163, %if.else158
  br label %if.end165

if.end165:                                        ; preds = %if.end164, %if.then157
  %103 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags166 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags166, align 4
  %and167 = and i32 %104, 8192
  %tobool168 = icmp ne i32 %and167, 0
  br i1 %tobool168, label %if.then169, label %if.end173

if.then169:                                       ; preds = %if.end165
  %105 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any170 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 0
  %106 = load i8*, i8** %sv_any170, align 8
  %107 = bitcast i8* %106 to %struct.xpvnv*
  %xnv_u171 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %107, i32 0, i32 5
  %xnv_nv172 = bitcast %union._xnvu* %xnv_u171 to double*
  %108 = load double, double* %xnv_nv172, align 8
  store double %108, double* %retval, align 8
  br label %return

if.end173:                                        ; preds = %if.end165
  %109 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags174 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 2
  %110 = load i32, i32* %sv_flags174, align 4
  %and175 = and i32 %110, 4096
  %tobool176 = icmp ne i32 %and175, 0
  br i1 %tobool176, label %if.then177, label %if.else235

if.then177:                                       ; preds = %if.end173
  br label %do.body

do.body:                                          ; preds = %if.then177
  %111 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags178 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 2
  %112 = load i32, i32* %sv_flags178, align 4
  %and179 = and i32 %112, -2147483648
  %tobool180 = icmp ne i32 %and179, 0
  br i1 %tobool180, label %cond.true181, label %cond.false186

cond.true181:                                     ; preds = %do.body
  %113 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any182 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 0
  %114 = load i8*, i8** %sv_any182, align 8
  %115 = bitcast i8* %114 to %struct.xpvuv*
  %xuv_u183 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %115, i32 0, i32 4
  %xivu_uv184 = bitcast %union._xivu* %xuv_u183 to i64*
  %116 = load i64, i64* %xivu_uv184, align 8
  %conv185 = uitofp i64 %116 to double
  br label %cond.end191

cond.false186:                                    ; preds = %do.body
  %117 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any187 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 0
  %118 = load i8*, i8** %sv_any187, align 8
  %119 = bitcast i8* %118 to %struct.xpviv*
  %xiv_u188 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %119, i32 0, i32 4
  %xivu_iv189 = bitcast %union._xivu* %xiv_u188 to i64*
  %120 = load i64, i64* %xivu_iv189, align 8
  %conv190 = sitofp i64 %120 to double
  br label %cond.end191

cond.end191:                                      ; preds = %cond.false186, %cond.true181
  %cond192 = phi double [ %conv185, %cond.true181 ], [ %conv190, %cond.false186 ]
  %121 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any193 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 0
  %122 = load i8*, i8** %sv_any193, align 8
  %123 = bitcast i8* %122 to %struct.xpvnv*
  %xnv_u194 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %123, i32 0, i32 5
  %xnv_nv195 = bitcast %union._xnvu* %xnv_u194 to double*
  store double %cond192, double* %xnv_nv195, align 8
  br label %do.end

do.end:                                           ; preds = %cond.end191
  %124 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags196 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 2
  %125 = load i32, i32* %sv_flags196, align 4
  %and197 = and i32 %125, 256
  %tobool198 = icmp ne i32 %and197, 0
  br i1 %tobool198, label %land.lhs.true199, label %cond.false219

land.lhs.true199:                                 ; preds = %do.end
  %126 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags200 = getelementptr inbounds %struct.sv, %struct.sv* %126, i32 0, i32 2
  %127 = load i32, i32* %sv_flags200, align 4
  %and201 = and i32 %127, -2147483648
  %tobool202 = icmp ne i32 %and201, 0
  br i1 %tobool202, label %cond.true203, label %cond.false219

cond.true203:                                     ; preds = %land.lhs.true199
  %128 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any204 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 0
  %129 = load i8*, i8** %sv_any204, align 8
  %130 = bitcast i8* %129 to %struct.xpvuv*
  %xuv_u205 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %130, i32 0, i32 4
  %xivu_uv206 = bitcast %union._xivu* %xuv_u205 to i64*
  %131 = load i64, i64* %xivu_uv206, align 8
  %cmp207 = icmp ne i64 %131, -1
  br i1 %cmp207, label %land.lhs.true209, label %if.else231

land.lhs.true209:                                 ; preds = %cond.true203
  %132 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any210 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 0
  %133 = load i8*, i8** %sv_any210, align 8
  %134 = bitcast i8* %133 to %struct.xpvuv*
  %xuv_u211 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %134, i32 0, i32 4
  %xivu_uv212 = bitcast %union._xivu* %xuv_u211 to i64*
  %135 = load i64, i64* %xivu_uv212, align 8
  %136 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any213 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 0
  %137 = load i8*, i8** %sv_any213, align 8
  %138 = bitcast i8* %137 to %struct.xpvnv*
  %xnv_u214 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %138, i32 0, i32 5
  %xnv_nv215 = bitcast %union._xnvu* %xnv_u214 to double*
  %139 = load double, double* %xnv_nv215, align 8
  %call216 = call i64 @Perl_cast_uv(double %139)
  %cmp217 = icmp eq i64 %135, %call216
  br i1 %cmp217, label %if.then229, label %if.else231

cond.false219:                                    ; preds = %land.lhs.true199, %do.end
  %140 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any220 = getelementptr inbounds %struct.sv, %struct.sv* %140, i32 0, i32 0
  %141 = load i8*, i8** %sv_any220, align 8
  %142 = bitcast i8* %141 to %struct.xpviv*
  %xiv_u221 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %142, i32 0, i32 4
  %xivu_iv222 = bitcast %union._xivu* %xiv_u221 to i64*
  %143 = load i64, i64* %xivu_iv222, align 8
  %144 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any223 = getelementptr inbounds %struct.sv, %struct.sv* %144, i32 0, i32 0
  %145 = load i8*, i8** %sv_any223, align 8
  %146 = bitcast i8* %145 to %struct.xpvnv*
  %xnv_u224 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %146, i32 0, i32 5
  %xnv_nv225 = bitcast %union._xnvu* %xnv_u224 to double*
  %147 = load double, double* %xnv_nv225, align 8
  %call226 = call i64 @Perl_cast_iv(double %147)
  %cmp227 = icmp eq i64 %143, %call226
  br i1 %cmp227, label %if.then229, label %if.else231

if.then229:                                       ; preds = %cond.false219, %land.lhs.true209
  %148 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags230 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 2
  %149 = load i32, i32* %sv_flags230, align 4
  %or = or i32 %149, 8704
  store i32 %or, i32* %sv_flags230, align 4
  br label %if.end234

if.else231:                                       ; preds = %cond.false219, %land.lhs.true209, %cond.true203
  %150 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags232 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 2
  %151 = load i32, i32* %sv_flags232, align 4
  %or233 = or i32 %151, 8192
  store i32 %or233, i32* %sv_flags232, align 4
  br label %if.end234

if.end234:                                        ; preds = %if.else231, %if.then229
  br label %if.end415

if.else235:                                       ; preds = %if.end173
  %152 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags236 = getelementptr inbounds %struct.sv, %struct.sv* %152, i32 0, i32 2
  %153 = load i32, i32* %sv_flags236, align 4
  %and237 = and i32 %153, 16384
  %tobool238 = icmp ne i32 %and237, 0
  br i1 %tobool238, label %if.then239, label %if.else390

if.then239:                                       ; preds = %if.else235
  %154 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u240 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 3
  %svu_pv241 = bitcast %union.anon* %sv_u240 to i8**
  %155 = load i8*, i8** %svu_pv241, align 8
  %add.ptr242 = getelementptr inbounds i8, i8* %155, i64 0
  %156 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any243 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 0
  %157 = load i8*, i8** %sv_any243, align 8
  %158 = bitcast i8* %157 to %struct.xpv*
  %xpv_cur244 = getelementptr inbounds %struct.xpv, %struct.xpv* %158, i32 0, i32 2
  %159 = load i64, i64* %xpv_cur244, align 8
  %call245 = call i32 @Perl_grok_number(i8* %add.ptr242, i64 %159, i64* %value)
  store i32 %call245, i32* %numtype, align 4
  %160 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags246 = getelementptr inbounds %struct.sv, %struct.sv* %160, i32 0, i32 2
  %161 = load i32, i32* %sv_flags246, align 4
  %and247 = and i32 %161, 4096
  %tobool248 = icmp ne i32 %and247, 0
  br i1 %tobool248, label %if.end255, label %land.lhs.true249

land.lhs.true249:                                 ; preds = %if.then239
  %162 = load i32, i32* %numtype, align 4
  %tobool250 = icmp ne i32 %162, 0
  br i1 %tobool250, label %if.end255, label %land.lhs.true251

land.lhs.true251:                                 ; preds = %land.lhs.true249
  %call252 = call zeroext i1 @Perl_ckwarn(i32 13)
  br i1 %call252, label %if.then254, label %if.end255

if.then254:                                       ; preds = %land.lhs.true251
  %163 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_a_number(%struct.sv* %163)
  br label %if.end255

if.end255:                                        ; preds = %if.then254, %land.lhs.true251, %land.lhs.true249, %if.then239
  br label %do.body256

do.body256:                                       ; preds = %if.end255
  %164 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u257 = getelementptr inbounds %struct.sv, %struct.sv* %164, i32 0, i32 3
  %svu_pv258 = bitcast %union.anon* %sv_u257 to i8**
  %165 = load i8*, i8** %svu_pv258, align 8
  %add.ptr259 = getelementptr inbounds i8, i8* %165, i64 0
  %call260 = call double @Perl_my_atof(i8* %add.ptr259)
  %166 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any261 = getelementptr inbounds %struct.sv, %struct.sv* %166, i32 0, i32 0
  %167 = load i8*, i8** %sv_any261, align 8
  %168 = bitcast i8* %167 to %struct.xpvnv*
  %xnv_u262 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %168, i32 0, i32 5
  %xnv_nv263 = bitcast %union._xnvu* %xnv_u262 to double*
  store double %call260, double* %xnv_nv263, align 8
  br label %do.end264

do.end264:                                        ; preds = %do.body256
  %169 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any265 = getelementptr inbounds %struct.sv, %struct.sv* %169, i32 0, i32 0
  %170 = load i8*, i8** %sv_any265, align 8
  %171 = bitcast i8* %170 to %struct.xpvnv*
  %xnv_u266 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %171, i32 0, i32 5
  %xnv_nv267 = bitcast %union._xnvu* %xnv_u266 to double*
  %172 = load double, double* %xnv_nv267, align 8
  %cmp268 = fcmp ogt double %172, 0.000000e+00
  br i1 %cmp268, label %cond.true270, label %cond.false274

cond.true270:                                     ; preds = %do.end264
  %173 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any271 = getelementptr inbounds %struct.sv, %struct.sv* %173, i32 0, i32 0
  %174 = load i8*, i8** %sv_any271, align 8
  %175 = bitcast i8* %174 to %struct.xpvnv*
  %xnv_u272 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %175, i32 0, i32 5
  %xnv_nv273 = bitcast %union._xnvu* %xnv_u272 to double*
  %176 = load double, double* %xnv_nv273, align 8
  br label %cond.end278

cond.false274:                                    ; preds = %do.end264
  %177 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any275 = getelementptr inbounds %struct.sv, %struct.sv* %177, i32 0, i32 0
  %178 = load i8*, i8** %sv_any275, align 8
  %179 = bitcast i8* %178 to %struct.xpvnv*
  %xnv_u276 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %179, i32 0, i32 5
  %xnv_nv277 = bitcast %union._xnvu* %xnv_u276 to double*
  %180 = load double, double* %xnv_nv277, align 8
  %fneg = fneg double %180
  br label %cond.end278

cond.end278:                                      ; preds = %cond.false274, %cond.true270
  %cond279 = phi double [ %176, %cond.true270 ], [ %fneg, %cond.false274 ]
  %call280 = call i64 @Perl_cast_uv(double %cond279)
  %cmp281 = icmp ugt i64 9007199254740992, %call280
  br i1 %cmp281, label %if.then283, label %if.else286

if.then283:                                       ; preds = %cond.end278
  %181 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags284 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 2
  %182 = load i32, i32* %sv_flags284, align 4
  %or285 = or i32 %182, 8704
  store i32 %or285, i32* %sv_flags284, align 4
  br label %if.end384

if.else286:                                       ; preds = %cond.end278
  %183 = load i32, i32* %numtype, align 4
  %and287 = and i32 %183, 1
  %tobool288 = icmp ne i32 %and287, 0
  br i1 %tobool288, label %if.else292, label %if.then289

if.then289:                                       ; preds = %if.else286
  %184 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags290 = getelementptr inbounds %struct.sv, %struct.sv* %184, i32 0, i32 2
  %185 = load i32, i32* %sv_flags290, align 4
  %or291 = or i32 %185, 8704
  store i32 %or291, i32* %sv_flags290, align 4
  br label %if.end383

if.else292:                                       ; preds = %if.else286
  %186 = load i32, i32* %numtype, align 4
  %and293 = and i32 %186, 8
  %tobool294 = icmp ne i32 %and293, 0
  br i1 %tobool294, label %land.lhs.true295, label %if.else301

land.lhs.true295:                                 ; preds = %if.else292
  %187 = load i64, i64* %value, align 8
  %cmp296 = icmp uge i64 %187, -9223372036854775808
  br i1 %cmp296, label %if.then298, label %if.else301

if.then298:                                       ; preds = %land.lhs.true295
  %188 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags299 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 2
  %189 = load i32, i32* %sv_flags299, align 4
  %or300 = or i32 %189, 8704
  store i32 %or300, i32* %sv_flags299, align 4
  br label %if.end382

if.else301:                                       ; preds = %land.lhs.true295, %if.else292
  %190 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags302 = getelementptr inbounds %struct.sv, %struct.sv* %190, i32 0, i32 2
  %191 = load i32, i32* %sv_flags302, align 4
  %or303 = or i32 %191, 8192
  store i32 %or303, i32* %sv_flags302, align 4
  %192 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags304 = getelementptr inbounds %struct.sv, %struct.sv* %192, i32 0, i32 2
  %193 = load i32, i32* %sv_flags304, align 4
  %or305 = or i32 %193, 4096
  store i32 %or305, i32* %sv_flags304, align 4
  %194 = load i32, i32* %numtype, align 4
  %and306 = and i32 %194, 8
  %tobool307 = icmp ne i32 %and306, 0
  br i1 %tobool307, label %if.then308, label %if.else314

if.then308:                                       ; preds = %if.else301
  br label %do.body309

do.body309:                                       ; preds = %if.then308
  %195 = load i64, i64* %value, align 8
  %sub = sub nsw i64 0, %195
  %196 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any310 = getelementptr inbounds %struct.sv, %struct.sv* %196, i32 0, i32 0
  %197 = load i8*, i8** %sv_any310, align 8
  %198 = bitcast i8* %197 to %struct.xpviv*
  %xiv_u311 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %198, i32 0, i32 4
  %xivu_iv312 = bitcast %union._xivu* %xiv_u311 to i64*
  store i64 %sub, i64* %xivu_iv312, align 8
  br label %do.end313

do.end313:                                        ; preds = %do.body309
  br label %if.end332

if.else314:                                       ; preds = %if.else301
  %199 = load i64, i64* %value, align 8
  %cmp315 = icmp ule i64 %199, 9223372036854775807
  br i1 %cmp315, label %if.then317, label %if.else323

if.then317:                                       ; preds = %if.else314
  br label %do.body318

do.body318:                                       ; preds = %if.then317
  %200 = load i64, i64* %value, align 8
  %201 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any319 = getelementptr inbounds %struct.sv, %struct.sv* %201, i32 0, i32 0
  %202 = load i8*, i8** %sv_any319, align 8
  %203 = bitcast i8* %202 to %struct.xpviv*
  %xiv_u320 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %203, i32 0, i32 4
  %xivu_iv321 = bitcast %union._xivu* %xiv_u320 to i64*
  store i64 %200, i64* %xivu_iv321, align 8
  br label %do.end322

do.end322:                                        ; preds = %do.body318
  br label %if.end331

if.else323:                                       ; preds = %if.else314
  br label %do.body324

do.body324:                                       ; preds = %if.else323
  %204 = load i64, i64* %value, align 8
  %205 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any325 = getelementptr inbounds %struct.sv, %struct.sv* %205, i32 0, i32 0
  %206 = load i8*, i8** %sv_any325, align 8
  %207 = bitcast i8* %206 to %struct.xpvuv*
  %xuv_u326 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %207, i32 0, i32 4
  %xivu_uv327 = bitcast %union._xivu* %xuv_u326 to i64*
  store i64 %204, i64* %xivu_uv327, align 8
  br label %do.end328

do.end328:                                        ; preds = %do.body324
  %208 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags329 = getelementptr inbounds %struct.sv, %struct.sv* %208, i32 0, i32 2
  %209 = load i32, i32* %sv_flags329, align 4
  %or330 = or i32 %209, -2147483648
  store i32 %or330, i32* %sv_flags329, align 4
  br label %if.end331

if.end331:                                        ; preds = %do.end328, %do.end322
  br label %if.end332

if.end332:                                        ; preds = %if.end331, %do.end313
  %210 = load i32, i32* %numtype, align 4
  %and333 = and i32 %210, 4
  %tobool334 = icmp ne i32 %and333, 0
  br i1 %tobool334, label %if.then335, label %if.else336

if.then335:                                       ; preds = %if.end332
  br label %if.end381

if.else336:                                       ; preds = %if.end332
  %211 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any337 = getelementptr inbounds %struct.sv, %struct.sv* %211, i32 0, i32 0
  %212 = load i8*, i8** %sv_any337, align 8
  %213 = bitcast i8* %212 to %struct.xpvnv*
  %xnv_u338 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %213, i32 0, i32 5
  %xnv_nv339 = bitcast %union._xnvu* %xnv_u338 to double*
  %214 = load double, double* %xnv_nv339, align 8
  store double %214, double* %nv, align 8
  %215 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any340 = getelementptr inbounds %struct.sv, %struct.sv* %215, i32 0, i32 0
  %216 = load i8*, i8** %sv_any340, align 8
  %217 = bitcast i8* %216 to %struct.xpvnv*
  %xnv_u341 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %217, i32 0, i32 5
  %xnv_nv342 = bitcast %union._xnvu* %xnv_u341 to double*
  %218 = load double, double* %xnv_nv342, align 8
  %cmp343 = fcmp olt double %218, 0x43E0000000000000
  br i1 %cmp343, label %if.then345, label %if.else359

if.then345:                                       ; preds = %if.else336
  %219 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any346 = getelementptr inbounds %struct.sv, %struct.sv* %219, i32 0, i32 0
  %220 = load i8*, i8** %sv_any346, align 8
  %221 = bitcast i8* %220 to %struct.xpviv*
  %xiv_u347 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %221, i32 0, i32 4
  %xivu_iv348 = bitcast %union._xivu* %xiv_u347 to i64*
  %222 = load i64, i64* %xivu_iv348, align 8
  %223 = load double, double* %nv, align 8
  %call349 = call i64 @Perl_cast_iv(double %223)
  %cmp350 = icmp eq i64 %222, %call349
  br i1 %cmp350, label %if.then352, label %if.else355

if.then352:                                       ; preds = %if.then345
  %224 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags353 = getelementptr inbounds %struct.sv, %struct.sv* %224, i32 0, i32 2
  %225 = load i32, i32* %sv_flags353, align 4
  %or354 = or i32 %225, 8704
  store i32 %or354, i32* %sv_flags353, align 4
  br label %if.end356

if.else355:                                       ; preds = %if.then345
  br label %if.end356

if.end356:                                        ; preds = %if.else355, %if.then352
  %226 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags357 = getelementptr inbounds %struct.sv, %struct.sv* %226, i32 0, i32 2
  %227 = load i32, i32* %sv_flags357, align 4
  %or358 = or i32 %227, 4352
  store i32 %or358, i32* %sv_flags357, align 4
  br label %if.end380

if.else359:                                       ; preds = %if.else336
  %228 = load i32, i32* %numtype, align 4
  %and360 = and i32 %228, 4
  %tobool361 = icmp ne i32 %and360, 0
  br i1 %tobool361, label %if.then362, label %if.else363

if.then362:                                       ; preds = %if.else359
  br label %if.end379

if.else363:                                       ; preds = %if.else359
  %229 = load double, double* %nv, align 8
  %call364 = call i64 @Perl_cast_uv(double %229)
  store i64 %call364, i64* %nv_as_uv, align 8
  %230 = load i64, i64* %value, align 8
  %231 = load i64, i64* %nv_as_uv, align 8
  %cmp365 = icmp eq i64 %230, %231
  br i1 %cmp365, label %land.lhs.true367, label %if.end376

land.lhs.true367:                                 ; preds = %if.else363
  %232 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any368 = getelementptr inbounds %struct.sv, %struct.sv* %232, i32 0, i32 0
  %233 = load i8*, i8** %sv_any368, align 8
  %234 = bitcast i8* %233 to %struct.xpvuv*
  %xuv_u369 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %234, i32 0, i32 4
  %xivu_uv370 = bitcast %union._xivu* %xuv_u369 to i64*
  %235 = load i64, i64* %xivu_uv370, align 8
  %cmp371 = icmp ne i64 %235, -1
  br i1 %cmp371, label %if.then373, label %if.end376

if.then373:                                       ; preds = %land.lhs.true367
  %236 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags374 = getelementptr inbounds %struct.sv, %struct.sv* %236, i32 0, i32 2
  %237 = load i32, i32* %sv_flags374, align 4
  %or375 = or i32 %237, 8704
  store i32 %or375, i32* %sv_flags374, align 4
  br label %if.end376

if.end376:                                        ; preds = %if.then373, %land.lhs.true367, %if.else363
  %238 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags377 = getelementptr inbounds %struct.sv, %struct.sv* %238, i32 0, i32 2
  %239 = load i32, i32* %sv_flags377, align 4
  %or378 = or i32 %239, 4352
  store i32 %or378, i32* %sv_flags377, align 4
  br label %if.end379

if.end379:                                        ; preds = %if.end376, %if.then362
  br label %if.end380

if.end380:                                        ; preds = %if.end379, %if.end356
  br label %if.end381

if.end381:                                        ; preds = %if.end380, %if.then335
  br label %if.end382

if.end382:                                        ; preds = %if.end381, %if.then298
  br label %if.end383

if.end383:                                        ; preds = %if.end382, %if.then289
  br label %if.end384

if.end384:                                        ; preds = %if.end383, %if.then283
  %240 = load i32, i32* %numtype, align 4
  %tobool385 = icmp ne i32 %240, 0
  br i1 %tobool385, label %if.end389, label %if.then386

if.then386:                                       ; preds = %if.end384
  %241 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags387 = getelementptr inbounds %struct.sv, %struct.sv* %241, i32 0, i32 2
  %242 = load i32, i32* %sv_flags387, align 4
  %and388 = and i32 %242, -769
  store i32 %and388, i32* %sv_flags387, align 4
  br label %if.end389

if.end389:                                        ; preds = %if.then386, %if.end384
  br label %if.end414

if.else390:                                       ; preds = %if.else235
  %243 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags391 = getelementptr inbounds %struct.sv, %struct.sv* %243, i32 0, i32 2
  %244 = load i32, i32* %sv_flags391, align 4
  %and392 = and i32 %244, 49152
  %cmp393 = icmp eq i32 %and392, 32768
  br i1 %cmp393, label %land.lhs.true395, label %if.end407

land.lhs.true395:                                 ; preds = %if.else390
  %245 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags396 = getelementptr inbounds %struct.sv, %struct.sv* %245, i32 0, i32 2
  %246 = load i32, i32* %sv_flags396, align 4
  %and397 = and i32 %246, 255
  %cmp398 = icmp eq i32 %and397, 9
  br i1 %cmp398, label %if.then405, label %lor.lhs.false400

lor.lhs.false400:                                 ; preds = %land.lhs.true395
  %247 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags401 = getelementptr inbounds %struct.sv, %struct.sv* %247, i32 0, i32 2
  %248 = load i32, i32* %sv_flags401, align 4
  %and402 = and i32 %248, 255
  %cmp403 = icmp eq i32 %and402, 10
  br i1 %cmp403, label %if.then405, label %if.end407

if.then405:                                       ; preds = %lor.lhs.false400, %land.lhs.true395
  %249 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %250 = bitcast %struct.sv* %249 to i8*
  %251 = bitcast i8* %250 to %struct.gv*
  %call406 = call zeroext i1 @S_glob_2number(%struct.gv* %251)
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end407:                                        ; preds = %lor.lhs.false400, %if.else390
  %252 = load i8, i8* @PL_localizing, align 1
  %tobool408 = icmp ne i8 %252, 0
  br i1 %tobool408, label %if.end413, label %land.lhs.true409

land.lhs.true409:                                 ; preds = %if.end407
  %call410 = call zeroext i1 @Perl_ckwarn(i32 41)
  br i1 %call410, label %if.then412, label %if.end413

if.then412:                                       ; preds = %land.lhs.true409
  %253 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_report_uninit(%struct.sv* %253)
  br label %if.end413

if.end413:                                        ; preds = %if.then412, %land.lhs.true409, %if.end407
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end414:                                        ; preds = %if.end389
  br label %if.end415

if.end415:                                        ; preds = %if.end414, %if.end234
  %254 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any416 = getelementptr inbounds %struct.sv, %struct.sv* %254, i32 0, i32 0
  %255 = load i8*, i8** %sv_any416, align 8
  %256 = bitcast i8* %255 to %struct.xpvnv*
  %xnv_u417 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %256, i32 0, i32 5
  %xnv_nv418 = bitcast %union._xnvu* %xnv_u417 to double*
  %257 = load double, double* %xnv_nv418, align 8
  store double %257, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end415, %if.end413, %if.then405, %if.then169, %if.end149, %if.end124, %cond.end, %if.then99, %if.else, %if.then50, %if.end40, %if.then20
  %258 = load double, double* %retval, align 8
  ret double %258
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_glob_2number(%struct.gv* %gv) #0 {
entry:
  %gv.addr = alloca %struct.gv*, align 8
  %buffer = alloca %struct.sv*, align 8
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  %call = call zeroext i1 @Perl_ckwarn(i32 13)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call1, %struct.sv** %buffer, align 8
  %0 = load %struct.sv*, %struct.sv** %buffer, align 8
  %1 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  call void @Perl_gv_efullname4(%struct.sv* %0, %struct.gv* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i1 zeroext true)
  %2 = load %struct.sv*, %struct.sv** %buffer, align 8
  call void @S_not_a_number(%struct.sv* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i1 true
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_2num(%struct.sv* %sv) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %tmpsv = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2048
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %2, %struct.sv** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 2048
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.lhs.true, label %if.end35

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %6 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %7, 1048576
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %land.lhs.true7, label %if.end35

land.lhs.true7:                                   ; preds = %land.lhs.true
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u8 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 3
  %svu_rv9 = bitcast %union.anon* %sv_u8 to %struct.sv**
  %9 = load %struct.sv*, %struct.sv** %svu_rv9, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %11, i32 0, i32 0
  %12 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags10 = getelementptr inbounds %struct.hv, %struct.hv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %13, 268435456
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then13, label %if.end35

if.then13:                                        ; preds = %land.lhs.true7
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.sv* @Perl_amagic_call(%struct.sv* %14, %struct.sv* @PL_sv_undef, i32 9, i32 9)
  store %struct.sv* %call, %struct.sv** %tmpsv, align 8
  %15 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %tobool14 = icmp ne %struct.sv* %15, null
  br i1 %tobool14, label %land.lhs.true15, label %cond.false

land.lhs.true15:                                  ; preds = %if.then13
  %16 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %17, 14680064
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %land.lhs.true19, label %cond.false

land.lhs.true19:                                  ; preds = %land.lhs.true15
  %18 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %call20 = call zeroext i1 @Perl_sv_tainted(%struct.sv* %18)
  br i1 %call20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true19
  br i1 true, label %if.then21, label %if.end22

cond.false:                                       ; preds = %land.lhs.true19, %land.lhs.true15, %if.then13
  br i1 false, label %if.then21, label %if.end22

if.then21:                                        ; preds = %cond.false, %cond.true
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %cond.false, %cond.true
  %19 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %tobool23 = icmp ne %struct.sv* %19, null
  br i1 %tobool23, label %land.lhs.true24, label %if.end34

land.lhs.true24:                                  ; preds = %if.end22
  %20 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %21, 2048
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %lor.lhs.false, label %if.then32

lor.lhs.false:                                    ; preds = %land.lhs.true24
  %22 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u28 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_rv29 = bitcast %union.anon* %sv_u28 to %struct.sv**
  %23 = load %struct.sv*, %struct.sv** %svu_rv29, align 8
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u30 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 3
  %svu_rv31 = bitcast %union.anon* %sv_u30 to %struct.sv**
  %25 = load %struct.sv*, %struct.sv** %svu_rv31, align 8
  %cmp = icmp ne %struct.sv* %23, %25
  br i1 %cmp, label %if.then32, label %if.end34

if.then32:                                        ; preds = %lor.lhs.false, %land.lhs.true24
  %26 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %call33 = call %struct.sv* @Perl_sv_2num(%struct.sv* %26)
  store %struct.sv* %call33, %struct.sv** %retval, align 8
  br label %return

if.end34:                                         ; preds = %lor.lhs.false, %if.end22
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %land.lhs.true7, %land.lhs.true, %if.end
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u36 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 3
  %svu_rv37 = bitcast %union.anon* %sv_u36 to %struct.sv**
  %28 = load %struct.sv*, %struct.sv** %svu_rv37, align 8
  %29 = ptrtoint %struct.sv* %28 to i64
  %call38 = call %struct.sv* @Perl_newSVuv(i64 %29)
  %call39 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call38)
  store %struct.sv* %call39, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end35, %if.then32, %if.then
  %30 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %30
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @Perl_sv_tainted(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i1, align 1
  %sv.addr = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp uge i32 %and, 7
  br i1 %cmp, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %4, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %5 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool = icmp ne %struct.magic* %5, null
  br i1 %tobool, label %if.then, label %if.end6

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %6, i32 116)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %7 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool1 = icmp ne %struct.magic* %7, null
  br i1 %tobool1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %if.then
  %8 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %8, i32 0, i32 5
  %9 = load i64, i64* %mg_len, align 8
  %and3 = and i64 %9, 1
  %tobool4 = icmp ne i64 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true2
  store i1 true, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true2, %if.then
  br label %if.end6

if.end6:                                          ; preds = %if.end, %land.lhs.true, %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_2mortal(%struct.sv* %sv) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %ix = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %1, %struct.sv** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 134283264
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end8

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp eq %struct.sv* %4, @PL_sv_undef
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp2 = icmp eq %struct.sv* %5, @PL_sv_yes
  br i1 %cmp2, label %if.then7, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp4 = icmp eq %struct.sv* %6, @PL_sv_no
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp6 = icmp eq %struct.sv* %7, @PL_sv_placeholder
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false, %land.lhs.true
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %8, %struct.sv** %retval, align 8
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5, %if.end
  br label %do.body

do.body:                                          ; preds = %if.end8
  %9 = load i64, i64* @PL_tmps_ix, align 8
  %inc = add nsw i64 %9, 1
  store i64 %inc, i64* @PL_tmps_ix, align 8
  store i64 %inc, i64* %ix, align 8
  %10 = load i64, i64* %ix, align 8
  %11 = load i64, i64* @PL_tmps_max, align 8
  %cmp9 = icmp sge i64 %10, %11
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then10, label %if.end11

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then10, label %if.end11

if.then10:                                        ; preds = %cond.false, %cond.true
  %12 = load i64, i64* %ix, align 8
  %call = call i64 @Perl_tmps_grow_p(i64 %12)
  store i64 %call, i64* %ix, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %cond.false, %cond.true
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %14 = load %struct.sv**, %struct.sv*** @PL_tmps_stack, align 8
  %15 = load i64, i64* %ix, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %14, i64 %15
  store %struct.sv* %13, %struct.sv** %arrayidx, align 8
  br label %do.end

do.end:                                           ; preds = %if.end11
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags12, align 4
  %or = or i32 %17, 524288
  store i32 %or, i32* %sv_flags12, align 4
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %18, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then7, %if.then
  %19 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSVuv(i64 %u) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %u.addr = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  store i64 %u, i64* %u.addr, align 8
  %0 = load i64, i64* %u.addr, align 8
  %cmp = icmp ule i64 %0, 9223372036854775807
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %u.addr, align 8
  %call = call %struct.sv* @Perl_newSViv(i64 %1)
  store %struct.sv* %call, %struct.sv** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %2 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %2, null
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %do.body
  br label %do.body2

do.body2:                                         ; preds = %if.then1
  %3 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %3, %struct.sv** %sv, align 8
  %4 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.sv*
  store %struct.sv* %6, %struct.sv** @PL_sv_root, align 8
  %7 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %7, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body2
  br label %if.end4

if.else:                                          ; preds = %do.body
  %call3 = call %struct.sv* @S_more_sv()
  store %struct.sv* %call3, %struct.sv** %sv, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.else, %do.end
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any5 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  store i8* null, i8** %sv_any5, align 8
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end6

do.end6:                                          ; preds = %if.end4
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 3
  %svu_iv = bitcast %union.anon* %sv_u to i64*
  %12 = bitcast i64* %svu_iv to i8*
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 sub (i64 0, i64 ptrtoint (i64* getelementptr inbounds (%struct.xpviv, %struct.xpviv* null, i32 0, i32 4, i32 0) to i64))
  %13 = bitcast i8* %add.ptr to %struct.xpviv*
  %14 = bitcast %struct.xpviv* %13 to i8*
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any7 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  store i8* %14, i8** %sv_any7, align 8
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags8, align 4
  %or = or i32 %17, 1
  store i32 %or, i32* %sv_flags8, align 4
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags9, align 4
  %or10 = or i32 %19, 4352
  store i32 %or10, i32* %sv_flags9, align 4
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags11, align 4
  %or12 = or i32 %21, -2147483648
  store i32 %or12, i32* %sv_flags11, align 4
  br label %do.body13

do.body13:                                        ; preds = %do.end6
  %22 = load i64, i64* %u.addr, align 8
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any14 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any14, align 8
  %25 = bitcast i8* %24 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %25, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  store i64 %22, i64* %xivu_uv, align 8
  br label %do.end15

do.end15:                                         ; preds = %do.body13
  br label %do.body16

do.body16:                                        ; preds = %do.end15
  %26 = load i8, i8* @PL_tainting, align 1
  %tobool17 = trunc i8 %26 to i1
  br i1 %tobool17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body16
  br i1 true, label %if.then18, label %if.end31

cond.false:                                       ; preds = %do.body16
  br i1 false, label %if.then18, label %if.end31

if.then18:                                        ; preds = %cond.false, %cond.true
  %27 = load i8, i8* @PL_tainted, align 1
  %tobool19 = trunc i8 %27 to i1
  br i1 %tobool19, label %cond.true20, label %cond.false21

cond.true20:                                      ; preds = %if.then18
  br i1 true, label %if.then22, label %if.end30

cond.false21:                                     ; preds = %if.then18
  br i1 false, label %if.then22, label %if.end30

if.then22:                                        ; preds = %cond.false21, %cond.true20
  br label %do.body23

do.body23:                                        ; preds = %if.then22
  %28 = load i8, i8* @PL_tainting, align 1
  %tobool24 = trunc i8 %28 to i1
  br i1 %tobool24, label %cond.true25, label %cond.false26

cond.true25:                                      ; preds = %do.body23
  br i1 true, label %if.then27, label %if.end28

cond.false26:                                     ; preds = %do.body23
  br i1 false, label %if.then27, label %if.end28

if.then27:                                        ; preds = %cond.false26, %cond.true25
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_magic(%struct.sv* %29, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %cond.false26, %cond.true25
  br label %do.end29

do.end29:                                         ; preds = %if.end28
  br label %if.end30

if.end30:                                         ; preds = %do.end29, %cond.false21, %cond.true20
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %cond.false, %cond.true
  br label %do.end32

do.end32:                                         ; preds = %if.end31
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %30, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %do.end32, %if.then
  %31 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %31
}

declare dso_local i8* @Perl_savepvn(i8*, i32) #1

declare dso_local zeroext i1 @Perl_amagic_is_enabled(i32) #1

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #3

declare dso_local void @Perl_save_pushptr(i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_uiv_2buf(i8* %buf, i64 %iv, i64 %uv, i32 %is_uv, i8** %peob) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %iv.addr = alloca i64, align 8
  %uv.addr = alloca i64, align 8
  %is_uv.addr = alloca i32, align 4
  %peob.addr = alloca i8**, align 8
  %ptr = alloca i8*, align 8
  %ebuf = alloca i8*, align 8
  %sign = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %iv, i64* %iv.addr, align 8
  store i64 %uv, i64* %uv.addr, align 8
  store i32 %is_uv, i32* %is_uv.addr, align 4
  store i8** %peob, i8*** %peob.addr, align 8
  %0 = load i8*, i8** %buf.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 22
  store i8* %add.ptr, i8** %ptr, align 8
  %1 = load i8*, i8** %ptr, align 8
  store i8* %1, i8** %ebuf, align 8
  %2 = load i32, i32* %is_uv.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %sign, align 4
  br label %if.end4

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %iv.addr, align 8
  %cmp = icmp sge i64 %3, 0
  br i1 %cmp, label %if.then1, label %if.else2

if.then1:                                         ; preds = %if.else
  %4 = load i64, i64* %iv.addr, align 8
  store i64 %4, i64* %uv.addr, align 8
  store i32 0, i32* %sign, align 4
  br label %if.end

if.else2:                                         ; preds = %if.else
  %5 = load i64, i64* %iv.addr, align 8
  %cmp3 = icmp eq i64 %5, -9223372036854775808
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else2
  %6 = load i64, i64* %iv.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else2
  %7 = load i64, i64* %iv.addr, align 8
  %sub = sub nsw i64 0, %7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %6, %cond.true ], [ %sub, %cond.false ]
  store i64 %cond, i64* %uv.addr, align 8
  store i32 1, i32* %sign, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then1
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end4
  %8 = load i64, i64* %uv.addr, align 8
  %rem = urem i64 %8, 10
  %conv = trunc i64 %rem to i8
  %conv5 = sext i8 %conv to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  %9 = load i8*, i8** %ptr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 -1
  store i8* %incdec.ptr, i8** %ptr, align 8
  store i8 %conv6, i8* %incdec.ptr, align 1
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %10 = load i64, i64* %uv.addr, align 8
  %div = udiv i64 %10, 10
  store i64 %div, i64* %uv.addr, align 8
  %tobool7 = icmp ne i64 %div, 0
  br i1 %tobool7, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %11 = load i32, i32* %sign, align 4
  %tobool8 = icmp ne i32 %11, 0
  br i1 %tobool8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %do.end
  %12 = load i8*, i8** %ptr, align 8
  %incdec.ptr10 = getelementptr inbounds i8, i8* %12, i32 -1
  store i8* %incdec.ptr10, i8** %ptr, align 8
  store i8 45, i8* %incdec.ptr10, align 1
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %do.end
  %13 = load i8*, i8** %ebuf, align 8
  %14 = load i8**, i8*** %peob.addr, align 8
  store i8* %13, i8** %14, align 8
  %15 = load i8*, i8** %ptr, align 8
  ret i8* %15
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_infnan_2pv(double %nv, i8* %buffer, i64 %maxlen, i8 signext %plus) #0 {
entry:
  %retval = alloca i64, align 8
  %nv.addr = alloca double, align 8
  %buffer.addr = alloca i8*, align 8
  %maxlen.addr = alloca i64, align 8
  %plus.addr = alloca i8, align 1
  %s = alloca i8*, align 8
  store double %nv, double* %nv.addr, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i64 %maxlen, i64* %maxlen.addr, align 8
  store i8 %plus, i8* %plus.addr, align 1
  %0 = load i64, i64* %maxlen.addr, align 8
  %cmp = icmp ult i64 %0, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %1 = load i8*, i8** %buffer.addr, align 8
  store i8* %1, i8** %s, align 8
  %2 = load double, double* %nv.addr, align 8
  %3 = call double @llvm.fabs.f64(double %2) #10
  %isinf = fcmp oeq double %3, 0x7FF0000000000000
  %4 = bitcast double %2 to i64
  %5 = icmp slt i64 %4, 0
  %6 = select i1 %5, i32 -1, i32 1
  %7 = select i1 %isinf, i32 %6, i32 0
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then1, label %if.else15

if.then1:                                         ; preds = %if.else
  %8 = load double, double* %nv.addr, align 8
  %cmp2 = fcmp olt double %8, 0.000000e+00
  br i1 %cmp2, label %if.then3, label %if.else6

if.then3:                                         ; preds = %if.then1
  %9 = load i64, i64* %maxlen.addr, align 8
  %cmp4 = icmp ult i64 %9, 5
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.then3
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then3
  %10 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  store i8 45, i8* %10, align 1
  br label %if.end11

if.else6:                                         ; preds = %if.then1
  %11 = load i8, i8* %plus.addr, align 1
  %tobool7 = icmp ne i8 %11, 0
  br i1 %tobool7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.else6
  %12 = load i8*, i8** %s, align 8
  %incdec.ptr9 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr9, i8** %s, align 8
  store i8 43, i8* %12, align 1
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.else6
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.end
  %13 = load i8*, i8** %s, align 8
  %incdec.ptr12 = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr12, i8** %s, align 8
  store i8 73, i8* %13, align 1
  %14 = load i8*, i8** %s, align 8
  %incdec.ptr13 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr13, i8** %s, align 8
  store i8 110, i8* %14, align 1
  %15 = load i8*, i8** %s, align 8
  %incdec.ptr14 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr14, i8** %s, align 8
  store i8 102, i8* %15, align 1
  br label %if.end23

if.else15:                                        ; preds = %if.else
  %16 = load double, double* %nv.addr, align 8
  %cmp16 = fcmp uno double %16, %16
  br i1 %cmp16, label %if.then17, label %if.else21

if.then17:                                        ; preds = %if.else15
  %17 = load i8*, i8** %s, align 8
  %incdec.ptr18 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr18, i8** %s, align 8
  store i8 78, i8* %17, align 1
  %18 = load i8*, i8** %s, align 8
  %incdec.ptr19 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr19, i8** %s, align 8
  store i8 97, i8* %18, align 1
  %19 = load i8*, i8** %s, align 8
  %incdec.ptr20 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr20, i8** %s, align 8
  store i8 78, i8* %19, align 1
  br label %if.end22

if.else21:                                        ; preds = %if.else15
  store i64 0, i64* %retval, align 8
  br label %return

if.end22:                                         ; preds = %if.then17
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.end11
  %20 = load i8*, i8** %s, align 8
  %incdec.ptr24 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr24, i8** %s, align 8
  store i8 0, i8* %20, align 1
  %21 = load i8*, i8** %s, align 8
  %22 = load i8*, i8** %buffer.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %21 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %22 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %sub.ptr.sub, 1
  store i64 %sub, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end23, %if.else21, %if.then5, %if.then
  %23 = load i64, i64* %retval, align 8
  ret i64 %23
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #4

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #5

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_newmortal() #0 {
entry:
  %sv = alloca %struct.sv*, align 8
  %ix = alloca i64, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %if.end

if.else:                                          ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  store i8* null, i8** %sv_any2, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end3

do.end3:                                          ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 524288, i32* %sv_flags4, align 4
  br label %do.body5

do.body5:                                         ; preds = %do.end3
  %10 = load i64, i64* @PL_tmps_ix, align 8
  %inc6 = add nsw i64 %10, 1
  store i64 %inc6, i64* @PL_tmps_ix, align 8
  store i64 %inc6, i64* %ix, align 8
  %11 = load i64, i64* %ix, align 8
  %12 = load i64, i64* @PL_tmps_max, align 8
  %cmp = icmp sge i64 %11, %12
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body5
  br i1 true, label %if.then7, label %if.end9

cond.false:                                       ; preds = %do.body5
  br i1 false, label %if.then7, label %if.end9

if.then7:                                         ; preds = %cond.false, %cond.true
  %13 = load i64, i64* %ix, align 8
  %call8 = call i64 @Perl_tmps_grow_p(i64 %13)
  store i64 %call8, i64* %ix, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %cond.false, %cond.true
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %15 = load %struct.sv**, %struct.sv*** @PL_tmps_stack, align 8
  %16 = load i64, i64* %ix, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %15, i64 %16
  store %struct.sv* %14, %struct.sv** %arrayidx, align 8
  br label %do.end10

do.end10:                                         ; preds = %if.end9
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %17
}

declare dso_local void @Perl_gv_efullname4(%struct.sv*, %struct.gv*, i8*, i1 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_copypv_flags(%struct.sv* %dsv, %struct.sv* %ssv, i32 %flags) #0 {
entry:
  %dsv.addr = alloca %struct.sv*, align 8
  %ssv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  store %struct.sv* %dsv, %struct.sv** %dsv.addr, align 8
  store %struct.sv* %ssv, %struct.sv** %ssv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 2
  %5 = load i64, i64* %xpv_cur, align 8
  store i64 %5, i64* %len, align 8
  %6 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %7 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %9 = load i32, i32* %flags.addr, align 4
  %and1 = and i32 %9, 2
  %or = or i32 %and1, 32
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %8, i64* %len, i32 %or)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %10 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %11 = load i8*, i8** %s, align 8
  %12 = load i64, i64* %len, align 8
  call void @Perl_sv_setpvn(%struct.sv* %10, i8* %11, i64 %12)
  %13 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %14, 536870912
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %15 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags4, align 4
  %or5 = or i32 %16, 536870912
  store i32 %or5, i32* %sv_flags4, align 4
  br label %if.end

if.else:                                          ; preds = %cond.end
  %17 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %18, -536870913
  store i32 %and7, i32* %sv_flags6, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setpvn(%struct.sv* %sv, i8* %ptr, i64 %len) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %dptr = alloca i8*, align 8
  %iv = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 427886592
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %2, i32 4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %if.else, label %if.then2

if.then2:                                         ; preds = %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 1610547455
  store i32 %and4, i32* %sv_flags3, align 4
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %7, 33554432
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then2
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_sv_backoff(%struct.sv* %8)
  %tobool8 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then2
  %9 = phi i1 [ false, %if.then2 ], [ %tobool8, %land.rhs ]
  %land.ext = zext i1 %9 to i32
  br label %if.end50

if.else:                                          ; preds = %if.end
  %10 = load i64, i64* %len.addr, align 8
  store i64 %10, i64* %iv, align 8
  %11 = load i64, i64* %iv, align 8
  %cmp = icmp slt i64 %11, 0
  br i1 %cmp, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.else
  %12 = load i64, i64* %iv, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.22, i64 0, i64 0), i64 %12)
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end10
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %14, 255
  %cmp14 = icmp uge i32 %and13, 3
  br i1 %cmp14, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end11
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %15, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end11
  %16 = phi i1 [ true, %if.end11 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %16 to i32
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %18, 268435456
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %lor.end
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any, align 8
  %21 = bitcast i8* %20 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %21, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %22 = load i64, i64* %xpvlenu_len, align 8
  %23 = load i64, i64* %len.addr, align 8
  %add = add i64 %23, 1
  %cmp18 = icmp ult i64 %22, %add
  br i1 %cmp18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %lor.end
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %25 = load i64, i64* %len.addr, align 8
  %add19 = add i64 %25, 1
  %call20 = call i8* @Perl_sv_grow(%struct.sv* %24, i64 %add19)
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %27 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call20, %cond.true ], [ %27, %cond.false ]
  store i8* %cond, i8** %dptr, align 8
  %28 = load i8*, i8** %dptr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i64, i64* %len.addr, align 8
  %mul = mul i64 %30, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %29, i64 %mul, i1 false)
  %31 = load i8*, i8** %dptr, align 8
  %32 = load i64, i64* %len.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %31, i64 %32
  store i8 0, i8* %arrayidx, align 1
  br label %do.body

do.body:                                          ; preds = %cond.end
  %33 = load i64, i64* %len.addr, align 8
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any21, align 8
  %36 = bitcast i8* %35 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %36, i32 0, i32 2
  store i64 %33, i64* %xpv_cur, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %38, 2147418367
  store i32 %and23, i32* %sv_flags22, align 4
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags24, align 4
  %or = or i32 %40, 17408
  store i32 %or, i32* %sv_flags24, align 4
  br label %do.body25

do.body25:                                        ; preds = %do.end
  %41 = load i8, i8* @PL_tainting, align 1
  %tobool26 = trunc i8 %41 to i1
  br i1 %tobool26, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %do.body25
  br i1 true, label %if.then29, label %if.end42

cond.false28:                                     ; preds = %do.body25
  br i1 false, label %if.then29, label %if.end42

if.then29:                                        ; preds = %cond.false28, %cond.true27
  %42 = load i8, i8* @PL_tainted, align 1
  %tobool30 = trunc i8 %42 to i1
  br i1 %tobool30, label %cond.true31, label %cond.false32

cond.true31:                                      ; preds = %if.then29
  br i1 true, label %if.then33, label %if.end41

cond.false32:                                     ; preds = %if.then29
  br i1 false, label %if.then33, label %if.end41

if.then33:                                        ; preds = %cond.false32, %cond.true31
  br label %do.body34

do.body34:                                        ; preds = %if.then33
  %43 = load i8, i8* @PL_tainting, align 1
  %tobool35 = trunc i8 %43 to i1
  br i1 %tobool35, label %cond.true36, label %cond.false37

cond.true36:                                      ; preds = %do.body34
  br i1 true, label %if.then38, label %if.end39

cond.false37:                                     ; preds = %do.body34
  br i1 false, label %if.then38, label %if.end39

if.then38:                                        ; preds = %cond.false37, %cond.true36
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %44, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end39

if.end39:                                         ; preds = %if.then38, %cond.false37, %cond.true36
  br label %do.end40

do.end40:                                         ; preds = %if.end39
  br label %if.end41

if.end41:                                         ; preds = %do.end40, %cond.false32, %cond.true31
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %cond.false28, %cond.true27
  br label %do.end43

do.end43:                                         ; preds = %if.end42
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %46, 255
  %cmp46 = icmp eq i32 %and45, 13
  br i1 %cmp46, label %if.then47, label %if.end50

if.then47:                                        ; preds = %do.end43
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any48 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  %48 = load i8*, i8** %sv_any48, align 8
  %49 = bitcast i8* %48 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %49, i32 0, i32 12
  %50 = load i32, i32* %xcv_flags, align 4
  %and49 = and i32 %50, -8193
  store i32 %and49, i32* %xcv_flags, align 4
  br label %if.end50

if.end50:                                         ; preds = %land.end, %if.then47, %do.end43
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_sv_2pvbyte(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  %sv2 = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %entry
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %2)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %3 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %3 to i32
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %5, 134283264
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %7, 16777216
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true, label %lor.lhs.false11

land.lhs.true:                                    ; preds = %lor.lhs.false, %land.end
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %9, 268435456
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %lor.lhs.false11, label %if.then

lor.lhs.false11:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %11, 49152
  %cmp = icmp eq i32 %and13, 32768
  br i1 %cmp, label %land.lhs.true14, label %lor.lhs.false22

land.lhs.true14:                                  ; preds = %lor.lhs.false11
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %13, 255
  %cmp17 = icmp eq i32 %and16, 9
  br i1 %cmp17, label %if.then, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true14
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %15, 255
  %cmp21 = icmp eq i32 %and20, 10
  br i1 %cmp21, label %if.then, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %lor.lhs.false18, %lor.lhs.false11
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %17, 2048
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false22, %lor.lhs.false18, %land.lhs.true14, %land.lhs.true
  %call26 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call26, %struct.sv** %sv2, align 8
  %18 = load %struct.sv*, %struct.sv** %sv2, align 8
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_copypv_flags(%struct.sv* %18, %struct.sv* %19, i32 0)
  %20 = load %struct.sv*, %struct.sv** %sv2, align 8
  store %struct.sv* %20, %struct.sv** %sv.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false22
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call27 = call zeroext i1 @Perl_sv_utf8_downgrade(%struct.sv* %21, i1 zeroext false)
  %22 = load i64*, i64** %lp.addr, align 8
  %tobool28 = icmp ne i64* %22, null
  br i1 %tobool28, label %cond.true29, label %cond.false36

cond.true29:                                      ; preds = %if.end
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %24, 2098176
  %cmp32 = icmp eq i32 %and31, 1024
  br i1 %cmp32, label %cond.true33, label %cond.false34

cond.true33:                                      ; preds = %cond.true29
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any, align 8
  %27 = bitcast i8* %26 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %27, i32 0, i32 2
  %28 = load i64, i64* %xpv_cur, align 8
  %29 = load i64*, i64** %lp.addr, align 8
  store i64 %28, i64* %29, align 8
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %31 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false34:                                     ; preds = %cond.true29
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %33 = load i64*, i64** %lp.addr, align 8
  %call35 = call i8* @Perl_sv_2pv_flags(%struct.sv* %32, i64* %33, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false34, %cond.true33
  %cond = phi i8* [ %31, %cond.true33 ], [ %call35, %cond.false34 ]
  br label %cond.end47

cond.false36:                                     ; preds = %if.end
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %35, 2098176
  %cmp39 = icmp eq i32 %and38, 1024
  br i1 %cmp39, label %cond.true40, label %cond.false43

cond.true40:                                      ; preds = %cond.false36
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u41 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 3
  %svu_pv42 = bitcast %union.anon* %sv_u41 to i8**
  %37 = load i8*, i8** %svu_pv42, align 8
  br label %cond.end45

cond.false43:                                     ; preds = %cond.false36
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call44 = call i8* @Perl_sv_2pv_flags(%struct.sv* %38, i64* null, i32 0)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false43, %cond.true40
  %cond46 = phi i8* [ %37, %cond.true40 ], [ %call44, %cond.false43 ]
  br label %cond.end47

cond.end47:                                       ; preds = %cond.end45, %cond.end
  %cond48 = phi i8* [ %cond, %cond.end ], [ %cond46, %cond.end45 ]
  ret i8* %cond48
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @Perl_sv_utf8_downgrade(%struct.sv* %sv, i1 zeroext %fail_ok) #0 {
entry:
  %retval = alloca i1, align 1
  %sv.addr = alloca %struct.sv*, align 8
  %fail_ok.addr = alloca i8, align 1
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %mg_flags = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %frombool = zext i1 %fail_ok to i8
  store i8 %frombool, i8* %fail_ok.addr, align 1
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 536870912
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then, label %if.end66

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 2
  %7 = load i64, i64* %xpv_cur, align 8
  %tobool4 = icmp ne i64 %7, 0
  br i1 %tobool4, label %if.then5, label %if.end65

if.then5:                                         ; preds = %if.then
  store i32 2, i32* %mg_flags, align 4
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %9, 268435456
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then5
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_sv_uncow(%struct.sv* %10, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then9, %if.then5
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %12, 255
  %cmp = icmp uge i32 %and11, 7
  br i1 %cmp, label %land.lhs.true12, label %if.end33

land.lhs.true12:                                  ; preds = %if.end
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any13 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any13, align 8
  %15 = bitcast i8* %14 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %15, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %16 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool14 = icmp ne %struct.magic* %16, null
  br i1 %tobool14, label %if.then15, label %if.end33

if.then15:                                        ; preds = %land.lhs.true12
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %17, i32 103)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %18 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool16 = icmp ne %struct.magic* %18, null
  br i1 %tobool16, label %land.lhs.true17, label %if.end27

land.lhs.true17:                                  ; preds = %if.then15
  %19 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %19, i32 0, i32 5
  %20 = load i64, i64* %mg_len, align 8
  %cmp18 = icmp sgt i64 %20, 0
  br i1 %cmp18, label %land.lhs.true19, label %if.end27

land.lhs.true19:                                  ; preds = %land.lhs.true17
  %21 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags20 = getelementptr inbounds %struct.magic, %struct.magic* %21, i32 0, i32 4
  %22 = load i8, i8* %mg_flags20, align 1
  %conv = zext i8 %22 to i32
  %and21 = and i32 %conv, 64
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then23, label %if.end27

if.then23:                                        ; preds = %land.lhs.true19
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %24 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len24 = getelementptr inbounds %struct.magic, %struct.magic* %24, i32 0, i32 5
  %25 = load i64, i64* %mg_len24, align 8
  %call25 = call i64 @Perl_sv_pos_b2u_flags(%struct.sv* %23, i64 %25, i32 34)
  %26 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len26 = getelementptr inbounds %struct.magic, %struct.magic* %26, i32 0, i32 5
  store i64 %call25, i64* %mg_len26, align 8
  store i32 0, i32* %mg_flags, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %land.lhs.true19, %land.lhs.true17, %if.then15
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call28 = call %struct.magic* @Perl_mg_find(%struct.sv* %27, i32 119)
  store %struct.magic* %call28, %struct.magic** %mg, align 8
  %tobool29 = icmp ne %struct.magic* %call28, null
  br i1 %tobool29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end27
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %29 = load %struct.magic*, %struct.magic** %mg, align 8
  %call31 = call i32 @Perl_magic_setutf8(%struct.sv* %28, %struct.magic* %29)
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end27
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %land.lhs.true12, %if.end
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %31, 2098176
  %cmp36 = icmp eq i32 %and35, 1024
  br i1 %cmp36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end33
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any38, align 8
  %34 = bitcast i8* %33 to %struct.xpv*
  %xpv_cur39 = getelementptr inbounds %struct.xpv, %struct.xpv* %34, i32 0, i32 2
  %35 = load i64, i64* %xpv_cur39, align 8
  store i64 %35, i64* %len, align 8
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %37 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end33
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %39 = load i32, i32* %mg_flags, align 4
  %call40 = call i8* @Perl_sv_2pv_flags(%struct.sv* %38, i64* %len, i32 %39)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %37, %cond.true ], [ %call40, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %40 = load i8*, i8** %s, align 8
  %call41 = call i8* @Perl_utf8_to_bytes(i8* %40, i64* %len)
  %tobool42 = icmp ne i8* %call41, null
  br i1 %tobool42, label %if.end62, label %if.then43

if.then43:                                        ; preds = %cond.end
  %41 = load i8, i8* %fail_ok.addr, align 1
  %tobool44 = trunc i8 %41 to i1
  br i1 %tobool44, label %if.then45, label %if.else

if.then45:                                        ; preds = %if.then43
  store i1 false, i1* %retval, align 1
  br label %return

if.else:                                          ; preds = %if.then43
  %42 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool46 = icmp ne %struct.op* %42, null
  br i1 %tobool46, label %if.then47, label %if.else59

if.then47:                                        ; preds = %if.else
  %43 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp48 = icmp eq i32 %bf.cast, 380
  br i1 %cmp48, label %cond.true50, label %cond.false52

cond.true50:                                      ; preds = %if.then47
  %44 = load %struct.op*, %struct.op** @PL_op, align 8
  %call51 = call i8* @Perl_custom_op_get_field(%struct.op* %44, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call51, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %45 = load i8*, i8** %xop_desc, align 8
  br label %cond.end57

cond.false52:                                     ; preds = %if.then47
  %46 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type53 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 4
  %bf.load54 = load i16, i16* %op_type53, align 8
  %bf.clear55 = and i16 %bf.load54, 511
  %bf.cast56 = zext i16 %bf.clear55 to i32
  %idxprom = zext i32 %bf.cast56 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %47 = load i8*, i8** %arrayidx, align 8
  br label %cond.end57

cond.end57:                                       ; preds = %cond.false52, %cond.true50
  %cond58 = phi i8* [ %45, %cond.true50 ], [ %47, %cond.false52 ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0), i8* %cond58)
  br label %if.end60

if.else59:                                        ; preds = %if.else
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0))
  br label %if.end60

if.end60:                                         ; preds = %if.else59, %cond.end57
  br label %if.end61

if.end61:                                         ; preds = %if.end60
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %cond.end
  br label %do.body

do.body:                                          ; preds = %if.end62
  %48 = load i64, i64* %len, align 8
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any63 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any63, align 8
  %51 = bitcast i8* %50 to %struct.xpv*
  %xpv_cur64 = getelementptr inbounds %struct.xpv, %struct.xpv* %51, i32 0, i32 2
  store i64 %48, i64* %xpv_cur64, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end65

if.end65:                                         ; preds = %do.end, %if.then
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %land.lhs.true, %entry
  %52 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %53, -536870913
  store i32 %and68, i32* %sv_flags67, align 4
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end66, %if.then45
  %54 = load i1, i1* %retval, align 1
  ret i1 %54
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_sv_2pvutf8(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 134283264
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 16777216
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.lhs.true, label %lor.lhs.false7

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %5, 268435456
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %lor.lhs.false7, label %if.then

lor.lhs.false7:                                   ; preds = %land.lhs.true, %lor.lhs.false
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %7, 49152
  %cmp = icmp eq i32 %and9, 32768
  br i1 %cmp, label %land.lhs.true10, label %lor.lhs.false18

land.lhs.true10:                                  ; preds = %lor.lhs.false7
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %9, 255
  %cmp13 = icmp eq i32 %and12, 9
  br i1 %cmp13, label %if.then, label %lor.lhs.false14

lor.lhs.false14:                                  ; preds = %land.lhs.true10
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %11, 255
  %cmp17 = icmp eq i32 %and16, 10
  br i1 %cmp17, label %if.then, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %lor.lhs.false14, %lor.lhs.false7
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %13, 2048
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false18, %lor.lhs.false14, %land.lhs.true10, %land.lhs.true
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %14, i32 1538)
  store %struct.sv* %call, %struct.sv** %sv.addr, align 8
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false18
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %16, 2097152
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.else
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call25 = call i32 @Perl_mg_get(%struct.sv* %17)
  %tobool26 = icmp ne i32 %call25, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %18 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool26, %land.rhs ]
  %land.ext = zext i1 %18 to i32
  br label %if.end

if.end:                                           ; preds = %land.end, %if.then
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call27 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %19, i32 0, i64 0)
  %20 = load i64*, i64** %lp.addr, align 8
  %tobool28 = icmp ne i64* %20, null
  br i1 %tobool28, label %cond.true29, label %cond.false36

cond.true29:                                      ; preds = %if.end
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %22, 2098176
  %cmp32 = icmp eq i32 %and31, 1024
  br i1 %cmp32, label %cond.true33, label %cond.false34

cond.true33:                                      ; preds = %cond.true29
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any, align 8
  %25 = bitcast i8* %24 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %25, i32 0, i32 2
  %26 = load i64, i64* %xpv_cur, align 8
  %27 = load i64*, i64** %lp.addr, align 8
  store i64 %26, i64* %27, align 8
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %29 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false34:                                     ; preds = %cond.true29
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %31 = load i64*, i64** %lp.addr, align 8
  %call35 = call i8* @Perl_sv_2pv_flags(%struct.sv* %30, i64* %31, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false34, %cond.true33
  %cond = phi i8* [ %29, %cond.true33 ], [ %call35, %cond.false34 ]
  br label %cond.end47

cond.false36:                                     ; preds = %if.end
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %33, 2098176
  %cmp39 = icmp eq i32 %and38, 1024
  br i1 %cmp39, label %cond.true40, label %cond.false43

cond.true40:                                      ; preds = %cond.false36
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u41 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 3
  %svu_pv42 = bitcast %union.anon* %sv_u41 to i8**
  %35 = load i8*, i8** %svu_pv42, align 8
  br label %cond.end45

cond.false43:                                     ; preds = %cond.false36
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call44 = call i8* @Perl_sv_2pv_flags(%struct.sv* %36, i64* null, i32 0)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false43, %cond.true40
  %cond46 = phi i8* [ %35, %cond.true40 ], [ %call44, %cond.false43 ]
  br label %cond.end47

cond.end47:                                       ; preds = %cond.end45, %cond.end
  %cond48 = phi i8* [ %cond, %cond.end ], [ %cond46, %cond.end45 ]
  ret i8* %cond48
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %oldstr, i32 %flags) #0 {
entry:
  %oldstr.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %ix = alloca i64, align 8
  store %struct.sv* %oldstr, %struct.sv** %oldstr.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %oldstr.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %2, 2097152
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.then
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %oldstr.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  %tobool3 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %4 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  br label %if.end

if.end:                                           ; preds = %land.end, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool4 = icmp ne %struct.sv* %5, null
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %do.body
  br label %do.body6

do.body6:                                         ; preds = %if.then5
  %6 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %6, %struct.sv** %sv, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.sv*
  store %struct.sv* %9, %struct.sv** @PL_sv_root, align 8
  %10 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %10, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body6
  br label %if.end8

if.else:                                          ; preds = %do.body
  %call7 = call %struct.sv* @S_more_sv()
  store %struct.sv* %call7, %struct.sv** %sv, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.else, %do.end
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  store i8* null, i8** %sv_any9, align 8
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  store i32 0, i32* %sv_flags10, align 4
  br label %do.end11

do.end11:                                         ; preds = %if.end8
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %15 = load %struct.sv*, %struct.sv** %oldstr.addr, align 8
  %16 = load i32, i32* %flags.addr, align 4
  %and12 = and i32 %16, -3
  call void @Perl_sv_setsv_flags(%struct.sv* %14, %struct.sv* %15, i32 %and12)
  br label %do.body13

do.body13:                                        ; preds = %do.end11
  %17 = load i64, i64* @PL_tmps_ix, align 8
  %inc14 = add nsw i64 %17, 1
  store i64 %inc14, i64* @PL_tmps_ix, align 8
  store i64 %inc14, i64* %ix, align 8
  %18 = load i64, i64* %ix, align 8
  %19 = load i64, i64* @PL_tmps_max, align 8
  %cmp = icmp sge i64 %18, %19
  br i1 %cmp, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %do.body13
  br i1 true, label %if.then17, label %if.end19

cond.false16:                                     ; preds = %do.body13
  br i1 false, label %if.then17, label %if.end19

if.then17:                                        ; preds = %cond.false16, %cond.true15
  %20 = load i64, i64* %ix, align 8
  %call18 = call i64 @Perl_tmps_grow_p(i64 %20)
  store i64 %call18, i64* %ix, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %cond.false16, %cond.true15
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %22 = load %struct.sv**, %struct.sv*** @PL_tmps_stack, align 8
  %23 = load i64, i64* %ix, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %22, i64 %23
  store %struct.sv* %21, %struct.sv** %arrayidx, align 8
  br label %do.end20

do.end20:                                         ; preds = %if.end19
  %24 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags21, align 4
  %or = or i32 %25, 524288
  store i32 %or, i32* %sv_flags21, align 4
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %sv, i32 %flags, i64 %extra) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %extra.addr = alloca i64, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %e = alloca i8*, align 8
  %t = alloca i8*, align 8
  %two_byte_count = alloca i64, align 8
  %ch = alloca i8, align 1
  %invariant_head = alloca i64, align 8
  %size = alloca i64, align 8
  %dst = alloca i8*, align 8
  %d = alloca i8*, align 8
  %zok = alloca i64, align 8
  %d283 = alloca i8*, align 8
  %chr = alloca i8, align 1
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i64 %extra, i64* %extra.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp eq %struct.sv* %0, @PL_sv_undef
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2098176
  %cmp1 = icmp eq i32 %and, 1024
  br i1 %cmp1, label %if.end48, label %if.then2

if.then2:                                         ; preds = %if.end
  store i64 0, i64* %len, align 8
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %4, 134283264
  %tobool = icmp ne i32 %and4, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then2
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %6, 16384
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %8, 4096
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then15, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %10, 8192
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then15, label %if.else

if.then15:                                        ; preds = %lor.lhs.false11, %lor.lhs.false, %land.lhs.true
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %12 = load i32, i32* %flags.addr, align 4
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* %len, i32 %12)
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %14, 536870912
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.end33

if.then19:                                        ; preds = %if.then15
  %15 = load i64, i64* %extra.addr, align 8
  %tobool20 = icmp ne i64 %15, 0
  br i1 %tobool20, label %if.then21, label %if.end32

if.then21:                                        ; preds = %if.then19
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %17, 268435456
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %cond.true, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %if.then21
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any, align 8
  %20 = bitcast i8* %19 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %20, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %21 = load i64, i64* %xpvlenu_len, align 8
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any26 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any26, align 8
  %24 = bitcast i8* %23 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %24, i32 0, i32 2
  %25 = load i64, i64* %xpv_cur, align 8
  %26 = load i64, i64* %extra.addr, align 8
  %add = add i64 %25, %26
  %cmp27 = icmp ult i64 %21, %add
  br i1 %cmp27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false25, %if.then21
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any28 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any28, align 8
  %30 = bitcast i8* %29 to %struct.xpv*
  %xpv_cur29 = getelementptr inbounds %struct.xpv, %struct.xpv* %30, i32 0, i32 2
  %31 = load i64, i64* %xpv_cur29, align 8
  %32 = load i64, i64* %extra.addr, align 8
  %add30 = add i64 %31, %32
  %call31 = call i8* @Perl_sv_grow(%struct.sv* %27, i64 %add30)
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false25
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %34 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call31, %cond.true ], [ %34, %cond.false ]
  br label %if.end32

if.end32:                                         ; preds = %cond.end, %if.then19
  %35 = load i64, i64* %len, align 8
  store i64 %35, i64* %retval, align 8
  br label %return

if.end33:                                         ; preds = %if.then15
  br label %if.end47

if.else:                                          ; preds = %lor.lhs.false11, %if.then2
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %37, 430018304
  %cmp36 = icmp eq i32 %and35, 1024
  br i1 %cmp36, label %cond.true37, label %cond.false42

cond.true37:                                      ; preds = %if.else
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any38, align 8
  %40 = bitcast i8* %39 to %struct.xpv*
  %xpv_cur39 = getelementptr inbounds %struct.xpv, %struct.xpv* %40, i32 0, i32 2
  %41 = load i64, i64* %xpv_cur39, align 8
  store i64 %41, i64* %len, align 8
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u40 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 3
  %svu_pv41 = bitcast %union.anon* %sv_u40 to i8**
  %43 = load i8*, i8** %svu_pv41, align 8
  br label %cond.end45

cond.false42:                                     ; preds = %if.else
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %45 = load i32, i32* %flags.addr, align 4
  %and43 = and i32 %45, 2
  %call44 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %44, i64* %len, i32 %and43)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false42, %cond.true37
  %cond46 = phi i8* [ %43, %cond.true37 ], [ %call44, %cond.false42 ]
  br label %if.end47

if.end47:                                         ; preds = %cond.end45, %if.end33
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.end
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags49 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags49, align 4
  %and50 = and i32 %47, 536870912
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %if.then52, label %if.end79

if.then52:                                        ; preds = %if.end48
  %48 = load i64, i64* %extra.addr, align 8
  %tobool53 = icmp ne i64 %48, 0
  br i1 %tobool53, label %if.then54, label %if.end76

if.then54:                                        ; preds = %if.then52
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags55 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags55, align 4
  %and56 = and i32 %50, 268435456
  %tobool57 = icmp ne i32 %and56, 0
  br i1 %tobool57, label %cond.true66, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %if.then54
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any59 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 0
  %52 = load i8*, i8** %sv_any59, align 8
  %53 = bitcast i8* %52 to %struct.xpv*
  %xpv_len_u60 = getelementptr inbounds %struct.xpv, %struct.xpv* %53, i32 0, i32 3
  %xpvlenu_len61 = bitcast %union.anon.19* %xpv_len_u60 to i64*
  %54 = load i64, i64* %xpvlenu_len61, align 8
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any62 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any62, align 8
  %57 = bitcast i8* %56 to %struct.xpv*
  %xpv_cur63 = getelementptr inbounds %struct.xpv, %struct.xpv* %57, i32 0, i32 2
  %58 = load i64, i64* %xpv_cur63, align 8
  %59 = load i64, i64* %extra.addr, align 8
  %add64 = add i64 %58, %59
  %cmp65 = icmp ult i64 %54, %add64
  br i1 %cmp65, label %cond.true66, label %cond.false71

cond.true66:                                      ; preds = %lor.lhs.false58, %if.then54
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any67, align 8
  %63 = bitcast i8* %62 to %struct.xpv*
  %xpv_cur68 = getelementptr inbounds %struct.xpv, %struct.xpv* %63, i32 0, i32 2
  %64 = load i64, i64* %xpv_cur68, align 8
  %65 = load i64, i64* %extra.addr, align 8
  %add69 = add i64 %64, %65
  %call70 = call i8* @Perl_sv_grow(%struct.sv* %60, i64 %add69)
  br label %cond.end74

cond.false71:                                     ; preds = %lor.lhs.false58
  %66 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u72 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 3
  %svu_pv73 = bitcast %union.anon* %sv_u72 to i8**
  %67 = load i8*, i8** %svu_pv73, align 8
  br label %cond.end74

cond.end74:                                       ; preds = %cond.false71, %cond.true66
  %cond75 = phi i8* [ %call70, %cond.true66 ], [ %67, %cond.false71 ]
  br label %if.end76

if.end76:                                         ; preds = %cond.end74, %if.then52
  %68 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any77 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 0
  %69 = load i8*, i8** %sv_any77, align 8
  %70 = bitcast i8* %69 to %struct.xpv*
  %xpv_cur78 = getelementptr inbounds %struct.xpv, %struct.xpv* %70, i32 0, i32 2
  %71 = load i64, i64* %xpv_cur78, align 8
  store i64 %71, i64* %retval, align 8
  br label %return

if.end79:                                         ; preds = %if.end48
  %72 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags80 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags80, align 4
  %and81 = and i32 %73, 268435456
  %tobool82 = icmp ne i32 %and81, 0
  br i1 %tobool82, label %if.then83, label %if.end84

if.then83:                                        ; preds = %if.end79
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_sv_uncow(%struct.sv* %74, i32 0)
  br label %if.end84

if.end84:                                         ; preds = %if.then83, %if.end79
  %75 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool85 = icmp ne %struct.sv* %75, null
  br i1 %tobool85, label %cond.true91, label %lor.lhs.false86

lor.lhs.false86:                                  ; preds = %if.end84
  %76 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool87 = icmp ne %struct.sv* %76, null
  br i1 %tobool87, label %land.lhs.true88, label %cond.false92

land.lhs.true88:                                  ; preds = %lor.lhs.false86
  %call89 = call %struct.sv* @Perl__get_encoding()
  %cmp90 = icmp ne %struct.sv* %call89, null
  br i1 %cmp90, label %cond.true91, label %cond.false92

cond.true91:                                      ; preds = %land.lhs.true88, %if.end84
  br i1 true, label %land.lhs.true93, label %if.end125

cond.false92:                                     ; preds = %land.lhs.true88, %lor.lhs.false86
  br i1 false, label %land.lhs.true93, label %if.end125

land.lhs.true93:                                  ; preds = %cond.false92, %cond.true91
  %77 = load i32, i32* %flags.addr, align 4
  %and94 = and i32 %77, 8
  %tobool95 = icmp ne i32 %and94, 0
  br i1 %tobool95, label %if.end125, label %if.then96

if.then96:                                        ; preds = %land.lhs.true93
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call97 = call %struct.sv* @Perl__get_encoding()
  %call98 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %78, %struct.sv* %call97)
  %79 = load i64, i64* %extra.addr, align 8
  %tobool99 = icmp ne i64 %79, 0
  br i1 %tobool99, label %if.then100, label %if.end122

if.then100:                                       ; preds = %if.then96
  %80 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags101 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags101, align 4
  %and102 = and i32 %81, 268435456
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %cond.true112, label %lor.lhs.false104

lor.lhs.false104:                                 ; preds = %if.then100
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any105 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 0
  %83 = load i8*, i8** %sv_any105, align 8
  %84 = bitcast i8* %83 to %struct.xpv*
  %xpv_len_u106 = getelementptr inbounds %struct.xpv, %struct.xpv* %84, i32 0, i32 3
  %xpvlenu_len107 = bitcast %union.anon.19* %xpv_len_u106 to i64*
  %85 = load i64, i64* %xpvlenu_len107, align 8
  %86 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any108 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 0
  %87 = load i8*, i8** %sv_any108, align 8
  %88 = bitcast i8* %87 to %struct.xpv*
  %xpv_cur109 = getelementptr inbounds %struct.xpv, %struct.xpv* %88, i32 0, i32 2
  %89 = load i64, i64* %xpv_cur109, align 8
  %90 = load i64, i64* %extra.addr, align 8
  %add110 = add i64 %89, %90
  %cmp111 = icmp ult i64 %85, %add110
  br i1 %cmp111, label %cond.true112, label %cond.false117

cond.true112:                                     ; preds = %lor.lhs.false104, %if.then100
  %91 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any113 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 0
  %93 = load i8*, i8** %sv_any113, align 8
  %94 = bitcast i8* %93 to %struct.xpv*
  %xpv_cur114 = getelementptr inbounds %struct.xpv, %struct.xpv* %94, i32 0, i32 2
  %95 = load i64, i64* %xpv_cur114, align 8
  %96 = load i64, i64* %extra.addr, align 8
  %add115 = add i64 %95, %96
  %call116 = call i8* @Perl_sv_grow(%struct.sv* %91, i64 %add115)
  br label %cond.end120

cond.false117:                                    ; preds = %lor.lhs.false104
  %97 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u118 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 3
  %svu_pv119 = bitcast %union.anon* %sv_u118 to i8**
  %98 = load i8*, i8** %svu_pv119, align 8
  br label %cond.end120

cond.end120:                                      ; preds = %cond.false117, %cond.true112
  %cond121 = phi i8* [ %call116, %cond.true112 ], [ %98, %cond.false117 ]
  br label %if.end122

if.end122:                                        ; preds = %cond.end120, %if.then96
  %99 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any123 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 0
  %100 = load i8*, i8** %sv_any123, align 8
  %101 = bitcast i8* %100 to %struct.xpv*
  %xpv_cur124 = getelementptr inbounds %struct.xpv, %struct.xpv* %101, i32 0, i32 2
  %102 = load i64, i64* %xpv_cur124, align 8
  store i64 %102, i64* %retval, align 8
  br label %return

if.end125:                                        ; preds = %land.lhs.true93, %cond.false92, %cond.true91
  %103 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any126 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 0
  %104 = load i8*, i8** %sv_any126, align 8
  %105 = bitcast i8* %104 to %struct.xpv*
  %xpv_cur127 = getelementptr inbounds %struct.xpv, %struct.xpv* %105, i32 0, i32 2
  %106 = load i64, i64* %xpv_cur127, align 8
  %cmp128 = icmp eq i64 %106, 0
  br i1 %cmp128, label %if.then129, label %if.else148

if.then129:                                       ; preds = %if.end125
  %107 = load i64, i64* %extra.addr, align 8
  %tobool130 = icmp ne i64 %107, 0
  br i1 %tobool130, label %if.then131, label %if.end147

if.then131:                                       ; preds = %if.then129
  %108 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags132 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 2
  %109 = load i32, i32* %sv_flags132, align 4
  %and133 = and i32 %109, 268435456
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %cond.true140, label %lor.lhs.false135

lor.lhs.false135:                                 ; preds = %if.then131
  %110 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any136 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 0
  %111 = load i8*, i8** %sv_any136, align 8
  %112 = bitcast i8* %111 to %struct.xpv*
  %xpv_len_u137 = getelementptr inbounds %struct.xpv, %struct.xpv* %112, i32 0, i32 3
  %xpvlenu_len138 = bitcast %union.anon.19* %xpv_len_u137 to i64*
  %113 = load i64, i64* %xpvlenu_len138, align 8
  %114 = load i64, i64* %extra.addr, align 8
  %cmp139 = icmp ult i64 %113, %114
  br i1 %cmp139, label %cond.true140, label %cond.false142

cond.true140:                                     ; preds = %lor.lhs.false135, %if.then131
  %115 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %116 = load i64, i64* %extra.addr, align 8
  %call141 = call i8* @Perl_sv_grow(%struct.sv* %115, i64 %116)
  br label %cond.end145

cond.false142:                                    ; preds = %lor.lhs.false135
  %117 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u143 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 3
  %svu_pv144 = bitcast %union.anon* %sv_u143 to i8**
  %118 = load i8*, i8** %svu_pv144, align 8
  br label %cond.end145

cond.end145:                                      ; preds = %cond.false142, %cond.true140
  %cond146 = phi i8* [ %call141, %cond.true140 ], [ %118, %cond.false142 ]
  br label %if.end147

if.end147:                                        ; preds = %cond.end145, %if.then129
  br label %if.end350

if.else148:                                       ; preds = %if.end125
  %119 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u149 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 3
  %svu_pv150 = bitcast %union.anon* %sv_u149 to i8**
  %120 = load i8*, i8** %svu_pv150, align 8
  %add.ptr = getelementptr inbounds i8, i8* %120, i64 0
  store i8* %add.ptr, i8** %s, align 8
  %121 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u151 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 3
  %svu_pv152 = bitcast %union.anon* %sv_u151 to i8**
  %122 = load i8*, i8** %svu_pv152, align 8
  %123 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any153 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any153, align 8
  %125 = bitcast i8* %124 to %struct.xpv*
  %xpv_cur154 = getelementptr inbounds %struct.xpv, %struct.xpv* %125, i32 0, i32 2
  %126 = load i64, i64* %xpv_cur154, align 8
  %add.ptr155 = getelementptr inbounds i8, i8* %122, i64 %126
  store i8* %add.ptr155, i8** %e, align 8
  %127 = load i8*, i8** %s, align 8
  store i8* %127, i8** %t, align 8
  store i64 0, i64* %two_byte_count, align 8
  %128 = load i32, i32* %flags.addr, align 4
  %and156 = and i32 %128, 4096
  %tobool157 = icmp ne i32 %and156, 0
  br i1 %tobool157, label %if.then158, label %if.end159

if.then158:                                       ; preds = %if.else148
  br label %must_be_utf8

if.end159:                                        ; preds = %if.else148
  br label %while.cond

while.cond:                                       ; preds = %if.then163, %if.end159
  %129 = load i8*, i8** %t, align 8
  %130 = load i8*, i8** %e, align 8
  %cmp160 = icmp ult i8* %129, %130
  br i1 %cmp160, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %131 = load i8*, i8** %t, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %131, i32 1
  store i8* %incdec.ptr, i8** %t, align 8
  %132 = load i8, i8* %131, align 1
  store i8 %132, i8* %ch, align 1
  %133 = load i8, i8* %ch, align 1
  %conv = zext i8 %133 to i64
  %cmp161 = icmp ult i64 %conv, 128
  br i1 %cmp161, label %if.then163, label %if.end164

if.then163:                                       ; preds = %while.body
  br label %while.cond

if.end164:                                        ; preds = %while.body
  %134 = load i8*, i8** %t, align 8
  %incdec.ptr165 = getelementptr inbounds i8, i8* %134, i32 -1
  store i8* %incdec.ptr165, i8** %t, align 8
  store i64 1, i64* %two_byte_count, align 8
  br label %must_be_utf8

while.end:                                        ; preds = %while.cond
  %135 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags166 = getelementptr inbounds %struct.sv, %struct.sv* %135, i32 0, i32 2
  %136 = load i32, i32* %sv_flags166, align 4
  %or = or i32 %136, 536870912
  store i32 %or, i32* %sv_flags166, align 4
  %137 = load i64, i64* %extra.addr, align 8
  %tobool167 = icmp ne i64 %137, 0
  br i1 %tobool167, label %if.then168, label %if.end191

if.then168:                                       ; preds = %while.end
  %138 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags169 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 2
  %139 = load i32, i32* %sv_flags169, align 4
  %and170 = and i32 %139, 268435456
  %tobool171 = icmp ne i32 %and170, 0
  br i1 %tobool171, label %cond.true181, label %lor.lhs.false172

lor.lhs.false172:                                 ; preds = %if.then168
  %140 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any173 = getelementptr inbounds %struct.sv, %struct.sv* %140, i32 0, i32 0
  %141 = load i8*, i8** %sv_any173, align 8
  %142 = bitcast i8* %141 to %struct.xpv*
  %xpv_len_u174 = getelementptr inbounds %struct.xpv, %struct.xpv* %142, i32 0, i32 3
  %xpvlenu_len175 = bitcast %union.anon.19* %xpv_len_u174 to i64*
  %143 = load i64, i64* %xpvlenu_len175, align 8
  %144 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any176 = getelementptr inbounds %struct.sv, %struct.sv* %144, i32 0, i32 0
  %145 = load i8*, i8** %sv_any176, align 8
  %146 = bitcast i8* %145 to %struct.xpv*
  %xpv_cur177 = getelementptr inbounds %struct.xpv, %struct.xpv* %146, i32 0, i32 2
  %147 = load i64, i64* %xpv_cur177, align 8
  %148 = load i64, i64* %extra.addr, align 8
  %add178 = add i64 %147, %148
  %cmp179 = icmp ult i64 %143, %add178
  br i1 %cmp179, label %cond.true181, label %cond.false186

cond.true181:                                     ; preds = %lor.lhs.false172, %if.then168
  %149 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %150 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any182 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 0
  %151 = load i8*, i8** %sv_any182, align 8
  %152 = bitcast i8* %151 to %struct.xpv*
  %xpv_cur183 = getelementptr inbounds %struct.xpv, %struct.xpv* %152, i32 0, i32 2
  %153 = load i64, i64* %xpv_cur183, align 8
  %154 = load i64, i64* %extra.addr, align 8
  %add184 = add i64 %153, %154
  %call185 = call i8* @Perl_sv_grow(%struct.sv* %149, i64 %add184)
  br label %cond.end189

cond.false186:                                    ; preds = %lor.lhs.false172
  %155 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u187 = getelementptr inbounds %struct.sv, %struct.sv* %155, i32 0, i32 3
  %svu_pv188 = bitcast %union.anon* %sv_u187 to i8**
  %156 = load i8*, i8** %svu_pv188, align 8
  br label %cond.end189

cond.end189:                                      ; preds = %cond.false186, %cond.true181
  %cond190 = phi i8* [ %call185, %cond.true181 ], [ %156, %cond.false186 ]
  br label %if.end191

if.end191:                                        ; preds = %cond.end189, %while.end
  %157 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any192 = getelementptr inbounds %struct.sv, %struct.sv* %157, i32 0, i32 0
  %158 = load i8*, i8** %sv_any192, align 8
  %159 = bitcast i8* %158 to %struct.xpv*
  %xpv_cur193 = getelementptr inbounds %struct.xpv, %struct.xpv* %159, i32 0, i32 2
  %160 = load i64, i64* %xpv_cur193, align 8
  store i64 %160, i64* %retval, align 8
  br label %return

must_be_utf8:                                     ; preds = %if.end164, %if.then158
  %161 = load i8*, i8** %t, align 8
  %162 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %161 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %162 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %invariant_head, align 8
  %163 = load i64, i64* %invariant_head, align 8
  %164 = load i8*, i8** %e, align 8
  %165 = load i8*, i8** %t, align 8
  %sub.ptr.lhs.cast194 = ptrtoint i8* %164 to i64
  %sub.ptr.rhs.cast195 = ptrtoint i8* %165 to i64
  %sub.ptr.sub196 = sub i64 %sub.ptr.lhs.cast194, %sub.ptr.rhs.cast195
  %mul = mul nsw i64 %sub.ptr.sub196, 2
  %add197 = add i64 %163, %mul
  %add198 = add i64 %add197, 1
  %166 = load i64, i64* %extra.addr, align 8
  %add199 = add i64 %add198, %166
  store i64 %add199, i64* %size, align 8
  %167 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any200 = getelementptr inbounds %struct.sv, %struct.sv* %167, i32 0, i32 0
  %168 = load i8*, i8** %sv_any200, align 8
  %169 = bitcast i8* %168 to %struct.xpv*
  %xpv_len_u201 = getelementptr inbounds %struct.xpv, %struct.xpv* %169, i32 0, i32 3
  %xpvlenu_len202 = bitcast %union.anon.19* %xpv_len_u201 to i64*
  %170 = load i64, i64* %xpvlenu_len202, align 8
  %171 = load i64, i64* %size, align 8
  %cmp203 = icmp ult i64 %170, %171
  br i1 %cmp203, label %if.then205, label %if.else282

if.then205:                                       ; preds = %must_be_utf8
  %172 = load i64, i64* %size, align 8
  %mul206 = mul i64 %172, 1
  %call207 = call i8* @Perl_safesysmalloc(i64 %mul206)
  store i8* %call207, i8** %dst, align 8
  %173 = load i64, i64* %invariant_head, align 8
  %cmp208 = icmp eq i64 %173, 0
  br i1 %cmp208, label %if.then210, label %if.else211

if.then210:                                       ; preds = %if.then205
  %174 = load i8*, i8** %dst, align 8
  store i8* %174, i8** %d, align 8
  br label %if.end214

if.else211:                                       ; preds = %if.then205
  %175 = load i8*, i8** %dst, align 8
  %176 = load i8*, i8** %s, align 8
  %177 = load i64, i64* %invariant_head, align 8
  %mul212 = mul i64 %177, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %175, i8* align 1 %176, i64 %mul212, i1 false)
  %178 = load i8*, i8** %dst, align 8
  %179 = load i64, i64* %invariant_head, align 8
  %add.ptr213 = getelementptr inbounds i8, i8* %178, i64 %179
  store i8* %add.ptr213, i8** %d, align 8
  br label %if.end214

if.end214:                                        ; preds = %if.else211, %if.then210
  br label %while.cond215

while.cond215:                                    ; preds = %while.body218, %if.end214
  %180 = load i8*, i8** %t, align 8
  %181 = load i8*, i8** %e, align 8
  %cmp216 = icmp ult i8* %180, %181
  br i1 %cmp216, label %while.body218, label %while.end220

while.body218:                                    ; preds = %while.cond215
  %182 = load i8*, i8** %t, align 8
  %183 = load i8, i8* %182, align 1
  call void @S_append_utf8_from_native_byte(i8 zeroext %183, i8** %d)
  %184 = load i8*, i8** %t, align 8
  %incdec.ptr219 = getelementptr inbounds i8, i8* %184, i32 1
  store i8* %incdec.ptr219, i8** %t, align 8
  br label %while.cond215

while.end220:                                     ; preds = %while.cond215
  %185 = load i8*, i8** %d, align 8
  store i8 0, i8* %185, align 1
  br label %do.body

do.body:                                          ; preds = %while.end220
  %186 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any221 = getelementptr inbounds %struct.sv, %struct.sv* %186, i32 0, i32 0
  %187 = load i8*, i8** %sv_any221, align 8
  %188 = bitcast i8* %187 to %struct.xpv*
  %xpv_len_u222 = getelementptr inbounds %struct.xpv, %struct.xpv* %188, i32 0, i32 3
  %xpvlenu_len223 = bitcast %union.anon.19* %xpv_len_u222 to i64*
  %189 = load i64, i64* %xpvlenu_len223, align 8
  %tobool224 = icmp ne i64 %189, 0
  br i1 %tobool224, label %if.then225, label %if.end264

if.then225:                                       ; preds = %do.body
  %190 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags226 = getelementptr inbounds %struct.sv, %struct.sv* %190, i32 0, i32 2
  %191 = load i32, i32* %sv_flags226, align 4
  %and227 = and i32 %191, 33554432
  %tobool228 = icmp ne i32 %and227, 0
  br i1 %tobool228, label %cond.true229, label %cond.false230

cond.true229:                                     ; preds = %if.then225
  br i1 true, label %if.then231, label %if.end261

cond.false230:                                    ; preds = %if.then225
  br i1 false, label %if.then231, label %if.end261

if.then231:                                       ; preds = %cond.false230, %cond.true229
  br label %do.body232

do.body232:                                       ; preds = %if.then231
  %192 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags233 = getelementptr inbounds %struct.sv, %struct.sv* %192, i32 0, i32 2
  %193 = load i32, i32* %sv_flags233, align 4
  %and234 = and i32 %193, 33554432
  %tobool235 = icmp ne i32 %and234, 0
  br i1 %tobool235, label %if.then236, label %if.else249

if.then236:                                       ; preds = %do.body232
  %194 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u237 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 3
  %svu_pv238 = bitcast %union.anon* %sv_u237 to i8**
  %195 = load i8*, i8** %svu_pv238, align 8
  %add.ptr239 = getelementptr inbounds i8, i8* %195, i64 0
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr239, i64 -1
  %196 = load i8, i8* %arrayidx, align 1
  %conv240 = zext i8 %196 to i64
  store i64 %conv240, i64* %zok, align 8
  %197 = load i64, i64* %zok, align 8
  %tobool241 = icmp ne i64 %197, 0
  br i1 %tobool241, label %if.end248, label %if.then242

if.then242:                                       ; preds = %if.then236
  %198 = bitcast i64* %zok to i8*
  %199 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u243 = getelementptr inbounds %struct.sv, %struct.sv* %199, i32 0, i32 3
  %svu_pv244 = bitcast %union.anon* %sv_u243 to i8**
  %200 = load i8*, i8** %svu_pv244, align 8
  %add.ptr245 = getelementptr inbounds i8, i8* %200, i64 0
  %add.ptr246 = getelementptr inbounds i8, i8* %add.ptr245, i64 -1
  %add.ptr247 = getelementptr inbounds i8, i8* %add.ptr246, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %198, i8* align 1 %add.ptr247, i64 8, i1 false)
  br label %if.end248

if.end248:                                        ; preds = %if.then242, %if.then236
  br label %if.end250

if.else249:                                       ; preds = %do.body232
  store i64 0, i64* %zok, align 8
  br label %if.end250

if.end250:                                        ; preds = %if.else249, %if.end248
  br label %do.end

do.end:                                           ; preds = %if.end250
  br label %do.body251

do.body251:                                       ; preds = %do.end
  %201 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u252 = getelementptr inbounds %struct.sv, %struct.sv* %201, i32 0, i32 3
  %svu_pv253 = bitcast %union.anon* %sv_u252 to i8**
  %202 = load i8*, i8** %svu_pv253, align 8
  %add.ptr254 = getelementptr inbounds i8, i8* %202, i64 0
  %203 = load i64, i64* %zok, align 8
  %idx.neg = sub i64 0, %203
  %add.ptr255 = getelementptr inbounds i8, i8* %add.ptr254, i64 %idx.neg
  %204 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u256 = getelementptr inbounds %struct.sv, %struct.sv* %204, i32 0, i32 3
  %svu_pv257 = bitcast %union.anon* %sv_u256 to i8**
  store i8* %add.ptr255, i8** %svu_pv257, align 8
  br label %do.end258

do.end258:                                        ; preds = %do.body251
  %205 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags259 = getelementptr inbounds %struct.sv, %struct.sv* %205, i32 0, i32 2
  %206 = load i32, i32* %sv_flags259, align 4
  %and260 = and i32 %206, -33554433
  store i32 %and260, i32* %sv_flags259, align 4
  br label %if.end261

if.end261:                                        ; preds = %do.end258, %cond.false230, %cond.true229
  %207 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u262 = getelementptr inbounds %struct.sv, %struct.sv* %207, i32 0, i32 3
  %svu_pv263 = bitcast %union.anon* %sv_u262 to i8**
  %208 = load i8*, i8** %svu_pv263, align 8
  call void @Perl_safesysfree(i8* %208)
  br label %if.end264

if.end264:                                        ; preds = %if.end261, %do.body
  br label %do.end265

do.end265:                                        ; preds = %if.end264
  br label %do.body266

do.body266:                                       ; preds = %do.end265
  %209 = load i8*, i8** %dst, align 8
  %210 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u267 = getelementptr inbounds %struct.sv, %struct.sv* %210, i32 0, i32 3
  %svu_pv268 = bitcast %union.anon* %sv_u267 to i8**
  store i8* %209, i8** %svu_pv268, align 8
  br label %do.end269

do.end269:                                        ; preds = %do.body266
  br label %do.body270

do.body270:                                       ; preds = %do.end269
  %211 = load i8*, i8** %d, align 8
  %212 = load i8*, i8** %dst, align 8
  %sub.ptr.lhs.cast271 = ptrtoint i8* %211 to i64
  %sub.ptr.rhs.cast272 = ptrtoint i8* %212 to i64
  %sub.ptr.sub273 = sub i64 %sub.ptr.lhs.cast271, %sub.ptr.rhs.cast272
  %213 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any274 = getelementptr inbounds %struct.sv, %struct.sv* %213, i32 0, i32 0
  %214 = load i8*, i8** %sv_any274, align 8
  %215 = bitcast i8* %214 to %struct.xpv*
  %xpv_cur275 = getelementptr inbounds %struct.xpv, %struct.xpv* %215, i32 0, i32 2
  store i64 %sub.ptr.sub273, i64* %xpv_cur275, align 8
  br label %do.end276

do.end276:                                        ; preds = %do.body270
  br label %do.body277

do.body277:                                       ; preds = %do.end276
  %216 = load i64, i64* %size, align 8
  %217 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any278 = getelementptr inbounds %struct.sv, %struct.sv* %217, i32 0, i32 0
  %218 = load i8*, i8** %sv_any278, align 8
  %219 = bitcast i8* %218 to %struct.xpv*
  %xpv_len_u279 = getelementptr inbounds %struct.xpv, %struct.xpv* %219, i32 0, i32 3
  %xpvlenu_len280 = bitcast %union.anon.19* %xpv_len_u279 to i64*
  store i64 %216, i64* %xpvlenu_len280, align 8
  br label %do.end281

do.end281:                                        ; preds = %do.body277
  br label %if.end328

if.else282:                                       ; preds = %must_be_utf8
  %220 = load i8*, i8** %t, align 8
  %221 = load i64, i64* %two_byte_count, align 8
  %add.ptr284 = getelementptr inbounds i8, i8* %220, i64 %221
  store i8* %add.ptr284, i8** %d283, align 8
  br label %while.cond285

while.cond285:                                    ; preds = %if.end294, %if.else282
  %222 = load i8*, i8** %d283, align 8
  %223 = load i8*, i8** %e, align 8
  %cmp286 = icmp ult i8* %222, %223
  br i1 %cmp286, label %while.body288, label %while.end295

while.body288:                                    ; preds = %while.cond285
  %224 = load i8*, i8** %d283, align 8
  %incdec.ptr289 = getelementptr inbounds i8, i8* %224, i32 1
  store i8* %incdec.ptr289, i8** %d283, align 8
  %225 = load i8, i8* %224, align 1
  store i8 %225, i8* %chr, align 1
  %226 = load i8, i8* %chr, align 1
  %conv290 = zext i8 %226 to i64
  %cmp291 = icmp ult i64 %conv290, 128
  br i1 %cmp291, label %if.end294, label %if.then293

if.then293:                                       ; preds = %while.body288
  %227 = load i64, i64* %two_byte_count, align 8
  %inc = add i64 %227, 1
  store i64 %inc, i64* %two_byte_count, align 8
  br label %if.end294

if.end294:                                        ; preds = %if.then293, %while.body288
  br label %while.cond285

while.end295:                                     ; preds = %while.cond285
  %228 = load i64, i64* %two_byte_count, align 8
  %229 = load i8*, i8** %d283, align 8
  %add.ptr296 = getelementptr inbounds i8, i8* %229, i64 %228
  store i8* %add.ptr296, i8** %d283, align 8
  br label %do.body297

do.body297:                                       ; preds = %while.end295
  %230 = load i8*, i8** %d283, align 8
  %231 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast298 = ptrtoint i8* %230 to i64
  %sub.ptr.rhs.cast299 = ptrtoint i8* %231 to i64
  %sub.ptr.sub300 = sub i64 %sub.ptr.lhs.cast298, %sub.ptr.rhs.cast299
  %232 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any301 = getelementptr inbounds %struct.sv, %struct.sv* %232, i32 0, i32 0
  %233 = load i8*, i8** %sv_any301, align 8
  %234 = bitcast i8* %233 to %struct.xpv*
  %xpv_cur302 = getelementptr inbounds %struct.xpv, %struct.xpv* %234, i32 0, i32 2
  store i64 %sub.ptr.sub300, i64* %xpv_cur302, align 8
  br label %do.end303

do.end303:                                        ; preds = %do.body297
  %235 = load i8*, i8** %d283, align 8
  %incdec.ptr304 = getelementptr inbounds i8, i8* %235, i32 -1
  store i8* %incdec.ptr304, i8** %d283, align 8
  store i8 0, i8* %235, align 1
  %236 = load i8*, i8** %e, align 8
  %incdec.ptr305 = getelementptr inbounds i8, i8* %236, i32 -1
  store i8* %incdec.ptr305, i8** %e, align 8
  br label %while.cond306

while.cond306:                                    ; preds = %if.end325, %do.end303
  %237 = load i8*, i8** %e, align 8
  %238 = load i8*, i8** %t, align 8
  %cmp307 = icmp uge i8* %237, %238
  br i1 %cmp307, label %while.body309, label %while.end327

while.body309:                                    ; preds = %while.cond306
  %239 = load i8*, i8** %e, align 8
  %240 = load i8, i8* %239, align 1
  %conv310 = zext i8 %240 to i64
  %cmp311 = icmp ult i64 %conv310, 128
  br i1 %cmp311, label %if.then313, label %if.else315

if.then313:                                       ; preds = %while.body309
  %241 = load i8*, i8** %e, align 8
  %242 = load i8, i8* %241, align 1
  %243 = load i8*, i8** %d283, align 8
  %incdec.ptr314 = getelementptr inbounds i8, i8* %243, i32 -1
  store i8* %incdec.ptr314, i8** %d283, align 8
  store i8 %242, i8* %243, align 1
  br label %if.end325

if.else315:                                       ; preds = %while.body309
  %244 = load i8*, i8** %e, align 8
  %245 = load i8, i8* %244, align 1
  %conv316 = zext i8 %245 to i32
  %and317 = and i32 %conv316, 63
  %or318 = or i32 %and317, 128
  %conv319 = trunc i32 %or318 to i8
  %246 = load i8*, i8** %d283, align 8
  %incdec.ptr320 = getelementptr inbounds i8, i8* %246, i32 -1
  store i8* %incdec.ptr320, i8** %d283, align 8
  store i8 %conv319, i8* %246, align 1
  %247 = load i8*, i8** %e, align 8
  %248 = load i8, i8* %247, align 1
  %conv321 = zext i8 %248 to i32
  %shr = ashr i32 %conv321, 6
  %or322 = or i32 %shr, 192
  %conv323 = trunc i32 %or322 to i8
  %249 = load i8*, i8** %d283, align 8
  %incdec.ptr324 = getelementptr inbounds i8, i8* %249, i32 -1
  store i8* %incdec.ptr324, i8** %d283, align 8
  store i8 %conv323, i8* %249, align 1
  br label %if.end325

if.end325:                                        ; preds = %if.else315, %if.then313
  %250 = load i8*, i8** %e, align 8
  %incdec.ptr326 = getelementptr inbounds i8, i8* %250, i32 -1
  store i8* %incdec.ptr326, i8** %e, align 8
  br label %while.cond306

while.end327:                                     ; preds = %while.cond306
  br label %if.end328

if.end328:                                        ; preds = %while.end327, %do.end281
  %251 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags329 = getelementptr inbounds %struct.sv, %struct.sv* %251, i32 0, i32 2
  %252 = load i32, i32* %sv_flags329, align 4
  %and330 = and i32 %252, 255
  %cmp331 = icmp uge i32 %and330, 7
  br i1 %cmp331, label %land.lhs.true333, label %if.end349

land.lhs.true333:                                 ; preds = %if.end328
  %253 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any334 = getelementptr inbounds %struct.sv, %struct.sv* %253, i32 0, i32 0
  %254 = load i8*, i8** %sv_any334, align 8
  %255 = bitcast i8* %254 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %255, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %256 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool335 = icmp ne %struct.magic* %256, null
  br i1 %tobool335, label %if.then336, label %if.end349

if.then336:                                       ; preds = %land.lhs.true333
  %257 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call337 = call %struct.magic* @Perl_mg_find(%struct.sv* %257, i32 103)
  store %struct.magic* %call337, %struct.magic** %mg, align 8
  %258 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool338 = icmp ne %struct.magic* %258, null
  br i1 %tobool338, label %if.then339, label %if.end343

if.then339:                                       ; preds = %if.then336
  %259 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %259, i32 0, i32 4
  %260 = load i8, i8* %mg_flags, align 1
  %conv340 = zext i8 %260 to i32
  %and341 = and i32 %conv340, -65
  %conv342 = trunc i32 %and341 to i8
  store i8 %conv342, i8* %mg_flags, align 1
  br label %if.end343

if.end343:                                        ; preds = %if.then339, %if.then336
  %261 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call344 = call %struct.magic* @Perl_mg_find(%struct.sv* %261, i32 119)
  store %struct.magic* %call344, %struct.magic** %mg, align 8
  %tobool345 = icmp ne %struct.magic* %call344, null
  br i1 %tobool345, label %if.then346, label %if.end348

if.then346:                                       ; preds = %if.end343
  %262 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %263 = load %struct.magic*, %struct.magic** %mg, align 8
  %call347 = call i32 @Perl_magic_setutf8(%struct.sv* %262, %struct.magic* %263)
  br label %if.end348

if.end348:                                        ; preds = %if.then346, %if.end343
  br label %if.end349

if.end349:                                        ; preds = %if.end348, %land.lhs.true333, %if.end328
  br label %if.end350

if.end350:                                        ; preds = %if.end349, %if.end147
  %264 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags351 = getelementptr inbounds %struct.sv, %struct.sv* %264, i32 0, i32 2
  %265 = load i32, i32* %sv_flags351, align 4
  %or352 = or i32 %265, 536870912
  store i32 %or352, i32* %sv_flags351, align 4
  %266 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any353 = getelementptr inbounds %struct.sv, %struct.sv* %266, i32 0, i32 0
  %267 = load i8*, i8** %sv_any353, align 8
  %268 = bitcast i8* %267 to %struct.xpv*
  %xpv_cur354 = getelementptr inbounds %struct.xpv, %struct.xpv* %268, i32 0, i32 2
  %269 = load i64, i64* %xpv_cur354, align 8
  store i64 %269, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end350, %if.end191, %if.end122, %if.end76, %if.end32, %if.then
  %270 = load i64, i64* %retval, align 8
  ret i64 %270
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %retval = alloca i1, align 1
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %tmpsv = alloca %struct.sv*, align 8
  %svb = alloca i8, align 1
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  br label %restart

restart:                                          ; preds = %if.else106, %if.then48, %entry
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %restart
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %2, 2097152
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.then
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  %tobool3 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %4 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  br label %if.end

if.end:                                           ; preds = %land.end, %restart
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %6, 65280
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.end14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %8, 255
  %cmp = icmp eq i32 %and8, 8
  br i1 %cmp, label %if.end14, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %10, 16826623
  %cmp12 = icmp eq i32 %and11, 16777226
  br i1 %cmp12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %lor.lhs.false9
  store i1 false, i1* %retval, align 1
  br label %return

if.end14:                                         ; preds = %lor.lhs.false9, %lor.lhs.false, %if.end
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %12, 2048
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then18, label %if.end120

if.then18:                                        ; preds = %if.end14
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %14, 2048
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %land.lhs.true, label %if.end115

land.lhs.true:                                    ; preds = %if.then18
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %16 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %17, 1048576
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %land.lhs.true25, label %if.end115

land.lhs.true25:                                  ; preds = %land.lhs.true
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u26 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 3
  %svu_rv27 = bitcast %union.anon* %sv_u26 to %struct.sv**
  %19 = load %struct.sv*, %struct.sv** %svu_rv27, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any, align 8
  %21 = bitcast i8* %20 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %21, i32 0, i32 0
  %22 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags28 = getelementptr inbounds %struct.hv, %struct.hv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %23, 268435456
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %if.then31, label %if.end115

if.then31:                                        ; preds = %land.lhs.true25
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call32 = call %struct.sv* @Perl_amagic_call(%struct.sv* %24, %struct.sv* @PL_sv_undef, i32 8, i32 9)
  store %struct.sv* %call32, %struct.sv** %tmpsv, align 8
  %25 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %tobool33 = icmp ne %struct.sv* %25, null
  br i1 %tobool33, label %land.lhs.true34, label %if.end114

land.lhs.true34:                                  ; preds = %if.then31
  %26 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %27, 2048
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %lor.lhs.false38, label %if.then44

lor.lhs.false38:                                  ; preds = %land.lhs.true34
  %28 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u39 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 3
  %svu_rv40 = bitcast %union.anon* %sv_u39 to %struct.sv**
  %29 = load %struct.sv*, %struct.sv** %svu_rv40, align 8
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u41 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 3
  %svu_rv42 = bitcast %union.anon* %sv_u41 to %struct.sv**
  %31 = load %struct.sv*, %struct.sv** %svu_rv42, align 8
  %cmp43 = icmp ne %struct.sv* %29, %31
  br i1 %cmp43, label %if.then44, label %if.end114

if.then44:                                        ; preds = %lor.lhs.false38, %land.lhs.true34
  %32 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  store %struct.sv* %32, %struct.sv** %sv.addr, align 8
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %34, 2097152
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.then48, label %if.else

if.then48:                                        ; preds = %if.then44
  store i32 2, i32* %flags.addr, align 4
  br label %restart

if.else:                                          ; preds = %if.then44
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags49 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags49, align 4
  %and50 = and i32 %36, 65280
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %if.else61, label %lor.lhs.false52

lor.lhs.false52:                                  ; preds = %if.else
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %38, 255
  %cmp55 = icmp eq i32 %and54, 8
  br i1 %cmp55, label %if.else61, label %lor.lhs.false56

lor.lhs.false56:                                  ; preds = %lor.lhs.false52
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags57 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags57, align 4
  %and58 = and i32 %40, 16826623
  %cmp59 = icmp eq i32 %and58, 16777226
  br i1 %cmp59, label %if.else61, label %if.then60

if.then60:                                        ; preds = %lor.lhs.false56
  store i8 0, i8* %svb, align 1
  br label %if.end109

if.else61:                                        ; preds = %lor.lhs.false56, %lor.lhs.false52, %if.else
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %42, 1024
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.then65, label %if.else82

if.then65:                                        ; preds = %if.else61
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any66 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any66, align 8
  %45 = bitcast i8* %44 to %struct.xpv*
  %tobool67 = icmp ne %struct.xpv* %45, null
  br i1 %tobool67, label %land.rhs68, label %land.end80

land.rhs68:                                       ; preds = %if.then65
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any69 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any69, align 8
  %48 = bitcast i8* %47 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %48, i32 0, i32 2
  %49 = load i64, i64* %xpv_cur, align 8
  %cmp70 = icmp ugt i64 %49, 1
  br i1 %cmp70, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs68
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any71 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any71, align 8
  %52 = bitcast i8* %51 to %struct.xpv*
  %xpv_cur72 = getelementptr inbounds %struct.xpv, %struct.xpv* %52, i32 0, i32 2
  %53 = load i64, i64* %xpv_cur72, align 8
  %tobool73 = icmp ne i64 %53, 0
  br i1 %tobool73, label %land.rhs74, label %land.end78

land.rhs74:                                       ; preds = %lor.rhs
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u75 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u75 to i8**
  %55 = load i8*, i8** %svu_pv, align 8
  %56 = load i8, i8* %55, align 1
  %conv = sext i8 %56 to i32
  %cmp76 = icmp ne i32 %conv, 48
  br label %land.end78

land.end78:                                       ; preds = %land.rhs74, %lor.rhs
  %57 = phi i1 [ false, %lor.rhs ], [ %cmp76, %land.rhs74 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end78, %land.rhs68
  %58 = phi i1 [ true, %land.rhs68 ], [ %57, %land.end78 ]
  br label %land.end80

land.end80:                                       ; preds = %lor.end, %if.then65
  %59 = phi i1 [ false, %if.then65 ], [ %58, %lor.end ]
  %frombool = zext i1 %59 to i8
  store i8 %frombool, i8* %svb, align 1
  br label %if.end108

if.else82:                                        ; preds = %if.else61
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags83 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %61, 768
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %if.then86, label %if.else106

if.then86:                                        ; preds = %if.else82
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags87 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags87, align 4
  %and88 = and i32 %63, 256
  %tobool89 = icmp ne i32 %and88, 0
  br i1 %tobool89, label %land.lhs.true90, label %lor.rhs94

land.lhs.true90:                                  ; preds = %if.then86
  %64 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any91 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any91, align 8
  %66 = bitcast i8* %65 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %66, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %67 = load i64, i64* %xivu_iv, align 8
  %cmp92 = icmp ne i64 %67, 0
  br i1 %cmp92, label %lor.end104, label %lor.rhs94

lor.rhs94:                                        ; preds = %land.lhs.true90, %if.then86
  %68 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags95 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %69, 512
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %land.rhs98, label %land.end102

land.rhs98:                                       ; preds = %lor.rhs94
  %70 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any99 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 0
  %71 = load i8*, i8** %sv_any99, align 8
  %72 = bitcast i8* %71 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %72, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %73 = load double, double* %xnv_nv, align 8
  %cmp100 = fcmp une double %73, 0.000000e+00
  br label %land.end102

land.end102:                                      ; preds = %land.rhs98, %lor.rhs94
  %74 = phi i1 [ false, %lor.rhs94 ], [ %cmp100, %land.rhs98 ]
  br label %lor.end104

lor.end104:                                       ; preds = %land.end102, %land.lhs.true90
  %75 = phi i1 [ true, %land.lhs.true90 ], [ %74, %land.end102 ]
  %frombool105 = zext i1 %75 to i8
  store i8 %frombool105, i8* %svb, align 1
  br label %if.end107

if.else106:                                       ; preds = %if.else82
  store i32 0, i32* %flags.addr, align 4
  br label %restart

if.end107:                                        ; preds = %lor.end104
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %land.end80
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.then60
  br label %if.end110

if.end110:                                        ; preds = %if.end109
  %76 = load i8, i8* %svb, align 1
  %tobool111 = trunc i8 %76 to i1
  %77 = zext i1 %tobool111 to i64
  %cond = select i1 %tobool111, i32 1, i32 0
  %tobool113 = icmp ne i32 %cond, 0
  store i1 %tobool113, i1* %retval, align 1
  br label %return

if.end114:                                        ; preds = %lor.lhs.false38, %if.then31
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %land.lhs.true25, %land.lhs.true, %if.then18
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u116 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 3
  %svu_rv117 = bitcast %union.anon* %sv_u116 to %struct.sv**
  %79 = load %struct.sv*, %struct.sv** %svu_rv117, align 8
  %cmp118 = icmp ne %struct.sv* %79, null
  store i1 %cmp118, i1* %retval, align 1
  br label %return

if.end120:                                        ; preds = %if.end14
  %80 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags121 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags121, align 4
  %and122 = and i32 %81, 255
  %cmp123 = icmp eq i32 %and122, 8
  br i1 %cmp123, label %if.then130, label %lor.lhs.false125

lor.lhs.false125:                                 ; preds = %if.end120
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags126 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags126, align 4
  %and127 = and i32 %83, 16826623
  %cmp128 = icmp eq i32 %and127, 16777226
  br i1 %cmp128, label %if.then130, label %if.end147

if.then130:                                       ; preds = %lor.lhs.false125, %if.end120
  %84 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any131 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 0
  %85 = load i8*, i8** %sv_any131, align 8
  %86 = bitcast i8* %85 to %struct.xpv*
  %xpv_cur132 = getelementptr inbounds %struct.xpv, %struct.xpv* %86, i32 0, i32 2
  %87 = load i64, i64* %xpv_cur132, align 8
  %cmp133 = icmp ugt i64 %87, 1
  br i1 %cmp133, label %lor.end146, label %lor.rhs135

lor.rhs135:                                       ; preds = %if.then130
  %88 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any136 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 0
  %89 = load i8*, i8** %sv_any136, align 8
  %90 = bitcast i8* %89 to %struct.xpv*
  %xpv_cur137 = getelementptr inbounds %struct.xpv, %struct.xpv* %90, i32 0, i32 2
  %91 = load i64, i64* %xpv_cur137, align 8
  %tobool138 = icmp ne i64 %91, 0
  br i1 %tobool138, label %land.rhs139, label %land.end144

land.rhs139:                                      ; preds = %lor.rhs135
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %93 = bitcast %struct.sv* %92 to %struct.p5rx*
  %call140 = call %struct.regexp* @S_ReANY(%struct.p5rx* %93)
  %xpv_len_u = getelementptr inbounds %struct.regexp, %struct.regexp* %call140, i32 0, i32 3
  %xpvlenu_pv = bitcast %union.anon.14* %xpv_len_u to i8**
  %94 = load i8*, i8** %xpvlenu_pv, align 8
  %95 = load i8, i8* %94, align 1
  %conv141 = sext i8 %95 to i32
  %cmp142 = icmp ne i32 %conv141, 48
  br label %land.end144

land.end144:                                      ; preds = %land.rhs139, %lor.rhs135
  %96 = phi i1 [ false, %lor.rhs135 ], [ %cmp142, %land.rhs139 ]
  br label %lor.end146

lor.end146:                                       ; preds = %land.end144, %if.then130
  %97 = phi i1 [ true, %if.then130 ], [ %96, %land.end144 ]
  store i1 %97, i1* %retval, align 1
  br label %return

if.end147:                                        ; preds = %lor.lhs.false125
  %98 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags148 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags148, align 4
  %and149 = and i32 %99, 65280
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %cond.false162, label %lor.lhs.false151

lor.lhs.false151:                                 ; preds = %if.end147
  %100 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags152 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 2
  %101 = load i32, i32* %sv_flags152, align 4
  %and153 = and i32 %101, 255
  %cmp154 = icmp eq i32 %and153, 8
  br i1 %cmp154, label %cond.false162, label %lor.lhs.false156

lor.lhs.false156:                                 ; preds = %lor.lhs.false151
  %102 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags157 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 2
  %103 = load i32, i32* %sv_flags157, align 4
  %and158 = and i32 %103, 16826623
  %cmp159 = icmp eq i32 %and158, 16777226
  br i1 %cmp159, label %cond.false162, label %cond.true161

cond.true161:                                     ; preds = %lor.lhs.false156
  br label %cond.end245

cond.false162:                                    ; preds = %lor.lhs.false156, %lor.lhs.false151, %if.end147
  %104 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags163 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 2
  %105 = load i32, i32* %sv_flags163, align 4
  %and164 = and i32 %105, 1024
  %tobool165 = icmp ne i32 %and164, 0
  br i1 %tobool165, label %cond.true166, label %cond.false189

cond.true166:                                     ; preds = %cond.false162
  %106 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any167 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 0
  %107 = load i8*, i8** %sv_any167, align 8
  %108 = bitcast i8* %107 to %struct.xpv*
  %tobool168 = icmp ne %struct.xpv* %108, null
  br i1 %tobool168, label %land.rhs169, label %land.end187

land.rhs169:                                      ; preds = %cond.true166
  %109 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any170 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 0
  %110 = load i8*, i8** %sv_any170, align 8
  %111 = bitcast i8* %110 to %struct.xpv*
  %xpv_cur171 = getelementptr inbounds %struct.xpv, %struct.xpv* %111, i32 0, i32 2
  %112 = load i64, i64* %xpv_cur171, align 8
  %cmp172 = icmp ugt i64 %112, 1
  br i1 %cmp172, label %lor.end186, label %lor.rhs174

lor.rhs174:                                       ; preds = %land.rhs169
  %113 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any175 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 0
  %114 = load i8*, i8** %sv_any175, align 8
  %115 = bitcast i8* %114 to %struct.xpv*
  %xpv_cur176 = getelementptr inbounds %struct.xpv, %struct.xpv* %115, i32 0, i32 2
  %116 = load i64, i64* %xpv_cur176, align 8
  %tobool177 = icmp ne i64 %116, 0
  br i1 %tobool177, label %land.rhs178, label %land.end184

land.rhs178:                                      ; preds = %lor.rhs174
  %117 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u179 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 3
  %svu_pv180 = bitcast %union.anon* %sv_u179 to i8**
  %118 = load i8*, i8** %svu_pv180, align 8
  %119 = load i8, i8* %118, align 1
  %conv181 = sext i8 %119 to i32
  %cmp182 = icmp ne i32 %conv181, 48
  br label %land.end184

land.end184:                                      ; preds = %land.rhs178, %lor.rhs174
  %120 = phi i1 [ false, %lor.rhs174 ], [ %cmp182, %land.rhs178 ]
  br label %lor.end186

lor.end186:                                       ; preds = %land.end184, %land.rhs169
  %121 = phi i1 [ true, %land.rhs169 ], [ %120, %land.end184 ]
  br label %land.end187

land.end187:                                      ; preds = %lor.end186, %cond.true166
  %122 = phi i1 [ false, %cond.true166 ], [ %121, %lor.end186 ]
  %land.ext188 = zext i1 %122 to i32
  br label %cond.end243

cond.false189:                                    ; preds = %cond.false162
  %123 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags190 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 2
  %124 = load i32, i32* %sv_flags190, align 4
  %and191 = and i32 %124, 768
  %tobool192 = icmp ne i32 %and191, 0
  br i1 %tobool192, label %cond.true193, label %cond.false222

cond.true193:                                     ; preds = %cond.false189
  %125 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags194 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 2
  %126 = load i32, i32* %sv_flags194, align 4
  %and195 = and i32 %126, 256
  %tobool196 = icmp ne i32 %and195, 0
  br i1 %tobool196, label %land.lhs.true197, label %lor.rhs203

land.lhs.true197:                                 ; preds = %cond.true193
  %127 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any198 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 0
  %128 = load i8*, i8** %sv_any198, align 8
  %129 = bitcast i8* %128 to %struct.xpviv*
  %xiv_u199 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %129, i32 0, i32 4
  %xivu_iv200 = bitcast %union._xivu* %xiv_u199 to i64*
  %130 = load i64, i64* %xivu_iv200, align 8
  %cmp201 = icmp ne i64 %130, 0
  br i1 %cmp201, label %lor.end221, label %lor.rhs203

lor.rhs203:                                       ; preds = %land.lhs.true197, %cond.true193
  %131 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags204 = getelementptr inbounds %struct.sv, %struct.sv* %131, i32 0, i32 2
  %132 = load i32, i32* %sv_flags204, align 4
  %and205 = and i32 %132, 512
  %tobool206 = icmp ne i32 %and205, 0
  br i1 %tobool206, label %land.rhs207, label %land.end219

land.rhs207:                                      ; preds = %lor.rhs203
  %133 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any208 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 0
  %134 = load i8*, i8** %sv_any208, align 8
  %135 = bitcast i8* %134 to %struct.xpvnv*
  %xnv_u209 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %135, i32 0, i32 5
  %xnv_nv210 = bitcast %union._xnvu* %xnv_u209 to double*
  %136 = load double, double* %xnv_nv210, align 8
  %cmp211 = fcmp uno double %136, %136
  br i1 %cmp211, label %lor.end218, label %lor.rhs212

lor.rhs212:                                       ; preds = %land.rhs207
  %137 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any213 = getelementptr inbounds %struct.sv, %struct.sv* %137, i32 0, i32 0
  %138 = load i8*, i8** %sv_any213, align 8
  %139 = bitcast i8* %138 to %struct.xpvnv*
  %xnv_u214 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %139, i32 0, i32 5
  %xnv_nv215 = bitcast %union._xnvu* %xnv_u214 to double*
  %140 = load double, double* %xnv_nv215, align 8
  %cmp216 = fcmp une double %140, 0.000000e+00
  br label %lor.end218

lor.end218:                                       ; preds = %lor.rhs212, %land.rhs207
  %141 = phi i1 [ true, %land.rhs207 ], [ %cmp216, %lor.rhs212 ]
  br label %land.end219

land.end219:                                      ; preds = %lor.end218, %lor.rhs203
  %142 = phi i1 [ false, %lor.rhs203 ], [ %141, %lor.end218 ]
  br label %lor.end221

lor.end221:                                       ; preds = %land.end219, %land.lhs.true197
  %143 = phi i1 [ true, %land.lhs.true197 ], [ %142, %land.end219 ]
  %lor.ext = zext i1 %143 to i32
  br label %cond.end

cond.false222:                                    ; preds = %cond.false189
  %144 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags223 = getelementptr inbounds %struct.sv, %struct.sv* %144, i32 0, i32 2
  %145 = load i32, i32* %sv_flags223, align 4
  %and224 = and i32 %145, 49152
  %cmp225 = icmp eq i32 %and224, 32768
  br i1 %cmp225, label %land.rhs227, label %land.end239

land.rhs227:                                      ; preds = %cond.false222
  %146 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags228 = getelementptr inbounds %struct.sv, %struct.sv* %146, i32 0, i32 2
  %147 = load i32, i32* %sv_flags228, align 4
  %and229 = and i32 %147, 255
  %cmp230 = icmp eq i32 %and229, 9
  br i1 %cmp230, label %lor.end237, label %lor.rhs232

lor.rhs232:                                       ; preds = %land.rhs227
  %148 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags233 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 2
  %149 = load i32, i32* %sv_flags233, align 4
  %and234 = and i32 %149, 255
  %cmp235 = icmp eq i32 %and234, 10
  br label %lor.end237

lor.end237:                                       ; preds = %lor.rhs232, %land.rhs227
  %150 = phi i1 [ true, %land.rhs227 ], [ %cmp235, %lor.rhs232 ]
  br label %land.end239

land.end239:                                      ; preds = %lor.end237, %cond.false222
  %151 = phi i1 [ false, %cond.false222 ], [ %150, %lor.end237 ]
  %152 = zext i1 %151 to i64
  %cond241 = select i1 %151, i32 1, i32 0
  br label %cond.end

cond.end:                                         ; preds = %land.end239, %lor.end221
  %cond242 = phi i32 [ %lor.ext, %lor.end221 ], [ %cond241, %land.end239 ]
  br label %cond.end243

cond.end243:                                      ; preds = %cond.end, %land.end187
  %cond244 = phi i32 [ %land.ext188, %land.end187 ], [ %cond242, %cond.end ]
  br label %cond.end245

cond.end245:                                      ; preds = %cond.end243, %cond.true161
  %cond246 = phi i32 [ 0, %cond.true161 ], [ %cond244, %cond.end243 ]
  %tobool247 = icmp ne i32 %cond246, 0
  store i1 %tobool247, i1* %retval, align 1
  br label %return

return:                                           ; preds = %cond.end245, %lor.end146, %if.end115, %if.end110, %if.then13
  %153 = load i1, i1* %retval, align 1
  ret i1 %153
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_sv_pvn_force_flags(%struct.sv* %sv, i64* %lp, i32 %flags) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %2, 2097152
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.then
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  %tobool3 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %4 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  br label %if.end

if.end:                                           ; preds = %land.end, %entry
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %6, 427886592
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %8, 2048
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %lor.lhs.false, label %if.then13

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %10, 134283264
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %11, i32 0)
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %lor.lhs.false, %if.end
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %13, 1024
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then18, label %if.else

if.then18:                                        ; preds = %if.end14
  %14 = load i64*, i64** %lp.addr, align 8
  %tobool19 = icmp ne i64* %14, null
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.then18
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 2
  %18 = load i64, i64* %xpv_cur, align 8
  %19 = load i64*, i64** %lp.addr, align 8
  store i64 %18, i64* %19, align 8
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.then18
  br label %if.end116

if.else:                                          ; preds = %if.end14
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %21, 255
  %cmp = icmp ugt i32 %and23, 10
  br i1 %cmp, label %if.then36, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %if.else
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %23, 49152
  %cmp27 = icmp eq i32 %and26, 32768
  br i1 %cmp27, label %land.lhs.true28, label %if.end46

land.lhs.true28:                                  ; preds = %lor.lhs.false24
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %25, 255
  %cmp31 = icmp eq i32 %and30, 9
  br i1 %cmp31, label %if.then36, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %land.lhs.true28
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %27, 255
  %cmp35 = icmp eq i32 %and34, 10
  br i1 %cmp35, label %if.then36, label %if.end46

if.then36:                                        ; preds = %lor.lhs.false32, %land.lhs.true28, %if.else
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call37 = call i8* @Perl_sv_reftype(%struct.sv* %28, i32 0)
  %29 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp38 = icmp eq i32 %bf.cast, 380
  br i1 %cmp38, label %cond.true39, label %cond.false41

cond.true39:                                      ; preds = %if.then36
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %call40 = call i8* @Perl_custom_op_get_field(%struct.op* %30, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call40, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %31 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false41:                                     ; preds = %if.then36
  %32 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type42 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 4
  %bf.load43 = load i16, i16* %op_type42, align 8
  %bf.clear44 = and i16 %bf.load43, 511
  %bf.cast45 = zext i16 %bf.clear44 to i32
  %idxprom = zext i32 %bf.cast45 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %33 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false41, %cond.true39
  %cond = phi i8* [ %31, %cond.true39 ], [ %33, %cond.false41 ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.49, i64 0, i64 0), i8* %call37, i8* %cond)
  br label %if.end46

if.end46:                                         ; preds = %cond.end, %lor.lhs.false32, %lor.lhs.false24
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %35 = load i32, i32* %flags.addr, align 4
  %and47 = and i32 %35, -3
  %call48 = call i8* @Perl_sv_2pv_flags(%struct.sv* %34, i64* %len, i32 %and47)
  store i8* %call48, i8** %s, align 8
  %36 = load i8*, i8** %s, align 8
  %tobool49 = icmp ne i8* %36, null
  br i1 %tobool49, label %if.end51, label %if.then50

if.then50:                                        ; preds = %if.end46
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8** %s, align 8
  br label %if.end51

if.end51:                                         ; preds = %if.then50, %if.end46
  %37 = load i64*, i64** %lp.addr, align 8
  %tobool52 = icmp ne i64* %37, null
  br i1 %tobool52, label %if.then53, label %if.end54

if.then53:                                        ; preds = %if.end51
  %38 = load i64, i64* %len, align 8
  %39 = load i64*, i64** %lp.addr, align 8
  store i64 %38, i64* %39, align 8
  br label %if.end54

if.end54:                                         ; preds = %if.then53, %if.end51
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags55 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags55, align 4
  %and56 = and i32 %41, 255
  %cmp57 = icmp ult i32 %and56, 3
  br i1 %cmp57, label %if.then60, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %if.end54
  %42 = load i8*, i8** %s, align 8
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %44 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %44, i64 0
  %cmp59 = icmp ne i8* %42, %add.ptr
  br i1 %cmp59, label %if.then60, label %if.end90

if.then60:                                        ; preds = %lor.lhs.false58, %if.end54
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %46, 2048
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %if.then64, label %if.end65

if.then64:                                        ; preds = %if.then60
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_unref_flags(%struct.sv* %47, i32 0)
  br label %if.end65

if.end65:                                         ; preds = %if.then64, %if.then60
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %49, 255
  %cmp68 = icmp uge i32 %and67, 3
  br i1 %cmp68, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end65
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %50, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end65
  %51 = phi i1 [ true, %if.end65 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %51 to i32
  %52 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %53, 268435456
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %cond.true75, label %lor.lhs.false72

lor.lhs.false72:                                  ; preds = %lor.end
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any73 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any73, align 8
  %56 = bitcast i8* %55 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %56, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %57 = load i64, i64* %xpvlenu_len, align 8
  %58 = load i64, i64* %len, align 8
  %add = add i64 %58, 1
  %cmp74 = icmp ult i64 %57, %add
  br i1 %cmp74, label %cond.true75, label %cond.false78

cond.true75:                                      ; preds = %lor.lhs.false72, %lor.end
  %59 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %60 = load i64, i64* %len, align 8
  %add76 = add i64 %60, 1
  %call77 = call i8* @Perl_sv_grow(%struct.sv* %59, i64 %add76)
  br label %cond.end81

cond.false78:                                     ; preds = %lor.lhs.false72
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u79 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 3
  %svu_pv80 = bitcast %union.anon* %sv_u79 to i8**
  %62 = load i8*, i8** %svu_pv80, align 8
  br label %cond.end81

cond.end81:                                       ; preds = %cond.false78, %cond.true75
  %cond82 = phi i8* [ %call77, %cond.true75 ], [ %62, %cond.false78 ]
  %63 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u83 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 3
  %svu_pv84 = bitcast %union.anon* %sv_u83 to i8**
  %64 = load i8*, i8** %svu_pv84, align 8
  %65 = load i8*, i8** %s, align 8
  %66 = load i64, i64* %len, align 8
  %mul = mul i64 %66, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %64, i8* align 1 %65, i64 %mul, i1 false)
  br label %do.body

do.body:                                          ; preds = %cond.end81
  %67 = load i64, i64* %len, align 8
  %68 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 0
  %69 = load i8*, i8** %sv_any85, align 8
  %70 = bitcast i8* %69 to %struct.xpv*
  %xpv_cur86 = getelementptr inbounds %struct.xpv, %struct.xpv* %70, i32 0, i32 2
  store i64 %67, i64* %xpv_cur86, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u87 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 3
  %svu_pv88 = bitcast %union.anon* %sv_u87 to i8**
  %72 = load i8*, i8** %svu_pv88, align 8
  %73 = load i64, i64* %len, align 8
  %arrayidx89 = getelementptr inbounds i8, i8* %72, i64 %73
  store i8 0, i8* %arrayidx89, align 1
  br label %if.end90

if.end90:                                         ; preds = %do.end, %lor.lhs.false58
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags91 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags91, align 4
  %and92 = and i32 %75, 1024
  %tobool93 = icmp ne i32 %and92, 0
  br i1 %tobool93, label %if.end115, label %if.then94

if.then94:                                        ; preds = %if.end90
  %76 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags95 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags95, align 4
  %or = or i32 %77, 17408
  store i32 %or, i32* %sv_flags95, align 4
  br label %do.body96

do.body96:                                        ; preds = %if.then94
  %78 = load i8, i8* @PL_tainting, align 1
  %tobool97 = trunc i8 %78 to i1
  br i1 %tobool97, label %cond.true98, label %cond.false99

cond.true98:                                      ; preds = %do.body96
  br i1 true, label %if.then100, label %if.end113

cond.false99:                                     ; preds = %do.body96
  br i1 false, label %if.then100, label %if.end113

if.then100:                                       ; preds = %cond.false99, %cond.true98
  %79 = load i8, i8* @PL_tainted, align 1
  %tobool101 = trunc i8 %79 to i1
  br i1 %tobool101, label %cond.true102, label %cond.false103

cond.true102:                                     ; preds = %if.then100
  br i1 true, label %if.then104, label %if.end112

cond.false103:                                    ; preds = %if.then100
  br i1 false, label %if.then104, label %if.end112

if.then104:                                       ; preds = %cond.false103, %cond.true102
  br label %do.body105

do.body105:                                       ; preds = %if.then104
  %80 = load i8, i8* @PL_tainting, align 1
  %tobool106 = trunc i8 %80 to i1
  br i1 %tobool106, label %cond.true107, label %cond.false108

cond.true107:                                     ; preds = %do.body105
  br i1 true, label %if.then109, label %if.end110

cond.false108:                                    ; preds = %do.body105
  br i1 false, label %if.then109, label %if.end110

if.then109:                                       ; preds = %cond.false108, %cond.true107
  %81 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %81, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %cond.false108, %cond.true107
  br label %do.end111

do.end111:                                        ; preds = %if.end110
  br label %if.end112

if.end112:                                        ; preds = %do.end111, %cond.false103, %cond.true102
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %cond.false99, %cond.true98
  br label %do.end114

do.end114:                                        ; preds = %if.end113
  br label %if.end115

if.end115:                                        ; preds = %do.end114, %if.end90
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %if.end21
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags117 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags117, align 4
  %and118 = and i32 %83, 2147418367
  store i32 %and118, i32* %sv_flags117, align 4
  %84 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags119 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags119, align 4
  %or120 = or i32 %85, 17408
  store i32 %or120, i32* %sv_flags119, align 4
  %86 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u121 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 3
  %svu_pv122 = bitcast %union.anon* %sv_u121 to i8**
  %87 = load i8*, i8** %svu_pv122, align 8
  %add.ptr123 = getelementptr inbounds i8, i8* %87, i64 0
  ret i8* %add.ptr123
}

declare dso_local %struct.sv* @Perl__get_encoding() #1

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_sv_recode_to_utf8(%struct.sv* %sv, %struct.sv* %encoding) #0 {
entry:
  %retval = alloca i8*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %encoding.addr = alloca %struct.sv*, align 8
  %uni = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %sp = alloca %struct.sv**, align 8
  %nsv = alloca %struct.sv*, align 8
  %next = alloca %struct.stackinfo*, align 8
  %mark_stack_entry = alloca i32*, align 8
  %sp109 = alloca %struct.sv**, align 8
  %prev = alloca %struct.stackinfo*, align 8
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.sv* %encoding, %struct.sv** %encoding.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 1024
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end156

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 536870912
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.end156, label %land.lhs.true4

land.lhs.true4:                                   ; preds = %land.lhs.true
  %4 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %4, i32 0, i32 10
  %5 = load i32, i32* %cop_hints, align 8
  %add = add i32 %5, 0
  %and5 = and i32 %add, 8
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.end156, label %land.lhs.true7

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %6 = load %struct.sv*, %struct.sv** %encoding.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %7, 2048
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then, label %if.end156

if.then:                                          ; preds = %land.lhs.true7
  %8 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %8, %struct.sv*** %sp, align 8
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %9, %struct.sv** %nsv, align 8
  call void @Perl_push_scope()
  br label %do.body

do.body:                                          ; preds = %if.then
  %10 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %10, i32 0, i32 3
  %11 = load %struct.stackinfo*, %struct.stackinfo** %si_next, align 8
  store %struct.stackinfo* %11, %struct.stackinfo** %next, align 8
  %12 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %tobool11 = icmp ne %struct.stackinfo* %12, null
  br i1 %tobool11, label %if.end, label %if.then12

if.then12:                                        ; preds = %do.body
  %call = call %struct.stackinfo* @Perl_new_stackinfo(i32 32, i32 22)
  store %struct.stackinfo* %call, %struct.stackinfo** %next, align 8
  %13 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %14 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %14, i32 0, i32 2
  store %struct.stackinfo* %13, %struct.stackinfo** %si_prev, align 8
  %15 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %16 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next13 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %16, i32 0, i32 3
  store %struct.stackinfo* %15, %struct.stackinfo** %si_next13, align 8
  br label %if.end

if.end:                                           ; preds = %if.then12, %do.body
  %17 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_type = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %17, i32 0, i32 6
  store i32 -1, i32* %si_type, align 8
  %18 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %18, i32 0, i32 4
  store i32 -1, i32* %si_cxix, align 8
  %19 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %19, i32 0, i32 0
  %20 = load %struct.av*, %struct.av** %si_stack, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %20, i32 0, i32 0
  %21 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %21, i32 0, i32 2
  store i64 0, i64* %xav_fill, align 8
  br label %do.body14

do.body14:                                        ; preds = %if.end
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %23 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %22 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %24 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any15 = getelementptr inbounds %struct.av, %struct.av* %24, i32 0, i32 0
  %25 = load %struct.xpvav*, %struct.xpvav** %sv_any15, align 8
  %xav_fill16 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %25, i32 0, i32 2
  store i64 %sub.ptr.div, i64* %xav_fill16, align 8
  %26 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack17 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %26, i32 0, i32 0
  %27 = load %struct.av*, %struct.av** %si_stack17, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %27, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u to %struct.sv***
  %28 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %28, %struct.sv*** @PL_stack_base, align 8
  %29 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %30 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack18 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %30, i32 0, i32 0
  %31 = load %struct.av*, %struct.av** %si_stack18, align 8
  %sv_any19 = getelementptr inbounds %struct.av, %struct.av* %31, i32 0, i32 0
  %32 = load %struct.xpvav*, %struct.xpvav** %sv_any19, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %32, i32 0, i32 3
  %33 = load i64, i64* %xav_max, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %29, i64 %33
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_max, align 8
  %34 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %35 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack20 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %35, i32 0, i32 0
  %36 = load %struct.av*, %struct.av** %si_stack20, align 8
  %sv_any21 = getelementptr inbounds %struct.av, %struct.av* %36, i32 0, i32 0
  %37 = load %struct.xpvav*, %struct.xpvav** %sv_any21, align 8
  %xav_fill22 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %37, i32 0, i32 2
  %38 = load i64, i64* %xav_fill22, align 8
  %add.ptr23 = getelementptr inbounds %struct.sv*, %struct.sv** %34, i64 %38
  store %struct.sv** %add.ptr23, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr23, %struct.sv*** %sp, align 8
  %39 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack24 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %39, i32 0, i32 0
  %40 = load %struct.av*, %struct.av** %si_stack24, align 8
  store %struct.av* %40, %struct.av** @PL_curstack, align 8
  br label %do.end

do.end:                                           ; preds = %do.body14
  %41 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  store %struct.stackinfo* %41, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end25

do.end25:                                         ; preds = %do.end
  call void @Perl_save_strlen(i64* @PL_tmps_floor)
  %42 = load i64, i64* @PL_tmps_ix, align 8
  store i64 %42, i64* @PL_tmps_floor, align 8
  %43 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %44, 131072
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.then29, label %if.end35

if.then29:                                        ; preds = %do.end25
  %call30 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call30, %struct.sv** %nsv, align 8
  br label %do.body31

do.body31:                                        ; preds = %if.then29
  %45 = load %struct.sv*, %struct.sv** %nsv, align 8
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %45, %46
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body31
  br i1 true, label %if.then32, label %if.end33

cond.false:                                       ; preds = %do.body31
  br i1 false, label %if.then32, label %if.end33

if.then32:                                        ; preds = %cond.false, %cond.true
  %47 = load %struct.sv*, %struct.sv** %nsv, align 8
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %47, %struct.sv* %48, i32 1554)
  br label %if.end33

if.end33:                                         ; preds = %if.then32, %cond.false, %cond.true
  br label %do.end34

do.end34:                                         ; preds = %if.end33
  br label %if.end35

if.end35:                                         ; preds = %do.end34, %do.end25
  call void @Perl_save_re_context()
  br label %do.body36

do.body36:                                        ; preds = %if.end35
  %49 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %49, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr, i32** %mark_stack_entry, align 8
  %50 = load i32*, i32** @PL_markstack_max, align 8
  %cmp37 = icmp eq i32* %incdec.ptr, %50
  br i1 %cmp37, label %cond.true38, label %cond.false39

cond.true38:                                      ; preds = %do.body36
  br i1 true, label %if.then40, label %if.end42

cond.false39:                                     ; preds = %do.body36
  br i1 false, label %if.then40, label %if.end42

if.then40:                                        ; preds = %cond.false39, %cond.true38
  %call41 = call i32* @Perl_markstack_grow()
  store i32* %call41, i32** %mark_stack_entry, align 8
  br label %if.end42

if.end42:                                         ; preds = %if.then40, %cond.false39, %cond.true38
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  %52 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast43 = ptrtoint %struct.sv** %51 to i64
  %sub.ptr.rhs.cast44 = ptrtoint %struct.sv** %52 to i64
  %sub.ptr.sub45 = sub i64 %sub.ptr.lhs.cast43, %sub.ptr.rhs.cast44
  %sub.ptr.div46 = sdiv exact i64 %sub.ptr.sub45, 8
  %conv = trunc i64 %sub.ptr.div46 to i32
  %53 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv, i32* %53, align 4
  br label %do.end47

do.end47:                                         ; preds = %if.end42
  br label %do.body48

do.body48:                                        ; preds = %do.end47
  %54 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %55 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast49 = ptrtoint %struct.sv** %54 to i64
  %sub.ptr.rhs.cast50 = ptrtoint %struct.sv** %55 to i64
  %sub.ptr.sub51 = sub i64 %sub.ptr.lhs.cast49, %sub.ptr.rhs.cast50
  %sub.ptr.div52 = sdiv exact i64 %sub.ptr.sub51, 8
  %cmp53 = icmp slt i64 %sub.ptr.div52, 3
  br i1 %cmp53, label %cond.true55, label %cond.false56

cond.true55:                                      ; preds = %do.body48
  br i1 true, label %if.then57, label %if.end59

cond.false56:                                     ; preds = %do.body48
  br i1 false, label %if.then57, label %if.end59

if.then57:                                        ; preds = %cond.false56, %cond.true55
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call58 = call %struct.sv** @Perl_stack_grow(%struct.sv** %56, %struct.sv** %57, i64 3)
  store %struct.sv** %call58, %struct.sv*** %sp, align 8
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %cond.false56, %cond.true55
  br label %do.end60

do.end60:                                         ; preds = %if.end59
  %59 = load %struct.sv*, %struct.sv** %encoding.addr, align 8
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr61 = getelementptr inbounds %struct.sv*, %struct.sv** %60, i32 1
  store %struct.sv** %incdec.ptr61, %struct.sv*** %sp, align 8
  store %struct.sv* %59, %struct.sv** %incdec.ptr61, align 8
  %61 = load %struct.sv*, %struct.sv** %nsv, align 8
  %62 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr62 = getelementptr inbounds %struct.sv*, %struct.sv** %62, i32 1
  store %struct.sv** %incdec.ptr62, %struct.sv*** %sp, align 8
  store %struct.sv* %61, %struct.sv** %incdec.ptr62, align 8
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %63, %struct.sv*** @PL_stack_sp, align 8
  %call63 = call i32 @Perl_call_method(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.83, i64 0, i64 0), i32 2)
  %64 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %64, %struct.sv*** %sp, align 8
  %65 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr64 = getelementptr inbounds %struct.sv*, %struct.sv** %65, i32 -1
  store %struct.sv** %incdec.ptr64, %struct.sv*** %sp, align 8
  %66 = load %struct.sv*, %struct.sv** %65, align 8
  store %struct.sv* %66, %struct.sv** %uni, align 8
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %67, %struct.sv*** @PL_stack_sp, align 8
  %68 = load %struct.sv*, %struct.sv** %uni, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %69, 2098176
  %cmp67 = icmp eq i32 %and66, 1024
  br i1 %cmp67, label %cond.true69, label %cond.false73

cond.true69:                                      ; preds = %do.end60
  %70 = load %struct.sv*, %struct.sv** %uni, align 8
  %sv_any70 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 0
  %71 = load i8*, i8** %sv_any70, align 8
  %72 = bitcast i8* %71 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %72, i32 0, i32 2
  %73 = load i64, i64* %xpv_cur, align 8
  store i64 %73, i64* %len, align 8
  %74 = load %struct.sv*, %struct.sv** %uni, align 8
  %sv_u71 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u71 to i8**
  %75 = load i8*, i8** %svu_pv, align 8
  %add.ptr72 = getelementptr inbounds i8, i8* %75, i64 0
  br label %cond.end

cond.false73:                                     ; preds = %do.end60
  %76 = load %struct.sv*, %struct.sv** %uni, align 8
  %call74 = call i8* @Perl_sv_2pv_flags(%struct.sv* %76, i64* %len, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false73, %cond.true69
  %cond = phi i8* [ %add.ptr72, %cond.true69 ], [ %call74, %cond.false73 ]
  store i8* %cond, i8** %s, align 8
  %77 = load i8*, i8** %s, align 8
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u75 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 3
  %svu_pv76 = bitcast %union.anon* %sv_u75 to i8**
  %79 = load i8*, i8** %svu_pv76, align 8
  %add.ptr77 = getelementptr inbounds i8, i8* %79, i64 0
  %cmp78 = icmp ne i8* %77, %add.ptr77
  br i1 %cmp78, label %if.then80, label %if.end103

if.then80:                                        ; preds = %cond.end
  %80 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %81, 268435456
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %cond.true88, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then80
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any84 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 0
  %83 = load i8*, i8** %sv_any84, align 8
  %84 = bitcast i8* %83 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %84, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %85 = load i64, i64* %xpvlenu_len, align 8
  %86 = load i64, i64* %len, align 8
  %add85 = add i64 %86, 1
  %cmp86 = icmp ult i64 %85, %add85
  br i1 %cmp86, label %cond.true88, label %cond.false91

cond.true88:                                      ; preds = %lor.lhs.false, %if.then80
  %87 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %88 = load i64, i64* %len, align 8
  %add89 = add i64 %88, 1
  %call90 = call i8* @Perl_sv_grow(%struct.sv* %87, i64 %add89)
  br label %cond.end94

cond.false91:                                     ; preds = %lor.lhs.false
  %89 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u92 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 3
  %svu_pv93 = bitcast %union.anon* %sv_u92 to i8**
  %90 = load i8*, i8** %svu_pv93, align 8
  br label %cond.end94

cond.end94:                                       ; preds = %cond.false91, %cond.true88
  %cond95 = phi i8* [ %call90, %cond.true88 ], [ %90, %cond.false91 ]
  %91 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u96 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 3
  %svu_pv97 = bitcast %union.anon* %sv_u96 to i8**
  %92 = load i8*, i8** %svu_pv97, align 8
  %93 = load i8*, i8** %s, align 8
  %94 = load i64, i64* %len, align 8
  %add98 = add i64 %94, 1
  %mul = mul i64 %add98, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %93, i64 %mul, i1 false)
  br label %do.body99

do.body99:                                        ; preds = %cond.end94
  %95 = load i64, i64* %len, align 8
  %96 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any100 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 0
  %97 = load i8*, i8** %sv_any100, align 8
  %98 = bitcast i8* %97 to %struct.xpv*
  %xpv_cur101 = getelementptr inbounds %struct.xpv, %struct.xpv* %98, i32 0, i32 2
  store i64 %95, i64* %xpv_cur101, align 8
  br label %do.end102

do.end102:                                        ; preds = %do.body99
  br label %if.end103

if.end103:                                        ; preds = %do.end102, %cond.end
  %99 = load i64, i64* @PL_tmps_ix, align 8
  %100 = load i64, i64* @PL_tmps_floor, align 8
  %cmp104 = icmp sgt i64 %99, %100
  br i1 %cmp104, label %if.then106, label %if.end107

if.then106:                                       ; preds = %if.end103
  call void @Perl_free_tmps()
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end103
  br label %do.body108

do.body108:                                       ; preds = %if.end107
  %101 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %101, %struct.sv*** %sp109, align 8
  %102 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev110 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %102, i32 0, i32 2
  %103 = load %struct.stackinfo*, %struct.stackinfo** %si_prev110, align 8
  store %struct.stackinfo* %103, %struct.stackinfo** %prev, align 8
  %104 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %tobool111 = icmp ne %struct.stackinfo* %104, null
  br i1 %tobool111, label %if.end113, label %if.then112

if.then112:                                       ; preds = %do.body108
  call void @Perl_croak_popstack()
  br label %if.end113

if.end113:                                        ; preds = %if.then112, %do.body108
  br label %do.body114

do.body114:                                       ; preds = %if.end113
  %105 = load %struct.sv**, %struct.sv*** %sp109, align 8
  %106 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast115 = ptrtoint %struct.sv** %105 to i64
  %sub.ptr.rhs.cast116 = ptrtoint %struct.sv** %106 to i64
  %sub.ptr.sub117 = sub i64 %sub.ptr.lhs.cast115, %sub.ptr.rhs.cast116
  %sub.ptr.div118 = sdiv exact i64 %sub.ptr.sub117, 8
  %107 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any119 = getelementptr inbounds %struct.av, %struct.av* %107, i32 0, i32 0
  %108 = load %struct.xpvav*, %struct.xpvav** %sv_any119, align 8
  %xav_fill120 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %108, i32 0, i32 2
  store i64 %sub.ptr.div118, i64* %xav_fill120, align 8
  %109 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack121 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %109, i32 0, i32 0
  %110 = load %struct.av*, %struct.av** %si_stack121, align 8
  %sv_u122 = getelementptr inbounds %struct.av, %struct.av* %110, i32 0, i32 3
  %svu_array123 = bitcast %union.anon.3* %sv_u122 to %struct.sv***
  %111 = load %struct.sv**, %struct.sv*** %svu_array123, align 8
  store %struct.sv** %111, %struct.sv*** @PL_stack_base, align 8
  %112 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %113 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack124 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %113, i32 0, i32 0
  %114 = load %struct.av*, %struct.av** %si_stack124, align 8
  %sv_any125 = getelementptr inbounds %struct.av, %struct.av* %114, i32 0, i32 0
  %115 = load %struct.xpvav*, %struct.xpvav** %sv_any125, align 8
  %xav_max126 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %115, i32 0, i32 3
  %116 = load i64, i64* %xav_max126, align 8
  %add.ptr127 = getelementptr inbounds %struct.sv*, %struct.sv** %112, i64 %116
  store %struct.sv** %add.ptr127, %struct.sv*** @PL_stack_max, align 8
  %117 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %118 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack128 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %118, i32 0, i32 0
  %119 = load %struct.av*, %struct.av** %si_stack128, align 8
  %sv_any129 = getelementptr inbounds %struct.av, %struct.av* %119, i32 0, i32 0
  %120 = load %struct.xpvav*, %struct.xpvav** %sv_any129, align 8
  %xav_fill130 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %120, i32 0, i32 2
  %121 = load i64, i64* %xav_fill130, align 8
  %add.ptr131 = getelementptr inbounds %struct.sv*, %struct.sv** %117, i64 %121
  store %struct.sv** %add.ptr131, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr131, %struct.sv*** %sp109, align 8
  %122 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack132 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %122, i32 0, i32 0
  %123 = load %struct.av*, %struct.av** %si_stack132, align 8
  store %struct.av* %123, %struct.av** @PL_curstack, align 8
  br label %do.end133

do.end133:                                        ; preds = %do.body114
  %124 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  store %struct.stackinfo* %124, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end134

do.end134:                                        ; preds = %do.end133
  call void @Perl_pop_scope()
  %125 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags135 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 2
  %126 = load i32, i32* %sv_flags135, align 4
  %and136 = and i32 %126, 255
  %cmp137 = icmp uge i32 %and136, 7
  br i1 %cmp137, label %land.lhs.true139, label %if.end152

land.lhs.true139:                                 ; preds = %do.end134
  %127 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any140 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 0
  %128 = load i8*, i8** %sv_any140, align 8
  %129 = bitcast i8* %128 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %129, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %130 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool141 = icmp ne %struct.magic* %130, null
  br i1 %tobool141, label %if.then142, label %if.end152

if.then142:                                       ; preds = %land.lhs.true139
  %131 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call143 = call %struct.magic* @Perl_mg_find(%struct.sv* %131, i32 103)
  store %struct.magic* %call143, %struct.magic** %mg, align 8
  %132 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool144 = icmp ne %struct.magic* %132, null
  br i1 %tobool144, label %if.then145, label %if.end146

if.then145:                                       ; preds = %if.then142
  %133 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %133, i32 0, i32 5
  store i64 -1, i64* %mg_len, align 8
  br label %if.end146

if.end146:                                        ; preds = %if.then145, %if.then142
  %134 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call147 = call %struct.magic* @Perl_mg_find(%struct.sv* %134, i32 119)
  store %struct.magic* %call147, %struct.magic** %mg, align 8
  %tobool148 = icmp ne %struct.magic* %call147, null
  br i1 %tobool148, label %if.then149, label %if.end151

if.then149:                                       ; preds = %if.end146
  %135 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %136 = load %struct.magic*, %struct.magic** %mg, align 8
  %call150 = call i32 @Perl_magic_setutf8(%struct.sv* %135, %struct.magic* %136)
  br label %if.end151

if.end151:                                        ; preds = %if.then149, %if.end146
  br label %if.end152

if.end152:                                        ; preds = %if.end151, %land.lhs.true139, %do.end134
  %137 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags153 = getelementptr inbounds %struct.sv, %struct.sv* %137, i32 0, i32 2
  %138 = load i32, i32* %sv_flags153, align 4
  %or = or i32 %138, 536870912
  store i32 %or, i32* %sv_flags153, align 4
  %139 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u154 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 3
  %svu_pv155 = bitcast %union.anon* %sv_u154 to i8**
  %140 = load i8*, i8** %svu_pv155, align 8
  store i8* %140, i8** %retval, align 8
  br label %return

if.end156:                                        ; preds = %land.lhs.true7, %land.lhs.true4, %land.lhs.true, %entry
  %141 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags157 = getelementptr inbounds %struct.sv, %struct.sv* %141, i32 0, i32 2
  %142 = load i32, i32* %sv_flags157, align 4
  %and158 = and i32 %142, 16384
  %tobool159 = icmp ne i32 %and158, 0
  br i1 %tobool159, label %cond.true160, label %cond.false163

cond.true160:                                     ; preds = %if.end156
  %143 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u161 = getelementptr inbounds %struct.sv, %struct.sv* %143, i32 0, i32 3
  %svu_pv162 = bitcast %union.anon* %sv_u161 to i8**
  %144 = load i8*, i8** %svu_pv162, align 8
  br label %cond.end164

cond.false163:                                    ; preds = %if.end156
  br label %cond.end164

cond.end164:                                      ; preds = %cond.false163, %cond.true160
  %cond165 = phi i8* [ %144, %cond.true160 ], [ null, %cond.false163 ]
  store i8* %cond165, i8** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end164, %if.end152
  %145 = load i8*, i8** %retval, align 8
  ret i8* %145
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_append_utf8_from_native_byte(i8 zeroext %byte, i8** %dest) #0 {
entry:
  %byte.addr = alloca i8, align 1
  %dest.addr = alloca i8**, align 8
  store i8 %byte, i8* %byte.addr, align 1
  store i8** %dest, i8*** %dest.addr, align 8
  %0 = load i8, i8* %byte.addr, align 1
  %conv = zext i8 %0 to i64
  %cmp = icmp ult i64 %conv, 128
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %byte.addr, align 1
  %2 = load i8**, i8*** %dest.addr, align 8
  %3 = load i8*, i8** %2, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %2, align 8
  store i8 %1, i8* %3, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load i8, i8* %byte.addr, align 1
  %conv2 = zext i8 %4 to i32
  %shr = ashr i32 %conv2, 6
  %or = or i32 %shr, 192
  %conv3 = trunc i32 %or to i8
  %5 = load i8**, i8*** %dest.addr, align 8
  %6 = load i8*, i8** %5, align 8
  %incdec.ptr4 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr4, i8** %5, align 8
  store i8 %conv3, i8* %6, align 1
  %7 = load i8, i8* %byte.addr, align 1
  %conv5 = zext i8 %7 to i32
  %and = and i32 %conv5, 63
  %or6 = or i32 %and, 128
  %conv7 = trunc i32 %or6 to i8
  %8 = load i8**, i8*** %dest.addr, align 8
  %9 = load i8*, i8** %8, align 8
  %incdec.ptr8 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr8, i8** %8, align 8
  store i8 %conv7, i8* %9, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare dso_local %struct.magic* @Perl_mg_find(%struct.sv*, i32) #1

declare dso_local i32 @Perl_magic_setutf8(%struct.sv*, %struct.magic*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @Perl_sv_pos_b2u_flags(%struct.sv* %sv, i64 %offset, i32 %flags) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %offset.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %blen = alloca i64, align 8
  %mg = alloca %struct.magic*, align 8
  %send = alloca i8*, align 8
  %found = alloca i8, align 1
  %cache = alloca i64*, align 8
  %real_len = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %offset, i64* %offset.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i64 0, i64* %len, align 8
  store %struct.magic* null, %struct.magic** %mg, align 8
  store i8 0, i8* %found, align 1
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 2
  %5 = load i64, i64* %xpv_cur, align 8
  store i64 %5, i64* %blen, align 8
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %7 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %9 = load i32, i32* %flags.addr, align 4
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %8, i64* %blen, i32 %9)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %7, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %10 = load i64, i64* %blen, align 8
  %11 = load i64, i64* %offset.addr, align 8
  %cmp1 = icmp ult i64 %10, %11
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %12 = load i64, i64* %blen, align 8
  %13 = load i64, i64* %offset.addr, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.36, i64 0, i64 0), i64 %12, i64 %13)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %14 = load i8*, i8** %s, align 8
  %15 = load i64, i64* %offset.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %15
  store i8* %add.ptr, i8** %send, align 8
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %17, 134283264
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %if.end80, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %18 = load i8, i8* @PL_utf8cache, align 1
  %conv = sext i8 %18 to i32
  %tobool4 = icmp ne i32 %conv, 0
  br i1 %tobool4, label %land.lhs.true5, label %if.end80

land.lhs.true5:                                   ; preds = %land.lhs.true
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %20, 255
  %cmp8 = icmp uge i32 %and7, 7
  br i1 %cmp8, label %land.lhs.true10, label %if.end80

land.lhs.true10:                                  ; preds = %land.lhs.true5
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call11 = call %struct.magic* @Perl_mg_find(%struct.sv* %21, i32 119)
  store %struct.magic* %call11, %struct.magic** %mg, align 8
  %tobool12 = icmp ne %struct.magic* %call11, null
  br i1 %tobool12, label %if.then13, label %if.end80

if.then13:                                        ; preds = %land.lhs.true10
  %22 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %22, i32 0, i32 7
  %23 = load i8*, i8** %mg_ptr, align 8
  %tobool14 = icmp ne i8* %23, null
  br i1 %tobool14, label %if.then15, label %if.else70

if.then15:                                        ; preds = %if.then13
  %24 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr16 = getelementptr inbounds %struct.magic, %struct.magic* %24, i32 0, i32 7
  %25 = load i8*, i8** %mg_ptr16, align 8
  %26 = bitcast i8* %25 to i64*
  store i64* %26, i64** %cache, align 8
  %27 = load i64*, i64** %cache, align 8
  %arrayidx = getelementptr inbounds i64, i64* %27, i64 1
  %28 = load i64, i64* %arrayidx, align 8
  %29 = load i64, i64* %offset.addr, align 8
  %cmp17 = icmp eq i64 %28, %29
  br i1 %cmp17, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.then15
  %30 = load i64*, i64** %cache, align 8
  %arrayidx20 = getelementptr inbounds i64, i64* %30, i64 0
  %31 = load i64, i64* %arrayidx20, align 8
  store i64 %31, i64* %retval, align 8
  br label %return

if.end21:                                         ; preds = %if.then15
  %32 = load i64*, i64** %cache, align 8
  %arrayidx22 = getelementptr inbounds i64, i64* %32, i64 3
  %33 = load i64, i64* %arrayidx22, align 8
  %34 = load i64, i64* %offset.addr, align 8
  %cmp23 = icmp eq i64 %33, %34
  br i1 %cmp23, label %if.then25, label %if.end27

if.then25:                                        ; preds = %if.end21
  %35 = load i64*, i64** %cache, align 8
  %arrayidx26 = getelementptr inbounds i64, i64* %35, i64 2
  %36 = load i64, i64* %arrayidx26, align 8
  store i64 %36, i64* %retval, align 8
  br label %return

if.end27:                                         ; preds = %if.end21
  %37 = load i64*, i64** %cache, align 8
  %arrayidx28 = getelementptr inbounds i64, i64* %37, i64 1
  %38 = load i64, i64* %arrayidx28, align 8
  %39 = load i64, i64* %offset.addr, align 8
  %cmp29 = icmp ult i64 %38, %39
  br i1 %cmp29, label %if.then31, label %if.else48

if.then31:                                        ; preds = %if.end27
  %40 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %40, i32 0, i32 5
  %41 = load i64, i64* %mg_len, align 8
  %cmp32 = icmp ne i64 %41, -1
  br i1 %cmp32, label %if.then34, label %if.else

if.then34:                                        ; preds = %if.then31
  %42 = load i64*, i64** %cache, align 8
  %arrayidx35 = getelementptr inbounds i64, i64* %42, i64 0
  %43 = load i64, i64* %arrayidx35, align 8
  %44 = load i8*, i8** %s, align 8
  %45 = load i64*, i64** %cache, align 8
  %arrayidx36 = getelementptr inbounds i64, i64* %45, i64 1
  %46 = load i64, i64* %arrayidx36, align 8
  %add.ptr37 = getelementptr inbounds i8, i8* %44, i64 %46
  %47 = load i8*, i8** %send, align 8
  %48 = load i8*, i8** %s, align 8
  %49 = load i64, i64* %blen, align 8
  %add.ptr38 = getelementptr inbounds i8, i8* %48, i64 %49
  %50 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len39 = getelementptr inbounds %struct.magic, %struct.magic* %50, i32 0, i32 5
  %51 = load i64, i64* %mg_len39, align 8
  %52 = load i64*, i64** %cache, align 8
  %arrayidx40 = getelementptr inbounds i64, i64* %52, i64 0
  %53 = load i64, i64* %arrayidx40, align 8
  %sub = sub i64 %51, %53
  %call41 = call i64 @S_sv_pos_b2u_midway(i8* %add.ptr37, i8* %47, i8* %add.ptr38, i64 %sub)
  %add = add i64 %43, %call41
  store i64 %add, i64* %len, align 8
  br label %if.end47

if.else:                                          ; preds = %if.then31
  %54 = load i64*, i64** %cache, align 8
  %arrayidx42 = getelementptr inbounds i64, i64* %54, i64 0
  %55 = load i64, i64* %arrayidx42, align 8
  %56 = load i8*, i8** %s, align 8
  %57 = load i64*, i64** %cache, align 8
  %arrayidx43 = getelementptr inbounds i64, i64* %57, i64 1
  %58 = load i64, i64* %arrayidx43, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %56, i64 %58
  %59 = load i8*, i8** %send, align 8
  %call45 = call i64 @Perl_utf8_length(i8* %add.ptr44, i8* %59)
  %add46 = add i64 %55, %call45
  store i64 %add46, i64* %len, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.else, %if.then34
  br label %if.end69

if.else48:                                        ; preds = %if.end27
  %60 = load i64*, i64** %cache, align 8
  %arrayidx49 = getelementptr inbounds i64, i64* %60, i64 3
  %61 = load i64, i64* %arrayidx49, align 8
  %62 = load i64, i64* %offset.addr, align 8
  %cmp50 = icmp ult i64 %61, %62
  br i1 %cmp50, label %if.then52, label %if.else63

if.then52:                                        ; preds = %if.else48
  %63 = load i8*, i8** %s, align 8
  %64 = load i64*, i64** %cache, align 8
  %arrayidx53 = getelementptr inbounds i64, i64* %64, i64 3
  %65 = load i64, i64* %arrayidx53, align 8
  %add.ptr54 = getelementptr inbounds i8, i8* %63, i64 %65
  %66 = load i8*, i8** %send, align 8
  %67 = load i8*, i8** %s, align 8
  %68 = load i64*, i64** %cache, align 8
  %arrayidx55 = getelementptr inbounds i64, i64* %68, i64 1
  %69 = load i64, i64* %arrayidx55, align 8
  %add.ptr56 = getelementptr inbounds i8, i8* %67, i64 %69
  %70 = load i64*, i64** %cache, align 8
  %arrayidx57 = getelementptr inbounds i64, i64* %70, i64 0
  %71 = load i64, i64* %arrayidx57, align 8
  %72 = load i64*, i64** %cache, align 8
  %arrayidx58 = getelementptr inbounds i64, i64* %72, i64 2
  %73 = load i64, i64* %arrayidx58, align 8
  %sub59 = sub i64 %71, %73
  %call60 = call i64 @S_sv_pos_b2u_midway(i8* %add.ptr54, i8* %66, i8* %add.ptr56, i64 %sub59)
  %74 = load i64*, i64** %cache, align 8
  %arrayidx61 = getelementptr inbounds i64, i64* %74, i64 2
  %75 = load i64, i64* %arrayidx61, align 8
  %add62 = add i64 %call60, %75
  store i64 %add62, i64* %len, align 8
  br label %if.end68

if.else63:                                        ; preds = %if.else48
  %76 = load i8*, i8** %s, align 8
  %77 = load i8*, i8** %send, align 8
  %78 = load i8*, i8** %s, align 8
  %79 = load i64*, i64** %cache, align 8
  %arrayidx64 = getelementptr inbounds i64, i64* %79, i64 3
  %80 = load i64, i64* %arrayidx64, align 8
  %add.ptr65 = getelementptr inbounds i8, i8* %78, i64 %80
  %81 = load i64*, i64** %cache, align 8
  %arrayidx66 = getelementptr inbounds i64, i64* %81, i64 2
  %82 = load i64, i64* %arrayidx66, align 8
  %call67 = call i64 @S_sv_pos_b2u_midway(i8* %76, i8* %77, i8* %add.ptr65, i64 %82)
  store i64 %call67, i64* %len, align 8
  br label %if.end68

if.end68:                                         ; preds = %if.else63, %if.then52
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.end47
  store i8 1, i8* %found, align 1
  br label %if.end79

if.else70:                                        ; preds = %if.then13
  %83 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len71 = getelementptr inbounds %struct.magic, %struct.magic* %83, i32 0, i32 5
  %84 = load i64, i64* %mg_len71, align 8
  %cmp72 = icmp ne i64 %84, -1
  br i1 %cmp72, label %if.then74, label %if.end78

if.then74:                                        ; preds = %if.else70
  %85 = load i8*, i8** %s, align 8
  %86 = load i8*, i8** %send, align 8
  %87 = load i8*, i8** %s, align 8
  %88 = load i64, i64* %blen, align 8
  %add.ptr75 = getelementptr inbounds i8, i8* %87, i64 %88
  %89 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len76 = getelementptr inbounds %struct.magic, %struct.magic* %89, i32 0, i32 5
  %90 = load i64, i64* %mg_len76, align 8
  %call77 = call i64 @S_sv_pos_b2u_midway(i8* %85, i8* %86, i8* %add.ptr75, i64 %90)
  store i64 %call77, i64* %len, align 8
  store i8 1, i8* %found, align 1
  br label %if.end78

if.end78:                                         ; preds = %if.then74, %if.else70
  br label %if.end79

if.end79:                                         ; preds = %if.end78, %if.end69
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %land.lhs.true10, %land.lhs.true5, %land.lhs.true, %if.end
  %91 = load i8, i8* %found, align 1
  %tobool81 = trunc i8 %91 to i1
  br i1 %tobool81, label %lor.lhs.false, label %if.then85

lor.lhs.false:                                    ; preds = %if.end80
  %92 = load i8, i8* @PL_utf8cache, align 1
  %conv82 = sext i8 %92 to i32
  %cmp83 = icmp slt i32 %conv82, 0
  br i1 %cmp83, label %if.then85, label %if.end95

if.then85:                                        ; preds = %lor.lhs.false, %if.end80
  %93 = load i8*, i8** %s, align 8
  %94 = load i8*, i8** %send, align 8
  %call86 = call i64 @Perl_utf8_length(i8* %93, i8* %94)
  store i64 %call86, i64* %real_len, align 8
  %95 = load i8, i8* %found, align 1
  %tobool87 = trunc i8 %95 to i1
  br i1 %tobool87, label %land.lhs.true89, label %if.end94

land.lhs.true89:                                  ; preds = %if.then85
  %96 = load i8, i8* @PL_utf8cache, align 1
  %conv90 = sext i8 %96 to i32
  %cmp91 = icmp slt i32 %conv90, 0
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %land.lhs.true89
  %97 = load i64, i64* %len, align 8
  %98 = load i64, i64* %real_len, align 8
  %99 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_assert_uft8_cache_coherent(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.37, i64 0, i64 0), i64 %97, i64 %98, %struct.sv* %99)
  br label %if.end94

if.end94:                                         ; preds = %if.then93, %land.lhs.true89, %if.then85
  %100 = load i64, i64* %real_len, align 8
  store i64 %100, i64* %len, align 8
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %lor.lhs.false
  %101 = load i8, i8* @PL_utf8cache, align 1
  %tobool96 = icmp ne i8 %101, 0
  br i1 %tobool96, label %if.then97, label %if.end103

if.then97:                                        ; preds = %if.end95
  %102 = load i64, i64* %blen, align 8
  %103 = load i64, i64* %offset.addr, align 8
  %cmp98 = icmp eq i64 %102, %103
  br i1 %cmp98, label %if.then100, label %if.else101

if.then100:                                       ; preds = %if.then97
  %104 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %105 = load i64, i64* %len, align 8
  call void @S_utf8_mg_len_cache_update(%struct.sv* %104, %struct.magic** %mg, i64 %105)
  br label %if.end102

if.else101:                                       ; preds = %if.then97
  %106 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %107 = load i64, i64* %offset.addr, align 8
  %108 = load i64, i64* %len, align 8
  %109 = load i64, i64* %blen, align 8
  call void @S_utf8_mg_pos_cache_update(%struct.sv* %106, %struct.magic** %mg, i64 %107, i64 %108, i64 %109)
  br label %if.end102

if.end102:                                        ; preds = %if.else101, %if.then100
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.end95
  %110 = load i64, i64* %len, align 8
  store i64 %110, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end103, %if.then25, %if.then19
  %111 = load i64, i64* %retval, align 8
  ret i64 %111
}

declare dso_local i8* @Perl_utf8_to_bytes(i8*, i64*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_utf8_encode(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 134283264
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %2, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %3, i32 2, i64 0)
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %5, -536870913
  store i32 %and2, i32* %sv_flags1, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @Perl_sv_utf8_decode(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i1, align 1
  %sv.addr = alloca %struct.sv*, align 8
  %start = alloca i8*, align 8
  %c = alloca i8*, align 8
  %e = alloca i8*, align 8
  %ch = alloca i8, align 1
  %mg = alloca %struct.magic*, align 8
  %pos = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end47

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call zeroext i1 @Perl_sv_utf8_downgrade(%struct.sv* %2, i1 zeroext true)
  br i1 %call, label %if.end, label %if.then1

if.then1:                                         ; preds = %if.then
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %if.then
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %4 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 0
  store i8* %add.ptr, i8** %start, align 8
  store i8* %add.ptr, i8** %c, align 8
  %5 = load i8*, i8** %c, align 8
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 2
  %9 = load i64, i64* %xpv_cur, align 8
  %call2 = call zeroext i1 @Perl_is_utf8_string(i8* %5, i64 %9)
  br i1 %call2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u5 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 3
  %svu_pv6 = bitcast %union.anon* %sv_u5 to i8**
  %11 = load i8*, i8** %svu_pv6, align 8
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any7 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any7, align 8
  %14 = bitcast i8* %13 to %struct.xpv*
  %xpv_cur8 = getelementptr inbounds %struct.xpv, %struct.xpv* %14, i32 0, i32 2
  %15 = load i64, i64* %xpv_cur8, align 8
  %add.ptr9 = getelementptr inbounds i8, i8* %11, i64 %15
  store i8* %add.ptr9, i8** %e, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end14, %if.end4
  %16 = load i8*, i8** %c, align 8
  %17 = load i8*, i8** %e, align 8
  %cmp = icmp ult i8* %16, %17
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %c, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr, i8** %c, align 8
  %19 = load i8, i8* %18, align 1
  store i8 %19, i8* %ch, align 1
  %20 = load i8, i8* %ch, align 1
  %conv = zext i8 %20 to i64
  %cmp10 = icmp ult i64 %conv, 128
  br i1 %cmp10, label %if.end14, label %if.then12

if.then12:                                        ; preds = %while.body
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags13, align 4
  %or = or i32 %22, 536870912
  store i32 %or, i32* %sv_flags13, align 4
  br label %while.end

if.end14:                                         ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %if.then12, %while.cond
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %24, 255
  %cmp17 = icmp uge i32 %and16, 7
  br i1 %cmp17, label %land.lhs.true, label %if.end46

land.lhs.true:                                    ; preds = %while.end
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any19, align 8
  %27 = bitcast i8* %26 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %27, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %28 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool20 = icmp ne %struct.magic* %28, null
  br i1 %tobool20, label %if.then21, label %if.end46

if.then21:                                        ; preds = %land.lhs.true
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call22 = call %struct.magic* @Perl_mg_find(%struct.sv* %29, i32 103)
  store %struct.magic* %call22, %struct.magic** %mg, align 8
  %30 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool23 = icmp ne %struct.magic* %30, null
  br i1 %tobool23, label %if.then24, label %if.end40

if.then24:                                        ; preds = %if.then21
  %31 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %31, i32 0, i32 5
  %32 = load i64, i64* %mg_len, align 8
  %conv25 = trunc i64 %32 to i32
  store i32 %conv25, i32* %pos, align 4
  %33 = load i32, i32* %pos, align 4
  %cmp26 = icmp sgt i32 %33, 0
  br i1 %cmp26, label %if.then28, label %if.end39

if.then28:                                        ; preds = %if.then24
  %34 = load i8*, i8** %start, align 8
  %35 = load i32, i32* %pos, align 4
  %idx.ext = sext i32 %35 to i64
  %add.ptr29 = getelementptr inbounds i8, i8* %34, i64 %idx.ext
  store i8* %add.ptr29, i8** %c, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then28
  %36 = load i8*, i8** %c, align 8
  %37 = load i8*, i8** %start, align 8
  %cmp30 = icmp ugt i8* %36, %37
  br i1 %cmp30, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %38 = load i8*, i8** %c, align 8
  %39 = load i8, i8* %38, align 1
  %conv32 = zext i8 %39 to i32
  %cmp33 = icmp sge i32 %conv32, 194
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %for.body
  br label %for.end

if.end36:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end36
  %40 = load i8*, i8** %c, align 8
  %incdec.ptr37 = getelementptr inbounds i8, i8* %40, i32 -1
  store i8* %incdec.ptr37, i8** %c, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then35, %for.cond
  %41 = load i8*, i8** %c, align 8
  %42 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %41 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %42 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %43 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len38 = getelementptr inbounds %struct.magic, %struct.magic* %43, i32 0, i32 5
  store i64 %sub.ptr.sub, i64* %mg_len38, align 8
  br label %if.end39

if.end39:                                         ; preds = %for.end, %if.then24
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then21
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call41 = call %struct.magic* @Perl_mg_find(%struct.sv* %44, i32 119)
  store %struct.magic* %call41, %struct.magic** %mg, align 8
  %tobool42 = icmp ne %struct.magic* %call41, null
  br i1 %tobool42, label %if.then43, label %if.end45

if.then43:                                        ; preds = %if.end40
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %46 = load %struct.magic*, %struct.magic** %mg, align 8
  %call44 = call i32 @Perl_magic_setutf8(%struct.sv* %45, %struct.magic* %46)
  br label %if.end45

if.end45:                                         ; preds = %if.then43, %if.end40
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %land.lhs.true, %while.end
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %entry
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end47, %if.then3, %if.then1
  %47 = load i1, i1* %retval, align 1
  ret i1 %47
}

declare dso_local zeroext i1 @Perl_is_utf8_string(i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_gv_setref(%struct.sv* %dstr, %struct.sv* %sstr) #0 {
entry:
  %dstr.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca %struct.sv*, align 8
  %sref = alloca %struct.sv*, align 8
  %dref = alloca %struct.sv*, align 8
  %intro = alloca i32, align 4
  %location = alloca %struct.sv**, align 8
  %import_flag = alloca i8, align 1
  %stype = alloca i32, align 4
  %ix = alloca i32, align 4
  %ssp = alloca %union.any*, align 8
  %cv = alloca %struct.cv*, align 8
  %new_const_sv = alloca %struct.sv*, align 8
  %name = alloca i8*, align 8
  %len = alloca i64, align 8
  %mg = alloca %struct.magic*, align 8
  %omg = alloca %struct.magic*, align 8
  %ary = alloca %struct.av*, align 8
  %svp = alloca %struct.sv**, align 8
  %items = alloca i32, align 4
  store %struct.sv* %dstr, %struct.sv** %dstr.addr, align 8
  store %struct.sv* %sstr, %struct.sv** %sstr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %1 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %1, %struct.sv** %sref, align 8
  %2 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpvgv*
  %xpv_cur = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %4, i32 0, i32 2
  %5 = load i64, i64* %xpv_cur, align 8
  %and = and i64 %5, 1
  %conv = trunc i64 %and to i32
  store i32 %conv, i32* %intro, align 4
  store i8 0, i8* %import_flag, align 1
  %6 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %7, 255
  store i32 %and1, i32* %stype, align 4
  %8 = load i32, i32* %intro, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any2, align 8
  %11 = bitcast i8* %10 to %struct.xpvgv*
  %xpv_cur3 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %11, i32 0, i32 2
  %12 = load i64, i64* %xpv_cur3, align 8
  %and4 = and i64 %12, -2
  store i64 %and4, i64* %xpv_cur3, align 8
  %13 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %13, i32 0, i32 7
  %14 = load i32, i32* %cop_line, align 4
  %15 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u5 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 3
  %svu_gp = bitcast %union.anon* %sv_u5 to %struct.gp**
  %16 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %16, i64 0
  %gp_line = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 9
  %bf.load = load i32, i32* %gp_line, align 8
  %bf.value = and i32 %14, 2147483647
  %bf.clear = and i32 %bf.load, -2147483648
  %bf.set = or i32 %bf.clear, %bf.value
  store i32 %bf.set, i32* %gp_line, align 8
  %17 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %18 = bitcast %struct.sv* %17 to i8*
  %19 = bitcast i8* %18 to %struct.gv*
  %20 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u6 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 3
  %svu_gp7 = bitcast %union.anon* %sv_u6 to %struct.gp**
  %21 = load %struct.gp*, %struct.gp** %svu_gp7, align 8
  %add.ptr8 = getelementptr inbounds %struct.gp, %struct.gp* %21, i64 0
  %gp_egv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr8, i32 0, i32 8
  store %struct.gv* %19, %struct.gv** %gp_egv, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %22 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any9, align 8
  %24 = bitcast i8* %23 to %struct.xpvgv*
  %xpv_cur10 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %24, i32 0, i32 2
  %25 = load i64, i64* %xpv_cur10, align 8
  %or = or i64 %25, 2
  store i64 %or, i64* %xpv_cur10, align 8
  %26 = load i32, i32* %stype, align 4
  switch i32 %26, label %sw.default [
    i32 13, label %sw.bb
    i32 12, label %sw.bb14
    i32 11, label %sw.bb18
    i32 15, label %sw.bb22
    i32 14, label %sw.bb26
  ]

sw.bb:                                            ; preds = %if.end
  %27 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u11 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 3
  %svu_gp12 = bitcast %union.anon* %sv_u11 to %struct.gp**
  %28 = load %struct.gp*, %struct.gp** %svu_gp12, align 8
  %add.ptr13 = getelementptr inbounds %struct.gp, %struct.gp* %28, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr13, i32 0, i32 2
  %29 = bitcast %struct.cv** %gp_cv to %struct.sv**
  store %struct.sv** %29, %struct.sv*** %location, align 8
  store i8 -128, i8* %import_flag, align 1
  br label %common

sw.bb14:                                          ; preds = %if.end
  %30 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u15 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 3
  %svu_gp16 = bitcast %union.anon* %sv_u15 to %struct.gp**
  %31 = load %struct.gp*, %struct.gp** %svu_gp16, align 8
  %add.ptr17 = getelementptr inbounds %struct.gp, %struct.gp* %31, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr17, i32 0, i32 5
  %32 = bitcast %struct.hv** %gp_hv to %struct.sv**
  store %struct.sv** %32, %struct.sv*** %location, align 8
  store i8 64, i8* %import_flag, align 1
  br label %common

sw.bb18:                                          ; preds = %if.end
  %33 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u19 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 3
  %svu_gp20 = bitcast %union.anon* %sv_u19 to %struct.gp**
  %34 = load %struct.gp*, %struct.gp** %svu_gp20, align 8
  %add.ptr21 = getelementptr inbounds %struct.gp, %struct.gp* %34, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr21, i32 0, i32 6
  %35 = bitcast %struct.av** %gp_av to %struct.sv**
  store %struct.sv** %35, %struct.sv*** %location, align 8
  store i8 32, i8* %import_flag, align 1
  br label %common

sw.bb22:                                          ; preds = %if.end
  %36 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u23 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 3
  %svu_gp24 = bitcast %union.anon* %sv_u23 to %struct.gp**
  %37 = load %struct.gp*, %struct.gp** %svu_gp24, align 8
  %add.ptr25 = getelementptr inbounds %struct.gp, %struct.gp* %37, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr25, i32 0, i32 1
  %38 = bitcast %struct.io** %gp_io to %struct.sv**
  store %struct.sv** %38, %struct.sv*** %location, align 8
  br label %common

sw.bb26:                                          ; preds = %if.end
  %39 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u27 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 3
  %svu_gp28 = bitcast %union.anon* %sv_u27 to %struct.gp**
  %40 = load %struct.gp*, %struct.gp** %svu_gp28, align 8
  %add.ptr29 = getelementptr inbounds %struct.gp, %struct.gp* %40, i64 0
  %gp_form = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr29, i32 0, i32 7
  %41 = bitcast %struct.cv** %gp_form to %struct.sv**
  store %struct.sv** %41, %struct.sv*** %location, align 8
  br label %common

sw.default:                                       ; preds = %if.end
  %42 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u30 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 3
  %svu_gp31 = bitcast %union.anon* %sv_u30 to %struct.gp**
  %43 = load %struct.gp*, %struct.gp** %svu_gp31, align 8
  %add.ptr32 = getelementptr inbounds %struct.gp, %struct.gp* %43, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr32, i32 0, i32 0
  store %struct.sv** %gp_sv, %struct.sv*** %location, align 8
  store i8 16, i8* %import_flag, align 1
  br label %common

common:                                           ; preds = %sw.default, %sw.bb26, %sw.bb22, %sw.bb18, %sw.bb14, %sw.bb
  %44 = load i32, i32* %intro, align 4
  %tobool33 = icmp ne i32 %44, 0
  br i1 %tobool33, label %if.then34, label %if.end71

if.then34:                                        ; preds = %common
  %45 = load i32, i32* %stype, align 4
  %cmp = icmp eq i32 %45, 13
  br i1 %cmp, label %if.then36, label %if.end56

if.then36:                                        ; preds = %if.then34
  %46 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u37 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 3
  %svu_gp38 = bitcast %union.anon* %sv_u37 to %struct.gp**
  %47 = load %struct.gp*, %struct.gp** %svu_gp38, align 8
  %add.ptr39 = getelementptr inbounds %struct.gp, %struct.gp* %47, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr39, i32 0, i32 3
  %48 = load i32, i32* %gp_cvgen, align 8
  %tobool40 = icmp ne i32 %48, 0
  br i1 %tobool40, label %if.then41, label %if.end55

if.then41:                                        ; preds = %if.then36
  %49 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u42 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 3
  %svu_gp43 = bitcast %union.anon* %sv_u42 to %struct.gp**
  %50 = load %struct.gp*, %struct.gp** %svu_gp43, align 8
  %add.ptr44 = getelementptr inbounds %struct.gp, %struct.gp* %50, i64 0
  %gp_cv45 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr44, i32 0, i32 2
  %51 = load %struct.cv*, %struct.cv** %gp_cv45, align 8
  %add.ptr46 = getelementptr inbounds %struct.cv, %struct.cv* %51, i64 0
  %52 = bitcast %struct.cv* %add.ptr46 to i8*
  %53 = bitcast i8* %52 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %53)
  %54 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u47 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 3
  %svu_gp48 = bitcast %union.anon* %sv_u47 to %struct.gp**
  %55 = load %struct.gp*, %struct.gp** %svu_gp48, align 8
  %add.ptr49 = getelementptr inbounds %struct.gp, %struct.gp* %55, i64 0
  %gp_cv50 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr49, i32 0, i32 2
  store %struct.cv* null, %struct.cv** %gp_cv50, align 8
  %56 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u51 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 3
  %svu_gp52 = bitcast %union.anon* %sv_u51 to %struct.gp**
  %57 = load %struct.gp*, %struct.gp** %svu_gp52, align 8
  %add.ptr53 = getelementptr inbounds %struct.gp, %struct.gp* %57, i64 0
  %gp_cvgen54 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr53, i32 0, i32 3
  store i32 0, i32* %gp_cvgen54, align 8
  br label %if.end55

if.end55:                                         ; preds = %if.then41, %if.then36
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.then34
  %58 = load i32, i32* %stype, align 4
  %cmp57 = icmp eq i32 %58, 13
  br i1 %cmp57, label %if.then59, label %if.else

if.then59:                                        ; preds = %if.end56
  %59 = load i32, i32* @PL_savestack_ix, align 4
  store i32 %59, i32* %ix, align 4
  %60 = load %union.any*, %union.any** @PL_savestack, align 8
  %61 = load i32, i32* %ix, align 4
  %idxprom = sext i32 %61 to i64
  %arrayidx = getelementptr inbounds %union.any, %union.any* %60, i64 %idxprom
  store %union.any* %arrayidx, %union.any** %ssp, align 8
  %62 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %63 = bitcast %struct.sv* %62 to i8*
  %64 = load %union.any*, %union.any** %ssp, align 8
  %incdec.ptr = getelementptr inbounds %union.any, %union.any* %64, i32 1
  store %union.any* %incdec.ptr, %union.any** %ssp, align 8
  %any_ptr = bitcast %union.any* %64 to i8**
  store i8* %63, i8** %any_ptr, align 8
  %65 = load %struct.sv**, %struct.sv*** %location, align 8
  %66 = bitcast %struct.sv** %65 to i8*
  %67 = load %union.any*, %union.any** %ssp, align 8
  %incdec.ptr60 = getelementptr inbounds %union.any, %union.any* %67, i32 1
  store %union.any* %incdec.ptr60, %union.any** %ssp, align 8
  %any_ptr61 = bitcast %union.any* %67 to i8**
  store i8* %66, i8** %any_ptr61, align 8
  %68 = load %struct.sv**, %struct.sv*** %location, align 8
  %69 = load %struct.sv*, %struct.sv** %68, align 8
  %70 = bitcast %struct.sv* %69 to i8*
  %71 = bitcast i8* %70 to %struct.sv*
  %call = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %71)
  %72 = bitcast %struct.sv* %call to i8*
  %73 = load %union.any*, %union.any** %ssp, align 8
  %incdec.ptr62 = getelementptr inbounds %union.any, %union.any* %73, i32 1
  store %union.any* %incdec.ptr62, %union.any** %ssp, align 8
  %any_ptr63 = bitcast %union.any* %73 to i8**
  store i8* %72, i8** %any_ptr63, align 8
  %74 = load %union.any*, %union.any** %ssp, align 8
  %incdec.ptr64 = getelementptr inbounds %union.any, %union.any* %74, i32 1
  store %union.any* %incdec.ptr64, %union.any** %ssp, align 8
  %any_uv = bitcast %union.any* %74 to i64*
  store i64 51, i64* %any_uv, align 8
  %75 = load i32, i32* %ix, align 4
  %add = add nsw i32 %75, 4
  store i32 %add, i32* %ix, align 4
  %76 = load i32, i32* %ix, align 4
  store i32 %76, i32* @PL_savestack_ix, align 4
  %77 = load i32, i32* %ix, align 4
  %add65 = add nsw i32 %77, 4
  %78 = load i32, i32* @PL_savestack_max, align 4
  %cmp66 = icmp sgt i32 %add65, %78
  br i1 %cmp66, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then59
  br i1 true, label %if.then68, label %if.end69

cond.false:                                       ; preds = %if.then59
  br i1 false, label %if.then68, label %if.end69

if.then68:                                        ; preds = %cond.false, %cond.true
  call void @Perl_savestack_grow()
  br label %if.end69

if.end69:                                         ; preds = %if.then68, %cond.false, %cond.true
  br label %if.end70

if.else:                                          ; preds = %if.end56
  %79 = load %struct.sv**, %struct.sv*** %location, align 8
  call void @Perl_save_generic_svref(%struct.sv** %79)
  br label %if.end70

if.end70:                                         ; preds = %if.else, %if.end69
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %common
  %80 = load %struct.sv**, %struct.sv*** %location, align 8
  %81 = load %struct.sv*, %struct.sv** %80, align 8
  store %struct.sv* %81, %struct.sv** %dref, align 8
  %82 = load i32, i32* %stype, align 4
  %cmp72 = icmp eq i32 %82, 13
  br i1 %cmp72, label %land.lhs.true, label %if.end338

land.lhs.true:                                    ; preds = %if.end71
  %83 = load %struct.sv**, %struct.sv*** %location, align 8
  %84 = load %struct.sv*, %struct.sv** %83, align 8
  %85 = load %struct.sv*, %struct.sv** %sref, align 8
  %cmp74 = icmp ne %struct.sv* %84, %85
  br i1 %cmp74, label %if.then81, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %86 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u76 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 3
  %svu_gp77 = bitcast %union.anon* %sv_u76 to %struct.gp**
  %87 = load %struct.gp*, %struct.gp** %svu_gp77, align 8
  %add.ptr78 = getelementptr inbounds %struct.gp, %struct.gp* %87, i64 0
  %gp_cvgen79 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr78, i32 0, i32 3
  %88 = load i32, i32* %gp_cvgen79, align 8
  %tobool80 = icmp ne i32 %88, 0
  br i1 %tobool80, label %if.then81, label %if.end338

if.then81:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %89 = load %struct.sv**, %struct.sv*** %location, align 8
  %90 = load %struct.sv*, %struct.sv** %89, align 8
  %91 = bitcast %struct.sv* %90 to i8*
  %92 = bitcast i8* %91 to %struct.cv*
  store %struct.cv* %92, %struct.cv** %cv, align 8
  %93 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool82 = icmp ne %struct.cv* %93, null
  br i1 %tobool82, label %if.then83, label %if.end280

if.then83:                                        ; preds = %if.then81
  %94 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %95 = bitcast %struct.sv* %94 to %struct.gv*
  %sv_u84 = getelementptr inbounds %struct.gv, %struct.gv* %95, i32 0, i32 3
  %svu_gp85 = bitcast %union.anon.6* %sv_u84 to %struct.gp**
  %96 = load %struct.gp*, %struct.gp** %svu_gp85, align 8
  %add.ptr86 = getelementptr inbounds %struct.gp, %struct.gp* %96, i64 0
  %gp_cvgen87 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr86, i32 0, i32 3
  %97 = load i32, i32* %gp_cvgen87, align 8
  %tobool88 = icmp ne i32 %97, 0
  br i1 %tobool88, label %if.end199, label %land.lhs.true89

land.lhs.true89:                                  ; preds = %if.then83
  %98 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any90 = getelementptr inbounds %struct.cv, %struct.cv* %98, i32 0, i32 0
  %99 = load %struct.xpvcv*, %struct.xpvcv** %sv_any90, align 8
  %100 = bitcast %struct.xpvcv* %99 to i8*
  %101 = bitcast i8* %100 to %struct.xpvcv*
  %xcv_root_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %101, i32 0, i32 6
  %xcv_root = bitcast %union.anon.9* %xcv_root_u to %struct.op**
  %102 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool91 = icmp ne %struct.op* %102, null
  br i1 %tobool91, label %land.lhs.true96, label %lor.lhs.false92

lor.lhs.false92:                                  ; preds = %land.lhs.true89
  %103 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any93 = getelementptr inbounds %struct.cv, %struct.cv* %103, i32 0, i32 0
  %104 = load %struct.xpvcv*, %struct.xpvcv** %sv_any93, align 8
  %105 = bitcast %struct.xpvcv* %104 to i8*
  %106 = bitcast i8* %105 to %struct.xpvcv*
  %xcv_root_u94 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %106, i32 0, i32 6
  %xcv_xsub = bitcast %union.anon.9* %xcv_root_u94 to void (%struct.cv*)**
  %107 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub, align 8
  %tobool95 = icmp ne void (%struct.cv*)* %107, null
  br i1 %tobool95, label %land.lhs.true96, label %if.end199

land.lhs.true96:                                  ; preds = %lor.lhs.false92, %land.lhs.true89
  %108 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any97 = getelementptr inbounds %struct.cv, %struct.cv* %108, i32 0, i32 0
  %109 = load %struct.xpvcv*, %struct.xpvcv** %sv_any97, align 8
  %110 = bitcast %struct.xpvcv* %109 to i8*
  %111 = bitcast i8* %110 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %111, i32 0, i32 12
  %112 = load i32, i32* %xcv_flags, align 4
  %and98 = and i32 %112, 4
  %tobool99 = icmp ne i32 %and98, 0
  br i1 %tobool99, label %if.then103, label %lor.lhs.false100

lor.lhs.false100:                                 ; preds = %land.lhs.true96
  %call101 = call zeroext i1 @Perl_ckwarn(i32 19)
  br i1 %call101, label %if.then103, label %if.end199

if.then103:                                       ; preds = %lor.lhs.false100, %land.lhs.true96
  %113 = load %struct.sv*, %struct.sv** %sref, align 8
  %114 = bitcast %struct.sv* %113 to %struct.cv*
  %sv_any104 = getelementptr inbounds %struct.cv, %struct.cv* %114, i32 0, i32 0
  %115 = load %struct.xpvcv*, %struct.xpvcv** %sv_any104, align 8
  %116 = bitcast %struct.xpvcv* %115 to i8*
  %117 = bitcast i8* %116 to %struct.xpvcv*
  %xcv_flags105 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %117, i32 0, i32 12
  %118 = load i32, i32* %xcv_flags105, align 4
  %and106 = and i32 %118, 4
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %cond.true108, label %cond.false110

cond.true108:                                     ; preds = %if.then103
  %119 = load %struct.sv*, %struct.sv** %sref, align 8
  %120 = bitcast %struct.sv* %119 to %struct.cv*
  %call109 = call %struct.sv* @Perl_cv_const_sv(%struct.cv* %120)
  br label %cond.end

cond.false110:                                    ; preds = %if.then103
  br label %cond.end

cond.end:                                         ; preds = %cond.false110, %cond.true108
  %cond = phi %struct.sv* [ %call109, %cond.true108 ], [ null, %cond.false110 ]
  store %struct.sv* %cond, %struct.sv** %new_const_sv, align 8
  %121 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %122 = bitcast %struct.sv* %121 to %struct.gv*
  %sv_any111 = getelementptr inbounds %struct.gv, %struct.gv* %122, i32 0, i32 0
  %123 = load %struct.xpvgv*, %struct.xpvgv** %sv_any111, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %123, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %124 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %sv_flags112 = getelementptr inbounds %struct.hv, %struct.hv* %124, i32 0, i32 2
  %125 = load i32, i32* %sv_flags112, align 4
  %and113 = and i32 %125, 33554432
  %tobool114 = icmp ne i32 %and113, 0
  br i1 %tobool114, label %land.lhs.true115, label %cond.false172

land.lhs.true115:                                 ; preds = %cond.end
  %126 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %127 = bitcast %struct.sv* %126 to %struct.gv*
  %sv_any116 = getelementptr inbounds %struct.gv, %struct.gv* %127, i32 0, i32 0
  %128 = load %struct.xpvgv*, %struct.xpvgv** %sv_any116, align 8
  %xnv_u117 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %128, i32 0, i32 5
  %xgv_stash118 = bitcast %union._xnvu* %xnv_u117 to %struct.hv**
  %129 = load %struct.hv*, %struct.hv** %xgv_stash118, align 8
  %sv_u119 = getelementptr inbounds %struct.hv, %struct.hv* %129, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u119 to %struct.he***
  %130 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %131 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %132 = bitcast %struct.sv* %131 to %struct.gv*
  %sv_any120 = getelementptr inbounds %struct.gv, %struct.gv* %132, i32 0, i32 0
  %133 = load %struct.xpvgv*, %struct.xpvgv** %sv_any120, align 8
  %xnv_u121 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %133, i32 0, i32 5
  %xgv_stash122 = bitcast %union._xnvu* %xnv_u121 to %struct.hv**
  %134 = load %struct.hv*, %struct.hv** %xgv_stash122, align 8
  %sv_any123 = getelementptr inbounds %struct.hv, %struct.hv* %134, i32 0, i32 0
  %135 = load %struct.xpvhv*, %struct.xpvhv** %sv_any123, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %135, i32 0, i32 3
  %136 = load i64, i64* %xhv_max, align 8
  %add124 = add i64 %136, 1
  %arrayidx125 = getelementptr inbounds %struct.he*, %struct.he** %130, i64 %add124
  %137 = bitcast %struct.he** %arrayidx125 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %137, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %138 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool126 = icmp ne %struct.hek* %138, null
  br i1 %tobool126, label %cond.true127, label %cond.false172

cond.true127:                                     ; preds = %land.lhs.true115
  %139 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %140 = bitcast %struct.sv* %139 to %struct.gv*
  %sv_any128 = getelementptr inbounds %struct.gv, %struct.gv* %140, i32 0, i32 0
  %141 = load %struct.xpvgv*, %struct.xpvgv** %sv_any128, align 8
  %xnv_u129 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %141, i32 0, i32 5
  %xgv_stash130 = bitcast %union._xnvu* %xnv_u129 to %struct.hv**
  %142 = load %struct.hv*, %struct.hv** %xgv_stash130, align 8
  %sv_u131 = getelementptr inbounds %struct.hv, %struct.hv* %142, i32 0, i32 3
  %svu_hash132 = bitcast %union.anon.4* %sv_u131 to %struct.he***
  %143 = load %struct.he**, %struct.he*** %svu_hash132, align 8
  %144 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %145 = bitcast %struct.sv* %144 to %struct.gv*
  %sv_any133 = getelementptr inbounds %struct.gv, %struct.gv* %145, i32 0, i32 0
  %146 = load %struct.xpvgv*, %struct.xpvgv** %sv_any133, align 8
  %xnv_u134 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %146, i32 0, i32 5
  %xgv_stash135 = bitcast %union._xnvu* %xnv_u134 to %struct.hv**
  %147 = load %struct.hv*, %struct.hv** %xgv_stash135, align 8
  %sv_any136 = getelementptr inbounds %struct.hv, %struct.hv* %147, i32 0, i32 0
  %148 = load %struct.xpvhv*, %struct.xpvhv** %sv_any136, align 8
  %xhv_max137 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %148, i32 0, i32 3
  %149 = load i64, i64* %xhv_max137, align 8
  %add138 = add i64 %149, 1
  %arrayidx139 = getelementptr inbounds %struct.he*, %struct.he** %143, i64 %add138
  %150 = bitcast %struct.he** %arrayidx139 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %150, i32 0, i32 4
  %151 = load i32, i32* %xhv_name_count, align 4
  %tobool140 = icmp ne i32 %151, 0
  br i1 %tobool140, label %cond.true141, label %cond.false155

cond.true141:                                     ; preds = %cond.true127
  %152 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %153 = bitcast %struct.sv* %152 to %struct.gv*
  %sv_any142 = getelementptr inbounds %struct.gv, %struct.gv* %153, i32 0, i32 0
  %154 = load %struct.xpvgv*, %struct.xpvgv** %sv_any142, align 8
  %xnv_u143 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %154, i32 0, i32 5
  %xgv_stash144 = bitcast %union._xnvu* %xnv_u143 to %struct.hv**
  %155 = load %struct.hv*, %struct.hv** %xgv_stash144, align 8
  %sv_u145 = getelementptr inbounds %struct.hv, %struct.hv* %155, i32 0, i32 3
  %svu_hash146 = bitcast %union.anon.4* %sv_u145 to %struct.he***
  %156 = load %struct.he**, %struct.he*** %svu_hash146, align 8
  %157 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %158 = bitcast %struct.sv* %157 to %struct.gv*
  %sv_any147 = getelementptr inbounds %struct.gv, %struct.gv* %158, i32 0, i32 0
  %159 = load %struct.xpvgv*, %struct.xpvgv** %sv_any147, align 8
  %xnv_u148 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %159, i32 0, i32 5
  %xgv_stash149 = bitcast %union._xnvu* %xnv_u148 to %struct.hv**
  %160 = load %struct.hv*, %struct.hv** %xgv_stash149, align 8
  %sv_any150 = getelementptr inbounds %struct.hv, %struct.hv* %160, i32 0, i32 0
  %161 = load %struct.xpvhv*, %struct.xpvhv** %sv_any150, align 8
  %xhv_max151 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %161, i32 0, i32 3
  %162 = load i64, i64* %xhv_max151, align 8
  %add152 = add i64 %162, 1
  %arrayidx153 = getelementptr inbounds %struct.he*, %struct.he** %156, i64 %add152
  %163 = bitcast %struct.he** %arrayidx153 to %struct.xpvhv_aux*
  %xhv_name_u154 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %163, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u154 to %struct.hek***
  %164 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %165 = load %struct.hek*, %struct.hek** %164, align 8
  br label %cond.end170

cond.false155:                                    ; preds = %cond.true127
  %166 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %167 = bitcast %struct.sv* %166 to %struct.gv*
  %sv_any156 = getelementptr inbounds %struct.gv, %struct.gv* %167, i32 0, i32 0
  %168 = load %struct.xpvgv*, %struct.xpvgv** %sv_any156, align 8
  %xnv_u157 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %168, i32 0, i32 5
  %xgv_stash158 = bitcast %union._xnvu* %xnv_u157 to %struct.hv**
  %169 = load %struct.hv*, %struct.hv** %xgv_stash158, align 8
  %sv_u159 = getelementptr inbounds %struct.hv, %struct.hv* %169, i32 0, i32 3
  %svu_hash160 = bitcast %union.anon.4* %sv_u159 to %struct.he***
  %170 = load %struct.he**, %struct.he*** %svu_hash160, align 8
  %171 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %172 = bitcast %struct.sv* %171 to %struct.gv*
  %sv_any161 = getelementptr inbounds %struct.gv, %struct.gv* %172, i32 0, i32 0
  %173 = load %struct.xpvgv*, %struct.xpvgv** %sv_any161, align 8
  %xnv_u162 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %173, i32 0, i32 5
  %xgv_stash163 = bitcast %union._xnvu* %xnv_u162 to %struct.hv**
  %174 = load %struct.hv*, %struct.hv** %xgv_stash163, align 8
  %sv_any164 = getelementptr inbounds %struct.hv, %struct.hv* %174, i32 0, i32 0
  %175 = load %struct.xpvhv*, %struct.xpvhv** %sv_any164, align 8
  %xhv_max165 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %175, i32 0, i32 3
  %176 = load i64, i64* %xhv_max165, align 8
  %add166 = add i64 %176, 1
  %arrayidx167 = getelementptr inbounds %struct.he*, %struct.he** %170, i64 %add166
  %177 = bitcast %struct.he** %arrayidx167 to %struct.xpvhv_aux*
  %xhv_name_u168 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %177, i32 0, i32 0
  %xhvnameu_name169 = bitcast %union._xhvnameu* %xhv_name_u168 to %struct.hek**
  %178 = load %struct.hek*, %struct.hek** %xhvnameu_name169, align 8
  br label %cond.end170

cond.end170:                                      ; preds = %cond.false155, %cond.true141
  %cond171 = phi %struct.hek* [ %165, %cond.true141 ], [ %178, %cond.false155 ]
  br label %cond.end173

cond.false172:                                    ; preds = %land.lhs.true115, %cond.end
  br label %cond.end173

cond.end173:                                      ; preds = %cond.false172, %cond.end170
  %cond174 = phi %struct.hek* [ %cond171, %cond.end170 ], [ null, %cond.false172 ]
  %179 = bitcast %struct.hek* %cond174 to i8*
  %180 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %181 = bitcast %struct.sv* %180 to i8*
  %182 = bitcast i8* %181 to %struct.gv*
  %sv_u175 = getelementptr inbounds %struct.gv, %struct.gv* %182, i32 0, i32 3
  %svu_gp176 = bitcast %union.anon.6* %sv_u175 to %struct.gp**
  %183 = load %struct.gp*, %struct.gp** %svu_gp176, align 8
  %add.ptr177 = getelementptr inbounds %struct.gp, %struct.gp* %183, i64 0
  %gp_egv178 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr177, i32 0, i32 8
  %184 = load %struct.gv*, %struct.gv** %gp_egv178, align 8
  %tobool179 = icmp ne %struct.gv* %184, null
  br i1 %tobool179, label %cond.true180, label %cond.false185

cond.true180:                                     ; preds = %cond.end173
  %185 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %186 = bitcast %struct.sv* %185 to i8*
  %187 = bitcast i8* %186 to %struct.gv*
  %sv_u181 = getelementptr inbounds %struct.gv, %struct.gv* %187, i32 0, i32 3
  %svu_gp182 = bitcast %union.anon.6* %sv_u181 to %struct.gp**
  %188 = load %struct.gp*, %struct.gp** %svu_gp182, align 8
  %add.ptr183 = getelementptr inbounds %struct.gp, %struct.gp* %188, i64 0
  %gp_egv184 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr183, i32 0, i32 8
  %189 = load %struct.gv*, %struct.gv** %gp_egv184, align 8
  br label %cond.end186

cond.false185:                                    ; preds = %cond.end173
  %190 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %191 = bitcast %struct.sv* %190 to i8*
  %192 = bitcast i8* %191 to %struct.gv*
  br label %cond.end186

cond.end186:                                      ; preds = %cond.false185, %cond.true180
  %cond187 = phi %struct.gv* [ %189, %cond.true180 ], [ %192, %cond.false185 ]
  %sv_any188 = getelementptr inbounds %struct.gv, %struct.gv* %cond187, i32 0, i32 0
  %193 = load %struct.xpvgv*, %struct.xpvgv** %sv_any188, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %193, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %194 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %195 = bitcast %struct.hek* %194 to i8*
  %call189 = call %struct.sv* (i8*, ...) @Perl_newSVpvf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i64 0, i64 0), i8* %179, i8* %195)
  %call190 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call189)
  %196 = load %struct.cv*, %struct.cv** %cv, align 8
  %197 = load %struct.sv*, %struct.sv** %sref, align 8
  %198 = bitcast %struct.sv* %197 to %struct.cv*
  %sv_any191 = getelementptr inbounds %struct.cv, %struct.cv* %198, i32 0, i32 0
  %199 = load %struct.xpvcv*, %struct.xpvcv** %sv_any191, align 8
  %200 = bitcast %struct.xpvcv* %199 to i8*
  %201 = bitcast i8* %200 to %struct.xpvcv*
  %xcv_flags192 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %201, i32 0, i32 12
  %202 = load i32, i32* %xcv_flags192, align 4
  %and193 = and i32 %202, 4
  %tobool194 = icmp ne i32 %and193, 0
  br i1 %tobool194, label %cond.true195, label %cond.false196

cond.true195:                                     ; preds = %cond.end186
  br label %cond.end197

cond.false196:                                    ; preds = %cond.end186
  br label %cond.end197

cond.end197:                                      ; preds = %cond.false196, %cond.true195
  %cond198 = phi %struct.sv** [ %new_const_sv, %cond.true195 ], [ null, %cond.false196 ]
  call void @Perl_report_redefined_cv(%struct.sv* %call190, %struct.cv* %196, %struct.sv** %cond198)
  br label %if.end199

if.end199:                                        ; preds = %cond.end197, %lor.lhs.false100, %lor.lhs.false92, %if.then83
  %203 = load i32, i32* %intro, align 4
  %tobool200 = icmp ne i32 %203, 0
  br i1 %tobool200, label %if.end279, label %if.then201

if.then201:                                       ; preds = %if.end199
  %204 = load %struct.cv*, %struct.cv** %cv, align 8
  %205 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %206 = bitcast %struct.sv* %205 to %struct.gv*
  %207 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags202 = getelementptr inbounds %struct.sv, %struct.sv* %207, i32 0, i32 2
  %208 = load i32, i32* %sv_flags202, align 4
  %and203 = and i32 %208, 1024
  %tobool204 = icmp ne i32 %and203, 0
  br i1 %tobool204, label %cond.true205, label %cond.false234

cond.true205:                                     ; preds = %if.then201
  %209 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags206 = getelementptr inbounds %struct.sv, %struct.sv* %209, i32 0, i32 2
  %210 = load i32, i32* %sv_flags206, align 4
  %and207 = and i32 %210, 1024
  %tobool208 = icmp ne i32 %and207, 0
  br i1 %tobool208, label %cond.true209, label %cond.false231

cond.true209:                                     ; preds = %cond.true205
  %211 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags210 = getelementptr inbounds %struct.sv, %struct.sv* %211, i32 0, i32 2
  %212 = load i32, i32* %sv_flags210, align 4
  %and211 = and i32 %212, 255
  %cmp212 = icmp eq i32 %and211, 13
  br i1 %cmp212, label %land.lhs.true214, label %cond.false225

land.lhs.true214:                                 ; preds = %cond.true209
  %213 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_any215 = getelementptr inbounds %struct.sv, %struct.sv* %213, i32 0, i32 0
  %214 = load i8*, i8** %sv_any215, align 8
  %215 = bitcast i8* %214 to %struct.xpvcv*
  %xcv_flags216 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %215, i32 0, i32 12
  %216 = load i32, i32* %xcv_flags216, align 4
  %and217 = and i32 %216, 8192
  %tobool218 = icmp ne i32 %and217, 0
  br i1 %tobool218, label %cond.true219, label %cond.false225

cond.true219:                                     ; preds = %land.lhs.true214
  %217 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_u220 = getelementptr inbounds %struct.sv, %struct.sv* %217, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u220 to i8**
  %218 = load i8*, i8** %svu_pv, align 8
  %219 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_any221 = getelementptr inbounds %struct.sv, %struct.sv* %219, i32 0, i32 0
  %220 = load i8*, i8** %sv_any221, align 8
  %221 = bitcast i8* %220 to %struct.xpv*
  %xpv_cur222 = getelementptr inbounds %struct.xpv, %struct.xpv* %221, i32 0, i32 2
  %222 = load i64, i64* %xpv_cur222, align 8
  %add.ptr223 = getelementptr inbounds i8, i8* %218, i64 %222
  %add.ptr224 = getelementptr inbounds i8, i8* %add.ptr223, i64 1
  br label %cond.end229

cond.false225:                                    ; preds = %land.lhs.true214, %cond.true209
  %223 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_u226 = getelementptr inbounds %struct.sv, %struct.sv* %223, i32 0, i32 3
  %svu_pv227 = bitcast %union.anon* %sv_u226 to i8**
  %224 = load i8*, i8** %svu_pv227, align 8
  %add.ptr228 = getelementptr inbounds i8, i8* %224, i64 0
  br label %cond.end229

cond.end229:                                      ; preds = %cond.false225, %cond.true219
  %cond230 = phi i8* [ %add.ptr224, %cond.true219 ], [ %add.ptr228, %cond.false225 ]
  br label %cond.end232

cond.false231:                                    ; preds = %cond.true205
  br label %cond.end232

cond.end232:                                      ; preds = %cond.false231, %cond.end229
  %cond233 = phi i8* [ %cond230, %cond.end229 ], [ null, %cond.false231 ]
  br label %cond.end235

cond.false234:                                    ; preds = %if.then201
  br label %cond.end235

cond.end235:                                      ; preds = %cond.false234, %cond.end232
  %cond236 = phi i8* [ %cond233, %cond.end232 ], [ null, %cond.false234 ]
  %225 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags237 = getelementptr inbounds %struct.sv, %struct.sv* %225, i32 0, i32 2
  %226 = load i32, i32* %sv_flags237, align 4
  %and238 = and i32 %226, 1024
  %tobool239 = icmp ne i32 %and238, 0
  br i1 %tobool239, label %cond.true240, label %cond.false267

cond.true240:                                     ; preds = %cond.end235
  %227 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags241 = getelementptr inbounds %struct.sv, %struct.sv* %227, i32 0, i32 2
  %228 = load i32, i32* %sv_flags241, align 4
  %and242 = and i32 %228, 1024
  %tobool243 = icmp ne i32 %and242, 0
  br i1 %tobool243, label %cond.true244, label %cond.false264

cond.true244:                                     ; preds = %cond.true240
  %229 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags245 = getelementptr inbounds %struct.sv, %struct.sv* %229, i32 0, i32 2
  %230 = load i32, i32* %sv_flags245, align 4
  %and246 = and i32 %230, 255
  %cmp247 = icmp eq i32 %and246, 13
  br i1 %cmp247, label %land.lhs.true249, label %cond.false259

land.lhs.true249:                                 ; preds = %cond.true244
  %231 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_any250 = getelementptr inbounds %struct.sv, %struct.sv* %231, i32 0, i32 0
  %232 = load i8*, i8** %sv_any250, align 8
  %233 = bitcast i8* %232 to %struct.xpvcv*
  %xcv_flags251 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %233, i32 0, i32 12
  %234 = load i32, i32* %xcv_flags251, align 4
  %and252 = and i32 %234, 8192
  %tobool253 = icmp ne i32 %and252, 0
  br i1 %tobool253, label %cond.true254, label %cond.false259

cond.true254:                                     ; preds = %land.lhs.true249
  %235 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_any255 = getelementptr inbounds %struct.sv, %struct.sv* %235, i32 0, i32 0
  %236 = load i8*, i8** %sv_any255, align 8
  %237 = bitcast i8* %236 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %237, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %238 = load i64, i64* %xpvlenu_len, align 8
  %239 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_any256 = getelementptr inbounds %struct.sv, %struct.sv* %239, i32 0, i32 0
  %240 = load i8*, i8** %sv_any256, align 8
  %241 = bitcast i8* %240 to %struct.xpv*
  %xpv_cur257 = getelementptr inbounds %struct.xpv, %struct.xpv* %241, i32 0, i32 2
  %242 = load i64, i64* %xpv_cur257, align 8
  %sub = sub i64 %238, %242
  %sub258 = sub i64 %sub, 2
  br label %cond.end262

cond.false259:                                    ; preds = %land.lhs.true249, %cond.true244
  %243 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_any260 = getelementptr inbounds %struct.sv, %struct.sv* %243, i32 0, i32 0
  %244 = load i8*, i8** %sv_any260, align 8
  %245 = bitcast i8* %244 to %struct.xpv*
  %xpv_cur261 = getelementptr inbounds %struct.xpv, %struct.xpv* %245, i32 0, i32 2
  %246 = load i64, i64* %xpv_cur261, align 8
  br label %cond.end262

cond.end262:                                      ; preds = %cond.false259, %cond.true254
  %cond263 = phi i64 [ %sub258, %cond.true254 ], [ %246, %cond.false259 ]
  br label %cond.end265

cond.false264:                                    ; preds = %cond.true240
  br label %cond.end265

cond.end265:                                      ; preds = %cond.false264, %cond.end262
  %cond266 = phi i64 [ %cond263, %cond.end262 ], [ 0, %cond.false264 ]
  br label %cond.end268

cond.false267:                                    ; preds = %cond.end235
  br label %cond.end268

cond.end268:                                      ; preds = %cond.false267, %cond.end265
  %cond269 = phi i64 [ %cond266, %cond.end265 ], [ 0, %cond.false267 ]
  %247 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags270 = getelementptr inbounds %struct.sv, %struct.sv* %247, i32 0, i32 2
  %248 = load i32, i32* %sv_flags270, align 4
  %and271 = and i32 %248, 1024
  %tobool272 = icmp ne i32 %and271, 0
  br i1 %tobool272, label %cond.true273, label %cond.false276

cond.true273:                                     ; preds = %cond.end268
  %249 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags274 = getelementptr inbounds %struct.sv, %struct.sv* %249, i32 0, i32 2
  %250 = load i32, i32* %sv_flags274, align 4
  %and275 = and i32 %250, 536870912
  br label %cond.end277

cond.false276:                                    ; preds = %cond.end268
  br label %cond.end277

cond.end277:                                      ; preds = %cond.false276, %cond.true273
  %cond278 = phi i32 [ %and275, %cond.true273 ], [ 0, %cond.false276 ]
  call void @Perl_cv_ckproto_len_flags(%struct.cv* %204, %struct.gv* %206, i8* %cond236, i64 %cond269, i32 %cond278)
  br label %if.end279

if.end279:                                        ; preds = %cond.end277, %if.end199
  br label %if.end280

if.end280:                                        ; preds = %if.end279, %if.then81
  %251 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u281 = getelementptr inbounds %struct.sv, %struct.sv* %251, i32 0, i32 3
  %svu_gp282 = bitcast %union.anon* %sv_u281 to %struct.gp**
  %252 = load %struct.gp*, %struct.gp** %svu_gp282, align 8
  %add.ptr283 = getelementptr inbounds %struct.gp, %struct.gp* %252, i64 0
  %gp_cvgen284 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr283, i32 0, i32 3
  store i32 0, i32* %gp_cvgen284, align 8
  %253 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any285 = getelementptr inbounds %struct.sv, %struct.sv* %253, i32 0, i32 0
  %254 = load i8*, i8** %sv_any285, align 8
  %255 = bitcast i8* %254 to %struct.xpvgv*
  %xpv_cur286 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %255, i32 0, i32 2
  %256 = load i64, i64* %xpv_cur286, align 8
  %or287 = or i64 %256, 4
  store i64 %or287, i64* %xpv_cur286, align 8
  %257 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any288 = getelementptr inbounds %struct.sv, %struct.sv* %257, i32 0, i32 0
  %258 = load i8*, i8** %sv_any288, align 8
  %259 = bitcast i8* %258 to %struct.xpvgv*
  %xnv_u289 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %259, i32 0, i32 5
  %xgv_stash290 = bitcast %union._xnvu* %xnv_u289 to %struct.hv**
  %260 = load %struct.hv*, %struct.hv** %xgv_stash290, align 8
  %tobool291 = icmp ne %struct.hv* %260, null
  br i1 %tobool291, label %if.then292, label %if.end337

if.then292:                                       ; preds = %if.end280
  %261 = load i32, i32* %intro, align 4
  %tobool293 = icmp ne i32 %261, 0
  br i1 %tobool293, label %land.lhs.true294, label %if.else322

land.lhs.true294:                                 ; preds = %if.then292
  %262 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u295 = getelementptr inbounds %struct.sv, %struct.sv* %262, i32 0, i32 3
  %svu_gp296 = bitcast %union.anon* %sv_u295 to %struct.gp**
  %263 = load %struct.gp*, %struct.gp** %svu_gp296, align 8
  %add.ptr297 = getelementptr inbounds %struct.gp, %struct.gp* %263, i64 0
  %gp_refcnt = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr297, i32 0, i32 4
  %264 = load i32, i32* %gp_refcnt, align 4
  %cmp298 = icmp ugt i32 %264, 1
  br i1 %cmp298, label %if.then300, label %if.else322

if.then300:                                       ; preds = %land.lhs.true294
  %265 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u301 = getelementptr inbounds %struct.sv, %struct.sv* %265, i32 0, i32 3
  %svu_gp302 = bitcast %union.anon* %sv_u301 to %struct.gp**
  %266 = load %struct.gp*, %struct.gp** %svu_gp302, align 8
  %add.ptr303 = getelementptr inbounds %struct.gp, %struct.gp* %266, i64 0
  %gp_refcnt304 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr303, i32 0, i32 4
  %267 = load i32, i32* %gp_refcnt304, align 4
  %dec = add i32 %267, -1
  store i32 %dec, i32* %gp_refcnt304, align 4
  %268 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u305 = getelementptr inbounds %struct.sv, %struct.sv* %268, i32 0, i32 3
  %svu_gp306 = bitcast %union.anon* %sv_u305 to %struct.gp**
  %269 = load %struct.gp*, %struct.gp** %svu_gp306, align 8
  %add.ptr307 = getelementptr inbounds %struct.gp, %struct.gp* %269, i64 0
  %gp_refcnt308 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr307, i32 0, i32 4
  %270 = load i32, i32* %gp_refcnt308, align 4
  %cmp309 = icmp ugt i32 %270, 1
  br i1 %cmp309, label %cond.true311, label %cond.false312

cond.true311:                                     ; preds = %if.then300
  %271 = load i32, i32* @PL_sub_generation, align 4
  %inc = add i32 %271, 1
  store i32 %inc, i32* @PL_sub_generation, align 4
  br label %cond.end316

cond.false312:                                    ; preds = %if.then300
  %272 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any313 = getelementptr inbounds %struct.sv, %struct.sv* %272, i32 0, i32 0
  %273 = load i8*, i8** %sv_any313, align 8
  %274 = bitcast i8* %273 to %struct.xpvgv*
  %xnv_u314 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %274, i32 0, i32 5
  %xgv_stash315 = bitcast %union._xnvu* %xnv_u314 to %struct.hv**
  %275 = load %struct.hv*, %struct.hv** %xgv_stash315, align 8
  call void @Perl_mro_method_changed_in(%struct.hv* %275)
  br label %cond.end316

cond.end316:                                      ; preds = %cond.false312, %cond.true311
  %276 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u317 = getelementptr inbounds %struct.sv, %struct.sv* %276, i32 0, i32 3
  %svu_gp318 = bitcast %union.anon* %sv_u317 to %struct.gp**
  %277 = load %struct.gp*, %struct.gp** %svu_gp318, align 8
  %add.ptr319 = getelementptr inbounds %struct.gp, %struct.gp* %277, i64 0
  %gp_refcnt320 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr319, i32 0, i32 4
  %278 = load i32, i32* %gp_refcnt320, align 4
  %inc321 = add i32 %278, 1
  store i32 %inc321, i32* %gp_refcnt320, align 4
  br label %if.end336

if.else322:                                       ; preds = %land.lhs.true294, %if.then292
  %279 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u323 = getelementptr inbounds %struct.sv, %struct.sv* %279, i32 0, i32 3
  %svu_gp324 = bitcast %union.anon* %sv_u323 to %struct.gp**
  %280 = load %struct.gp*, %struct.gp** %svu_gp324, align 8
  %add.ptr325 = getelementptr inbounds %struct.gp, %struct.gp* %280, i64 0
  %gp_refcnt326 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr325, i32 0, i32 4
  %281 = load i32, i32* %gp_refcnt326, align 4
  %cmp327 = icmp ugt i32 %281, 1
  br i1 %cmp327, label %cond.true329, label %cond.false331

cond.true329:                                     ; preds = %if.else322
  %282 = load i32, i32* @PL_sub_generation, align 4
  %inc330 = add i32 %282, 1
  store i32 %inc330, i32* @PL_sub_generation, align 4
  br label %cond.end335

cond.false331:                                    ; preds = %if.else322
  %283 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any332 = getelementptr inbounds %struct.sv, %struct.sv* %283, i32 0, i32 0
  %284 = load i8*, i8** %sv_any332, align 8
  %285 = bitcast i8* %284 to %struct.xpvgv*
  %xnv_u333 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %285, i32 0, i32 5
  %xgv_stash334 = bitcast %union._xnvu* %xnv_u333 to %struct.hv**
  %286 = load %struct.hv*, %struct.hv** %xgv_stash334, align 8
  call void @Perl_mro_method_changed_in(%struct.hv* %286)
  br label %cond.end335

cond.end335:                                      ; preds = %cond.false331, %cond.true329
  br label %if.end336

if.end336:                                        ; preds = %cond.end335, %cond.end316
  br label %if.end337

if.end337:                                        ; preds = %if.end336, %if.end280
  br label %if.end338

if.end338:                                        ; preds = %if.end337, %lor.lhs.false, %if.end71
  %287 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %287, i32 0, i32 1
  %288 = load i32, i32* %sv_refcnt, align 8
  %inc339 = add i32 %288, 1
  store i32 %inc339, i32* %sv_refcnt, align 8
  %289 = load %struct.sv*, %struct.sv** %sref, align 8
  %290 = bitcast %struct.sv* %289 to i8*
  %291 = bitcast i8* %290 to %struct.sv*
  %292 = load %struct.sv**, %struct.sv*** %location, align 8
  store %struct.sv* %291, %struct.sv** %292, align 8
  %293 = load i8, i8* %import_flag, align 1
  %conv340 = zext i8 %293 to i32
  %tobool341 = icmp ne i32 %conv340, 0
  br i1 %tobool341, label %land.lhs.true342, label %if.end359

land.lhs.true342:                                 ; preds = %if.end338
  %294 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any343 = getelementptr inbounds %struct.sv, %struct.sv* %294, i32 0, i32 0
  %295 = load i8*, i8** %sv_any343, align 8
  %296 = bitcast i8* %295 to %struct.xpvgv*
  %xpv_cur344 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %296, i32 0, i32 2
  %297 = load i64, i64* %xpv_cur344, align 8
  %298 = load i8, i8* %import_flag, align 1
  %conv345 = zext i8 %298 to i64
  %and346 = and i64 %297, %conv345
  %tobool347 = icmp ne i64 %and346, 0
  br i1 %tobool347, label %if.end359, label %land.lhs.true348

land.lhs.true348:                                 ; preds = %land.lhs.true342
  %299 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %299, i32 0, i32 8
  %300 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  %301 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any349 = getelementptr inbounds %struct.sv, %struct.sv* %301, i32 0, i32 0
  %302 = load i8*, i8** %sv_any349, align 8
  %303 = bitcast i8* %302 to %struct.xpvgv*
  %xnv_u350 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %303, i32 0, i32 5
  %xgv_stash351 = bitcast %union._xnvu* %xnv_u350 to %struct.hv**
  %304 = load %struct.hv*, %struct.hv** %xgv_stash351, align 8
  %cmp352 = icmp eq %struct.hv* %300, %304
  br i1 %cmp352, label %if.end359, label %if.then354

if.then354:                                       ; preds = %land.lhs.true348
  %305 = load i8, i8* %import_flag, align 1
  %conv355 = zext i8 %305 to i64
  %306 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any356 = getelementptr inbounds %struct.sv, %struct.sv* %306, i32 0, i32 0
  %307 = load i8*, i8** %sv_any356, align 8
  %308 = bitcast i8* %307 to %struct.xpvgv*
  %xpv_cur357 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %308, i32 0, i32 2
  %309 = load i64, i64* %xpv_cur357, align 8
  %or358 = or i64 %309, %conv355
  store i64 %or358, i64* %xpv_cur357, align 8
  br label %if.end359

if.end359:                                        ; preds = %if.then354, %land.lhs.true348, %land.lhs.true342, %if.end338
  %310 = load i8, i8* %import_flag, align 1
  %conv360 = zext i8 %310 to i32
  %cmp361 = icmp eq i32 %conv360, 16
  br i1 %cmp361, label %if.then363, label %if.end398

if.then363:                                       ; preds = %if.end359
  %311 = load i32, i32* %intro, align 4
  %tobool364 = icmp ne i32 %311, 0
  br i1 %tobool364, label %if.then365, label %if.end366

if.then365:                                       ; preds = %if.then363
  %312 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %313 = bitcast %struct.sv* %312 to %struct.gv*
  call void @Perl_save_aliased_sv(%struct.gv* %313)
  br label %if.end366

if.end366:                                        ; preds = %if.then365, %if.then363
  %314 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_refcnt367 = getelementptr inbounds %struct.sv, %struct.sv* %314, i32 0, i32 1
  %315 = load i32, i32* %sv_refcnt367, align 8
  %cmp368 = icmp ule i32 %315, 2
  br i1 %cmp368, label %land.lhs.true370, label %if.else384

land.lhs.true370:                                 ; preds = %if.end366
  %316 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags371 = getelementptr inbounds %struct.sv, %struct.sv* %316, i32 0, i32 2
  %317 = load i32, i32* %sv_flags371, align 4
  %and372 = and i32 %317, 8388608
  %tobool373 = icmp ne i32 %and372, 0
  br i1 %tobool373, label %if.else384, label %if.then374

if.then374:                                       ; preds = %land.lhs.true370
  %318 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u375 = getelementptr inbounds %struct.sv, %struct.sv* %318, i32 0, i32 3
  %svu_gp376 = bitcast %union.anon* %sv_u375 to %struct.gp**
  %319 = load %struct.gp*, %struct.gp** %svu_gp376, align 8
  %add.ptr377 = getelementptr inbounds %struct.gp, %struct.gp* %319, i64 0
  %gp_flags = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr377, i32 0, i32 9
  %bf.load378 = load i32, i32* %gp_flags, align 8
  %bf.lshr = lshr i32 %bf.load378, 31
  %and379 = and i32 %bf.lshr, -2
  %bf.load380 = load i32, i32* %gp_flags, align 8
  %bf.value381 = and i32 %and379, 1
  %bf.shl = shl i32 %bf.value381, 31
  %bf.clear382 = and i32 %bf.load380, 2147483647
  %bf.set383 = or i32 %bf.clear382, %bf.shl
  store i32 %bf.set383, i32* %gp_flags, align 8
  br label %if.end397

if.else384:                                       ; preds = %land.lhs.true370, %if.end366
  %320 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u385 = getelementptr inbounds %struct.sv, %struct.sv* %320, i32 0, i32 3
  %svu_gp386 = bitcast %union.anon* %sv_u385 to %struct.gp**
  %321 = load %struct.gp*, %struct.gp** %svu_gp386, align 8
  %add.ptr387 = getelementptr inbounds %struct.gp, %struct.gp* %321, i64 0
  %gp_flags388 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr387, i32 0, i32 9
  %bf.load389 = load i32, i32* %gp_flags388, align 8
  %bf.lshr390 = lshr i32 %bf.load389, 31
  %or391 = or i32 %bf.lshr390, 1
  %bf.load392 = load i32, i32* %gp_flags388, align 8
  %bf.value393 = and i32 %or391, 1
  %bf.shl394 = shl i32 %bf.value393, 31
  %bf.clear395 = and i32 %bf.load392, 2147483647
  %bf.set396 = or i32 %bf.clear395, %bf.shl394
  store i32 %bf.set396, i32* %gp_flags388, align 8
  br label %if.end397

if.end397:                                        ; preds = %if.else384, %if.then374
  br label %if.end398

if.end398:                                        ; preds = %if.end397, %if.end359
  %322 = load i32, i32* %stype, align 4
  %cmp399 = icmp eq i32 %322, 12
  br i1 %cmp399, label %if.then401, label %if.else529

if.then401:                                       ; preds = %if.end398
  %323 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %324 = bitcast %struct.sv* %323 to %struct.gv*
  %sv_any402 = getelementptr inbounds %struct.gv, %struct.gv* %324, i32 0, i32 0
  %325 = load %struct.xpvgv*, %struct.xpvgv** %sv_any402, align 8
  %xiv_u403 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %325, i32 0, i32 4
  %xivu_namehek404 = bitcast %union._xivu* %xiv_u403 to %struct.hek**
  %326 = load %struct.hek*, %struct.hek** %xivu_namehek404, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %326, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  store i8* %arraydecay, i8** %name, align 8
  %327 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any405 = getelementptr inbounds %struct.sv, %struct.sv* %327, i32 0, i32 0
  %328 = load i8*, i8** %sv_any405, align 8
  %329 = bitcast i8* %328 to %struct.xpvgv*
  %xiv_u406 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %329, i32 0, i32 4
  %xivu_namehek407 = bitcast %union._xivu* %xiv_u406 to %struct.hek**
  %330 = load %struct.hek*, %struct.hek** %xivu_namehek407, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %330, i32 0, i32 1
  %331 = load i32, i32* %hek_len, align 4
  %conv408 = sext i32 %331 to i64
  store i64 %conv408, i64* %len, align 8
  %332 = load i64, i64* %len, align 8
  %cmp409 = icmp ugt i64 %332, 1
  br i1 %cmp409, label %land.lhs.true411, label %lor.lhs.false423

land.lhs.true411:                                 ; preds = %if.then401
  %333 = load i8*, i8** %name, align 8
  %334 = load i64, i64* %len, align 8
  %sub412 = sub i64 %334, 2
  %arrayidx413 = getelementptr inbounds i8, i8* %333, i64 %sub412
  %335 = load i8, i8* %arrayidx413, align 1
  %conv414 = sext i8 %335 to i32
  %cmp415 = icmp eq i32 %conv414, 58
  br i1 %cmp415, label %land.lhs.true417, label %lor.lhs.false423

land.lhs.true417:                                 ; preds = %land.lhs.true411
  %336 = load i8*, i8** %name, align 8
  %337 = load i64, i64* %len, align 8
  %sub418 = sub i64 %337, 1
  %arrayidx419 = getelementptr inbounds i8, i8* %336, i64 %sub418
  %338 = load i8, i8* %arrayidx419, align 1
  %conv420 = sext i8 %338 to i32
  %cmp421 = icmp eq i32 %conv420, 58
  br i1 %cmp421, label %land.lhs.true431, label %lor.lhs.false423

lor.lhs.false423:                                 ; preds = %land.lhs.true417, %land.lhs.true411, %if.then401
  %339 = load i64, i64* %len, align 8
  %cmp424 = icmp eq i64 %339, 1
  br i1 %cmp424, label %land.lhs.true426, label %if.end528

land.lhs.true426:                                 ; preds = %lor.lhs.false423
  %340 = load i8*, i8** %name, align 8
  %arrayidx427 = getelementptr inbounds i8, i8* %340, i64 0
  %341 = load i8, i8* %arrayidx427, align 1
  %conv428 = sext i8 %341 to i32
  %cmp429 = icmp eq i32 %conv428, 58
  br i1 %cmp429, label %land.lhs.true431, label %if.end528

land.lhs.true431:                                 ; preds = %land.lhs.true426, %land.lhs.true417
  %342 = load %struct.sv*, %struct.sv** %dref, align 8
  %tobool432 = icmp ne %struct.sv* %342, null
  br i1 %tobool432, label %lor.lhs.false433, label %if.then527

lor.lhs.false433:                                 ; preds = %land.lhs.true431
  %343 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_flags434 = getelementptr inbounds %struct.sv, %struct.sv* %343, i32 0, i32 2
  %344 = load i32, i32* %sv_flags434, align 4
  %and435 = and i32 %344, 33554432
  %tobool436 = icmp ne i32 %and435, 0
  br i1 %tobool436, label %land.lhs.true437, label %cond.false526

land.lhs.true437:                                 ; preds = %lor.lhs.false433
  %345 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_u438 = getelementptr inbounds %struct.sv, %struct.sv* %345, i32 0, i32 3
  %svu_hash439 = bitcast %union.anon* %sv_u438 to %struct.he***
  %346 = load %struct.he**, %struct.he*** %svu_hash439, align 8
  %347 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_any440 = getelementptr inbounds %struct.sv, %struct.sv* %347, i32 0, i32 0
  %348 = load i8*, i8** %sv_any440, align 8
  %349 = bitcast i8* %348 to %struct.xpvhv*
  %xhv_max441 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %349, i32 0, i32 3
  %350 = load i64, i64* %xhv_max441, align 8
  %add442 = add i64 %350, 1
  %arrayidx443 = getelementptr inbounds %struct.he*, %struct.he** %346, i64 %add442
  %351 = bitcast %struct.he** %arrayidx443 to %struct.xpvhv_aux*
  %xhv_name_u444 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %351, i32 0, i32 0
  %xhvnameu_name445 = bitcast %union._xhvnameu* %xhv_name_u444 to %struct.hek**
  %352 = load %struct.hek*, %struct.hek** %xhvnameu_name445, align 8
  %tobool446 = icmp ne %struct.hek* %352, null
  br i1 %tobool446, label %land.lhs.true447, label %cond.false526

land.lhs.true447:                                 ; preds = %land.lhs.true437
  %353 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_u448 = getelementptr inbounds %struct.sv, %struct.sv* %353, i32 0, i32 3
  %svu_hash449 = bitcast %union.anon* %sv_u448 to %struct.he***
  %354 = load %struct.he**, %struct.he*** %svu_hash449, align 8
  %355 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_any450 = getelementptr inbounds %struct.sv, %struct.sv* %355, i32 0, i32 0
  %356 = load i8*, i8** %sv_any450, align 8
  %357 = bitcast i8* %356 to %struct.xpvhv*
  %xhv_max451 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %357, i32 0, i32 3
  %358 = load i64, i64* %xhv_max451, align 8
  %add452 = add i64 %358, 1
  %arrayidx453 = getelementptr inbounds %struct.he*, %struct.he** %354, i64 %add452
  %359 = bitcast %struct.he** %arrayidx453 to %struct.xpvhv_aux*
  %xhv_name_count454 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %359, i32 0, i32 4
  %360 = load i32, i32* %xhv_name_count454, align 4
  %cmp455 = icmp ne i32 %360, -1
  br i1 %cmp455, label %cond.true457, label %cond.false526

cond.true457:                                     ; preds = %land.lhs.true447
  %361 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_u458 = getelementptr inbounds %struct.sv, %struct.sv* %361, i32 0, i32 3
  %svu_hash459 = bitcast %union.anon* %sv_u458 to %struct.he***
  %362 = load %struct.he**, %struct.he*** %svu_hash459, align 8
  %363 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_any460 = getelementptr inbounds %struct.sv, %struct.sv* %363, i32 0, i32 0
  %364 = load i8*, i8** %sv_any460, align 8
  %365 = bitcast i8* %364 to %struct.xpvhv*
  %xhv_max461 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %365, i32 0, i32 3
  %366 = load i64, i64* %xhv_max461, align 8
  %add462 = add i64 %366, 1
  %arrayidx463 = getelementptr inbounds %struct.he*, %struct.he** %362, i64 %add462
  %367 = bitcast %struct.he** %arrayidx463 to %struct.xpvhv_aux*
  %xhv_name_count464 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %367, i32 0, i32 4
  %368 = load i32, i32* %xhv_name_count464, align 4
  %cmp465 = icmp sgt i32 %368, 0
  br i1 %cmp465, label %cond.true467, label %cond.false477

cond.true467:                                     ; preds = %cond.true457
  %369 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_u468 = getelementptr inbounds %struct.sv, %struct.sv* %369, i32 0, i32 3
  %svu_hash469 = bitcast %union.anon* %sv_u468 to %struct.he***
  %370 = load %struct.he**, %struct.he*** %svu_hash469, align 8
  %371 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_any470 = getelementptr inbounds %struct.sv, %struct.sv* %371, i32 0, i32 0
  %372 = load i8*, i8** %sv_any470, align 8
  %373 = bitcast i8* %372 to %struct.xpvhv*
  %xhv_max471 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %373, i32 0, i32 3
  %374 = load i64, i64* %xhv_max471, align 8
  %add472 = add i64 %374, 1
  %arrayidx473 = getelementptr inbounds %struct.he*, %struct.he** %370, i64 %add472
  %375 = bitcast %struct.he** %arrayidx473 to %struct.xpvhv_aux*
  %xhv_name_u474 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %375, i32 0, i32 0
  %xhvnameu_names475 = bitcast %union._xhvnameu* %xhv_name_u474 to %struct.hek***
  %376 = load %struct.hek**, %struct.hek*** %xhvnameu_names475, align 8
  %arrayidx476 = getelementptr inbounds %struct.hek*, %struct.hek** %376, i64 0
  %377 = load %struct.hek*, %struct.hek** %arrayidx476, align 8
  br label %cond.end521

cond.false477:                                    ; preds = %cond.true457
  %378 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_u478 = getelementptr inbounds %struct.sv, %struct.sv* %378, i32 0, i32 3
  %svu_hash479 = bitcast %union.anon* %sv_u478 to %struct.he***
  %379 = load %struct.he**, %struct.he*** %svu_hash479, align 8
  %380 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_any480 = getelementptr inbounds %struct.sv, %struct.sv* %380, i32 0, i32 0
  %381 = load i8*, i8** %sv_any480, align 8
  %382 = bitcast i8* %381 to %struct.xpvhv*
  %xhv_max481 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %382, i32 0, i32 3
  %383 = load i64, i64* %xhv_max481, align 8
  %add482 = add i64 %383, 1
  %arrayidx483 = getelementptr inbounds %struct.he*, %struct.he** %379, i64 %add482
  %384 = bitcast %struct.he** %arrayidx483 to %struct.xpvhv_aux*
  %xhv_name_count484 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %384, i32 0, i32 4
  %385 = load i32, i32* %xhv_name_count484, align 4
  %cmp485 = icmp slt i32 %385, -1
  br i1 %cmp485, label %cond.true487, label %cond.false497

cond.true487:                                     ; preds = %cond.false477
  %386 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_u488 = getelementptr inbounds %struct.sv, %struct.sv* %386, i32 0, i32 3
  %svu_hash489 = bitcast %union.anon* %sv_u488 to %struct.he***
  %387 = load %struct.he**, %struct.he*** %svu_hash489, align 8
  %388 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_any490 = getelementptr inbounds %struct.sv, %struct.sv* %388, i32 0, i32 0
  %389 = load i8*, i8** %sv_any490, align 8
  %390 = bitcast i8* %389 to %struct.xpvhv*
  %xhv_max491 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %390, i32 0, i32 3
  %391 = load i64, i64* %xhv_max491, align 8
  %add492 = add i64 %391, 1
  %arrayidx493 = getelementptr inbounds %struct.he*, %struct.he** %387, i64 %add492
  %392 = bitcast %struct.he** %arrayidx493 to %struct.xpvhv_aux*
  %xhv_name_u494 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %392, i32 0, i32 0
  %xhvnameu_names495 = bitcast %union._xhvnameu* %xhv_name_u494 to %struct.hek***
  %393 = load %struct.hek**, %struct.hek*** %xhvnameu_names495, align 8
  %arrayidx496 = getelementptr inbounds %struct.hek*, %struct.hek** %393, i64 1
  %394 = load %struct.hek*, %struct.hek** %arrayidx496, align 8
  br label %cond.end519

cond.false497:                                    ; preds = %cond.false477
  %395 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_u498 = getelementptr inbounds %struct.sv, %struct.sv* %395, i32 0, i32 3
  %svu_hash499 = bitcast %union.anon* %sv_u498 to %struct.he***
  %396 = load %struct.he**, %struct.he*** %svu_hash499, align 8
  %397 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_any500 = getelementptr inbounds %struct.sv, %struct.sv* %397, i32 0, i32 0
  %398 = load i8*, i8** %sv_any500, align 8
  %399 = bitcast i8* %398 to %struct.xpvhv*
  %xhv_max501 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %399, i32 0, i32 3
  %400 = load i64, i64* %xhv_max501, align 8
  %add502 = add i64 %400, 1
  %arrayidx503 = getelementptr inbounds %struct.he*, %struct.he** %396, i64 %add502
  %401 = bitcast %struct.he** %arrayidx503 to %struct.xpvhv_aux*
  %xhv_name_count504 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %401, i32 0, i32 4
  %402 = load i32, i32* %xhv_name_count504, align 4
  %cmp505 = icmp eq i32 %402, -1
  br i1 %cmp505, label %cond.true507, label %cond.false508

cond.true507:                                     ; preds = %cond.false497
  br label %cond.end517

cond.false508:                                    ; preds = %cond.false497
  %403 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_u509 = getelementptr inbounds %struct.sv, %struct.sv* %403, i32 0, i32 3
  %svu_hash510 = bitcast %union.anon* %sv_u509 to %struct.he***
  %404 = load %struct.he**, %struct.he*** %svu_hash510, align 8
  %405 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_any511 = getelementptr inbounds %struct.sv, %struct.sv* %405, i32 0, i32 0
  %406 = load i8*, i8** %sv_any511, align 8
  %407 = bitcast i8* %406 to %struct.xpvhv*
  %xhv_max512 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %407, i32 0, i32 3
  %408 = load i64, i64* %xhv_max512, align 8
  %add513 = add i64 %408, 1
  %arrayidx514 = getelementptr inbounds %struct.he*, %struct.he** %404, i64 %add513
  %409 = bitcast %struct.he** %arrayidx514 to %struct.xpvhv_aux*
  %xhv_name_u515 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %409, i32 0, i32 0
  %xhvnameu_name516 = bitcast %union._xhvnameu* %xhv_name_u515 to %struct.hek**
  %410 = load %struct.hek*, %struct.hek** %xhvnameu_name516, align 8
  br label %cond.end517

cond.end517:                                      ; preds = %cond.false508, %cond.true507
  %cond518 = phi %struct.hek* [ null, %cond.true507 ], [ %410, %cond.false508 ]
  br label %cond.end519

cond.end519:                                      ; preds = %cond.end517, %cond.true487
  %cond520 = phi %struct.hek* [ %394, %cond.true487 ], [ %cond518, %cond.end517 ]
  br label %cond.end521

cond.end521:                                      ; preds = %cond.end519, %cond.true467
  %cond522 = phi %struct.hek* [ %377, %cond.true467 ], [ %cond520, %cond.end519 ]
  %hek_key523 = getelementptr inbounds %struct.hek, %struct.hek* %cond522, i32 0, i32 2
  %arraydecay524 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key523, i64 0, i64 0
  %tobool525 = icmp ne i8* %arraydecay524, null
  br i1 %tobool525, label %if.then527, label %if.end528

cond.false526:                                    ; preds = %land.lhs.true447, %land.lhs.true437, %lor.lhs.false433
  br i1 false, label %if.then527, label %if.end528

if.then527:                                       ; preds = %cond.false526, %cond.end521, %land.lhs.true431
  %411 = load %struct.sv*, %struct.sv** %sref, align 8
  %412 = bitcast %struct.sv* %411 to %struct.hv*
  %413 = load %struct.sv*, %struct.sv** %dref, align 8
  %414 = bitcast %struct.sv* %413 to %struct.hv*
  %415 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %416 = bitcast %struct.sv* %415 to %struct.gv*
  call void @Perl_mro_package_moved(%struct.hv* %412, %struct.hv* %414, %struct.gv* %416, i32 0)
  br label %if.end528

if.end528:                                        ; preds = %if.then527, %cond.false526, %cond.end521, %land.lhs.true426, %lor.lhs.false423
  br label %if.end769

if.else529:                                       ; preds = %if.end398
  %417 = load i32, i32* %stype, align 4
  %cmp530 = icmp eq i32 %417, 11
  br i1 %cmp530, label %land.lhs.true532, label %if.else763

land.lhs.true532:                                 ; preds = %if.else529
  %418 = load %struct.sv*, %struct.sv** %sref, align 8
  %419 = load %struct.sv*, %struct.sv** %dref, align 8
  %cmp533 = icmp ne %struct.sv* %418, %419
  br i1 %cmp533, label %land.lhs.true535, label %if.else763

land.lhs.true535:                                 ; preds = %land.lhs.true532
  %420 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %421 = bitcast %struct.sv* %420 to %struct.gv*
  %sv_any536 = getelementptr inbounds %struct.gv, %struct.gv* %421, i32 0, i32 0
  %422 = load %struct.xpvgv*, %struct.xpvgv** %sv_any536, align 8
  %xiv_u537 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %422, i32 0, i32 4
  %xivu_namehek538 = bitcast %union._xivu* %xiv_u537 to %struct.hek**
  %423 = load %struct.hek*, %struct.hek** %xivu_namehek538, align 8
  %hek_key539 = getelementptr inbounds %struct.hek, %struct.hek* %423, i32 0, i32 2
  %arraydecay540 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key539, i64 0, i64 0
  %call541 = call i32 @strcmp(i8* %arraydecay540, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0)) #8
  %tobool542 = icmp ne i32 %call541, 0
  br i1 %tobool542, label %if.else763, label %land.lhs.true543

land.lhs.true543:                                 ; preds = %land.lhs.true535
  %424 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any544 = getelementptr inbounds %struct.sv, %struct.sv* %424, i32 0, i32 0
  %425 = load i8*, i8** %sv_any544, align 8
  %426 = bitcast i8* %425 to %struct.xpvgv*
  %xnv_u545 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %426, i32 0, i32 5
  %xgv_stash546 = bitcast %union._xnvu* %xnv_u545 to %struct.hv**
  %427 = load %struct.hv*, %struct.hv** %xgv_stash546, align 8
  %tobool547 = icmp ne %struct.hv* %427, null
  br i1 %tobool547, label %land.lhs.true548, label %if.else763

land.lhs.true548:                                 ; preds = %land.lhs.true543
  %428 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any549 = getelementptr inbounds %struct.sv, %struct.sv* %428, i32 0, i32 0
  %429 = load i8*, i8** %sv_any549, align 8
  %430 = bitcast i8* %429 to %struct.xpvgv*
  %xnv_u550 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %430, i32 0, i32 5
  %xgv_stash551 = bitcast %union._xnvu* %xnv_u550 to %struct.hv**
  %431 = load %struct.hv*, %struct.hv** %xgv_stash551, align 8
  %sv_flags552 = getelementptr inbounds %struct.hv, %struct.hv* %431, i32 0, i32 2
  %432 = load i32, i32* %sv_flags552, align 4
  %and553 = and i32 %432, 33554432
  %tobool554 = icmp ne i32 %and553, 0
  br i1 %tobool554, label %land.lhs.true555, label %cond.false692

land.lhs.true555:                                 ; preds = %land.lhs.true548
  %433 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any556 = getelementptr inbounds %struct.sv, %struct.sv* %433, i32 0, i32 0
  %434 = load i8*, i8** %sv_any556, align 8
  %435 = bitcast i8* %434 to %struct.xpvgv*
  %xnv_u557 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %435, i32 0, i32 5
  %xgv_stash558 = bitcast %union._xnvu* %xnv_u557 to %struct.hv**
  %436 = load %struct.hv*, %struct.hv** %xgv_stash558, align 8
  %sv_u559 = getelementptr inbounds %struct.hv, %struct.hv* %436, i32 0, i32 3
  %svu_hash560 = bitcast %union.anon.4* %sv_u559 to %struct.he***
  %437 = load %struct.he**, %struct.he*** %svu_hash560, align 8
  %438 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any561 = getelementptr inbounds %struct.sv, %struct.sv* %438, i32 0, i32 0
  %439 = load i8*, i8** %sv_any561, align 8
  %440 = bitcast i8* %439 to %struct.xpvgv*
  %xnv_u562 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %440, i32 0, i32 5
  %xgv_stash563 = bitcast %union._xnvu* %xnv_u562 to %struct.hv**
  %441 = load %struct.hv*, %struct.hv** %xgv_stash563, align 8
  %sv_any564 = getelementptr inbounds %struct.hv, %struct.hv* %441, i32 0, i32 0
  %442 = load %struct.xpvhv*, %struct.xpvhv** %sv_any564, align 8
  %xhv_max565 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %442, i32 0, i32 3
  %443 = load i64, i64* %xhv_max565, align 8
  %add566 = add i64 %443, 1
  %arrayidx567 = getelementptr inbounds %struct.he*, %struct.he** %437, i64 %add566
  %444 = bitcast %struct.he** %arrayidx567 to %struct.xpvhv_aux*
  %xhv_name_u568 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %444, i32 0, i32 0
  %xhvnameu_name569 = bitcast %union._xhvnameu* %xhv_name_u568 to %struct.hek**
  %445 = load %struct.hek*, %struct.hek** %xhvnameu_name569, align 8
  %tobool570 = icmp ne %struct.hek* %445, null
  br i1 %tobool570, label %land.lhs.true571, label %cond.false692

land.lhs.true571:                                 ; preds = %land.lhs.true555
  %446 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any572 = getelementptr inbounds %struct.sv, %struct.sv* %446, i32 0, i32 0
  %447 = load i8*, i8** %sv_any572, align 8
  %448 = bitcast i8* %447 to %struct.xpvgv*
  %xnv_u573 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %448, i32 0, i32 5
  %xgv_stash574 = bitcast %union._xnvu* %xnv_u573 to %struct.hv**
  %449 = load %struct.hv*, %struct.hv** %xgv_stash574, align 8
  %sv_u575 = getelementptr inbounds %struct.hv, %struct.hv* %449, i32 0, i32 3
  %svu_hash576 = bitcast %union.anon.4* %sv_u575 to %struct.he***
  %450 = load %struct.he**, %struct.he*** %svu_hash576, align 8
  %451 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any577 = getelementptr inbounds %struct.sv, %struct.sv* %451, i32 0, i32 0
  %452 = load i8*, i8** %sv_any577, align 8
  %453 = bitcast i8* %452 to %struct.xpvgv*
  %xnv_u578 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %453, i32 0, i32 5
  %xgv_stash579 = bitcast %union._xnvu* %xnv_u578 to %struct.hv**
  %454 = load %struct.hv*, %struct.hv** %xgv_stash579, align 8
  %sv_any580 = getelementptr inbounds %struct.hv, %struct.hv* %454, i32 0, i32 0
  %455 = load %struct.xpvhv*, %struct.xpvhv** %sv_any580, align 8
  %xhv_max581 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %455, i32 0, i32 3
  %456 = load i64, i64* %xhv_max581, align 8
  %add582 = add i64 %456, 1
  %arrayidx583 = getelementptr inbounds %struct.he*, %struct.he** %450, i64 %add582
  %457 = bitcast %struct.he** %arrayidx583 to %struct.xpvhv_aux*
  %xhv_name_count584 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %457, i32 0, i32 4
  %458 = load i32, i32* %xhv_name_count584, align 4
  %cmp585 = icmp ne i32 %458, -1
  br i1 %cmp585, label %cond.true587, label %cond.false692

cond.true587:                                     ; preds = %land.lhs.true571
  %459 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any588 = getelementptr inbounds %struct.sv, %struct.sv* %459, i32 0, i32 0
  %460 = load i8*, i8** %sv_any588, align 8
  %461 = bitcast i8* %460 to %struct.xpvgv*
  %xnv_u589 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %461, i32 0, i32 5
  %xgv_stash590 = bitcast %union._xnvu* %xnv_u589 to %struct.hv**
  %462 = load %struct.hv*, %struct.hv** %xgv_stash590, align 8
  %sv_u591 = getelementptr inbounds %struct.hv, %struct.hv* %462, i32 0, i32 3
  %svu_hash592 = bitcast %union.anon.4* %sv_u591 to %struct.he***
  %463 = load %struct.he**, %struct.he*** %svu_hash592, align 8
  %464 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any593 = getelementptr inbounds %struct.sv, %struct.sv* %464, i32 0, i32 0
  %465 = load i8*, i8** %sv_any593, align 8
  %466 = bitcast i8* %465 to %struct.xpvgv*
  %xnv_u594 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %466, i32 0, i32 5
  %xgv_stash595 = bitcast %union._xnvu* %xnv_u594 to %struct.hv**
  %467 = load %struct.hv*, %struct.hv** %xgv_stash595, align 8
  %sv_any596 = getelementptr inbounds %struct.hv, %struct.hv* %467, i32 0, i32 0
  %468 = load %struct.xpvhv*, %struct.xpvhv** %sv_any596, align 8
  %xhv_max597 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %468, i32 0, i32 3
  %469 = load i64, i64* %xhv_max597, align 8
  %add598 = add i64 %469, 1
  %arrayidx599 = getelementptr inbounds %struct.he*, %struct.he** %463, i64 %add598
  %470 = bitcast %struct.he** %arrayidx599 to %struct.xpvhv_aux*
  %xhv_name_count600 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %470, i32 0, i32 4
  %471 = load i32, i32* %xhv_name_count600, align 4
  %cmp601 = icmp sgt i32 %471, 0
  br i1 %cmp601, label %cond.true603, label %cond.false619

cond.true603:                                     ; preds = %cond.true587
  %472 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any604 = getelementptr inbounds %struct.sv, %struct.sv* %472, i32 0, i32 0
  %473 = load i8*, i8** %sv_any604, align 8
  %474 = bitcast i8* %473 to %struct.xpvgv*
  %xnv_u605 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %474, i32 0, i32 5
  %xgv_stash606 = bitcast %union._xnvu* %xnv_u605 to %struct.hv**
  %475 = load %struct.hv*, %struct.hv** %xgv_stash606, align 8
  %sv_u607 = getelementptr inbounds %struct.hv, %struct.hv* %475, i32 0, i32 3
  %svu_hash608 = bitcast %union.anon.4* %sv_u607 to %struct.he***
  %476 = load %struct.he**, %struct.he*** %svu_hash608, align 8
  %477 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any609 = getelementptr inbounds %struct.sv, %struct.sv* %477, i32 0, i32 0
  %478 = load i8*, i8** %sv_any609, align 8
  %479 = bitcast i8* %478 to %struct.xpvgv*
  %xnv_u610 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %479, i32 0, i32 5
  %xgv_stash611 = bitcast %union._xnvu* %xnv_u610 to %struct.hv**
  %480 = load %struct.hv*, %struct.hv** %xgv_stash611, align 8
  %sv_any612 = getelementptr inbounds %struct.hv, %struct.hv* %480, i32 0, i32 0
  %481 = load %struct.xpvhv*, %struct.xpvhv** %sv_any612, align 8
  %xhv_max613 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %481, i32 0, i32 3
  %482 = load i64, i64* %xhv_max613, align 8
  %add614 = add i64 %482, 1
  %arrayidx615 = getelementptr inbounds %struct.he*, %struct.he** %476, i64 %add614
  %483 = bitcast %struct.he** %arrayidx615 to %struct.xpvhv_aux*
  %xhv_name_u616 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %483, i32 0, i32 0
  %xhvnameu_names617 = bitcast %union._xhvnameu* %xhv_name_u616 to %struct.hek***
  %484 = load %struct.hek**, %struct.hek*** %xhvnameu_names617, align 8
  %arrayidx618 = getelementptr inbounds %struct.hek*, %struct.hek** %484, i64 0
  %485 = load %struct.hek*, %struct.hek** %arrayidx618, align 8
  br label %cond.end687

cond.false619:                                    ; preds = %cond.true587
  %486 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any620 = getelementptr inbounds %struct.sv, %struct.sv* %486, i32 0, i32 0
  %487 = load i8*, i8** %sv_any620, align 8
  %488 = bitcast i8* %487 to %struct.xpvgv*
  %xnv_u621 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %488, i32 0, i32 5
  %xgv_stash622 = bitcast %union._xnvu* %xnv_u621 to %struct.hv**
  %489 = load %struct.hv*, %struct.hv** %xgv_stash622, align 8
  %sv_u623 = getelementptr inbounds %struct.hv, %struct.hv* %489, i32 0, i32 3
  %svu_hash624 = bitcast %union.anon.4* %sv_u623 to %struct.he***
  %490 = load %struct.he**, %struct.he*** %svu_hash624, align 8
  %491 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any625 = getelementptr inbounds %struct.sv, %struct.sv* %491, i32 0, i32 0
  %492 = load i8*, i8** %sv_any625, align 8
  %493 = bitcast i8* %492 to %struct.xpvgv*
  %xnv_u626 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %493, i32 0, i32 5
  %xgv_stash627 = bitcast %union._xnvu* %xnv_u626 to %struct.hv**
  %494 = load %struct.hv*, %struct.hv** %xgv_stash627, align 8
  %sv_any628 = getelementptr inbounds %struct.hv, %struct.hv* %494, i32 0, i32 0
  %495 = load %struct.xpvhv*, %struct.xpvhv** %sv_any628, align 8
  %xhv_max629 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %495, i32 0, i32 3
  %496 = load i64, i64* %xhv_max629, align 8
  %add630 = add i64 %496, 1
  %arrayidx631 = getelementptr inbounds %struct.he*, %struct.he** %490, i64 %add630
  %497 = bitcast %struct.he** %arrayidx631 to %struct.xpvhv_aux*
  %xhv_name_count632 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %497, i32 0, i32 4
  %498 = load i32, i32* %xhv_name_count632, align 4
  %cmp633 = icmp slt i32 %498, -1
  br i1 %cmp633, label %cond.true635, label %cond.false651

cond.true635:                                     ; preds = %cond.false619
  %499 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any636 = getelementptr inbounds %struct.sv, %struct.sv* %499, i32 0, i32 0
  %500 = load i8*, i8** %sv_any636, align 8
  %501 = bitcast i8* %500 to %struct.xpvgv*
  %xnv_u637 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %501, i32 0, i32 5
  %xgv_stash638 = bitcast %union._xnvu* %xnv_u637 to %struct.hv**
  %502 = load %struct.hv*, %struct.hv** %xgv_stash638, align 8
  %sv_u639 = getelementptr inbounds %struct.hv, %struct.hv* %502, i32 0, i32 3
  %svu_hash640 = bitcast %union.anon.4* %sv_u639 to %struct.he***
  %503 = load %struct.he**, %struct.he*** %svu_hash640, align 8
  %504 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any641 = getelementptr inbounds %struct.sv, %struct.sv* %504, i32 0, i32 0
  %505 = load i8*, i8** %sv_any641, align 8
  %506 = bitcast i8* %505 to %struct.xpvgv*
  %xnv_u642 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %506, i32 0, i32 5
  %xgv_stash643 = bitcast %union._xnvu* %xnv_u642 to %struct.hv**
  %507 = load %struct.hv*, %struct.hv** %xgv_stash643, align 8
  %sv_any644 = getelementptr inbounds %struct.hv, %struct.hv* %507, i32 0, i32 0
  %508 = load %struct.xpvhv*, %struct.xpvhv** %sv_any644, align 8
  %xhv_max645 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %508, i32 0, i32 3
  %509 = load i64, i64* %xhv_max645, align 8
  %add646 = add i64 %509, 1
  %arrayidx647 = getelementptr inbounds %struct.he*, %struct.he** %503, i64 %add646
  %510 = bitcast %struct.he** %arrayidx647 to %struct.xpvhv_aux*
  %xhv_name_u648 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %510, i32 0, i32 0
  %xhvnameu_names649 = bitcast %union._xhvnameu* %xhv_name_u648 to %struct.hek***
  %511 = load %struct.hek**, %struct.hek*** %xhvnameu_names649, align 8
  %arrayidx650 = getelementptr inbounds %struct.hek*, %struct.hek** %511, i64 1
  %512 = load %struct.hek*, %struct.hek** %arrayidx650, align 8
  br label %cond.end685

cond.false651:                                    ; preds = %cond.false619
  %513 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any652 = getelementptr inbounds %struct.sv, %struct.sv* %513, i32 0, i32 0
  %514 = load i8*, i8** %sv_any652, align 8
  %515 = bitcast i8* %514 to %struct.xpvgv*
  %xnv_u653 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %515, i32 0, i32 5
  %xgv_stash654 = bitcast %union._xnvu* %xnv_u653 to %struct.hv**
  %516 = load %struct.hv*, %struct.hv** %xgv_stash654, align 8
  %sv_u655 = getelementptr inbounds %struct.hv, %struct.hv* %516, i32 0, i32 3
  %svu_hash656 = bitcast %union.anon.4* %sv_u655 to %struct.he***
  %517 = load %struct.he**, %struct.he*** %svu_hash656, align 8
  %518 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any657 = getelementptr inbounds %struct.sv, %struct.sv* %518, i32 0, i32 0
  %519 = load i8*, i8** %sv_any657, align 8
  %520 = bitcast i8* %519 to %struct.xpvgv*
  %xnv_u658 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %520, i32 0, i32 5
  %xgv_stash659 = bitcast %union._xnvu* %xnv_u658 to %struct.hv**
  %521 = load %struct.hv*, %struct.hv** %xgv_stash659, align 8
  %sv_any660 = getelementptr inbounds %struct.hv, %struct.hv* %521, i32 0, i32 0
  %522 = load %struct.xpvhv*, %struct.xpvhv** %sv_any660, align 8
  %xhv_max661 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %522, i32 0, i32 3
  %523 = load i64, i64* %xhv_max661, align 8
  %add662 = add i64 %523, 1
  %arrayidx663 = getelementptr inbounds %struct.he*, %struct.he** %517, i64 %add662
  %524 = bitcast %struct.he** %arrayidx663 to %struct.xpvhv_aux*
  %xhv_name_count664 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %524, i32 0, i32 4
  %525 = load i32, i32* %xhv_name_count664, align 4
  %cmp665 = icmp eq i32 %525, -1
  br i1 %cmp665, label %cond.true667, label %cond.false668

cond.true667:                                     ; preds = %cond.false651
  br label %cond.end683

cond.false668:                                    ; preds = %cond.false651
  %526 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any669 = getelementptr inbounds %struct.sv, %struct.sv* %526, i32 0, i32 0
  %527 = load i8*, i8** %sv_any669, align 8
  %528 = bitcast i8* %527 to %struct.xpvgv*
  %xnv_u670 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %528, i32 0, i32 5
  %xgv_stash671 = bitcast %union._xnvu* %xnv_u670 to %struct.hv**
  %529 = load %struct.hv*, %struct.hv** %xgv_stash671, align 8
  %sv_u672 = getelementptr inbounds %struct.hv, %struct.hv* %529, i32 0, i32 3
  %svu_hash673 = bitcast %union.anon.4* %sv_u672 to %struct.he***
  %530 = load %struct.he**, %struct.he*** %svu_hash673, align 8
  %531 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any674 = getelementptr inbounds %struct.sv, %struct.sv* %531, i32 0, i32 0
  %532 = load i8*, i8** %sv_any674, align 8
  %533 = bitcast i8* %532 to %struct.xpvgv*
  %xnv_u675 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %533, i32 0, i32 5
  %xgv_stash676 = bitcast %union._xnvu* %xnv_u675 to %struct.hv**
  %534 = load %struct.hv*, %struct.hv** %xgv_stash676, align 8
  %sv_any677 = getelementptr inbounds %struct.hv, %struct.hv* %534, i32 0, i32 0
  %535 = load %struct.xpvhv*, %struct.xpvhv** %sv_any677, align 8
  %xhv_max678 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %535, i32 0, i32 3
  %536 = load i64, i64* %xhv_max678, align 8
  %add679 = add i64 %536, 1
  %arrayidx680 = getelementptr inbounds %struct.he*, %struct.he** %530, i64 %add679
  %537 = bitcast %struct.he** %arrayidx680 to %struct.xpvhv_aux*
  %xhv_name_u681 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %537, i32 0, i32 0
  %xhvnameu_name682 = bitcast %union._xhvnameu* %xhv_name_u681 to %struct.hek**
  %538 = load %struct.hek*, %struct.hek** %xhvnameu_name682, align 8
  br label %cond.end683

cond.end683:                                      ; preds = %cond.false668, %cond.true667
  %cond684 = phi %struct.hek* [ null, %cond.true667 ], [ %538, %cond.false668 ]
  br label %cond.end685

cond.end685:                                      ; preds = %cond.end683, %cond.true635
  %cond686 = phi %struct.hek* [ %512, %cond.true635 ], [ %cond684, %cond.end683 ]
  br label %cond.end687

cond.end687:                                      ; preds = %cond.end685, %cond.true603
  %cond688 = phi %struct.hek* [ %485, %cond.true603 ], [ %cond686, %cond.end685 ]
  %hek_key689 = getelementptr inbounds %struct.hek, %struct.hek* %cond688, i32 0, i32 2
  %arraydecay690 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key689, i64 0, i64 0
  %tobool691 = icmp ne i8* %arraydecay690, null
  br i1 %tobool691, label %if.then693, label %if.else763

cond.false692:                                    ; preds = %land.lhs.true571, %land.lhs.true555, %land.lhs.true548
  br i1 false, label %if.then693, label %if.else763

if.then693:                                       ; preds = %cond.false692, %cond.end687
  %539 = load %struct.sv*, %struct.sv** %dref, align 8
  %tobool694 = icmp ne %struct.sv* %539, null
  br i1 %tobool694, label %land.lhs.true695, label %cond.false701

land.lhs.true695:                                 ; preds = %if.then693
  %540 = load %struct.sv*, %struct.sv** %dref, align 8
  %sv_flags696 = getelementptr inbounds %struct.sv, %struct.sv* %540, i32 0, i32 2
  %541 = load i32, i32* %sv_flags696, align 4
  %and697 = and i32 %541, 4194304
  %tobool698 = icmp ne i32 %and697, 0
  br i1 %tobool698, label %cond.true699, label %cond.false701

cond.true699:                                     ; preds = %land.lhs.true695
  %542 = load %struct.sv*, %struct.sv** %dref, align 8
  %call700 = call %struct.magic* @Perl_mg_find(%struct.sv* %542, i32 73)
  br label %cond.end702

cond.false701:                                    ; preds = %land.lhs.true695, %if.then693
  br label %cond.end702

cond.end702:                                      ; preds = %cond.false701, %cond.true699
  %cond703 = phi %struct.magic* [ %call700, %cond.true699 ], [ null, %cond.false701 ]
  store %struct.magic* %cond703, %struct.magic** %omg, align 8
  %543 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags704 = getelementptr inbounds %struct.sv, %struct.sv* %543, i32 0, i32 2
  %544 = load i32, i32* %sv_flags704, align 4
  %and705 = and i32 %544, 4194304
  %tobool706 = icmp ne i32 %and705, 0
  br i1 %tobool706, label %land.lhs.true707, label %if.else753

land.lhs.true707:                                 ; preds = %cond.end702
  %545 = load %struct.sv*, %struct.sv** %sref, align 8
  %call708 = call %struct.magic* @Perl_mg_find(%struct.sv* %545, i32 73)
  store %struct.magic* %call708, %struct.magic** %mg, align 8
  %tobool709 = icmp ne %struct.magic* %call708, null
  br i1 %tobool709, label %if.then710, label %if.else753

if.then710:                                       ; preds = %land.lhs.true707
  %546 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %546, i32 0, i32 6
  %547 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %sv_flags711 = getelementptr inbounds %struct.sv, %struct.sv* %547, i32 0, i32 2
  %548 = load i32, i32* %sv_flags711, align 4
  %and712 = and i32 %548, 255
  %cmp713 = icmp ne i32 %and712, 11
  br i1 %cmp713, label %if.then715, label %if.end719

if.then715:                                       ; preds = %if.then710
  %call716 = call %struct.sv* @Perl_newSV_type(i32 11)
  %549 = bitcast %struct.sv* %call716 to i8*
  %550 = bitcast i8* %549 to %struct.av*
  store %struct.av* %550, %struct.av** %ary, align 8
  %551 = load %struct.av*, %struct.av** %ary, align 8
  %552 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj717 = getelementptr inbounds %struct.magic, %struct.magic* %552, i32 0, i32 6
  %553 = load %struct.sv*, %struct.sv** %mg_obj717, align 8
  call void @Perl_av_push(%struct.av* %551, %struct.sv* %553)
  %554 = load %struct.av*, %struct.av** %ary, align 8
  %555 = bitcast %struct.av* %554 to %struct.sv*
  %556 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj718 = getelementptr inbounds %struct.magic, %struct.magic* %556, i32 0, i32 6
  store %struct.sv* %555, %struct.sv** %mg_obj718, align 8
  br label %if.end719

if.end719:                                        ; preds = %if.then715, %if.then710
  %557 = load %struct.magic*, %struct.magic** %omg, align 8
  %tobool720 = icmp ne %struct.magic* %557, null
  br i1 %tobool720, label %if.then721, label %if.else748

if.then721:                                       ; preds = %if.end719
  %558 = load %struct.magic*, %struct.magic** %omg, align 8
  %mg_obj722 = getelementptr inbounds %struct.magic, %struct.magic* %558, i32 0, i32 6
  %559 = load %struct.sv*, %struct.sv** %mg_obj722, align 8
  %sv_flags723 = getelementptr inbounds %struct.sv, %struct.sv* %559, i32 0, i32 2
  %560 = load i32, i32* %sv_flags723, align 4
  %and724 = and i32 %560, 255
  %cmp725 = icmp eq i32 %and724, 11
  br i1 %cmp725, label %if.then727, label %if.else741

if.then727:                                       ; preds = %if.then721
  %561 = load %struct.magic*, %struct.magic** %omg, align 8
  %mg_obj728 = getelementptr inbounds %struct.magic, %struct.magic* %561, i32 0, i32 6
  %562 = load %struct.sv*, %struct.sv** %mg_obj728, align 8
  %563 = bitcast %struct.sv* %562 to %struct.av*
  %sv_u729 = getelementptr inbounds %struct.av, %struct.av* %563, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u729 to %struct.sv***
  %564 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %564, %struct.sv*** %svp, align 8
  %565 = load %struct.magic*, %struct.magic** %omg, align 8
  %mg_obj730 = getelementptr inbounds %struct.magic, %struct.magic* %565, i32 0, i32 6
  %566 = load %struct.sv*, %struct.sv** %mg_obj730, align 8
  %567 = bitcast %struct.sv* %566 to %struct.av*
  %sv_any731 = getelementptr inbounds %struct.av, %struct.av* %567, i32 0, i32 0
  %568 = load %struct.xpvav*, %struct.xpvav** %sv_any731, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %568, i32 0, i32 2
  %569 = load i64, i64* %xav_fill, align 8
  %add732 = add nsw i64 %569, 1
  %conv733 = trunc i64 %add732 to i32
  store i32 %conv733, i32* %items, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then727
  %570 = load i32, i32* %items, align 4
  %dec734 = add nsw i32 %570, -1
  store i32 %dec734, i32* %items, align 4
  %tobool735 = icmp ne i32 %570, 0
  br i1 %tobool735, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %571 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj736 = getelementptr inbounds %struct.magic, %struct.magic* %571, i32 0, i32 6
  %572 = load %struct.sv*, %struct.sv** %mg_obj736, align 8
  %573 = bitcast %struct.sv* %572 to %struct.av*
  %574 = load %struct.sv**, %struct.sv*** %svp, align 8
  %incdec.ptr737 = getelementptr inbounds %struct.sv*, %struct.sv** %574, i32 1
  store %struct.sv** %incdec.ptr737, %struct.sv*** %svp, align 8
  %575 = load %struct.sv*, %struct.sv** %574, align 8
  %sv_refcnt738 = getelementptr inbounds %struct.sv, %struct.sv* %575, i32 0, i32 1
  %576 = load i32, i32* %sv_refcnt738, align 8
  %inc739 = add i32 %576, 1
  store i32 %inc739, i32* %sv_refcnt738, align 8
  %577 = load %struct.sv**, %struct.sv*** %svp, align 8
  %incdec.ptr740 = getelementptr inbounds %struct.sv*, %struct.sv** %577, i32 1
  store %struct.sv** %incdec.ptr740, %struct.sv*** %svp, align 8
  %578 = load %struct.sv*, %struct.sv** %577, align 8
  %579 = bitcast %struct.sv* %578 to i8*
  %580 = bitcast i8* %579 to %struct.sv*
  call void @Perl_av_push(%struct.av* %573, %struct.sv* %580)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end747

if.else741:                                       ; preds = %if.then721
  %581 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj742 = getelementptr inbounds %struct.magic, %struct.magic* %581, i32 0, i32 6
  %582 = load %struct.sv*, %struct.sv** %mg_obj742, align 8
  %583 = bitcast %struct.sv* %582 to %struct.av*
  %584 = load %struct.magic*, %struct.magic** %omg, align 8
  %mg_obj743 = getelementptr inbounds %struct.magic, %struct.magic* %584, i32 0, i32 6
  %585 = load %struct.sv*, %struct.sv** %mg_obj743, align 8
  %sv_refcnt744 = getelementptr inbounds %struct.sv, %struct.sv* %585, i32 0, i32 1
  %586 = load i32, i32* %sv_refcnt744, align 8
  %inc745 = add i32 %586, 1
  store i32 %inc745, i32* %sv_refcnt744, align 8
  %587 = load %struct.magic*, %struct.magic** %omg, align 8
  %mg_obj746 = getelementptr inbounds %struct.magic, %struct.magic* %587, i32 0, i32 6
  %588 = load %struct.sv*, %struct.sv** %mg_obj746, align 8
  %589 = bitcast %struct.sv* %588 to i8*
  %590 = bitcast i8* %589 to %struct.sv*
  call void @Perl_av_push(%struct.av* %583, %struct.sv* %590)
  br label %if.end747

if.end747:                                        ; preds = %if.else741, %while.end
  br label %if.end752

if.else748:                                       ; preds = %if.end719
  %591 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj749 = getelementptr inbounds %struct.magic, %struct.magic* %591, i32 0, i32 6
  %592 = load %struct.sv*, %struct.sv** %mg_obj749, align 8
  %593 = bitcast %struct.sv* %592 to %struct.av*
  %594 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_refcnt750 = getelementptr inbounds %struct.sv, %struct.sv* %594, i32 0, i32 1
  %595 = load i32, i32* %sv_refcnt750, align 8
  %inc751 = add i32 %595, 1
  store i32 %inc751, i32* %sv_refcnt750, align 8
  %596 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %597 = bitcast %struct.sv* %596 to i8*
  %598 = bitcast i8* %597 to %struct.sv*
  call void @Perl_av_push(%struct.av* %593, %struct.sv* %598)
  br label %if.end752

if.end752:                                        ; preds = %if.else748, %if.end747
  br label %if.end761

if.else753:                                       ; preds = %land.lhs.true707, %cond.end702
  %599 = load %struct.sv*, %struct.sv** %sref, align 8
  %600 = load %struct.magic*, %struct.magic** %omg, align 8
  %tobool754 = icmp ne %struct.magic* %600, null
  br i1 %tobool754, label %cond.true755, label %cond.false757

cond.true755:                                     ; preds = %if.else753
  %601 = load %struct.magic*, %struct.magic** %omg, align 8
  %mg_obj756 = getelementptr inbounds %struct.magic, %struct.magic* %601, i32 0, i32 6
  %602 = load %struct.sv*, %struct.sv** %mg_obj756, align 8
  br label %cond.end758

cond.false757:                                    ; preds = %if.else753
  %603 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  br label %cond.end758

cond.end758:                                      ; preds = %cond.false757, %cond.true755
  %cond759 = phi %struct.sv* [ %602, %cond.true755 ], [ %603, %cond.false757 ]
  call void @Perl_sv_magic(%struct.sv* %599, %struct.sv* %cond759, i32 73, i8* null, i32 0)
  %604 = load %struct.sv*, %struct.sv** %sref, align 8
  %call760 = call %struct.magic* @Perl_mg_find(%struct.sv* %604, i32 73)
  store %struct.magic* %call760, %struct.magic** %mg, align 8
  br label %if.end761

if.end761:                                        ; preds = %cond.end758, %if.end752
  %605 = load %struct.magic*, %struct.magic** %mg, align 8
  %call762 = call i32 @Perl_magic_clearisa(%struct.sv* null, %struct.magic* %605)
  br label %if.end768

if.else763:                                       ; preds = %cond.false692, %cond.end687, %land.lhs.true543, %land.lhs.true535, %land.lhs.true532, %if.else529
  %606 = load i32, i32* %stype, align 4
  %cmp764 = icmp eq i32 %606, 15
  br i1 %cmp764, label %if.then766, label %if.end767

if.then766:                                       ; preds = %if.else763
  %607 = load %struct.hv*, %struct.hv** @PL_stashcache, align 8
  call void @Perl_hv_clear(%struct.hv* %607)
  br label %if.end767

if.end767:                                        ; preds = %if.then766, %if.else763
  br label %if.end768

if.end768:                                        ; preds = %if.end767, %if.end761
  br label %if.end769

if.end769:                                        ; preds = %if.end768, %if.end528
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end769
  %608 = load i32, i32* %intro, align 4
  %tobool770 = icmp ne i32 %608, 0
  br i1 %tobool770, label %if.end772, label %if.then771

if.then771:                                       ; preds = %sw.epilog
  %609 = load %struct.sv*, %struct.sv** %dref, align 8
  %610 = bitcast %struct.sv* %609 to i8*
  %611 = bitcast i8* %610 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %611)
  br label %if.end772

if.end772:                                        ; preds = %if.then771, %sw.epilog
  %612 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags773 = getelementptr inbounds %struct.sv, %struct.sv* %612, i32 0, i32 2
  %613 = load i32, i32* %sv_flags773, align 4
  %and774 = and i32 %613, 14680064
  %tobool775 = icmp ne i32 %and774, 0
  br i1 %tobool775, label %land.lhs.true776, label %if.end800

land.lhs.true776:                                 ; preds = %if.end772
  %614 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call777 = call zeroext i1 @Perl_sv_tainted(%struct.sv* %614)
  br i1 %call777, label %if.then779, label %if.end800

if.then779:                                       ; preds = %land.lhs.true776
  br label %do.body

do.body:                                          ; preds = %if.then779
  %615 = load i8, i8* @PL_tainting, align 1
  %tobool780 = trunc i8 %615 to i1
  br i1 %tobool780, label %cond.true782, label %cond.false783

cond.true782:                                     ; preds = %do.body
  br i1 true, label %if.then784, label %if.end798

cond.false783:                                    ; preds = %do.body
  br i1 false, label %if.then784, label %if.end798

if.then784:                                       ; preds = %cond.false783, %cond.true782
  %616 = load i8, i8* @PL_tainted, align 1
  %tobool785 = trunc i8 %616 to i1
  br i1 %tobool785, label %cond.true787, label %cond.false788

cond.true787:                                     ; preds = %if.then784
  br i1 true, label %if.then789, label %if.end797

cond.false788:                                    ; preds = %if.then784
  br i1 false, label %if.then789, label %if.end797

if.then789:                                       ; preds = %cond.false788, %cond.true787
  br label %do.body790

do.body790:                                       ; preds = %if.then789
  %617 = load i8, i8* @PL_tainting, align 1
  %tobool791 = trunc i8 %617 to i1
  br i1 %tobool791, label %cond.true793, label %cond.false794

cond.true793:                                     ; preds = %do.body790
  br i1 true, label %if.then795, label %if.end796

cond.false794:                                    ; preds = %do.body790
  br i1 false, label %if.then795, label %if.end796

if.then795:                                       ; preds = %cond.false794, %cond.true793
  %618 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %618, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end796

if.end796:                                        ; preds = %if.then795, %cond.false794, %cond.true793
  br label %do.end

do.end:                                           ; preds = %if.end796
  br label %if.end797

if.end797:                                        ; preds = %do.end, %cond.false788, %cond.true787
  br label %if.end798

if.end798:                                        ; preds = %if.end797, %cond.false783, %cond.true782
  br label %do.end799

do.end799:                                        ; preds = %if.end798
  br label %if.end800

if.end800:                                        ; preds = %do.end799, %land.lhs.true776, %if.end772
  ret void
}

declare dso_local void @Perl_savestack_grow() #1

declare dso_local void @Perl_save_generic_svref(%struct.sv**) #1

declare dso_local %struct.sv* @Perl_cv_const_sv(%struct.cv*) #1

declare dso_local void @Perl_report_redefined_cv(%struct.sv*, %struct.cv*, %struct.sv**) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSVpvf(i8* %pat, ...) #0 {
entry:
  %pat.addr = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %pat, i8** %pat.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load i8*, i8** %pat.addr, align 8
  %call = call %struct.sv* @Perl_vnewSVpvf(i8* %0, [1 x %struct.__va_list_tag]* %args)
  store %struct.sv* %call, %struct.sv** %sv, align 8
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay23 = bitcast %struct.__va_list_tag* %arraydecay2 to i8*
  call void @llvm.va_end(i8* %arraydecay23)
  %1 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %1
}

declare dso_local void @Perl_cv_ckproto_len_flags(%struct.cv*, %struct.gv*, i8*, i64, i32) #1

declare dso_local void @Perl_mro_method_changed_in(%struct.hv*) #1

declare dso_local void @Perl_save_aliased_sv(%struct.gv*) #1

declare dso_local void @Perl_mro_package_moved(%struct.hv*, %struct.hv*, %struct.gv*, i32) #1

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSV_type(i32 %type) #0 {
entry:
  %type.addr = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  store i32 %type, i32* %type.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %if.end

if.else:                                          ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  store i8* null, i8** %sv_any2, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end3

do.end3:                                          ; preds = %if.end
  %9 = load i32, i32* %type.addr, align 4
  %cmp = icmp ne i32 %9, 0
  br i1 %cmp, label %if.then4, label %if.end5

if.then4:                                         ; preds = %do.end3
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  %11 = load i32, i32* %type.addr, align 4
  call void @Perl_sv_upgrade(%struct.sv* %10, i32 %11)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %do.end3
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %12
}

declare dso_local void @Perl_av_push(%struct.av*, %struct.sv*) #1

declare dso_local i32 @Perl_magic_clearisa(%struct.sv*, %struct.magic*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setsv_flags(%struct.sv* %dstr, %struct.sv* %sstr, i32 %flags) #0 {
entry:
  %dstr.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %sflags = alloca i32, align 4
  %dtype = alloca i32, align 4
  %stype = alloca i32, align 4
  %type = alloca i8*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  %zok = alloca i64, align 8
  %len = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %type353 = alloca i8*, align 8
  %coerce365 = alloca %union.XOPRETANY, align 8
  %zok486 = alloca i64, align 8
  %gv = alloca %struct.gv*, align 8
  %name = alloca i8*, align 8
  %len581 = alloca i64, align 8
  %old_stash = alloca %struct.hv*, align 8
  %reset_isa = alloca i8, align 1
  %stash = alloca %struct.hv*, align 8
  %cur = alloca i64, align 8
  %len761 = alloca i64, align 8
  %zok817 = alloca i64, align 8
  %zok1010 = alloca i64, align 8
  %smg = alloca %struct.magic*, align 8
  store %struct.sv* %dstr, %struct.sv** %dstr.addr, align 8
  store %struct.sv* %sstr, %struct.sv** %sstr.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %cmp = icmp eq %struct.sv* %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  br label %if.end1287

if.end:                                           ; preds = %cond.false, %cond.true
  %2 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %cmp1 = icmp eq i32 %3, 255
  br i1 %cmp1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %if.end
  br i1 true, label %if.then4, label %if.end5

cond.false3:                                      ; preds = %if.end
  br i1 false, label %if.then4, label %if.end5

if.then4:                                         ; preds = %cond.false3, %cond.true2
  %4 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %5 = bitcast %struct.sv* %4 to i8*
  %6 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %7 = bitcast %struct.sv* %6 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.15, i64 0, i64 0), i8* %5, i8* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %cond.false3, %cond.true2
  %8 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags6, align 4
  %and = and i32 %9, 427886592
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end5
  %10 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %10, i32 4)
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end5
  %11 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %tobool9 = icmp ne %struct.sv* %11, null
  br i1 %tobool9, label %cond.false11, label %cond.true10

cond.true10:                                      ; preds = %if.end8
  br i1 true, label %if.then12, label %if.end13

cond.false11:                                     ; preds = %if.end8
  br i1 false, label %if.then12, label %if.end13

if.then12:                                        ; preds = %cond.false11, %cond.true10
  store %struct.sv* @PL_sv_undef, %struct.sv** %sstr.addr, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %cond.false11, %cond.true10
  %12 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags14, align 4
  %cmp15 = icmp eq i32 %13, 255
  br i1 %cmp15, label %cond.true16, label %cond.false17

cond.true16:                                      ; preds = %if.end13
  br i1 true, label %if.then18, label %if.end19

cond.false17:                                     ; preds = %if.end13
  br i1 false, label %if.then18, label %if.end19

if.then18:                                        ; preds = %cond.false17, %cond.true16
  %14 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %15 = bitcast %struct.sv* %14 to i8*
  %16 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %17 = bitcast %struct.sv* %16 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.16, i64 0, i64 0), i8* %15, i8* %17)
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %cond.false17, %cond.true16
  %18 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %19, 255
  store i32 %and21, i32* %stype, align 4
  %20 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %21, 255
  store i32 %and23, i32* %dtype, align 4
  %22 = load i32, i32* %stype, align 4
  switch i32 %22, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb36
    i32 2, label %sw.bb79
    i32 3, label %sw.bb109
    i32 5, label %sw.bb113
    i32 6, label %sw.bb117
    i32 8, label %sw.bb133
    i32 4, label %sw.bb196
    i32 10, label %sw.bb196
    i32 9, label %sw.bb196
    i32 7, label %sw.bb196
  ]

sw.bb:                                            ; preds = %if.end19
  br label %undef_sstr

undef_sstr:                                       ; preds = %if.end108, %if.then72, %sw.bb
  %23 = load i32, i32* %dtype, align 4
  %cmp24 = icmp ne i32 %23, 9
  br i1 %cmp24, label %land.lhs.true, label %cond.false27

land.lhs.true:                                    ; preds = %undef_sstr
  %24 = load i32, i32* %dtype, align 4
  %cmp25 = icmp ne i32 %24, 10
  br i1 %cmp25, label %cond.true26, label %cond.false27

cond.true26:                                      ; preds = %land.lhs.true
  br i1 true, label %if.then28, label %if.end35

cond.false27:                                     ; preds = %land.lhs.true, %undef_sstr
  br i1 false, label %if.then28, label %if.end35

if.then28:                                        ; preds = %cond.false27, %cond.true26
  %25 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %26, 1610547455
  store i32 %and30, i32* %sv_flags29, align 4
  %27 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %28, 33554432
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then28
  %29 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call = call i32 @Perl_sv_backoff(%struct.sv* %29)
  %tobool34 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then28
  %30 = phi i1 [ false, %if.then28 ], [ %tobool34, %land.rhs ]
  %land.ext = zext i1 %30 to i32
  br label %if.end1287

if.end35:                                         ; preds = %cond.false27, %cond.true26
  br label %sw.epilog259

sw.bb36:                                          ; preds = %if.end19
  %31 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %32, 256
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.then40, label %if.end68

if.then40:                                        ; preds = %sw.bb36
  %33 = load i32, i32* %dtype, align 4
  switch i32 %33, label %sw.epilog [
    i32 0, label %sw.bb41
    i32 2, label %sw.bb43
    i32 3, label %sw.bb43
    i32 9, label %sw.bb44
    i32 10, label %sw.bb44
  ]

sw.bb41:                                          ; preds = %if.then40
  %34 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 3
  %svu_iv = bitcast %union.anon* %sv_u to i64*
  %35 = bitcast i64* %svu_iv to i8*
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 sub (i64 0, i64 ptrtoint (i64* getelementptr inbounds (%struct.xpviv, %struct.xpviv* null, i32 0, i32 4, i32 0) to i64))
  %36 = bitcast i8* %add.ptr to %struct.xpviv*
  %37 = bitcast %struct.xpviv* %36 to i8*
  %38 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  store i8* %37, i8** %sv_any, align 8
  %39 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags42, align 4
  %or = or i32 %40, 1
  store i32 %or, i32* %sv_flags42, align 4
  br label %sw.epilog

sw.bb43:                                          ; preds = %if.then40, %if.then40
  %41 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %41, i32 5)
  br label %sw.epilog

sw.bb44:                                          ; preds = %if.then40, %if.then40
  br label %end_of_first_switch

sw.epilog:                                        ; preds = %if.then40, %sw.bb43, %sw.bb41
  %42 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %43, 1610547455
  store i32 %and46, i32* %sv_flags45, align 4
  %44 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags47 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %45, 33554432
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %land.rhs50, label %land.end53

land.rhs50:                                       ; preds = %sw.epilog
  %46 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call51 = call i32 @Perl_sv_backoff(%struct.sv* %46)
  %tobool52 = icmp ne i32 %call51, 0
  br label %land.end53

land.end53:                                       ; preds = %land.rhs50, %sw.epilog
  %47 = phi i1 [ false, %sw.epilog ], [ %tobool52, %land.rhs50 ]
  %land.ext54 = zext i1 %47 to i32
  %48 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags55 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags55, align 4
  %or56 = or i32 %49, 4352
  store i32 %or56, i32* %sv_flags55, align 4
  br label %do.body

do.body:                                          ; preds = %land.end53
  %50 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any57 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any57, align 8
  %52 = bitcast i8* %51 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %52, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %53 = load i64, i64* %xivu_iv, align 8
  %54 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any58 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any58, align 8
  %56 = bitcast i8* %55 to %struct.xpviv*
  %xiv_u59 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %56, i32 0, i32 4
  %xivu_iv60 = bitcast %union._xivu* %xiv_u59 to i64*
  store i64 %53, i64* %xivu_iv60, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %57 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %58, -2147483648
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %if.then64, label %if.end67

if.then64:                                        ; preds = %do.end
  %59 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags65, align 4
  %or66 = or i32 %60, -2147483648
  store i32 %or66, i32* %sv_flags65, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.then64, %do.end
  br label %if.end1287

if.end68:                                         ; preds = %sw.bb36
  %61 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %62, 2048
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %if.end73, label %if.then72

if.then72:                                        ; preds = %if.end68
  br label %undef_sstr

if.end73:                                         ; preds = %if.end68
  %63 = load i32, i32* %dtype, align 4
  %cmp74 = icmp slt i32 %63, 3
  br i1 %cmp74, label %land.lhs.true75, label %if.end78

land.lhs.true75:                                  ; preds = %if.end73
  %64 = load i32, i32* %dtype, align 4
  %cmp76 = icmp ne i32 %64, 1
  br i1 %cmp76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %land.lhs.true75
  %65 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %65, i32 1)
  br label %if.end78

if.end78:                                         ; preds = %if.then77, %land.lhs.true75, %if.end73
  br label %sw.epilog259

sw.bb79:                                          ; preds = %if.end19
  %66 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags80 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags80, align 4
  %and81 = and i32 %67, 512
  %tobool82 = icmp ne i32 %and81, 0
  br i1 %tobool82, label %cond.true83, label %cond.false84

cond.true83:                                      ; preds = %sw.bb79
  br i1 true, label %if.then85, label %if.end108

cond.false84:                                     ; preds = %sw.bb79
  br i1 false, label %if.then85, label %if.end108

if.then85:                                        ; preds = %cond.false84, %cond.true83
  %68 = load i32, i32* %dtype, align 4
  switch i32 %68, label %sw.epilog89 [
    i32 0, label %sw.bb86
    i32 1, label %sw.bb86
    i32 3, label %sw.bb87
    i32 5, label %sw.bb87
    i32 9, label %sw.bb88
    i32 10, label %sw.bb88
  ]

sw.bb86:                                          ; preds = %if.then85, %if.then85
  %69 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %69, i32 2)
  br label %sw.epilog89

sw.bb87:                                          ; preds = %if.then85, %if.then85
  %70 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %70, i32 6)
  br label %sw.epilog89

sw.bb88:                                          ; preds = %if.then85, %if.then85
  br label %end_of_first_switch

sw.epilog89:                                      ; preds = %if.then85, %sw.bb87, %sw.bb86
  br label %do.body90

do.body90:                                        ; preds = %sw.epilog89
  %71 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any91 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any91, align 8
  %73 = bitcast i8* %72 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %73, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %74 = load double, double* %xnv_nv, align 8
  %75 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any92 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 0
  %76 = load i8*, i8** %sv_any92, align 8
  %77 = bitcast i8* %76 to %struct.xpvnv*
  %xnv_u93 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %77, i32 0, i32 5
  %xnv_nv94 = bitcast %union._xnvu* %xnv_u93 to double*
  store double %74, double* %xnv_nv94, align 8
  br label %do.end95

do.end95:                                         ; preds = %do.body90
  %78 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags96 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags96, align 4
  %and97 = and i32 %79, 1610547455
  store i32 %and97, i32* %sv_flags96, align 4
  %80 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags98 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags98, align 4
  %and99 = and i32 %81, 33554432
  %tobool100 = icmp ne i32 %and99, 0
  br i1 %tobool100, label %land.rhs101, label %land.end104

land.rhs101:                                      ; preds = %do.end95
  %82 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call102 = call i32 @Perl_sv_backoff(%struct.sv* %82)
  %tobool103 = icmp ne i32 %call102, 0
  br label %land.end104

land.end104:                                      ; preds = %land.rhs101, %do.end95
  %83 = phi i1 [ false, %do.end95 ], [ %tobool103, %land.rhs101 ]
  %land.ext105 = zext i1 %83 to i32
  %84 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags106 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags106, align 4
  %or107 = or i32 %85, 8704
  store i32 %or107, i32* %sv_flags106, align 4
  br label %if.end1287

if.end108:                                        ; preds = %cond.false84, %cond.true83
  br label %undef_sstr

sw.bb109:                                         ; preds = %if.end19
  %86 = load i32, i32* %dtype, align 4
  %cmp110 = icmp slt i32 %86, 3
  br i1 %cmp110, label %if.then111, label %if.end112

if.then111:                                       ; preds = %sw.bb109
  %87 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %87, i32 3)
  br label %if.end112

if.end112:                                        ; preds = %if.then111, %sw.bb109
  br label %sw.epilog259

sw.bb113:                                         ; preds = %if.end19
  %88 = load i32, i32* %dtype, align 4
  %cmp114 = icmp slt i32 %88, 5
  br i1 %cmp114, label %if.then115, label %if.end116

if.then115:                                       ; preds = %sw.bb113
  %89 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %89, i32 5)
  br label %if.end116

if.end116:                                        ; preds = %if.then115, %sw.bb113
  br label %sw.epilog259

sw.bb117:                                         ; preds = %if.end19
  %90 = load i32, i32* %dtype, align 4
  %cmp118 = icmp slt i32 %90, 6
  br i1 %cmp118, label %if.then119, label %if.end120

if.then119:                                       ; preds = %sw.bb117
  %91 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %91, i32 6)
  br label %if.end120

if.end120:                                        ; preds = %if.then119, %sw.bb117
  br label %sw.epilog259

sw.default:                                       ; preds = %if.end19
  %92 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call121 = call i8* @Perl_sv_reftype(%struct.sv* %92, i32 0)
  store i8* %call121, i8** %type, align 8
  %93 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool122 = icmp ne %struct.op* %93, null
  br i1 %tobool122, label %if.then123, label %if.else

if.then123:                                       ; preds = %sw.default
  %94 = load i8*, i8** %type, align 8
  %95 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %95, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp124 = icmp eq i32 %bf.cast, 380
  br i1 %cmp124, label %cond.true125, label %cond.false127

cond.true125:                                     ; preds = %if.then123
  %96 = load %struct.op*, %struct.op** @PL_op, align 8
  %call126 = call i8* @Perl_custom_op_get_field(%struct.op* %96, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call126, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %97 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false127:                                    ; preds = %if.then123
  %98 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type128 = getelementptr inbounds %struct.op, %struct.op* %98, i32 0, i32 4
  %bf.load129 = load i16, i16* %op_type128, align 8
  %bf.clear130 = and i16 %bf.load129, 511
  %bf.cast131 = zext i16 %bf.clear130 to i32
  %idxprom = zext i32 %bf.cast131 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %99 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false127, %cond.true125
  %cond = phi i8* [ %97, %cond.true125 ], [ %99, %cond.false127 ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i64 0, i64 0), i8* %94, i8* %cond)
  br label %if.end132

if.else:                                          ; preds = %sw.default
  %100 = load i8*, i8** %type, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.18, i64 0, i64 0), i8* %100)
  br label %if.end132

if.end132:                                        ; preds = %if.else, %cond.end
  br label %sw.bb133

sw.bb133:                                         ; preds = %if.end19, %if.end132
  br label %upgregexp

upgregexp:                                        ; preds = %if.then244, %sw.bb133
  %101 = load i32, i32* %dtype, align 4
  %cmp134 = icmp slt i32 %101, 8
  br i1 %cmp134, label %if.then135, label %if.end195

if.then135:                                       ; preds = %upgregexp
  %102 = load i32, i32* %dtype, align 4
  %cmp136 = icmp sge i32 %102, 3
  br i1 %cmp136, label %if.then137, label %if.end194

if.then137:                                       ; preds = %if.then135
  br label %do.body138

do.body138:                                       ; preds = %if.then137
  %103 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any139 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 0
  %104 = load i8*, i8** %sv_any139, align 8
  %105 = bitcast i8* %104 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %105, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %106 = load i64, i64* %xpvlenu_len, align 8
  %tobool140 = icmp ne i64 %106, 0
  br i1 %tobool140, label %if.then141, label %if.end180

if.then141:                                       ; preds = %do.body138
  %107 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags142 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 2
  %108 = load i32, i32* %sv_flags142, align 4
  %and143 = and i32 %108, 33554432
  %tobool144 = icmp ne i32 %and143, 0
  br i1 %tobool144, label %cond.true145, label %cond.false146

cond.true145:                                     ; preds = %if.then141
  br i1 true, label %if.then147, label %if.end177

cond.false146:                                    ; preds = %if.then141
  br i1 false, label %if.then147, label %if.end177

if.then147:                                       ; preds = %cond.false146, %cond.true145
  br label %do.body148

do.body148:                                       ; preds = %if.then147
  %109 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags149 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 2
  %110 = load i32, i32* %sv_flags149, align 4
  %and150 = and i32 %110, 33554432
  %tobool151 = icmp ne i32 %and150, 0
  br i1 %tobool151, label %if.then152, label %if.else164

if.then152:                                       ; preds = %do.body148
  %111 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u153 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u153 to i8**
  %112 = load i8*, i8** %svu_pv, align 8
  %add.ptr154 = getelementptr inbounds i8, i8* %112, i64 0
  %arrayidx155 = getelementptr inbounds i8, i8* %add.ptr154, i64 -1
  %113 = load i8, i8* %arrayidx155, align 1
  %conv = zext i8 %113 to i64
  store i64 %conv, i64* %zok, align 8
  %114 = load i64, i64* %zok, align 8
  %tobool156 = icmp ne i64 %114, 0
  br i1 %tobool156, label %if.end163, label %if.then157

if.then157:                                       ; preds = %if.then152
  %115 = bitcast i64* %zok to i8*
  %116 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u158 = getelementptr inbounds %struct.sv, %struct.sv* %116, i32 0, i32 3
  %svu_pv159 = bitcast %union.anon* %sv_u158 to i8**
  %117 = load i8*, i8** %svu_pv159, align 8
  %add.ptr160 = getelementptr inbounds i8, i8* %117, i64 0
  %add.ptr161 = getelementptr inbounds i8, i8* %add.ptr160, i64 -1
  %add.ptr162 = getelementptr inbounds i8, i8* %add.ptr161, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 1 %add.ptr162, i64 8, i1 false)
  br label %if.end163

if.end163:                                        ; preds = %if.then157, %if.then152
  br label %if.end165

if.else164:                                       ; preds = %do.body148
  store i64 0, i64* %zok, align 8
  br label %if.end165

if.end165:                                        ; preds = %if.else164, %if.end163
  br label %do.end166

do.end166:                                        ; preds = %if.end165
  br label %do.body167

do.body167:                                       ; preds = %do.end166
  %118 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u168 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 3
  %svu_pv169 = bitcast %union.anon* %sv_u168 to i8**
  %119 = load i8*, i8** %svu_pv169, align 8
  %add.ptr170 = getelementptr inbounds i8, i8* %119, i64 0
  %120 = load i64, i64* %zok, align 8
  %idx.neg = sub i64 0, %120
  %add.ptr171 = getelementptr inbounds i8, i8* %add.ptr170, i64 %idx.neg
  %121 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u172 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 3
  %svu_pv173 = bitcast %union.anon* %sv_u172 to i8**
  store i8* %add.ptr171, i8** %svu_pv173, align 8
  br label %do.end174

do.end174:                                        ; preds = %do.body167
  %122 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags175 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 2
  %123 = load i32, i32* %sv_flags175, align 4
  %and176 = and i32 %123, -33554433
  store i32 %and176, i32* %sv_flags175, align 4
  br label %if.end177

if.end177:                                        ; preds = %do.end174, %cond.false146, %cond.true145
  %124 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u178 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 3
  %svu_pv179 = bitcast %union.anon* %sv_u178 to i8**
  %125 = load i8*, i8** %svu_pv179, align 8
  call void @Perl_safesysfree(i8* %125)
  br label %if.end180

if.end180:                                        ; preds = %if.end177, %do.body138
  br label %do.end181

do.end181:                                        ; preds = %if.end180
  br label %do.body182

do.body182:                                       ; preds = %do.end181
  %126 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u183 = getelementptr inbounds %struct.sv, %struct.sv* %126, i32 0, i32 3
  %svu_pv184 = bitcast %union.anon* %sv_u183 to i8**
  store i8* null, i8** %svu_pv184, align 8
  br label %do.end185

do.end185:                                        ; preds = %do.body182
  br label %do.body186

do.body186:                                       ; preds = %do.end185
  %127 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any187 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 0
  %128 = load i8*, i8** %sv_any187, align 8
  %129 = bitcast i8* %128 to %struct.xpv*
  %xpv_len_u188 = getelementptr inbounds %struct.xpv, %struct.xpv* %129, i32 0, i32 3
  %xpvlenu_len189 = bitcast %union.anon.19* %xpv_len_u188 to i64*
  store i64 0, i64* %xpvlenu_len189, align 8
  br label %do.end190

do.end190:                                        ; preds = %do.body186
  br label %do.body191

do.body191:                                       ; preds = %do.end190
  %130 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any192 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 0
  %131 = load i8*, i8** %sv_any192, align 8
  %132 = bitcast i8* %131 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %132, i32 0, i32 2
  store i64 0, i64* %xpv_cur, align 8
  br label %do.end193

do.end193:                                        ; preds = %do.body191
  br label %if.end194

if.end194:                                        ; preds = %do.end193, %if.then135
  %133 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %133, i32 8)
  br label %if.end195

if.end195:                                        ; preds = %if.end194, %upgregexp
  br label %sw.epilog259

sw.bb196:                                         ; preds = %if.end19, %if.end19, %if.end19, %if.end19
  %134 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags197 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 2
  %135 = load i32, i32* %sv_flags197, align 4
  %and198 = and i32 %135, 2097152
  %tobool199 = icmp ne i32 %and198, 0
  br i1 %tobool199, label %land.lhs.true200, label %if.end213

land.lhs.true200:                                 ; preds = %sw.bb196
  %136 = load i32, i32* %flags.addr, align 4
  %and201 = and i32 %136, 2
  %tobool202 = icmp ne i32 %and201, 0
  br i1 %tobool202, label %if.then203, label %if.end213

if.then203:                                       ; preds = %land.lhs.true200
  %137 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call204 = call i32 @Perl_mg_get(%struct.sv* %137)
  %138 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags205 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 2
  %139 = load i32, i32* %sv_flags205, align 4
  %and206 = and i32 %139, 255
  %140 = load i32, i32* %stype, align 4
  %cmp207 = icmp ne i32 %and206, %140
  br i1 %cmp207, label %if.then209, label %if.end212

if.then209:                                       ; preds = %if.then203
  %141 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags210 = getelementptr inbounds %struct.sv, %struct.sv* %141, i32 0, i32 2
  %142 = load i32, i32* %sv_flags210, align 4
  %and211 = and i32 %142, 255
  store i32 %and211, i32* %stype, align 4
  br label %if.end212

if.end212:                                        ; preds = %if.then209, %if.then203
  br label %if.end213

if.end213:                                        ; preds = %if.end212, %land.lhs.true200, %sw.bb196
  %143 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags214 = getelementptr inbounds %struct.sv, %struct.sv* %143, i32 0, i32 2
  %144 = load i32, i32* %sv_flags214, align 4
  %and215 = and i32 %144, 49152
  %cmp216 = icmp eq i32 %and215, 32768
  br i1 %cmp216, label %land.lhs.true218, label %if.end231

land.lhs.true218:                                 ; preds = %if.end213
  %145 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags219 = getelementptr inbounds %struct.sv, %struct.sv* %145, i32 0, i32 2
  %146 = load i32, i32* %sv_flags219, align 4
  %and220 = and i32 %146, 255
  %cmp221 = icmp eq i32 %and220, 9
  br i1 %cmp221, label %land.lhs.true227, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true218
  %147 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags223 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 2
  %148 = load i32, i32* %sv_flags223, align 4
  %and224 = and i32 %148, 255
  %cmp225 = icmp eq i32 %and224, 10
  br i1 %cmp225, label %land.lhs.true227, label %if.end231

land.lhs.true227:                                 ; preds = %lor.lhs.false, %land.lhs.true218
  %149 = load i32, i32* %dtype, align 4
  %cmp228 = icmp sle i32 %149, 10
  br i1 %cmp228, label %if.then230, label %if.end231

if.then230:                                       ; preds = %land.lhs.true227
  %150 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %151 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %152 = load i32, i32* %dtype, align 4
  call void @S_glob_assign_glob(%struct.sv* %150, %struct.sv* %151, i32 %152)
  br label %if.end1287

if.end231:                                        ; preds = %land.lhs.true227, %lor.lhs.false, %if.end213
  %153 = load i32, i32* %stype, align 4
  %cmp232 = icmp eq i32 %153, 10
  br i1 %cmp232, label %if.then234, label %if.else250

if.then234:                                       ; preds = %if.end231
  %154 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags235 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 2
  %155 = load i32, i32* %sv_flags235, align 4
  %and236 = and i32 %155, 255
  %cmp237 = icmp eq i32 %and236, 8
  br i1 %cmp237, label %if.then244, label %lor.lhs.false239

lor.lhs.false239:                                 ; preds = %if.then234
  %156 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags240 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 2
  %157 = load i32, i32* %sv_flags240, align 4
  %and241 = and i32 %157, 16826623
  %cmp242 = icmp eq i32 %and241, 16777226
  br i1 %cmp242, label %if.then244, label %if.end245

if.then244:                                       ; preds = %lor.lhs.false239, %if.then234
  br label %upgregexp

if.end245:                                        ; preds = %lor.lhs.false239
  %158 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags246 = getelementptr inbounds %struct.sv, %struct.sv* %158, i32 0, i32 2
  %159 = load i32, i32* %sv_flags246, align 4
  %and247 = and i32 %159, 255
  %cmp248 = icmp uge i32 %and247, 6
  br i1 %cmp248, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end245
  %160 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %160, i32 6)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end245
  %161 = phi i1 [ true, %if.end245 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %161 to i32
  br label %if.end258

if.else250:                                       ; preds = %if.end231
  %162 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags251 = getelementptr inbounds %struct.sv, %struct.sv* %162, i32 0, i32 2
  %163 = load i32, i32* %sv_flags251, align 4
  %and252 = and i32 %163, 255
  %164 = load i32, i32* %stype, align 4
  %cmp253 = icmp uge i32 %and252, %164
  br i1 %cmp253, label %lor.end256, label %lor.rhs255

lor.rhs255:                                       ; preds = %if.else250
  %165 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %166 = load i32, i32* %stype, align 4
  call void @Perl_sv_upgrade(%struct.sv* %165, i32 %166)
  br label %lor.end256

lor.end256:                                       ; preds = %lor.rhs255, %if.else250
  %167 = phi i1 [ true, %if.else250 ], [ true, %lor.rhs255 ]
  %lor.ext257 = zext i1 %167 to i32
  br label %if.end258

if.end258:                                        ; preds = %lor.end256, %lor.end
  br label %sw.epilog259

sw.epilog259:                                     ; preds = %if.end258, %if.end195, %if.end120, %if.end116, %if.end112, %if.end78, %if.end35
  br label %end_of_first_switch

end_of_first_switch:                              ; preds = %sw.epilog259, %sw.bb88, %sw.bb44
  %168 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags260 = getelementptr inbounds %struct.sv, %struct.sv* %168, i32 0, i32 2
  %169 = load i32, i32* %sv_flags260, align 4
  %and261 = and i32 %169, 255
  store i32 %and261, i32* %dtype, align 4
  %170 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags262 = getelementptr inbounds %struct.sv, %struct.sv* %170, i32 0, i32 2
  %171 = load i32, i32* %sv_flags262, align 4
  store i32 %171, i32* %sflags, align 4
  %172 = load i32, i32* %dtype, align 4
  %cmp263 = icmp eq i32 %172, 13
  br i1 %cmp263, label %cond.true265, label %cond.false266

cond.true265:                                     ; preds = %end_of_first_switch
  br i1 true, label %if.then267, label %if.else341

cond.false266:                                    ; preds = %end_of_first_switch
  br i1 false, label %if.then267, label %if.else341

if.then267:                                       ; preds = %cond.false266, %cond.true265
  %173 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags268 = getelementptr inbounds %struct.sv, %struct.sv* %173, i32 0, i32 2
  %174 = load i32, i32* %sv_flags268, align 4
  %and269 = and i32 %174, 65280
  %tobool270 = icmp ne i32 %and269, 0
  br i1 %tobool270, label %if.then281, label %lor.lhs.false271

lor.lhs.false271:                                 ; preds = %if.then267
  %175 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags272 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 2
  %176 = load i32, i32* %sv_flags272, align 4
  %and273 = and i32 %176, 255
  %cmp274 = icmp eq i32 %and273, 8
  br i1 %cmp274, label %if.then281, label %lor.lhs.false276

lor.lhs.false276:                                 ; preds = %lor.lhs.false271
  %177 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags277 = getelementptr inbounds %struct.sv, %struct.sv* %177, i32 0, i32 2
  %178 = load i32, i32* %sv_flags277, align 4
  %and278 = and i32 %178, 16826623
  %cmp279 = icmp eq i32 %and278, 16777226
  br i1 %cmp279, label %if.then281, label %if.else329

if.then281:                                       ; preds = %lor.lhs.false276, %lor.lhs.false271, %if.then267
  %179 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags282 = getelementptr inbounds %struct.sv, %struct.sv* %179, i32 0, i32 2
  %180 = load i32, i32* %sv_flags282, align 4
  %and283 = and i32 %180, 2098176
  %cmp284 = icmp eq i32 %and283, 1024
  br i1 %cmp284, label %cond.true286, label %cond.false292

cond.true286:                                     ; preds = %if.then281
  %181 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any287 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 0
  %182 = load i8*, i8** %sv_any287, align 8
  %183 = bitcast i8* %182 to %struct.xpv*
  %xpv_cur288 = getelementptr inbounds %struct.xpv, %struct.xpv* %183, i32 0, i32 2
  %184 = load i64, i64* %xpv_cur288, align 8
  store i64 %184, i64* %len, align 8
  %185 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u289 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 3
  %svu_pv290 = bitcast %union.anon* %sv_u289 to i8**
  %186 = load i8*, i8** %svu_pv290, align 8
  %add.ptr291 = getelementptr inbounds i8, i8* %186, i64 0
  br label %cond.end294

cond.false292:                                    ; preds = %if.then281
  %187 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call293 = call i8* @Perl_sv_2pv_flags(%struct.sv* %187, i64* %len, i32 34)
  br label %cond.end294

cond.end294:                                      ; preds = %cond.false292, %cond.true286
  %cond295 = phi i8* [ %add.ptr291, %cond.true286 ], [ %call293, %cond.false292 ]
  store i8* %cond295, i8** %ptr, align 8
  %188 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags296 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 2
  %189 = load i32, i32* %sv_flags296, align 4
  %and297 = and i32 %189, 268435456
  %tobool298 = icmp ne i32 %and297, 0
  br i1 %tobool298, label %cond.true305, label %lor.lhs.false299

lor.lhs.false299:                                 ; preds = %cond.end294
  %190 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any300 = getelementptr inbounds %struct.sv, %struct.sv* %190, i32 0, i32 0
  %191 = load i8*, i8** %sv_any300, align 8
  %192 = bitcast i8* %191 to %struct.xpv*
  %xpv_len_u301 = getelementptr inbounds %struct.xpv, %struct.xpv* %192, i32 0, i32 3
  %xpvlenu_len302 = bitcast %union.anon.19* %xpv_len_u301 to i64*
  %193 = load i64, i64* %xpvlenu_len302, align 8
  %194 = load i64, i64* %len, align 8
  %add = add i64 %194, 1
  %cmp303 = icmp ult i64 %193, %add
  br i1 %cmp303, label %cond.true305, label %cond.false308

cond.true305:                                     ; preds = %lor.lhs.false299, %cond.end294
  %195 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %196 = load i64, i64* %len, align 8
  %add306 = add i64 %196, 1
  %call307 = call i8* @Perl_sv_grow(%struct.sv* %195, i64 %add306)
  br label %cond.end311

cond.false308:                                    ; preds = %lor.lhs.false299
  %197 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u309 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 3
  %svu_pv310 = bitcast %union.anon* %sv_u309 to i8**
  %198 = load i8*, i8** %svu_pv310, align 8
  br label %cond.end311

cond.end311:                                      ; preds = %cond.false308, %cond.true305
  %cond312 = phi i8* [ %call307, %cond.true305 ], [ %198, %cond.false308 ]
  %199 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u313 = getelementptr inbounds %struct.sv, %struct.sv* %199, i32 0, i32 3
  %svu_pv314 = bitcast %union.anon* %sv_u313 to i8**
  %200 = load i8*, i8** %svu_pv314, align 8
  %201 = load i8*, i8** %ptr, align 8
  %202 = load i64, i64* %len, align 8
  %add315 = add i64 %202, 1
  %mul = mul i64 %add315, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %200, i8* align 1 %201, i64 %mul, i1 false)
  br label %do.body316

do.body316:                                       ; preds = %cond.end311
  %203 = load i64, i64* %len, align 8
  %204 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any317 = getelementptr inbounds %struct.sv, %struct.sv* %204, i32 0, i32 0
  %205 = load i8*, i8** %sv_any317, align 8
  %206 = bitcast i8* %205 to %struct.xpv*
  %xpv_cur318 = getelementptr inbounds %struct.xpv, %struct.xpv* %206, i32 0, i32 2
  store i64 %203, i64* %xpv_cur318, align 8
  br label %do.end319

do.end319:                                        ; preds = %do.body316
  %207 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags320 = getelementptr inbounds %struct.sv, %struct.sv* %207, i32 0, i32 2
  %208 = load i32, i32* %sv_flags320, align 4
  %and321 = and i32 %208, 1610547455
  store i32 %and321, i32* %sv_flags320, align 4
  %209 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags322 = getelementptr inbounds %struct.sv, %struct.sv* %209, i32 0, i32 2
  %210 = load i32, i32* %sv_flags322, align 4
  %or323 = or i32 %210, 17408
  store i32 %or323, i32* %sv_flags322, align 4
  %211 = load i32, i32* %sflags, align 4
  %and324 = and i32 %211, 536870912
  %212 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags325 = getelementptr inbounds %struct.sv, %struct.sv* %212, i32 0, i32 2
  %213 = load i32, i32* %sv_flags325, align 4
  %or326 = or i32 %213, %and324
  store i32 %or326, i32* %sv_flags325, align 4
  %214 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any327 = getelementptr inbounds %struct.sv, %struct.sv* %214, i32 0, i32 0
  %215 = load i8*, i8** %sv_any327, align 8
  %216 = bitcast i8* %215 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %216, i32 0, i32 12
  %217 = load i32, i32* %xcv_flags, align 4
  %and328 = and i32 %217, -8193
  store i32 %and328, i32* %xcv_flags, align 4
  br label %if.end340

if.else329:                                       ; preds = %lor.lhs.false276
  %218 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags330 = getelementptr inbounds %struct.sv, %struct.sv* %218, i32 0, i32 2
  %219 = load i32, i32* %sv_flags330, align 4
  %and331 = and i32 %219, 1610547455
  store i32 %and331, i32* %sv_flags330, align 4
  %220 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags332 = getelementptr inbounds %struct.sv, %struct.sv* %220, i32 0, i32 2
  %221 = load i32, i32* %sv_flags332, align 4
  %and333 = and i32 %221, 33554432
  %tobool334 = icmp ne i32 %and333, 0
  br i1 %tobool334, label %land.rhs335, label %land.end338

land.rhs335:                                      ; preds = %if.else329
  %222 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call336 = call i32 @Perl_sv_backoff(%struct.sv* %222)
  %tobool337 = icmp ne i32 %call336, 0
  br label %land.end338

land.end338:                                      ; preds = %land.rhs335, %if.else329
  %223 = phi i1 [ false, %if.else329 ], [ %tobool337, %land.rhs335 ]
  %land.ext339 = zext i1 %223 to i32
  br label %if.end340

if.end340:                                        ; preds = %land.end338, %do.end319
  br label %if.end1257

if.else341:                                       ; preds = %cond.false266, %cond.true265
  %224 = load i32, i32* %dtype, align 4
  %cmp342 = icmp eq i32 %224, 11
  br i1 %cmp342, label %cond.true350, label %lor.lhs.false344

lor.lhs.false344:                                 ; preds = %if.else341
  %225 = load i32, i32* %dtype, align 4
  %cmp345 = icmp eq i32 %225, 12
  br i1 %cmp345, label %cond.true350, label %lor.lhs.false347

lor.lhs.false347:                                 ; preds = %lor.lhs.false344
  %226 = load i32, i32* %dtype, align 4
  %cmp348 = icmp eq i32 %226, 14
  br i1 %cmp348, label %cond.true350, label %cond.false351

cond.true350:                                     ; preds = %lor.lhs.false347, %lor.lhs.false344, %if.else341
  br i1 true, label %if.then352, label %if.else379

cond.false351:                                    ; preds = %lor.lhs.false347
  br i1 false, label %if.then352, label %if.else379

if.then352:                                       ; preds = %cond.false351, %cond.true350
  %227 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call354 = call i8* @Perl_sv_reftype(%struct.sv* %227, i32 0)
  store i8* %call354, i8** %type353, align 8
  %228 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool355 = icmp ne %struct.op* %228, null
  br i1 %tobool355, label %if.then356, label %if.else377

if.then356:                                       ; preds = %if.then352
  %229 = load i8*, i8** %type353, align 8
  %230 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type357 = getelementptr inbounds %struct.op, %struct.op* %230, i32 0, i32 4
  %bf.load358 = load i16, i16* %op_type357, align 8
  %bf.clear359 = and i16 %bf.load358, 511
  %bf.cast360 = zext i16 %bf.clear359 to i32
  %cmp361 = icmp eq i32 %bf.cast360, 380
  br i1 %cmp361, label %cond.true363, label %cond.false368

cond.true363:                                     ; preds = %if.then356
  %231 = load %struct.op*, %struct.op** @PL_op, align 8
  %call364 = call i8* @Perl_custom_op_get_field(%struct.op* %231, i32 2)
  %coerce.dive366 = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce365, i32 0, i32 0
  store i8* %call364, i8** %coerce.dive366, align 8
  %xop_desc367 = bitcast %union.XOPRETANY* %coerce365 to i8**
  %232 = load i8*, i8** %xop_desc367, align 8
  br label %cond.end375

cond.false368:                                    ; preds = %if.then356
  %233 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type369 = getelementptr inbounds %struct.op, %struct.op* %233, i32 0, i32 4
  %bf.load370 = load i16, i16* %op_type369, align 8
  %bf.clear371 = and i16 %bf.load370, 511
  %bf.cast372 = zext i16 %bf.clear371 to i32
  %idxprom373 = zext i32 %bf.cast372 to i64
  %arrayidx374 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom373
  %234 = load i8*, i8** %arrayidx374, align 8
  br label %cond.end375

cond.end375:                                      ; preds = %cond.false368, %cond.true363
  %cond376 = phi i8* [ %232, %cond.true363 ], [ %234, %cond.false368 ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.19, i64 0, i64 0), i8* %229, i8* %cond376)
  br label %if.end378

if.else377:                                       ; preds = %if.then352
  %235 = load i8*, i8** %type353, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i64 0, i64 0), i8* %235)
  br label %if.end378

if.end378:                                        ; preds = %if.else377, %cond.end375
  br label %if.end1256

if.else379:                                       ; preds = %cond.false351, %cond.true350
  %236 = load i32, i32* %sflags, align 4
  %and380 = and i32 %236, 2048
  %tobool381 = icmp ne i32 %and380, 0
  br i1 %tobool381, label %if.then382, label %if.else555

if.then382:                                       ; preds = %if.else379
  %237 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags383 = getelementptr inbounds %struct.sv, %struct.sv* %237, i32 0, i32 2
  %238 = load i32, i32* %sv_flags383, align 4
  %and384 = and i32 %238, 49152
  %cmp385 = icmp eq i32 %and384, 32768
  br i1 %cmp385, label %land.lhs.true387, label %if.end449

land.lhs.true387:                                 ; preds = %if.then382
  %239 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags388 = getelementptr inbounds %struct.sv, %struct.sv* %239, i32 0, i32 2
  %240 = load i32, i32* %sv_flags388, align 4
  %and389 = and i32 %240, 255
  %cmp390 = icmp eq i32 %and389, 9
  br i1 %cmp390, label %land.lhs.true397, label %lor.lhs.false392

lor.lhs.false392:                                 ; preds = %land.lhs.true387
  %241 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags393 = getelementptr inbounds %struct.sv, %struct.sv* %241, i32 0, i32 2
  %242 = load i32, i32* %sv_flags393, align 4
  %and394 = and i32 %242, 255
  %cmp395 = icmp eq i32 %and394, 10
  br i1 %cmp395, label %land.lhs.true397, label %if.end449

land.lhs.true397:                                 ; preds = %lor.lhs.false392, %land.lhs.true387
  %243 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u398 = getelementptr inbounds %struct.sv, %struct.sv* %243, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u398 to %struct.sv**
  %244 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags399 = getelementptr inbounds %struct.sv, %struct.sv* %244, i32 0, i32 2
  %245 = load i32, i32* %sv_flags399, align 4
  %and400 = and i32 %245, 255
  %cmp401 = icmp eq i32 %and400, 9
  br i1 %cmp401, label %land.lhs.true403, label %if.end449

land.lhs.true403:                                 ; preds = %land.lhs.true397
  %246 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u404 = getelementptr inbounds %struct.sv, %struct.sv* %246, i32 0, i32 3
  %svu_rv405 = bitcast %union.anon* %sv_u404 to %struct.sv**
  %247 = load %struct.sv*, %struct.sv** %svu_rv405, align 8
  %sv_flags406 = getelementptr inbounds %struct.sv, %struct.sv* %247, i32 0, i32 2
  %248 = load i32, i32* %sv_flags406, align 4
  %and407 = and i32 %248, 49152
  %cmp408 = icmp eq i32 %and407, 32768
  br i1 %cmp408, label %land.lhs.true410, label %if.end449

land.lhs.true410:                                 ; preds = %land.lhs.true403
  %249 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u411 = getelementptr inbounds %struct.sv, %struct.sv* %249, i32 0, i32 3
  %svu_rv412 = bitcast %union.anon* %sv_u411 to %struct.sv**
  %250 = load %struct.sv*, %struct.sv** %svu_rv412, align 8
  %sv_flags413 = getelementptr inbounds %struct.sv, %struct.sv* %250, i32 0, i32 2
  %251 = load i32, i32* %sv_flags413, align 4
  %and414 = and i32 %251, 255
  %cmp415 = icmp eq i32 %and414, 9
  br i1 %cmp415, label %if.then424, label %lor.lhs.false417

lor.lhs.false417:                                 ; preds = %land.lhs.true410
  %252 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u418 = getelementptr inbounds %struct.sv, %struct.sv* %252, i32 0, i32 3
  %svu_rv419 = bitcast %union.anon* %sv_u418 to %struct.sv**
  %253 = load %struct.sv*, %struct.sv** %svu_rv419, align 8
  %sv_flags420 = getelementptr inbounds %struct.sv, %struct.sv* %253, i32 0, i32 2
  %254 = load i32, i32* %sv_flags420, align 4
  %and421 = and i32 %254, 255
  %cmp422 = icmp eq i32 %and421, 10
  br i1 %cmp422, label %if.then424, label %if.end449

if.then424:                                       ; preds = %lor.lhs.false417, %land.lhs.true410
  %255 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u425 = getelementptr inbounds %struct.sv, %struct.sv* %255, i32 0, i32 3
  %svu_rv426 = bitcast %union.anon* %sv_u425 to %struct.sv**
  %256 = load %struct.sv*, %struct.sv** %svu_rv426, align 8
  store %struct.sv* %256, %struct.sv** %sstr.addr, align 8
  %257 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %258 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %cmp427 = icmp eq %struct.sv* %257, %258
  br i1 %cmp427, label %if.then429, label %if.end448

if.then429:                                       ; preds = %if.then424
  %259 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any430 = getelementptr inbounds %struct.sv, %struct.sv* %259, i32 0, i32 0
  %260 = load i8*, i8** %sv_any430, align 8
  %261 = bitcast i8* %260 to %struct.xpvgv*
  %xpv_cur431 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %261, i32 0, i32 2
  %262 = load i64, i64* %xpv_cur431, align 8
  %and432 = and i64 %262, 240
  %cmp433 = icmp ne i64 %and432, 240
  br i1 %cmp433, label %land.lhs.true435, label %if.end444

land.lhs.true435:                                 ; preds = %if.then429
  %263 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %263, i32 0, i32 8
  %264 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  %265 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any436 = getelementptr inbounds %struct.sv, %struct.sv* %265, i32 0, i32 0
  %266 = load i8*, i8** %sv_any436, align 8
  %267 = bitcast i8* %266 to %struct.xpvgv*
  %xnv_u437 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %267, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u437 to %struct.hv**
  %268 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %cmp438 = icmp eq %struct.hv* %264, %268
  br i1 %cmp438, label %if.end444, label %if.then440

if.then440:                                       ; preds = %land.lhs.true435
  %269 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any441 = getelementptr inbounds %struct.sv, %struct.sv* %269, i32 0, i32 0
  %270 = load i8*, i8** %sv_any441, align 8
  %271 = bitcast i8* %270 to %struct.xpvgv*
  %xpv_cur442 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %271, i32 0, i32 2
  %272 = load i64, i64* %xpv_cur442, align 8
  %or443 = or i64 %272, 240
  store i64 %or443, i64* %xpv_cur442, align 8
  br label %if.end444

if.end444:                                        ; preds = %if.then440, %land.lhs.true435, %if.then429
  %273 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any445 = getelementptr inbounds %struct.sv, %struct.sv* %273, i32 0, i32 0
  %274 = load i8*, i8** %sv_any445, align 8
  %275 = bitcast i8* %274 to %struct.xpvgv*
  %xpv_cur446 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %275, i32 0, i32 2
  %276 = load i64, i64* %xpv_cur446, align 8
  %or447 = or i64 %276, 2
  store i64 %or447, i64* %xpv_cur446, align 8
  br label %if.end1287

if.end448:                                        ; preds = %if.then424
  %277 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %278 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %279 = load i32, i32* %dtype, align 4
  call void @S_glob_assign_glob(%struct.sv* %277, %struct.sv* %278, i32 %279)
  br label %if.end1287

if.end449:                                        ; preds = %lor.lhs.false417, %land.lhs.true403, %land.lhs.true397, %lor.lhs.false392, %if.then382
  %280 = load i32, i32* %dtype, align 4
  %cmp450 = icmp sge i32 %280, 3
  br i1 %cmp450, label %if.then452, label %if.end534

if.then452:                                       ; preds = %if.end449
  %281 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags453 = getelementptr inbounds %struct.sv, %struct.sv* %281, i32 0, i32 2
  %282 = load i32, i32* %sv_flags453, align 4
  %and454 = and i32 %282, 49152
  %cmp455 = icmp eq i32 %and454, 32768
  br i1 %cmp455, label %land.lhs.true457, label %if.end468

land.lhs.true457:                                 ; preds = %if.then452
  %283 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags458 = getelementptr inbounds %struct.sv, %struct.sv* %283, i32 0, i32 2
  %284 = load i32, i32* %sv_flags458, align 4
  %and459 = and i32 %284, 255
  %cmp460 = icmp eq i32 %and459, 9
  br i1 %cmp460, label %if.then467, label %lor.lhs.false462

lor.lhs.false462:                                 ; preds = %land.lhs.true457
  %285 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags463 = getelementptr inbounds %struct.sv, %struct.sv* %285, i32 0, i32 2
  %286 = load i32, i32* %sv_flags463, align 4
  %and464 = and i32 %286, 255
  %cmp465 = icmp eq i32 %and464, 10
  br i1 %cmp465, label %if.then467, label %if.end468

if.then467:                                       ; preds = %lor.lhs.false462, %land.lhs.true457
  %287 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %288 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  call void @Perl_gv_setref(%struct.sv* %287, %struct.sv* %288)
  br label %if.end1287

if.end468:                                        ; preds = %lor.lhs.false462, %if.then452
  %289 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u469 = getelementptr inbounds %struct.sv, %struct.sv* %289, i32 0, i32 3
  %svu_pv470 = bitcast %union.anon* %sv_u469 to i8**
  %290 = load i8*, i8** %svu_pv470, align 8
  %add.ptr471 = getelementptr inbounds i8, i8* %290, i64 0
  %tobool472 = icmp ne i8* %add.ptr471, null
  br i1 %tobool472, label %if.then473, label %if.end533

if.then473:                                       ; preds = %if.end468
  br label %do.body474

do.body474:                                       ; preds = %if.then473
  %291 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any475 = getelementptr inbounds %struct.sv, %struct.sv* %291, i32 0, i32 0
  %292 = load i8*, i8** %sv_any475, align 8
  %293 = bitcast i8* %292 to %struct.xpv*
  %xpv_len_u476 = getelementptr inbounds %struct.xpv, %struct.xpv* %293, i32 0, i32 3
  %xpvlenu_len477 = bitcast %union.anon.19* %xpv_len_u476 to i64*
  %294 = load i64, i64* %xpvlenu_len477, align 8
  %tobool478 = icmp ne i64 %294, 0
  br i1 %tobool478, label %if.then479, label %if.end522

if.then479:                                       ; preds = %do.body474
  %295 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags480 = getelementptr inbounds %struct.sv, %struct.sv* %295, i32 0, i32 2
  %296 = load i32, i32* %sv_flags480, align 4
  %and481 = and i32 %296, 33554432
  %tobool482 = icmp ne i32 %and481, 0
  br i1 %tobool482, label %cond.true483, label %cond.false484

cond.true483:                                     ; preds = %if.then479
  br i1 true, label %if.then485, label %if.end519

cond.false484:                                    ; preds = %if.then479
  br i1 false, label %if.then485, label %if.end519

if.then485:                                       ; preds = %cond.false484, %cond.true483
  br label %do.body487

do.body487:                                       ; preds = %if.then485
  %297 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags488 = getelementptr inbounds %struct.sv, %struct.sv* %297, i32 0, i32 2
  %298 = load i32, i32* %sv_flags488, align 4
  %and489 = and i32 %298, 33554432
  %tobool490 = icmp ne i32 %and489, 0
  br i1 %tobool490, label %if.then491, label %if.else505

if.then491:                                       ; preds = %do.body487
  %299 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u492 = getelementptr inbounds %struct.sv, %struct.sv* %299, i32 0, i32 3
  %svu_pv493 = bitcast %union.anon* %sv_u492 to i8**
  %300 = load i8*, i8** %svu_pv493, align 8
  %add.ptr494 = getelementptr inbounds i8, i8* %300, i64 0
  %arrayidx495 = getelementptr inbounds i8, i8* %add.ptr494, i64 -1
  %301 = load i8, i8* %arrayidx495, align 1
  %conv496 = zext i8 %301 to i64
  store i64 %conv496, i64* %zok486, align 8
  %302 = load i64, i64* %zok486, align 8
  %tobool497 = icmp ne i64 %302, 0
  br i1 %tobool497, label %if.end504, label %if.then498

if.then498:                                       ; preds = %if.then491
  %303 = bitcast i64* %zok486 to i8*
  %304 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u499 = getelementptr inbounds %struct.sv, %struct.sv* %304, i32 0, i32 3
  %svu_pv500 = bitcast %union.anon* %sv_u499 to i8**
  %305 = load i8*, i8** %svu_pv500, align 8
  %add.ptr501 = getelementptr inbounds i8, i8* %305, i64 0
  %add.ptr502 = getelementptr inbounds i8, i8* %add.ptr501, i64 -1
  %add.ptr503 = getelementptr inbounds i8, i8* %add.ptr502, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %303, i8* align 1 %add.ptr503, i64 8, i1 false)
  br label %if.end504

if.end504:                                        ; preds = %if.then498, %if.then491
  br label %if.end506

if.else505:                                       ; preds = %do.body487
  store i64 0, i64* %zok486, align 8
  br label %if.end506

if.end506:                                        ; preds = %if.else505, %if.end504
  br label %do.end507

do.end507:                                        ; preds = %if.end506
  br label %do.body508

do.body508:                                       ; preds = %do.end507
  %306 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u509 = getelementptr inbounds %struct.sv, %struct.sv* %306, i32 0, i32 3
  %svu_pv510 = bitcast %union.anon* %sv_u509 to i8**
  %307 = load i8*, i8** %svu_pv510, align 8
  %add.ptr511 = getelementptr inbounds i8, i8* %307, i64 0
  %308 = load i64, i64* %zok486, align 8
  %idx.neg512 = sub i64 0, %308
  %add.ptr513 = getelementptr inbounds i8, i8* %add.ptr511, i64 %idx.neg512
  %309 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u514 = getelementptr inbounds %struct.sv, %struct.sv* %309, i32 0, i32 3
  %svu_pv515 = bitcast %union.anon* %sv_u514 to i8**
  store i8* %add.ptr513, i8** %svu_pv515, align 8
  br label %do.end516

do.end516:                                        ; preds = %do.body508
  %310 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags517 = getelementptr inbounds %struct.sv, %struct.sv* %310, i32 0, i32 2
  %311 = load i32, i32* %sv_flags517, align 4
  %and518 = and i32 %311, -33554433
  store i32 %and518, i32* %sv_flags517, align 4
  br label %if.end519

if.end519:                                        ; preds = %do.end516, %cond.false484, %cond.true483
  %312 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u520 = getelementptr inbounds %struct.sv, %struct.sv* %312, i32 0, i32 3
  %svu_pv521 = bitcast %union.anon* %sv_u520 to i8**
  %313 = load i8*, i8** %svu_pv521, align 8
  call void @Perl_safesysfree(i8* %313)
  br label %if.end522

if.end522:                                        ; preds = %if.end519, %do.body474
  br label %do.end523

do.end523:                                        ; preds = %if.end522
  br label %do.body524

do.body524:                                       ; preds = %do.end523
  %314 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any525 = getelementptr inbounds %struct.sv, %struct.sv* %314, i32 0, i32 0
  %315 = load i8*, i8** %sv_any525, align 8
  %316 = bitcast i8* %315 to %struct.xpv*
  %xpv_len_u526 = getelementptr inbounds %struct.xpv, %struct.xpv* %316, i32 0, i32 3
  %xpvlenu_len527 = bitcast %union.anon.19* %xpv_len_u526 to i64*
  store i64 0, i64* %xpvlenu_len527, align 8
  br label %do.end528

do.end528:                                        ; preds = %do.body524
  br label %do.body529

do.body529:                                       ; preds = %do.end528
  %317 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any530 = getelementptr inbounds %struct.sv, %struct.sv* %317, i32 0, i32 0
  %318 = load i8*, i8** %sv_any530, align 8
  %319 = bitcast i8* %318 to %struct.xpv*
  %xpv_cur531 = getelementptr inbounds %struct.xpv, %struct.xpv* %319, i32 0, i32 2
  store i64 0, i64* %xpv_cur531, align 8
  br label %do.end532

do.end532:                                        ; preds = %do.body529
  br label %if.end533

if.end533:                                        ; preds = %do.end532, %if.end468
  br label %if.end534

if.end534:                                        ; preds = %if.end533, %if.end449
  %320 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags535 = getelementptr inbounds %struct.sv, %struct.sv* %320, i32 0, i32 2
  %321 = load i32, i32* %sv_flags535, align 4
  %and536 = and i32 %321, 1610547455
  store i32 %and536, i32* %sv_flags535, align 4
  %322 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags537 = getelementptr inbounds %struct.sv, %struct.sv* %322, i32 0, i32 2
  %323 = load i32, i32* %sv_flags537, align 4
  %and538 = and i32 %323, 33554432
  %tobool539 = icmp ne i32 %and538, 0
  br i1 %tobool539, label %land.rhs540, label %land.end543

land.rhs540:                                      ; preds = %if.end534
  %324 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call541 = call i32 @Perl_sv_backoff(%struct.sv* %324)
  %tobool542 = icmp ne i32 %call541, 0
  br label %land.end543

land.end543:                                      ; preds = %land.rhs540, %if.end534
  %325 = phi i1 [ false, %if.end534 ], [ %tobool542, %land.rhs540 ]
  %land.ext544 = zext i1 %325 to i32
  br label %do.body545

do.body545:                                       ; preds = %land.end543
  %326 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u546 = getelementptr inbounds %struct.sv, %struct.sv* %326, i32 0, i32 3
  %svu_rv547 = bitcast %union.anon* %sv_u546 to %struct.sv**
  %327 = load %struct.sv*, %struct.sv** %svu_rv547, align 8
  %328 = bitcast %struct.sv* %327 to i8*
  %329 = bitcast i8* %328 to %struct.sv*
  %call548 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %329)
  %330 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u549 = getelementptr inbounds %struct.sv, %struct.sv* %330, i32 0, i32 3
  %svu_rv550 = bitcast %union.anon* %sv_u549 to %struct.sv**
  store %struct.sv* %call548, %struct.sv** %svu_rv550, align 8
  br label %do.end551

do.end551:                                        ; preds = %do.body545
  %331 = load i32, i32* %sflags, align 4
  %and552 = and i32 %331, 2048
  %332 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags553 = getelementptr inbounds %struct.sv, %struct.sv* %332, i32 0, i32 2
  %333 = load i32, i32* %sv_flags553, align 4
  %or554 = or i32 %333, %and552
  store i32 %or554, i32* %sv_flags553, align 4
  br label %if.end1255

if.else555:                                       ; preds = %if.else379
  %334 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags556 = getelementptr inbounds %struct.sv, %struct.sv* %334, i32 0, i32 2
  %335 = load i32, i32* %sv_flags556, align 4
  %and557 = and i32 %335, 49152
  %cmp558 = icmp eq i32 %and557, 32768
  br i1 %cmp558, label %land.lhs.true560, label %if.else734

land.lhs.true560:                                 ; preds = %if.else555
  %336 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags561 = getelementptr inbounds %struct.sv, %struct.sv* %336, i32 0, i32 2
  %337 = load i32, i32* %sv_flags561, align 4
  %and562 = and i32 %337, 255
  %cmp563 = icmp eq i32 %and562, 9
  br i1 %cmp563, label %if.then570, label %lor.lhs.false565

lor.lhs.false565:                                 ; preds = %land.lhs.true560
  %338 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags566 = getelementptr inbounds %struct.sv, %struct.sv* %338, i32 0, i32 2
  %339 = load i32, i32* %sv_flags566, align 4
  %and567 = and i32 %339, 255
  %cmp568 = icmp eq i32 %and567, 10
  br i1 %cmp568, label %if.then570, label %if.else734

if.then570:                                       ; preds = %lor.lhs.false565, %land.lhs.true560
  %340 = load i32, i32* %sflags, align 4
  %and571 = and i32 %340, 65280
  %tobool572 = icmp ne i32 %and571, 0
  br i1 %tobool572, label %if.else574, label %if.then573

if.then573:                                       ; preds = %if.then570
  call void (i32, i8*, ...) @Perl_ck_warner(i32 12, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.21, i64 0, i64 0))
  br label %if.end733

if.else574:                                       ; preds = %if.then570
  %341 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call575 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %341, i32 2049, i32 9)
  store %struct.gv* %call575, %struct.gv** %gv, align 8
  %342 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %343 = load %struct.gv*, %struct.gv** %gv, align 8
  %344 = bitcast %struct.gv* %343 to %struct.sv*
  %cmp576 = icmp ne %struct.sv* %342, %344
  br i1 %cmp576, label %if.then578, label %if.end732

if.then578:                                       ; preds = %if.else574
  %345 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %346 = bitcast %struct.sv* %345 to %struct.gv*
  %sv_any579 = getelementptr inbounds %struct.gv, %struct.gv* %346, i32 0, i32 0
  %347 = load %struct.xpvgv*, %struct.xpvgv** %sv_any579, align 8
  %xiv_u580 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %347, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u580 to %struct.hek**
  %348 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %348, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  store i8* %arraydecay, i8** %name, align 8
  %349 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any582 = getelementptr inbounds %struct.sv, %struct.sv* %349, i32 0, i32 0
  %350 = load i8*, i8** %sv_any582, align 8
  %351 = bitcast i8* %350 to %struct.xpvgv*
  %xiv_u583 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %351, i32 0, i32 4
  %xivu_namehek584 = bitcast %union._xivu* %xiv_u583 to %struct.hek**
  %352 = load %struct.hek*, %struct.hek** %xivu_namehek584, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %352, i32 0, i32 1
  %353 = load i32, i32* %hek_len, align 4
  %conv585 = sext i32 %353 to i64
  store i64 %conv585, i64* %len581, align 8
  store %struct.hv* null, %struct.hv** %old_stash, align 8
  store i8 0, i8* %reset_isa, align 1
  %354 = load i64, i64* %len581, align 8
  %cmp586 = icmp ugt i64 %354, 1
  br i1 %cmp586, label %land.lhs.true588, label %lor.lhs.false599

land.lhs.true588:                                 ; preds = %if.then578
  %355 = load i8*, i8** %name, align 8
  %356 = load i64, i64* %len581, align 8
  %sub = sub i64 %356, 2
  %arrayidx589 = getelementptr inbounds i8, i8* %355, i64 %sub
  %357 = load i8, i8* %arrayidx589, align 1
  %conv590 = sext i8 %357 to i32
  %cmp591 = icmp eq i32 %conv590, 58
  br i1 %cmp591, label %land.lhs.true593, label %lor.lhs.false599

land.lhs.true593:                                 ; preds = %land.lhs.true588
  %358 = load i8*, i8** %name, align 8
  %359 = load i64, i64* %len581, align 8
  %sub594 = sub i64 %359, 1
  %arrayidx595 = getelementptr inbounds i8, i8* %358, i64 %sub594
  %360 = load i8, i8* %arrayidx595, align 1
  %conv596 = sext i8 %360 to i32
  %cmp597 = icmp eq i32 %conv596, 58
  br i1 %cmp597, label %if.then607, label %lor.lhs.false599

lor.lhs.false599:                                 ; preds = %land.lhs.true593, %land.lhs.true588, %if.then578
  %361 = load i64, i64* %len581, align 8
  %cmp600 = icmp eq i64 %361, 1
  br i1 %cmp600, label %land.lhs.true602, label %if.end614

land.lhs.true602:                                 ; preds = %lor.lhs.false599
  %362 = load i8*, i8** %name, align 8
  %arrayidx603 = getelementptr inbounds i8, i8* %362, i64 0
  %363 = load i8, i8* %arrayidx603, align 1
  %conv604 = sext i8 %363 to i32
  %cmp605 = icmp eq i32 %conv604, 58
  br i1 %cmp605, label %if.then607, label %if.end614

if.then607:                                       ; preds = %land.lhs.true602, %land.lhs.true593
  %364 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u608 = getelementptr inbounds %struct.sv, %struct.sv* %364, i32 0, i32 3
  %svu_gp = bitcast %union.anon* %sv_u608 to %struct.gp**
  %365 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr609 = getelementptr inbounds %struct.gp, %struct.gp* %365, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr609, i32 0, i32 5
  %366 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  store %struct.hv* %366, %struct.hv** %old_stash, align 8
  %tobool610 = icmp ne %struct.hv* %366, null
  br i1 %tobool610, label %if.then611, label %if.end613

if.then611:                                       ; preds = %if.then607
  %367 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %368 = bitcast %struct.hv* %367 to %struct.sv*
  %call612 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %368)
  %369 = bitcast %struct.sv* %call612 to i8*
  %370 = bitcast i8* %369 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %370, i32 0, i32 1
  %371 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %371, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end613

if.end613:                                        ; preds = %if.then611, %if.then607
  store i8 1, i8* %reset_isa, align 1
  br label %if.end614

if.end614:                                        ; preds = %if.end613, %land.lhs.true602, %lor.lhs.false599
  %372 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u615 = getelementptr inbounds %struct.sv, %struct.sv* %372, i32 0, i32 3
  %svu_gp616 = bitcast %union.anon* %sv_u615 to %struct.gp**
  %373 = load %struct.gp*, %struct.gp** %svu_gp616, align 8
  %add.ptr617 = getelementptr inbounds %struct.gp, %struct.gp* %373, i64 0
  %tobool618 = icmp ne %struct.gp* %add.ptr617, null
  br i1 %tobool618, label %if.then619, label %if.end623

if.then619:                                       ; preds = %if.end614
  %374 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call620 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %374)
  %375 = bitcast %struct.sv* %call620 to i8*
  %376 = bitcast i8* %375 to %struct.sv*
  %sv_refcnt621 = getelementptr inbounds %struct.sv, %struct.sv* %376, i32 0, i32 1
  %377 = load i32, i32* %sv_refcnt621, align 8
  %inc622 = add i32 %377, 1
  store i32 %inc622, i32* %sv_refcnt621, align 8
  %378 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %379 = bitcast %struct.sv* %378 to i8*
  %380 = bitcast i8* %379 to %struct.gv*
  call void @Perl_gp_free(%struct.gv* %380)
  br label %if.end623

if.end623:                                        ; preds = %if.then619, %if.end614
  %381 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u624 = getelementptr inbounds %struct.gv, %struct.gv* %381, i32 0, i32 3
  %svu_gp625 = bitcast %union.anon.6* %sv_u624 to %struct.gp**
  %382 = load %struct.gp*, %struct.gp** %svu_gp625, align 8
  %add.ptr626 = getelementptr inbounds %struct.gp, %struct.gp* %382, i64 0
  %call627 = call %struct.gp* @Perl_gp_ref(%struct.gp* %add.ptr626)
  %383 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u628 = getelementptr inbounds %struct.sv, %struct.sv* %383, i32 0, i32 3
  %svu_gp629 = bitcast %union.anon* %sv_u628 to %struct.gp**
  store %struct.gp* %call627, %struct.gp** %svu_gp629, align 8
  %384 = load i8, i8* %reset_isa, align 1
  %tobool630 = trunc i8 %384 to i1
  br i1 %tobool630, label %if.then631, label %if.end731

if.then631:                                       ; preds = %if.end623
  %385 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u632 = getelementptr inbounds %struct.sv, %struct.sv* %385, i32 0, i32 3
  %svu_gp633 = bitcast %union.anon* %sv_u632 to %struct.gp**
  %386 = load %struct.gp*, %struct.gp** %svu_gp633, align 8
  %add.ptr634 = getelementptr inbounds %struct.gp, %struct.gp* %386, i64 0
  %gp_hv635 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr634, i32 0, i32 5
  %387 = load %struct.hv*, %struct.hv** %gp_hv635, align 8
  store %struct.hv* %387, %struct.hv** %stash, align 8
  %388 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %tobool636 = icmp ne %struct.hv* %388, null
  br i1 %tobool636, label %cond.true637, label %cond.false727

cond.true637:                                     ; preds = %if.then631
  %389 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_flags638 = getelementptr inbounds %struct.hv, %struct.hv* %389, i32 0, i32 2
  %390 = load i32, i32* %sv_flags638, align 4
  %and639 = and i32 %390, 33554432
  %tobool640 = icmp ne i32 %and639, 0
  br i1 %tobool640, label %land.lhs.true641, label %cond.false723

land.lhs.true641:                                 ; preds = %cond.true637
  %391 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u642 = getelementptr inbounds %struct.hv, %struct.hv* %391, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u642 to %struct.he***
  %392 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %393 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any643 = getelementptr inbounds %struct.hv, %struct.hv* %393, i32 0, i32 0
  %394 = load %struct.xpvhv*, %struct.xpvhv** %sv_any643, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %394, i32 0, i32 3
  %395 = load i64, i64* %xhv_max, align 8
  %add644 = add i64 %395, 1
  %arrayidx645 = getelementptr inbounds %struct.he*, %struct.he** %392, i64 %add644
  %396 = bitcast %struct.he** %arrayidx645 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %396, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %397 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool646 = icmp ne %struct.hek* %397, null
  br i1 %tobool646, label %land.lhs.true647, label %cond.false723

land.lhs.true647:                                 ; preds = %land.lhs.true641
  %398 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u648 = getelementptr inbounds %struct.hv, %struct.hv* %398, i32 0, i32 3
  %svu_hash649 = bitcast %union.anon.4* %sv_u648 to %struct.he***
  %399 = load %struct.he**, %struct.he*** %svu_hash649, align 8
  %400 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any650 = getelementptr inbounds %struct.hv, %struct.hv* %400, i32 0, i32 0
  %401 = load %struct.xpvhv*, %struct.xpvhv** %sv_any650, align 8
  %xhv_max651 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %401, i32 0, i32 3
  %402 = load i64, i64* %xhv_max651, align 8
  %add652 = add i64 %402, 1
  %arrayidx653 = getelementptr inbounds %struct.he*, %struct.he** %399, i64 %add652
  %403 = bitcast %struct.he** %arrayidx653 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %403, i32 0, i32 4
  %404 = load i32, i32* %xhv_name_count, align 4
  %cmp654 = icmp ne i32 %404, -1
  br i1 %cmp654, label %cond.true656, label %cond.false723

cond.true656:                                     ; preds = %land.lhs.true647
  %405 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u657 = getelementptr inbounds %struct.hv, %struct.hv* %405, i32 0, i32 3
  %svu_hash658 = bitcast %union.anon.4* %sv_u657 to %struct.he***
  %406 = load %struct.he**, %struct.he*** %svu_hash658, align 8
  %407 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any659 = getelementptr inbounds %struct.hv, %struct.hv* %407, i32 0, i32 0
  %408 = load %struct.xpvhv*, %struct.xpvhv** %sv_any659, align 8
  %xhv_max660 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %408, i32 0, i32 3
  %409 = load i64, i64* %xhv_max660, align 8
  %add661 = add i64 %409, 1
  %arrayidx662 = getelementptr inbounds %struct.he*, %struct.he** %406, i64 %add661
  %410 = bitcast %struct.he** %arrayidx662 to %struct.xpvhv_aux*
  %xhv_name_count663 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %410, i32 0, i32 4
  %411 = load i32, i32* %xhv_name_count663, align 4
  %cmp664 = icmp sgt i32 %411, 0
  br i1 %cmp664, label %cond.true666, label %cond.false675

cond.true666:                                     ; preds = %cond.true656
  %412 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u667 = getelementptr inbounds %struct.hv, %struct.hv* %412, i32 0, i32 3
  %svu_hash668 = bitcast %union.anon.4* %sv_u667 to %struct.he***
  %413 = load %struct.he**, %struct.he*** %svu_hash668, align 8
  %414 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any669 = getelementptr inbounds %struct.hv, %struct.hv* %414, i32 0, i32 0
  %415 = load %struct.xpvhv*, %struct.xpvhv** %sv_any669, align 8
  %xhv_max670 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %415, i32 0, i32 3
  %416 = load i64, i64* %xhv_max670, align 8
  %add671 = add i64 %416, 1
  %arrayidx672 = getelementptr inbounds %struct.he*, %struct.he** %413, i64 %add671
  %417 = bitcast %struct.he** %arrayidx672 to %struct.xpvhv_aux*
  %xhv_name_u673 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %417, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u673 to %struct.hek***
  %418 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %arrayidx674 = getelementptr inbounds %struct.hek*, %struct.hek** %418, i64 0
  %419 = load %struct.hek*, %struct.hek** %arrayidx674, align 8
  br label %cond.end719

cond.false675:                                    ; preds = %cond.true656
  %420 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u676 = getelementptr inbounds %struct.hv, %struct.hv* %420, i32 0, i32 3
  %svu_hash677 = bitcast %union.anon.4* %sv_u676 to %struct.he***
  %421 = load %struct.he**, %struct.he*** %svu_hash677, align 8
  %422 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any678 = getelementptr inbounds %struct.hv, %struct.hv* %422, i32 0, i32 0
  %423 = load %struct.xpvhv*, %struct.xpvhv** %sv_any678, align 8
  %xhv_max679 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %423, i32 0, i32 3
  %424 = load i64, i64* %xhv_max679, align 8
  %add680 = add i64 %424, 1
  %arrayidx681 = getelementptr inbounds %struct.he*, %struct.he** %421, i64 %add680
  %425 = bitcast %struct.he** %arrayidx681 to %struct.xpvhv_aux*
  %xhv_name_count682 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %425, i32 0, i32 4
  %426 = load i32, i32* %xhv_name_count682, align 4
  %cmp683 = icmp slt i32 %426, -1
  br i1 %cmp683, label %cond.true685, label %cond.false695

cond.true685:                                     ; preds = %cond.false675
  %427 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u686 = getelementptr inbounds %struct.hv, %struct.hv* %427, i32 0, i32 3
  %svu_hash687 = bitcast %union.anon.4* %sv_u686 to %struct.he***
  %428 = load %struct.he**, %struct.he*** %svu_hash687, align 8
  %429 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any688 = getelementptr inbounds %struct.hv, %struct.hv* %429, i32 0, i32 0
  %430 = load %struct.xpvhv*, %struct.xpvhv** %sv_any688, align 8
  %xhv_max689 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %430, i32 0, i32 3
  %431 = load i64, i64* %xhv_max689, align 8
  %add690 = add i64 %431, 1
  %arrayidx691 = getelementptr inbounds %struct.he*, %struct.he** %428, i64 %add690
  %432 = bitcast %struct.he** %arrayidx691 to %struct.xpvhv_aux*
  %xhv_name_u692 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %432, i32 0, i32 0
  %xhvnameu_names693 = bitcast %union._xhvnameu* %xhv_name_u692 to %struct.hek***
  %433 = load %struct.hek**, %struct.hek*** %xhvnameu_names693, align 8
  %arrayidx694 = getelementptr inbounds %struct.hek*, %struct.hek** %433, i64 1
  %434 = load %struct.hek*, %struct.hek** %arrayidx694, align 8
  br label %cond.end717

cond.false695:                                    ; preds = %cond.false675
  %435 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u696 = getelementptr inbounds %struct.hv, %struct.hv* %435, i32 0, i32 3
  %svu_hash697 = bitcast %union.anon.4* %sv_u696 to %struct.he***
  %436 = load %struct.he**, %struct.he*** %svu_hash697, align 8
  %437 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any698 = getelementptr inbounds %struct.hv, %struct.hv* %437, i32 0, i32 0
  %438 = load %struct.xpvhv*, %struct.xpvhv** %sv_any698, align 8
  %xhv_max699 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %438, i32 0, i32 3
  %439 = load i64, i64* %xhv_max699, align 8
  %add700 = add i64 %439, 1
  %arrayidx701 = getelementptr inbounds %struct.he*, %struct.he** %436, i64 %add700
  %440 = bitcast %struct.he** %arrayidx701 to %struct.xpvhv_aux*
  %xhv_name_count702 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %440, i32 0, i32 4
  %441 = load i32, i32* %xhv_name_count702, align 4
  %cmp703 = icmp eq i32 %441, -1
  br i1 %cmp703, label %cond.true705, label %cond.false706

cond.true705:                                     ; preds = %cond.false695
  br label %cond.end715

cond.false706:                                    ; preds = %cond.false695
  %442 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u707 = getelementptr inbounds %struct.hv, %struct.hv* %442, i32 0, i32 3
  %svu_hash708 = bitcast %union.anon.4* %sv_u707 to %struct.he***
  %443 = load %struct.he**, %struct.he*** %svu_hash708, align 8
  %444 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any709 = getelementptr inbounds %struct.hv, %struct.hv* %444, i32 0, i32 0
  %445 = load %struct.xpvhv*, %struct.xpvhv** %sv_any709, align 8
  %xhv_max710 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %445, i32 0, i32 3
  %446 = load i64, i64* %xhv_max710, align 8
  %add711 = add i64 %446, 1
  %arrayidx712 = getelementptr inbounds %struct.he*, %struct.he** %443, i64 %add711
  %447 = bitcast %struct.he** %arrayidx712 to %struct.xpvhv_aux*
  %xhv_name_u713 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %447, i32 0, i32 0
  %xhvnameu_name714 = bitcast %union._xhvnameu* %xhv_name_u713 to %struct.hek**
  %448 = load %struct.hek*, %struct.hek** %xhvnameu_name714, align 8
  br label %cond.end715

cond.end715:                                      ; preds = %cond.false706, %cond.true705
  %cond716 = phi %struct.hek* [ null, %cond.true705 ], [ %448, %cond.false706 ]
  br label %cond.end717

cond.end717:                                      ; preds = %cond.end715, %cond.true685
  %cond718 = phi %struct.hek* [ %434, %cond.true685 ], [ %cond716, %cond.end715 ]
  br label %cond.end719

cond.end719:                                      ; preds = %cond.end717, %cond.true666
  %cond720 = phi %struct.hek* [ %419, %cond.true666 ], [ %cond718, %cond.end717 ]
  %hek_key721 = getelementptr inbounds %struct.hek, %struct.hek* %cond720, i32 0, i32 2
  %arraydecay722 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key721, i64 0, i64 0
  br label %cond.end724

cond.false723:                                    ; preds = %land.lhs.true647, %land.lhs.true641, %cond.true637
  br label %cond.end724

cond.end724:                                      ; preds = %cond.false723, %cond.end719
  %cond725 = phi i8* [ %arraydecay722, %cond.end719 ], [ null, %cond.false723 ]
  %449 = bitcast i8* %cond725 to %struct.hv*
  %tobool726 = icmp ne %struct.hv* %449, null
  br i1 %tobool726, label %if.then729, label %if.end730

cond.false727:                                    ; preds = %if.then631
  %450 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool728 = icmp ne %struct.hv* %450, null
  br i1 %tobool728, label %if.then729, label %if.end730

if.then729:                                       ; preds = %cond.false727, %cond.end724
  %451 = load %struct.hv*, %struct.hv** %stash, align 8
  %452 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %453 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %454 = bitcast %struct.sv* %453 to %struct.gv*
  call void @Perl_mro_package_moved(%struct.hv* %451, %struct.hv* %452, %struct.gv* %454, i32 0)
  br label %if.end730

if.end730:                                        ; preds = %if.then729, %cond.false727, %cond.end724
  br label %if.end731

if.end731:                                        ; preds = %if.end730, %if.end623
  br label %if.end732

if.end732:                                        ; preds = %if.end731, %if.else574
  br label %if.end733

if.end733:                                        ; preds = %if.end732, %if.then573
  br label %if.end1254

if.else734:                                       ; preds = %lor.lhs.false565, %if.else555
  %455 = load i32, i32* %dtype, align 4
  %cmp735 = icmp eq i32 %455, 8
  br i1 %cmp735, label %land.lhs.true740, label %lor.lhs.false737

lor.lhs.false737:                                 ; preds = %if.else734
  %456 = load i32, i32* %dtype, align 4
  %cmp738 = icmp eq i32 %456, 10
  br i1 %cmp738, label %land.lhs.true740, label %if.else755

land.lhs.true740:                                 ; preds = %lor.lhs.false737, %if.else734
  %457 = load i32, i32* %stype, align 4
  %cmp741 = icmp eq i32 %457, 8
  br i1 %cmp741, label %if.then753, label %lor.lhs.false743

lor.lhs.false743:                                 ; preds = %land.lhs.true740
  %458 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags744 = getelementptr inbounds %struct.sv, %struct.sv* %458, i32 0, i32 2
  %459 = load i32, i32* %sv_flags744, align 4
  %and745 = and i32 %459, 255
  %cmp746 = icmp eq i32 %and745, 8
  br i1 %cmp746, label %if.then753, label %lor.lhs.false748

lor.lhs.false748:                                 ; preds = %lor.lhs.false743
  %460 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags749 = getelementptr inbounds %struct.sv, %struct.sv* %460, i32 0, i32 2
  %461 = load i32, i32* %sv_flags749, align 4
  %and750 = and i32 %461, 16826623
  %cmp751 = icmp eq i32 %and750, 16777226
  br i1 %cmp751, label %if.then753, label %if.else755

if.then753:                                       ; preds = %lor.lhs.false748, %lor.lhs.false743, %land.lhs.true740
  %462 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %463 = bitcast %struct.sv* %462 to %struct.p5rx*
  %464 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %465 = bitcast %struct.sv* %464 to %struct.p5rx*
  %call754 = call %struct.p5rx* @Perl_reg_temp_copy(%struct.p5rx* %463, %struct.p5rx* %465)
  br label %if.end1253

if.else755:                                       ; preds = %lor.lhs.false748, %lor.lhs.false737
  %466 = load i32, i32* %sflags, align 4
  %and756 = and i32 %466, 16384
  %tobool757 = icmp ne i32 %and756, 0
  br i1 %tobool757, label %if.then758, label %if.else1182

if.then758:                                       ; preds = %if.else755
  %467 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any759 = getelementptr inbounds %struct.sv, %struct.sv* %467, i32 0, i32 0
  %468 = load i8*, i8** %sv_any759, align 8
  %469 = bitcast i8* %468 to %struct.xpv*
  %xpv_cur760 = getelementptr inbounds %struct.xpv, %struct.xpv* %469, i32 0, i32 2
  %470 = load i64, i64* %xpv_cur760, align 8
  store i64 %470, i64* %cur, align 8
  %471 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any762 = getelementptr inbounds %struct.sv, %struct.sv* %471, i32 0, i32 0
  %472 = load i8*, i8** %sv_any762, align 8
  %473 = bitcast i8* %472 to %struct.xpv*
  %xpv_len_u763 = getelementptr inbounds %struct.xpv, %struct.xpv* %473, i32 0, i32 3
  %xpvlenu_len764 = bitcast %union.anon.19* %xpv_len_u763 to i64*
  %474 = load i64, i64* %xpvlenu_len764, align 8
  store i64 %474, i64* %len761, align 8
  %475 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags765 = getelementptr inbounds %struct.sv, %struct.sv* %475, i32 0, i32 2
  %476 = load i32, i32* %sv_flags765, align 4
  %and766 = and i32 %476, 1610547455
  store i32 %and766, i32* %sv_flags765, align 4
  %477 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags767 = getelementptr inbounds %struct.sv, %struct.sv* %477, i32 0, i32 2
  %478 = load i32, i32* %sv_flags767, align 4
  %or768 = or i32 %478, 17408
  store i32 %or768, i32* %sv_flags767, align 4
  %479 = load i32, i32* %sflags, align 4
  %and769 = and i32 %479, 268959744
  %cmp770 = icmp eq i32 %and769, 524288
  br i1 %cmp770, label %land.lhs.true787, label %lor.lhs.false772

lor.lhs.false772:                                 ; preds = %if.then758
  %480 = load i32, i32* %sflags, align 4
  %and773 = and i32 %480, 402849792
  %cmp774 = icmp eq i32 %and773, 131072
  br i1 %cmp774, label %land.lhs.true776, label %if.else904

land.lhs.true776:                                 ; preds = %lor.lhs.false772
  %481 = load i64, i64* %cur, align 8
  %cmp777 = icmp uge i64 %481, 1250
  br i1 %cmp777, label %land.lhs.true779, label %if.else904

land.lhs.true779:                                 ; preds = %land.lhs.true776
  %482 = load i64, i64* %len761, align 8
  %483 = load i64, i64* %cur, align 8
  %sub780 = sub i64 %482, %483
  %cmp781 = icmp ult i64 %sub780, 80
  br i1 %cmp781, label %land.lhs.true783, label %if.else904

land.lhs.true783:                                 ; preds = %land.lhs.true779
  %484 = load i64, i64* %len761, align 8
  %485 = load i64, i64* %cur, align 8
  %mul784 = mul i64 2, %485
  %cmp785 = icmp ult i64 %484, %mul784
  br i1 %cmp785, label %land.lhs.true787, label %if.else904

land.lhs.true787:                                 ; preds = %land.lhs.true783, %if.then758
  %486 = load i32, i32* %sflags, align 4
  %and788 = and i32 %486, 33554432
  %tobool789 = icmp ne i32 %and788, 0
  br i1 %tobool789, label %if.else904, label %land.lhs.true790

land.lhs.true790:                                 ; preds = %land.lhs.true787
  %487 = load i32, i32* %flags.addr, align 4
  %and791 = and i32 %487, 16
  %tobool792 = icmp ne i32 %and791, 0
  br i1 %tobool792, label %if.else904, label %land.lhs.true793

land.lhs.true793:                                 ; preds = %land.lhs.true790
  %488 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_refcnt794 = getelementptr inbounds %struct.sv, %struct.sv* %488, i32 0, i32 1
  %489 = load i32, i32* %sv_refcnt794, align 8
  %cmp795 = icmp eq i32 %489, 1
  br i1 %cmp795, label %land.lhs.true797, label %if.else904

land.lhs.true797:                                 ; preds = %land.lhs.true793
  %490 = load i64, i64* %len761, align 8
  %tobool798 = icmp ne i64 %490, 0
  br i1 %tobool798, label %if.then799, label %if.else904

if.then799:                                       ; preds = %land.lhs.true797
  %491 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u800 = getelementptr inbounds %struct.sv, %struct.sv* %491, i32 0, i32 3
  %svu_pv801 = bitcast %union.anon* %sv_u800 to i8**
  %492 = load i8*, i8** %svu_pv801, align 8
  %add.ptr802 = getelementptr inbounds i8, i8* %492, i64 0
  %tobool803 = icmp ne i8* %add.ptr802, null
  br i1 %tobool803, label %if.then804, label %if.end855

if.then804:                                       ; preds = %if.then799
  br label %do.body805

do.body805:                                       ; preds = %if.then804
  %493 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any806 = getelementptr inbounds %struct.sv, %struct.sv* %493, i32 0, i32 0
  %494 = load i8*, i8** %sv_any806, align 8
  %495 = bitcast i8* %494 to %struct.xpv*
  %xpv_len_u807 = getelementptr inbounds %struct.xpv, %struct.xpv* %495, i32 0, i32 3
  %xpvlenu_len808 = bitcast %union.anon.19* %xpv_len_u807 to i64*
  %496 = load i64, i64* %xpvlenu_len808, align 8
  %tobool809 = icmp ne i64 %496, 0
  br i1 %tobool809, label %if.then810, label %if.end853

if.then810:                                       ; preds = %do.body805
  %497 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags811 = getelementptr inbounds %struct.sv, %struct.sv* %497, i32 0, i32 2
  %498 = load i32, i32* %sv_flags811, align 4
  %and812 = and i32 %498, 33554432
  %tobool813 = icmp ne i32 %and812, 0
  br i1 %tobool813, label %cond.true814, label %cond.false815

cond.true814:                                     ; preds = %if.then810
  br i1 true, label %if.then816, label %if.end850

cond.false815:                                    ; preds = %if.then810
  br i1 false, label %if.then816, label %if.end850

if.then816:                                       ; preds = %cond.false815, %cond.true814
  br label %do.body818

do.body818:                                       ; preds = %if.then816
  %499 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags819 = getelementptr inbounds %struct.sv, %struct.sv* %499, i32 0, i32 2
  %500 = load i32, i32* %sv_flags819, align 4
  %and820 = and i32 %500, 33554432
  %tobool821 = icmp ne i32 %and820, 0
  br i1 %tobool821, label %if.then822, label %if.else836

if.then822:                                       ; preds = %do.body818
  %501 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u823 = getelementptr inbounds %struct.sv, %struct.sv* %501, i32 0, i32 3
  %svu_pv824 = bitcast %union.anon* %sv_u823 to i8**
  %502 = load i8*, i8** %svu_pv824, align 8
  %add.ptr825 = getelementptr inbounds i8, i8* %502, i64 0
  %arrayidx826 = getelementptr inbounds i8, i8* %add.ptr825, i64 -1
  %503 = load i8, i8* %arrayidx826, align 1
  %conv827 = zext i8 %503 to i64
  store i64 %conv827, i64* %zok817, align 8
  %504 = load i64, i64* %zok817, align 8
  %tobool828 = icmp ne i64 %504, 0
  br i1 %tobool828, label %if.end835, label %if.then829

if.then829:                                       ; preds = %if.then822
  %505 = bitcast i64* %zok817 to i8*
  %506 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u830 = getelementptr inbounds %struct.sv, %struct.sv* %506, i32 0, i32 3
  %svu_pv831 = bitcast %union.anon* %sv_u830 to i8**
  %507 = load i8*, i8** %svu_pv831, align 8
  %add.ptr832 = getelementptr inbounds i8, i8* %507, i64 0
  %add.ptr833 = getelementptr inbounds i8, i8* %add.ptr832, i64 -1
  %add.ptr834 = getelementptr inbounds i8, i8* %add.ptr833, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %505, i8* align 1 %add.ptr834, i64 8, i1 false)
  br label %if.end835

if.end835:                                        ; preds = %if.then829, %if.then822
  br label %if.end837

if.else836:                                       ; preds = %do.body818
  store i64 0, i64* %zok817, align 8
  br label %if.end837

if.end837:                                        ; preds = %if.else836, %if.end835
  br label %do.end838

do.end838:                                        ; preds = %if.end837
  br label %do.body839

do.body839:                                       ; preds = %do.end838
  %508 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u840 = getelementptr inbounds %struct.sv, %struct.sv* %508, i32 0, i32 3
  %svu_pv841 = bitcast %union.anon* %sv_u840 to i8**
  %509 = load i8*, i8** %svu_pv841, align 8
  %add.ptr842 = getelementptr inbounds i8, i8* %509, i64 0
  %510 = load i64, i64* %zok817, align 8
  %idx.neg843 = sub i64 0, %510
  %add.ptr844 = getelementptr inbounds i8, i8* %add.ptr842, i64 %idx.neg843
  %511 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u845 = getelementptr inbounds %struct.sv, %struct.sv* %511, i32 0, i32 3
  %svu_pv846 = bitcast %union.anon* %sv_u845 to i8**
  store i8* %add.ptr844, i8** %svu_pv846, align 8
  br label %do.end847

do.end847:                                        ; preds = %do.body839
  %512 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags848 = getelementptr inbounds %struct.sv, %struct.sv* %512, i32 0, i32 2
  %513 = load i32, i32* %sv_flags848, align 4
  %and849 = and i32 %513, -33554433
  store i32 %and849, i32* %sv_flags848, align 4
  br label %if.end850

if.end850:                                        ; preds = %do.end847, %cond.false815, %cond.true814
  %514 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u851 = getelementptr inbounds %struct.sv, %struct.sv* %514, i32 0, i32 3
  %svu_pv852 = bitcast %union.anon* %sv_u851 to i8**
  %515 = load i8*, i8** %svu_pv852, align 8
  call void @Perl_safesysfree(i8* %515)
  br label %if.end853

if.end853:                                        ; preds = %if.end850, %do.body805
  br label %do.end854

do.end854:                                        ; preds = %if.end853
  br label %if.end855

if.end855:                                        ; preds = %do.end854, %if.then799
  br label %do.body856

do.body856:                                       ; preds = %if.end855
  %516 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u857 = getelementptr inbounds %struct.sv, %struct.sv* %516, i32 0, i32 3
  %svu_pv858 = bitcast %union.anon* %sv_u857 to i8**
  %517 = load i8*, i8** %svu_pv858, align 8
  %add.ptr859 = getelementptr inbounds i8, i8* %517, i64 0
  %518 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u860 = getelementptr inbounds %struct.sv, %struct.sv* %518, i32 0, i32 3
  %svu_pv861 = bitcast %union.anon* %sv_u860 to i8**
  store i8* %add.ptr859, i8** %svu_pv861, align 8
  br label %do.end862

do.end862:                                        ; preds = %do.body856
  br label %do.body863

do.body863:                                       ; preds = %do.end862
  %519 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any864 = getelementptr inbounds %struct.sv, %struct.sv* %519, i32 0, i32 0
  %520 = load i8*, i8** %sv_any864, align 8
  %521 = bitcast i8* %520 to %struct.xpv*
  %xpv_len_u865 = getelementptr inbounds %struct.xpv, %struct.xpv* %521, i32 0, i32 3
  %xpvlenu_len866 = bitcast %union.anon.19* %xpv_len_u865 to i64*
  %522 = load i64, i64* %xpvlenu_len866, align 8
  %523 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any867 = getelementptr inbounds %struct.sv, %struct.sv* %523, i32 0, i32 0
  %524 = load i8*, i8** %sv_any867, align 8
  %525 = bitcast i8* %524 to %struct.xpv*
  %xpv_len_u868 = getelementptr inbounds %struct.xpv, %struct.xpv* %525, i32 0, i32 3
  %xpvlenu_len869 = bitcast %union.anon.19* %xpv_len_u868 to i64*
  store i64 %522, i64* %xpvlenu_len869, align 8
  br label %do.end870

do.end870:                                        ; preds = %do.body863
  br label %do.body871

do.body871:                                       ; preds = %do.end870
  %526 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any872 = getelementptr inbounds %struct.sv, %struct.sv* %526, i32 0, i32 0
  %527 = load i8*, i8** %sv_any872, align 8
  %528 = bitcast i8* %527 to %struct.xpv*
  %xpv_cur873 = getelementptr inbounds %struct.xpv, %struct.xpv* %528, i32 0, i32 2
  %529 = load i64, i64* %xpv_cur873, align 8
  %530 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any874 = getelementptr inbounds %struct.sv, %struct.sv* %530, i32 0, i32 0
  %531 = load i8*, i8** %sv_any874, align 8
  %532 = bitcast i8* %531 to %struct.xpv*
  %xpv_cur875 = getelementptr inbounds %struct.xpv, %struct.xpv* %532, i32 0, i32 2
  store i64 %529, i64* %xpv_cur875, align 8
  br label %do.end876

do.end876:                                        ; preds = %do.body871
  %533 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags877 = getelementptr inbounds %struct.sv, %struct.sv* %533, i32 0, i32 2
  %534 = load i32, i32* %sv_flags877, align 4
  %and878 = and i32 %534, -524289
  store i32 %and878, i32* %sv_flags877, align 4
  %535 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags879 = getelementptr inbounds %struct.sv, %struct.sv* %535, i32 0, i32 2
  %536 = load i32, i32* %sv_flags879, align 4
  %and880 = and i32 %536, 1610547455
  store i32 %and880, i32* %sv_flags879, align 4
  %537 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags881 = getelementptr inbounds %struct.sv, %struct.sv* %537, i32 0, i32 2
  %538 = load i32, i32* %sv_flags881, align 4
  %and882 = and i32 %538, 33554432
  %tobool883 = icmp ne i32 %and882, 0
  br i1 %tobool883, label %land.rhs884, label %land.end887

land.rhs884:                                      ; preds = %do.end876
  %539 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call885 = call i32 @Perl_sv_backoff(%struct.sv* %539)
  %tobool886 = icmp ne i32 %call885, 0
  br label %land.end887

land.end887:                                      ; preds = %land.rhs884, %do.end876
  %540 = phi i1 [ false, %do.end876 ], [ %tobool886, %land.rhs884 ]
  %land.ext888 = zext i1 %540 to i32
  br label %do.body889

do.body889:                                       ; preds = %land.end887
  %541 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u890 = getelementptr inbounds %struct.sv, %struct.sv* %541, i32 0, i32 3
  %svu_pv891 = bitcast %union.anon* %sv_u890 to i8**
  store i8* null, i8** %svu_pv891, align 8
  br label %do.end892

do.end892:                                        ; preds = %do.body889
  br label %do.body893

do.body893:                                       ; preds = %do.end892
  %542 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any894 = getelementptr inbounds %struct.sv, %struct.sv* %542, i32 0, i32 0
  %543 = load i8*, i8** %sv_any894, align 8
  %544 = bitcast i8* %543 to %struct.xpv*
  %xpv_len_u895 = getelementptr inbounds %struct.xpv, %struct.xpv* %544, i32 0, i32 3
  %xpvlenu_len896 = bitcast %union.anon.19* %xpv_len_u895 to i64*
  store i64 0, i64* %xpvlenu_len896, align 8
  br label %do.end897

do.end897:                                        ; preds = %do.body893
  br label %do.body898

do.body898:                                       ; preds = %do.end897
  %545 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any899 = getelementptr inbounds %struct.sv, %struct.sv* %545, i32 0, i32 0
  %546 = load i8*, i8** %sv_any899, align 8
  %547 = bitcast i8* %546 to %struct.xpv*
  %xpv_cur900 = getelementptr inbounds %struct.xpv, %struct.xpv* %547, i32 0, i32 2
  store i64 0, i64* %xpv_cur900, align 8
  br label %do.end901

do.end901:                                        ; preds = %do.body898
  %548 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags902 = getelementptr inbounds %struct.sv, %struct.sv* %548, i32 0, i32 2
  %549 = load i32, i32* %sv_flags902, align 4
  %and903 = and i32 %549, -524289
  store i32 %and903, i32* %sv_flags902, align 4
  br label %if.end1134

if.else904:                                       ; preds = %land.lhs.true797, %land.lhs.true793, %land.lhs.true790, %land.lhs.true787, %land.lhs.true783, %land.lhs.true779, %land.lhs.true776, %lor.lhs.false772
  %550 = load i32, i32* %flags.addr, align 4
  %and905 = and i32 %550, 512
  %tobool906 = icmp ne i32 %and905, 0
  br i1 %tobool906, label %land.lhs.true907, label %if.else1099

land.lhs.true907:                                 ; preds = %if.else904
  %551 = load i32, i32* %sflags, align 4
  %and908 = and i32 %551, 268435456
  %tobool909 = icmp ne i32 %and908, 0
  br i1 %tobool909, label %cond.true910, label %cond.false941

cond.true910:                                     ; preds = %land.lhs.true907
  %552 = load i64, i64* %len761, align 8
  %tobool911 = icmp ne i64 %552, 0
  br i1 %tobool911, label %lor.lhs.false912, label %if.then979

lor.lhs.false912:                                 ; preds = %cond.true910
  %553 = load i64, i64* %cur, align 8
  %cmp913 = icmp uge i64 %553, 1250
  br i1 %cmp913, label %land.lhs.true915, label %lor.lhs.false923

land.lhs.true915:                                 ; preds = %lor.lhs.false912
  %554 = load i64, i64* %len761, align 8
  %555 = load i64, i64* %cur, align 8
  %sub916 = sub i64 %554, %555
  %cmp917 = icmp ult i64 %sub916, 80
  br i1 %cmp917, label %land.lhs.true919, label %lor.lhs.false923

land.lhs.true919:                                 ; preds = %land.lhs.true915
  %556 = load i64, i64* %len761, align 8
  %557 = load i64, i64* %cur, align 8
  %mul920 = mul i64 2, %557
  %cmp921 = icmp ult i64 %556, %mul920
  br i1 %cmp921, label %land.lhs.true930, label %lor.lhs.false923

lor.lhs.false923:                                 ; preds = %land.lhs.true919, %land.lhs.true915, %lor.lhs.false912
  %558 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any924 = getelementptr inbounds %struct.sv, %struct.sv* %558, i32 0, i32 0
  %559 = load i8*, i8** %sv_any924, align 8
  %560 = bitcast i8* %559 to %struct.xpv*
  %xpv_len_u925 = getelementptr inbounds %struct.xpv, %struct.xpv* %560, i32 0, i32 3
  %xpvlenu_len926 = bitcast %union.anon.19* %xpv_len_u925 to i64*
  %561 = load i64, i64* %xpvlenu_len926, align 8
  %562 = load i64, i64* %cur, align 8
  %add927 = add i64 %562, 1
  %cmp928 = icmp ult i64 %561, %add927
  br i1 %cmp928, label %land.lhs.true930, label %if.else1099

land.lhs.true930:                                 ; preds = %lor.lhs.false923, %land.lhs.true919
  %563 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u931 = getelementptr inbounds %struct.sv, %struct.sv* %563, i32 0, i32 3
  %svu_pv932 = bitcast %union.anon* %sv_u931 to i8**
  %564 = load i8*, i8** %svu_pv932, align 8
  %565 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any933 = getelementptr inbounds %struct.sv, %struct.sv* %565, i32 0, i32 0
  %566 = load i8*, i8** %sv_any933, align 8
  %567 = bitcast i8* %566 to %struct.xpv*
  %xpv_len_u934 = getelementptr inbounds %struct.xpv, %struct.xpv* %567, i32 0, i32 3
  %xpvlenu_len935 = bitcast %union.anon.19* %xpv_len_u934 to i64*
  %568 = load i64, i64* %xpvlenu_len935, align 8
  %add.ptr936 = getelementptr inbounds i8, i8* %564, i64 %568
  %add.ptr937 = getelementptr inbounds i8, i8* %add.ptr936, i64 -1
  %569 = load i8, i8* %add.ptr937, align 1
  %conv938 = zext i8 %569 to i32
  %cmp939 = icmp ne i32 %conv938, 255
  br i1 %cmp939, label %if.then979, label %if.else1099

cond.false941:                                    ; preds = %land.lhs.true907
  %570 = load i32, i32* %sflags, align 4
  %and942 = and i32 %570, 251743232
  %cmp943 = icmp eq i32 %and942, 17408
  br i1 %cmp943, label %land.lhs.true945, label %if.else1099

land.lhs.true945:                                 ; preds = %cond.false941
  %571 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags946 = getelementptr inbounds %struct.sv, %struct.sv* %571, i32 0, i32 2
  %572 = load i32, i32* %sv_flags946, align 4
  %and947 = and i32 %572, 67108864
  %tobool948 = icmp ne i32 %and947, 0
  br i1 %tobool948, label %if.else1099, label %land.lhs.true949

land.lhs.true949:                                 ; preds = %land.lhs.true945
  %573 = load i64, i64* %len761, align 8
  %574 = load i64, i64* %cur, align 8
  %sub950 = sub i64 %573, %574
  %cmp951 = icmp ult i64 %sub950, 80
  br i1 %cmp951, label %land.lhs.true953, label %if.else1099

land.lhs.true953:                                 ; preds = %land.lhs.true949
  %575 = load i64, i64* %len761, align 8
  %576 = load i64, i64* %cur, align 8
  %mul954 = mul i64 2, %576
  %cmp955 = icmp ult i64 %575, %mul954
  br i1 %cmp955, label %land.lhs.true957, label %if.else1099

land.lhs.true957:                                 ; preds = %land.lhs.true953
  %577 = load i64, i64* %cur, align 8
  %add958 = add i64 %577, 1
  %578 = load i64, i64* %len761, align 8
  %cmp959 = icmp ult i64 %add958, %578
  br i1 %cmp959, label %land.lhs.true961, label %if.else1099

land.lhs.true961:                                 ; preds = %land.lhs.true957
  %579 = load i64, i64* %cur, align 8
  %cmp962 = icmp uge i64 %579, 1250
  br i1 %cmp962, label %land.lhs.true964, label %lor.lhs.false972

land.lhs.true964:                                 ; preds = %land.lhs.true961
  %580 = load i64, i64* %len761, align 8
  %581 = load i64, i64* %cur, align 8
  %sub965 = sub i64 %580, %581
  %cmp966 = icmp ult i64 %sub965, 80
  br i1 %cmp966, label %land.lhs.true968, label %lor.lhs.false972

land.lhs.true968:                                 ; preds = %land.lhs.true964
  %582 = load i64, i64* %len761, align 8
  %583 = load i64, i64* %cur, align 8
  %mul969 = mul i64 2, %583
  %cmp970 = icmp ult i64 %582, %mul969
  br i1 %cmp970, label %if.then979, label %lor.lhs.false972

lor.lhs.false972:                                 ; preds = %land.lhs.true968, %land.lhs.true964, %land.lhs.true961
  %584 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any973 = getelementptr inbounds %struct.sv, %struct.sv* %584, i32 0, i32 0
  %585 = load i8*, i8** %sv_any973, align 8
  %586 = bitcast i8* %585 to %struct.xpv*
  %xpv_len_u974 = getelementptr inbounds %struct.xpv, %struct.xpv* %586, i32 0, i32 3
  %xpvlenu_len975 = bitcast %union.anon.19* %xpv_len_u974 to i64*
  %587 = load i64, i64* %xpvlenu_len975, align 8
  %588 = load i64, i64* %cur, align 8
  %add976 = add i64 %588, 1
  %cmp977 = icmp ult i64 %587, %add976
  br i1 %cmp977, label %if.then979, label %if.else1099

if.then979:                                       ; preds = %lor.lhs.false972, %land.lhs.true968, %land.lhs.true930, %cond.true910
  %589 = load i32, i32* %sflags, align 4
  %and980 = and i32 %589, 268435456
  %tobool981 = icmp ne i32 %and980, 0
  br i1 %tobool981, label %if.end992, label %if.then982

if.then982:                                       ; preds = %if.then979
  %590 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags983 = getelementptr inbounds %struct.sv, %struct.sv* %590, i32 0, i32 2
  %591 = load i32, i32* %sv_flags983, align 4
  %or984 = or i32 %591, 268435456
  store i32 %or984, i32* %sv_flags983, align 4
  %592 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u985 = getelementptr inbounds %struct.sv, %struct.sv* %592, i32 0, i32 3
  %svu_pv986 = bitcast %union.anon* %sv_u985 to i8**
  %593 = load i8*, i8** %svu_pv986, align 8
  %594 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any987 = getelementptr inbounds %struct.sv, %struct.sv* %594, i32 0, i32 0
  %595 = load i8*, i8** %sv_any987, align 8
  %596 = bitcast i8* %595 to %struct.xpv*
  %xpv_len_u988 = getelementptr inbounds %struct.xpv, %struct.xpv* %596, i32 0, i32 3
  %xpvlenu_len989 = bitcast %union.anon.19* %xpv_len_u988 to i64*
  %597 = load i64, i64* %xpvlenu_len989, align 8
  %add.ptr990 = getelementptr inbounds i8, i8* %593, i64 %597
  %add.ptr991 = getelementptr inbounds i8, i8* %add.ptr990, i64 -1
  store i8 0, i8* %add.ptr991, align 1
  br label %if.end992

if.end992:                                        ; preds = %if.then982, %if.then979
  %598 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u993 = getelementptr inbounds %struct.sv, %struct.sv* %598, i32 0, i32 3
  %svu_pv994 = bitcast %union.anon* %sv_u993 to i8**
  %599 = load i8*, i8** %svu_pv994, align 8
  %add.ptr995 = getelementptr inbounds i8, i8* %599, i64 0
  %tobool996 = icmp ne i8* %add.ptr995, null
  br i1 %tobool996, label %if.then997, label %if.end1048

if.then997:                                       ; preds = %if.end992
  br label %do.body998

do.body998:                                       ; preds = %if.then997
  %600 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any999 = getelementptr inbounds %struct.sv, %struct.sv* %600, i32 0, i32 0
  %601 = load i8*, i8** %sv_any999, align 8
  %602 = bitcast i8* %601 to %struct.xpv*
  %xpv_len_u1000 = getelementptr inbounds %struct.xpv, %struct.xpv* %602, i32 0, i32 3
  %xpvlenu_len1001 = bitcast %union.anon.19* %xpv_len_u1000 to i64*
  %603 = load i64, i64* %xpvlenu_len1001, align 8
  %tobool1002 = icmp ne i64 %603, 0
  br i1 %tobool1002, label %if.then1003, label %if.end1046

if.then1003:                                      ; preds = %do.body998
  %604 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1004 = getelementptr inbounds %struct.sv, %struct.sv* %604, i32 0, i32 2
  %605 = load i32, i32* %sv_flags1004, align 4
  %and1005 = and i32 %605, 33554432
  %tobool1006 = icmp ne i32 %and1005, 0
  br i1 %tobool1006, label %cond.true1007, label %cond.false1008

cond.true1007:                                    ; preds = %if.then1003
  br i1 true, label %if.then1009, label %if.end1043

cond.false1008:                                   ; preds = %if.then1003
  br i1 false, label %if.then1009, label %if.end1043

if.then1009:                                      ; preds = %cond.false1008, %cond.true1007
  br label %do.body1011

do.body1011:                                      ; preds = %if.then1009
  %606 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1012 = getelementptr inbounds %struct.sv, %struct.sv* %606, i32 0, i32 2
  %607 = load i32, i32* %sv_flags1012, align 4
  %and1013 = and i32 %607, 33554432
  %tobool1014 = icmp ne i32 %and1013, 0
  br i1 %tobool1014, label %if.then1015, label %if.else1029

if.then1015:                                      ; preds = %do.body1011
  %608 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u1016 = getelementptr inbounds %struct.sv, %struct.sv* %608, i32 0, i32 3
  %svu_pv1017 = bitcast %union.anon* %sv_u1016 to i8**
  %609 = load i8*, i8** %svu_pv1017, align 8
  %add.ptr1018 = getelementptr inbounds i8, i8* %609, i64 0
  %arrayidx1019 = getelementptr inbounds i8, i8* %add.ptr1018, i64 -1
  %610 = load i8, i8* %arrayidx1019, align 1
  %conv1020 = zext i8 %610 to i64
  store i64 %conv1020, i64* %zok1010, align 8
  %611 = load i64, i64* %zok1010, align 8
  %tobool1021 = icmp ne i64 %611, 0
  br i1 %tobool1021, label %if.end1028, label %if.then1022

if.then1022:                                      ; preds = %if.then1015
  %612 = bitcast i64* %zok1010 to i8*
  %613 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u1023 = getelementptr inbounds %struct.sv, %struct.sv* %613, i32 0, i32 3
  %svu_pv1024 = bitcast %union.anon* %sv_u1023 to i8**
  %614 = load i8*, i8** %svu_pv1024, align 8
  %add.ptr1025 = getelementptr inbounds i8, i8* %614, i64 0
  %add.ptr1026 = getelementptr inbounds i8, i8* %add.ptr1025, i64 -1
  %add.ptr1027 = getelementptr inbounds i8, i8* %add.ptr1026, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %612, i8* align 1 %add.ptr1027, i64 8, i1 false)
  br label %if.end1028

if.end1028:                                       ; preds = %if.then1022, %if.then1015
  br label %if.end1030

if.else1029:                                      ; preds = %do.body1011
  store i64 0, i64* %zok1010, align 8
  br label %if.end1030

if.end1030:                                       ; preds = %if.else1029, %if.end1028
  br label %do.end1031

do.end1031:                                       ; preds = %if.end1030
  br label %do.body1032

do.body1032:                                      ; preds = %do.end1031
  %615 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u1033 = getelementptr inbounds %struct.sv, %struct.sv* %615, i32 0, i32 3
  %svu_pv1034 = bitcast %union.anon* %sv_u1033 to i8**
  %616 = load i8*, i8** %svu_pv1034, align 8
  %add.ptr1035 = getelementptr inbounds i8, i8* %616, i64 0
  %617 = load i64, i64* %zok1010, align 8
  %idx.neg1036 = sub i64 0, %617
  %add.ptr1037 = getelementptr inbounds i8, i8* %add.ptr1035, i64 %idx.neg1036
  %618 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u1038 = getelementptr inbounds %struct.sv, %struct.sv* %618, i32 0, i32 3
  %svu_pv1039 = bitcast %union.anon* %sv_u1038 to i8**
  store i8* %add.ptr1037, i8** %svu_pv1039, align 8
  br label %do.end1040

do.end1040:                                       ; preds = %do.body1032
  %619 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1041 = getelementptr inbounds %struct.sv, %struct.sv* %619, i32 0, i32 2
  %620 = load i32, i32* %sv_flags1041, align 4
  %and1042 = and i32 %620, -33554433
  store i32 %and1042, i32* %sv_flags1041, align 4
  br label %if.end1043

if.end1043:                                       ; preds = %do.end1040, %cond.false1008, %cond.true1007
  %621 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u1044 = getelementptr inbounds %struct.sv, %struct.sv* %621, i32 0, i32 3
  %svu_pv1045 = bitcast %union.anon* %sv_u1044 to i8**
  %622 = load i8*, i8** %svu_pv1045, align 8
  call void @Perl_safesysfree(i8* %622)
  br label %if.end1046

if.end1046:                                       ; preds = %if.end1043, %do.body998
  br label %do.end1047

do.end1047:                                       ; preds = %if.end1046
  br label %if.end1048

if.end1048:                                       ; preds = %do.end1047, %if.end992
  %623 = load i64, i64* %len761, align 8
  %tobool1049 = icmp ne i64 %623, 0
  br i1 %tobool1049, label %if.then1050, label %if.else1070

if.then1050:                                      ; preds = %if.end1048
  %624 = load i32, i32* %sflags, align 4
  %and1051 = and i32 %624, 268435456
  %tobool1052 = icmp ne i32 %and1051, 0
  br i1 %tobool1052, label %if.then1053, label %if.end1054

if.then1053:                                      ; preds = %if.then1050
  br label %if.end1054

if.end1054:                                       ; preds = %if.then1053, %if.then1050
  %625 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u1055 = getelementptr inbounds %struct.sv, %struct.sv* %625, i32 0, i32 3
  %svu_pv1056 = bitcast %union.anon* %sv_u1055 to i8**
  %626 = load i8*, i8** %svu_pv1056, align 8
  %627 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any1057 = getelementptr inbounds %struct.sv, %struct.sv* %627, i32 0, i32 0
  %628 = load i8*, i8** %sv_any1057, align 8
  %629 = bitcast i8* %628 to %struct.xpv*
  %xpv_len_u1058 = getelementptr inbounds %struct.xpv, %struct.xpv* %629, i32 0, i32 3
  %xpvlenu_len1059 = bitcast %union.anon.19* %xpv_len_u1058 to i64*
  %630 = load i64, i64* %xpvlenu_len1059, align 8
  %add.ptr1060 = getelementptr inbounds i8, i8* %626, i64 %630
  %add.ptr1061 = getelementptr inbounds i8, i8* %add.ptr1060, i64 -1
  %631 = load i8, i8* %add.ptr1061, align 1
  %inc1062 = add i8 %631, 1
  store i8 %inc1062, i8* %add.ptr1061, align 1
  br label %do.body1063

do.body1063:                                      ; preds = %if.end1054
  %632 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u1064 = getelementptr inbounds %struct.sv, %struct.sv* %632, i32 0, i32 3
  %svu_pv1065 = bitcast %union.anon* %sv_u1064 to i8**
  %633 = load i8*, i8** %svu_pv1065, align 8
  %add.ptr1066 = getelementptr inbounds i8, i8* %633, i64 0
  %634 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u1067 = getelementptr inbounds %struct.sv, %struct.sv* %634, i32 0, i32 3
  %svu_pv1068 = bitcast %union.anon* %sv_u1067 to i8**
  store i8* %add.ptr1066, i8** %svu_pv1068, align 8
  br label %do.end1069

do.end1069:                                       ; preds = %do.body1063
  br label %if.end1087

if.else1070:                                      ; preds = %if.end1048
  br label %do.body1071

do.body1071:                                      ; preds = %if.else1070
  %635 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u1072 = getelementptr inbounds %struct.sv, %struct.sv* %635, i32 0, i32 3
  %svu_pv1073 = bitcast %union.anon* %sv_u1072 to i8**
  %636 = load i8*, i8** %svu_pv1073, align 8
  %add.ptr1074 = getelementptr inbounds i8, i8* %636, i64 0
  %add.ptr1075 = getelementptr inbounds i8, i8* %add.ptr1074, i64 sub (i64 0, i64 ptrtoint ([1 x i8]* getelementptr inbounds (%struct.hek, %struct.hek* null, i32 0, i32 2) to i64))
  %637 = bitcast i8* %add.ptr1075 to %struct.hek*
  %638 = bitcast %struct.hek* %637 to i8*
  %add.ptr1076 = getelementptr inbounds i8, i8* %638, i64 sub (i64 0, i64 ptrtoint (%struct.hek* getelementptr inbounds (%struct.shared_he, %struct.shared_he* null, i32 0, i32 1) to i64))
  %639 = bitcast i8* %add.ptr1076 to %struct.shared_he*
  %shared_he_he = getelementptr inbounds %struct.shared_he, %struct.shared_he* %639, i32 0, i32 0
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %shared_he_he, i32 0, i32 2
  %hent_refcount = bitcast %union.anon.0* %he_valu to i64*
  %640 = load i64, i64* %hent_refcount, align 8
  %inc1077 = add i64 %640, 1
  store i64 %inc1077, i64* %hent_refcount, align 8
  %641 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u1078 = getelementptr inbounds %struct.sv, %struct.sv* %641, i32 0, i32 3
  %svu_pv1079 = bitcast %union.anon* %sv_u1078 to i8**
  %642 = load i8*, i8** %svu_pv1079, align 8
  %add.ptr1080 = getelementptr inbounds i8, i8* %642, i64 0
  %add.ptr1081 = getelementptr inbounds i8, i8* %add.ptr1080, i64 sub (i64 0, i64 ptrtoint ([1 x i8]* getelementptr inbounds (%struct.hek, %struct.hek* null, i32 0, i32 2) to i64))
  %643 = bitcast i8* %add.ptr1081 to %struct.hek*
  %hek_key1082 = getelementptr inbounds %struct.hek, %struct.hek* %643, i32 0, i32 2
  %arraydecay1083 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key1082, i64 0, i64 0
  %644 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u1084 = getelementptr inbounds %struct.sv, %struct.sv* %644, i32 0, i32 3
  %svu_pv1085 = bitcast %union.anon* %sv_u1084 to i8**
  store i8* %arraydecay1083, i8** %svu_pv1085, align 8
  br label %do.end1086

do.end1086:                                       ; preds = %do.body1071
  br label %if.end1087

if.end1087:                                       ; preds = %do.end1086, %do.end1069
  br label %do.body1088

do.body1088:                                      ; preds = %if.end1087
  %645 = load i64, i64* %len761, align 8
  %646 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1089 = getelementptr inbounds %struct.sv, %struct.sv* %646, i32 0, i32 0
  %647 = load i8*, i8** %sv_any1089, align 8
  %648 = bitcast i8* %647 to %struct.xpv*
  %xpv_len_u1090 = getelementptr inbounds %struct.xpv, %struct.xpv* %648, i32 0, i32 3
  %xpvlenu_len1091 = bitcast %union.anon.19* %xpv_len_u1090 to i64*
  store i64 %645, i64* %xpvlenu_len1091, align 8
  br label %do.end1092

do.end1092:                                       ; preds = %do.body1088
  br label %do.body1093

do.body1093:                                      ; preds = %do.end1092
  %649 = load i64, i64* %cur, align 8
  %650 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1094 = getelementptr inbounds %struct.sv, %struct.sv* %650, i32 0, i32 0
  %651 = load i8*, i8** %sv_any1094, align 8
  %652 = bitcast i8* %651 to %struct.xpv*
  %xpv_cur1095 = getelementptr inbounds %struct.xpv, %struct.xpv* %652, i32 0, i32 2
  store i64 %649, i64* %xpv_cur1095, align 8
  br label %do.end1096

do.end1096:                                       ; preds = %do.body1093
  %653 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1097 = getelementptr inbounds %struct.sv, %struct.sv* %653, i32 0, i32 2
  %654 = load i32, i32* %sv_flags1097, align 4
  %or1098 = or i32 %654, 268435456
  store i32 %or1098, i32* %sv_flags1097, align 4
  br label %if.end1133

if.else1099:                                      ; preds = %lor.lhs.false972, %land.lhs.true957, %land.lhs.true953, %land.lhs.true949, %land.lhs.true945, %cond.false941, %land.lhs.true930, %lor.lhs.false923, %if.else904
  %655 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1100 = getelementptr inbounds %struct.sv, %struct.sv* %655, i32 0, i32 2
  %656 = load i32, i32* %sv_flags1100, align 4
  %and1101 = and i32 %656, 268435456
  %tobool1102 = icmp ne i32 %and1101, 0
  br i1 %tobool1102, label %cond.true1110, label %lor.lhs.false1103

lor.lhs.false1103:                                ; preds = %if.else1099
  %657 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1104 = getelementptr inbounds %struct.sv, %struct.sv* %657, i32 0, i32 0
  %658 = load i8*, i8** %sv_any1104, align 8
  %659 = bitcast i8* %658 to %struct.xpv*
  %xpv_len_u1105 = getelementptr inbounds %struct.xpv, %struct.xpv* %659, i32 0, i32 3
  %xpvlenu_len1106 = bitcast %union.anon.19* %xpv_len_u1105 to i64*
  %660 = load i64, i64* %xpvlenu_len1106, align 8
  %661 = load i64, i64* %cur, align 8
  %add1107 = add i64 %661, 1
  %cmp1108 = icmp ult i64 %660, %add1107
  br i1 %cmp1108, label %cond.true1110, label %cond.false1113

cond.true1110:                                    ; preds = %lor.lhs.false1103, %if.else1099
  %662 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %663 = load i64, i64* %cur, align 8
  %add1111 = add i64 %663, 1
  %call1112 = call i8* @Perl_sv_grow(%struct.sv* %662, i64 %add1111)
  br label %cond.end1116

cond.false1113:                                   ; preds = %lor.lhs.false1103
  %664 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u1114 = getelementptr inbounds %struct.sv, %struct.sv* %664, i32 0, i32 3
  %svu_pv1115 = bitcast %union.anon* %sv_u1114 to i8**
  %665 = load i8*, i8** %svu_pv1115, align 8
  br label %cond.end1116

cond.end1116:                                     ; preds = %cond.false1113, %cond.true1110
  %cond1117 = phi i8* [ %call1112, %cond.true1110 ], [ %665, %cond.false1113 ]
  %666 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u1118 = getelementptr inbounds %struct.sv, %struct.sv* %666, i32 0, i32 3
  %svu_pv1119 = bitcast %union.anon* %sv_u1118 to i8**
  %667 = load i8*, i8** %svu_pv1119, align 8
  %668 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u1120 = getelementptr inbounds %struct.sv, %struct.sv* %668, i32 0, i32 3
  %svu_pv1121 = bitcast %union.anon* %sv_u1120 to i8**
  %669 = load i8*, i8** %svu_pv1121, align 8
  %add.ptr1122 = getelementptr inbounds i8, i8* %669, i64 0
  %670 = load i64, i64* %cur, align 8
  %mul1123 = mul i64 %670, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %667, i8* align 1 %add.ptr1122, i64 %mul1123, i1 false)
  br label %do.body1124

do.body1124:                                      ; preds = %cond.end1116
  %671 = load i64, i64* %cur, align 8
  %672 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1125 = getelementptr inbounds %struct.sv, %struct.sv* %672, i32 0, i32 0
  %673 = load i8*, i8** %sv_any1125, align 8
  %674 = bitcast i8* %673 to %struct.xpv*
  %xpv_cur1126 = getelementptr inbounds %struct.xpv, %struct.xpv* %674, i32 0, i32 2
  store i64 %671, i64* %xpv_cur1126, align 8
  br label %do.end1127

do.end1127:                                       ; preds = %do.body1124
  %675 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u1128 = getelementptr inbounds %struct.sv, %struct.sv* %675, i32 0, i32 3
  %svu_pv1129 = bitcast %union.anon* %sv_u1128 to i8**
  %676 = load i8*, i8** %svu_pv1129, align 8
  %677 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1130 = getelementptr inbounds %struct.sv, %struct.sv* %677, i32 0, i32 0
  %678 = load i8*, i8** %sv_any1130, align 8
  %679 = bitcast i8* %678 to %struct.xpv*
  %xpv_cur1131 = getelementptr inbounds %struct.xpv, %struct.xpv* %679, i32 0, i32 2
  %680 = load i64, i64* %xpv_cur1131, align 8
  %add.ptr1132 = getelementptr inbounds i8, i8* %676, i64 %680
  store i8 0, i8* %add.ptr1132, align 1
  br label %if.end1133

if.end1133:                                       ; preds = %do.end1127, %do.end1096
  br label %if.end1134

if.end1134:                                       ; preds = %if.end1133, %do.end901
  %681 = load i32, i32* %sflags, align 4
  %and1135 = and i32 %681, 8192
  %tobool1136 = icmp ne i32 %and1135, 0
  br i1 %tobool1136, label %if.then1137, label %if.end1146

if.then1137:                                      ; preds = %if.end1134
  br label %do.body1138

do.body1138:                                      ; preds = %if.then1137
  %682 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any1139 = getelementptr inbounds %struct.sv, %struct.sv* %682, i32 0, i32 0
  %683 = load i8*, i8** %sv_any1139, align 8
  %684 = bitcast i8* %683 to %struct.xpvnv*
  %xnv_u1140 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %684, i32 0, i32 5
  %xnv_nv1141 = bitcast %union._xnvu* %xnv_u1140 to double*
  %685 = load double, double* %xnv_nv1141, align 8
  %686 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1142 = getelementptr inbounds %struct.sv, %struct.sv* %686, i32 0, i32 0
  %687 = load i8*, i8** %sv_any1142, align 8
  %688 = bitcast i8* %687 to %struct.xpvnv*
  %xnv_u1143 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %688, i32 0, i32 5
  %xnv_nv1144 = bitcast %union._xnvu* %xnv_u1143 to double*
  store double %685, double* %xnv_nv1144, align 8
  br label %do.end1145

do.end1145:                                       ; preds = %do.body1138
  br label %if.end1146

if.end1146:                                       ; preds = %do.end1145, %if.end1134
  %689 = load i32, i32* %sflags, align 4
  %and1147 = and i32 %689, 4096
  %tobool1148 = icmp ne i32 %and1147, 0
  br i1 %tobool1148, label %if.then1149, label %if.end1164

if.then1149:                                      ; preds = %if.end1146
  br label %do.body1150

do.body1150:                                      ; preds = %if.then1149
  %690 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any1151 = getelementptr inbounds %struct.sv, %struct.sv* %690, i32 0, i32 0
  %691 = load i8*, i8** %sv_any1151, align 8
  %692 = bitcast i8* %691 to %struct.xpviv*
  %xiv_u1152 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %692, i32 0, i32 4
  %xivu_iv1153 = bitcast %union._xivu* %xiv_u1152 to i64*
  %693 = load i64, i64* %xivu_iv1153, align 8
  %694 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1154 = getelementptr inbounds %struct.sv, %struct.sv* %694, i32 0, i32 0
  %695 = load i8*, i8** %sv_any1154, align 8
  %696 = bitcast i8* %695 to %struct.xpviv*
  %xiv_u1155 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %696, i32 0, i32 4
  %xivu_iv1156 = bitcast %union._xivu* %xiv_u1155 to i64*
  store i64 %693, i64* %xivu_iv1156, align 8
  br label %do.end1157

do.end1157:                                       ; preds = %do.body1150
  %697 = load i32, i32* %sflags, align 4
  %and1158 = and i32 %697, -2147483648
  %tobool1159 = icmp ne i32 %and1158, 0
  br i1 %tobool1159, label %if.then1160, label %if.end1163

if.then1160:                                      ; preds = %do.end1157
  %698 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1161 = getelementptr inbounds %struct.sv, %struct.sv* %698, i32 0, i32 2
  %699 = load i32, i32* %sv_flags1161, align 4
  %or1162 = or i32 %699, -2147483648
  store i32 %or1162, i32* %sv_flags1161, align 4
  br label %if.end1163

if.end1163:                                       ; preds = %if.then1160, %do.end1157
  br label %if.end1164

if.end1164:                                       ; preds = %if.end1163, %if.end1146
  %700 = load i32, i32* %sflags, align 4
  %and1165 = and i32 %700, 536883968
  %701 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1166 = getelementptr inbounds %struct.sv, %struct.sv* %701, i32 0, i32 2
  %702 = load i32, i32* %sv_flags1166, align 4
  %or1167 = or i32 %702, %and1165
  store i32 %or1167, i32* %sv_flags1166, align 4
  %703 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags1168 = getelementptr inbounds %struct.sv, %struct.sv* %703, i32 0, i32 2
  %704 = load i32, i32* %sv_flags1168, align 4
  %and1169 = and i32 %704, 14680064
  %tobool1170 = icmp ne i32 %and1169, 0
  br i1 %tobool1170, label %cond.true1171, label %cond.false1173

cond.true1171:                                    ; preds = %if.end1164
  %705 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call1172 = call %struct.magic* @Perl_mg_find(%struct.sv* %705, i32 86)
  br label %cond.end1174

cond.false1173:                                   ; preds = %if.end1164
  br label %cond.end1174

cond.end1174:                                     ; preds = %cond.false1173, %cond.true1171
  %cond1175 = phi %struct.magic* [ %call1172, %cond.true1171 ], [ null, %cond.false1173 ]
  store %struct.magic* %cond1175, %struct.magic** %smg, align 8
  %706 = load %struct.magic*, %struct.magic** %smg, align 8
  %tobool1176 = icmp ne %struct.magic* %706, null
  br i1 %tobool1176, label %if.then1177, label %if.end1181

if.then1177:                                      ; preds = %cond.end1174
  %707 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %708 = load %struct.magic*, %struct.magic** %smg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %708, i32 0, i32 7
  %709 = load i8*, i8** %mg_ptr, align 8
  %710 = load %struct.magic*, %struct.magic** %smg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %710, i32 0, i32 5
  %711 = load i64, i64* %mg_len, align 8
  %conv1178 = trunc i64 %711 to i32
  call void @Perl_sv_magic(%struct.sv* %707, %struct.sv* null, i32 86, i8* %709, i32 %conv1178)
  %712 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1179 = getelementptr inbounds %struct.sv, %struct.sv* %712, i32 0, i32 2
  %713 = load i32, i32* %sv_flags1179, align 4
  %or1180 = or i32 %713, 8388608
  store i32 %or1180, i32* %sv_flags1179, align 4
  br label %if.end1181

if.end1181:                                       ; preds = %if.then1177, %cond.end1174
  br label %if.end1252

if.else1182:                                      ; preds = %if.else755
  %714 = load i32, i32* %sflags, align 4
  %and1183 = and i32 %714, 12288
  %tobool1184 = icmp ne i32 %and1183, 0
  br i1 %tobool1184, label %if.then1185, label %if.else1223

if.then1185:                                      ; preds = %if.else1182
  %715 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1186 = getelementptr inbounds %struct.sv, %struct.sv* %715, i32 0, i32 2
  %716 = load i32, i32* %sv_flags1186, align 4
  %and1187 = and i32 %716, 1610547455
  store i32 %and1187, i32* %sv_flags1186, align 4
  %717 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1188 = getelementptr inbounds %struct.sv, %struct.sv* %717, i32 0, i32 2
  %718 = load i32, i32* %sv_flags1188, align 4
  %and1189 = and i32 %718, 33554432
  %tobool1190 = icmp ne i32 %and1189, 0
  br i1 %tobool1190, label %land.rhs1191, label %land.end1194

land.rhs1191:                                     ; preds = %if.then1185
  %719 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call1192 = call i32 @Perl_sv_backoff(%struct.sv* %719)
  %tobool1193 = icmp ne i32 %call1192, 0
  br label %land.end1194

land.end1194:                                     ; preds = %land.rhs1191, %if.then1185
  %720 = phi i1 [ false, %if.then1185 ], [ %tobool1193, %land.rhs1191 ]
  %land.ext1195 = zext i1 %720 to i32
  %721 = load i32, i32* %sflags, align 4
  %and1196 = and i32 %721, -2147470592
  %722 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1197 = getelementptr inbounds %struct.sv, %struct.sv* %722, i32 0, i32 2
  %723 = load i32, i32* %sv_flags1197, align 4
  %or1198 = or i32 %723, %and1196
  store i32 %or1198, i32* %sv_flags1197, align 4
  %724 = load i32, i32* %sflags, align 4
  %and1199 = and i32 %724, 4096
  %tobool1200 = icmp ne i32 %and1199, 0
  br i1 %tobool1200, label %if.then1201, label %if.end1210

if.then1201:                                      ; preds = %land.end1194
  br label %do.body1202

do.body1202:                                      ; preds = %if.then1201
  %725 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any1203 = getelementptr inbounds %struct.sv, %struct.sv* %725, i32 0, i32 0
  %726 = load i8*, i8** %sv_any1203, align 8
  %727 = bitcast i8* %726 to %struct.xpviv*
  %xiv_u1204 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %727, i32 0, i32 4
  %xivu_iv1205 = bitcast %union._xivu* %xiv_u1204 to i64*
  %728 = load i64, i64* %xivu_iv1205, align 8
  %729 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1206 = getelementptr inbounds %struct.sv, %struct.sv* %729, i32 0, i32 0
  %730 = load i8*, i8** %sv_any1206, align 8
  %731 = bitcast i8* %730 to %struct.xpviv*
  %xiv_u1207 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %731, i32 0, i32 4
  %xivu_iv1208 = bitcast %union._xivu* %xiv_u1207 to i64*
  store i64 %728, i64* %xivu_iv1208, align 8
  br label %do.end1209

do.end1209:                                       ; preds = %do.body1202
  br label %if.end1210

if.end1210:                                       ; preds = %do.end1209, %land.end1194
  %732 = load i32, i32* %sflags, align 4
  %and1211 = and i32 %732, 8192
  %tobool1212 = icmp ne i32 %and1211, 0
  br i1 %tobool1212, label %if.then1213, label %if.end1222

if.then1213:                                      ; preds = %if.end1210
  br label %do.body1214

do.body1214:                                      ; preds = %if.then1213
  %733 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any1215 = getelementptr inbounds %struct.sv, %struct.sv* %733, i32 0, i32 0
  %734 = load i8*, i8** %sv_any1215, align 8
  %735 = bitcast i8* %734 to %struct.xpvnv*
  %xnv_u1216 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %735, i32 0, i32 5
  %xnv_nv1217 = bitcast %union._xnvu* %xnv_u1216 to double*
  %736 = load double, double* %xnv_nv1217, align 8
  %737 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any1218 = getelementptr inbounds %struct.sv, %struct.sv* %737, i32 0, i32 0
  %738 = load i8*, i8** %sv_any1218, align 8
  %739 = bitcast i8* %738 to %struct.xpvnv*
  %xnv_u1219 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %739, i32 0, i32 5
  %xnv_nv1220 = bitcast %union._xnvu* %xnv_u1219 to double*
  store double %736, double* %xnv_nv1220, align 8
  br label %do.end1221

do.end1221:                                       ; preds = %do.body1214
  br label %if.end1222

if.end1222:                                       ; preds = %do.end1221, %if.end1210
  br label %if.end1251

if.else1223:                                      ; preds = %if.else1182
  %740 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags1224 = getelementptr inbounds %struct.sv, %struct.sv* %740, i32 0, i32 2
  %741 = load i32, i32* %sv_flags1224, align 4
  %and1225 = and i32 %741, 49152
  %cmp1226 = icmp eq i32 %and1225, 32768
  br i1 %cmp1226, label %land.lhs.true1228, label %if.else1239

land.lhs.true1228:                                ; preds = %if.else1223
  %742 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags1229 = getelementptr inbounds %struct.sv, %struct.sv* %742, i32 0, i32 2
  %743 = load i32, i32* %sv_flags1229, align 4
  %and1230 = and i32 %743, 255
  %cmp1231 = icmp eq i32 %and1230, 9
  br i1 %cmp1231, label %if.then1238, label %lor.lhs.false1233

lor.lhs.false1233:                                ; preds = %land.lhs.true1228
  %744 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags1234 = getelementptr inbounds %struct.sv, %struct.sv* %744, i32 0, i32 2
  %745 = load i32, i32* %sv_flags1234, align 4
  %and1235 = and i32 %745, 255
  %cmp1236 = icmp eq i32 %and1235, 10
  br i1 %cmp1236, label %if.then1238, label %if.else1239

if.then1238:                                      ; preds = %lor.lhs.false1233, %land.lhs.true1228
  %746 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %747 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %748 = bitcast %struct.sv* %747 to i8*
  %749 = bitcast i8* %748 to %struct.gv*
  call void @Perl_gv_efullname4(%struct.sv* %746, %struct.gv* %749, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i1 zeroext true)
  br label %if.end1250

if.else1239:                                      ; preds = %lor.lhs.false1233, %if.else1223
  %750 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1240 = getelementptr inbounds %struct.sv, %struct.sv* %750, i32 0, i32 2
  %751 = load i32, i32* %sv_flags1240, align 4
  %and1241 = and i32 %751, 1610547455
  store i32 %and1241, i32* %sv_flags1240, align 4
  %752 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags1242 = getelementptr inbounds %struct.sv, %struct.sv* %752, i32 0, i32 2
  %753 = load i32, i32* %sv_flags1242, align 4
  %and1243 = and i32 %753, 33554432
  %tobool1244 = icmp ne i32 %and1243, 0
  br i1 %tobool1244, label %land.rhs1245, label %land.end1248

land.rhs1245:                                     ; preds = %if.else1239
  %754 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call1246 = call i32 @Perl_sv_backoff(%struct.sv* %754)
  %tobool1247 = icmp ne i32 %call1246, 0
  br label %land.end1248

land.end1248:                                     ; preds = %land.rhs1245, %if.else1239
  %755 = phi i1 [ false, %if.else1239 ], [ %tobool1247, %land.rhs1245 ]
  %land.ext1249 = zext i1 %755 to i32
  br label %if.end1250

if.end1250:                                       ; preds = %land.end1248, %if.then1238
  br label %if.end1251

if.end1251:                                       ; preds = %if.end1250, %if.end1222
  br label %if.end1252

if.end1252:                                       ; preds = %if.end1251, %if.end1181
  br label %if.end1253

if.end1253:                                       ; preds = %if.end1252, %if.then753
  br label %if.end1254

if.end1254:                                       ; preds = %if.end1253, %if.end733
  br label %if.end1255

if.end1255:                                       ; preds = %if.end1254, %do.end551
  br label %if.end1256

if.end1256:                                       ; preds = %if.end1255, %if.end378
  br label %if.end1257

if.end1257:                                       ; preds = %if.end1256, %if.end340
  %756 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags1258 = getelementptr inbounds %struct.sv, %struct.sv* %756, i32 0, i32 2
  %757 = load i32, i32* %sv_flags1258, align 4
  %and1259 = and i32 %757, 14680064
  %tobool1260 = icmp ne i32 %and1259, 0
  br i1 %tobool1260, label %land.lhs.true1261, label %if.end1287

land.lhs.true1261:                                ; preds = %if.end1257
  %758 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call1262 = call zeroext i1 @Perl_sv_tainted(%struct.sv* %758)
  br i1 %call1262, label %if.then1264, label %if.end1287

if.then1264:                                      ; preds = %land.lhs.true1261
  br label %do.body1265

do.body1265:                                      ; preds = %if.then1264
  %759 = load i8, i8* @PL_tainting, align 1
  %tobool1266 = trunc i8 %759 to i1
  br i1 %tobool1266, label %cond.true1268, label %cond.false1269

cond.true1268:                                    ; preds = %do.body1265
  br i1 true, label %if.then1270, label %if.end1285

cond.false1269:                                   ; preds = %do.body1265
  br i1 false, label %if.then1270, label %if.end1285

if.then1270:                                      ; preds = %cond.false1269, %cond.true1268
  %760 = load i8, i8* @PL_tainted, align 1
  %tobool1271 = trunc i8 %760 to i1
  br i1 %tobool1271, label %cond.true1273, label %cond.false1274

cond.true1273:                                    ; preds = %if.then1270
  br i1 true, label %if.then1275, label %if.end1284

cond.false1274:                                   ; preds = %if.then1270
  br i1 false, label %if.then1275, label %if.end1284

if.then1275:                                      ; preds = %cond.false1274, %cond.true1273
  br label %do.body1276

do.body1276:                                      ; preds = %if.then1275
  %761 = load i8, i8* @PL_tainting, align 1
  %tobool1277 = trunc i8 %761 to i1
  br i1 %tobool1277, label %cond.true1279, label %cond.false1280

cond.true1279:                                    ; preds = %do.body1276
  br i1 true, label %if.then1281, label %if.end1282

cond.false1280:                                   ; preds = %do.body1276
  br i1 false, label %if.then1281, label %if.end1282

if.then1281:                                      ; preds = %cond.false1280, %cond.true1279
  %762 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %762, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end1282

if.end1282:                                       ; preds = %if.then1281, %cond.false1280, %cond.true1279
  br label %do.end1283

do.end1283:                                       ; preds = %if.end1282
  br label %if.end1284

if.end1284:                                       ; preds = %do.end1283, %cond.false1274, %cond.true1273
  br label %if.end1285

if.end1285:                                       ; preds = %if.end1284, %cond.false1269, %cond.true1268
  br label %do.end1286

do.end1286:                                       ; preds = %if.end1285
  br label %if.end1287

if.end1287:                                       ; preds = %if.then, %land.end, %if.end67, %land.end104, %if.then230, %if.end444, %if.end448, %if.then467, %do.end1286, %land.lhs.true1261, %if.end1257
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_glob_assign_glob(%struct.sv* %dstr, %struct.sv* %sstr, i32 %dtype) #0 {
entry:
  %dstr.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca %struct.sv*, align 8
  %dtype.addr = alloca i32, align 4
  %mro_changes = alloca i32, align 4
  %old_stash = alloca %struct.hv*, align 8
  %name = alloca i8*, align 8
  %len = alloca i64, align 8
  %zok = alloca i64, align 8
  %name456 = alloca i8*, align 8
  %len616 = alloca i64, align 8
  %mg = alloca %struct.magic*, align 8
  %sref = alloca %struct.sv*, align 8
  %ary = alloca %struct.av*, align 8
  %stash = alloca %struct.hv*, align 8
  store %struct.sv* %dstr, %struct.sv** %dstr.addr, align 8
  store %struct.sv* %sstr, %struct.sv** %sstr.addr, align 8
  store i32 %dtype, i32* %dtype.addr, align 4
  store i32 0, i32* %mro_changes, align 4
  store %struct.hv* null, %struct.hv** %old_stash, align 8
  %0 = load i32, i32* %dtype.addr, align 4
  %cmp = icmp ne i32 %0, 9
  br i1 %cmp, label %land.lhs.true, label %if.end107

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 49152
  %cmp1 = icmp eq i32 %and, 32768
  br i1 %cmp1, label %land.lhs.true2, label %if.then

land.lhs.true2:                                   ; preds = %land.lhs.true
  %3 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %4, 255
  %cmp5 = icmp eq i32 %and4, 9
  br i1 %cmp5, label %if.end107, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true2
  %5 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %6, 255
  %cmp8 = icmp eq i32 %and7, 10
  br i1 %cmp8, label %if.end107, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %7 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpvgv*
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %9, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %10 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %10, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  store i8* %arraydecay, i8** %name, align 8
  %11 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any9, align 8
  %13 = bitcast i8* %12 to %struct.xpvgv*
  %xiv_u10 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %13, i32 0, i32 4
  %xivu_namehek11 = bitcast %union._xivu* %xiv_u10 to %struct.hek**
  %14 = load %struct.hek*, %struct.hek** %xivu_namehek11, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %14, i32 0, i32 1
  %15 = load i32, i32* %hek_len, align 4
  %conv = sext i32 %15 to i64
  store i64 %conv, i64* %len, align 8
  %16 = load i32, i32* %dtype.addr, align 4
  %cmp12 = icmp sge i32 %16, 3
  br i1 %cmp12, label %if.then14, label %if.end62

if.then14:                                        ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %if.then14
  %17 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any15 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any15, align 8
  %19 = bitcast i8* %18 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %19, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %20 = load i64, i64* %xpvlenu_len, align 8
  %tobool = icmp ne i64 %20, 0
  br i1 %tobool, label %if.then16, label %if.end48

if.then16:                                        ; preds = %do.body
  %21 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %22, 33554432
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then16
  br i1 true, label %if.then20, label %if.end45

cond.false:                                       ; preds = %if.then16
  br i1 false, label %if.then20, label %if.end45

if.then20:                                        ; preds = %cond.false, %cond.true
  br label %do.body21

do.body21:                                        ; preds = %if.then20
  %23 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %24, 33554432
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.then25, label %if.else

if.then25:                                        ; preds = %do.body21
  %25 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %26 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %26, i64 0
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %27 = load i8, i8* %arrayidx, align 1
  %conv26 = zext i8 %27 to i64
  store i64 %conv26, i64* %zok, align 8
  %28 = load i64, i64* %zok, align 8
  %tobool27 = icmp ne i64 %28, 0
  br i1 %tobool27, label %if.end, label %if.then28

if.then28:                                        ; preds = %if.then25
  %29 = bitcast i64* %zok to i8*
  %30 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u29 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 3
  %svu_pv30 = bitcast %union.anon* %sv_u29 to i8**
  %31 = load i8*, i8** %svu_pv30, align 8
  %add.ptr31 = getelementptr inbounds i8, i8* %31, i64 0
  %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr31, i64 -1
  %add.ptr33 = getelementptr inbounds i8, i8* %add.ptr32, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 1 %add.ptr33, i64 8, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then28, %if.then25
  br label %if.end34

if.else:                                          ; preds = %do.body21
  store i64 0, i64* %zok, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.else, %if.end
  br label %do.end

do.end:                                           ; preds = %if.end34
  br label %do.body35

do.body35:                                        ; preds = %do.end
  %32 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u36 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 3
  %svu_pv37 = bitcast %union.anon* %sv_u36 to i8**
  %33 = load i8*, i8** %svu_pv37, align 8
  %add.ptr38 = getelementptr inbounds i8, i8* %33, i64 0
  %34 = load i64, i64* %zok, align 8
  %idx.neg = sub i64 0, %34
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr38, i64 %idx.neg
  %35 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u40 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 3
  %svu_pv41 = bitcast %union.anon* %sv_u40 to i8**
  store i8* %add.ptr39, i8** %svu_pv41, align 8
  br label %do.end42

do.end42:                                         ; preds = %do.body35
  %36 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %37, -33554433
  store i32 %and44, i32* %sv_flags43, align 4
  br label %if.end45

if.end45:                                         ; preds = %do.end42, %cond.false, %cond.true
  %38 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u46 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 3
  %svu_pv47 = bitcast %union.anon* %sv_u46 to i8**
  %39 = load i8*, i8** %svu_pv47, align 8
  call void @Perl_safesysfree(i8* %39)
  br label %if.end48

if.end48:                                         ; preds = %if.end45, %do.body
  br label %do.end49

do.end49:                                         ; preds = %if.end48
  br label %do.body50

do.body50:                                        ; preds = %do.end49
  %40 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u51 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 3
  %svu_pv52 = bitcast %union.anon* %sv_u51 to i8**
  store i8* null, i8** %svu_pv52, align 8
  br label %do.end53

do.end53:                                         ; preds = %do.body50
  br label %do.body54

do.body54:                                        ; preds = %do.end53
  %41 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any55 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any55, align 8
  %43 = bitcast i8* %42 to %struct.xpv*
  %xpv_len_u56 = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 3
  %xpvlenu_len57 = bitcast %union.anon.19* %xpv_len_u56 to i64*
  store i64 0, i64* %xpvlenu_len57, align 8
  br label %do.end58

do.end58:                                         ; preds = %do.body54
  br label %do.body59

do.body59:                                        ; preds = %do.end58
  %44 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any60 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 0
  %45 = load i8*, i8** %sv_any60, align 8
  %46 = bitcast i8* %45 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %46, i32 0, i32 2
  store i64 0, i64* %xpv_cur, align 8
  br label %do.end61

do.end61:                                         ; preds = %do.body59
  br label %if.end62

if.end62:                                         ; preds = %do.end61, %if.then
  %47 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags63 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags63, align 4
  %and64 = and i32 %48, 255
  %cmp65 = icmp uge i32 %and64, 9
  br i1 %cmp65, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end62
  %49 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %49, i32 9)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end62
  %50 = phi i1 [ true, %if.end62 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %50 to i32
  %51 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %52, 1610547455
  store i32 %and68, i32* %sv_flags67, align 4
  %53 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %54, 33554432
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.end
  %55 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call = call i32 @Perl_sv_backoff(%struct.sv* %55)
  %tobool72 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.end
  %56 = phi i1 [ false, %lor.end ], [ %tobool72, %land.rhs ]
  %land.ext = zext i1 %56 to i32
  br label %do.body73

do.body73:                                        ; preds = %land.end
  %57 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags74 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags74, align 4
  %or = or i32 %58, 32768
  store i32 %or, i32* %sv_flags74, align 4
  br label %do.end75

do.end75:                                         ; preds = %do.body73
  %59 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any76 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any76, align 8
  %61 = bitcast i8* %60 to %struct.xpvgv*
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %61, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %62 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %63 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any77 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 0
  %64 = load i8*, i8** %sv_any77, align 8
  %65 = bitcast i8* %64 to %struct.xpvgv*
  %xnv_u78 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %65, i32 0, i32 5
  %xgv_stash79 = bitcast %union._xnvu* %xnv_u78 to %struct.hv**
  store %struct.hv* %62, %struct.hv** %xgv_stash79, align 8
  %66 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any80 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 0
  %67 = load i8*, i8** %sv_any80, align 8
  %68 = bitcast i8* %67 to %struct.xpvgv*
  %xnv_u81 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %68, i32 0, i32 5
  %xgv_stash82 = bitcast %union._xnvu* %xnv_u81 to %struct.hv**
  %69 = load %struct.hv*, %struct.hv** %xgv_stash82, align 8
  %tobool83 = icmp ne %struct.hv* %69, null
  br i1 %tobool83, label %if.then84, label %if.end88

if.then84:                                        ; preds = %do.end75
  %70 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 0
  %71 = load i8*, i8** %sv_any85, align 8
  %72 = bitcast i8* %71 to %struct.xpvgv*
  %xnv_u86 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %72, i32 0, i32 5
  %xgv_stash87 = bitcast %union._xnvu* %xnv_u86 to %struct.hv**
  %73 = load %struct.hv*, %struct.hv** %xgv_stash87, align 8
  %74 = bitcast %struct.hv* %73 to i8*
  %75 = bitcast i8* %74 to %struct.sv*
  %76 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_add_backref(%struct.sv* %75, %struct.sv* %76)
  br label %if.end88

if.end88:                                         ; preds = %if.then84, %do.end75
  %77 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %78 = bitcast %struct.sv* %77 to i8*
  %79 = bitcast i8* %78 to %struct.gv*
  %80 = load i8*, i8** %name, align 8
  %81 = load i64, i64* %len, align 8
  %conv89 = trunc i64 %81 to i32
  %82 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any90 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 0
  %83 = load i8*, i8** %sv_any90, align 8
  %84 = bitcast i8* %83 to %struct.xpvgv*
  %xiv_u91 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %84, i32 0, i32 4
  %xivu_namehek92 = bitcast %union._xivu* %xiv_u91 to %struct.hek**
  %85 = load %struct.hek*, %struct.hek** %xivu_namehek92, align 8
  %hek_key93 = getelementptr inbounds %struct.hek, %struct.hek* %85, i32 0, i32 2
  %arraydecay94 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key93, i64 0, i64 0
  %86 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any95 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 0
  %87 = load i8*, i8** %sv_any95, align 8
  %88 = bitcast i8* %87 to %struct.xpvgv*
  %xiv_u96 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %88, i32 0, i32 4
  %xivu_namehek97 = bitcast %union._xivu* %xiv_u96 to %struct.hek**
  %89 = load %struct.hek*, %struct.hek** %xivu_namehek97, align 8
  %hek_len98 = getelementptr inbounds %struct.hek, %struct.hek* %89, i32 0, i32 1
  %90 = load i32, i32* %hek_len98, align 4
  %idx.ext = sext i32 %90 to i64
  %add.ptr99 = getelementptr inbounds i8, i8* %arraydecay94, i64 %idx.ext
  %add.ptr100 = getelementptr inbounds i8, i8* %add.ptr99, i64 1
  %91 = load i8, i8* %add.ptr100, align 1
  %conv101 = zext i8 %91 to i32
  %and102 = and i32 %conv101, 1
  %tobool103 = icmp ne i32 %and102, 0
  %92 = zext i1 %tobool103 to i64
  %cond = select i1 %tobool103, i32 536870912, i32 0
  %or104 = or i32 1, %cond
  call void @Perl_gv_name_set(%struct.gv* %79, i8* %80, i32 %conv89, i32 %or104)
  %93 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags105 = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 2
  %94 = load i32, i32* %sv_flags105, align 4
  %or106 = or i32 %94, 16777216
  store i32 %or106, i32* %sv_flags105, align 4
  br label %if.end107

if.end107:                                        ; preds = %if.end88, %lor.lhs.false, %land.lhs.true2, %entry
  %95 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %96 = bitcast %struct.sv* %95 to i8*
  %97 = bitcast i8* %96 to %struct.gv*
  %sv_u108 = getelementptr inbounds %struct.gv, %struct.gv* %97, i32 0, i32 3
  %svu_gp = bitcast %union.anon.6* %sv_u108 to %struct.gp**
  %98 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr109 = getelementptr inbounds %struct.gp, %struct.gp* %98, i64 0
  %tobool110 = icmp ne %struct.gp* %add.ptr109, null
  br i1 %tobool110, label %if.then111, label %if.end281

if.then111:                                       ; preds = %if.end107
  %99 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u112 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 3
  %svu_gp113 = bitcast %union.anon* %sv_u112 to %struct.gp**
  %100 = load %struct.gp*, %struct.gp** %svu_gp113, align 8
  %add.ptr114 = getelementptr inbounds %struct.gp, %struct.gp* %100, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr114, i32 0, i32 3
  %101 = load i32, i32* %gp_cvgen, align 8
  %tobool115 = icmp ne i32 %101, 0
  br i1 %tobool115, label %if.then116, label %if.else129

if.then116:                                       ; preds = %if.then111
  %102 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u117 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 3
  %svu_gp118 = bitcast %union.anon* %sv_u117 to %struct.gp**
  %103 = load %struct.gp*, %struct.gp** %svu_gp118, align 8
  %add.ptr119 = getelementptr inbounds %struct.gp, %struct.gp* %103, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr119, i32 0, i32 2
  %104 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr120 = getelementptr inbounds %struct.cv, %struct.cv* %104, i64 0
  %105 = bitcast %struct.cv* %add.ptr120 to i8*
  %106 = bitcast i8* %105 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %106)
  %107 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u121 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 3
  %svu_gp122 = bitcast %union.anon* %sv_u121 to %struct.gp**
  %108 = load %struct.gp*, %struct.gp** %svu_gp122, align 8
  %add.ptr123 = getelementptr inbounds %struct.gp, %struct.gp* %108, i64 0
  %gp_cv124 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr123, i32 0, i32 2
  store %struct.cv* null, %struct.cv** %gp_cv124, align 8
  %109 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u125 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 3
  %svu_gp126 = bitcast %union.anon* %sv_u125 to %struct.gp**
  %110 = load %struct.gp*, %struct.gp** %svu_gp126, align 8
  %add.ptr127 = getelementptr inbounds %struct.gp, %struct.gp* %110, i64 0
  %gp_cvgen128 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr127, i32 0, i32 3
  store i32 0, i32* %gp_cvgen128, align 8
  br label %if.end280

if.else129:                                       ; preds = %if.then111
  %111 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %112 = bitcast %struct.sv* %111 to %struct.gv*
  %sv_u130 = getelementptr inbounds %struct.gv, %struct.gv* %112, i32 0, i32 3
  %svu_gp131 = bitcast %union.anon.6* %sv_u130 to %struct.gp**
  %113 = load %struct.gp*, %struct.gp** %svu_gp131, align 8
  %add.ptr132 = getelementptr inbounds %struct.gp, %struct.gp* %113, i64 0
  %gp_cv133 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr132, i32 0, i32 2
  %114 = load %struct.cv*, %struct.cv** %gp_cv133, align 8
  %add.ptr134 = getelementptr inbounds %struct.cv, %struct.cv* %114, i64 0
  %tobool135 = icmp ne %struct.cv* %add.ptr134, null
  br i1 %tobool135, label %land.lhs.true136, label %if.end279

land.lhs.true136:                                 ; preds = %if.else129
  %115 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any137 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 0
  %116 = load i8*, i8** %sv_any137, align 8
  %117 = bitcast i8* %116 to %struct.xpvgv*
  %xnv_u138 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %117, i32 0, i32 5
  %xgv_stash139 = bitcast %union._xnvu* %xnv_u138 to %struct.hv**
  %118 = load %struct.hv*, %struct.hv** %xgv_stash139, align 8
  %tobool140 = icmp ne %struct.hv* %118, null
  br i1 %tobool140, label %land.lhs.true141, label %if.end279

land.lhs.true141:                                 ; preds = %land.lhs.true136
  %119 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any142 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 0
  %120 = load i8*, i8** %sv_any142, align 8
  %121 = bitcast i8* %120 to %struct.xpvgv*
  %xnv_u143 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %121, i32 0, i32 5
  %xgv_stash144 = bitcast %union._xnvu* %xnv_u143 to %struct.hv**
  %122 = load %struct.hv*, %struct.hv** %xgv_stash144, align 8
  %sv_flags145 = getelementptr inbounds %struct.hv, %struct.hv* %122, i32 0, i32 2
  %123 = load i32, i32* %sv_flags145, align 4
  %and146 = and i32 %123, 33554432
  %tobool147 = icmp ne i32 %and146, 0
  br i1 %tobool147, label %land.lhs.true148, label %cond.false277

land.lhs.true148:                                 ; preds = %land.lhs.true141
  %124 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any149 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 0
  %125 = load i8*, i8** %sv_any149, align 8
  %126 = bitcast i8* %125 to %struct.xpvgv*
  %xnv_u150 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %126, i32 0, i32 5
  %xgv_stash151 = bitcast %union._xnvu* %xnv_u150 to %struct.hv**
  %127 = load %struct.hv*, %struct.hv** %xgv_stash151, align 8
  %sv_u152 = getelementptr inbounds %struct.hv, %struct.hv* %127, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u152 to %struct.he***
  %128 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %129 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any153 = getelementptr inbounds %struct.sv, %struct.sv* %129, i32 0, i32 0
  %130 = load i8*, i8** %sv_any153, align 8
  %131 = bitcast i8* %130 to %struct.xpvgv*
  %xnv_u154 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %131, i32 0, i32 5
  %xgv_stash155 = bitcast %union._xnvu* %xnv_u154 to %struct.hv**
  %132 = load %struct.hv*, %struct.hv** %xgv_stash155, align 8
  %sv_any156 = getelementptr inbounds %struct.hv, %struct.hv* %132, i32 0, i32 0
  %133 = load %struct.xpvhv*, %struct.xpvhv** %sv_any156, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %133, i32 0, i32 3
  %134 = load i64, i64* %xhv_max, align 8
  %add = add i64 %134, 1
  %arrayidx157 = getelementptr inbounds %struct.he*, %struct.he** %128, i64 %add
  %135 = bitcast %struct.he** %arrayidx157 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %135, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %136 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool158 = icmp ne %struct.hek* %136, null
  br i1 %tobool158, label %land.lhs.true159, label %cond.false277

land.lhs.true159:                                 ; preds = %land.lhs.true148
  %137 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any160 = getelementptr inbounds %struct.sv, %struct.sv* %137, i32 0, i32 0
  %138 = load i8*, i8** %sv_any160, align 8
  %139 = bitcast i8* %138 to %struct.xpvgv*
  %xnv_u161 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %139, i32 0, i32 5
  %xgv_stash162 = bitcast %union._xnvu* %xnv_u161 to %struct.hv**
  %140 = load %struct.hv*, %struct.hv** %xgv_stash162, align 8
  %sv_u163 = getelementptr inbounds %struct.hv, %struct.hv* %140, i32 0, i32 3
  %svu_hash164 = bitcast %union.anon.4* %sv_u163 to %struct.he***
  %141 = load %struct.he**, %struct.he*** %svu_hash164, align 8
  %142 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any165 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 0
  %143 = load i8*, i8** %sv_any165, align 8
  %144 = bitcast i8* %143 to %struct.xpvgv*
  %xnv_u166 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %144, i32 0, i32 5
  %xgv_stash167 = bitcast %union._xnvu* %xnv_u166 to %struct.hv**
  %145 = load %struct.hv*, %struct.hv** %xgv_stash167, align 8
  %sv_any168 = getelementptr inbounds %struct.hv, %struct.hv* %145, i32 0, i32 0
  %146 = load %struct.xpvhv*, %struct.xpvhv** %sv_any168, align 8
  %xhv_max169 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %146, i32 0, i32 3
  %147 = load i64, i64* %xhv_max169, align 8
  %add170 = add i64 %147, 1
  %arrayidx171 = getelementptr inbounds %struct.he*, %struct.he** %141, i64 %add170
  %148 = bitcast %struct.he** %arrayidx171 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %148, i32 0, i32 4
  %149 = load i32, i32* %xhv_name_count, align 4
  %cmp172 = icmp ne i32 %149, -1
  br i1 %cmp172, label %cond.true174, label %cond.false277

cond.true174:                                     ; preds = %land.lhs.true159
  %150 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any175 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 0
  %151 = load i8*, i8** %sv_any175, align 8
  %152 = bitcast i8* %151 to %struct.xpvgv*
  %xnv_u176 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %152, i32 0, i32 5
  %xgv_stash177 = bitcast %union._xnvu* %xnv_u176 to %struct.hv**
  %153 = load %struct.hv*, %struct.hv** %xgv_stash177, align 8
  %sv_u178 = getelementptr inbounds %struct.hv, %struct.hv* %153, i32 0, i32 3
  %svu_hash179 = bitcast %union.anon.4* %sv_u178 to %struct.he***
  %154 = load %struct.he**, %struct.he*** %svu_hash179, align 8
  %155 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any180 = getelementptr inbounds %struct.sv, %struct.sv* %155, i32 0, i32 0
  %156 = load i8*, i8** %sv_any180, align 8
  %157 = bitcast i8* %156 to %struct.xpvgv*
  %xnv_u181 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %157, i32 0, i32 5
  %xgv_stash182 = bitcast %union._xnvu* %xnv_u181 to %struct.hv**
  %158 = load %struct.hv*, %struct.hv** %xgv_stash182, align 8
  %sv_any183 = getelementptr inbounds %struct.hv, %struct.hv* %158, i32 0, i32 0
  %159 = load %struct.xpvhv*, %struct.xpvhv** %sv_any183, align 8
  %xhv_max184 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %159, i32 0, i32 3
  %160 = load i64, i64* %xhv_max184, align 8
  %add185 = add i64 %160, 1
  %arrayidx186 = getelementptr inbounds %struct.he*, %struct.he** %154, i64 %add185
  %161 = bitcast %struct.he** %arrayidx186 to %struct.xpvhv_aux*
  %xhv_name_count187 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %161, i32 0, i32 4
  %162 = load i32, i32* %xhv_name_count187, align 4
  %cmp188 = icmp sgt i32 %162, 0
  br i1 %cmp188, label %cond.true190, label %cond.false205

cond.true190:                                     ; preds = %cond.true174
  %163 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any191 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 0
  %164 = load i8*, i8** %sv_any191, align 8
  %165 = bitcast i8* %164 to %struct.xpvgv*
  %xnv_u192 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %165, i32 0, i32 5
  %xgv_stash193 = bitcast %union._xnvu* %xnv_u192 to %struct.hv**
  %166 = load %struct.hv*, %struct.hv** %xgv_stash193, align 8
  %sv_u194 = getelementptr inbounds %struct.hv, %struct.hv* %166, i32 0, i32 3
  %svu_hash195 = bitcast %union.anon.4* %sv_u194 to %struct.he***
  %167 = load %struct.he**, %struct.he*** %svu_hash195, align 8
  %168 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any196 = getelementptr inbounds %struct.sv, %struct.sv* %168, i32 0, i32 0
  %169 = load i8*, i8** %sv_any196, align 8
  %170 = bitcast i8* %169 to %struct.xpvgv*
  %xnv_u197 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %170, i32 0, i32 5
  %xgv_stash198 = bitcast %union._xnvu* %xnv_u197 to %struct.hv**
  %171 = load %struct.hv*, %struct.hv** %xgv_stash198, align 8
  %sv_any199 = getelementptr inbounds %struct.hv, %struct.hv* %171, i32 0, i32 0
  %172 = load %struct.xpvhv*, %struct.xpvhv** %sv_any199, align 8
  %xhv_max200 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %172, i32 0, i32 3
  %173 = load i64, i64* %xhv_max200, align 8
  %add201 = add i64 %173, 1
  %arrayidx202 = getelementptr inbounds %struct.he*, %struct.he** %167, i64 %add201
  %174 = bitcast %struct.he** %arrayidx202 to %struct.xpvhv_aux*
  %xhv_name_u203 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %174, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u203 to %struct.hek***
  %175 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %arrayidx204 = getelementptr inbounds %struct.hek*, %struct.hek** %175, i64 0
  %176 = load %struct.hek*, %struct.hek** %arrayidx204, align 8
  br label %cond.end272

cond.false205:                                    ; preds = %cond.true174
  %177 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any206 = getelementptr inbounds %struct.sv, %struct.sv* %177, i32 0, i32 0
  %178 = load i8*, i8** %sv_any206, align 8
  %179 = bitcast i8* %178 to %struct.xpvgv*
  %xnv_u207 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %179, i32 0, i32 5
  %xgv_stash208 = bitcast %union._xnvu* %xnv_u207 to %struct.hv**
  %180 = load %struct.hv*, %struct.hv** %xgv_stash208, align 8
  %sv_u209 = getelementptr inbounds %struct.hv, %struct.hv* %180, i32 0, i32 3
  %svu_hash210 = bitcast %union.anon.4* %sv_u209 to %struct.he***
  %181 = load %struct.he**, %struct.he*** %svu_hash210, align 8
  %182 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any211 = getelementptr inbounds %struct.sv, %struct.sv* %182, i32 0, i32 0
  %183 = load i8*, i8** %sv_any211, align 8
  %184 = bitcast i8* %183 to %struct.xpvgv*
  %xnv_u212 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %184, i32 0, i32 5
  %xgv_stash213 = bitcast %union._xnvu* %xnv_u212 to %struct.hv**
  %185 = load %struct.hv*, %struct.hv** %xgv_stash213, align 8
  %sv_any214 = getelementptr inbounds %struct.hv, %struct.hv* %185, i32 0, i32 0
  %186 = load %struct.xpvhv*, %struct.xpvhv** %sv_any214, align 8
  %xhv_max215 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %186, i32 0, i32 3
  %187 = load i64, i64* %xhv_max215, align 8
  %add216 = add i64 %187, 1
  %arrayidx217 = getelementptr inbounds %struct.he*, %struct.he** %181, i64 %add216
  %188 = bitcast %struct.he** %arrayidx217 to %struct.xpvhv_aux*
  %xhv_name_count218 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %188, i32 0, i32 4
  %189 = load i32, i32* %xhv_name_count218, align 4
  %cmp219 = icmp slt i32 %189, -1
  br i1 %cmp219, label %cond.true221, label %cond.false237

cond.true221:                                     ; preds = %cond.false205
  %190 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any222 = getelementptr inbounds %struct.sv, %struct.sv* %190, i32 0, i32 0
  %191 = load i8*, i8** %sv_any222, align 8
  %192 = bitcast i8* %191 to %struct.xpvgv*
  %xnv_u223 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %192, i32 0, i32 5
  %xgv_stash224 = bitcast %union._xnvu* %xnv_u223 to %struct.hv**
  %193 = load %struct.hv*, %struct.hv** %xgv_stash224, align 8
  %sv_u225 = getelementptr inbounds %struct.hv, %struct.hv* %193, i32 0, i32 3
  %svu_hash226 = bitcast %union.anon.4* %sv_u225 to %struct.he***
  %194 = load %struct.he**, %struct.he*** %svu_hash226, align 8
  %195 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any227 = getelementptr inbounds %struct.sv, %struct.sv* %195, i32 0, i32 0
  %196 = load i8*, i8** %sv_any227, align 8
  %197 = bitcast i8* %196 to %struct.xpvgv*
  %xnv_u228 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %197, i32 0, i32 5
  %xgv_stash229 = bitcast %union._xnvu* %xnv_u228 to %struct.hv**
  %198 = load %struct.hv*, %struct.hv** %xgv_stash229, align 8
  %sv_any230 = getelementptr inbounds %struct.hv, %struct.hv* %198, i32 0, i32 0
  %199 = load %struct.xpvhv*, %struct.xpvhv** %sv_any230, align 8
  %xhv_max231 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %199, i32 0, i32 3
  %200 = load i64, i64* %xhv_max231, align 8
  %add232 = add i64 %200, 1
  %arrayidx233 = getelementptr inbounds %struct.he*, %struct.he** %194, i64 %add232
  %201 = bitcast %struct.he** %arrayidx233 to %struct.xpvhv_aux*
  %xhv_name_u234 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %201, i32 0, i32 0
  %xhvnameu_names235 = bitcast %union._xhvnameu* %xhv_name_u234 to %struct.hek***
  %202 = load %struct.hek**, %struct.hek*** %xhvnameu_names235, align 8
  %arrayidx236 = getelementptr inbounds %struct.hek*, %struct.hek** %202, i64 1
  %203 = load %struct.hek*, %struct.hek** %arrayidx236, align 8
  br label %cond.end270

cond.false237:                                    ; preds = %cond.false205
  %204 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any238 = getelementptr inbounds %struct.sv, %struct.sv* %204, i32 0, i32 0
  %205 = load i8*, i8** %sv_any238, align 8
  %206 = bitcast i8* %205 to %struct.xpvgv*
  %xnv_u239 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %206, i32 0, i32 5
  %xgv_stash240 = bitcast %union._xnvu* %xnv_u239 to %struct.hv**
  %207 = load %struct.hv*, %struct.hv** %xgv_stash240, align 8
  %sv_u241 = getelementptr inbounds %struct.hv, %struct.hv* %207, i32 0, i32 3
  %svu_hash242 = bitcast %union.anon.4* %sv_u241 to %struct.he***
  %208 = load %struct.he**, %struct.he*** %svu_hash242, align 8
  %209 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any243 = getelementptr inbounds %struct.sv, %struct.sv* %209, i32 0, i32 0
  %210 = load i8*, i8** %sv_any243, align 8
  %211 = bitcast i8* %210 to %struct.xpvgv*
  %xnv_u244 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %211, i32 0, i32 5
  %xgv_stash245 = bitcast %union._xnvu* %xnv_u244 to %struct.hv**
  %212 = load %struct.hv*, %struct.hv** %xgv_stash245, align 8
  %sv_any246 = getelementptr inbounds %struct.hv, %struct.hv* %212, i32 0, i32 0
  %213 = load %struct.xpvhv*, %struct.xpvhv** %sv_any246, align 8
  %xhv_max247 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %213, i32 0, i32 3
  %214 = load i64, i64* %xhv_max247, align 8
  %add248 = add i64 %214, 1
  %arrayidx249 = getelementptr inbounds %struct.he*, %struct.he** %208, i64 %add248
  %215 = bitcast %struct.he** %arrayidx249 to %struct.xpvhv_aux*
  %xhv_name_count250 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %215, i32 0, i32 4
  %216 = load i32, i32* %xhv_name_count250, align 4
  %cmp251 = icmp eq i32 %216, -1
  br i1 %cmp251, label %cond.true253, label %cond.false254

cond.true253:                                     ; preds = %cond.false237
  br label %cond.end

cond.false254:                                    ; preds = %cond.false237
  %217 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any255 = getelementptr inbounds %struct.sv, %struct.sv* %217, i32 0, i32 0
  %218 = load i8*, i8** %sv_any255, align 8
  %219 = bitcast i8* %218 to %struct.xpvgv*
  %xnv_u256 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %219, i32 0, i32 5
  %xgv_stash257 = bitcast %union._xnvu* %xnv_u256 to %struct.hv**
  %220 = load %struct.hv*, %struct.hv** %xgv_stash257, align 8
  %sv_u258 = getelementptr inbounds %struct.hv, %struct.hv* %220, i32 0, i32 3
  %svu_hash259 = bitcast %union.anon.4* %sv_u258 to %struct.he***
  %221 = load %struct.he**, %struct.he*** %svu_hash259, align 8
  %222 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any260 = getelementptr inbounds %struct.sv, %struct.sv* %222, i32 0, i32 0
  %223 = load i8*, i8** %sv_any260, align 8
  %224 = bitcast i8* %223 to %struct.xpvgv*
  %xnv_u261 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %224, i32 0, i32 5
  %xgv_stash262 = bitcast %union._xnvu* %xnv_u261 to %struct.hv**
  %225 = load %struct.hv*, %struct.hv** %xgv_stash262, align 8
  %sv_any263 = getelementptr inbounds %struct.hv, %struct.hv* %225, i32 0, i32 0
  %226 = load %struct.xpvhv*, %struct.xpvhv** %sv_any263, align 8
  %xhv_max264 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %226, i32 0, i32 3
  %227 = load i64, i64* %xhv_max264, align 8
  %add265 = add i64 %227, 1
  %arrayidx266 = getelementptr inbounds %struct.he*, %struct.he** %221, i64 %add265
  %228 = bitcast %struct.he** %arrayidx266 to %struct.xpvhv_aux*
  %xhv_name_u267 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %228, i32 0, i32 0
  %xhvnameu_name268 = bitcast %union._xhvnameu* %xhv_name_u267 to %struct.hek**
  %229 = load %struct.hek*, %struct.hek** %xhvnameu_name268, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false254, %cond.true253
  %cond269 = phi %struct.hek* [ null, %cond.true253 ], [ %229, %cond.false254 ]
  br label %cond.end270

cond.end270:                                      ; preds = %cond.end, %cond.true221
  %cond271 = phi %struct.hek* [ %203, %cond.true221 ], [ %cond269, %cond.end ]
  br label %cond.end272

cond.end272:                                      ; preds = %cond.end270, %cond.true190
  %cond273 = phi %struct.hek* [ %176, %cond.true190 ], [ %cond271, %cond.end270 ]
  %hek_key274 = getelementptr inbounds %struct.hek, %struct.hek* %cond273, i32 0, i32 2
  %arraydecay275 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key274, i64 0, i64 0
  %tobool276 = icmp ne i8* %arraydecay275, null
  br i1 %tobool276, label %if.then278, label %if.end279

cond.false277:                                    ; preds = %land.lhs.true159, %land.lhs.true148, %land.lhs.true141
  br i1 false, label %if.then278, label %if.end279

if.then278:                                       ; preds = %cond.false277, %cond.end272
  store i32 1, i32* %mro_changes, align 4
  br label %if.end279

if.end279:                                        ; preds = %if.then278, %cond.false277, %cond.end272, %land.lhs.true136, %if.else129
  br label %if.end280

if.end280:                                        ; preds = %if.end279, %if.then116
  br label %if.end281

if.end281:                                        ; preds = %if.end280, %if.end107
  %230 = load i32, i32* %mro_changes, align 4
  %tobool282 = icmp ne i32 %230, 0
  br i1 %tobool282, label %if.end452, label %land.lhs.true283

land.lhs.true283:                                 ; preds = %if.end281
  %231 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %232 = bitcast %struct.sv* %231 to i8*
  %233 = bitcast i8* %232 to %struct.gv*
  %sv_u284 = getelementptr inbounds %struct.gv, %struct.gv* %233, i32 0, i32 3
  %svu_gp285 = bitcast %union.anon.6* %sv_u284 to %struct.gp**
  %234 = load %struct.gp*, %struct.gp** %svu_gp285, align 8
  %add.ptr286 = getelementptr inbounds %struct.gp, %struct.gp* %234, i64 0
  %tobool287 = icmp ne %struct.gp* %add.ptr286, null
  br i1 %tobool287, label %land.lhs.true288, label %if.end452

land.lhs.true288:                                 ; preds = %land.lhs.true283
  %235 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %236 = bitcast %struct.sv* %235 to %struct.gv*
  %sv_u289 = getelementptr inbounds %struct.gv, %struct.gv* %236, i32 0, i32 3
  %svu_gp290 = bitcast %union.anon.6* %sv_u289 to %struct.gp**
  %237 = load %struct.gp*, %struct.gp** %svu_gp290, align 8
  %add.ptr291 = getelementptr inbounds %struct.gp, %struct.gp* %237, i64 0
  %gp_cvgen292 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr291, i32 0, i32 3
  %238 = load i32, i32* %gp_cvgen292, align 8
  %tobool293 = icmp ne i32 %238, 0
  br i1 %tobool293, label %cond.true294, label %cond.false295

cond.true294:                                     ; preds = %land.lhs.true288
  br i1 false, label %land.lhs.true301, label %if.end452

cond.false295:                                    ; preds = %land.lhs.true288
  %239 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %240 = bitcast %struct.sv* %239 to %struct.gv*
  %sv_u296 = getelementptr inbounds %struct.gv, %struct.gv* %240, i32 0, i32 3
  %svu_gp297 = bitcast %union.anon.6* %sv_u296 to %struct.gp**
  %241 = load %struct.gp*, %struct.gp** %svu_gp297, align 8
  %add.ptr298 = getelementptr inbounds %struct.gp, %struct.gp* %241, i64 0
  %gp_cv299 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr298, i32 0, i32 2
  %242 = load %struct.cv*, %struct.cv** %gp_cv299, align 8
  %tobool300 = icmp ne %struct.cv* %242, null
  br i1 %tobool300, label %land.lhs.true301, label %if.end452

land.lhs.true301:                                 ; preds = %cond.false295, %cond.true294
  %243 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any302 = getelementptr inbounds %struct.sv, %struct.sv* %243, i32 0, i32 0
  %244 = load i8*, i8** %sv_any302, align 8
  %245 = bitcast i8* %244 to %struct.xpvgv*
  %xnv_u303 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %245, i32 0, i32 5
  %xgv_stash304 = bitcast %union._xnvu* %xnv_u303 to %struct.hv**
  %246 = load %struct.hv*, %struct.hv** %xgv_stash304, align 8
  %tobool305 = icmp ne %struct.hv* %246, null
  br i1 %tobool305, label %land.lhs.true306, label %if.end452

land.lhs.true306:                                 ; preds = %land.lhs.true301
  %247 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any307 = getelementptr inbounds %struct.sv, %struct.sv* %247, i32 0, i32 0
  %248 = load i8*, i8** %sv_any307, align 8
  %249 = bitcast i8* %248 to %struct.xpvgv*
  %xnv_u308 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %249, i32 0, i32 5
  %xgv_stash309 = bitcast %union._xnvu* %xnv_u308 to %struct.hv**
  %250 = load %struct.hv*, %struct.hv** %xgv_stash309, align 8
  %sv_flags310 = getelementptr inbounds %struct.hv, %struct.hv* %250, i32 0, i32 2
  %251 = load i32, i32* %sv_flags310, align 4
  %and311 = and i32 %251, 33554432
  %tobool312 = icmp ne i32 %and311, 0
  br i1 %tobool312, label %land.lhs.true313, label %cond.false450

land.lhs.true313:                                 ; preds = %land.lhs.true306
  %252 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any314 = getelementptr inbounds %struct.sv, %struct.sv* %252, i32 0, i32 0
  %253 = load i8*, i8** %sv_any314, align 8
  %254 = bitcast i8* %253 to %struct.xpvgv*
  %xnv_u315 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %254, i32 0, i32 5
  %xgv_stash316 = bitcast %union._xnvu* %xnv_u315 to %struct.hv**
  %255 = load %struct.hv*, %struct.hv** %xgv_stash316, align 8
  %sv_u317 = getelementptr inbounds %struct.hv, %struct.hv* %255, i32 0, i32 3
  %svu_hash318 = bitcast %union.anon.4* %sv_u317 to %struct.he***
  %256 = load %struct.he**, %struct.he*** %svu_hash318, align 8
  %257 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any319 = getelementptr inbounds %struct.sv, %struct.sv* %257, i32 0, i32 0
  %258 = load i8*, i8** %sv_any319, align 8
  %259 = bitcast i8* %258 to %struct.xpvgv*
  %xnv_u320 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %259, i32 0, i32 5
  %xgv_stash321 = bitcast %union._xnvu* %xnv_u320 to %struct.hv**
  %260 = load %struct.hv*, %struct.hv** %xgv_stash321, align 8
  %sv_any322 = getelementptr inbounds %struct.hv, %struct.hv* %260, i32 0, i32 0
  %261 = load %struct.xpvhv*, %struct.xpvhv** %sv_any322, align 8
  %xhv_max323 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %261, i32 0, i32 3
  %262 = load i64, i64* %xhv_max323, align 8
  %add324 = add i64 %262, 1
  %arrayidx325 = getelementptr inbounds %struct.he*, %struct.he** %256, i64 %add324
  %263 = bitcast %struct.he** %arrayidx325 to %struct.xpvhv_aux*
  %xhv_name_u326 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %263, i32 0, i32 0
  %xhvnameu_name327 = bitcast %union._xhvnameu* %xhv_name_u326 to %struct.hek**
  %264 = load %struct.hek*, %struct.hek** %xhvnameu_name327, align 8
  %tobool328 = icmp ne %struct.hek* %264, null
  br i1 %tobool328, label %land.lhs.true329, label %cond.false450

land.lhs.true329:                                 ; preds = %land.lhs.true313
  %265 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any330 = getelementptr inbounds %struct.sv, %struct.sv* %265, i32 0, i32 0
  %266 = load i8*, i8** %sv_any330, align 8
  %267 = bitcast i8* %266 to %struct.xpvgv*
  %xnv_u331 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %267, i32 0, i32 5
  %xgv_stash332 = bitcast %union._xnvu* %xnv_u331 to %struct.hv**
  %268 = load %struct.hv*, %struct.hv** %xgv_stash332, align 8
  %sv_u333 = getelementptr inbounds %struct.hv, %struct.hv* %268, i32 0, i32 3
  %svu_hash334 = bitcast %union.anon.4* %sv_u333 to %struct.he***
  %269 = load %struct.he**, %struct.he*** %svu_hash334, align 8
  %270 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any335 = getelementptr inbounds %struct.sv, %struct.sv* %270, i32 0, i32 0
  %271 = load i8*, i8** %sv_any335, align 8
  %272 = bitcast i8* %271 to %struct.xpvgv*
  %xnv_u336 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %272, i32 0, i32 5
  %xgv_stash337 = bitcast %union._xnvu* %xnv_u336 to %struct.hv**
  %273 = load %struct.hv*, %struct.hv** %xgv_stash337, align 8
  %sv_any338 = getelementptr inbounds %struct.hv, %struct.hv* %273, i32 0, i32 0
  %274 = load %struct.xpvhv*, %struct.xpvhv** %sv_any338, align 8
  %xhv_max339 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %274, i32 0, i32 3
  %275 = load i64, i64* %xhv_max339, align 8
  %add340 = add i64 %275, 1
  %arrayidx341 = getelementptr inbounds %struct.he*, %struct.he** %269, i64 %add340
  %276 = bitcast %struct.he** %arrayidx341 to %struct.xpvhv_aux*
  %xhv_name_count342 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %276, i32 0, i32 4
  %277 = load i32, i32* %xhv_name_count342, align 4
  %cmp343 = icmp ne i32 %277, -1
  br i1 %cmp343, label %cond.true345, label %cond.false450

cond.true345:                                     ; preds = %land.lhs.true329
  %278 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any346 = getelementptr inbounds %struct.sv, %struct.sv* %278, i32 0, i32 0
  %279 = load i8*, i8** %sv_any346, align 8
  %280 = bitcast i8* %279 to %struct.xpvgv*
  %xnv_u347 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %280, i32 0, i32 5
  %xgv_stash348 = bitcast %union._xnvu* %xnv_u347 to %struct.hv**
  %281 = load %struct.hv*, %struct.hv** %xgv_stash348, align 8
  %sv_u349 = getelementptr inbounds %struct.hv, %struct.hv* %281, i32 0, i32 3
  %svu_hash350 = bitcast %union.anon.4* %sv_u349 to %struct.he***
  %282 = load %struct.he**, %struct.he*** %svu_hash350, align 8
  %283 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any351 = getelementptr inbounds %struct.sv, %struct.sv* %283, i32 0, i32 0
  %284 = load i8*, i8** %sv_any351, align 8
  %285 = bitcast i8* %284 to %struct.xpvgv*
  %xnv_u352 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %285, i32 0, i32 5
  %xgv_stash353 = bitcast %union._xnvu* %xnv_u352 to %struct.hv**
  %286 = load %struct.hv*, %struct.hv** %xgv_stash353, align 8
  %sv_any354 = getelementptr inbounds %struct.hv, %struct.hv* %286, i32 0, i32 0
  %287 = load %struct.xpvhv*, %struct.xpvhv** %sv_any354, align 8
  %xhv_max355 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %287, i32 0, i32 3
  %288 = load i64, i64* %xhv_max355, align 8
  %add356 = add i64 %288, 1
  %arrayidx357 = getelementptr inbounds %struct.he*, %struct.he** %282, i64 %add356
  %289 = bitcast %struct.he** %arrayidx357 to %struct.xpvhv_aux*
  %xhv_name_count358 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %289, i32 0, i32 4
  %290 = load i32, i32* %xhv_name_count358, align 4
  %cmp359 = icmp sgt i32 %290, 0
  br i1 %cmp359, label %cond.true361, label %cond.false377

cond.true361:                                     ; preds = %cond.true345
  %291 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any362 = getelementptr inbounds %struct.sv, %struct.sv* %291, i32 0, i32 0
  %292 = load i8*, i8** %sv_any362, align 8
  %293 = bitcast i8* %292 to %struct.xpvgv*
  %xnv_u363 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %293, i32 0, i32 5
  %xgv_stash364 = bitcast %union._xnvu* %xnv_u363 to %struct.hv**
  %294 = load %struct.hv*, %struct.hv** %xgv_stash364, align 8
  %sv_u365 = getelementptr inbounds %struct.hv, %struct.hv* %294, i32 0, i32 3
  %svu_hash366 = bitcast %union.anon.4* %sv_u365 to %struct.he***
  %295 = load %struct.he**, %struct.he*** %svu_hash366, align 8
  %296 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any367 = getelementptr inbounds %struct.sv, %struct.sv* %296, i32 0, i32 0
  %297 = load i8*, i8** %sv_any367, align 8
  %298 = bitcast i8* %297 to %struct.xpvgv*
  %xnv_u368 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %298, i32 0, i32 5
  %xgv_stash369 = bitcast %union._xnvu* %xnv_u368 to %struct.hv**
  %299 = load %struct.hv*, %struct.hv** %xgv_stash369, align 8
  %sv_any370 = getelementptr inbounds %struct.hv, %struct.hv* %299, i32 0, i32 0
  %300 = load %struct.xpvhv*, %struct.xpvhv** %sv_any370, align 8
  %xhv_max371 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %300, i32 0, i32 3
  %301 = load i64, i64* %xhv_max371, align 8
  %add372 = add i64 %301, 1
  %arrayidx373 = getelementptr inbounds %struct.he*, %struct.he** %295, i64 %add372
  %302 = bitcast %struct.he** %arrayidx373 to %struct.xpvhv_aux*
  %xhv_name_u374 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %302, i32 0, i32 0
  %xhvnameu_names375 = bitcast %union._xhvnameu* %xhv_name_u374 to %struct.hek***
  %303 = load %struct.hek**, %struct.hek*** %xhvnameu_names375, align 8
  %arrayidx376 = getelementptr inbounds %struct.hek*, %struct.hek** %303, i64 0
  %304 = load %struct.hek*, %struct.hek** %arrayidx376, align 8
  br label %cond.end445

cond.false377:                                    ; preds = %cond.true345
  %305 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any378 = getelementptr inbounds %struct.sv, %struct.sv* %305, i32 0, i32 0
  %306 = load i8*, i8** %sv_any378, align 8
  %307 = bitcast i8* %306 to %struct.xpvgv*
  %xnv_u379 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %307, i32 0, i32 5
  %xgv_stash380 = bitcast %union._xnvu* %xnv_u379 to %struct.hv**
  %308 = load %struct.hv*, %struct.hv** %xgv_stash380, align 8
  %sv_u381 = getelementptr inbounds %struct.hv, %struct.hv* %308, i32 0, i32 3
  %svu_hash382 = bitcast %union.anon.4* %sv_u381 to %struct.he***
  %309 = load %struct.he**, %struct.he*** %svu_hash382, align 8
  %310 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any383 = getelementptr inbounds %struct.sv, %struct.sv* %310, i32 0, i32 0
  %311 = load i8*, i8** %sv_any383, align 8
  %312 = bitcast i8* %311 to %struct.xpvgv*
  %xnv_u384 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %312, i32 0, i32 5
  %xgv_stash385 = bitcast %union._xnvu* %xnv_u384 to %struct.hv**
  %313 = load %struct.hv*, %struct.hv** %xgv_stash385, align 8
  %sv_any386 = getelementptr inbounds %struct.hv, %struct.hv* %313, i32 0, i32 0
  %314 = load %struct.xpvhv*, %struct.xpvhv** %sv_any386, align 8
  %xhv_max387 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %314, i32 0, i32 3
  %315 = load i64, i64* %xhv_max387, align 8
  %add388 = add i64 %315, 1
  %arrayidx389 = getelementptr inbounds %struct.he*, %struct.he** %309, i64 %add388
  %316 = bitcast %struct.he** %arrayidx389 to %struct.xpvhv_aux*
  %xhv_name_count390 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %316, i32 0, i32 4
  %317 = load i32, i32* %xhv_name_count390, align 4
  %cmp391 = icmp slt i32 %317, -1
  br i1 %cmp391, label %cond.true393, label %cond.false409

cond.true393:                                     ; preds = %cond.false377
  %318 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any394 = getelementptr inbounds %struct.sv, %struct.sv* %318, i32 0, i32 0
  %319 = load i8*, i8** %sv_any394, align 8
  %320 = bitcast i8* %319 to %struct.xpvgv*
  %xnv_u395 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %320, i32 0, i32 5
  %xgv_stash396 = bitcast %union._xnvu* %xnv_u395 to %struct.hv**
  %321 = load %struct.hv*, %struct.hv** %xgv_stash396, align 8
  %sv_u397 = getelementptr inbounds %struct.hv, %struct.hv* %321, i32 0, i32 3
  %svu_hash398 = bitcast %union.anon.4* %sv_u397 to %struct.he***
  %322 = load %struct.he**, %struct.he*** %svu_hash398, align 8
  %323 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any399 = getelementptr inbounds %struct.sv, %struct.sv* %323, i32 0, i32 0
  %324 = load i8*, i8** %sv_any399, align 8
  %325 = bitcast i8* %324 to %struct.xpvgv*
  %xnv_u400 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %325, i32 0, i32 5
  %xgv_stash401 = bitcast %union._xnvu* %xnv_u400 to %struct.hv**
  %326 = load %struct.hv*, %struct.hv** %xgv_stash401, align 8
  %sv_any402 = getelementptr inbounds %struct.hv, %struct.hv* %326, i32 0, i32 0
  %327 = load %struct.xpvhv*, %struct.xpvhv** %sv_any402, align 8
  %xhv_max403 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %327, i32 0, i32 3
  %328 = load i64, i64* %xhv_max403, align 8
  %add404 = add i64 %328, 1
  %arrayidx405 = getelementptr inbounds %struct.he*, %struct.he** %322, i64 %add404
  %329 = bitcast %struct.he** %arrayidx405 to %struct.xpvhv_aux*
  %xhv_name_u406 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %329, i32 0, i32 0
  %xhvnameu_names407 = bitcast %union._xhvnameu* %xhv_name_u406 to %struct.hek***
  %330 = load %struct.hek**, %struct.hek*** %xhvnameu_names407, align 8
  %arrayidx408 = getelementptr inbounds %struct.hek*, %struct.hek** %330, i64 1
  %331 = load %struct.hek*, %struct.hek** %arrayidx408, align 8
  br label %cond.end443

cond.false409:                                    ; preds = %cond.false377
  %332 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any410 = getelementptr inbounds %struct.sv, %struct.sv* %332, i32 0, i32 0
  %333 = load i8*, i8** %sv_any410, align 8
  %334 = bitcast i8* %333 to %struct.xpvgv*
  %xnv_u411 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %334, i32 0, i32 5
  %xgv_stash412 = bitcast %union._xnvu* %xnv_u411 to %struct.hv**
  %335 = load %struct.hv*, %struct.hv** %xgv_stash412, align 8
  %sv_u413 = getelementptr inbounds %struct.hv, %struct.hv* %335, i32 0, i32 3
  %svu_hash414 = bitcast %union.anon.4* %sv_u413 to %struct.he***
  %336 = load %struct.he**, %struct.he*** %svu_hash414, align 8
  %337 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any415 = getelementptr inbounds %struct.sv, %struct.sv* %337, i32 0, i32 0
  %338 = load i8*, i8** %sv_any415, align 8
  %339 = bitcast i8* %338 to %struct.xpvgv*
  %xnv_u416 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %339, i32 0, i32 5
  %xgv_stash417 = bitcast %union._xnvu* %xnv_u416 to %struct.hv**
  %340 = load %struct.hv*, %struct.hv** %xgv_stash417, align 8
  %sv_any418 = getelementptr inbounds %struct.hv, %struct.hv* %340, i32 0, i32 0
  %341 = load %struct.xpvhv*, %struct.xpvhv** %sv_any418, align 8
  %xhv_max419 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %341, i32 0, i32 3
  %342 = load i64, i64* %xhv_max419, align 8
  %add420 = add i64 %342, 1
  %arrayidx421 = getelementptr inbounds %struct.he*, %struct.he** %336, i64 %add420
  %343 = bitcast %struct.he** %arrayidx421 to %struct.xpvhv_aux*
  %xhv_name_count422 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %343, i32 0, i32 4
  %344 = load i32, i32* %xhv_name_count422, align 4
  %cmp423 = icmp eq i32 %344, -1
  br i1 %cmp423, label %cond.true425, label %cond.false426

cond.true425:                                     ; preds = %cond.false409
  br label %cond.end441

cond.false426:                                    ; preds = %cond.false409
  %345 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any427 = getelementptr inbounds %struct.sv, %struct.sv* %345, i32 0, i32 0
  %346 = load i8*, i8** %sv_any427, align 8
  %347 = bitcast i8* %346 to %struct.xpvgv*
  %xnv_u428 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %347, i32 0, i32 5
  %xgv_stash429 = bitcast %union._xnvu* %xnv_u428 to %struct.hv**
  %348 = load %struct.hv*, %struct.hv** %xgv_stash429, align 8
  %sv_u430 = getelementptr inbounds %struct.hv, %struct.hv* %348, i32 0, i32 3
  %svu_hash431 = bitcast %union.anon.4* %sv_u430 to %struct.he***
  %349 = load %struct.he**, %struct.he*** %svu_hash431, align 8
  %350 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any432 = getelementptr inbounds %struct.sv, %struct.sv* %350, i32 0, i32 0
  %351 = load i8*, i8** %sv_any432, align 8
  %352 = bitcast i8* %351 to %struct.xpvgv*
  %xnv_u433 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %352, i32 0, i32 5
  %xgv_stash434 = bitcast %union._xnvu* %xnv_u433 to %struct.hv**
  %353 = load %struct.hv*, %struct.hv** %xgv_stash434, align 8
  %sv_any435 = getelementptr inbounds %struct.hv, %struct.hv* %353, i32 0, i32 0
  %354 = load %struct.xpvhv*, %struct.xpvhv** %sv_any435, align 8
  %xhv_max436 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %354, i32 0, i32 3
  %355 = load i64, i64* %xhv_max436, align 8
  %add437 = add i64 %355, 1
  %arrayidx438 = getelementptr inbounds %struct.he*, %struct.he** %349, i64 %add437
  %356 = bitcast %struct.he** %arrayidx438 to %struct.xpvhv_aux*
  %xhv_name_u439 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %356, i32 0, i32 0
  %xhvnameu_name440 = bitcast %union._xhvnameu* %xhv_name_u439 to %struct.hek**
  %357 = load %struct.hek*, %struct.hek** %xhvnameu_name440, align 8
  br label %cond.end441

cond.end441:                                      ; preds = %cond.false426, %cond.true425
  %cond442 = phi %struct.hek* [ null, %cond.true425 ], [ %357, %cond.false426 ]
  br label %cond.end443

cond.end443:                                      ; preds = %cond.end441, %cond.true393
  %cond444 = phi %struct.hek* [ %331, %cond.true393 ], [ %cond442, %cond.end441 ]
  br label %cond.end445

cond.end445:                                      ; preds = %cond.end443, %cond.true361
  %cond446 = phi %struct.hek* [ %304, %cond.true361 ], [ %cond444, %cond.end443 ]
  %hek_key447 = getelementptr inbounds %struct.hek, %struct.hek* %cond446, i32 0, i32 2
  %arraydecay448 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key447, i64 0, i64 0
  %tobool449 = icmp ne i8* %arraydecay448, null
  br i1 %tobool449, label %if.then451, label %if.end452

cond.false450:                                    ; preds = %land.lhs.true329, %land.lhs.true313, %land.lhs.true306
  br i1 false, label %if.then451, label %if.end452

if.then451:                                       ; preds = %cond.false450, %cond.end445
  store i32 1, i32* %mro_changes, align 4
  br label %if.end452

if.end452:                                        ; preds = %if.then451, %cond.false450, %cond.end445, %land.lhs.true301, %cond.false295, %cond.true294, %land.lhs.true283, %if.end281
  %358 = load i32, i32* %dtype.addr, align 4
  %cmp453 = icmp eq i32 %358, 9
  br i1 %cmp453, label %if.then455, label %if.end656

if.then455:                                       ; preds = %if.end452
  %359 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %360 = bitcast %struct.sv* %359 to %struct.gv*
  %sv_any457 = getelementptr inbounds %struct.gv, %struct.gv* %360, i32 0, i32 0
  %361 = load %struct.xpvgv*, %struct.xpvgv** %sv_any457, align 8
  %xiv_u458 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %361, i32 0, i32 4
  %xivu_namehek459 = bitcast %union._xivu* %xiv_u458 to %struct.hek**
  %362 = load %struct.hek*, %struct.hek** %xivu_namehek459, align 8
  %hek_key460 = getelementptr inbounds %struct.hek, %struct.hek* %362, i32 0, i32 2
  %arraydecay461 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key460, i64 0, i64 0
  store i8* %arraydecay461, i8** %name456, align 8
  %363 = load i8*, i8** %name456, align 8
  %call462 = call i32 @strcmp(i8* %363, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0)) #8
  %tobool463 = icmp ne i32 %call462, 0
  br i1 %tobool463, label %if.else615, label %land.lhs.true464

land.lhs.true464:                                 ; preds = %if.then455
  %364 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any465 = getelementptr inbounds %struct.sv, %struct.sv* %364, i32 0, i32 0
  %365 = load i8*, i8** %sv_any465, align 8
  %366 = bitcast i8* %365 to %struct.xpvgv*
  %xnv_u466 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %366, i32 0, i32 5
  %xgv_stash467 = bitcast %union._xnvu* %xnv_u466 to %struct.hv**
  %367 = load %struct.hv*, %struct.hv** %xgv_stash467, align 8
  %tobool468 = icmp ne %struct.hv* %367, null
  br i1 %tobool468, label %land.lhs.true469, label %if.else615

land.lhs.true469:                                 ; preds = %land.lhs.true464
  %368 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any470 = getelementptr inbounds %struct.sv, %struct.sv* %368, i32 0, i32 0
  %369 = load i8*, i8** %sv_any470, align 8
  %370 = bitcast i8* %369 to %struct.xpvgv*
  %xnv_u471 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %370, i32 0, i32 5
  %xgv_stash472 = bitcast %union._xnvu* %xnv_u471 to %struct.hv**
  %371 = load %struct.hv*, %struct.hv** %xgv_stash472, align 8
  %sv_flags473 = getelementptr inbounds %struct.hv, %struct.hv* %371, i32 0, i32 2
  %372 = load i32, i32* %sv_flags473, align 4
  %and474 = and i32 %372, 33554432
  %tobool475 = icmp ne i32 %and474, 0
  br i1 %tobool475, label %land.lhs.true476, label %cond.false613

land.lhs.true476:                                 ; preds = %land.lhs.true469
  %373 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any477 = getelementptr inbounds %struct.sv, %struct.sv* %373, i32 0, i32 0
  %374 = load i8*, i8** %sv_any477, align 8
  %375 = bitcast i8* %374 to %struct.xpvgv*
  %xnv_u478 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %375, i32 0, i32 5
  %xgv_stash479 = bitcast %union._xnvu* %xnv_u478 to %struct.hv**
  %376 = load %struct.hv*, %struct.hv** %xgv_stash479, align 8
  %sv_u480 = getelementptr inbounds %struct.hv, %struct.hv* %376, i32 0, i32 3
  %svu_hash481 = bitcast %union.anon.4* %sv_u480 to %struct.he***
  %377 = load %struct.he**, %struct.he*** %svu_hash481, align 8
  %378 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any482 = getelementptr inbounds %struct.sv, %struct.sv* %378, i32 0, i32 0
  %379 = load i8*, i8** %sv_any482, align 8
  %380 = bitcast i8* %379 to %struct.xpvgv*
  %xnv_u483 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %380, i32 0, i32 5
  %xgv_stash484 = bitcast %union._xnvu* %xnv_u483 to %struct.hv**
  %381 = load %struct.hv*, %struct.hv** %xgv_stash484, align 8
  %sv_any485 = getelementptr inbounds %struct.hv, %struct.hv* %381, i32 0, i32 0
  %382 = load %struct.xpvhv*, %struct.xpvhv** %sv_any485, align 8
  %xhv_max486 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %382, i32 0, i32 3
  %383 = load i64, i64* %xhv_max486, align 8
  %add487 = add i64 %383, 1
  %arrayidx488 = getelementptr inbounds %struct.he*, %struct.he** %377, i64 %add487
  %384 = bitcast %struct.he** %arrayidx488 to %struct.xpvhv_aux*
  %xhv_name_u489 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %384, i32 0, i32 0
  %xhvnameu_name490 = bitcast %union._xhvnameu* %xhv_name_u489 to %struct.hek**
  %385 = load %struct.hek*, %struct.hek** %xhvnameu_name490, align 8
  %tobool491 = icmp ne %struct.hek* %385, null
  br i1 %tobool491, label %land.lhs.true492, label %cond.false613

land.lhs.true492:                                 ; preds = %land.lhs.true476
  %386 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any493 = getelementptr inbounds %struct.sv, %struct.sv* %386, i32 0, i32 0
  %387 = load i8*, i8** %sv_any493, align 8
  %388 = bitcast i8* %387 to %struct.xpvgv*
  %xnv_u494 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %388, i32 0, i32 5
  %xgv_stash495 = bitcast %union._xnvu* %xnv_u494 to %struct.hv**
  %389 = load %struct.hv*, %struct.hv** %xgv_stash495, align 8
  %sv_u496 = getelementptr inbounds %struct.hv, %struct.hv* %389, i32 0, i32 3
  %svu_hash497 = bitcast %union.anon.4* %sv_u496 to %struct.he***
  %390 = load %struct.he**, %struct.he*** %svu_hash497, align 8
  %391 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any498 = getelementptr inbounds %struct.sv, %struct.sv* %391, i32 0, i32 0
  %392 = load i8*, i8** %sv_any498, align 8
  %393 = bitcast i8* %392 to %struct.xpvgv*
  %xnv_u499 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %393, i32 0, i32 5
  %xgv_stash500 = bitcast %union._xnvu* %xnv_u499 to %struct.hv**
  %394 = load %struct.hv*, %struct.hv** %xgv_stash500, align 8
  %sv_any501 = getelementptr inbounds %struct.hv, %struct.hv* %394, i32 0, i32 0
  %395 = load %struct.xpvhv*, %struct.xpvhv** %sv_any501, align 8
  %xhv_max502 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %395, i32 0, i32 3
  %396 = load i64, i64* %xhv_max502, align 8
  %add503 = add i64 %396, 1
  %arrayidx504 = getelementptr inbounds %struct.he*, %struct.he** %390, i64 %add503
  %397 = bitcast %struct.he** %arrayidx504 to %struct.xpvhv_aux*
  %xhv_name_count505 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %397, i32 0, i32 4
  %398 = load i32, i32* %xhv_name_count505, align 4
  %cmp506 = icmp ne i32 %398, -1
  br i1 %cmp506, label %cond.true508, label %cond.false613

cond.true508:                                     ; preds = %land.lhs.true492
  %399 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any509 = getelementptr inbounds %struct.sv, %struct.sv* %399, i32 0, i32 0
  %400 = load i8*, i8** %sv_any509, align 8
  %401 = bitcast i8* %400 to %struct.xpvgv*
  %xnv_u510 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %401, i32 0, i32 5
  %xgv_stash511 = bitcast %union._xnvu* %xnv_u510 to %struct.hv**
  %402 = load %struct.hv*, %struct.hv** %xgv_stash511, align 8
  %sv_u512 = getelementptr inbounds %struct.hv, %struct.hv* %402, i32 0, i32 3
  %svu_hash513 = bitcast %union.anon.4* %sv_u512 to %struct.he***
  %403 = load %struct.he**, %struct.he*** %svu_hash513, align 8
  %404 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any514 = getelementptr inbounds %struct.sv, %struct.sv* %404, i32 0, i32 0
  %405 = load i8*, i8** %sv_any514, align 8
  %406 = bitcast i8* %405 to %struct.xpvgv*
  %xnv_u515 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %406, i32 0, i32 5
  %xgv_stash516 = bitcast %union._xnvu* %xnv_u515 to %struct.hv**
  %407 = load %struct.hv*, %struct.hv** %xgv_stash516, align 8
  %sv_any517 = getelementptr inbounds %struct.hv, %struct.hv* %407, i32 0, i32 0
  %408 = load %struct.xpvhv*, %struct.xpvhv** %sv_any517, align 8
  %xhv_max518 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %408, i32 0, i32 3
  %409 = load i64, i64* %xhv_max518, align 8
  %add519 = add i64 %409, 1
  %arrayidx520 = getelementptr inbounds %struct.he*, %struct.he** %403, i64 %add519
  %410 = bitcast %struct.he** %arrayidx520 to %struct.xpvhv_aux*
  %xhv_name_count521 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %410, i32 0, i32 4
  %411 = load i32, i32* %xhv_name_count521, align 4
  %cmp522 = icmp sgt i32 %411, 0
  br i1 %cmp522, label %cond.true524, label %cond.false540

cond.true524:                                     ; preds = %cond.true508
  %412 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any525 = getelementptr inbounds %struct.sv, %struct.sv* %412, i32 0, i32 0
  %413 = load i8*, i8** %sv_any525, align 8
  %414 = bitcast i8* %413 to %struct.xpvgv*
  %xnv_u526 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %414, i32 0, i32 5
  %xgv_stash527 = bitcast %union._xnvu* %xnv_u526 to %struct.hv**
  %415 = load %struct.hv*, %struct.hv** %xgv_stash527, align 8
  %sv_u528 = getelementptr inbounds %struct.hv, %struct.hv* %415, i32 0, i32 3
  %svu_hash529 = bitcast %union.anon.4* %sv_u528 to %struct.he***
  %416 = load %struct.he**, %struct.he*** %svu_hash529, align 8
  %417 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any530 = getelementptr inbounds %struct.sv, %struct.sv* %417, i32 0, i32 0
  %418 = load i8*, i8** %sv_any530, align 8
  %419 = bitcast i8* %418 to %struct.xpvgv*
  %xnv_u531 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %419, i32 0, i32 5
  %xgv_stash532 = bitcast %union._xnvu* %xnv_u531 to %struct.hv**
  %420 = load %struct.hv*, %struct.hv** %xgv_stash532, align 8
  %sv_any533 = getelementptr inbounds %struct.hv, %struct.hv* %420, i32 0, i32 0
  %421 = load %struct.xpvhv*, %struct.xpvhv** %sv_any533, align 8
  %xhv_max534 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %421, i32 0, i32 3
  %422 = load i64, i64* %xhv_max534, align 8
  %add535 = add i64 %422, 1
  %arrayidx536 = getelementptr inbounds %struct.he*, %struct.he** %416, i64 %add535
  %423 = bitcast %struct.he** %arrayidx536 to %struct.xpvhv_aux*
  %xhv_name_u537 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %423, i32 0, i32 0
  %xhvnameu_names538 = bitcast %union._xhvnameu* %xhv_name_u537 to %struct.hek***
  %424 = load %struct.hek**, %struct.hek*** %xhvnameu_names538, align 8
  %arrayidx539 = getelementptr inbounds %struct.hek*, %struct.hek** %424, i64 0
  %425 = load %struct.hek*, %struct.hek** %arrayidx539, align 8
  br label %cond.end608

cond.false540:                                    ; preds = %cond.true508
  %426 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any541 = getelementptr inbounds %struct.sv, %struct.sv* %426, i32 0, i32 0
  %427 = load i8*, i8** %sv_any541, align 8
  %428 = bitcast i8* %427 to %struct.xpvgv*
  %xnv_u542 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %428, i32 0, i32 5
  %xgv_stash543 = bitcast %union._xnvu* %xnv_u542 to %struct.hv**
  %429 = load %struct.hv*, %struct.hv** %xgv_stash543, align 8
  %sv_u544 = getelementptr inbounds %struct.hv, %struct.hv* %429, i32 0, i32 3
  %svu_hash545 = bitcast %union.anon.4* %sv_u544 to %struct.he***
  %430 = load %struct.he**, %struct.he*** %svu_hash545, align 8
  %431 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any546 = getelementptr inbounds %struct.sv, %struct.sv* %431, i32 0, i32 0
  %432 = load i8*, i8** %sv_any546, align 8
  %433 = bitcast i8* %432 to %struct.xpvgv*
  %xnv_u547 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %433, i32 0, i32 5
  %xgv_stash548 = bitcast %union._xnvu* %xnv_u547 to %struct.hv**
  %434 = load %struct.hv*, %struct.hv** %xgv_stash548, align 8
  %sv_any549 = getelementptr inbounds %struct.hv, %struct.hv* %434, i32 0, i32 0
  %435 = load %struct.xpvhv*, %struct.xpvhv** %sv_any549, align 8
  %xhv_max550 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %435, i32 0, i32 3
  %436 = load i64, i64* %xhv_max550, align 8
  %add551 = add i64 %436, 1
  %arrayidx552 = getelementptr inbounds %struct.he*, %struct.he** %430, i64 %add551
  %437 = bitcast %struct.he** %arrayidx552 to %struct.xpvhv_aux*
  %xhv_name_count553 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %437, i32 0, i32 4
  %438 = load i32, i32* %xhv_name_count553, align 4
  %cmp554 = icmp slt i32 %438, -1
  br i1 %cmp554, label %cond.true556, label %cond.false572

cond.true556:                                     ; preds = %cond.false540
  %439 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any557 = getelementptr inbounds %struct.sv, %struct.sv* %439, i32 0, i32 0
  %440 = load i8*, i8** %sv_any557, align 8
  %441 = bitcast i8* %440 to %struct.xpvgv*
  %xnv_u558 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %441, i32 0, i32 5
  %xgv_stash559 = bitcast %union._xnvu* %xnv_u558 to %struct.hv**
  %442 = load %struct.hv*, %struct.hv** %xgv_stash559, align 8
  %sv_u560 = getelementptr inbounds %struct.hv, %struct.hv* %442, i32 0, i32 3
  %svu_hash561 = bitcast %union.anon.4* %sv_u560 to %struct.he***
  %443 = load %struct.he**, %struct.he*** %svu_hash561, align 8
  %444 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any562 = getelementptr inbounds %struct.sv, %struct.sv* %444, i32 0, i32 0
  %445 = load i8*, i8** %sv_any562, align 8
  %446 = bitcast i8* %445 to %struct.xpvgv*
  %xnv_u563 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %446, i32 0, i32 5
  %xgv_stash564 = bitcast %union._xnvu* %xnv_u563 to %struct.hv**
  %447 = load %struct.hv*, %struct.hv** %xgv_stash564, align 8
  %sv_any565 = getelementptr inbounds %struct.hv, %struct.hv* %447, i32 0, i32 0
  %448 = load %struct.xpvhv*, %struct.xpvhv** %sv_any565, align 8
  %xhv_max566 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %448, i32 0, i32 3
  %449 = load i64, i64* %xhv_max566, align 8
  %add567 = add i64 %449, 1
  %arrayidx568 = getelementptr inbounds %struct.he*, %struct.he** %443, i64 %add567
  %450 = bitcast %struct.he** %arrayidx568 to %struct.xpvhv_aux*
  %xhv_name_u569 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %450, i32 0, i32 0
  %xhvnameu_names570 = bitcast %union._xhvnameu* %xhv_name_u569 to %struct.hek***
  %451 = load %struct.hek**, %struct.hek*** %xhvnameu_names570, align 8
  %arrayidx571 = getelementptr inbounds %struct.hek*, %struct.hek** %451, i64 1
  %452 = load %struct.hek*, %struct.hek** %arrayidx571, align 8
  br label %cond.end606

cond.false572:                                    ; preds = %cond.false540
  %453 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any573 = getelementptr inbounds %struct.sv, %struct.sv* %453, i32 0, i32 0
  %454 = load i8*, i8** %sv_any573, align 8
  %455 = bitcast i8* %454 to %struct.xpvgv*
  %xnv_u574 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %455, i32 0, i32 5
  %xgv_stash575 = bitcast %union._xnvu* %xnv_u574 to %struct.hv**
  %456 = load %struct.hv*, %struct.hv** %xgv_stash575, align 8
  %sv_u576 = getelementptr inbounds %struct.hv, %struct.hv* %456, i32 0, i32 3
  %svu_hash577 = bitcast %union.anon.4* %sv_u576 to %struct.he***
  %457 = load %struct.he**, %struct.he*** %svu_hash577, align 8
  %458 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any578 = getelementptr inbounds %struct.sv, %struct.sv* %458, i32 0, i32 0
  %459 = load i8*, i8** %sv_any578, align 8
  %460 = bitcast i8* %459 to %struct.xpvgv*
  %xnv_u579 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %460, i32 0, i32 5
  %xgv_stash580 = bitcast %union._xnvu* %xnv_u579 to %struct.hv**
  %461 = load %struct.hv*, %struct.hv** %xgv_stash580, align 8
  %sv_any581 = getelementptr inbounds %struct.hv, %struct.hv* %461, i32 0, i32 0
  %462 = load %struct.xpvhv*, %struct.xpvhv** %sv_any581, align 8
  %xhv_max582 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %462, i32 0, i32 3
  %463 = load i64, i64* %xhv_max582, align 8
  %add583 = add i64 %463, 1
  %arrayidx584 = getelementptr inbounds %struct.he*, %struct.he** %457, i64 %add583
  %464 = bitcast %struct.he** %arrayidx584 to %struct.xpvhv_aux*
  %xhv_name_count585 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %464, i32 0, i32 4
  %465 = load i32, i32* %xhv_name_count585, align 4
  %cmp586 = icmp eq i32 %465, -1
  br i1 %cmp586, label %cond.true588, label %cond.false589

cond.true588:                                     ; preds = %cond.false572
  br label %cond.end604

cond.false589:                                    ; preds = %cond.false572
  %466 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any590 = getelementptr inbounds %struct.sv, %struct.sv* %466, i32 0, i32 0
  %467 = load i8*, i8** %sv_any590, align 8
  %468 = bitcast i8* %467 to %struct.xpvgv*
  %xnv_u591 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %468, i32 0, i32 5
  %xgv_stash592 = bitcast %union._xnvu* %xnv_u591 to %struct.hv**
  %469 = load %struct.hv*, %struct.hv** %xgv_stash592, align 8
  %sv_u593 = getelementptr inbounds %struct.hv, %struct.hv* %469, i32 0, i32 3
  %svu_hash594 = bitcast %union.anon.4* %sv_u593 to %struct.he***
  %470 = load %struct.he**, %struct.he*** %svu_hash594, align 8
  %471 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any595 = getelementptr inbounds %struct.sv, %struct.sv* %471, i32 0, i32 0
  %472 = load i8*, i8** %sv_any595, align 8
  %473 = bitcast i8* %472 to %struct.xpvgv*
  %xnv_u596 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %473, i32 0, i32 5
  %xgv_stash597 = bitcast %union._xnvu* %xnv_u596 to %struct.hv**
  %474 = load %struct.hv*, %struct.hv** %xgv_stash597, align 8
  %sv_any598 = getelementptr inbounds %struct.hv, %struct.hv* %474, i32 0, i32 0
  %475 = load %struct.xpvhv*, %struct.xpvhv** %sv_any598, align 8
  %xhv_max599 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %475, i32 0, i32 3
  %476 = load i64, i64* %xhv_max599, align 8
  %add600 = add i64 %476, 1
  %arrayidx601 = getelementptr inbounds %struct.he*, %struct.he** %470, i64 %add600
  %477 = bitcast %struct.he** %arrayidx601 to %struct.xpvhv_aux*
  %xhv_name_u602 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %477, i32 0, i32 0
  %xhvnameu_name603 = bitcast %union._xhvnameu* %xhv_name_u602 to %struct.hek**
  %478 = load %struct.hek*, %struct.hek** %xhvnameu_name603, align 8
  br label %cond.end604

cond.end604:                                      ; preds = %cond.false589, %cond.true588
  %cond605 = phi %struct.hek* [ null, %cond.true588 ], [ %478, %cond.false589 ]
  br label %cond.end606

cond.end606:                                      ; preds = %cond.end604, %cond.true556
  %cond607 = phi %struct.hek* [ %452, %cond.true556 ], [ %cond605, %cond.end604 ]
  br label %cond.end608

cond.end608:                                      ; preds = %cond.end606, %cond.true524
  %cond609 = phi %struct.hek* [ %425, %cond.true524 ], [ %cond607, %cond.end606 ]
  %hek_key610 = getelementptr inbounds %struct.hek, %struct.hek* %cond609, i32 0, i32 2
  %arraydecay611 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key610, i64 0, i64 0
  %tobool612 = icmp ne i8* %arraydecay611, null
  br i1 %tobool612, label %if.then614, label %if.else615

cond.false613:                                    ; preds = %land.lhs.true492, %land.lhs.true476, %land.lhs.true469
  br i1 false, label %if.then614, label %if.else615

if.then614:                                       ; preds = %cond.false613, %cond.end608
  store i32 2, i32* %mro_changes, align 4
  br label %if.end652

if.else615:                                       ; preds = %cond.false613, %cond.end608, %land.lhs.true464, %if.then455
  %479 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any617 = getelementptr inbounds %struct.sv, %struct.sv* %479, i32 0, i32 0
  %480 = load i8*, i8** %sv_any617, align 8
  %481 = bitcast i8* %480 to %struct.xpvgv*
  %xiv_u618 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %481, i32 0, i32 4
  %xivu_namehek619 = bitcast %union._xivu* %xiv_u618 to %struct.hek**
  %482 = load %struct.hek*, %struct.hek** %xivu_namehek619, align 8
  %hek_len620 = getelementptr inbounds %struct.hek, %struct.hek* %482, i32 0, i32 1
  %483 = load i32, i32* %hek_len620, align 4
  %conv621 = sext i32 %483 to i64
  store i64 %conv621, i64* %len616, align 8
  %484 = load i64, i64* %len616, align 8
  %cmp622 = icmp ugt i64 %484, 1
  br i1 %cmp622, label %land.lhs.true624, label %lor.lhs.false635

land.lhs.true624:                                 ; preds = %if.else615
  %485 = load i8*, i8** %name456, align 8
  %486 = load i64, i64* %len616, align 8
  %sub = sub i64 %486, 2
  %arrayidx625 = getelementptr inbounds i8, i8* %485, i64 %sub
  %487 = load i8, i8* %arrayidx625, align 1
  %conv626 = sext i8 %487 to i32
  %cmp627 = icmp eq i32 %conv626, 58
  br i1 %cmp627, label %land.lhs.true629, label %lor.lhs.false635

land.lhs.true629:                                 ; preds = %land.lhs.true624
  %488 = load i8*, i8** %name456, align 8
  %489 = load i64, i64* %len616, align 8
  %sub630 = sub i64 %489, 1
  %arrayidx631 = getelementptr inbounds i8, i8* %488, i64 %sub630
  %490 = load i8, i8* %arrayidx631, align 1
  %conv632 = sext i8 %490 to i32
  %cmp633 = icmp eq i32 %conv632, 58
  br i1 %cmp633, label %if.then643, label %lor.lhs.false635

lor.lhs.false635:                                 ; preds = %land.lhs.true629, %land.lhs.true624, %if.else615
  %491 = load i64, i64* %len616, align 8
  %cmp636 = icmp eq i64 %491, 1
  br i1 %cmp636, label %land.lhs.true638, label %if.end651

land.lhs.true638:                                 ; preds = %lor.lhs.false635
  %492 = load i8*, i8** %name456, align 8
  %arrayidx639 = getelementptr inbounds i8, i8* %492, i64 0
  %493 = load i8, i8* %arrayidx639, align 1
  %conv640 = sext i8 %493 to i32
  %cmp641 = icmp eq i32 %conv640, 58
  br i1 %cmp641, label %if.then643, label %if.end651

if.then643:                                       ; preds = %land.lhs.true638, %land.lhs.true629
  store i32 3, i32* %mro_changes, align 4
  %494 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u644 = getelementptr inbounds %struct.sv, %struct.sv* %494, i32 0, i32 3
  %svu_gp645 = bitcast %union.anon* %sv_u644 to %struct.gp**
  %495 = load %struct.gp*, %struct.gp** %svu_gp645, align 8
  %add.ptr646 = getelementptr inbounds %struct.gp, %struct.gp* %495, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr646, i32 0, i32 5
  %496 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  store %struct.hv* %496, %struct.hv** %old_stash, align 8
  %tobool647 = icmp ne %struct.hv* %496, null
  br i1 %tobool647, label %if.then648, label %if.end650

if.then648:                                       ; preds = %if.then643
  %497 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %498 = bitcast %struct.hv* %497 to %struct.sv*
  %call649 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %498)
  %499 = bitcast %struct.sv* %call649 to i8*
  %500 = bitcast i8* %499 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %500, i32 0, i32 1
  %501 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %501, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end650

if.end650:                                        ; preds = %if.then648, %if.then643
  br label %if.end651

if.end651:                                        ; preds = %if.end650, %land.lhs.true638, %lor.lhs.false635
  br label %if.end652

if.end652:                                        ; preds = %if.end651, %if.then614
  %502 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call653 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %502)
  %503 = bitcast %struct.sv* %call653 to i8*
  %504 = bitcast i8* %503 to %struct.sv*
  %sv_refcnt654 = getelementptr inbounds %struct.sv, %struct.sv* %504, i32 0, i32 1
  %505 = load i32, i32* %sv_refcnt654, align 8
  %inc655 = add i32 %505, 1
  store i32 %inc655, i32* %sv_refcnt654, align 8
  br label %if.end656

if.end656:                                        ; preds = %if.end652, %if.end452
  call void @Perl_push_scope()
  %506 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_refcnt657 = getelementptr inbounds %struct.sv, %struct.sv* %506, i32 0, i32 1
  %507 = load i32, i32* %sv_refcnt657, align 8
  %inc658 = add i32 %507, 1
  store i32 %inc658, i32* %sv_refcnt657, align 8
  %508 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %509 = bitcast %struct.sv* %508 to i8*
  %510 = bitcast i8* %509 to %struct.sv*
  %511 = bitcast %struct.sv* %510 to i8*
  %512 = bitcast i8* %511 to %struct.sv*
  %513 = bitcast %struct.sv* %512 to i8*
  call void @Perl_save_pushptr(i8* %513, i32 11)
  %514 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %515 = bitcast %struct.sv* %514 to i8*
  %516 = bitcast i8* %515 to %struct.gv*
  call void @Perl_gp_free(%struct.gv* %516)
  %517 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any659 = getelementptr inbounds %struct.sv, %struct.sv* %517, i32 0, i32 0
  %518 = load i8*, i8** %sv_any659, align 8
  %519 = bitcast i8* %518 to %struct.xpvgv*
  %xpv_cur660 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %519, i32 0, i32 2
  %520 = load i64, i64* %xpv_cur660, align 8
  %and661 = and i64 %520, -2
  store i64 %and661, i64* %xpv_cur660, align 8
  %521 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u662 = getelementptr inbounds %struct.sv, %struct.sv* %521, i32 0, i32 3
  %svu_gp663 = bitcast %union.anon* %sv_u662 to %struct.gp**
  %522 = load %struct.gp*, %struct.gp** %svu_gp663, align 8
  %add.ptr664 = getelementptr inbounds %struct.gp, %struct.gp* %522, i64 0
  %call665 = call %struct.gp* @Perl_gp_ref(%struct.gp* %add.ptr664)
  %523 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u666 = getelementptr inbounds %struct.sv, %struct.sv* %523, i32 0, i32 3
  %svu_gp667 = bitcast %union.anon* %sv_u666 to %struct.gp**
  store %struct.gp* %call665, %struct.gp** %svu_gp667, align 8
  call void @Perl_pop_scope()
  %524 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags668 = getelementptr inbounds %struct.sv, %struct.sv* %524, i32 0, i32 2
  %525 = load i32, i32* %sv_flags668, align 4
  %and669 = and i32 %525, 14680064
  %tobool670 = icmp ne i32 %and669, 0
  br i1 %tobool670, label %land.lhs.true671, label %if.end697

land.lhs.true671:                                 ; preds = %if.end656
  %526 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %call672 = call zeroext i1 @Perl_sv_tainted(%struct.sv* %526)
  br i1 %call672, label %if.then674, label %if.end697

if.then674:                                       ; preds = %land.lhs.true671
  br label %do.body675

do.body675:                                       ; preds = %if.then674
  %527 = load i8, i8* @PL_tainting, align 1
  %tobool676 = trunc i8 %527 to i1
  br i1 %tobool676, label %cond.true678, label %cond.false679

cond.true678:                                     ; preds = %do.body675
  br i1 true, label %if.then680, label %if.end695

cond.false679:                                    ; preds = %do.body675
  br i1 false, label %if.then680, label %if.end695

if.then680:                                       ; preds = %cond.false679, %cond.true678
  %528 = load i8, i8* @PL_tainted, align 1
  %tobool681 = trunc i8 %528 to i1
  br i1 %tobool681, label %cond.true683, label %cond.false684

cond.true683:                                     ; preds = %if.then680
  br i1 true, label %if.then685, label %if.end694

cond.false684:                                    ; preds = %if.then680
  br i1 false, label %if.then685, label %if.end694

if.then685:                                       ; preds = %cond.false684, %cond.true683
  br label %do.body686

do.body686:                                       ; preds = %if.then685
  %529 = load i8, i8* @PL_tainting, align 1
  %tobool687 = trunc i8 %529 to i1
  br i1 %tobool687, label %cond.true689, label %cond.false690

cond.true689:                                     ; preds = %do.body686
  br i1 true, label %if.then691, label %if.end692

cond.false690:                                    ; preds = %do.body686
  br i1 false, label %if.then691, label %if.end692

if.then691:                                       ; preds = %cond.false690, %cond.true689
  %530 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %530, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end692

if.end692:                                        ; preds = %if.then691, %cond.false690, %cond.true689
  br label %do.end693

do.end693:                                        ; preds = %if.end692
  br label %if.end694

if.end694:                                        ; preds = %do.end693, %cond.false684, %cond.true683
  br label %if.end695

if.end695:                                        ; preds = %if.end694, %cond.false679, %cond.true678
  br label %do.end696

do.end696:                                        ; preds = %if.end695
  br label %if.end697

if.end697:                                        ; preds = %do.end696, %land.lhs.true671, %if.end656
  %531 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any698 = getelementptr inbounds %struct.sv, %struct.sv* %531, i32 0, i32 0
  %532 = load i8*, i8** %sv_any698, align 8
  %533 = bitcast i8* %532 to %struct.xpvgv*
  %xpv_cur699 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %533, i32 0, i32 2
  %534 = load i64, i64* %xpv_cur699, align 8
  %and700 = and i64 %534, 240
  %cmp701 = icmp ne i64 %and700, 240
  br i1 %cmp701, label %land.lhs.true703, label %if.end713

land.lhs.true703:                                 ; preds = %if.end697
  %535 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %535, i32 0, i32 8
  %536 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  %537 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any704 = getelementptr inbounds %struct.sv, %struct.sv* %537, i32 0, i32 0
  %538 = load i8*, i8** %sv_any704, align 8
  %539 = bitcast i8* %538 to %struct.xpvgv*
  %xnv_u705 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %539, i32 0, i32 5
  %xgv_stash706 = bitcast %union._xnvu* %xnv_u705 to %struct.hv**
  %540 = load %struct.hv*, %struct.hv** %xgv_stash706, align 8
  %cmp707 = icmp eq %struct.hv* %536, %540
  br i1 %cmp707, label %if.end713, label %if.then709

if.then709:                                       ; preds = %land.lhs.true703
  %541 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any710 = getelementptr inbounds %struct.sv, %struct.sv* %541, i32 0, i32 0
  %542 = load i8*, i8** %sv_any710, align 8
  %543 = bitcast i8* %542 to %struct.xpvgv*
  %xpv_cur711 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %543, i32 0, i32 2
  %544 = load i64, i64* %xpv_cur711, align 8
  %or712 = or i64 %544, 240
  store i64 %or712, i64* %xpv_cur711, align 8
  br label %if.end713

if.end713:                                        ; preds = %if.then709, %land.lhs.true703, %if.end697
  %545 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any714 = getelementptr inbounds %struct.sv, %struct.sv* %545, i32 0, i32 0
  %546 = load i8*, i8** %sv_any714, align 8
  %547 = bitcast i8* %546 to %struct.xpvgv*
  %xpv_cur715 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %547, i32 0, i32 2
  %548 = load i64, i64* %xpv_cur715, align 8
  %or716 = or i64 %548, 2
  store i64 %or716, i64* %xpv_cur715, align 8
  %549 = load i32, i32* %mro_changes, align 4
  %cmp717 = icmp eq i32 %549, 2
  br i1 %cmp717, label %if.then719, label %if.else754

if.then719:                                       ; preds = %if.end713
  %550 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %551 = bitcast %struct.sv* %550 to %struct.gv*
  %sv_u720 = getelementptr inbounds %struct.gv, %struct.gv* %551, i32 0, i32 3
  %svu_gp721 = bitcast %union.anon.6* %sv_u720 to %struct.gp**
  %552 = load %struct.gp*, %struct.gp** %svu_gp721, align 8
  %add.ptr722 = getelementptr inbounds %struct.gp, %struct.gp* %552, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr722, i32 0, i32 6
  %553 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool723 = icmp ne %struct.av* %553, null
  br i1 %tobool723, label %if.then724, label %if.end750

if.then724:                                       ; preds = %if.then719
  %554 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %555 = bitcast %struct.sv* %554 to %struct.gv*
  %sv_u725 = getelementptr inbounds %struct.gv, %struct.gv* %555, i32 0, i32 3
  %svu_gp726 = bitcast %union.anon.6* %sv_u725 to %struct.gp**
  %556 = load %struct.gp*, %struct.gp** %svu_gp726, align 8
  %add.ptr727 = getelementptr inbounds %struct.gp, %struct.gp* %556, i64 0
  %gp_av728 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr727, i32 0, i32 6
  %557 = load %struct.av*, %struct.av** %gp_av728, align 8
  %558 = bitcast %struct.av* %557 to %struct.sv*
  store %struct.sv* %558, %struct.sv** %sref, align 8
  %559 = load %struct.sv*, %struct.sv** %sref, align 8
  %sv_flags729 = getelementptr inbounds %struct.sv, %struct.sv* %559, i32 0, i32 2
  %560 = load i32, i32* %sv_flags729, align 4
  %and730 = and i32 %560, 4194304
  %tobool731 = icmp ne i32 %and730, 0
  br i1 %tobool731, label %land.lhs.true732, label %if.else748

land.lhs.true732:                                 ; preds = %if.then724
  %561 = load %struct.sv*, %struct.sv** %sref, align 8
  %call733 = call %struct.magic* @Perl_mg_find(%struct.sv* %561, i32 73)
  store %struct.magic* %call733, %struct.magic** %mg, align 8
  %tobool734 = icmp ne %struct.magic* %call733, null
  br i1 %tobool734, label %if.then735, label %if.else748

if.then735:                                       ; preds = %land.lhs.true732
  %562 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %562, i32 0, i32 6
  %563 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %sv_flags736 = getelementptr inbounds %struct.sv, %struct.sv* %563, i32 0, i32 2
  %564 = load i32, i32* %sv_flags736, align 4
  %and737 = and i32 %564, 255
  %cmp738 = icmp ne i32 %and737, 11
  br i1 %cmp738, label %if.then740, label %if.end744

if.then740:                                       ; preds = %if.then735
  %call741 = call %struct.sv* @Perl_newSV_type(i32 11)
  %565 = bitcast %struct.sv* %call741 to i8*
  %566 = bitcast i8* %565 to %struct.av*
  store %struct.av* %566, %struct.av** %ary, align 8
  %567 = load %struct.av*, %struct.av** %ary, align 8
  %568 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj742 = getelementptr inbounds %struct.magic, %struct.magic* %568, i32 0, i32 6
  %569 = load %struct.sv*, %struct.sv** %mg_obj742, align 8
  call void @Perl_av_push(%struct.av* %567, %struct.sv* %569)
  %570 = load %struct.av*, %struct.av** %ary, align 8
  %571 = bitcast %struct.av* %570 to %struct.sv*
  %572 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj743 = getelementptr inbounds %struct.magic, %struct.magic* %572, i32 0, i32 6
  store %struct.sv* %571, %struct.sv** %mg_obj743, align 8
  br label %if.end744

if.end744:                                        ; preds = %if.then740, %if.then735
  %573 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj745 = getelementptr inbounds %struct.magic, %struct.magic* %573, i32 0, i32 6
  %574 = load %struct.sv*, %struct.sv** %mg_obj745, align 8
  %575 = bitcast %struct.sv* %574 to %struct.av*
  %576 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_refcnt746 = getelementptr inbounds %struct.sv, %struct.sv* %576, i32 0, i32 1
  %577 = load i32, i32* %sv_refcnt746, align 8
  %inc747 = add i32 %577, 1
  store i32 %inc747, i32* %sv_refcnt746, align 8
  %578 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %579 = bitcast %struct.sv* %578 to i8*
  %580 = bitcast i8* %579 to %struct.sv*
  call void @Perl_av_push(%struct.av* %575, %struct.sv* %580)
  br label %if.end749

if.else748:                                       ; preds = %land.lhs.true732, %if.then724
  %581 = load %struct.sv*, %struct.sv** %sref, align 8
  %582 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %581, %struct.sv* %582, i32 73, i8* null, i32 0)
  br label %if.end749

if.end749:                                        ; preds = %if.else748, %if.end744
  br label %if.end750

if.end750:                                        ; preds = %if.end749, %if.then719
  %583 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any751 = getelementptr inbounds %struct.sv, %struct.sv* %583, i32 0, i32 0
  %584 = load i8*, i8** %sv_any751, align 8
  %585 = bitcast i8* %584 to %struct.xpvgv*
  %xnv_u752 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %585, i32 0, i32 5
  %xgv_stash753 = bitcast %union._xnvu* %xnv_u752 to %struct.hv**
  %586 = load %struct.hv*, %struct.hv** %xgv_stash753, align 8
  call void @Perl_mro_isa_changed_in(%struct.hv* %586)
  br label %if.end871

if.else754:                                       ; preds = %if.end713
  %587 = load i32, i32* %mro_changes, align 4
  %cmp755 = icmp eq i32 %587, 3
  br i1 %cmp755, label %if.then757, label %if.else863

if.then757:                                       ; preds = %if.else754
  %588 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u758 = getelementptr inbounds %struct.sv, %struct.sv* %588, i32 0, i32 3
  %svu_gp759 = bitcast %union.anon* %sv_u758 to %struct.gp**
  %589 = load %struct.gp*, %struct.gp** %svu_gp759, align 8
  %add.ptr760 = getelementptr inbounds %struct.gp, %struct.gp* %589, i64 0
  %gp_hv761 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr760, i32 0, i32 5
  %590 = load %struct.hv*, %struct.hv** %gp_hv761, align 8
  store %struct.hv* %590, %struct.hv** %stash, align 8
  %591 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %tobool762 = icmp ne %struct.hv* %591, null
  br i1 %tobool762, label %cond.true763, label %cond.false859

cond.true763:                                     ; preds = %if.then757
  %592 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_flags764 = getelementptr inbounds %struct.hv, %struct.hv* %592, i32 0, i32 2
  %593 = load i32, i32* %sv_flags764, align 4
  %and765 = and i32 %593, 33554432
  %tobool766 = icmp ne i32 %and765, 0
  br i1 %tobool766, label %land.lhs.true767, label %cond.false855

land.lhs.true767:                                 ; preds = %cond.true763
  %594 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u768 = getelementptr inbounds %struct.hv, %struct.hv* %594, i32 0, i32 3
  %svu_hash769 = bitcast %union.anon.4* %sv_u768 to %struct.he***
  %595 = load %struct.he**, %struct.he*** %svu_hash769, align 8
  %596 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any770 = getelementptr inbounds %struct.hv, %struct.hv* %596, i32 0, i32 0
  %597 = load %struct.xpvhv*, %struct.xpvhv** %sv_any770, align 8
  %xhv_max771 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %597, i32 0, i32 3
  %598 = load i64, i64* %xhv_max771, align 8
  %add772 = add i64 %598, 1
  %arrayidx773 = getelementptr inbounds %struct.he*, %struct.he** %595, i64 %add772
  %599 = bitcast %struct.he** %arrayidx773 to %struct.xpvhv_aux*
  %xhv_name_u774 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %599, i32 0, i32 0
  %xhvnameu_name775 = bitcast %union._xhvnameu* %xhv_name_u774 to %struct.hek**
  %600 = load %struct.hek*, %struct.hek** %xhvnameu_name775, align 8
  %tobool776 = icmp ne %struct.hek* %600, null
  br i1 %tobool776, label %land.lhs.true777, label %cond.false855

land.lhs.true777:                                 ; preds = %land.lhs.true767
  %601 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u778 = getelementptr inbounds %struct.hv, %struct.hv* %601, i32 0, i32 3
  %svu_hash779 = bitcast %union.anon.4* %sv_u778 to %struct.he***
  %602 = load %struct.he**, %struct.he*** %svu_hash779, align 8
  %603 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any780 = getelementptr inbounds %struct.hv, %struct.hv* %603, i32 0, i32 0
  %604 = load %struct.xpvhv*, %struct.xpvhv** %sv_any780, align 8
  %xhv_max781 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %604, i32 0, i32 3
  %605 = load i64, i64* %xhv_max781, align 8
  %add782 = add i64 %605, 1
  %arrayidx783 = getelementptr inbounds %struct.he*, %struct.he** %602, i64 %add782
  %606 = bitcast %struct.he** %arrayidx783 to %struct.xpvhv_aux*
  %xhv_name_count784 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %606, i32 0, i32 4
  %607 = load i32, i32* %xhv_name_count784, align 4
  %cmp785 = icmp ne i32 %607, -1
  br i1 %cmp785, label %cond.true787, label %cond.false855

cond.true787:                                     ; preds = %land.lhs.true777
  %608 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u788 = getelementptr inbounds %struct.hv, %struct.hv* %608, i32 0, i32 3
  %svu_hash789 = bitcast %union.anon.4* %sv_u788 to %struct.he***
  %609 = load %struct.he**, %struct.he*** %svu_hash789, align 8
  %610 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any790 = getelementptr inbounds %struct.hv, %struct.hv* %610, i32 0, i32 0
  %611 = load %struct.xpvhv*, %struct.xpvhv** %sv_any790, align 8
  %xhv_max791 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %611, i32 0, i32 3
  %612 = load i64, i64* %xhv_max791, align 8
  %add792 = add i64 %612, 1
  %arrayidx793 = getelementptr inbounds %struct.he*, %struct.he** %609, i64 %add792
  %613 = bitcast %struct.he** %arrayidx793 to %struct.xpvhv_aux*
  %xhv_name_count794 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %613, i32 0, i32 4
  %614 = load i32, i32* %xhv_name_count794, align 4
  %cmp795 = icmp sgt i32 %614, 0
  br i1 %cmp795, label %cond.true797, label %cond.false807

cond.true797:                                     ; preds = %cond.true787
  %615 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u798 = getelementptr inbounds %struct.hv, %struct.hv* %615, i32 0, i32 3
  %svu_hash799 = bitcast %union.anon.4* %sv_u798 to %struct.he***
  %616 = load %struct.he**, %struct.he*** %svu_hash799, align 8
  %617 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any800 = getelementptr inbounds %struct.hv, %struct.hv* %617, i32 0, i32 0
  %618 = load %struct.xpvhv*, %struct.xpvhv** %sv_any800, align 8
  %xhv_max801 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %618, i32 0, i32 3
  %619 = load i64, i64* %xhv_max801, align 8
  %add802 = add i64 %619, 1
  %arrayidx803 = getelementptr inbounds %struct.he*, %struct.he** %616, i64 %add802
  %620 = bitcast %struct.he** %arrayidx803 to %struct.xpvhv_aux*
  %xhv_name_u804 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %620, i32 0, i32 0
  %xhvnameu_names805 = bitcast %union._xhvnameu* %xhv_name_u804 to %struct.hek***
  %621 = load %struct.hek**, %struct.hek*** %xhvnameu_names805, align 8
  %arrayidx806 = getelementptr inbounds %struct.hek*, %struct.hek** %621, i64 0
  %622 = load %struct.hek*, %struct.hek** %arrayidx806, align 8
  br label %cond.end851

cond.false807:                                    ; preds = %cond.true787
  %623 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u808 = getelementptr inbounds %struct.hv, %struct.hv* %623, i32 0, i32 3
  %svu_hash809 = bitcast %union.anon.4* %sv_u808 to %struct.he***
  %624 = load %struct.he**, %struct.he*** %svu_hash809, align 8
  %625 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any810 = getelementptr inbounds %struct.hv, %struct.hv* %625, i32 0, i32 0
  %626 = load %struct.xpvhv*, %struct.xpvhv** %sv_any810, align 8
  %xhv_max811 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %626, i32 0, i32 3
  %627 = load i64, i64* %xhv_max811, align 8
  %add812 = add i64 %627, 1
  %arrayidx813 = getelementptr inbounds %struct.he*, %struct.he** %624, i64 %add812
  %628 = bitcast %struct.he** %arrayidx813 to %struct.xpvhv_aux*
  %xhv_name_count814 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %628, i32 0, i32 4
  %629 = load i32, i32* %xhv_name_count814, align 4
  %cmp815 = icmp slt i32 %629, -1
  br i1 %cmp815, label %cond.true817, label %cond.false827

cond.true817:                                     ; preds = %cond.false807
  %630 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u818 = getelementptr inbounds %struct.hv, %struct.hv* %630, i32 0, i32 3
  %svu_hash819 = bitcast %union.anon.4* %sv_u818 to %struct.he***
  %631 = load %struct.he**, %struct.he*** %svu_hash819, align 8
  %632 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any820 = getelementptr inbounds %struct.hv, %struct.hv* %632, i32 0, i32 0
  %633 = load %struct.xpvhv*, %struct.xpvhv** %sv_any820, align 8
  %xhv_max821 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %633, i32 0, i32 3
  %634 = load i64, i64* %xhv_max821, align 8
  %add822 = add i64 %634, 1
  %arrayidx823 = getelementptr inbounds %struct.he*, %struct.he** %631, i64 %add822
  %635 = bitcast %struct.he** %arrayidx823 to %struct.xpvhv_aux*
  %xhv_name_u824 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %635, i32 0, i32 0
  %xhvnameu_names825 = bitcast %union._xhvnameu* %xhv_name_u824 to %struct.hek***
  %636 = load %struct.hek**, %struct.hek*** %xhvnameu_names825, align 8
  %arrayidx826 = getelementptr inbounds %struct.hek*, %struct.hek** %636, i64 1
  %637 = load %struct.hek*, %struct.hek** %arrayidx826, align 8
  br label %cond.end849

cond.false827:                                    ; preds = %cond.false807
  %638 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u828 = getelementptr inbounds %struct.hv, %struct.hv* %638, i32 0, i32 3
  %svu_hash829 = bitcast %union.anon.4* %sv_u828 to %struct.he***
  %639 = load %struct.he**, %struct.he*** %svu_hash829, align 8
  %640 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any830 = getelementptr inbounds %struct.hv, %struct.hv* %640, i32 0, i32 0
  %641 = load %struct.xpvhv*, %struct.xpvhv** %sv_any830, align 8
  %xhv_max831 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %641, i32 0, i32 3
  %642 = load i64, i64* %xhv_max831, align 8
  %add832 = add i64 %642, 1
  %arrayidx833 = getelementptr inbounds %struct.he*, %struct.he** %639, i64 %add832
  %643 = bitcast %struct.he** %arrayidx833 to %struct.xpvhv_aux*
  %xhv_name_count834 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %643, i32 0, i32 4
  %644 = load i32, i32* %xhv_name_count834, align 4
  %cmp835 = icmp eq i32 %644, -1
  br i1 %cmp835, label %cond.true837, label %cond.false838

cond.true837:                                     ; preds = %cond.false827
  br label %cond.end847

cond.false838:                                    ; preds = %cond.false827
  %645 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_u839 = getelementptr inbounds %struct.hv, %struct.hv* %645, i32 0, i32 3
  %svu_hash840 = bitcast %union.anon.4* %sv_u839 to %struct.he***
  %646 = load %struct.he**, %struct.he*** %svu_hash840, align 8
  %647 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %sv_any841 = getelementptr inbounds %struct.hv, %struct.hv* %647, i32 0, i32 0
  %648 = load %struct.xpvhv*, %struct.xpvhv** %sv_any841, align 8
  %xhv_max842 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %648, i32 0, i32 3
  %649 = load i64, i64* %xhv_max842, align 8
  %add843 = add i64 %649, 1
  %arrayidx844 = getelementptr inbounds %struct.he*, %struct.he** %646, i64 %add843
  %650 = bitcast %struct.he** %arrayidx844 to %struct.xpvhv_aux*
  %xhv_name_u845 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %650, i32 0, i32 0
  %xhvnameu_name846 = bitcast %union._xhvnameu* %xhv_name_u845 to %struct.hek**
  %651 = load %struct.hek*, %struct.hek** %xhvnameu_name846, align 8
  br label %cond.end847

cond.end847:                                      ; preds = %cond.false838, %cond.true837
  %cond848 = phi %struct.hek* [ null, %cond.true837 ], [ %651, %cond.false838 ]
  br label %cond.end849

cond.end849:                                      ; preds = %cond.end847, %cond.true817
  %cond850 = phi %struct.hek* [ %637, %cond.true817 ], [ %cond848, %cond.end847 ]
  br label %cond.end851

cond.end851:                                      ; preds = %cond.end849, %cond.true797
  %cond852 = phi %struct.hek* [ %622, %cond.true797 ], [ %cond850, %cond.end849 ]
  %hek_key853 = getelementptr inbounds %struct.hek, %struct.hek* %cond852, i32 0, i32 2
  %arraydecay854 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key853, i64 0, i64 0
  br label %cond.end856

cond.false855:                                    ; preds = %land.lhs.true777, %land.lhs.true767, %cond.true763
  br label %cond.end856

cond.end856:                                      ; preds = %cond.false855, %cond.end851
  %cond857 = phi i8* [ %arraydecay854, %cond.end851 ], [ null, %cond.false855 ]
  %652 = bitcast i8* %cond857 to %struct.hv*
  %tobool858 = icmp ne %struct.hv* %652, null
  br i1 %tobool858, label %if.then861, label %if.end862

cond.false859:                                    ; preds = %if.then757
  %653 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool860 = icmp ne %struct.hv* %653, null
  br i1 %tobool860, label %if.then861, label %if.end862

if.then861:                                       ; preds = %cond.false859, %cond.end856
  %654 = load %struct.hv*, %struct.hv** %stash, align 8
  %655 = load %struct.hv*, %struct.hv** %old_stash, align 8
  %656 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %657 = bitcast %struct.sv* %656 to %struct.gv*
  call void @Perl_mro_package_moved(%struct.hv* %654, %struct.hv* %655, %struct.gv* %657, i32 0)
  br label %if.end862

if.end862:                                        ; preds = %if.then861, %cond.false859, %cond.end856
  br label %if.end870

if.else863:                                       ; preds = %if.else754
  %658 = load i32, i32* %mro_changes, align 4
  %tobool864 = icmp ne i32 %658, 0
  br i1 %tobool864, label %if.then865, label %if.end869

if.then865:                                       ; preds = %if.else863
  %659 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any866 = getelementptr inbounds %struct.sv, %struct.sv* %659, i32 0, i32 0
  %660 = load i8*, i8** %sv_any866, align 8
  %661 = bitcast i8* %660 to %struct.xpvgv*
  %xnv_u867 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %661, i32 0, i32 5
  %xgv_stash868 = bitcast %union._xnvu* %xnv_u867 to %struct.hv**
  %662 = load %struct.hv*, %struct.hv** %xgv_stash868, align 8
  call void @Perl_mro_method_changed_in(%struct.hv* %662)
  br label %if.end869

if.end869:                                        ; preds = %if.then865, %if.else863
  br label %if.end870

if.end870:                                        ; preds = %if.end869, %if.end862
  br label %if.end871

if.end871:                                        ; preds = %if.end870, %if.end750
  %663 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %tobool872 = icmp ne %struct.sv* %663, null
  br i1 %tobool872, label %land.lhs.true873, label %cond.false893

land.lhs.true873:                                 ; preds = %if.end871
  %664 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags874 = getelementptr inbounds %struct.sv, %struct.sv* %664, i32 0, i32 2
  %665 = load i32, i32* %sv_flags874, align 4
  %and875 = and i32 %665, 255
  %cmp876 = icmp eq i32 %and875, 9
  br i1 %cmp876, label %land.lhs.true883, label %lor.lhs.false878

lor.lhs.false878:                                 ; preds = %land.lhs.true873
  %666 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags879 = getelementptr inbounds %struct.sv, %struct.sv* %666, i32 0, i32 2
  %667 = load i32, i32* %sv_flags879, align 4
  %and880 = and i32 %667, 255
  %cmp881 = icmp eq i32 %and880, 10
  br i1 %cmp881, label %land.lhs.true883, label %cond.false893

land.lhs.true883:                                 ; preds = %lor.lhs.false878, %land.lhs.true873
  %668 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u884 = getelementptr inbounds %struct.sv, %struct.sv* %668, i32 0, i32 3
  %svu_gp885 = bitcast %union.anon* %sv_u884 to %struct.gp**
  %669 = load %struct.gp*, %struct.gp** %svu_gp885, align 8
  %add.ptr886 = getelementptr inbounds %struct.gp, %struct.gp* %669, i64 0
  %tobool887 = icmp ne %struct.gp* %add.ptr886, null
  br i1 %tobool887, label %cond.true888, label %cond.false893

cond.true888:                                     ; preds = %land.lhs.true883
  %670 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u889 = getelementptr inbounds %struct.sv, %struct.sv* %670, i32 0, i32 3
  %svu_gp890 = bitcast %union.anon* %sv_u889 to %struct.gp**
  %671 = load %struct.gp*, %struct.gp** %svu_gp890, align 8
  %add.ptr891 = getelementptr inbounds %struct.gp, %struct.gp* %671, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr891, i32 0, i32 1
  %672 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool892 = icmp ne %struct.io* %672, null
  br i1 %tobool892, label %land.lhs.true894, label %if.end898

cond.false893:                                    ; preds = %land.lhs.true883, %lor.lhs.false878, %if.end871
  br i1 false, label %land.lhs.true894, label %if.end898

land.lhs.true894:                                 ; preds = %cond.false893, %cond.true888
  %673 = load i32, i32* %dtype.addr, align 4
  %cmp895 = icmp eq i32 %673, 9
  br i1 %cmp895, label %if.then897, label %if.end898

if.then897:                                       ; preds = %land.lhs.true894
  %674 = load %struct.hv*, %struct.hv** @PL_stashcache, align 8
  call void @Perl_hv_clear(%struct.hv* %674)
  br label %if.end898

if.end898:                                        ; preds = %if.then897, %land.lhs.true894, %cond.false893, %cond.true888
  ret void
}

declare dso_local void @Perl_ck_warner(i32, i8*, ...) #1

declare dso_local %struct.gv* @Perl_gv_fetchsv(%struct.sv*, i32, i32) #1

declare dso_local void @Perl_gp_free(%struct.gv*) #1

declare dso_local %struct.gp* @Perl_gp_ref(%struct.gp*) #1

declare dso_local %struct.p5rx* @Perl_reg_temp_copy(%struct.p5rx*, %struct.p5rx*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setsv_mg(%struct.sv* %dstr, %struct.sv* %sstr) #0 {
entry:
  %dstr.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca %struct.sv*, align 8
  store %struct.sv* %dstr, %struct.sv** %dstr.addr, align 8
  store %struct.sv* %sstr, %struct.sv** %sstr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %0, %struct.sv* %1, i32 1538)
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %4 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_setsv_cow(%struct.sv* %dstr, %struct.sv* %sstr) #0 {
entry:
  %dstr.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca %struct.sv*, align 8
  %cur = alloca i64, align 8
  %len = alloca i64, align 8
  %new_pv = alloca i8*, align 8
  store %struct.sv* %dstr, %struct.sv** %dstr.addr, align 8
  store %struct.sv* %sstr, %struct.sv** %sstr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %2, i32 0, i32 2
  %3 = load i64, i64* %xpv_cur, align 8
  store i64 %3, i64* %cur, align 8
  %4 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any1, align 8
  %6 = bitcast i8* %5 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %7 = load i64, i64* %xpvlenu_len, align 8
  store i64 %7, i64* %len, align 8
  %8 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %tobool = icmp ne %struct.sv* %8, null
  br i1 %tobool, label %if.then, label %if.else10

if.then:                                          ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %and = and i32 %10, 427886592
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then
  %11 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %11, i32 4)
  br label %if.end9

if.else:                                          ; preds = %if.then
  %12 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %13 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 0
  %tobool4 = icmp ne i8* %add.ptr, null
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.else
  %14 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u6 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 3
  %svu_pv7 = bitcast %union.anon* %sv_u6 to i8**
  %15 = load i8*, i8** %svu_pv7, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %15, i64 0
  call void @Perl_safesysfree(i8* %add.ptr8)
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then3
  br label %if.end20

if.else10:                                        ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else10
  %16 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool11 = icmp ne %struct.sv* %16, null
  br i1 %tobool11, label %if.then12, label %if.else15

if.then12:                                        ; preds = %do.body
  br label %do.body13

do.body13:                                        ; preds = %if.then12
  %17 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %17, %struct.sv** %dstr.addr, align 8
  %18 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any14 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any14, align 8
  %20 = bitcast i8* %19 to %struct.sv*
  store %struct.sv* %20, %struct.sv** @PL_sv_root, align 8
  %21 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %21, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body13
  br label %if.end16

if.else15:                                        ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %dstr.addr, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.else15, %do.end
  %22 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any17 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  store i8* null, i8** %sv_any17, align 8
  %23 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %24 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  store i32 0, i32* %sv_flags18, align 4
  br label %do.end19

do.end19:                                         ; preds = %if.end16
  br label %if.end20

if.end20:                                         ; preds = %do.end19, %if.end9
  %25 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %26, 255
  %cmp = icmp uge i32 %and22, 3
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end20
  %27 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %27, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end20
  %28 = phi i1 [ true, %if.end20 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %28 to i32
  %29 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %30, 268435456
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.then26, label %if.else43

if.then26:                                        ; preds = %lor.end
  %31 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any27 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any27, align 8
  %33 = bitcast i8* %32 to %struct.xpv*
  %xpv_len_u28 = getelementptr inbounds %struct.xpv, %struct.xpv* %33, i32 0, i32 3
  %xpvlenu_len29 = bitcast %union.anon.19* %xpv_len_u28 to i64*
  %34 = load i64, i64* %xpvlenu_len29, align 8
  %cmp30 = icmp eq i64 %34, 0
  br i1 %cmp30, label %if.then31, label %if.end42

if.then31:                                        ; preds = %if.then26
  %35 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u32 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 3
  %svu_pv33 = bitcast %union.anon* %sv_u32 to i8**
  %36 = load i8*, i8** %svu_pv33, align 8
  %add.ptr34 = getelementptr inbounds i8, i8* %36, i64 0
  %add.ptr35 = getelementptr inbounds i8, i8* %add.ptr34, i64 sub (i64 0, i64 ptrtoint ([1 x i8]* getelementptr inbounds (%struct.hek, %struct.hek* null, i32 0, i32 2) to i64))
  %37 = bitcast i8* %add.ptr35 to %struct.hek*
  %38 = bitcast %struct.hek* %37 to i8*
  %add.ptr36 = getelementptr inbounds i8, i8* %38, i64 sub (i64 0, i64 ptrtoint (%struct.hek* getelementptr inbounds (%struct.shared_he, %struct.shared_he* null, i32 0, i32 1) to i64))
  %39 = bitcast i8* %add.ptr36 to %struct.shared_he*
  %shared_he_he = getelementptr inbounds %struct.shared_he, %struct.shared_he* %39, i32 0, i32 0
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %shared_he_he, i32 0, i32 2
  %hent_refcount = bitcast %union.anon.0* %he_valu to i64*
  %40 = load i64, i64* %hent_refcount, align 8
  %inc37 = add i64 %40, 1
  store i64 %inc37, i64* %hent_refcount, align 8
  %41 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u38 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 3
  %svu_pv39 = bitcast %union.anon* %sv_u38 to i8**
  %42 = load i8*, i8** %svu_pv39, align 8
  %add.ptr40 = getelementptr inbounds i8, i8* %42, i64 0
  %add.ptr41 = getelementptr inbounds i8, i8* %add.ptr40, i64 sub (i64 0, i64 ptrtoint ([1 x i8]* getelementptr inbounds (%struct.hek, %struct.hek* null, i32 0, i32 2) to i64))
  %43 = bitcast i8* %add.ptr41 to %struct.hek*
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %43, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  store i8* %arraydecay, i8** %new_pv, align 8
  br label %common_exit

if.end42:                                         ; preds = %if.then26
  br label %if.end58

if.else43:                                        ; preds = %lor.end
  %44 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %45, 255
  %cmp46 = icmp uge i32 %and45, 3
  br i1 %cmp46, label %lor.end48, label %lor.rhs47

lor.rhs47:                                        ; preds = %if.else43
  %46 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %46, i32 3)
  br label %lor.end48

lor.end48:                                        ; preds = %lor.rhs47, %if.else43
  %47 = phi i1 [ true, %if.else43 ], [ true, %lor.rhs47 ]
  %lor.ext49 = zext i1 %47 to i32
  %48 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags50 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags50, align 4
  %or = or i32 %49, 268435456
  store i32 %or, i32* %sv_flags50, align 4
  %50 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u51 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 3
  %svu_pv52 = bitcast %union.anon* %sv_u51 to i8**
  %51 = load i8*, i8** %svu_pv52, align 8
  %52 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 0
  %53 = load i8*, i8** %sv_any53, align 8
  %54 = bitcast i8* %53 to %struct.xpv*
  %xpv_len_u54 = getelementptr inbounds %struct.xpv, %struct.xpv* %54, i32 0, i32 3
  %xpvlenu_len55 = bitcast %union.anon.19* %xpv_len_u54 to i64*
  %55 = load i64, i64* %xpvlenu_len55, align 8
  %add.ptr56 = getelementptr inbounds i8, i8* %51, i64 %55
  %add.ptr57 = getelementptr inbounds i8, i8* %add.ptr56, i64 -1
  store i8 0, i8* %add.ptr57, align 1
  br label %if.end58

if.end58:                                         ; preds = %lor.end48, %if.end42
  %56 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u59 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 3
  %svu_pv60 = bitcast %union.anon* %sv_u59 to i8**
  %57 = load i8*, i8** %svu_pv60, align 8
  %58 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_any61 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any61, align 8
  %60 = bitcast i8* %59 to %struct.xpv*
  %xpv_len_u62 = getelementptr inbounds %struct.xpv, %struct.xpv* %60, i32 0, i32 3
  %xpvlenu_len63 = bitcast %union.anon.19* %xpv_len_u62 to i64*
  %61 = load i64, i64* %xpvlenu_len63, align 8
  %add.ptr64 = getelementptr inbounds i8, i8* %57, i64 %61
  %add.ptr65 = getelementptr inbounds i8, i8* %add.ptr64, i64 -1
  %62 = load i8, i8* %add.ptr65, align 1
  %inc66 = add i8 %62, 1
  store i8 %inc66, i8* %add.ptr65, align 1
  %63 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_u67 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 3
  %svu_pv68 = bitcast %union.anon* %sv_u67 to i8**
  %64 = load i8*, i8** %svu_pv68, align 8
  %add.ptr69 = getelementptr inbounds i8, i8* %64, i64 0
  store i8* %add.ptr69, i8** %new_pv, align 8
  br label %common_exit

common_exit:                                      ; preds = %if.end58, %if.then31
  br label %do.body70

do.body70:                                        ; preds = %common_exit
  %65 = load i8*, i8** %new_pv, align 8
  %66 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_u71 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 3
  %svu_pv72 = bitcast %union.anon* %sv_u71 to i8**
  store i8* %65, i8** %svu_pv72, align 8
  br label %do.end73

do.end73:                                         ; preds = %do.body70
  %67 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags74 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  store i32 268452867, i32* %sv_flags74, align 4
  %68 = load %struct.sv*, %struct.sv** %sstr.addr, align 8
  %sv_flags75 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags75, align 4
  %and76 = and i32 %69, 536870912
  %tobool77 = icmp ne i32 %and76, 0
  br i1 %tobool77, label %if.then78, label %if.end81

if.then78:                                        ; preds = %do.end73
  %70 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags79, align 4
  %or80 = or i32 %71, 536870912
  store i32 %or80, i32* %sv_flags79, align 4
  br label %if.end81

if.end81:                                         ; preds = %if.then78, %do.end73
  br label %do.body82

do.body82:                                        ; preds = %if.end81
  %72 = load i64, i64* %len, align 8
  %73 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any83 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 0
  %74 = load i8*, i8** %sv_any83, align 8
  %75 = bitcast i8* %74 to %struct.xpv*
  %xpv_len_u84 = getelementptr inbounds %struct.xpv, %struct.xpv* %75, i32 0, i32 3
  %xpvlenu_len85 = bitcast %union.anon.19* %xpv_len_u84 to i64*
  store i64 %72, i64* %xpvlenu_len85, align 8
  br label %do.end86

do.end86:                                         ; preds = %do.body82
  br label %do.body87

do.body87:                                        ; preds = %do.end86
  %76 = load i64, i64* %cur, align 8
  %77 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %sv_any88 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 0
  %78 = load i8*, i8** %sv_any88, align 8
  %79 = bitcast i8* %78 to %struct.xpv*
  %xpv_cur89 = getelementptr inbounds %struct.xpv, %struct.xpv* %79, i32 0, i32 2
  store i64 %76, i64* %xpv_cur89, align 8
  br label %do.end90

do.end90:                                         ; preds = %do.body87
  %80 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  ret %struct.sv* %80
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_more_sv() #0 {
entry:
  %sv = alloca %struct.sv*, align 8
  %chunk = alloca i8*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 4080)
  store i8* %call, i8** %chunk, align 8
  %0 = load i8*, i8** %chunk, align 8
  call void @S_sv_add_arena(i8* %0, i32 4080, i32 0)
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %6
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setpvn_mg(%struct.sv* %sv, i8* %ptr, i64 %len) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %2 = load i64, i64* %len.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %0, i8* %1, i64 %2)
  br label %do.body

do.body:                                          ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setpv(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 427886592
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %2, i32 4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %if.end9, label %if.then2

if.then2:                                         ; preds = %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 1610547455
  store i32 %and4, i32* %sv_flags3, align 4
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %7, 33554432
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then2
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_sv_backoff(%struct.sv* %8)
  %tobool8 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then2
  %9 = phi i1 [ false, %if.then2 ], [ %tobool8, %land.rhs ]
  %land.ext = zext i1 %9 to i32
  br label %if.end51

if.end9:                                          ; preds = %if.end
  %10 = load i8*, i8** %ptr.addr, align 8
  %call10 = call i64 @strlen(i8* %10) #8
  store i64 %call10, i64* %len, align 8
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %12, 255
  %cmp = icmp uge i32 %and12, 3
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end9
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %13, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end9
  %14 = phi i1 [ true, %if.end9 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %14 to i32
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %16, 268435456
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %lor.end
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %19, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %20 = load i64, i64* %xpvlenu_len, align 8
  %21 = load i64, i64* %len, align 8
  %add = add i64 %21, 1
  %cmp16 = icmp ult i64 %20, %add
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %lor.end
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %23 = load i64, i64* %len, align 8
  %add17 = add i64 %23, 1
  %call18 = call i8* @Perl_sv_grow(%struct.sv* %22, i64 %add17)
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %25 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call18, %cond.true ], [ %25, %cond.false ]
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u19 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 3
  %svu_pv20 = bitcast %union.anon* %sv_u19 to i8**
  %27 = load i8*, i8** %svu_pv20, align 8
  %28 = load i8*, i8** %ptr.addr, align 8
  %29 = load i64, i64* %len, align 8
  %add21 = add i64 %29, 1
  %mul = mul i64 %add21, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %28, i64 %mul, i1 false)
  br label %do.body

do.body:                                          ; preds = %cond.end
  %30 = load i64, i64* %len, align 8
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any22 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any22, align 8
  %33 = bitcast i8* %32 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %33, i32 0, i32 2
  store i64 %30, i64* %xpv_cur, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %35, 2147418367
  store i32 %and24, i32* %sv_flags23, align 4
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags25, align 4
  %or = or i32 %37, 17408
  store i32 %or, i32* %sv_flags25, align 4
  br label %do.body26

do.body26:                                        ; preds = %do.end
  %38 = load i8, i8* @PL_tainting, align 1
  %tobool27 = trunc i8 %38 to i1
  br i1 %tobool27, label %cond.true28, label %cond.false29

cond.true28:                                      ; preds = %do.body26
  br i1 true, label %if.then30, label %if.end43

cond.false29:                                     ; preds = %do.body26
  br i1 false, label %if.then30, label %if.end43

if.then30:                                        ; preds = %cond.false29, %cond.true28
  %39 = load i8, i8* @PL_tainted, align 1
  %tobool31 = trunc i8 %39 to i1
  br i1 %tobool31, label %cond.true32, label %cond.false33

cond.true32:                                      ; preds = %if.then30
  br i1 true, label %if.then34, label %if.end42

cond.false33:                                     ; preds = %if.then30
  br i1 false, label %if.then34, label %if.end42

if.then34:                                        ; preds = %cond.false33, %cond.true32
  br label %do.body35

do.body35:                                        ; preds = %if.then34
  %40 = load i8, i8* @PL_tainting, align 1
  %tobool36 = trunc i8 %40 to i1
  br i1 %tobool36, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %do.body35
  br i1 true, label %if.then39, label %if.end40

cond.false38:                                     ; preds = %do.body35
  br i1 false, label %if.then39, label %if.end40

if.then39:                                        ; preds = %cond.false38, %cond.true37
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %41, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %cond.false38, %cond.true37
  br label %do.end41

do.end41:                                         ; preds = %if.end40
  br label %if.end42

if.end42:                                         ; preds = %do.end41, %cond.false33, %cond.true32
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %cond.false29, %cond.true28
  br label %do.end44

do.end44:                                         ; preds = %if.end43
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %43, 255
  %cmp47 = icmp eq i32 %and46, 13
  br i1 %cmp47, label %if.then48, label %if.end51

if.then48:                                        ; preds = %do.end44
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any49 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 0
  %45 = load i8*, i8** %sv_any49, align 8
  %46 = bitcast i8* %45 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %46, i32 0, i32 12
  %47 = load i32, i32* %xcv_flags, align 4
  %and50 = and i32 %47, -8193
  store i32 %and50, i32* %xcv_flags, align 4
  br label %if.end51

if.end51:                                         ; preds = %land.end, %if.then48, %do.end44
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setpv_mg(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  call void @Perl_sv_setpv(%struct.sv* %0, i8* %1)
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_sethek(%struct.sv* %sv, %struct.hek* %hek) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %hek.addr = alloca %struct.hek*, align 8
  %flags = alloca i32, align 4
  %utf8_len = alloca i64, align 8
  %as_utf8 = alloca i8*, align 8
  %zok = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.hek* %hek, %struct.hek** %hek.addr, align 8
  %0 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %tobool = icmp ne %struct.hek* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %1, i32 0, i32 1
  %2 = load i32, i32* %hek_len, align 4
  %cmp = icmp eq i32 %2, -2
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %4 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %4, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %5 = bitcast i8* %arraydecay to %struct.sv**
  %6 = load %struct.sv*, %struct.sv** %5, align 4
  call void @Perl_sv_setsv_flags(%struct.sv* %3, %struct.sv* %6, i32 1538)
  br label %return

if.else:                                          ; preds = %if.end
  %7 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key2 = getelementptr inbounds %struct.hek, %struct.hek* %7, i32 0, i32 2
  %arraydecay3 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key2, i64 0, i64 0
  %8 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len4 = getelementptr inbounds %struct.hek, %struct.hek* %8, i32 0, i32 1
  %9 = load i32, i32* %hek_len4, align 4
  %idx.ext = sext i32 %9 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay3, i64 %idx.ext
  %add.ptr5 = getelementptr inbounds i8, i8* %add.ptr, i64 1
  %10 = load i8, i8* %add.ptr5, align 1
  %conv = zext i8 %10 to i32
  store i32 %conv, i32* %flags, align 4
  %11 = load i32, i32* %flags, align 4
  %and = and i32 %11, 2
  %tobool6 = icmp ne i32 %and, 0
  br i1 %tobool6, label %if.then7, label %if.else12

if.then7:                                         ; preds = %if.else
  %12 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len8 = getelementptr inbounds %struct.hek, %struct.hek* %12, i32 0, i32 1
  %13 = load i32, i32* %hek_len8, align 4
  %conv9 = sext i32 %13 to i64
  store i64 %conv9, i64* %utf8_len, align 8
  %14 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key10 = getelementptr inbounds %struct.hek, %struct.hek* %14, i32 0, i32 2
  %arraydecay11 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key10, i64 0, i64 0
  %call = call i8* @Perl_bytes_to_utf8(i8* %arraydecay11, i64* %utf8_len)
  store i8* %call, i8** %as_utf8, align 8
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %16 = load i8*, i8** %as_utf8, align 8
  %17 = load i64, i64* %utf8_len, align 8
  call void @Perl_sv_usepvn_flags(%struct.sv* %15, i8* %16, i64 %17, i32 256)
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags, align 4
  %or = or i32 %19, 536870912
  store i32 %or, i32* %sv_flags, align 4
  br label %return

if.else12:                                        ; preds = %if.else
  %20 = load i32, i32* %flags, align 4
  %and13 = and i32 %20, 8
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then15, label %if.end36

if.then15:                                        ; preds = %if.else12
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %22 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key16 = getelementptr inbounds %struct.hek, %struct.hek* %22, i32 0, i32 2
  %arraydecay17 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key16, i64 0, i64 0
  %23 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len18 = getelementptr inbounds %struct.hek, %struct.hek* %23, i32 0, i32 1
  %24 = load i32, i32* %hek_len18, align 4
  %conv19 = sext i32 %24 to i64
  call void @Perl_sv_setpvn(%struct.sv* %21, i8* %arraydecay17, i64 %conv19)
  %25 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key20 = getelementptr inbounds %struct.hek, %struct.hek* %25, i32 0, i32 2
  %arraydecay21 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key20, i64 0, i64 0
  %26 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len22 = getelementptr inbounds %struct.hek, %struct.hek* %26, i32 0, i32 1
  %27 = load i32, i32* %hek_len22, align 4
  %idx.ext23 = sext i32 %27 to i64
  %add.ptr24 = getelementptr inbounds i8, i8* %arraydecay21, i64 %idx.ext23
  %add.ptr25 = getelementptr inbounds i8, i8* %add.ptr24, i64 1
  %28 = load i8, i8* %add.ptr25, align 1
  %conv26 = zext i8 %28 to i32
  %and27 = and i32 %conv26, 1
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.then29, label %if.else32

if.then29:                                        ; preds = %if.then15
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags30, align 4
  %or31 = or i32 %30, 536870912
  store i32 %or31, i32* %sv_flags30, align 4
  br label %if.end35

if.else32:                                        ; preds = %if.then15
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %32, -536870913
  store i32 %and34, i32* %sv_flags33, align 4
  br label %if.end35

if.end35:                                         ; preds = %if.else32, %if.then29
  br label %return

if.end36:                                         ; preds = %if.else12
  br label %if.end37

if.end37:                                         ; preds = %if.end36
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %34, 427886592
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end37
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %35, i32 4)
  br label %if.end42

if.end42:                                         ; preds = %if.then41, %if.end37
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %37, 255
  %cmp45 = icmp uge i32 %and44, 3
  br i1 %cmp45, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end42
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %38, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end42
  %39 = phi i1 [ true, %if.end42 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %39 to i32
  br label %do.body

do.body:                                          ; preds = %lor.end
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any, align 8
  %42 = bitcast i8* %41 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %42, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %43 = load i64, i64* %xpvlenu_len, align 8
  %tobool47 = icmp ne i64 %43, 0
  br i1 %tobool47, label %if.then48, label %if.end83

if.then48:                                        ; preds = %do.body
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags49 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags49, align 4
  %and50 = and i32 %45, 33554432
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then48
  br i1 true, label %if.then52, label %if.end80

cond.false:                                       ; preds = %if.then48
  br i1 false, label %if.then52, label %if.end80

if.then52:                                        ; preds = %cond.false, %cond.true
  br label %do.body53

do.body53:                                        ; preds = %if.then52
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %47, 33554432
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.then57, label %if.else68

if.then57:                                        ; preds = %do.body53
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %49 = load i8*, i8** %svu_pv, align 8
  %add.ptr58 = getelementptr inbounds i8, i8* %49, i64 0
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr58, i64 -1
  %50 = load i8, i8* %arrayidx, align 1
  %conv59 = zext i8 %50 to i64
  store i64 %conv59, i64* %zok, align 8
  %51 = load i64, i64* %zok, align 8
  %tobool60 = icmp ne i64 %51, 0
  br i1 %tobool60, label %if.end67, label %if.then61

if.then61:                                        ; preds = %if.then57
  %52 = bitcast i64* %zok to i8*
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u62 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 3
  %svu_pv63 = bitcast %union.anon* %sv_u62 to i8**
  %54 = load i8*, i8** %svu_pv63, align 8
  %add.ptr64 = getelementptr inbounds i8, i8* %54, i64 0
  %add.ptr65 = getelementptr inbounds i8, i8* %add.ptr64, i64 -1
  %add.ptr66 = getelementptr inbounds i8, i8* %add.ptr65, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 1 %add.ptr66, i64 8, i1 false)
  br label %if.end67

if.end67:                                         ; preds = %if.then61, %if.then57
  br label %if.end69

if.else68:                                        ; preds = %do.body53
  store i64 0, i64* %zok, align 8
  br label %if.end69

if.end69:                                         ; preds = %if.else68, %if.end67
  br label %do.end

do.end:                                           ; preds = %if.end69
  br label %do.body70

do.body70:                                        ; preds = %do.end
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u71 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 3
  %svu_pv72 = bitcast %union.anon* %sv_u71 to i8**
  %56 = load i8*, i8** %svu_pv72, align 8
  %add.ptr73 = getelementptr inbounds i8, i8* %56, i64 0
  %57 = load i64, i64* %zok, align 8
  %idx.neg = sub i64 0, %57
  %add.ptr74 = getelementptr inbounds i8, i8* %add.ptr73, i64 %idx.neg
  %58 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u75 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 3
  %svu_pv76 = bitcast %union.anon* %sv_u75 to i8**
  store i8* %add.ptr74, i8** %svu_pv76, align 8
  br label %do.end77

do.end77:                                         ; preds = %do.body70
  %59 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags78 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags78, align 4
  %and79 = and i32 %60, -33554433
  store i32 %and79, i32* %sv_flags78, align 4
  br label %if.end80

if.end80:                                         ; preds = %do.end77, %cond.false, %cond.true
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u81 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 3
  %svu_pv82 = bitcast %union.anon* %sv_u81 to i8**
  %62 = load i8*, i8** %svu_pv82, align 8
  call void @Perl_safesysfree(i8* %62)
  br label %if.end83

if.end83:                                         ; preds = %if.end80, %do.body
  br label %do.end84

do.end84:                                         ; preds = %if.end83
  br label %do.body85

do.body85:                                        ; preds = %do.end84
  %63 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %64 = bitcast %struct.hek* %63 to i8*
  %add.ptr86 = getelementptr inbounds i8, i8* %64, i64 sub (i64 0, i64 ptrtoint (%struct.hek* getelementptr inbounds (%struct.shared_he, %struct.shared_he* null, i32 0, i32 1) to i64))
  %65 = bitcast i8* %add.ptr86 to %struct.shared_he*
  %shared_he_he = getelementptr inbounds %struct.shared_he, %struct.shared_he* %65, i32 0, i32 0
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %shared_he_he, i32 0, i32 2
  %hent_refcount = bitcast %union.anon.0* %he_valu to i64*
  %66 = load i64, i64* %hent_refcount, align 8
  %inc = add i64 %66, 1
  store i64 %inc, i64* %hent_refcount, align 8
  %67 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key87 = getelementptr inbounds %struct.hek, %struct.hek* %67, i32 0, i32 2
  %arraydecay88 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key87, i64 0, i64 0
  %68 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u89 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 3
  %svu_pv90 = bitcast %union.anon* %sv_u89 to i8**
  store i8* %arraydecay88, i8** %svu_pv90, align 8
  br label %do.end91

do.end91:                                         ; preds = %do.body85
  br label %do.body92

do.body92:                                        ; preds = %do.end91
  %69 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len93 = getelementptr inbounds %struct.hek, %struct.hek* %69, i32 0, i32 1
  %70 = load i32, i32* %hek_len93, align 4
  %conv94 = sext i32 %70 to i64
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any95 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any95, align 8
  %73 = bitcast i8* %72 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %73, i32 0, i32 2
  store i64 %conv94, i64* %xpv_cur, align 8
  br label %do.end96

do.end96:                                         ; preds = %do.body92
  br label %do.body97

do.body97:                                        ; preds = %do.end96
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any98 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 0
  %75 = load i8*, i8** %sv_any98, align 8
  %76 = bitcast i8* %75 to %struct.xpv*
  %xpv_len_u99 = getelementptr inbounds %struct.xpv, %struct.xpv* %76, i32 0, i32 3
  %xpvlenu_len100 = bitcast %union.anon.19* %xpv_len_u99 to i64*
  store i64 0, i64* %xpvlenu_len100, align 8
  br label %do.end101

do.end101:                                        ; preds = %do.body97
  %77 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags102 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags102, align 4
  %or103 = or i32 %78, 268435456
  store i32 %or103, i32* %sv_flags102, align 4
  %79 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags104 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags104, align 4
  %or105 = or i32 %80, 17408
  store i32 %or105, i32* %sv_flags104, align 4
  %81 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key106 = getelementptr inbounds %struct.hek, %struct.hek* %81, i32 0, i32 2
  %arraydecay107 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key106, i64 0, i64 0
  %82 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len108 = getelementptr inbounds %struct.hek, %struct.hek* %82, i32 0, i32 1
  %83 = load i32, i32* %hek_len108, align 4
  %idx.ext109 = sext i32 %83 to i64
  %add.ptr110 = getelementptr inbounds i8, i8* %arraydecay107, i64 %idx.ext109
  %add.ptr111 = getelementptr inbounds i8, i8* %add.ptr110, i64 1
  %84 = load i8, i8* %add.ptr111, align 1
  %conv112 = zext i8 %84 to i32
  %and113 = and i32 %conv112, 1
  %tobool114 = icmp ne i32 %and113, 0
  br i1 %tobool114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %do.end101
  %85 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags116 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags116, align 4
  %or117 = or i32 %86, 536870912
  store i32 %or117, i32* %sv_flags116, align 4
  br label %if.end121

if.else118:                                       ; preds = %do.end101
  %87 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags119 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags119, align 4
  %and120 = and i32 %88, -536870913
  store i32 %and120, i32* %sv_flags119, align 4
  br label %if.end121

if.end121:                                        ; preds = %if.else118, %if.then115
  br label %return

return:                                           ; preds = %if.end121, %if.end35, %if.then7, %if.then1, %if.then
  ret void
}

declare dso_local i8* @Perl_bytes_to_utf8(i8*, i64*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_usepvn_flags(%struct.sv* %sv, i8* %ptr, i64 %len, i32 %flags) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %allocate = alloca i64, align 8
  %zok = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 427886592
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %2, i32 4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 255
  %cmp = icmp uge i32 %and2, 3
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %5, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %6 = phi i1 [ true, %if.end ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32
  %7 = load i8*, i8** %ptr.addr, align 8
  %tobool3 = icmp ne i8* %7, null
  br i1 %tobool3, label %if.end21, label %if.then4

if.then4:                                         ; preds = %lor.end
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %9, 1610547455
  store i32 %and6, i32* %sv_flags5, align 4
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %11, 33554432
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then4
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_sv_backoff(%struct.sv* %12)
  %tobool10 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then4
  %13 = phi i1 [ false, %if.then4 ], [ %tobool10, %land.rhs ]
  %land.ext = zext i1 %13 to i32
  %14 = load i32, i32* %flags.addr, align 4
  %and11 = and i32 %14, 128
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then13, label %if.end20

if.then13:                                        ; preds = %land.end
  br label %do.body

do.body:                                          ; preds = %if.then13
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %16, 4194304
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then17, label %if.end19

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then17, label %if.end19

if.then17:                                        ; preds = %cond.false, %cond.true
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call18 = call i32 @Perl_mg_set(%struct.sv* %17)
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end19
  br label %if.end20

if.end20:                                         ; preds = %do.end, %land.end
  br label %if.end135

if.end21:                                         ; preds = %lor.end
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %19 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 0
  %tobool22 = icmp ne i8* %add.ptr, null
  br i1 %tobool22, label %if.then23, label %if.end66

if.then23:                                        ; preds = %if.end21
  br label %do.body24

do.body24:                                        ; preds = %if.then23
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any, align 8
  %22 = bitcast i8* %21 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %22, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %23 = load i64, i64* %xpvlenu_len, align 8
  %tobool25 = icmp ne i64 %23, 0
  br i1 %tobool25, label %if.then26, label %if.end64

if.then26:                                        ; preds = %do.body24
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %25, 33554432
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %if.then26
  br i1 true, label %if.then32, label %if.end61

cond.false31:                                     ; preds = %if.then26
  br i1 false, label %if.then32, label %if.end61

if.then32:                                        ; preds = %cond.false31, %cond.true30
  br label %do.body33

do.body33:                                        ; preds = %if.then32
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %27, 33554432
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.then37, label %if.else

if.then37:                                        ; preds = %do.body33
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u38 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 3
  %svu_pv39 = bitcast %union.anon* %sv_u38 to i8**
  %29 = load i8*, i8** %svu_pv39, align 8
  %add.ptr40 = getelementptr inbounds i8, i8* %29, i64 0
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr40, i64 -1
  %30 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %30 to i64
  store i64 %conv, i64* %zok, align 8
  %31 = load i64, i64* %zok, align 8
  %tobool41 = icmp ne i64 %31, 0
  br i1 %tobool41, label %if.end48, label %if.then42

if.then42:                                        ; preds = %if.then37
  %32 = bitcast i64* %zok to i8*
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u43 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 3
  %svu_pv44 = bitcast %union.anon* %sv_u43 to i8**
  %34 = load i8*, i8** %svu_pv44, align 8
  %add.ptr45 = getelementptr inbounds i8, i8* %34, i64 0
  %add.ptr46 = getelementptr inbounds i8, i8* %add.ptr45, i64 -1
  %add.ptr47 = getelementptr inbounds i8, i8* %add.ptr46, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 1 %add.ptr47, i64 8, i1 false)
  br label %if.end48

if.end48:                                         ; preds = %if.then42, %if.then37
  br label %if.end49

if.else:                                          ; preds = %do.body33
  store i64 0, i64* %zok, align 8
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.end48
  br label %do.end50

do.end50:                                         ; preds = %if.end49
  br label %do.body51

do.body51:                                        ; preds = %do.end50
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u52 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 3
  %svu_pv53 = bitcast %union.anon* %sv_u52 to i8**
  %36 = load i8*, i8** %svu_pv53, align 8
  %add.ptr54 = getelementptr inbounds i8, i8* %36, i64 0
  %37 = load i64, i64* %zok, align 8
  %idx.neg = sub i64 0, %37
  %add.ptr55 = getelementptr inbounds i8, i8* %add.ptr54, i64 %idx.neg
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u56 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 3
  %svu_pv57 = bitcast %union.anon* %sv_u56 to i8**
  store i8* %add.ptr55, i8** %svu_pv57, align 8
  br label %do.end58

do.end58:                                         ; preds = %do.body51
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags59 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags59, align 4
  %and60 = and i32 %40, -33554433
  store i32 %and60, i32* %sv_flags59, align 4
  br label %if.end61

if.end61:                                         ; preds = %do.end58, %cond.false31, %cond.true30
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u62 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 3
  %svu_pv63 = bitcast %union.anon* %sv_u62 to i8**
  %42 = load i8*, i8** %svu_pv63, align 8
  call void @Perl_safesysfree(i8* %42)
  br label %if.end64

if.end64:                                         ; preds = %if.end61, %do.body24
  br label %do.end65

do.end65:                                         ; preds = %if.end64
  br label %if.end66

if.end66:                                         ; preds = %do.end65, %if.end21
  %43 = load i32, i32* %flags.addr, align 4
  %and67 = and i32 %43, 256
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %cond.true69, label %cond.false70

cond.true69:                                      ; preds = %if.end66
  %44 = load i64, i64* %len.addr, align 8
  %add = add i64 %44, 1
  br label %cond.end

cond.false70:                                     ; preds = %if.end66
  %45 = load i64, i64* %len.addr, align 8
  %add71 = add i64 %45, 1
  %sub = sub i64 %add71, 1
  %add72 = add i64 %sub, 8
  %and73 = and i64 %add72, -8
  br label %cond.end

cond.end:                                         ; preds = %cond.false70, %cond.true69
  %cond = phi i64 [ %add, %cond.true69 ], [ %and73, %cond.false70 ]
  store i64 %cond, i64* %allocate, align 8
  %46 = load i32, i32* %flags.addr, align 4
  %and74 = and i32 %46, 256
  %tobool75 = icmp ne i32 %and74, 0
  br i1 %tobool75, label %if.then76, label %if.else77

if.then76:                                        ; preds = %cond.end
  br label %if.end79

if.else77:                                        ; preds = %cond.end
  %47 = load i8*, i8** %ptr.addr, align 8
  %48 = load i64, i64* %allocate, align 8
  %call78 = call i8* @Perl_safesysrealloc(i8* %47, i64 %48)
  store i8* %call78, i8** %ptr.addr, align 8
  br label %if.end79

if.end79:                                         ; preds = %if.else77, %if.then76
  br label %do.body80

do.body80:                                        ; preds = %if.end79
  %49 = load i64, i64* %allocate, align 8
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any81 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any81, align 8
  %52 = bitcast i8* %51 to %struct.xpv*
  %xpv_len_u82 = getelementptr inbounds %struct.xpv, %struct.xpv* %52, i32 0, i32 3
  %xpvlenu_len83 = bitcast %union.anon.19* %xpv_len_u82 to i64*
  store i64 %49, i64* %xpvlenu_len83, align 8
  br label %do.end84

do.end84:                                         ; preds = %do.body80
  br label %do.body85

do.body85:                                        ; preds = %do.end84
  %53 = load i64, i64* %len.addr, align 8
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any86 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any86, align 8
  %56 = bitcast i8* %55 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %56, i32 0, i32 2
  store i64 %53, i64* %xpv_cur, align 8
  br label %do.end87

do.end87:                                         ; preds = %do.body85
  br label %do.body88

do.body88:                                        ; preds = %do.end87
  %57 = load i8*, i8** %ptr.addr, align 8
  %58 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u89 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 3
  %svu_pv90 = bitcast %union.anon* %sv_u89 to i8**
  store i8* %57, i8** %svu_pv90, align 8
  br label %do.end91

do.end91:                                         ; preds = %do.body88
  %59 = load i32, i32* %flags.addr, align 4
  %and92 = and i32 %59, 256
  %tobool93 = icmp ne i32 %and92, 0
  br i1 %tobool93, label %if.end96, label %if.then94

if.then94:                                        ; preds = %do.end91
  %60 = load i8*, i8** %ptr.addr, align 8
  %61 = load i64, i64* %len.addr, align 8
  %arrayidx95 = getelementptr inbounds i8, i8* %60, i64 %61
  store i8 0, i8* %arrayidx95, align 1
  br label %if.end96

if.end96:                                         ; preds = %if.then94, %do.end91
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags97 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags97, align 4
  %and98 = and i32 %63, 2147418367
  store i32 %and98, i32* %sv_flags97, align 4
  %64 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags99 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags99, align 4
  %or = or i32 %65, 17408
  store i32 %or, i32* %sv_flags99, align 4
  br label %do.body100

do.body100:                                       ; preds = %if.end96
  %66 = load i8, i8* @PL_tainting, align 1
  %tobool101 = trunc i8 %66 to i1
  br i1 %tobool101, label %cond.true103, label %cond.false104

cond.true103:                                     ; preds = %do.body100
  br i1 true, label %if.then105, label %if.end120

cond.false104:                                    ; preds = %do.body100
  br i1 false, label %if.then105, label %if.end120

if.then105:                                       ; preds = %cond.false104, %cond.true103
  %67 = load i8, i8* @PL_tainted, align 1
  %tobool106 = trunc i8 %67 to i1
  br i1 %tobool106, label %cond.true108, label %cond.false109

cond.true108:                                     ; preds = %if.then105
  br i1 true, label %if.then110, label %if.end119

cond.false109:                                    ; preds = %if.then105
  br i1 false, label %if.then110, label %if.end119

if.then110:                                       ; preds = %cond.false109, %cond.true108
  br label %do.body111

do.body111:                                       ; preds = %if.then110
  %68 = load i8, i8* @PL_tainting, align 1
  %tobool112 = trunc i8 %68 to i1
  br i1 %tobool112, label %cond.true114, label %cond.false115

cond.true114:                                     ; preds = %do.body111
  br i1 true, label %if.then116, label %if.end117

cond.false115:                                    ; preds = %do.body111
  br i1 false, label %if.then116, label %if.end117

if.then116:                                       ; preds = %cond.false115, %cond.true114
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %69, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end117

if.end117:                                        ; preds = %if.then116, %cond.false115, %cond.true114
  br label %do.end118

do.end118:                                        ; preds = %if.end117
  br label %if.end119

if.end119:                                        ; preds = %do.end118, %cond.false109, %cond.true108
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %cond.false104, %cond.true103
  br label %do.end121

do.end121:                                        ; preds = %if.end120
  %70 = load i32, i32* %flags.addr, align 4
  %and122 = and i32 %70, 128
  %tobool123 = icmp ne i32 %and122, 0
  br i1 %tobool123, label %if.then124, label %if.end135

if.then124:                                       ; preds = %do.end121
  br label %do.body125

do.body125:                                       ; preds = %if.then124
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags126 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags126, align 4
  %and127 = and i32 %72, 4194304
  %tobool128 = icmp ne i32 %and127, 0
  br i1 %tobool128, label %cond.true129, label %cond.false130

cond.true129:                                     ; preds = %do.body125
  br i1 true, label %if.then131, label %if.end133

cond.false130:                                    ; preds = %do.body125
  br i1 false, label %if.then131, label %if.end133

if.then131:                                       ; preds = %cond.false130, %cond.true129
  %73 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call132 = call i32 @Perl_mg_set(%struct.sv* %73)
  br label %if.end133

if.end133:                                        ; preds = %if.then131, %cond.false130, %cond.true129
  br label %do.end134

do.end134:                                        ; preds = %if.end133
  br label %if.end135

if.end135:                                        ; preds = %if.end20, %do.end134, %do.end121
  ret void
}

declare dso_local void @Perl_croak_no_modify() #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_sv_unglob(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %xpvmg = alloca i8*, align 8
  %stash = alloca %struct.hv*, align 8
  %temp = alloca %struct.sv*, align 8
  %thing_copy = alloca i8**, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call %struct.sv* @Perl_sv_newmortal()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ null, %cond.true ], [ %call, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %temp, align 8
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %2, -16777217
  store i32 %and1, i32* %sv_flags, align 4
  %3 = load i32, i32* %flags.addr, align 4
  %and2 = and i32 %3, 4
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  %4 = load %struct.sv*, %struct.sv** %temp, align 8
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %6 = bitcast %struct.sv* %5 to i8*
  %7 = bitcast i8* %6 to %struct.gv*
  call void @Perl_gv_efullname4(%struct.sv* %4, %struct.gv* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i1 zeroext true)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call4 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %8)
  %9 = bitcast %struct.sv* %call4 to i8*
  %10 = bitcast i8* %9 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 1
  %11 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %11, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 3
  %svu_gp = bitcast %union.anon* %sv_u to %struct.gp**
  %13 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %13, i64 0
  %tobool5 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool5, label %if.then6, label %if.end86

if.then6:                                         ; preds = %if.end
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %15 = bitcast %struct.sv* %14 to %struct.gv*
  %sv_u7 = getelementptr inbounds %struct.gv, %struct.gv* %15, i32 0, i32 3
  %svu_gp8 = bitcast %union.anon.6* %sv_u7 to %struct.gp**
  %16 = load %struct.gp*, %struct.gp** %svu_gp8, align 8
  %add.ptr9 = getelementptr inbounds %struct.gp, %struct.gp* %16, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr9, i32 0, i32 3
  %17 = load i32, i32* %gp_cvgen, align 8
  %tobool10 = icmp ne i32 %17, 0
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %if.then6
  br i1 false, label %land.lhs.true, label %if.end85

cond.false12:                                     ; preds = %if.then6
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %19 = bitcast %struct.sv* %18 to %struct.gv*
  %sv_u13 = getelementptr inbounds %struct.gv, %struct.gv* %19, i32 0, i32 3
  %svu_gp14 = bitcast %union.anon.6* %sv_u13 to %struct.gp**
  %20 = load %struct.gp*, %struct.gp** %svu_gp14, align 8
  %add.ptr15 = getelementptr inbounds %struct.gp, %struct.gp* %20, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr15, i32 0, i32 2
  %21 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %tobool16 = icmp ne %struct.cv* %21, null
  br i1 %tobool16, label %land.lhs.true, label %if.end85

land.lhs.true:                                    ; preds = %cond.false12, %cond.true11
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %23 = bitcast %struct.sv* %22 to i8*
  %24 = bitcast i8* %23 to %struct.gv*
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %24, i32 0, i32 0
  %25 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %25, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %26 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  store %struct.hv* %26, %struct.hv** %stash, align 8
  %tobool17 = icmp ne %struct.hv* %26, null
  br i1 %tobool17, label %land.lhs.true18, label %if.end85

land.lhs.true18:                                  ; preds = %land.lhs.true
  %27 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags19 = getelementptr inbounds %struct.hv, %struct.hv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %28, 33554432
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %land.lhs.true22, label %cond.false83

land.lhs.true22:                                  ; preds = %land.lhs.true18
  %29 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u23 = getelementptr inbounds %struct.hv, %struct.hv* %29, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u23 to %struct.he***
  %30 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %31 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any24 = getelementptr inbounds %struct.hv, %struct.hv* %31, i32 0, i32 0
  %32 = load %struct.xpvhv*, %struct.xpvhv** %sv_any24, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %32, i32 0, i32 3
  %33 = load i64, i64* %xhv_max, align 8
  %add = add i64 %33, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %30, i64 %add
  %34 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %34, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %35 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool25 = icmp ne %struct.hek* %35, null
  br i1 %tobool25, label %land.lhs.true26, label %cond.false83

land.lhs.true26:                                  ; preds = %land.lhs.true22
  %36 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u27 = getelementptr inbounds %struct.hv, %struct.hv* %36, i32 0, i32 3
  %svu_hash28 = bitcast %union.anon.4* %sv_u27 to %struct.he***
  %37 = load %struct.he**, %struct.he*** %svu_hash28, align 8
  %38 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any29 = getelementptr inbounds %struct.hv, %struct.hv* %38, i32 0, i32 0
  %39 = load %struct.xpvhv*, %struct.xpvhv** %sv_any29, align 8
  %xhv_max30 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %39, i32 0, i32 3
  %40 = load i64, i64* %xhv_max30, align 8
  %add31 = add i64 %40, 1
  %arrayidx32 = getelementptr inbounds %struct.he*, %struct.he** %37, i64 %add31
  %41 = bitcast %struct.he** %arrayidx32 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %41, i32 0, i32 4
  %42 = load i32, i32* %xhv_name_count, align 4
  %tobool33 = icmp ne i32 %42, 0
  br i1 %tobool33, label %cond.true34, label %cond.false43

cond.true34:                                      ; preds = %land.lhs.true26
  %43 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u35 = getelementptr inbounds %struct.hv, %struct.hv* %43, i32 0, i32 3
  %svu_hash36 = bitcast %union.anon.4* %sv_u35 to %struct.he***
  %44 = load %struct.he**, %struct.he*** %svu_hash36, align 8
  %45 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any37 = getelementptr inbounds %struct.hv, %struct.hv* %45, i32 0, i32 0
  %46 = load %struct.xpvhv*, %struct.xpvhv** %sv_any37, align 8
  %xhv_max38 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %46, i32 0, i32 3
  %47 = load i64, i64* %xhv_max38, align 8
  %add39 = add i64 %47, 1
  %arrayidx40 = getelementptr inbounds %struct.he*, %struct.he** %44, i64 %add39
  %48 = bitcast %struct.he** %arrayidx40 to %struct.xpvhv_aux*
  %xhv_name_u41 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %48, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u41 to %struct.hek***
  %49 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %50 = load %struct.hek*, %struct.hek** %49, align 8
  %tobool42 = icmp ne %struct.hek* %50, null
  br i1 %tobool42, label %cond.true53, label %cond.false83

cond.false43:                                     ; preds = %land.lhs.true26
  %51 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u44 = getelementptr inbounds %struct.hv, %struct.hv* %51, i32 0, i32 3
  %svu_hash45 = bitcast %union.anon.4* %sv_u44 to %struct.he***
  %52 = load %struct.he**, %struct.he*** %svu_hash45, align 8
  %53 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any46 = getelementptr inbounds %struct.hv, %struct.hv* %53, i32 0, i32 0
  %54 = load %struct.xpvhv*, %struct.xpvhv** %sv_any46, align 8
  %xhv_max47 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %54, i32 0, i32 3
  %55 = load i64, i64* %xhv_max47, align 8
  %add48 = add i64 %55, 1
  %arrayidx49 = getelementptr inbounds %struct.he*, %struct.he** %52, i64 %add48
  %56 = bitcast %struct.he** %arrayidx49 to %struct.xpvhv_aux*
  %xhv_name_u50 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %56, i32 0, i32 0
  %xhvnameu_name51 = bitcast %union._xhvnameu* %xhv_name_u50 to %struct.hek**
  %57 = load %struct.hek*, %struct.hek** %xhvnameu_name51, align 8
  %tobool52 = icmp ne %struct.hek* %57, null
  br i1 %tobool52, label %cond.true53, label %cond.false83

cond.true53:                                      ; preds = %cond.false43, %cond.true34
  %58 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u54 = getelementptr inbounds %struct.hv, %struct.hv* %58, i32 0, i32 3
  %svu_hash55 = bitcast %union.anon.4* %sv_u54 to %struct.he***
  %59 = load %struct.he**, %struct.he*** %svu_hash55, align 8
  %60 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any56 = getelementptr inbounds %struct.hv, %struct.hv* %60, i32 0, i32 0
  %61 = load %struct.xpvhv*, %struct.xpvhv** %sv_any56, align 8
  %xhv_max57 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %61, i32 0, i32 3
  %62 = load i64, i64* %xhv_max57, align 8
  %add58 = add i64 %62, 1
  %arrayidx59 = getelementptr inbounds %struct.he*, %struct.he** %59, i64 %add58
  %63 = bitcast %struct.he** %arrayidx59 to %struct.xpvhv_aux*
  %xhv_name_count60 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %63, i32 0, i32 4
  %64 = load i32, i32* %xhv_name_count60, align 4
  %tobool61 = icmp ne i32 %64, 0
  br i1 %tobool61, label %cond.true62, label %cond.false71

cond.true62:                                      ; preds = %cond.true53
  %65 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u63 = getelementptr inbounds %struct.hv, %struct.hv* %65, i32 0, i32 3
  %svu_hash64 = bitcast %union.anon.4* %sv_u63 to %struct.he***
  %66 = load %struct.he**, %struct.he*** %svu_hash64, align 8
  %67 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any65 = getelementptr inbounds %struct.hv, %struct.hv* %67, i32 0, i32 0
  %68 = load %struct.xpvhv*, %struct.xpvhv** %sv_any65, align 8
  %xhv_max66 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %68, i32 0, i32 3
  %69 = load i64, i64* %xhv_max66, align 8
  %add67 = add i64 %69, 1
  %arrayidx68 = getelementptr inbounds %struct.he*, %struct.he** %66, i64 %add67
  %70 = bitcast %struct.he** %arrayidx68 to %struct.xpvhv_aux*
  %xhv_name_u69 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %70, i32 0, i32 0
  %xhvnameu_names70 = bitcast %union._xhvnameu* %xhv_name_u69 to %struct.hek***
  %71 = load %struct.hek**, %struct.hek*** %xhvnameu_names70, align 8
  %72 = load %struct.hek*, %struct.hek** %71, align 8
  br label %cond.end80

cond.false71:                                     ; preds = %cond.true53
  %73 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u72 = getelementptr inbounds %struct.hv, %struct.hv* %73, i32 0, i32 3
  %svu_hash73 = bitcast %union.anon.4* %sv_u72 to %struct.he***
  %74 = load %struct.he**, %struct.he*** %svu_hash73, align 8
  %75 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any74 = getelementptr inbounds %struct.hv, %struct.hv* %75, i32 0, i32 0
  %76 = load %struct.xpvhv*, %struct.xpvhv** %sv_any74, align 8
  %xhv_max75 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %76, i32 0, i32 3
  %77 = load i64, i64* %xhv_max75, align 8
  %add76 = add i64 %77, 1
  %arrayidx77 = getelementptr inbounds %struct.he*, %struct.he** %74, i64 %add76
  %78 = bitcast %struct.he** %arrayidx77 to %struct.xpvhv_aux*
  %xhv_name_u78 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %78, i32 0, i32 0
  %xhvnameu_name79 = bitcast %union._xhvnameu* %xhv_name_u78 to %struct.hek**
  %79 = load %struct.hek*, %struct.hek** %xhvnameu_name79, align 8
  br label %cond.end80

cond.end80:                                       ; preds = %cond.false71, %cond.true62
  %cond81 = phi %struct.hek* [ %72, %cond.true62 ], [ %79, %cond.false71 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond81, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %tobool82 = icmp ne i8* %arraydecay, null
  br i1 %tobool82, label %if.then84, label %if.end85

cond.false83:                                     ; preds = %cond.false43, %cond.true34, %land.lhs.true22, %land.lhs.true18
  br i1 false, label %if.then84, label %if.end85

if.then84:                                        ; preds = %cond.false83, %cond.end80
  %80 = load %struct.hv*, %struct.hv** %stash, align 8
  call void @Perl_mro_method_changed_in(%struct.hv* %80)
  br label %if.end85

if.end85:                                         ; preds = %if.then84, %cond.false83, %cond.end80, %land.lhs.true, %cond.false12, %cond.true11
  %81 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %82 = bitcast %struct.sv* %81 to i8*
  %83 = bitcast i8* %82 to %struct.gv*
  call void @Perl_gp_free(%struct.gv* %83)
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.end
  %84 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any87 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 0
  %85 = load i8*, i8** %sv_any87, align 8
  %86 = bitcast i8* %85 to %struct.xpvgv*
  %xnv_u88 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %86, i32 0, i32 5
  %xgv_stash89 = bitcast %union._xnvu* %xnv_u88 to %struct.hv**
  %87 = load %struct.hv*, %struct.hv** %xgv_stash89, align 8
  %tobool90 = icmp ne %struct.hv* %87, null
  br i1 %tobool90, label %if.then91, label %if.end98

if.then91:                                        ; preds = %if.end86
  %88 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any92 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 0
  %89 = load i8*, i8** %sv_any92, align 8
  %90 = bitcast i8* %89 to %struct.xpvgv*
  %xnv_u93 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %90, i32 0, i32 5
  %xgv_stash94 = bitcast %union._xnvu* %xnv_u93 to %struct.hv**
  %91 = load %struct.hv*, %struct.hv** %xgv_stash94, align 8
  %92 = bitcast %struct.hv* %91 to i8*
  %93 = bitcast i8* %92 to %struct.sv*
  %94 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_del_backref(%struct.sv* %93, %struct.sv* %94)
  %95 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any95 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 0
  %96 = load i8*, i8** %sv_any95, align 8
  %97 = bitcast i8* %96 to %struct.xpvgv*
  %xnv_u96 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %97, i32 0, i32 5
  %xgv_stash97 = bitcast %union._xnvu* %xnv_u96 to %struct.hv**
  store %struct.hv* null, %struct.hv** %xgv_stash97, align 8
  br label %if.end98

if.end98:                                         ; preds = %if.then91, %if.end86
  %98 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any99 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 0
  %99 = load i8*, i8** %sv_any99, align 8
  %100 = bitcast i8* %99 to %struct.xpvgv*
  %xpv_cur = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %100, i32 0, i32 2
  %101 = load i64, i64* %xpv_cur, align 8
  %and100 = and i64 %101, -3
  store i64 %and100, i64* %xpv_cur, align 8
  %102 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any101 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 0
  %103 = load i8*, i8** %sv_any101, align 8
  %104 = bitcast i8* %103 to %struct.xpvgv*
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %104, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %105 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %tobool102 = icmp ne %struct.hek* %105, null
  br i1 %tobool102, label %if.then103, label %if.end107

if.then103:                                       ; preds = %if.end98
  %106 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any104 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 0
  %107 = load i8*, i8** %sv_any104, align 8
  %108 = bitcast i8* %107 to %struct.xpvgv*
  %xiv_u105 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %108, i32 0, i32 4
  %xivu_namehek106 = bitcast %union._xivu* %xiv_u105 to %struct.hek**
  %109 = load %struct.hek*, %struct.hek** %xivu_namehek106, align 8
  call void @Perl_unshare_hek(%struct.hek* %109)
  br label %if.end107

if.end107:                                        ; preds = %if.then103, %if.end98
  br label %do.body

do.body:                                          ; preds = %if.end107
  %110 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags108 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 2
  %111 = load i32, i32* %sv_flags108, align 4
  %and109 = and i32 %111, -32769
  store i32 %and109, i32* %sv_flags108, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %112 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags110 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 2
  %113 = load i32, i32* %sv_flags110, align 4
  %and111 = and i32 %113, 255
  %cmp = icmp eq i32 %and111, 9
  br i1 %cmp, label %if.then112, label %if.end126

if.then112:                                       ; preds = %do.end
  %call113 = call i8* @S_new_body(i32 7)
  %114 = load i8, i8* getelementptr inbounds ([16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 7, i32 2), align 2
  %conv = zext i8 %114 to i32
  %idx.ext = sext i32 %conv to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr114 = getelementptr inbounds i8, i8* %call113, i64 %idx.neg
  store i8* %add.ptr114, i8** %xpvmg, align 8
  %115 = load i8*, i8** %xpvmg, align 8
  %116 = bitcast i8* %115 to %struct.xpvmg*
  %117 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any115 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 0
  %118 = load i8*, i8** %sv_any115, align 8
  %119 = bitcast i8* %118 to %struct.xpvmg*
  %120 = bitcast %struct.xpvmg* %116 to i8*
  %121 = bitcast %struct.xpvmg* %119 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 8 %121, i64 48, i1 false)
  br label %do.body116

do.body116:                                       ; preds = %if.then112
  %122 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any117 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 0
  %123 = load i8*, i8** %sv_any117, align 8
  %124 = bitcast i8* %123 to i8**
  %125 = load i8, i8* getelementptr inbounds ([16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 9, i32 2), align 2
  %conv118 = zext i8 %125 to i32
  %idx.ext119 = sext i32 %conv118 to i64
  %add.ptr120 = getelementptr inbounds i8*, i8** %124, i64 %idx.ext119
  store i8** %add.ptr120, i8*** %thing_copy, align 8
  %126 = load i8*, i8** getelementptr inbounds ([16 x i8*], [16 x i8*]* @PL_body_roots, i64 0, i64 9), align 8
  %127 = load i8**, i8*** %thing_copy, align 8
  store i8* %126, i8** %127, align 8
  %128 = load i8**, i8*** %thing_copy, align 8
  %129 = bitcast i8** %128 to i8*
  store i8* %129, i8** getelementptr inbounds ([16 x i8*], [16 x i8*]* @PL_body_roots, i64 0, i64 9), align 8
  br label %do.end121

do.end121:                                        ; preds = %do.body116
  %130 = load i8*, i8** %xpvmg, align 8
  %131 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any122 = getelementptr inbounds %struct.sv, %struct.sv* %131, i32 0, i32 0
  store i8* %130, i8** %sv_any122, align 8
  %132 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags123 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 2
  %133 = load i32, i32* %sv_flags123, align 4
  %and124 = and i32 %133, -256
  store i32 %and124, i32* %sv_flags123, align 4
  %134 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags125 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 2
  %135 = load i32, i32* %sv_flags125, align 4
  %or = or i32 %135, 7
  store i32 %or, i32* %sv_flags125, align 4
  br label %if.end126

if.end126:                                        ; preds = %do.end121, %do.end
  %136 = load i32, i32* %flags.addr, align 4
  %and127 = and i32 %136, 4
  %tobool128 = icmp ne i32 %and127, 0
  br i1 %tobool128, label %if.then129, label %if.else

if.then129:                                       ; preds = %if.end126
  %137 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags130 = getelementptr inbounds %struct.sv, %struct.sv* %137, i32 0, i32 2
  %138 = load i32, i32* %sv_flags130, align 4
  %and131 = and i32 %138, 1610547455
  store i32 %and131, i32* %sv_flags130, align 4
  %139 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags132 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 2
  %140 = load i32, i32* %sv_flags132, align 4
  %and133 = and i32 %140, 33554432
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then129
  %141 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call135 = call i32 @Perl_sv_backoff(%struct.sv* %141)
  %tobool136 = icmp ne i32 %call135, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then129
  %142 = phi i1 [ false, %if.then129 ], [ %tobool136, %land.rhs ]
  %land.ext = zext i1 %142 to i32
  br label %if.end137

if.else:                                          ; preds = %if.end126
  %143 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %144 = load %struct.sv*, %struct.sv** %temp, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %143, %struct.sv* %144, i32 0)
  br label %if.end137

if.end137:                                        ; preds = %if.else, %land.end
  %145 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %146 = bitcast %struct.sv* %145 to %struct.gv*
  %147 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %cmp138 = icmp eq %struct.gv* %146, %147
  br i1 %cmp138, label %if.then140, label %if.else141

if.then140:                                       ; preds = %if.end137
  store %struct.gv* null, %struct.gv** @PL_last_in_gv, align 8
  br label %if.end146

if.else141:                                       ; preds = %if.end137
  %148 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %149 = bitcast %struct.sv* %148 to %struct.gv*
  %150 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %cmp142 = icmp eq %struct.gv* %149, %150
  br i1 %cmp142, label %if.then144, label %if.end145

if.then144:                                       ; preds = %if.else141
  store %struct.gv* null, %struct.gv** @PL_statgv, align 8
  br label %if.end145

if.end145:                                        ; preds = %if.then144, %if.else141
  br label %if.end146

if.end146:                                        ; preds = %if.end145, %if.then140
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec_NN(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 1
  %1 = load i32, i32* %sv_refcnt, align 8
  store i32 %1, i32* %rc, align 4
  %2 = load i32, i32* %rc, align 4
  %cmp = icmp ugt i32 %2, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.else

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load i32, i32* %rc, align 4
  %sub = sub i32 %3, 1
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt1, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %6 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %5, i32 %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_sv_unmagic(%struct.sv* %sv, i32 %type) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %type.addr = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i32, i32* %type.addr, align 4
  %call = call i32 @S_sv_unmagicext_flags(%struct.sv* %0, i32 %1, %struct.mgvtbl* null, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_chop(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %delta = alloca i64, align 8
  %old_delta = alloca i64, align 8
  %p = alloca i8*, align 8
  %max_delta = alloca i64, align 8
  %pvx = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 16384
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end117

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %5 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %add.ptr to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %delta, align 8
  %6 = load i64, i64* %delta, align 8
  %tobool2 = icmp ne i64 %6, 0
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  br label %if.end117

if.end4:                                          ; preds = %if.end
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %10 = load i64, i64* %xpvlenu_len, align 8
  %tobool5 = icmp ne i64 %10, 0
  br i1 %tobool5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end4
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any6, align 8
  %13 = bitcast i8* %12 to %struct.xpv*
  %xpv_len_u7 = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 3
  %xpvlenu_len8 = bitcast %union.anon.19* %xpv_len_u7 to i64*
  %14 = load i64, i64* %xpvlenu_len8, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end4
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any9, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 2
  %18 = load i64, i64* %xpv_cur, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %14, %cond.true ], [ %18, %cond.false ]
  store i64 %cond, i64* %max_delta, align 8
  %19 = load i64, i64* %delta, align 8
  %20 = load i64, i64* %max_delta, align 8
  %cmp = icmp ugt i64 %19, %20
  br i1 %cmp, label %if.then10, label %if.end18

if.then10:                                        ; preds = %cond.end
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u11 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_pv12 = bitcast %union.anon* %sv_u11 to i8**
  %23 = load i8*, i8** %svu_pv12, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %23, i64 0
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u14 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 3
  %svu_pv15 = bitcast %union.anon* %sv_u14 to i8**
  %25 = load i8*, i8** %svu_pv15, align 8
  %add.ptr16 = getelementptr inbounds i8, i8* %25, i64 0
  %26 = load i64, i64* %max_delta, align 8
  %add.ptr17 = getelementptr inbounds i8, i8* %add.ptr16, i64 %26
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.23, i64 0, i64 0), i8* %21, i8* %add.ptr13, i8* %add.ptr17)
  br label %if.end18

if.end18:                                         ; preds = %if.then10, %cond.end
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %28, 427886592
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end18
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %29, i32 0)
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %if.end18
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %31, 2147418367
  store i32 %and25, i32* %sv_flags24, align 4
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags26, align 4
  %or = or i32 %33, 17408
  store i32 %or, i32* %sv_flags26, align 4
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %35, 33554432
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.else, label %if.then30

if.then30:                                        ; preds = %if.end23
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any31 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 0
  %37 = load i8*, i8** %sv_any31, align 8
  %38 = bitcast i8* %37 to %struct.xpv*
  %xpv_len_u32 = getelementptr inbounds %struct.xpv, %struct.xpv* %38, i32 0, i32 3
  %xpvlenu_len33 = bitcast %union.anon.19* %xpv_len_u32 to i64*
  %39 = load i64, i64* %xpvlenu_len33, align 8
  %tobool34 = icmp ne i64 %39, 0
  br i1 %tobool34, label %if.end63, label %if.then35

if.then35:                                        ; preds = %if.then30
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u36 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 3
  %svu_pv37 = bitcast %union.anon* %sv_u36 to i8**
  %41 = load i8*, i8** %svu_pv37, align 8
  %add.ptr38 = getelementptr inbounds i8, i8* %41, i64 0
  store i8* %add.ptr38, i8** %pvx, align 8
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any39 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any39, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_cur40 = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 2
  %45 = load i64, i64* %xpv_cur40, align 8
  store i64 %45, i64* %len, align 8
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %47, 268435456
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %cond.true49, label %lor.lhs.false44

lor.lhs.false44:                                  ; preds = %if.then35
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any45 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any45, align 8
  %50 = bitcast i8* %49 to %struct.xpv*
  %xpv_len_u46 = getelementptr inbounds %struct.xpv, %struct.xpv* %50, i32 0, i32 3
  %xpvlenu_len47 = bitcast %union.anon.19* %xpv_len_u46 to i64*
  %51 = load i64, i64* %xpvlenu_len47, align 8
  %52 = load i64, i64* %len, align 8
  %add = add i64 %52, 1
  %cmp48 = icmp ult i64 %51, %add
  br i1 %cmp48, label %cond.true49, label %cond.false51

cond.true49:                                      ; preds = %lor.lhs.false44, %if.then35
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %54 = load i64, i64* %len, align 8
  %add50 = add i64 %54, 1
  %call = call i8* @Perl_sv_grow(%struct.sv* %53, i64 %add50)
  br label %cond.end54

cond.false51:                                     ; preds = %lor.lhs.false44
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u52 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 3
  %svu_pv53 = bitcast %union.anon* %sv_u52 to i8**
  %56 = load i8*, i8** %svu_pv53, align 8
  br label %cond.end54

cond.end54:                                       ; preds = %cond.false51, %cond.true49
  %cond55 = phi i8* [ %call, %cond.true49 ], [ %56, %cond.false51 ]
  %57 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u56 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 3
  %svu_pv57 = bitcast %union.anon* %sv_u56 to i8**
  %58 = load i8*, i8** %svu_pv57, align 8
  %59 = load i8*, i8** %pvx, align 8
  %60 = load i64, i64* %len, align 8
  %mul = mul i64 %60, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %59, i64 %mul, i1 false)
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u58 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 3
  %svu_pv59 = bitcast %union.anon* %sv_u58 to i8**
  %62 = load i8*, i8** %svu_pv59, align 8
  %63 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any60 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 0
  %64 = load i8*, i8** %sv_any60, align 8
  %65 = bitcast i8* %64 to %struct.xpv*
  %xpv_cur61 = getelementptr inbounds %struct.xpv, %struct.xpv* %65, i32 0, i32 2
  %66 = load i64, i64* %xpv_cur61, align 8
  %add.ptr62 = getelementptr inbounds i8, i8* %62, i64 %66
  store i8 0, i8* %add.ptr62, align 1
  br label %if.end63

if.end63:                                         ; preds = %cond.end54, %if.then30
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags64 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags64, align 4
  %or65 = or i32 %68, 33554432
  store i32 %or65, i32* %sv_flags64, align 4
  store i64 0, i64* %old_delta, align 8
  br label %if.end83

if.else:                                          ; preds = %if.end23
  br label %do.body

do.body:                                          ; preds = %if.else
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %70, 33554432
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %if.then69, label %if.else81

if.then69:                                        ; preds = %do.body
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u70 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 3
  %svu_pv71 = bitcast %union.anon* %sv_u70 to i8**
  %72 = load i8*, i8** %svu_pv71, align 8
  %add.ptr72 = getelementptr inbounds i8, i8* %72, i64 0
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr72, i64 -1
  %73 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %73 to i64
  store i64 %conv, i64* %old_delta, align 8
  %74 = load i64, i64* %old_delta, align 8
  %tobool73 = icmp ne i64 %74, 0
  br i1 %tobool73, label %if.end80, label %if.then74

if.then74:                                        ; preds = %if.then69
  %75 = bitcast i64* %old_delta to i8*
  %76 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u75 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 3
  %svu_pv76 = bitcast %union.anon* %sv_u75 to i8**
  %77 = load i8*, i8** %svu_pv76, align 8
  %add.ptr77 = getelementptr inbounds i8, i8* %77, i64 0
  %add.ptr78 = getelementptr inbounds i8, i8* %add.ptr77, i64 -1
  %add.ptr79 = getelementptr inbounds i8, i8* %add.ptr78, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 1 %add.ptr79, i64 8, i1 false)
  br label %if.end80

if.end80:                                         ; preds = %if.then74, %if.then69
  br label %if.end82

if.else81:                                        ; preds = %do.body
  store i64 0, i64* %old_delta, align 8
  br label %if.end82

if.end82:                                         ; preds = %if.else81, %if.end80
  br label %do.end

do.end:                                           ; preds = %if.end82
  br label %if.end83

if.end83:                                         ; preds = %do.end, %if.end63
  br label %do.body84

do.body84:                                        ; preds = %if.end83
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any85, align 8
  %80 = bitcast i8* %79 to %struct.xpv*
  %xpv_len_u86 = getelementptr inbounds %struct.xpv, %struct.xpv* %80, i32 0, i32 3
  %xpvlenu_len87 = bitcast %union.anon.19* %xpv_len_u86 to i64*
  %81 = load i64, i64* %xpvlenu_len87, align 8
  %82 = load i64, i64* %delta, align 8
  %sub = sub i64 %81, %82
  %83 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any88 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any88, align 8
  %85 = bitcast i8* %84 to %struct.xpv*
  %xpv_len_u89 = getelementptr inbounds %struct.xpv, %struct.xpv* %85, i32 0, i32 3
  %xpvlenu_len90 = bitcast %union.anon.19* %xpv_len_u89 to i64*
  store i64 %sub, i64* %xpvlenu_len90, align 8
  br label %do.end91

do.end91:                                         ; preds = %do.body84
  br label %do.body92

do.body92:                                        ; preds = %do.end91
  %86 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any93 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 0
  %87 = load i8*, i8** %sv_any93, align 8
  %88 = bitcast i8* %87 to %struct.xpv*
  %xpv_cur94 = getelementptr inbounds %struct.xpv, %struct.xpv* %88, i32 0, i32 2
  %89 = load i64, i64* %xpv_cur94, align 8
  %90 = load i64, i64* %delta, align 8
  %sub95 = sub i64 %89, %90
  %91 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any96 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 0
  %92 = load i8*, i8** %sv_any96, align 8
  %93 = bitcast i8* %92 to %struct.xpv*
  %xpv_cur97 = getelementptr inbounds %struct.xpv, %struct.xpv* %93, i32 0, i32 2
  store i64 %sub95, i64* %xpv_cur97, align 8
  br label %do.end98

do.end98:                                         ; preds = %do.body92
  br label %do.body99

do.body99:                                        ; preds = %do.end98
  %94 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u100 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 3
  %svu_pv101 = bitcast %union.anon* %sv_u100 to i8**
  %95 = load i8*, i8** %svu_pv101, align 8
  %96 = load i64, i64* %delta, align 8
  %add.ptr102 = getelementptr inbounds i8, i8* %95, i64 %96
  %97 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u103 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 3
  %svu_pv104 = bitcast %union.anon* %sv_u103 to i8**
  store i8* %add.ptr102, i8** %svu_pv104, align 8
  br label %do.end105

do.end105:                                        ; preds = %do.body99
  %98 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u106 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 3
  %svu_pv107 = bitcast %union.anon* %sv_u106 to i8**
  %99 = load i8*, i8** %svu_pv107, align 8
  %add.ptr108 = getelementptr inbounds i8, i8* %99, i64 0
  store i8* %add.ptr108, i8** %p, align 8
  %100 = load i64, i64* %old_delta, align 8
  %101 = load i64, i64* %delta, align 8
  %add109 = add i64 %101, %100
  store i64 %add109, i64* %delta, align 8
  %102 = load i64, i64* %delta, align 8
  %cmp110 = icmp ult i64 %102, 256
  br i1 %cmp110, label %if.then112, label %if.else114

if.then112:                                       ; preds = %do.end105
  %103 = load i64, i64* %delta, align 8
  %conv113 = trunc i64 %103 to i8
  %104 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %104, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8
  store i8 %conv113, i8* %incdec.ptr, align 1
  br label %if.end117

if.else114:                                       ; preds = %do.end105
  %105 = load i8*, i8** %p, align 8
  %incdec.ptr115 = getelementptr inbounds i8, i8* %105, i32 -1
  store i8* %incdec.ptr115, i8** %p, align 8
  store i8 0, i8* %incdec.ptr115, align 1
  %106 = load i8*, i8** %p, align 8
  %add.ptr116 = getelementptr inbounds i8, i8* %106, i64 -8
  store i8* %add.ptr116, i8** %p, align 8
  %107 = load i8*, i8** %p, align 8
  %108 = bitcast i64* %delta to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %107, i8* align 8 %108, i64 8, i1 false)
  br label %if.end117

if.end117:                                        ; preds = %if.then, %if.then3, %if.else114, %if.then112
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_catpvn_flags(%struct.sv* %dsv, i8* %sstr, i64 %slen, i32 %flags) #0 {
entry:
  %dsv.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca i8*, align 8
  %slen.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %dlen = alloca i64, align 8
  %dstr = alloca i8*, align 8
  %send = alloca i8*, align 8
  %d = alloca i8*, align 8
  store %struct.sv* %dsv, %struct.sv** %dsv.addr, align 8
  store i8* %sstr, i8** %sstr.addr, align 8
  store i64 %slen, i64* %slen.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 430018304
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 2
  %5 = load i64, i64* %xpv_cur, align 8
  store i64 %5, i64* %dlen, align 8
  %6 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %7 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %9 = load i32, i32* %flags.addr, align 4
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %8, i64* %dlen, i32 %9)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %7, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %dstr, align 8
  %10 = load i32, i32* %flags.addr, align 4
  %and1 = and i32 %10, 16384
  %tobool = icmp ne i32 %and1, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %cond.end
  %11 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %12, 536870912
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.else44, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %13 = load i32, i32* %flags.addr, align 4
  %and5 = and i32 %13, 32768
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %14 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %15, 536870912
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.else, label %if.then10

if.then10:                                        ; preds = %land.lhs.true
  %16 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %17 = load i64, i64* %slen.addr, align 8
  %add = add i64 %17, 1
  %call11 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %16, i32 0, i64 %add)
  %18 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any12, align 8
  %20 = bitcast i8* %19 to %struct.xpv*
  %xpv_cur13 = getelementptr inbounds %struct.xpv, %struct.xpv* %20, i32 0, i32 2
  %21 = load i64, i64* %xpv_cur13, align 8
  store i64 %21, i64* %dlen, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %if.then
  %22 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %23, 268435456
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %cond.true22, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %if.else
  %24 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any18 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any18, align 8
  %26 = bitcast i8* %25 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %26, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %27 = load i64, i64* %xpvlenu_len, align 8
  %28 = load i64, i64* %dlen, align 8
  %29 = load i64, i64* %slen.addr, align 8
  %add19 = add i64 %28, %29
  %add20 = add i64 %add19, 1
  %cmp21 = icmp ult i64 %27, %add20
  br i1 %cmp21, label %cond.true22, label %cond.false26

cond.true22:                                      ; preds = %lor.lhs.false17, %if.else
  %30 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %31 = load i64, i64* %dlen, align 8
  %32 = load i64, i64* %slen.addr, align 8
  %add23 = add i64 %31, %32
  %add24 = add i64 %add23, 1
  %call25 = call i8* @Perl_sv_grow(%struct.sv* %30, i64 %add24)
  br label %cond.end29

cond.false26:                                     ; preds = %lor.lhs.false17
  %33 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_u27 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 3
  %svu_pv28 = bitcast %union.anon* %sv_u27 to i8**
  %34 = load i8*, i8** %svu_pv28, align 8
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false26, %cond.true22
  %cond30 = phi i8* [ %call25, %cond.true22 ], [ %34, %cond.false26 ]
  br label %if.end

if.end:                                           ; preds = %cond.end29, %if.then10
  %35 = load i8*, i8** %sstr.addr, align 8
  %36 = load i8*, i8** %dstr, align 8
  %cmp31 = icmp eq i8* %35, %36
  br i1 %cmp31, label %if.then32, label %if.end35

if.then32:                                        ; preds = %if.end
  %37 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_u33 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 3
  %svu_pv34 = bitcast %union.anon* %sv_u33 to i8**
  %38 = load i8*, i8** %svu_pv34, align 8
  %add.ptr = getelementptr inbounds i8, i8* %38, i64 0
  store i8* %add.ptr, i8** %sstr.addr, align 8
  br label %if.end35

if.end35:                                         ; preds = %if.then32, %if.end
  %39 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_u36 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 3
  %svu_pv37 = bitcast %union.anon* %sv_u36 to i8**
  %40 = load i8*, i8** %svu_pv37, align 8
  %41 = load i64, i64* %dlen, align 8
  %add.ptr38 = getelementptr inbounds i8, i8* %40, i64 %41
  %42 = load i8*, i8** %sstr.addr, align 8
  %43 = load i64, i64* %slen.addr, align 8
  %mul = mul i64 %43, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr38, i8* align 1 %42, i64 %mul, i1 false)
  br label %do.body

do.body:                                          ; preds = %if.end35
  %44 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any39 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 0
  %45 = load i8*, i8** %sv_any39, align 8
  %46 = bitcast i8* %45 to %struct.xpv*
  %xpv_cur40 = getelementptr inbounds %struct.xpv, %struct.xpv* %46, i32 0, i32 2
  %47 = load i64, i64* %xpv_cur40, align 8
  %48 = load i64, i64* %slen.addr, align 8
  %add41 = add i64 %47, %48
  %49 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any42 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any42, align 8
  %51 = bitcast i8* %50 to %struct.xpv*
  %xpv_cur43 = getelementptr inbounds %struct.xpv, %struct.xpv* %51, i32 0, i32 2
  store i64 %add41, i64* %xpv_cur43, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end77

if.else44:                                        ; preds = %lor.lhs.false
  %52 = load i8*, i8** %sstr.addr, align 8
  %53 = load i64, i64* %slen.addr, align 8
  %add.ptr45 = getelementptr inbounds i8, i8* %52, i64 %53
  store i8* %add.ptr45, i8** %send, align 8
  %54 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %55, 268435456
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %cond.true57, label %lor.lhs.false49

lor.lhs.false49:                                  ; preds = %if.else44
  %56 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any50 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 0
  %57 = load i8*, i8** %sv_any50, align 8
  %58 = bitcast i8* %57 to %struct.xpv*
  %xpv_len_u51 = getelementptr inbounds %struct.xpv, %struct.xpv* %58, i32 0, i32 3
  %xpvlenu_len52 = bitcast %union.anon.19* %xpv_len_u51 to i64*
  %59 = load i64, i64* %xpvlenu_len52, align 8
  %60 = load i64, i64* %dlen, align 8
  %61 = load i64, i64* %slen.addr, align 8
  %mul53 = mul i64 %61, 2
  %add54 = add i64 %60, %mul53
  %add55 = add i64 %add54, 1
  %cmp56 = icmp ult i64 %59, %add55
  br i1 %cmp56, label %cond.true57, label %cond.false62

cond.true57:                                      ; preds = %lor.lhs.false49, %if.else44
  %62 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %63 = load i64, i64* %dlen, align 8
  %64 = load i64, i64* %slen.addr, align 8
  %mul58 = mul i64 %64, 2
  %add59 = add i64 %63, %mul58
  %add60 = add i64 %add59, 1
  %call61 = call i8* @Perl_sv_grow(%struct.sv* %62, i64 %add60)
  br label %cond.end65

cond.false62:                                     ; preds = %lor.lhs.false49
  %65 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_u63 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 3
  %svu_pv64 = bitcast %union.anon* %sv_u63 to i8**
  %66 = load i8*, i8** %svu_pv64, align 8
  br label %cond.end65

cond.end65:                                       ; preds = %cond.false62, %cond.true57
  %cond66 = phi i8* [ %call61, %cond.true57 ], [ %66, %cond.false62 ]
  %67 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_u67 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 3
  %svu_pv68 = bitcast %union.anon* %sv_u67 to i8**
  %68 = load i8*, i8** %svu_pv68, align 8
  %69 = load i64, i64* %dlen, align 8
  %add.ptr69 = getelementptr inbounds i8, i8* %68, i64 %69
  store i8* %add.ptr69, i8** %d, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end65
  %70 = load i8*, i8** %sstr.addr, align 8
  %71 = load i8*, i8** %send, align 8
  %cmp70 = icmp ult i8* %70, %71
  br i1 %cmp70, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %72 = load i8*, i8** %sstr.addr, align 8
  %73 = load i8, i8* %72, align 1
  call void @S_append_utf8_from_native_byte(i8 zeroext %73, i8** %d)
  %74 = load i8*, i8** %sstr.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %incdec.ptr, i8** %sstr.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.body71

do.body71:                                        ; preds = %while.end
  %75 = load i8*, i8** %d, align 8
  %76 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_u72 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 3
  %svu_pv73 = bitcast %union.anon* %sv_u72 to i8**
  %77 = load i8*, i8** %svu_pv73, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %75 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %77 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %78 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any74 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any74, align 8
  %80 = bitcast i8* %79 to %struct.xpv*
  %xpv_cur75 = getelementptr inbounds %struct.xpv, %struct.xpv* %80, i32 0, i32 2
  store i64 %sub.ptr.sub, i64* %xpv_cur75, align 8
  br label %do.end76

do.end76:                                         ; preds = %do.body71
  br label %if.end77

if.end77:                                         ; preds = %do.end76, %do.end
  %81 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_u78 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 3
  %svu_pv79 = bitcast %union.anon* %sv_u78 to i8**
  %82 = load i8*, i8** %svu_pv79, align 8
  %83 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_any80 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any80, align 8
  %85 = bitcast i8* %84 to %struct.xpv*
  %xpv_cur81 = getelementptr inbounds %struct.xpv, %struct.xpv* %85, i32 0, i32 2
  %86 = load i64, i64* %xpv_cur81, align 8
  %add.ptr82 = getelementptr inbounds i8, i8* %82, i64 %86
  store i8 0, i8* %add.ptr82, align 1
  %87 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags83 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %88, 2147418367
  store i32 %and84, i32* %sv_flags83, align 4
  %89 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags85 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags85, align 4
  %or = or i32 %90, 17408
  store i32 %or, i32* %sv_flags85, align 4
  br label %do.body86

do.body86:                                        ; preds = %if.end77
  %91 = load i8, i8* @PL_tainting, align 1
  %tobool87 = trunc i8 %91 to i1
  br i1 %tobool87, label %cond.true88, label %cond.false89

cond.true88:                                      ; preds = %do.body86
  br i1 true, label %if.then90, label %if.end103

cond.false89:                                     ; preds = %do.body86
  br i1 false, label %if.then90, label %if.end103

if.then90:                                        ; preds = %cond.false89, %cond.true88
  %92 = load i8, i8* @PL_tainted, align 1
  %tobool91 = trunc i8 %92 to i1
  br i1 %tobool91, label %cond.true92, label %cond.false93

cond.true92:                                      ; preds = %if.then90
  br i1 true, label %if.then94, label %if.end102

cond.false93:                                     ; preds = %if.then90
  br i1 false, label %if.then94, label %if.end102

if.then94:                                        ; preds = %cond.false93, %cond.true92
  br label %do.body95

do.body95:                                        ; preds = %if.then94
  %93 = load i8, i8* @PL_tainting, align 1
  %tobool96 = trunc i8 %93 to i1
  br i1 %tobool96, label %cond.true97, label %cond.false98

cond.true97:                                      ; preds = %do.body95
  br i1 true, label %if.then99, label %if.end100

cond.false98:                                     ; preds = %do.body95
  br i1 false, label %if.then99, label %if.end100

if.then99:                                        ; preds = %cond.false98, %cond.true97
  %94 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %94, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end100

if.end100:                                        ; preds = %if.then99, %cond.false98, %cond.true97
  br label %do.end101

do.end101:                                        ; preds = %if.end100
  br label %if.end102

if.end102:                                        ; preds = %do.end101, %cond.false93, %cond.true92
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %cond.false89, %cond.true88
  br label %do.end104

do.end104:                                        ; preds = %if.end103
  %95 = load i32, i32* %flags.addr, align 4
  %and105 = and i32 %95, 128
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %if.then107, label %if.end118

if.then107:                                       ; preds = %do.end104
  br label %do.body108

do.body108:                                       ; preds = %if.then107
  %96 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags109 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 2
  %97 = load i32, i32* %sv_flags109, align 4
  %and110 = and i32 %97, 4194304
  %tobool111 = icmp ne i32 %and110, 0
  br i1 %tobool111, label %cond.true112, label %cond.false113

cond.true112:                                     ; preds = %do.body108
  br i1 true, label %if.then114, label %if.end116

cond.false113:                                    ; preds = %do.body108
  br i1 false, label %if.then114, label %if.end116

if.then114:                                       ; preds = %cond.false113, %cond.true112
  %98 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %call115 = call i32 @Perl_mg_set(%struct.sv* %98)
  br label %if.end116

if.end116:                                        ; preds = %if.then114, %cond.false113, %cond.true112
  br label %do.end117

do.end117:                                        ; preds = %if.end116
  br label %if.end118

if.end118:                                        ; preds = %do.end117, %do.end104
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_catsv_flags(%struct.sv* %dsv, %struct.sv* %ssv, i32 %flags) #0 {
entry:
  %dsv.addr = alloca %struct.sv*, align 8
  %ssv.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %slen = alloca i64, align 8
  %spv = alloca i8*, align 8
  store %struct.sv* %dsv, %struct.sv** %dsv.addr, align 8
  store %struct.sv* %ssv, %struct.sv** %ssv.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.end32

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 2
  %6 = load i64, i64* %xpv_cur, align 8
  store i64 %6, i64* %slen, align 8
  %7 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %8 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 0
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %9 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %10 = load i32, i32* %flags.addr, align 4
  %or = or i32 %10, 32
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %9, i64* %slen, i32 %or)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %spv, align 8
  %11 = load i32, i32* %flags.addr, align 4
  %and1 = and i32 %11, 2
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then3, label %if.end

if.then3:                                         ; preds = %cond.end
  %12 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %13, 2097152
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %if.then3
  br i1 true, label %land.rhs, label %land.end

cond.false8:                                      ; preds = %if.then3
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false8, %cond.true7
  %14 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %call9 = call i32 @Perl_mg_get(%struct.sv* %14)
  %tobool10 = icmp ne i32 %call9, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false8, %cond.true7
  %15 = phi i1 [ false, %cond.false8 ], [ false, %cond.true7 ], [ %tobool10, %land.rhs ]
  %land.ext = zext i1 %15 to i32
  br label %if.end

if.end:                                           ; preds = %land.end, %cond.end
  %16 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %17 = load i8*, i8** %spv, align 8
  %18 = load i64, i64* %slen, align 8
  %19 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %20, 536870912
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %land.rhs14, label %land.end17

land.rhs14:                                       ; preds = %if.end
  %21 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %21, i32 0, i32 10
  %22 = load i32, i32* %cop_hints, align 8
  %add = add i32 %22, 0
  %and15 = and i32 %add, 8
  %tobool16 = icmp ne i32 %and15, 0
  %lnot = xor i1 %tobool16, true
  br label %land.end17

land.end17:                                       ; preds = %land.rhs14, %if.end
  %23 = phi i1 [ false, %if.end ], [ %lnot, %land.rhs14 ]
  %24 = zext i1 %23 to i64
  %cond19 = select i1 %23, i32 32768, i32 16384
  call void @Perl_sv_catpvn_flags(%struct.sv* %16, i8* %17, i64 %18, i32 %cond19)
  %25 = load i32, i32* %flags.addr, align 4
  %and20 = and i32 %25, 128
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then22, label %if.end31

if.then22:                                        ; preds = %land.end17
  br label %do.body

do.body:                                          ; preds = %if.then22
  %26 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %27, 4194304
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %cond.true26, label %cond.false27

cond.true26:                                      ; preds = %do.body
  br i1 true, label %if.then28, label %if.end30

cond.false27:                                     ; preds = %do.body
  br i1 false, label %if.then28, label %if.end30

if.then28:                                        ; preds = %cond.false27, %cond.true26
  %28 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %call29 = call i32 @Perl_mg_set(%struct.sv* %28)
  br label %if.end30

if.end30:                                         ; preds = %if.then28, %cond.false27, %cond.true26
  br label %do.end

do.end:                                           ; preds = %if.end30
  br label %if.end31

if.end31:                                         ; preds = %do.end, %land.end17
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_catpv(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  %len = alloca i64, align 8
  %tlen = alloca i64, align 8
  %junk = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %do.end52

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 430018304
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 2
  %6 = load i64, i64* %xpv_cur, align 8
  store i64 %6, i64* %tlen, align 8
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %8 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %9, i64* %tlen, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %8, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %junk, align 8
  %10 = load i8*, i8** %ptr.addr, align 8
  %call1 = call i64 @strlen(i8* %10) #8
  store i64 %call1, i64* %len, align 8
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %12, 268435456
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any5 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any5, align 8
  %15 = bitcast i8* %14 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %15, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %16 = load i64, i64* %xpvlenu_len, align 8
  %17 = load i64, i64* %tlen, align 8
  %18 = load i64, i64* %len, align 8
  %add = add i64 %17, %18
  %add6 = add i64 %add, 1
  %cmp7 = icmp ult i64 %16, %add6
  br i1 %cmp7, label %cond.true8, label %cond.false12

cond.true8:                                       ; preds = %lor.lhs.false, %cond.end
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %20 = load i64, i64* %tlen, align 8
  %21 = load i64, i64* %len, align 8
  %add9 = add i64 %20, %21
  %add10 = add i64 %add9, 1
  %call11 = call i8* @Perl_sv_grow(%struct.sv* %19, i64 %add10)
  br label %cond.end15

cond.false12:                                     ; preds = %lor.lhs.false
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u13 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_pv14 = bitcast %union.anon* %sv_u13 to i8**
  %23 = load i8*, i8** %svu_pv14, align 8
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false12, %cond.true8
  %cond16 = phi i8* [ %call11, %cond.true8 ], [ %23, %cond.false12 ]
  %24 = load i8*, i8** %ptr.addr, align 8
  %25 = load i8*, i8** %junk, align 8
  %cmp17 = icmp eq i8* %24, %25
  br i1 %cmp17, label %if.then18, label %if.end21

if.then18:                                        ; preds = %cond.end15
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u19 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 3
  %svu_pv20 = bitcast %union.anon* %sv_u19 to i8**
  %27 = load i8*, i8** %svu_pv20, align 8
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 0
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %cond.end15
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u22 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 3
  %svu_pv23 = bitcast %union.anon* %sv_u22 to i8**
  %29 = load i8*, i8** %svu_pv23, align 8
  %30 = load i64, i64* %tlen, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %29, i64 %30
  %31 = load i8*, i8** %ptr.addr, align 8
  %32 = load i64, i64* %len, align 8
  %add25 = add i64 %32, 1
  %mul = mul i64 %add25, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr24, i8* align 1 %31, i64 %mul, i1 false)
  br label %do.body

do.body:                                          ; preds = %if.end21
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any26 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any26, align 8
  %35 = bitcast i8* %34 to %struct.xpv*
  %xpv_cur27 = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 2
  %36 = load i64, i64* %xpv_cur27, align 8
  %37 = load i64, i64* %len, align 8
  %add28 = add i64 %36, %37
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any29 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any29, align 8
  %40 = bitcast i8* %39 to %struct.xpv*
  %xpv_cur30 = getelementptr inbounds %struct.xpv, %struct.xpv* %40, i32 0, i32 2
  store i64 %add28, i64* %xpv_cur30, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %42, 2147418367
  store i32 %and32, i32* %sv_flags31, align 4
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags33, align 4
  %or = or i32 %44, 17408
  store i32 %or, i32* %sv_flags33, align 4
  br label %do.body34

do.body34:                                        ; preds = %do.end
  %45 = load i8, i8* @PL_tainting, align 1
  %tobool35 = trunc i8 %45 to i1
  br i1 %tobool35, label %cond.true36, label %cond.false37

cond.true36:                                      ; preds = %do.body34
  br i1 true, label %if.then38, label %if.end51

cond.false37:                                     ; preds = %do.body34
  br i1 false, label %if.then38, label %if.end51

if.then38:                                        ; preds = %cond.false37, %cond.true36
  %46 = load i8, i8* @PL_tainted, align 1
  %tobool39 = trunc i8 %46 to i1
  br i1 %tobool39, label %cond.true40, label %cond.false41

cond.true40:                                      ; preds = %if.then38
  br i1 true, label %if.then42, label %if.end50

cond.false41:                                     ; preds = %if.then38
  br i1 false, label %if.then42, label %if.end50

if.then42:                                        ; preds = %cond.false41, %cond.true40
  br label %do.body43

do.body43:                                        ; preds = %if.then42
  %47 = load i8, i8* @PL_tainting, align 1
  %tobool44 = trunc i8 %47 to i1
  br i1 %tobool44, label %cond.true45, label %cond.false46

cond.true45:                                      ; preds = %do.body43
  br i1 true, label %if.then47, label %if.end48

cond.false46:                                     ; preds = %do.body43
  br i1 false, label %if.then47, label %if.end48

if.then47:                                        ; preds = %cond.false46, %cond.true45
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %48, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end48

if.end48:                                         ; preds = %if.then47, %cond.false46, %cond.true45
  br label %do.end49

do.end49:                                         ; preds = %if.end48
  br label %if.end50

if.end50:                                         ; preds = %do.end49, %cond.false41, %cond.true40
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %cond.false37, %cond.true36
  br label %do.end52

do.end52:                                         ; preds = %if.then, %if.end51
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_catpv_flags(%struct.sv* %dstr, i8* %sstr, i32 %flags) #0 {
entry:
  %dstr.addr = alloca %struct.sv*, align 8
  %sstr.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.sv* %dstr, %struct.sv** %dstr.addr, align 8
  store i8* %sstr, i8** %sstr.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %dstr.addr, align 8
  %1 = load i8*, i8** %sstr.addr, align 8
  %2 = load i8*, i8** %sstr.addr, align 8
  %call = call i64 @strlen(i8* %2) #8
  %3 = load i32, i32* %flags.addr, align 4
  call void @Perl_sv_catpvn_flags(%struct.sv* %0, i8* %1, i64 %call, i32 %3)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_catpv_mg(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %ptr.addr = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  call void @Perl_sv_catpv(%struct.sv* %0, i8* %1)
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSV(i64 %len) #0 {
entry:
  %len.addr = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  store i64 %len, i64* %len.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %if.end

if.else:                                          ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  store i8* null, i8** %sv_any2, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end3

do.end3:                                          ; preds = %if.end
  %9 = load i64, i64* %len.addr, align 8
  %tobool4 = icmp ne i64 %9, 0
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %do.end3
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  %11 = load i64, i64* %len.addr, align 8
  %add = add i64 %11, 1
  %call6 = call i8* @Perl_sv_grow(%struct.sv* %10, i64 %add)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %do.end3
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %12
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.magic* @Perl_sv_magicext(%struct.sv* %sv, %struct.sv* %obj, i32 %how, %struct.mgvtbl* %vtable, i8* %name, i32 %namlen) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %obj.addr = alloca %struct.sv*, align 8
  %how.addr = alloca i32, align 4
  %vtable.addr = alloca %struct.mgvtbl*, align 8
  %name.addr = alloca i8*, align 8
  %namlen.addr = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.sv* %obj, %struct.sv** %obj.addr, align 8
  store i32 %how, i32* %how.addr, align 4
  store %struct.mgvtbl* %vtable, %struct.mgvtbl** %vtable.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i32 %namlen, i32* %namlen.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp uge i32 %and, 7
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %2, i32 7)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32
  %call = call i8* @Perl_safesyscalloc(i64 1, i64 48)
  %4 = bitcast i8* %call to %struct.magic*
  store %struct.magic* %4, %struct.magic** %mg, align 8
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %7, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %8 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %9 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_moremagic = getelementptr inbounds %struct.magic, %struct.magic* %9, i32 0, i32 0
  store %struct.magic* %8, %struct.magic** %mg_moremagic, align 8
  br label %do.body

do.body:                                          ; preds = %lor.end
  %10 = load %struct.magic*, %struct.magic** %mg, align 8
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any1, align 8
  %13 = bitcast i8* %12 to %struct.xpvmg*
  %xmg_u2 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %13, i32 0, i32 1
  %xmg_magic3 = bitcast %union._xmgu* %xmg_u2 to %struct.magic**
  store %struct.magic* %10, %struct.magic** %xmg_magic3, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %14 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %tobool = icmp ne %struct.sv* %14, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %do.end
  %15 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp4 = icmp eq %struct.sv* %15, %16
  br i1 %cmp4, label %if.then, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %17 = load i32, i32* %how.addr, align 4
  %cmp6 = icmp eq i32 %17, 35
  br i1 %cmp6, label %if.then, label %lor.lhs.false7

lor.lhs.false7:                                   ; preds = %lor.lhs.false5
  %18 = load i32, i32* %how.addr, align 4
  %cmp8 = icmp eq i32 %18, 58
  br i1 %cmp8, label %if.then, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %lor.lhs.false7
  %19 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %20, 255
  %cmp12 = icmp eq i32 %and11, 9
  br i1 %cmp12, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false9
  %21 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 3
  %svu_gp = bitcast %union.anon* %sv_u to %struct.gp**
  %22 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %22, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %23 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp13 = icmp eq %struct.sv* %23, %24
  br i1 %cmp13, label %if.then, label %lor.lhs.false14

lor.lhs.false14:                                  ; preds = %land.lhs.true
  %25 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_u15 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 3
  %svu_gp16 = bitcast %union.anon* %sv_u15 to %struct.gp**
  %26 = load %struct.gp*, %struct.gp** %svu_gp16, align 8
  %add.ptr17 = getelementptr inbounds %struct.gp, %struct.gp* %26, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr17, i32 0, i32 5
  %27 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %29 = bitcast %struct.sv* %28 to %struct.hv*
  %cmp18 = icmp eq %struct.hv* %27, %29
  br i1 %cmp18, label %if.then, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %lor.lhs.false14
  %30 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_u20 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 3
  %svu_gp21 = bitcast %union.anon* %sv_u20 to %struct.gp**
  %31 = load %struct.gp*, %struct.gp** %svu_gp21, align 8
  %add.ptr22 = getelementptr inbounds %struct.gp, %struct.gp* %31, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr22, i32 0, i32 6
  %32 = load %struct.av*, %struct.av** %gp_av, align 8
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %34 = bitcast %struct.sv* %33 to %struct.av*
  %cmp23 = icmp eq %struct.av* %32, %34
  br i1 %cmp23, label %if.then, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false19
  %35 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_u25 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 3
  %svu_gp26 = bitcast %union.anon* %sv_u25 to %struct.gp**
  %36 = load %struct.gp*, %struct.gp** %svu_gp26, align 8
  %add.ptr27 = getelementptr inbounds %struct.gp, %struct.gp* %36, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr27, i32 0, i32 2
  %37 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr28 = getelementptr inbounds %struct.cv, %struct.cv* %37, i64 0
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %39 = bitcast %struct.sv* %38 to %struct.cv*
  %cmp29 = icmp eq %struct.cv* %add.ptr28, %39
  br i1 %cmp29, label %if.then, label %lor.lhs.false30

lor.lhs.false30:                                  ; preds = %lor.lhs.false24
  %40 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_u31 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 3
  %svu_gp32 = bitcast %union.anon* %sv_u31 to %struct.gp**
  %41 = load %struct.gp*, %struct.gp** %svu_gp32, align 8
  %add.ptr33 = getelementptr inbounds %struct.gp, %struct.gp* %41, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr33, i32 0, i32 1
  %42 = load %struct.io*, %struct.io** %gp_io, align 8
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %44 = bitcast %struct.sv* %43 to %struct.io*
  %cmp34 = icmp eq %struct.io* %42, %44
  br i1 %cmp34, label %if.then, label %lor.lhs.false35

lor.lhs.false35:                                  ; preds = %lor.lhs.false30
  %45 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_u36 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 3
  %svu_gp37 = bitcast %union.anon* %sv_u36 to %struct.gp**
  %46 = load %struct.gp*, %struct.gp** %svu_gp37, align 8
  %add.ptr38 = getelementptr inbounds %struct.gp, %struct.gp* %46, i64 0
  %gp_form = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr38, i32 0, i32 7
  %47 = load %struct.cv*, %struct.cv** %gp_form, align 8
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %49 = bitcast %struct.sv* %48 to %struct.cv*
  %cmp39 = icmp eq %struct.cv* %47, %49
  br i1 %cmp39, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false35, %lor.lhs.false30, %lor.lhs.false24, %lor.lhs.false19, %lor.lhs.false14, %land.lhs.true, %lor.lhs.false7, %lor.lhs.false5, %lor.lhs.false, %do.end
  %50 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %51 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %51, i32 0, i32 6
  store %struct.sv* %50, %struct.sv** %mg_obj, align 8
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false35, %lor.lhs.false9
  %52 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %53 = bitcast %struct.sv* %52 to i8*
  %54 = bitcast i8* %53 to %struct.sv*
  %call40 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %54)
  %55 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj41 = getelementptr inbounds %struct.magic, %struct.magic* %55, i32 0, i32 6
  store %struct.sv* %call40, %struct.sv** %mg_obj41, align 8
  %56 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %56, i32 0, i32 4
  %57 = load i8, i8* %mg_flags, align 1
  %conv = zext i8 %57 to i32
  %or = or i32 %conv, 2
  %conv42 = trunc i32 %or to i8
  store i8 %conv42, i8* %mg_flags, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %58 = load i32, i32* %how.addr, align 4
  %cmp43 = icmp eq i32 %58, 113
  br i1 %cmp43, label %land.lhs.true45, label %if.end90

land.lhs.true45:                                  ; preds = %if.end
  %59 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %60, 255
  %cmp48 = icmp eq i32 %and47, 15
  br i1 %cmp48, label %land.lhs.true50, label %if.end90

land.lhs.true50:                                  ; preds = %land.lhs.true45
  %61 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %tobool51 = icmp ne %struct.sv* %61, null
  br i1 %tobool51, label %land.lhs.true52, label %if.end90

land.lhs.true52:                                  ; preds = %land.lhs.true50
  %62 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %63, 2048
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %land.lhs.true56, label %if.end90

land.lhs.true56:                                  ; preds = %land.lhs.true52
  %64 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_u57 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u57 to %struct.sv**
  %65 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %tobool58 = icmp ne %struct.sv* %65, null
  br i1 %tobool58, label %land.lhs.true59, label %cond.false

land.lhs.true59:                                  ; preds = %land.lhs.true56
  %66 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_u60 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 3
  %svu_rv61 = bitcast %union.anon* %sv_u60 to %struct.sv**
  %67 = load %struct.sv*, %struct.sv** %svu_rv61, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %68, 255
  %cmp64 = icmp eq i32 %and63, 9
  br i1 %cmp64, label %land.lhs.true73, label %lor.lhs.false66

lor.lhs.false66:                                  ; preds = %land.lhs.true59
  %69 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_u67 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 3
  %svu_rv68 = bitcast %union.anon* %sv_u67 to %struct.sv**
  %70 = load %struct.sv*, %struct.sv** %svu_rv68, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %71, 255
  %cmp71 = icmp eq i32 %and70, 10
  br i1 %cmp71, label %land.lhs.true73, label %cond.false

land.lhs.true73:                                  ; preds = %lor.lhs.false66, %land.lhs.true59
  %72 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_u74 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 3
  %svu_rv75 = bitcast %union.anon* %sv_u74 to %struct.sv**
  %73 = load %struct.sv*, %struct.sv** %svu_rv75, align 8
  %sv_u76 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 3
  %svu_gp77 = bitcast %union.anon* %sv_u76 to %struct.gp**
  %74 = load %struct.gp*, %struct.gp** %svu_gp77, align 8
  %add.ptr78 = getelementptr inbounds %struct.gp, %struct.gp* %74, i64 0
  %tobool79 = icmp ne %struct.gp* %add.ptr78, null
  br i1 %tobool79, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true73
  %75 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %sv_u80 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 3
  %svu_rv81 = bitcast %union.anon* %sv_u80 to %struct.sv**
  %76 = load %struct.sv*, %struct.sv** %svu_rv81, align 8
  %sv_u82 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 3
  %svu_gp83 = bitcast %union.anon* %sv_u82 to %struct.gp**
  %77 = load %struct.gp*, %struct.gp** %svu_gp83, align 8
  %add.ptr84 = getelementptr inbounds %struct.gp, %struct.gp* %77, i64 0
  %gp_io85 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr84, i32 0, i32 1
  %78 = load %struct.io*, %struct.io** %gp_io85, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true73, %lor.lhs.false66, %land.lhs.true56
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.io* [ %78, %cond.true ], [ null, %cond.false ]
  %79 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %80 = bitcast %struct.sv* %79 to %struct.io*
  %cmp86 = icmp eq %struct.io* %cond, %80
  br i1 %cmp86, label %if.then88, label %if.end90

if.then88:                                        ; preds = %cond.end
  %81 = load %struct.sv*, %struct.sv** %obj.addr, align 8
  %call89 = call %struct.sv* @Perl_sv_rvweaken(%struct.sv* %81)
  br label %if.end90

if.end90:                                         ; preds = %if.then88, %cond.end, %land.lhs.true52, %land.lhs.true50, %land.lhs.true45, %if.end
  %82 = load i32, i32* %how.addr, align 4
  %conv91 = trunc i32 %82 to i8
  %83 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_type = getelementptr inbounds %struct.magic, %struct.magic* %83, i32 0, i32 3
  store i8 %conv91, i8* %mg_type, align 2
  %84 = load i32, i32* %namlen.addr, align 4
  %conv92 = sext i32 %84 to i64
  %85 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %85, i32 0, i32 5
  store i64 %conv92, i64* %mg_len, align 8
  %86 = load i8*, i8** %name.addr, align 8
  %tobool93 = icmp ne i8* %86, null
  br i1 %tobool93, label %if.then94, label %if.end108

if.then94:                                        ; preds = %if.end90
  %87 = load i32, i32* %namlen.addr, align 4
  %cmp95 = icmp sgt i32 %87, 0
  br i1 %cmp95, label %if.then97, label %if.else99

if.then97:                                        ; preds = %if.then94
  %88 = load i8*, i8** %name.addr, align 8
  %89 = load i32, i32* %namlen.addr, align 4
  %call98 = call i8* @Perl_savepvn(i8* %88, i32 %89)
  %90 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %90, i32 0, i32 7
  store i8* %call98, i8** %mg_ptr, align 8
  br label %if.end107

if.else99:                                        ; preds = %if.then94
  %91 = load i32, i32* %namlen.addr, align 4
  %cmp100 = icmp eq i32 %91, -2
  br i1 %cmp100, label %if.then102, label %if.else104

if.then102:                                       ; preds = %if.else99
  %92 = load i8*, i8** %name.addr, align 8
  %93 = bitcast i8* %92 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 1
  %94 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %94, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %95 = load i8*, i8** %name.addr, align 8
  %96 = bitcast i8* %95 to %struct.sv*
  %97 = bitcast %struct.sv* %96 to i8*
  %98 = bitcast i8* %97 to %struct.sv*
  %99 = bitcast %struct.sv* %98 to i8*
  %100 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr103 = getelementptr inbounds %struct.magic, %struct.magic* %100, i32 0, i32 7
  store i8* %99, i8** %mg_ptr103, align 8
  br label %if.end106

if.else104:                                       ; preds = %if.else99
  %101 = load i8*, i8** %name.addr, align 8
  %102 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr105 = getelementptr inbounds %struct.magic, %struct.magic* %102, i32 0, i32 7
  store i8* %101, i8** %mg_ptr105, align 8
  br label %if.end106

if.end106:                                        ; preds = %if.else104, %if.then102
  br label %if.end107

if.end107:                                        ; preds = %if.end106, %if.then97
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %if.end90
  %103 = load %struct.mgvtbl*, %struct.mgvtbl** %vtable.addr, align 8
  %104 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_virtual = getelementptr inbounds %struct.magic, %struct.magic* %104, i32 0, i32 1
  store %struct.mgvtbl* %103, %struct.mgvtbl** %mg_virtual, align 8
  %105 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_mg_magical(%struct.sv* %105)
  %106 = load %struct.magic*, %struct.magic** %mg, align 8
  ret %struct.magic* %106
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_rvweaken(%struct.sv* %sv) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %tsv = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 65280
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 255
  %cmp = icmp eq i32 %and2, 8
  br i1 %cmp, label %if.end, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %5, 16826623
  %cmp6 = icmp eq i32 %and5, 16777226
  br i1 %cmp6, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false3
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %6, %struct.sv** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %8, 2048
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.else, label %if.then10

if.then10:                                        ; preds = %if.end
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.25, i64 0, i64 0))
  br label %if.end22

if.else:                                          ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %10, -2147481600
  %cmp13 = icmp eq i32 %and12, -2147481600
  br i1 %cmp13, label %if.then14, label %if.else15

if.then14:                                        ; preds = %if.else
  call void (i32, i8*, ...) @Perl_ck_warner(i32 12, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.26, i64 0, i64 0))
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %11, %struct.sv** %retval, align 8
  br label %return

if.else15:                                        ; preds = %if.else
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %13, 134283264
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.else15
  call void @Perl_croak_no_modify()
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.else15
  br label %if.end21

if.end21:                                         ; preds = %if.end20
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then10
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %15 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %15, %struct.sv** %tsv, align 8
  %16 = load %struct.sv*, %struct.sv** %tsv, align 8
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_add_backref(%struct.sv* %16, %struct.sv* %17)
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags23, align 4
  %or = or i32 %19, -2147481600
  store i32 %or, i32* %sv_flags23, align 4
  %20 = load %struct.sv*, %struct.sv** %tsv, align 8
  %21 = bitcast %struct.sv* %20 to i8*
  %22 = bitcast i8* %21 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %22)
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %23, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end22, %if.then14, %if.then
  %24 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %24
}

declare dso_local void @Perl_mg_magical(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.magic* @Perl_sv_magicext_mglob(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp eq i32 %and, 10
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %4, i32 0, i32 9
  %5 = load i8, i8* %xlv_type, align 8
  %conv = sext i8 %5 to i32
  %cmp1 = icmp eq i32 %conv, 121
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_vivify_defelem(%struct.sv* %6)
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any3, align 8
  %9 = bitcast i8* %8 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %9, i32 0, i32 8
  %10 = load %struct.sv*, %struct.sv** %xlv_targ, align 8
  store %struct.sv* %10, %struct.sv** %sv.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.magic* @Perl_sv_magicext(%struct.sv* %11, %struct.sv* null, i32 103, %struct.mgvtbl* getelementptr inbounds ([31 x %struct.mgvtbl], [31 x %struct.mgvtbl]* @PL_magic_vtables, i64 0, i64 15), i8* null, i32 0)
  ret %struct.magic* %call
}

declare dso_local void @Perl_vivify_defelem(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_sv_unmagicext_flags(%struct.sv* %sv, i32 %type, %struct.mgvtbl* %vtbl, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  %type.addr = alloca i32, align 4
  %vtbl.addr = alloca %struct.mgvtbl*, align 8
  %flags.addr = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %mgp = alloca %struct.magic**, align 8
  %virt = alloca %struct.mgvtbl*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.mgvtbl* %vtbl, %struct.mgvtbl** %vtbl.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp ult i32 %and, 7
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %4, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %5 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool = icmp ne %struct.magic* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any1, align 8
  %8 = bitcast i8* %7 to %struct.xpvmg*
  %xmg_u2 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %8, i32 0, i32 1
  %xmg_magic3 = bitcast %union._xmgu* %xmg_u2 to %struct.magic**
  store %struct.magic** %xmg_magic3, %struct.magic*** %mgp, align 8
  %9 = load %struct.magic**, %struct.magic*** %mgp, align 8
  %10 = load %struct.magic*, %struct.magic** %9, align 8
  store %struct.magic* %10, %struct.magic** %mg, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool4 = icmp ne %struct.magic* %11, null
  br i1 %tobool4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_virtual = getelementptr inbounds %struct.magic, %struct.magic* %12, i32 0, i32 1
  %13 = load %struct.mgvtbl*, %struct.mgvtbl** %mg_virtual, align 8
  store %struct.mgvtbl* %13, %struct.mgvtbl** %virt, align 8
  %14 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_type = getelementptr inbounds %struct.magic, %struct.magic* %14, i32 0, i32 3
  %15 = load i8, i8* %mg_type, align 2
  %conv = sext i8 %15 to i32
  %16 = load i32, i32* %type.addr, align 4
  %cmp5 = icmp eq i32 %conv, %16
  br i1 %cmp5, label %land.lhs.true, label %if.else50

land.lhs.true:                                    ; preds = %for.body
  %17 = load i32, i32* %flags.addr, align 4
  %tobool7 = icmp ne i32 %17, 0
  br i1 %tobool7, label %lor.lhs.false8, label %if.then11

lor.lhs.false8:                                   ; preds = %land.lhs.true
  %18 = load %struct.mgvtbl*, %struct.mgvtbl** %virt, align 8
  %19 = load %struct.mgvtbl*, %struct.mgvtbl** %vtbl.addr, align 8
  %cmp9 = icmp eq %struct.mgvtbl* %18, %19
  br i1 %cmp9, label %if.then11, label %if.else50

if.then11:                                        ; preds = %lor.lhs.false8, %land.lhs.true
  %20 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_moremagic = getelementptr inbounds %struct.magic, %struct.magic* %20, i32 0, i32 0
  %21 = load %struct.magic*, %struct.magic** %mg_moremagic, align 8
  %22 = load %struct.magic**, %struct.magic*** %mgp, align 8
  store %struct.magic* %21, %struct.magic** %22, align 8
  %23 = load %struct.mgvtbl*, %struct.mgvtbl** %virt, align 8
  %tobool12 = icmp ne %struct.mgvtbl* %23, null
  br i1 %tobool12, label %land.lhs.true13, label %if.end17

land.lhs.true13:                                  ; preds = %if.then11
  %24 = load %struct.mgvtbl*, %struct.mgvtbl** %virt, align 8
  %svt_free = getelementptr inbounds %struct.mgvtbl, %struct.mgvtbl* %24, i32 0, i32 4
  %25 = load i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)** %svt_free, align 8
  %tobool14 = icmp ne i32 (%struct.sv*, %struct.magic*)* %25, null
  br i1 %tobool14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %land.lhs.true13
  %26 = load %struct.mgvtbl*, %struct.mgvtbl** %virt, align 8
  %svt_free16 = getelementptr inbounds %struct.mgvtbl, %struct.mgvtbl* %26, i32 0, i32 4
  %27 = load i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)** %svt_free16, align 8
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %29 = load %struct.magic*, %struct.magic** %mg, align 8
  %call = call i32 %27(%struct.sv* %28, %struct.magic* %29)
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %land.lhs.true13, %if.then11
  %30 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %30, i32 0, i32 7
  %31 = load i8*, i8** %mg_ptr, align 8
  %tobool18 = icmp ne i8* %31, null
  br i1 %tobool18, label %land.lhs.true19, label %if.end44

land.lhs.true19:                                  ; preds = %if.end17
  %32 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_type20 = getelementptr inbounds %struct.magic, %struct.magic* %32, i32 0, i32 3
  %33 = load i8, i8* %mg_type20, align 2
  %conv21 = sext i8 %33 to i32
  %cmp22 = icmp ne i32 %conv21, 103
  br i1 %cmp22, label %if.then24, label %if.end44

if.then24:                                        ; preds = %land.lhs.true19
  %34 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %34, i32 0, i32 5
  %35 = load i64, i64* %mg_len, align 8
  %cmp25 = icmp sgt i64 %35, 0
  br i1 %cmp25, label %if.then27, label %if.else

if.then27:                                        ; preds = %if.then24
  %36 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr28 = getelementptr inbounds %struct.magic, %struct.magic* %36, i32 0, i32 7
  %37 = load i8*, i8** %mg_ptr28, align 8
  call void @Perl_safesysfree(i8* %37)
  br label %if.end43

if.else:                                          ; preds = %if.then24
  %38 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len29 = getelementptr inbounds %struct.magic, %struct.magic* %38, i32 0, i32 5
  %39 = load i64, i64* %mg_len29, align 8
  %cmp30 = icmp eq i64 %39, -2
  br i1 %cmp30, label %if.then32, label %if.else34

if.then32:                                        ; preds = %if.else
  %40 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr33 = getelementptr inbounds %struct.magic, %struct.magic* %40, i32 0, i32 7
  %41 = load i8*, i8** %mg_ptr33, align 8
  %42 = bitcast i8* %41 to %struct.sv*
  %43 = bitcast %struct.sv* %42 to i8*
  %44 = bitcast i8* %43 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %44)
  br label %if.end42

if.else34:                                        ; preds = %if.else
  %45 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_type35 = getelementptr inbounds %struct.magic, %struct.magic* %45, i32 0, i32 3
  %46 = load i8, i8* %mg_type35, align 2
  %conv36 = sext i8 %46 to i32
  %cmp37 = icmp eq i32 %conv36, 119
  br i1 %cmp37, label %if.then39, label %if.end41

if.then39:                                        ; preds = %if.else34
  %47 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr40 = getelementptr inbounds %struct.magic, %struct.magic* %47, i32 0, i32 7
  %48 = load i8*, i8** %mg_ptr40, align 8
  call void @Perl_safesysfree(i8* %48)
  br label %if.end41

if.end41:                                         ; preds = %if.then39, %if.else34
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then32
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then27
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %land.lhs.true19, %if.end17
  %49 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %49, i32 0, i32 4
  %50 = load i8, i8* %mg_flags, align 1
  %conv45 = zext i8 %50 to i32
  %and46 = and i32 %conv45, 2
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.end44
  %51 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %51, i32 0, i32 6
  %52 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %53 = bitcast %struct.sv* %52 to i8*
  %54 = bitcast i8* %53 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %54)
  br label %if.end49

if.end49:                                         ; preds = %if.then48, %if.end44
  %55 = load %struct.magic*, %struct.magic** %mg, align 8
  %56 = bitcast %struct.magic* %55 to i8*
  call void @Perl_safesysfree(i8* %56)
  br label %if.end52

if.else50:                                        ; preds = %lor.lhs.false8, %for.body
  %57 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_moremagic51 = getelementptr inbounds %struct.magic, %struct.magic* %57, i32 0, i32 0
  store %struct.magic** %mg_moremagic51, %struct.magic*** %mgp, align 8
  br label %if.end52

if.end52:                                         ; preds = %if.else50, %if.end49
  br label %for.inc

for.inc:                                          ; preds = %if.end52
  %58 = load %struct.magic**, %struct.magic*** %mgp, align 8
  %59 = load %struct.magic*, %struct.magic** %58, align 8
  store %struct.magic* %59, %struct.magic** %mg, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any53, align 8
  %62 = bitcast i8* %61 to %struct.xpvmg*
  %xmg_u54 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %62, i32 0, i32 1
  %xmg_magic55 = bitcast %union._xmgu* %xmg_u54 to %struct.magic**
  %63 = load %struct.magic*, %struct.magic** %xmg_magic55, align 8
  %tobool56 = icmp ne %struct.magic* %63, null
  br i1 %tobool56, label %if.then57, label %if.else63

if.then57:                                        ; preds = %for.end
  %64 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags58, align 4
  %and59 = and i32 %65, 14680064
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %if.then61, label %if.end62

if.then61:                                        ; preds = %if.then57
  %66 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_mg_magical(%struct.sv* %66)
  br label %if.end62

if.end62:                                         ; preds = %if.then61, %if.then57
  br label %if.end69

if.else63:                                        ; preds = %for.end
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags64 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %68, -14680065
  store i32 %and65, i32* %sv_flags64, align 4
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %70, 28672
  %shr = lshr i32 %and67, 4
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags68 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags68, align 4
  %or = or i32 %72, %shr
  store i32 %or, i32* %sv_flags68, align 4
  br label %if.end69

if.end69:                                         ; preds = %if.else63, %if.end62
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end69, %if.then
  %73 = load i32, i32* %retval, align 4
  ret i32 %73
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_sv_unmagicext(%struct.sv* %sv, i32 %type, %struct.mgvtbl* %vtbl) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %type.addr = alloca i32, align 4
  %vtbl.addr = alloca %struct.mgvtbl*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.mgvtbl* %vtbl, %struct.mgvtbl** %vtbl.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i32, i32* %type.addr, align 4
  %2 = load %struct.mgvtbl*, %struct.mgvtbl** %vtbl.addr, align 8
  %call = call i32 @S_sv_unmagicext_flags(%struct.sv* %0, i32 %1, %struct.mgvtbl* %2, i32 1)
  ret i32 %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_add_backref(%struct.sv* %tsv, %struct.sv* %sv) #0 {
entry:
  %tsv.addr = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %svp = alloca %struct.sv**, align 8
  %av = alloca %struct.av*, align 8
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %tsv, %struct.sv** %tsv.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.av* null, %struct.av** %av, align 8
  store %struct.magic* null, %struct.magic** %mg, align 8
  %0 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp eq i32 %and, 12
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %4 = bitcast i8* %3 to %struct.hv*
  %call = call %struct.av** @Perl_hv_backreferences_p(%struct.hv* %4)
  %5 = bitcast %struct.av** %call to %struct.sv**
  store %struct.sv** %5, %struct.sv*** %svp, align 8
  br label %if.end9

if.else:                                          ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %7, 14680064
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %8 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %call4 = call %struct.magic* @Perl_mg_find(%struct.sv* %8, i32 60)
  store %struct.magic* %call4, %struct.magic** %mg, align 8
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.else
  %9 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool5 = icmp ne %struct.magic* %9, null
  br i1 %tobool5, label %if.end8, label %if.then6

if.then6:                                         ; preds = %if.end
  %10 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %call7 = call %struct.magic* @Perl_sv_magicext(%struct.sv* %10, %struct.sv* null, i32 60, %struct.mgvtbl* getelementptr inbounds ([31 x %struct.mgvtbl], [31 x %struct.mgvtbl]* @PL_magic_vtables, i64 0, i64 2), i8* null, i32 0)
  store %struct.magic* %call7, %struct.magic** %mg, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %11 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %11, i32 0, i32 6
  store %struct.sv** %mg_obj, %struct.sv*** %svp, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then
  %12 = load %struct.sv**, %struct.sv*** %svp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %tobool10 = icmp ne %struct.sv* %13, null
  br i1 %tobool10, label %lor.lhs.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end9
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %15, 255
  %cmp13 = icmp eq i32 %and12, 11
  br i1 %cmp13, label %if.then19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end9
  %16 = load %struct.sv**, %struct.sv*** %svp, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  %tobool14 = icmp ne %struct.sv* %17, null
  br i1 %tobool14, label %land.lhs.true15, label %if.else33

land.lhs.true15:                                  ; preds = %lor.lhs.false
  %18 = load %struct.sv**, %struct.sv*** %svp, align 8
  %19 = load %struct.sv*, %struct.sv** %18, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %20, 255
  %cmp18 = icmp ne i32 %and17, 11
  br i1 %cmp18, label %if.then19, label %if.else33

if.then19:                                        ; preds = %land.lhs.true15, %land.lhs.true
  %21 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool20 = icmp ne %struct.magic* %21, null
  br i1 %tobool20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.then19
  %22 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %22, i32 0, i32 4
  %23 = load i8, i8* %mg_flags, align 1
  %conv = zext i8 %23 to i32
  %or = or i32 %conv, 2
  %conv22 = trunc i32 %or to i8
  store i8 %conv22, i8* %mg_flags, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %if.then19
  %call24 = call %struct.sv* @Perl_newSV_type(i32 11)
  %24 = bitcast %struct.sv* %call24 to i8*
  %25 = bitcast i8* %24 to %struct.av*
  store %struct.av* %25, %struct.av** %av, align 8
  %26 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags25 = getelementptr inbounds %struct.av, %struct.av* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %27, -1073741825
  store i32 %and26, i32* %sv_flags25, align 4
  %28 = load %struct.av*, %struct.av** %av, align 8
  %29 = bitcast %struct.av* %28 to i8*
  %30 = bitcast i8* %29 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 1
  %31 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %31, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %32 = load %struct.av*, %struct.av** %av, align 8
  %33 = load %struct.sv**, %struct.sv*** %svp, align 8
  %34 = load %struct.sv*, %struct.sv** %33, align 8
  %tobool27 = icmp ne %struct.sv* %34, null
  %35 = zext i1 %tobool27 to i64
  %cond = select i1 %tobool27, i32 2, i32 1
  %conv28 = sext i32 %cond to i64
  call void @Perl_av_extend(%struct.av* %32, i64 %conv28)
  %36 = load %struct.sv**, %struct.sv*** %svp, align 8
  %37 = load %struct.sv*, %struct.sv** %36, align 8
  %tobool29 = icmp ne %struct.sv* %37, null
  br i1 %tobool29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end23
  %38 = load %struct.sv**, %struct.sv*** %svp, align 8
  %39 = load %struct.sv*, %struct.sv** %38, align 8
  %40 = load %struct.av*, %struct.av** %av, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %40, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u to %struct.sv***
  %41 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %42 = load %struct.av*, %struct.av** %av, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %42, i32 0, i32 0
  %43 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %43, i32 0, i32 2
  %44 = load i64, i64* %xav_fill, align 8
  %inc31 = add nsw i64 %44, 1
  store i64 %inc31, i64* %xav_fill, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %41, i64 %inc31
  store %struct.sv* %39, %struct.sv** %arrayidx, align 8
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end23
  %45 = load %struct.av*, %struct.av** %av, align 8
  %46 = bitcast %struct.av* %45 to %struct.sv*
  %47 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* %46, %struct.sv** %47, align 8
  br label %if.end46

if.else33:                                        ; preds = %land.lhs.true15, %lor.lhs.false
  %48 = load %struct.sv**, %struct.sv*** %svp, align 8
  %49 = load %struct.sv*, %struct.sv** %48, align 8
  %50 = bitcast %struct.sv* %49 to i8*
  %51 = bitcast i8* %50 to %struct.av*
  store %struct.av* %51, %struct.av** %av, align 8
  %52 = load %struct.av*, %struct.av** %av, align 8
  %tobool34 = icmp ne %struct.av* %52, null
  br i1 %tobool34, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.else33
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %54 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* %53, %struct.sv** %54, align 8
  br label %return

if.end36:                                         ; preds = %if.else33
  %55 = load %struct.av*, %struct.av** %av, align 8
  %sv_any37 = getelementptr inbounds %struct.av, %struct.av* %55, i32 0, i32 0
  %56 = load %struct.xpvav*, %struct.xpvav** %sv_any37, align 8
  %xav_fill38 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %56, i32 0, i32 2
  %57 = load i64, i64* %xav_fill38, align 8
  %58 = load %struct.av*, %struct.av** %av, align 8
  %sv_any39 = getelementptr inbounds %struct.av, %struct.av* %58, i32 0, i32 0
  %59 = load %struct.xpvav*, %struct.xpvav** %sv_any39, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %59, i32 0, i32 3
  %60 = load i64, i64* %xav_max, align 8
  %cmp40 = icmp sge i64 %57, %60
  br i1 %cmp40, label %if.then42, label %if.end45

if.then42:                                        ; preds = %if.end36
  %61 = load %struct.av*, %struct.av** %av, align 8
  %62 = load %struct.av*, %struct.av** %av, align 8
  %sv_any43 = getelementptr inbounds %struct.av, %struct.av* %62, i32 0, i32 0
  %63 = load %struct.xpvav*, %struct.xpvav** %sv_any43, align 8
  %xav_fill44 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %63, i32 0, i32 2
  %64 = load i64, i64* %xav_fill44, align 8
  %add = add nsw i64 %64, 1
  call void @Perl_av_extend(%struct.av* %61, i64 %add)
  br label %if.end45

if.end45:                                         ; preds = %if.then42, %if.end36
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end32
  %65 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %66 = load %struct.av*, %struct.av** %av, align 8
  %sv_u47 = getelementptr inbounds %struct.av, %struct.av* %66, i32 0, i32 3
  %svu_array48 = bitcast %union.anon.3* %sv_u47 to %struct.sv***
  %67 = load %struct.sv**, %struct.sv*** %svu_array48, align 8
  %68 = load %struct.av*, %struct.av** %av, align 8
  %sv_any49 = getelementptr inbounds %struct.av, %struct.av* %68, i32 0, i32 0
  %69 = load %struct.xpvav*, %struct.xpvav** %sv_any49, align 8
  %xav_fill50 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %69, i32 0, i32 2
  %70 = load i64, i64* %xav_fill50, align 8
  %inc51 = add nsw i64 %70, 1
  store i64 %inc51, i64* %xav_fill50, align 8
  %arrayidx52 = getelementptr inbounds %struct.sv*, %struct.sv** %67, i64 %inc51
  store %struct.sv* %65, %struct.sv** %arrayidx52, align 8
  br label %return

return:                                           ; preds = %if.end46, %if.then35
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_get_backrefs(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %backrefs = alloca %struct.sv*, align 8
  %iter = alloca %struct.xpvhv_aux*, align 8
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.sv* null, %struct.sv** %backrefs, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp eq i32 %and, 12
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 33554432
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %5 = bitcast %struct.sv* %4 to %struct.hv*
  %sv_u = getelementptr inbounds %struct.hv, %struct.hv* %5, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u to %struct.he***
  %6 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %8 = bitcast %struct.sv* %7 to %struct.hv*
  %sv_any = getelementptr inbounds %struct.hv, %struct.hv* %8, i32 0, i32 0
  %9 = load %struct.xpvhv*, %struct.xpvhv** %sv_any, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %9, i32 0, i32 3
  %10 = load i64, i64* %xhv_max, align 8
  %add = add i64 %10, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %6, i64 %add
  %11 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  store %struct.xpvhv_aux* %11, %struct.xpvhv_aux** %iter, align 8
  %12 = load %struct.xpvhv_aux*, %struct.xpvhv_aux** %iter, align 8
  %xhv_backreferences = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %12, i32 0, i32 1
  %13 = load %struct.av*, %struct.av** %xhv_backreferences, align 8
  %14 = bitcast %struct.av* %13 to %struct.sv*
  store %struct.sv* %14, %struct.sv** %backrefs, align 8
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  br label %if.end12

if.else:                                          ; preds = %entry
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %16, 14680064
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.else
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %17, i32 60)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %18 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool8 = icmp ne %struct.magic* %18, null
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then7
  %19 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %19, i32 0, i32 6
  %20 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  store %struct.sv* %20, %struct.sv** %backrefs, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.then7
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.end
  %21 = load %struct.sv*, %struct.sv** %backrefs, align 8
  ret %struct.sv* %21
}

declare dso_local %struct.av** @Perl_hv_backreferences_p(%struct.hv*) #1

declare dso_local void @Perl_av_extend(%struct.av*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_del_backref(%struct.sv* %tsv, %struct.sv* %sv) #0 {
entry:
  %tsv.addr = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %svp = alloca %struct.sv**, align 8
  %mg = alloca %struct.magic*, align 8
  %av = alloca %struct.av*, align 8
  %fill = alloca i64, align 8
  %p = alloca %struct.sv**, align 8
  %topsv = alloca %struct.sv*, align 8
  store %struct.sv* %tsv, %struct.sv** %tsv.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.sv** null, %struct.sv*** %svp, align 8
  %0 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp eq i32 %and, 12
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 33554432
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %4 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %5 = bitcast %struct.sv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.hv*
  %call = call %struct.av** @Perl_hv_backreferences_p(%struct.hv* %6)
  %7 = bitcast %struct.av** %call to %struct.sv**
  store %struct.sv** %7, %struct.sv*** %svp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  br label %if.end21

if.else:                                          ; preds = %entry
  %8 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags4, align 4
  %cmp5 = icmp eq i32 %9, 255
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br i1 true, label %land.lhs.true, label %if.else8

cond.false:                                       ; preds = %if.else
  br i1 false, label %land.lhs.true, label %if.else8

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %10 = load i32, i32* @PL_phase, align 4
  %cmp6 = icmp eq i32 %10, 6
  br i1 %cmp6, label %if.then7, label %if.else8

if.then7:                                         ; preds = %land.lhs.true
  br label %if.end77

if.else8:                                         ; preds = %land.lhs.true, %cond.false, %cond.true
  %11 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %12, 14680064
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %cond.true12, label %cond.false14

cond.true12:                                      ; preds = %if.else8
  %13 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %call13 = call %struct.magic* @Perl_mg_find(%struct.sv* %13, i32 60)
  br label %cond.end

cond.false14:                                     ; preds = %if.else8
  br label %cond.end

cond.end:                                         ; preds = %cond.false14, %cond.true12
  %cond = phi %struct.magic* [ %call13, %cond.true12 ], [ null, %cond.false14 ]
  store %struct.magic* %cond, %struct.magic** %mg, align 8
  %14 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool15 = icmp ne %struct.magic* %14, null
  br i1 %tobool15, label %cond.true16, label %cond.false17

cond.true16:                                      ; preds = %cond.end
  %15 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %15, i32 0, i32 6
  br label %cond.end18

cond.false17:                                     ; preds = %cond.end
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi %struct.sv** [ %mg_obj, %cond.true16 ], [ null, %cond.false17 ]
  store %struct.sv** %cond19, %struct.sv*** %svp, align 8
  br label %if.end20

if.end20:                                         ; preds = %cond.end18
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.end
  %16 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool22 = icmp ne %struct.sv** %16, null
  br i1 %tobool22, label %if.end24, label %if.then23

if.then23:                                        ; preds = %if.end21
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.27, i64 0, i64 0))
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %17 = load %struct.sv**, %struct.sv*** %svp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %tobool25 = icmp ne %struct.sv* %18, null
  br i1 %tobool25, label %if.end33, label %if.then26

if.then26:                                        ; preds = %if.end24
  %19 = load i32, i32* @PL_phase, align 4
  %cmp27 = icmp eq i32 %19, 6
  br i1 %cmp27, label %land.lhs.true28, label %if.end31

land.lhs.true28:                                  ; preds = %if.then26
  %20 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 1
  %21 = load i32, i32* %sv_refcnt, align 8
  %cmp29 = icmp eq i32 %21, 0
  br i1 %cmp29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %land.lhs.true28
  br label %if.end77

if.end31:                                         ; preds = %land.lhs.true28, %if.then26
  %22 = load %struct.sv**, %struct.sv*** %svp, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  %24 = bitcast %struct.sv* %23 to i8*
  %25 = load i32, i32* @PL_phase, align 4
  %idxprom = zext i32 %25 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_phase_names, i64 0, i64 %idxprom
  %26 = load i8*, i8** %arrayidx, align 8
  %27 = load %struct.sv*, %struct.sv** %tsv.addr, align 8
  %sv_refcnt32 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 1
  %28 = load i32, i32* %sv_refcnt32, align 8
  %conv = zext i32 %28 to i64
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.28, i64 0, i64 0), i8* %24, i8* %26, i64 %conv)
  br label %if.end33

if.end33:                                         ; preds = %if.end31, %if.end24
  %29 = load %struct.sv**, %struct.sv*** %svp, align 8
  %30 = load %struct.sv*, %struct.sv** %29, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %31, 255
  %cmp36 = icmp eq i32 %and35, 11
  br i1 %cmp36, label %if.then38, label %if.else61

if.then38:                                        ; preds = %if.end33
  %32 = load %struct.sv**, %struct.sv*** %svp, align 8
  %33 = load %struct.sv*, %struct.sv** %32, align 8
  %34 = bitcast %struct.sv* %33 to %struct.av*
  store %struct.av* %34, %struct.av** %av, align 8
  %35 = load %struct.av*, %struct.av** %av, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %35, i32 0, i32 0
  %36 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %36, i32 0, i32 2
  %37 = load i64, i64* %xav_fill, align 8
  store i64 %37, i64* %fill, align 8
  %38 = load %struct.av*, %struct.av** %av, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %38, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u to %struct.sv***
  %39 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %39, %struct.sv*** %svp, align 8
  %40 = load %struct.sv**, %struct.sv*** %svp, align 8
  %41 = load %struct.sv*, %struct.sv** %40, align 8
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp39 = icmp eq %struct.sv* %41, %42
  br i1 %cmp39, label %if.then41, label %if.else45

if.then41:                                        ; preds = %if.then38
  %43 = load %struct.av*, %struct.av** %av, align 8
  %sv_u42 = getelementptr inbounds %struct.av, %struct.av* %43, i32 0, i32 3
  %svu_array43 = bitcast %union.anon.3* %sv_u42 to %struct.sv***
  %44 = load %struct.sv**, %struct.sv*** %svu_array43, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %44, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %svu_array43, align 8
  %45 = load %struct.av*, %struct.av** %av, align 8
  %sv_any44 = getelementptr inbounds %struct.av, %struct.av* %45, i32 0, i32 0
  %46 = load %struct.xpvav*, %struct.xpvav** %sv_any44, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %46, i32 0, i32 3
  %47 = load i64, i64* %xav_max, align 8
  %dec = add nsw i64 %47, -1
  store i64 %dec, i64* %xav_max, align 8
  br label %if.end58

if.else45:                                        ; preds = %if.then38
  %48 = load %struct.sv**, %struct.sv*** %svp, align 8
  %49 = load i64, i64* %fill, align 8
  %arrayidx46 = getelementptr inbounds %struct.sv*, %struct.sv** %48, i64 %49
  store %struct.sv** %arrayidx46, %struct.sv*** %p, align 8
  %50 = load %struct.sv**, %struct.sv*** %p, align 8
  %51 = load %struct.sv*, %struct.sv** %50, align 8
  store %struct.sv* %51, %struct.sv** %topsv, align 8
  %52 = load %struct.sv*, %struct.sv** %topsv, align 8
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp47 = icmp ne %struct.sv* %52, %53
  br i1 %cmp47, label %if.then49, label %if.end57

if.then49:                                        ; preds = %if.else45
  br label %while.cond

while.cond:                                       ; preds = %if.end56, %if.then49
  %54 = load %struct.sv**, %struct.sv*** %p, align 8
  %incdec.ptr50 = getelementptr inbounds %struct.sv*, %struct.sv** %54, i32 -1
  store %struct.sv** %incdec.ptr50, %struct.sv*** %p, align 8
  %55 = load %struct.sv**, %struct.sv*** %svp, align 8
  %cmp51 = icmp ugt %struct.sv** %incdec.ptr50, %55
  br i1 %cmp51, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %56 = load %struct.sv**, %struct.sv*** %p, align 8
  %57 = load %struct.sv*, %struct.sv** %56, align 8
  %58 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp53 = icmp eq %struct.sv* %57, %58
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %while.body
  %59 = load %struct.sv*, %struct.sv** %topsv, align 8
  %60 = load %struct.sv**, %struct.sv*** %p, align 8
  store %struct.sv* %59, %struct.sv** %60, align 8
  br label %while.end

if.end56:                                         ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %if.then55, %while.cond
  br label %if.end57

if.end57:                                         ; preds = %while.end, %if.else45
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then41
  %61 = load i64, i64* %fill, align 8
  %sub = sub nsw i64 %61, 1
  %62 = load %struct.av*, %struct.av** %av, align 8
  %sv_any59 = getelementptr inbounds %struct.av, %struct.av* %62, i32 0, i32 0
  %63 = load %struct.xpvav*, %struct.xpvav** %sv_any59, align 8
  %xav_fill60 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %63, i32 0, i32 2
  store i64 %sub, i64* %xav_fill60, align 8
  br label %if.end77

if.else61:                                        ; preds = %if.end33
  %64 = load %struct.sv**, %struct.sv*** %svp, align 8
  %65 = load %struct.sv*, %struct.sv** %64, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags62, align 4
  %cmp63 = icmp eq i32 %66, 255
  br i1 %cmp63, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %if.else61
  br i1 true, label %land.lhs.true67, label %if.else71

cond.false66:                                     ; preds = %if.else61
  br i1 false, label %land.lhs.true67, label %if.else71

land.lhs.true67:                                  ; preds = %cond.false66, %cond.true65
  %67 = load i32, i32* @PL_phase, align 4
  %cmp68 = icmp eq i32 %67, 6
  br i1 %cmp68, label %if.then70, label %if.else71

if.then70:                                        ; preds = %land.lhs.true67
  br label %if.end76

if.else71:                                        ; preds = %land.lhs.true67, %cond.false66, %cond.true65
  %68 = load %struct.sv**, %struct.sv*** %svp, align 8
  %69 = load %struct.sv*, %struct.sv** %68, align 8
  %70 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp72 = icmp ne %struct.sv* %69, %70
  br i1 %cmp72, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.else71
  %71 = load %struct.sv**, %struct.sv*** %svp, align 8
  %72 = load %struct.sv*, %struct.sv** %71, align 8
  %73 = bitcast %struct.sv* %72 to i8*
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %75 = bitcast %struct.sv* %74 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29, i64 0, i64 0), i8* %73, i8* %75)
  br label %if.end75

if.end75:                                         ; preds = %if.then74, %if.else71
  %76 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* null, %struct.sv** %76, align 8
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %if.then70
  br label %if.end77

if.end77:                                         ; preds = %if.then7, %if.then30, %if.end76, %if.end58
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_kill_backrefs(%struct.sv* %sv, %struct.av* %av) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %av.addr = alloca %struct.av*, align 8
  %svp = alloca %struct.sv**, align 8
  %last = alloca %struct.sv**, align 8
  %is_array = alloca i8, align 1
  %referrer = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.av* %av, %struct.av** %av.addr, align 8
  %0 = load %struct.av*, %struct.av** %av.addr, align 8
  %tobool = icmp ne %struct.av* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %cmp = icmp eq i32 %2, 255
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br i1 true, label %if.then1, label %if.end5

cond.false:                                       ; preds = %if.end
  br i1 false, label %if.then1, label %if.end5

if.then1:                                         ; preds = %cond.false, %cond.true
  %3 = load i8, i8* @PL_in_clean_all, align 1
  %tobool2 = trunc i8 %3 to i1
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.then1
  br label %return

if.end4:                                          ; preds = %if.then1
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.30, i64 0, i64 0))
  br label %if.end5

if.end5:                                          ; preds = %if.end4, %cond.false, %cond.true
  %4 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.av, %struct.av* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags6, align 4
  %and = and i32 %5, 255
  %cmp7 = icmp eq i32 %and, 11
  %frombool = zext i1 %cmp7 to i8
  store i8 %frombool, i8* %is_array, align 1
  %6 = load i8, i8* %is_array, align 1
  %tobool8 = trunc i8 %6 to i1
  br i1 %tobool8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end5
  %7 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %7, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u to %struct.sv***
  %8 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %8, %struct.sv*** %svp, align 8
  %9 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool10 = icmp ne %struct.sv** %9, null
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.then9
  %10 = load %struct.sv**, %struct.sv*** %svp, align 8
  %11 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %11, i32 0, i32 0
  %12 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %12, i32 0, i32 2
  %13 = load i64, i64* %xav_fill, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %10, i64 %13
  store %struct.sv** %add.ptr, %struct.sv*** %last, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then9
  br label %if.end13

if.else:                                          ; preds = %if.end5
  %14 = bitcast %struct.av** %av.addr to %struct.sv**
  store %struct.sv** %14, %struct.sv*** %svp, align 8
  %15 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv** %15, %struct.sv*** %last, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.end12
  %16 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool14 = icmp ne %struct.sv** %16, null
  br i1 %tobool14, label %if.then15, label %if.end76

if.then15:                                        ; preds = %if.end13
  br label %while.cond

while.cond:                                       ; preds = %if.end75, %if.then15
  %17 = load %struct.sv**, %struct.sv*** %svp, align 8
  %18 = load %struct.sv**, %struct.sv*** %last, align 8
  %cmp16 = icmp ule %struct.sv** %17, %18
  br i1 %cmp16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %19 = load %struct.sv**, %struct.sv*** %svp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  %tobool17 = icmp ne %struct.sv* %20, null
  br i1 %tobool17, label %if.then18, label %if.end75

if.then18:                                        ; preds = %while.body
  %21 = load %struct.sv**, %struct.sv*** %svp, align 8
  %22 = load %struct.sv*, %struct.sv** %21, align 8
  store %struct.sv* %22, %struct.sv** %referrer, align 8
  %23 = load %struct.sv*, %struct.sv** %referrer, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %24, -2147481600
  %cmp21 = icmp eq i32 %and20, -2147481600
  br i1 %cmp21, label %if.then22, label %if.else42

if.then22:                                        ; preds = %if.then18
  br label %do.body

do.body:                                          ; preds = %if.then22
  %25 = load %struct.sv*, %struct.sv** %referrer, align 8
  %sv_u23 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u23 to %struct.sv**
  store %struct.sv* null, %struct.sv** %svu_rv, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %26 = load %struct.sv*, %struct.sv** %referrer, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %27, 1610547455
  store i32 %and25, i32* %sv_flags24, align 4
  %28 = load %struct.sv*, %struct.sv** %referrer, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %29, 33554432
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.end
  %30 = load %struct.sv*, %struct.sv** %referrer, align 8
  %call = call i32 @Perl_sv_backoff(%struct.sv* %30)
  %tobool29 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.end
  %31 = phi i1 [ false, %do.end ], [ %tobool29, %land.rhs ]
  %land.ext = zext i1 %31 to i32
  %32 = load %struct.sv*, %struct.sv** %referrer, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %33, 2147481599
  store i32 %and31, i32* %sv_flags30, align 4
  br label %do.body32

do.body32:                                        ; preds = %land.end
  %34 = load %struct.sv*, %struct.sv** %referrer, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %35, 4194304
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %cond.true36, label %cond.false37

cond.true36:                                      ; preds = %do.body32
  br i1 true, label %if.then38, label %if.end40

cond.false37:                                     ; preds = %do.body32
  br i1 false, label %if.then38, label %if.end40

if.then38:                                        ; preds = %cond.false37, %cond.true36
  %36 = load %struct.sv*, %struct.sv** %referrer, align 8
  %call39 = call i32 @Perl_mg_set(%struct.sv* %36)
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %cond.false37, %cond.true36
  br label %do.end41

do.end41:                                         ; preds = %if.end40
  br label %if.end71

if.else42:                                        ; preds = %if.then18
  %37 = load %struct.sv*, %struct.sv** %referrer, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %38, 255
  %cmp45 = icmp eq i32 %and44, 9
  br i1 %cmp45, label %if.then49, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else42
  %39 = load %struct.sv*, %struct.sv** %referrer, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %40, 255
  %cmp48 = icmp eq i32 %and47, 10
  br i1 %cmp48, label %if.then49, label %if.else51

if.then49:                                        ; preds = %lor.lhs.false, %if.else42
  %41 = load %struct.sv*, %struct.sv** %referrer, align 8
  %sv_any50 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any50, align 8
  %43 = bitcast i8* %42 to %struct.xpvgv*
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %43, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  store %struct.hv* null, %struct.hv** %xgv_stash, align 8
  br label %if.end70

if.else51:                                        ; preds = %lor.lhs.false
  %44 = load %struct.sv*, %struct.sv** %referrer, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %45, 255
  %cmp54 = icmp eq i32 %and53, 13
  br i1 %cmp54, label %if.then59, label %lor.lhs.false55

lor.lhs.false55:                                  ; preds = %if.else51
  %46 = load %struct.sv*, %struct.sv** %referrer, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %47, 255
  %cmp58 = icmp eq i32 %and57, 14
  br i1 %cmp58, label %if.then59, label %if.else67

if.then59:                                        ; preds = %lor.lhs.false55, %if.else51
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %49, 255
  %cmp62 = icmp eq i32 %and61, 12
  br i1 %cmp62, label %if.then63, label %if.else65

if.then63:                                        ; preds = %if.then59
  %50 = load %struct.sv*, %struct.sv** %referrer, align 8
  %51 = bitcast %struct.sv* %50 to i8*
  %52 = bitcast i8* %51 to %struct.cv*
  %sv_any64 = getelementptr inbounds %struct.cv, %struct.cv* %52, i32 0, i32 0
  %53 = load %struct.xpvcv*, %struct.xpvcv** %sv_any64, align 8
  %xcv_stash = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %53, i32 0, i32 4
  store %struct.hv* null, %struct.hv** %xcv_stash, align 8
  br label %if.end66

if.else65:                                        ; preds = %if.then59
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %55 = bitcast %struct.sv* %54 to i8*
  %56 = bitcast i8* %55 to %struct.gv*
  %57 = load %struct.sv*, %struct.sv** %referrer, align 8
  %58 = bitcast %struct.sv* %57 to i8*
  %59 = bitcast i8* %58 to %struct.cv*
  call void @S_anonymise_cv_maybe(%struct.gv* %56, %struct.cv* %59)
  br label %if.end66

if.end66:                                         ; preds = %if.else65, %if.then63
  br label %if.end69

if.else67:                                        ; preds = %lor.lhs.false55
  %60 = load %struct.sv*, %struct.sv** %referrer, align 8
  %sv_flags68 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags68, align 4
  %conv = zext i32 %61 to i64
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.31, i64 0, i64 0), i64 %conv)
  br label %if.end69

if.end69:                                         ; preds = %if.else67, %if.end66
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.then49
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %do.end41
  %62 = load i8, i8* %is_array, align 1
  %tobool72 = trunc i8 %62 to i1
  br i1 %tobool72, label %if.then73, label %if.end74

if.then73:                                        ; preds = %if.end71
  %63 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* null, %struct.sv** %63, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.then73, %if.end71
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %while.body
  %64 = load %struct.sv**, %struct.sv*** %svp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %64, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %svp, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end76

if.end76:                                         ; preds = %while.end, %if.end13
  %65 = load i8, i8* %is_array, align 1
  %tobool77 = trunc i8 %65 to i1
  br i1 %tobool77, label %if.then78, label %if.end81

if.then78:                                        ; preds = %if.end76
  %66 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_any79 = getelementptr inbounds %struct.av, %struct.av* %66, i32 0, i32 0
  %67 = load %struct.xpvav*, %struct.xpvav** %sv_any79, align 8
  %xav_fill80 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %67, i32 0, i32 2
  store i64 -1, i64* %xav_fill80, align 8
  %68 = load %struct.av*, %struct.av** %av.addr, align 8
  %69 = bitcast %struct.av* %68 to i8*
  %70 = bitcast i8* %69 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %70)
  br label %if.end81

if.end81:                                         ; preds = %if.then78, %if.end76
  br label %return

return:                                           ; preds = %if.end81, %if.then3, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_anonymise_cv_maybe(%struct.gv* %gv, %struct.cv* %cv) #0 {
entry:
  %gv.addr = alloca %struct.gv*, align 8
  %cv.addr = alloca %struct.cv*, align 8
  %gvname = alloca %struct.sv*, align 8
  %anongv = alloca %struct.gv*, align 8
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  %0 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %0, i32 0, i32 3
  %svu_gp = bitcast %union.anon.6* %sv_u to %struct.gp**
  %1 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %1, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  %2 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr1 = getelementptr inbounds %struct.cv, %struct.cv* %2, i64 0
  %3 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %cmp = icmp eq %struct.cv* %add.ptr1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_u2 = getelementptr inbounds %struct.gv, %struct.gv* %4, i32 0, i32 3
  %svu_gp3 = bitcast %union.anon.6* %sv_u2 to %struct.gp**
  %5 = load %struct.gp*, %struct.gp** %svu_gp3, align 8
  %add.ptr4 = getelementptr inbounds %struct.gp, %struct.gp* %5, i64 0
  %gp_refcnt = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr4, i32 0, i32 4
  %6 = load i32, i32* %gp_refcnt, align 4
  %cmp5 = icmp ult i32 %6, 2
  br i1 %cmp5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %land.lhs.true
  %7 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.cv, %struct.cv* %7, i32 0, i32 1
  %8 = load i32, i32* %sv_refcnt, align 8
  %cmp7 = icmp ult i32 %8, 2
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true6
  %9 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %9, i32 0, i32 0
  %10 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %xcv_gv_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %10, i32 0, i32 7
  %xcv_gv = bitcast %union.anon.10* %xcv_gv_u to %struct.gv**
  store %struct.gv* null, %struct.gv** %xcv_gv, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true6, %land.lhs.true, %entry
  %11 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any8 = getelementptr inbounds %struct.gv, %struct.gv* %11, i32 0, i32 0
  %12 = load %struct.xpvgv*, %struct.xpvgv** %sv_any8, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %12, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %13 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %tobool = icmp ne %struct.hv* %13, null
  br i1 %tobool, label %land.lhs.true9, label %cond.false380

land.lhs.true9:                                   ; preds = %if.end
  %14 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any10 = getelementptr inbounds %struct.gv, %struct.gv* %14, i32 0, i32 0
  %15 = load %struct.xpvgv*, %struct.xpvgv** %sv_any10, align 8
  %xnv_u11 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %15, i32 0, i32 5
  %xgv_stash12 = bitcast %union._xnvu* %xnv_u11 to %struct.hv**
  %16 = load %struct.hv*, %struct.hv** %xgv_stash12, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags, align 4
  %and = and i32 %17, 33554432
  %tobool13 = icmp ne i32 %and, 0
  br i1 %tobool13, label %land.lhs.true14, label %cond.false113

land.lhs.true14:                                  ; preds = %land.lhs.true9
  %18 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any15 = getelementptr inbounds %struct.gv, %struct.gv* %18, i32 0, i32 0
  %19 = load %struct.xpvgv*, %struct.xpvgv** %sv_any15, align 8
  %xnv_u16 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %19, i32 0, i32 5
  %xgv_stash17 = bitcast %union._xnvu* %xnv_u16 to %struct.hv**
  %20 = load %struct.hv*, %struct.hv** %xgv_stash17, align 8
  %sv_u18 = getelementptr inbounds %struct.hv, %struct.hv* %20, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u18 to %struct.he***
  %21 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %22 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 0
  %23 = load %struct.xpvgv*, %struct.xpvgv** %sv_any19, align 8
  %xnv_u20 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %23, i32 0, i32 5
  %xgv_stash21 = bitcast %union._xnvu* %xnv_u20 to %struct.hv**
  %24 = load %struct.hv*, %struct.hv** %xgv_stash21, align 8
  %sv_any22 = getelementptr inbounds %struct.hv, %struct.hv* %24, i32 0, i32 0
  %25 = load %struct.xpvhv*, %struct.xpvhv** %sv_any22, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %25, i32 0, i32 3
  %26 = load i64, i64* %xhv_max, align 8
  %add = add i64 %26, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %21, i64 %add
  %27 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %27, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %28 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool23 = icmp ne %struct.hek* %28, null
  br i1 %tobool23, label %land.lhs.true24, label %cond.false113

land.lhs.true24:                                  ; preds = %land.lhs.true14
  %29 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any25 = getelementptr inbounds %struct.gv, %struct.gv* %29, i32 0, i32 0
  %30 = load %struct.xpvgv*, %struct.xpvgv** %sv_any25, align 8
  %xnv_u26 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %30, i32 0, i32 5
  %xgv_stash27 = bitcast %union._xnvu* %xnv_u26 to %struct.hv**
  %31 = load %struct.hv*, %struct.hv** %xgv_stash27, align 8
  %sv_u28 = getelementptr inbounds %struct.hv, %struct.hv* %31, i32 0, i32 3
  %svu_hash29 = bitcast %union.anon.4* %sv_u28 to %struct.he***
  %32 = load %struct.he**, %struct.he*** %svu_hash29, align 8
  %33 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any30 = getelementptr inbounds %struct.gv, %struct.gv* %33, i32 0, i32 0
  %34 = load %struct.xpvgv*, %struct.xpvgv** %sv_any30, align 8
  %xnv_u31 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %34, i32 0, i32 5
  %xgv_stash32 = bitcast %union._xnvu* %xnv_u31 to %struct.hv**
  %35 = load %struct.hv*, %struct.hv** %xgv_stash32, align 8
  %sv_any33 = getelementptr inbounds %struct.hv, %struct.hv* %35, i32 0, i32 0
  %36 = load %struct.xpvhv*, %struct.xpvhv** %sv_any33, align 8
  %xhv_max34 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %36, i32 0, i32 3
  %37 = load i64, i64* %xhv_max34, align 8
  %add35 = add i64 %37, 1
  %arrayidx36 = getelementptr inbounds %struct.he*, %struct.he** %32, i64 %add35
  %38 = bitcast %struct.he** %arrayidx36 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %38, i32 0, i32 4
  %39 = load i32, i32* %xhv_name_count, align 4
  %tobool37 = icmp ne i32 %39, 0
  br i1 %tobool37, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true24
  %40 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any38 = getelementptr inbounds %struct.gv, %struct.gv* %40, i32 0, i32 0
  %41 = load %struct.xpvgv*, %struct.xpvgv** %sv_any38, align 8
  %xnv_u39 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %41, i32 0, i32 5
  %xgv_stash40 = bitcast %union._xnvu* %xnv_u39 to %struct.hv**
  %42 = load %struct.hv*, %struct.hv** %xgv_stash40, align 8
  %sv_u41 = getelementptr inbounds %struct.hv, %struct.hv* %42, i32 0, i32 3
  %svu_hash42 = bitcast %union.anon.4* %sv_u41 to %struct.he***
  %43 = load %struct.he**, %struct.he*** %svu_hash42, align 8
  %44 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any43 = getelementptr inbounds %struct.gv, %struct.gv* %44, i32 0, i32 0
  %45 = load %struct.xpvgv*, %struct.xpvgv** %sv_any43, align 8
  %xnv_u44 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %45, i32 0, i32 5
  %xgv_stash45 = bitcast %union._xnvu* %xnv_u44 to %struct.hv**
  %46 = load %struct.hv*, %struct.hv** %xgv_stash45, align 8
  %sv_any46 = getelementptr inbounds %struct.hv, %struct.hv* %46, i32 0, i32 0
  %47 = load %struct.xpvhv*, %struct.xpvhv** %sv_any46, align 8
  %xhv_max47 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %47, i32 0, i32 3
  %48 = load i64, i64* %xhv_max47, align 8
  %add48 = add i64 %48, 1
  %arrayidx49 = getelementptr inbounds %struct.he*, %struct.he** %43, i64 %add48
  %49 = bitcast %struct.he** %arrayidx49 to %struct.xpvhv_aux*
  %xhv_name_u50 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %49, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u50 to %struct.hek***
  %50 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %51 = load %struct.hek*, %struct.hek** %50, align 8
  %tobool51 = icmp ne %struct.hek* %51, null
  br i1 %tobool51, label %cond.true67, label %cond.false113

cond.false:                                       ; preds = %land.lhs.true24
  %52 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any52 = getelementptr inbounds %struct.gv, %struct.gv* %52, i32 0, i32 0
  %53 = load %struct.xpvgv*, %struct.xpvgv** %sv_any52, align 8
  %xnv_u53 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %53, i32 0, i32 5
  %xgv_stash54 = bitcast %union._xnvu* %xnv_u53 to %struct.hv**
  %54 = load %struct.hv*, %struct.hv** %xgv_stash54, align 8
  %sv_u55 = getelementptr inbounds %struct.hv, %struct.hv* %54, i32 0, i32 3
  %svu_hash56 = bitcast %union.anon.4* %sv_u55 to %struct.he***
  %55 = load %struct.he**, %struct.he*** %svu_hash56, align 8
  %56 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any57 = getelementptr inbounds %struct.gv, %struct.gv* %56, i32 0, i32 0
  %57 = load %struct.xpvgv*, %struct.xpvgv** %sv_any57, align 8
  %xnv_u58 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %57, i32 0, i32 5
  %xgv_stash59 = bitcast %union._xnvu* %xnv_u58 to %struct.hv**
  %58 = load %struct.hv*, %struct.hv** %xgv_stash59, align 8
  %sv_any60 = getelementptr inbounds %struct.hv, %struct.hv* %58, i32 0, i32 0
  %59 = load %struct.xpvhv*, %struct.xpvhv** %sv_any60, align 8
  %xhv_max61 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %59, i32 0, i32 3
  %60 = load i64, i64* %xhv_max61, align 8
  %add62 = add i64 %60, 1
  %arrayidx63 = getelementptr inbounds %struct.he*, %struct.he** %55, i64 %add62
  %61 = bitcast %struct.he** %arrayidx63 to %struct.xpvhv_aux*
  %xhv_name_u64 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %61, i32 0, i32 0
  %xhvnameu_name65 = bitcast %union._xhvnameu* %xhv_name_u64 to %struct.hek**
  %62 = load %struct.hek*, %struct.hek** %xhvnameu_name65, align 8
  %tobool66 = icmp ne %struct.hek* %62, null
  br i1 %tobool66, label %cond.true67, label %cond.false113

cond.true67:                                      ; preds = %cond.false, %cond.true
  %63 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any68 = getelementptr inbounds %struct.gv, %struct.gv* %63, i32 0, i32 0
  %64 = load %struct.xpvgv*, %struct.xpvgv** %sv_any68, align 8
  %xnv_u69 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %64, i32 0, i32 5
  %xgv_stash70 = bitcast %union._xnvu* %xnv_u69 to %struct.hv**
  %65 = load %struct.hv*, %struct.hv** %xgv_stash70, align 8
  %sv_u71 = getelementptr inbounds %struct.hv, %struct.hv* %65, i32 0, i32 3
  %svu_hash72 = bitcast %union.anon.4* %sv_u71 to %struct.he***
  %66 = load %struct.he**, %struct.he*** %svu_hash72, align 8
  %67 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any73 = getelementptr inbounds %struct.gv, %struct.gv* %67, i32 0, i32 0
  %68 = load %struct.xpvgv*, %struct.xpvgv** %sv_any73, align 8
  %xnv_u74 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %68, i32 0, i32 5
  %xgv_stash75 = bitcast %union._xnvu* %xnv_u74 to %struct.hv**
  %69 = load %struct.hv*, %struct.hv** %xgv_stash75, align 8
  %sv_any76 = getelementptr inbounds %struct.hv, %struct.hv* %69, i32 0, i32 0
  %70 = load %struct.xpvhv*, %struct.xpvhv** %sv_any76, align 8
  %xhv_max77 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %70, i32 0, i32 3
  %71 = load i64, i64* %xhv_max77, align 8
  %add78 = add i64 %71, 1
  %arrayidx79 = getelementptr inbounds %struct.he*, %struct.he** %66, i64 %add78
  %72 = bitcast %struct.he** %arrayidx79 to %struct.xpvhv_aux*
  %xhv_name_count80 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %72, i32 0, i32 4
  %73 = load i32, i32* %xhv_name_count80, align 4
  %tobool81 = icmp ne i32 %73, 0
  br i1 %tobool81, label %cond.true82, label %cond.false97

cond.true82:                                      ; preds = %cond.true67
  %74 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any83 = getelementptr inbounds %struct.gv, %struct.gv* %74, i32 0, i32 0
  %75 = load %struct.xpvgv*, %struct.xpvgv** %sv_any83, align 8
  %xnv_u84 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %75, i32 0, i32 5
  %xgv_stash85 = bitcast %union._xnvu* %xnv_u84 to %struct.hv**
  %76 = load %struct.hv*, %struct.hv** %xgv_stash85, align 8
  %sv_u86 = getelementptr inbounds %struct.hv, %struct.hv* %76, i32 0, i32 3
  %svu_hash87 = bitcast %union.anon.4* %sv_u86 to %struct.he***
  %77 = load %struct.he**, %struct.he*** %svu_hash87, align 8
  %78 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any88 = getelementptr inbounds %struct.gv, %struct.gv* %78, i32 0, i32 0
  %79 = load %struct.xpvgv*, %struct.xpvgv** %sv_any88, align 8
  %xnv_u89 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %79, i32 0, i32 5
  %xgv_stash90 = bitcast %union._xnvu* %xnv_u89 to %struct.hv**
  %80 = load %struct.hv*, %struct.hv** %xgv_stash90, align 8
  %sv_any91 = getelementptr inbounds %struct.hv, %struct.hv* %80, i32 0, i32 0
  %81 = load %struct.xpvhv*, %struct.xpvhv** %sv_any91, align 8
  %xhv_max92 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %81, i32 0, i32 3
  %82 = load i64, i64* %xhv_max92, align 8
  %add93 = add i64 %82, 1
  %arrayidx94 = getelementptr inbounds %struct.he*, %struct.he** %77, i64 %add93
  %83 = bitcast %struct.he** %arrayidx94 to %struct.xpvhv_aux*
  %xhv_name_u95 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %83, i32 0, i32 0
  %xhvnameu_names96 = bitcast %union._xhvnameu* %xhv_name_u95 to %struct.hek***
  %84 = load %struct.hek**, %struct.hek*** %xhvnameu_names96, align 8
  %85 = load %struct.hek*, %struct.hek** %84, align 8
  br label %cond.end

cond.false97:                                     ; preds = %cond.true67
  %86 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any98 = getelementptr inbounds %struct.gv, %struct.gv* %86, i32 0, i32 0
  %87 = load %struct.xpvgv*, %struct.xpvgv** %sv_any98, align 8
  %xnv_u99 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %87, i32 0, i32 5
  %xgv_stash100 = bitcast %union._xnvu* %xnv_u99 to %struct.hv**
  %88 = load %struct.hv*, %struct.hv** %xgv_stash100, align 8
  %sv_u101 = getelementptr inbounds %struct.hv, %struct.hv* %88, i32 0, i32 3
  %svu_hash102 = bitcast %union.anon.4* %sv_u101 to %struct.he***
  %89 = load %struct.he**, %struct.he*** %svu_hash102, align 8
  %90 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any103 = getelementptr inbounds %struct.gv, %struct.gv* %90, i32 0, i32 0
  %91 = load %struct.xpvgv*, %struct.xpvgv** %sv_any103, align 8
  %xnv_u104 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %91, i32 0, i32 5
  %xgv_stash105 = bitcast %union._xnvu* %xnv_u104 to %struct.hv**
  %92 = load %struct.hv*, %struct.hv** %xgv_stash105, align 8
  %sv_any106 = getelementptr inbounds %struct.hv, %struct.hv* %92, i32 0, i32 0
  %93 = load %struct.xpvhv*, %struct.xpvhv** %sv_any106, align 8
  %xhv_max107 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %93, i32 0, i32 3
  %94 = load i64, i64* %xhv_max107, align 8
  %add108 = add i64 %94, 1
  %arrayidx109 = getelementptr inbounds %struct.he*, %struct.he** %89, i64 %add108
  %95 = bitcast %struct.he** %arrayidx109 to %struct.xpvhv_aux*
  %xhv_name_u110 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %95, i32 0, i32 0
  %xhvnameu_name111 = bitcast %union._xhvnameu* %xhv_name_u110 to %struct.hek**
  %96 = load %struct.hek*, %struct.hek** %xhvnameu_name111, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false97, %cond.true82
  %cond = phi %struct.hek* [ %85, %cond.true82 ], [ %96, %cond.false97 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %tobool112 = icmp ne i8* %arraydecay, null
  br i1 %tobool112, label %land.lhs.true114, label %cond.false380

cond.false113:                                    ; preds = %cond.false, %cond.true, %land.lhs.true14, %land.lhs.true9
  br i1 false, label %land.lhs.true114, label %cond.false380

land.lhs.true114:                                 ; preds = %cond.false113, %cond.end
  %97 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any115 = getelementptr inbounds %struct.gv, %struct.gv* %97, i32 0, i32 0
  %98 = load %struct.xpvgv*, %struct.xpvgv** %sv_any115, align 8
  %xnv_u116 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %98, i32 0, i32 5
  %xgv_stash117 = bitcast %union._xnvu* %xnv_u116 to %struct.hv**
  %99 = load %struct.hv*, %struct.hv** %xgv_stash117, align 8
  %sv_flags118 = getelementptr inbounds %struct.hv, %struct.hv* %99, i32 0, i32 2
  %100 = load i32, i32* %sv_flags118, align 4
  %and119 = and i32 %100, 33554432
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %land.lhs.true121, label %cond.false254

land.lhs.true121:                                 ; preds = %land.lhs.true114
  %101 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any122 = getelementptr inbounds %struct.gv, %struct.gv* %101, i32 0, i32 0
  %102 = load %struct.xpvgv*, %struct.xpvgv** %sv_any122, align 8
  %xnv_u123 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %102, i32 0, i32 5
  %xgv_stash124 = bitcast %union._xnvu* %xnv_u123 to %struct.hv**
  %103 = load %struct.hv*, %struct.hv** %xgv_stash124, align 8
  %sv_u125 = getelementptr inbounds %struct.hv, %struct.hv* %103, i32 0, i32 3
  %svu_hash126 = bitcast %union.anon.4* %sv_u125 to %struct.he***
  %104 = load %struct.he**, %struct.he*** %svu_hash126, align 8
  %105 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any127 = getelementptr inbounds %struct.gv, %struct.gv* %105, i32 0, i32 0
  %106 = load %struct.xpvgv*, %struct.xpvgv** %sv_any127, align 8
  %xnv_u128 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %106, i32 0, i32 5
  %xgv_stash129 = bitcast %union._xnvu* %xnv_u128 to %struct.hv**
  %107 = load %struct.hv*, %struct.hv** %xgv_stash129, align 8
  %sv_any130 = getelementptr inbounds %struct.hv, %struct.hv* %107, i32 0, i32 0
  %108 = load %struct.xpvhv*, %struct.xpvhv** %sv_any130, align 8
  %xhv_max131 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %108, i32 0, i32 3
  %109 = load i64, i64* %xhv_max131, align 8
  %add132 = add i64 %109, 1
  %arrayidx133 = getelementptr inbounds %struct.he*, %struct.he** %104, i64 %add132
  %110 = bitcast %struct.he** %arrayidx133 to %struct.xpvhv_aux*
  %xhv_name_u134 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %110, i32 0, i32 0
  %xhvnameu_name135 = bitcast %union._xhvnameu* %xhv_name_u134 to %struct.hek**
  %111 = load %struct.hek*, %struct.hek** %xhvnameu_name135, align 8
  %tobool136 = icmp ne %struct.hek* %111, null
  br i1 %tobool136, label %land.lhs.true137, label %cond.false254

land.lhs.true137:                                 ; preds = %land.lhs.true121
  %112 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any138 = getelementptr inbounds %struct.gv, %struct.gv* %112, i32 0, i32 0
  %113 = load %struct.xpvgv*, %struct.xpvgv** %sv_any138, align 8
  %xnv_u139 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %113, i32 0, i32 5
  %xgv_stash140 = bitcast %union._xnvu* %xnv_u139 to %struct.hv**
  %114 = load %struct.hv*, %struct.hv** %xgv_stash140, align 8
  %sv_u141 = getelementptr inbounds %struct.hv, %struct.hv* %114, i32 0, i32 3
  %svu_hash142 = bitcast %union.anon.4* %sv_u141 to %struct.he***
  %115 = load %struct.he**, %struct.he*** %svu_hash142, align 8
  %116 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any143 = getelementptr inbounds %struct.gv, %struct.gv* %116, i32 0, i32 0
  %117 = load %struct.xpvgv*, %struct.xpvgv** %sv_any143, align 8
  %xnv_u144 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %117, i32 0, i32 5
  %xgv_stash145 = bitcast %union._xnvu* %xnv_u144 to %struct.hv**
  %118 = load %struct.hv*, %struct.hv** %xgv_stash145, align 8
  %sv_any146 = getelementptr inbounds %struct.hv, %struct.hv* %118, i32 0, i32 0
  %119 = load %struct.xpvhv*, %struct.xpvhv** %sv_any146, align 8
  %xhv_max147 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %119, i32 0, i32 3
  %120 = load i64, i64* %xhv_max147, align 8
  %add148 = add i64 %120, 1
  %arrayidx149 = getelementptr inbounds %struct.he*, %struct.he** %115, i64 %add148
  %121 = bitcast %struct.he** %arrayidx149 to %struct.xpvhv_aux*
  %xhv_name_count150 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %121, i32 0, i32 4
  %122 = load i32, i32* %xhv_name_count150, align 4
  %cmp151 = icmp ne i32 %122, -1
  br i1 %cmp151, label %cond.true152, label %cond.false254

cond.true152:                                     ; preds = %land.lhs.true137
  %123 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any153 = getelementptr inbounds %struct.gv, %struct.gv* %123, i32 0, i32 0
  %124 = load %struct.xpvgv*, %struct.xpvgv** %sv_any153, align 8
  %xnv_u154 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %124, i32 0, i32 5
  %xgv_stash155 = bitcast %union._xnvu* %xnv_u154 to %struct.hv**
  %125 = load %struct.hv*, %struct.hv** %xgv_stash155, align 8
  %sv_u156 = getelementptr inbounds %struct.hv, %struct.hv* %125, i32 0, i32 3
  %svu_hash157 = bitcast %union.anon.4* %sv_u156 to %struct.he***
  %126 = load %struct.he**, %struct.he*** %svu_hash157, align 8
  %127 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any158 = getelementptr inbounds %struct.gv, %struct.gv* %127, i32 0, i32 0
  %128 = load %struct.xpvgv*, %struct.xpvgv** %sv_any158, align 8
  %xnv_u159 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %128, i32 0, i32 5
  %xgv_stash160 = bitcast %union._xnvu* %xnv_u159 to %struct.hv**
  %129 = load %struct.hv*, %struct.hv** %xgv_stash160, align 8
  %sv_any161 = getelementptr inbounds %struct.hv, %struct.hv* %129, i32 0, i32 0
  %130 = load %struct.xpvhv*, %struct.xpvhv** %sv_any161, align 8
  %xhv_max162 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %130, i32 0, i32 3
  %131 = load i64, i64* %xhv_max162, align 8
  %add163 = add i64 %131, 1
  %arrayidx164 = getelementptr inbounds %struct.he*, %struct.he** %126, i64 %add163
  %132 = bitcast %struct.he** %arrayidx164 to %struct.xpvhv_aux*
  %xhv_name_count165 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %132, i32 0, i32 4
  %133 = load i32, i32* %xhv_name_count165, align 4
  %cmp166 = icmp sgt i32 %133, 0
  br i1 %cmp166, label %cond.true167, label %cond.false183

cond.true167:                                     ; preds = %cond.true152
  %134 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any168 = getelementptr inbounds %struct.gv, %struct.gv* %134, i32 0, i32 0
  %135 = load %struct.xpvgv*, %struct.xpvgv** %sv_any168, align 8
  %xnv_u169 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %135, i32 0, i32 5
  %xgv_stash170 = bitcast %union._xnvu* %xnv_u169 to %struct.hv**
  %136 = load %struct.hv*, %struct.hv** %xgv_stash170, align 8
  %sv_u171 = getelementptr inbounds %struct.hv, %struct.hv* %136, i32 0, i32 3
  %svu_hash172 = bitcast %union.anon.4* %sv_u171 to %struct.he***
  %137 = load %struct.he**, %struct.he*** %svu_hash172, align 8
  %138 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any173 = getelementptr inbounds %struct.gv, %struct.gv* %138, i32 0, i32 0
  %139 = load %struct.xpvgv*, %struct.xpvgv** %sv_any173, align 8
  %xnv_u174 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %139, i32 0, i32 5
  %xgv_stash175 = bitcast %union._xnvu* %xnv_u174 to %struct.hv**
  %140 = load %struct.hv*, %struct.hv** %xgv_stash175, align 8
  %sv_any176 = getelementptr inbounds %struct.hv, %struct.hv* %140, i32 0, i32 0
  %141 = load %struct.xpvhv*, %struct.xpvhv** %sv_any176, align 8
  %xhv_max177 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %141, i32 0, i32 3
  %142 = load i64, i64* %xhv_max177, align 8
  %add178 = add i64 %142, 1
  %arrayidx179 = getelementptr inbounds %struct.he*, %struct.he** %137, i64 %add178
  %143 = bitcast %struct.he** %arrayidx179 to %struct.xpvhv_aux*
  %xhv_name_u180 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %143, i32 0, i32 0
  %xhvnameu_names181 = bitcast %union._xhvnameu* %xhv_name_u180 to %struct.hek***
  %144 = load %struct.hek**, %struct.hek*** %xhvnameu_names181, align 8
  %arrayidx182 = getelementptr inbounds %struct.hek*, %struct.hek** %144, i64 0
  %145 = load %struct.hek*, %struct.hek** %arrayidx182, align 8
  br label %cond.end249

cond.false183:                                    ; preds = %cond.true152
  %146 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any184 = getelementptr inbounds %struct.gv, %struct.gv* %146, i32 0, i32 0
  %147 = load %struct.xpvgv*, %struct.xpvgv** %sv_any184, align 8
  %xnv_u185 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %147, i32 0, i32 5
  %xgv_stash186 = bitcast %union._xnvu* %xnv_u185 to %struct.hv**
  %148 = load %struct.hv*, %struct.hv** %xgv_stash186, align 8
  %sv_u187 = getelementptr inbounds %struct.hv, %struct.hv* %148, i32 0, i32 3
  %svu_hash188 = bitcast %union.anon.4* %sv_u187 to %struct.he***
  %149 = load %struct.he**, %struct.he*** %svu_hash188, align 8
  %150 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any189 = getelementptr inbounds %struct.gv, %struct.gv* %150, i32 0, i32 0
  %151 = load %struct.xpvgv*, %struct.xpvgv** %sv_any189, align 8
  %xnv_u190 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %151, i32 0, i32 5
  %xgv_stash191 = bitcast %union._xnvu* %xnv_u190 to %struct.hv**
  %152 = load %struct.hv*, %struct.hv** %xgv_stash191, align 8
  %sv_any192 = getelementptr inbounds %struct.hv, %struct.hv* %152, i32 0, i32 0
  %153 = load %struct.xpvhv*, %struct.xpvhv** %sv_any192, align 8
  %xhv_max193 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %153, i32 0, i32 3
  %154 = load i64, i64* %xhv_max193, align 8
  %add194 = add i64 %154, 1
  %arrayidx195 = getelementptr inbounds %struct.he*, %struct.he** %149, i64 %add194
  %155 = bitcast %struct.he** %arrayidx195 to %struct.xpvhv_aux*
  %xhv_name_count196 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %155, i32 0, i32 4
  %156 = load i32, i32* %xhv_name_count196, align 4
  %cmp197 = icmp slt i32 %156, -1
  br i1 %cmp197, label %cond.true198, label %cond.false214

cond.true198:                                     ; preds = %cond.false183
  %157 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any199 = getelementptr inbounds %struct.gv, %struct.gv* %157, i32 0, i32 0
  %158 = load %struct.xpvgv*, %struct.xpvgv** %sv_any199, align 8
  %xnv_u200 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %158, i32 0, i32 5
  %xgv_stash201 = bitcast %union._xnvu* %xnv_u200 to %struct.hv**
  %159 = load %struct.hv*, %struct.hv** %xgv_stash201, align 8
  %sv_u202 = getelementptr inbounds %struct.hv, %struct.hv* %159, i32 0, i32 3
  %svu_hash203 = bitcast %union.anon.4* %sv_u202 to %struct.he***
  %160 = load %struct.he**, %struct.he*** %svu_hash203, align 8
  %161 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any204 = getelementptr inbounds %struct.gv, %struct.gv* %161, i32 0, i32 0
  %162 = load %struct.xpvgv*, %struct.xpvgv** %sv_any204, align 8
  %xnv_u205 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %162, i32 0, i32 5
  %xgv_stash206 = bitcast %union._xnvu* %xnv_u205 to %struct.hv**
  %163 = load %struct.hv*, %struct.hv** %xgv_stash206, align 8
  %sv_any207 = getelementptr inbounds %struct.hv, %struct.hv* %163, i32 0, i32 0
  %164 = load %struct.xpvhv*, %struct.xpvhv** %sv_any207, align 8
  %xhv_max208 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %164, i32 0, i32 3
  %165 = load i64, i64* %xhv_max208, align 8
  %add209 = add i64 %165, 1
  %arrayidx210 = getelementptr inbounds %struct.he*, %struct.he** %160, i64 %add209
  %166 = bitcast %struct.he** %arrayidx210 to %struct.xpvhv_aux*
  %xhv_name_u211 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %166, i32 0, i32 0
  %xhvnameu_names212 = bitcast %union._xhvnameu* %xhv_name_u211 to %struct.hek***
  %167 = load %struct.hek**, %struct.hek*** %xhvnameu_names212, align 8
  %arrayidx213 = getelementptr inbounds %struct.hek*, %struct.hek** %167, i64 1
  %168 = load %struct.hek*, %struct.hek** %arrayidx213, align 8
  br label %cond.end247

cond.false214:                                    ; preds = %cond.false183
  %169 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any215 = getelementptr inbounds %struct.gv, %struct.gv* %169, i32 0, i32 0
  %170 = load %struct.xpvgv*, %struct.xpvgv** %sv_any215, align 8
  %xnv_u216 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %170, i32 0, i32 5
  %xgv_stash217 = bitcast %union._xnvu* %xnv_u216 to %struct.hv**
  %171 = load %struct.hv*, %struct.hv** %xgv_stash217, align 8
  %sv_u218 = getelementptr inbounds %struct.hv, %struct.hv* %171, i32 0, i32 3
  %svu_hash219 = bitcast %union.anon.4* %sv_u218 to %struct.he***
  %172 = load %struct.he**, %struct.he*** %svu_hash219, align 8
  %173 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any220 = getelementptr inbounds %struct.gv, %struct.gv* %173, i32 0, i32 0
  %174 = load %struct.xpvgv*, %struct.xpvgv** %sv_any220, align 8
  %xnv_u221 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %174, i32 0, i32 5
  %xgv_stash222 = bitcast %union._xnvu* %xnv_u221 to %struct.hv**
  %175 = load %struct.hv*, %struct.hv** %xgv_stash222, align 8
  %sv_any223 = getelementptr inbounds %struct.hv, %struct.hv* %175, i32 0, i32 0
  %176 = load %struct.xpvhv*, %struct.xpvhv** %sv_any223, align 8
  %xhv_max224 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %176, i32 0, i32 3
  %177 = load i64, i64* %xhv_max224, align 8
  %add225 = add i64 %177, 1
  %arrayidx226 = getelementptr inbounds %struct.he*, %struct.he** %172, i64 %add225
  %178 = bitcast %struct.he** %arrayidx226 to %struct.xpvhv_aux*
  %xhv_name_count227 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %178, i32 0, i32 4
  %179 = load i32, i32* %xhv_name_count227, align 4
  %cmp228 = icmp eq i32 %179, -1
  br i1 %cmp228, label %cond.true229, label %cond.false230

cond.true229:                                     ; preds = %cond.false214
  br label %cond.end245

cond.false230:                                    ; preds = %cond.false214
  %180 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any231 = getelementptr inbounds %struct.gv, %struct.gv* %180, i32 0, i32 0
  %181 = load %struct.xpvgv*, %struct.xpvgv** %sv_any231, align 8
  %xnv_u232 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %181, i32 0, i32 5
  %xgv_stash233 = bitcast %union._xnvu* %xnv_u232 to %struct.hv**
  %182 = load %struct.hv*, %struct.hv** %xgv_stash233, align 8
  %sv_u234 = getelementptr inbounds %struct.hv, %struct.hv* %182, i32 0, i32 3
  %svu_hash235 = bitcast %union.anon.4* %sv_u234 to %struct.he***
  %183 = load %struct.he**, %struct.he*** %svu_hash235, align 8
  %184 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any236 = getelementptr inbounds %struct.gv, %struct.gv* %184, i32 0, i32 0
  %185 = load %struct.xpvgv*, %struct.xpvgv** %sv_any236, align 8
  %xnv_u237 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %185, i32 0, i32 5
  %xgv_stash238 = bitcast %union._xnvu* %xnv_u237 to %struct.hv**
  %186 = load %struct.hv*, %struct.hv** %xgv_stash238, align 8
  %sv_any239 = getelementptr inbounds %struct.hv, %struct.hv* %186, i32 0, i32 0
  %187 = load %struct.xpvhv*, %struct.xpvhv** %sv_any239, align 8
  %xhv_max240 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %187, i32 0, i32 3
  %188 = load i64, i64* %xhv_max240, align 8
  %add241 = add i64 %188, 1
  %arrayidx242 = getelementptr inbounds %struct.he*, %struct.he** %183, i64 %add241
  %189 = bitcast %struct.he** %arrayidx242 to %struct.xpvhv_aux*
  %xhv_name_u243 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %189, i32 0, i32 0
  %xhvnameu_name244 = bitcast %union._xhvnameu* %xhv_name_u243 to %struct.hek**
  %190 = load %struct.hek*, %struct.hek** %xhvnameu_name244, align 8
  br label %cond.end245

cond.end245:                                      ; preds = %cond.false230, %cond.true229
  %cond246 = phi %struct.hek* [ null, %cond.true229 ], [ %190, %cond.false230 ]
  br label %cond.end247

cond.end247:                                      ; preds = %cond.end245, %cond.true198
  %cond248 = phi %struct.hek* [ %168, %cond.true198 ], [ %cond246, %cond.end245 ]
  br label %cond.end249

cond.end249:                                      ; preds = %cond.end247, %cond.true167
  %cond250 = phi %struct.hek* [ %145, %cond.true167 ], [ %cond248, %cond.end247 ]
  %hek_key251 = getelementptr inbounds %struct.hek, %struct.hek* %cond250, i32 0, i32 2
  %arraydecay252 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key251, i64 0, i64 0
  %tobool253 = icmp ne i8* %arraydecay252, null
  br i1 %tobool253, label %cond.true255, label %cond.false380

cond.false254:                                    ; preds = %land.lhs.true137, %land.lhs.true121, %land.lhs.true114
  br i1 false, label %cond.true255, label %cond.false380

cond.true255:                                     ; preds = %cond.false254, %cond.end249
  %191 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any256 = getelementptr inbounds %struct.gv, %struct.gv* %191, i32 0, i32 0
  %192 = load %struct.xpvgv*, %struct.xpvgv** %sv_any256, align 8
  %xnv_u257 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %192, i32 0, i32 5
  %xgv_stash258 = bitcast %union._xnvu* %xnv_u257 to %struct.hv**
  %193 = load %struct.hv*, %struct.hv** %xgv_stash258, align 8
  %sv_flags259 = getelementptr inbounds %struct.hv, %struct.hv* %193, i32 0, i32 2
  %194 = load i32, i32* %sv_flags259, align 4
  %and260 = and i32 %194, 33554432
  %tobool261 = icmp ne i32 %and260, 0
  br i1 %tobool261, label %land.lhs.true262, label %cond.false377

land.lhs.true262:                                 ; preds = %cond.true255
  %195 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any263 = getelementptr inbounds %struct.gv, %struct.gv* %195, i32 0, i32 0
  %196 = load %struct.xpvgv*, %struct.xpvgv** %sv_any263, align 8
  %xnv_u264 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %196, i32 0, i32 5
  %xgv_stash265 = bitcast %union._xnvu* %xnv_u264 to %struct.hv**
  %197 = load %struct.hv*, %struct.hv** %xgv_stash265, align 8
  %sv_u266 = getelementptr inbounds %struct.hv, %struct.hv* %197, i32 0, i32 3
  %svu_hash267 = bitcast %union.anon.4* %sv_u266 to %struct.he***
  %198 = load %struct.he**, %struct.he*** %svu_hash267, align 8
  %199 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any268 = getelementptr inbounds %struct.gv, %struct.gv* %199, i32 0, i32 0
  %200 = load %struct.xpvgv*, %struct.xpvgv** %sv_any268, align 8
  %xnv_u269 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %200, i32 0, i32 5
  %xgv_stash270 = bitcast %union._xnvu* %xnv_u269 to %struct.hv**
  %201 = load %struct.hv*, %struct.hv** %xgv_stash270, align 8
  %sv_any271 = getelementptr inbounds %struct.hv, %struct.hv* %201, i32 0, i32 0
  %202 = load %struct.xpvhv*, %struct.xpvhv** %sv_any271, align 8
  %xhv_max272 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %202, i32 0, i32 3
  %203 = load i64, i64* %xhv_max272, align 8
  %add273 = add i64 %203, 1
  %arrayidx274 = getelementptr inbounds %struct.he*, %struct.he** %198, i64 %add273
  %204 = bitcast %struct.he** %arrayidx274 to %struct.xpvhv_aux*
  %xhv_name_u275 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %204, i32 0, i32 0
  %xhvnameu_name276 = bitcast %union._xhvnameu* %xhv_name_u275 to %struct.hek**
  %205 = load %struct.hek*, %struct.hek** %xhvnameu_name276, align 8
  %tobool277 = icmp ne %struct.hek* %205, null
  br i1 %tobool277, label %cond.true278, label %cond.false377

cond.true278:                                     ; preds = %land.lhs.true262
  %206 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any279 = getelementptr inbounds %struct.gv, %struct.gv* %206, i32 0, i32 0
  %207 = load %struct.xpvgv*, %struct.xpvgv** %sv_any279, align 8
  %xnv_u280 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %207, i32 0, i32 5
  %xgv_stash281 = bitcast %union._xnvu* %xnv_u280 to %struct.hv**
  %208 = load %struct.hv*, %struct.hv** %xgv_stash281, align 8
  %sv_u282 = getelementptr inbounds %struct.hv, %struct.hv* %208, i32 0, i32 3
  %svu_hash283 = bitcast %union.anon.4* %sv_u282 to %struct.he***
  %209 = load %struct.he**, %struct.he*** %svu_hash283, align 8
  %210 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any284 = getelementptr inbounds %struct.gv, %struct.gv* %210, i32 0, i32 0
  %211 = load %struct.xpvgv*, %struct.xpvgv** %sv_any284, align 8
  %xnv_u285 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %211, i32 0, i32 5
  %xgv_stash286 = bitcast %union._xnvu* %xnv_u285 to %struct.hv**
  %212 = load %struct.hv*, %struct.hv** %xgv_stash286, align 8
  %sv_any287 = getelementptr inbounds %struct.hv, %struct.hv* %212, i32 0, i32 0
  %213 = load %struct.xpvhv*, %struct.xpvhv** %sv_any287, align 8
  %xhv_max288 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %213, i32 0, i32 3
  %214 = load i64, i64* %xhv_max288, align 8
  %add289 = add i64 %214, 1
  %arrayidx290 = getelementptr inbounds %struct.he*, %struct.he** %209, i64 %add289
  %215 = bitcast %struct.he** %arrayidx290 to %struct.xpvhv_aux*
  %xhv_name_count291 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %215, i32 0, i32 4
  %216 = load i32, i32* %xhv_name_count291, align 4
  %cmp292 = icmp sgt i32 %216, 0
  br i1 %cmp292, label %cond.true293, label %cond.false309

cond.true293:                                     ; preds = %cond.true278
  %217 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any294 = getelementptr inbounds %struct.gv, %struct.gv* %217, i32 0, i32 0
  %218 = load %struct.xpvgv*, %struct.xpvgv** %sv_any294, align 8
  %xnv_u295 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %218, i32 0, i32 5
  %xgv_stash296 = bitcast %union._xnvu* %xnv_u295 to %struct.hv**
  %219 = load %struct.hv*, %struct.hv** %xgv_stash296, align 8
  %sv_u297 = getelementptr inbounds %struct.hv, %struct.hv* %219, i32 0, i32 3
  %svu_hash298 = bitcast %union.anon.4* %sv_u297 to %struct.he***
  %220 = load %struct.he**, %struct.he*** %svu_hash298, align 8
  %221 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any299 = getelementptr inbounds %struct.gv, %struct.gv* %221, i32 0, i32 0
  %222 = load %struct.xpvgv*, %struct.xpvgv** %sv_any299, align 8
  %xnv_u300 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %222, i32 0, i32 5
  %xgv_stash301 = bitcast %union._xnvu* %xnv_u300 to %struct.hv**
  %223 = load %struct.hv*, %struct.hv** %xgv_stash301, align 8
  %sv_any302 = getelementptr inbounds %struct.hv, %struct.hv* %223, i32 0, i32 0
  %224 = load %struct.xpvhv*, %struct.xpvhv** %sv_any302, align 8
  %xhv_max303 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %224, i32 0, i32 3
  %225 = load i64, i64* %xhv_max303, align 8
  %add304 = add i64 %225, 1
  %arrayidx305 = getelementptr inbounds %struct.he*, %struct.he** %220, i64 %add304
  %226 = bitcast %struct.he** %arrayidx305 to %struct.xpvhv_aux*
  %xhv_name_u306 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %226, i32 0, i32 0
  %xhvnameu_names307 = bitcast %union._xhvnameu* %xhv_name_u306 to %struct.hek***
  %227 = load %struct.hek**, %struct.hek*** %xhvnameu_names307, align 8
  %arrayidx308 = getelementptr inbounds %struct.hek*, %struct.hek** %227, i64 0
  %228 = load %struct.hek*, %struct.hek** %arrayidx308, align 8
  br label %cond.end375

cond.false309:                                    ; preds = %cond.true278
  %229 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any310 = getelementptr inbounds %struct.gv, %struct.gv* %229, i32 0, i32 0
  %230 = load %struct.xpvgv*, %struct.xpvgv** %sv_any310, align 8
  %xnv_u311 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %230, i32 0, i32 5
  %xgv_stash312 = bitcast %union._xnvu* %xnv_u311 to %struct.hv**
  %231 = load %struct.hv*, %struct.hv** %xgv_stash312, align 8
  %sv_u313 = getelementptr inbounds %struct.hv, %struct.hv* %231, i32 0, i32 3
  %svu_hash314 = bitcast %union.anon.4* %sv_u313 to %struct.he***
  %232 = load %struct.he**, %struct.he*** %svu_hash314, align 8
  %233 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any315 = getelementptr inbounds %struct.gv, %struct.gv* %233, i32 0, i32 0
  %234 = load %struct.xpvgv*, %struct.xpvgv** %sv_any315, align 8
  %xnv_u316 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %234, i32 0, i32 5
  %xgv_stash317 = bitcast %union._xnvu* %xnv_u316 to %struct.hv**
  %235 = load %struct.hv*, %struct.hv** %xgv_stash317, align 8
  %sv_any318 = getelementptr inbounds %struct.hv, %struct.hv* %235, i32 0, i32 0
  %236 = load %struct.xpvhv*, %struct.xpvhv** %sv_any318, align 8
  %xhv_max319 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %236, i32 0, i32 3
  %237 = load i64, i64* %xhv_max319, align 8
  %add320 = add i64 %237, 1
  %arrayidx321 = getelementptr inbounds %struct.he*, %struct.he** %232, i64 %add320
  %238 = bitcast %struct.he** %arrayidx321 to %struct.xpvhv_aux*
  %xhv_name_count322 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %238, i32 0, i32 4
  %239 = load i32, i32* %xhv_name_count322, align 4
  %cmp323 = icmp slt i32 %239, -1
  br i1 %cmp323, label %cond.true324, label %cond.false340

cond.true324:                                     ; preds = %cond.false309
  %240 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any325 = getelementptr inbounds %struct.gv, %struct.gv* %240, i32 0, i32 0
  %241 = load %struct.xpvgv*, %struct.xpvgv** %sv_any325, align 8
  %xnv_u326 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %241, i32 0, i32 5
  %xgv_stash327 = bitcast %union._xnvu* %xnv_u326 to %struct.hv**
  %242 = load %struct.hv*, %struct.hv** %xgv_stash327, align 8
  %sv_u328 = getelementptr inbounds %struct.hv, %struct.hv* %242, i32 0, i32 3
  %svu_hash329 = bitcast %union.anon.4* %sv_u328 to %struct.he***
  %243 = load %struct.he**, %struct.he*** %svu_hash329, align 8
  %244 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any330 = getelementptr inbounds %struct.gv, %struct.gv* %244, i32 0, i32 0
  %245 = load %struct.xpvgv*, %struct.xpvgv** %sv_any330, align 8
  %xnv_u331 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %245, i32 0, i32 5
  %xgv_stash332 = bitcast %union._xnvu* %xnv_u331 to %struct.hv**
  %246 = load %struct.hv*, %struct.hv** %xgv_stash332, align 8
  %sv_any333 = getelementptr inbounds %struct.hv, %struct.hv* %246, i32 0, i32 0
  %247 = load %struct.xpvhv*, %struct.xpvhv** %sv_any333, align 8
  %xhv_max334 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %247, i32 0, i32 3
  %248 = load i64, i64* %xhv_max334, align 8
  %add335 = add i64 %248, 1
  %arrayidx336 = getelementptr inbounds %struct.he*, %struct.he** %243, i64 %add335
  %249 = bitcast %struct.he** %arrayidx336 to %struct.xpvhv_aux*
  %xhv_name_u337 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %249, i32 0, i32 0
  %xhvnameu_names338 = bitcast %union._xhvnameu* %xhv_name_u337 to %struct.hek***
  %250 = load %struct.hek**, %struct.hek*** %xhvnameu_names338, align 8
  %arrayidx339 = getelementptr inbounds %struct.hek*, %struct.hek** %250, i64 1
  %251 = load %struct.hek*, %struct.hek** %arrayidx339, align 8
  br label %cond.end373

cond.false340:                                    ; preds = %cond.false309
  %252 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any341 = getelementptr inbounds %struct.gv, %struct.gv* %252, i32 0, i32 0
  %253 = load %struct.xpvgv*, %struct.xpvgv** %sv_any341, align 8
  %xnv_u342 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %253, i32 0, i32 5
  %xgv_stash343 = bitcast %union._xnvu* %xnv_u342 to %struct.hv**
  %254 = load %struct.hv*, %struct.hv** %xgv_stash343, align 8
  %sv_u344 = getelementptr inbounds %struct.hv, %struct.hv* %254, i32 0, i32 3
  %svu_hash345 = bitcast %union.anon.4* %sv_u344 to %struct.he***
  %255 = load %struct.he**, %struct.he*** %svu_hash345, align 8
  %256 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any346 = getelementptr inbounds %struct.gv, %struct.gv* %256, i32 0, i32 0
  %257 = load %struct.xpvgv*, %struct.xpvgv** %sv_any346, align 8
  %xnv_u347 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %257, i32 0, i32 5
  %xgv_stash348 = bitcast %union._xnvu* %xnv_u347 to %struct.hv**
  %258 = load %struct.hv*, %struct.hv** %xgv_stash348, align 8
  %sv_any349 = getelementptr inbounds %struct.hv, %struct.hv* %258, i32 0, i32 0
  %259 = load %struct.xpvhv*, %struct.xpvhv** %sv_any349, align 8
  %xhv_max350 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %259, i32 0, i32 3
  %260 = load i64, i64* %xhv_max350, align 8
  %add351 = add i64 %260, 1
  %arrayidx352 = getelementptr inbounds %struct.he*, %struct.he** %255, i64 %add351
  %261 = bitcast %struct.he** %arrayidx352 to %struct.xpvhv_aux*
  %xhv_name_count353 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %261, i32 0, i32 4
  %262 = load i32, i32* %xhv_name_count353, align 4
  %cmp354 = icmp eq i32 %262, -1
  br i1 %cmp354, label %cond.true355, label %cond.false356

cond.true355:                                     ; preds = %cond.false340
  br label %cond.end371

cond.false356:                                    ; preds = %cond.false340
  %263 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any357 = getelementptr inbounds %struct.gv, %struct.gv* %263, i32 0, i32 0
  %264 = load %struct.xpvgv*, %struct.xpvgv** %sv_any357, align 8
  %xnv_u358 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %264, i32 0, i32 5
  %xgv_stash359 = bitcast %union._xnvu* %xnv_u358 to %struct.hv**
  %265 = load %struct.hv*, %struct.hv** %xgv_stash359, align 8
  %sv_u360 = getelementptr inbounds %struct.hv, %struct.hv* %265, i32 0, i32 3
  %svu_hash361 = bitcast %union.anon.4* %sv_u360 to %struct.he***
  %266 = load %struct.he**, %struct.he*** %svu_hash361, align 8
  %267 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any362 = getelementptr inbounds %struct.gv, %struct.gv* %267, i32 0, i32 0
  %268 = load %struct.xpvgv*, %struct.xpvgv** %sv_any362, align 8
  %xnv_u363 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %268, i32 0, i32 5
  %xgv_stash364 = bitcast %union._xnvu* %xnv_u363 to %struct.hv**
  %269 = load %struct.hv*, %struct.hv** %xgv_stash364, align 8
  %sv_any365 = getelementptr inbounds %struct.hv, %struct.hv* %269, i32 0, i32 0
  %270 = load %struct.xpvhv*, %struct.xpvhv** %sv_any365, align 8
  %xhv_max366 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %270, i32 0, i32 3
  %271 = load i64, i64* %xhv_max366, align 8
  %add367 = add i64 %271, 1
  %arrayidx368 = getelementptr inbounds %struct.he*, %struct.he** %266, i64 %add367
  %272 = bitcast %struct.he** %arrayidx368 to %struct.xpvhv_aux*
  %xhv_name_u369 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %272, i32 0, i32 0
  %xhvnameu_name370 = bitcast %union._xhvnameu* %xhv_name_u369 to %struct.hek**
  %273 = load %struct.hek*, %struct.hek** %xhvnameu_name370, align 8
  br label %cond.end371

cond.end371:                                      ; preds = %cond.false356, %cond.true355
  %cond372 = phi %struct.hek* [ null, %cond.true355 ], [ %273, %cond.false356 ]
  br label %cond.end373

cond.end373:                                      ; preds = %cond.end371, %cond.true324
  %cond374 = phi %struct.hek* [ %251, %cond.true324 ], [ %cond372, %cond.end371 ]
  br label %cond.end375

cond.end375:                                      ; preds = %cond.end373, %cond.true293
  %cond376 = phi %struct.hek* [ %228, %cond.true293 ], [ %cond374, %cond.end373 ]
  br label %cond.end378

cond.false377:                                    ; preds = %land.lhs.true262, %cond.true255
  br label %cond.end378

cond.end378:                                      ; preds = %cond.false377, %cond.end375
  %cond379 = phi %struct.hek* [ %cond376, %cond.end375 ], [ null, %cond.false377 ]
  %call = call %struct.sv* @Perl_newSVhek(%struct.hek* %cond379)
  br label %cond.end382

cond.false380:                                    ; preds = %cond.false254, %cond.end249, %cond.false113, %cond.end, %if.end
  %call381 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i64 8, i32 0)
  br label %cond.end382

cond.end382:                                      ; preds = %cond.false380, %cond.end378
  %cond383 = phi %struct.sv* [ %call, %cond.end378 ], [ %call381, %cond.false380 ]
  store %struct.sv* %cond383, %struct.sv** %gvname, align 8
  %274 = load %struct.sv*, %struct.sv** %gvname, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %274, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.95, i64 0, i64 0), i64 10, i32 2)
  %275 = load %struct.sv*, %struct.sv** %gvname, align 8
  %call384 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %275, i32 2, i32 13)
  store %struct.gv* %call384, %struct.gv** %anongv, align 8
  %276 = load %struct.sv*, %struct.sv** %gvname, align 8
  %277 = bitcast %struct.sv* %276 to i8*
  %278 = bitcast i8* %277 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %278)
  %279 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any385 = getelementptr inbounds %struct.cv, %struct.cv* %279, i32 0, i32 0
  %280 = load %struct.xpvcv*, %struct.xpvcv** %sv_any385, align 8
  %281 = bitcast %struct.xpvcv* %280 to i8*
  %282 = bitcast i8* %281 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %282, i32 0, i32 12
  %283 = load i32, i32* %xcv_flags, align 4
  %or = or i32 %283, 128
  store i32 %or, i32* %xcv_flags, align 4
  %284 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any386 = getelementptr inbounds %struct.cv, %struct.cv* %284, i32 0, i32 0
  %285 = load %struct.xpvcv*, %struct.xpvcv** %sv_any386, align 8
  %286 = bitcast %struct.xpvcv* %285 to i8*
  %287 = bitcast i8* %286 to %struct.xpvcv*
  %xcv_flags387 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %287, i32 0, i32 12
  %288 = load i32, i32* %xcv_flags387, align 4
  %or388 = or i32 %288, 1024
  store i32 %or388, i32* %xcv_flags387, align 4
  %289 = load %struct.gv*, %struct.gv** %anongv, align 8
  %290 = bitcast %struct.gv* %289 to i8*
  %291 = bitcast i8* %290 to %struct.sv*
  %call389 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %291)
  %292 = bitcast %struct.sv* %call389 to i8*
  %293 = bitcast i8* %292 to %struct.gv*
  %294 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any390 = getelementptr inbounds %struct.cv, %struct.cv* %294, i32 0, i32 0
  %295 = load %struct.xpvcv*, %struct.xpvcv** %sv_any390, align 8
  %xcv_gv_u391 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %295, i32 0, i32 7
  %xcv_gv392 = bitcast %union.anon.10* %xcv_gv_u391 to %struct.gv**
  store %struct.gv* %293, %struct.gv** %xcv_gv392, align 8
  br label %return

return:                                           ; preds = %cond.end382, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_insert_flags(%struct.sv* %bigstr, i64 %offset, i64 %len, i8* %little, i64 %littlelen, i32 %flags) #0 {
entry:
  %bigstr.addr = alloca %struct.sv*, align 8
  %offset.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %little.addr = alloca i8*, align 8
  %littlelen.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %big = alloca i8*, align 8
  %mid = alloca i8*, align 8
  %midend = alloca i8*, align 8
  %bigend = alloca i8*, align 8
  %i = alloca i64, align 8
  %curlen = alloca i64, align 8
  store %struct.sv* %bigstr, %struct.sv** %bigstr.addr, align 8
  store i64 %offset, i64* %offset.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i8* %little, i8** %little.addr, align 8
  store i64 %littlelen, i64* %littlelen.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 430018304
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 2
  %5 = load i64, i64* %xpv_cur, align 8
  store i64 %5, i64* %curlen, align 8
  %6 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %7 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %9 = load i32, i32* %flags.addr, align 4
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %8, i64* %curlen, i32 %9)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %7, %cond.true ], [ %call, %cond.false ]
  %10 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %11, 2147418367
  store i32 %and2, i32* %sv_flags1, align 4
  %12 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags3, align 4
  %or = or i32 %13, 17408
  store i32 %or, i32* %sv_flags3, align 4
  %14 = load i64, i64* %offset.addr, align 8
  %15 = load i64, i64* %len.addr, align 8
  %add = add i64 %14, %15
  %16 = load i64, i64* %curlen, align 8
  %cmp4 = icmp ugt i64 %add, %16
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %17 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %18, 268435456
  %tobool = icmp ne i32 %and6, 0
  br i1 %tobool, label %cond.true11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %19 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any7 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any7, align 8
  %21 = bitcast i8* %20 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %21, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %22 = load i64, i64* %xpvlenu_len, align 8
  %23 = load i64, i64* %offset.addr, align 8
  %24 = load i64, i64* %len.addr, align 8
  %add8 = add i64 %23, %24
  %add9 = add i64 %add8, 1
  %cmp10 = icmp ult i64 %22, %add9
  br i1 %cmp10, label %cond.true11, label %cond.false15

cond.true11:                                      ; preds = %lor.lhs.false, %if.then
  %25 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %26 = load i64, i64* %offset.addr, align 8
  %27 = load i64, i64* %len.addr, align 8
  %add12 = add i64 %26, %27
  %add13 = add i64 %add12, 1
  %call14 = call i8* @Perl_sv_grow(%struct.sv* %25, i64 %add13)
  br label %cond.end18

cond.false15:                                     ; preds = %lor.lhs.false
  %28 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_u16 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 3
  %svu_pv17 = bitcast %union.anon* %sv_u16 to i8**
  %29 = load i8*, i8** %svu_pv17, align 8
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false15, %cond.true11
  %cond19 = phi i8* [ %call14, %cond.true11 ], [ %29, %cond.false15 ]
  %30 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_u20 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 3
  %svu_pv21 = bitcast %union.anon* %sv_u20 to i8**
  %31 = load i8*, i8** %svu_pv21, align 8
  %32 = load i64, i64* %curlen, align 8
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 %32
  %33 = load i64, i64* %offset.addr, align 8
  %34 = load i64, i64* %len.addr, align 8
  %add22 = add i64 %33, %34
  %35 = load i64, i64* %curlen, align 8
  %sub = sub i64 %add22, %35
  %mul = mul i64 %sub, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr, i8 0, i64 %mul, i1 false)
  br label %do.body

do.body:                                          ; preds = %cond.end18
  %36 = load i64, i64* %offset.addr, align 8
  %37 = load i64, i64* %len.addr, align 8
  %add23 = add i64 %36, %37
  %38 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any24, align 8
  %40 = bitcast i8* %39 to %struct.xpv*
  %xpv_cur25 = getelementptr inbounds %struct.xpv, %struct.xpv* %40, i32 0, i32 2
  store i64 %add23, i64* %xpv_cur25, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.end:                                           ; preds = %do.end, %cond.end
  br label %do.body26

do.body26:                                        ; preds = %if.end
  %41 = load i8, i8* @PL_tainting, align 1
  %tobool27 = trunc i8 %41 to i1
  br i1 %tobool27, label %cond.true28, label %cond.false29

cond.true28:                                      ; preds = %do.body26
  br i1 true, label %if.then30, label %if.end43

cond.false29:                                     ; preds = %do.body26
  br i1 false, label %if.then30, label %if.end43

if.then30:                                        ; preds = %cond.false29, %cond.true28
  %42 = load i8, i8* @PL_tainted, align 1
  %tobool31 = trunc i8 %42 to i1
  br i1 %tobool31, label %cond.true32, label %cond.false33

cond.true32:                                      ; preds = %if.then30
  br i1 true, label %if.then34, label %if.end42

cond.false33:                                     ; preds = %if.then30
  br i1 false, label %if.then34, label %if.end42

if.then34:                                        ; preds = %cond.false33, %cond.true32
  br label %do.body35

do.body35:                                        ; preds = %if.then34
  %43 = load i8, i8* @PL_tainting, align 1
  %tobool36 = trunc i8 %43 to i1
  br i1 %tobool36, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %do.body35
  br i1 true, label %if.then39, label %if.end40

cond.false38:                                     ; preds = %do.body35
  br i1 false, label %if.then39, label %if.end40

if.then39:                                        ; preds = %cond.false38, %cond.true37
  %44 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %44, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %cond.false38, %cond.true37
  br label %do.end41

do.end41:                                         ; preds = %if.end40
  br label %if.end42

if.end42:                                         ; preds = %do.end41, %cond.false33, %cond.true32
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %cond.false29, %cond.true28
  br label %do.end44

do.end44:                                         ; preds = %if.end43
  %45 = load i64, i64* %littlelen.addr, align 8
  %46 = load i64, i64* %len.addr, align 8
  %sub45 = sub i64 %45, %46
  store i64 %sub45, i64* %i, align 8
  %47 = load i64, i64* %i, align 8
  %cmp46 = icmp sgt i64 %47, 0
  br i1 %cmp46, label %if.then47, label %if.else

if.then47:                                        ; preds = %do.end44
  %48 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %49, 268435456
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %cond.true60, label %lor.lhs.false51

lor.lhs.false51:                                  ; preds = %if.then47
  %50 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any52 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any52, align 8
  %52 = bitcast i8* %51 to %struct.xpv*
  %xpv_len_u53 = getelementptr inbounds %struct.xpv, %struct.xpv* %52, i32 0, i32 3
  %xpvlenu_len54 = bitcast %union.anon.19* %xpv_len_u53 to i64*
  %53 = load i64, i64* %xpvlenu_len54, align 8
  %54 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any55 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any55, align 8
  %56 = bitcast i8* %55 to %struct.xpv*
  %xpv_cur56 = getelementptr inbounds %struct.xpv, %struct.xpv* %56, i32 0, i32 2
  %57 = load i64, i64* %xpv_cur56, align 8
  %58 = load i64, i64* %i, align 8
  %add57 = add i64 %57, %58
  %add58 = add i64 %add57, 1
  %cmp59 = icmp ult i64 %53, %add58
  br i1 %cmp59, label %cond.true60, label %cond.false66

cond.true60:                                      ; preds = %lor.lhs.false51, %if.then47
  %59 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %60 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any61 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any61, align 8
  %62 = bitcast i8* %61 to %struct.xpv*
  %xpv_cur62 = getelementptr inbounds %struct.xpv, %struct.xpv* %62, i32 0, i32 2
  %63 = load i64, i64* %xpv_cur62, align 8
  %64 = load i64, i64* %i, align 8
  %add63 = add i64 %63, %64
  %add64 = add i64 %add63, 1
  %call65 = call i8* @Perl_sv_grow(%struct.sv* %59, i64 %add64)
  br label %cond.end69

cond.false66:                                     ; preds = %lor.lhs.false51
  %65 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_u67 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 3
  %svu_pv68 = bitcast %union.anon* %sv_u67 to i8**
  %66 = load i8*, i8** %svu_pv68, align 8
  br label %cond.end69

cond.end69:                                       ; preds = %cond.false66, %cond.true60
  %cond70 = phi i8* [ %call65, %cond.true60 ], [ %66, %cond.false66 ]
  store i8* %cond70, i8** %big, align 8
  %67 = load i8*, i8** %big, align 8
  %68 = load i64, i64* %offset.addr, align 8
  %add.ptr71 = getelementptr inbounds i8, i8* %67, i64 %68
  %69 = load i64, i64* %len.addr, align 8
  %add.ptr72 = getelementptr inbounds i8, i8* %add.ptr71, i64 %69
  store i8* %add.ptr72, i8** %mid, align 8
  %70 = load i8*, i8** %big, align 8
  %71 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any73 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any73, align 8
  %73 = bitcast i8* %72 to %struct.xpv*
  %xpv_cur74 = getelementptr inbounds %struct.xpv, %struct.xpv* %73, i32 0, i32 2
  %74 = load i64, i64* %xpv_cur74, align 8
  %add.ptr75 = getelementptr inbounds i8, i8* %70, i64 %74
  store i8* %add.ptr75, i8** %bigend, align 8
  store i8* %add.ptr75, i8** %midend, align 8
  %75 = load i64, i64* %i, align 8
  %76 = load i8*, i8** %bigend, align 8
  %add.ptr76 = getelementptr inbounds i8, i8* %76, i64 %75
  store i8* %add.ptr76, i8** %bigend, align 8
  %77 = load i8*, i8** %bigend, align 8
  store i8 0, i8* %77, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end69
  %78 = load i8*, i8** %midend, align 8
  %79 = load i8*, i8** %mid, align 8
  %cmp77 = icmp ugt i8* %78, %79
  br i1 %cmp77, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %80 = load i8*, i8** %midend, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %80, i32 -1
  store i8* %incdec.ptr, i8** %midend, align 8
  %81 = load i8, i8* %incdec.ptr, align 1
  %82 = load i8*, i8** %bigend, align 8
  %incdec.ptr78 = getelementptr inbounds i8, i8* %82, i32 -1
  store i8* %incdec.ptr78, i8** %bigend, align 8
  store i8 %81, i8* %incdec.ptr78, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %83 = load i8*, i8** %big, align 8
  %84 = load i64, i64* %offset.addr, align 8
  %add.ptr79 = getelementptr inbounds i8, i8* %83, i64 %84
  %85 = load i8*, i8** %little.addr, align 8
  %86 = load i64, i64* %littlelen.addr, align 8
  %mul80 = mul i64 %86, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr79, i8* align 1 %85, i64 %mul80, i1 false)
  br label %do.body81

do.body81:                                        ; preds = %while.end
  %87 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any82 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 0
  %88 = load i8*, i8** %sv_any82, align 8
  %89 = bitcast i8* %88 to %struct.xpv*
  %xpv_cur83 = getelementptr inbounds %struct.xpv, %struct.xpv* %89, i32 0, i32 2
  %90 = load i64, i64* %xpv_cur83, align 8
  %91 = load i64, i64* %i, align 8
  %add84 = add i64 %90, %91
  %92 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 0
  %93 = load i8*, i8** %sv_any85, align 8
  %94 = bitcast i8* %93 to %struct.xpv*
  %xpv_cur86 = getelementptr inbounds %struct.xpv, %struct.xpv* %94, i32 0, i32 2
  store i64 %add84, i64* %xpv_cur86, align 8
  br label %do.end87

do.end87:                                         ; preds = %do.body81
  br label %do.body88

do.body88:                                        ; preds = %do.end87
  %95 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags89 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 2
  %96 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %96, 4194304
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %cond.true92, label %cond.false93

cond.true92:                                      ; preds = %do.body88
  br i1 true, label %if.then94, label %if.end96

cond.false93:                                     ; preds = %do.body88
  br i1 false, label %if.then94, label %if.end96

if.then94:                                        ; preds = %cond.false93, %cond.true92
  %97 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %call95 = call i32 @Perl_mg_set(%struct.sv* %97)
  br label %if.end96

if.end96:                                         ; preds = %if.then94, %cond.false93, %cond.true92
  br label %do.end97

do.end97:                                         ; preds = %if.end96
  br label %do.end186

if.else:                                          ; preds = %do.end44
  %98 = load i64, i64* %i, align 8
  %cmp98 = icmp eq i64 %98, 0
  br i1 %cmp98, label %if.then99, label %if.end114

if.then99:                                        ; preds = %if.else
  %99 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_u100 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 3
  %svu_pv101 = bitcast %union.anon* %sv_u100 to i8**
  %100 = load i8*, i8** %svu_pv101, align 8
  %101 = load i64, i64* %offset.addr, align 8
  %add.ptr102 = getelementptr inbounds i8, i8* %100, i64 %101
  %102 = load i8*, i8** %little.addr, align 8
  %103 = load i64, i64* %len.addr, align 8
  %mul103 = mul i64 %103, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr102, i8* align 1 %102, i64 %mul103, i1 false)
  br label %do.body104

do.body104:                                       ; preds = %if.then99
  %104 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags105 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 2
  %105 = load i32, i32* %sv_flags105, align 4
  %and106 = and i32 %105, 4194304
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %cond.true108, label %cond.false109

cond.true108:                                     ; preds = %do.body104
  br i1 true, label %if.then110, label %if.end112

cond.false109:                                    ; preds = %do.body104
  br i1 false, label %if.then110, label %if.end112

if.then110:                                       ; preds = %cond.false109, %cond.true108
  %106 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %call111 = call i32 @Perl_mg_set(%struct.sv* %106)
  br label %if.end112

if.end112:                                        ; preds = %if.then110, %cond.false109, %cond.true108
  br label %do.end113

do.end113:                                        ; preds = %if.end112
  br label %do.end186

if.end114:                                        ; preds = %if.else
  br label %if.end115

if.end115:                                        ; preds = %if.end114
  %107 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_u116 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 3
  %svu_pv117 = bitcast %union.anon* %sv_u116 to i8**
  %108 = load i8*, i8** %svu_pv117, align 8
  store i8* %108, i8** %big, align 8
  %109 = load i8*, i8** %big, align 8
  %110 = load i64, i64* %offset.addr, align 8
  %add.ptr118 = getelementptr inbounds i8, i8* %109, i64 %110
  store i8* %add.ptr118, i8** %mid, align 8
  %111 = load i8*, i8** %mid, align 8
  %112 = load i64, i64* %len.addr, align 8
  %add.ptr119 = getelementptr inbounds i8, i8* %111, i64 %112
  store i8* %add.ptr119, i8** %midend, align 8
  %113 = load i8*, i8** %big, align 8
  %114 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any120 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 0
  %115 = load i8*, i8** %sv_any120, align 8
  %116 = bitcast i8* %115 to %struct.xpv*
  %xpv_cur121 = getelementptr inbounds %struct.xpv, %struct.xpv* %116, i32 0, i32 2
  %117 = load i64, i64* %xpv_cur121, align 8
  %add.ptr122 = getelementptr inbounds i8, i8* %113, i64 %117
  store i8* %add.ptr122, i8** %bigend, align 8
  %118 = load i8*, i8** %midend, align 8
  %119 = load i8*, i8** %bigend, align 8
  %cmp123 = icmp ugt i8* %118, %119
  br i1 %cmp123, label %if.then124, label %if.end125

if.then124:                                       ; preds = %if.end115
  %120 = load i8*, i8** %midend, align 8
  %121 = load i8*, i8** %bigend, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.32, i64 0, i64 0), i8* %120, i8* %121)
  br label %if.end125

if.end125:                                        ; preds = %if.then124, %if.end115
  %122 = load i8*, i8** %mid, align 8
  %123 = load i8*, i8** %big, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %122 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %123 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %124 = load i8*, i8** %bigend, align 8
  %125 = load i8*, i8** %midend, align 8
  %sub.ptr.lhs.cast126 = ptrtoint i8* %124 to i64
  %sub.ptr.rhs.cast127 = ptrtoint i8* %125 to i64
  %sub.ptr.sub128 = sub i64 %sub.ptr.lhs.cast126, %sub.ptr.rhs.cast127
  %cmp129 = icmp sgt i64 %sub.ptr.sub, %sub.ptr.sub128
  br i1 %cmp129, label %if.then130, label %if.else151

if.then130:                                       ; preds = %if.end125
  %126 = load i64, i64* %littlelen.addr, align 8
  %tobool131 = icmp ne i64 %126, 0
  br i1 %tobool131, label %if.then132, label %if.end135

if.then132:                                       ; preds = %if.then130
  %127 = load i8*, i8** %mid, align 8
  %128 = load i8*, i8** %little.addr, align 8
  %129 = load i64, i64* %littlelen.addr, align 8
  %mul133 = mul i64 %129, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %127, i8* align 1 %128, i64 %mul133, i1 false)
  %130 = load i64, i64* %littlelen.addr, align 8
  %131 = load i8*, i8** %mid, align 8
  %add.ptr134 = getelementptr inbounds i8, i8* %131, i64 %130
  store i8* %add.ptr134, i8** %mid, align 8
  br label %if.end135

if.end135:                                        ; preds = %if.then132, %if.then130
  %132 = load i8*, i8** %bigend, align 8
  %133 = load i8*, i8** %midend, align 8
  %sub.ptr.lhs.cast136 = ptrtoint i8* %132 to i64
  %sub.ptr.rhs.cast137 = ptrtoint i8* %133 to i64
  %sub.ptr.sub138 = sub i64 %sub.ptr.lhs.cast136, %sub.ptr.rhs.cast137
  store i64 %sub.ptr.sub138, i64* %i, align 8
  %134 = load i64, i64* %i, align 8
  %cmp139 = icmp sgt i64 %134, 0
  br i1 %cmp139, label %if.then140, label %if.end143

if.then140:                                       ; preds = %if.end135
  %135 = load i8*, i8** %mid, align 8
  %136 = load i8*, i8** %midend, align 8
  %137 = load i64, i64* %i, align 8
  %mul141 = mul i64 %137, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %135, i8* align 1 %136, i64 %mul141, i1 false)
  %138 = load i64, i64* %i, align 8
  %139 = load i8*, i8** %mid, align 8
  %add.ptr142 = getelementptr inbounds i8, i8* %139, i64 %138
  store i8* %add.ptr142, i8** %mid, align 8
  br label %if.end143

if.end143:                                        ; preds = %if.then140, %if.end135
  %140 = load i8*, i8** %mid, align 8
  store i8 0, i8* %140, align 1
  br label %do.body144

do.body144:                                       ; preds = %if.end143
  %141 = load i8*, i8** %mid, align 8
  %142 = load i8*, i8** %big, align 8
  %sub.ptr.lhs.cast145 = ptrtoint i8* %141 to i64
  %sub.ptr.rhs.cast146 = ptrtoint i8* %142 to i64
  %sub.ptr.sub147 = sub i64 %sub.ptr.lhs.cast145, %sub.ptr.rhs.cast146
  %143 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_any148 = getelementptr inbounds %struct.sv, %struct.sv* %143, i32 0, i32 0
  %144 = load i8*, i8** %sv_any148, align 8
  %145 = bitcast i8* %144 to %struct.xpv*
  %xpv_cur149 = getelementptr inbounds %struct.xpv, %struct.xpv* %145, i32 0, i32 2
  store i64 %sub.ptr.sub147, i64* %xpv_cur149, align 8
  br label %do.end150

do.end150:                                        ; preds = %do.body144
  br label %if.end176

if.else151:                                       ; preds = %if.end125
  %146 = load i8*, i8** %mid, align 8
  %147 = load i8*, i8** %big, align 8
  %sub.ptr.lhs.cast152 = ptrtoint i8* %146 to i64
  %sub.ptr.rhs.cast153 = ptrtoint i8* %147 to i64
  %sub.ptr.sub154 = sub i64 %sub.ptr.lhs.cast152, %sub.ptr.rhs.cast153
  store i64 %sub.ptr.sub154, i64* %i, align 8
  %tobool155 = icmp ne i64 %sub.ptr.sub154, 0
  br i1 %tobool155, label %if.then156, label %if.else167

if.then156:                                       ; preds = %if.else151
  %148 = load i64, i64* %littlelen.addr, align 8
  %149 = load i8*, i8** %midend, align 8
  %idx.neg = sub i64 0, %148
  %add.ptr157 = getelementptr inbounds i8, i8* %149, i64 %idx.neg
  store i8* %add.ptr157, i8** %midend, align 8
  %150 = load i8*, i8** %midend, align 8
  store i8* %150, i8** %mid, align 8
  %151 = load i8*, i8** %midend, align 8
  %152 = load i64, i64* %i, align 8
  %idx.neg158 = sub i64 0, %152
  %add.ptr159 = getelementptr inbounds i8, i8* %151, i64 %idx.neg158
  %153 = load i8*, i8** %big, align 8
  %154 = load i64, i64* %i, align 8
  %mul160 = mul i64 %154, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr159, i8* align 1 %153, i64 %mul160, i1 false)
  %155 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %156 = load i8*, i8** %midend, align 8
  %157 = load i64, i64* %i, align 8
  %idx.neg161 = sub i64 0, %157
  %add.ptr162 = getelementptr inbounds i8, i8* %156, i64 %idx.neg161
  call void @Perl_sv_chop(%struct.sv* %155, i8* %add.ptr162)
  %158 = load i64, i64* %littlelen.addr, align 8
  %tobool163 = icmp ne i64 %158, 0
  br i1 %tobool163, label %if.then164, label %if.end166

if.then164:                                       ; preds = %if.then156
  %159 = load i8*, i8** %mid, align 8
  %160 = load i8*, i8** %little.addr, align 8
  %161 = load i64, i64* %littlelen.addr, align 8
  %mul165 = mul i64 %161, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %159, i8* align 1 %160, i64 %mul165, i1 false)
  br label %if.end166

if.end166:                                        ; preds = %if.then164, %if.then156
  br label %if.end175

if.else167:                                       ; preds = %if.else151
  %162 = load i64, i64* %littlelen.addr, align 8
  %tobool168 = icmp ne i64 %162, 0
  br i1 %tobool168, label %if.then169, label %if.else173

if.then169:                                       ; preds = %if.else167
  %163 = load i64, i64* %littlelen.addr, align 8
  %164 = load i8*, i8** %midend, align 8
  %idx.neg170 = sub i64 0, %163
  %add.ptr171 = getelementptr inbounds i8, i8* %164, i64 %idx.neg170
  store i8* %add.ptr171, i8** %midend, align 8
  %165 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %166 = load i8*, i8** %midend, align 8
  call void @Perl_sv_chop(%struct.sv* %165, i8* %166)
  %167 = load i8*, i8** %midend, align 8
  %168 = load i8*, i8** %little.addr, align 8
  %169 = load i64, i64* %littlelen.addr, align 8
  %mul172 = mul i64 %169, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %167, i8* align 1 %168, i64 %mul172, i1 false)
  br label %if.end174

if.else173:                                       ; preds = %if.else167
  %170 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %171 = load i8*, i8** %midend, align 8
  call void @Perl_sv_chop(%struct.sv* %170, i8* %171)
  br label %if.end174

if.end174:                                        ; preds = %if.else173, %if.then169
  br label %if.end175

if.end175:                                        ; preds = %if.end174, %if.end166
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %do.end150
  br label %do.body177

do.body177:                                       ; preds = %if.end176
  %172 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %sv_flags178 = getelementptr inbounds %struct.sv, %struct.sv* %172, i32 0, i32 2
  %173 = load i32, i32* %sv_flags178, align 4
  %and179 = and i32 %173, 4194304
  %tobool180 = icmp ne i32 %and179, 0
  br i1 %tobool180, label %cond.true181, label %cond.false182

cond.true181:                                     ; preds = %do.body177
  br i1 true, label %if.then183, label %if.end185

cond.false182:                                    ; preds = %do.body177
  br i1 false, label %if.then183, label %if.end185

if.then183:                                       ; preds = %cond.false182, %cond.true181
  %174 = load %struct.sv*, %struct.sv** %bigstr.addr, align 8
  %call184 = call i32 @Perl_mg_set(%struct.sv* %174)
  br label %if.end185

if.end185:                                        ; preds = %if.then183, %cond.false182, %cond.true181
  br label %do.end186

do.end186:                                        ; preds = %do.end97, %do.end113, %if.end185
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_replace(%struct.sv* %sv, %struct.sv* %nsv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %nsv.addr = alloca %struct.sv*, align 8
  %refcnt = alloca i32, align 4
  %old_flags = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.sv* %nsv, %struct.sv** %nsv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 1
  %1 = load i32, i32* %sv_refcnt, align 8
  store i32 %1, i32* %refcnt, align 4
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 427886592
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %4, i32 4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_refcnt1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 1
  %6 = load i32, i32* %sv_refcnt1, align 8
  %cmp = icmp ne i32 %6, 1
  br i1 %cmp, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %7 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_refcnt3 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 1
  %8 = load i32, i32* %sv_refcnt3, align 8
  %conv = zext i32 %8 to i64
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.33, i64 0, i64 0), i64 %conv)
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %10, 14680064
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then8, label %if.end27

if.then8:                                         ; preds = %if.end4
  %11 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %12, 14680064
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.then8
  %13 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %call = call i32 @Perl_mg_free(%struct.sv* %13)
  br label %if.end13

if.else:                                          ; preds = %if.then8
  %14 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %14, i32 7)
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  br label %do.body

do.body:                                          ; preds = %if.end13
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %17, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %18 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %19 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_any14 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any14, align 8
  %21 = bitcast i8* %20 to %struct.xpvmg*
  %xmg_u15 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %21, i32 0, i32 1
  %xmg_magic16 = bitcast %union._xmgu* %xmg_u15 to %struct.magic**
  store %struct.magic* %18, %struct.magic** %xmg_magic16, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %23, 14680064
  %24 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags19, align 4
  %or = or i32 %25, %and18
  store i32 %or, i32* %sv_flags19, align 4
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %27, -14680065
  store i32 %and21, i32* %sv_flags20, align 4
  br label %do.body22

do.body22:                                        ; preds = %do.end
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any23, align 8
  %30 = bitcast i8* %29 to %struct.xpvmg*
  %xmg_u24 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %30, i32 0, i32 1
  %xmg_magic25 = bitcast %union._xmgu* %xmg_u24 to %struct.magic**
  store %struct.magic* null, %struct.magic** %xmg_magic25, align 8
  br label %do.end26

do.end26:                                         ; preds = %do.body22
  br label %if.end27

if.end27:                                         ; preds = %do.end26, %if.end4
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt28 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 1
  store i32 0, i32* %sv_refcnt28, align 8
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_clear(%struct.sv* %32)
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %34 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %35 = bitcast %struct.sv* %33 to i8*
  %36 = bitcast %struct.sv* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false)
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %38, 255
  %cmp31 = icmp eq i32 %and30, 1
  br i1 %cmp31, label %if.then33, label %if.end35

if.then33:                                        ; preds = %if.end27
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 3
  %svu_iv = bitcast %union.anon* %sv_u to i64*
  %40 = bitcast i64* %svu_iv to i8*
  %add.ptr = getelementptr inbounds i8, i8* %40, i64 sub (i64 0, i64 ptrtoint (i64* getelementptr inbounds (%struct.xpviv, %struct.xpviv* null, i32 0, i32 4, i32 0) to i64))
  %41 = bitcast i8* %add.ptr to %struct.xpviv*
  %42 = bitcast %struct.xpviv* %41 to i8*
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any34 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  store i8* %42, i8** %sv_any34, align 8
  br label %if.end35

if.end35:                                         ; preds = %if.then33, %if.end27
  %44 = load i32, i32* %refcnt, align 4
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt36 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 1
  store i32 %44, i32* %sv_refcnt36, align 8
  %46 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags37, align 4
  %or38 = or i32 %47, 255
  store i32 %or38, i32* %sv_flags37, align 4
  %48 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_refcnt39 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 1
  store i32 0, i32* %sv_refcnt39, align 8
  br label %do.body40

do.body40:                                        ; preds = %if.end35
  %49 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags41, align 4
  store i32 %50, i32* %old_flags, align 4
  %51 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  store i32 255, i32* %sv_flags42, align 4
  %52 = load i32, i32* %old_flags, align 4
  %and43 = and i32 %52, 67108864
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %do.body40
  %53 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %54 = bitcast %struct.sv* %53 to i8*
  %55 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  %sv_any46 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  store i8* %54, i8** %sv_any46, align 8
  %56 = load %struct.sv*, %struct.sv** %nsv.addr, align 8
  store %struct.sv* %56, %struct.sv** @PL_sv_root, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %do.body40
  %57 = load i64, i64* @PL_sv_count, align 8
  %dec = add nsw i64 %57, -1
  store i64 %dec, i64* @PL_sv_count, align 8
  br label %do.end48

do.end48:                                         ; preds = %if.end47
  ret void
}

declare dso_local i32 @Perl_mg_free(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_clear(%struct.sv* %orig_sv) #0 {
entry:
  %orig_sv.addr = alloca %struct.sv*, align 8
  %stash = alloca %struct.hv*, align 8
  %type = alloca i32, align 4
  %sv_type_details = alloca %struct.body_details*, align 8
  %iter_sv = alloca %struct.sv*, align 8
  %next_sv = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %hash_index = alloca i64, align 8
  %hek = alloca %struct.hek*, align 8
  %av = alloca %struct.av*, align 8
  %offset = alloca i64, align 8
  %target = alloca %struct.sv*, align 8
  %thing_copy = alloca i8**, align 8
  %old_flags = alloca i32, align 4
  %av551 = alloca %struct.av*, align 8
  store %struct.sv* %orig_sv, %struct.sv** %orig_sv.addr, align 8
  store %struct.sv* null, %struct.sv** %iter_sv, align 8
  store %struct.sv* null, %struct.sv** %next_sv, align 8
  %0 = load %struct.sv*, %struct.sv** %orig_sv.addr, align 8
  store %struct.sv* %0, %struct.sv** %sv, align 8
  store i64 0, i64* %hash_index, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.end, %entry
  %1 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool = icmp ne %struct.sv* %1, null
  br i1 %tobool, label %while.body, label %while.end629

while.body:                                       ; preds = %while.cond
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 255
  store i32 %and, i32* %type, align 4
  %4 = load i32, i32* %type, align 4
  %cmp = icmp ule i32 %4, 1
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %while.body
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %6, 2048
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  br label %free_rv

if.end:                                           ; preds = %if.then
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %8, 67108864
  store i32 %and6, i32* %sv_flags5, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags7, align 4
  %or = or i32 %10, 255
  store i32 %or, i32* %sv_flags7, align 4
  br label %free_head

if.end8:                                          ; preds = %while.body
  %11 = load i32, i32* %type, align 4
  %cmp9 = icmp uge i32 %11, 7
  br i1 %cmp9, label %if.then10, label %if.end37

if.then10:                                        ; preds = %if.end8
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %13, 1048576
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then14, label %if.end19

if.then14:                                        ; preds = %if.then10
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call zeroext i1 @S_curse(%struct.sv* %14, i1 zeroext true)
  br i1 %call, label %if.end16, label %if.then15

if.then15:                                        ; preds = %if.then14
  br label %get_next_sv

if.end16:                                         ; preds = %if.then14
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %16, 255
  store i32 %and18, i32* %type, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.end16, %if.then10
  %17 = load i32, i32* %type, align 4
  %cmp20 = icmp eq i32 %17, 12
  br i1 %cmp20, label %if.then21, label %if.else

if.then21:                                        ; preds = %if.end19
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %19 = bitcast %struct.sv* %18 to i8*
  %20 = bitcast i8* %19 to %struct.hv*
  call void @Perl_hv_kill_backrefs(%struct.hv* %20)
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any, align 8
  %23 = bitcast i8* %22 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %23, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %24 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool22 = icmp ne %struct.magic* %24, null
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.then21
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  %call24 = call i32 @Perl_mg_free(%struct.sv* %25)
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %if.then21
  br label %if.end34

if.else:                                          ; preds = %if.end19
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any26 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any26, align 8
  %28 = bitcast i8* %27 to %struct.xpvmg*
  %xmg_u27 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %28, i32 0, i32 1
  %xmg_magic28 = bitcast %union._xmgu* %xmg_u27 to %struct.magic**
  %29 = load %struct.magic*, %struct.magic** %xmg_magic28, align 8
  %tobool29 = icmp ne %struct.magic* %29, null
  br i1 %tobool29, label %if.then30, label %if.end33

if.then30:                                        ; preds = %if.else
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  %call31 = call i32 @Perl_sv_unmagic(%struct.sv* %30, i32 60)
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %call32 = call i32 @Perl_mg_free(%struct.sv* %31)
  br label %if.end33

if.end33:                                         ; preds = %if.then30, %if.else
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end25
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %33, -14680065
  store i32 %and36, i32* %sv_flags35, align 4
  br label %if.end37

if.end37:                                         ; preds = %if.end34, %if.end8
  %34 = load i32, i32* %type, align 4
  switch i32 %34, label %sw.epilog [
    i32 15, label %sw.bb
    i32 8, label %sw.bb98
    i32 13, label %sw.bb99
    i32 14, label %sw.bb99
    i32 12, label %sw.bb104
    i32 11, label %sw.bb169
    i32 10, label %sw.bb192
    i32 9, label %sw.bb227
    i32 7, label %sw.bb388
    i32 6, label %sw.bb388
    i32 5, label %sw.bb388
    i32 4, label %sw.bb388
    i32 3, label %sw.bb388
    i32 2, label %sw.bb497
  ]

sw.bb:                                            ; preds = %if.end37
  %35 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 3
  %svu_fp = bitcast %union.anon* %sv_u to %struct._PerlIO***
  %36 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  %tobool38 = icmp ne %struct._PerlIO** %36, null
  br i1 %tobool38, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %sw.bb
  %37 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u39 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 3
  %svu_fp40 = bitcast %union.anon* %sv_u39 to %struct._PerlIO***
  %38 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp40, align 8
  %call41 = call %struct._PerlIO** @Perl_PerlIO_stdin()
  %cmp42 = icmp ne %struct._PerlIO** %38, %call41
  br i1 %cmp42, label %land.lhs.true43, label %if.end73

land.lhs.true43:                                  ; preds = %land.lhs.true
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u44 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 3
  %svu_fp45 = bitcast %union.anon* %sv_u44 to %struct._PerlIO***
  %40 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp45, align 8
  %call46 = call %struct._PerlIO** @Perl_PerlIO_stdout()
  %cmp47 = icmp ne %struct._PerlIO** %40, %call46
  br i1 %cmp47, label %land.lhs.true48, label %if.end73

land.lhs.true48:                                  ; preds = %land.lhs.true43
  %41 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u49 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 3
  %svu_fp50 = bitcast %union.anon* %sv_u49 to %struct._PerlIO***
  %42 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp50, align 8
  %call51 = call %struct._PerlIO** @Perl_PerlIO_stderr()
  %cmp52 = icmp ne %struct._PerlIO** %42, %call51
  br i1 %cmp52, label %land.lhs.true53, label %if.end73

land.lhs.true53:                                  ; preds = %land.lhs.true48
  %43 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any54 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any54, align 8
  %45 = bitcast i8* %44 to %struct.xpvio*
  %xio_flags = getelementptr inbounds %struct.xpvio, %struct.xpvio* %45, i32 0, i32 17
  %46 = load i8, i8* %xio_flags, align 1
  %conv = zext i8 %46 to i32
  %and55 = and i32 %conv, 64
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.end73, label %if.then57

if.then57:                                        ; preds = %land.lhs.true53
  %47 = load %struct.sv*, %struct.sv** %sv, align 8
  %48 = bitcast %struct.sv* %47 to i8*
  %49 = bitcast i8* %48 to %struct.io*
  %50 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any58 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any58, align 8
  %52 = bitcast i8* %51 to %struct.xpvio*
  %xio_type = getelementptr inbounds %struct.xpvio, %struct.xpvio* %52, i32 0, i32 16
  %53 = load i8, i8* %xio_type, align 8
  %conv59 = sext i8 %53 to i32
  %cmp60 = icmp eq i32 %conv59, 62
  br i1 %cmp60, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then57
  %54 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any62 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any62, align 8
  %56 = bitcast i8* %55 to %struct.xpvio*
  %xio_type63 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %56, i32 0, i32 16
  %57 = load i8, i8* %xio_type63, align 8
  %conv64 = sext i8 %57 to i32
  %cmp65 = icmp eq i32 %conv64, 43
  br i1 %cmp65, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %58 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any67, align 8
  %60 = bitcast i8* %59 to %struct.xpvio*
  %xio_type68 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %60, i32 0, i32 16
  %61 = load i8, i8* %xio_type68, align 8
  %conv69 = sext i8 %61 to i32
  %cmp70 = icmp eq i32 %conv69, 97
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %if.then57
  %62 = phi i1 [ true, %lor.lhs.false ], [ true, %if.then57 ], [ %cmp70, %lor.rhs ]
  %call72 = call zeroext i1 @Perl_io_close(%struct.io* %49, %struct.gv* null, i1 zeroext false, i1 zeroext %62)
  br label %if.end73

if.end73:                                         ; preds = %lor.end, %land.lhs.true53, %land.lhs.true48, %land.lhs.true43, %land.lhs.true, %sw.bb
  %63 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any74 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 0
  %64 = load i8*, i8** %sv_any74, align 8
  %65 = bitcast i8* %64 to %struct.xpvio*
  %xio_dirpu = getelementptr inbounds %struct.xpvio, %struct.xpvio* %65, i32 0, i32 6
  %xiou_dirp = bitcast %union.anon.13* %xio_dirpu to %struct.__dirstream**
  %66 = load %struct.__dirstream*, %struct.__dirstream** %xiou_dirp, align 8
  %tobool75 = icmp ne %struct.__dirstream* %66, null
  br i1 %tobool75, label %land.lhs.true76, label %if.end87

land.lhs.true76:                                  ; preds = %if.end73
  %67 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any77 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 0
  %68 = load i8*, i8** %sv_any77, align 8
  %69 = bitcast i8* %68 to %struct.xpvio*
  %xio_flags78 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %69, i32 0, i32 17
  %70 = load i8, i8* %xio_flags78, align 1
  %conv79 = zext i8 %70 to i32
  %and80 = and i32 %conv79, 64
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %if.end87, label %if.then82

if.then82:                                        ; preds = %land.lhs.true76
  %71 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any83 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any83, align 8
  %73 = bitcast i8* %72 to %struct.xpvio*
  %xio_dirpu84 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %73, i32 0, i32 6
  %xiou_dirp85 = bitcast %union.anon.13* %xio_dirpu84 to %struct.__dirstream**
  %74 = load %struct.__dirstream*, %struct.__dirstream** %xiou_dirp85, align 8
  %call86 = call i32 @closedir(%struct.__dirstream* %74)
  br label %if.end87

if.end87:                                         ; preds = %if.then82, %land.lhs.true76, %if.end73
  %75 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any88 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 0
  %76 = load i8*, i8** %sv_any88, align 8
  %77 = bitcast i8* %76 to %struct.xpvio*
  %xio_dirpu89 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %77, i32 0, i32 6
  %xiou_dirp90 = bitcast %union.anon.13* %xio_dirpu89 to %struct.__dirstream**
  store %struct.__dirstream* null, %struct.__dirstream** %xiou_dirp90, align 8
  %78 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any91 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any91, align 8
  %80 = bitcast i8* %79 to %struct.xpvio*
  %xio_top_name = getelementptr inbounds %struct.xpvio, %struct.xpvio* %80, i32 0, i32 10
  %81 = load i8*, i8** %xio_top_name, align 8
  call void @Perl_safesysfree(i8* %81)
  %82 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any92 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 0
  %83 = load i8*, i8** %sv_any92, align 8
  %84 = bitcast i8* %83 to %struct.xpvio*
  %xio_fmt_name = getelementptr inbounds %struct.xpvio, %struct.xpvio* %84, i32 0, i32 12
  %85 = load i8*, i8** %xio_fmt_name, align 8
  call void @Perl_safesysfree(i8* %85)
  %86 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any93 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 0
  %87 = load i8*, i8** %sv_any93, align 8
  %88 = bitcast i8* %87 to %struct.xpvio*
  %xio_bottom_name = getelementptr inbounds %struct.xpvio, %struct.xpvio* %88, i32 0, i32 14
  %89 = load i8*, i8** %xio_bottom_name, align 8
  call void @Perl_safesysfree(i8* %89)
  %90 = load %struct.sv*, %struct.sv** %sv, align 8
  %91 = bitcast %struct.sv* %90 to %struct.gv*
  %92 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %cmp94 = icmp eq %struct.gv* %91, %92
  br i1 %cmp94, label %if.then96, label %if.end97

if.then96:                                        ; preds = %if.end87
  store %struct.gv* null, %struct.gv** @PL_statgv, align 8
  br label %if.end97

if.end97:                                         ; preds = %if.then96, %if.end87
  br label %freescalar

sw.bb98:                                          ; preds = %if.end37
  br label %freeregexp

freeregexp:                                       ; preds = %if.then225, %sw.bb98
  %93 = load %struct.sv*, %struct.sv** %sv, align 8
  %94 = bitcast %struct.sv* %93 to %struct.p5rx*
  call void @Perl_pregfree2(%struct.p5rx* %94)
  br label %freescalar

sw.bb99:                                          ; preds = %if.end37, %if.end37
  %95 = load %struct.sv*, %struct.sv** %sv, align 8
  %96 = bitcast %struct.sv* %95 to i8*
  %97 = bitcast i8* %96 to %struct.cv*
  call void @Perl_cv_undef(%struct.cv* %97)
  %98 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any100 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 0
  %99 = load i8*, i8** %sv_any100, align 8
  %100 = bitcast i8* %99 to %struct.xpvcv*
  %xcv_stash = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %100, i32 0, i32 4
  %101 = load %struct.hv*, %struct.hv** %xcv_stash, align 8
  %add.ptr = getelementptr inbounds %struct.hv, %struct.hv* %101, i64 0
  store %struct.hv* %add.ptr, %struct.hv** %stash, align 8
  %tobool101 = icmp ne %struct.hv* %add.ptr, null
  br i1 %tobool101, label %if.then102, label %if.end103

if.then102:                                       ; preds = %sw.bb99
  %102 = load %struct.hv*, %struct.hv** %stash, align 8
  %103 = bitcast %struct.hv* %102 to i8*
  %104 = bitcast i8* %103 to %struct.sv*
  %105 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_del_backref(%struct.sv* %104, %struct.sv* %105)
  br label %if.end103

if.end103:                                        ; preds = %if.then102, %sw.bb99
  br label %freescalar

sw.bb104:                                         ; preds = %if.end37
  %106 = load %struct.hv*, %struct.hv** @PL_last_swash_hv, align 8
  %107 = load %struct.sv*, %struct.sv** %sv, align 8
  %108 = bitcast %struct.sv* %107 to %struct.hv*
  %cmp105 = icmp eq %struct.hv* %106, %108
  br i1 %cmp105, label %if.then107, label %if.end108

if.then107:                                       ; preds = %sw.bb104
  store %struct.hv* null, %struct.hv** @PL_last_swash_hv, align 8
  br label %if.end108

if.end108:                                        ; preds = %if.then107, %sw.bb104
  %109 = load %struct.sv*, %struct.sv** %sv, align 8
  %110 = bitcast %struct.sv* %109 to %struct.hv*
  %sv_any109 = getelementptr inbounds %struct.hv, %struct.hv* %110, i32 0, i32 0
  %111 = load %struct.xpvhv*, %struct.xpvhv** %sv_any109, align 8
  %xhv_keys = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %111, i32 0, i32 2
  %112 = load i64, i64* %xhv_keys, align 8
  %cmp110 = icmp ugt i64 %112, 0
  br i1 %cmp110, label %if.then112, label %if.end168

if.then112:                                       ; preds = %if.end108
  %113 = load i32, i32* @PL_phase, align 4
  %cmp113 = icmp ne i32 %113, 6
  br i1 %cmp113, label %land.lhs.true115, label %if.end163

land.lhs.true115:                                 ; preds = %if.then112
  %114 = load %struct.sv*, %struct.sv** %sv, align 8
  %115 = bitcast %struct.sv* %114 to %struct.hv*
  %sv_flags116 = getelementptr inbounds %struct.hv, %struct.hv* %115, i32 0, i32 2
  %116 = load i32, i32* %sv_flags116, align 4
  %and117 = and i32 %116, 33554432
  %tobool118 = icmp ne i32 %and117, 0
  br i1 %tobool118, label %land.lhs.true119, label %cond.false146

land.lhs.true119:                                 ; preds = %land.lhs.true115
  %117 = load %struct.sv*, %struct.sv** %sv, align 8
  %118 = bitcast %struct.sv* %117 to %struct.hv*
  %sv_u120 = getelementptr inbounds %struct.hv, %struct.hv* %118, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u120 to %struct.he***
  %119 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %120 = load %struct.sv*, %struct.sv** %sv, align 8
  %121 = bitcast %struct.sv* %120 to %struct.hv*
  %sv_any121 = getelementptr inbounds %struct.hv, %struct.hv* %121, i32 0, i32 0
  %122 = load %struct.xpvhv*, %struct.xpvhv** %sv_any121, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %122, i32 0, i32 3
  %123 = load i64, i64* %xhv_max, align 8
  %add = add i64 %123, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %119, i64 %add
  %124 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %124, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %125 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool122 = icmp ne %struct.hek* %125, null
  br i1 %tobool122, label %cond.true, label %cond.false146

cond.true:                                        ; preds = %land.lhs.true119
  %126 = load %struct.sv*, %struct.sv** %sv, align 8
  %127 = bitcast %struct.sv* %126 to %struct.hv*
  %sv_u123 = getelementptr inbounds %struct.hv, %struct.hv* %127, i32 0, i32 3
  %svu_hash124 = bitcast %union.anon.4* %sv_u123 to %struct.he***
  %128 = load %struct.he**, %struct.he*** %svu_hash124, align 8
  %129 = load %struct.sv*, %struct.sv** %sv, align 8
  %130 = bitcast %struct.sv* %129 to %struct.hv*
  %sv_any125 = getelementptr inbounds %struct.hv, %struct.hv* %130, i32 0, i32 0
  %131 = load %struct.xpvhv*, %struct.xpvhv** %sv_any125, align 8
  %xhv_max126 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %131, i32 0, i32 3
  %132 = load i64, i64* %xhv_max126, align 8
  %add127 = add i64 %132, 1
  %arrayidx128 = getelementptr inbounds %struct.he*, %struct.he** %128, i64 %add127
  %133 = bitcast %struct.he** %arrayidx128 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %133, i32 0, i32 4
  %134 = load i32, i32* %xhv_name_count, align 4
  %tobool129 = icmp ne i32 %134, 0
  br i1 %tobool129, label %cond.true130, label %cond.false

cond.true130:                                     ; preds = %cond.true
  %135 = load %struct.sv*, %struct.sv** %sv, align 8
  %136 = bitcast %struct.sv* %135 to %struct.hv*
  %sv_u131 = getelementptr inbounds %struct.hv, %struct.hv* %136, i32 0, i32 3
  %svu_hash132 = bitcast %union.anon.4* %sv_u131 to %struct.he***
  %137 = load %struct.he**, %struct.he*** %svu_hash132, align 8
  %138 = load %struct.sv*, %struct.sv** %sv, align 8
  %139 = bitcast %struct.sv* %138 to %struct.hv*
  %sv_any133 = getelementptr inbounds %struct.hv, %struct.hv* %139, i32 0, i32 0
  %140 = load %struct.xpvhv*, %struct.xpvhv** %sv_any133, align 8
  %xhv_max134 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %140, i32 0, i32 3
  %141 = load i64, i64* %xhv_max134, align 8
  %add135 = add i64 %141, 1
  %arrayidx136 = getelementptr inbounds %struct.he*, %struct.he** %137, i64 %add135
  %142 = bitcast %struct.he** %arrayidx136 to %struct.xpvhv_aux*
  %xhv_name_u137 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %142, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u137 to %struct.hek***
  %143 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %144 = load %struct.hek*, %struct.hek** %143, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %145 = load %struct.sv*, %struct.sv** %sv, align 8
  %146 = bitcast %struct.sv* %145 to %struct.hv*
  %sv_u138 = getelementptr inbounds %struct.hv, %struct.hv* %146, i32 0, i32 3
  %svu_hash139 = bitcast %union.anon.4* %sv_u138 to %struct.he***
  %147 = load %struct.he**, %struct.he*** %svu_hash139, align 8
  %148 = load %struct.sv*, %struct.sv** %sv, align 8
  %149 = bitcast %struct.sv* %148 to %struct.hv*
  %sv_any140 = getelementptr inbounds %struct.hv, %struct.hv* %149, i32 0, i32 0
  %150 = load %struct.xpvhv*, %struct.xpvhv** %sv_any140, align 8
  %xhv_max141 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %150, i32 0, i32 3
  %151 = load i64, i64* %xhv_max141, align 8
  %add142 = add i64 %151, 1
  %arrayidx143 = getelementptr inbounds %struct.he*, %struct.he** %147, i64 %add142
  %152 = bitcast %struct.he** %arrayidx143 to %struct.xpvhv_aux*
  %xhv_name_u144 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %152, i32 0, i32 0
  %xhvnameu_name145 = bitcast %union._xhvnameu* %xhv_name_u144 to %struct.hek**
  %153 = load %struct.hek*, %struct.hek** %xhvnameu_name145, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true130
  %cond = phi %struct.hek* [ %144, %cond.true130 ], [ %153, %cond.false ]
  br label %cond.end147

cond.false146:                                    ; preds = %land.lhs.true119, %land.lhs.true115
  br label %cond.end147

cond.end147:                                      ; preds = %cond.false146, %cond.end
  %cond148 = phi %struct.hek* [ %cond, %cond.end ], [ null, %cond.false146 ]
  store %struct.hek* %cond148, %struct.hek** %hek, align 8
  %tobool149 = icmp ne %struct.hek* %cond148, null
  br i1 %tobool149, label %if.then150, label %if.end163

if.then150:                                       ; preds = %cond.end147
  %154 = load %struct.hv*, %struct.hv** @PL_stashcache, align 8
  %tobool151 = icmp ne %struct.hv* %154, null
  br i1 %tobool151, label %if.then152, label %if.end162

if.then152:                                       ; preds = %if.then150
  %155 = load %struct.hv*, %struct.hv** @PL_stashcache, align 8
  %156 = load %struct.hek*, %struct.hek** %hek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %156, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %157 = load %struct.hek*, %struct.hek** %hek, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %157, i32 0, i32 1
  %158 = load i32, i32* %hek_len, align 4
  %conv153 = sext i32 %158 to i64
  %159 = load %struct.hek*, %struct.hek** %hek, align 8
  %hek_key154 = getelementptr inbounds %struct.hek, %struct.hek* %159, i32 0, i32 2
  %arraydecay155 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key154, i64 0, i64 0
  %160 = load %struct.hek*, %struct.hek** %hek, align 8
  %hek_len156 = getelementptr inbounds %struct.hek, %struct.hek* %160, i32 0, i32 1
  %161 = load i32, i32* %hek_len156, align 4
  %idx.ext = sext i32 %161 to i64
  %add.ptr157 = getelementptr inbounds i8, i8* %arraydecay155, i64 %idx.ext
  %add.ptr158 = getelementptr inbounds i8, i8* %add.ptr157, i64 1
  %162 = load i8, i8* %add.ptr158, align 1
  %conv159 = zext i8 %162 to i32
  %and160 = and i32 %conv159, 1
  %163 = load %struct.hek*, %struct.hek** %hek, align 8
  %hek_hash = getelementptr inbounds %struct.hek, %struct.hek* %163, i32 0, i32 0
  %164 = load i32, i32* %hek_hash, align 4
  %call161 = call i8* @Perl_hv_common(%struct.hv* %155, %struct.sv* null, i8* %arraydecay, i64 %conv153, i32 %and160, i32 68, %struct.sv* null, i32 %164)
  br label %if.end162

if.end162:                                        ; preds = %if.then152, %if.then150
  %165 = load %struct.sv*, %struct.sv** %sv, align 8
  %166 = bitcast %struct.sv* %165 to %struct.hv*
  call void @Perl_hv_name_set(%struct.hv* %166, i8* null, i32 0, i32 0)
  br label %if.end163

if.end163:                                        ; preds = %if.end162, %cond.end147, %if.then112
  %167 = load %struct.sv*, %struct.sv** %iter_sv, align 8
  %168 = bitcast %struct.sv* %167 to %struct.hv*
  %169 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any164 = getelementptr inbounds %struct.sv, %struct.sv* %169, i32 0, i32 0
  %170 = load i8*, i8** %sv_any164, align 8
  %171 = bitcast i8* %170 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %171, i32 0, i32 0
  store %struct.hv* %168, %struct.hv** %xmg_stash, align 8
  %172 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %172, %struct.sv** %iter_sv, align 8
  %173 = load i64, i64* %hash_index, align 8
  %174 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any165 = getelementptr inbounds %struct.sv, %struct.sv* %174, i32 0, i32 0
  %175 = load i8*, i8** %sv_any165, align 8
  %176 = bitcast i8* %175 to %struct.xpvmg*
  %xmg_u166 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %176, i32 0, i32 1
  %xmg_hash_index = bitcast %union._xmgu* %xmg_u166 to i64*
  store i64 %173, i64* %xmg_hash_index, align 8
  store i64 0, i64* %hash_index, align 8
  %177 = load %struct.sv*, %struct.sv** %sv, align 8
  %178 = bitcast %struct.sv* %177 to %struct.hv*
  %call167 = call %struct.sv* @Perl_hfree_next_entry(%struct.hv* %178, i64* %hash_index)
  store %struct.sv* %call167, %struct.sv** %next_sv, align 8
  br label %get_next_sv

if.end168:                                        ; preds = %if.end108
  %179 = load %struct.sv*, %struct.sv** %sv, align 8
  %180 = bitcast %struct.sv* %179 to i8*
  %181 = bitcast i8* %180 to %struct.hv*
  call void @Perl_hv_undef_flags(%struct.hv* %181, i32 2)
  br label %sw.epilog

sw.bb169:                                         ; preds = %if.end37
  %182 = load %struct.sv*, %struct.sv** %sv, align 8
  %183 = bitcast %struct.sv* %182 to i8*
  %184 = bitcast i8* %183 to %struct.av*
  store %struct.av* %184, %struct.av** %av, align 8
  %185 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %186 = load %struct.av*, %struct.av** %av, align 8
  %cmp170 = icmp eq %struct.av* %185, %186
  br i1 %cmp170, label %if.then172, label %if.end173

if.then172:                                       ; preds = %sw.bb169
  store %struct.av* null, %struct.av** @PL_comppad, align 8
  store %struct.sv** null, %struct.sv*** @PL_curpad, align 8
  br label %if.end173

if.end173:                                        ; preds = %if.then172, %sw.bb169
  %187 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags174 = getelementptr inbounds %struct.av, %struct.av* %187, i32 0, i32 2
  %188 = load i32, i32* %sv_flags174, align 4
  %and175 = and i32 %188, 1073741824
  %tobool176 = icmp ne i32 %and175, 0
  br i1 %tobool176, label %land.lhs.true177, label %if.end190

land.lhs.true177:                                 ; preds = %if.end173
  %189 = load %struct.av*, %struct.av** %av, align 8
  %sv_any178 = getelementptr inbounds %struct.av, %struct.av* %189, i32 0, i32 0
  %190 = load %struct.xpvav*, %struct.xpvav** %sv_any178, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %190, i32 0, i32 2
  %191 = load i64, i64* %xav_fill, align 8
  %cmp179 = icmp sgt i64 %191, -1
  br i1 %cmp179, label %if.then181, label %if.end190

if.then181:                                       ; preds = %land.lhs.true177
  %192 = load %struct.av*, %struct.av** %av, align 8
  %sv_u182 = getelementptr inbounds %struct.av, %struct.av* %192, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u182 to %struct.sv***
  %193 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %194 = load %struct.av*, %struct.av** %av, align 8
  %sv_any183 = getelementptr inbounds %struct.av, %struct.av* %194, i32 0, i32 0
  %195 = load %struct.xpvav*, %struct.xpvav** %sv_any183, align 8
  %xav_fill184 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %195, i32 0, i32 2
  %196 = load i64, i64* %xav_fill184, align 8
  %dec = add nsw i64 %196, -1
  store i64 %dec, i64* %xav_fill184, align 8
  %arrayidx185 = getelementptr inbounds %struct.sv*, %struct.sv** %193, i64 %196
  %197 = load %struct.sv*, %struct.sv** %arrayidx185, align 8
  store %struct.sv* %197, %struct.sv** %next_sv, align 8
  %198 = load %struct.sv*, %struct.sv** %iter_sv, align 8
  %199 = load %struct.av*, %struct.av** %av, align 8
  %sv_u186 = getelementptr inbounds %struct.av, %struct.av* %199, i32 0, i32 3
  %svu_array187 = bitcast %union.anon.3* %sv_u186 to %struct.sv***
  %200 = load %struct.sv**, %struct.sv*** %svu_array187, align 8
  %201 = load %struct.av*, %struct.av** %av, align 8
  %sv_any188 = getelementptr inbounds %struct.av, %struct.av* %201, i32 0, i32 0
  %202 = load %struct.xpvav*, %struct.xpvav** %sv_any188, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %202, i32 0, i32 3
  %203 = load i64, i64* %xav_max, align 8
  %arrayidx189 = getelementptr inbounds %struct.sv*, %struct.sv** %200, i64 %203
  store %struct.sv* %198, %struct.sv** %arrayidx189, align 8
  %204 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %204, %struct.sv** %iter_sv, align 8
  br label %get_next_sv

if.end190:                                        ; preds = %land.lhs.true177, %if.end173
  %205 = load %struct.av*, %struct.av** %av, align 8
  %sv_any191 = getelementptr inbounds %struct.av, %struct.av* %205, i32 0, i32 0
  %206 = load %struct.xpvav*, %struct.xpvav** %sv_any191, align 8
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %206, i32 0, i32 4
  %207 = load %struct.sv**, %struct.sv*** %xav_alloc, align 8
  %208 = bitcast %struct.sv** %207 to i8*
  call void @Perl_safesysfree(i8* %208)
  br label %sw.epilog

sw.bb192:                                         ; preds = %if.end37
  %209 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any193 = getelementptr inbounds %struct.sv, %struct.sv* %209, i32 0, i32 0
  %210 = load i8*, i8** %sv_any193, align 8
  %211 = bitcast i8* %210 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %211, i32 0, i32 9
  %212 = load i8, i8* %xlv_type, align 8
  %conv194 = sext i8 %212 to i32
  %cmp195 = icmp eq i32 %conv194, 84
  br i1 %cmp195, label %if.then197, label %if.else205

if.then197:                                       ; preds = %sw.bb192
  %213 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any198 = getelementptr inbounds %struct.sv, %struct.sv* %213, i32 0, i32 0
  %214 = load i8*, i8** %sv_any198, align 8
  %215 = bitcast i8* %214 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %215, i32 0, i32 8
  %216 = load %struct.sv*, %struct.sv** %xlv_targ, align 8
  %217 = bitcast %struct.sv* %216 to %struct.he*
  %hent_hek = getelementptr inbounds %struct.he, %struct.he* %217, i32 0, i32 1
  %218 = load %struct.hek*, %struct.hek** %hent_hek, align 8
  %hek_key199 = getelementptr inbounds %struct.hek, %struct.hek* %218, i32 0, i32 2
  %arraydecay200 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key199, i64 0, i64 0
  %219 = bitcast i8* %arraydecay200 to %struct.sv**
  %220 = load %struct.sv*, %struct.sv** %219, align 4
  %221 = bitcast %struct.sv* %220 to i8*
  %222 = bitcast i8* %221 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %222)
  %223 = load %struct.he*, %struct.he** @PL_hv_fetch_ent_mh, align 8
  %224 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any201 = getelementptr inbounds %struct.sv, %struct.sv* %224, i32 0, i32 0
  %225 = load i8*, i8** %sv_any201, align 8
  %226 = bitcast i8* %225 to %struct.xpvlv*
  %xlv_targ202 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %226, i32 0, i32 8
  %227 = load %struct.sv*, %struct.sv** %xlv_targ202, align 8
  %228 = bitcast %struct.sv* %227 to %struct.he*
  %hent_next = getelementptr inbounds %struct.he, %struct.he* %228, i32 0, i32 0
  store %struct.he* %223, %struct.he** %hent_next, align 8
  %229 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any203 = getelementptr inbounds %struct.sv, %struct.sv* %229, i32 0, i32 0
  %230 = load i8*, i8** %sv_any203, align 8
  %231 = bitcast i8* %230 to %struct.xpvlv*
  %xlv_targ204 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %231, i32 0, i32 8
  %232 = load %struct.sv*, %struct.sv** %xlv_targ204, align 8
  %233 = bitcast %struct.sv* %232 to %struct.he*
  store %struct.he* %233, %struct.he** @PL_hv_fetch_ent_mh, align 8
  br label %if.end215

if.else205:                                       ; preds = %sw.bb192
  %234 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any206 = getelementptr inbounds %struct.sv, %struct.sv* %234, i32 0, i32 0
  %235 = load i8*, i8** %sv_any206, align 8
  %236 = bitcast i8* %235 to %struct.xpvlv*
  %xlv_type207 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %236, i32 0, i32 9
  %237 = load i8, i8* %xlv_type207, align 8
  %conv208 = sext i8 %237 to i32
  %cmp209 = icmp ne i32 %conv208, 116
  br i1 %cmp209, label %if.then211, label %if.end214

if.then211:                                       ; preds = %if.else205
  %238 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any212 = getelementptr inbounds %struct.sv, %struct.sv* %238, i32 0, i32 0
  %239 = load i8*, i8** %sv_any212, align 8
  %240 = bitcast i8* %239 to %struct.xpvlv*
  %xlv_targ213 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %240, i32 0, i32 8
  %241 = load %struct.sv*, %struct.sv** %xlv_targ213, align 8
  %242 = bitcast %struct.sv* %241 to i8*
  %243 = bitcast i8* %242 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %243)
  br label %if.end214

if.end214:                                        ; preds = %if.then211, %if.else205
  br label %if.end215

if.end215:                                        ; preds = %if.end214, %if.then197
  %244 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags216 = getelementptr inbounds %struct.sv, %struct.sv* %244, i32 0, i32 2
  %245 = load i32, i32* %sv_flags216, align 4
  %and217 = and i32 %245, 255
  %cmp218 = icmp eq i32 %and217, 8
  br i1 %cmp218, label %if.then225, label %lor.lhs.false220

lor.lhs.false220:                                 ; preds = %if.end215
  %246 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags221 = getelementptr inbounds %struct.sv, %struct.sv* %246, i32 0, i32 2
  %247 = load i32, i32* %sv_flags221, align 4
  %and222 = and i32 %247, 16826623
  %cmp223 = icmp eq i32 %and222, 16777226
  br i1 %cmp223, label %if.then225, label %if.end226

if.then225:                                       ; preds = %lor.lhs.false220, %if.end215
  br label %freeregexp

if.end226:                                        ; preds = %lor.lhs.false220
  br label %sw.bb227

sw.bb227:                                         ; preds = %if.end37, %if.end226
  %248 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags228 = getelementptr inbounds %struct.sv, %struct.sv* %248, i32 0, i32 2
  %249 = load i32, i32* %sv_flags228, align 4
  %and229 = and i32 %249, 49152
  %cmp230 = icmp eq i32 %and229, 32768
  br i1 %cmp230, label %land.lhs.true232, label %if.end373

land.lhs.true232:                                 ; preds = %sw.bb227
  %250 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags233 = getelementptr inbounds %struct.sv, %struct.sv* %250, i32 0, i32 2
  %251 = load i32, i32* %sv_flags233, align 4
  %and234 = and i32 %251, 255
  %cmp235 = icmp eq i32 %and234, 9
  br i1 %cmp235, label %if.then242, label %lor.lhs.false237

lor.lhs.false237:                                 ; preds = %land.lhs.true232
  %252 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags238 = getelementptr inbounds %struct.sv, %struct.sv* %252, i32 0, i32 2
  %253 = load i32, i32* %sv_flags238, align 4
  %and239 = and i32 %253, 255
  %cmp240 = icmp eq i32 %and239, 10
  br i1 %cmp240, label %if.then242, label %if.end373

if.then242:                                       ; preds = %lor.lhs.false237, %land.lhs.true232
  %254 = load %struct.sv*, %struct.sv** %sv, align 8
  %255 = bitcast %struct.sv* %254 to %struct.gv*
  %sv_u243 = getelementptr inbounds %struct.gv, %struct.gv* %255, i32 0, i32 3
  %svu_gp = bitcast %union.anon.6* %sv_u243 to %struct.gp**
  %256 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr244 = getelementptr inbounds %struct.gp, %struct.gp* %256, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr244, i32 0, i32 3
  %257 = load i32, i32* %gp_cvgen, align 8
  %tobool245 = icmp ne i32 %257, 0
  br i1 %tobool245, label %cond.true246, label %cond.false247

cond.true246:                                     ; preds = %if.then242
  br i1 false, label %land.lhs.true252, label %if.end350

cond.false247:                                    ; preds = %if.then242
  %258 = load %struct.sv*, %struct.sv** %sv, align 8
  %259 = bitcast %struct.sv* %258 to %struct.gv*
  %sv_u248 = getelementptr inbounds %struct.gv, %struct.gv* %259, i32 0, i32 3
  %svu_gp249 = bitcast %union.anon.6* %sv_u248 to %struct.gp**
  %260 = load %struct.gp*, %struct.gp** %svu_gp249, align 8
  %add.ptr250 = getelementptr inbounds %struct.gp, %struct.gp* %260, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr250, i32 0, i32 2
  %261 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %tobool251 = icmp ne %struct.cv* %261, null
  br i1 %tobool251, label %land.lhs.true252, label %if.end350

land.lhs.true252:                                 ; preds = %cond.false247, %cond.true246
  %262 = load %struct.sv*, %struct.sv** %sv, align 8
  %263 = bitcast %struct.sv* %262 to i8*
  %264 = bitcast i8* %263 to %struct.gv*
  %sv_any253 = getelementptr inbounds %struct.gv, %struct.gv* %264, i32 0, i32 0
  %265 = load %struct.xpvgv*, %struct.xpvgv** %sv_any253, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %265, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %266 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  store %struct.hv* %266, %struct.hv** %stash, align 8
  %tobool254 = icmp ne %struct.hv* %266, null
  br i1 %tobool254, label %land.lhs.true255, label %if.end350

land.lhs.true255:                                 ; preds = %land.lhs.true252
  %267 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags256 = getelementptr inbounds %struct.hv, %struct.hv* %267, i32 0, i32 2
  %268 = load i32, i32* %sv_flags256, align 4
  %and257 = and i32 %268, 33554432
  %tobool258 = icmp ne i32 %and257, 0
  br i1 %tobool258, label %land.lhs.true259, label %cond.false348

land.lhs.true259:                                 ; preds = %land.lhs.true255
  %269 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u260 = getelementptr inbounds %struct.hv, %struct.hv* %269, i32 0, i32 3
  %svu_hash261 = bitcast %union.anon.4* %sv_u260 to %struct.he***
  %270 = load %struct.he**, %struct.he*** %svu_hash261, align 8
  %271 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any262 = getelementptr inbounds %struct.hv, %struct.hv* %271, i32 0, i32 0
  %272 = load %struct.xpvhv*, %struct.xpvhv** %sv_any262, align 8
  %xhv_max263 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %272, i32 0, i32 3
  %273 = load i64, i64* %xhv_max263, align 8
  %add264 = add i64 %273, 1
  %arrayidx265 = getelementptr inbounds %struct.he*, %struct.he** %270, i64 %add264
  %274 = bitcast %struct.he** %arrayidx265 to %struct.xpvhv_aux*
  %xhv_name_u266 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %274, i32 0, i32 0
  %xhvnameu_name267 = bitcast %union._xhvnameu* %xhv_name_u266 to %struct.hek**
  %275 = load %struct.hek*, %struct.hek** %xhvnameu_name267, align 8
  %tobool268 = icmp ne %struct.hek* %275, null
  br i1 %tobool268, label %land.lhs.true269, label %cond.false348

land.lhs.true269:                                 ; preds = %land.lhs.true259
  %276 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u270 = getelementptr inbounds %struct.hv, %struct.hv* %276, i32 0, i32 3
  %svu_hash271 = bitcast %union.anon.4* %sv_u270 to %struct.he***
  %277 = load %struct.he**, %struct.he*** %svu_hash271, align 8
  %278 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any272 = getelementptr inbounds %struct.hv, %struct.hv* %278, i32 0, i32 0
  %279 = load %struct.xpvhv*, %struct.xpvhv** %sv_any272, align 8
  %xhv_max273 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %279, i32 0, i32 3
  %280 = load i64, i64* %xhv_max273, align 8
  %add274 = add i64 %280, 1
  %arrayidx275 = getelementptr inbounds %struct.he*, %struct.he** %277, i64 %add274
  %281 = bitcast %struct.he** %arrayidx275 to %struct.xpvhv_aux*
  %xhv_name_count276 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %281, i32 0, i32 4
  %282 = load i32, i32* %xhv_name_count276, align 4
  %cmp277 = icmp ne i32 %282, -1
  br i1 %cmp277, label %cond.true279, label %cond.false348

cond.true279:                                     ; preds = %land.lhs.true269
  %283 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u280 = getelementptr inbounds %struct.hv, %struct.hv* %283, i32 0, i32 3
  %svu_hash281 = bitcast %union.anon.4* %sv_u280 to %struct.he***
  %284 = load %struct.he**, %struct.he*** %svu_hash281, align 8
  %285 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any282 = getelementptr inbounds %struct.hv, %struct.hv* %285, i32 0, i32 0
  %286 = load %struct.xpvhv*, %struct.xpvhv** %sv_any282, align 8
  %xhv_max283 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %286, i32 0, i32 3
  %287 = load i64, i64* %xhv_max283, align 8
  %add284 = add i64 %287, 1
  %arrayidx285 = getelementptr inbounds %struct.he*, %struct.he** %284, i64 %add284
  %288 = bitcast %struct.he** %arrayidx285 to %struct.xpvhv_aux*
  %xhv_name_count286 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %288, i32 0, i32 4
  %289 = load i32, i32* %xhv_name_count286, align 4
  %cmp287 = icmp sgt i32 %289, 0
  br i1 %cmp287, label %cond.true289, label %cond.false299

cond.true289:                                     ; preds = %cond.true279
  %290 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u290 = getelementptr inbounds %struct.hv, %struct.hv* %290, i32 0, i32 3
  %svu_hash291 = bitcast %union.anon.4* %sv_u290 to %struct.he***
  %291 = load %struct.he**, %struct.he*** %svu_hash291, align 8
  %292 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any292 = getelementptr inbounds %struct.hv, %struct.hv* %292, i32 0, i32 0
  %293 = load %struct.xpvhv*, %struct.xpvhv** %sv_any292, align 8
  %xhv_max293 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %293, i32 0, i32 3
  %294 = load i64, i64* %xhv_max293, align 8
  %add294 = add i64 %294, 1
  %arrayidx295 = getelementptr inbounds %struct.he*, %struct.he** %291, i64 %add294
  %295 = bitcast %struct.he** %arrayidx295 to %struct.xpvhv_aux*
  %xhv_name_u296 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %295, i32 0, i32 0
  %xhvnameu_names297 = bitcast %union._xhvnameu* %xhv_name_u296 to %struct.hek***
  %296 = load %struct.hek**, %struct.hek*** %xhvnameu_names297, align 8
  %arrayidx298 = getelementptr inbounds %struct.hek*, %struct.hek** %296, i64 0
  %297 = load %struct.hek*, %struct.hek** %arrayidx298, align 8
  br label %cond.end343

cond.false299:                                    ; preds = %cond.true279
  %298 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u300 = getelementptr inbounds %struct.hv, %struct.hv* %298, i32 0, i32 3
  %svu_hash301 = bitcast %union.anon.4* %sv_u300 to %struct.he***
  %299 = load %struct.he**, %struct.he*** %svu_hash301, align 8
  %300 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any302 = getelementptr inbounds %struct.hv, %struct.hv* %300, i32 0, i32 0
  %301 = load %struct.xpvhv*, %struct.xpvhv** %sv_any302, align 8
  %xhv_max303 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %301, i32 0, i32 3
  %302 = load i64, i64* %xhv_max303, align 8
  %add304 = add i64 %302, 1
  %arrayidx305 = getelementptr inbounds %struct.he*, %struct.he** %299, i64 %add304
  %303 = bitcast %struct.he** %arrayidx305 to %struct.xpvhv_aux*
  %xhv_name_count306 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %303, i32 0, i32 4
  %304 = load i32, i32* %xhv_name_count306, align 4
  %cmp307 = icmp slt i32 %304, -1
  br i1 %cmp307, label %cond.true309, label %cond.false319

cond.true309:                                     ; preds = %cond.false299
  %305 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u310 = getelementptr inbounds %struct.hv, %struct.hv* %305, i32 0, i32 3
  %svu_hash311 = bitcast %union.anon.4* %sv_u310 to %struct.he***
  %306 = load %struct.he**, %struct.he*** %svu_hash311, align 8
  %307 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any312 = getelementptr inbounds %struct.hv, %struct.hv* %307, i32 0, i32 0
  %308 = load %struct.xpvhv*, %struct.xpvhv** %sv_any312, align 8
  %xhv_max313 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %308, i32 0, i32 3
  %309 = load i64, i64* %xhv_max313, align 8
  %add314 = add i64 %309, 1
  %arrayidx315 = getelementptr inbounds %struct.he*, %struct.he** %306, i64 %add314
  %310 = bitcast %struct.he** %arrayidx315 to %struct.xpvhv_aux*
  %xhv_name_u316 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %310, i32 0, i32 0
  %xhvnameu_names317 = bitcast %union._xhvnameu* %xhv_name_u316 to %struct.hek***
  %311 = load %struct.hek**, %struct.hek*** %xhvnameu_names317, align 8
  %arrayidx318 = getelementptr inbounds %struct.hek*, %struct.hek** %311, i64 1
  %312 = load %struct.hek*, %struct.hek** %arrayidx318, align 8
  br label %cond.end341

cond.false319:                                    ; preds = %cond.false299
  %313 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u320 = getelementptr inbounds %struct.hv, %struct.hv* %313, i32 0, i32 3
  %svu_hash321 = bitcast %union.anon.4* %sv_u320 to %struct.he***
  %314 = load %struct.he**, %struct.he*** %svu_hash321, align 8
  %315 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any322 = getelementptr inbounds %struct.hv, %struct.hv* %315, i32 0, i32 0
  %316 = load %struct.xpvhv*, %struct.xpvhv** %sv_any322, align 8
  %xhv_max323 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %316, i32 0, i32 3
  %317 = load i64, i64* %xhv_max323, align 8
  %add324 = add i64 %317, 1
  %arrayidx325 = getelementptr inbounds %struct.he*, %struct.he** %314, i64 %add324
  %318 = bitcast %struct.he** %arrayidx325 to %struct.xpvhv_aux*
  %xhv_name_count326 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %318, i32 0, i32 4
  %319 = load i32, i32* %xhv_name_count326, align 4
  %cmp327 = icmp eq i32 %319, -1
  br i1 %cmp327, label %cond.true329, label %cond.false330

cond.true329:                                     ; preds = %cond.false319
  br label %cond.end339

cond.false330:                                    ; preds = %cond.false319
  %320 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u331 = getelementptr inbounds %struct.hv, %struct.hv* %320, i32 0, i32 3
  %svu_hash332 = bitcast %union.anon.4* %sv_u331 to %struct.he***
  %321 = load %struct.he**, %struct.he*** %svu_hash332, align 8
  %322 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any333 = getelementptr inbounds %struct.hv, %struct.hv* %322, i32 0, i32 0
  %323 = load %struct.xpvhv*, %struct.xpvhv** %sv_any333, align 8
  %xhv_max334 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %323, i32 0, i32 3
  %324 = load i64, i64* %xhv_max334, align 8
  %add335 = add i64 %324, 1
  %arrayidx336 = getelementptr inbounds %struct.he*, %struct.he** %321, i64 %add335
  %325 = bitcast %struct.he** %arrayidx336 to %struct.xpvhv_aux*
  %xhv_name_u337 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %325, i32 0, i32 0
  %xhvnameu_name338 = bitcast %union._xhvnameu* %xhv_name_u337 to %struct.hek**
  %326 = load %struct.hek*, %struct.hek** %xhvnameu_name338, align 8
  br label %cond.end339

cond.end339:                                      ; preds = %cond.false330, %cond.true329
  %cond340 = phi %struct.hek* [ null, %cond.true329 ], [ %326, %cond.false330 ]
  br label %cond.end341

cond.end341:                                      ; preds = %cond.end339, %cond.true309
  %cond342 = phi %struct.hek* [ %312, %cond.true309 ], [ %cond340, %cond.end339 ]
  br label %cond.end343

cond.end343:                                      ; preds = %cond.end341, %cond.true289
  %cond344 = phi %struct.hek* [ %297, %cond.true289 ], [ %cond342, %cond.end341 ]
  %hek_key345 = getelementptr inbounds %struct.hek, %struct.hek* %cond344, i32 0, i32 2
  %arraydecay346 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key345, i64 0, i64 0
  %tobool347 = icmp ne i8* %arraydecay346, null
  br i1 %tobool347, label %if.then349, label %if.end350

cond.false348:                                    ; preds = %land.lhs.true269, %land.lhs.true259, %land.lhs.true255
  br i1 false, label %if.then349, label %if.end350

if.then349:                                       ; preds = %cond.false348, %cond.end343
  %327 = load %struct.hv*, %struct.hv** %stash, align 8
  call void @Perl_mro_method_changed_in(%struct.hv* %327)
  br label %if.end350

if.end350:                                        ; preds = %if.then349, %cond.false348, %cond.end343, %land.lhs.true252, %cond.false247, %cond.true246
  %328 = load %struct.sv*, %struct.sv** %sv, align 8
  %329 = bitcast %struct.sv* %328 to i8*
  %330 = bitcast i8* %329 to %struct.gv*
  call void @Perl_gp_free(%struct.gv* %330)
  %331 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any351 = getelementptr inbounds %struct.sv, %struct.sv* %331, i32 0, i32 0
  %332 = load i8*, i8** %sv_any351, align 8
  %333 = bitcast i8* %332 to %struct.xpvgv*
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %333, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %334 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %tobool352 = icmp ne %struct.hek* %334, null
  br i1 %tobool352, label %if.then353, label %if.end357

if.then353:                                       ; preds = %if.end350
  %335 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any354 = getelementptr inbounds %struct.sv, %struct.sv* %335, i32 0, i32 0
  %336 = load i8*, i8** %sv_any354, align 8
  %337 = bitcast i8* %336 to %struct.xpvgv*
  %xiv_u355 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %337, i32 0, i32 4
  %xivu_namehek356 = bitcast %union._xivu* %xiv_u355 to %struct.hek**
  %338 = load %struct.hek*, %struct.hek** %xivu_namehek356, align 8
  call void @Perl_unshare_hek(%struct.hek* %338)
  br label %if.end357

if.end357:                                        ; preds = %if.then353, %if.end350
  %339 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags358 = getelementptr inbounds %struct.sv, %struct.sv* %339, i32 0, i32 2
  %340 = load i32, i32* %sv_flags358, align 4
  %and359 = and i32 %340, 1073741824
  %tobool360 = icmp ne i32 %and359, 0
  br i1 %tobool360, label %land.lhs.true361, label %land.lhs.true366

land.lhs.true361:                                 ; preds = %if.end357
  %341 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags362 = getelementptr inbounds %struct.sv, %struct.sv* %341, i32 0, i32 2
  %342 = load i32, i32* %sv_flags362, align 4
  %and363 = and i32 %342, 49152
  %cmp364 = icmp eq i32 %and363, 49152
  br i1 %cmp364, label %land.lhs.true366, label %if.end372

land.lhs.true366:                                 ; preds = %land.lhs.true361, %if.end357
  %343 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any367 = getelementptr inbounds %struct.sv, %struct.sv* %343, i32 0, i32 0
  %344 = load i8*, i8** %sv_any367, align 8
  %345 = bitcast i8* %344 to %struct.xpvgv*
  %xnv_u368 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %345, i32 0, i32 5
  %xgv_stash369 = bitcast %union._xnvu* %xnv_u368 to %struct.hv**
  %346 = load %struct.hv*, %struct.hv** %xgv_stash369, align 8
  store %struct.hv* %346, %struct.hv** %stash, align 8
  %tobool370 = icmp ne %struct.hv* %346, null
  br i1 %tobool370, label %if.then371, label %if.end372

if.then371:                                       ; preds = %land.lhs.true366
  %347 = load %struct.hv*, %struct.hv** %stash, align 8
  %348 = bitcast %struct.hv* %347 to i8*
  %349 = bitcast i8* %348 to %struct.sv*
  %350 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_del_backref(%struct.sv* %349, %struct.sv* %350)
  br label %if.end372

if.end372:                                        ; preds = %if.then371, %land.lhs.true366, %land.lhs.true361
  br label %if.end373

if.end373:                                        ; preds = %if.end372, %lor.lhs.false237, %sw.bb227
  %351 = load %struct.sv*, %struct.sv** %sv, align 8
  %352 = bitcast %struct.sv* %351 to %struct.gv*
  %353 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  %cmp374 = icmp eq %struct.gv* %352, %353
  br i1 %cmp374, label %if.then376, label %if.else377

if.then376:                                       ; preds = %if.end373
  store %struct.gv* null, %struct.gv** @PL_last_in_gv, align 8
  br label %if.end387

if.else377:                                       ; preds = %if.end373
  %354 = load %struct.sv*, %struct.sv** %sv, align 8
  %355 = bitcast %struct.sv* %354 to %struct.gv*
  %356 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %cmp378 = icmp eq %struct.gv* %355, %356
  br i1 %cmp378, label %if.then380, label %if.else381

if.then380:                                       ; preds = %if.else377
  store %struct.gv* null, %struct.gv** @PL_statgv, align 8
  br label %if.end386

if.else381:                                       ; preds = %if.else377
  %357 = load %struct.sv*, %struct.sv** %sv, align 8
  %358 = bitcast %struct.sv* %357 to %struct.gv*
  %359 = load %struct.gv*, %struct.gv** @PL_stderrgv, align 8
  %cmp382 = icmp eq %struct.gv* %358, %359
  br i1 %cmp382, label %if.then384, label %if.end385

if.then384:                                       ; preds = %if.else381
  store %struct.gv* null, %struct.gv** @PL_stderrgv, align 8
  br label %if.end385

if.end385:                                        ; preds = %if.then384, %if.else381
  br label %if.end386

if.end386:                                        ; preds = %if.end385, %if.then380
  br label %if.end387

if.end387:                                        ; preds = %if.end386, %if.then376
  br label %sw.bb388

sw.bb388:                                         ; preds = %if.end37, %if.end37, %if.end37, %if.end37, %if.end37, %if.end387
  br label %freescalar

freescalar:                                       ; preds = %sw.bb388, %if.end103, %freeregexp, %if.end97
  %360 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags389 = getelementptr inbounds %struct.sv, %struct.sv* %360, i32 0, i32 2
  %361 = load i32, i32* %sv_flags389, align 4
  %and390 = and i32 %361, 33554432
  %tobool391 = icmp ne i32 %and390, 0
  br i1 %tobool391, label %if.then392, label %if.end419

if.then392:                                       ; preds = %freescalar
  br label %do.body

do.body:                                          ; preds = %if.then392
  %362 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags393 = getelementptr inbounds %struct.sv, %struct.sv* %362, i32 0, i32 2
  %363 = load i32, i32* %sv_flags393, align 4
  %and394 = and i32 %363, 33554432
  %tobool395 = icmp ne i32 %and394, 0
  br i1 %tobool395, label %if.then396, label %if.else409

if.then396:                                       ; preds = %do.body
  %364 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u397 = getelementptr inbounds %struct.sv, %struct.sv* %364, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u397 to i8**
  %365 = load i8*, i8** %svu_pv, align 8
  %add.ptr398 = getelementptr inbounds i8, i8* %365, i64 0
  %arrayidx399 = getelementptr inbounds i8, i8* %add.ptr398, i64 -1
  %366 = load i8, i8* %arrayidx399, align 1
  %conv400 = zext i8 %366 to i64
  store i64 %conv400, i64* %offset, align 8
  %367 = load i64, i64* %offset, align 8
  %tobool401 = icmp ne i64 %367, 0
  br i1 %tobool401, label %if.end408, label %if.then402

if.then402:                                       ; preds = %if.then396
  %368 = bitcast i64* %offset to i8*
  %369 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u403 = getelementptr inbounds %struct.sv, %struct.sv* %369, i32 0, i32 3
  %svu_pv404 = bitcast %union.anon* %sv_u403 to i8**
  %370 = load i8*, i8** %svu_pv404, align 8
  %add.ptr405 = getelementptr inbounds i8, i8* %370, i64 0
  %add.ptr406 = getelementptr inbounds i8, i8* %add.ptr405, i64 -1
  %add.ptr407 = getelementptr inbounds i8, i8* %add.ptr406, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %368, i8* align 1 %add.ptr407, i64 8, i1 false)
  br label %if.end408

if.end408:                                        ; preds = %if.then402, %if.then396
  br label %if.end410

if.else409:                                       ; preds = %do.body
  store i64 0, i64* %offset, align 8
  br label %if.end410

if.end410:                                        ; preds = %if.else409, %if.end408
  br label %do.end

do.end:                                           ; preds = %if.end410
  br label %do.body411

do.body411:                                       ; preds = %do.end
  %371 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u412 = getelementptr inbounds %struct.sv, %struct.sv* %371, i32 0, i32 3
  %svu_pv413 = bitcast %union.anon* %sv_u412 to i8**
  %372 = load i8*, i8** %svu_pv413, align 8
  %add.ptr414 = getelementptr inbounds i8, i8* %372, i64 0
  %373 = load i64, i64* %offset, align 8
  %idx.neg = sub i64 0, %373
  %add.ptr415 = getelementptr inbounds i8, i8* %add.ptr414, i64 %idx.neg
  %374 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u416 = getelementptr inbounds %struct.sv, %struct.sv* %374, i32 0, i32 3
  %svu_pv417 = bitcast %union.anon* %sv_u416 to i8**
  store i8* %add.ptr415, i8** %svu_pv417, align 8
  br label %do.end418

do.end418:                                        ; preds = %do.body411
  br label %if.end419

if.end419:                                        ; preds = %do.end418, %freescalar
  %375 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags420 = getelementptr inbounds %struct.sv, %struct.sv* %375, i32 0, i32 2
  %376 = load i32, i32* %sv_flags420, align 4
  %and421 = and i32 %376, 2048
  %tobool422 = icmp ne i32 %and421, 0
  br i1 %tobool422, label %if.then423, label %if.else432

if.then423:                                       ; preds = %if.end419
  br label %free_rv

free_rv:                                          ; preds = %if.then423, %if.then4
  %377 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u424 = getelementptr inbounds %struct.sv, %struct.sv* %377, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u424 to %struct.sv**
  %378 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %378, %struct.sv** %target, align 8
  %379 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags425 = getelementptr inbounds %struct.sv, %struct.sv* %379, i32 0, i32 2
  %380 = load i32, i32* %sv_flags425, align 4
  %and426 = and i32 %380, -2147481600
  %cmp427 = icmp eq i32 %and426, -2147481600
  br i1 %cmp427, label %if.then429, label %if.else430

if.then429:                                       ; preds = %free_rv
  %381 = load %struct.sv*, %struct.sv** %target, align 8
  %382 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_del_backref(%struct.sv* %381, %struct.sv* %382)
  br label %if.end431

if.else430:                                       ; preds = %free_rv
  %383 = load %struct.sv*, %struct.sv** %target, align 8
  store %struct.sv* %383, %struct.sv** %next_sv, align 8
  br label %if.end431

if.end431:                                        ; preds = %if.else430, %if.then429
  br label %if.end496

if.else432:                                       ; preds = %if.end419
  %384 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u433 = getelementptr inbounds %struct.sv, %struct.sv* %384, i32 0, i32 3
  %svu_pv434 = bitcast %union.anon* %sv_u433 to i8**
  %385 = load i8*, i8** %svu_pv434, align 8
  %add.ptr435 = getelementptr inbounds i8, i8* %385, i64 0
  %tobool436 = icmp ne i8* %add.ptr435, null
  br i1 %tobool436, label %land.lhs.true437, label %if.end495

land.lhs.true437:                                 ; preds = %if.else432
  %386 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags438 = getelementptr inbounds %struct.sv, %struct.sv* %386, i32 0, i32 2
  %387 = load i32, i32* %sv_flags438, align 4
  %and439 = and i32 %387, 255
  %cmp440 = icmp eq i32 %and439, 15
  br i1 %cmp440, label %land.lhs.true442, label %if.then448

land.lhs.true442:                                 ; preds = %land.lhs.true437
  %388 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any443 = getelementptr inbounds %struct.sv, %struct.sv* %388, i32 0, i32 0
  %389 = load i8*, i8** %sv_any443, align 8
  %390 = bitcast i8* %389 to %struct.xpvio*
  %xio_flags444 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %390, i32 0, i32 17
  %391 = load i8, i8* %xio_flags444, align 1
  %conv445 = zext i8 %391 to i32
  %and446 = and i32 %conv445, 64
  %tobool447 = icmp ne i32 %and446, 0
  br i1 %tobool447, label %if.then448, label %if.end495

if.then448:                                       ; preds = %land.lhs.true442, %land.lhs.true437
  %392 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags449 = getelementptr inbounds %struct.sv, %struct.sv* %392, i32 0, i32 2
  %393 = load i32, i32* %sv_flags449, align 4
  %and450 = and i32 %393, 268435456
  %tobool451 = icmp ne i32 %and450, 0
  br i1 %tobool451, label %if.then452, label %if.end485

if.then452:                                       ; preds = %if.then448
  %394 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any453 = getelementptr inbounds %struct.sv, %struct.sv* %394, i32 0, i32 0
  %395 = load i8*, i8** %sv_any453, align 8
  %396 = bitcast i8* %395 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %396, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %397 = load i64, i64* %xpvlenu_len, align 8
  %tobool454 = icmp ne i64 %397, 0
  br i1 %tobool454, label %if.then455, label %if.else479

if.then455:                                       ; preds = %if.then452
  %398 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u456 = getelementptr inbounds %struct.sv, %struct.sv* %398, i32 0, i32 3
  %svu_pv457 = bitcast %union.anon* %sv_u456 to i8**
  %399 = load i8*, i8** %svu_pv457, align 8
  %400 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any458 = getelementptr inbounds %struct.sv, %struct.sv* %400, i32 0, i32 0
  %401 = load i8*, i8** %sv_any458, align 8
  %402 = bitcast i8* %401 to %struct.xpv*
  %xpv_len_u459 = getelementptr inbounds %struct.xpv, %struct.xpv* %402, i32 0, i32 3
  %xpvlenu_len460 = bitcast %union.anon.19* %xpv_len_u459 to i64*
  %403 = load i64, i64* %xpvlenu_len460, align 8
  %add.ptr461 = getelementptr inbounds i8, i8* %399, i64 %403
  %add.ptr462 = getelementptr inbounds i8, i8* %add.ptr461, i64 -1
  %404 = load i8, i8* %add.ptr462, align 1
  %tobool463 = icmp ne i8 %404, 0
  br i1 %tobool463, label %if.then464, label %if.end478

if.then464:                                       ; preds = %if.then455
  %405 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u465 = getelementptr inbounds %struct.sv, %struct.sv* %405, i32 0, i32 3
  %svu_pv466 = bitcast %union.anon* %sv_u465 to i8**
  %406 = load i8*, i8** %svu_pv466, align 8
  %407 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any467 = getelementptr inbounds %struct.sv, %struct.sv* %407, i32 0, i32 0
  %408 = load i8*, i8** %sv_any467, align 8
  %409 = bitcast i8* %408 to %struct.xpv*
  %xpv_len_u468 = getelementptr inbounds %struct.xpv, %struct.xpv* %409, i32 0, i32 3
  %xpvlenu_len469 = bitcast %union.anon.19* %xpv_len_u468 to i64*
  %410 = load i64, i64* %xpvlenu_len469, align 8
  %add.ptr470 = getelementptr inbounds i8, i8* %406, i64 %410
  %add.ptr471 = getelementptr inbounds i8, i8* %add.ptr470, i64 -1
  %411 = load i8, i8* %add.ptr471, align 1
  %dec472 = add i8 %411, -1
  store i8 %dec472, i8* %add.ptr471, align 1
  br label %do.body473

do.body473:                                       ; preds = %if.then464
  %412 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any474 = getelementptr inbounds %struct.sv, %struct.sv* %412, i32 0, i32 0
  %413 = load i8*, i8** %sv_any474, align 8
  %414 = bitcast i8* %413 to %struct.xpv*
  %xpv_len_u475 = getelementptr inbounds %struct.xpv, %struct.xpv* %414, i32 0, i32 3
  %xpvlenu_len476 = bitcast %union.anon.19* %xpv_len_u475 to i64*
  store i64 0, i64* %xpvlenu_len476, align 8
  br label %do.end477

do.end477:                                        ; preds = %do.body473
  br label %if.end478

if.end478:                                        ; preds = %do.end477, %if.then455
  br label %if.end484

if.else479:                                       ; preds = %if.then452
  %415 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u480 = getelementptr inbounds %struct.sv, %struct.sv* %415, i32 0, i32 3
  %svu_pv481 = bitcast %union.anon* %sv_u480 to i8**
  %416 = load i8*, i8** %svu_pv481, align 8
  %add.ptr482 = getelementptr inbounds i8, i8* %416, i64 0
  %add.ptr483 = getelementptr inbounds i8, i8* %add.ptr482, i64 sub (i64 0, i64 ptrtoint ([1 x i8]* getelementptr inbounds (%struct.hek, %struct.hek* null, i32 0, i32 2) to i64))
  %417 = bitcast i8* %add.ptr483 to %struct.hek*
  call void @Perl_unshare_hek(%struct.hek* %417)
  br label %if.end484

if.end484:                                        ; preds = %if.else479, %if.end478
  br label %if.end485

if.end485:                                        ; preds = %if.end484, %if.then448
  %418 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any486 = getelementptr inbounds %struct.sv, %struct.sv* %418, i32 0, i32 0
  %419 = load i8*, i8** %sv_any486, align 8
  %420 = bitcast i8* %419 to %struct.xpv*
  %xpv_len_u487 = getelementptr inbounds %struct.xpv, %struct.xpv* %420, i32 0, i32 3
  %xpvlenu_len488 = bitcast %union.anon.19* %xpv_len_u487 to i64*
  %421 = load i64, i64* %xpvlenu_len488, align 8
  %tobool489 = icmp ne i64 %421, 0
  br i1 %tobool489, label %if.then490, label %if.end494

if.then490:                                       ; preds = %if.end485
  %422 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u491 = getelementptr inbounds %struct.sv, %struct.sv* %422, i32 0, i32 3
  %svu_pv492 = bitcast %union.anon* %sv_u491 to i8**
  %423 = load i8*, i8** %svu_pv492, align 8
  %add.ptr493 = getelementptr inbounds i8, i8* %423, i64 0
  call void @Perl_safesysfree(i8* %add.ptr493)
  br label %if.end494

if.end494:                                        ; preds = %if.then490, %if.end485
  br label %if.end495

if.end495:                                        ; preds = %if.end494, %land.lhs.true442, %if.else432
  br label %if.end496

if.end496:                                        ; preds = %if.end495, %if.end431
  br label %sw.epilog

sw.bb497:                                         ; preds = %if.end37
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end37, %sw.bb497, %if.end496, %if.end190, %if.end168
  br label %free_body

free_body:                                        ; preds = %if.then586, %if.else563, %sw.epilog
  %424 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags498 = getelementptr inbounds %struct.sv, %struct.sv* %424, i32 0, i32 2
  %425 = load i32, i32* %sv_flags498, align 4
  %and499 = and i32 %425, 67108864
  store i32 %and499, i32* %sv_flags498, align 4
  %426 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags500 = getelementptr inbounds %struct.sv, %struct.sv* %426, i32 0, i32 2
  %427 = load i32, i32* %sv_flags500, align 4
  %or501 = or i32 %427, 255
  store i32 %or501, i32* %sv_flags500, align 4
  %428 = load i32, i32* %type, align 4
  %idx.ext502 = zext i32 %428 to i64
  %add.ptr503 = getelementptr inbounds %struct.body_details, %struct.body_details* getelementptr inbounds ([16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 0), i64 %idx.ext502
  store %struct.body_details* %add.ptr503, %struct.body_details** %sv_type_details, align 8
  %429 = load %struct.body_details*, %struct.body_details** %sv_type_details, align 8
  %arena = getelementptr inbounds %struct.body_details, %struct.body_details* %429, i32 0, i32 3
  %bf.load = load i8, i8* %arena, align 1
  %bf.lshr = lshr i8 %bf.load, 6
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool504 = icmp ne i32 %bf.cast, 0
  br i1 %tobool504, label %if.then505, label %if.else516

if.then505:                                       ; preds = %free_body
  br label %do.body506

do.body506:                                       ; preds = %if.then505
  %430 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any507 = getelementptr inbounds %struct.sv, %struct.sv* %430, i32 0, i32 0
  %431 = load i8*, i8** %sv_any507, align 8
  %432 = load %struct.body_details*, %struct.body_details** %sv_type_details, align 8
  %offset508 = getelementptr inbounds %struct.body_details, %struct.body_details* %432, i32 0, i32 2
  %433 = load i8, i8* %offset508, align 2
  %conv509 = zext i8 %433 to i32
  %idx.ext510 = sext i32 %conv509 to i64
  %add.ptr511 = getelementptr inbounds i8, i8* %431, i64 %idx.ext510
  %434 = bitcast i8* %add.ptr511 to i8**
  store i8** %434, i8*** %thing_copy, align 8
  %435 = load i32, i32* %type, align 4
  %idxprom = zext i32 %435 to i64
  %arrayidx512 = getelementptr inbounds [16 x i8*], [16 x i8*]* @PL_body_roots, i64 0, i64 %idxprom
  %436 = load i8*, i8** %arrayidx512, align 8
  %437 = load i8**, i8*** %thing_copy, align 8
  store i8* %436, i8** %437, align 8
  %438 = load i8**, i8*** %thing_copy, align 8
  %439 = bitcast i8** %438 to i8*
  %440 = load i32, i32* %type, align 4
  %idxprom513 = zext i32 %440 to i64
  %arrayidx514 = getelementptr inbounds [16 x i8*], [16 x i8*]* @PL_body_roots, i64 0, i64 %idxprom513
  store i8* %439, i8** %arrayidx514, align 8
  br label %do.end515

do.end515:                                        ; preds = %do.body506
  br label %if.end521

if.else516:                                       ; preds = %free_body
  %441 = load %struct.body_details*, %struct.body_details** %sv_type_details, align 8
  %body_size = getelementptr inbounds %struct.body_details, %struct.body_details* %441, i32 0, i32 0
  %442 = load i8, i8* %body_size, align 4
  %tobool517 = icmp ne i8 %442, 0
  br i1 %tobool517, label %if.then518, label %if.end520

if.then518:                                       ; preds = %if.else516
  %443 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any519 = getelementptr inbounds %struct.sv, %struct.sv* %443, i32 0, i32 0
  %444 = load i8*, i8** %sv_any519, align 8
  call void @Perl_safesysfree(i8* %444)
  br label %if.end520

if.end520:                                        ; preds = %if.then518, %if.else516
  br label %if.end521

if.end521:                                        ; preds = %if.end520, %do.end515
  br label %free_head

free_head:                                        ; preds = %if.end521, %if.end
  %445 = load %struct.sv*, %struct.sv** %sv, align 8
  %446 = load %struct.sv*, %struct.sv** %orig_sv.addr, align 8
  %cmp522 = icmp ne %struct.sv* %445, %446
  br i1 %cmp522, label %land.lhs.true524, label %if.end537

land.lhs.true524:                                 ; preds = %free_head
  %447 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %447, i32 0, i32 1
  %448 = load i32, i32* %sv_refcnt, align 8
  %tobool525 = icmp ne i32 %448, 0
  br i1 %tobool525, label %if.end537, label %if.then526

if.then526:                                       ; preds = %land.lhs.true524
  br label %do.body527

do.body527:                                       ; preds = %if.then526
  %449 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags528 = getelementptr inbounds %struct.sv, %struct.sv* %449, i32 0, i32 2
  %450 = load i32, i32* %sv_flags528, align 4
  store i32 %450, i32* %old_flags, align 4
  %451 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags529 = getelementptr inbounds %struct.sv, %struct.sv* %451, i32 0, i32 2
  store i32 255, i32* %sv_flags529, align 4
  %452 = load i32, i32* %old_flags, align 4
  %and530 = and i32 %452, 67108864
  %tobool531 = icmp ne i32 %and530, 0
  br i1 %tobool531, label %if.end534, label %if.then532

if.then532:                                       ; preds = %do.body527
  %453 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %454 = bitcast %struct.sv* %453 to i8*
  %455 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any533 = getelementptr inbounds %struct.sv, %struct.sv* %455, i32 0, i32 0
  store i8* %454, i8** %sv_any533, align 8
  %456 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %456, %struct.sv** @PL_sv_root, align 8
  br label %if.end534

if.end534:                                        ; preds = %if.then532, %do.body527
  %457 = load i64, i64* @PL_sv_count, align 8
  %dec535 = add nsw i64 %457, -1
  store i64 %dec535, i64* @PL_sv_count, align 8
  br label %do.end536

do.end536:                                        ; preds = %if.end534
  br label %if.end537

if.end537:                                        ; preds = %do.end536, %land.lhs.true524, %free_head
  br label %get_next_sv

get_next_sv:                                      ; preds = %if.end537, %if.then181, %if.end163, %if.then15
  br label %while.body539

while.body539:                                    ; preds = %get_next_sv, %if.then600, %if.then604, %if.then609, %if.then626
  store %struct.sv* null, %struct.sv** %sv, align 8
  %458 = load %struct.sv*, %struct.sv** %next_sv, align 8
  %tobool540 = icmp ne %struct.sv* %458, null
  br i1 %tobool540, label %if.then541, label %if.else542

if.then541:                                       ; preds = %while.body539
  %459 = load %struct.sv*, %struct.sv** %next_sv, align 8
  store %struct.sv* %459, %struct.sv** %sv, align 8
  store %struct.sv* null, %struct.sv** %next_sv, align 8
  br label %if.end598

if.else542:                                       ; preds = %while.body539
  %460 = load %struct.sv*, %struct.sv** %iter_sv, align 8
  %tobool543 = icmp ne %struct.sv* %460, null
  br i1 %tobool543, label %if.else545, label %if.then544

if.then544:                                       ; preds = %if.else542
  br label %while.end

if.else545:                                       ; preds = %if.else542
  %461 = load %struct.sv*, %struct.sv** %iter_sv, align 8
  %sv_flags546 = getelementptr inbounds %struct.sv, %struct.sv* %461, i32 0, i32 2
  %462 = load i32, i32* %sv_flags546, align 4
  %and547 = and i32 %462, 255
  %cmp548 = icmp eq i32 %and547, 11
  br i1 %cmp548, label %if.then550, label %if.else574

if.then550:                                       ; preds = %if.else545
  %463 = load %struct.sv*, %struct.sv** %iter_sv, align 8
  %464 = bitcast %struct.sv* %463 to %struct.av*
  store %struct.av* %464, %struct.av** %av551, align 8
  %465 = load %struct.av*, %struct.av** %av551, align 8
  %sv_any552 = getelementptr inbounds %struct.av, %struct.av* %465, i32 0, i32 0
  %466 = load %struct.xpvav*, %struct.xpvav** %sv_any552, align 8
  %xav_fill553 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %466, i32 0, i32 2
  %467 = load i64, i64* %xav_fill553, align 8
  %cmp554 = icmp sgt i64 %467, -1
  br i1 %cmp554, label %if.then556, label %if.else563

if.then556:                                       ; preds = %if.then550
  %468 = load %struct.av*, %struct.av** %av551, align 8
  %sv_u557 = getelementptr inbounds %struct.av, %struct.av* %468, i32 0, i32 3
  %svu_array558 = bitcast %union.anon.3* %sv_u557 to %struct.sv***
  %469 = load %struct.sv**, %struct.sv*** %svu_array558, align 8
  %470 = load %struct.av*, %struct.av** %av551, align 8
  %sv_any559 = getelementptr inbounds %struct.av, %struct.av* %470, i32 0, i32 0
  %471 = load %struct.xpvav*, %struct.xpvav** %sv_any559, align 8
  %xav_fill560 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %471, i32 0, i32 2
  %472 = load i64, i64* %xav_fill560, align 8
  %dec561 = add nsw i64 %472, -1
  store i64 %dec561, i64* %xav_fill560, align 8
  %arrayidx562 = getelementptr inbounds %struct.sv*, %struct.sv** %469, i64 %472
  %473 = load %struct.sv*, %struct.sv** %arrayidx562, align 8
  store %struct.sv* %473, %struct.sv** %sv, align 8
  br label %if.end573

if.else563:                                       ; preds = %if.then550
  %474 = load %struct.sv*, %struct.sv** %iter_sv, align 8
  store %struct.sv* %474, %struct.sv** %sv, align 8
  %475 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags564 = getelementptr inbounds %struct.sv, %struct.sv* %475, i32 0, i32 2
  %476 = load i32, i32* %sv_flags564, align 4
  %and565 = and i32 %476, 255
  store i32 %and565, i32* %type, align 4
  %477 = load %struct.av*, %struct.av** %av551, align 8
  %sv_u566 = getelementptr inbounds %struct.av, %struct.av* %477, i32 0, i32 3
  %svu_array567 = bitcast %union.anon.3* %sv_u566 to %struct.sv***
  %478 = load %struct.sv**, %struct.sv*** %svu_array567, align 8
  %479 = load %struct.av*, %struct.av** %av551, align 8
  %sv_any568 = getelementptr inbounds %struct.av, %struct.av* %479, i32 0, i32 0
  %480 = load %struct.xpvav*, %struct.xpvav** %sv_any568, align 8
  %xav_max569 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %480, i32 0, i32 3
  %481 = load i64, i64* %xav_max569, align 8
  %arrayidx570 = getelementptr inbounds %struct.sv*, %struct.sv** %478, i64 %481
  %482 = load %struct.sv*, %struct.sv** %arrayidx570, align 8
  store %struct.sv* %482, %struct.sv** %iter_sv, align 8
  %483 = load %struct.av*, %struct.av** %av551, align 8
  %sv_any571 = getelementptr inbounds %struct.av, %struct.av* %483, i32 0, i32 0
  %484 = load %struct.xpvav*, %struct.xpvav** %sv_any571, align 8
  %xav_alloc572 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %484, i32 0, i32 4
  %485 = load %struct.sv**, %struct.sv*** %xav_alloc572, align 8
  %486 = bitcast %struct.sv** %485 to i8*
  call void @Perl_safesysfree(i8* %486)
  br label %free_body

if.end573:                                        ; preds = %if.then556
  br label %if.end596

if.else574:                                       ; preds = %if.else545
  %487 = load %struct.sv*, %struct.sv** %iter_sv, align 8
  %sv_flags575 = getelementptr inbounds %struct.sv, %struct.sv* %487, i32 0, i32 2
  %488 = load i32, i32* %sv_flags575, align 4
  %and576 = and i32 %488, 255
  %cmp577 = icmp eq i32 %and576, 12
  br i1 %cmp577, label %if.then579, label %if.end595

if.then579:                                       ; preds = %if.else574
  %489 = load %struct.sv*, %struct.sv** %iter_sv, align 8
  %490 = bitcast %struct.sv* %489 to %struct.hv*
  %call580 = call %struct.sv* @Perl_hfree_next_entry(%struct.hv* %490, i64* %hash_index)
  store %struct.sv* %call580, %struct.sv** %sv, align 8
  %491 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool581 = icmp ne %struct.sv* %491, null
  br i1 %tobool581, label %if.end594, label %land.lhs.true582

land.lhs.true582:                                 ; preds = %if.then579
  %492 = load %struct.sv*, %struct.sv** %iter_sv, align 8
  %493 = bitcast %struct.sv* %492 to %struct.hv*
  %sv_any583 = getelementptr inbounds %struct.hv, %struct.hv* %493, i32 0, i32 0
  %494 = load %struct.xpvhv*, %struct.xpvhv** %sv_any583, align 8
  %xhv_keys584 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %494, i32 0, i32 2
  %495 = load i64, i64* %xhv_keys584, align 8
  %tobool585 = icmp ne i64 %495, 0
  br i1 %tobool585, label %if.end594, label %if.then586

if.then586:                                       ; preds = %land.lhs.true582
  %496 = load %struct.sv*, %struct.sv** %iter_sv, align 8
  store %struct.sv* %496, %struct.sv** %sv, align 8
  %497 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags587 = getelementptr inbounds %struct.sv, %struct.sv* %497, i32 0, i32 2
  %498 = load i32, i32* %sv_flags587, align 4
  %and588 = and i32 %498, 255
  store i32 %and588, i32* %type, align 4
  %499 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any589 = getelementptr inbounds %struct.sv, %struct.sv* %499, i32 0, i32 0
  %500 = load i8*, i8** %sv_any589, align 8
  %501 = bitcast i8* %500 to %struct.xpvmg*
  %xmg_stash590 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %501, i32 0, i32 0
  %502 = load %struct.hv*, %struct.hv** %xmg_stash590, align 8
  %503 = bitcast %struct.hv* %502 to %struct.sv*
  store %struct.sv* %503, %struct.sv** %iter_sv, align 8
  %504 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any591 = getelementptr inbounds %struct.sv, %struct.sv* %504, i32 0, i32 0
  %505 = load i8*, i8** %sv_any591, align 8
  %506 = bitcast i8* %505 to %struct.xpvmg*
  %xmg_u592 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %506, i32 0, i32 1
  %xmg_hash_index593 = bitcast %union._xmgu* %xmg_u592 to i64*
  %507 = load i64, i64* %xmg_hash_index593, align 8
  store i64 %507, i64* %hash_index, align 8
  %508 = load %struct.sv*, %struct.sv** %sv, align 8
  %509 = bitcast %struct.sv* %508 to i8*
  %510 = bitcast i8* %509 to %struct.hv*
  call void @Perl_hv_undef_flags(%struct.hv* %510, i32 2)
  br label %free_body

if.end594:                                        ; preds = %land.lhs.true582, %if.then579
  br label %if.end595

if.end595:                                        ; preds = %if.end594, %if.else574
  br label %if.end596

if.end596:                                        ; preds = %if.end595, %if.end573
  br label %if.end597

if.end597:                                        ; preds = %if.end596
  br label %if.end598

if.end598:                                        ; preds = %if.end597, %if.then541
  %511 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool599 = icmp ne %struct.sv* %511, null
  br i1 %tobool599, label %if.end601, label %if.then600

if.then600:                                       ; preds = %if.end598
  br label %while.body539

if.end601:                                        ; preds = %if.end598
  %512 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt602 = getelementptr inbounds %struct.sv, %struct.sv* %512, i32 0, i32 1
  %513 = load i32, i32* %sv_refcnt602, align 8
  %tobool603 = icmp ne i32 %513, 0
  br i1 %tobool603, label %if.end605, label %if.then604

if.then604:                                       ; preds = %if.end601
  %514 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_free(%struct.sv* %514)
  br label %while.body539

if.end605:                                        ; preds = %if.end601
  %515 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt606 = getelementptr inbounds %struct.sv, %struct.sv* %515, i32 0, i32 1
  %516 = load i32, i32* %sv_refcnt606, align 8
  %dec607 = add i32 %516, -1
  store i32 %dec607, i32* %sv_refcnt606, align 8
  %tobool608 = icmp ne i32 %dec607, 0
  br i1 %tobool608, label %if.then609, label %if.end610

if.then609:                                       ; preds = %if.end605
  br label %while.body539

if.end610:                                        ; preds = %if.end605
  %517 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags611 = getelementptr inbounds %struct.sv, %struct.sv* %517, i32 0, i32 2
  %518 = load i32, i32* %sv_flags611, align 4
  %and612 = and i32 %518, 134283264
  %tobool613 = icmp ne i32 %and612, 0
  br i1 %tobool613, label %land.lhs.true614, label %if.end628

land.lhs.true614:                                 ; preds = %if.end610
  %519 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp615 = icmp eq %struct.sv* %519, @PL_sv_undef
  br i1 %cmp615, label %if.then626, label %lor.lhs.false617

lor.lhs.false617:                                 ; preds = %land.lhs.true614
  %520 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp618 = icmp eq %struct.sv* %520, @PL_sv_yes
  br i1 %cmp618, label %if.then626, label %lor.lhs.false620

lor.lhs.false620:                                 ; preds = %lor.lhs.false617
  %521 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp621 = icmp eq %struct.sv* %521, @PL_sv_no
  br i1 %cmp621, label %if.then626, label %lor.lhs.false623

lor.lhs.false623:                                 ; preds = %lor.lhs.false620
  %522 = load %struct.sv*, %struct.sv** %sv, align 8
  %cmp624 = icmp eq %struct.sv* %522, @PL_sv_placeholder
  br i1 %cmp624, label %if.then626, label %if.end628

if.then626:                                       ; preds = %lor.lhs.false623, %lor.lhs.false620, %lor.lhs.false617, %land.lhs.true614
  %523 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt627 = getelementptr inbounds %struct.sv, %struct.sv* %523, i32 0, i32 1
  store i32 2147483647, i32* %sv_refcnt627, align 8
  br label %while.body539

if.end628:                                        ; preds = %lor.lhs.false623, %if.end610
  br label %while.end

while.end:                                        ; preds = %if.end628, %if.then544
  br label %while.cond

while.end629:                                     ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_curse(%struct.sv* %sv, i1 zeroext %check_refcnt) #0 {
entry:
  %retval = alloca i1, align 1
  %sv.addr = alloca %struct.sv*, align 8
  %check_refcnt.addr = alloca i8, align 1
  %sp = alloca %struct.sv**, align 8
  %stash = alloca %struct.hv*, align 8
  %destructor = alloca %struct.cv*, align 8
  %gv = alloca %struct.gv*, align 8
  %tmpref = alloca %struct.sv*, align 8
  %next = alloca %struct.stackinfo*, align 8
  %mark_stack_entry = alloca i32*, align 8
  %sp206 = alloca %struct.sv**, align 8
  %prev = alloca %struct.stackinfo*, align 8
  %stash312 = alloca %struct.hv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %frombool = zext i1 %check_refcnt to i8
  store i8 %frombool, i8* %check_refcnt.addr, align 1
  %0 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  %tobool = icmp ne %struct.hv* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end307

land.lhs.true:                                    ; preds = %entry
  %1 = load i1 (%struct.sv*)*, i1 (%struct.sv*)** @PL_destroyhook, align 8
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call zeroext i1 %1(%struct.sv* %2)
  br i1 %call, label %if.then, label %if.end307

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %3, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %6, i32 0, i32 0
  %7 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %7, %struct.hv** %stash, align 8
  %8 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags, align 4
  %and = and i32 %9, 33554432
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %land.lhs.true2, label %cond.false58

land.lhs.true2:                                   ; preds = %do.body
  %10 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u = getelementptr inbounds %struct.hv, %struct.hv* %10, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u to %struct.he***
  %11 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %12 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any3 = getelementptr inbounds %struct.hv, %struct.hv* %12, i32 0, i32 0
  %13 = load %struct.xpvhv*, %struct.xpvhv** %sv_any3, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %13, i32 0, i32 3
  %14 = load i64, i64* %xhv_max, align 8
  %add = add i64 %14, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %11, i64 %add
  %15 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %15, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %16 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool4 = icmp ne %struct.hek* %16, null
  br i1 %tobool4, label %land.lhs.true5, label %cond.false58

land.lhs.true5:                                   ; preds = %land.lhs.true2
  %17 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u6 = getelementptr inbounds %struct.hv, %struct.hv* %17, i32 0, i32 3
  %svu_hash7 = bitcast %union.anon.4* %sv_u6 to %struct.he***
  %18 = load %struct.he**, %struct.he*** %svu_hash7, align 8
  %19 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any8 = getelementptr inbounds %struct.hv, %struct.hv* %19, i32 0, i32 0
  %20 = load %struct.xpvhv*, %struct.xpvhv** %sv_any8, align 8
  %xhv_max9 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %20, i32 0, i32 3
  %21 = load i64, i64* %xhv_max9, align 8
  %add10 = add i64 %21, 1
  %arrayidx11 = getelementptr inbounds %struct.he*, %struct.he** %18, i64 %add10
  %22 = bitcast %struct.he** %arrayidx11 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %22, i32 0, i32 4
  %23 = load i32, i32* %xhv_name_count, align 4
  %tobool12 = icmp ne i32 %23, 0
  br i1 %tobool12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true5
  %24 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u13 = getelementptr inbounds %struct.hv, %struct.hv* %24, i32 0, i32 3
  %svu_hash14 = bitcast %union.anon.4* %sv_u13 to %struct.he***
  %25 = load %struct.he**, %struct.he*** %svu_hash14, align 8
  %26 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any15 = getelementptr inbounds %struct.hv, %struct.hv* %26, i32 0, i32 0
  %27 = load %struct.xpvhv*, %struct.xpvhv** %sv_any15, align 8
  %xhv_max16 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %27, i32 0, i32 3
  %28 = load i64, i64* %xhv_max16, align 8
  %add17 = add i64 %28, 1
  %arrayidx18 = getelementptr inbounds %struct.he*, %struct.he** %25, i64 %add17
  %29 = bitcast %struct.he** %arrayidx18 to %struct.xpvhv_aux*
  %xhv_name_u19 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %29, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u19 to %struct.hek***
  %30 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %31 = load %struct.hek*, %struct.hek** %30, align 8
  %tobool20 = icmp ne %struct.hek* %31, null
  br i1 %tobool20, label %cond.true30, label %cond.false58

cond.false:                                       ; preds = %land.lhs.true5
  %32 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u21 = getelementptr inbounds %struct.hv, %struct.hv* %32, i32 0, i32 3
  %svu_hash22 = bitcast %union.anon.4* %sv_u21 to %struct.he***
  %33 = load %struct.he**, %struct.he*** %svu_hash22, align 8
  %34 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any23 = getelementptr inbounds %struct.hv, %struct.hv* %34, i32 0, i32 0
  %35 = load %struct.xpvhv*, %struct.xpvhv** %sv_any23, align 8
  %xhv_max24 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %35, i32 0, i32 3
  %36 = load i64, i64* %xhv_max24, align 8
  %add25 = add i64 %36, 1
  %arrayidx26 = getelementptr inbounds %struct.he*, %struct.he** %33, i64 %add25
  %37 = bitcast %struct.he** %arrayidx26 to %struct.xpvhv_aux*
  %xhv_name_u27 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %37, i32 0, i32 0
  %xhvnameu_name28 = bitcast %union._xhvnameu* %xhv_name_u27 to %struct.hek**
  %38 = load %struct.hek*, %struct.hek** %xhvnameu_name28, align 8
  %tobool29 = icmp ne %struct.hek* %38, null
  br i1 %tobool29, label %cond.true30, label %cond.false58

cond.true30:                                      ; preds = %cond.false, %cond.true
  %39 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u31 = getelementptr inbounds %struct.hv, %struct.hv* %39, i32 0, i32 3
  %svu_hash32 = bitcast %union.anon.4* %sv_u31 to %struct.he***
  %40 = load %struct.he**, %struct.he*** %svu_hash32, align 8
  %41 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any33 = getelementptr inbounds %struct.hv, %struct.hv* %41, i32 0, i32 0
  %42 = load %struct.xpvhv*, %struct.xpvhv** %sv_any33, align 8
  %xhv_max34 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %42, i32 0, i32 3
  %43 = load i64, i64* %xhv_max34, align 8
  %add35 = add i64 %43, 1
  %arrayidx36 = getelementptr inbounds %struct.he*, %struct.he** %40, i64 %add35
  %44 = bitcast %struct.he** %arrayidx36 to %struct.xpvhv_aux*
  %xhv_name_count37 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %44, i32 0, i32 4
  %45 = load i32, i32* %xhv_name_count37, align 4
  %tobool38 = icmp ne i32 %45, 0
  br i1 %tobool38, label %cond.true39, label %cond.false48

cond.true39:                                      ; preds = %cond.true30
  %46 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u40 = getelementptr inbounds %struct.hv, %struct.hv* %46, i32 0, i32 3
  %svu_hash41 = bitcast %union.anon.4* %sv_u40 to %struct.he***
  %47 = load %struct.he**, %struct.he*** %svu_hash41, align 8
  %48 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any42 = getelementptr inbounds %struct.hv, %struct.hv* %48, i32 0, i32 0
  %49 = load %struct.xpvhv*, %struct.xpvhv** %sv_any42, align 8
  %xhv_max43 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %49, i32 0, i32 3
  %50 = load i64, i64* %xhv_max43, align 8
  %add44 = add i64 %50, 1
  %arrayidx45 = getelementptr inbounds %struct.he*, %struct.he** %47, i64 %add44
  %51 = bitcast %struct.he** %arrayidx45 to %struct.xpvhv_aux*
  %xhv_name_u46 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %51, i32 0, i32 0
  %xhvnameu_names47 = bitcast %union._xhvnameu* %xhv_name_u46 to %struct.hek***
  %52 = load %struct.hek**, %struct.hek*** %xhvnameu_names47, align 8
  %53 = load %struct.hek*, %struct.hek** %52, align 8
  br label %cond.end

cond.false48:                                     ; preds = %cond.true30
  %54 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u49 = getelementptr inbounds %struct.hv, %struct.hv* %54, i32 0, i32 3
  %svu_hash50 = bitcast %union.anon.4* %sv_u49 to %struct.he***
  %55 = load %struct.he**, %struct.he*** %svu_hash50, align 8
  %56 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any51 = getelementptr inbounds %struct.hv, %struct.hv* %56, i32 0, i32 0
  %57 = load %struct.xpvhv*, %struct.xpvhv** %sv_any51, align 8
  %xhv_max52 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %57, i32 0, i32 3
  %58 = load i64, i64* %xhv_max52, align 8
  %add53 = add i64 %58, 1
  %arrayidx54 = getelementptr inbounds %struct.he*, %struct.he** %55, i64 %add53
  %59 = bitcast %struct.he** %arrayidx54 to %struct.xpvhv_aux*
  %xhv_name_u55 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %59, i32 0, i32 0
  %xhvnameu_name56 = bitcast %union._xhvnameu* %xhv_name_u55 to %struct.hek**
  %60 = load %struct.hek*, %struct.hek** %xhvnameu_name56, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false48, %cond.true39
  %cond = phi %struct.hek* [ %53, %cond.true39 ], [ %60, %cond.false48 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %tobool57 = icmp ne i8* %arraydecay, null
  br i1 %tobool57, label %if.then59, label %if.end243

cond.false58:                                     ; preds = %cond.false, %cond.true, %land.lhs.true2, %do.body
  br i1 false, label %if.then59, label %if.end243

if.then59:                                        ; preds = %cond.false58, %cond.end
  store %struct.cv* null, %struct.cv** %destructor, align 8
  %61 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags60 = getelementptr inbounds %struct.hv, %struct.hv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %62, 1048576
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %if.end, label %if.then63

if.then63:                                        ; preds = %if.then59
  %63 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any64 = getelementptr inbounds %struct.hv, %struct.hv* %63, i32 0, i32 0
  %64 = load %struct.xpvhv*, %struct.xpvhv** %sv_any64, align 8
  %65 = bitcast %struct.xpvhv* %64 to %struct.xpvmg*
  %xmg_stash65 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %65, i32 0, i32 0
  %66 = load %struct.hv*, %struct.hv** %xmg_stash65, align 8
  %67 = bitcast %struct.hv* %66 to %struct.cv*
  store %struct.cv* %67, %struct.cv** %destructor, align 8
  br label %if.end

if.end:                                           ; preds = %if.then63, %if.then59
  %68 = load %struct.cv*, %struct.cv** %destructor, align 8
  %tobool66 = icmp ne %struct.cv* %68, null
  br i1 %tobool66, label %lor.lhs.false, label %if.then86

lor.lhs.false:                                    ; preds = %if.end
  %69 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u67 = getelementptr inbounds %struct.hv, %struct.hv* %69, i32 0, i32 3
  %svu_hash68 = bitcast %union.anon.4* %sv_u67 to %struct.he***
  %70 = load %struct.he**, %struct.he*** %svu_hash68, align 8
  %71 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any69 = getelementptr inbounds %struct.hv, %struct.hv* %71, i32 0, i32 0
  %72 = load %struct.xpvhv*, %struct.xpvhv** %sv_any69, align 8
  %xhv_max70 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %72, i32 0, i32 3
  %73 = load i64, i64* %xhv_max70, align 8
  %add71 = add i64 %73, 1
  %arrayidx72 = getelementptr inbounds %struct.he*, %struct.he** %70, i64 %add71
  %74 = bitcast %struct.he** %arrayidx72 to %struct.xpvhv_aux*
  %xhv_mro_meta = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %74, i32 0, i32 5
  %75 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta, align 8
  %tobool73 = icmp ne %struct.mro_meta* %75, null
  br i1 %tobool73, label %cond.true74, label %cond.false82

cond.true74:                                      ; preds = %lor.lhs.false
  %76 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u75 = getelementptr inbounds %struct.hv, %struct.hv* %76, i32 0, i32 3
  %svu_hash76 = bitcast %union.anon.4* %sv_u75 to %struct.he***
  %77 = load %struct.he**, %struct.he*** %svu_hash76, align 8
  %78 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any77 = getelementptr inbounds %struct.hv, %struct.hv* %78, i32 0, i32 0
  %79 = load %struct.xpvhv*, %struct.xpvhv** %sv_any77, align 8
  %xhv_max78 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %79, i32 0, i32 3
  %80 = load i64, i64* %xhv_max78, align 8
  %add79 = add i64 %80, 1
  %arrayidx80 = getelementptr inbounds %struct.he*, %struct.he** %77, i64 %add79
  %81 = bitcast %struct.he** %arrayidx80 to %struct.xpvhv_aux*
  %xhv_mro_meta81 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %81, i32 0, i32 5
  %82 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta81, align 8
  br label %cond.end84

cond.false82:                                     ; preds = %lor.lhs.false
  %83 = load %struct.hv*, %struct.hv** %stash, align 8
  %call83 = call %struct.mro_meta* @Perl_mro_meta_init(%struct.hv* %83)
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false82, %cond.true74
  %cond85 = phi %struct.mro_meta* [ %82, %cond.true74 ], [ %call83, %cond.false82 ]
  %destroy_gen = getelementptr inbounds %struct.mro_meta, %struct.mro_meta* %cond85, i32 0, i32 8
  %84 = load i32, i32* %destroy_gen, align 8
  %85 = load i32, i32* @PL_sub_generation, align 4
  %cmp = icmp ne i32 %84, %85
  br i1 %cmp, label %if.then86, label %if.end113

if.then86:                                        ; preds = %cond.end84, %if.end
  %86 = load %struct.hv*, %struct.hv** %stash, align 8
  %call87 = call %struct.gv* @Perl_gv_fetchmeth_pvn_autoload(%struct.hv* %86, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.96, i64 0, i64 0), i64 7, i32 0, i32 0)
  store %struct.gv* %call87, %struct.gv** %gv, align 8
  %87 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool88 = icmp ne %struct.gv* %87, null
  br i1 %tobool88, label %if.then89, label %if.end92

if.then89:                                        ; preds = %if.then86
  %88 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u90 = getelementptr inbounds %struct.gv, %struct.gv* %88, i32 0, i32 3
  %svu_gp = bitcast %union.anon.6* %sv_u90 to %struct.gp**
  %89 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %89, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  %90 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr91 = getelementptr inbounds %struct.cv, %struct.cv* %90, i64 0
  store %struct.cv* %add.ptr91, %struct.cv** %destructor, align 8
  br label %if.end92

if.end92:                                         ; preds = %if.then89, %if.then86
  %91 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags93 = getelementptr inbounds %struct.hv, %struct.hv* %91, i32 0, i32 2
  %92 = load i32, i32* %sv_flags93, align 4
  %and94 = and i32 %92, 1048576
  %tobool95 = icmp ne i32 %and94, 0
  br i1 %tobool95, label %if.end112, label %if.then96

if.then96:                                        ; preds = %if.end92
  %93 = load %struct.cv*, %struct.cv** %destructor, align 8
  %tobool97 = icmp ne %struct.cv* %93, null
  br i1 %tobool97, label %cond.true98, label %cond.false99

cond.true98:                                      ; preds = %if.then96
  %94 = load %struct.cv*, %struct.cv** %destructor, align 8
  %95 = bitcast %struct.cv* %94 to %struct.hv*
  br label %cond.end100

cond.false99:                                     ; preds = %if.then96
  br label %cond.end100

cond.end100:                                      ; preds = %cond.false99, %cond.true98
  %cond101 = phi %struct.hv* [ %95, %cond.true98 ], [ getelementptr inbounds (%struct.hv, %struct.hv* null, i64 1), %cond.false99 ]
  %96 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any102 = getelementptr inbounds %struct.hv, %struct.hv* %96, i32 0, i32 0
  %97 = load %struct.xpvhv*, %struct.xpvhv** %sv_any102, align 8
  %98 = bitcast %struct.xpvhv* %97 to %struct.xpvmg*
  %xmg_stash103 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %98, i32 0, i32 0
  store %struct.hv* %cond101, %struct.hv** %xmg_stash103, align 8
  %99 = load i32, i32* @PL_sub_generation, align 4
  %100 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u104 = getelementptr inbounds %struct.hv, %struct.hv* %100, i32 0, i32 3
  %svu_hash105 = bitcast %union.anon.4* %sv_u104 to %struct.he***
  %101 = load %struct.he**, %struct.he*** %svu_hash105, align 8
  %102 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any106 = getelementptr inbounds %struct.hv, %struct.hv* %102, i32 0, i32 0
  %103 = load %struct.xpvhv*, %struct.xpvhv** %sv_any106, align 8
  %xhv_max107 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %103, i32 0, i32 3
  %104 = load i64, i64* %xhv_max107, align 8
  %add108 = add i64 %104, 1
  %arrayidx109 = getelementptr inbounds %struct.he*, %struct.he** %101, i64 %add108
  %105 = bitcast %struct.he** %arrayidx109 to %struct.xpvhv_aux*
  %xhv_mro_meta110 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %105, i32 0, i32 5
  %106 = load %struct.mro_meta*, %struct.mro_meta** %xhv_mro_meta110, align 8
  %destroy_gen111 = getelementptr inbounds %struct.mro_meta, %struct.mro_meta* %106, i32 0, i32 8
  store i32 %99, i32* %destroy_gen111, align 8
  br label %if.end112

if.end112:                                        ; preds = %cond.end100, %if.end92
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %cond.end84
  %107 = load %struct.cv*, %struct.cv** %destructor, align 8
  %tobool114 = icmp ne %struct.cv* %107, null
  br i1 %tobool114, label %land.lhs.true115, label %if.end242

land.lhs.true115:                                 ; preds = %if.end113
  %108 = load %struct.cv*, %struct.cv** %destructor, align 8
  %cmp116 = icmp ne %struct.cv* %108, getelementptr inbounds (%struct.cv, %struct.cv* null, i64 1)
  br i1 %cmp116, label %land.lhs.true117, label %if.end242

land.lhs.true117:                                 ; preds = %land.lhs.true115
  %109 = load %struct.cv*, %struct.cv** %destructor, align 8
  %sv_any118 = getelementptr inbounds %struct.cv, %struct.cv* %109, i32 0, i32 0
  %110 = load %struct.xpvcv*, %struct.xpvcv** %sv_any118, align 8
  %111 = bitcast %struct.xpvcv* %110 to i8*
  %112 = bitcast i8* %111 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %112, i32 0, i32 12
  %113 = load i32, i32* %xcv_flags, align 4
  %and119 = and i32 %113, 4
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %if.end242, label %land.lhs.true121

land.lhs.true121:                                 ; preds = %land.lhs.true117
  %114 = load %struct.cv*, %struct.cv** %destructor, align 8
  %sv_any122 = getelementptr inbounds %struct.cv, %struct.cv* %114, i32 0, i32 0
  %115 = load %struct.xpvcv*, %struct.xpvcv** %sv_any122, align 8
  %116 = bitcast %struct.xpvcv* %115 to i8*
  %117 = bitcast i8* %116 to %struct.xpvcv*
  %xcv_flags123 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %117, i32 0, i32 12
  %118 = load i32, i32* %xcv_flags123, align 4
  %and124 = and i32 %118, 8
  %tobool125 = icmp ne i32 %and124, 0
  br i1 %tobool125, label %if.then155, label %lor.lhs.false126

lor.lhs.false126:                                 ; preds = %land.lhs.true121
  %119 = load %struct.cv*, %struct.cv** %destructor, align 8
  %sv_any127 = getelementptr inbounds %struct.cv, %struct.cv* %119, i32 0, i32 0
  %120 = load %struct.xpvcv*, %struct.xpvcv** %sv_any127, align 8
  %121 = bitcast %struct.xpvcv* %120 to i8*
  %122 = bitcast i8* %121 to %struct.xpvcv*
  %xcv_start_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %122, i32 0, i32 5
  %xcv_start = bitcast %union.anon.8* %xcv_start_u to %struct.op**
  %123 = load %struct.op*, %struct.op** %xcv_start, align 8
  %tobool128 = icmp ne %struct.op* %123, null
  br i1 %tobool128, label %land.lhs.true129, label %if.end242

land.lhs.true129:                                 ; preds = %lor.lhs.false126
  %124 = load %struct.cv*, %struct.cv** %destructor, align 8
  %sv_any130 = getelementptr inbounds %struct.cv, %struct.cv* %124, i32 0, i32 0
  %125 = load %struct.xpvcv*, %struct.xpvcv** %sv_any130, align 8
  %126 = bitcast %struct.xpvcv* %125 to i8*
  %127 = bitcast i8* %126 to %struct.xpvcv*
  %xcv_start_u131 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %127, i32 0, i32 5
  %xcv_start132 = bitcast %union.anon.8* %xcv_start_u131 to %struct.op**
  %128 = load %struct.op*, %struct.op** %xcv_start132, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %128, i32 0, i32 0
  %129 = load %struct.op*, %struct.op** %op_next, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %129, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp133 = icmp ne i32 %bf.cast, 186
  br i1 %cmp133, label %land.lhs.true134, label %if.end242

land.lhs.true134:                                 ; preds = %land.lhs.true129
  %130 = load %struct.cv*, %struct.cv** %destructor, align 8
  %sv_any135 = getelementptr inbounds %struct.cv, %struct.cv* %130, i32 0, i32 0
  %131 = load %struct.xpvcv*, %struct.xpvcv** %sv_any135, align 8
  %132 = bitcast %struct.xpvcv* %131 to i8*
  %133 = bitcast i8* %132 to %struct.xpvcv*
  %xcv_start_u136 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %133, i32 0, i32 5
  %xcv_start137 = bitcast %union.anon.8* %xcv_start_u136 to %struct.op**
  %134 = load %struct.op*, %struct.op** %xcv_start137, align 8
  %op_next138 = getelementptr inbounds %struct.op, %struct.op* %134, i32 0, i32 0
  %135 = load %struct.op*, %struct.op** %op_next138, align 8
  %op_type139 = getelementptr inbounds %struct.op, %struct.op* %135, i32 0, i32 4
  %bf.load140 = load i16, i16* %op_type139, align 8
  %bf.clear141 = and i16 %bf.load140, 511
  %bf.cast142 = zext i16 %bf.clear141 to i32
  %cmp143 = icmp ne i32 %bf.cast142, 3
  br i1 %cmp143, label %if.then155, label %lor.lhs.false144

lor.lhs.false144:                                 ; preds = %land.lhs.true134
  %136 = load %struct.cv*, %struct.cv** %destructor, align 8
  %sv_any145 = getelementptr inbounds %struct.cv, %struct.cv* %136, i32 0, i32 0
  %137 = load %struct.xpvcv*, %struct.xpvcv** %sv_any145, align 8
  %138 = bitcast %struct.xpvcv* %137 to i8*
  %139 = bitcast i8* %138 to %struct.xpvcv*
  %xcv_start_u146 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %139, i32 0, i32 5
  %xcv_start147 = bitcast %union.anon.8* %xcv_start_u146 to %struct.op**
  %140 = load %struct.op*, %struct.op** %xcv_start147, align 8
  %op_next148 = getelementptr inbounds %struct.op, %struct.op* %140, i32 0, i32 0
  %141 = load %struct.op*, %struct.op** %op_next148, align 8
  %op_next149 = getelementptr inbounds %struct.op, %struct.op* %141, i32 0, i32 0
  %142 = load %struct.op*, %struct.op** %op_next149, align 8
  %op_type150 = getelementptr inbounds %struct.op, %struct.op* %142, i32 0, i32 4
  %bf.load151 = load i16, i16* %op_type150, align 8
  %bf.clear152 = and i16 %bf.load151, 511
  %bf.cast153 = zext i16 %bf.clear152 to i32
  %cmp154 = icmp ne i32 %bf.cast153, 203
  br i1 %cmp154, label %if.then155, label %if.end242

if.then155:                                       ; preds = %lor.lhs.false144, %land.lhs.true134, %land.lhs.true121
  %143 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call156 = call %struct.sv* @Perl_newRV(%struct.sv* %143)
  store %struct.sv* %call156, %struct.sv** %tmpref, align 8
  %144 = load %struct.sv*, %struct.sv** %tmpref, align 8
  %sv_flags157 = getelementptr inbounds %struct.sv, %struct.sv* %144, i32 0, i32 2
  %145 = load i32, i32* %sv_flags157, align 4
  %or = or i32 %145, 134283264
  store i32 %or, i32* %sv_flags157, align 4
  call void @Perl_push_scope()
  br label %do.body158

do.body158:                                       ; preds = %if.then155
  %146 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %146, i32 0, i32 3
  %147 = load %struct.stackinfo*, %struct.stackinfo** %si_next, align 8
  store %struct.stackinfo* %147, %struct.stackinfo** %next, align 8
  %148 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %tobool159 = icmp ne %struct.stackinfo* %148, null
  br i1 %tobool159, label %if.end163, label %if.then160

if.then160:                                       ; preds = %do.body158
  %call161 = call %struct.stackinfo* @Perl_new_stackinfo(i32 32, i32 22)
  store %struct.stackinfo* %call161, %struct.stackinfo** %next, align 8
  %149 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %150 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %150, i32 0, i32 2
  store %struct.stackinfo* %149, %struct.stackinfo** %si_prev, align 8
  %151 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %152 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next162 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %152, i32 0, i32 3
  store %struct.stackinfo* %151, %struct.stackinfo** %si_next162, align 8
  br label %if.end163

if.end163:                                        ; preds = %if.then160, %do.body158
  %153 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_type = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %153, i32 0, i32 6
  store i32 6, i32* %si_type, align 8
  %154 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %154, i32 0, i32 4
  store i32 -1, i32* %si_cxix, align 8
  %155 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %155, i32 0, i32 0
  %156 = load %struct.av*, %struct.av** %si_stack, align 8
  %sv_any164 = getelementptr inbounds %struct.av, %struct.av* %156, i32 0, i32 0
  %157 = load %struct.xpvav*, %struct.xpvav** %sv_any164, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %157, i32 0, i32 2
  store i64 0, i64* %xav_fill, align 8
  br label %do.body165

do.body165:                                       ; preds = %if.end163
  %158 = load %struct.sv**, %struct.sv*** %sp, align 8
  %159 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %158 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %159 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %160 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any166 = getelementptr inbounds %struct.av, %struct.av* %160, i32 0, i32 0
  %161 = load %struct.xpvav*, %struct.xpvav** %sv_any166, align 8
  %xav_fill167 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %161, i32 0, i32 2
  store i64 %sub.ptr.div, i64* %xav_fill167, align 8
  %162 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack168 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %162, i32 0, i32 0
  %163 = load %struct.av*, %struct.av** %si_stack168, align 8
  %sv_u169 = getelementptr inbounds %struct.av, %struct.av* %163, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u169 to %struct.sv***
  %164 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %164, %struct.sv*** @PL_stack_base, align 8
  %165 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %166 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack170 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %166, i32 0, i32 0
  %167 = load %struct.av*, %struct.av** %si_stack170, align 8
  %sv_any171 = getelementptr inbounds %struct.av, %struct.av* %167, i32 0, i32 0
  %168 = load %struct.xpvav*, %struct.xpvav** %sv_any171, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %168, i32 0, i32 3
  %169 = load i64, i64* %xav_max, align 8
  %add.ptr172 = getelementptr inbounds %struct.sv*, %struct.sv** %165, i64 %169
  store %struct.sv** %add.ptr172, %struct.sv*** @PL_stack_max, align 8
  %170 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %171 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack173 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %171, i32 0, i32 0
  %172 = load %struct.av*, %struct.av** %si_stack173, align 8
  %sv_any174 = getelementptr inbounds %struct.av, %struct.av* %172, i32 0, i32 0
  %173 = load %struct.xpvav*, %struct.xpvav** %sv_any174, align 8
  %xav_fill175 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %173, i32 0, i32 2
  %174 = load i64, i64* %xav_fill175, align 8
  %add.ptr176 = getelementptr inbounds %struct.sv*, %struct.sv** %170, i64 %174
  store %struct.sv** %add.ptr176, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr176, %struct.sv*** %sp, align 8
  %175 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack177 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %175, i32 0, i32 0
  %176 = load %struct.av*, %struct.av** %si_stack177, align 8
  store %struct.av* %176, %struct.av** @PL_curstack, align 8
  br label %do.end

do.end:                                           ; preds = %do.body165
  %177 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  store %struct.stackinfo* %177, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end178

do.end178:                                        ; preds = %do.end
  br label %do.body179

do.body179:                                       ; preds = %do.end178
  %178 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %179 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast180 = ptrtoint %struct.sv** %178 to i64
  %sub.ptr.rhs.cast181 = ptrtoint %struct.sv** %179 to i64
  %sub.ptr.sub182 = sub i64 %sub.ptr.lhs.cast180, %sub.ptr.rhs.cast181
  %sub.ptr.div183 = sdiv exact i64 %sub.ptr.sub182, 8
  %cmp184 = icmp slt i64 %sub.ptr.div183, 2
  br i1 %cmp184, label %cond.true185, label %cond.false186

cond.true185:                                     ; preds = %do.body179
  br i1 true, label %if.then187, label %if.end189

cond.false186:                                    ; preds = %do.body179
  br i1 false, label %if.then187, label %if.end189

if.then187:                                       ; preds = %cond.false186, %cond.true185
  %180 = load %struct.sv**, %struct.sv*** %sp, align 8
  %181 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call188 = call %struct.sv** @Perl_stack_grow(%struct.sv** %180, %struct.sv** %181, i64 2)
  store %struct.sv** %call188, %struct.sv*** %sp, align 8
  %182 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end189

if.end189:                                        ; preds = %if.then187, %cond.false186, %cond.true185
  br label %do.end190

do.end190:                                        ; preds = %if.end189
  br label %do.body191

do.body191:                                       ; preds = %do.end190
  %183 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %183, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr, i32** %mark_stack_entry, align 8
  %184 = load i32*, i32** @PL_markstack_max, align 8
  %cmp192 = icmp eq i32* %incdec.ptr, %184
  br i1 %cmp192, label %cond.true193, label %cond.false194

cond.true193:                                     ; preds = %do.body191
  br i1 true, label %if.then195, label %if.end197

cond.false194:                                    ; preds = %do.body191
  br i1 false, label %if.then195, label %if.end197

if.then195:                                       ; preds = %cond.false194, %cond.true193
  %call196 = call i32* @Perl_markstack_grow()
  store i32* %call196, i32** %mark_stack_entry, align 8
  br label %if.end197

if.end197:                                        ; preds = %if.then195, %cond.false194, %cond.true193
  %185 = load %struct.sv**, %struct.sv*** %sp, align 8
  %186 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast198 = ptrtoint %struct.sv** %185 to i64
  %sub.ptr.rhs.cast199 = ptrtoint %struct.sv** %186 to i64
  %sub.ptr.sub200 = sub i64 %sub.ptr.lhs.cast198, %sub.ptr.rhs.cast199
  %sub.ptr.div201 = sdiv exact i64 %sub.ptr.sub200, 8
  %conv = trunc i64 %sub.ptr.div201 to i32
  %187 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv, i32* %187, align 4
  br label %do.end202

do.end202:                                        ; preds = %if.end197
  %188 = load %struct.sv*, %struct.sv** %tmpref, align 8
  %189 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr203 = getelementptr inbounds %struct.sv*, %struct.sv** %189, i32 1
  store %struct.sv** %incdec.ptr203, %struct.sv*** %sp, align 8
  store %struct.sv* %188, %struct.sv** %incdec.ptr203, align 8
  %190 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %190, %struct.sv*** @PL_stack_sp, align 8
  %191 = load %struct.cv*, %struct.cv** %destructor, align 8
  %192 = bitcast %struct.cv* %191 to i8*
  %193 = bitcast i8* %192 to %struct.sv*
  %call204 = call i32 @Perl_call_sv(%struct.sv* %193, i32 45)
  br label %do.body205

do.body205:                                       ; preds = %do.end202
  %194 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %194, %struct.sv*** %sp206, align 8
  %195 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev207 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %195, i32 0, i32 2
  %196 = load %struct.stackinfo*, %struct.stackinfo** %si_prev207, align 8
  store %struct.stackinfo* %196, %struct.stackinfo** %prev, align 8
  %197 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %tobool208 = icmp ne %struct.stackinfo* %197, null
  br i1 %tobool208, label %if.end210, label %if.then209

if.then209:                                       ; preds = %do.body205
  call void @Perl_croak_popstack()
  br label %if.end210

if.end210:                                        ; preds = %if.then209, %do.body205
  br label %do.body211

do.body211:                                       ; preds = %if.end210
  %198 = load %struct.sv**, %struct.sv*** %sp206, align 8
  %199 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast212 = ptrtoint %struct.sv** %198 to i64
  %sub.ptr.rhs.cast213 = ptrtoint %struct.sv** %199 to i64
  %sub.ptr.sub214 = sub i64 %sub.ptr.lhs.cast212, %sub.ptr.rhs.cast213
  %sub.ptr.div215 = sdiv exact i64 %sub.ptr.sub214, 8
  %200 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any216 = getelementptr inbounds %struct.av, %struct.av* %200, i32 0, i32 0
  %201 = load %struct.xpvav*, %struct.xpvav** %sv_any216, align 8
  %xav_fill217 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %201, i32 0, i32 2
  store i64 %sub.ptr.div215, i64* %xav_fill217, align 8
  %202 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack218 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %202, i32 0, i32 0
  %203 = load %struct.av*, %struct.av** %si_stack218, align 8
  %sv_u219 = getelementptr inbounds %struct.av, %struct.av* %203, i32 0, i32 3
  %svu_array220 = bitcast %union.anon.3* %sv_u219 to %struct.sv***
  %204 = load %struct.sv**, %struct.sv*** %svu_array220, align 8
  store %struct.sv** %204, %struct.sv*** @PL_stack_base, align 8
  %205 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %206 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack221 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %206, i32 0, i32 0
  %207 = load %struct.av*, %struct.av** %si_stack221, align 8
  %sv_any222 = getelementptr inbounds %struct.av, %struct.av* %207, i32 0, i32 0
  %208 = load %struct.xpvav*, %struct.xpvav** %sv_any222, align 8
  %xav_max223 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %208, i32 0, i32 3
  %209 = load i64, i64* %xav_max223, align 8
  %add.ptr224 = getelementptr inbounds %struct.sv*, %struct.sv** %205, i64 %209
  store %struct.sv** %add.ptr224, %struct.sv*** @PL_stack_max, align 8
  %210 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %211 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack225 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %211, i32 0, i32 0
  %212 = load %struct.av*, %struct.av** %si_stack225, align 8
  %sv_any226 = getelementptr inbounds %struct.av, %struct.av* %212, i32 0, i32 0
  %213 = load %struct.xpvav*, %struct.xpvav** %sv_any226, align 8
  %xav_fill227 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %213, i32 0, i32 2
  %214 = load i64, i64* %xav_fill227, align 8
  %add.ptr228 = getelementptr inbounds %struct.sv*, %struct.sv** %210, i64 %214
  store %struct.sv** %add.ptr228, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr228, %struct.sv*** %sp206, align 8
  %215 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack229 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %215, i32 0, i32 0
  %216 = load %struct.av*, %struct.av** %si_stack229, align 8
  store %struct.av* %216, %struct.av** @PL_curstack, align 8
  br label %do.end230

do.end230:                                        ; preds = %do.body211
  %217 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  store %struct.stackinfo* %217, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end231

do.end231:                                        ; preds = %do.end230
  %218 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %218, %struct.sv*** %sp, align 8
  call void @Perl_pop_scope()
  %219 = load %struct.sv*, %struct.sv** %tmpref, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %219, i32 0, i32 1
  %220 = load i32, i32* %sv_refcnt, align 8
  %cmp232 = icmp ult i32 %220, 2
  br i1 %cmp232, label %if.then234, label %if.end241

if.then234:                                       ; preds = %do.end231
  %221 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt235 = getelementptr inbounds %struct.sv, %struct.sv* %221, i32 0, i32 1
  %222 = load i32, i32* %sv_refcnt235, align 8
  %dec = add i32 %222, -1
  store i32 %dec, i32* %sv_refcnt235, align 8
  br label %do.body236

do.body236:                                       ; preds = %if.then234
  %223 = load %struct.sv*, %struct.sv** %tmpref, align 8
  %sv_u237 = getelementptr inbounds %struct.sv, %struct.sv* %223, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u237 to %struct.sv**
  store %struct.sv* null, %struct.sv** %svu_rv, align 8
  br label %do.end238

do.end238:                                        ; preds = %do.body236
  %224 = load %struct.sv*, %struct.sv** %tmpref, align 8
  %sv_flags239 = getelementptr inbounds %struct.sv, %struct.sv* %224, i32 0, i32 2
  %225 = load i32, i32* %sv_flags239, align 4
  %and240 = and i32 %225, -2049
  store i32 %and240, i32* %sv_flags239, align 4
  br label %if.end241

if.end241:                                        ; preds = %do.end238, %do.end231
  %226 = load %struct.sv*, %struct.sv** %tmpref, align 8
  %227 = bitcast %struct.sv* %226 to i8*
  %228 = bitcast i8* %227 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %228)
  br label %if.end242

if.end242:                                        ; preds = %if.end241, %lor.lhs.false144, %land.lhs.true129, %lor.lhs.false126, %land.lhs.true117, %land.lhs.true115, %if.end113
  br label %if.end243

if.end243:                                        ; preds = %if.end242, %cond.false58, %cond.end
  br label %do.cond

do.cond:                                          ; preds = %if.end243
  %229 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags244 = getelementptr inbounds %struct.sv, %struct.sv* %229, i32 0, i32 2
  %230 = load i32, i32* %sv_flags244, align 4
  %and245 = and i32 %230, 1048576
  %tobool246 = icmp ne i32 %and245, 0
  br i1 %tobool246, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %231 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any247 = getelementptr inbounds %struct.sv, %struct.sv* %231, i32 0, i32 0
  %232 = load i8*, i8** %sv_any247, align 8
  %233 = bitcast i8* %232 to %struct.xpvmg*
  %xmg_stash248 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %233, i32 0, i32 0
  %234 = load %struct.hv*, %struct.hv** %xmg_stash248, align 8
  %235 = load %struct.hv*, %struct.hv** %stash, align 8
  %cmp249 = icmp ne %struct.hv* %234, %235
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %236 = phi i1 [ false, %do.cond ], [ %cmp249, %land.rhs ]
  br i1 %236, label %do.body, label %do.end251

do.end251:                                        ; preds = %land.end
  %237 = load i8, i8* %check_refcnt.addr, align 1
  %tobool252 = trunc i8 %237 to i1
  br i1 %tobool252, label %land.lhs.true254, label %if.end306

land.lhs.true254:                                 ; preds = %do.end251
  %238 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt255 = getelementptr inbounds %struct.sv, %struct.sv* %238, i32 0, i32 1
  %239 = load i32, i32* %sv_refcnt255, align 8
  %tobool256 = icmp ne i32 %239, 0
  br i1 %tobool256, label %if.then257, label %if.end306

if.then257:                                       ; preds = %land.lhs.true254
  %240 = load i8, i8* @PL_in_clean_objs, align 1
  %tobool258 = trunc i8 %240 to i1
  br i1 %tobool258, label %if.then259, label %if.end305

if.then259:                                       ; preds = %if.then257
  %241 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags260 = getelementptr inbounds %struct.hv, %struct.hv* %241, i32 0, i32 2
  %242 = load i32, i32* %sv_flags260, align 4
  %and261 = and i32 %242, 33554432
  %tobool262 = icmp ne i32 %and261, 0
  br i1 %tobool262, label %land.lhs.true263, label %cond.false302

land.lhs.true263:                                 ; preds = %if.then259
  %243 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u264 = getelementptr inbounds %struct.hv, %struct.hv* %243, i32 0, i32 3
  %svu_hash265 = bitcast %union.anon.4* %sv_u264 to %struct.he***
  %244 = load %struct.he**, %struct.he*** %svu_hash265, align 8
  %245 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any266 = getelementptr inbounds %struct.hv, %struct.hv* %245, i32 0, i32 0
  %246 = load %struct.xpvhv*, %struct.xpvhv** %sv_any266, align 8
  %xhv_max267 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %246, i32 0, i32 3
  %247 = load i64, i64* %xhv_max267, align 8
  %add268 = add i64 %247, 1
  %arrayidx269 = getelementptr inbounds %struct.he*, %struct.he** %244, i64 %add268
  %248 = bitcast %struct.he** %arrayidx269 to %struct.xpvhv_aux*
  %xhv_name_u270 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %248, i32 0, i32 0
  %xhvnameu_name271 = bitcast %union._xhvnameu* %xhv_name_u270 to %struct.hek**
  %249 = load %struct.hek*, %struct.hek** %xhvnameu_name271, align 8
  %tobool272 = icmp ne %struct.hek* %249, null
  br i1 %tobool272, label %cond.true273, label %cond.false302

cond.true273:                                     ; preds = %land.lhs.true263
  %250 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u274 = getelementptr inbounds %struct.hv, %struct.hv* %250, i32 0, i32 3
  %svu_hash275 = bitcast %union.anon.4* %sv_u274 to %struct.he***
  %251 = load %struct.he**, %struct.he*** %svu_hash275, align 8
  %252 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any276 = getelementptr inbounds %struct.hv, %struct.hv* %252, i32 0, i32 0
  %253 = load %struct.xpvhv*, %struct.xpvhv** %sv_any276, align 8
  %xhv_max277 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %253, i32 0, i32 3
  %254 = load i64, i64* %xhv_max277, align 8
  %add278 = add i64 %254, 1
  %arrayidx279 = getelementptr inbounds %struct.he*, %struct.he** %251, i64 %add278
  %255 = bitcast %struct.he** %arrayidx279 to %struct.xpvhv_aux*
  %xhv_name_count280 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %255, i32 0, i32 4
  %256 = load i32, i32* %xhv_name_count280, align 4
  %tobool281 = icmp ne i32 %256, 0
  br i1 %tobool281, label %cond.true282, label %cond.false291

cond.true282:                                     ; preds = %cond.true273
  %257 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u283 = getelementptr inbounds %struct.hv, %struct.hv* %257, i32 0, i32 3
  %svu_hash284 = bitcast %union.anon.4* %sv_u283 to %struct.he***
  %258 = load %struct.he**, %struct.he*** %svu_hash284, align 8
  %259 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any285 = getelementptr inbounds %struct.hv, %struct.hv* %259, i32 0, i32 0
  %260 = load %struct.xpvhv*, %struct.xpvhv** %sv_any285, align 8
  %xhv_max286 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %260, i32 0, i32 3
  %261 = load i64, i64* %xhv_max286, align 8
  %add287 = add i64 %261, 1
  %arrayidx288 = getelementptr inbounds %struct.he*, %struct.he** %258, i64 %add287
  %262 = bitcast %struct.he** %arrayidx288 to %struct.xpvhv_aux*
  %xhv_name_u289 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %262, i32 0, i32 0
  %xhvnameu_names290 = bitcast %union._xhvnameu* %xhv_name_u289 to %struct.hek***
  %263 = load %struct.hek**, %struct.hek*** %xhvnameu_names290, align 8
  %264 = load %struct.hek*, %struct.hek** %263, align 8
  br label %cond.end300

cond.false291:                                    ; preds = %cond.true273
  %265 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u292 = getelementptr inbounds %struct.hv, %struct.hv* %265, i32 0, i32 3
  %svu_hash293 = bitcast %union.anon.4* %sv_u292 to %struct.he***
  %266 = load %struct.he**, %struct.he*** %svu_hash293, align 8
  %267 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any294 = getelementptr inbounds %struct.hv, %struct.hv* %267, i32 0, i32 0
  %268 = load %struct.xpvhv*, %struct.xpvhv** %sv_any294, align 8
  %xhv_max295 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %268, i32 0, i32 3
  %269 = load i64, i64* %xhv_max295, align 8
  %add296 = add i64 %269, 1
  %arrayidx297 = getelementptr inbounds %struct.he*, %struct.he** %266, i64 %add296
  %270 = bitcast %struct.he** %arrayidx297 to %struct.xpvhv_aux*
  %xhv_name_u298 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %270, i32 0, i32 0
  %xhvnameu_name299 = bitcast %union._xhvnameu* %xhv_name_u298 to %struct.hek**
  %271 = load %struct.hek*, %struct.hek** %xhvnameu_name299, align 8
  br label %cond.end300

cond.end300:                                      ; preds = %cond.false291, %cond.true282
  %cond301 = phi %struct.hek* [ %264, %cond.true282 ], [ %271, %cond.false291 ]
  br label %cond.end303

cond.false302:                                    ; preds = %land.lhs.true263, %if.then259
  br label %cond.end303

cond.end303:                                      ; preds = %cond.false302, %cond.end300
  %cond304 = phi %struct.hek* [ %cond301, %cond.end300 ], [ null, %cond.false302 ]
  %272 = bitcast %struct.hek* %cond304 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.97, i64 0, i64 0), i8* %272)
  br label %if.end305

if.end305:                                        ; preds = %cond.end303, %if.then257
  store i1 false, i1* %retval, align 1
  br label %return

if.end306:                                        ; preds = %land.lhs.true254, %do.end251
  br label %if.end307

if.end307:                                        ; preds = %if.end306, %land.lhs.true, %entry
  %273 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags308 = getelementptr inbounds %struct.sv, %struct.sv* %273, i32 0, i32 2
  %274 = load i32, i32* %sv_flags308, align 4
  %and309 = and i32 %274, 1048576
  %tobool310 = icmp ne i32 %and309, 0
  br i1 %tobool310, label %if.then311, label %if.end322

if.then311:                                       ; preds = %if.end307
  %275 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any313 = getelementptr inbounds %struct.sv, %struct.sv* %275, i32 0, i32 0
  %276 = load i8*, i8** %sv_any313, align 8
  %277 = bitcast i8* %276 to %struct.xpvmg*
  %xmg_stash314 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %277, i32 0, i32 0
  %278 = load %struct.hv*, %struct.hv** %xmg_stash314, align 8
  store %struct.hv* %278, %struct.hv** %stash312, align 8
  %279 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags315 = getelementptr inbounds %struct.sv, %struct.sv* %279, i32 0, i32 2
  %280 = load i32, i32* %sv_flags315, align 4
  %and316 = and i32 %280, -1048577
  store i32 %and316, i32* %sv_flags315, align 4
  br label %do.body317

do.body317:                                       ; preds = %if.then311
  %281 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any318 = getelementptr inbounds %struct.sv, %struct.sv* %281, i32 0, i32 0
  %282 = load i8*, i8** %sv_any318, align 8
  %283 = bitcast i8* %282 to %struct.xpvmg*
  %xmg_stash319 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %283, i32 0, i32 0
  store %struct.hv* null, %struct.hv** %xmg_stash319, align 8
  br label %do.end321

do.end321:                                        ; preds = %do.body317
  %284 = load %struct.hv*, %struct.hv** %stash312, align 8
  %285 = bitcast %struct.hv* %284 to i8*
  %286 = bitcast i8* %285 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %286)
  br label %if.end322

if.end322:                                        ; preds = %do.end321, %if.end307
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end322, %if.end305
  %287 = load i1, i1* %retval, align 1
  ret i1 %287
}

declare dso_local void @Perl_hv_kill_backrefs(%struct.hv*) #1

declare dso_local %struct._PerlIO** @Perl_PerlIO_stdin() #1

declare dso_local %struct._PerlIO** @Perl_PerlIO_stdout() #1

declare dso_local %struct._PerlIO** @Perl_PerlIO_stderr() #1

declare dso_local zeroext i1 @Perl_io_close(%struct.io*, %struct.gv*, i1 zeroext, i1 zeroext) #1

declare dso_local i32 @closedir(%struct.__dirstream*) #1

declare dso_local void @Perl_pregfree2(%struct.p5rx*) #1

declare dso_local void @Perl_cv_undef(%struct.cv*) #1

declare dso_local i8* @Perl_hv_common(%struct.hv*, %struct.sv*, i8*, i64, i32, i32, %struct.sv*, i32) #1

declare dso_local void @Perl_hv_name_set(%struct.hv*, i8*, i32, i32) #1

declare dso_local %struct.sv* @Perl_hfree_next_entry(%struct.hv*, i64*) #1

declare dso_local void @Perl_hv_undef_flags(%struct.hv*, i32) #1

declare dso_local void @Perl_unshare_hek(%struct.hek*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_free(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = bitcast %struct.sv* %0 to i8*
  %2 = bitcast i8* %1 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_newref(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %2, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  ret %struct.sv* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_free2(%struct.sv* %sv, i32 %rc) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc.addr = alloca i32, align 4
  %old_flags = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %rc, i32* %rc.addr, align 4
  %0 = load i32, i32* %rc.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end19

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end19

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  store i32 0, i32* %sv_refcnt, align 8
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 134283264
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp1 = icmp eq %struct.sv* %4, @PL_sv_undef
  br i1 %cmp1, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp2 = icmp eq %struct.sv* %5, @PL_sv_yes
  br i1 %cmp2, label %if.then7, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp4 = icmp eq %struct.sv* %6, @PL_sv_no
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp6 = icmp eq %struct.sv* %7, @PL_sv_placeholder
  br i1 %cmp6, label %if.then7, label %if.end

if.then7:                                         ; preds = %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false, %land.lhs.true
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt8 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 2147483647, i32* %sv_refcnt8, align 8
  br label %if.end43

if.end:                                           ; preds = %lor.lhs.false5, %if.then
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_clear(%struct.sv* %9)
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt9 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 1
  %11 = load i32, i32* %sv_refcnt9, align 8
  %tobool10 = icmp ne i32 %11, 0
  br i1 %tobool10, label %if.end18, label %if.then11

if.then11:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then11
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags12, align 4
  store i32 %13, i32* %old_flags, align 4
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  store i32 255, i32* %sv_flags13, align 4
  %15 = load i32, i32* %old_flags, align 4
  %and14 = and i32 %15, 67108864
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.end17, label %if.then16

if.then16:                                        ; preds = %do.body
  %16 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %17 = bitcast %struct.sv* %16 to i8*
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  store i8* %17, i8** %sv_any, align 8
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %19, %struct.sv** @PL_sv_root, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %do.body
  %20 = load i64, i64* @PL_sv_count, align 8
  %dec = add nsw i64 %20, -1
  store i64 %dec, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %if.end17
  br label %if.end18

if.end18:                                         ; preds = %do.end, %if.end
  br label %if.end43

if.end19:                                         ; preds = %cond.false, %cond.true
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %22, 67108864
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end19
  br label %if.end43

if.end24:                                         ; preds = %if.end19
  %23 = load i8, i8* @PL_in_clean_all, align 1
  %tobool25 = trunc i8 %23 to i1
  br i1 %tobool25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end24
  br label %if.end43

if.end27:                                         ; preds = %if.end24
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %25, 134283264
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %land.lhs.true31, label %if.end41

land.lhs.true31:                                  ; preds = %if.end27
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp32 = icmp eq %struct.sv* %26, @PL_sv_undef
  br i1 %cmp32, label %if.then39, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true31
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp34 = icmp eq %struct.sv* %27, @PL_sv_yes
  br i1 %cmp34, label %if.then39, label %lor.lhs.false35

lor.lhs.false35:                                  ; preds = %lor.lhs.false33
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp36 = icmp eq %struct.sv* %28, @PL_sv_no
  br i1 %cmp36, label %if.then39, label %lor.lhs.false37

lor.lhs.false37:                                  ; preds = %lor.lhs.false35
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp38 = icmp eq %struct.sv* %29, @PL_sv_placeholder
  br i1 %cmp38, label %if.then39, label %if.end41

if.then39:                                        ; preds = %lor.lhs.false37, %lor.lhs.false35, %lor.lhs.false33, %land.lhs.true31
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt40 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 1
  store i32 2147483647, i32* %sv_refcnt40, align 8
  br label %if.end43

if.end41:                                         ; preds = %lor.lhs.false37, %if.end27
  %call = call zeroext i1 @Perl_ckwarn_d(i32 24)
  br i1 %call, label %if.then42, label %if.end43

if.then42:                                        ; preds = %if.end41
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %32 = ptrtoint %struct.sv* %31 to i64
  call void (i32, i8*, ...) @Perl_warner(i32 24, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.34, i64 0, i64 0), i64 %32)
  br label %if.end43

if.end43:                                         ; preds = %if.then7, %if.end18, %if.then23, %if.then26, %if.then39, %if.then42, %if.end41
  ret void
}

declare dso_local zeroext i1 @Perl_ckwarn_d(i32) #1

declare dso_local void @Perl_warner(i32, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @Perl_sv_len(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 2
  %6 = load i64, i64* %xpv_cur, align 8
  store i64 %6, i64* %len, align 8
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %8 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 0
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %9, i64* %len, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  %10 = load i64, i64* %len, align 8
  store i64 %10, i64* %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %11 = load i64, i64* %retval, align 8
  ret i64 %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @Perl_sv_len_utf8(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2097152
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.end
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  %tobool2 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %4 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call3 = call i64 @Perl_sv_len_utf8_nomg(%struct.sv* %5)
  store i64 %call3, i64* %retval, align 8
  br label %return

return:                                           ; preds = %land.end, %if.then
  %6 = load i64, i64* %retval, align 8
  ret i64 %6
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @Perl_sv_len_utf8_nomg(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %ulen = alloca i64, align 8
  %mg = alloca %struct.magic*, align 8
  %cache = alloca i64*, align 8
  %real = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 2
  %5 = load i64, i64* %xpv_cur, align 8
  store i64 %5, i64* %len, align 8
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %7 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %8, i64* %len, i32 32)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %9 = load i8, i8* @PL_utf8cache, align 1
  %conv = sext i8 %9 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %cond.end
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %11, 536870912
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then, label %if.end39

if.then:                                          ; preds = %land.lhs.true
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %13, 14680064
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %cond.true7, label %cond.false9

cond.true7:                                       ; preds = %if.then
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call8 = call %struct.magic* @Perl_mg_find(%struct.sv* %14, i32 119)
  br label %cond.end10

cond.false9:                                      ; preds = %if.then
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.magic* [ %call8, %cond.true7 ], [ null, %cond.false9 ]
  store %struct.magic* %cond11, %struct.magic** %mg, align 8
  %15 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool12 = icmp ne %struct.magic* %15, null
  br i1 %tobool12, label %land.lhs.true13, label %if.else35

land.lhs.true13:                                  ; preds = %cond.end10
  %16 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %16, i32 0, i32 5
  %17 = load i64, i64* %mg_len, align 8
  %cmp14 = icmp ne i64 %17, -1
  br i1 %cmp14, label %if.then17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true13
  %18 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %18, i32 0, i32 7
  %19 = load i8*, i8** %mg_ptr, align 8
  %tobool16 = icmp ne i8* %19, null
  br i1 %tobool16, label %if.then17, label %if.else35

if.then17:                                        ; preds = %lor.lhs.false, %land.lhs.true13
  %20 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len18 = getelementptr inbounds %struct.magic, %struct.magic* %20, i32 0, i32 5
  %21 = load i64, i64* %mg_len18, align 8
  %cmp19 = icmp ne i64 %21, -1
  br i1 %cmp19, label %if.then21, label %if.else

if.then21:                                        ; preds = %if.then17
  %22 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len22 = getelementptr inbounds %struct.magic, %struct.magic* %22, i32 0, i32 5
  %23 = load i64, i64* %mg_len22, align 8
  store i64 %23, i64* %ulen, align 8
  br label %if.end

if.else:                                          ; preds = %if.then17
  %24 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr23 = getelementptr inbounds %struct.magic, %struct.magic* %24, i32 0, i32 7
  %25 = load i8*, i8** %mg_ptr23, align 8
  %26 = bitcast i8* %25 to i64*
  store i64* %26, i64** %cache, align 8
  %27 = load i64*, i64** %cache, align 8
  %arrayidx = getelementptr inbounds i64, i64* %27, i64 0
  %28 = load i64, i64* %arrayidx, align 8
  %29 = load i8*, i8** %s, align 8
  %30 = load i64*, i64** %cache, align 8
  %arrayidx24 = getelementptr inbounds i64, i64* %30, i64 1
  %31 = load i64, i64* %arrayidx24, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %29, i64 %31
  %32 = load i8*, i8** %s, align 8
  %33 = load i64, i64* %len, align 8
  %add.ptr26 = getelementptr inbounds i8, i8* %32, i64 %33
  %call27 = call i64 @Perl_utf8_length(i8* %add.ptr25, i8* %add.ptr26)
  %add = add i64 %28, %call27
  store i64 %add, i64* %ulen, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then21
  %34 = load i8, i8* @PL_utf8cache, align 1
  %conv28 = sext i8 %34 to i32
  %cmp29 = icmp slt i32 %conv28, 0
  br i1 %cmp29, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end
  %35 = load i8*, i8** %s, align 8
  %36 = load i8*, i8** %s, align 8
  %37 = load i64, i64* %len, align 8
  %add.ptr32 = getelementptr inbounds i8, i8* %36, i64 %37
  %call33 = call i64 @Perl_utf8_length(i8* %35, i8* %add.ptr32)
  store i64 %call33, i64* %real, align 8
  %38 = load i64, i64* %ulen, align 8
  %39 = load i64, i64* %real, align 8
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_assert_uft8_cache_coherent(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.35, i64 0, i64 0), i64 %38, i64 %39, %struct.sv* %40)
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end
  br label %if.end38

if.else35:                                        ; preds = %lor.lhs.false, %cond.end10
  %41 = load i8*, i8** %s, align 8
  %42 = load i8*, i8** %s, align 8
  %43 = load i64, i64* %len, align 8
  %add.ptr36 = getelementptr inbounds i8, i8* %42, i64 %43
  %call37 = call i64 @Perl_utf8_length(i8* %41, i8* %add.ptr36)
  store i64 %call37, i64* %ulen, align 8
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %45 = load i64, i64* %ulen, align 8
  call void @S_utf8_mg_len_cache_update(%struct.sv* %44, %struct.magic** %mg, i64 %45)
  br label %if.end38

if.end38:                                         ; preds = %if.else35, %if.end34
  %46 = load i64, i64* %ulen, align 8
  store i64 %46, i64* %retval, align 8
  br label %return

if.end39:                                         ; preds = %land.lhs.true, %cond.end
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %48, 536870912
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %cond.true43, label %cond.false46

cond.true43:                                      ; preds = %if.end39
  %49 = load i8*, i8** %s, align 8
  %50 = load i8*, i8** %s, align 8
  %51 = load i64, i64* %len, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %50, i64 %51
  %call45 = call i64 @Perl_utf8_length(i8* %49, i8* %add.ptr44)
  br label %cond.end47

cond.false46:                                     ; preds = %if.end39
  %52 = load i64, i64* %len, align 8
  br label %cond.end47

cond.end47:                                       ; preds = %cond.false46, %cond.true43
  %cond48 = phi i64 [ %call45, %cond.true43 ], [ %52, %cond.false46 ]
  store i64 %cond48, i64* %retval, align 8
  br label %return

return:                                           ; preds = %cond.end47, %if.end38
  %53 = load i64, i64* %retval, align 8
  ret i64 %53
}

declare dso_local i64 @Perl_utf8_length(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_assert_uft8_cache_coherent(i8* %func, i64 %from_cache, i64 %real, %struct.sv* %sv) #0 {
entry:
  %func.addr = alloca i8*, align 8
  %from_cache.addr = alloca i64, align 8
  %real.addr = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  store i8* %func, i8** %func.addr, align 8
  store i64 %from_cache, i64* %from_cache.addr, align 8
  store i64 %real, i64* %real.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load i64, i64* %from_cache.addr, align 8
  %1 = load i64, i64* %real.addr, align 8
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  call void @Perl_save_I8(i8* @PL_utf8cache)
  store i8 0, i8* @PL_utf8cache, align 1
  %2 = load i8*, i8** %func.addr, align 8
  %3 = load i64, i64* %from_cache.addr, align 8
  %4 = load i64, i64* %real.addr, align 8
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %6 = bitcast %struct.sv* %5 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.100, i64 0, i64 0), i8* %2, i64 %3, i64 %4, i8* %6)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_utf8_mg_len_cache_update(%struct.sv* %sv, %struct.magic** %mgp, i64 %ulen) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %mgp.addr = alloca %struct.magic**, align 8
  %ulen.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.magic** %mgp, %struct.magic*** %mgp.addr, align 8
  store i64 %ulen, i64* %ulen.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 134283264
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 2097152
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %5, 1024
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %6 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %7 = load %struct.magic*, %struct.magic** %6, align 8
  %tobool8 = icmp ne %struct.magic* %7, null
  br i1 %tobool8, label %if.end15, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %9, 255
  %cmp = icmp ult i32 %and10, 7
  br i1 %cmp, label %if.then13, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %land.lhs.true
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %10, i32 119)
  %11 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  store %struct.magic* %call, %struct.magic** %11, align 8
  %tobool12 = icmp ne %struct.magic* %call, null
  br i1 %tobool12, label %if.end15, label %if.then13

if.then13:                                        ; preds = %lor.lhs.false11, %land.lhs.true
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call14 = call %struct.magic* @Perl_sv_magicext(%struct.sv* %12, %struct.sv* null, i32 119, %struct.mgvtbl* getelementptr inbounds ([31 x %struct.mgvtbl], [31 x %struct.mgvtbl]* @PL_magic_vtables, i64 0, i64 28), i8* null, i32 0)
  %13 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  store %struct.magic* %call14, %struct.magic** %13, align 8
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %lor.lhs.false11, %if.end
  %14 = load i64, i64* %ulen.addr, align 8
  %15 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %16 = load %struct.magic*, %struct.magic** %15, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %16, i32 0, i32 5
  store i64 %14, i64* %mg_len, align 8
  br label %return

return:                                           ; preds = %if.end15, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @Perl_sv_pos_u2b_flags(%struct.sv* %sv, i64 %uoffset, i64* %lenp, i32 %flags) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %uoffset.addr = alloca i64, align 8
  %lenp.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %start = alloca i8*, align 8
  %len = alloca i64, align 8
  %boffset = alloca i64, align 8
  %send = alloca i8*, align 8
  %mg = alloca %struct.magic*, align 8
  %uoffset2 = alloca i64, align 8
  %boffset2 = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %uoffset, i64* %uoffset.addr, align 8
  store i64* %lenp, i64** %lenp.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 2
  %5 = load i64, i64* %xpv_cur, align 8
  store i64 %5, i64* %len, align 8
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %7 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %9 = load i32, i32* %flags.addr, align 4
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %8, i64* %len, i32 %9)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %7, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %start, align 8
  %10 = load i64, i64* %len, align 8
  %tobool = icmp ne i64 %10, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %11 = load i8*, i8** %start, align 8
  %12 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %12
  store i8* %add.ptr, i8** %send, align 8
  store %struct.magic* null, %struct.magic** %mg, align 8
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %14 = load i8*, i8** %start, align 8
  %15 = load i8*, i8** %send, align 8
  %16 = load i64, i64* %uoffset.addr, align 8
  %call1 = call i64 @S_sv_pos_u2b_cached(%struct.sv* %13, %struct.magic** %mg, i8* %14, i8* %15, i64 %16, i64 0, i64 0)
  store i64 %call1, i64* %boffset, align 8
  %17 = load i64*, i64** %lenp.addr, align 8
  %tobool2 = icmp ne i64* %17, null
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %18 = load i64*, i64** %lenp.addr, align 8
  %19 = load i64, i64* %18, align 8
  %tobool3 = icmp ne i64 %19, 0
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %land.lhs.true
  %20 = load i64, i64* %uoffset.addr, align 8
  %21 = load i64*, i64** %lenp.addr, align 8
  %22 = load i64, i64* %21, align 8
  %add = add i64 %20, %22
  store i64 %add, i64* %uoffset2, align 8
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %24 = load i8*, i8** %start, align 8
  %25 = load i8*, i8** %send, align 8
  %26 = load i64, i64* %uoffset2, align 8
  %27 = load i64, i64* %uoffset.addr, align 8
  %28 = load i64, i64* %boffset, align 8
  %call5 = call i64 @S_sv_pos_u2b_cached(%struct.sv* %23, %struct.magic** %mg, i8* %24, i8* %25, i64 %26, i64 %27, i64 %28)
  %29 = load i64, i64* %boffset, align 8
  %sub = sub i64 %call5, %29
  store i64 %sub, i64* %boffset2, align 8
  %30 = load i64, i64* %boffset2, align 8
  %31 = load i64*, i64** %lenp.addr, align 8
  store i64 %30, i64* %31, align 8
  br label %if.end

if.end:                                           ; preds = %if.then4, %land.lhs.true, %if.then
  br label %if.end9

if.else:                                          ; preds = %cond.end
  %32 = load i64*, i64** %lenp.addr, align 8
  %tobool6 = icmp ne i64* %32, null
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  %33 = load i64*, i64** %lenp.addr, align 8
  store i64 0, i64* %33, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.else
  store i64 0, i64* %boffset, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.end
  %34 = load i64, i64* %boffset, align 8
  ret i64 %34
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_sv_pos_u2b_cached(%struct.sv* %sv, %struct.magic** %mgp, i8* %start, i8* %send, i64 %uoffset, i64 %uoffset0, i64 %boffset0) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %mgp.addr = alloca %struct.magic**, align 8
  %start.addr = alloca i8*, align 8
  %send.addr = alloca i8*, align 8
  %uoffset.addr = alloca i64, align 8
  %uoffset0.addr = alloca i64, align 8
  %boffset0.addr = alloca i64, align 8
  %boffset = alloca i64, align 8
  %found = alloca i8, align 1
  %at_end = alloca i8, align 1
  %cache = alloca i64*, align 8
  %real_boffset = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.magic** %mgp, %struct.magic*** %mgp.addr, align 8
  store i8* %start, i8** %start.addr, align 8
  store i8* %send, i8** %send.addr, align 8
  store i64 %uoffset, i64* %uoffset.addr, align 8
  store i64 %uoffset0, i64* %uoffset0.addr, align 8
  store i64 %boffset0, i64* %boffset0.addr, align 8
  store i64 0, i64* %boffset, align 8
  store i8 0, i8* %found, align 1
  store i8 0, i8* %at_end, align 1
  %0 = load i64, i64* %uoffset.addr, align 8
  %tobool = icmp ne i64 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 134283264
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.end100, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %4, 2097152
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.end100, label %land.lhs.true5

land.lhs.true5:                                   ; preds = %land.lhs.true
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %6, 1024
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %land.lhs.true9, label %if.end100

land.lhs.true9:                                   ; preds = %land.lhs.true5
  %7 = load i8, i8* @PL_utf8cache, align 1
  %conv = sext i8 %7 to i32
  %tobool10 = icmp ne i32 %conv, 0
  br i1 %tobool10, label %land.lhs.true11, label %if.end100

land.lhs.true11:                                  ; preds = %land.lhs.true9
  %8 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %9 = load %struct.magic*, %struct.magic** %8, align 8
  %tobool12 = icmp ne %struct.magic* %9, null
  br i1 %tobool12, label %if.then18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true11
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %11, 255
  %cmp = icmp uge i32 %and14, 7
  br i1 %cmp, label %land.lhs.true16, label %if.end100

land.lhs.true16:                                  ; preds = %lor.lhs.false
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %12, i32 119)
  %13 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  store %struct.magic* %call, %struct.magic** %13, align 8
  %tobool17 = icmp ne %struct.magic* %call, null
  br i1 %tobool17, label %if.then18, label %if.end100

if.then18:                                        ; preds = %land.lhs.true16, %land.lhs.true11
  %14 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %15 = load %struct.magic*, %struct.magic** %14, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %15, i32 0, i32 7
  %16 = load i8*, i8** %mg_ptr, align 8
  %tobool19 = icmp ne i8* %16, null
  br i1 %tobool19, label %if.then20, label %if.else87

if.then20:                                        ; preds = %if.then18
  %17 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %18 = load %struct.magic*, %struct.magic** %17, align 8
  %mg_ptr21 = getelementptr inbounds %struct.magic, %struct.magic* %18, i32 0, i32 7
  %19 = load i8*, i8** %mg_ptr21, align 8
  %20 = bitcast i8* %19 to i64*
  store i64* %20, i64** %cache, align 8
  %21 = load i64*, i64** %cache, align 8
  %arrayidx = getelementptr inbounds i64, i64* %21, i64 0
  %22 = load i64, i64* %arrayidx, align 8
  %23 = load i64, i64* %uoffset.addr, align 8
  %cmp22 = icmp eq i64 %22, %23
  br i1 %cmp22, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.then20
  %24 = load i64*, i64** %cache, align 8
  %arrayidx25 = getelementptr inbounds i64, i64* %24, i64 1
  %25 = load i64, i64* %arrayidx25, align 8
  store i64 %25, i64* %retval, align 8
  br label %return

if.end26:                                         ; preds = %if.then20
  %26 = load i64*, i64** %cache, align 8
  %arrayidx27 = getelementptr inbounds i64, i64* %26, i64 2
  %27 = load i64, i64* %arrayidx27, align 8
  %28 = load i64, i64* %uoffset.addr, align 8
  %cmp28 = icmp eq i64 %27, %28
  br i1 %cmp28, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end26
  %29 = load i64*, i64** %cache, align 8
  %arrayidx31 = getelementptr inbounds i64, i64* %29, i64 3
  %30 = load i64, i64* %arrayidx31, align 8
  store i64 %30, i64* %retval, align 8
  br label %return

if.end32:                                         ; preds = %if.end26
  %31 = load i64*, i64** %cache, align 8
  %arrayidx33 = getelementptr inbounds i64, i64* %31, i64 0
  %32 = load i64, i64* %arrayidx33, align 8
  %33 = load i64, i64* %uoffset.addr, align 8
  %cmp34 = icmp ult i64 %32, %33
  br i1 %cmp34, label %if.then36, label %if.else56

if.then36:                                        ; preds = %if.end32
  %34 = load i64*, i64** %cache, align 8
  %arrayidx37 = getelementptr inbounds i64, i64* %34, i64 0
  %35 = load i64, i64* %arrayidx37, align 8
  %36 = load i64, i64* %uoffset0.addr, align 8
  %cmp38 = icmp ugt i64 %35, %36
  br i1 %cmp38, label %if.then40, label %if.end43

if.then40:                                        ; preds = %if.then36
  %37 = load i64*, i64** %cache, align 8
  %arrayidx41 = getelementptr inbounds i64, i64* %37, i64 0
  %38 = load i64, i64* %arrayidx41, align 8
  store i64 %38, i64* %uoffset0.addr, align 8
  %39 = load i64*, i64** %cache, align 8
  %arrayidx42 = getelementptr inbounds i64, i64* %39, i64 1
  %40 = load i64, i64* %arrayidx42, align 8
  store i64 %40, i64* %boffset0.addr, align 8
  br label %if.end43

if.end43:                                         ; preds = %if.then40, %if.then36
  %41 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %42 = load %struct.magic*, %struct.magic** %41, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %42, i32 0, i32 5
  %43 = load i64, i64* %mg_len, align 8
  %cmp44 = icmp ne i64 %43, -1
  br i1 %cmp44, label %if.then46, label %if.else

if.then46:                                        ; preds = %if.end43
  %44 = load i64, i64* %boffset0.addr, align 8
  %45 = load i8*, i8** %start.addr, align 8
  %46 = load i64, i64* %boffset0.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %45, i64 %46
  %47 = load i8*, i8** %send.addr, align 8
  %48 = load i64, i64* %uoffset.addr, align 8
  %49 = load i64, i64* %uoffset0.addr, align 8
  %sub = sub i64 %48, %49
  %50 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %51 = load %struct.magic*, %struct.magic** %50, align 8
  %mg_len47 = getelementptr inbounds %struct.magic, %struct.magic* %51, i32 0, i32 5
  %52 = load i64, i64* %mg_len47, align 8
  %53 = load i64, i64* %uoffset0.addr, align 8
  %sub48 = sub i64 %52, %53
  %call49 = call i64 @S_sv_pos_u2b_midway(i8* %add.ptr, i8* %47, i64 %sub, i64 %sub48)
  %add = add i64 %44, %call49
  store i64 %add, i64* %boffset, align 8
  br label %if.end55

if.else:                                          ; preds = %if.end43
  %54 = load i64, i64* %uoffset0.addr, align 8
  %55 = load i64, i64* %uoffset.addr, align 8
  %sub50 = sub i64 %55, %54
  store i64 %sub50, i64* %uoffset.addr, align 8
  %56 = load i64, i64* %boffset0.addr, align 8
  %57 = load i8*, i8** %start.addr, align 8
  %58 = load i64, i64* %boffset0.addr, align 8
  %add.ptr51 = getelementptr inbounds i8, i8* %57, i64 %58
  %59 = load i8*, i8** %send.addr, align 8
  %call52 = call i64 @S_sv_pos_u2b_forwards(i8* %add.ptr51, i8* %59, i64* %uoffset.addr, i8* %at_end)
  %add53 = add i64 %56, %call52
  store i64 %add53, i64* %boffset, align 8
  %60 = load i64, i64* %uoffset0.addr, align 8
  %61 = load i64, i64* %uoffset.addr, align 8
  %add54 = add i64 %61, %60
  store i64 %add54, i64* %uoffset.addr, align 8
  br label %if.end55

if.end55:                                         ; preds = %if.else, %if.then46
  br label %if.end86

if.else56:                                        ; preds = %if.end32
  %62 = load i64*, i64** %cache, align 8
  %arrayidx57 = getelementptr inbounds i64, i64* %62, i64 2
  %63 = load i64, i64* %arrayidx57, align 8
  %64 = load i64, i64* %uoffset.addr, align 8
  %cmp58 = icmp ult i64 %63, %64
  br i1 %cmp58, label %if.then60, label %if.else76

if.then60:                                        ; preds = %if.else56
  %65 = load i64*, i64** %cache, align 8
  %arrayidx61 = getelementptr inbounds i64, i64* %65, i64 2
  %66 = load i64, i64* %arrayidx61, align 8
  %67 = load i64, i64* %uoffset0.addr, align 8
  %cmp62 = icmp ugt i64 %66, %67
  br i1 %cmp62, label %if.then64, label %if.end67

if.then64:                                        ; preds = %if.then60
  %68 = load i64*, i64** %cache, align 8
  %arrayidx65 = getelementptr inbounds i64, i64* %68, i64 2
  %69 = load i64, i64* %arrayidx65, align 8
  store i64 %69, i64* %uoffset0.addr, align 8
  %70 = load i64*, i64** %cache, align 8
  %arrayidx66 = getelementptr inbounds i64, i64* %70, i64 3
  %71 = load i64, i64* %arrayidx66, align 8
  store i64 %71, i64* %boffset0.addr, align 8
  br label %if.end67

if.end67:                                         ; preds = %if.then64, %if.then60
  %72 = load i64, i64* %boffset0.addr, align 8
  %73 = load i8*, i8** %start.addr, align 8
  %74 = load i64, i64* %boffset0.addr, align 8
  %add.ptr68 = getelementptr inbounds i8, i8* %73, i64 %74
  %75 = load i8*, i8** %start.addr, align 8
  %76 = load i64*, i64** %cache, align 8
  %arrayidx69 = getelementptr inbounds i64, i64* %76, i64 1
  %77 = load i64, i64* %arrayidx69, align 8
  %add.ptr70 = getelementptr inbounds i8, i8* %75, i64 %77
  %78 = load i64, i64* %uoffset.addr, align 8
  %79 = load i64, i64* %uoffset0.addr, align 8
  %sub71 = sub i64 %78, %79
  %80 = load i64*, i64** %cache, align 8
  %arrayidx72 = getelementptr inbounds i64, i64* %80, i64 0
  %81 = load i64, i64* %arrayidx72, align 8
  %82 = load i64, i64* %uoffset0.addr, align 8
  %sub73 = sub i64 %81, %82
  %call74 = call i64 @S_sv_pos_u2b_midway(i8* %add.ptr68, i8* %add.ptr70, i64 %sub71, i64 %sub73)
  %add75 = add i64 %72, %call74
  store i64 %add75, i64* %boffset, align 8
  br label %if.end85

if.else76:                                        ; preds = %if.else56
  %83 = load i64, i64* %boffset0.addr, align 8
  %84 = load i8*, i8** %start.addr, align 8
  %85 = load i64, i64* %boffset0.addr, align 8
  %add.ptr77 = getelementptr inbounds i8, i8* %84, i64 %85
  %86 = load i8*, i8** %start.addr, align 8
  %87 = load i64*, i64** %cache, align 8
  %arrayidx78 = getelementptr inbounds i64, i64* %87, i64 3
  %88 = load i64, i64* %arrayidx78, align 8
  %add.ptr79 = getelementptr inbounds i8, i8* %86, i64 %88
  %89 = load i64, i64* %uoffset.addr, align 8
  %90 = load i64, i64* %uoffset0.addr, align 8
  %sub80 = sub i64 %89, %90
  %91 = load i64*, i64** %cache, align 8
  %arrayidx81 = getelementptr inbounds i64, i64* %91, i64 2
  %92 = load i64, i64* %arrayidx81, align 8
  %93 = load i64, i64* %uoffset0.addr, align 8
  %sub82 = sub i64 %92, %93
  %call83 = call i64 @S_sv_pos_u2b_midway(i8* %add.ptr77, i8* %add.ptr79, i64 %sub80, i64 %sub82)
  %add84 = add i64 %83, %call83
  store i64 %add84, i64* %boffset, align 8
  br label %if.end85

if.end85:                                         ; preds = %if.else76, %if.end67
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.end55
  store i8 1, i8* %found, align 1
  br label %if.end99

if.else87:                                        ; preds = %if.then18
  %94 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %95 = load %struct.magic*, %struct.magic** %94, align 8
  %mg_len88 = getelementptr inbounds %struct.magic, %struct.magic* %95, i32 0, i32 5
  %96 = load i64, i64* %mg_len88, align 8
  %cmp89 = icmp ne i64 %96, -1
  br i1 %cmp89, label %if.then91, label %if.end98

if.then91:                                        ; preds = %if.else87
  %97 = load i64, i64* %boffset0.addr, align 8
  %98 = load i8*, i8** %start.addr, align 8
  %99 = load i64, i64* %boffset0.addr, align 8
  %add.ptr92 = getelementptr inbounds i8, i8* %98, i64 %99
  %100 = load i8*, i8** %send.addr, align 8
  %101 = load i64, i64* %uoffset.addr, align 8
  %102 = load i64, i64* %uoffset0.addr, align 8
  %sub93 = sub i64 %101, %102
  %103 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %104 = load %struct.magic*, %struct.magic** %103, align 8
  %mg_len94 = getelementptr inbounds %struct.magic, %struct.magic* %104, i32 0, i32 5
  %105 = load i64, i64* %mg_len94, align 8
  %106 = load i64, i64* %uoffset0.addr, align 8
  %sub95 = sub i64 %105, %106
  %call96 = call i64 @S_sv_pos_u2b_midway(i8* %add.ptr92, i8* %100, i64 %sub93, i64 %sub95)
  %add97 = add i64 %97, %call96
  store i64 %add97, i64* %boffset, align 8
  store i8 1, i8* %found, align 1
  br label %if.end98

if.end98:                                         ; preds = %if.then91, %if.else87
  br label %if.end99

if.end99:                                         ; preds = %if.end98, %if.end86
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %land.lhs.true16, %lor.lhs.false, %land.lhs.true9, %land.lhs.true5, %land.lhs.true, %if.end
  %107 = load i8, i8* %found, align 1
  %tobool101 = trunc i8 %107 to i1
  br i1 %tobool101, label %lor.lhs.false102, label %if.then106

lor.lhs.false102:                                 ; preds = %if.end100
  %108 = load i8, i8* @PL_utf8cache, align 1
  %conv103 = sext i8 %108 to i32
  %cmp104 = icmp slt i32 %conv103, 0
  br i1 %cmp104, label %if.then106, label %if.end120

if.then106:                                       ; preds = %lor.lhs.false102, %if.end100
  %109 = load i64, i64* %uoffset0.addr, align 8
  %110 = load i64, i64* %uoffset.addr, align 8
  %sub107 = sub i64 %110, %109
  store i64 %sub107, i64* %uoffset.addr, align 8
  %111 = load i64, i64* %boffset0.addr, align 8
  %112 = load i8*, i8** %start.addr, align 8
  %113 = load i64, i64* %boffset0.addr, align 8
  %add.ptr108 = getelementptr inbounds i8, i8* %112, i64 %113
  %114 = load i8*, i8** %send.addr, align 8
  %call109 = call i64 @S_sv_pos_u2b_forwards(i8* %add.ptr108, i8* %114, i64* %uoffset.addr, i8* %at_end)
  %add110 = add i64 %111, %call109
  store i64 %add110, i64* %real_boffset, align 8
  %115 = load i64, i64* %uoffset0.addr, align 8
  %116 = load i64, i64* %uoffset.addr, align 8
  %add111 = add i64 %116, %115
  store i64 %add111, i64* %uoffset.addr, align 8
  %117 = load i8, i8* %found, align 1
  %tobool112 = trunc i8 %117 to i1
  br i1 %tobool112, label %land.lhs.true114, label %if.end119

land.lhs.true114:                                 ; preds = %if.then106
  %118 = load i8, i8* @PL_utf8cache, align 1
  %conv115 = sext i8 %118 to i32
  %cmp116 = icmp slt i32 %conv115, 0
  br i1 %cmp116, label %if.then118, label %if.end119

if.then118:                                       ; preds = %land.lhs.true114
  %119 = load i64, i64* %boffset, align 8
  %120 = load i64, i64* %real_boffset, align 8
  %121 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_assert_uft8_cache_coherent(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.98, i64 0, i64 0), i64 %119, i64 %120, %struct.sv* %121)
  br label %if.end119

if.end119:                                        ; preds = %if.then118, %land.lhs.true114, %if.then106
  %122 = load i64, i64* %real_boffset, align 8
  store i64 %122, i64* %boffset, align 8
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %lor.lhs.false102
  %123 = load i8, i8* @PL_utf8cache, align 1
  %conv121 = sext i8 %123 to i32
  %tobool122 = icmp ne i32 %conv121, 0
  br i1 %tobool122, label %land.lhs.true123, label %if.end136

land.lhs.true123:                                 ; preds = %if.end120
  %124 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags124 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 2
  %125 = load i32, i32* %sv_flags124, align 4
  %and125 = and i32 %125, 2097152
  %tobool126 = icmp ne i32 %and125, 0
  br i1 %tobool126, label %if.end136, label %land.lhs.true127

land.lhs.true127:                                 ; preds = %land.lhs.true123
  %126 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags128 = getelementptr inbounds %struct.sv, %struct.sv* %126, i32 0, i32 2
  %127 = load i32, i32* %sv_flags128, align 4
  %and129 = and i32 %127, 1024
  %tobool130 = icmp ne i32 %and129, 0
  br i1 %tobool130, label %if.then131, label %if.end136

if.then131:                                       ; preds = %land.lhs.true127
  %128 = load i8, i8* %at_end, align 1
  %tobool132 = trunc i8 %128 to i1
  br i1 %tobool132, label %if.then133, label %if.else134

if.then133:                                       ; preds = %if.then131
  %129 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %130 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %131 = load i64, i64* %uoffset.addr, align 8
  call void @S_utf8_mg_len_cache_update(%struct.sv* %129, %struct.magic** %130, i64 %131)
  br label %if.end135

if.else134:                                       ; preds = %if.then131
  %132 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %133 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %134 = load i64, i64* %boffset, align 8
  %135 = load i64, i64* %uoffset.addr, align 8
  %136 = load i8*, i8** %send.addr, align 8
  %137 = load i8*, i8** %start.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %136 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %137 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  call void @S_utf8_mg_pos_cache_update(%struct.sv* %132, %struct.magic** %133, i64 %134, i64 %135, i64 %sub.ptr.sub)
  br label %if.end135

if.end135:                                        ; preds = %if.else134, %if.then133
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %land.lhs.true127, %land.lhs.true123, %if.end120
  %138 = load i64, i64* %boffset, align 8
  store i64 %138, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end136, %if.then30, %if.then24, %if.then
  %139 = load i64, i64* %retval, align 8
  ret i64 %139
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_pos_u2b(%struct.sv* %sv, i32* %offsetp, i32* %lenp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %offsetp.addr = alloca i32*, align 8
  %lenp.addr = alloca i32*, align 8
  %ulen = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32* %offsetp, i32** %offsetp.addr, align 8
  store i32* %lenp, i32** %lenp.addr, align 8
  %0 = load i32*, i32** %lenp.addr, align 8
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %lenp.addr, align 8
  %2 = load i32, i32* %1, align 4
  %conv = sext i32 %2 to i64
  store i64 %conv, i64* %ulen, align 8
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %4 = load i32*, i32** %offsetp.addr, align 8
  %5 = load i32, i32* %4, align 4
  %conv1 = sext i32 %5 to i64
  %call = call i64 @Perl_sv_pos_u2b_flags(%struct.sv* %3, i64 %conv1, i64* %ulen, i32 34)
  %conv2 = trunc i64 %call to i32
  %6 = load i32*, i32** %offsetp.addr, align 8
  store i32 %conv2, i32* %6, align 4
  %7 = load i64, i64* %ulen, align 8
  %conv3 = trunc i64 %7 to i32
  %8 = load i32*, i32** %lenp.addr, align 8
  store i32 %conv3, i32* %8, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %10 = load i32*, i32** %offsetp.addr, align 8
  %11 = load i32, i32* %10, align 4
  %conv4 = sext i32 %11 to i64
  %call5 = call i64 @Perl_sv_pos_u2b_flags(%struct.sv* %9, i64 %conv4, i64* null, i32 34)
  %conv6 = trunc i64 %call5 to i32
  %12 = load i32*, i32** %offsetp.addr, align 8
  store i32 %conv6, i32* %12, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_sv_pos_b2u_midway(i8* %s, i8* %target, i8* %end, i64 %endu) #0 {
entry:
  %retval = alloca i64, align 8
  %s.addr = alloca i8*, align 8
  %target.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %endu.addr = alloca i64, align 8
  %forw = alloca i64, align 8
  %backw = alloca i64, align 8
  store i8* %s, i8** %s.addr, align 8
  store i8* %target, i8** %target.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i64 %endu, i64* %endu.addr, align 8
  %0 = load i8*, i8** %target.addr, align 8
  %1 = load i8*, i8** %s.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %forw, align 8
  %2 = load i8*, i8** %end.addr, align 8
  %3 = load i8*, i8** %target.addr, align 8
  %sub.ptr.lhs.cast1 = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast2 = ptrtoint i8* %3 to i64
  %sub.ptr.sub3 = sub i64 %sub.ptr.lhs.cast1, %sub.ptr.rhs.cast2
  store i64 %sub.ptr.sub3, i64* %backw, align 8
  %4 = load i64, i64* %forw, align 8
  %5 = load i64, i64* %backw, align 8
  %mul = mul i64 2, %5
  %cmp = icmp ult i64 %4, %mul
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i8*, i8** %s.addr, align 8
  %7 = load i8*, i8** %target.addr, align 8
  %call = call i64 @Perl_utf8_length(i8* %6, i8* %7)
  store i64 %call, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.end, %if.end
  %8 = load i8*, i8** %end.addr, align 8
  %9 = load i8*, i8** %target.addr, align 8
  %cmp4 = icmp ugt i8* %8, %9
  br i1 %cmp4, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %10 = load i8*, i8** %end.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 -1
  store i8* %incdec.ptr, i8** %end.addr, align 8
  br label %while.cond5

while.cond5:                                      ; preds = %while.body8, %while.body
  %11 = load i8*, i8** %end.addr, align 8
  %12 = load i8, i8* %11, align 1
  %conv = zext i8 %12 to i32
  %and = and i32 %conv, 192
  %cmp6 = icmp eq i32 %and, 128
  br i1 %cmp6, label %while.body8, label %while.end

while.body8:                                      ; preds = %while.cond5
  %13 = load i8*, i8** %end.addr, align 8
  %incdec.ptr9 = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr9, i8** %end.addr, align 8
  br label %while.cond5

while.end:                                        ; preds = %while.cond5
  %14 = load i64, i64* %endu.addr, align 8
  %dec = add i64 %14, -1
  store i64 %dec, i64* %endu.addr, align 8
  br label %while.cond

while.end10:                                      ; preds = %while.cond
  %15 = load i64, i64* %endu.addr, align 8
  store i64 %15, i64* %retval, align 8
  br label %return

return:                                           ; preds = %while.end10, %if.then
  %16 = load i64, i64* %retval, align 8
  ret i64 %16
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_utf8_mg_pos_cache_update(%struct.sv* %sv, %struct.magic** %mgp, i64 %byte, i64 %utf8, i64 %blen) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %mgp.addr = alloca %struct.magic**, align 8
  %byte.addr = alloca i64, align 8
  %utf8.addr = alloca i64, align 8
  %blen.addr = alloca i64, align 8
  %cache = alloca i64*, align 8
  %start = alloca i8*, align 8
  %realutf8 = alloca i64, align 8
  %keep_earlier = alloca float, align 4
  %keep_later = alloca float, align 4
  %keep_later101 = alloca float, align 4
  %b = alloca float, align 4
  %c = alloca float, align 4
  %keep_earlier123 = alloca float, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.magic** %mgp, %struct.magic*** %mgp.addr, align 8
  store i64 %byte, i64* %byte.addr, align 8
  store i64 %utf8, i64* %utf8.addr, align 8
  store i64 %blen, i64* %blen.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 134283264
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end176

if.end:                                           ; preds = %entry
  %2 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %3 = load %struct.magic*, %struct.magic** %2, align 8
  %tobool1 = icmp ne %struct.magic* %3, null
  br i1 %tobool1, label %if.end7, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %5, 255
  %cmp = icmp ult i32 %and3, 7
  br i1 %cmp, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %6, i32 119)
  %7 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  store %struct.magic* %call, %struct.magic** %7, align 8
  %tobool4 = icmp ne %struct.magic* %call, null
  br i1 %tobool4, label %if.end7, label %if.then5

if.then5:                                         ; preds = %lor.lhs.false, %land.lhs.true
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call6 = call %struct.magic* @Perl_sv_magicext(%struct.sv* %8, %struct.sv* null, i32 119, %struct.mgvtbl* getelementptr inbounds ([31 x %struct.mgvtbl], [31 x %struct.mgvtbl]* @PL_magic_vtables, i64 0, i64 28), i8* null, i32 0)
  %9 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  store %struct.magic* %call6, %struct.magic** %9, align 8
  %10 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %11 = load %struct.magic*, %struct.magic** %10, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %11, i32 0, i32 5
  store i64 -1, i64* %mg_len, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %lor.lhs.false, %if.end
  %12 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %13 = load %struct.magic*, %struct.magic** %12, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %13, i32 0, i32 7
  %14 = load i8*, i8** %mg_ptr, align 8
  %15 = bitcast i8* %14 to i64*
  store i64* %15, i64** %cache, align 8
  %tobool8 = icmp ne i64* %15, null
  br i1 %tobool8, label %if.end12, label %if.then9

if.then9:                                         ; preds = %if.end7
  %call10 = call i8* @Perl_safesyscalloc(i64 4, i64 8)
  %16 = bitcast i8* %call10 to i64*
  store i64* %16, i64** %cache, align 8
  %17 = load i64*, i64** %cache, align 8
  %18 = bitcast i64* %17 to i8*
  %19 = load %struct.magic**, %struct.magic*** %mgp.addr, align 8
  %20 = load %struct.magic*, %struct.magic** %19, align 8
  %mg_ptr11 = getelementptr inbounds %struct.magic, %struct.magic* %20, i32 0, i32 7
  store i8* %18, i8** %mg_ptr11, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end7
  %21 = load i8, i8* @PL_utf8cache, align 1
  %conv = sext i8 %21 to i32
  %cmp13 = icmp slt i32 %conv, 0
  br i1 %cmp13, label %land.lhs.true15, label %if.end22

land.lhs.true15:                                  ; preds = %if.end12
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %23, 16384
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.end22

if.then19:                                        ; preds = %land.lhs.true15
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %25 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 0
  store i8* %add.ptr, i8** %start, align 8
  %26 = load i8*, i8** %start, align 8
  %27 = load i8*, i8** %start, align 8
  %28 = load i64, i64* %byte.addr, align 8
  %add.ptr20 = getelementptr inbounds i8, i8* %27, i64 %28
  %call21 = call i64 @Perl_utf8_length(i8* %26, i8* %add.ptr20)
  store i64 %call21, i64* %realutf8, align 8
  %29 = load i64, i64* %utf8.addr, align 8
  %30 = load i64, i64* %realutf8, align 8
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_assert_uft8_cache_coherent(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.99, i64 0, i64 0), i64 %29, i64 %30, %struct.sv* %31)
  br label %if.end22

if.end22:                                         ; preds = %if.then19, %land.lhs.true15, %if.end12
  %32 = load i64*, i64** %cache, align 8
  %arrayidx = getelementptr inbounds i64, i64* %32, i64 1
  %33 = load i64, i64* %arrayidx, align 8
  %cmp23 = icmp eq i64 %33, 0
  br i1 %cmp23, label %if.then25, label %if.else

if.then25:                                        ; preds = %if.end22
  %34 = load i64, i64* %utf8.addr, align 8
  %35 = load i64*, i64** %cache, align 8
  %arrayidx26 = getelementptr inbounds i64, i64* %35, i64 0
  store i64 %34, i64* %arrayidx26, align 8
  %36 = load i64, i64* %byte.addr, align 8
  %37 = load i64*, i64** %cache, align 8
  %arrayidx27 = getelementptr inbounds i64, i64* %37, i64 1
  store i64 %36, i64* %arrayidx27, align 8
  br label %if.end176

if.else:                                          ; preds = %if.end22
  %38 = load i64*, i64** %cache, align 8
  %arrayidx28 = getelementptr inbounds i64, i64* %38, i64 3
  %39 = load i64, i64* %arrayidx28, align 8
  %cmp29 = icmp eq i64 %39, 0
  br i1 %cmp29, label %if.then31, label %if.else46

if.then31:                                        ; preds = %if.else
  %40 = load i64, i64* %byte.addr, align 8
  %41 = load i64*, i64** %cache, align 8
  %arrayidx32 = getelementptr inbounds i64, i64* %41, i64 1
  %42 = load i64, i64* %arrayidx32, align 8
  %cmp33 = icmp ugt i64 %40, %42
  br i1 %cmp33, label %if.then35, label %if.else42

if.then35:                                        ; preds = %if.then31
  %43 = load i64*, i64** %cache, align 8
  %arrayidx36 = getelementptr inbounds i64, i64* %43, i64 0
  %44 = load i64, i64* %arrayidx36, align 8
  %45 = load i64*, i64** %cache, align 8
  %arrayidx37 = getelementptr inbounds i64, i64* %45, i64 2
  store i64 %44, i64* %arrayidx37, align 8
  %46 = load i64*, i64** %cache, align 8
  %arrayidx38 = getelementptr inbounds i64, i64* %46, i64 1
  %47 = load i64, i64* %arrayidx38, align 8
  %48 = load i64*, i64** %cache, align 8
  %arrayidx39 = getelementptr inbounds i64, i64* %48, i64 3
  store i64 %47, i64* %arrayidx39, align 8
  %49 = load i64, i64* %utf8.addr, align 8
  %50 = load i64*, i64** %cache, align 8
  %arrayidx40 = getelementptr inbounds i64, i64* %50, i64 0
  store i64 %49, i64* %arrayidx40, align 8
  %51 = load i64, i64* %byte.addr, align 8
  %52 = load i64*, i64** %cache, align 8
  %arrayidx41 = getelementptr inbounds i64, i64* %52, i64 1
  store i64 %51, i64* %arrayidx41, align 8
  br label %if.end45

if.else42:                                        ; preds = %if.then31
  %53 = load i64, i64* %utf8.addr, align 8
  %54 = load i64*, i64** %cache, align 8
  %arrayidx43 = getelementptr inbounds i64, i64* %54, i64 2
  store i64 %53, i64* %arrayidx43, align 8
  %55 = load i64, i64* %byte.addr, align 8
  %56 = load i64*, i64** %cache, align 8
  %arrayidx44 = getelementptr inbounds i64, i64* %56, i64 3
  store i64 %55, i64* %arrayidx44, align 8
  br label %if.end45

if.end45:                                         ; preds = %if.else42, %if.then35
  br label %if.end175

if.else46:                                        ; preds = %if.else
  %57 = load i64, i64* %byte.addr, align 8
  %58 = load i64*, i64** %cache, align 8
  %arrayidx47 = getelementptr inbounds i64, i64* %58, i64 1
  %59 = load i64, i64* %arrayidx47, align 8
  %cmp48 = icmp ugt i64 %57, %59
  br i1 %cmp48, label %if.then50, label %if.else100

if.then50:                                        ; preds = %if.else46
  %60 = load i64, i64* %blen.addr, align 8
  %61 = load i64, i64* %byte.addr, align 8
  %sub = sub i64 %60, %61
  %conv51 = uitofp i64 %sub to float
  %62 = load i64, i64* %blen.addr, align 8
  %63 = load i64, i64* %byte.addr, align 8
  %sub52 = sub i64 %62, %63
  %conv53 = uitofp i64 %sub52 to float
  %mul = fmul float %conv51, %conv53
  %64 = load i64, i64* %byte.addr, align 8
  %65 = load i64*, i64** %cache, align 8
  %arrayidx54 = getelementptr inbounds i64, i64* %65, i64 3
  %66 = load i64, i64* %arrayidx54, align 8
  %sub55 = sub i64 %64, %66
  %conv56 = uitofp i64 %sub55 to float
  %67 = load i64, i64* %byte.addr, align 8
  %68 = load i64*, i64** %cache, align 8
  %arrayidx57 = getelementptr inbounds i64, i64* %68, i64 3
  %69 = load i64, i64* %arrayidx57, align 8
  %sub58 = sub i64 %67, %69
  %conv59 = uitofp i64 %sub58 to float
  %mul60 = fmul float %conv56, %conv59
  %add = fadd float %mul, %mul60
  %70 = load i64*, i64** %cache, align 8
  %arrayidx61 = getelementptr inbounds i64, i64* %70, i64 3
  %71 = load i64, i64* %arrayidx61, align 8
  %sub62 = sub i64 %71, 0
  %conv63 = uitofp i64 %sub62 to float
  %72 = load i64*, i64** %cache, align 8
  %arrayidx64 = getelementptr inbounds i64, i64* %72, i64 3
  %73 = load i64, i64* %arrayidx64, align 8
  %sub65 = sub i64 %73, 0
  %conv66 = uitofp i64 %sub65 to float
  %mul67 = fmul float %conv63, %conv66
  %add68 = fadd float %add, %mul67
  store float %add68, float* %keep_earlier, align 4
  %74 = load i64, i64* %blen.addr, align 8
  %75 = load i64, i64* %byte.addr, align 8
  %sub69 = sub i64 %74, %75
  %conv70 = uitofp i64 %sub69 to float
  %76 = load i64, i64* %blen.addr, align 8
  %77 = load i64, i64* %byte.addr, align 8
  %sub71 = sub i64 %76, %77
  %conv72 = uitofp i64 %sub71 to float
  %mul73 = fmul float %conv70, %conv72
  %78 = load i64, i64* %byte.addr, align 8
  %79 = load i64*, i64** %cache, align 8
  %arrayidx74 = getelementptr inbounds i64, i64* %79, i64 1
  %80 = load i64, i64* %arrayidx74, align 8
  %sub75 = sub i64 %78, %80
  %conv76 = uitofp i64 %sub75 to float
  %81 = load i64, i64* %byte.addr, align 8
  %82 = load i64*, i64** %cache, align 8
  %arrayidx77 = getelementptr inbounds i64, i64* %82, i64 1
  %83 = load i64, i64* %arrayidx77, align 8
  %sub78 = sub i64 %81, %83
  %conv79 = uitofp i64 %sub78 to float
  %mul80 = fmul float %conv76, %conv79
  %add81 = fadd float %mul73, %mul80
  %84 = load i64*, i64** %cache, align 8
  %arrayidx82 = getelementptr inbounds i64, i64* %84, i64 1
  %85 = load i64, i64* %arrayidx82, align 8
  %sub83 = sub i64 %85, 0
  %conv84 = uitofp i64 %sub83 to float
  %86 = load i64*, i64** %cache, align 8
  %arrayidx85 = getelementptr inbounds i64, i64* %86, i64 1
  %87 = load i64, i64* %arrayidx85, align 8
  %sub86 = sub i64 %87, 0
  %conv87 = uitofp i64 %sub86 to float
  %mul88 = fmul float %conv84, %conv87
  %add89 = fadd float %add81, %mul88
  store float %add89, float* %keep_later, align 4
  %88 = load float, float* %keep_later, align 4
  %89 = load float, float* %keep_earlier, align 4
  %cmp90 = fcmp olt float %88, %89
  br i1 %cmp90, label %if.then92, label %if.end97

if.then92:                                        ; preds = %if.then50
  %90 = load i64*, i64** %cache, align 8
  %arrayidx93 = getelementptr inbounds i64, i64* %90, i64 0
  %91 = load i64, i64* %arrayidx93, align 8
  %92 = load i64*, i64** %cache, align 8
  %arrayidx94 = getelementptr inbounds i64, i64* %92, i64 2
  store i64 %91, i64* %arrayidx94, align 8
  %93 = load i64*, i64** %cache, align 8
  %arrayidx95 = getelementptr inbounds i64, i64* %93, i64 1
  %94 = load i64, i64* %arrayidx95, align 8
  %95 = load i64*, i64** %cache, align 8
  %arrayidx96 = getelementptr inbounds i64, i64* %95, i64 3
  store i64 %94, i64* %arrayidx96, align 8
  br label %if.end97

if.end97:                                         ; preds = %if.then92, %if.then50
  %96 = load i64, i64* %utf8.addr, align 8
  %97 = load i64*, i64** %cache, align 8
  %arrayidx98 = getelementptr inbounds i64, i64* %97, i64 0
  store i64 %96, i64* %arrayidx98, align 8
  %98 = load i64, i64* %byte.addr, align 8
  %99 = load i64*, i64** %cache, align 8
  %arrayidx99 = getelementptr inbounds i64, i64* %99, i64 1
  store i64 %98, i64* %arrayidx99, align 8
  br label %if.end174

if.else100:                                       ; preds = %if.else46
  %100 = load i64, i64* %blen.addr, align 8
  %101 = load i64*, i64** %cache, align 8
  %arrayidx102 = getelementptr inbounds i64, i64* %101, i64 1
  %102 = load i64, i64* %arrayidx102, align 8
  %sub103 = sub i64 %100, %102
  %conv104 = uitofp i64 %sub103 to float
  %103 = load i64, i64* %blen.addr, align 8
  %104 = load i64*, i64** %cache, align 8
  %arrayidx105 = getelementptr inbounds i64, i64* %104, i64 1
  %105 = load i64, i64* %arrayidx105, align 8
  %sub106 = sub i64 %103, %105
  %conv107 = uitofp i64 %sub106 to float
  %mul108 = fmul float %conv104, %conv107
  %106 = load i64*, i64** %cache, align 8
  %arrayidx109 = getelementptr inbounds i64, i64* %106, i64 1
  %107 = load i64, i64* %arrayidx109, align 8
  %108 = load i64, i64* %byte.addr, align 8
  %sub110 = sub i64 %107, %108
  %conv111 = uitofp i64 %sub110 to float
  %109 = load i64*, i64** %cache, align 8
  %arrayidx112 = getelementptr inbounds i64, i64* %109, i64 1
  %110 = load i64, i64* %arrayidx112, align 8
  %111 = load i64, i64* %byte.addr, align 8
  %sub113 = sub i64 %110, %111
  %conv114 = uitofp i64 %sub113 to float
  %mul115 = fmul float %conv111, %conv114
  %add116 = fadd float %mul108, %mul115
  %112 = load i64, i64* %byte.addr, align 8
  %sub117 = sub i64 %112, 0
  %conv118 = uitofp i64 %sub117 to float
  %113 = load i64, i64* %byte.addr, align 8
  %sub119 = sub i64 %113, 0
  %conv120 = uitofp i64 %sub119 to float
  %mul121 = fmul float %conv118, %conv120
  %add122 = fadd float %add116, %mul121
  store float %add122, float* %keep_later101, align 4
  %114 = load i64, i64* %byte.addr, align 8
  %115 = load i64*, i64** %cache, align 8
  %arrayidx124 = getelementptr inbounds i64, i64* %115, i64 3
  %116 = load i64, i64* %arrayidx124, align 8
  %cmp125 = icmp ugt i64 %114, %116
  br i1 %cmp125, label %if.then127, label %if.else131

if.then127:                                       ; preds = %if.else100
  %117 = load i64*, i64** %cache, align 8
  %arrayidx128 = getelementptr inbounds i64, i64* %117, i64 3
  %118 = load i64, i64* %arrayidx128, align 8
  %conv129 = uitofp i64 %118 to float
  store float %conv129, float* %b, align 4
  %119 = load i64, i64* %byte.addr, align 8
  %conv130 = uitofp i64 %119 to float
  store float %conv130, float* %c, align 4
  br label %if.end135

if.else131:                                       ; preds = %if.else100
  %120 = load i64, i64* %byte.addr, align 8
  %conv132 = uitofp i64 %120 to float
  store float %conv132, float* %b, align 4
  %121 = load i64*, i64** %cache, align 8
  %arrayidx133 = getelementptr inbounds i64, i64* %121, i64 3
  %122 = load i64, i64* %arrayidx133, align 8
  %conv134 = uitofp i64 %122 to float
  store float %conv134, float* %c, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.else131, %if.then127
  %123 = load i64, i64* %blen.addr, align 8
  %conv136 = uitofp i64 %123 to float
  %124 = load float, float* %c, align 4
  %sub137 = fsub float %conv136, %124
  %125 = load i64, i64* %blen.addr, align 8
  %conv138 = uitofp i64 %125 to float
  %126 = load float, float* %c, align 4
  %sub139 = fsub float %conv138, %126
  %mul140 = fmul float %sub137, %sub139
  %127 = load float, float* %c, align 4
  %128 = load float, float* %b, align 4
  %sub141 = fsub float %127, %128
  %129 = load float, float* %c, align 4
  %130 = load float, float* %b, align 4
  %sub142 = fsub float %129, %130
  %mul143 = fmul float %sub141, %sub142
  %add144 = fadd float %mul140, %mul143
  %131 = load float, float* %b, align 4
  %sub145 = fsub float %131, 0.000000e+00
  %132 = load float, float* %b, align 4
  %sub146 = fsub float %132, 0.000000e+00
  %mul147 = fmul float %sub145, %sub146
  %add148 = fadd float %add144, %mul147
  store float %add148, float* %keep_earlier123, align 4
  %133 = load i64, i64* %byte.addr, align 8
  %134 = load i64*, i64** %cache, align 8
  %arrayidx149 = getelementptr inbounds i64, i64* %134, i64 3
  %135 = load i64, i64* %arrayidx149, align 8
  %cmp150 = icmp ugt i64 %133, %135
  br i1 %cmp150, label %if.then152, label %if.else162

if.then152:                                       ; preds = %if.end135
  %136 = load float, float* %keep_later101, align 4
  %137 = load float, float* %keep_earlier123, align 4
  %cmp153 = fcmp olt float %136, %137
  br i1 %cmp153, label %if.then155, label %if.else158

if.then155:                                       ; preds = %if.then152
  %138 = load i64, i64* %utf8.addr, align 8
  %139 = load i64*, i64** %cache, align 8
  %arrayidx156 = getelementptr inbounds i64, i64* %139, i64 2
  store i64 %138, i64* %arrayidx156, align 8
  %140 = load i64, i64* %byte.addr, align 8
  %141 = load i64*, i64** %cache, align 8
  %arrayidx157 = getelementptr inbounds i64, i64* %141, i64 3
  store i64 %140, i64* %arrayidx157, align 8
  br label %if.end161

if.else158:                                       ; preds = %if.then152
  %142 = load i64, i64* %utf8.addr, align 8
  %143 = load i64*, i64** %cache, align 8
  %arrayidx159 = getelementptr inbounds i64, i64* %143, i64 0
  store i64 %142, i64* %arrayidx159, align 8
  %144 = load i64, i64* %byte.addr, align 8
  %145 = load i64*, i64** %cache, align 8
  %arrayidx160 = getelementptr inbounds i64, i64* %145, i64 1
  store i64 %144, i64* %arrayidx160, align 8
  br label %if.end161

if.end161:                                        ; preds = %if.else158, %if.then155
  br label %if.end173

if.else162:                                       ; preds = %if.end135
  %146 = load float, float* %keep_later101, align 4
  %147 = load float, float* %keep_earlier123, align 4
  %cmp163 = fcmp olt float %146, %147
  br i1 %cmp163, label %if.end170, label %if.then165

if.then165:                                       ; preds = %if.else162
  %148 = load i64*, i64** %cache, align 8
  %arrayidx166 = getelementptr inbounds i64, i64* %148, i64 2
  %149 = load i64, i64* %arrayidx166, align 8
  %150 = load i64*, i64** %cache, align 8
  %arrayidx167 = getelementptr inbounds i64, i64* %150, i64 0
  store i64 %149, i64* %arrayidx167, align 8
  %151 = load i64*, i64** %cache, align 8
  %arrayidx168 = getelementptr inbounds i64, i64* %151, i64 3
  %152 = load i64, i64* %arrayidx168, align 8
  %153 = load i64*, i64** %cache, align 8
  %arrayidx169 = getelementptr inbounds i64, i64* %153, i64 1
  store i64 %152, i64* %arrayidx169, align 8
  br label %if.end170

if.end170:                                        ; preds = %if.then165, %if.else162
  %154 = load i64, i64* %utf8.addr, align 8
  %155 = load i64*, i64** %cache, align 8
  %arrayidx171 = getelementptr inbounds i64, i64* %155, i64 2
  store i64 %154, i64* %arrayidx171, align 8
  %156 = load i64, i64* %byte.addr, align 8
  %157 = load i64*, i64** %cache, align 8
  %arrayidx172 = getelementptr inbounds i64, i64* %157, i64 3
  store i64 %156, i64* %arrayidx172, align 8
  br label %if.end173

if.end173:                                        ; preds = %if.end170, %if.end161
  br label %if.end174

if.end174:                                        ; preds = %if.end173, %if.end97
  br label %if.end175

if.end175:                                        ; preds = %if.end174, %if.end45
  br label %if.end176

if.end176:                                        ; preds = %if.then, %if.end175, %if.then25
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_pos_b2u(%struct.sv* %sv, i32* %offsetp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %offsetp.addr = alloca i32*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32* %offsetp, i32** %offsetp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %2 = load i32*, i32** %offsetp.addr, align 8
  %3 = load i32, i32* %2, align 4
  %conv = sext i32 %3 to i64
  %call = call i64 @Perl_sv_pos_b2u_flags(%struct.sv* %1, i64 %conv, i32 34)
  %conv1 = trunc i64 %call to i32
  %4 = load i32*, i32** %offsetp.addr, align 8
  store i32 %conv1, i32* %4, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_sv_eq_flags(%struct.sv* %sv1, %struct.sv* %sv2, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %sv1.addr = alloca %struct.sv*, align 8
  %sv2.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %pv1 = alloca i8*, align 8
  %cur1 = alloca i64, align 8
  %pv2 = alloca i8*, align 8
  %cur2 = alloca i64, align 8
  %eq = alloca i32, align 4
  %svrecode = alloca %struct.sv*, align 8
  store %struct.sv* %sv1, %struct.sv** %sv1.addr, align 8
  store %struct.sv* %sv2, %struct.sv** %sv2.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 0, i32* %eq, align 4
  store %struct.sv* null, %struct.sv** %svrecode, align 8
  %0 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8** %pv1, align 8
  store i64 0, i64* %cur1, align 8
  br label %if.end29

if.else:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %2 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %cmp = icmp eq %struct.sv* %1, %2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %3 = load i32, i32* %flags.addr, align 4
  %and = and i32 %3, 2
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %4 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and3 = and i32 %5, 427886592
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true2
  %6 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %7, 2097152
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then8, label %if.end

if.then8:                                         ; preds = %lor.lhs.false, %land.lhs.true2
  %8 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %9, 2098176
  %cmp11 = icmp eq i32 %and10, 1024
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then8
  %10 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 0
  %11 = load i8*, i8** %sv_any, align 8
  %12 = bitcast i8* %11 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %12, i32 0, i32 2
  %13 = load i64, i64* %xpv_cur, align 8
  store i64 %13, i64* %cur1, align 8
  %14 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %15 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 0
  br label %cond.end

cond.false:                                       ; preds = %if.then8
  %16 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %16, i64* %cur1, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %pv1, align 8
  %17 = load i8*, i8** %pv1, align 8
  %18 = load i64, i64* %cur1, align 8
  %19 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %20, 536870912
  %or = or i32 524288, %and13
  %call14 = call %struct.sv* @Perl_newSVpvn_flags(i8* %17, i64 %18, i32 %or)
  store %struct.sv* %call14, %struct.sv** %sv1.addr, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %lor.lhs.false, %land.lhs.true, %if.else
  %21 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %22, 2098176
  %cmp17 = icmp eq i32 %and16, 1024
  br i1 %cmp17, label %cond.true18, label %cond.false24

cond.true18:                                      ; preds = %if.end
  %23 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any19, align 8
  %25 = bitcast i8* %24 to %struct.xpv*
  %xpv_cur20 = getelementptr inbounds %struct.xpv, %struct.xpv* %25, i32 0, i32 2
  %26 = load i64, i64* %xpv_cur20, align 8
  store i64 %26, i64* %cur1, align 8
  %27 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_u21 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 3
  %svu_pv22 = bitcast %union.anon* %sv_u21 to i8**
  %28 = load i8*, i8** %svu_pv22, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %28, i64 0
  br label %cond.end27

cond.false24:                                     ; preds = %if.end
  %29 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %30 = load i32, i32* %flags.addr, align 4
  %or25 = or i32 %30, 32
  %call26 = call i8* @Perl_sv_2pv_flags(%struct.sv* %29, i64* %cur1, i32 %or25)
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false24, %cond.true18
  %cond28 = phi i8* [ %add.ptr23, %cond.true18 ], [ %call26, %cond.false24 ]
  store i8* %cond28, i8** %pv1, align 8
  br label %if.end29

if.end29:                                         ; preds = %cond.end27, %if.then
  %31 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %tobool30 = icmp ne %struct.sv* %31, null
  br i1 %tobool30, label %if.else32, label %if.then31

if.then31:                                        ; preds = %if.end29
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8** %pv2, align 8
  store i64 0, i64* %cur2, align 8
  br label %if.end47

if.else32:                                        ; preds = %if.end29
  %32 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %33, 2098176
  %cmp35 = icmp eq i32 %and34, 1024
  br i1 %cmp35, label %cond.true36, label %cond.false42

cond.true36:                                      ; preds = %if.else32
  %34 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_any37 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any37, align 8
  %36 = bitcast i8* %35 to %struct.xpv*
  %xpv_cur38 = getelementptr inbounds %struct.xpv, %struct.xpv* %36, i32 0, i32 2
  %37 = load i64, i64* %xpv_cur38, align 8
  store i64 %37, i64* %cur2, align 8
  %38 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_u39 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 3
  %svu_pv40 = bitcast %union.anon* %sv_u39 to i8**
  %39 = load i8*, i8** %svu_pv40, align 8
  %add.ptr41 = getelementptr inbounds i8, i8* %39, i64 0
  br label %cond.end45

cond.false42:                                     ; preds = %if.else32
  %40 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %41 = load i32, i32* %flags.addr, align 4
  %or43 = or i32 %41, 32
  %call44 = call i8* @Perl_sv_2pv_flags(%struct.sv* %40, i64* %cur2, i32 %or43)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false42, %cond.true36
  %cond46 = phi i8* [ %add.ptr41, %cond.true36 ], [ %call44, %cond.false42 ]
  store i8* %cond46, i8** %pv2, align 8
  br label %if.end47

if.end47:                                         ; preds = %cond.end45, %if.then31
  %42 = load i64, i64* %cur1, align 8
  %tobool48 = icmp ne i64 %42, 0
  br i1 %tobool48, label %land.lhs.true49, label %if.end123

land.lhs.true49:                                  ; preds = %if.end47
  %43 = load i64, i64* %cur2, align 8
  %tobool50 = icmp ne i64 %43, 0
  br i1 %tobool50, label %land.lhs.true51, label %if.end123

land.lhs.true51:                                  ; preds = %land.lhs.true49
  %44 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %45, 536870912
  %46 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %47, 536870912
  %cmp56 = icmp ne i32 %and53, %and55
  br i1 %cmp56, label %land.lhs.true57, label %if.end123

land.lhs.true57:                                  ; preds = %land.lhs.true51
  %48 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %48, i32 0, i32 10
  %49 = load i32, i32* %cop_hints, align 8
  %add = add i32 %49, 0
  %and58 = and i32 %add, 8
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %if.end123, label %if.then60

if.then60:                                        ; preds = %land.lhs.true57
  %50 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool61 = icmp ne %struct.sv* %50, null
  br i1 %tobool61, label %cond.true67, label %lor.lhs.false62

lor.lhs.false62:                                  ; preds = %if.then60
  %51 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool63 = icmp ne %struct.sv* %51, null
  br i1 %tobool63, label %land.lhs.true64, label %cond.false68

land.lhs.true64:                                  ; preds = %lor.lhs.false62
  %call65 = call %struct.sv* @Perl__get_encoding()
  %cmp66 = icmp ne %struct.sv* %call65, null
  br i1 %cmp66, label %cond.true67, label %cond.false68

cond.true67:                                      ; preds = %land.lhs.true64, %if.then60
  br i1 true, label %if.then69, label %if.else111

cond.false68:                                     ; preds = %land.lhs.true64, %lor.lhs.false62
  br i1 false, label %if.then69, label %if.else111

if.then69:                                        ; preds = %cond.false68, %cond.true67
  %52 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags70 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags70, align 4
  %and71 = and i32 %53, 536870912
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %if.then73, label %if.else90

if.then73:                                        ; preds = %if.then69
  %54 = load i8*, i8** %pv2, align 8
  %55 = load i64, i64* %cur2, align 8
  %call74 = call %struct.sv* @Perl_newSVpvn(i8* %54, i64 %55)
  store %struct.sv* %call74, %struct.sv** %svrecode, align 8
  %56 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call75 = call %struct.sv* @Perl__get_encoding()
  %call76 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %56, %struct.sv* %call75)
  %57 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_flags77 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags77, align 4
  %and78 = and i32 %58, 2098176
  %cmp79 = icmp eq i32 %and78, 1024
  br i1 %cmp79, label %cond.true80, label %cond.false86

cond.true80:                                      ; preds = %if.then73
  %59 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any81 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any81, align 8
  %61 = bitcast i8* %60 to %struct.xpv*
  %xpv_cur82 = getelementptr inbounds %struct.xpv, %struct.xpv* %61, i32 0, i32 2
  %62 = load i64, i64* %xpv_cur82, align 8
  store i64 %62, i64* %cur2, align 8
  %63 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_u83 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 3
  %svu_pv84 = bitcast %union.anon* %sv_u83 to i8**
  %64 = load i8*, i8** %svu_pv84, align 8
  %add.ptr85 = getelementptr inbounds i8, i8* %64, i64 0
  br label %cond.end88

cond.false86:                                     ; preds = %if.then73
  %65 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call87 = call i8* @Perl_sv_2pv_flags(%struct.sv* %65, i64* %cur2, i32 34)
  br label %cond.end88

cond.end88:                                       ; preds = %cond.false86, %cond.true80
  %cond89 = phi i8* [ %add.ptr85, %cond.true80 ], [ %call87, %cond.false86 ]
  store i8* %cond89, i8** %pv2, align 8
  br label %if.end107

if.else90:                                        ; preds = %if.then69
  %66 = load i8*, i8** %pv1, align 8
  %67 = load i64, i64* %cur1, align 8
  %call91 = call %struct.sv* @Perl_newSVpvn(i8* %66, i64 %67)
  store %struct.sv* %call91, %struct.sv** %svrecode, align 8
  %68 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call92 = call %struct.sv* @Perl__get_encoding()
  %call93 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %68, %struct.sv* %call92)
  %69 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_flags94 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags94, align 4
  %and95 = and i32 %70, 2098176
  %cmp96 = icmp eq i32 %and95, 1024
  br i1 %cmp96, label %cond.true97, label %cond.false103

cond.true97:                                      ; preds = %if.else90
  %71 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any98 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any98, align 8
  %73 = bitcast i8* %72 to %struct.xpv*
  %xpv_cur99 = getelementptr inbounds %struct.xpv, %struct.xpv* %73, i32 0, i32 2
  %74 = load i64, i64* %xpv_cur99, align 8
  store i64 %74, i64* %cur1, align 8
  %75 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_u100 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 3
  %svu_pv101 = bitcast %union.anon* %sv_u100 to i8**
  %76 = load i8*, i8** %svu_pv101, align 8
  %add.ptr102 = getelementptr inbounds i8, i8* %76, i64 0
  br label %cond.end105

cond.false103:                                    ; preds = %if.else90
  %77 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call104 = call i8* @Perl_sv_2pv_flags(%struct.sv* %77, i64* %cur1, i32 34)
  br label %cond.end105

cond.end105:                                      ; preds = %cond.false103, %cond.true97
  %cond106 = phi i8* [ %add.ptr102, %cond.true97 ], [ %call104, %cond.false103 ]
  store i8* %cond106, i8** %pv1, align 8
  br label %if.end107

if.end107:                                        ; preds = %cond.end105, %cond.end88
  %78 = load i64, i64* %cur1, align 8
  %79 = load i64, i64* %cur2, align 8
  %cmp108 = icmp ne i64 %78, %79
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  %80 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %81 = bitcast %struct.sv* %80 to i8*
  %82 = bitcast i8* %81 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %82)
  store i32 0, i32* %retval, align 4
  br label %return

if.end110:                                        ; preds = %if.end107
  br label %if.end122

if.else111:                                       ; preds = %cond.false68, %cond.true67
  %83 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags112 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags112, align 4
  %and113 = and i32 %84, 536870912
  %tobool114 = icmp ne i32 %and113, 0
  br i1 %tobool114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else111
  %85 = load i8*, i8** %pv2, align 8
  %86 = load i64, i64* %cur2, align 8
  %87 = load i8*, i8** %pv1, align 8
  %88 = load i64, i64* %cur1, align 8
  %call116 = call i32 @Perl_bytes_cmp_utf8(i8* %85, i64 %86, i8* %87, i64 %88)
  %cmp117 = icmp eq i32 %call116, 0
  %conv = zext i1 %cmp117 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.else118:                                       ; preds = %if.else111
  %89 = load i8*, i8** %pv1, align 8
  %90 = load i64, i64* %cur1, align 8
  %91 = load i8*, i8** %pv2, align 8
  %92 = load i64, i64* %cur2, align 8
  %call119 = call i32 @Perl_bytes_cmp_utf8(i8* %89, i64 %90, i8* %91, i64 %92)
  %cmp120 = icmp eq i32 %call119, 0
  %conv121 = zext i1 %cmp120 to i32
  store i32 %conv121, i32* %retval, align 4
  br label %return

if.end122:                                        ; preds = %if.end110
  br label %if.end123

if.end123:                                        ; preds = %if.end122, %land.lhs.true57, %land.lhs.true51, %land.lhs.true49, %if.end47
  %93 = load i64, i64* %cur1, align 8
  %94 = load i64, i64* %cur2, align 8
  %cmp124 = icmp eq i64 %93, %94
  br i1 %cmp124, label %if.then126, label %if.end131

if.then126:                                       ; preds = %if.end123
  %95 = load i8*, i8** %pv1, align 8
  %96 = load i8*, i8** %pv2, align 8
  %cmp127 = icmp eq i8* %95, %96
  br i1 %cmp127, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then126
  %97 = load i8*, i8** %pv1, align 8
  %98 = load i8*, i8** %pv2, align 8
  %99 = load i64, i64* %cur1, align 8
  %call129 = call i32 @memcmp(i8* %97, i8* %98, i64 %99) #8
  %tobool130 = icmp ne i32 %call129, 0
  %lnot = xor i1 %tobool130, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then126
  %100 = phi i1 [ true, %if.then126 ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %100 to i32
  store i32 %lor.ext, i32* %eq, align 4
  br label %if.end131

if.end131:                                        ; preds = %lor.end, %if.end123
  %101 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %102 = bitcast %struct.sv* %101 to i8*
  %103 = bitcast i8* %102 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %103)
  %104 = load i32, i32* %eq, align 4
  store i32 %104, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end131, %if.else118, %if.then115, %if.then109
  %105 = load i32, i32* %retval, align 4
  ret i32 %105
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSVpvn_flags(i8* %s, i64 %len, i32 %flags) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %ix = alloca i64, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %if.end

if.else:                                          ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  store i8* null, i8** %sv_any2, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end3

do.end3:                                          ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %10 = load i8*, i8** %s.addr, align 8
  %11 = load i64, i64* %len.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %9, i8* %10, i64 %11)
  %12 = load i32, i32* %flags.addr, align 4
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags4, align 4
  %or = or i32 %14, %12
  store i32 %or, i32* %sv_flags4, align 4
  %15 = load i32, i32* %flags.addr, align 4
  %and = and i32 %15, 524288
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %if.then6, label %if.end13

if.then6:                                         ; preds = %do.end3
  br label %do.body7

do.body7:                                         ; preds = %if.then6
  %16 = load i64, i64* @PL_tmps_ix, align 8
  %inc8 = add nsw i64 %16, 1
  store i64 %inc8, i64* @PL_tmps_ix, align 8
  store i64 %inc8, i64* %ix, align 8
  %17 = load i64, i64* %ix, align 8
  %18 = load i64, i64* @PL_tmps_max, align 8
  %cmp = icmp sge i64 %17, %18
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body7
  br i1 true, label %if.then9, label %if.end11

cond.false:                                       ; preds = %do.body7
  br i1 false, label %if.then9, label %if.end11

if.then9:                                         ; preds = %cond.false, %cond.true
  %19 = load i64, i64* %ix, align 8
  %call10 = call i64 @Perl_tmps_grow_p(i64 %19)
  store i64 %call10, i64* %ix, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %cond.false, %cond.true
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %21 = load %struct.sv**, %struct.sv*** @PL_tmps_stack, align 8
  %22 = load i64, i64* %ix, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %21, i64 %22
  store %struct.sv* %20, %struct.sv** %arrayidx, align 8
  br label %do.end12

do.end12:                                         ; preds = %if.end11
  br label %if.end13

if.end13:                                         ; preds = %do.end12, %do.end3
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %23
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSVpvn(i8* %buffer, i64 %len) #0 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %if.end

if.else:                                          ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  store i8* null, i8** %sv_any2, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end3

do.end3:                                          ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %10 = load i8*, i8** %buffer.addr, align 8
  %11 = load i64, i64* %len.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %9, i8* %10, i64 %11)
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %12
}

declare dso_local i32 @Perl_bytes_cmp_utf8(i8*, i64, i8*, i64) #1

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_sv_cmp(%struct.sv* %sv1, %struct.sv* %sv2) #0 {
entry:
  %sv1.addr = alloca %struct.sv*, align 8
  %sv2.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv1, %struct.sv** %sv1.addr, align 8
  store %struct.sv* %sv2, %struct.sv** %sv2.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %call = call i32 @Perl_sv_cmp_flags(%struct.sv* %0, %struct.sv* %1, i32 2)
  ret i32 %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_sv_cmp_flags(%struct.sv* %sv1, %struct.sv* %sv2, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %sv1.addr = alloca %struct.sv*, align 8
  %sv2.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %cur1 = alloca i64, align 8
  %cur2 = alloca i64, align 8
  %pv1 = alloca i8*, align 8
  %pv2 = alloca i8*, align 8
  %cmp = alloca i32, align 4
  %svrecode = alloca %struct.sv*, align 8
  %retval61 = alloca i32, align 4
  %retval98 = alloca i32, align 4
  %retval118 = alloca i32, align 4
  store %struct.sv* %sv1, %struct.sv** %sv1.addr, align 8
  store %struct.sv* %sv2, %struct.sv** %sv2.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.sv* null, %struct.sv** %svrecode, align 8
  %0 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8** %pv1, align 8
  store i64 0, i64* %cur1, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2098176
  %cmp1 = icmp eq i32 %and, 1024
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %3 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 2
  %6 = load i64, i64* %xpv_cur, align 8
  store i64 %6, i64* %cur1, align 8
  %7 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %8 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 0
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %9 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %10 = load i32, i32* %flags.addr, align 4
  %or = or i32 %10, 32
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %9, i64* %cur1, i32 %or)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %pv1, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %11 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %tobool2 = icmp ne %struct.sv* %11, null
  br i1 %tobool2, label %if.else4, label %if.then3

if.then3:                                         ; preds = %if.end
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8** %pv2, align 8
  store i64 0, i64* %cur2, align 8
  br label %if.end19

if.else4:                                         ; preds = %if.end
  %12 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %13, 2098176
  %cmp7 = icmp eq i32 %and6, 1024
  br i1 %cmp7, label %cond.true8, label %cond.false14

cond.true8:                                       ; preds = %if.else4
  %14 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any9, align 8
  %16 = bitcast i8* %15 to %struct.xpv*
  %xpv_cur10 = getelementptr inbounds %struct.xpv, %struct.xpv* %16, i32 0, i32 2
  %17 = load i64, i64* %xpv_cur10, align 8
  store i64 %17, i64* %cur2, align 8
  %18 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_u11 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 3
  %svu_pv12 = bitcast %union.anon* %sv_u11 to i8**
  %19 = load i8*, i8** %svu_pv12, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %19, i64 0
  br label %cond.end17

cond.false14:                                     ; preds = %if.else4
  %20 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %21 = load i32, i32* %flags.addr, align 4
  %or15 = or i32 %21, 32
  %call16 = call i8* @Perl_sv_2pv_flags(%struct.sv* %20, i64* %cur2, i32 %or15)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false14, %cond.true8
  %cond18 = phi i8* [ %add.ptr13, %cond.true8 ], [ %call16, %cond.false14 ]
  store i8* %cond18, i8** %pv2, align 8
  br label %if.end19

if.end19:                                         ; preds = %cond.end17, %if.then3
  %22 = load i64, i64* %cur1, align 8
  %tobool20 = icmp ne i64 %22, 0
  br i1 %tobool20, label %land.lhs.true, label %if.end109

land.lhs.true:                                    ; preds = %if.end19
  %23 = load i64, i64* %cur2, align 8
  %tobool21 = icmp ne i64 %23, 0
  br i1 %tobool21, label %land.lhs.true22, label %if.end109

land.lhs.true22:                                  ; preds = %land.lhs.true
  %24 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %25, 536870912
  %26 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %27, 536870912
  %cmp27 = icmp ne i32 %and24, %and26
  br i1 %cmp27, label %land.lhs.true28, label %if.end109

land.lhs.true28:                                  ; preds = %land.lhs.true22
  %28 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %28, i32 0, i32 10
  %29 = load i32, i32* %cop_hints, align 8
  %add = add i32 %29, 0
  %and29 = and i32 %add, 8
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %if.end109, label %if.then31

if.then31:                                        ; preds = %land.lhs.true28
  %30 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %31, 536870912
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %if.then35, label %if.else71

if.then35:                                        ; preds = %if.then31
  %32 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool36 = icmp ne %struct.sv* %32, null
  br i1 %tobool36, label %cond.true41, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then35
  %33 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool37 = icmp ne %struct.sv* %33, null
  br i1 %tobool37, label %land.lhs.true38, label %cond.false42

land.lhs.true38:                                  ; preds = %lor.lhs.false
  %call39 = call %struct.sv* @Perl__get_encoding()
  %cmp40 = icmp ne %struct.sv* %call39, null
  br i1 %cmp40, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %land.lhs.true38, %if.then35
  br i1 true, label %if.then43, label %if.else60

cond.false42:                                     ; preds = %land.lhs.true38, %lor.lhs.false
  br i1 false, label %if.then43, label %if.else60

if.then43:                                        ; preds = %cond.false42, %cond.true41
  %34 = load i8*, i8** %pv2, align 8
  %35 = load i64, i64* %cur2, align 8
  %call44 = call %struct.sv* @Perl_newSVpvn(i8* %34, i64 %35)
  store %struct.sv* %call44, %struct.sv** %svrecode, align 8
  %36 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call45 = call %struct.sv* @Perl__get_encoding()
  %call46 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %36, %struct.sv* %call45)
  %37 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_flags47 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %38, 2098176
  %cmp49 = icmp eq i32 %and48, 1024
  br i1 %cmp49, label %cond.true50, label %cond.false56

cond.true50:                                      ; preds = %if.then43
  %39 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any51 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any51, align 8
  %41 = bitcast i8* %40 to %struct.xpv*
  %xpv_cur52 = getelementptr inbounds %struct.xpv, %struct.xpv* %41, i32 0, i32 2
  %42 = load i64, i64* %xpv_cur52, align 8
  store i64 %42, i64* %cur2, align 8
  %43 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_u53 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 3
  %svu_pv54 = bitcast %union.anon* %sv_u53 to i8**
  %44 = load i8*, i8** %svu_pv54, align 8
  %add.ptr55 = getelementptr inbounds i8, i8* %44, i64 0
  br label %cond.end58

cond.false56:                                     ; preds = %if.then43
  %45 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call57 = call i8* @Perl_sv_2pv_flags(%struct.sv* %45, i64* %cur2, i32 34)
  br label %cond.end58

cond.end58:                                       ; preds = %cond.false56, %cond.true50
  %cond59 = phi i8* [ %add.ptr55, %cond.true50 ], [ %call57, %cond.false56 ]
  store i8* %cond59, i8** %pv2, align 8
  br label %if.end70

if.else60:                                        ; preds = %cond.false42, %cond.true41
  %46 = load i8*, i8** %pv2, align 8
  %47 = load i64, i64* %cur2, align 8
  %48 = load i8*, i8** %pv1, align 8
  %49 = load i64, i64* %cur1, align 8
  %call62 = call i32 @Perl_bytes_cmp_utf8(i8* %46, i64 %47, i8* %48, i64 %49)
  %sub = sub nsw i32 0, %call62
  store i32 %sub, i32* %retval61, align 4
  %50 = load i32, i32* %retval61, align 4
  %tobool63 = icmp ne i32 %50, 0
  br i1 %tobool63, label %cond.true64, label %cond.false67

cond.true64:                                      ; preds = %if.else60
  %51 = load i32, i32* %retval61, align 4
  %cmp65 = icmp slt i32 %51, 0
  %52 = zext i1 %cmp65 to i64
  %cond66 = select i1 %cmp65, i32 -1, i32 1
  br label %cond.end68

cond.false67:                                     ; preds = %if.else60
  br label %cond.end68

cond.end68:                                       ; preds = %cond.false67, %cond.true64
  %cond69 = phi i32 [ %cond66, %cond.true64 ], [ 0, %cond.false67 ]
  store i32 %cond69, i32* %retval, align 4
  br label %return

if.end70:                                         ; preds = %cond.end58
  br label %if.end108

if.else71:                                        ; preds = %if.then31
  %53 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool72 = icmp ne %struct.sv* %53, null
  br i1 %tobool72, label %cond.true78, label %lor.lhs.false73

lor.lhs.false73:                                  ; preds = %if.else71
  %54 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool74 = icmp ne %struct.sv* %54, null
  br i1 %tobool74, label %land.lhs.true75, label %cond.false79

land.lhs.true75:                                  ; preds = %lor.lhs.false73
  %call76 = call %struct.sv* @Perl__get_encoding()
  %cmp77 = icmp ne %struct.sv* %call76, null
  br i1 %cmp77, label %cond.true78, label %cond.false79

cond.true78:                                      ; preds = %land.lhs.true75, %if.else71
  br i1 true, label %if.then80, label %if.else97

cond.false79:                                     ; preds = %land.lhs.true75, %lor.lhs.false73
  br i1 false, label %if.then80, label %if.else97

if.then80:                                        ; preds = %cond.false79, %cond.true78
  %55 = load i8*, i8** %pv1, align 8
  %56 = load i64, i64* %cur1, align 8
  %call81 = call %struct.sv* @Perl_newSVpvn(i8* %55, i64 %56)
  store %struct.sv* %call81, %struct.sv** %svrecode, align 8
  %57 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call82 = call %struct.sv* @Perl__get_encoding()
  %call83 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %57, %struct.sv* %call82)
  %58 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_flags84 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %59, 2098176
  %cmp86 = icmp eq i32 %and85, 1024
  br i1 %cmp86, label %cond.true87, label %cond.false93

cond.true87:                                      ; preds = %if.then80
  %60 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any88 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any88, align 8
  %62 = bitcast i8* %61 to %struct.xpv*
  %xpv_cur89 = getelementptr inbounds %struct.xpv, %struct.xpv* %62, i32 0, i32 2
  %63 = load i64, i64* %xpv_cur89, align 8
  store i64 %63, i64* %cur1, align 8
  %64 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_u90 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 3
  %svu_pv91 = bitcast %union.anon* %sv_u90 to i8**
  %65 = load i8*, i8** %svu_pv91, align 8
  %add.ptr92 = getelementptr inbounds i8, i8* %65, i64 0
  br label %cond.end95

cond.false93:                                     ; preds = %if.then80
  %66 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call94 = call i8* @Perl_sv_2pv_flags(%struct.sv* %66, i64* %cur1, i32 34)
  br label %cond.end95

cond.end95:                                       ; preds = %cond.false93, %cond.true87
  %cond96 = phi i8* [ %add.ptr92, %cond.true87 ], [ %call94, %cond.false93 ]
  store i8* %cond96, i8** %pv1, align 8
  br label %if.end107

if.else97:                                        ; preds = %cond.false79, %cond.true78
  %67 = load i8*, i8** %pv1, align 8
  %68 = load i64, i64* %cur1, align 8
  %69 = load i8*, i8** %pv2, align 8
  %70 = load i64, i64* %cur2, align 8
  %call99 = call i32 @Perl_bytes_cmp_utf8(i8* %67, i64 %68, i8* %69, i64 %70)
  store i32 %call99, i32* %retval98, align 4
  %71 = load i32, i32* %retval98, align 4
  %tobool100 = icmp ne i32 %71, 0
  br i1 %tobool100, label %cond.true101, label %cond.false104

cond.true101:                                     ; preds = %if.else97
  %72 = load i32, i32* %retval98, align 4
  %cmp102 = icmp slt i32 %72, 0
  %73 = zext i1 %cmp102 to i64
  %cond103 = select i1 %cmp102, i32 -1, i32 1
  br label %cond.end105

cond.false104:                                    ; preds = %if.else97
  br label %cond.end105

cond.end105:                                      ; preds = %cond.false104, %cond.true101
  %cond106 = phi i32 [ %cond103, %cond.true101 ], [ 0, %cond.false104 ]
  store i32 %cond106, i32* %retval, align 4
  br label %return

if.end107:                                        ; preds = %cond.end95
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %if.end70
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %land.lhs.true28, %land.lhs.true22, %land.lhs.true, %if.end19
  %74 = load i64, i64* %cur1, align 8
  %tobool110 = icmp ne i64 %74, 0
  br i1 %tobool110, label %if.else114, label %if.then111

if.then111:                                       ; preds = %if.end109
  %75 = load i64, i64* %cur2, align 8
  %tobool112 = icmp ne i64 %75, 0
  %76 = zext i1 %tobool112 to i64
  %cond113 = select i1 %tobool112, i32 -1, i32 0
  store i32 %cond113, i32* %cmp, align 4
  br label %if.end138

if.else114:                                       ; preds = %if.end109
  %77 = load i64, i64* %cur2, align 8
  %tobool115 = icmp ne i64 %77, 0
  br i1 %tobool115, label %if.else117, label %if.then116

if.then116:                                       ; preds = %if.else114
  store i32 1, i32* %cmp, align 4
  br label %if.end137

if.else117:                                       ; preds = %if.else114
  %78 = load i8*, i8** %pv1, align 8
  %79 = load i8*, i8** %pv2, align 8
  %80 = load i64, i64* %cur1, align 8
  %81 = load i64, i64* %cur2, align 8
  %cmp119 = icmp ult i64 %80, %81
  br i1 %cmp119, label %cond.true120, label %cond.false121

cond.true120:                                     ; preds = %if.else117
  %82 = load i64, i64* %cur1, align 8
  br label %cond.end122

cond.false121:                                    ; preds = %if.else117
  %83 = load i64, i64* %cur2, align 8
  br label %cond.end122

cond.end122:                                      ; preds = %cond.false121, %cond.true120
  %cond123 = phi i64 [ %82, %cond.true120 ], [ %83, %cond.false121 ]
  %call124 = call i32 @memcmp(i8* %78, i8* %79, i64 %cond123) #8
  store i32 %call124, i32* %retval118, align 4
  %84 = load i32, i32* %retval118, align 4
  %tobool125 = icmp ne i32 %84, 0
  br i1 %tobool125, label %if.then126, label %if.else129

if.then126:                                       ; preds = %cond.end122
  %85 = load i32, i32* %retval118, align 4
  %cmp127 = icmp slt i32 %85, 0
  %86 = zext i1 %cmp127 to i64
  %cond128 = select i1 %cmp127, i32 -1, i32 1
  store i32 %cond128, i32* %cmp, align 4
  br label %if.end136

if.else129:                                       ; preds = %cond.end122
  %87 = load i64, i64* %cur1, align 8
  %88 = load i64, i64* %cur2, align 8
  %cmp130 = icmp eq i64 %87, %88
  br i1 %cmp130, label %if.then131, label %if.else132

if.then131:                                       ; preds = %if.else129
  store i32 0, i32* %cmp, align 4
  br label %if.end135

if.else132:                                       ; preds = %if.else129
  %89 = load i64, i64* %cur1, align 8
  %90 = load i64, i64* %cur2, align 8
  %cmp133 = icmp ult i64 %89, %90
  %91 = zext i1 %cmp133 to i64
  %cond134 = select i1 %cmp133, i32 -1, i32 1
  store i32 %cond134, i32* %cmp, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.else132, %if.then131
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.then126
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.then116
  br label %if.end138

if.end138:                                        ; preds = %if.end137, %if.then111
  %92 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %93 = bitcast %struct.sv* %92 to i8*
  %94 = bitcast i8* %93 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %94)
  %95 = load i32, i32* %cmp, align 4
  store i32 %95, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end138, %cond.end105, %cond.end68
  %96 = load i32, i32* %retval, align 4
  ret i32 %96
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_sv_cmp_locale(%struct.sv* %sv1, %struct.sv* %sv2) #0 {
entry:
  %sv1.addr = alloca %struct.sv*, align 8
  %sv2.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv1, %struct.sv** %sv1.addr, align 8
  store %struct.sv* %sv2, %struct.sv** %sv2.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %call = call i32 @Perl_sv_cmp_locale_flags(%struct.sv* %0, %struct.sv* %1, i32 2)
  ret i32 %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_sv_cmp_locale_flags(%struct.sv* %sv1, %struct.sv* %sv2, i32 %flags) #0 {
entry:
  %sv1.addr = alloca %struct.sv*, align 8
  %sv2.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.sv* %sv1, %struct.sv** %sv1.addr, align 8
  store %struct.sv* %sv2, %struct.sv** %sv2.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %1 = load %struct.sv*, %struct.sv** %sv1.addr, align 8
  %2 = load %struct.sv*, %struct.sv** %sv2.addr, align 8
  %call = call i32 @Perl_sv_cmp_flags(%struct.sv* %1, %struct.sv* %2, i32 2)
  ret i32 %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_sv_gets(%struct.sv* %sv, %struct._PerlIO** %fp, i32 %append) #0 {
entry:
  %retval = alloca i8*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %fp.addr = alloca %struct._PerlIO**, align 8
  %append.addr = alloca i32, align 4
  %rsptr = alloca i8*, align 8
  %rslen = alloca i64, align 8
  %rslast = alloca i8, align 1
  %bp = alloca i8*, align 8
  %cnt = alloca i64, align 8
  %i = alloca i32, align 4
  %rspara = alloca i32, align 4
  %st = alloca %struct.stat, align 8
  %offset = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %bpx = alloca i64, align 8
  %shortbuffered = alloca i32, align 4
  %buf = alloca [8192 x i8], align 16
  %bpe = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct._PerlIO** %fp, %struct._PerlIO*** %fp.addr, align 8
  store i32 %append, i32* %append.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %rspara, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 427886592
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %3 = load i32, i32* %append.addr, align 4
  %tobool1 = icmp ne i32 %3, 0
  %4 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 0, i32 4
  call void @Perl_sv_force_normal_flags(%struct.sv* %2, i32 %cond)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %6, 255
  %cmp = icmp uge i32 %and3, 3
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %7, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %8 = phi i1 [ true, %if.end ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %8 to i32
  %9 = load i32, i32* %append.addr, align 4
  %tobool4 = icmp ne i32 %9, 0
  br i1 %tobool4, label %if.then5, label %if.end21

if.then5:                                         ; preds = %lor.end
  %10 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call = call i32 @PerlIO_isutf8(%struct._PerlIO** %10)
  %tobool6 = icmp ne i32 %call, 0
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then5
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %12, 536870912
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.end13, label %if.then11

if.then11:                                        ; preds = %if.then7
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call12 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %13, i32 0, i64 0)
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_pos_u2b(%struct.sv* %14, i32* %append.addr, i32* null)
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.then7
  br label %if.end20

if.else:                                          ; preds = %if.then5
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %16, 536870912
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.else
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %18 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %19 = load i32, i32* %append.addr, align 4
  %call18 = call i8* @S_sv_gets_append_to_utf8(%struct.sv* %17, %struct._PerlIO** %18, i32 %19)
  store i8* %call18, i8** %retval, align 8
  br label %return

if.end19:                                         ; preds = %if.else
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.end13
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %lor.end
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %21, 1610547455
  store i32 %and23, i32* %sv_flags22, align 4
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags24, align 4
  %or = or i32 %23, 17408
  store i32 %or, i32* %sv_flags24, align 4
  %24 = load i32, i32* %append.addr, align 4
  %tobool25 = icmp ne i32 %24, 0
  br i1 %tobool25, label %if.end27, label %if.then26

if.then26:                                        ; preds = %if.end21
  br label %do.body

do.body:                                          ; preds = %if.then26
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any, align 8
  %27 = bitcast i8* %26 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %27, i32 0, i32 2
  store i64 0, i64* %xpv_cur, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end27

if.end27:                                         ; preds = %do.end, %if.end21
  %28 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call28 = call i32 @PerlIO_isutf8(%struct._PerlIO** %28)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.then30, label %if.end33

if.then30:                                        ; preds = %if.end27
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags31, align 4
  %or32 = or i32 %30, 536870912
  store i32 %or32, i32* %sv_flags31, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.then30, %if.end27
  %31 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp34 = icmp eq %struct.cop* %31, @PL_compiling
  br i1 %cmp34, label %if.then35, label %if.else36

if.then35:                                        ; preds = %if.end33
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), i8** %rsptr, align 8
  store i64 1, i64* %rslen, align 8
  br label %if.end156

if.else36:                                        ; preds = %if.end33
  %32 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %33, 65280
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.else80, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else36
  %34 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %35, 255
  %cmp42 = icmp eq i32 %and41, 8
  br i1 %cmp42, label %if.else80, label %lor.lhs.false43

lor.lhs.false43:                                  ; preds = %lor.lhs.false
  %36 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %37, 16826623
  %cmp46 = icmp eq i32 %and45, 16777226
  br i1 %cmp46, label %if.else80, label %if.then47

if.then47:                                        ; preds = %lor.lhs.false43
  %38 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call48 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %38)
  %call49 = call i32 @fstat64(i32 %call48, %struct.stat* %st) #6
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end79, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then47
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3
  %39 = load i32, i32* %st_mode, align 8
  %and51 = and i32 %39, 61440
  %cmp52 = icmp eq i32 %and51, 32768
  br i1 %cmp52, label %if.then53, label %if.end79

if.then53:                                        ; preds = %land.lhs.true
  %40 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call54 = call i64 @Perl_PerlIO_tell(%struct._PerlIO** %40)
  store i64 %call54, i64* %offset, align 8
  %41 = load i64, i64* %offset, align 8
  %cmp55 = icmp ne i64 %41, -1
  br i1 %cmp55, label %land.lhs.true56, label %if.end78

land.lhs.true56:                                  ; preds = %if.then53
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 8
  %42 = load i64, i64* %st_size, align 8
  %43 = load i32, i32* %append.addr, align 4
  %conv = sext i32 %43 to i64
  %add = add nsw i64 %42, %conv
  %44 = load i64, i64* %offset, align 8
  %cmp57 = icmp sgt i64 %add, %44
  br i1 %cmp57, label %if.then59, label %if.end78

if.then59:                                        ; preds = %land.lhs.true56
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %46, 268435456
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %cond.true, label %lor.lhs.false63

lor.lhs.false63:                                  ; preds = %if.then59
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any64 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  %48 = load i8*, i8** %sv_any64, align 8
  %49 = bitcast i8* %48 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %49, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %50 = load i64, i64* %xpvlenu_len, align 8
  %st_size65 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 8
  %51 = load i64, i64* %st_size65, align 8
  %52 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %51, %52
  %53 = load i32, i32* %append.addr, align 4
  %conv66 = sext i32 %53 to i64
  %add67 = add nsw i64 %sub, %conv66
  %add68 = add nsw i64 %add67, 2
  %cmp69 = icmp ult i64 %50, %add68
  br i1 %cmp69, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false63, %if.then59
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %st_size71 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 8
  %55 = load i64, i64* %st_size71, align 8
  %56 = load i64, i64* %offset, align 8
  %sub72 = sub nsw i64 %55, %56
  %57 = load i32, i32* %append.addr, align 4
  %conv73 = sext i32 %57 to i64
  %add74 = add nsw i64 %sub72, %conv73
  %add75 = add nsw i64 %add74, 2
  %call76 = call i8* @Perl_sv_grow(%struct.sv* %54, i64 %add75)
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false63
  %58 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %59 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond77 = phi i8* [ %call76, %cond.true ], [ %59, %cond.false ]
  br label %if.end78

if.end78:                                         ; preds = %cond.end, %land.lhs.true56, %if.then53
  br label %if.end79

if.end79:                                         ; preds = %if.end78, %land.lhs.true, %if.then47
  store i8* null, i8** %rsptr, align 8
  store i64 0, i64* %rslen, align 8
  br label %if.end155

if.else80:                                        ; preds = %lor.lhs.false43, %lor.lhs.false, %if.else36
  %60 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %61, 2048
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %land.lhs.true84, label %if.else104

land.lhs.true84:                                  ; preds = %if.else80
  %62 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u85 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u85 to %struct.sv**
  %63 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags86 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags86, align 4
  %and87 = and i32 %64, 2097408
  %cmp88 = icmp eq i32 %and87, 256
  br i1 %cmp88, label %cond.true90, label %cond.false94

cond.true90:                                      ; preds = %land.lhs.true84
  %65 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u91 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 3
  %svu_rv92 = bitcast %union.anon* %sv_u91 to %struct.sv**
  %66 = load %struct.sv*, %struct.sv** %svu_rv92, align 8
  %sv_any93 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 0
  %67 = load i8*, i8** %sv_any93, align 8
  %68 = bitcast i8* %67 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %68, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %69 = load i64, i64* %xivu_iv, align 8
  br label %cond.end98

cond.false94:                                     ; preds = %land.lhs.true84
  %70 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u95 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 3
  %svu_rv96 = bitcast %union.anon* %sv_u95 to %struct.sv**
  %71 = load %struct.sv*, %struct.sv** %svu_rv96, align 8
  %call97 = call i64 @Perl_sv_2iv_flags(%struct.sv* %71, i32 2)
  br label %cond.end98

cond.end98:                                       ; preds = %cond.false94, %cond.true90
  %cond99 = phi i64 [ %69, %cond.true90 ], [ %call97, %cond.false94 ]
  %cmp100 = icmp sgt i64 %cond99, 0
  br i1 %cmp100, label %if.then102, label %if.else104

if.then102:                                       ; preds = %cond.end98
  %72 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %73 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %74 = load i32, i32* %append.addr, align 4
  %call103 = call i8* @S_sv_gets_read_record(%struct.sv* %72, %struct._PerlIO** %73, i32 %74)
  store i8* %call103, i8** %retval, align 8
  br label %return

if.else104:                                       ; preds = %cond.end98, %if.else80
  %75 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags105 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags105, align 4
  %and106 = and i32 %76, 1024
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %land.lhs.true108, label %if.else113

land.lhs.true108:                                 ; preds = %if.else104
  %77 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any109 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 0
  %78 = load i8*, i8** %sv_any109, align 8
  %79 = bitcast i8* %78 to %struct.xpv*
  %xpv_cur110 = getelementptr inbounds %struct.xpv, %struct.xpv* %79, i32 0, i32 2
  %80 = load i64, i64* %xpv_cur110, align 8
  %tobool111 = icmp ne i64 %80, 0
  br i1 %tobool111, label %if.else113, label %if.then112

if.then112:                                       ; preds = %land.lhs.true108
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i64 0, i64 0), i8** %rsptr, align 8
  store i64 2, i64* %rslen, align 8
  store i32 1, i32* %rspara, align 4
  br label %if.end153

if.else113:                                       ; preds = %land.lhs.true108, %if.else104
  %81 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call114 = call i32 @PerlIO_isutf8(%struct._PerlIO** %81)
  %tobool115 = icmp ne i32 %call114, 0
  br i1 %tobool115, label %if.then116, label %if.else130

if.then116:                                       ; preds = %if.else113
  %82 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags117 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags117, align 4
  %and118 = and i32 %83, 538969088
  %cmp119 = icmp eq i32 %and118, 536871936
  br i1 %cmp119, label %cond.true121, label %cond.false126

cond.true121:                                     ; preds = %if.then116
  %84 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any122 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 0
  %85 = load i8*, i8** %sv_any122, align 8
  %86 = bitcast i8* %85 to %struct.xpv*
  %xpv_cur123 = getelementptr inbounds %struct.xpv, %struct.xpv* %86, i32 0, i32 2
  %87 = load i64, i64* %xpv_cur123, align 8
  store i64 %87, i64* %rslen, align 8
  %88 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u124 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 3
  %svu_pv125 = bitcast %union.anon* %sv_u124 to i8**
  %89 = load i8*, i8** %svu_pv125, align 8
  br label %cond.end128

cond.false126:                                    ; preds = %if.then116
  %90 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %call127 = call i8* @Perl_sv_2pvutf8(%struct.sv* %90, i64* %rslen)
  br label %cond.end128

cond.end128:                                      ; preds = %cond.false126, %cond.true121
  %cond129 = phi i8* [ %89, %cond.true121 ], [ %call127, %cond.false126 ]
  store i8* %cond129, i8** %rsptr, align 8
  br label %if.end152

if.else130:                                       ; preds = %if.else113
  %91 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags131 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 2
  %92 = load i32, i32* %sv_flags131, align 4
  %and132 = and i32 %92, 536870912
  %tobool133 = icmp ne i32 %and132, 0
  br i1 %tobool133, label %if.then134, label %if.end138

if.then134:                                       ; preds = %if.else130
  %93 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %call135 = call zeroext i1 @Perl_sv_utf8_downgrade(%struct.sv* %93, i1 zeroext true)
  br i1 %call135, label %if.end137, label %if.then136

if.then136:                                       ; preds = %if.then134
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0))
  br label %if.end137

if.end137:                                        ; preds = %if.then136, %if.then134
  br label %if.end138

if.end138:                                        ; preds = %if.end137, %if.else130
  %94 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags139 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags139, align 4
  %and140 = and i32 %95, 2098176
  %cmp141 = icmp eq i32 %and140, 1024
  br i1 %cmp141, label %cond.true143, label %cond.false148

cond.true143:                                     ; preds = %if.end138
  %96 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any144 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 0
  %97 = load i8*, i8** %sv_any144, align 8
  %98 = bitcast i8* %97 to %struct.xpv*
  %xpv_cur145 = getelementptr inbounds %struct.xpv, %struct.xpv* %98, i32 0, i32 2
  %99 = load i64, i64* %xpv_cur145, align 8
  store i64 %99, i64* %rslen, align 8
  %100 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u146 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 3
  %svu_pv147 = bitcast %union.anon* %sv_u146 to i8**
  %101 = load i8*, i8** %svu_pv147, align 8
  %add.ptr = getelementptr inbounds i8, i8* %101, i64 0
  br label %cond.end150

cond.false148:                                    ; preds = %if.end138
  %102 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %call149 = call i8* @Perl_sv_2pv_flags(%struct.sv* %102, i64* %rslen, i32 34)
  br label %cond.end150

cond.end150:                                      ; preds = %cond.false148, %cond.true143
  %cond151 = phi i8* [ %add.ptr, %cond.true143 ], [ %call149, %cond.false148 ]
  store i8* %cond151, i8** %rsptr, align 8
  br label %if.end152

if.end152:                                        ; preds = %cond.end150, %cond.end128
  br label %if.end153

if.end153:                                        ; preds = %if.end152, %if.then112
  br label %if.end154

if.end154:                                        ; preds = %if.end153
  br label %if.end155

if.end155:                                        ; preds = %if.end154, %if.end79
  br label %if.end156

if.end156:                                        ; preds = %if.end155, %if.then35
  %103 = load i64, i64* %rslen, align 8
  %tobool157 = icmp ne i64 %103, 0
  br i1 %tobool157, label %cond.true158, label %cond.false161

cond.true158:                                     ; preds = %if.end156
  %104 = load i8*, i8** %rsptr, align 8
  %105 = load i64, i64* %rslen, align 8
  %sub159 = sub i64 %105, 1
  %arrayidx = getelementptr inbounds i8, i8* %104, i64 %sub159
  %106 = load i8, i8* %arrayidx, align 1
  %conv160 = sext i8 %106 to i32
  br label %cond.end162

cond.false161:                                    ; preds = %if.end156
  br label %cond.end162

cond.end162:                                      ; preds = %cond.false161, %cond.true158
  %cond163 = phi i32 [ %conv160, %cond.true158 ], [ 0, %cond.false161 ]
  %conv164 = trunc i32 %cond163 to i8
  store i8 %conv164, i8* %rslast, align 1
  %107 = load i32, i32* %rspara, align 4
  %tobool165 = icmp ne i32 %107, 0
  br i1 %tobool165, label %if.then166, label %if.end185

if.then166:                                       ; preds = %cond.end162
  br label %do.body167

do.body167:                                       ; preds = %do.cond, %if.then166
  %108 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call168 = call i32 @Perl_PerlIO_eof(%struct._PerlIO** %108)
  %tobool169 = icmp ne i32 %call168, 0
  br i1 %tobool169, label %if.then170, label %if.end171

if.then170:                                       ; preds = %do.body167
  store i8* null, i8** %retval, align 8
  br label %return

if.end171:                                        ; preds = %do.body167
  %109 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call172 = call i32 @PerlIO_getc(%struct._PerlIO** %109)
  store i32 %call172, i32* %i, align 4
  %110 = load i32, i32* %i, align 4
  %cmp173 = icmp ne i32 %110, 10
  br i1 %cmp173, label %if.then175, label %if.end181

if.then175:                                       ; preds = %if.end171
  %111 = load i32, i32* %i, align 4
  %cmp176 = icmp eq i32 %111, -1
  br i1 %cmp176, label %if.then178, label %if.end179

if.then178:                                       ; preds = %if.then175
  store i8* null, i8** %retval, align 8
  br label %return

if.end179:                                        ; preds = %if.then175
  %112 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %113 = load i32, i32* %i, align 4
  %call180 = call i32 @PerlIO_ungetc(%struct._PerlIO** %112, i32 %113)
  br label %do.end184

if.end181:                                        ; preds = %if.end171
  br label %do.cond

do.cond:                                          ; preds = %if.end181
  %114 = load i32, i32* %i, align 4
  %cmp182 = icmp ne i32 %114, -1
  br i1 %cmp182, label %do.body167, label %do.end184

do.end184:                                        ; preds = %do.cond, %if.end179
  br label %if.end185

if.end185:                                        ; preds = %do.end184, %cond.end162
  %115 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call186 = call i32 @PerlIO_fast_gets(%struct._PerlIO** %115)
  %tobool187 = icmp ne i32 %call186, 0
  br i1 %tobool187, label %if.then188, label %if.else417

if.then188:                                       ; preds = %if.end185
  %116 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call189 = call i64 @Perl_PerlIO_get_cnt(%struct._PerlIO** %116)
  store i64 %call189, i64* %cnt, align 8
  %117 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any190 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 0
  %118 = load i8*, i8** %sv_any190, align 8
  %119 = bitcast i8* %118 to %struct.xpv*
  %xpv_len_u191 = getelementptr inbounds %struct.xpv, %struct.xpv* %119, i32 0, i32 3
  %xpvlenu_len192 = bitcast %union.anon.19* %xpv_len_u191 to i64*
  %120 = load i64, i64* %xpvlenu_len192, align 8
  %121 = load i32, i32* %append.addr, align 4
  %conv193 = sext i32 %121 to i64
  %sub194 = sub i64 %120, %conv193
  %conv195 = trunc i64 %sub194 to i32
  %conv196 = sext i32 %conv195 to i64
  %122 = load i64, i64* %cnt, align 8
  %add197 = add nsw i64 %122, 1
  %cmp198 = icmp sle i64 %conv196, %add197
  br i1 %cmp198, label %if.then200, label %if.else259

if.then200:                                       ; preds = %if.then188
  %123 = load i64, i64* %rslen, align 8
  %tobool201 = icmp ne i64 %123, 0
  br i1 %tobool201, label %land.lhs.true202, label %if.else223

land.lhs.true202:                                 ; preds = %if.then200
  %124 = load i64, i64* %cnt, align 8
  %cmp203 = icmp sgt i64 %124, 80
  br i1 %cmp203, label %land.lhs.true205, label %if.else223

land.lhs.true205:                                 ; preds = %land.lhs.true202
  %125 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any206 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 0
  %126 = load i8*, i8** %sv_any206, align 8
  %127 = bitcast i8* %126 to %struct.xpv*
  %xpv_len_u207 = getelementptr inbounds %struct.xpv, %struct.xpv* %127, i32 0, i32 3
  %xpvlenu_len208 = bitcast %union.anon.19* %xpv_len_u207 to i64*
  %128 = load i64, i64* %xpvlenu_len208, align 8
  %conv209 = trunc i64 %128 to i32
  %129 = load i32, i32* %append.addr, align 4
  %cmp210 = icmp sgt i32 %conv209, %129
  br i1 %cmp210, label %if.then212, label %if.else223

if.then212:                                       ; preds = %land.lhs.true205
  %130 = load i64, i64* %cnt, align 8
  %131 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any213 = getelementptr inbounds %struct.sv, %struct.sv* %131, i32 0, i32 0
  %132 = load i8*, i8** %sv_any213, align 8
  %133 = bitcast i8* %132 to %struct.xpv*
  %xpv_len_u214 = getelementptr inbounds %struct.xpv, %struct.xpv* %133, i32 0, i32 3
  %xpvlenu_len215 = bitcast %union.anon.19* %xpv_len_u214 to i64*
  %134 = load i64, i64* %xpvlenu_len215, align 8
  %sub216 = sub i64 %130, %134
  %135 = load i32, i32* %append.addr, align 4
  %conv217 = sext i32 %135 to i64
  %add218 = add i64 %sub216, %conv217
  %add219 = add i64 %add218, 1
  %conv220 = trunc i64 %add219 to i32
  store i32 %conv220, i32* %shortbuffered, align 4
  %136 = load i32, i32* %shortbuffered, align 4
  %conv221 = sext i32 %136 to i64
  %137 = load i64, i64* %cnt, align 8
  %sub222 = sub nsw i64 %137, %conv221
  store i64 %sub222, i64* %cnt, align 8
  br label %if.end258

if.else223:                                       ; preds = %land.lhs.true205, %land.lhs.true202, %if.then200
  store i32 0, i32* %shortbuffered, align 4
  %138 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags224 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 2
  %139 = load i32, i32* %sv_flags224, align 4
  %and225 = and i32 %139, 268435456
  %tobool226 = icmp ne i32 %and225, 0
  br i1 %tobool226, label %cond.true242, label %lor.lhs.false227

lor.lhs.false227:                                 ; preds = %if.else223
  %140 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any228 = getelementptr inbounds %struct.sv, %struct.sv* %140, i32 0, i32 0
  %141 = load i8*, i8** %sv_any228, align 8
  %142 = bitcast i8* %141 to %struct.xpv*
  %xpv_len_u229 = getelementptr inbounds %struct.xpv, %struct.xpv* %142, i32 0, i32 3
  %xpvlenu_len230 = bitcast %union.anon.19* %xpv_len_u229 to i64*
  %143 = load i64, i64* %xpvlenu_len230, align 8
  %144 = load i32, i32* %append.addr, align 4
  %conv231 = sext i32 %144 to i64
  %145 = load i64, i64* %cnt, align 8
  %cmp232 = icmp sle i64 %145, 0
  br i1 %cmp232, label %cond.true234, label %cond.false235

cond.true234:                                     ; preds = %lor.lhs.false227
  br label %cond.end237

cond.false235:                                    ; preds = %lor.lhs.false227
  %146 = load i64, i64* %cnt, align 8
  %add236 = add nsw i64 %146, 1
  br label %cond.end237

cond.end237:                                      ; preds = %cond.false235, %cond.true234
  %cond238 = phi i64 [ 2, %cond.true234 ], [ %add236, %cond.false235 ]
  %add239 = add nsw i64 %conv231, %cond238
  %cmp240 = icmp ult i64 %143, %add239
  br i1 %cmp240, label %cond.true242, label %cond.false253

cond.true242:                                     ; preds = %cond.end237, %if.else223
  %147 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %148 = load i32, i32* %append.addr, align 4
  %conv243 = sext i32 %148 to i64
  %149 = load i64, i64* %cnt, align 8
  %cmp244 = icmp sle i64 %149, 0
  br i1 %cmp244, label %cond.true246, label %cond.false247

cond.true246:                                     ; preds = %cond.true242
  br label %cond.end249

cond.false247:                                    ; preds = %cond.true242
  %150 = load i64, i64* %cnt, align 8
  %add248 = add nsw i64 %150, 1
  br label %cond.end249

cond.end249:                                      ; preds = %cond.false247, %cond.true246
  %cond250 = phi i64 [ 2, %cond.true246 ], [ %add248, %cond.false247 ]
  %add251 = add nsw i64 %conv243, %cond250
  %call252 = call i8* @Perl_sv_grow(%struct.sv* %147, i64 %add251)
  br label %cond.end256

cond.false253:                                    ; preds = %cond.end237
  %151 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u254 = getelementptr inbounds %struct.sv, %struct.sv* %151, i32 0, i32 3
  %svu_pv255 = bitcast %union.anon* %sv_u254 to i8**
  %152 = load i8*, i8** %svu_pv255, align 8
  br label %cond.end256

cond.end256:                                      ; preds = %cond.false253, %cond.end249
  %cond257 = phi i8* [ %call252, %cond.end249 ], [ %152, %cond.false253 ]
  br label %if.end258

if.end258:                                        ; preds = %cond.end256, %if.then212
  br label %if.end260

if.else259:                                       ; preds = %if.then188
  store i32 0, i32* %shortbuffered, align 4
  br label %if.end260

if.end260:                                        ; preds = %if.else259, %if.end258
  %153 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u261 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 3
  %svu_pv262 = bitcast %union.anon* %sv_u261 to i8**
  %154 = load i8*, i8** %svu_pv262, align 8
  %add.ptr263 = getelementptr inbounds i8, i8* %154, i64 0
  %155 = load i32, i32* %append.addr, align 4
  %idx.ext = sext i32 %155 to i64
  %add.ptr264 = getelementptr inbounds i8, i8* %add.ptr263, i64 %idx.ext
  store i8* %add.ptr264, i8** %bp, align 8
  %156 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call265 = call i8* @Perl_PerlIO_get_ptr(%struct._PerlIO** %156)
  store i8* %call265, i8** %ptr, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end383, %cond.end324, %if.end260
  br label %screamer

screamer:                                         ; preds = %if.then399, %for.cond
  %157 = load i64, i64* %cnt, align 8
  %cmp266 = icmp sgt i64 %157, 0
  br i1 %cmp266, label %if.then268, label %if.end284

if.then268:                                       ; preds = %screamer
  %158 = load i64, i64* %rslen, align 8
  %tobool269 = icmp ne i64 %158, 0
  br i1 %tobool269, label %if.then270, label %if.else280

if.then270:                                       ; preds = %if.then268
  br label %while.cond

while.cond:                                       ; preds = %if.end279, %if.then270
  %159 = load i64, i64* %cnt, align 8
  %cmp271 = icmp sgt i64 %159, 0
  br i1 %cmp271, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %160 = load i64, i64* %cnt, align 8
  %dec = add nsw i64 %160, -1
  store i64 %dec, i64* %cnt, align 8
  %161 = load i8*, i8** %ptr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %161, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 8
  %162 = load i8, i8* %161, align 1
  %163 = load i8*, i8** %bp, align 8
  %incdec.ptr273 = getelementptr inbounds i8, i8* %163, i32 1
  store i8* %incdec.ptr273, i8** %bp, align 8
  store i8 %162, i8* %163, align 1
  %conv274 = sext i8 %162 to i32
  %164 = load i8, i8* %rslast, align 1
  %conv275 = sext i8 %164 to i32
  %cmp276 = icmp eq i32 %conv274, %conv275
  br i1 %cmp276, label %if.then278, label %if.end279

if.then278:                                       ; preds = %while.body
  br label %thats_all_folks

if.end279:                                        ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end283

if.else280:                                       ; preds = %if.then268
  %165 = load i8*, i8** %bp, align 8
  %166 = load i8*, i8** %ptr, align 8
  %167 = load i64, i64* %cnt, align 8
  %mul = mul i64 %167, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %165, i8* align 1 %166, i64 %mul, i1 false)
  %168 = load i64, i64* %cnt, align 8
  %169 = load i8*, i8** %bp, align 8
  %add.ptr281 = getelementptr inbounds i8, i8* %169, i64 %168
  store i8* %add.ptr281, i8** %bp, align 8
  %170 = load i64, i64* %cnt, align 8
  %171 = load i8*, i8** %ptr, align 8
  %add.ptr282 = getelementptr inbounds i8, i8* %171, i64 %170
  store i8* %add.ptr282, i8** %ptr, align 8
  store i64 0, i64* %cnt, align 8
  br label %cannot_be_shortbuffered

if.end283:                                        ; preds = %while.end
  br label %if.end284

if.end284:                                        ; preds = %if.end283, %screamer
  %172 = load i32, i32* %shortbuffered, align 4
  %tobool285 = icmp ne i32 %172, 0
  br i1 %tobool285, label %if.then286, label %if.end330

if.then286:                                       ; preds = %if.end284
  %173 = load i32, i32* %shortbuffered, align 4
  %conv287 = sext i32 %173 to i64
  store i64 %conv287, i64* %cnt, align 8
  store i32 0, i32* %shortbuffered, align 4
  %174 = load i8*, i8** %bp, align 8
  %175 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u288 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 3
  %svu_pv289 = bitcast %union.anon* %sv_u288 to i8**
  %176 = load i8*, i8** %svu_pv289, align 8
  %add.ptr290 = getelementptr inbounds i8, i8* %176, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %174 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %add.ptr290 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %bpx, align 8
  br label %do.body291

do.body291:                                       ; preds = %if.then286
  %177 = load i64, i64* %bpx, align 8
  %178 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any292 = getelementptr inbounds %struct.sv, %struct.sv* %178, i32 0, i32 0
  %179 = load i8*, i8** %sv_any292, align 8
  %180 = bitcast i8* %179 to %struct.xpv*
  %xpv_cur293 = getelementptr inbounds %struct.xpv, %struct.xpv* %180, i32 0, i32 2
  store i64 %177, i64* %xpv_cur293, align 8
  br label %do.end295

do.end295:                                        ; preds = %do.body291
  %181 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags296 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 2
  %182 = load i32, i32* %sv_flags296, align 4
  %and297 = and i32 %182, 268435456
  %tobool298 = icmp ne i32 %and297, 0
  br i1 %tobool298, label %cond.true312, label %lor.lhs.false299

lor.lhs.false299:                                 ; preds = %do.end295
  %183 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any300 = getelementptr inbounds %struct.sv, %struct.sv* %183, i32 0, i32 0
  %184 = load i8*, i8** %sv_any300, align 8
  %185 = bitcast i8* %184 to %struct.xpv*
  %xpv_len_u301 = getelementptr inbounds %struct.xpv, %struct.xpv* %185, i32 0, i32 3
  %xpvlenu_len302 = bitcast %union.anon.19* %xpv_len_u301 to i64*
  %186 = load i64, i64* %xpvlenu_len302, align 8
  %187 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any303 = getelementptr inbounds %struct.sv, %struct.sv* %187, i32 0, i32 0
  %188 = load i8*, i8** %sv_any303, align 8
  %189 = bitcast i8* %188 to %struct.xpv*
  %xpv_len_u304 = getelementptr inbounds %struct.xpv, %struct.xpv* %189, i32 0, i32 3
  %xpvlenu_len305 = bitcast %union.anon.19* %xpv_len_u304 to i64*
  %190 = load i64, i64* %xpvlenu_len305, align 8
  %191 = load i32, i32* %append.addr, align 4
  %conv306 = sext i32 %191 to i64
  %add307 = add i64 %190, %conv306
  %192 = load i64, i64* %cnt, align 8
  %add308 = add i64 %add307, %192
  %add309 = add i64 %add308, 2
  %cmp310 = icmp ult i64 %186, %add309
  br i1 %cmp310, label %cond.true312, label %cond.false321

cond.true312:                                     ; preds = %lor.lhs.false299, %do.end295
  %193 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %194 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any313 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 0
  %195 = load i8*, i8** %sv_any313, align 8
  %196 = bitcast i8* %195 to %struct.xpv*
  %xpv_len_u314 = getelementptr inbounds %struct.xpv, %struct.xpv* %196, i32 0, i32 3
  %xpvlenu_len315 = bitcast %union.anon.19* %xpv_len_u314 to i64*
  %197 = load i64, i64* %xpvlenu_len315, align 8
  %198 = load i32, i32* %append.addr, align 4
  %conv316 = sext i32 %198 to i64
  %add317 = add i64 %197, %conv316
  %199 = load i64, i64* %cnt, align 8
  %add318 = add i64 %add317, %199
  %add319 = add i64 %add318, 2
  %call320 = call i8* @Perl_sv_grow(%struct.sv* %193, i64 %add319)
  br label %cond.end324

cond.false321:                                    ; preds = %lor.lhs.false299
  %200 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u322 = getelementptr inbounds %struct.sv, %struct.sv* %200, i32 0, i32 3
  %svu_pv323 = bitcast %union.anon* %sv_u322 to i8**
  %201 = load i8*, i8** %svu_pv323, align 8
  br label %cond.end324

cond.end324:                                      ; preds = %cond.false321, %cond.true312
  %cond325 = phi i8* [ %call320, %cond.true312 ], [ %201, %cond.false321 ]
  %202 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u326 = getelementptr inbounds %struct.sv, %struct.sv* %202, i32 0, i32 3
  %svu_pv327 = bitcast %union.anon* %sv_u326 to i8**
  %203 = load i8*, i8** %svu_pv327, align 8
  %add.ptr328 = getelementptr inbounds i8, i8* %203, i64 0
  %204 = load i64, i64* %bpx, align 8
  %add.ptr329 = getelementptr inbounds i8, i8* %add.ptr328, i64 %204
  store i8* %add.ptr329, i8** %bp, align 8
  br label %for.cond

if.end330:                                        ; preds = %if.end284
  br label %cannot_be_shortbuffered

cannot_be_shortbuffered:                          ; preds = %if.end330, %if.else280
  %205 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %206 = load i8*, i8** %ptr, align 8
  %207 = load i64, i64* %cnt, align 8
  call void @Perl_PerlIO_set_ptrcnt(%struct._PerlIO** %205, i8* %206, i64 %207)
  %208 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call331 = call i32 @PerlIO_getc(%struct._PerlIO** %208)
  store i32 %call331, i32* %i, align 4
  %209 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call332 = call i64 @Perl_PerlIO_get_cnt(%struct._PerlIO** %209)
  store i64 %call332, i64* %cnt, align 8
  %210 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call333 = call i8* @Perl_PerlIO_get_ptr(%struct._PerlIO** %210)
  store i8* %call333, i8** %ptr, align 8
  %211 = load i32, i32* %i, align 4
  %cmp334 = icmp eq i32 %211, -1
  br i1 %cmp334, label %if.then336, label %if.end337

if.then336:                                       ; preds = %cannot_be_shortbuffered
  br label %thats_really_all_folks

if.end337:                                        ; preds = %cannot_be_shortbuffered
  %212 = load i8*, i8** %bp, align 8
  %213 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u338 = getelementptr inbounds %struct.sv, %struct.sv* %213, i32 0, i32 3
  %svu_pv339 = bitcast %union.anon* %sv_u338 to i8**
  %214 = load i8*, i8** %svu_pv339, align 8
  %add.ptr340 = getelementptr inbounds i8, i8* %214, i64 0
  %sub.ptr.lhs.cast341 = ptrtoint i8* %212 to i64
  %sub.ptr.rhs.cast342 = ptrtoint i8* %add.ptr340 to i64
  %sub.ptr.sub343 = sub i64 %sub.ptr.lhs.cast341, %sub.ptr.rhs.cast342
  store i64 %sub.ptr.sub343, i64* %bpx, align 8
  br label %do.body344

do.body344:                                       ; preds = %if.end337
  %215 = load i64, i64* %bpx, align 8
  %216 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any345 = getelementptr inbounds %struct.sv, %struct.sv* %216, i32 0, i32 0
  %217 = load i8*, i8** %sv_any345, align 8
  %218 = bitcast i8* %217 to %struct.xpv*
  %xpv_cur346 = getelementptr inbounds %struct.xpv, %struct.xpv* %218, i32 0, i32 2
  store i64 %215, i64* %xpv_cur346, align 8
  br label %do.end348

do.end348:                                        ; preds = %do.body344
  %219 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags349 = getelementptr inbounds %struct.sv, %struct.sv* %219, i32 0, i32 2
  %220 = load i32, i32* %sv_flags349, align 4
  %and350 = and i32 %220, 268435456
  %tobool351 = icmp ne i32 %and350, 0
  br i1 %tobool351, label %cond.true360, label %lor.lhs.false352

lor.lhs.false352:                                 ; preds = %do.end348
  %221 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any353 = getelementptr inbounds %struct.sv, %struct.sv* %221, i32 0, i32 0
  %222 = load i8*, i8** %sv_any353, align 8
  %223 = bitcast i8* %222 to %struct.xpv*
  %xpv_len_u354 = getelementptr inbounds %struct.xpv, %struct.xpv* %223, i32 0, i32 3
  %xpvlenu_len355 = bitcast %union.anon.19* %xpv_len_u354 to i64*
  %224 = load i64, i64* %xpvlenu_len355, align 8
  %225 = load i64, i64* %bpx, align 8
  %226 = load i64, i64* %cnt, align 8
  %add356 = add i64 %225, %226
  %add357 = add i64 %add356, 2
  %cmp358 = icmp ult i64 %224, %add357
  br i1 %cmp358, label %cond.true360, label %cond.false364

cond.true360:                                     ; preds = %lor.lhs.false352, %do.end348
  %227 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %228 = load i64, i64* %bpx, align 8
  %229 = load i64, i64* %cnt, align 8
  %add361 = add i64 %228, %229
  %add362 = add i64 %add361, 2
  %call363 = call i8* @Perl_sv_grow(%struct.sv* %227, i64 %add362)
  br label %cond.end367

cond.false364:                                    ; preds = %lor.lhs.false352
  %230 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u365 = getelementptr inbounds %struct.sv, %struct.sv* %230, i32 0, i32 3
  %svu_pv366 = bitcast %union.anon* %sv_u365 to i8**
  %231 = load i8*, i8** %svu_pv366, align 8
  br label %cond.end367

cond.end367:                                      ; preds = %cond.false364, %cond.true360
  %cond368 = phi i8* [ %call363, %cond.true360 ], [ %231, %cond.false364 ]
  %232 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u369 = getelementptr inbounds %struct.sv, %struct.sv* %232, i32 0, i32 3
  %svu_pv370 = bitcast %union.anon* %sv_u369 to i8**
  %233 = load i8*, i8** %svu_pv370, align 8
  %add.ptr371 = getelementptr inbounds i8, i8* %233, i64 0
  %234 = load i64, i64* %bpx, align 8
  %add.ptr372 = getelementptr inbounds i8, i8* %add.ptr371, i64 %234
  store i8* %add.ptr372, i8** %bp, align 8
  %235 = load i32, i32* %i, align 4
  %conv373 = trunc i32 %235 to i8
  %236 = load i8*, i8** %bp, align 8
  %incdec.ptr374 = getelementptr inbounds i8, i8* %236, i32 1
  store i8* %incdec.ptr374, i8** %bp, align 8
  store i8 %conv373, i8* %236, align 1
  %237 = load i64, i64* %rslen, align 8
  %tobool375 = icmp ne i64 %237, 0
  br i1 %tobool375, label %land.lhs.true376, label %if.end383

land.lhs.true376:                                 ; preds = %cond.end367
  %238 = load i32, i32* %i, align 4
  %conv377 = trunc i32 %238 to i8
  %conv378 = sext i8 %conv377 to i32
  %239 = load i8, i8* %rslast, align 1
  %conv379 = sext i8 %239 to i32
  %cmp380 = icmp eq i32 %conv378, %conv379
  br i1 %cmp380, label %if.then382, label %if.end383

if.then382:                                       ; preds = %land.lhs.true376
  br label %thats_all_folks

if.end383:                                        ; preds = %land.lhs.true376, %cond.end367
  br label %for.cond

thats_all_folks:                                  ; preds = %if.then382, %if.then278
  %240 = load i64, i64* %rslen, align 8
  %cmp384 = icmp ugt i64 %240, 1
  br i1 %cmp384, label %land.lhs.true386, label %lor.lhs.false395

land.lhs.true386:                                 ; preds = %thats_all_folks
  %241 = load i8*, i8** %bp, align 8
  %242 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u387 = getelementptr inbounds %struct.sv, %struct.sv* %242, i32 0, i32 3
  %svu_pv388 = bitcast %union.anon* %sv_u387 to i8**
  %243 = load i8*, i8** %svu_pv388, align 8
  %add.ptr389 = getelementptr inbounds i8, i8* %243, i64 0
  %sub.ptr.lhs.cast390 = ptrtoint i8* %241 to i64
  %sub.ptr.rhs.cast391 = ptrtoint i8* %add.ptr389 to i64
  %sub.ptr.sub392 = sub i64 %sub.ptr.lhs.cast390, %sub.ptr.rhs.cast391
  %244 = load i64, i64* %rslen, align 8
  %cmp393 = icmp ult i64 %sub.ptr.sub392, %244
  br i1 %cmp393, label %if.then399, label %lor.lhs.false395

lor.lhs.false395:                                 ; preds = %land.lhs.true386, %thats_all_folks
  %245 = load i8*, i8** %bp, align 8
  %246 = load i64, i64* %rslen, align 8
  %idx.neg = sub i64 0, %246
  %add.ptr396 = getelementptr inbounds i8, i8* %245, i64 %idx.neg
  %247 = load i8*, i8** %rsptr, align 8
  %248 = load i64, i64* %rslen, align 8
  %call397 = call i32 @memcmp(i8* %add.ptr396, i8* %247, i64 %248) #8
  %tobool398 = icmp ne i32 %call397, 0
  br i1 %tobool398, label %if.then399, label %if.end400

if.then399:                                       ; preds = %lor.lhs.false395, %land.lhs.true386
  br label %screamer

if.end400:                                        ; preds = %lor.lhs.false395
  br label %thats_really_all_folks

thats_really_all_folks:                           ; preds = %if.end400, %if.then336
  %249 = load i32, i32* %shortbuffered, align 4
  %tobool401 = icmp ne i32 %249, 0
  br i1 %tobool401, label %if.then402, label %if.end405

if.then402:                                       ; preds = %thats_really_all_folks
  %250 = load i32, i32* %shortbuffered, align 4
  %conv403 = sext i32 %250 to i64
  %251 = load i64, i64* %cnt, align 8
  %add404 = add nsw i64 %251, %conv403
  store i64 %add404, i64* %cnt, align 8
  br label %if.end405

if.end405:                                        ; preds = %if.then402, %thats_really_all_folks
  %252 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %253 = load i8*, i8** %ptr, align 8
  %254 = load i64, i64* %cnt, align 8
  call void @Perl_PerlIO_set_ptrcnt(%struct._PerlIO** %252, i8* %253, i64 %254)
  %255 = load i8*, i8** %bp, align 8
  store i8 0, i8* %255, align 1
  br label %do.body406

do.body406:                                       ; preds = %if.end405
  %256 = load i8*, i8** %bp, align 8
  %257 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u407 = getelementptr inbounds %struct.sv, %struct.sv* %257, i32 0, i32 3
  %svu_pv408 = bitcast %union.anon* %sv_u407 to i8**
  %258 = load i8*, i8** %svu_pv408, align 8
  %add.ptr409 = getelementptr inbounds i8, i8* %258, i64 0
  %sub.ptr.lhs.cast410 = ptrtoint i8* %256 to i64
  %sub.ptr.rhs.cast411 = ptrtoint i8* %add.ptr409 to i64
  %sub.ptr.sub412 = sub i64 %sub.ptr.lhs.cast410, %sub.ptr.rhs.cast411
  %259 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any413 = getelementptr inbounds %struct.sv, %struct.sv* %259, i32 0, i32 0
  %260 = load i8*, i8** %sv_any413, align 8
  %261 = bitcast i8* %260 to %struct.xpv*
  %xpv_cur414 = getelementptr inbounds %struct.xpv, %struct.xpv* %261, i32 0, i32 2
  store i64 %sub.ptr.sub412, i64* %xpv_cur414, align 8
  br label %do.end416

do.end416:                                        ; preds = %do.body406
  br label %if.end492

if.else417:                                       ; preds = %if.end185
  br label %screamer2

screamer2:                                        ; preds = %if.then489, %if.else417
  %262 = load i64, i64* %rslen, align 8
  %tobool418 = icmp ne i64 %262, 0
  br i1 %tobool418, label %if.then419, label %if.else441

if.then419:                                       ; preds = %screamer2
  %arraydecay = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i64 0, i64 0
  %add.ptr420 = getelementptr inbounds i8, i8* %arraydecay, i64 8192
  store i8* %add.ptr420, i8** %bpe, align 8
  %arraydecay421 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i64 0, i64 0
  store i8* %arraydecay421, i8** %bp, align 8
  br label %while.cond422

while.cond422:                                    ; preds = %while.body435, %if.then419
  %263 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call423 = call i32 @PerlIO_getc(%struct._PerlIO** %263)
  store i32 %call423, i32* %i, align 4
  %cmp424 = icmp ne i32 %call423, -1
  br i1 %cmp424, label %land.lhs.true426, label %land.end

land.lhs.true426:                                 ; preds = %while.cond422
  %264 = load i32, i32* %i, align 4
  %conv427 = trunc i32 %264 to i8
  %265 = load i8*, i8** %bp, align 8
  %incdec.ptr428 = getelementptr inbounds i8, i8* %265, i32 1
  store i8* %incdec.ptr428, i8** %bp, align 8
  store i8 %conv427, i8* %265, align 1
  %conv429 = sext i8 %conv427 to i32
  %266 = load i8, i8* %rslast, align 1
  %conv430 = sext i8 %266 to i32
  %cmp431 = icmp ne i32 %conv429, %conv430
  br i1 %cmp431, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true426
  %267 = load i8*, i8** %bp, align 8
  %268 = load i8*, i8** %bpe, align 8
  %cmp433 = icmp ult i8* %267, %268
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true426, %while.cond422
  %269 = phi i1 [ false, %land.lhs.true426 ], [ false, %while.cond422 ], [ %cmp433, %land.rhs ]
  br i1 %269, label %while.body435, label %while.end436

while.body435:                                    ; preds = %land.end
  br label %while.cond422

while.end436:                                     ; preds = %land.end
  %270 = load i8*, i8** %bp, align 8
  %arraydecay437 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i64 0, i64 0
  %sub.ptr.lhs.cast438 = ptrtoint i8* %270 to i64
  %sub.ptr.rhs.cast439 = ptrtoint i8* %arraydecay437 to i64
  %sub.ptr.sub440 = sub i64 %sub.ptr.lhs.cast438, %sub.ptr.rhs.cast439
  store i64 %sub.ptr.sub440, i64* %cnt, align 8
  br label %if.end452

if.else441:                                       ; preds = %screamer2
  %271 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %arraydecay442 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i64 0, i64 0
  %call443 = call i64 @Perl_PerlIO_read(%struct._PerlIO** %271, i8* %arraydecay442, i64 8192)
  store i64 %call443, i64* %cnt, align 8
  %272 = load i64, i64* %cnt, align 8
  %cmp444 = icmp sgt i64 %272, 0
  br i1 %cmp444, label %if.then446, label %if.else450

if.then446:                                       ; preds = %if.else441
  %273 = load i64, i64* %cnt, align 8
  %sub447 = sub nsw i64 %273, 1
  %arrayidx448 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i64 0, i64 %sub447
  %274 = load i8, i8* %arrayidx448, align 1
  %conv449 = zext i8 %274 to i32
  store i32 %conv449, i32* %i, align 4
  br label %if.end451

if.else450:                                       ; preds = %if.else441
  store i32 -1, i32* %i, align 4
  br label %if.end451

if.end451:                                        ; preds = %if.else450, %if.then446
  br label %if.end452

if.end452:                                        ; preds = %if.end451, %while.end436
  %275 = load i64, i64* %cnt, align 8
  %cmp453 = icmp slt i64 %275, 0
  br i1 %cmp453, label %if.then455, label %if.end456

if.then455:                                       ; preds = %if.end452
  store i64 0, i64* %cnt, align 8
  br label %if.end456

if.end456:                                        ; preds = %if.then455, %if.end452
  %276 = load i32, i32* %append.addr, align 4
  %tobool457 = icmp ne i32 %276, 0
  br i1 %tobool457, label %if.then458, label %if.else460

if.then458:                                       ; preds = %if.end456
  %277 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %arraydecay459 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i64 0, i64 0
  %278 = load i64, i64* %cnt, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %277, i8* %arraydecay459, i64 %278, i32 0)
  br label %if.end462

if.else460:                                       ; preds = %if.end456
  %279 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %arraydecay461 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i64 0, i64 0
  %280 = load i64, i64* %cnt, align 8
  call void @Perl_sv_setpvn(%struct.sv* %279, i8* %arraydecay461, i64 %280)
  br label %if.end462

if.end462:                                        ; preds = %if.else460, %if.then458
  %281 = load i32, i32* %i, align 4
  %cmp463 = icmp ne i32 %281, -1
  br i1 %cmp463, label %land.lhs.true465, label %if.end491

land.lhs.true465:                                 ; preds = %if.end462
  %282 = load i64, i64* %rslen, align 8
  %tobool466 = icmp ne i64 %282, 0
  br i1 %tobool466, label %lor.lhs.false467, label %if.then483

lor.lhs.false467:                                 ; preds = %land.lhs.true465
  %283 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any468 = getelementptr inbounds %struct.sv, %struct.sv* %283, i32 0, i32 0
  %284 = load i8*, i8** %sv_any468, align 8
  %285 = bitcast i8* %284 to %struct.xpv*
  %xpv_cur469 = getelementptr inbounds %struct.xpv, %struct.xpv* %285, i32 0, i32 2
  %286 = load i64, i64* %xpv_cur469, align 8
  %287 = load i64, i64* %rslen, align 8
  %cmp470 = icmp ult i64 %286, %287
  br i1 %cmp470, label %if.then483, label %lor.lhs.false472

lor.lhs.false472:                                 ; preds = %lor.lhs.false467
  %288 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u473 = getelementptr inbounds %struct.sv, %struct.sv* %288, i32 0, i32 3
  %svu_pv474 = bitcast %union.anon* %sv_u473 to i8**
  %289 = load i8*, i8** %svu_pv474, align 8
  %add.ptr475 = getelementptr inbounds i8, i8* %289, i64 0
  %290 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any476 = getelementptr inbounds %struct.sv, %struct.sv* %290, i32 0, i32 0
  %291 = load i8*, i8** %sv_any476, align 8
  %292 = bitcast i8* %291 to %struct.xpv*
  %xpv_cur477 = getelementptr inbounds %struct.xpv, %struct.xpv* %292, i32 0, i32 2
  %293 = load i64, i64* %xpv_cur477, align 8
  %add.ptr478 = getelementptr inbounds i8, i8* %add.ptr475, i64 %293
  %294 = load i64, i64* %rslen, align 8
  %idx.neg479 = sub i64 0, %294
  %add.ptr480 = getelementptr inbounds i8, i8* %add.ptr478, i64 %idx.neg479
  %295 = load i8*, i8** %rsptr, align 8
  %296 = load i64, i64* %rslen, align 8
  %call481 = call i32 @memcmp(i8* %add.ptr480, i8* %295, i64 %296) #8
  %tobool482 = icmp ne i32 %call481, 0
  br i1 %tobool482, label %if.then483, label %if.end491

if.then483:                                       ; preds = %lor.lhs.false472, %lor.lhs.false467, %land.lhs.true465
  store i32 -1, i32* %append.addr, align 4
  %297 = load i64, i64* %cnt, align 8
  %cmp484 = icmp slt i64 %297, 8192
  br i1 %cmp484, label %land.lhs.true486, label %if.then489

land.lhs.true486:                                 ; preds = %if.then483
  %298 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call487 = call i32 @Perl_PerlIO_eof(%struct._PerlIO** %298)
  %tobool488 = icmp ne i32 %call487, 0
  br i1 %tobool488, label %if.end490, label %if.then489

if.then489:                                       ; preds = %land.lhs.true486, %if.then483
  br label %screamer2

if.end490:                                        ; preds = %land.lhs.true486
  br label %if.end491

if.end491:                                        ; preds = %if.end490, %lor.lhs.false472, %if.end462
  br label %if.end492

if.end492:                                        ; preds = %if.end491, %do.end416
  %299 = load i32, i32* %rspara, align 4
  %tobool493 = icmp ne i32 %299, 0
  br i1 %tobool493, label %if.then494, label %if.end506

if.then494:                                       ; preds = %if.end492
  br label %while.cond495

while.cond495:                                    ; preds = %if.end504, %if.then494
  %300 = load i32, i32* %i, align 4
  %cmp496 = icmp ne i32 %300, -1
  br i1 %cmp496, label %while.body498, label %while.end505

while.body498:                                    ; preds = %while.cond495
  %301 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call499 = call i32 @PerlIO_getc(%struct._PerlIO** %301)
  store i32 %call499, i32* %i, align 4
  %302 = load i32, i32* %i, align 4
  %cmp500 = icmp ne i32 %302, 10
  br i1 %cmp500, label %if.then502, label %if.end504

if.then502:                                       ; preds = %while.body498
  %303 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %304 = load i32, i32* %i, align 4
  %call503 = call i32 @PerlIO_ungetc(%struct._PerlIO** %303, i32 %304)
  br label %while.end505

if.end504:                                        ; preds = %while.body498
  br label %while.cond495

while.end505:                                     ; preds = %if.then502, %while.cond495
  br label %if.end506

if.end506:                                        ; preds = %while.end505, %if.end492
  %305 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any507 = getelementptr inbounds %struct.sv, %struct.sv* %305, i32 0, i32 0
  %306 = load i8*, i8** %sv_any507, align 8
  %307 = bitcast i8* %306 to %struct.xpv*
  %xpv_cur508 = getelementptr inbounds %struct.xpv, %struct.xpv* %307, i32 0, i32 2
  %308 = load i64, i64* %xpv_cur508, align 8
  %309 = load i32, i32* %append.addr, align 4
  %conv509 = sext i32 %309 to i64
  %sub510 = sub i64 %308, %conv509
  %tobool511 = icmp ne i64 %sub510, 0
  br i1 %tobool511, label %cond.true512, label %cond.false515

cond.true512:                                     ; preds = %if.end506
  %310 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u513 = getelementptr inbounds %struct.sv, %struct.sv* %310, i32 0, i32 3
  %svu_pv514 = bitcast %union.anon* %sv_u513 to i8**
  %311 = load i8*, i8** %svu_pv514, align 8
  br label %cond.end516

cond.false515:                                    ; preds = %if.end506
  br label %cond.end516

cond.end516:                                      ; preds = %cond.false515, %cond.true512
  %cond517 = phi i8* [ %311, %cond.true512 ], [ null, %cond.false515 ]
  store i8* %cond517, i8** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end516, %if.then178, %if.then170, %if.then102, %if.then17
  %312 = load i8*, i8** %retval, align 8
  ret i8* %312
}

declare dso_local i32 @PerlIO_isutf8(%struct._PerlIO**) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_sv_gets_append_to_utf8(%struct.sv* %sv, %struct._PerlIO** %fp, i32 %append) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %fp.addr = alloca %struct._PerlIO**, align 8
  %append.addr = alloca i32, align 4
  %tsv = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct._PerlIO** %fp, %struct._PerlIO*** %fp.addr, align 8
  store i32 %append, i32* %append.addr, align 4
  %call = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call, %struct.sv** %tsv, align 8
  call void @Perl_push_scope()
  %0 = load %struct.sv*, %struct.sv** %tsv, align 8
  %1 = bitcast %struct.sv* %0 to i8*
  %2 = bitcast i8* %1 to %struct.sv*
  %3 = bitcast %struct.sv* %2 to i8*
  call void @Perl_save_pushptr(i8* %3, i32 11)
  %4 = load %struct.sv*, %struct.sv** %tsv, align 8
  %5 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call1 = call i8* @Perl_sv_gets(%struct.sv* %4, %struct._PerlIO** %5, i32 0)
  %6 = load %struct.sv*, %struct.sv** %tsv, align 8
  %call2 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %6, i32 0, i64 0)
  br label %do.body

do.body:                                          ; preds = %entry
  %7 = load i32, i32* %append.addr, align 4
  %conv = sext i32 %7 to i64
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 2
  store i64 %conv, i64* %xpv_cur, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %12 = load %struct.sv*, %struct.sv** %tsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %11, %struct.sv* %12, i32 2)
  call void @Perl_pop_scope()
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any3, align 8
  %15 = bitcast i8* %14 to %struct.xpv*
  %xpv_cur4 = getelementptr inbounds %struct.xpv, %struct.xpv* %15, i32 0, i32 2
  %16 = load i64, i64* %xpv_cur4, align 8
  %17 = load i32, i32* %append.addr, align 4
  %conv5 = sext i32 %17 to i64
  %sub = sub i64 %16, %conv5
  %tobool = icmp ne i64 %sub, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %19 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %do.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %19, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: nounwind
declare dso_local i32 @fstat64(i32, %struct.stat*) #5

declare dso_local i32 @Perl_PerlIO_fileno(%struct._PerlIO**) #1

declare dso_local i64 @Perl_PerlIO_tell(%struct._PerlIO**) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_sv_gets_read_record(%struct.sv* %sv, %struct._PerlIO** %fp, i32 %append) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %fp.addr = alloca %struct._PerlIO**, align 8
  %append.addr = alloca i32, align 4
  %bytesread = alloca i64, align 8
  %recsize = alloca i64, align 8
  %buffer = alloca i8*, align 8
  %bend = alloca i8*, align 8
  %bufp = alloca i8*, align 8
  %charcount = alloca i64, align 8
  %charstart = alloca i8, align 1
  %skip = alloca i64, align 8
  %readsize = alloca i64, align 8
  %bufp_offset = alloca i64, align 8
  %morebytesread = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct._PerlIO** %fp, %struct._PerlIO*** %fp.addr, align 8
  store i32 %append, i32* %append.addr, align 4
  %0 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %1 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, -2145386240
  %cmp = icmp eq i32 %and, -2147483392
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u1 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 3
  %svu_rv2 = bitcast %union.anon* %sv_u1 to %struct.sv**
  %4 = load %struct.sv*, %struct.sv** %svu_rv2, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %6, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %7 = load i64, i64* %xivu_uv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u3 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 3
  %svu_rv4 = bitcast %union.anon* %sv_u3 to %struct.sv**
  %9 = load %struct.sv*, %struct.sv** %svu_rv4, align 8
  %call = call i64 @Perl_sv_2uv_flags(%struct.sv* %9, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %7, %cond.true ], [ %call, %cond.false ]
  store i64 %cond, i64* %recsize, align 8
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %11, 268435456
  %tobool = icmp ne i32 %and6, 0
  br i1 %tobool, label %cond.true11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any7 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any7, align 8
  %14 = bitcast i8* %13 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %14, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %15 = load i64, i64* %xpvlenu_len, align 8
  %16 = load i64, i64* %recsize, align 8
  %17 = load i32, i32* %append.addr, align 4
  %conv = sext i32 %17 to i64
  %add = add i64 %16, %conv
  %add8 = add i64 %add, 1
  %cmp9 = icmp ult i64 %15, %add8
  br i1 %cmp9, label %cond.true11, label %cond.false16

cond.true11:                                      ; preds = %lor.lhs.false, %cond.end
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %19 = load i64, i64* %recsize, align 8
  %20 = load i32, i32* %append.addr, align 4
  %conv12 = sext i32 %20 to i64
  %add13 = add i64 %19, %conv12
  %add14 = add i64 %add13, 1
  %call15 = call i8* @Perl_sv_grow(%struct.sv* %18, i64 %add14)
  br label %cond.end18

cond.false16:                                     ; preds = %lor.lhs.false
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u17 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u17 to i8**
  %22 = load i8*, i8** %svu_pv, align 8
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false16, %cond.true11
  %cond19 = phi i8* [ %call15, %cond.true11 ], [ %22, %cond.false16 ]
  %23 = load i32, i32* %append.addr, align 4
  %idx.ext = sext i32 %23 to i64
  %add.ptr = getelementptr inbounds i8, i8* %cond19, i64 %idx.ext
  store i8* %add.ptr, i8** %buffer, align 8
  %24 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %25 = load i8*, i8** %buffer, align 8
  %26 = load i64, i64* %recsize, align 8
  %call20 = call i64 @Perl_PerlIO_read(%struct._PerlIO** %24, i8* %25, i64 %26)
  store i64 %call20, i64* %bytesread, align 8
  %27 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %call21 = call i32 @PerlIO_isutf8(%struct._PerlIO** %27)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %land.lhs.true, label %if.end92

land.lhs.true:                                    ; preds = %cond.end18
  %28 = load i64, i64* %bytesread, align 8
  %cmp23 = icmp sgt i64 %28, 0
  br i1 %cmp23, label %if.then, label %if.end92

if.then:                                          ; preds = %land.lhs.true
  %29 = load i8*, i8** %buffer, align 8
  %30 = load i64, i64* %bytesread, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %29, i64 %30
  store i8* %add.ptr25, i8** %bend, align 8
  %31 = load i8*, i8** %buffer, align 8
  store i8* %31, i8** %bufp, align 8
  store i64 0, i64* %charcount, align 8
  store i8 1, i8* %charstart, align 1
  store i64 0, i64* %skip, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end90, %if.then
  %32 = load i64, i64* %charcount, align 8
  %33 = load i64, i64* %recsize, align 8
  %cmp26 = icmp ult i64 %32, %33
  br i1 %cmp26, label %while.body, label %while.end91

while.body:                                       ; preds = %while.cond
  br label %while.cond28

while.cond28:                                     ; preds = %if.end40, %while.body
  %34 = load i8*, i8** %bufp, align 8
  %35 = load i8*, i8** %bend, align 8
  %cmp29 = icmp ult i8* %34, %35
  br i1 %cmp29, label %while.body31, label %while.end

while.body31:                                     ; preds = %while.cond28
  %36 = load i8, i8* %charstart, align 1
  %tobool32 = trunc i8 %36 to i1
  br i1 %tobool32, label %if.then33, label %if.end

if.then33:                                        ; preds = %while.body31
  %37 = load i8*, i8** %bufp, align 8
  %38 = load i8, i8* %37, align 1
  %idxprom = zext i8 %38 to i64
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %39 = load i8, i8* %arrayidx, align 1
  %conv34 = zext i8 %39 to i64
  store i64 %conv34, i64* %skip, align 8
  br label %if.end

if.end:                                           ; preds = %if.then33, %while.body31
  %40 = load i8*, i8** %bufp, align 8
  %41 = load i64, i64* %skip, align 8
  %add.ptr35 = getelementptr inbounds i8, i8* %40, i64 %41
  %42 = load i8*, i8** %bend, align 8
  %cmp36 = icmp ugt i8* %add.ptr35, %42
  br i1 %cmp36, label %if.then38, label %if.else

if.then38:                                        ; preds = %if.end
  store i8 0, i8* %charstart, align 1
  br label %while.end

if.else:                                          ; preds = %if.end
  %43 = load i64, i64* %charcount, align 8
  %inc = add i64 %43, 1
  store i64 %inc, i64* %charcount, align 8
  %44 = load i64, i64* %skip, align 8
  %45 = load i8*, i8** %bufp, align 8
  %add.ptr39 = getelementptr inbounds i8, i8* %45, i64 %44
  store i8* %add.ptr39, i8** %bufp, align 8
  store i8 1, i8* %charstart, align 1
  br label %if.end40

if.end40:                                         ; preds = %if.else
  br label %while.cond28

while.end:                                        ; preds = %if.then38, %while.cond28
  %46 = load i64, i64* %charcount, align 8
  %47 = load i64, i64* %recsize, align 8
  %cmp41 = icmp ult i64 %46, %47
  br i1 %cmp41, label %if.then43, label %if.end90

if.then43:                                        ; preds = %while.end
  %48 = load i8*, i8** %bufp, align 8
  %49 = load i8*, i8** %buffer, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %48 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %49 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %bufp_offset, align 8
  %50 = load i8, i8* %charstart, align 1
  %tobool44 = trunc i8 %50 to i1
  br i1 %tobool44, label %if.then45, label %if.else46

if.then45:                                        ; preds = %if.then43
  %51 = load i64, i64* %recsize, align 8
  %52 = load i64, i64* %charcount, align 8
  %sub = sub i64 %51, %52
  store i64 %sub, i64* %readsize, align 8
  br label %if.end54

if.else46:                                        ; preds = %if.then43
  %53 = load i64, i64* %skip, align 8
  %54 = load i8*, i8** %bend, align 8
  %55 = load i8*, i8** %bufp, align 8
  %sub.ptr.lhs.cast47 = ptrtoint i8* %54 to i64
  %sub.ptr.rhs.cast48 = ptrtoint i8* %55 to i64
  %sub.ptr.sub49 = sub i64 %sub.ptr.lhs.cast47, %sub.ptr.rhs.cast48
  %sub50 = sub i64 %53, %sub.ptr.sub49
  %56 = load i64, i64* %recsize, align 8
  %add51 = add i64 %sub50, %56
  %57 = load i64, i64* %charcount, align 8
  %sub52 = sub i64 %add51, %57
  %sub53 = sub i64 %sub52, 1
  store i64 %sub53, i64* %readsize, align 8
  br label %if.end54

if.end54:                                         ; preds = %if.else46, %if.then45
  %58 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags55 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags55, align 4
  %and56 = and i32 %59, 268435456
  %tobool57 = icmp ne i32 %and56, 0
  br i1 %tobool57, label %cond.true68, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %if.end54
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any59 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any59, align 8
  %62 = bitcast i8* %61 to %struct.xpv*
  %xpv_len_u60 = getelementptr inbounds %struct.xpv, %struct.xpv* %62, i32 0, i32 3
  %xpvlenu_len61 = bitcast %union.anon.19* %xpv_len_u60 to i64*
  %63 = load i64, i64* %xpvlenu_len61, align 8
  %64 = load i32, i32* %append.addr, align 4
  %conv62 = sext i32 %64 to i64
  %65 = load i64, i64* %bytesread, align 8
  %add63 = add nsw i64 %conv62, %65
  %66 = load i64, i64* %readsize, align 8
  %add64 = add i64 %add63, %66
  %add65 = add i64 %add64, 1
  %cmp66 = icmp ult i64 %63, %add65
  br i1 %cmp66, label %cond.true68, label %cond.false74

cond.true68:                                      ; preds = %lor.lhs.false58, %if.end54
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %68 = load i32, i32* %append.addr, align 4
  %conv69 = sext i32 %68 to i64
  %69 = load i64, i64* %bytesread, align 8
  %add70 = add nsw i64 %conv69, %69
  %70 = load i64, i64* %readsize, align 8
  %add71 = add i64 %add70, %70
  %add72 = add i64 %add71, 1
  %call73 = call i8* @Perl_sv_grow(%struct.sv* %67, i64 %add72)
  br label %cond.end77

cond.false74:                                     ; preds = %lor.lhs.false58
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u75 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 3
  %svu_pv76 = bitcast %union.anon* %sv_u75 to i8**
  %72 = load i8*, i8** %svu_pv76, align 8
  br label %cond.end77

cond.end77:                                       ; preds = %cond.false74, %cond.true68
  %cond78 = phi i8* [ %call73, %cond.true68 ], [ %72, %cond.false74 ]
  %73 = load i32, i32* %append.addr, align 4
  %idx.ext79 = sext i32 %73 to i64
  %add.ptr80 = getelementptr inbounds i8, i8* %cond78, i64 %idx.ext79
  store i8* %add.ptr80, i8** %buffer, align 8
  %74 = load i8*, i8** %buffer, align 8
  %75 = load i64, i64* %bytesread, align 8
  %add.ptr81 = getelementptr inbounds i8, i8* %74, i64 %75
  store i8* %add.ptr81, i8** %bend, align 8
  %76 = load %struct._PerlIO**, %struct._PerlIO*** %fp.addr, align 8
  %77 = load i8*, i8** %bend, align 8
  %78 = load i64, i64* %readsize, align 8
  %call82 = call i64 @Perl_PerlIO_read(%struct._PerlIO** %76, i8* %77, i64 %78)
  store i64 %call82, i64* %morebytesread, align 8
  %79 = load i64, i64* %morebytesread, align 8
  %cmp83 = icmp sle i64 %79, 0
  br i1 %cmp83, label %if.then85, label %if.end86

if.then85:                                        ; preds = %cond.end77
  br label %while.end91

if.end86:                                         ; preds = %cond.end77
  %80 = load i64, i64* %morebytesread, align 8
  %81 = load i64, i64* %bytesread, align 8
  %add87 = add nsw i64 %81, %80
  store i64 %add87, i64* %bytesread, align 8
  %82 = load i8*, i8** %buffer, align 8
  %83 = load i64, i64* %bytesread, align 8
  %add.ptr88 = getelementptr inbounds i8, i8* %82, i64 %83
  store i8* %add.ptr88, i8** %bend, align 8
  %84 = load i8*, i8** %buffer, align 8
  %85 = load i64, i64* %bufp_offset, align 8
  %add.ptr89 = getelementptr inbounds i8, i8* %84, i64 %85
  store i8* %add.ptr89, i8** %bufp, align 8
  br label %if.end90

if.end90:                                         ; preds = %if.end86, %while.end
  br label %while.cond

while.end91:                                      ; preds = %if.then85, %while.cond
  br label %if.end92

if.end92:                                         ; preds = %while.end91, %land.lhs.true, %cond.end18
  %86 = load i64, i64* %bytesread, align 8
  %cmp93 = icmp slt i64 %86, 0
  br i1 %cmp93, label %if.then95, label %if.end96

if.then95:                                        ; preds = %if.end92
  store i64 0, i64* %bytesread, align 8
  br label %if.end96

if.end96:                                         ; preds = %if.then95, %if.end92
  br label %do.body

do.body:                                          ; preds = %if.end96
  %87 = load i64, i64* %bytesread, align 8
  %88 = load i32, i32* %append.addr, align 4
  %conv97 = sext i32 %88 to i64
  %add98 = add nsw i64 %87, %conv97
  %89 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any99 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 0
  %90 = load i8*, i8** %sv_any99, align 8
  %91 = bitcast i8* %90 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %91, i32 0, i32 2
  store i64 %add98, i64* %xpv_cur, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %92 = load i8*, i8** %buffer, align 8
  %93 = load i64, i64* %bytesread, align 8
  %arrayidx100 = getelementptr inbounds i8, i8* %92, i64 %93
  store i8 0, i8* %arrayidx100, align 1
  %94 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any101 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 0
  %95 = load i8*, i8** %sv_any101, align 8
  %96 = bitcast i8* %95 to %struct.xpv*
  %xpv_cur102 = getelementptr inbounds %struct.xpv, %struct.xpv* %96, i32 0, i32 2
  %97 = load i64, i64* %xpv_cur102, align 8
  %98 = load i32, i32* %append.addr, align 4
  %conv103 = sext i32 %98 to i64
  %sub104 = sub i64 %97, %conv103
  %tobool105 = icmp ne i64 %sub104, 0
  br i1 %tobool105, label %cond.true106, label %cond.false109

cond.true106:                                     ; preds = %do.end
  %99 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u107 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 3
  %svu_pv108 = bitcast %union.anon* %sv_u107 to i8**
  %100 = load i8*, i8** %svu_pv108, align 8
  br label %cond.end110

cond.false109:                                    ; preds = %do.end
  br label %cond.end110

cond.end110:                                      ; preds = %cond.false109, %cond.true106
  %cond111 = phi i8* [ %100, %cond.true106 ], [ null, %cond.false109 ]
  ret i8* %cond111
}

declare dso_local i32 @Perl_PerlIO_eof(%struct._PerlIO**) #1

declare dso_local i32 @PerlIO_getc(%struct._PerlIO**) #1

declare dso_local i32 @PerlIO_ungetc(%struct._PerlIO**, i32) #1

declare dso_local i32 @PerlIO_fast_gets(%struct._PerlIO**) #1

declare dso_local i64 @Perl_PerlIO_get_cnt(%struct._PerlIO**) #1

declare dso_local i8* @Perl_PerlIO_get_ptr(%struct._PerlIO**) #1

declare dso_local void @Perl_PerlIO_set_ptrcnt(%struct._PerlIO**, i8*, i64) #1

declare dso_local i64 @Perl_PerlIO_read(%struct._PerlIO**, i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_inc(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2097152
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.end
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  %tobool2 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %4 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_inc_nomg(%struct.sv* %5)
  br label %return

return:                                           ; preds = %land.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_inc_nomg(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %d = alloca i8*, align 8
  %flags = alloca i32, align 4
  %i = alloca i64, align 8
  %was = alloca double, align 8
  %numtype = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end321

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 427886592
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then2, label %if.end31

if.then2:                                         ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %4, 134283264
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.then2
  call void @Perl_croak_no_modify()
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.then2
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %6, 2048
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end7
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %8, 2048
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %land.lhs.true, label %if.end27

land.lhs.true:                                    ; preds = %if.then11
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %10 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %11, 1048576
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %land.lhs.true18, label %if.end27

land.lhs.true18:                                  ; preds = %land.lhs.true
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u19 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 3
  %svu_rv20 = bitcast %union.anon* %sv_u19 to %struct.sv**
  %13 = load %struct.sv*, %struct.sv** %svu_rv20, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any, align 8
  %15 = bitcast i8* %14 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %15, i32 0, i32 0
  %16 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags21 = getelementptr inbounds %struct.hv, %struct.hv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %17, 268435456
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %land.lhs.true24, label %if.end27

land.lhs.true24:                                  ; preds = %land.lhs.true18
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.sv* @Perl_amagic_call(%struct.sv* %18, %struct.sv* @PL_sv_undef, i32 6, i32 9)
  %tobool25 = icmp ne %struct.sv* %call, null
  br i1 %tobool25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %land.lhs.true24
  br label %if.end321

if.end27:                                         ; preds = %land.lhs.true24, %land.lhs.true18, %land.lhs.true, %if.then11
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u28 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 3
  %svu_rv29 = bitcast %union.anon* %sv_u28 to %struct.sv**
  %20 = load %struct.sv*, %struct.sv** %svu_rv29, align 8
  %21 = ptrtoint %struct.sv* %20 to i64
  store i64 %21, i64* %i, align 8
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_unref_flags(%struct.sv* %22, i32 0)
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %24 = load i64, i64* %i, align 8
  call void @Perl_sv_setiv(%struct.sv* %23, i64 %24)
  br label %if.end30

if.else:                                          ; preds = %if.end7
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %25, i32 0)
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.end27
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.end
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags32, align 4
  store i32 %27, i32* %flags, align 4
  %28 = load i32, i32* %flags, align 4
  %and33 = and i32 %28, 12288
  %cmp = icmp eq i32 %and33, 8192
  br i1 %cmp, label %if.then34, label %if.end41

if.then34:                                        ; preds = %if.end31
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %30, 2097408
  %cmp37 = icmp eq i32 %and36, 256
  br i1 %cmp37, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then34
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any38, align 8
  %33 = bitcast i8* %32 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %33, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %34 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then34
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call39 = call i64 @Perl_sv_2iv_flags(%struct.sv* %35, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %34, %cond.true ], [ %call39, %cond.false ]
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags40, align 4
  store i32 %37, i32* %flags, align 4
  br label %if.end41

if.end41:                                         ; preds = %cond.end, %if.end31
  %38 = load i32, i32* %flags, align 4
  %and42 = and i32 %38, 256
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.then46, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end41
  %39 = load i32, i32* %flags, align 4
  %and44 = and i32 %39, 12288
  %cmp45 = icmp eq i32 %and44, 4096
  br i1 %cmp45, label %if.then46, label %if.end100

if.then46:                                        ; preds = %lor.lhs.false, %if.end41
  br label %oops_its_int

oops_its_int:                                     ; preds = %if.then200, %if.then46
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags47 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %41, -2147483648
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %if.then50, label %if.else70

if.then50:                                        ; preds = %oops_its_int
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any51 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any51, align 8
  %44 = bitcast i8* %43 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %44, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %45 = load i64, i64* %xivu_uv, align 8
  %cmp52 = icmp eq i64 %45, -1
  br i1 %cmp52, label %if.then53, label %if.else54

if.then53:                                        ; preds = %if.then50
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setnv(%struct.sv* %46, double 0x43F0000000000000)
  br label %if.end63

if.else54:                                        ; preds = %if.then50
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags55 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags55, align 4
  %and56 = and i32 %48, -536936193
  store i32 %and56, i32* %sv_flags55, align 4
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags57 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags57, align 4
  %and58 = and i32 %50, 33554432
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.else54
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call60 = call i32 @Perl_sv_backoff(%struct.sv* %51)
  %tobool61 = icmp ne i32 %call60, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else54
  %52 = phi i1 [ false, %if.else54 ], [ %tobool61, %land.rhs ]
  %land.ext = zext i1 %52 to i32
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags62, align 4
  %or = or i32 %54, 4352
  store i32 %or, i32* %sv_flags62, align 4
  br label %if.end63

if.end63:                                         ; preds = %land.end, %if.then53
  br label %do.body

do.body:                                          ; preds = %if.end63
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any64 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any64, align 8
  %57 = bitcast i8* %56 to %struct.xpvuv*
  %xuv_u65 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %57, i32 0, i32 4
  %xivu_uv66 = bitcast %union._xivu* %xuv_u65 to i64*
  %58 = load i64, i64* %xivu_uv66, align 8
  %add = add i64 %58, 1
  %59 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any67, align 8
  %61 = bitcast i8* %60 to %struct.xpvuv*
  %xuv_u68 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %61, i32 0, i32 4
  %xivu_uv69 = bitcast %union._xivu* %xuv_u68 to i64*
  store i64 %add, i64* %xivu_uv69, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end99

if.else70:                                        ; preds = %oops_its_int
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any71 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any71, align 8
  %64 = bitcast i8* %63 to %struct.xpviv*
  %xiv_u72 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %64, i32 0, i32 4
  %xivu_iv73 = bitcast %union._xivu* %xiv_u72 to i64*
  %65 = load i64, i64* %xivu_iv73, align 8
  %cmp74 = icmp eq i64 %65, 9223372036854775807
  br i1 %cmp74, label %if.then75, label %if.else76

if.then75:                                        ; preds = %if.else70
  %66 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setuv(%struct.sv* %66, i64 -9223372036854775808)
  br label %if.end98

if.else76:                                        ; preds = %if.else70
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags77 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags77, align 4
  %and78 = and i32 %68, 1610547455
  store i32 %and78, i32* %sv_flags77, align 4
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %70, 33554432
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %land.rhs82, label %land.end85

land.rhs82:                                       ; preds = %if.else76
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call83 = call i32 @Perl_sv_backoff(%struct.sv* %71)
  %tobool84 = icmp ne i32 %call83, 0
  br label %land.end85

land.end85:                                       ; preds = %land.rhs82, %if.else76
  %72 = phi i1 [ false, %if.else76 ], [ %tobool84, %land.rhs82 ]
  %land.ext86 = zext i1 %72 to i32
  %73 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags87 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags87, align 4
  %or88 = or i32 %74, 4352
  store i32 %or88, i32* %sv_flags87, align 4
  br label %do.body89

do.body89:                                        ; preds = %land.end85
  %75 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any90 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 0
  %76 = load i8*, i8** %sv_any90, align 8
  %77 = bitcast i8* %76 to %struct.xpviv*
  %xiv_u91 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %77, i32 0, i32 4
  %xivu_iv92 = bitcast %union._xivu* %xiv_u91 to i64*
  %78 = load i64, i64* %xivu_iv92, align 8
  %add93 = add nsw i64 %78, 1
  %79 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any94 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 0
  %80 = load i8*, i8** %sv_any94, align 8
  %81 = bitcast i8* %80 to %struct.xpviv*
  %xiv_u95 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %81, i32 0, i32 4
  %xivu_iv96 = bitcast %union._xivu* %xiv_u95 to i64*
  store i64 %add93, i64* %xivu_iv96, align 8
  br label %do.end97

do.end97:                                         ; preds = %do.body89
  br label %if.end98

if.end98:                                         ; preds = %do.end97, %if.then75
  br label %if.end99

if.end99:                                         ; preds = %if.end98, %do.end
  br label %if.end321

if.end100:                                        ; preds = %lor.lhs.false
  %82 = load i32, i32* %flags, align 4
  %and101 = and i32 %82, 8192
  %tobool102 = icmp ne i32 %and101, 0
  br i1 %tobool102, label %if.then103, label %if.end131

if.then103:                                       ; preds = %if.end100
  %83 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any104 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any104, align 8
  %85 = bitcast i8* %84 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %85, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %86 = load double, double* %xnv_nv, align 8
  store double %86, double* %was, align 8
  %87 = load double, double* %was, align 8
  %call105 = call zeroext i1 @Perl_isinfnan(double %87)
  br i1 %call105, label %cond.false107, label %cond.true106

cond.true106:                                     ; preds = %if.then103
  br i1 true, label %land.lhs.true108, label %if.end112

cond.false107:                                    ; preds = %if.then103
  br i1 false, label %land.lhs.true108, label %if.end112

land.lhs.true108:                                 ; preds = %cond.false107, %cond.true106
  br i1 true, label %land.lhs.true109, label %if.end112

land.lhs.true109:                                 ; preds = %land.lhs.true108
  %88 = load double, double* %was, align 8
  %cmp110 = fcmp oge double %88, 0x4340000000000000
  br i1 %cmp110, label %if.then111, label %if.end112

if.then111:                                       ; preds = %land.lhs.true109
  %89 = load double, double* %was, align 8
  call void (i32, i8*, ...) @Perl_ck_warner(i32 46, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.41, i64 0, i64 0), double %89)
  br label %if.end112

if.end112:                                        ; preds = %if.then111, %land.lhs.true109, %land.lhs.true108, %cond.false107, %cond.true106
  %90 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags113 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags113, align 4
  %and114 = and i32 %91, 1610547455
  store i32 %and114, i32* %sv_flags113, align 4
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags115, align 4
  %and116 = and i32 %93, 33554432
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %land.rhs118, label %land.end121

land.rhs118:                                      ; preds = %if.end112
  %94 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call119 = call i32 @Perl_sv_backoff(%struct.sv* %94)
  %tobool120 = icmp ne i32 %call119, 0
  br label %land.end121

land.end121:                                      ; preds = %land.rhs118, %if.end112
  %95 = phi i1 [ false, %if.end112 ], [ %tobool120, %land.rhs118 ]
  %land.ext122 = zext i1 %95 to i32
  %96 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags123 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 2
  %97 = load i32, i32* %sv_flags123, align 4
  %or124 = or i32 %97, 8704
  store i32 %or124, i32* %sv_flags123, align 4
  br label %do.body125

do.body125:                                       ; preds = %land.end121
  %98 = load double, double* %was, align 8
  %add126 = fadd double %98, 1.000000e+00
  %99 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any127 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 0
  %100 = load i8*, i8** %sv_any127, align 8
  %101 = bitcast i8* %100 to %struct.xpvnv*
  %xnv_u128 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %101, i32 0, i32 5
  %xnv_nv129 = bitcast %union._xnvu* %xnv_u128 to double*
  store double %add126, double* %xnv_nv129, align 8
  br label %do.end130

do.end130:                                        ; preds = %do.body125
  br label %if.end321

if.end131:                                        ; preds = %if.end100
  %102 = load i32, i32* %flags, align 4
  %and132 = and i32 %102, 16384
  %tobool133 = icmp ne i32 %and132, 0
  br i1 %tobool133, label %lor.lhs.false134, label %if.then137

lor.lhs.false134:                                 ; preds = %if.end131
  %103 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u135 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u135 to i8**
  %104 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %104, i64 0
  %105 = load i8, i8* %add.ptr, align 1
  %tobool136 = icmp ne i8 %105, 0
  br i1 %tobool136, label %if.end162, label %if.then137

if.then137:                                       ; preds = %lor.lhs.false134, %if.end131
  %106 = load i32, i32* %flags, align 4
  %and138 = and i32 %106, 255
  %cmp139 = icmp slt i32 %and138, 5
  br i1 %cmp139, label %if.then140, label %if.end144

if.then140:                                       ; preds = %if.then137
  %107 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %108 = load i32, i32* %flags, align 4
  %and141 = and i32 %108, 255
  %cmp142 = icmp sgt i32 %and141, 1
  %109 = zext i1 %cmp142 to i64
  %cond143 = select i1 %cmp142, i32 5, i32 1
  call void @Perl_sv_upgrade(%struct.sv* %107, i32 %cond143)
  br label %if.end144

if.end144:                                        ; preds = %if.then140, %if.then137
  %110 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags145 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 2
  %111 = load i32, i32* %sv_flags145, align 4
  %and146 = and i32 %111, 1610547455
  store i32 %and146, i32* %sv_flags145, align 4
  %112 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags147 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 2
  %113 = load i32, i32* %sv_flags147, align 4
  %and148 = and i32 %113, 33554432
  %tobool149 = icmp ne i32 %and148, 0
  br i1 %tobool149, label %land.rhs150, label %land.end153

land.rhs150:                                      ; preds = %if.end144
  %114 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call151 = call i32 @Perl_sv_backoff(%struct.sv* %114)
  %tobool152 = icmp ne i32 %call151, 0
  br label %land.end153

land.end153:                                      ; preds = %land.rhs150, %if.end144
  %115 = phi i1 [ false, %if.end144 ], [ %tobool152, %land.rhs150 ]
  %land.ext154 = zext i1 %115 to i32
  %116 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags155 = getelementptr inbounds %struct.sv, %struct.sv* %116, i32 0, i32 2
  %117 = load i32, i32* %sv_flags155, align 4
  %or156 = or i32 %117, 4352
  store i32 %or156, i32* %sv_flags155, align 4
  br label %do.body157

do.body157:                                       ; preds = %land.end153
  %118 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any158 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 0
  %119 = load i8*, i8** %sv_any158, align 8
  %120 = bitcast i8* %119 to %struct.xpviv*
  %xiv_u159 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %120, i32 0, i32 4
  %xivu_iv160 = bitcast %union._xivu* %xiv_u159 to i64*
  store i64 1, i64* %xivu_iv160, align 8
  br label %do.end161

do.end161:                                        ; preds = %do.body157
  br label %if.end321

if.end162:                                        ; preds = %lor.lhs.false134
  %121 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u163 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 3
  %svu_pv164 = bitcast %union.anon* %sv_u163 to i8**
  %122 = load i8*, i8** %svu_pv164, align 8
  store i8* %122, i8** %d, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end162
  %123 = load i8*, i8** %d, align 8
  %124 = load i8, i8* %123, align 1
  %idxprom = zext i8 %124 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %125 = load i32, i32* %arrayidx, align 4
  %and165 = and i32 %125, 16388
  %cmp166 = icmp eq i32 %and165, 16388
  br i1 %cmp166, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %126 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond168

while.cond168:                                    ; preds = %while.body176, %while.end
  %127 = load i8*, i8** %d, align 8
  %128 = load i8, i8* %127, align 1
  %idxprom169 = zext i8 %128 to i64
  %arrayidx170 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom169
  %129 = load i32, i32* %arrayidx170, align 4
  %and171 = and i32 %129, 2
  %tobool172 = icmp ne i32 %and171, 0
  %130 = zext i1 %tobool172 to i64
  %cond174 = select i1 %tobool172, i32 1, i32 0
  %tobool175 = icmp ne i32 %cond174, 0
  br i1 %tobool175, label %while.body176, label %while.end178

while.body176:                                    ; preds = %while.cond168
  %131 = load i8*, i8** %d, align 8
  %incdec.ptr177 = getelementptr inbounds i8, i8* %131, i32 1
  store i8* %incdec.ptr177, i8** %d, align 8
  br label %while.cond168

while.end178:                                     ; preds = %while.cond168
  %132 = load i8*, i8** %d, align 8
  %133 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u179 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 3
  %svu_pv180 = bitcast %union.anon* %sv_u179 to i8**
  %134 = load i8*, i8** %svu_pv180, align 8
  %135 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any181 = getelementptr inbounds %struct.sv, %struct.sv* %135, i32 0, i32 0
  %136 = load i8*, i8** %sv_any181, align 8
  %137 = bitcast i8* %136 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %137, i32 0, i32 2
  %138 = load i64, i64* %xpv_cur, align 8
  %add.ptr182 = getelementptr inbounds i8, i8* %134, i64 %138
  %cmp183 = icmp ult i8* %132, %add.ptr182
  br i1 %cmp183, label %if.then184, label %if.end238

if.then184:                                       ; preds = %while.end178
  %139 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u185 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 3
  %svu_pv186 = bitcast %union.anon* %sv_u185 to i8**
  %140 = load i8*, i8** %svu_pv186, align 8
  %add.ptr187 = getelementptr inbounds i8, i8* %140, i64 0
  %141 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any188 = getelementptr inbounds %struct.sv, %struct.sv* %141, i32 0, i32 0
  %142 = load i8*, i8** %sv_any188, align 8
  %143 = bitcast i8* %142 to %struct.xpv*
  %xpv_cur189 = getelementptr inbounds %struct.xpv, %struct.xpv* %143, i32 0, i32 2
  %144 = load i64, i64* %xpv_cur189, align 8
  %call190 = call i32 @Perl_grok_number_flags(i8* %add.ptr187, i64 %144, i64* null, i32 16)
  store i32 %call190, i32* %numtype, align 4
  %145 = load i32, i32* %numtype, align 4
  %tobool191 = icmp ne i32 %145, 0
  br i1 %tobool191, label %land.lhs.true192, label %if.end227

land.lhs.true192:                                 ; preds = %if.then184
  %146 = load i32, i32* %numtype, align 4
  %and193 = and i32 %146, 16
  %tobool194 = icmp ne i32 %and193, 0
  br i1 %tobool194, label %if.end227, label %if.then195

if.then195:                                       ; preds = %land.lhs.true192
  %147 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call196 = call i64 @Perl_sv_2iv_flags(%struct.sv* %147, i32 2)
  %148 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags197 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 2
  %149 = load i32, i32* %sv_flags197, align 4
  %and198 = and i32 %149, 256
  %tobool199 = icmp ne i32 %and198, 0
  br i1 %tobool199, label %if.then200, label %if.end201

if.then200:                                       ; preds = %if.then195
  br label %oops_its_int

if.end201:                                        ; preds = %if.then195
  %150 = load i32, i32* %flags, align 4
  %and202 = and i32 %150, 8192
  %tobool203 = icmp ne i32 %and202, 0
  br i1 %tobool203, label %if.then204, label %if.end226

if.then204:                                       ; preds = %if.end201
  %151 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags205 = getelementptr inbounds %struct.sv, %struct.sv* %151, i32 0, i32 2
  %152 = load i32, i32* %sv_flags205, align 4
  %and206 = and i32 %152, 1610547455
  store i32 %and206, i32* %sv_flags205, align 4
  %153 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags207 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 2
  %154 = load i32, i32* %sv_flags207, align 4
  %and208 = and i32 %154, 33554432
  %tobool209 = icmp ne i32 %and208, 0
  br i1 %tobool209, label %land.rhs210, label %land.end213

land.rhs210:                                      ; preds = %if.then204
  %155 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call211 = call i32 @Perl_sv_backoff(%struct.sv* %155)
  %tobool212 = icmp ne i32 %call211, 0
  br label %land.end213

land.end213:                                      ; preds = %land.rhs210, %if.then204
  %156 = phi i1 [ false, %if.then204 ], [ %tobool212, %land.rhs210 ]
  %land.ext214 = zext i1 %156 to i32
  %157 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags215 = getelementptr inbounds %struct.sv, %struct.sv* %157, i32 0, i32 2
  %158 = load i32, i32* %sv_flags215, align 4
  %or216 = or i32 %158, 8704
  store i32 %or216, i32* %sv_flags215, align 4
  br label %do.body217

do.body217:                                       ; preds = %land.end213
  %159 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any218 = getelementptr inbounds %struct.sv, %struct.sv* %159, i32 0, i32 0
  %160 = load i8*, i8** %sv_any218, align 8
  %161 = bitcast i8* %160 to %struct.xpvnv*
  %xnv_u219 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %161, i32 0, i32 5
  %xnv_nv220 = bitcast %union._xnvu* %xnv_u219 to double*
  %162 = load double, double* %xnv_nv220, align 8
  %add221 = fadd double %162, 1.000000e+00
  %163 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any222 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 0
  %164 = load i8*, i8** %sv_any222, align 8
  %165 = bitcast i8* %164 to %struct.xpvnv*
  %xnv_u223 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %165, i32 0, i32 5
  %xnv_nv224 = bitcast %union._xnvu* %xnv_u223 to double*
  store double %add221, double* %xnv_nv224, align 8
  br label %do.end225

do.end225:                                        ; preds = %do.body217
  br label %if.end321

if.end226:                                        ; preds = %if.end201
  br label %if.end227

if.end227:                                        ; preds = %if.end226, %land.lhs.true192, %if.then184
  %166 = load i32, i32* %numtype, align 4
  %tobool228 = icmp ne i32 %166, 0
  br i1 %tobool228, label %if.end232, label %land.lhs.true229

land.lhs.true229:                                 ; preds = %if.end227
  %call230 = call zeroext i1 @Perl_ckwarn(i32 13)
  br i1 %call230, label %if.then231, label %if.end232

if.then231:                                       ; preds = %land.lhs.true229
  %167 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @S_not_incrementable(%struct.sv* %167)
  br label %if.end232

if.end232:                                        ; preds = %if.then231, %land.lhs.true229, %if.end227
  %168 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %169 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u233 = getelementptr inbounds %struct.sv, %struct.sv* %169, i32 0, i32 3
  %svu_pv234 = bitcast %union.anon* %sv_u233 to i8**
  %170 = load i8*, i8** %svu_pv234, align 8
  %add.ptr235 = getelementptr inbounds i8, i8* %170, i64 0
  %call236 = call double @Perl_my_atof(i8* %add.ptr235)
  %add237 = fadd double %call236, 1.000000e+00
  call void @Perl_sv_setnv(%struct.sv* %168, double %add237)
  br label %if.end321

if.end238:                                        ; preds = %while.end178
  %171 = load i8*, i8** %d, align 8
  %incdec.ptr239 = getelementptr inbounds i8, i8* %171, i32 -1
  store i8* %incdec.ptr239, i8** %d, align 8
  br label %while.cond240

while.cond240:                                    ; preds = %if.end270, %if.end238
  %172 = load i8*, i8** %d, align 8
  %173 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u241 = getelementptr inbounds %struct.sv, %struct.sv* %173, i32 0, i32 3
  %svu_pv242 = bitcast %union.anon* %sv_u241 to i8**
  %174 = load i8*, i8** %svu_pv242, align 8
  %add.ptr243 = getelementptr inbounds i8, i8* %174, i64 0
  %cmp244 = icmp uge i8* %172, %add.ptr243
  br i1 %cmp244, label %while.body245, label %while.end271

while.body245:                                    ; preds = %while.cond240
  %175 = load i8*, i8** %d, align 8
  %176 = load i8, i8* %175, align 1
  %idxprom246 = zext i8 %176 to i64
  %arrayidx247 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom246
  %177 = load i32, i32* %arrayidx247, align 4
  %and248 = and i32 %177, 2
  %tobool249 = icmp ne i32 %and248, 0
  br i1 %tobool249, label %cond.true250, label %cond.false251

cond.true250:                                     ; preds = %while.body245
  br i1 true, label %if.then252, label %if.else258

cond.false251:                                    ; preds = %while.body245
  br i1 false, label %if.then252, label %if.else258

if.then252:                                       ; preds = %cond.false251, %cond.true250
  %178 = load i8*, i8** %d, align 8
  %179 = load i8, i8* %178, align 1
  %inc = add i8 %179, 1
  store i8 %inc, i8* %178, align 1
  %conv = sext i8 %inc to i32
  %cmp253 = icmp sle i32 %conv, 57
  br i1 %cmp253, label %if.then255, label %if.end256

if.then255:                                       ; preds = %if.then252
  br label %if.end321

if.end256:                                        ; preds = %if.then252
  %180 = load i8*, i8** %d, align 8
  %incdec.ptr257 = getelementptr inbounds i8, i8* %180, i32 -1
  store i8* %incdec.ptr257, i8** %d, align 8
  store i8 48, i8* %180, align 1
  br label %if.end270

if.else258:                                       ; preds = %cond.false251, %cond.true250
  %181 = load i8*, i8** %d, align 8
  %182 = load i8, i8* %181, align 1
  %inc259 = add i8 %182, 1
  store i8 %inc259, i8* %181, align 1
  %183 = load i8*, i8** %d, align 8
  %184 = load i8, i8* %183, align 1
  %idxprom260 = zext i8 %184 to i64
  %arrayidx261 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom260
  %185 = load i32, i32* %arrayidx261, align 4
  %and262 = and i32 %185, 16388
  %cmp263 = icmp eq i32 %and262, 16388
  br i1 %cmp263, label %if.then265, label %if.end266

if.then265:                                       ; preds = %if.else258
  br label %if.end321

if.end266:                                        ; preds = %if.else258
  %186 = load i8*, i8** %d, align 8
  %incdec.ptr267 = getelementptr inbounds i8, i8* %186, i32 -1
  store i8* %incdec.ptr267, i8** %d, align 8
  %187 = load i8, i8* %186, align 1
  %conv268 = sext i8 %187 to i32
  %sub = sub nsw i32 %conv268, 26
  %conv269 = trunc i32 %sub to i8
  store i8 %conv269, i8* %186, align 1
  br label %if.end270

if.end270:                                        ; preds = %if.end266, %if.end256
  br label %while.cond240

while.end271:                                     ; preds = %while.cond240
  %188 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags272 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 2
  %189 = load i32, i32* %sv_flags272, align 4
  %and273 = and i32 %189, 268435456
  %tobool274 = icmp ne i32 %and273, 0
  br i1 %tobool274, label %cond.true282, label %lor.lhs.false275

lor.lhs.false275:                                 ; preds = %while.end271
  %190 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any276 = getelementptr inbounds %struct.sv, %struct.sv* %190, i32 0, i32 0
  %191 = load i8*, i8** %sv_any276, align 8
  %192 = bitcast i8* %191 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %192, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %193 = load i64, i64* %xpvlenu_len, align 8
  %194 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any277 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 0
  %195 = load i8*, i8** %sv_any277, align 8
  %196 = bitcast i8* %195 to %struct.xpv*
  %xpv_cur278 = getelementptr inbounds %struct.xpv, %struct.xpv* %196, i32 0, i32 2
  %197 = load i64, i64* %xpv_cur278, align 8
  %add279 = add i64 %197, 2
  %cmp280 = icmp ult i64 %193, %add279
  br i1 %cmp280, label %cond.true282, label %cond.false287

cond.true282:                                     ; preds = %lor.lhs.false275, %while.end271
  %198 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %199 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any283 = getelementptr inbounds %struct.sv, %struct.sv* %199, i32 0, i32 0
  %200 = load i8*, i8** %sv_any283, align 8
  %201 = bitcast i8* %200 to %struct.xpv*
  %xpv_cur284 = getelementptr inbounds %struct.xpv, %struct.xpv* %201, i32 0, i32 2
  %202 = load i64, i64* %xpv_cur284, align 8
  %add285 = add i64 %202, 2
  %call286 = call i8* @Perl_sv_grow(%struct.sv* %198, i64 %add285)
  br label %cond.end290

cond.false287:                                    ; preds = %lor.lhs.false275
  %203 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u288 = getelementptr inbounds %struct.sv, %struct.sv* %203, i32 0, i32 3
  %svu_pv289 = bitcast %union.anon* %sv_u288 to i8**
  %204 = load i8*, i8** %svu_pv289, align 8
  br label %cond.end290

cond.end290:                                      ; preds = %cond.false287, %cond.true282
  %cond291 = phi i8* [ %call286, %cond.true282 ], [ %204, %cond.false287 ]
  br label %do.body292

do.body292:                                       ; preds = %cond.end290
  %205 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any293 = getelementptr inbounds %struct.sv, %struct.sv* %205, i32 0, i32 0
  %206 = load i8*, i8** %sv_any293, align 8
  %207 = bitcast i8* %206 to %struct.xpv*
  %xpv_cur294 = getelementptr inbounds %struct.xpv, %struct.xpv* %207, i32 0, i32 2
  %208 = load i64, i64* %xpv_cur294, align 8
  %add295 = add i64 %208, 1
  %209 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any296 = getelementptr inbounds %struct.sv, %struct.sv* %209, i32 0, i32 0
  %210 = load i8*, i8** %sv_any296, align 8
  %211 = bitcast i8* %210 to %struct.xpv*
  %xpv_cur297 = getelementptr inbounds %struct.xpv, %struct.xpv* %211, i32 0, i32 2
  store i64 %add295, i64* %xpv_cur297, align 8
  br label %do.end298

do.end298:                                        ; preds = %do.body292
  %212 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u299 = getelementptr inbounds %struct.sv, %struct.sv* %212, i32 0, i32 3
  %svu_pv300 = bitcast %union.anon* %sv_u299 to i8**
  %213 = load i8*, i8** %svu_pv300, align 8
  %214 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any301 = getelementptr inbounds %struct.sv, %struct.sv* %214, i32 0, i32 0
  %215 = load i8*, i8** %sv_any301, align 8
  %216 = bitcast i8* %215 to %struct.xpv*
  %xpv_cur302 = getelementptr inbounds %struct.xpv, %struct.xpv* %216, i32 0, i32 2
  %217 = load i64, i64* %xpv_cur302, align 8
  %add.ptr303 = getelementptr inbounds i8, i8* %213, i64 %217
  store i8* %add.ptr303, i8** %d, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end298
  %218 = load i8*, i8** %d, align 8
  %219 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u304 = getelementptr inbounds %struct.sv, %struct.sv* %219, i32 0, i32 3
  %svu_pv305 = bitcast %union.anon* %sv_u304 to i8**
  %220 = load i8*, i8** %svu_pv305, align 8
  %add.ptr306 = getelementptr inbounds i8, i8* %220, i64 0
  %cmp307 = icmp ugt i8* %218, %add.ptr306
  br i1 %cmp307, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %221 = load i8*, i8** %d, align 8
  %arrayidx309 = getelementptr inbounds i8, i8* %221, i64 -1
  %222 = load i8, i8* %arrayidx309, align 1
  %223 = load i8*, i8** %d, align 8
  store i8 %222, i8* %223, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %224 = load i8*, i8** %d, align 8
  %incdec.ptr310 = getelementptr inbounds i8, i8* %224, i32 -1
  store i8* %incdec.ptr310, i8** %d, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %225 = load i8*, i8** %d, align 8
  %arrayidx311 = getelementptr inbounds i8, i8* %225, i64 1
  %226 = load i8, i8* %arrayidx311, align 1
  %idxprom312 = zext i8 %226 to i64
  %arrayidx313 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom312
  %227 = load i32, i32* %arrayidx313, align 4
  %and314 = and i32 %227, 2
  %tobool315 = icmp ne i32 %and314, 0
  br i1 %tobool315, label %cond.true316, label %cond.false317

cond.true316:                                     ; preds = %for.end
  br i1 true, label %if.then318, label %if.else319

cond.false317:                                    ; preds = %for.end
  br i1 false, label %if.then318, label %if.else319

if.then318:                                       ; preds = %cond.false317, %cond.true316
  %228 = load i8*, i8** %d, align 8
  store i8 49, i8* %228, align 1
  br label %if.end321

if.else319:                                       ; preds = %cond.false317, %cond.true316
  %229 = load i8*, i8** %d, align 8
  %arrayidx320 = getelementptr inbounds i8, i8* %229, i64 1
  %230 = load i8, i8* %arrayidx320, align 1
  %231 = load i8*, i8** %d, align 8
  store i8 %230, i8* %231, align 1
  br label %if.end321

if.end321:                                        ; preds = %if.then, %if.then26, %if.end99, %do.end130, %do.end161, %do.end225, %if.end232, %if.then255, %if.then265, %if.else319, %if.then318
  ret void
}

declare dso_local zeroext i1 @Perl_isinfnan(double) #1

declare dso_local i32 @Perl_grok_number_flags(i8*, i64, i64*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_not_incrementable(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %tmpbuf = alloca [64 x i8], align 16
  %pv = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %tmpbuf, i64 0, i64 0
  %call = call i8* @S_sv_display(%struct.sv* %0, i8* %arraydecay, i64 64)
  store i8* %call, i8** %pv, align 8
  %1 = load i8*, i8** %pv, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 13, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.101, i64 0, i64 0), i8* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_dec(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2097152
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.end
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  %tobool2 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %4 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_dec_nomg(%struct.sv* %5)
  br label %return

return:                                           ; preds = %land.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_dec_nomg(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %flags = alloca i32, align 4
  %i = alloca i64, align 8
  %was = alloca double, align 8
  %numtype = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 427886592
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then2, label %if.end31

if.then2:                                         ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %4, 134283264
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.then2
  call void @Perl_croak_no_modify()
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.then2
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %6, 2048
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end7
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %8, 2048
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %land.lhs.true, label %if.end27

land.lhs.true:                                    ; preds = %if.then11
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %10 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %11, 1048576
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %land.lhs.true18, label %if.end27

land.lhs.true18:                                  ; preds = %land.lhs.true
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u19 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 3
  %svu_rv20 = bitcast %union.anon* %sv_u19 to %struct.sv**
  %13 = load %struct.sv*, %struct.sv** %svu_rv20, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any, align 8
  %15 = bitcast i8* %14 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %15, i32 0, i32 0
  %16 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags21 = getelementptr inbounds %struct.hv, %struct.hv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %17, 268435456
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %land.lhs.true24, label %if.end27

land.lhs.true24:                                  ; preds = %land.lhs.true18
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.sv* @Perl_amagic_call(%struct.sv* %18, %struct.sv* @PL_sv_undef, i32 7, i32 9)
  %tobool25 = icmp ne %struct.sv* %call, null
  br i1 %tobool25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %land.lhs.true24
  br label %return

if.end27:                                         ; preds = %land.lhs.true24, %land.lhs.true18, %land.lhs.true, %if.then11
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u28 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 3
  %svu_rv29 = bitcast %union.anon* %sv_u28 to %struct.sv**
  %20 = load %struct.sv*, %struct.sv** %svu_rv29, align 8
  %21 = ptrtoint %struct.sv* %20 to i64
  store i64 %21, i64* %i, align 8
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_unref_flags(%struct.sv* %22, i32 0)
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %24 = load i64, i64* %i, align 8
  call void @Perl_sv_setiv(%struct.sv* %23, i64 %24)
  br label %if.end30

if.else:                                          ; preds = %if.end7
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %25, i32 0)
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.end27
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.end
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags32, align 4
  store i32 %27, i32* %flags, align 4
  %28 = load i32, i32* %flags, align 4
  %and33 = and i32 %28, 256
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %if.then36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end31
  %29 = load i32, i32* %flags, align 4
  %and35 = and i32 %29, 12288
  %cmp = icmp eq i32 %and35, 4096
  br i1 %cmp, label %if.then36, label %if.end105

if.then36:                                        ; preds = %lor.lhs.false, %if.end31
  br label %oops_its_int

oops_its_int:                                     ; preds = %if.then174, %if.then36
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %31, -2147483648
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.then40, label %if.else75

if.then40:                                        ; preds = %oops_its_int
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any41 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any41, align 8
  %34 = bitcast i8* %33 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %34, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %35 = load i64, i64* %xivu_uv, align 8
  %cmp42 = icmp eq i64 %35, 0
  br i1 %cmp42, label %if.then43, label %if.else53

if.then43:                                        ; preds = %if.then40
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %37, 1610547455
  store i32 %and45, i32* %sv_flags44, align 4
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %39, 33554432
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then43
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call49 = call i32 @Perl_sv_backoff(%struct.sv* %40)
  %tobool50 = icmp ne i32 %call49, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then43
  %41 = phi i1 [ false, %if.then43 ], [ %tobool50, %land.rhs ]
  %land.ext = zext i1 %41 to i32
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags51, align 4
  %or = or i32 %43, 4352
  store i32 %or, i32* %sv_flags51, align 4
  br label %do.body

do.body:                                          ; preds = %land.end
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any52 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 0
  %45 = load i8*, i8** %sv_any52, align 8
  %46 = bitcast i8* %45 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %46, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  store i64 -1, i64* %xivu_iv, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end74

if.else53:                                        ; preds = %if.then40
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %48, -536936193
  store i32 %and55, i32* %sv_flags54, align 4
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %50, 33554432
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %land.rhs59, label %land.end62

land.rhs59:                                       ; preds = %if.else53
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call60 = call i32 @Perl_sv_backoff(%struct.sv* %51)
  %tobool61 = icmp ne i32 %call60, 0
  br label %land.end62

land.end62:                                       ; preds = %land.rhs59, %if.else53
  %52 = phi i1 [ false, %if.else53 ], [ %tobool61, %land.rhs59 ]
  %land.ext63 = zext i1 %52 to i32
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags64 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags64, align 4
  %or65 = or i32 %54, 4352
  store i32 %or65, i32* %sv_flags64, align 4
  br label %do.body66

do.body66:                                        ; preds = %land.end62
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any67, align 8
  %57 = bitcast i8* %56 to %struct.xpvuv*
  %xuv_u68 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %57, i32 0, i32 4
  %xivu_uv69 = bitcast %union._xivu* %xuv_u68 to i64*
  %58 = load i64, i64* %xivu_uv69, align 8
  %sub = sub i64 %58, 1
  %59 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any70 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any70, align 8
  %61 = bitcast i8* %60 to %struct.xpvuv*
  %xuv_u71 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %61, i32 0, i32 4
  %xivu_uv72 = bitcast %union._xivu* %xuv_u71 to i64*
  store i64 %sub, i64* %xivu_uv72, align 8
  br label %do.end73

do.end73:                                         ; preds = %do.body66
  br label %if.end74

if.end74:                                         ; preds = %do.end73, %do.end
  br label %if.end104

if.else75:                                        ; preds = %oops_its_int
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any76 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any76, align 8
  %64 = bitcast i8* %63 to %struct.xpviv*
  %xiv_u77 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %64, i32 0, i32 4
  %xivu_iv78 = bitcast %union._xivu* %xiv_u77 to i64*
  %65 = load i64, i64* %xivu_iv78, align 8
  %cmp79 = icmp eq i64 %65, -9223372036854775808
  br i1 %cmp79, label %if.then80, label %if.else81

if.then80:                                        ; preds = %if.else75
  %66 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setnv(%struct.sv* %66, double 0xC3E0000000000000)
  br label %oops_its_num

if.else81:                                        ; preds = %if.else75
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags82 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags82, align 4
  %and83 = and i32 %68, 1610547455
  store i32 %and83, i32* %sv_flags82, align 4
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags84 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %70, 33554432
  %tobool86 = icmp ne i32 %and85, 0
  br i1 %tobool86, label %land.rhs87, label %land.end90

land.rhs87:                                       ; preds = %if.else81
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call88 = call i32 @Perl_sv_backoff(%struct.sv* %71)
  %tobool89 = icmp ne i32 %call88, 0
  br label %land.end90

land.end90:                                       ; preds = %land.rhs87, %if.else81
  %72 = phi i1 [ false, %if.else81 ], [ %tobool89, %land.rhs87 ]
  %land.ext91 = zext i1 %72 to i32
  %73 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags92 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags92, align 4
  %or93 = or i32 %74, 4352
  store i32 %or93, i32* %sv_flags92, align 4
  br label %do.body94

do.body94:                                        ; preds = %land.end90
  %75 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any95 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 0
  %76 = load i8*, i8** %sv_any95, align 8
  %77 = bitcast i8* %76 to %struct.xpviv*
  %xiv_u96 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %77, i32 0, i32 4
  %xivu_iv97 = bitcast %union._xivu* %xiv_u96 to i64*
  %78 = load i64, i64* %xivu_iv97, align 8
  %sub98 = sub nsw i64 %78, 1
  %79 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any99 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 0
  %80 = load i8*, i8** %sv_any99, align 8
  %81 = bitcast i8* %80 to %struct.xpviv*
  %xiv_u100 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %81, i32 0, i32 4
  %xivu_iv101 = bitcast %union._xivu* %xiv_u100 to i64*
  store i64 %sub98, i64* %xivu_iv101, align 8
  br label %do.end102

do.end102:                                        ; preds = %do.body94
  br label %if.end103

if.end103:                                        ; preds = %do.end102
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.end74
  br label %return

if.end105:                                        ; preds = %lor.lhs.false
  %82 = load i32, i32* %flags, align 4
  %and106 = and i32 %82, 8192
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %if.then108, label %if.end134

if.then108:                                       ; preds = %if.end105
  br label %oops_its_num

oops_its_num:                                     ; preds = %if.then108, %if.then80
  %83 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any109 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any109, align 8
  %85 = bitcast i8* %84 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %85, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %86 = load double, double* %xnv_nv, align 8
  store double %86, double* %was, align 8
  %87 = load double, double* %was, align 8
  %call110 = call zeroext i1 @Perl_isinfnan(double %87)
  br i1 %call110, label %cond.false, label %cond.true

cond.true:                                        ; preds = %oops_its_num
  br i1 true, label %land.lhs.true111, label %if.end115

cond.false:                                       ; preds = %oops_its_num
  br i1 false, label %land.lhs.true111, label %if.end115

land.lhs.true111:                                 ; preds = %cond.false, %cond.true
  br i1 true, label %land.lhs.true112, label %if.end115

land.lhs.true112:                                 ; preds = %land.lhs.true111
  %88 = load double, double* %was, align 8
  %cmp113 = fcmp ole double %88, 0xC340000000000000
  br i1 %cmp113, label %if.then114, label %if.end115

if.then114:                                       ; preds = %land.lhs.true112
  %89 = load double, double* %was, align 8
  call void (i32, i8*, ...) @Perl_ck_warner(i32 46, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.42, i64 0, i64 0), double %89)
  br label %if.end115

if.end115:                                        ; preds = %if.then114, %land.lhs.true112, %land.lhs.true111, %cond.false, %cond.true
  %90 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags116 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags116, align 4
  %and117 = and i32 %91, 1610547455
  store i32 %and117, i32* %sv_flags116, align 4
  %92 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags118 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags118, align 4
  %and119 = and i32 %93, 33554432
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %land.rhs121, label %land.end124

land.rhs121:                                      ; preds = %if.end115
  %94 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call122 = call i32 @Perl_sv_backoff(%struct.sv* %94)
  %tobool123 = icmp ne i32 %call122, 0
  br label %land.end124

land.end124:                                      ; preds = %land.rhs121, %if.end115
  %95 = phi i1 [ false, %if.end115 ], [ %tobool123, %land.rhs121 ]
  %land.ext125 = zext i1 %95 to i32
  %96 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags126 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 2
  %97 = load i32, i32* %sv_flags126, align 4
  %or127 = or i32 %97, 8704
  store i32 %or127, i32* %sv_flags126, align 4
  br label %do.body128

do.body128:                                       ; preds = %land.end124
  %98 = load double, double* %was, align 8
  %sub129 = fsub double %98, 1.000000e+00
  %99 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any130 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 0
  %100 = load i8*, i8** %sv_any130, align 8
  %101 = bitcast i8* %100 to %struct.xpvnv*
  %xnv_u131 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %101, i32 0, i32 5
  %xnv_nv132 = bitcast %union._xnvu* %xnv_u131 to double*
  store double %sub129, double* %xnv_nv132, align 8
  br label %do.end133

do.end133:                                        ; preds = %do.body128
  br label %return

if.end134:                                        ; preds = %if.end105
  %102 = load i32, i32* %flags, align 4
  %and135 = and i32 %102, 16384
  %tobool136 = icmp ne i32 %and135, 0
  br i1 %tobool136, label %if.end161, label %if.then137

if.then137:                                       ; preds = %if.end134
  %103 = load i32, i32* %flags, align 4
  %and138 = and i32 %103, 255
  %cmp139 = icmp slt i32 %and138, 5
  br i1 %cmp139, label %if.then140, label %if.end143

if.then140:                                       ; preds = %if.then137
  %104 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %105 = load i32, i32* %flags, align 4
  %and141 = and i32 %105, 255
  %cmp142 = icmp sgt i32 %and141, 1
  %106 = zext i1 %cmp142 to i64
  %cond = select i1 %cmp142, i32 5, i32 1
  call void @Perl_sv_upgrade(%struct.sv* %104, i32 %cond)
  br label %if.end143

if.end143:                                        ; preds = %if.then140, %if.then137
  br label %do.body144

do.body144:                                       ; preds = %if.end143
  %107 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any145 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 0
  %108 = load i8*, i8** %sv_any145, align 8
  %109 = bitcast i8* %108 to %struct.xpviv*
  %xiv_u146 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %109, i32 0, i32 4
  %xivu_iv147 = bitcast %union._xivu* %xiv_u146 to i64*
  store i64 -1, i64* %xivu_iv147, align 8
  br label %do.end148

do.end148:                                        ; preds = %do.body144
  %110 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags149 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 2
  %111 = load i32, i32* %sv_flags149, align 4
  %and150 = and i32 %111, 1610547455
  store i32 %and150, i32* %sv_flags149, align 4
  %112 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags151 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 2
  %113 = load i32, i32* %sv_flags151, align 4
  %and152 = and i32 %113, 33554432
  %tobool153 = icmp ne i32 %and152, 0
  br i1 %tobool153, label %land.rhs154, label %land.end157

land.rhs154:                                      ; preds = %do.end148
  %114 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call155 = call i32 @Perl_sv_backoff(%struct.sv* %114)
  %tobool156 = icmp ne i32 %call155, 0
  br label %land.end157

land.end157:                                      ; preds = %land.rhs154, %do.end148
  %115 = phi i1 [ false, %do.end148 ], [ %tobool156, %land.rhs154 ]
  %land.ext158 = zext i1 %115 to i32
  %116 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags159 = getelementptr inbounds %struct.sv, %struct.sv* %116, i32 0, i32 2
  %117 = load i32, i32* %sv_flags159, align 4
  %or160 = or i32 %117, 4352
  store i32 %or160, i32* %sv_flags159, align 4
  br label %return

if.end161:                                        ; preds = %if.end134
  %118 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u162 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u162 to i8**
  %119 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %119, i64 0
  %120 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any163 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 0
  %121 = load i8*, i8** %sv_any163, align 8
  %122 = bitcast i8* %121 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %122, i32 0, i32 2
  %123 = load i64, i64* %xpv_cur, align 8
  %call164 = call i32 @Perl_grok_number(i8* %add.ptr, i64 %123, i64* null)
  store i32 %call164, i32* %numtype, align 4
  %124 = load i32, i32* %numtype, align 4
  %tobool165 = icmp ne i32 %124, 0
  br i1 %tobool165, label %land.lhs.true166, label %if.end201

land.lhs.true166:                                 ; preds = %if.end161
  %125 = load i32, i32* %numtype, align 4
  %and167 = and i32 %125, 16
  %tobool168 = icmp ne i32 %and167, 0
  br i1 %tobool168, label %if.end201, label %if.then169

if.then169:                                       ; preds = %land.lhs.true166
  %126 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call170 = call i64 @Perl_sv_2iv_flags(%struct.sv* %126, i32 2)
  %127 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags171 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 2
  %128 = load i32, i32* %sv_flags171, align 4
  %and172 = and i32 %128, 256
  %tobool173 = icmp ne i32 %and172, 0
  br i1 %tobool173, label %if.then174, label %if.end175

if.then174:                                       ; preds = %if.then169
  br label %oops_its_int

if.end175:                                        ; preds = %if.then169
  %129 = load i32, i32* %flags, align 4
  %and176 = and i32 %129, 8192
  %tobool177 = icmp ne i32 %and176, 0
  br i1 %tobool177, label %if.then178, label %if.end200

if.then178:                                       ; preds = %if.end175
  %130 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags179 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 2
  %131 = load i32, i32* %sv_flags179, align 4
  %and180 = and i32 %131, 1610547455
  store i32 %and180, i32* %sv_flags179, align 4
  %132 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags181 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 2
  %133 = load i32, i32* %sv_flags181, align 4
  %and182 = and i32 %133, 33554432
  %tobool183 = icmp ne i32 %and182, 0
  br i1 %tobool183, label %land.rhs184, label %land.end187

land.rhs184:                                      ; preds = %if.then178
  %134 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call185 = call i32 @Perl_sv_backoff(%struct.sv* %134)
  %tobool186 = icmp ne i32 %call185, 0
  br label %land.end187

land.end187:                                      ; preds = %land.rhs184, %if.then178
  %135 = phi i1 [ false, %if.then178 ], [ %tobool186, %land.rhs184 ]
  %land.ext188 = zext i1 %135 to i32
  %136 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags189 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 2
  %137 = load i32, i32* %sv_flags189, align 4
  %or190 = or i32 %137, 8704
  store i32 %or190, i32* %sv_flags189, align 4
  br label %do.body191

do.body191:                                       ; preds = %land.end187
  %138 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any192 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 0
  %139 = load i8*, i8** %sv_any192, align 8
  %140 = bitcast i8* %139 to %struct.xpvnv*
  %xnv_u193 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %140, i32 0, i32 5
  %xnv_nv194 = bitcast %union._xnvu* %xnv_u193 to double*
  %141 = load double, double* %xnv_nv194, align 8
  %sub195 = fsub double %141, 1.000000e+00
  %142 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any196 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 0
  %143 = load i8*, i8** %sv_any196, align 8
  %144 = bitcast i8* %143 to %struct.xpvnv*
  %xnv_u197 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %144, i32 0, i32 5
  %xnv_nv198 = bitcast %union._xnvu* %xnv_u197 to double*
  store double %sub195, double* %xnv_nv198, align 8
  br label %do.end199

do.end199:                                        ; preds = %do.body191
  br label %return

if.end200:                                        ; preds = %if.end175
  br label %if.end201

if.end201:                                        ; preds = %if.end200, %land.lhs.true166, %if.end161
  %145 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %146 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u202 = getelementptr inbounds %struct.sv, %struct.sv* %146, i32 0, i32 3
  %svu_pv203 = bitcast %union.anon* %sv_u202 to i8**
  %147 = load i8*, i8** %svu_pv203, align 8
  %add.ptr204 = getelementptr inbounds i8, i8* %147, i64 0
  %call205 = call double @Perl_my_atof(i8* %add.ptr204)
  %sub206 = fsub double %call205, 1.000000e+00
  call void @Perl_sv_setnv(%struct.sv* %145, double %sub206)
  br label %return

return:                                           ; preds = %if.end201, %do.end199, %land.end157, %do.end133, %if.end104, %if.then26, %if.then
  ret void
}

declare dso_local i64 @Perl_tmps_grow_p(i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSVpv(i8* %s, i64 %len) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %if.end

if.else:                                          ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  store i8* null, i8** %sv_any2, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end3

do.end3:                                          ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %10 = load i8*, i8** %s.addr, align 8
  %11 = load i64, i64* %len.addr, align 8
  %tobool4 = icmp ne i64 %11, 0
  br i1 %tobool4, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end3
  %12 = load i8*, i8** %s.addr, align 8
  %cmp = icmp eq i8* %12, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %do.end3
  %13 = load i64, i64* %len.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %14 = load i8*, i8** %s.addr, align 8
  %call5 = call i64 @strlen(i8* %14) #8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %13, %cond.true ], [ %call5, %cond.false ]
  call void @Perl_sv_setpvn(%struct.sv* %9, i8* %10, i64 %cond)
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSVhek(%struct.hek* %hek) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %hek.addr = alloca %struct.hek*, align 8
  %sv = alloca %struct.sv*, align 8
  %flags = alloca i32, align 4
  %utf8_len = alloca i64, align 8
  %sv18 = alloca %struct.sv*, align 8
  %as_utf8 = alloca i8*, align 8
  %sv28 = alloca %struct.sv*, align 8
  %sv49 = alloca %struct.sv*, align 8
  store %struct.hek* %hek, %struct.hek** %hek.addr, align 8
  %0 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %tobool = icmp ne %struct.hek* %0, null
  br i1 %tobool, label %if.end6, label %if.then

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool1 = icmp ne %struct.sv* %1, null
  br i1 %tobool1, label %if.then2, label %if.else

if.then2:                                         ; preds = %do.body
  br label %do.body3

do.body3:                                         ; preds = %if.then2
  %2 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.sv*
  store %struct.sv* %5, %struct.sv** @PL_sv_root, align 8
  %6 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %6, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body3
  br label %if.end

if.else:                                          ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any4 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  store i8* null, i8** %sv_any4, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end5

do.end5:                                          ; preds = %if.end
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %10, %struct.sv** %retval, align 8
  br label %return

if.end6:                                          ; preds = %entry
  %11 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %11, i32 0, i32 1
  %12 = load i32, i32* %hek_len, align 4
  %cmp = icmp eq i32 %12, -2
  br i1 %cmp, label %if.then7, label %if.else9

if.then7:                                         ; preds = %if.end6
  %13 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %13, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %14 = bitcast i8* %arraydecay to %struct.sv**
  %15 = load %struct.sv*, %struct.sv** %14, align 4
  %call8 = call %struct.sv* @Perl_newSVsv(%struct.sv* %15)
  store %struct.sv* %call8, %struct.sv** %retval, align 8
  br label %return

if.else9:                                         ; preds = %if.end6
  %16 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key10 = getelementptr inbounds %struct.hek, %struct.hek* %16, i32 0, i32 2
  %arraydecay11 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key10, i64 0, i64 0
  %17 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len12 = getelementptr inbounds %struct.hek, %struct.hek* %17, i32 0, i32 1
  %18 = load i32, i32* %hek_len12, align 4
  %idx.ext = sext i32 %18 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay11, i64 %idx.ext
  %add.ptr13 = getelementptr inbounds i8, i8* %add.ptr, i64 1
  %19 = load i8, i8* %add.ptr13, align 1
  %conv = zext i8 %19 to i32
  store i32 %conv, i32* %flags, align 4
  %20 = load i32, i32* %flags, align 4
  %and = and i32 %20, 2
  %tobool14 = icmp ne i32 %and, 0
  br i1 %tobool14, label %if.then15, label %if.else24

if.then15:                                        ; preds = %if.else9
  %21 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len16 = getelementptr inbounds %struct.hek, %struct.hek* %21, i32 0, i32 1
  %22 = load i32, i32* %hek_len16, align 4
  %conv17 = sext i32 %22 to i64
  store i64 %conv17, i64* %utf8_len, align 8
  %call19 = call %struct.sv* @Perl_newSV_type(i32 3)
  store %struct.sv* %call19, %struct.sv** %sv18, align 8
  %23 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key20 = getelementptr inbounds %struct.hek, %struct.hek* %23, i32 0, i32 2
  %arraydecay21 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key20, i64 0, i64 0
  %call22 = call i8* @Perl_bytes_to_utf8(i8* %arraydecay21, i64* %utf8_len)
  store i8* %call22, i8** %as_utf8, align 8
  %24 = load %struct.sv*, %struct.sv** %sv18, align 8
  %25 = load i8*, i8** %as_utf8, align 8
  %26 = load i64, i64* %utf8_len, align 8
  call void @Perl_sv_usepvn_flags(%struct.sv* %24, i8* %25, i64 %26, i32 256)
  %27 = load %struct.sv*, %struct.sv** %sv18, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags23, align 4
  %or = or i32 %28, 536870912
  store i32 %or, i32* %sv_flags23, align 4
  %29 = load %struct.sv*, %struct.sv** %sv18, align 8
  store %struct.sv* %29, %struct.sv** %retval, align 8
  br label %return

if.else24:                                        ; preds = %if.else9
  %30 = load i32, i32* %flags, align 4
  %and25 = and i32 %30, 8
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then27, label %if.end47

if.then27:                                        ; preds = %if.else24
  %31 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key29 = getelementptr inbounds %struct.hek, %struct.hek* %31, i32 0, i32 2
  %arraydecay30 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key29, i64 0, i64 0
  %32 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len31 = getelementptr inbounds %struct.hek, %struct.hek* %32, i32 0, i32 1
  %33 = load i32, i32* %hek_len31, align 4
  %conv32 = sext i32 %33 to i64
  %call33 = call %struct.sv* @Perl_newSVpvn(i8* %arraydecay30, i64 %conv32)
  store %struct.sv* %call33, %struct.sv** %sv28, align 8
  %34 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key34 = getelementptr inbounds %struct.hek, %struct.hek* %34, i32 0, i32 2
  %arraydecay35 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key34, i64 0, i64 0
  %35 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len36 = getelementptr inbounds %struct.hek, %struct.hek* %35, i32 0, i32 1
  %36 = load i32, i32* %hek_len36, align 4
  %idx.ext37 = sext i32 %36 to i64
  %add.ptr38 = getelementptr inbounds i8, i8* %arraydecay35, i64 %idx.ext37
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr38, i64 1
  %37 = load i8, i8* %add.ptr39, align 1
  %conv40 = zext i8 %37 to i32
  %and41 = and i32 %conv40, 1
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %if.then43, label %if.end46

if.then43:                                        ; preds = %if.then27
  %38 = load %struct.sv*, %struct.sv** %sv28, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags44, align 4
  %or45 = or i32 %39, 536870912
  store i32 %or45, i32* %sv_flags44, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.then43, %if.then27
  %40 = load %struct.sv*, %struct.sv** %sv28, align 8
  store %struct.sv* %40, %struct.sv** %retval, align 8
  br label %return

if.end47:                                         ; preds = %if.else24
  br label %if.end48

if.end48:                                         ; preds = %if.end47
  br label %do.body50

do.body50:                                        ; preds = %if.end48
  %41 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool51 = icmp ne %struct.sv* %41, null
  br i1 %tobool51, label %if.then52, label %if.else57

if.then52:                                        ; preds = %do.body50
  br label %do.body53

do.body53:                                        ; preds = %if.then52
  %42 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %42, %struct.sv** %sv49, align 8
  %43 = load %struct.sv*, %struct.sv** %sv49, align 8
  %sv_any54 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any54, align 8
  %45 = bitcast i8* %44 to %struct.sv*
  store %struct.sv* %45, %struct.sv** @PL_sv_root, align 8
  %46 = load i64, i64* @PL_sv_count, align 8
  %inc55 = add nsw i64 %46, 1
  store i64 %inc55, i64* @PL_sv_count, align 8
  br label %do.end56

do.end56:                                         ; preds = %do.body53
  br label %if.end59

if.else57:                                        ; preds = %do.body50
  %call58 = call %struct.sv* @S_more_sv()
  store %struct.sv* %call58, %struct.sv** %sv49, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.else57, %do.end56
  %47 = load %struct.sv*, %struct.sv** %sv49, align 8
  %sv_any60 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  store i8* null, i8** %sv_any60, align 8
  %48 = load %struct.sv*, %struct.sv** %sv49, align 8
  %sv_refcnt61 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 1
  store i32 1, i32* %sv_refcnt61, align 8
  %49 = load %struct.sv*, %struct.sv** %sv49, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  store i32 0, i32* %sv_flags62, align 4
  br label %do.end63

do.end63:                                         ; preds = %if.end59
  %50 = load %struct.sv*, %struct.sv** %sv49, align 8
  call void @Perl_sv_upgrade(%struct.sv* %50, i32 3)
  br label %do.body64

do.body64:                                        ; preds = %do.end63
  %51 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %52 = bitcast %struct.hek* %51 to i8*
  %add.ptr65 = getelementptr inbounds i8, i8* %52, i64 sub (i64 0, i64 ptrtoint (%struct.hek* getelementptr inbounds (%struct.shared_he, %struct.shared_he* null, i32 0, i32 1) to i64))
  %53 = bitcast i8* %add.ptr65 to %struct.shared_he*
  %shared_he_he = getelementptr inbounds %struct.shared_he, %struct.shared_he* %53, i32 0, i32 0
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %shared_he_he, i32 0, i32 2
  %hent_refcount = bitcast %union.anon.0* %he_valu to i64*
  %54 = load i64, i64* %hent_refcount, align 8
  %inc66 = add i64 %54, 1
  store i64 %inc66, i64* %hent_refcount, align 8
  %55 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key67 = getelementptr inbounds %struct.hek, %struct.hek* %55, i32 0, i32 2
  %arraydecay68 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key67, i64 0, i64 0
  %56 = load %struct.sv*, %struct.sv** %sv49, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  store i8* %arraydecay68, i8** %svu_pv, align 8
  br label %do.end69

do.end69:                                         ; preds = %do.body64
  br label %do.body70

do.body70:                                        ; preds = %do.end69
  %57 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len71 = getelementptr inbounds %struct.hek, %struct.hek* %57, i32 0, i32 1
  %58 = load i32, i32* %hek_len71, align 4
  %conv72 = sext i32 %58 to i64
  %59 = load %struct.sv*, %struct.sv** %sv49, align 8
  %sv_any73 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any73, align 8
  %61 = bitcast i8* %60 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %61, i32 0, i32 2
  store i64 %conv72, i64* %xpv_cur, align 8
  br label %do.end74

do.end74:                                         ; preds = %do.body70
  br label %do.body75

do.body75:                                        ; preds = %do.end74
  %62 = load %struct.sv*, %struct.sv** %sv49, align 8
  %sv_any76 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any76, align 8
  %64 = bitcast i8* %63 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %64, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  store i64 0, i64* %xpvlenu_len, align 8
  br label %do.end77

do.end77:                                         ; preds = %do.body75
  %65 = load %struct.sv*, %struct.sv** %sv49, align 8
  %sv_flags78 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags78, align 4
  %or79 = or i32 %66, 268435456
  store i32 %or79, i32* %sv_flags78, align 4
  %67 = load %struct.sv*, %struct.sv** %sv49, align 8
  %sv_flags80 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags80, align 4
  %or81 = or i32 %68, 17408
  store i32 %or81, i32* %sv_flags80, align 4
  %69 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_key82 = getelementptr inbounds %struct.hek, %struct.hek* %69, i32 0, i32 2
  %arraydecay83 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key82, i64 0, i64 0
  %70 = load %struct.hek*, %struct.hek** %hek.addr, align 8
  %hek_len84 = getelementptr inbounds %struct.hek, %struct.hek* %70, i32 0, i32 1
  %71 = load i32, i32* %hek_len84, align 4
  %idx.ext85 = sext i32 %71 to i64
  %add.ptr86 = getelementptr inbounds i8, i8* %arraydecay83, i64 %idx.ext85
  %add.ptr87 = getelementptr inbounds i8, i8* %add.ptr86, i64 1
  %72 = load i8, i8* %add.ptr87, align 1
  %conv88 = zext i8 %72 to i32
  %and89 = and i32 %conv88, 1
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %if.then91, label %if.end94

if.then91:                                        ; preds = %do.end77
  %73 = load %struct.sv*, %struct.sv** %sv49, align 8
  %sv_flags92 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags92, align 4
  %or93 = or i32 %74, 536870912
  store i32 %or93, i32* %sv_flags92, align 4
  br label %if.end94

if.end94:                                         ; preds = %if.then91, %do.end77
  %75 = load %struct.sv*, %struct.sv** %sv49, align 8
  store %struct.sv* %75, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end94, %if.end46, %if.then15, %if.then7, %do.end5
  %76 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %76
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSVsv(%struct.sv* %old) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %old.addr = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  store %struct.sv* %old, %struct.sv** %old.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %old.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %old.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 255
  %cmp = icmp eq i32 %and, 255
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 24, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.44, i64 0, i64 0))
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end2:                                          ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %old.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %4, 2097152
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end2
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.end2
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %old.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %5)
  %tobool6 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %6 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool6, %land.rhs ]
  %land.ext = zext i1 %6 to i32
  br label %do.body

do.body:                                          ; preds = %land.end
  %7 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool7 = icmp ne %struct.sv* %7, null
  br i1 %tobool7, label %if.then8, label %if.else

if.then8:                                         ; preds = %do.body
  br label %do.body9

do.body9:                                         ; preds = %if.then8
  %8 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %8, %struct.sv** %sv, align 8
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.sv*
  store %struct.sv* %11, %struct.sv** @PL_sv_root, align 8
  %12 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %12, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body9
  br label %if.end11

if.else:                                          ; preds = %do.body
  %call10 = call %struct.sv* @S_more_sv()
  store %struct.sv* %call10, %struct.sv** %sv, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.else, %do.end
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  store i8* null, i8** %sv_any12, align 8
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  store i32 0, i32* %sv_flags13, align 4
  br label %do.end14

do.end14:                                         ; preds = %if.end11
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %17 = load %struct.sv*, %struct.sv** %old.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %16, %struct.sv* %17, i32 16)
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %18, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %do.end14, %if.then1, %if.then
  %19 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSVpvn_share(i8* %src, i32 %len, i32 %hash) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %hash.addr = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %is_utf8 = alloca i8, align 1
  %orig_src = alloca i8*, align 8
  %tmplen = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 %hash, i32* %hash.addr, align 4
  store i8 0, i8* %is_utf8, align 1
  %0 = load i8*, i8** %src.addr, align 8
  store i8* %0, i8** %orig_src, align 8
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 0, %2
  %conv = sext i32 %sub to i64
  store i64 %conv, i64* %tmplen, align 8
  store i8 1, i8* %is_utf8, align 1
  %3 = load i8*, i8** %src.addr, align 8
  %call = call i8* @Perl_bytes_from_utf8(i8* %3, i64* %tmplen, i8* %is_utf8)
  store i8* %call, i8** %src.addr, align 8
  %4 = load i64, i64* %tmplen, align 8
  %conv1 = trunc i64 %4 to i32
  store i32 %conv1, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %hash.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  %6 = load i8*, i8** %src.addr, align 8
  %7 = load i32, i32* %len.addr, align 4
  %conv3 = sext i32 %7 to i64
  %call4 = call i32 @S_perl_hash_one_at_a_time_hard(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.43, i64 0, i64 0), i8* %6, i64 %conv3)
  store i32 %call4, i32* %hash.addr, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  br label %do.body

do.body:                                          ; preds = %if.end5
  %8 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool6 = icmp ne %struct.sv* %8, null
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %do.body
  br label %do.body8

do.body8:                                         ; preds = %if.then7
  %9 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %9, %struct.sv** %sv, align 8
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 0
  %11 = load i8*, i8** %sv_any, align 8
  %12 = bitcast i8* %11 to %struct.sv*
  store %struct.sv* %12, %struct.sv** @PL_sv_root, align 8
  %13 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %13, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body8
  br label %if.end10

if.else:                                          ; preds = %do.body
  %call9 = call %struct.sv* @S_more_sv()
  store %struct.sv* %call9, %struct.sv** %sv, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.else, %do.end
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any11 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  store i8* null, i8** %sv_any11, align 8
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end12

do.end12:                                         ; preds = %if.end10
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_upgrade(%struct.sv* %17, i32 3)
  br label %do.body13

do.body13:                                        ; preds = %do.end12
  %18 = load i8*, i8** %src.addr, align 8
  %19 = load i8, i8* %is_utf8, align 1
  %tobool14 = trunc i8 %19 to i1
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body13
  %20 = load i32, i32* %len.addr, align 4
  %sub16 = sub nsw i32 0, %20
  br label %cond.end

cond.false:                                       ; preds = %do.body13
  %21 = load i32, i32* %len.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub16, %cond.true ], [ %21, %cond.false ]
  %22 = load i32, i32* %hash.addr, align 4
  %call17 = call %struct.hek* @Perl_share_hek(i8* %18, i32 %cond, i32 %22)
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %call17, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  store i8* %arraydecay, i8** %svu_pv, align 8
  br label %do.end18

do.end18:                                         ; preds = %cond.end
  br label %do.body19

do.body19:                                        ; preds = %do.end18
  %24 = load i32, i32* %len.addr, align 4
  %conv20 = sext i32 %24 to i64
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any21, align 8
  %27 = bitcast i8* %26 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %27, i32 0, i32 2
  store i64 %conv20, i64* %xpv_cur, align 8
  br label %do.end22

do.end22:                                         ; preds = %do.body19
  br label %do.body23

do.body23:                                        ; preds = %do.end22
  %28 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any24, align 8
  %30 = bitcast i8* %29 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %30, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  store i64 0, i64* %xpvlenu_len, align 8
  br label %do.end25

do.end25:                                         ; preds = %do.body23
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags26, align 4
  %or = or i32 %32, 268435456
  store i32 %or, i32* %sv_flags26, align 4
  %33 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags27, align 4
  %or28 = or i32 %34, 17408
  store i32 %or28, i32* %sv_flags27, align 4
  %35 = load i8, i8* %is_utf8, align 1
  %tobool29 = trunc i8 %35 to i1
  br i1 %tobool29, label %if.then30, label %if.end33

if.then30:                                        ; preds = %do.end25
  %36 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags31, align 4
  %or32 = or i32 %37, 536870912
  store i32 %or32, i32* %sv_flags31, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.then30, %do.end25
  %38 = load i8*, i8** %src.addr, align 8
  %39 = load i8*, i8** %orig_src, align 8
  %cmp34 = icmp ne i8* %38, %39
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.end33
  %40 = load i8*, i8** %src.addr, align 8
  call void @Perl_safesysfree(i8* %40)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %if.end33
  %41 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %41
}

declare dso_local i8* @Perl_bytes_from_utf8(i8*, i64*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_perl_hash_one_at_a_time_hard(i8* %seed, i8* %str, i64 %len) #0 {
entry:
  %seed.addr = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %end = alloca i8*, align 8
  %hash = alloca i32, align 4
  store i8* %seed, i8** %seed.addr, align 8
  store i8* %str, i8** %str.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  %1 = load i64, i64* %len.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %1
  store i8* %add.ptr, i8** %end, align 8
  %2 = load i8*, i8** %seed.addr, align 8
  %3 = bitcast i8* %2 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = load i64, i64* %len.addr, align 8
  %conv = trunc i64 %5 to i32
  %add = add i32 %4, %conv
  store i32 %add, i32* %hash, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i8*, i8** %str.addr, align 8
  %7 = load i8*, i8** %end, align 8
  %cmp = icmp ult i8* %6, %7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %hash, align 4
  %shl = shl i32 %8, 10
  %9 = load i32, i32* %hash, align 4
  %add2 = add i32 %9, %shl
  store i32 %add2, i32* %hash, align 4
  %10 = load i32, i32* %hash, align 4
  %shr = lshr i32 %10, 6
  %11 = load i32, i32* %hash, align 4
  %xor = xor i32 %11, %shr
  store i32 %xor, i32* %hash, align 4
  %12 = load i8*, i8** %str.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 8
  %13 = load i8, i8* %12, align 1
  %conv3 = zext i8 %13 to i32
  %14 = load i32, i32* %hash, align 4
  %add4 = add i32 %14, %conv3
  store i32 %add4, i32* %hash, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load i32, i32* %hash, align 4
  %shl5 = shl i32 %15, 10
  %16 = load i32, i32* %hash, align 4
  %add6 = add i32 %16, %shl5
  store i32 %add6, i32* %hash, align 4
  %17 = load i32, i32* %hash, align 4
  %shr7 = lshr i32 %17, 6
  %18 = load i32, i32* %hash, align 4
  %xor8 = xor i32 %18, %shr7
  store i32 %xor8, i32* %hash, align 4
  %19 = load i8*, i8** %seed.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %19, i64 4
  %20 = load i8, i8* %arrayidx, align 1
  %conv9 = zext i8 %20 to i32
  %21 = load i32, i32* %hash, align 4
  %add10 = add i32 %21, %conv9
  store i32 %add10, i32* %hash, align 4
  %22 = load i32, i32* %hash, align 4
  %shl11 = shl i32 %22, 10
  %23 = load i32, i32* %hash, align 4
  %add12 = add i32 %23, %shl11
  store i32 %add12, i32* %hash, align 4
  %24 = load i32, i32* %hash, align 4
  %shr13 = lshr i32 %24, 6
  %25 = load i32, i32* %hash, align 4
  %xor14 = xor i32 %25, %shr13
  store i32 %xor14, i32* %hash, align 4
  %26 = load i8*, i8** %seed.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %26, i64 5
  %27 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %27 to i32
  %28 = load i32, i32* %hash, align 4
  %add17 = add i32 %28, %conv16
  store i32 %add17, i32* %hash, align 4
  %29 = load i32, i32* %hash, align 4
  %shl18 = shl i32 %29, 10
  %30 = load i32, i32* %hash, align 4
  %add19 = add i32 %30, %shl18
  store i32 %add19, i32* %hash, align 4
  %31 = load i32, i32* %hash, align 4
  %shr20 = lshr i32 %31, 6
  %32 = load i32, i32* %hash, align 4
  %xor21 = xor i32 %32, %shr20
  store i32 %xor21, i32* %hash, align 4
  %33 = load i8*, i8** %seed.addr, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %33, i64 6
  %34 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %34 to i32
  %35 = load i32, i32* %hash, align 4
  %add24 = add i32 %35, %conv23
  store i32 %add24, i32* %hash, align 4
  %36 = load i32, i32* %hash, align 4
  %shl25 = shl i32 %36, 10
  %37 = load i32, i32* %hash, align 4
  %add26 = add i32 %37, %shl25
  store i32 %add26, i32* %hash, align 4
  %38 = load i32, i32* %hash, align 4
  %shr27 = lshr i32 %38, 6
  %39 = load i32, i32* %hash, align 4
  %xor28 = xor i32 %39, %shr27
  store i32 %xor28, i32* %hash, align 4
  %40 = load i8*, i8** %seed.addr, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %40, i64 7
  %41 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %41 to i32
  %42 = load i32, i32* %hash, align 4
  %add31 = add i32 %42, %conv30
  store i32 %add31, i32* %hash, align 4
  %43 = load i32, i32* %hash, align 4
  %shl32 = shl i32 %43, 10
  %44 = load i32, i32* %hash, align 4
  %add33 = add i32 %44, %shl32
  store i32 %add33, i32* %hash, align 4
  %45 = load i32, i32* %hash, align 4
  %shr34 = lshr i32 %45, 6
  %46 = load i32, i32* %hash, align 4
  %xor35 = xor i32 %46, %shr34
  store i32 %xor35, i32* %hash, align 4
  %47 = load i32, i32* %hash, align 4
  %shl36 = shl i32 %47, 3
  %48 = load i32, i32* %hash, align 4
  %add37 = add i32 %48, %shl36
  store i32 %add37, i32* %hash, align 4
  %49 = load i32, i32* %hash, align 4
  %shr38 = lshr i32 %49, 11
  %50 = load i32, i32* %hash, align 4
  %xor39 = xor i32 %50, %shr38
  store i32 %xor39, i32* %hash, align 4
  %51 = load i32, i32* %hash, align 4
  %52 = load i32, i32* %hash, align 4
  %shl40 = shl i32 %52, 15
  %add41 = add i32 %51, %shl40
  ret i32 %add41
}

declare dso_local %struct.hek* @Perl_share_hek(i8*, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSVpv_share(i8* %src, i32 %hash) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %hash.addr = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i32 %hash, i32* %hash.addr, align 4
  %0 = load i8*, i8** %src.addr, align 8
  %1 = load i8*, i8** %src.addr, align 8
  %call = call i64 @strlen(i8* %1) #8
  %conv = trunc i64 %call to i32
  %2 = load i32, i32* %hash.addr, align 4
  %call1 = call %struct.sv* @Perl_newSVpvn_share(i8* %0, i32 %conv, i32 %2)
  ret %struct.sv* %call1
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #6

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_vnewSVpvf(i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %pat.addr = alloca i8*, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  %sv = alloca %struct.sv*, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %if.end

if.else:                                          ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  store i8* null, i8** %sv_any2, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end3

do.end3:                                          ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %10 = load i8*, i8** %pat.addr, align 8
  %11 = load i8*, i8** %pat.addr, align 8
  %call4 = call i64 @strlen(i8* %11) #8
  %12 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  call void @Perl_sv_vsetpvfn(%struct.sv* %9, i8* %10, i64 %call4, [1 x %struct.__va_list_tag]* %12, %struct.sv** null, i32 0, i8* null)
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %13
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #6

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_vsetpvfn(%struct.sv* %sv, i8* %pat, i64 %patlen, [1 x %struct.__va_list_tag]* %args, %struct.sv** %svargs, i32 %svmax, i8* %maybe_tainted) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %patlen.addr = alloca i64, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  %svargs.addr = alloca %struct.sv**, align 8
  %svmax.addr = alloca i32, align 4
  %maybe_tainted.addr = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store i64 %patlen, i64* %patlen.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  store %struct.sv** %svargs, %struct.sv*** %svargs.addr, align 8
  store i32 %svmax, i32* %svmax.addr, align 4
  store i8* %maybe_tainted, i8** %maybe_tainted.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i64 0)
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %2 = load i8*, i8** %pat.addr, align 8
  %3 = load i64, i64* %patlen.addr, align 8
  %4 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %5 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %6 = load i32, i32* %svmax.addr, align 4
  %7 = load i8*, i8** %maybe_tainted.addr, align 8
  call void @Perl_sv_vcatpvfn_flags(%struct.sv* %1, i8* %2, i64 %3, [1 x %struct.__va_list_tag]* %4, %struct.sv** %5, i32 %6, i8* %7, i32 0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSVnv(double %n) #0 {
entry:
  %n.addr = alloca double, align 8
  %sv = alloca %struct.sv*, align 8
  store double %n, double* %n.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %if.end

if.else:                                          ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  store i8* null, i8** %sv_any2, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end3

do.end3:                                          ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %10 = load double, double* %n.addr, align 8
  call void @Perl_sv_setnv(%struct.sv* %9, double %10)
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSViv(i64 %i) #0 {
entry:
  %i.addr = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  store i64 %i, i64* %i.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %if.end

if.else:                                          ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  store i8* null, i8** %sv_any2, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end3

do.end3:                                          ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_iv = bitcast %union.anon* %sv_u to i64*
  %10 = bitcast i64* %svu_iv to i8*
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 sub (i64 0, i64 ptrtoint (i64* getelementptr inbounds (%struct.xpviv, %struct.xpviv* null, i32 0, i32 4, i32 0) to i64))
  %11 = bitcast i8* %add.ptr to %struct.xpviv*
  %12 = bitcast %struct.xpviv* %11 to i8*
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any4 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  store i8* %12, i8** %sv_any4, align 8
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags5, align 4
  %or = or i32 %15, 1
  store i32 %or, i32* %sv_flags5, align 4
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags6, align 4
  %or7 = or i32 %17, 4352
  store i32 %or7, i32* %sv_flags6, align 4
  br label %do.body8

do.body8:                                         ; preds = %do.end3
  %18 = load i64, i64* %i.addr, align 8
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any9, align 8
  %21 = bitcast i8* %20 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %21, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  store i64 %18, i64* %xivu_iv, align 8
  br label %do.end10

do.end10:                                         ; preds = %do.body8
  br label %do.body11

do.body11:                                        ; preds = %do.end10
  %22 = load i8, i8* @PL_tainting, align 1
  %tobool12 = trunc i8 %22 to i1
  br i1 %tobool12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body11
  br i1 true, label %if.then13, label %if.end26

cond.false:                                       ; preds = %do.body11
  br i1 false, label %if.then13, label %if.end26

if.then13:                                        ; preds = %cond.false, %cond.true
  %23 = load i8, i8* @PL_tainted, align 1
  %tobool14 = trunc i8 %23 to i1
  br i1 %tobool14, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %if.then13
  br i1 true, label %if.then17, label %if.end25

cond.false16:                                     ; preds = %if.then13
  br i1 false, label %if.then17, label %if.end25

if.then17:                                        ; preds = %cond.false16, %cond.true15
  br label %do.body18

do.body18:                                        ; preds = %if.then17
  %24 = load i8, i8* @PL_tainting, align 1
  %tobool19 = trunc i8 %24 to i1
  br i1 %tobool19, label %cond.true20, label %cond.false21

cond.true20:                                      ; preds = %do.body18
  br i1 true, label %if.then22, label %if.end23

cond.false21:                                     ; preds = %do.body18
  br i1 false, label %if.then22, label %if.end23

if.then22:                                        ; preds = %cond.false21, %cond.true20
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_magic(%struct.sv* %25, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %cond.false21, %cond.true20
  br label %do.end24

do.end24:                                         ; preds = %if.end23
  br label %if.end25

if.end25:                                         ; preds = %do.end24, %cond.false16, %cond.true15
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %cond.false, %cond.true
  br label %do.end27

do.end27:                                         ; preds = %if.end26
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newRV_noinc(%struct.sv* %tmpRef) #0 {
entry:
  %tmpRef.addr = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  store %struct.sv* %tmpRef, %struct.sv** %tmpRef.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %if.end

if.else:                                          ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  store i8* null, i8** %sv_any2, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end3

do.end3:                                          ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_iv = bitcast %union.anon* %sv_u to i64*
  %10 = bitcast i64* %svu_iv to i8*
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 sub (i64 0, i64 ptrtoint (i64* getelementptr inbounds (%struct.xpviv, %struct.xpviv* null, i32 0, i32 4, i32 0) to i64))
  %11 = bitcast i8* %add.ptr to %struct.xpviv*
  %12 = bitcast %struct.xpviv* %11 to i8*
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any4 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  store i8* %12, i8** %sv_any4, align 8
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags5, align 4
  %or = or i32 %15, 1
  store i32 %or, i32* %sv_flags5, align 4
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags6, align 4
  %or7 = or i32 %17, 2048
  store i32 %or7, i32* %sv_flags6, align 4
  br label %do.body8

do.body8:                                         ; preds = %do.end3
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any9, align 8
  %20 = bitcast i8* %19 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %20, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  store i64 0, i64* %xivu_iv, align 8
  br label %do.end10

do.end10:                                         ; preds = %do.body8
  %21 = load %struct.sv*, %struct.sv** %tmpRef.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags11, align 4
  %and = and i32 %22, -524289
  store i32 %and, i32* %sv_flags11, align 4
  br label %do.body12

do.body12:                                        ; preds = %do.end10
  %23 = load %struct.sv*, %struct.sv** %tmpRef.addr, align 8
  %24 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u13 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u13 to %struct.sv**
  store %struct.sv* %23, %struct.sv** %svu_rv, align 8
  br label %do.end14

do.end14:                                         ; preds = %do.body12
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newRV(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 1
  %1 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %1, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %4 = bitcast i8* %3 to %struct.sv*
  %call = call %struct.sv* @Perl_newRV_noinc(%struct.sv* %4)
  ret %struct.sv* %call
}

declare dso_local void @Perl_ck_warner_d(i32, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_reset(i8* %s, %struct.hv* %stash) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %stash.addr = alloca %struct.hv*, align 8
  store i8* %s, i8** %s.addr, align 8
  store %struct.hv* %stash, %struct.hv** %stash.addr, align 8
  %0 = load i8*, i8** %s.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %2, %cond.true ], [ null, %cond.false ]
  %3 = load i8*, i8** %s.addr, align 8
  %call = call i64 @strlen(i8* %3) #8
  %4 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  call void @Perl_sv_resetpvn(i8* %cond, i64 %call, %struct.hv* %4)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_resetpvn(i8* %s, i64 %len, %struct.hv* %stash) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %stash.addr = alloca %struct.hv*, align 8
  %todo = alloca [256 x i8], align 16
  %send = alloca i8*, align 8
  %mg = alloca %struct.magic*, align 8
  %count = alloca i32, align 4
  %pmp = alloca %struct.pmop**, align 8
  %end = alloca %struct.pmop**, align 8
  %max = alloca i32, align 4
  %i = alloca i32, align 4
  %entry35 = alloca %struct.he*, align 8
  %gv = alloca %struct.gv*, align 8
  %sv = alloca %struct.sv*, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store %struct.hv* %stash, %struct.hv** %stash.addr, align 8
  %0 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %tobool = icmp ne %struct.hv* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 255
  %cmp = icmp ne i32 %and, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %while.end227

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i8*, i8** %s.addr, align 8
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %if.end9, label %if.then2

if.then2:                                         ; preds = %if.end
  %4 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %5 = bitcast %struct.hv* %4 to %struct.sv*
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %5, i32 58)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %6 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool3 = icmp ne %struct.magic* %6, null
  br i1 %tobool3, label %if.then4, label %if.end8

if.then4:                                         ; preds = %if.then2
  %7 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %7, i32 0, i32 5
  %8 = load i64, i64* %mg_len, align 8
  %div = udiv i64 %8, 8
  %conv = trunc i64 %div to i32
  store i32 %conv, i32* %count, align 4
  %9 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %9, i32 0, i32 7
  %10 = load i8*, i8** %mg_ptr, align 8
  %11 = bitcast i8* %10 to %struct.pmop**
  store %struct.pmop** %11, %struct.pmop*** %pmp, align 8
  %12 = load %struct.pmop**, %struct.pmop*** %pmp, align 8
  %13 = load i32, i32* %count, align 4
  %idx.ext = zext i32 %13 to i64
  %add.ptr = getelementptr inbounds %struct.pmop*, %struct.pmop** %12, i64 %idx.ext
  store %struct.pmop** %add.ptr, %struct.pmop*** %end, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then4
  %14 = load %struct.pmop**, %struct.pmop*** %pmp, align 8
  %15 = load %struct.pmop**, %struct.pmop*** %end, align 8
  %cmp5 = icmp ult %struct.pmop** %14, %15
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load %struct.pmop**, %struct.pmop*** %pmp, align 8
  %17 = load %struct.pmop*, %struct.pmop** %16, align 8
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %17, i32 0, i32 10
  %18 = load i32, i32* %op_pmflags, align 8
  %and7 = and i32 %18, -2097153
  store i32 %and7, i32* %op_pmflags, align 8
  %19 = load %struct.pmop**, %struct.pmop*** %pmp, align 8
  %incdec.ptr = getelementptr inbounds %struct.pmop*, %struct.pmop** %19, i32 1
  store %struct.pmop** %incdec.ptr, %struct.pmop*** %pmp, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end8

if.end8:                                          ; preds = %while.end, %if.then2
  br label %while.end227

if.end9:                                          ; preds = %if.end
  %20 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_u = getelementptr inbounds %struct.hv, %struct.hv* %20, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u to %struct.he***
  %21 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %tobool10 = icmp ne %struct.he** %21, null
  br i1 %tobool10, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end9
  br label %while.end227

if.end12:                                         ; preds = %if.end9
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %todo, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay, i8 0, i64 256, i1 false)
  %22 = load i8*, i8** %s.addr, align 8
  %23 = load i64, i64* %len.addr, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %22, i64 %23
  store i8* %add.ptr13, i8** %send, align 8
  br label %while.cond14

while.cond14:                                     ; preds = %for.end226, %if.end12
  %24 = load i8*, i8** %s.addr, align 8
  %25 = load i8*, i8** %send, align 8
  %cmp15 = icmp ult i8* %24, %25
  br i1 %cmp15, label %while.body17, label %while.end227

while.body17:                                     ; preds = %while.cond14
  %26 = load i8*, i8** %s.addr, align 8
  %27 = load i8, i8* %26, align 1
  %conv18 = zext i8 %27 to i32
  store i32 %conv18, i32* %i, align 4
  %28 = load i8*, i8** %s.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %28, i64 1
  %29 = load i8, i8* %arrayidx, align 1
  %conv19 = sext i8 %29 to i32
  %cmp20 = icmp eq i32 %conv19, 45
  br i1 %cmp20, label %if.then22, label %if.end24

if.then22:                                        ; preds = %while.body17
  %30 = load i8*, i8** %s.addr, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %30, i64 2
  store i8* %add.ptr23, i8** %s.addr, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %while.body17
  %31 = load i8*, i8** %s.addr, align 8
  %incdec.ptr25 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr25, i8** %s.addr, align 8
  %32 = load i8, i8* %31, align 1
  %conv26 = zext i8 %32 to i32
  store i32 %conv26, i32* %max, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end24
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %max, align 4
  %cmp27 = icmp sle i32 %33, %34
  br i1 %cmp27, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %35 = load i32, i32* %i, align 4
  %idxprom = sext i32 %35 to i64
  %arrayidx29 = getelementptr inbounds [256 x i8], [256 x i8]* %todo, i64 0, i64 %idxprom
  store i8 1, i8* %arrayidx29, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc224, %for.end
  %37 = load i32, i32* %i, align 4
  %38 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any = getelementptr inbounds %struct.hv, %struct.hv* %38, i32 0, i32 0
  %39 = load %struct.xpvhv*, %struct.xpvhv** %sv_any, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %39, i32 0, i32 3
  %40 = load i64, i64* %xhv_max, align 8
  %conv31 = trunc i64 %40 to i32
  %cmp32 = icmp sle i32 %37, %conv31
  br i1 %cmp32, label %for.body34, label %for.end226

for.body34:                                       ; preds = %for.cond30
  %41 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_u36 = getelementptr inbounds %struct.hv, %struct.hv* %41, i32 0, i32 3
  %svu_hash37 = bitcast %union.anon.4* %sv_u36 to %struct.he***
  %42 = load %struct.he**, %struct.he*** %svu_hash37, align 8
  %43 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %43 to i64
  %arrayidx39 = getelementptr inbounds %struct.he*, %struct.he** %42, i64 %idxprom38
  %44 = load %struct.he*, %struct.he** %arrayidx39, align 8
  store %struct.he* %44, %struct.he** %entry35, align 8
  br label %for.cond40

for.cond40:                                       ; preds = %for.inc222, %for.body34
  %45 = load %struct.he*, %struct.he** %entry35, align 8
  %tobool41 = icmp ne %struct.he* %45, null
  br i1 %tobool41, label %for.body42, label %for.end223

for.body42:                                       ; preds = %for.cond40
  %46 = load %struct.he*, %struct.he** %entry35, align 8
  %hent_hek = getelementptr inbounds %struct.he, %struct.he* %46, i32 0, i32 1
  %47 = load %struct.hek*, %struct.hek** %hent_hek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %47, i32 0, i32 2
  %arraydecay43 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %48 = load i8, i8* %arraydecay43, align 4
  %idxprom44 = zext i8 %48 to i64
  %arrayidx45 = getelementptr inbounds [256 x i8], [256 x i8]* %todo, i64 0, i64 %idxprom44
  %49 = load i8, i8* %arrayidx45, align 1
  %tobool46 = icmp ne i8 %49, 0
  br i1 %tobool46, label %if.end48, label %if.then47

if.then47:                                        ; preds = %for.body42
  br label %for.inc222

if.end48:                                         ; preds = %for.body42
  %50 = load %struct.he*, %struct.he** %entry35, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %50, i32 0, i32 2
  %hent_val = bitcast %union.anon.0* %he_valu to %struct.sv**
  %51 = load %struct.sv*, %struct.sv** %hent_val, align 8
  %52 = bitcast %struct.sv* %51 to i8*
  %53 = bitcast i8* %52 to %struct.gv*
  store %struct.gv* %53, %struct.gv** %gv, align 8
  %54 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u49 = getelementptr inbounds %struct.gv, %struct.gv* %54, i32 0, i32 3
  %svu_gp = bitcast %union.anon.6* %sv_u49 to %struct.gp**
  %55 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr50 = getelementptr inbounds %struct.gp, %struct.gp* %55, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr50, i32 0, i32 0
  %56 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  store %struct.sv* %56, %struct.sv** %sv, align 8
  %57 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool51 = icmp ne %struct.sv* %57, null
  br i1 %tobool51, label %land.lhs.true, label %if.end74

land.lhs.true:                                    ; preds = %if.end48
  %58 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %59, 134283264
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %if.end74, label %if.then55

if.then55:                                        ; preds = %land.lhs.true
  %60 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %61, 427886592
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.then59, label %if.end60

if.then59:                                        ; preds = %if.then55
  %62 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %62, i32 4)
  br label %if.end60

if.end60:                                         ; preds = %if.then59, %if.then55
  %63 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %64, 255
  %cmp63 = icmp eq i32 %and62, 9
  br i1 %cmp63, label %if.end73, label %if.then65

if.then65:                                        ; preds = %if.end60
  %65 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %66, 1610547455
  store i32 %and67, i32* %sv_flags66, align 4
  %67 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags68 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags68, align 4
  %and69 = and i32 %68, 33554432
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then65
  %69 = load %struct.sv*, %struct.sv** %sv, align 8
  %call71 = call i32 @Perl_sv_backoff(%struct.sv* %69)
  %tobool72 = icmp ne i32 %call71, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then65
  %70 = phi i1 [ false, %if.then65 ], [ %tobool72, %land.rhs ]
  %land.ext = zext i1 %70 to i32
  br label %if.end73

if.end73:                                         ; preds = %land.end, %if.end60
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %land.lhs.true, %if.end48
  %71 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u75 = getelementptr inbounds %struct.gv, %struct.gv* %71, i32 0, i32 3
  %svu_gp76 = bitcast %union.anon.6* %sv_u75 to %struct.gp**
  %72 = load %struct.gp*, %struct.gp** %svu_gp76, align 8
  %add.ptr77 = getelementptr inbounds %struct.gp, %struct.gp* %72, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr77, i32 0, i32 6
  %73 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool78 = icmp ne %struct.av* %73, null
  br i1 %tobool78, label %if.then79, label %if.end84

if.then79:                                        ; preds = %if.end74
  %74 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u80 = getelementptr inbounds %struct.gv, %struct.gv* %74, i32 0, i32 3
  %svu_gp81 = bitcast %union.anon.6* %sv_u80 to %struct.gp**
  %75 = load %struct.gp*, %struct.gp** %svu_gp81, align 8
  %add.ptr82 = getelementptr inbounds %struct.gp, %struct.gp* %75, i64 0
  %gp_av83 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr82, i32 0, i32 6
  %76 = load %struct.av*, %struct.av** %gp_av83, align 8
  call void @Perl_av_clear(%struct.av* %76)
  br label %if.end84

if.end84:                                         ; preds = %if.then79, %if.end74
  %77 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u85 = getelementptr inbounds %struct.gv, %struct.gv* %77, i32 0, i32 3
  %svu_gp86 = bitcast %union.anon.6* %sv_u85 to %struct.gp**
  %78 = load %struct.gp*, %struct.gp** %svu_gp86, align 8
  %add.ptr87 = getelementptr inbounds %struct.gp, %struct.gp* %78, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr87, i32 0, i32 5
  %79 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool88 = icmp ne %struct.hv* %79, null
  br i1 %tobool88, label %land.lhs.true89, label %if.end221

land.lhs.true89:                                  ; preds = %if.end84
  %80 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u90 = getelementptr inbounds %struct.gv, %struct.gv* %80, i32 0, i32 3
  %svu_gp91 = bitcast %union.anon.6* %sv_u90 to %struct.gp**
  %81 = load %struct.gp*, %struct.gp** %svu_gp91, align 8
  %add.ptr92 = getelementptr inbounds %struct.gp, %struct.gp* %81, i64 0
  %gp_hv93 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr92, i32 0, i32 5
  %82 = load %struct.hv*, %struct.hv** %gp_hv93, align 8
  %sv_flags94 = getelementptr inbounds %struct.hv, %struct.hv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags94, align 4
  %and95 = and i32 %83, 33554432
  %tobool96 = icmp ne i32 %and95, 0
  br i1 %tobool96, label %land.lhs.true97, label %cond.false215

land.lhs.true97:                                  ; preds = %land.lhs.true89
  %84 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u98 = getelementptr inbounds %struct.gv, %struct.gv* %84, i32 0, i32 3
  %svu_gp99 = bitcast %union.anon.6* %sv_u98 to %struct.gp**
  %85 = load %struct.gp*, %struct.gp** %svu_gp99, align 8
  %add.ptr100 = getelementptr inbounds %struct.gp, %struct.gp* %85, i64 0
  %gp_hv101 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr100, i32 0, i32 5
  %86 = load %struct.hv*, %struct.hv** %gp_hv101, align 8
  %sv_u102 = getelementptr inbounds %struct.hv, %struct.hv* %86, i32 0, i32 3
  %svu_hash103 = bitcast %union.anon.4* %sv_u102 to %struct.he***
  %87 = load %struct.he**, %struct.he*** %svu_hash103, align 8
  %88 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u104 = getelementptr inbounds %struct.gv, %struct.gv* %88, i32 0, i32 3
  %svu_gp105 = bitcast %union.anon.6* %sv_u104 to %struct.gp**
  %89 = load %struct.gp*, %struct.gp** %svu_gp105, align 8
  %add.ptr106 = getelementptr inbounds %struct.gp, %struct.gp* %89, i64 0
  %gp_hv107 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr106, i32 0, i32 5
  %90 = load %struct.hv*, %struct.hv** %gp_hv107, align 8
  %sv_any108 = getelementptr inbounds %struct.hv, %struct.hv* %90, i32 0, i32 0
  %91 = load %struct.xpvhv*, %struct.xpvhv** %sv_any108, align 8
  %xhv_max109 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %91, i32 0, i32 3
  %92 = load i64, i64* %xhv_max109, align 8
  %add = add i64 %92, 1
  %arrayidx110 = getelementptr inbounds %struct.he*, %struct.he** %87, i64 %add
  %93 = bitcast %struct.he** %arrayidx110 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %93, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %94 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool111 = icmp ne %struct.hek* %94, null
  br i1 %tobool111, label %land.lhs.true112, label %cond.false215

land.lhs.true112:                                 ; preds = %land.lhs.true97
  %95 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u113 = getelementptr inbounds %struct.gv, %struct.gv* %95, i32 0, i32 3
  %svu_gp114 = bitcast %union.anon.6* %sv_u113 to %struct.gp**
  %96 = load %struct.gp*, %struct.gp** %svu_gp114, align 8
  %add.ptr115 = getelementptr inbounds %struct.gp, %struct.gp* %96, i64 0
  %gp_hv116 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr115, i32 0, i32 5
  %97 = load %struct.hv*, %struct.hv** %gp_hv116, align 8
  %sv_u117 = getelementptr inbounds %struct.hv, %struct.hv* %97, i32 0, i32 3
  %svu_hash118 = bitcast %union.anon.4* %sv_u117 to %struct.he***
  %98 = load %struct.he**, %struct.he*** %svu_hash118, align 8
  %99 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u119 = getelementptr inbounds %struct.gv, %struct.gv* %99, i32 0, i32 3
  %svu_gp120 = bitcast %union.anon.6* %sv_u119 to %struct.gp**
  %100 = load %struct.gp*, %struct.gp** %svu_gp120, align 8
  %add.ptr121 = getelementptr inbounds %struct.gp, %struct.gp* %100, i64 0
  %gp_hv122 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr121, i32 0, i32 5
  %101 = load %struct.hv*, %struct.hv** %gp_hv122, align 8
  %sv_any123 = getelementptr inbounds %struct.hv, %struct.hv* %101, i32 0, i32 0
  %102 = load %struct.xpvhv*, %struct.xpvhv** %sv_any123, align 8
  %xhv_max124 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %102, i32 0, i32 3
  %103 = load i64, i64* %xhv_max124, align 8
  %add125 = add i64 %103, 1
  %arrayidx126 = getelementptr inbounds %struct.he*, %struct.he** %98, i64 %add125
  %104 = bitcast %struct.he** %arrayidx126 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %104, i32 0, i32 4
  %105 = load i32, i32* %xhv_name_count, align 4
  %tobool127 = icmp ne i32 %105, 0
  br i1 %tobool127, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true112
  %106 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u128 = getelementptr inbounds %struct.gv, %struct.gv* %106, i32 0, i32 3
  %svu_gp129 = bitcast %union.anon.6* %sv_u128 to %struct.gp**
  %107 = load %struct.gp*, %struct.gp** %svu_gp129, align 8
  %add.ptr130 = getelementptr inbounds %struct.gp, %struct.gp* %107, i64 0
  %gp_hv131 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr130, i32 0, i32 5
  %108 = load %struct.hv*, %struct.hv** %gp_hv131, align 8
  %sv_u132 = getelementptr inbounds %struct.hv, %struct.hv* %108, i32 0, i32 3
  %svu_hash133 = bitcast %union.anon.4* %sv_u132 to %struct.he***
  %109 = load %struct.he**, %struct.he*** %svu_hash133, align 8
  %110 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u134 = getelementptr inbounds %struct.gv, %struct.gv* %110, i32 0, i32 3
  %svu_gp135 = bitcast %union.anon.6* %sv_u134 to %struct.gp**
  %111 = load %struct.gp*, %struct.gp** %svu_gp135, align 8
  %add.ptr136 = getelementptr inbounds %struct.gp, %struct.gp* %111, i64 0
  %gp_hv137 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr136, i32 0, i32 5
  %112 = load %struct.hv*, %struct.hv** %gp_hv137, align 8
  %sv_any138 = getelementptr inbounds %struct.hv, %struct.hv* %112, i32 0, i32 0
  %113 = load %struct.xpvhv*, %struct.xpvhv** %sv_any138, align 8
  %xhv_max139 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %113, i32 0, i32 3
  %114 = load i64, i64* %xhv_max139, align 8
  %add140 = add i64 %114, 1
  %arrayidx141 = getelementptr inbounds %struct.he*, %struct.he** %109, i64 %add140
  %115 = bitcast %struct.he** %arrayidx141 to %struct.xpvhv_aux*
  %xhv_name_u142 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %115, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u142 to %struct.hek***
  %116 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %117 = load %struct.hek*, %struct.hek** %116, align 8
  %tobool143 = icmp ne %struct.hek* %117, null
  br i1 %tobool143, label %cond.true161, label %cond.false215

cond.false:                                       ; preds = %land.lhs.true112
  %118 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u144 = getelementptr inbounds %struct.gv, %struct.gv* %118, i32 0, i32 3
  %svu_gp145 = bitcast %union.anon.6* %sv_u144 to %struct.gp**
  %119 = load %struct.gp*, %struct.gp** %svu_gp145, align 8
  %add.ptr146 = getelementptr inbounds %struct.gp, %struct.gp* %119, i64 0
  %gp_hv147 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr146, i32 0, i32 5
  %120 = load %struct.hv*, %struct.hv** %gp_hv147, align 8
  %sv_u148 = getelementptr inbounds %struct.hv, %struct.hv* %120, i32 0, i32 3
  %svu_hash149 = bitcast %union.anon.4* %sv_u148 to %struct.he***
  %121 = load %struct.he**, %struct.he*** %svu_hash149, align 8
  %122 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u150 = getelementptr inbounds %struct.gv, %struct.gv* %122, i32 0, i32 3
  %svu_gp151 = bitcast %union.anon.6* %sv_u150 to %struct.gp**
  %123 = load %struct.gp*, %struct.gp** %svu_gp151, align 8
  %add.ptr152 = getelementptr inbounds %struct.gp, %struct.gp* %123, i64 0
  %gp_hv153 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr152, i32 0, i32 5
  %124 = load %struct.hv*, %struct.hv** %gp_hv153, align 8
  %sv_any154 = getelementptr inbounds %struct.hv, %struct.hv* %124, i32 0, i32 0
  %125 = load %struct.xpvhv*, %struct.xpvhv** %sv_any154, align 8
  %xhv_max155 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %125, i32 0, i32 3
  %126 = load i64, i64* %xhv_max155, align 8
  %add156 = add i64 %126, 1
  %arrayidx157 = getelementptr inbounds %struct.he*, %struct.he** %121, i64 %add156
  %127 = bitcast %struct.he** %arrayidx157 to %struct.xpvhv_aux*
  %xhv_name_u158 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %127, i32 0, i32 0
  %xhvnameu_name159 = bitcast %union._xhvnameu* %xhv_name_u158 to %struct.hek**
  %128 = load %struct.hek*, %struct.hek** %xhvnameu_name159, align 8
  %tobool160 = icmp ne %struct.hek* %128, null
  br i1 %tobool160, label %cond.true161, label %cond.false215

cond.true161:                                     ; preds = %cond.false, %cond.true
  %129 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u162 = getelementptr inbounds %struct.gv, %struct.gv* %129, i32 0, i32 3
  %svu_gp163 = bitcast %union.anon.6* %sv_u162 to %struct.gp**
  %130 = load %struct.gp*, %struct.gp** %svu_gp163, align 8
  %add.ptr164 = getelementptr inbounds %struct.gp, %struct.gp* %130, i64 0
  %gp_hv165 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr164, i32 0, i32 5
  %131 = load %struct.hv*, %struct.hv** %gp_hv165, align 8
  %sv_u166 = getelementptr inbounds %struct.hv, %struct.hv* %131, i32 0, i32 3
  %svu_hash167 = bitcast %union.anon.4* %sv_u166 to %struct.he***
  %132 = load %struct.he**, %struct.he*** %svu_hash167, align 8
  %133 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u168 = getelementptr inbounds %struct.gv, %struct.gv* %133, i32 0, i32 3
  %svu_gp169 = bitcast %union.anon.6* %sv_u168 to %struct.gp**
  %134 = load %struct.gp*, %struct.gp** %svu_gp169, align 8
  %add.ptr170 = getelementptr inbounds %struct.gp, %struct.gp* %134, i64 0
  %gp_hv171 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr170, i32 0, i32 5
  %135 = load %struct.hv*, %struct.hv** %gp_hv171, align 8
  %sv_any172 = getelementptr inbounds %struct.hv, %struct.hv* %135, i32 0, i32 0
  %136 = load %struct.xpvhv*, %struct.xpvhv** %sv_any172, align 8
  %xhv_max173 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %136, i32 0, i32 3
  %137 = load i64, i64* %xhv_max173, align 8
  %add174 = add i64 %137, 1
  %arrayidx175 = getelementptr inbounds %struct.he*, %struct.he** %132, i64 %add174
  %138 = bitcast %struct.he** %arrayidx175 to %struct.xpvhv_aux*
  %xhv_name_count176 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %138, i32 0, i32 4
  %139 = load i32, i32* %xhv_name_count176, align 4
  %tobool177 = icmp ne i32 %139, 0
  br i1 %tobool177, label %cond.true178, label %cond.false195

cond.true178:                                     ; preds = %cond.true161
  %140 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u179 = getelementptr inbounds %struct.gv, %struct.gv* %140, i32 0, i32 3
  %svu_gp180 = bitcast %union.anon.6* %sv_u179 to %struct.gp**
  %141 = load %struct.gp*, %struct.gp** %svu_gp180, align 8
  %add.ptr181 = getelementptr inbounds %struct.gp, %struct.gp* %141, i64 0
  %gp_hv182 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr181, i32 0, i32 5
  %142 = load %struct.hv*, %struct.hv** %gp_hv182, align 8
  %sv_u183 = getelementptr inbounds %struct.hv, %struct.hv* %142, i32 0, i32 3
  %svu_hash184 = bitcast %union.anon.4* %sv_u183 to %struct.he***
  %143 = load %struct.he**, %struct.he*** %svu_hash184, align 8
  %144 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u185 = getelementptr inbounds %struct.gv, %struct.gv* %144, i32 0, i32 3
  %svu_gp186 = bitcast %union.anon.6* %sv_u185 to %struct.gp**
  %145 = load %struct.gp*, %struct.gp** %svu_gp186, align 8
  %add.ptr187 = getelementptr inbounds %struct.gp, %struct.gp* %145, i64 0
  %gp_hv188 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr187, i32 0, i32 5
  %146 = load %struct.hv*, %struct.hv** %gp_hv188, align 8
  %sv_any189 = getelementptr inbounds %struct.hv, %struct.hv* %146, i32 0, i32 0
  %147 = load %struct.xpvhv*, %struct.xpvhv** %sv_any189, align 8
  %xhv_max190 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %147, i32 0, i32 3
  %148 = load i64, i64* %xhv_max190, align 8
  %add191 = add i64 %148, 1
  %arrayidx192 = getelementptr inbounds %struct.he*, %struct.he** %143, i64 %add191
  %149 = bitcast %struct.he** %arrayidx192 to %struct.xpvhv_aux*
  %xhv_name_u193 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %149, i32 0, i32 0
  %xhvnameu_names194 = bitcast %union._xhvnameu* %xhv_name_u193 to %struct.hek***
  %150 = load %struct.hek**, %struct.hek*** %xhvnameu_names194, align 8
  %151 = load %struct.hek*, %struct.hek** %150, align 8
  br label %cond.end

cond.false195:                                    ; preds = %cond.true161
  %152 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u196 = getelementptr inbounds %struct.gv, %struct.gv* %152, i32 0, i32 3
  %svu_gp197 = bitcast %union.anon.6* %sv_u196 to %struct.gp**
  %153 = load %struct.gp*, %struct.gp** %svu_gp197, align 8
  %add.ptr198 = getelementptr inbounds %struct.gp, %struct.gp* %153, i64 0
  %gp_hv199 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr198, i32 0, i32 5
  %154 = load %struct.hv*, %struct.hv** %gp_hv199, align 8
  %sv_u200 = getelementptr inbounds %struct.hv, %struct.hv* %154, i32 0, i32 3
  %svu_hash201 = bitcast %union.anon.4* %sv_u200 to %struct.he***
  %155 = load %struct.he**, %struct.he*** %svu_hash201, align 8
  %156 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u202 = getelementptr inbounds %struct.gv, %struct.gv* %156, i32 0, i32 3
  %svu_gp203 = bitcast %union.anon.6* %sv_u202 to %struct.gp**
  %157 = load %struct.gp*, %struct.gp** %svu_gp203, align 8
  %add.ptr204 = getelementptr inbounds %struct.gp, %struct.gp* %157, i64 0
  %gp_hv205 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr204, i32 0, i32 5
  %158 = load %struct.hv*, %struct.hv** %gp_hv205, align 8
  %sv_any206 = getelementptr inbounds %struct.hv, %struct.hv* %158, i32 0, i32 0
  %159 = load %struct.xpvhv*, %struct.xpvhv** %sv_any206, align 8
  %xhv_max207 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %159, i32 0, i32 3
  %160 = load i64, i64* %xhv_max207, align 8
  %add208 = add i64 %160, 1
  %arrayidx209 = getelementptr inbounds %struct.he*, %struct.he** %155, i64 %add208
  %161 = bitcast %struct.he** %arrayidx209 to %struct.xpvhv_aux*
  %xhv_name_u210 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %161, i32 0, i32 0
  %xhvnameu_name211 = bitcast %union._xhvnameu* %xhv_name_u210 to %struct.hek**
  %162 = load %struct.hek*, %struct.hek** %xhvnameu_name211, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false195, %cond.true178
  %cond = phi %struct.hek* [ %151, %cond.true178 ], [ %162, %cond.false195 ]
  %hek_key212 = getelementptr inbounds %struct.hek, %struct.hek* %cond, i32 0, i32 2
  %arraydecay213 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key212, i64 0, i64 0
  %tobool214 = icmp ne i8* %arraydecay213, null
  br i1 %tobool214, label %if.end221, label %if.then216

cond.false215:                                    ; preds = %cond.false, %cond.true, %land.lhs.true97, %land.lhs.true89
  br i1 false, label %if.end221, label %if.then216

if.then216:                                       ; preds = %cond.false215, %cond.end
  %163 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u217 = getelementptr inbounds %struct.gv, %struct.gv* %163, i32 0, i32 3
  %svu_gp218 = bitcast %union.anon.6* %sv_u217 to %struct.gp**
  %164 = load %struct.gp*, %struct.gp** %svu_gp218, align 8
  %add.ptr219 = getelementptr inbounds %struct.gp, %struct.gp* %164, i64 0
  %gp_hv220 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr219, i32 0, i32 5
  %165 = load %struct.hv*, %struct.hv** %gp_hv220, align 8
  call void @Perl_hv_clear(%struct.hv* %165)
  br label %if.end221

if.end221:                                        ; preds = %if.then216, %cond.false215, %cond.end, %if.end84
  br label %for.inc222

for.inc222:                                       ; preds = %if.end221, %if.then47
  %166 = load %struct.he*, %struct.he** %entry35, align 8
  %hent_next = getelementptr inbounds %struct.he, %struct.he* %166, i32 0, i32 0
  %167 = load %struct.he*, %struct.he** %hent_next, align 8
  store %struct.he* %167, %struct.he** %entry35, align 8
  br label %for.cond40

for.end223:                                       ; preds = %for.cond40
  br label %for.inc224

for.inc224:                                       ; preds = %for.end223
  %168 = load i32, i32* %i, align 4
  %inc225 = add nsw i32 %168, 1
  store i32 %inc225, i32* %i, align 4
  br label %for.cond30

for.end226:                                       ; preds = %for.cond30
  br label %while.cond14

while.end227:                                     ; preds = %if.then, %if.end8, %if.then11, %while.cond14
  ret void
}

declare dso_local void @Perl_av_clear(%struct.av*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.io* @Perl_sv_2io(%struct.sv* %sv) #0 {
entry:
  %retval = alloca %struct.io*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %io = alloca %struct.io*, align 8
  %gv = alloca %struct.gv*, align 8
  %newsv = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  switch i32 %and, label %sw.default [
    i32 15, label %sw.bb
    i32 9, label %sw.bb1
    i32 10, label %sw.bb1
  ]

sw.bb:                                            ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %4 = bitcast i8* %3 to %struct.io*
  store %struct.io* %4, %struct.io** %io, align 8
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry, %entry
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %6, 49152
  %cmp = icmp eq i32 %and3, 32768
  br i1 %cmp, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %sw.bb1
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %8, 255
  %cmp6 = icmp eq i32 %and5, 9
  br i1 %cmp6, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %10, 255
  %cmp9 = icmp eq i32 %and8, 10
  br i1 %cmp9, label %if.then, label %if.end25

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  %13 = bitcast i8* %12 to %struct.gv*
  store %struct.gv* %13, %struct.gv** %gv, align 8
  %14 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool = icmp ne %struct.gv* %14, null
  br i1 %tobool, label %land.lhs.true10, label %cond.false

land.lhs.true10:                                  ; preds = %if.then
  %15 = load %struct.gv*, %struct.gv** %gv, align 8
  %16 = bitcast %struct.gv* %15 to %struct.sv*
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %17, 255
  %cmp13 = icmp eq i32 %and12, 9
  br i1 %cmp13, label %land.lhs.true18, label %lor.lhs.false14

lor.lhs.false14:                                  ; preds = %land.lhs.true10
  %18 = load %struct.gv*, %struct.gv** %gv, align 8
  %19 = bitcast %struct.gv* %18 to %struct.sv*
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %20, 255
  %cmp17 = icmp eq i32 %and16, 10
  br i1 %cmp17, label %land.lhs.true18, label %cond.false

land.lhs.true18:                                  ; preds = %lor.lhs.false14, %land.lhs.true10
  %21 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %21, i32 0, i32 3
  %svu_gp = bitcast %union.anon.6* %sv_u to %struct.gp**
  %22 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %22, i64 0
  %tobool19 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true18
  %23 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u20 = getelementptr inbounds %struct.gv, %struct.gv* %23, i32 0, i32 3
  %svu_gp21 = bitcast %union.anon.6* %sv_u20 to %struct.gp**
  %24 = load %struct.gp*, %struct.gp** %svu_gp21, align 8
  %add.ptr22 = getelementptr inbounds %struct.gp, %struct.gp* %24, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr22, i32 0, i32 1
  %25 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true18, %lor.lhs.false14, %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.io* [ %25, %cond.true ], [ null, %cond.false ]
  store %struct.io* %cond, %struct.io** %io, align 8
  %26 = load %struct.io*, %struct.io** %io, align 8
  %tobool23 = icmp ne %struct.io* %26, null
  br i1 %tobool23, label %if.end, label %if.then24

if.then24:                                        ; preds = %cond.end
  %27 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %27, i32 0, i32 0
  %28 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %28, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %29 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %30 = bitcast %struct.hek* %29 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.45, i64 0, i64 0), i8* %30)
  br label %if.end

if.end:                                           ; preds = %if.then24, %cond.end
  br label %sw.epilog

if.end25:                                         ; preds = %lor.lhs.false, %sw.bb1
  br label %sw.default

sw.default:                                       ; preds = %entry, %if.end25
  %31 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %32, 65280
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.end38, label %lor.lhs.false29

lor.lhs.false29:                                  ; preds = %sw.default
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %34, 255
  %cmp32 = icmp eq i32 %and31, 8
  br i1 %cmp32, label %if.end38, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %lor.lhs.false29
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %36, 16826623
  %cmp36 = icmp eq i32 %and35, 16777226
  br i1 %cmp36, label %if.end38, label %if.then37

if.then37:                                        ; preds = %lor.lhs.false33
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_usym, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.46, i64 0, i64 0))
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %lor.lhs.false33, %lor.lhs.false29, %sw.default
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %38, 2048
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %if.then42, label %if.end55

if.then42:                                        ; preds = %if.end38
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u43 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u43 to %struct.sv**
  %40 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %41, 2097152
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %cond.true47, label %cond.false48

cond.true47:                                      ; preds = %if.then42
  br i1 true, label %land.rhs, label %land.end

cond.false48:                                     ; preds = %if.then42
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false48, %cond.true47
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u49 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 3
  %svu_rv50 = bitcast %union.anon* %sv_u49 to %struct.sv**
  %43 = load %struct.sv*, %struct.sv** %svu_rv50, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %43)
  %tobool51 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false48, %cond.true47
  %44 = phi i1 [ false, %cond.false48 ], [ false, %cond.true47 ], [ %tobool51, %land.rhs ]
  %land.ext = zext i1 %44 to i32
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u52 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 3
  %svu_rv53 = bitcast %union.anon* %sv_u52 to %struct.sv**
  %46 = load %struct.sv*, %struct.sv** %svu_rv53, align 8
  %call54 = call %struct.io* @Perl_sv_2io(%struct.sv* %46)
  store %struct.io* %call54, %struct.io** %retval, align 8
  br label %return

if.end55:                                         ; preds = %if.end38
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call56 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %47, i32 2048, i32 15)
  store %struct.gv* %call56, %struct.gv** %gv, align 8
  %48 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool57 = icmp ne %struct.gv* %48, null
  br i1 %tobool57, label %if.then58, label %if.else

if.then58:                                        ; preds = %if.end55
  %49 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool59 = icmp ne %struct.gv* %49, null
  br i1 %tobool59, label %land.lhs.true60, label %cond.false78

land.lhs.true60:                                  ; preds = %if.then58
  %50 = load %struct.gv*, %struct.gv** %gv, align 8
  %51 = bitcast %struct.gv* %50 to %struct.sv*
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %52, 255
  %cmp63 = icmp eq i32 %and62, 9
  br i1 %cmp63, label %land.lhs.true68, label %lor.lhs.false64

lor.lhs.false64:                                  ; preds = %land.lhs.true60
  %53 = load %struct.gv*, %struct.gv** %gv, align 8
  %54 = bitcast %struct.gv* %53 to %struct.sv*
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %55, 255
  %cmp67 = icmp eq i32 %and66, 10
  br i1 %cmp67, label %land.lhs.true68, label %cond.false78

land.lhs.true68:                                  ; preds = %lor.lhs.false64, %land.lhs.true60
  %56 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u69 = getelementptr inbounds %struct.gv, %struct.gv* %56, i32 0, i32 3
  %svu_gp70 = bitcast %union.anon.6* %sv_u69 to %struct.gp**
  %57 = load %struct.gp*, %struct.gp** %svu_gp70, align 8
  %add.ptr71 = getelementptr inbounds %struct.gp, %struct.gp* %57, i64 0
  %tobool72 = icmp ne %struct.gp* %add.ptr71, null
  br i1 %tobool72, label %cond.true73, label %cond.false78

cond.true73:                                      ; preds = %land.lhs.true68
  %58 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u74 = getelementptr inbounds %struct.gv, %struct.gv* %58, i32 0, i32 3
  %svu_gp75 = bitcast %union.anon.6* %sv_u74 to %struct.gp**
  %59 = load %struct.gp*, %struct.gp** %svu_gp75, align 8
  %add.ptr76 = getelementptr inbounds %struct.gp, %struct.gp* %59, i64 0
  %gp_io77 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr76, i32 0, i32 1
  %60 = load %struct.io*, %struct.io** %gp_io77, align 8
  br label %cond.end79

cond.false78:                                     ; preds = %land.lhs.true68, %lor.lhs.false64, %if.then58
  br label %cond.end79

cond.end79:                                       ; preds = %cond.false78, %cond.true73
  %cond80 = phi %struct.io* [ %60, %cond.true73 ], [ null, %cond.false78 ]
  store %struct.io* %cond80, %struct.io** %io, align 8
  br label %if.end81

if.else:                                          ; preds = %if.end55
  store %struct.io* null, %struct.io** %io, align 8
  br label %if.end81

if.end81:                                         ; preds = %if.else, %cond.end79
  %61 = load %struct.io*, %struct.io** %io, align 8
  %tobool82 = icmp ne %struct.io* %61, null
  br i1 %tobool82, label %if.end90, label %if.then83

if.then83:                                        ; preds = %if.end81
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %62, %struct.sv** %newsv, align 8
  %63 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags84 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %64, 2097152
  %tobool86 = icmp ne i32 %and85, 0
  br i1 %tobool86, label %if.then87, label %if.end89

if.then87:                                        ; preds = %if.then83
  %call88 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call88, %struct.sv** %newsv, align 8
  %65 = load %struct.sv*, %struct.sv** %newsv, align 8
  %66 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %65, %struct.sv* %66, i32 1536)
  br label %if.end89

if.end89:                                         ; preds = %if.then87, %if.then83
  %67 = load %struct.sv*, %struct.sv** %newsv, align 8
  %68 = bitcast %struct.sv* %67 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.47, i64 0, i64 0), i8* %68)
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.end81
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end90, %if.end, %sw.bb
  %69 = load %struct.io*, %struct.io** %io, align 8
  store %struct.io* %69, %struct.io** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %land.end
  %70 = load %struct.io*, %struct.io** %retval, align 8
  ret %struct.io* %70
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_sv_2cv(%struct.sv* %sv, %struct.hv** %st, %struct.gv** %gvp, i32 %lref) #0 {
entry:
  %retval = alloca %struct.cv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %st.addr = alloca %struct.hv**, align 8
  %gvp.addr = alloca %struct.gv**, align 8
  %lref.addr = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %cv = alloca %struct.cv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.hv** %st, %struct.hv*** %st.addr, align 8
  store %struct.gv** %gvp, %struct.gv*** %gvp.addr, align 8
  store i32 %lref, i32* %lref.addr, align 4
  store %struct.gv* null, %struct.gv** %gv, align 8
  store %struct.cv* null, %struct.cv** %cv, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.hv**, %struct.hv*** %st.addr, align 8
  store %struct.hv* null, %struct.hv** %1, align 8
  %2 = load %struct.gv**, %struct.gv*** %gvp.addr, align 8
  store %struct.gv* null, %struct.gv** %2, align 8
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 255
  switch i32 %and, label %sw.default [
    i32 13, label %sw.bb
    i32 12, label %sw.bb1
    i32 11, label %sw.bb1
  ]

sw.bb:                                            ; preds = %if.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xpvcv*
  %xcv_stash = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %7, i32 0, i32 4
  %8 = load %struct.hv*, %struct.hv** %xcv_stash, align 8
  %add.ptr = getelementptr inbounds %struct.hv, %struct.hv* %8, i64 0
  %9 = load %struct.hv**, %struct.hv*** %st.addr, align 8
  store %struct.hv* %add.ptr, %struct.hv** %9, align 8
  %10 = load %struct.gv**, %struct.gv*** %gvp.addr, align 8
  store %struct.gv* null, %struct.gv** %10, align 8
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  %13 = bitcast i8* %12 to %struct.cv*
  store %struct.cv* %13, %struct.cv** %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %if.end, %if.end
  %14 = load %struct.hv**, %struct.hv*** %st.addr, align 8
  store %struct.hv* null, %struct.hv** %14, align 8
  %15 = load %struct.gv**, %struct.gv*** %gvp.addr, align 8
  store %struct.gv* null, %struct.gv** %15, align 8
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

sw.default:                                       ; preds = %if.end
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %17, 2097152
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.default
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %sw.default
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %18)
  %tobool5 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %19 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool5, %land.rhs ]
  %land.ext = zext i1 %19 to i32
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %21, 2048
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.then9, label %if.else60

if.then9:                                         ; preds = %land.end
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %23, 2048
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %if.then9
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %25 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %26, 1048576
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %land.lhs.true16, label %if.end25

land.lhs.true16:                                  ; preds = %land.lhs.true
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u17 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 3
  %svu_rv18 = bitcast %union.anon* %sv_u17 to %struct.sv**
  %28 = load %struct.sv*, %struct.sv** %svu_rv18, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any19, align 8
  %30 = bitcast i8* %29 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %30, i32 0, i32 0
  %31 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags20 = getelementptr inbounds %struct.hv, %struct.hv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %32, 268435456
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %land.lhs.true16
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call24 = call %struct.sv* @Perl_amagic_deref_call(%struct.sv* %33, i32 5)
  store %struct.sv* %call24, %struct.sv** %sv.addr, align 8
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %land.lhs.true16, %land.lhs.true, %if.then9
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u26 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 3
  %svu_rv27 = bitcast %union.anon* %sv_u26 to %struct.sv**
  %35 = load %struct.sv*, %struct.sv** %svu_rv27, align 8
  store %struct.sv* %35, %struct.sv** %sv.addr, align 8
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %37, 255
  %cmp = icmp eq i32 %and29, 13
  br i1 %cmp, label %if.then30, label %if.else

if.then30:                                        ; preds = %if.end25
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %39 = bitcast %struct.sv* %38 to i8*
  %40 = bitcast i8* %39 to %struct.cv*
  store %struct.cv* %40, %struct.cv** %cv, align 8
  %41 = load %struct.gv**, %struct.gv*** %gvp.addr, align 8
  store %struct.gv* null, %struct.gv** %41, align 8
  %42 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any31 = getelementptr inbounds %struct.cv, %struct.cv* %42, i32 0, i32 0
  %43 = load %struct.xpvcv*, %struct.xpvcv** %sv_any31, align 8
  %44 = bitcast %struct.xpvcv* %43 to i8*
  %45 = bitcast i8* %44 to %struct.xpvcv*
  %xcv_stash32 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %45, i32 0, i32 4
  %46 = load %struct.hv*, %struct.hv** %xcv_stash32, align 8
  %add.ptr33 = getelementptr inbounds %struct.hv, %struct.hv* %46, i64 0
  %47 = load %struct.hv**, %struct.hv*** %st.addr, align 8
  store %struct.hv* %add.ptr33, %struct.hv** %47, align 8
  %48 = load %struct.cv*, %struct.cv** %cv, align 8
  store %struct.cv* %48, %struct.cv** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.end25
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %50, 2097152
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %if.else
  br i1 true, label %land.rhs39, label %land.end42

cond.false38:                                     ; preds = %if.else
  br i1 false, label %land.rhs39, label %land.end42

land.rhs39:                                       ; preds = %cond.false38, %cond.true37
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call40 = call i32 @Perl_mg_get(%struct.sv* %51)
  %tobool41 = icmp ne i32 %call40, 0
  br label %land.end42

land.end42:                                       ; preds = %land.rhs39, %cond.false38, %cond.true37
  %52 = phi i1 [ false, %cond.false38 ], [ false, %cond.true37 ], [ %tobool41, %land.rhs39 ]
  %land.ext43 = zext i1 %52 to i32
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %54, 49152
  %cmp46 = icmp eq i32 %and45, 32768
  br i1 %cmp46, label %land.rhs47, label %land.end54

land.rhs47:                                       ; preds = %land.end42
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %56, 255
  %cmp50 = icmp eq i32 %and49, 9
  br i1 %cmp50, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs47
  %57 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %58, 255
  %cmp53 = icmp eq i32 %and52, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs47
  %59 = phi i1 [ true, %land.rhs47 ], [ %cmp53, %lor.rhs ]
  br label %land.end54

land.end54:                                       ; preds = %lor.end, %land.end42
  %60 = phi i1 [ false, %land.end42 ], [ %59, %lor.end ]
  br i1 %60, label %if.then56, label %if.else57

if.then56:                                        ; preds = %land.end54
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %62 = bitcast %struct.sv* %61 to i8*
  %63 = bitcast i8* %62 to %struct.gv*
  store %struct.gv* %63, %struct.gv** %gv, align 8
  br label %if.end58

if.else57:                                        ; preds = %land.end54
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.48, i64 0, i64 0))
  br label %if.end58

if.end58:                                         ; preds = %if.else57, %if.then56
  br label %if.end59

if.end59:                                         ; preds = %if.end58
  br label %if.end75

if.else60:                                        ; preds = %land.end
  %64 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %65, 49152
  %cmp63 = icmp eq i32 %and62, 32768
  br i1 %cmp63, label %land.lhs.true64, label %if.else72

land.lhs.true64:                                  ; preds = %if.else60
  %66 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %67, 255
  %cmp67 = icmp eq i32 %and66, 9
  br i1 %cmp67, label %if.then71, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true64
  %68 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags68 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags68, align 4
  %and69 = and i32 %69, 255
  %cmp70 = icmp eq i32 %and69, 10
  br i1 %cmp70, label %if.then71, label %if.else72

if.then71:                                        ; preds = %lor.lhs.false, %land.lhs.true64
  %70 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %71 = bitcast %struct.sv* %70 to i8*
  %72 = bitcast i8* %71 to %struct.gv*
  store %struct.gv* %72, %struct.gv** %gv, align 8
  br label %if.end74

if.else72:                                        ; preds = %lor.lhs.false, %if.else60
  %73 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %74 = load i32, i32* %lref.addr, align 4
  %or = or i32 %74, 2048
  %call73 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %73, i32 %or, i32 13)
  store %struct.gv* %call73, %struct.gv** %gv, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.else72, %if.then71
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.end59
  %75 = load %struct.gv*, %struct.gv** %gv, align 8
  %76 = load %struct.gv**, %struct.gv*** %gvp.addr, align 8
  store %struct.gv* %75, %struct.gv** %76, align 8
  %77 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool76 = icmp ne %struct.gv* %77, null
  br i1 %tobool76, label %if.end78, label %if.then77

if.then77:                                        ; preds = %if.end75
  %78 = load %struct.hv**, %struct.hv*** %st.addr, align 8
  store %struct.hv* null, %struct.hv** %78, align 8
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

if.end78:                                         ; preds = %if.end75
  %79 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags79 = getelementptr inbounds %struct.gv, %struct.gv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %80, 49152
  %cmp81 = icmp eq i32 %and80, 32768
  br i1 %cmp81, label %land.lhs.true82, label %if.then90

land.lhs.true82:                                  ; preds = %if.end78
  %81 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags83 = getelementptr inbounds %struct.gv, %struct.gv* %81, i32 0, i32 2
  %82 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %82, 255
  %cmp85 = icmp eq i32 %and84, 9
  br i1 %cmp85, label %if.end91, label %lor.lhs.false86

lor.lhs.false86:                                  ; preds = %land.lhs.true82
  %83 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags87 = getelementptr inbounds %struct.gv, %struct.gv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags87, align 4
  %and88 = and i32 %84, 255
  %cmp89 = icmp eq i32 %and88, 10
  br i1 %cmp89, label %if.end91, label %if.then90

if.then90:                                        ; preds = %lor.lhs.false86, %if.end78
  %85 = load %struct.hv**, %struct.hv*** %st.addr, align 8
  store %struct.hv* null, %struct.hv** %85, align 8
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

if.end91:                                         ; preds = %lor.lhs.false86, %land.lhs.true82
  %86 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u92 = getelementptr inbounds %struct.gv, %struct.gv* %86, i32 0, i32 3
  %svu_gp = bitcast %union.anon.6* %sv_u92 to %struct.gp**
  %87 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr93 = getelementptr inbounds %struct.gp, %struct.gp* %87, i64 0
  %gp_egv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr93, i32 0, i32 8
  %88 = load %struct.gv*, %struct.gv** %gp_egv, align 8
  %tobool94 = icmp ne %struct.gv* %88, null
  br i1 %tobool94, label %cond.true95, label %cond.false100

cond.true95:                                      ; preds = %if.end91
  %89 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u96 = getelementptr inbounds %struct.gv, %struct.gv* %89, i32 0, i32 3
  %svu_gp97 = bitcast %union.anon.6* %sv_u96 to %struct.gp**
  %90 = load %struct.gp*, %struct.gp** %svu_gp97, align 8
  %add.ptr98 = getelementptr inbounds %struct.gp, %struct.gp* %90, i64 0
  %gp_egv99 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr98, i32 0, i32 8
  %91 = load %struct.gv*, %struct.gv** %gp_egv99, align 8
  br label %cond.end

cond.false100:                                    ; preds = %if.end91
  %92 = load %struct.gv*, %struct.gv** %gv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false100, %cond.true95
  %cond = phi %struct.gv* [ %91, %cond.true95 ], [ %92, %cond.false100 ]
  %sv_any101 = getelementptr inbounds %struct.gv, %struct.gv* %cond, i32 0, i32 0
  %93 = load %struct.xpvgv*, %struct.xpvgv** %sv_any101, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %93, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %94 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %95 = load %struct.hv**, %struct.hv*** %st.addr, align 8
  store %struct.hv* %94, %struct.hv** %95, align 8
  %96 = load i32, i32* %lref.addr, align 4
  %and102 = and i32 %96, -1025
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %land.lhs.true104, label %if.end117

land.lhs.true104:                                 ; preds = %cond.end
  %97 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u105 = getelementptr inbounds %struct.gv, %struct.gv* %97, i32 0, i32 3
  %svu_gp106 = bitcast %union.anon.6* %sv_u105 to %struct.gp**
  %98 = load %struct.gp*, %struct.gp** %svu_gp106, align 8
  %add.ptr107 = getelementptr inbounds %struct.gp, %struct.gp* %98, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr107, i32 0, i32 3
  %99 = load i32, i32* %gp_cvgen, align 8
  %tobool108 = icmp ne i32 %99, 0
  br i1 %tobool108, label %cond.true109, label %cond.false110

cond.true109:                                     ; preds = %land.lhs.true104
  br i1 false, label %if.end117, label %if.then115

cond.false110:                                    ; preds = %land.lhs.true104
  %100 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u111 = getelementptr inbounds %struct.gv, %struct.gv* %100, i32 0, i32 3
  %svu_gp112 = bitcast %union.anon.6* %sv_u111 to %struct.gp**
  %101 = load %struct.gp*, %struct.gp** %svu_gp112, align 8
  %add.ptr113 = getelementptr inbounds %struct.gp, %struct.gp* %101, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr113, i32 0, i32 2
  %102 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %tobool114 = icmp ne %struct.cv* %102, null
  br i1 %tobool114, label %if.end117, label %if.then115

if.then115:                                       ; preds = %cond.false110, %cond.true109
  %103 = load %struct.gv*, %struct.gv** %gv, align 8
  %call116 = call %struct.cv* @Perl_newSTUB(%struct.gv* %103, i1 zeroext false)
  br label %if.end117

if.end117:                                        ; preds = %if.then115, %cond.false110, %cond.true109, %cond.end
  %104 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u118 = getelementptr inbounds %struct.gv, %struct.gv* %104, i32 0, i32 3
  %svu_gp119 = bitcast %union.anon.6* %sv_u118 to %struct.gp**
  %105 = load %struct.gp*, %struct.gp** %svu_gp119, align 8
  %add.ptr120 = getelementptr inbounds %struct.gp, %struct.gp* %105, i64 0
  %gp_cvgen121 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr120, i32 0, i32 3
  %106 = load i32, i32* %gp_cvgen121, align 8
  %tobool122 = icmp ne i32 %106, 0
  br i1 %tobool122, label %cond.true123, label %cond.false124

cond.true123:                                     ; preds = %if.end117
  br label %cond.end129

cond.false124:                                    ; preds = %if.end117
  %107 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u125 = getelementptr inbounds %struct.gv, %struct.gv* %107, i32 0, i32 3
  %svu_gp126 = bitcast %union.anon.6* %sv_u125 to %struct.gp**
  %108 = load %struct.gp*, %struct.gp** %svu_gp126, align 8
  %add.ptr127 = getelementptr inbounds %struct.gp, %struct.gp* %108, i64 0
  %gp_cv128 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr127, i32 0, i32 2
  %109 = load %struct.cv*, %struct.cv** %gp_cv128, align 8
  br label %cond.end129

cond.end129:                                      ; preds = %cond.false124, %cond.true123
  %cond130 = phi %struct.cv* [ null, %cond.true123 ], [ %109, %cond.false124 ]
  store %struct.cv* %cond130, %struct.cv** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end129, %if.then90, %if.then77, %if.then30, %sw.bb1, %sw.bb, %if.then
  %110 = load %struct.cv*, %struct.cv** %retval, align 8
  ret %struct.cv* %110
}

declare dso_local %struct.sv* @Perl_amagic_deref_call(%struct.sv*, i32) #1

declare dso_local %struct.cv* @Perl_newSTUB(%struct.gv*, i1 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_sv_true(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  %tXpv = alloca %struct.xpv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 1024
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then2, label %if.else10

if.then2:                                         ; preds = %if.end
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  store %struct.xpv* %5, %struct.xpv** %tXpv, align 8
  %6 = load %struct.xpv*, %struct.xpv** %tXpv, align 8
  %tobool3 = icmp ne %struct.xpv* %6, null
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then2
  %7 = load %struct.xpv*, %struct.xpv** %tXpv, align 8
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %7, i32 0, i32 2
  %8 = load i64, i64* %xpv_cur, align 8
  %cmp = icmp ugt i64 %8, 1
  br i1 %cmp, label %if.then9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load %struct.xpv*, %struct.xpv** %tXpv, align 8
  %xpv_cur4 = getelementptr inbounds %struct.xpv, %struct.xpv* %9, i32 0, i32 2
  %10 = load i64, i64* %xpv_cur4, align 8
  %tobool5 = icmp ne i64 %10, 0
  br i1 %tobool5, label %land.lhs.true6, label %if.else

land.lhs.true6:                                   ; preds = %lor.lhs.false
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %12 = load i8*, i8** %svu_pv, align 8
  %13 = load i8, i8* %12, align 1
  %conv = sext i8 %13 to i32
  %cmp7 = icmp ne i32 %conv, 48
  br i1 %cmp7, label %if.then9, label %if.else

if.then9:                                         ; preds = %land.lhs.true6, %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true6, %lor.lhs.false, %if.then2
  store i32 0, i32* %retval, align 4
  br label %return

if.else10:                                        ; preds = %if.end
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %15, 256
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then14, label %if.else18

if.then14:                                        ; preds = %if.else10
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any15 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any15, align 8
  %18 = bitcast i8* %17 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %18, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %19 = load i64, i64* %xivu_iv, align 8
  %cmp16 = icmp ne i64 %19, 0
  %conv17 = zext i1 %cmp16 to i32
  store i32 %conv17, i32* %retval, align 4
  br label %return

if.else18:                                        ; preds = %if.else10
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %21, 512
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then22, label %if.else26

if.then22:                                        ; preds = %if.else18
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any23, align 8
  %24 = bitcast i8* %23 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %24, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %25 = load double, double* %xnv_nv, align 8
  %cmp24 = fcmp une double %25, 0.000000e+00
  %conv25 = zext i1 %cmp24 to i32
  store i32 %conv25, i32* %retval, align 4
  br label %return

if.else26:                                        ; preds = %if.else18
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %26, i32 2)
  %conv27 = zext i1 %call to i32
  store i32 %conv27, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else26, %if.then22, %if.then14, %if.else, %if.then9, %if.then
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_sv_pvbyten_force(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i64*, i64** %lp.addr, align 8
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %0, i64* %1, i32 2)
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1 = call zeroext i1 @Perl_sv_utf8_downgrade(%struct.sv* %2, i1 zeroext false)
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 0
  %4 = load i8*, i8** %sv_any, align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 2
  %6 = load i64, i64* %xpv_cur, align 8
  %7 = load i64*, i64** %lp.addr, align 8
  store i64 %6, i64* %7, align 8
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %9 = load i8*, i8** %svu_pv, align 8
  ret i8* %9
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_sv_pvutf8n_force(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %lp.addr = alloca i64*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64* %lp, i64** %lp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %0, i64* null, i32 2)
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %1, i32 0, i64 0)
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %4, i32 0, i32 2
  %5 = load i64, i64* %xpv_cur, align 8
  %6 = load i64*, i64** %lp.addr, align 8
  store i64 %5, i64* %6, align 8
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %8 = load i8*, i8** %svu_pv, align 8
  ret i8* %8
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_ref(%struct.sv* %dst, %struct.sv* %sv, i32 %ob) #0 {
entry:
  %dst.addr = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %ob.addr = alloca i32, align 4
  %reftype = alloca i8*, align 8
  store %struct.sv* %dst, %struct.sv** %dst.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %ob, i32* %ob.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %dst.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call, %struct.sv** %dst.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %ob.addr, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 1048576
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %land.lhs.true
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %6, i32 0, i32 0
  %7 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags4 = getelementptr inbounds %struct.hv, %struct.hv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %8, 33554432
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %land.lhs.true7, label %cond.false91

land.lhs.true7:                                   ; preds = %if.then3
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any8 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any8, align 8
  %11 = bitcast i8* %10 to %struct.xpvmg*
  %xmg_stash9 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %11, i32 0, i32 0
  %12 = load %struct.hv*, %struct.hv** %xmg_stash9, align 8
  %sv_u = getelementptr inbounds %struct.hv, %struct.hv* %12, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u to %struct.he***
  %13 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any10 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any10, align 8
  %16 = bitcast i8* %15 to %struct.xpvmg*
  %xmg_stash11 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %16, i32 0, i32 0
  %17 = load %struct.hv*, %struct.hv** %xmg_stash11, align 8
  %sv_any12 = getelementptr inbounds %struct.hv, %struct.hv* %17, i32 0, i32 0
  %18 = load %struct.xpvhv*, %struct.xpvhv** %sv_any12, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %18, i32 0, i32 3
  %19 = load i64, i64* %xhv_max, align 8
  %add = add i64 %19, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %13, i64 %add
  %20 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %20, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %21 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool13 = icmp ne %struct.hek* %21, null
  br i1 %tobool13, label %land.lhs.true14, label %cond.false91

land.lhs.true14:                                  ; preds = %land.lhs.true7
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any15 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any15, align 8
  %24 = bitcast i8* %23 to %struct.xpvmg*
  %xmg_stash16 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %24, i32 0, i32 0
  %25 = load %struct.hv*, %struct.hv** %xmg_stash16, align 8
  %sv_u17 = getelementptr inbounds %struct.hv, %struct.hv* %25, i32 0, i32 3
  %svu_hash18 = bitcast %union.anon.4* %sv_u17 to %struct.he***
  %26 = load %struct.he**, %struct.he*** %svu_hash18, align 8
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any19, align 8
  %29 = bitcast i8* %28 to %struct.xpvmg*
  %xmg_stash20 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %29, i32 0, i32 0
  %30 = load %struct.hv*, %struct.hv** %xmg_stash20, align 8
  %sv_any21 = getelementptr inbounds %struct.hv, %struct.hv* %30, i32 0, i32 0
  %31 = load %struct.xpvhv*, %struct.xpvhv** %sv_any21, align 8
  %xhv_max22 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %31, i32 0, i32 3
  %32 = load i64, i64* %xhv_max22, align 8
  %add23 = add i64 %32, 1
  %arrayidx24 = getelementptr inbounds %struct.he*, %struct.he** %26, i64 %add23
  %33 = bitcast %struct.he** %arrayidx24 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %33, i32 0, i32 4
  %34 = load i32, i32* %xhv_name_count, align 4
  %tobool25 = icmp ne i32 %34, 0
  br i1 %tobool25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true14
  %35 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any26 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any26, align 8
  %37 = bitcast i8* %36 to %struct.xpvmg*
  %xmg_stash27 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %37, i32 0, i32 0
  %38 = load %struct.hv*, %struct.hv** %xmg_stash27, align 8
  %sv_u28 = getelementptr inbounds %struct.hv, %struct.hv* %38, i32 0, i32 3
  %svu_hash29 = bitcast %union.anon.4* %sv_u28 to %struct.he***
  %39 = load %struct.he**, %struct.he*** %svu_hash29, align 8
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any30 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any30, align 8
  %42 = bitcast i8* %41 to %struct.xpvmg*
  %xmg_stash31 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %42, i32 0, i32 0
  %43 = load %struct.hv*, %struct.hv** %xmg_stash31, align 8
  %sv_any32 = getelementptr inbounds %struct.hv, %struct.hv* %43, i32 0, i32 0
  %44 = load %struct.xpvhv*, %struct.xpvhv** %sv_any32, align 8
  %xhv_max33 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %44, i32 0, i32 3
  %45 = load i64, i64* %xhv_max33, align 8
  %add34 = add i64 %45, 1
  %arrayidx35 = getelementptr inbounds %struct.he*, %struct.he** %39, i64 %add34
  %46 = bitcast %struct.he** %arrayidx35 to %struct.xpvhv_aux*
  %xhv_name_u36 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %46, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u36 to %struct.hek***
  %47 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %48 = load %struct.hek*, %struct.hek** %47, align 8
  %tobool37 = icmp ne %struct.hek* %48, null
  br i1 %tobool37, label %cond.true51, label %cond.false91

cond.false:                                       ; preds = %land.lhs.true14
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any38, align 8
  %51 = bitcast i8* %50 to %struct.xpvmg*
  %xmg_stash39 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %51, i32 0, i32 0
  %52 = load %struct.hv*, %struct.hv** %xmg_stash39, align 8
  %sv_u40 = getelementptr inbounds %struct.hv, %struct.hv* %52, i32 0, i32 3
  %svu_hash41 = bitcast %union.anon.4* %sv_u40 to %struct.he***
  %53 = load %struct.he**, %struct.he*** %svu_hash41, align 8
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any42 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any42, align 8
  %56 = bitcast i8* %55 to %struct.xpvmg*
  %xmg_stash43 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %56, i32 0, i32 0
  %57 = load %struct.hv*, %struct.hv** %xmg_stash43, align 8
  %sv_any44 = getelementptr inbounds %struct.hv, %struct.hv* %57, i32 0, i32 0
  %58 = load %struct.xpvhv*, %struct.xpvhv** %sv_any44, align 8
  %xhv_max45 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %58, i32 0, i32 3
  %59 = load i64, i64* %xhv_max45, align 8
  %add46 = add i64 %59, 1
  %arrayidx47 = getelementptr inbounds %struct.he*, %struct.he** %53, i64 %add46
  %60 = bitcast %struct.he** %arrayidx47 to %struct.xpvhv_aux*
  %xhv_name_u48 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %60, i32 0, i32 0
  %xhvnameu_name49 = bitcast %union._xhvnameu* %xhv_name_u48 to %struct.hek**
  %61 = load %struct.hek*, %struct.hek** %xhvnameu_name49, align 8
  %tobool50 = icmp ne %struct.hek* %61, null
  br i1 %tobool50, label %cond.true51, label %cond.false91

cond.true51:                                      ; preds = %cond.false, %cond.true
  %62 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any52 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any52, align 8
  %64 = bitcast i8* %63 to %struct.xpvmg*
  %xmg_stash53 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %64, i32 0, i32 0
  %65 = load %struct.hv*, %struct.hv** %xmg_stash53, align 8
  %sv_u54 = getelementptr inbounds %struct.hv, %struct.hv* %65, i32 0, i32 3
  %svu_hash55 = bitcast %union.anon.4* %sv_u54 to %struct.he***
  %66 = load %struct.he**, %struct.he*** %svu_hash55, align 8
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any56 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 0
  %68 = load i8*, i8** %sv_any56, align 8
  %69 = bitcast i8* %68 to %struct.xpvmg*
  %xmg_stash57 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %69, i32 0, i32 0
  %70 = load %struct.hv*, %struct.hv** %xmg_stash57, align 8
  %sv_any58 = getelementptr inbounds %struct.hv, %struct.hv* %70, i32 0, i32 0
  %71 = load %struct.xpvhv*, %struct.xpvhv** %sv_any58, align 8
  %xhv_max59 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %71, i32 0, i32 3
  %72 = load i64, i64* %xhv_max59, align 8
  %add60 = add i64 %72, 1
  %arrayidx61 = getelementptr inbounds %struct.he*, %struct.he** %66, i64 %add60
  %73 = bitcast %struct.he** %arrayidx61 to %struct.xpvhv_aux*
  %xhv_name_count62 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %73, i32 0, i32 4
  %74 = load i32, i32* %xhv_name_count62, align 4
  %tobool63 = icmp ne i32 %74, 0
  br i1 %tobool63, label %cond.true64, label %cond.false77

cond.true64:                                      ; preds = %cond.true51
  %75 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any65 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 0
  %76 = load i8*, i8** %sv_any65, align 8
  %77 = bitcast i8* %76 to %struct.xpvmg*
  %xmg_stash66 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %77, i32 0, i32 0
  %78 = load %struct.hv*, %struct.hv** %xmg_stash66, align 8
  %sv_u67 = getelementptr inbounds %struct.hv, %struct.hv* %78, i32 0, i32 3
  %svu_hash68 = bitcast %union.anon.4* %sv_u67 to %struct.he***
  %79 = load %struct.he**, %struct.he*** %svu_hash68, align 8
  %80 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any69 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 0
  %81 = load i8*, i8** %sv_any69, align 8
  %82 = bitcast i8* %81 to %struct.xpvmg*
  %xmg_stash70 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %82, i32 0, i32 0
  %83 = load %struct.hv*, %struct.hv** %xmg_stash70, align 8
  %sv_any71 = getelementptr inbounds %struct.hv, %struct.hv* %83, i32 0, i32 0
  %84 = load %struct.xpvhv*, %struct.xpvhv** %sv_any71, align 8
  %xhv_max72 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %84, i32 0, i32 3
  %85 = load i64, i64* %xhv_max72, align 8
  %add73 = add i64 %85, 1
  %arrayidx74 = getelementptr inbounds %struct.he*, %struct.he** %79, i64 %add73
  %86 = bitcast %struct.he** %arrayidx74 to %struct.xpvhv_aux*
  %xhv_name_u75 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %86, i32 0, i32 0
  %xhvnameu_names76 = bitcast %union._xhvnameu* %xhv_name_u75 to %struct.hek***
  %87 = load %struct.hek**, %struct.hek*** %xhvnameu_names76, align 8
  %88 = load %struct.hek*, %struct.hek** %87, align 8
  br label %cond.end

cond.false77:                                     ; preds = %cond.true51
  %89 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any78 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 0
  %90 = load i8*, i8** %sv_any78, align 8
  %91 = bitcast i8* %90 to %struct.xpvmg*
  %xmg_stash79 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %91, i32 0, i32 0
  %92 = load %struct.hv*, %struct.hv** %xmg_stash79, align 8
  %sv_u80 = getelementptr inbounds %struct.hv, %struct.hv* %92, i32 0, i32 3
  %svu_hash81 = bitcast %union.anon.4* %sv_u80 to %struct.he***
  %93 = load %struct.he**, %struct.he*** %svu_hash81, align 8
  %94 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any82 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 0
  %95 = load i8*, i8** %sv_any82, align 8
  %96 = bitcast i8* %95 to %struct.xpvmg*
  %xmg_stash83 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %96, i32 0, i32 0
  %97 = load %struct.hv*, %struct.hv** %xmg_stash83, align 8
  %sv_any84 = getelementptr inbounds %struct.hv, %struct.hv* %97, i32 0, i32 0
  %98 = load %struct.xpvhv*, %struct.xpvhv** %sv_any84, align 8
  %xhv_max85 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %98, i32 0, i32 3
  %99 = load i64, i64* %xhv_max85, align 8
  %add86 = add i64 %99, 1
  %arrayidx87 = getelementptr inbounds %struct.he*, %struct.he** %93, i64 %add86
  %100 = bitcast %struct.he** %arrayidx87 to %struct.xpvhv_aux*
  %xhv_name_u88 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %100, i32 0, i32 0
  %xhvnameu_name89 = bitcast %union._xhvnameu* %xhv_name_u88 to %struct.hek**
  %101 = load %struct.hek*, %struct.hek** %xhvnameu_name89, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false77, %cond.true64
  %cond = phi %struct.hek* [ %88, %cond.true64 ], [ %101, %cond.false77 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %tobool90 = icmp ne i8* %arraydecay, null
  br i1 %tobool90, label %cond.true92, label %cond.false156

cond.false91:                                     ; preds = %cond.false, %cond.true, %land.lhs.true7, %if.then3
  br i1 false, label %cond.true92, label %cond.false156

cond.true92:                                      ; preds = %cond.false91, %cond.end
  %102 = load %struct.sv*, %struct.sv** %dst.addr, align 8
  %103 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any93 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 0
  %104 = load i8*, i8** %sv_any93, align 8
  %105 = bitcast i8* %104 to %struct.xpvmg*
  %xmg_stash94 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %105, i32 0, i32 0
  %106 = load %struct.hv*, %struct.hv** %xmg_stash94, align 8
  %sv_flags95 = getelementptr inbounds %struct.hv, %struct.hv* %106, i32 0, i32 2
  %107 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %107, 33554432
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %land.lhs.true98, label %cond.false153

land.lhs.true98:                                  ; preds = %cond.true92
  %108 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any99 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 0
  %109 = load i8*, i8** %sv_any99, align 8
  %110 = bitcast i8* %109 to %struct.xpvmg*
  %xmg_stash100 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %110, i32 0, i32 0
  %111 = load %struct.hv*, %struct.hv** %xmg_stash100, align 8
  %sv_u101 = getelementptr inbounds %struct.hv, %struct.hv* %111, i32 0, i32 3
  %svu_hash102 = bitcast %union.anon.4* %sv_u101 to %struct.he***
  %112 = load %struct.he**, %struct.he*** %svu_hash102, align 8
  %113 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any103 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 0
  %114 = load i8*, i8** %sv_any103, align 8
  %115 = bitcast i8* %114 to %struct.xpvmg*
  %xmg_stash104 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %115, i32 0, i32 0
  %116 = load %struct.hv*, %struct.hv** %xmg_stash104, align 8
  %sv_any105 = getelementptr inbounds %struct.hv, %struct.hv* %116, i32 0, i32 0
  %117 = load %struct.xpvhv*, %struct.xpvhv** %sv_any105, align 8
  %xhv_max106 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %117, i32 0, i32 3
  %118 = load i64, i64* %xhv_max106, align 8
  %add107 = add i64 %118, 1
  %arrayidx108 = getelementptr inbounds %struct.he*, %struct.he** %112, i64 %add107
  %119 = bitcast %struct.he** %arrayidx108 to %struct.xpvhv_aux*
  %xhv_name_u109 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %119, i32 0, i32 0
  %xhvnameu_name110 = bitcast %union._xhvnameu* %xhv_name_u109 to %struct.hek**
  %120 = load %struct.hek*, %struct.hek** %xhvnameu_name110, align 8
  %tobool111 = icmp ne %struct.hek* %120, null
  br i1 %tobool111, label %cond.true112, label %cond.false153

cond.true112:                                     ; preds = %land.lhs.true98
  %121 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any113 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 0
  %122 = load i8*, i8** %sv_any113, align 8
  %123 = bitcast i8* %122 to %struct.xpvmg*
  %xmg_stash114 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %123, i32 0, i32 0
  %124 = load %struct.hv*, %struct.hv** %xmg_stash114, align 8
  %sv_u115 = getelementptr inbounds %struct.hv, %struct.hv* %124, i32 0, i32 3
  %svu_hash116 = bitcast %union.anon.4* %sv_u115 to %struct.he***
  %125 = load %struct.he**, %struct.he*** %svu_hash116, align 8
  %126 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any117 = getelementptr inbounds %struct.sv, %struct.sv* %126, i32 0, i32 0
  %127 = load i8*, i8** %sv_any117, align 8
  %128 = bitcast i8* %127 to %struct.xpvmg*
  %xmg_stash118 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %128, i32 0, i32 0
  %129 = load %struct.hv*, %struct.hv** %xmg_stash118, align 8
  %sv_any119 = getelementptr inbounds %struct.hv, %struct.hv* %129, i32 0, i32 0
  %130 = load %struct.xpvhv*, %struct.xpvhv** %sv_any119, align 8
  %xhv_max120 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %130, i32 0, i32 3
  %131 = load i64, i64* %xhv_max120, align 8
  %add121 = add i64 %131, 1
  %arrayidx122 = getelementptr inbounds %struct.he*, %struct.he** %125, i64 %add121
  %132 = bitcast %struct.he** %arrayidx122 to %struct.xpvhv_aux*
  %xhv_name_count123 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %132, i32 0, i32 4
  %133 = load i32, i32* %xhv_name_count123, align 4
  %tobool124 = icmp ne i32 %133, 0
  br i1 %tobool124, label %cond.true125, label %cond.false138

cond.true125:                                     ; preds = %cond.true112
  %134 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any126 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 0
  %135 = load i8*, i8** %sv_any126, align 8
  %136 = bitcast i8* %135 to %struct.xpvmg*
  %xmg_stash127 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %136, i32 0, i32 0
  %137 = load %struct.hv*, %struct.hv** %xmg_stash127, align 8
  %sv_u128 = getelementptr inbounds %struct.hv, %struct.hv* %137, i32 0, i32 3
  %svu_hash129 = bitcast %union.anon.4* %sv_u128 to %struct.he***
  %138 = load %struct.he**, %struct.he*** %svu_hash129, align 8
  %139 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any130 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 0
  %140 = load i8*, i8** %sv_any130, align 8
  %141 = bitcast i8* %140 to %struct.xpvmg*
  %xmg_stash131 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %141, i32 0, i32 0
  %142 = load %struct.hv*, %struct.hv** %xmg_stash131, align 8
  %sv_any132 = getelementptr inbounds %struct.hv, %struct.hv* %142, i32 0, i32 0
  %143 = load %struct.xpvhv*, %struct.xpvhv** %sv_any132, align 8
  %xhv_max133 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %143, i32 0, i32 3
  %144 = load i64, i64* %xhv_max133, align 8
  %add134 = add i64 %144, 1
  %arrayidx135 = getelementptr inbounds %struct.he*, %struct.he** %138, i64 %add134
  %145 = bitcast %struct.he** %arrayidx135 to %struct.xpvhv_aux*
  %xhv_name_u136 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %145, i32 0, i32 0
  %xhvnameu_names137 = bitcast %union._xhvnameu* %xhv_name_u136 to %struct.hek***
  %146 = load %struct.hek**, %struct.hek*** %xhvnameu_names137, align 8
  %147 = load %struct.hek*, %struct.hek** %146, align 8
  br label %cond.end151

cond.false138:                                    ; preds = %cond.true112
  %148 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any139 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 0
  %149 = load i8*, i8** %sv_any139, align 8
  %150 = bitcast i8* %149 to %struct.xpvmg*
  %xmg_stash140 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %150, i32 0, i32 0
  %151 = load %struct.hv*, %struct.hv** %xmg_stash140, align 8
  %sv_u141 = getelementptr inbounds %struct.hv, %struct.hv* %151, i32 0, i32 3
  %svu_hash142 = bitcast %union.anon.4* %sv_u141 to %struct.he***
  %152 = load %struct.he**, %struct.he*** %svu_hash142, align 8
  %153 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any143 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 0
  %154 = load i8*, i8** %sv_any143, align 8
  %155 = bitcast i8* %154 to %struct.xpvmg*
  %xmg_stash144 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %155, i32 0, i32 0
  %156 = load %struct.hv*, %struct.hv** %xmg_stash144, align 8
  %sv_any145 = getelementptr inbounds %struct.hv, %struct.hv* %156, i32 0, i32 0
  %157 = load %struct.xpvhv*, %struct.xpvhv** %sv_any145, align 8
  %xhv_max146 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %157, i32 0, i32 3
  %158 = load i64, i64* %xhv_max146, align 8
  %add147 = add i64 %158, 1
  %arrayidx148 = getelementptr inbounds %struct.he*, %struct.he** %152, i64 %add147
  %159 = bitcast %struct.he** %arrayidx148 to %struct.xpvhv_aux*
  %xhv_name_u149 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %159, i32 0, i32 0
  %xhvnameu_name150 = bitcast %union._xhvnameu* %xhv_name_u149 to %struct.hek**
  %160 = load %struct.hek*, %struct.hek** %xhvnameu_name150, align 8
  br label %cond.end151

cond.end151:                                      ; preds = %cond.false138, %cond.true125
  %cond152 = phi %struct.hek* [ %147, %cond.true125 ], [ %160, %cond.false138 ]
  br label %cond.end154

cond.false153:                                    ; preds = %land.lhs.true98, %cond.true92
  br label %cond.end154

cond.end154:                                      ; preds = %cond.false153, %cond.end151
  %cond155 = phi %struct.hek* [ %cond152, %cond.end151 ], [ null, %cond.false153 ]
  call void @Perl_sv_sethek(%struct.sv* %102, %struct.hek* %cond155)
  br label %cond.end157

cond.false156:                                    ; preds = %cond.false91, %cond.end
  %161 = load %struct.sv*, %struct.sv** %dst.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %161, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i64 8)
  br label %cond.end157

cond.end157:                                      ; preds = %cond.false156, %cond.end154
  br label %if.end159

if.else:                                          ; preds = %land.lhs.true, %if.end
  %162 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call158 = call i8* @Perl_sv_reftype(%struct.sv* %162, i32 0)
  store i8* %call158, i8** %reftype, align 8
  %163 = load %struct.sv*, %struct.sv** %dst.addr, align 8
  %164 = load i8*, i8** %reftype, align 8
  call void @Perl_sv_setpv(%struct.sv* %163, i8* %164)
  br label %if.end159

if.end159:                                        ; preds = %if.else, %cond.end157
  %165 = load %struct.sv*, %struct.sv** %dst.addr, align 8
  ret %struct.sv* %165
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_sv_isobject(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2097152
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.end
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  %tobool2 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %4 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %6, 2048
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %land.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %land.end
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %8 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %8, %struct.sv** %sv.addr, align 8
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %10, 1048576
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end7
  store i32 0, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end7
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then11, %if.then6, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_sv_isa(%struct.sv* %sv, i8* %name) #0 {
entry:
  %retval = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  %name.addr = alloca i8*, align 8
  %hvname = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2097152
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.end
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %3)
  %tobool2 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %4 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %6, 2048
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %land.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %land.end
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %8 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %8, %struct.sv** %sv.addr, align 8
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %10, 1048576
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end7
  store i32 0, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end7
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %13 = bitcast i8* %12 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %13, i32 0, i32 0
  %14 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags13 = getelementptr inbounds %struct.hv, %struct.hv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %15, 33554432
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %land.lhs.true, label %cond.false101

land.lhs.true:                                    ; preds = %if.end12
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any16 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any16, align 8
  %18 = bitcast i8* %17 to %struct.xpvmg*
  %xmg_stash17 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %18, i32 0, i32 0
  %19 = load %struct.hv*, %struct.hv** %xmg_stash17, align 8
  %sv_u18 = getelementptr inbounds %struct.hv, %struct.hv* %19, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u18 to %struct.he***
  %20 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any19, align 8
  %23 = bitcast i8* %22 to %struct.xpvmg*
  %xmg_stash20 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %23, i32 0, i32 0
  %24 = load %struct.hv*, %struct.hv** %xmg_stash20, align 8
  %sv_any21 = getelementptr inbounds %struct.hv, %struct.hv* %24, i32 0, i32 0
  %25 = load %struct.xpvhv*, %struct.xpvhv** %sv_any21, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %25, i32 0, i32 3
  %26 = load i64, i64* %xhv_max, align 8
  %add = add i64 %26, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %20, i64 %add
  %27 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %27, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %28 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool22 = icmp ne %struct.hek* %28, null
  br i1 %tobool22, label %land.lhs.true23, label %cond.false101

land.lhs.true23:                                  ; preds = %land.lhs.true
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any24, align 8
  %31 = bitcast i8* %30 to %struct.xpvmg*
  %xmg_stash25 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %31, i32 0, i32 0
  %32 = load %struct.hv*, %struct.hv** %xmg_stash25, align 8
  %sv_u26 = getelementptr inbounds %struct.hv, %struct.hv* %32, i32 0, i32 3
  %svu_hash27 = bitcast %union.anon.4* %sv_u26 to %struct.he***
  %33 = load %struct.he**, %struct.he*** %svu_hash27, align 8
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any28 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any28, align 8
  %36 = bitcast i8* %35 to %struct.xpvmg*
  %xmg_stash29 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %36, i32 0, i32 0
  %37 = load %struct.hv*, %struct.hv** %xmg_stash29, align 8
  %sv_any30 = getelementptr inbounds %struct.hv, %struct.hv* %37, i32 0, i32 0
  %38 = load %struct.xpvhv*, %struct.xpvhv** %sv_any30, align 8
  %xhv_max31 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %38, i32 0, i32 3
  %39 = load i64, i64* %xhv_max31, align 8
  %add32 = add i64 %39, 1
  %arrayidx33 = getelementptr inbounds %struct.he*, %struct.he** %33, i64 %add32
  %40 = bitcast %struct.he** %arrayidx33 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %40, i32 0, i32 4
  %41 = load i32, i32* %xhv_name_count, align 4
  %tobool34 = icmp ne i32 %41, 0
  br i1 %tobool34, label %cond.true35, label %cond.false48

cond.true35:                                      ; preds = %land.lhs.true23
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any36 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any36, align 8
  %44 = bitcast i8* %43 to %struct.xpvmg*
  %xmg_stash37 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %44, i32 0, i32 0
  %45 = load %struct.hv*, %struct.hv** %xmg_stash37, align 8
  %sv_u38 = getelementptr inbounds %struct.hv, %struct.hv* %45, i32 0, i32 3
  %svu_hash39 = bitcast %union.anon.4* %sv_u38 to %struct.he***
  %46 = load %struct.he**, %struct.he*** %svu_hash39, align 8
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  %48 = load i8*, i8** %sv_any40, align 8
  %49 = bitcast i8* %48 to %struct.xpvmg*
  %xmg_stash41 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %49, i32 0, i32 0
  %50 = load %struct.hv*, %struct.hv** %xmg_stash41, align 8
  %sv_any42 = getelementptr inbounds %struct.hv, %struct.hv* %50, i32 0, i32 0
  %51 = load %struct.xpvhv*, %struct.xpvhv** %sv_any42, align 8
  %xhv_max43 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %51, i32 0, i32 3
  %52 = load i64, i64* %xhv_max43, align 8
  %add44 = add i64 %52, 1
  %arrayidx45 = getelementptr inbounds %struct.he*, %struct.he** %46, i64 %add44
  %53 = bitcast %struct.he** %arrayidx45 to %struct.xpvhv_aux*
  %xhv_name_u46 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %53, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u46 to %struct.hek***
  %54 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %55 = load %struct.hek*, %struct.hek** %54, align 8
  %tobool47 = icmp ne %struct.hek* %55, null
  br i1 %tobool47, label %cond.true62, label %cond.false101

cond.false48:                                     ; preds = %land.lhs.true23
  %56 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any49 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 0
  %57 = load i8*, i8** %sv_any49, align 8
  %58 = bitcast i8* %57 to %struct.xpvmg*
  %xmg_stash50 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %58, i32 0, i32 0
  %59 = load %struct.hv*, %struct.hv** %xmg_stash50, align 8
  %sv_u51 = getelementptr inbounds %struct.hv, %struct.hv* %59, i32 0, i32 3
  %svu_hash52 = bitcast %union.anon.4* %sv_u51 to %struct.he***
  %60 = load %struct.he**, %struct.he*** %svu_hash52, align 8
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any53, align 8
  %63 = bitcast i8* %62 to %struct.xpvmg*
  %xmg_stash54 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %63, i32 0, i32 0
  %64 = load %struct.hv*, %struct.hv** %xmg_stash54, align 8
  %sv_any55 = getelementptr inbounds %struct.hv, %struct.hv* %64, i32 0, i32 0
  %65 = load %struct.xpvhv*, %struct.xpvhv** %sv_any55, align 8
  %xhv_max56 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %65, i32 0, i32 3
  %66 = load i64, i64* %xhv_max56, align 8
  %add57 = add i64 %66, 1
  %arrayidx58 = getelementptr inbounds %struct.he*, %struct.he** %60, i64 %add57
  %67 = bitcast %struct.he** %arrayidx58 to %struct.xpvhv_aux*
  %xhv_name_u59 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %67, i32 0, i32 0
  %xhvnameu_name60 = bitcast %union._xhvnameu* %xhv_name_u59 to %struct.hek**
  %68 = load %struct.hek*, %struct.hek** %xhvnameu_name60, align 8
  %tobool61 = icmp ne %struct.hek* %68, null
  br i1 %tobool61, label %cond.true62, label %cond.false101

cond.true62:                                      ; preds = %cond.false48, %cond.true35
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any63 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 0
  %70 = load i8*, i8** %sv_any63, align 8
  %71 = bitcast i8* %70 to %struct.xpvmg*
  %xmg_stash64 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %71, i32 0, i32 0
  %72 = load %struct.hv*, %struct.hv** %xmg_stash64, align 8
  %sv_u65 = getelementptr inbounds %struct.hv, %struct.hv* %72, i32 0, i32 3
  %svu_hash66 = bitcast %union.anon.4* %sv_u65 to %struct.he***
  %73 = load %struct.he**, %struct.he*** %svu_hash66, align 8
  %74 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 0
  %75 = load i8*, i8** %sv_any67, align 8
  %76 = bitcast i8* %75 to %struct.xpvmg*
  %xmg_stash68 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %76, i32 0, i32 0
  %77 = load %struct.hv*, %struct.hv** %xmg_stash68, align 8
  %sv_any69 = getelementptr inbounds %struct.hv, %struct.hv* %77, i32 0, i32 0
  %78 = load %struct.xpvhv*, %struct.xpvhv** %sv_any69, align 8
  %xhv_max70 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %78, i32 0, i32 3
  %79 = load i64, i64* %xhv_max70, align 8
  %add71 = add i64 %79, 1
  %arrayidx72 = getelementptr inbounds %struct.he*, %struct.he** %73, i64 %add71
  %80 = bitcast %struct.he** %arrayidx72 to %struct.xpvhv_aux*
  %xhv_name_count73 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %80, i32 0, i32 4
  %81 = load i32, i32* %xhv_name_count73, align 4
  %tobool74 = icmp ne i32 %81, 0
  br i1 %tobool74, label %cond.true75, label %cond.false88

cond.true75:                                      ; preds = %cond.true62
  %82 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any76 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 0
  %83 = load i8*, i8** %sv_any76, align 8
  %84 = bitcast i8* %83 to %struct.xpvmg*
  %xmg_stash77 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %84, i32 0, i32 0
  %85 = load %struct.hv*, %struct.hv** %xmg_stash77, align 8
  %sv_u78 = getelementptr inbounds %struct.hv, %struct.hv* %85, i32 0, i32 3
  %svu_hash79 = bitcast %union.anon.4* %sv_u78 to %struct.he***
  %86 = load %struct.he**, %struct.he*** %svu_hash79, align 8
  %87 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any80 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 0
  %88 = load i8*, i8** %sv_any80, align 8
  %89 = bitcast i8* %88 to %struct.xpvmg*
  %xmg_stash81 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %89, i32 0, i32 0
  %90 = load %struct.hv*, %struct.hv** %xmg_stash81, align 8
  %sv_any82 = getelementptr inbounds %struct.hv, %struct.hv* %90, i32 0, i32 0
  %91 = load %struct.xpvhv*, %struct.xpvhv** %sv_any82, align 8
  %xhv_max83 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %91, i32 0, i32 3
  %92 = load i64, i64* %xhv_max83, align 8
  %add84 = add i64 %92, 1
  %arrayidx85 = getelementptr inbounds %struct.he*, %struct.he** %86, i64 %add84
  %93 = bitcast %struct.he** %arrayidx85 to %struct.xpvhv_aux*
  %xhv_name_u86 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %93, i32 0, i32 0
  %xhvnameu_names87 = bitcast %union._xhvnameu* %xhv_name_u86 to %struct.hek***
  %94 = load %struct.hek**, %struct.hek*** %xhvnameu_names87, align 8
  %95 = load %struct.hek*, %struct.hek** %94, align 8
  br label %cond.end

cond.false88:                                     ; preds = %cond.true62
  %96 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any89 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 0
  %97 = load i8*, i8** %sv_any89, align 8
  %98 = bitcast i8* %97 to %struct.xpvmg*
  %xmg_stash90 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %98, i32 0, i32 0
  %99 = load %struct.hv*, %struct.hv** %xmg_stash90, align 8
  %sv_u91 = getelementptr inbounds %struct.hv, %struct.hv* %99, i32 0, i32 3
  %svu_hash92 = bitcast %union.anon.4* %sv_u91 to %struct.he***
  %100 = load %struct.he**, %struct.he*** %svu_hash92, align 8
  %101 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any93 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 0
  %102 = load i8*, i8** %sv_any93, align 8
  %103 = bitcast i8* %102 to %struct.xpvmg*
  %xmg_stash94 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %103, i32 0, i32 0
  %104 = load %struct.hv*, %struct.hv** %xmg_stash94, align 8
  %sv_any95 = getelementptr inbounds %struct.hv, %struct.hv* %104, i32 0, i32 0
  %105 = load %struct.xpvhv*, %struct.xpvhv** %sv_any95, align 8
  %xhv_max96 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %105, i32 0, i32 3
  %106 = load i64, i64* %xhv_max96, align 8
  %add97 = add i64 %106, 1
  %arrayidx98 = getelementptr inbounds %struct.he*, %struct.he** %100, i64 %add97
  %107 = bitcast %struct.he** %arrayidx98 to %struct.xpvhv_aux*
  %xhv_name_u99 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %107, i32 0, i32 0
  %xhvnameu_name100 = bitcast %union._xhvnameu* %xhv_name_u99 to %struct.hek**
  %108 = load %struct.hek*, %struct.hek** %xhvnameu_name100, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false88, %cond.true75
  %cond = phi %struct.hek* [ %95, %cond.true75 ], [ %108, %cond.false88 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  br label %cond.end102

cond.false101:                                    ; preds = %cond.false48, %cond.true35, %land.lhs.true, %if.end12
  br label %cond.end102

cond.end102:                                      ; preds = %cond.false101, %cond.end
  %cond103 = phi i8* [ %arraydecay, %cond.end ], [ null, %cond.false101 ]
  store i8* %cond103, i8** %hvname, align 8
  %109 = load i8*, i8** %hvname, align 8
  %tobool104 = icmp ne i8* %109, null
  br i1 %tobool104, label %if.end106, label %if.then105

if.then105:                                       ; preds = %cond.end102
  store i32 0, i32* %retval, align 4
  br label %return

if.end106:                                        ; preds = %cond.end102
  %110 = load i8*, i8** %hvname, align 8
  %111 = load i8*, i8** %name.addr, align 8
  %call107 = call i32 @strcmp(i8* %110, i8* %111) #8
  %tobool108 = icmp ne i32 %call107, 0
  %lnot = xor i1 %tobool108, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end106, %if.then105, %if.then11, %if.then6, %if.then
  %112 = load i32, i32* %retval, align 4
  ret i32 %112
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSVrv(%struct.sv* %rv, i8* %classname) #0 {
entry:
  %rv.addr = alloca %struct.sv*, align 8
  %classname.addr = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  %refcnt = alloca i32, align 4
  %zok = alloca i64, align 8
  %stash = alloca %struct.hv*, align 8
  store %struct.sv* %rv, %struct.sv** %rv.addr, align 8
  store i8* %classname, i8** %classname.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %1 = load %struct.sv*, %struct.sv** @PL_sv_root, align 8
  store %struct.sv* %1, %struct.sv** %sv, align 8
  %2 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8
  %5 = load i64, i64* @PL_sv_count, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* @PL_sv_count, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %if.end

if.else:                                          ; preds = %do.body
  %call = call %struct.sv* @S_more_sv()
  store %struct.sv* %call, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %6 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  store i8* null, i8** %sv_any2, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 1
  store i32 1, i32* %sv_refcnt, align 8
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 0, i32* %sv_flags, align 4
  br label %do.end3

do.end3:                                          ; preds = %if.end
  %9 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags4, align 4
  %and = and i32 %10, 427886592
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %do.end3
  %11 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %11, i32 4)
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %do.end3
  %12 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %13, 255
  %cmp = icmp uge i32 %and9, 7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end7
  br i1 true, label %if.then10, label %if.else15

cond.false:                                       ; preds = %if.end7
  br i1 false, label %if.then10, label %if.else15

if.then10:                                        ; preds = %cond.false, %cond.true
  %14 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_refcnt11 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 1
  %15 = load i32, i32* %sv_refcnt11, align 8
  store i32 %15, i32* %refcnt, align 4
  %16 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_refcnt12 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 1
  store i32 0, i32* %sv_refcnt12, align 8
  %17 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  call void @Perl_sv_clear(%struct.sv* %17)
  %18 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  store i32 0, i32* %sv_flags13, align 4
  %19 = load i32, i32* %refcnt, align 4
  %20 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_refcnt14 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 1
  store i32 %19, i32* %sv_refcnt14, align 8
  %21 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %21, i32 1)
  br label %if.end88

if.else15:                                        ; preds = %cond.false, %cond.true
  %22 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %23, 2048
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.else20

if.then19:                                        ; preds = %if.else15
  %24 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %25 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %26 = bitcast %struct.sv* %25 to i8*
  %27 = bitcast i8* %26 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %27)
  br label %if.end87

if.else20:                                        ; preds = %if.else15
  br label %do.body21

do.body21:                                        ; preds = %if.else20
  %28 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %29, 255
  %cmp24 = icmp ult i32 %and23, 3
  br i1 %cmp24, label %land.lhs.true, label %if.else29

land.lhs.true:                                    ; preds = %do.body21
  %30 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %31, 255
  %cmp27 = icmp ne i32 %and26, 1
  br i1 %cmp27, label %if.then28, label %if.else29

if.then28:                                        ; preds = %land.lhs.true
  %32 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %32, i32 1)
  br label %if.end85

if.else29:                                        ; preds = %land.lhs.true, %do.body21
  %33 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %34, 255
  %cmp32 = icmp uge i32 %and31, 3
  br i1 %cmp32, label %if.then33, label %if.end84

if.then33:                                        ; preds = %if.else29
  br label %do.body34

do.body34:                                        ; preds = %if.then33
  %35 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any35, align 8
  %37 = bitcast i8* %36 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %37, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %38 = load i64, i64* %xpvlenu_len, align 8
  %tobool36 = icmp ne i64 %38, 0
  br i1 %tobool36, label %if.then37, label %if.end74

if.then37:                                        ; preds = %do.body34
  %39 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %40, 33554432
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %if.then37
  br i1 true, label %if.then43, label %if.end71

cond.false42:                                     ; preds = %if.then37
  br i1 false, label %if.then43, label %if.end71

if.then43:                                        ; preds = %cond.false42, %cond.true41
  br label %do.body44

do.body44:                                        ; preds = %if.then43
  %41 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %42, 33554432
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.then48, label %if.else58

if.then48:                                        ; preds = %do.body44
  %43 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_u49 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u49 to i8**
  %44 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %44, i64 0
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %45 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %45 to i64
  store i64 %conv, i64* %zok, align 8
  %46 = load i64, i64* %zok, align 8
  %tobool50 = icmp ne i64 %46, 0
  br i1 %tobool50, label %if.end57, label %if.then51

if.then51:                                        ; preds = %if.then48
  %47 = bitcast i64* %zok to i8*
  %48 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_u52 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 3
  %svu_pv53 = bitcast %union.anon* %sv_u52 to i8**
  %49 = load i8*, i8** %svu_pv53, align 8
  %add.ptr54 = getelementptr inbounds i8, i8* %49, i64 0
  %add.ptr55 = getelementptr inbounds i8, i8* %add.ptr54, i64 -1
  %add.ptr56 = getelementptr inbounds i8, i8* %add.ptr55, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 1 %add.ptr56, i64 8, i1 false)
  br label %if.end57

if.end57:                                         ; preds = %if.then51, %if.then48
  br label %if.end59

if.else58:                                        ; preds = %do.body44
  store i64 0, i64* %zok, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.else58, %if.end57
  br label %do.end60

do.end60:                                         ; preds = %if.end59
  br label %do.body61

do.body61:                                        ; preds = %do.end60
  %50 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_u62 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 3
  %svu_pv63 = bitcast %union.anon* %sv_u62 to i8**
  %51 = load i8*, i8** %svu_pv63, align 8
  %add.ptr64 = getelementptr inbounds i8, i8* %51, i64 0
  %52 = load i64, i64* %zok, align 8
  %idx.neg = sub i64 0, %52
  %add.ptr65 = getelementptr inbounds i8, i8* %add.ptr64, i64 %idx.neg
  %53 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_u66 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 3
  %svu_pv67 = bitcast %union.anon* %sv_u66 to i8**
  store i8* %add.ptr65, i8** %svu_pv67, align 8
  br label %do.end68

do.end68:                                         ; preds = %do.body61
  %54 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %55, -33554433
  store i32 %and70, i32* %sv_flags69, align 4
  br label %if.end71

if.end71:                                         ; preds = %do.end68, %cond.false42, %cond.true41
  %56 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_u72 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 3
  %svu_pv73 = bitcast %union.anon* %sv_u72 to i8**
  %57 = load i8*, i8** %svu_pv73, align 8
  call void @Perl_safesysfree(i8* %57)
  br label %if.end74

if.end74:                                         ; preds = %if.end71, %do.body34
  br label %do.end75

do.end75:                                         ; preds = %if.end74
  br label %do.body76

do.body76:                                        ; preds = %do.end75
  %58 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_any77 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any77, align 8
  %60 = bitcast i8* %59 to %struct.xpv*
  %xpv_len_u78 = getelementptr inbounds %struct.xpv, %struct.xpv* %60, i32 0, i32 3
  %xpvlenu_len79 = bitcast %union.anon.19* %xpv_len_u78 to i64*
  store i64 0, i64* %xpvlenu_len79, align 8
  br label %do.end80

do.end80:                                         ; preds = %do.body76
  br label %do.body81

do.body81:                                        ; preds = %do.end80
  %61 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_any82 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any82, align 8
  %63 = bitcast i8* %62 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %63, i32 0, i32 2
  store i64 0, i64* %xpv_cur, align 8
  br label %do.end83

do.end83:                                         ; preds = %do.body81
  br label %if.end84

if.end84:                                         ; preds = %do.end83, %if.else29
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.then28
  br label %do.end86

do.end86:                                         ; preds = %if.end85
  br label %if.end87

if.end87:                                         ; preds = %do.end86, %if.then19
  br label %if.end88

if.end88:                                         ; preds = %if.end87, %if.then10
  %64 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags89 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %65, 1610547455
  store i32 %and90, i32* %sv_flags89, align 4
  %66 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags91 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags91, align 4
  %and92 = and i32 %67, 33554432
  %tobool93 = icmp ne i32 %and92, 0
  br i1 %tobool93, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end88
  %68 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %call94 = call i32 @Perl_sv_backoff(%struct.sv* %68)
  %tobool95 = icmp ne i32 %call94, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end88
  %69 = phi i1 [ false, %if.end88 ], [ %tobool95, %land.rhs ]
  %land.ext = zext i1 %69 to i32
  br label %do.body96

do.body96:                                        ; preds = %land.end
  %70 = load %struct.sv*, %struct.sv** %sv, align 8
  %71 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_u97 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 3
  %svu_rv98 = bitcast %union.anon* %sv_u97 to %struct.sv**
  store %struct.sv* %70, %struct.sv** %svu_rv98, align 8
  br label %do.end99

do.end99:                                         ; preds = %do.body96
  %72 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags100 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags100, align 4
  %or = or i32 %73, 2048
  store i32 %or, i32* %sv_flags100, align 4
  %74 = load i8*, i8** %classname.addr, align 8
  %tobool101 = icmp ne i8* %74, null
  br i1 %tobool101, label %if.then102, label %if.end105

if.then102:                                       ; preds = %do.end99
  %75 = load i8*, i8** %classname.addr, align 8
  %call103 = call %struct.hv* @Perl_gv_stashpv(i8* %75, i32 1)
  store %struct.hv* %call103, %struct.hv** %stash, align 8
  %76 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %77 = load %struct.hv*, %struct.hv** %stash, align 8
  %call104 = call %struct.sv* @Perl_sv_bless(%struct.sv* %76, %struct.hv* %77)
  br label %if.end105

if.end105:                                        ; preds = %if.then102, %do.end99
  %78 = load %struct.sv*, %struct.sv** %sv, align 8
  ret %struct.sv* %78
}

declare dso_local %struct.hv* @Perl_gv_stashpv(i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_bless(%struct.sv* %sv, %struct.hv* %stash) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %stash.addr = alloca %struct.hv*, align 8
  %tmpRef = alloca %struct.sv*, align 8
  %oldstash = alloca %struct.hv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.hv* %stash, %struct.hv** %stash.addr, align 8
  store %struct.hv* null, %struct.hv** %oldstash, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %entry
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %2)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %3 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %3 to i32
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %5, 2048
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %land.end
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.63, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %7 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %7, %struct.sv** %tmpRef, align 8
  %8 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %9, 135331840
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then8, label %if.end19

if.then8:                                         ; preds = %if.end
  %10 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %11, 134283264
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.then8
  call void @Perl_croak_no_modify()
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.then8
  %12 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %13, 1048576
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end13
  %14 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %16, i32 0, i32 0
  %17 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %17, %struct.hv** %oldstash, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end13
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.end
  %18 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags20, align 4
  %or = or i32 %19, 1048576
  store i32 %or, i32* %sv_flags20, align 4
  %20 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %21, 255
  %cmp = icmp uge i32 %and22, 7
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end19
  %22 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  call void @Perl_sv_upgrade(%struct.sv* %22, i32 7)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end19
  %23 = phi i1 [ true, %if.end19 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %23 to i32
  br label %do.body

do.body:                                          ; preds = %lor.end
  %24 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %25 = bitcast %struct.hv* %24 to i8*
  %26 = bitcast i8* %25 to %struct.sv*
  %call23 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %26)
  %27 = bitcast %struct.sv* %call23 to i8*
  %28 = bitcast i8* %27 to %struct.hv*
  %29 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any24, align 8
  %31 = bitcast i8* %30 to %struct.xpvmg*
  %xmg_stash25 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %31, i32 0, i32 0
  store %struct.hv* %28, %struct.hv** %xmg_stash25, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %32 = load %struct.hv*, %struct.hv** %oldstash, align 8
  %33 = bitcast %struct.hv* %32 to i8*
  %34 = bitcast i8* %33 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %34)
  %35 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %36, 4194304
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.then29, label %if.end37

if.then29:                                        ; preds = %do.end
  %37 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %call30 = call %struct.magic* @Perl_mg_find(%struct.sv* %37, i32 126)
  %tobool31 = icmp ne %struct.magic* %call30, null
  br i1 %tobool31, label %if.then34, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then29
  %38 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %call32 = call %struct.magic* @Perl_mg_find(%struct.sv* %38, i32 85)
  %tobool33 = icmp ne %struct.magic* %call32, null
  br i1 %tobool33, label %if.then34, label %if.end36

if.then34:                                        ; preds = %lor.lhs.false, %if.then29
  %39 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %call35 = call i32 @Perl_mg_set(%struct.sv* %39)
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %lor.lhs.false
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %do.end
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  ret %struct.sv* %40
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_newSVavdefelem(%struct.av* %av, i64 %ix, i1 zeroext %extendible) #0 {
entry:
  %av.addr = alloca %struct.av*, align 8
  %ix.addr = alloca i64, align 8
  %extendible.addr = alloca i8, align 1
  %lv = alloca %struct.sv*, align 8
  store %struct.av* %av, %struct.av** %av.addr, align 8
  store i64 %ix, i64* %ix.addr, align 8
  %frombool = zext i1 %extendible to i8
  store i8 %frombool, i8* %extendible.addr, align 1
  %call = call %struct.sv* @Perl_newSV_type(i32 10)
  store %struct.sv* %call, %struct.sv** %lv, align 8
  %0 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %2, i32 0, i32 9
  store i8 121, i8* %xlv_type, align 8
  %3 = load %struct.sv*, %struct.sv** %lv, align 8
  call void @Perl_sv_magic(%struct.sv* %3, %struct.sv* null, i32 121, i8* null, i32 0)
  %4 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.av, %struct.av* %4, i32 0, i32 1
  %5 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %5, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %6 = load %struct.av*, %struct.av** %av.addr, align 8
  %7 = bitcast %struct.av* %6 to i8*
  %8 = bitcast i8* %7 to %struct.sv*
  %9 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any1 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any1, align 8
  %11 = bitcast i8* %10 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %11, i32 0, i32 8
  store %struct.sv* %8, %struct.sv** %xlv_targ, align 8
  %12 = load i64, i64* %ix.addr, align 8
  %13 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any2, align 8
  %15 = bitcast i8* %14 to %struct.xpvlv*
  %xlv_targoff_u = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %15, i32 0, i32 6
  %xlvu_stargoff = bitcast %union.anon.23* %xlv_targoff_u to i64*
  store i64 %12, i64* %xlvu_stargoff, align 8
  %16 = load i8, i8* %extendible.addr, align 1
  %tobool = trunc i8 %16 to i1
  %17 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i64 1, i64 -1
  %18 = load %struct.sv*, %struct.sv** %lv, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any3, align 8
  %20 = bitcast i8* %19 to %struct.xpvlv*
  %xlv_targlen = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %20, i32 0, i32 7
  store i64 %cond, i64* %xlv_targlen, align 8
  %21 = load %struct.sv*, %struct.sv** %lv, align 8
  ret %struct.sv* %21
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_setref_pv(%struct.sv* %rv, i8* %classname, i8* %pv) #0 {
entry:
  %rv.addr = alloca %struct.sv*, align 8
  %classname.addr = alloca i8*, align 8
  %pv.addr = alloca i8*, align 8
  store %struct.sv* %rv, %struct.sv** %rv.addr, align 8
  store i8* %classname, i8** %classname.addr, align 8
  store i8* %pv, i8** %pv.addr, align 8
  %0 = load i8*, i8** %pv.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %1, %struct.sv* @PL_sv_undef, i32 1538)
  br label %do.body

do.body:                                          ; preds = %if.then
  %2 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 4194304
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then2, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then2, label %if.end

if.then2:                                         ; preds = %cond.false, %cond.true
  %4 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then2, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end4

if.else:                                          ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %6 = load i8*, i8** %classname.addr, align 8
  %call3 = call %struct.sv* @Perl_newSVrv(%struct.sv* %5, i8* %6)
  %7 = load i8*, i8** %pv.addr, align 8
  %8 = ptrtoint i8* %7 to i64
  call void @Perl_sv_setiv(%struct.sv* %call3, i64 %8)
  br label %if.end4

if.end4:                                          ; preds = %if.else, %do.end
  %9 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  ret %struct.sv* %9
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_setref_iv(%struct.sv* %rv, i8* %classname, i64 %iv) #0 {
entry:
  %rv.addr = alloca %struct.sv*, align 8
  %classname.addr = alloca i8*, align 8
  %iv.addr = alloca i64, align 8
  store %struct.sv* %rv, %struct.sv** %rv.addr, align 8
  store i8* %classname, i8** %classname.addr, align 8
  store i64 %iv, i64* %iv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %1 = load i8*, i8** %classname.addr, align 8
  %call = call %struct.sv* @Perl_newSVrv(%struct.sv* %0, i8* %1)
  %2 = load i64, i64* %iv.addr, align 8
  call void @Perl_sv_setiv(%struct.sv* %call, i64 %2)
  %3 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  ret %struct.sv* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_setref_uv(%struct.sv* %rv, i8* %classname, i64 %uv) #0 {
entry:
  %rv.addr = alloca %struct.sv*, align 8
  %classname.addr = alloca i8*, align 8
  %uv.addr = alloca i64, align 8
  store %struct.sv* %rv, %struct.sv** %rv.addr, align 8
  store i8* %classname, i8** %classname.addr, align 8
  store i64 %uv, i64* %uv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %1 = load i8*, i8** %classname.addr, align 8
  %call = call %struct.sv* @Perl_newSVrv(%struct.sv* %0, i8* %1)
  %2 = load i64, i64* %uv.addr, align 8
  call void @Perl_sv_setuv(%struct.sv* %call, i64 %2)
  %3 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  ret %struct.sv* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_setref_nv(%struct.sv* %rv, i8* %classname, double %nv) #0 {
entry:
  %rv.addr = alloca %struct.sv*, align 8
  %classname.addr = alloca i8*, align 8
  %nv.addr = alloca double, align 8
  store %struct.sv* %rv, %struct.sv** %rv.addr, align 8
  store i8* %classname, i8** %classname.addr, align 8
  store double %nv, double* %nv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %1 = load i8*, i8** %classname.addr, align 8
  %call = call %struct.sv* @Perl_newSVrv(%struct.sv* %0, i8* %1)
  %2 = load double, double* %nv.addr, align 8
  call void @Perl_sv_setnv(%struct.sv* %call, double %2)
  %3 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  ret %struct.sv* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_sv_setref_pvn(%struct.sv* %rv, i8* %classname, i8* %pv, i64 %n) #0 {
entry:
  %rv.addr = alloca %struct.sv*, align 8
  %classname.addr = alloca i8*, align 8
  %pv.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  store %struct.sv* %rv, %struct.sv** %rv.addr, align 8
  store i8* %classname, i8** %classname.addr, align 8
  store i8* %pv, i8** %pv.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  %1 = load i8*, i8** %classname.addr, align 8
  %call = call %struct.sv* @Perl_newSVrv(%struct.sv* %0, i8* %1)
  %2 = load i8*, i8** %pv.addr, align 8
  %3 = load i64, i64* %n.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %call, i8* %2, i64 %3)
  %4 = load %struct.sv*, %struct.sv** %rv.addr, align 8
  ret %struct.sv* %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_untaint(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp uge i32 %and, 7
  br i1 %cmp, label %land.lhs.true, label %if.end4

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %4, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %5 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool = icmp ne %struct.magic* %5, null
  br i1 %tobool, label %if.then, label %if.end4

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %6, i32 116)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %7 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool1 = icmp ne %struct.magic* %7, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %8 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %8, i32 0, i32 5
  %9 = load i64, i64* %mg_len, align 8
  %and3 = and i64 %9, -2
  store i64 %and3, i64* %mg_len, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %land.lhs.true, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setpviv(%struct.sv* %sv, i64 %iv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %iv.addr = alloca i64, align 8
  %buf = alloca [22 x i8], align 16
  %ebuf = alloca i8*, align 8
  %ptr = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %iv, i64* %iv.addr, align 8
  %arraydecay = getelementptr inbounds [22 x i8], [22 x i8]* %buf, i64 0, i64 0
  %0 = load i64, i64* %iv.addr, align 8
  %call = call i8* @S_uiv_2buf(i8* %arraydecay, i64 %0, i64 0, i32 0, i8** %ebuf)
  store i8* %call, i8** %ptr, align 8
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %2 = load i8*, i8** %ptr, align 8
  %3 = load i8*, i8** %ebuf, align 8
  %4 = load i8*, i8** %ptr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  call void @Perl_sv_setpvn(%struct.sv* %1, i8* %2, i64 %sub.ptr.sub)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setpviv_mg(%struct.sv* %sv, i64 %iv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %iv.addr = alloca i64, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i64 %iv, i64* %iv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i64, i64* %iv.addr, align 8
  call void @Perl_sv_setpviv(%struct.sv* %0, i64 %1)
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_set(%struct.sv* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setpvf(%struct.sv* %sv, i8* %pat, ...) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  call void @Perl_sv_vsetpvf(%struct.sv* %0, i8* %1, [1 x %struct.__va_list_tag]* %args)
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay23 = bitcast %struct.__va_list_tag* %arraydecay2 to i8*
  call void @llvm.va_end(i8* %arraydecay23)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_vsetpvf(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  %2 = load i8*, i8** %pat.addr, align 8
  %call = call i64 @strlen(i8* %2) #8
  %3 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  call void @Perl_sv_vsetpvfn(%struct.sv* %0, i8* %1, i64 %call, [1 x %struct.__va_list_tag]* %3, %struct.sv** null, i32 0, i8* null)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_setpvf_mg(%struct.sv* %sv, i8* %pat, ...) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  call void @Perl_sv_vsetpvf_mg(%struct.sv* %0, i8* %1, [1 x %struct.__va_list_tag]* %args)
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay23 = bitcast %struct.__va_list_tag* %arraydecay2 to i8*
  call void @llvm.va_end(i8* %arraydecay23)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_vsetpvf_mg(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  %2 = load i8*, i8** %pat.addr, align 8
  %call = call i64 @strlen(i8* %2) #8
  %3 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  call void @Perl_sv_vsetpvfn(%struct.sv* %0, i8* %1, i64 %call, [1 x %struct.__va_list_tag]* %3, %struct.sv** null, i32 0, i8* null)
  br label %do.body

do.body:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1 = call i32 @Perl_mg_set(%struct.sv* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_catpvf(%struct.sv* %sv, i8* %pat, ...) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  %2 = load i8*, i8** %pat.addr, align 8
  %call = call i64 @strlen(i8* %2) #8
  call void @Perl_sv_vcatpvfn_flags(%struct.sv* %0, i8* %1, i64 %call, [1 x %struct.__va_list_tag]* %args, %struct.sv** null, i32 0, i8* null, i32 130)
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay23 = bitcast %struct.__va_list_tag* %arraydecay2 to i8*
  call void @llvm.va_end(i8* %arraydecay23)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_vcatpvfn_flags(%struct.sv* %sv, i8* %pat, i64 %patlen, [1 x %struct.__va_list_tag]* %args, %struct.sv** %svargs, i32 %svmax, i8* %maybe_tainted, i32 %flags) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %patlen.addr = alloca i64, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  %svargs.addr = alloca %struct.sv**, align 8
  %svmax.addr = alloca i32, align 4
  %maybe_tainted.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %p = alloca i8*, align 8
  %q = alloca i8*, align 8
  %patend = alloca i8*, align 8
  %origlen = alloca i64, align 8
  %svix = alloca i32, align 4
  %argsv = alloca %struct.sv*, align 8
  %has_utf8 = alloca i8, align 1
  %pat_utf8 = alloca i8, align 1
  %nsv = alloca %struct.sv*, align 8
  %ebuf = alloca [127 x i8], align 16
  %no_redundant_warning = alloca i8, align 1
  %hexfp = alloca i8, align 1
  %coerce = alloca %union.XOPRETANY, align 8
  %coerce67 = alloca %union.XOPRETANY, align 8
  %s = alloca i8*, align 8
  %coerce144 = alloca %union.XOPRETANY, align 8
  %digits = alloca i32, align 4
  %pp = alloca i8*, align 8
  %nv = alloca double, align 8
  %l = alloca i64, align 8
  %alt = alloca i8, align 1
  %left = alloca i8, align 1
  %vectorize = alloca i8, align 1
  %vectorarg = alloca i8, align 1
  %vec_utf8 = alloca i8, align 1
  %fill = alloca i8, align 1
  %plus = alloca i8, align 1
  %intsize = alloca i8, align 1
  %width = alloca i64, align 8
  %zeros = alloca i64, align 8
  %has_precis = alloca i8, align 1
  %precis = alloca i64, align 8
  %osvix = alloca i32, align 4
  %is_utf8 = alloca i8, align 1
  %esignbuf = alloca [4 x i8], align 1
  %utf8buf = alloca [14 x i8], align 1
  %esignlen = alloca i64, align 8
  %eptr = alloca i8*, align 8
  %fmtstart = alloca i8*, align 8
  %elen = alloca i64, align 8
  %vecsv = alloca %struct.sv*, align 8
  %vecstr = alloca i8*, align 8
  %veclen = alloca i64, align 8
  %c = alloca i8, align 1
  %i = alloca i32, align 4
  %base = alloca i32, align 4
  %iv = alloca i64, align 8
  %uv = alloca i64, align 8
  %fv = alloca x86_fp80, align 16
  %nv283 = alloca double, align 8
  %have = alloca i64, align 8
  %need = alloca i64, align 8
  %gap = alloca i64, align 8
  %dotstr = alloca i8*, align 8
  %dotstrlen = alloca i64, align 8
  %efix = alloca i32, align 4
  %ewix = alloca i32, align 4
  %epix = alloca i32, align 4
  %evix = alloca i32, align 4
  %asterisk = alloca i8, align 1
  %infnan = alloca i8, align 1
  %r = alloca i8*, align 8
  %sv330 = alloca i8, align 1
  %n = alloca i64, align 8
  %hek = alloca %struct.hek*, align 8
  %i985 = alloca i32, align 4
  %old_precis = alloca i64, align 8
  %ulen = alloca i64, align 8
  %p1213 = alloca i64, align 8
  %ulen1309 = alloca i64, align 8
  %tiv = alloca i64, align 8
  %ulen1486 = alloca i64, align 8
  %tuv = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %tempalt = alloca i8, align 1
  %dig = alloca i32, align 4
  %p1925 = alloca i8*, align 8
  %vhex = alloca [17 x i8], align 16
  %v = alloca i8*, align 8
  %vend = alloca i8*, align 8
  %vfnz = alloca i8*, align 8
  %vlnz = alloca i8*, align 8
  %lower = alloca i8, align 1
  %xdig = alloca i8*, align 8
  %zerotail = alloca i32, align 4
  %exponent = alloca i32, align 4
  %hexradix = alloca i8, align 1
  %round = alloca i8, align 1
  %nzero = alloca i64, align 8
  %zerox = alloca i8*, align 8
  %ptr2162 = alloca i8*, align 8
  %p2171 = alloca i8*, align 8
  %msg = alloca %struct.sv*, align 8
  %fmtend = alloca i8*, align 8
  %f = alloca i8*, align 8
  %old_elen = alloca i64, align 8
  %nsv2480 = alloca %struct.sv*, align 8
  %i2554 = alloca i32, align 4
  %i2580 = alloca i32, align 4
  %i2595 = alloca i32, align 4
  %coerce2669 = alloca %union.XOPRETANY, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store i64 %patlen, i64* %patlen.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  store %struct.sv** %svargs, %struct.sv*** %svargs.addr, align 8
  store i32 %svmax, i32* %svmax.addr, align 4
  store i8* %maybe_tainted, i8** %maybe_tainted.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 0, i32* %svix, align 4
  store %struct.sv* null, %struct.sv** %argsv, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 536870912
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %2, i32 0, i32 10
  %3 = load i32, i32* %cop_hints, align 8
  %add = add i32 %3, 0
  %and1 = and i32 %add, 8
  %tobool2 = icmp ne i32 %and1, 0
  %lnot = xor i1 %tobool2, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  %frombool = zext i1 %4 to i8
  store i8 %frombool, i8* %has_utf8, align 1
  %5 = load i8, i8* %has_utf8, align 1
  %tobool3 = trunc i8 %5 to i1
  %frombool4 = zext i1 %tobool3 to i8
  store i8 %frombool4, i8* %pat_utf8, align 1
  store %struct.sv* null, %struct.sv** %nsv, align 8
  store i8 0, i8* %no_redundant_warning, align 1
  store i8 0, i8* %hexfp, align 1
  %6 = load i8*, i8** %maybe_tainted.addr, align 8
  %7 = load i32, i32* %flags.addr, align 4
  %and5 = and i32 %7, 2
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %9, 2097152
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br i1 true, label %land.rhs10, label %land.end12

cond.false:                                       ; preds = %if.then
  br i1 false, label %land.rhs10, label %land.end12

land.rhs10:                                       ; preds = %cond.false, %cond.true
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %10)
  %tobool11 = icmp ne i32 %call, 0
  br label %land.end12

land.end12:                                       ; preds = %land.rhs10, %cond.false, %cond.true
  %11 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool11, %land.rhs10 ]
  %land.ext = zext i1 %11 to i32
  br label %if.end

if.end:                                           ; preds = %land.end12, %land.end
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %13, 430018304
  %cmp = icmp eq i32 %and14, 1024
  br i1 %cmp, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %if.end
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %16, i32 0, i32 2
  %17 = load i64, i64* %xpv_cur, align 8
  store i64 %17, i64* %origlen, align 8
  %18 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %19 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false16:                                     ; preds = %if.end
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call17 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %20, i64* %origlen, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false16, %cond.true15
  %cond = phi i8* [ %19, %cond.true15 ], [ %call17, %cond.false16 ]
  %21 = load i64, i64* %patlen.addr, align 8
  %cmp18 = icmp eq i64 %21, 0
  br i1 %cmp18, label %if.then19, label %if.end39

if.then19:                                        ; preds = %cond.end
  %22 = load i32, i32* %svmax.addr, align 4
  %tobool20 = icmp ne i32 %22, 0
  br i1 %tobool20, label %land.lhs.true, label %if.end38

land.lhs.true:                                    ; preds = %if.then19
  %call21 = call zeroext i1 @Perl_ckwarn(i32 67)
  br i1 %call21, label %if.then22, label %if.end38

if.then22:                                        ; preds = %land.lhs.true
  %23 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool23 = icmp ne %struct.op* %23, null
  br i1 %tobool23, label %cond.true24, label %cond.false35

cond.true24:                                      ; preds = %if.then22
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp25 = icmp eq i32 %bf.cast, 380
  br i1 %cmp25, label %cond.true26, label %cond.false28

cond.true26:                                      ; preds = %cond.true24
  %25 = load %struct.op*, %struct.op** @PL_op, align 8
  %call27 = call i8* @Perl_custom_op_get_field(%struct.op* %25, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call27, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %26 = load i8*, i8** %xop_desc, align 8
  br label %cond.end33

cond.false28:                                     ; preds = %cond.true24
  %27 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type29 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 4
  %bf.load30 = load i16, i16* %op_type29, align 8
  %bf.clear31 = and i16 %bf.load30, 511
  %bf.cast32 = zext i16 %bf.clear31 to i32
  %idxprom = zext i32 %bf.cast32 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %28 = load i8*, i8** %arrayidx, align 8
  br label %cond.end33

cond.end33:                                       ; preds = %cond.false28, %cond.true26
  %cond34 = phi i8* [ %26, %cond.true26 ], [ %28, %cond.false28 ]
  br label %cond.end36

cond.false35:                                     ; preds = %if.then22
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false35, %cond.end33
  %cond37 = phi i8* [ %cond34, %cond.end33 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0), %cond.false35 ]
  call void (i32, i8*, ...) @Perl_warner(i32 67, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.64, i64 0, i64 0), i8* %cond37)
  br label %if.end38

if.end38:                                         ; preds = %cond.end36, %land.lhs.true, %if.then19
  br label %do.end2708

if.end39:                                         ; preds = %cond.end
  %29 = load i64, i64* %patlen.addr, align 8
  %cmp40 = icmp eq i64 %29, 2
  br i1 %cmp40, label %land.lhs.true41, label %if.end107

land.lhs.true41:                                  ; preds = %if.end39
  %30 = load i8*, i8** %pat.addr, align 8
  %arrayidx42 = getelementptr inbounds i8, i8* %30, i64 0
  %31 = load i8, i8* %arrayidx42, align 1
  %conv = sext i8 %31 to i32
  %cmp43 = icmp eq i32 %conv, 37
  br i1 %cmp43, label %land.lhs.true45, label %if.end107

land.lhs.true45:                                  ; preds = %land.lhs.true41
  %32 = load i8*, i8** %pat.addr, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %32, i64 1
  %33 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %33 to i32
  %cmp48 = icmp eq i32 %conv47, 115
  br i1 %cmp48, label %if.then50, label %if.end107

if.then50:                                        ; preds = %land.lhs.true45
  %34 = load i32, i32* %svmax.addr, align 4
  %cmp51 = icmp sgt i32 %34, 1
  br i1 %cmp51, label %land.lhs.true53, label %if.end82

land.lhs.true53:                                  ; preds = %if.then50
  %call54 = call zeroext i1 @Perl_ckwarn(i32 67)
  br i1 %call54, label %if.then56, label %if.end82

if.then56:                                        ; preds = %land.lhs.true53
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool57 = icmp ne %struct.op* %35, null
  br i1 %tobool57, label %cond.true58, label %cond.false79

cond.true58:                                      ; preds = %if.then56
  %36 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type59 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 4
  %bf.load60 = load i16, i16* %op_type59, align 8
  %bf.clear61 = and i16 %bf.load60, 511
  %bf.cast62 = zext i16 %bf.clear61 to i32
  %cmp63 = icmp eq i32 %bf.cast62, 380
  br i1 %cmp63, label %cond.true65, label %cond.false70

cond.true65:                                      ; preds = %cond.true58
  %37 = load %struct.op*, %struct.op** @PL_op, align 8
  %call66 = call i8* @Perl_custom_op_get_field(%struct.op* %37, i32 2)
  %coerce.dive68 = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce67, i32 0, i32 0
  store i8* %call66, i8** %coerce.dive68, align 8
  %xop_desc69 = bitcast %union.XOPRETANY* %coerce67 to i8**
  %38 = load i8*, i8** %xop_desc69, align 8
  br label %cond.end77

cond.false70:                                     ; preds = %cond.true58
  %39 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type71 = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 4
  %bf.load72 = load i16, i16* %op_type71, align 8
  %bf.clear73 = and i16 %bf.load72, 511
  %bf.cast74 = zext i16 %bf.clear73 to i32
  %idxprom75 = zext i32 %bf.cast74 to i64
  %arrayidx76 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom75
  %40 = load i8*, i8** %arrayidx76, align 8
  br label %cond.end77

cond.end77:                                       ; preds = %cond.false70, %cond.true65
  %cond78 = phi i8* [ %38, %cond.true65 ], [ %40, %cond.false70 ]
  br label %cond.end80

cond.false79:                                     ; preds = %if.then56
  br label %cond.end80

cond.end80:                                       ; preds = %cond.false79, %cond.end77
  %cond81 = phi i8* [ %cond78, %cond.end77 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0), %cond.false79 ]
  call void (i32, i8*, ...) @Perl_warner(i32 67, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.64, i64 0, i64 0), i8* %cond81)
  br label %if.end82

if.end82:                                         ; preds = %cond.end80, %land.lhs.true53, %if.then50
  %41 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool83 = icmp ne [1 x %struct.__va_list_tag]* %41, null
  br i1 %tobool83, label %if.then84, label %if.else

if.then84:                                        ; preds = %if.end82
  %42 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %42, i64 0, i64 0
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay, i32 0, i32 0
  %gp_offset = load i32, i32* %gp_offset_p, align 8
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %if.then84
  %43 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay, i32 0, i32 3
  %reg_save_area = load i8*, i8** %43, align 8
  %44 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset
  %45 = bitcast i8* %44 to i8**
  %46 = add i32 %gp_offset, 8
  store i32 %46, i32* %gp_offset_p, align 8
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %if.then84
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay, i32 0, i32 2
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8
  %47 = bitcast i8* %overflow_arg_area to i8**
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %45, %vaarg.in_reg ], [ %47, %vaarg.in_mem ]
  %48 = load i8*, i8** %vaarg.addr, align 8
  store i8* %48, i8** %s, align 8
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %50 = load i8*, i8** %s, align 8
  %tobool85 = icmp ne i8* %50, null
  br i1 %tobool85, label %cond.true86, label %cond.false87

cond.true86:                                      ; preds = %vaarg.end
  %51 = load i8*, i8** %s, align 8
  br label %cond.end88

cond.false87:                                     ; preds = %vaarg.end
  br label %cond.end88

cond.end88:                                       ; preds = %cond.false87, %cond.true86
  %cond89 = phi i8* [ %51, %cond.true86 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @Perl_sv_vcatpvfn_flags.nullstr, i64 0, i64 0), %cond.false87 ]
  call void @Perl_sv_catpv_flags(%struct.sv* %49, i8* %cond89, i32 0)
  br label %if.end106

if.else:                                          ; preds = %if.end82
  %52 = load i32, i32* %svix, align 4
  %53 = load i32, i32* %svmax.addr, align 4
  %cmp90 = icmp slt i32 %52, %53
  br i1 %cmp90, label %if.then92, label %if.else103

if.then92:                                        ; preds = %if.else
  %54 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %55 = load %struct.sv*, %struct.sv** %54, align 8
  %sv_flags93 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags93, align 4
  %and94 = and i32 %56, 2097152
  %tobool95 = icmp ne i32 %and94, 0
  br i1 %tobool95, label %cond.true96, label %cond.false97

cond.true96:                                      ; preds = %if.then92
  br i1 true, label %land.rhs98, label %land.end101

cond.false97:                                     ; preds = %if.then92
  br i1 false, label %land.rhs98, label %land.end101

land.rhs98:                                       ; preds = %cond.false97, %cond.true96
  %57 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %58 = load %struct.sv*, %struct.sv** %57, align 8
  %call99 = call i32 @Perl_mg_get(%struct.sv* %58)
  %tobool100 = icmp ne i32 %call99, 0
  br label %land.end101

land.end101:                                      ; preds = %land.rhs98, %cond.false97, %cond.true96
  %59 = phi i1 [ false, %cond.false97 ], [ false, %cond.true96 ], [ %tobool100, %land.rhs98 ]
  %land.ext102 = zext i1 %59 to i32
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %61 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %62 = load %struct.sv*, %struct.sv** %61, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %60, %struct.sv* %62, i32 0)
  br label %if.end105

if.else103:                                       ; preds = %if.else
  %call104 = call %struct.sv* @S_vcatpvfn_missing_argument()
  br label %if.end105

if.end105:                                        ; preds = %if.else103, %land.end101
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %cond.end88
  br label %do.end2708

if.end107:                                        ; preds = %land.lhs.true45, %land.lhs.true41, %if.end39
  %63 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool108 = icmp ne [1 x %struct.__va_list_tag]* %63, null
  br i1 %tobool108, label %land.lhs.true109, label %if.end172

land.lhs.true109:                                 ; preds = %if.end107
  %64 = load i64, i64* %patlen.addr, align 8
  %cmp110 = icmp eq i64 %64, 3
  br i1 %cmp110, label %land.lhs.true112, label %if.end172

land.lhs.true112:                                 ; preds = %land.lhs.true109
  %65 = load i8*, i8** %pat.addr, align 8
  %arrayidx113 = getelementptr inbounds i8, i8* %65, i64 0
  %66 = load i8, i8* %arrayidx113, align 1
  %conv114 = sext i8 %66 to i32
  %cmp115 = icmp eq i32 %conv114, 37
  br i1 %cmp115, label %land.lhs.true117, label %if.end172

land.lhs.true117:                                 ; preds = %land.lhs.true112
  %67 = load i8*, i8** %pat.addr, align 8
  %arrayidx118 = getelementptr inbounds i8, i8* %67, i64 1
  %68 = load i8, i8* %arrayidx118, align 1
  %conv119 = sext i8 %68 to i32
  %cmp120 = icmp eq i32 %conv119, 45
  br i1 %cmp120, label %land.lhs.true122, label %if.end172

land.lhs.true122:                                 ; preds = %land.lhs.true117
  %69 = load i8*, i8** %pat.addr, align 8
  %arrayidx123 = getelementptr inbounds i8, i8* %69, i64 2
  %70 = load i8, i8* %arrayidx123, align 1
  %conv124 = sext i8 %70 to i32
  %cmp125 = icmp eq i32 %conv124, 112
  br i1 %cmp125, label %if.then127, label %if.end172

if.then127:                                       ; preds = %land.lhs.true122
  %71 = load i32, i32* %svmax.addr, align 4
  %cmp128 = icmp sgt i32 %71, 1
  br i1 %cmp128, label %land.lhs.true130, label %if.end159

land.lhs.true130:                                 ; preds = %if.then127
  %call131 = call zeroext i1 @Perl_ckwarn(i32 67)
  br i1 %call131, label %if.then133, label %if.end159

if.then133:                                       ; preds = %land.lhs.true130
  %72 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool134 = icmp ne %struct.op* %72, null
  br i1 %tobool134, label %cond.true135, label %cond.false156

cond.true135:                                     ; preds = %if.then133
  %73 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type136 = getelementptr inbounds %struct.op, %struct.op* %73, i32 0, i32 4
  %bf.load137 = load i16, i16* %op_type136, align 8
  %bf.clear138 = and i16 %bf.load137, 511
  %bf.cast139 = zext i16 %bf.clear138 to i32
  %cmp140 = icmp eq i32 %bf.cast139, 380
  br i1 %cmp140, label %cond.true142, label %cond.false147

cond.true142:                                     ; preds = %cond.true135
  %74 = load %struct.op*, %struct.op** @PL_op, align 8
  %call143 = call i8* @Perl_custom_op_get_field(%struct.op* %74, i32 2)
  %coerce.dive145 = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce144, i32 0, i32 0
  store i8* %call143, i8** %coerce.dive145, align 8
  %xop_desc146 = bitcast %union.XOPRETANY* %coerce144 to i8**
  %75 = load i8*, i8** %xop_desc146, align 8
  br label %cond.end154

cond.false147:                                    ; preds = %cond.true135
  %76 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type148 = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 4
  %bf.load149 = load i16, i16* %op_type148, align 8
  %bf.clear150 = and i16 %bf.load149, 511
  %bf.cast151 = zext i16 %bf.clear150 to i32
  %idxprom152 = zext i32 %bf.cast151 to i64
  %arrayidx153 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom152
  %77 = load i8*, i8** %arrayidx153, align 8
  br label %cond.end154

cond.end154:                                      ; preds = %cond.false147, %cond.true142
  %cond155 = phi i8* [ %75, %cond.true142 ], [ %77, %cond.false147 ]
  br label %cond.end157

cond.false156:                                    ; preds = %if.then133
  br label %cond.end157

cond.end157:                                      ; preds = %cond.false156, %cond.end154
  %cond158 = phi i8* [ %cond155, %cond.end154 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0), %cond.false156 ]
  call void (i32, i8*, ...) @Perl_warner(i32 67, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.64, i64 0, i64 0), i8* %cond158)
  br label %if.end159

if.end159:                                        ; preds = %cond.end157, %land.lhs.true130, %if.then127
  %78 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay160 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %78, i64 0, i64 0
  %gp_offset_p161 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay160, i32 0, i32 0
  %gp_offset162 = load i32, i32* %gp_offset_p161, align 8
  %fits_in_gp163 = icmp ule i32 %gp_offset162, 40
  br i1 %fits_in_gp163, label %vaarg.in_reg164, label %vaarg.in_mem166

vaarg.in_reg164:                                  ; preds = %if.end159
  %79 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay160, i32 0, i32 3
  %reg_save_area165 = load i8*, i8** %79, align 8
  %80 = getelementptr i8, i8* %reg_save_area165, i32 %gp_offset162
  %81 = bitcast i8* %80 to i8**
  %82 = add i32 %gp_offset162, 8
  store i32 %82, i32* %gp_offset_p161, align 8
  br label %vaarg.end170

vaarg.in_mem166:                                  ; preds = %if.end159
  %overflow_arg_area_p167 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay160, i32 0, i32 2
  %overflow_arg_area168 = load i8*, i8** %overflow_arg_area_p167, align 8
  %83 = bitcast i8* %overflow_arg_area168 to i8**
  %overflow_arg_area.next169 = getelementptr i8, i8* %overflow_arg_area168, i32 8
  store i8* %overflow_arg_area.next169, i8** %overflow_arg_area_p167, align 8
  br label %vaarg.end170

vaarg.end170:                                     ; preds = %vaarg.in_mem166, %vaarg.in_reg164
  %vaarg.addr171 = phi i8** [ %81, %vaarg.in_reg164 ], [ %83, %vaarg.in_mem166 ]
  %84 = load i8*, i8** %vaarg.addr171, align 8
  %85 = bitcast i8* %84 to %struct.sv*
  store %struct.sv* %85, %struct.sv** %argsv, align 8
  %86 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %87 = load %struct.sv*, %struct.sv** %argsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %86, %struct.sv* %87, i32 0)
  br label %do.end2708

if.end172:                                        ; preds = %land.lhs.true122, %land.lhs.true117, %land.lhs.true112, %land.lhs.true109, %if.end107
  %88 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool173 = icmp ne [1 x %struct.__va_list_tag]* %88, null
  br i1 %tobool173, label %if.end264, label %land.lhs.true174

land.lhs.true174:                                 ; preds = %if.end172
  %89 = load i64, i64* %patlen.addr, align 8
  %cmp175 = icmp ule i64 %89, 5
  br i1 %cmp175, label %land.lhs.true177, label %if.end264

land.lhs.true177:                                 ; preds = %land.lhs.true174
  %90 = load i8*, i8** %pat.addr, align 8
  %arrayidx178 = getelementptr inbounds i8, i8* %90, i64 0
  %91 = load i8, i8* %arrayidx178, align 1
  %conv179 = sext i8 %91 to i32
  %cmp180 = icmp eq i32 %conv179, 37
  br i1 %cmp180, label %land.lhs.true182, label %if.end264

land.lhs.true182:                                 ; preds = %land.lhs.true177
  %92 = load i8*, i8** %pat.addr, align 8
  %arrayidx183 = getelementptr inbounds i8, i8* %92, i64 1
  %93 = load i8, i8* %arrayidx183, align 1
  %conv184 = sext i8 %93 to i32
  %cmp185 = icmp eq i32 %conv184, 46
  br i1 %cmp185, label %land.lhs.true187, label %if.end264

land.lhs.true187:                                 ; preds = %land.lhs.true182
  %94 = load i8*, i8** %pat.addr, align 8
  %95 = load i64, i64* %patlen.addr, align 8
  %sub = sub i64 %95, 1
  %arrayidx188 = getelementptr inbounds i8, i8* %94, i64 %sub
  %96 = load i8, i8* %arrayidx188, align 1
  %conv189 = sext i8 %96 to i32
  %cmp190 = icmp eq i32 %conv189, 103
  br i1 %cmp190, label %if.then197, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true187
  %97 = load i8*, i8** %pat.addr, align 8
  %98 = load i64, i64* %patlen.addr, align 8
  %sub192 = sub i64 %98, 1
  %arrayidx193 = getelementptr inbounds i8, i8* %97, i64 %sub192
  %99 = load i8, i8* %arrayidx193, align 1
  %conv194 = sext i8 %99 to i32
  %cmp195 = icmp eq i32 %conv194, 102
  br i1 %cmp195, label %if.then197, label %if.end264

if.then197:                                       ; preds = %lor.lhs.false, %land.lhs.true187
  store i32 0, i32* %digits, align 4
  %100 = load i8*, i8** %pat.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %100, i64 2
  store i8* %add.ptr, i8** %pp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then197
  %101 = load i8*, i8** %pp, align 8
  %102 = load i8, i8* %101, align 1
  %conv198 = sext i8 %102 to i32
  %cmp199 = icmp sge i32 %conv198, 48
  br i1 %cmp199, label %land.rhs201, label %land.end205

land.rhs201:                                      ; preds = %while.cond
  %103 = load i8*, i8** %pp, align 8
  %104 = load i8, i8* %103, align 1
  %conv202 = sext i8 %104 to i32
  %cmp203 = icmp sle i32 %conv202, 57
  br label %land.end205

land.end205:                                      ; preds = %land.rhs201, %while.cond
  %105 = phi i1 [ false, %while.cond ], [ %cmp203, %land.rhs201 ]
  br i1 %105, label %while.body, label %while.end

while.body:                                       ; preds = %land.end205
  %106 = load i32, i32* %digits, align 4
  %mul = mul i32 10, %106
  %107 = load i8*, i8** %pp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %107, i32 1
  store i8* %incdec.ptr, i8** %pp, align 8
  %108 = load i8, i8* %107, align 1
  %conv207 = sext i8 %108 to i32
  %sub208 = sub nsw i32 %conv207, 48
  %add209 = add i32 %mul, %sub208
  store i32 %add209, i32* %digits, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end205
  %109 = load i8*, i8** %pp, align 8
  %110 = load i8*, i8** %pat.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %109 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %110 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %111 = load i64, i64* %patlen.addr, align 8
  %conv210 = trunc i64 %111 to i32
  %sub211 = sub nsw i32 %conv210, 1
  %conv212 = sext i32 %sub211 to i64
  %cmp213 = icmp eq i64 %sub.ptr.sub, %conv212
  br i1 %cmp213, label %land.lhs.true215, label %if.end263

land.lhs.true215:                                 ; preds = %while.end
  %112 = load i32, i32* %svix, align 4
  %113 = load i32, i32* %svmax.addr, align 4
  %cmp216 = icmp slt i32 %112, %113
  br i1 %cmp216, label %if.then218, label %if.end263

if.then218:                                       ; preds = %land.lhs.true215
  %114 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %115 = load %struct.sv*, %struct.sv** %114, align 8
  %sv_flags219 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 2
  %116 = load i32, i32* %sv_flags219, align 4
  %and220 = and i32 %116, 2097664
  %cmp221 = icmp eq i32 %and220, 512
  br i1 %cmp221, label %cond.true223, label %cond.false225

cond.true223:                                     ; preds = %if.then218
  %117 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %118 = load %struct.sv*, %struct.sv** %117, align 8
  %sv_any224 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 0
  %119 = load i8*, i8** %sv_any224, align 8
  %120 = bitcast i8* %119 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %120, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %121 = load double, double* %xnv_nv, align 8
  br label %cond.end227

cond.false225:                                    ; preds = %if.then218
  %122 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %123 = load %struct.sv*, %struct.sv** %122, align 8
  %call226 = call double @Perl_sv_2nv_flags(%struct.sv* %123, i32 2)
  br label %cond.end227

cond.end227:                                      ; preds = %cond.false225, %cond.true223
  %cond228 = phi double [ %121, %cond.true223 ], [ %call226, %cond.false225 ]
  store double %cond228, double* %nv, align 8
  %124 = load double, double* %nv, align 8
  %call229 = call zeroext i1 @Perl_isinfnan(double %124)
  br i1 %call229, label %cond.false231, label %cond.true230

cond.true230:                                     ; preds = %cond.end227
  br i1 true, label %if.then232, label %if.end262

cond.false231:                                    ; preds = %cond.end227
  br i1 false, label %if.then232, label %if.end262

if.then232:                                       ; preds = %cond.false231, %cond.true230
  %125 = load i8*, i8** %pp, align 8
  %126 = load i8, i8* %125, align 1
  %conv233 = sext i8 %126 to i32
  %cmp234 = icmp eq i32 %conv233, 103
  br i1 %cmp234, label %if.then236, label %if.else251

if.then236:                                       ; preds = %if.then232
  %127 = load i32, i32* %digits, align 4
  %tobool237 = icmp ne i32 %127, 0
  br i1 %tobool237, label %land.lhs.true238, label %if.end250

land.lhs.true238:                                 ; preds = %if.then236
  %128 = load i32, i32* %digits, align 4
  %conv239 = zext i32 %128 to i64
  %cmp240 = icmp ult i64 %conv239, 102
  br i1 %cmp240, label %if.then242, label %if.end250

if.then242:                                       ; preds = %land.lhs.true238
  %arraydecay243 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i64 0, i64 0
  %129 = load i32, i32* %digits, align 4
  %130 = load double, double* %nv, align 8
  %call244 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay243, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i32 %129, double %130) #6
  %131 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %arraydecay245 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i64 0, i64 0
  call void @Perl_sv_catpv_flags(%struct.sv* %131, i8* %arraydecay245, i32 0)
  %arraydecay246 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i64 0, i64 0
  %132 = load i8, i8* %arraydecay246, align 16
  %tobool247 = icmp ne i8 %132, 0
  br i1 %tobool247, label %if.then248, label %if.end249

if.then248:                                       ; preds = %if.then242
  br label %do.end2708

if.end249:                                        ; preds = %if.then242
  br label %if.end250

if.end250:                                        ; preds = %if.end249, %land.lhs.true238, %if.then236
  br label %if.end261

if.else251:                                       ; preds = %if.then232
  %133 = load i32, i32* %digits, align 4
  %tobool252 = icmp ne i32 %133, 0
  br i1 %tobool252, label %if.end260, label %if.then253

if.then253:                                       ; preds = %if.else251
  %134 = load double, double* %nv, align 8
  %arraydecay254 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i64 0, i64 0
  %add.ptr255 = getelementptr inbounds i8, i8* %arraydecay254, i64 127
  %call256 = call i8* @S_F0convert(double %134, i8* %add.ptr255, i64* %l)
  store i8* %call256, i8** %p, align 8
  %tobool257 = icmp ne i8* %call256, null
  br i1 %tobool257, label %if.then258, label %if.end259

if.then258:                                       ; preds = %if.then253
  %135 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %136 = load i8*, i8** %p, align 8
  %137 = load i64, i64* %l, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %135, i8* %136, i64 %137, i32 0)
  br label %do.end2708

if.end259:                                        ; preds = %if.then253
  br label %if.end260

if.end260:                                        ; preds = %if.end259, %if.else251
  br label %if.end261

if.end261:                                        ; preds = %if.end260, %if.end250
  br label %if.end262

if.end262:                                        ; preds = %if.end261, %cond.false231, %cond.true230
  br label %if.end263

if.end263:                                        ; preds = %if.end262, %land.lhs.true215, %while.end
  br label %if.end264

if.end264:                                        ; preds = %if.end263, %lor.lhs.false, %land.lhs.true182, %land.lhs.true177, %land.lhs.true174, %if.end172
  %138 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool265 = icmp ne [1 x %struct.__va_list_tag]* %138, null
  br i1 %tobool265, label %if.end279, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end264
  %139 = load i32, i32* %svix, align 4
  %140 = load i32, i32* %svmax.addr, align 4
  %cmp267 = icmp slt i32 %139, %140
  br i1 %cmp267, label %land.lhs.true269, label %if.end279

land.lhs.true269:                                 ; preds = %land.lhs.true266
  %141 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %142 = load %struct.sv*, %struct.sv** %141, align 8
  %sv_flags270 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 2
  %143 = load i32, i32* %sv_flags270, align 4
  %and271 = and i32 %143, 536870912
  %tobool272 = icmp ne i32 %and271, 0
  br i1 %tobool272, label %land.lhs.true273, label %if.end279

land.lhs.true273:                                 ; preds = %land.lhs.true269
  %144 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints274 = getelementptr inbounds %struct.cop, %struct.cop* %144, i32 0, i32 10
  %145 = load i32, i32* %cop_hints274, align 8
  %add275 = add i32 %145, 0
  %and276 = and i32 %add275, 8
  %tobool277 = icmp ne i32 %and276, 0
  br i1 %tobool277, label %if.end279, label %if.then278

if.then278:                                       ; preds = %land.lhs.true273
  store i8 1, i8* %has_utf8, align 1
  br label %if.end279

if.end279:                                        ; preds = %if.then278, %land.lhs.true273, %land.lhs.true269, %land.lhs.true266, %if.end264
  %146 = load i8*, i8** %pat.addr, align 8
  %147 = load i64, i64* %patlen.addr, align 8
  %add.ptr280 = getelementptr inbounds i8, i8* %146, i64 %147
  store i8* %add.ptr280, i8** %patend, align 8
  %148 = load i8*, i8** %pat.addr, align 8
  store i8* %148, i8** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc2648, %if.end279
  %149 = load i8*, i8** %p, align 8
  %150 = load i8*, i8** %patend, align 8
  %cmp281 = icmp ult i8* %149, %150
  br i1 %cmp281, label %for.body, label %for.end2649

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %alt, align 1
  store i8 0, i8* %left, align 1
  store i8 0, i8* %vectorize, align 1
  store i8 0, i8* %vectorarg, align 1
  store i8 0, i8* %vec_utf8, align 1
  store i8 32, i8* %fill, align 1
  store i8 0, i8* %plus, align 1
  store i8 0, i8* %intsize, align 1
  store i64 0, i64* %width, align 8
  store i64 0, i64* %zeros, align 8
  store i8 0, i8* %has_precis, align 1
  store i64 0, i64* %precis, align 8
  %151 = load i32, i32* %svix, align 4
  store i32 %151, i32* %osvix, align 4
  store i8 0, i8* %is_utf8, align 1
  store i64 0, i64* %esignlen, align 8
  store i8* null, i8** %eptr, align 8
  store i64 0, i64* %elen, align 8
  store %struct.sv* null, %struct.sv** %vecsv, align 8
  store i8* null, i8** %vecstr, align 8
  store i64 0, i64* %veclen, align 8
  store i8 0, i8* %c, align 1
  store i32 0, i32* %base, align 4
  store i64 0, i64* %iv, align 8
  store i64 0, i64* %uv, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.66, i64 0, i64 0), i8** %dotstr, align 8
  store i64 1, i64* %dotstrlen, align 8
  store i32 0, i32* %efix, align 4
  store i32 0, i32* %ewix, align 4
  store i32 0, i32* %epix, align 4
  store i32 0, i32* %evix, align 4
  store i8 0, i8* %asterisk, align 1
  store i8 0, i8* %infnan, align 1
  %152 = load i8*, i8** %p, align 8
  store i8* %152, i8** %q, align 8
  br label %for.cond284

for.cond284:                                      ; preds = %for.inc, %for.body
  %153 = load i8*, i8** %q, align 8
  %154 = load i8*, i8** %patend, align 8
  %cmp285 = icmp ult i8* %153, %154
  br i1 %cmp285, label %land.rhs287, label %land.end291

land.rhs287:                                      ; preds = %for.cond284
  %155 = load i8*, i8** %q, align 8
  %156 = load i8, i8* %155, align 1
  %conv288 = sext i8 %156 to i32
  %cmp289 = icmp ne i32 %conv288, 37
  br label %land.end291

land.end291:                                      ; preds = %land.rhs287, %for.cond284
  %157 = phi i1 [ false, %for.cond284 ], [ %cmp289, %land.rhs287 ]
  br i1 %157, label %for.body293, label %for.end

for.body293:                                      ; preds = %land.end291
  br label %for.inc

for.inc:                                          ; preds = %for.body293
  %158 = load i8*, i8** %q, align 8
  %incdec.ptr294 = getelementptr inbounds i8, i8* %158, i32 1
  store i8* %incdec.ptr294, i8** %q, align 8
  br label %for.cond284

for.end:                                          ; preds = %land.end291
  %159 = load i8*, i8** %q, align 8
  %160 = load i8*, i8** %p, align 8
  %cmp295 = icmp ugt i8* %159, %160
  br i1 %cmp295, label %if.then297, label %if.end322

if.then297:                                       ; preds = %for.end
  %161 = load i8, i8* %has_utf8, align 1
  %tobool298 = trunc i8 %161 to i1
  br i1 %tobool298, label %land.lhs.true300, label %if.else317

land.lhs.true300:                                 ; preds = %if.then297
  %162 = load i8, i8* %pat_utf8, align 1
  %tobool301 = trunc i8 %162 to i1
  br i1 %tobool301, label %if.else317, label %if.then302

if.then302:                                       ; preds = %land.lhs.true300
  br label %do.body

do.body:                                          ; preds = %if.then302
  %163 = load %struct.sv*, %struct.sv** %nsv, align 8
  %tobool303 = icmp ne %struct.sv* %163, null
  br i1 %tobool303, label %if.else309, label %if.then304

if.then304:                                       ; preds = %do.body
  %164 = load i8*, i8** %p, align 8
  %165 = load i8*, i8** %q, align 8
  %166 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast305 = ptrtoint i8* %165 to i64
  %sub.ptr.rhs.cast306 = ptrtoint i8* %166 to i64
  %sub.ptr.sub307 = sub i64 %sub.ptr.lhs.cast305, %sub.ptr.rhs.cast306
  %call308 = call %struct.sv* @Perl_newSVpvn_flags(i8* %164, i64 %sub.ptr.sub307, i32 524288)
  store %struct.sv* %call308, %struct.sv** %nsv, align 8
  br label %if.end313

if.else309:                                       ; preds = %do.body
  %167 = load %struct.sv*, %struct.sv** %nsv, align 8
  %168 = load i8*, i8** %p, align 8
  %169 = load i8*, i8** %q, align 8
  %170 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast310 = ptrtoint i8* %169 to i64
  %sub.ptr.rhs.cast311 = ptrtoint i8* %170 to i64
  %sub.ptr.sub312 = sub i64 %sub.ptr.lhs.cast310, %sub.ptr.rhs.cast311
  call void @Perl_sv_setpvn(%struct.sv* %167, i8* %168, i64 %sub.ptr.sub312)
  br label %if.end313

if.end313:                                        ; preds = %if.else309, %if.then304
  %171 = load %struct.sv*, %struct.sv** %nsv, align 8
  %sv_flags314 = getelementptr inbounds %struct.sv, %struct.sv* %171, i32 0, i32 2
  %172 = load i32, i32* %sv_flags314, align 4
  %and315 = and i32 %172, -536870913
  store i32 %and315, i32* %sv_flags314, align 4
  %173 = load %struct.sv*, %struct.sv** %nsv, align 8
  %call316 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %173, i32 2, i64 0)
  %174 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %175 = load %struct.sv*, %struct.sv** %nsv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %174, %struct.sv* %175, i32 0)
  br label %do.end

do.end:                                           ; preds = %if.end313
  br label %if.end321

if.else317:                                       ; preds = %land.lhs.true300, %if.then297
  %176 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %177 = load i8*, i8** %p, align 8
  %178 = load i8*, i8** %q, align 8
  %179 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast318 = ptrtoint i8* %178 to i64
  %sub.ptr.rhs.cast319 = ptrtoint i8* %179 to i64
  %sub.ptr.sub320 = sub i64 %sub.ptr.lhs.cast318, %sub.ptr.rhs.cast319
  call void @Perl_sv_catpvn_flags(%struct.sv* %176, i8* %177, i64 %sub.ptr.sub320, i32 0)
  br label %if.end321

if.end321:                                        ; preds = %if.else317, %do.end
  %180 = load i8*, i8** %q, align 8
  store i8* %180, i8** %p, align 8
  br label %if.end322

if.end322:                                        ; preds = %if.end321, %for.end
  %181 = load i8*, i8** %q, align 8
  %incdec.ptr323 = getelementptr inbounds i8, i8* %181, i32 1
  store i8* %incdec.ptr323, i8** %q, align 8
  %182 = load i8*, i8** %patend, align 8
  %cmp324 = icmp uge i8* %181, %182
  br i1 %cmp324, label %if.then326, label %if.end327

if.then326:                                       ; preds = %if.end322
  br label %for.end2649

if.end327:                                        ; preds = %if.end322
  %183 = load i8*, i8** %q, align 8
  store i8* %183, i8** %fmtstart, align 8
  %184 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool328 = icmp ne [1 x %struct.__va_list_tag]* %184, null
  br i1 %tobool328, label %if.then329, label %if.end477

if.then329:                                       ; preds = %if.end327
  %185 = load i8*, i8** %q, align 8
  store i8* %185, i8** %r, align 8
  store i8 0, i8* %sv330, align 1
  store i64 0, i64* %n, align 8
  %186 = load i8*, i8** %q, align 8
  %187 = load i8, i8* %186, align 1
  %conv331 = sext i8 %187 to i32
  %cmp332 = icmp eq i32 %conv331, 45
  br i1 %cmp332, label %if.then334, label %if.else338

if.then334:                                       ; preds = %if.then329
  %188 = load i8*, i8** %q, align 8
  %incdec.ptr335 = getelementptr inbounds i8, i8* %188, i32 1
  store i8* %incdec.ptr335, i8** %q, align 8
  %189 = load i8, i8* %188, align 1
  %tobool336 = icmp ne i8 %189, 0
  %frombool337 = zext i1 %tobool336 to i8
  store i8 %frombool337, i8* %sv330, align 1
  br label %if.end386

if.else338:                                       ; preds = %if.then329
  %190 = load i8*, i8** %q, align 8
  %call339 = call i32 @strncmp(i8* %190, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.67, i64 0, i64 0), i64 7) #8
  %tobool340 = icmp ne i32 %call339, 0
  br i1 %tobool340, label %if.end385, label %if.then341

if.then341:                                       ; preds = %if.else338
  %191 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay342 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %191, i64 0, i64 0
  %gp_offset_p343 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay342, i32 0, i32 0
  %gp_offset344 = load i32, i32* %gp_offset_p343, align 8
  %fits_in_gp345 = icmp ule i32 %gp_offset344, 40
  br i1 %fits_in_gp345, label %vaarg.in_reg346, label %vaarg.in_mem348

vaarg.in_reg346:                                  ; preds = %if.then341
  %192 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay342, i32 0, i32 3
  %reg_save_area347 = load i8*, i8** %192, align 8
  %193 = getelementptr i8, i8* %reg_save_area347, i32 %gp_offset344
  %194 = bitcast i8* %193 to i32*
  %195 = add i32 %gp_offset344, 8
  store i32 %195, i32* %gp_offset_p343, align 8
  br label %vaarg.end352

vaarg.in_mem348:                                  ; preds = %if.then341
  %overflow_arg_area_p349 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay342, i32 0, i32 2
  %overflow_arg_area350 = load i8*, i8** %overflow_arg_area_p349, align 8
  %196 = bitcast i8* %overflow_arg_area350 to i32*
  %overflow_arg_area.next351 = getelementptr i8, i8* %overflow_arg_area350, i32 8
  store i8* %overflow_arg_area.next351, i8** %overflow_arg_area_p349, align 8
  br label %vaarg.end352

vaarg.end352:                                     ; preds = %vaarg.in_mem348, %vaarg.in_reg346
  %vaarg.addr353 = phi i32* [ %194, %vaarg.in_reg346 ], [ %196, %vaarg.in_mem348 ]
  %197 = load i32, i32* %vaarg.addr353, align 4
  %tobool354 = icmp ne i32 %197, 0
  %frombool355 = zext i1 %tobool354 to i8
  store i8 %frombool355, i8* %is_utf8, align 1
  %198 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay356 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %198, i64 0, i64 0
  %gp_offset_p357 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay356, i32 0, i32 0
  %gp_offset358 = load i32, i32* %gp_offset_p357, align 8
  %fits_in_gp359 = icmp ule i32 %gp_offset358, 40
  br i1 %fits_in_gp359, label %vaarg.in_reg360, label %vaarg.in_mem362

vaarg.in_reg360:                                  ; preds = %vaarg.end352
  %199 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay356, i32 0, i32 3
  %reg_save_area361 = load i8*, i8** %199, align 8
  %200 = getelementptr i8, i8* %reg_save_area361, i32 %gp_offset358
  %201 = bitcast i8* %200 to i64*
  %202 = add i32 %gp_offset358, 8
  store i32 %202, i32* %gp_offset_p357, align 8
  br label %vaarg.end366

vaarg.in_mem362:                                  ; preds = %vaarg.end352
  %overflow_arg_area_p363 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay356, i32 0, i32 2
  %overflow_arg_area364 = load i8*, i8** %overflow_arg_area_p363, align 8
  %203 = bitcast i8* %overflow_arg_area364 to i64*
  %overflow_arg_area.next365 = getelementptr i8, i8* %overflow_arg_area364, i32 8
  store i8* %overflow_arg_area.next365, i8** %overflow_arg_area_p363, align 8
  br label %vaarg.end366

vaarg.end366:                                     ; preds = %vaarg.in_mem362, %vaarg.in_reg360
  %vaarg.addr367 = phi i64* [ %201, %vaarg.in_reg360 ], [ %203, %vaarg.in_mem362 ]
  %204 = load i64, i64* %vaarg.addr367, align 8
  store i64 %204, i64* %elen, align 8
  %205 = load i64, i64* %elen, align 8
  %cmp368 = icmp slt i64 %205, 0
  br i1 %cmp368, label %if.then370, label %if.end371

if.then370:                                       ; preds = %vaarg.end366
  store i64 0, i64* %elen, align 8
  br label %if.end371

if.end371:                                        ; preds = %if.then370, %vaarg.end366
  %206 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay372 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %206, i64 0, i64 0
  %gp_offset_p373 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay372, i32 0, i32 0
  %gp_offset374 = load i32, i32* %gp_offset_p373, align 8
  %fits_in_gp375 = icmp ule i32 %gp_offset374, 40
  br i1 %fits_in_gp375, label %vaarg.in_reg376, label %vaarg.in_mem378

vaarg.in_reg376:                                  ; preds = %if.end371
  %207 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay372, i32 0, i32 3
  %reg_save_area377 = load i8*, i8** %207, align 8
  %208 = getelementptr i8, i8* %reg_save_area377, i32 %gp_offset374
  %209 = bitcast i8* %208 to i8**
  %210 = add i32 %gp_offset374, 8
  store i32 %210, i32* %gp_offset_p373, align 8
  br label %vaarg.end382

vaarg.in_mem378:                                  ; preds = %if.end371
  %overflow_arg_area_p379 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay372, i32 0, i32 2
  %overflow_arg_area380 = load i8*, i8** %overflow_arg_area_p379, align 8
  %211 = bitcast i8* %overflow_arg_area380 to i8**
  %overflow_arg_area.next381 = getelementptr i8, i8* %overflow_arg_area380, i32 8
  store i8* %overflow_arg_area.next381, i8** %overflow_arg_area_p379, align 8
  br label %vaarg.end382

vaarg.end382:                                     ; preds = %vaarg.in_mem378, %vaarg.in_reg376
  %vaarg.addr383 = phi i8** [ %209, %vaarg.in_reg376 ], [ %211, %vaarg.in_mem378 ]
  %212 = load i8*, i8** %vaarg.addr383, align 8
  store i8* %212, i8** %eptr, align 8
  %213 = load i8*, i8** %q, align 8
  %add.ptr384 = getelementptr inbounds i8, i8* %213, i64 7
  store i8* %add.ptr384, i8** %q, align 8
  br label %string

if.end385:                                        ; preds = %if.else338
  br label %if.end386

if.end386:                                        ; preds = %if.end385, %if.then334
  %call387 = call i32 @S_expect_number(i8** %q)
  %conv388 = sext i32 %call387 to i64
  store i64 %conv388, i64* %n, align 8
  %214 = load i8*, i8** %q, align 8
  %incdec.ptr389 = getelementptr inbounds i8, i8* %214, i32 1
  store i8* %incdec.ptr389, i8** %q, align 8
  %215 = load i8, i8* %214, align 1
  %conv390 = sext i8 %215 to i32
  %cmp391 = icmp eq i32 %conv390, 112
  br i1 %cmp391, label %if.then393, label %if.end476

if.then393:                                       ; preds = %if.end386
  %216 = load i8, i8* %sv330, align 1
  %tobool394 = trunc i8 %216 to i1
  br i1 %tobool394, label %if.then395, label %if.else435

if.then395:                                       ; preds = %if.then393
  %217 = load i64, i64* %n, align 8
  %tobool396 = icmp ne i64 %217, 0
  br i1 %tobool396, label %if.then397, label %if.end398

if.then397:                                       ; preds = %if.then395
  %218 = load i64, i64* %n, align 8
  store i64 %218, i64* %precis, align 8
  store i8 1, i8* %has_precis, align 1
  br label %if.end398

if.end398:                                        ; preds = %if.then397, %if.then395
  %219 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay399 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %219, i64 0, i64 0
  %gp_offset_p400 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay399, i32 0, i32 0
  %gp_offset401 = load i32, i32* %gp_offset_p400, align 8
  %fits_in_gp402 = icmp ule i32 %gp_offset401, 40
  br i1 %fits_in_gp402, label %vaarg.in_reg403, label %vaarg.in_mem405

vaarg.in_reg403:                                  ; preds = %if.end398
  %220 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay399, i32 0, i32 3
  %reg_save_area404 = load i8*, i8** %220, align 8
  %221 = getelementptr i8, i8* %reg_save_area404, i32 %gp_offset401
  %222 = bitcast i8* %221 to i8**
  %223 = add i32 %gp_offset401, 8
  store i32 %223, i32* %gp_offset_p400, align 8
  br label %vaarg.end409

vaarg.in_mem405:                                  ; preds = %if.end398
  %overflow_arg_area_p406 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay399, i32 0, i32 2
  %overflow_arg_area407 = load i8*, i8** %overflow_arg_area_p406, align 8
  %224 = bitcast i8* %overflow_arg_area407 to i8**
  %overflow_arg_area.next408 = getelementptr i8, i8* %overflow_arg_area407, i32 8
  store i8* %overflow_arg_area.next408, i8** %overflow_arg_area_p406, align 8
  br label %vaarg.end409

vaarg.end409:                                     ; preds = %vaarg.in_mem405, %vaarg.in_reg403
  %vaarg.addr410 = phi i8** [ %222, %vaarg.in_reg403 ], [ %224, %vaarg.in_mem405 ]
  %225 = load i8*, i8** %vaarg.addr410, align 8
  %226 = bitcast i8* %225 to %struct.sv*
  store %struct.sv* %226, %struct.sv** %argsv, align 8
  %227 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags411 = getelementptr inbounds %struct.sv, %struct.sv* %227, i32 0, i32 2
  %228 = load i32, i32* %sv_flags411, align 4
  %and412 = and i32 %228, 2098176
  %cmp413 = icmp eq i32 %and412, 1024
  br i1 %cmp413, label %cond.true415, label %cond.false421

cond.true415:                                     ; preds = %vaarg.end409
  %229 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any416 = getelementptr inbounds %struct.sv, %struct.sv* %229, i32 0, i32 0
  %230 = load i8*, i8** %sv_any416, align 8
  %231 = bitcast i8* %230 to %struct.xpv*
  %xpv_cur417 = getelementptr inbounds %struct.xpv, %struct.xpv* %231, i32 0, i32 2
  %232 = load i64, i64* %xpv_cur417, align 8
  store i64 %232, i64* %elen, align 8
  %233 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_u418 = getelementptr inbounds %struct.sv, %struct.sv* %233, i32 0, i32 3
  %svu_pv419 = bitcast %union.anon* %sv_u418 to i8**
  %234 = load i8*, i8** %svu_pv419, align 8
  %add.ptr420 = getelementptr inbounds i8, i8* %234, i64 0
  br label %cond.end423

cond.false421:                                    ; preds = %vaarg.end409
  %235 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call422 = call i8* @Perl_sv_2pv_flags(%struct.sv* %235, i64* %elen, i32 34)
  br label %cond.end423

cond.end423:                                      ; preds = %cond.false421, %cond.true415
  %cond424 = phi i8* [ %add.ptr420, %cond.true415 ], [ %call422, %cond.false421 ]
  store i8* %cond424, i8** %eptr, align 8
  %236 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags425 = getelementptr inbounds %struct.sv, %struct.sv* %236, i32 0, i32 2
  %237 = load i32, i32* %sv_flags425, align 4
  %and426 = and i32 %237, 536870912
  %tobool427 = icmp ne i32 %and426, 0
  br i1 %tobool427, label %land.lhs.true428, label %if.end434

land.lhs.true428:                                 ; preds = %cond.end423
  %238 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints429 = getelementptr inbounds %struct.cop, %struct.cop* %238, i32 0, i32 10
  %239 = load i32, i32* %cop_hints429, align 8
  %add430 = add i32 %239, 0
  %and431 = and i32 %add430, 8
  %tobool432 = icmp ne i32 %and431, 0
  br i1 %tobool432, label %if.end434, label %if.then433

if.then433:                                       ; preds = %land.lhs.true428
  store i8 1, i8* %is_utf8, align 1
  br label %if.end434

if.end434:                                        ; preds = %if.then433, %land.lhs.true428, %cond.end423
  br label %string

if.else435:                                       ; preds = %if.then393
  %240 = load i64, i64* %n, align 8
  %cmp436 = icmp eq i64 %240, 2
  br i1 %cmp436, label %if.then441, label %lor.lhs.false438

lor.lhs.false438:                                 ; preds = %if.else435
  %241 = load i64, i64* %n, align 8
  %cmp439 = icmp eq i64 %241, 3
  br i1 %cmp439, label %if.then441, label %if.else470

if.then441:                                       ; preds = %lor.lhs.false438, %if.else435
  %242 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay442 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %242, i64 0, i64 0
  %gp_offset_p443 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay442, i32 0, i32 0
  %gp_offset444 = load i32, i32* %gp_offset_p443, align 8
  %fits_in_gp445 = icmp ule i32 %gp_offset444, 40
  br i1 %fits_in_gp445, label %vaarg.in_reg446, label %vaarg.in_mem448

vaarg.in_reg446:                                  ; preds = %if.then441
  %243 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay442, i32 0, i32 3
  %reg_save_area447 = load i8*, i8** %243, align 8
  %244 = getelementptr i8, i8* %reg_save_area447, i32 %gp_offset444
  %245 = bitcast i8* %244 to %struct.hek**
  %246 = add i32 %gp_offset444, 8
  store i32 %246, i32* %gp_offset_p443, align 8
  br label %vaarg.end452

vaarg.in_mem448:                                  ; preds = %if.then441
  %overflow_arg_area_p449 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay442, i32 0, i32 2
  %overflow_arg_area450 = load i8*, i8** %overflow_arg_area_p449, align 8
  %247 = bitcast i8* %overflow_arg_area450 to %struct.hek**
  %overflow_arg_area.next451 = getelementptr i8, i8* %overflow_arg_area450, i32 8
  store i8* %overflow_arg_area.next451, i8** %overflow_arg_area_p449, align 8
  br label %vaarg.end452

vaarg.end452:                                     ; preds = %vaarg.in_mem448, %vaarg.in_reg446
  %vaarg.addr453 = phi %struct.hek** [ %245, %vaarg.in_reg446 ], [ %247, %vaarg.in_mem448 ]
  %248 = load %struct.hek*, %struct.hek** %vaarg.addr453, align 8
  store %struct.hek* %248, %struct.hek** %hek, align 8
  %249 = load %struct.hek*, %struct.hek** %hek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %249, i32 0, i32 2
  %arraydecay454 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  store i8* %arraydecay454, i8** %eptr, align 8
  %250 = load %struct.hek*, %struct.hek** %hek, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %250, i32 0, i32 1
  %251 = load i32, i32* %hek_len, align 4
  %conv455 = sext i32 %251 to i64
  store i64 %conv455, i64* %elen, align 8
  %252 = load %struct.hek*, %struct.hek** %hek, align 8
  %hek_key456 = getelementptr inbounds %struct.hek, %struct.hek* %252, i32 0, i32 2
  %arraydecay457 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key456, i64 0, i64 0
  %253 = load %struct.hek*, %struct.hek** %hek, align 8
  %hek_len458 = getelementptr inbounds %struct.hek, %struct.hek* %253, i32 0, i32 1
  %254 = load i32, i32* %hek_len458, align 4
  %idx.ext = sext i32 %254 to i64
  %add.ptr459 = getelementptr inbounds i8, i8* %arraydecay457, i64 %idx.ext
  %add.ptr460 = getelementptr inbounds i8, i8* %add.ptr459, i64 1
  %255 = load i8, i8* %add.ptr460, align 1
  %conv461 = zext i8 %255 to i32
  %and462 = and i32 %conv461, 1
  %tobool463 = icmp ne i32 %and462, 0
  br i1 %tobool463, label %if.then464, label %if.end465

if.then464:                                       ; preds = %vaarg.end452
  store i8 1, i8* %is_utf8, align 1
  br label %if.end465

if.end465:                                        ; preds = %if.then464, %vaarg.end452
  %256 = load i64, i64* %n, align 8
  %cmp466 = icmp eq i64 %256, 3
  br i1 %cmp466, label %if.then468, label %if.end469

if.then468:                                       ; preds = %if.end465
  store i64 256, i64* %precis, align 8
  store i8 1, i8* %has_precis, align 1
  br label %if.end469

if.end469:                                        ; preds = %if.then468, %if.end465
  br label %string

if.else470:                                       ; preds = %lor.lhs.false438
  %257 = load i64, i64* %n, align 8
  %tobool471 = icmp ne i64 %257, 0
  br i1 %tobool471, label %if.then472, label %if.end473

if.then472:                                       ; preds = %if.else470
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 24, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.68, i64 0, i64 0))
  br label %if.end473

if.end473:                                        ; preds = %if.then472, %if.else470
  br label %if.end474

if.end474:                                        ; preds = %if.end473
  br label %if.end475

if.end475:                                        ; preds = %if.end474
  br label %if.end476

if.end476:                                        ; preds = %if.end475, %if.end386
  %258 = load i8*, i8** %r, align 8
  store i8* %258, i8** %q, align 8
  br label %if.end477

if.end477:                                        ; preds = %if.end476, %if.end327
  %call478 = call i32 @S_expect_number(i8** %q)
  %conv479 = sext i32 %call478 to i64
  store i64 %conv479, i64* %width, align 8
  %tobool480 = icmp ne i64 %conv479, 0
  br i1 %tobool480, label %if.then481, label %if.end493

if.then481:                                       ; preds = %if.end477
  %259 = load i8*, i8** %q, align 8
  %260 = load i8, i8* %259, align 1
  %conv482 = sext i8 %260 to i32
  %cmp483 = icmp eq i32 %conv482, 36
  br i1 %cmp483, label %if.then485, label %if.else491

if.then485:                                       ; preds = %if.then481
  %261 = load i8*, i8** %q, align 8
  %incdec.ptr486 = getelementptr inbounds i8, i8* %261, i32 1
  store i8* %incdec.ptr486, i8** %q, align 8
  %262 = load i64, i64* %width, align 8
  %conv487 = trunc i64 %262 to i32
  store i32 %conv487, i32* %efix, align 4
  %263 = load i8, i8* %no_redundant_warning, align 1
  %tobool488 = trunc i8 %263 to i1
  br i1 %tobool488, label %if.end490, label %if.then489

if.then489:                                       ; preds = %if.then485
  store i8 1, i8* %no_redundant_warning, align 1
  br label %if.end490

if.end490:                                        ; preds = %if.then489, %if.then485
  br label %if.end492

if.else491:                                       ; preds = %if.then481
  br label %gotwidth

if.end492:                                        ; preds = %if.end490
  br label %if.end493

if.end493:                                        ; preds = %if.end492, %if.end477
  br label %while.cond494

while.cond494:                                    ; preds = %sw.bb514, %sw.bb512, %sw.bb510, %if.end509, %if.end493
  %264 = load i8*, i8** %q, align 8
  %265 = load i8, i8* %264, align 1
  %tobool495 = icmp ne i8 %265, 0
  br i1 %tobool495, label %while.body496, label %while.end516

while.body496:                                    ; preds = %while.cond494
  %266 = load i8*, i8** %q, align 8
  %267 = load i8, i8* %266, align 1
  %conv497 = sext i8 %267 to i32
  switch i32 %conv497, label %sw.default [
    i32 32, label %sw.bb
    i32 43, label %sw.bb
    i32 45, label %sw.bb510
    i32 48, label %sw.bb512
    i32 35, label %sw.bb514
  ]

sw.bb:                                            ; preds = %while.body496, %while.body496
  %268 = load i8, i8* %plus, align 1
  %conv498 = sext i8 %268 to i32
  %cmp499 = icmp eq i32 %conv498, 43
  br i1 %cmp499, label %land.lhs.true501, label %if.else507

land.lhs.true501:                                 ; preds = %sw.bb
  %269 = load i8*, i8** %q, align 8
  %270 = load i8, i8* %269, align 1
  %conv502 = sext i8 %270 to i32
  %cmp503 = icmp eq i32 %conv502, 32
  br i1 %cmp503, label %if.then505, label %if.else507

if.then505:                                       ; preds = %land.lhs.true501
  %271 = load i8*, i8** %q, align 8
  %incdec.ptr506 = getelementptr inbounds i8, i8* %271, i32 1
  store i8* %incdec.ptr506, i8** %q, align 8
  br label %if.end509

if.else507:                                       ; preds = %land.lhs.true501, %sw.bb
  %272 = load i8*, i8** %q, align 8
  %incdec.ptr508 = getelementptr inbounds i8, i8* %272, i32 1
  store i8* %incdec.ptr508, i8** %q, align 8
  %273 = load i8, i8* %272, align 1
  store i8 %273, i8* %plus, align 1
  br label %if.end509

if.end509:                                        ; preds = %if.else507, %if.then505
  br label %while.cond494

sw.bb510:                                         ; preds = %while.body496
  store i8 1, i8* %left, align 1
  %274 = load i8*, i8** %q, align 8
  %incdec.ptr511 = getelementptr inbounds i8, i8* %274, i32 1
  store i8* %incdec.ptr511, i8** %q, align 8
  br label %while.cond494

sw.bb512:                                         ; preds = %while.body496
  %275 = load i8*, i8** %q, align 8
  %incdec.ptr513 = getelementptr inbounds i8, i8* %275, i32 1
  store i8* %incdec.ptr513, i8** %q, align 8
  %276 = load i8, i8* %275, align 1
  store i8 %276, i8* %fill, align 1
  br label %while.cond494

sw.bb514:                                         ; preds = %while.body496
  store i8 1, i8* %alt, align 1
  %277 = load i8*, i8** %q, align 8
  %incdec.ptr515 = getelementptr inbounds i8, i8* %277, i32 1
  store i8* %incdec.ptr515, i8** %q, align 8
  br label %while.cond494

sw.default:                                       ; preds = %while.body496
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  br label %while.end516

while.end516:                                     ; preds = %sw.epilog, %while.cond494
  br label %tryasterisk

tryasterisk:                                      ; preds = %if.end545, %while.end516
  %278 = load i8*, i8** %q, align 8
  %279 = load i8, i8* %278, align 1
  %conv517 = sext i8 %279 to i32
  %cmp518 = icmp eq i32 %conv517, 42
  br i1 %cmp518, label %if.then520, label %if.end533

if.then520:                                       ; preds = %tryasterisk
  %280 = load i8*, i8** %q, align 8
  %incdec.ptr521 = getelementptr inbounds i8, i8* %280, i32 1
  store i8* %incdec.ptr521, i8** %q, align 8
  %call522 = call i32 @S_expect_number(i8** %q)
  store i32 %call522, i32* %ewix, align 4
  %tobool523 = icmp ne i32 %call522, 0
  br i1 %tobool523, label %if.then524, label %if.end532

if.then524:                                       ; preds = %if.then520
  %281 = load i8*, i8** %q, align 8
  %incdec.ptr525 = getelementptr inbounds i8, i8* %281, i32 1
  store i8* %incdec.ptr525, i8** %q, align 8
  %282 = load i8, i8* %281, align 1
  %conv526 = sext i8 %282 to i32
  %cmp527 = icmp eq i32 %conv526, 36
  br i1 %cmp527, label %if.then529, label %if.else530

if.then529:                                       ; preds = %if.then524
  store i8 1, i8* %no_redundant_warning, align 1
  br label %if.end531

if.else530:                                       ; preds = %if.then524
  br label %unknown

if.end531:                                        ; preds = %if.then529
  br label %if.end532

if.end532:                                        ; preds = %if.end531, %if.then520
  store i8 1, i8* %asterisk, align 1
  br label %if.end533

if.end533:                                        ; preds = %if.end532, %tryasterisk
  %283 = load i8*, i8** %q, align 8
  %284 = load i8, i8* %283, align 1
  %conv534 = sext i8 %284 to i32
  %cmp535 = icmp eq i32 %conv534, 118
  br i1 %cmp535, label %if.then537, label %if.end546

if.then537:                                       ; preds = %if.end533
  %285 = load i8*, i8** %q, align 8
  %incdec.ptr538 = getelementptr inbounds i8, i8* %285, i32 1
  store i8* %incdec.ptr538, i8** %q, align 8
  %286 = load i8, i8* %vectorize, align 1
  %tobool539 = trunc i8 %286 to i1
  br i1 %tobool539, label %if.then540, label %if.end541

if.then540:                                       ; preds = %if.then537
  br label %unknown

if.end541:                                        ; preds = %if.then537
  %287 = load i8, i8* %asterisk, align 1
  %tobool542 = trunc i8 %287 to i1
  %frombool543 = zext i1 %tobool542 to i8
  store i8 %frombool543, i8* %vectorarg, align 1
  br i1 %tobool542, label %if.then544, label %if.end545

if.then544:                                       ; preds = %if.end541
  %288 = load i32, i32* %ewix, align 4
  store i32 %288, i32* %evix, align 4
  store i32 0, i32* %ewix, align 4
  store i8 0, i8* %asterisk, align 1
  br label %if.end545

if.end545:                                        ; preds = %if.then544, %if.end541
  store i8 1, i8* %vectorize, align 1
  br label %tryasterisk

if.end546:                                        ; preds = %if.end533
  %289 = load i8, i8* %asterisk, align 1
  %tobool547 = trunc i8 %289 to i1
  br i1 %tobool547, label %if.end557, label %if.then548

if.then548:                                       ; preds = %if.end546
  %290 = load i8*, i8** %q, align 8
  %291 = load i8, i8* %290, align 1
  %conv549 = sext i8 %291 to i32
  %cmp550 = icmp eq i32 %conv549, 48
  br i1 %cmp550, label %if.then552, label %if.end554

if.then552:                                       ; preds = %if.then548
  %292 = load i8*, i8** %q, align 8
  %incdec.ptr553 = getelementptr inbounds i8, i8* %292, i32 1
  store i8* %incdec.ptr553, i8** %q, align 8
  %293 = load i8, i8* %292, align 1
  store i8 %293, i8* %fill, align 1
  br label %if.end554

if.end554:                                        ; preds = %if.then552, %if.then548
  %call555 = call i32 @S_expect_number(i8** %q)
  %conv556 = sext i32 %call555 to i64
  store i64 %conv556, i64* %width, align 8
  br label %if.end557

if.end557:                                        ; preds = %if.end554, %if.end546
  %294 = load i8, i8* %vectorize, align 1
  %tobool558 = trunc i8 %294 to i1
  br i1 %tobool558, label %land.lhs.true560, label %if.end650

land.lhs.true560:                                 ; preds = %if.end557
  %295 = load i8, i8* %vectorarg, align 1
  %tobool561 = trunc i8 %295 to i1
  br i1 %tobool561, label %if.then563, label %if.end650

if.then563:                                       ; preds = %land.lhs.true560
  %296 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool564 = icmp ne [1 x %struct.__va_list_tag]* %296, null
  br i1 %tobool564, label %if.then565, label %if.else578

if.then565:                                       ; preds = %if.then563
  %297 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay566 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %297, i64 0, i64 0
  %gp_offset_p567 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay566, i32 0, i32 0
  %gp_offset568 = load i32, i32* %gp_offset_p567, align 8
  %fits_in_gp569 = icmp ule i32 %gp_offset568, 40
  br i1 %fits_in_gp569, label %vaarg.in_reg570, label %vaarg.in_mem572

vaarg.in_reg570:                                  ; preds = %if.then565
  %298 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay566, i32 0, i32 3
  %reg_save_area571 = load i8*, i8** %298, align 8
  %299 = getelementptr i8, i8* %reg_save_area571, i32 %gp_offset568
  %300 = bitcast i8* %299 to %struct.sv**
  %301 = add i32 %gp_offset568, 8
  store i32 %301, i32* %gp_offset_p567, align 8
  br label %vaarg.end576

vaarg.in_mem572:                                  ; preds = %if.then565
  %overflow_arg_area_p573 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay566, i32 0, i32 2
  %overflow_arg_area574 = load i8*, i8** %overflow_arg_area_p573, align 8
  %302 = bitcast i8* %overflow_arg_area574 to %struct.sv**
  %overflow_arg_area.next575 = getelementptr i8, i8* %overflow_arg_area574, i32 8
  store i8* %overflow_arg_area.next575, i8** %overflow_arg_area_p573, align 8
  br label %vaarg.end576

vaarg.end576:                                     ; preds = %vaarg.in_mem572, %vaarg.in_reg570
  %vaarg.addr577 = phi %struct.sv** [ %300, %vaarg.in_reg570 ], [ %302, %vaarg.in_mem572 ]
  %303 = load %struct.sv*, %struct.sv** %vaarg.addr577, align 8
  store %struct.sv* %303, %struct.sv** %vecsv, align 8
  br label %if.end605

if.else578:                                       ; preds = %if.then563
  %304 = load i32, i32* %evix, align 4
  %tobool579 = icmp ne i32 %304, 0
  br i1 %tobool579, label %if.then580, label %if.else594

if.then580:                                       ; preds = %if.else578
  %305 = load i32, i32* %evix, align 4
  %cmp581 = icmp sgt i32 %305, 0
  br i1 %cmp581, label %land.lhs.true583, label %cond.false590

land.lhs.true583:                                 ; preds = %if.then580
  %306 = load i32, i32* %evix, align 4
  %307 = load i32, i32* %svmax.addr, align 4
  %cmp584 = icmp sle i32 %306, %307
  br i1 %cmp584, label %cond.true586, label %cond.false590

cond.true586:                                     ; preds = %land.lhs.true583
  %308 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %309 = load i32, i32* %evix, align 4
  %sub587 = sub nsw i32 %309, 1
  %idxprom588 = sext i32 %sub587 to i64
  %arrayidx589 = getelementptr inbounds %struct.sv*, %struct.sv** %308, i64 %idxprom588
  %310 = load %struct.sv*, %struct.sv** %arrayidx589, align 8
  br label %cond.end592

cond.false590:                                    ; preds = %land.lhs.true583, %if.then580
  %call591 = call %struct.sv* @S_vcatpvfn_missing_argument()
  br label %cond.end592

cond.end592:                                      ; preds = %cond.false590, %cond.true586
  %cond593 = phi %struct.sv* [ %310, %cond.true586 ], [ %call591, %cond.false590 ]
  store %struct.sv* %cond593, %struct.sv** %vecsv, align 8
  br label %if.end604

if.else594:                                       ; preds = %if.else578
  %311 = load i32, i32* %svix, align 4
  %312 = load i32, i32* %svmax.addr, align 4
  %cmp595 = icmp slt i32 %311, %312
  br i1 %cmp595, label %cond.true597, label %cond.false600

cond.true597:                                     ; preds = %if.else594
  %313 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %314 = load i32, i32* %svix, align 4
  %inc = add nsw i32 %314, 1
  store i32 %inc, i32* %svix, align 4
  %idxprom598 = sext i32 %314 to i64
  %arrayidx599 = getelementptr inbounds %struct.sv*, %struct.sv** %313, i64 %idxprom598
  %315 = load %struct.sv*, %struct.sv** %arrayidx599, align 8
  br label %cond.end602

cond.false600:                                    ; preds = %if.else594
  %call601 = call %struct.sv* @S_vcatpvfn_missing_argument()
  br label %cond.end602

cond.end602:                                      ; preds = %cond.false600, %cond.true597
  %cond603 = phi %struct.sv* [ %315, %cond.true597 ], [ %call601, %cond.false600 ]
  store %struct.sv* %cond603, %struct.sv** %vecsv, align 8
  br label %if.end604

if.end604:                                        ; preds = %cond.end602, %cond.end592
  br label %if.end605

if.end605:                                        ; preds = %if.end604, %vaarg.end576
  %316 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_flags606 = getelementptr inbounds %struct.sv, %struct.sv* %316, i32 0, i32 2
  %317 = load i32, i32* %sv_flags606, align 4
  %and607 = and i32 %317, 2098176
  %cmp608 = icmp eq i32 %and607, 1024
  br i1 %cmp608, label %cond.true610, label %cond.false616

cond.true610:                                     ; preds = %if.end605
  %318 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_any611 = getelementptr inbounds %struct.sv, %struct.sv* %318, i32 0, i32 0
  %319 = load i8*, i8** %sv_any611, align 8
  %320 = bitcast i8* %319 to %struct.xpv*
  %xpv_cur612 = getelementptr inbounds %struct.xpv, %struct.xpv* %320, i32 0, i32 2
  %321 = load i64, i64* %xpv_cur612, align 8
  store i64 %321, i64* %dotstrlen, align 8
  %322 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_u613 = getelementptr inbounds %struct.sv, %struct.sv* %322, i32 0, i32 3
  %svu_pv614 = bitcast %union.anon* %sv_u613 to i8**
  %323 = load i8*, i8** %svu_pv614, align 8
  %add.ptr615 = getelementptr inbounds i8, i8* %323, i64 0
  br label %cond.end618

cond.false616:                                    ; preds = %if.end605
  %324 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %call617 = call i8* @Perl_sv_2pv_flags(%struct.sv* %324, i64* %dotstrlen, i32 34)
  br label %cond.end618

cond.end618:                                      ; preds = %cond.false616, %cond.true610
  %cond619 = phi i8* [ %add.ptr615, %cond.true610 ], [ %call617, %cond.false616 ]
  store i8* %cond619, i8** %dotstr, align 8
  %325 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_flags620 = getelementptr inbounds %struct.sv, %struct.sv* %325, i32 0, i32 2
  %326 = load i32, i32* %sv_flags620, align 4
  %and621 = and i32 %326, 536870912
  %tobool622 = icmp ne i32 %and621, 0
  br i1 %tobool622, label %land.lhs.true623, label %if.else629

land.lhs.true623:                                 ; preds = %cond.end618
  %327 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints624 = getelementptr inbounds %struct.cop, %struct.cop* %327, i32 0, i32 10
  %328 = load i32, i32* %cop_hints624, align 8
  %add625 = add i32 %328, 0
  %and626 = and i32 %add625, 8
  %tobool627 = icmp ne i32 %and626, 0
  br i1 %tobool627, label %if.else629, label %if.then628

if.then628:                                       ; preds = %land.lhs.true623
  store i8 1, i8* %is_utf8, align 1
  br label %if.end649

if.else629:                                       ; preds = %land.lhs.true623, %cond.end618
  %329 = load i8, i8* %has_utf8, align 1
  %tobool630 = trunc i8 %329 to i1
  br i1 %tobool630, label %if.then631, label %if.end648

if.then631:                                       ; preds = %if.else629
  %330 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %call632 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %330, i32 1538)
  store %struct.sv* %call632, %struct.sv** %vecsv, align 8
  %331 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %call633 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %331, i32 2, i64 0)
  %332 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_flags634 = getelementptr inbounds %struct.sv, %struct.sv* %332, i32 0, i32 2
  %333 = load i32, i32* %sv_flags634, align 4
  %and635 = and i32 %333, 2098176
  %cmp636 = icmp eq i32 %and635, 1024
  br i1 %cmp636, label %cond.true638, label %cond.false644

cond.true638:                                     ; preds = %if.then631
  %334 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_any639 = getelementptr inbounds %struct.sv, %struct.sv* %334, i32 0, i32 0
  %335 = load i8*, i8** %sv_any639, align 8
  %336 = bitcast i8* %335 to %struct.xpv*
  %xpv_cur640 = getelementptr inbounds %struct.xpv, %struct.xpv* %336, i32 0, i32 2
  %337 = load i64, i64* %xpv_cur640, align 8
  store i64 %337, i64* %dotstrlen, align 8
  %338 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_u641 = getelementptr inbounds %struct.sv, %struct.sv* %338, i32 0, i32 3
  %svu_pv642 = bitcast %union.anon* %sv_u641 to i8**
  %339 = load i8*, i8** %svu_pv642, align 8
  %add.ptr643 = getelementptr inbounds i8, i8* %339, i64 0
  br label %cond.end646

cond.false644:                                    ; preds = %if.then631
  %340 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %call645 = call i8* @Perl_sv_2pv_flags(%struct.sv* %340, i64* %dotstrlen, i32 34)
  br label %cond.end646

cond.end646:                                      ; preds = %cond.false644, %cond.true638
  %cond647 = phi i8* [ %add.ptr643, %cond.true638 ], [ %call645, %cond.false644 ]
  store i8* %cond647, i8** %dotstr, align 8
  store i8 1, i8* %is_utf8, align 1
  br label %if.end648

if.end648:                                        ; preds = %cond.end646, %if.else629
  br label %if.end649

if.end649:                                        ; preds = %if.end648, %if.then628
  br label %if.end650

if.end650:                                        ; preds = %if.end649, %land.lhs.true560, %if.end557
  %341 = load i8, i8* %asterisk, align 1
  %tobool651 = trunc i8 %341 to i1
  br i1 %tobool651, label %if.then652, label %if.end714

if.then652:                                       ; preds = %if.end650
  %342 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool653 = icmp ne [1 x %struct.__va_list_tag]* %342, null
  br i1 %tobool653, label %if.then654, label %if.else667

if.then654:                                       ; preds = %if.then652
  %343 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay655 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %343, i64 0, i64 0
  %gp_offset_p656 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay655, i32 0, i32 0
  %gp_offset657 = load i32, i32* %gp_offset_p656, align 8
  %fits_in_gp658 = icmp ule i32 %gp_offset657, 40
  br i1 %fits_in_gp658, label %vaarg.in_reg659, label %vaarg.in_mem661

vaarg.in_reg659:                                  ; preds = %if.then654
  %344 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay655, i32 0, i32 3
  %reg_save_area660 = load i8*, i8** %344, align 8
  %345 = getelementptr i8, i8* %reg_save_area660, i32 %gp_offset657
  %346 = bitcast i8* %345 to i32*
  %347 = add i32 %gp_offset657, 8
  store i32 %347, i32* %gp_offset_p656, align 8
  br label %vaarg.end665

vaarg.in_mem661:                                  ; preds = %if.then654
  %overflow_arg_area_p662 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay655, i32 0, i32 2
  %overflow_arg_area663 = load i8*, i8** %overflow_arg_area_p662, align 8
  %348 = bitcast i8* %overflow_arg_area663 to i32*
  %overflow_arg_area.next664 = getelementptr i8, i8* %overflow_arg_area663, i32 8
  store i8* %overflow_arg_area.next664, i8** %overflow_arg_area_p662, align 8
  br label %vaarg.end665

vaarg.end665:                                     ; preds = %vaarg.in_mem661, %vaarg.in_reg659
  %vaarg.addr666 = phi i32* [ %346, %vaarg.in_reg659 ], [ %348, %vaarg.in_mem661 ]
  %349 = load i32, i32* %vaarg.addr666, align 4
  store i32 %349, i32* %i, align 4
  br label %if.end699

if.else667:                                       ; preds = %if.then652
  %350 = load i32, i32* %ewix, align 4
  %tobool668 = icmp ne i32 %350, 0
  br i1 %tobool668, label %cond.true669, label %cond.false672

cond.true669:                                     ; preds = %if.else667
  %351 = load i32, i32* %ewix, align 4
  %352 = load i32, i32* %svmax.addr, align 4
  %cmp670 = icmp sle i32 %351, %352
  br i1 %cmp670, label %cond.true675, label %cond.false695

cond.false672:                                    ; preds = %if.else667
  %353 = load i32, i32* %svix, align 4
  %354 = load i32, i32* %svmax.addr, align 4
  %cmp673 = icmp slt i32 %353, %354
  br i1 %cmp673, label %cond.true675, label %cond.false695

cond.true675:                                     ; preds = %cond.false672, %cond.true669
  %355 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %356 = load i32, i32* %ewix, align 4
  %tobool676 = icmp ne i32 %356, 0
  br i1 %tobool676, label %cond.true677, label %cond.false679

cond.true677:                                     ; preds = %cond.true675
  %357 = load i32, i32* %ewix, align 4
  %sub678 = sub nsw i32 %357, 1
  br label %cond.end681

cond.false679:                                    ; preds = %cond.true675
  %358 = load i32, i32* %svix, align 4
  %inc680 = add nsw i32 %358, 1
  store i32 %inc680, i32* %svix, align 4
  br label %cond.end681

cond.end681:                                      ; preds = %cond.false679, %cond.true677
  %cond682 = phi i32 [ %sub678, %cond.true677 ], [ %358, %cond.false679 ]
  %idxprom683 = sext i32 %cond682 to i64
  %arrayidx684 = getelementptr inbounds %struct.sv*, %struct.sv** %355, i64 %idxprom683
  %359 = load %struct.sv*, %struct.sv** %arrayidx684, align 8
  store %struct.sv* %359, %struct.sv** @PL_Sv, align 8
  %360 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags685 = getelementptr inbounds %struct.sv, %struct.sv* %360, i32 0, i32 2
  %361 = load i32, i32* %sv_flags685, align 4
  %and686 = and i32 %361, 2097408
  %cmp687 = icmp eq i32 %and686, 256
  br i1 %cmp687, label %cond.true689, label %cond.false691

cond.true689:                                     ; preds = %cond.end681
  %362 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any690 = getelementptr inbounds %struct.sv, %struct.sv* %362, i32 0, i32 0
  %363 = load i8*, i8** %sv_any690, align 8
  %364 = bitcast i8* %363 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %364, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %365 = load i64, i64* %xivu_iv, align 8
  br label %cond.end693

cond.false691:                                    ; preds = %cond.end681
  %366 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call692 = call i64 @Perl_sv_2iv_flags(%struct.sv* %366, i32 2)
  br label %cond.end693

cond.end693:                                      ; preds = %cond.false691, %cond.true689
  %cond694 = phi i64 [ %365, %cond.true689 ], [ %call692, %cond.false691 ]
  br label %cond.end696

cond.false695:                                    ; preds = %cond.false672, %cond.true669
  br label %cond.end696

cond.end696:                                      ; preds = %cond.false695, %cond.end693
  %cond697 = phi i64 [ %cond694, %cond.end693 ], [ 0, %cond.false695 ]
  %conv698 = trunc i64 %cond697 to i32
  store i32 %conv698, i32* %i, align 4
  br label %if.end699

if.end699:                                        ; preds = %cond.end696, %vaarg.end665
  %367 = load i32, i32* %i, align 4
  %cmp700 = icmp slt i32 %367, 0
  %conv701 = zext i1 %cmp700 to i32
  %368 = load i8, i8* %left, align 1
  %tobool702 = trunc i8 %368 to i1
  %conv703 = zext i1 %tobool702 to i32
  %or = or i32 %conv703, %conv701
  %tobool704 = icmp ne i32 %or, 0
  %frombool705 = zext i1 %tobool704 to i8
  store i8 %frombool705, i8* %left, align 1
  %369 = load i32, i32* %i, align 4
  %cmp706 = icmp slt i32 %369, 0
  br i1 %cmp706, label %cond.true708, label %cond.false710

cond.true708:                                     ; preds = %if.end699
  %370 = load i32, i32* %i, align 4
  %sub709 = sub nsw i32 0, %370
  br label %cond.end711

cond.false710:                                    ; preds = %if.end699
  %371 = load i32, i32* %i, align 4
  br label %cond.end711

cond.end711:                                      ; preds = %cond.false710, %cond.true708
  %cond712 = phi i32 [ %sub709, %cond.true708 ], [ %371, %cond.false710 ]
  %conv713 = sext i32 %cond712 to i64
  store i64 %conv713, i64* %width, align 8
  br label %if.end714

if.end714:                                        ; preds = %cond.end711, %if.end650
  br label %gotwidth

gotwidth:                                         ; preds = %if.end714, %if.else491
  %372 = load i8*, i8** %q, align 8
  %373 = load i8, i8* %372, align 1
  %conv715 = sext i8 %373 to i32
  %cmp716 = icmp eq i32 %conv715, 46
  br i1 %cmp716, label %if.then718, label %if.end809

if.then718:                                       ; preds = %gotwidth
  %374 = load i8*, i8** %q, align 8
  %incdec.ptr719 = getelementptr inbounds i8, i8* %374, i32 1
  store i8* %incdec.ptr719, i8** %q, align 8
  %375 = load i8*, i8** %q, align 8
  %376 = load i8, i8* %375, align 1
  %conv720 = sext i8 %376 to i32
  %cmp721 = icmp eq i32 %conv720, 42
  br i1 %cmp721, label %if.then723, label %if.else791

if.then723:                                       ; preds = %if.then718
  %377 = load i8*, i8** %q, align 8
  %incdec.ptr724 = getelementptr inbounds i8, i8* %377, i32 1
  store i8* %incdec.ptr724, i8** %q, align 8
  %call725 = call i32 @S_expect_number(i8** %q)
  store i32 %call725, i32* %epix, align 4
  %tobool726 = icmp ne i32 %call725, 0
  br i1 %tobool726, label %land.lhs.true727, label %if.end733

land.lhs.true727:                                 ; preds = %if.then723
  %378 = load i8*, i8** %q, align 8
  %incdec.ptr728 = getelementptr inbounds i8, i8* %378, i32 1
  store i8* %incdec.ptr728, i8** %q, align 8
  %379 = load i8, i8* %378, align 1
  %conv729 = sext i8 %379 to i32
  %cmp730 = icmp ne i32 %conv729, 36
  br i1 %cmp730, label %if.then732, label %if.end733

if.then732:                                       ; preds = %land.lhs.true727
  br label %unknown

if.end733:                                        ; preds = %land.lhs.true727, %if.then723
  %380 = load i32, i32* %epix, align 4
  %tobool734 = icmp ne i32 %380, 0
  br i1 %tobool734, label %if.then735, label %if.end736

if.then735:                                       ; preds = %if.end733
  br label %unknown

if.end736:                                        ; preds = %if.end733
  %381 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool737 = icmp ne [1 x %struct.__va_list_tag]* %381, null
  br i1 %tobool737, label %if.then738, label %if.else751

if.then738:                                       ; preds = %if.end736
  %382 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay739 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %382, i64 0, i64 0
  %gp_offset_p740 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay739, i32 0, i32 0
  %gp_offset741 = load i32, i32* %gp_offset_p740, align 8
  %fits_in_gp742 = icmp ule i32 %gp_offset741, 40
  br i1 %fits_in_gp742, label %vaarg.in_reg743, label %vaarg.in_mem745

vaarg.in_reg743:                                  ; preds = %if.then738
  %383 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay739, i32 0, i32 3
  %reg_save_area744 = load i8*, i8** %383, align 8
  %384 = getelementptr i8, i8* %reg_save_area744, i32 %gp_offset741
  %385 = bitcast i8* %384 to i32*
  %386 = add i32 %gp_offset741, 8
  store i32 %386, i32* %gp_offset_p740, align 8
  br label %vaarg.end749

vaarg.in_mem745:                                  ; preds = %if.then738
  %overflow_arg_area_p746 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay739, i32 0, i32 2
  %overflow_arg_area747 = load i8*, i8** %overflow_arg_area_p746, align 8
  %387 = bitcast i8* %overflow_arg_area747 to i32*
  %overflow_arg_area.next748 = getelementptr i8, i8* %overflow_arg_area747, i32 8
  store i8* %overflow_arg_area.next748, i8** %overflow_arg_area_p746, align 8
  br label %vaarg.end749

vaarg.end749:                                     ; preds = %vaarg.in_mem745, %vaarg.in_reg743
  %vaarg.addr750 = phi i32* [ %385, %vaarg.in_reg743 ], [ %387, %vaarg.in_mem745 ]
  %388 = load i32, i32* %vaarg.addr750, align 4
  store i32 %388, i32* %i, align 4
  br label %if.end785

if.else751:                                       ; preds = %if.end736
  %389 = load i32, i32* %ewix, align 4
  %tobool752 = icmp ne i32 %389, 0
  br i1 %tobool752, label %cond.true753, label %cond.false756

cond.true753:                                     ; preds = %if.else751
  %390 = load i32, i32* %ewix, align 4
  %391 = load i32, i32* %svmax.addr, align 4
  %cmp754 = icmp sle i32 %390, %391
  br i1 %cmp754, label %cond.true759, label %cond.false781

cond.false756:                                    ; preds = %if.else751
  %392 = load i32, i32* %svix, align 4
  %393 = load i32, i32* %svmax.addr, align 4
  %cmp757 = icmp slt i32 %392, %393
  br i1 %cmp757, label %cond.true759, label %cond.false781

cond.true759:                                     ; preds = %cond.false756, %cond.true753
  %394 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %395 = load i32, i32* %ewix, align 4
  %tobool760 = icmp ne i32 %395, 0
  br i1 %tobool760, label %cond.true761, label %cond.false763

cond.true761:                                     ; preds = %cond.true759
  %396 = load i32, i32* %ewix, align 4
  %sub762 = sub nsw i32 %396, 1
  br label %cond.end765

cond.false763:                                    ; preds = %cond.true759
  %397 = load i32, i32* %svix, align 4
  %inc764 = add nsw i32 %397, 1
  store i32 %inc764, i32* %svix, align 4
  br label %cond.end765

cond.end765:                                      ; preds = %cond.false763, %cond.true761
  %cond766 = phi i32 [ %sub762, %cond.true761 ], [ %397, %cond.false763 ]
  %idxprom767 = sext i32 %cond766 to i64
  %arrayidx768 = getelementptr inbounds %struct.sv*, %struct.sv** %394, i64 %idxprom767
  %398 = load %struct.sv*, %struct.sv** %arrayidx768, align 8
  store %struct.sv* %398, %struct.sv** @PL_Sv, align 8
  %399 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags769 = getelementptr inbounds %struct.sv, %struct.sv* %399, i32 0, i32 2
  %400 = load i32, i32* %sv_flags769, align 4
  %and770 = and i32 %400, 2097408
  %cmp771 = icmp eq i32 %and770, 256
  br i1 %cmp771, label %cond.true773, label %cond.false777

cond.true773:                                     ; preds = %cond.end765
  %401 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any774 = getelementptr inbounds %struct.sv, %struct.sv* %401, i32 0, i32 0
  %402 = load i8*, i8** %sv_any774, align 8
  %403 = bitcast i8* %402 to %struct.xpviv*
  %xiv_u775 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %403, i32 0, i32 4
  %xivu_iv776 = bitcast %union._xivu* %xiv_u775 to i64*
  %404 = load i64, i64* %xivu_iv776, align 8
  br label %cond.end779

cond.false777:                                    ; preds = %cond.end765
  %405 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call778 = call i64 @Perl_sv_2iv_flags(%struct.sv* %405, i32 2)
  br label %cond.end779

cond.end779:                                      ; preds = %cond.false777, %cond.true773
  %cond780 = phi i64 [ %404, %cond.true773 ], [ %call778, %cond.false777 ]
  br label %cond.end782

cond.false781:                                    ; preds = %cond.false756, %cond.true753
  br label %cond.end782

cond.end782:                                      ; preds = %cond.false781, %cond.end779
  %cond783 = phi i64 [ %cond780, %cond.end779 ], [ 0, %cond.false781 ]
  %conv784 = trunc i64 %cond783 to i32
  store i32 %conv784, i32* %i, align 4
  br label %if.end785

if.end785:                                        ; preds = %cond.end782, %vaarg.end749
  %406 = load i32, i32* %i, align 4
  %conv786 = sext i32 %406 to i64
  store i64 %conv786, i64* %precis, align 8
  %407 = load i32, i32* %i, align 4
  %cmp787 = icmp slt i32 %407, 0
  %lnot789 = xor i1 %cmp787, true
  %frombool790 = zext i1 %lnot789 to i8
  store i8 %frombool790, i8* %has_precis, align 1
  br label %if.end808

if.else791:                                       ; preds = %if.then718
  store i64 0, i64* %precis, align 8
  br label %while.cond792

while.cond792:                                    ; preds = %while.body800, %if.else791
  %408 = load i8*, i8** %q, align 8
  %409 = load i8, i8* %408, align 1
  %idxprom793 = zext i8 %409 to i64
  %arrayidx794 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom793
  %410 = load i32, i32* %arrayidx794, align 4
  %and795 = and i32 %410, 2
  %tobool796 = icmp ne i32 %and795, 0
  %411 = zext i1 %tobool796 to i64
  %cond798 = select i1 %tobool796, i32 1, i32 0
  %tobool799 = icmp ne i32 %cond798, 0
  br i1 %tobool799, label %while.body800, label %while.end807

while.body800:                                    ; preds = %while.cond792
  %412 = load i64, i64* %precis, align 8
  %mul801 = mul i64 %412, 10
  %413 = load i8*, i8** %q, align 8
  %incdec.ptr802 = getelementptr inbounds i8, i8* %413, i32 1
  store i8* %incdec.ptr802, i8** %q, align 8
  %414 = load i8, i8* %413, align 1
  %conv803 = sext i8 %414 to i32
  %sub804 = sub nsw i32 %conv803, 48
  %conv805 = sext i32 %sub804 to i64
  %add806 = add i64 %mul801, %conv805
  store i64 %add806, i64* %precis, align 8
  br label %while.cond792

while.end807:                                     ; preds = %while.cond792
  store i8 1, i8* %has_precis, align 1
  br label %if.end808

if.end808:                                        ; preds = %while.end807, %if.end785
  br label %if.end809

if.end809:                                        ; preds = %if.end808, %gotwidth
  %415 = load i8, i8* %vectorize, align 1
  %tobool810 = trunc i8 %415 to i1
  br i1 %tobool810, label %if.then811, label %if.end945

if.then811:                                       ; preds = %if.end809
  %416 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool812 = icmp ne [1 x %struct.__va_list_tag]* %416, null
  br i1 %tobool812, label %if.then813, label %if.else852

if.then813:                                       ; preds = %if.then811
  %417 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay814 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %417, i64 0, i64 0
  %gp_offset_p815 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay814, i32 0, i32 0
  %gp_offset816 = load i32, i32* %gp_offset_p815, align 8
  %fits_in_gp817 = icmp ule i32 %gp_offset816, 40
  br i1 %fits_in_gp817, label %vaarg.in_reg818, label %vaarg.in_mem820

vaarg.in_reg818:                                  ; preds = %if.then813
  %418 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay814, i32 0, i32 3
  %reg_save_area819 = load i8*, i8** %418, align 8
  %419 = getelementptr i8, i8* %reg_save_area819, i32 %gp_offset816
  %420 = bitcast i8* %419 to %struct.sv**
  %421 = add i32 %gp_offset816, 8
  store i32 %421, i32* %gp_offset_p815, align 8
  br label %vaarg.end824

vaarg.in_mem820:                                  ; preds = %if.then813
  %overflow_arg_area_p821 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay814, i32 0, i32 2
  %overflow_arg_area822 = load i8*, i8** %overflow_arg_area_p821, align 8
  %422 = bitcast i8* %overflow_arg_area822 to %struct.sv**
  %overflow_arg_area.next823 = getelementptr i8, i8* %overflow_arg_area822, i32 8
  store i8* %overflow_arg_area.next823, i8** %overflow_arg_area_p821, align 8
  br label %vaarg.end824

vaarg.end824:                                     ; preds = %vaarg.in_mem820, %vaarg.in_reg818
  %vaarg.addr825 = phi %struct.sv** [ %420, %vaarg.in_reg818 ], [ %422, %vaarg.in_mem820 ]
  %423 = load %struct.sv*, %struct.sv** %vaarg.addr825, align 8
  store %struct.sv* %423, %struct.sv** %vecsv, align 8
  %424 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_flags826 = getelementptr inbounds %struct.sv, %struct.sv* %424, i32 0, i32 2
  %425 = load i32, i32* %sv_flags826, align 4
  %and827 = and i32 %425, 2098176
  %cmp828 = icmp eq i32 %and827, 1024
  br i1 %cmp828, label %cond.true830, label %cond.false836

cond.true830:                                     ; preds = %vaarg.end824
  %426 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_any831 = getelementptr inbounds %struct.sv, %struct.sv* %426, i32 0, i32 0
  %427 = load i8*, i8** %sv_any831, align 8
  %428 = bitcast i8* %427 to %struct.xpv*
  %xpv_cur832 = getelementptr inbounds %struct.xpv, %struct.xpv* %428, i32 0, i32 2
  %429 = load i64, i64* %xpv_cur832, align 8
  store i64 %429, i64* %veclen, align 8
  %430 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_u833 = getelementptr inbounds %struct.sv, %struct.sv* %430, i32 0, i32 3
  %svu_pv834 = bitcast %union.anon* %sv_u833 to i8**
  %431 = load i8*, i8** %svu_pv834, align 8
  %add.ptr835 = getelementptr inbounds i8, i8* %431, i64 0
  br label %cond.end838

cond.false836:                                    ; preds = %vaarg.end824
  %432 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %call837 = call i8* @Perl_sv_2pv_flags(%struct.sv* %432, i64* %veclen, i32 34)
  br label %cond.end838

cond.end838:                                      ; preds = %cond.false836, %cond.true830
  %cond839 = phi i8* [ %add.ptr835, %cond.true830 ], [ %call837, %cond.false836 ]
  store i8* %cond839, i8** %vecstr, align 8
  %433 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_flags840 = getelementptr inbounds %struct.sv, %struct.sv* %433, i32 0, i32 2
  %434 = load i32, i32* %sv_flags840, align 4
  %and841 = and i32 %434, 536870912
  %tobool842 = icmp ne i32 %and841, 0
  br i1 %tobool842, label %land.rhs843, label %land.end849

land.rhs843:                                      ; preds = %cond.end838
  %435 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints844 = getelementptr inbounds %struct.cop, %struct.cop* %435, i32 0, i32 10
  %436 = load i32, i32* %cop_hints844, align 8
  %add845 = add i32 %436, 0
  %and846 = and i32 %add845, 8
  %tobool847 = icmp ne i32 %and846, 0
  %lnot848 = xor i1 %tobool847, true
  br label %land.end849

land.end849:                                      ; preds = %land.rhs843, %cond.end838
  %437 = phi i1 [ false, %cond.end838 ], [ %lnot848, %land.rhs843 ]
  %frombool851 = zext i1 %437 to i8
  store i8 %frombool851, i8* %vec_utf8, align 1
  br label %if.end944

if.else852:                                       ; preds = %if.then811
  %438 = load i32, i32* %efix, align 4
  %tobool853 = icmp ne i32 %438, 0
  br i1 %tobool853, label %cond.true854, label %cond.false860

cond.true854:                                     ; preds = %if.else852
  %439 = load i32, i32* %efix, align 4
  %cmp855 = icmp sgt i32 %439, 0
  br i1 %cmp855, label %land.lhs.true857, label %if.else942

land.lhs.true857:                                 ; preds = %cond.true854
  %440 = load i32, i32* %efix, align 4
  %441 = load i32, i32* %svmax.addr, align 4
  %cmp858 = icmp sle i32 %440, %441
  br i1 %cmp858, label %if.then863, label %if.else942

cond.false860:                                    ; preds = %if.else852
  %442 = load i32, i32* %svix, align 4
  %443 = load i32, i32* %svmax.addr, align 4
  %cmp861 = icmp slt i32 %442, %443
  br i1 %cmp861, label %if.then863, label %if.else942

if.then863:                                       ; preds = %cond.false860, %land.lhs.true857
  %444 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %445 = load i32, i32* %efix, align 4
  %tobool864 = icmp ne i32 %445, 0
  br i1 %tobool864, label %cond.true865, label %cond.false867

cond.true865:                                     ; preds = %if.then863
  %446 = load i32, i32* %efix, align 4
  %sub866 = sub nsw i32 %446, 1
  br label %cond.end869

cond.false867:                                    ; preds = %if.then863
  %447 = load i32, i32* %svix, align 4
  %inc868 = add nsw i32 %447, 1
  store i32 %inc868, i32* %svix, align 4
  br label %cond.end869

cond.end869:                                      ; preds = %cond.false867, %cond.true865
  %cond870 = phi i32 [ %sub866, %cond.true865 ], [ %447, %cond.false867 ]
  %idxprom871 = sext i32 %cond870 to i64
  %arrayidx872 = getelementptr inbounds %struct.sv*, %struct.sv** %444, i64 %idxprom871
  %448 = load %struct.sv*, %struct.sv** %arrayidx872, align 8
  store %struct.sv* %448, %struct.sv** %vecsv, align 8
  %449 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_flags873 = getelementptr inbounds %struct.sv, %struct.sv* %449, i32 0, i32 2
  %450 = load i32, i32* %sv_flags873, align 4
  %and874 = and i32 %450, 2098176
  %cmp875 = icmp eq i32 %and874, 1024
  br i1 %cmp875, label %cond.true877, label %cond.false883

cond.true877:                                     ; preds = %cond.end869
  %451 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_any878 = getelementptr inbounds %struct.sv, %struct.sv* %451, i32 0, i32 0
  %452 = load i8*, i8** %sv_any878, align 8
  %453 = bitcast i8* %452 to %struct.xpv*
  %xpv_cur879 = getelementptr inbounds %struct.xpv, %struct.xpv* %453, i32 0, i32 2
  %454 = load i64, i64* %xpv_cur879, align 8
  store i64 %454, i64* %veclen, align 8
  %455 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_u880 = getelementptr inbounds %struct.sv, %struct.sv* %455, i32 0, i32 3
  %svu_pv881 = bitcast %union.anon* %sv_u880 to i8**
  %456 = load i8*, i8** %svu_pv881, align 8
  %add.ptr882 = getelementptr inbounds i8, i8* %456, i64 0
  br label %cond.end885

cond.false883:                                    ; preds = %cond.end869
  %457 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %call884 = call i8* @Perl_sv_2pv_flags(%struct.sv* %457, i64* %veclen, i32 34)
  br label %cond.end885

cond.end885:                                      ; preds = %cond.false883, %cond.true877
  %cond886 = phi i8* [ %add.ptr882, %cond.true877 ], [ %call884, %cond.false883 ]
  store i8* %cond886, i8** %vecstr, align 8
  %458 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_flags887 = getelementptr inbounds %struct.sv, %struct.sv* %458, i32 0, i32 2
  %459 = load i32, i32* %sv_flags887, align 4
  %and888 = and i32 %459, 536870912
  %tobool889 = icmp ne i32 %and888, 0
  br i1 %tobool889, label %land.rhs890, label %land.end896

land.rhs890:                                      ; preds = %cond.end885
  %460 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints891 = getelementptr inbounds %struct.cop, %struct.cop* %460, i32 0, i32 10
  %461 = load i32, i32* %cop_hints891, align 8
  %add892 = add i32 %461, 0
  %and893 = and i32 %add892, 8
  %tobool894 = icmp ne i32 %and893, 0
  %lnot895 = xor i1 %tobool894, true
  br label %land.end896

land.end896:                                      ; preds = %land.rhs890, %cond.end885
  %462 = phi i1 [ false, %cond.end885 ], [ %lnot895, %land.rhs890 ]
  %frombool898 = zext i1 %462 to i8
  store i8 %frombool898, i8* %vec_utf8, align 1
  %463 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %call899 = call i32 @Perl_sv_isobject(%struct.sv* %463)
  %tobool900 = icmp ne i32 %call899, 0
  br i1 %tobool900, label %land.lhs.true901, label %if.end941

land.lhs.true901:                                 ; preds = %land.end896
  %464 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %call902 = call zeroext i1 @Perl_sv_derived_from(%struct.sv* %464, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.69, i64 0, i64 0))
  br i1 %call902, label %if.then904, label %if.end941

if.then904:                                       ; preds = %land.lhs.true901
  %465 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_u905 = getelementptr inbounds %struct.sv, %struct.sv* %465, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u905 to %struct.sv**
  %466 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %467 = bitcast %struct.sv* %466 to i8*
  %468 = bitcast i8* %467 to %struct.hv*
  %call906 = call i8* @Perl_hv_common_key_len(%struct.hv* %468, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i64 0, i64 0), i32 5, i32 8, %struct.sv* null, i32 0)
  %tobool907 = icmp ne i8* %call906, null
  br i1 %tobool907, label %cond.true908, label %cond.false909

cond.true908:                                     ; preds = %if.then904
  br i1 true, label %if.then910, label %if.end911

cond.false909:                                    ; preds = %if.then904
  br i1 false, label %if.then910, label %if.end911

if.then910:                                       ; preds = %cond.false909, %cond.true908
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 34, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.71, i64 0, i64 0))
  br label %vdblank

if.end911:                                        ; preds = %cond.false909, %cond.true908
  %call912 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call912, %struct.sv** %vecsv, align 8
  %469 = load i8*, i8** %vecstr, align 8
  %470 = load i8*, i8** %vecstr, align 8
  %471 = load i64, i64* %veclen, align 8
  %add.ptr913 = getelementptr inbounds i8, i8* %470, i64 %471
  %472 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %call914 = call i8* @Perl_scan_vstring(i8* %469, i8* %add.ptr913, %struct.sv* %472)
  %473 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_flags915 = getelementptr inbounds %struct.sv, %struct.sv* %473, i32 0, i32 2
  %474 = load i32, i32* %sv_flags915, align 4
  %and916 = and i32 %474, 2098176
  %cmp917 = icmp eq i32 %and916, 1024
  br i1 %cmp917, label %cond.true919, label %cond.false925

cond.true919:                                     ; preds = %if.end911
  %475 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_any920 = getelementptr inbounds %struct.sv, %struct.sv* %475, i32 0, i32 0
  %476 = load i8*, i8** %sv_any920, align 8
  %477 = bitcast i8* %476 to %struct.xpv*
  %xpv_cur921 = getelementptr inbounds %struct.xpv, %struct.xpv* %477, i32 0, i32 2
  %478 = load i64, i64* %xpv_cur921, align 8
  store i64 %478, i64* %veclen, align 8
  %479 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_u922 = getelementptr inbounds %struct.sv, %struct.sv* %479, i32 0, i32 3
  %svu_pv923 = bitcast %union.anon* %sv_u922 to i8**
  %480 = load i8*, i8** %svu_pv923, align 8
  %add.ptr924 = getelementptr inbounds i8, i8* %480, i64 0
  br label %cond.end927

cond.false925:                                    ; preds = %if.end911
  %481 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %call926 = call i8* @Perl_sv_2pv_flags(%struct.sv* %481, i64* %veclen, i32 34)
  br label %cond.end927

cond.end927:                                      ; preds = %cond.false925, %cond.true919
  %cond928 = phi i8* [ %add.ptr924, %cond.true919 ], [ %call926, %cond.false925 ]
  store i8* %cond928, i8** %vecstr, align 8
  %482 = load %struct.sv*, %struct.sv** %vecsv, align 8
  %sv_flags929 = getelementptr inbounds %struct.sv, %struct.sv* %482, i32 0, i32 2
  %483 = load i32, i32* %sv_flags929, align 4
  %and930 = and i32 %483, 536870912
  %tobool931 = icmp ne i32 %and930, 0
  br i1 %tobool931, label %land.rhs932, label %land.end938

land.rhs932:                                      ; preds = %cond.end927
  %484 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints933 = getelementptr inbounds %struct.cop, %struct.cop* %484, i32 0, i32 10
  %485 = load i32, i32* %cop_hints933, align 8
  %add934 = add i32 %485, 0
  %and935 = and i32 %add934, 8
  %tobool936 = icmp ne i32 %and935, 0
  %lnot937 = xor i1 %tobool936, true
  br label %land.end938

land.end938:                                      ; preds = %land.rhs932, %cond.end927
  %486 = phi i1 [ false, %cond.end927 ], [ %lnot937, %land.rhs932 ]
  %frombool940 = zext i1 %486 to i8
  store i8 %frombool940, i8* %vec_utf8, align 1
  br label %if.end941

if.end941:                                        ; preds = %land.end938, %land.lhs.true901, %land.end896
  br label %if.end943

if.else942:                                       ; preds = %cond.false860, %land.lhs.true857, %cond.true854
  br label %vdblank

vdblank:                                          ; preds = %if.else942, %if.then910
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8** %vecstr, align 8
  store i64 0, i64* %veclen, align 8
  br label %if.end943

if.end943:                                        ; preds = %vdblank, %if.end941
  br label %if.end944

if.end944:                                        ; preds = %if.end943, %land.end849
  br label %if.end945

if.end945:                                        ; preds = %if.end944, %if.end809
  %487 = load i8*, i8** %q, align 8
  %488 = load i8, i8* %487, align 1
  %conv946 = sext i8 %488 to i32
  switch i32 %conv946, label %sw.epilog969 [
    i32 76, label %sw.bb947
    i32 113, label %sw.bb947
    i32 108, label %sw.bb949
    i32 104, label %sw.bb958
    i32 86, label %sw.bb967
    i32 122, label %sw.bb967
    i32 116, label %sw.bb967
  ]

sw.bb947:                                         ; preds = %if.end945, %if.end945
  store i8 113, i8* %intsize, align 1
  %489 = load i8*, i8** %q, align 8
  %incdec.ptr948 = getelementptr inbounds i8, i8* %489, i32 1
  store i8* %incdec.ptr948, i8** %q, align 8
  br label %sw.epilog969

sw.bb949:                                         ; preds = %if.end945
  %490 = load i8*, i8** %q, align 8
  %incdec.ptr950 = getelementptr inbounds i8, i8* %490, i32 1
  store i8* %incdec.ptr950, i8** %q, align 8
  %491 = load i8*, i8** %q, align 8
  %492 = load i8, i8* %491, align 1
  %conv951 = sext i8 %492 to i32
  %cmp952 = icmp eq i32 %conv951, 108
  br i1 %cmp952, label %if.then954, label %if.else956

if.then954:                                       ; preds = %sw.bb949
  store i8 113, i8* %intsize, align 1
  %493 = load i8*, i8** %q, align 8
  %incdec.ptr955 = getelementptr inbounds i8, i8* %493, i32 1
  store i8* %incdec.ptr955, i8** %q, align 8
  br label %if.end957

if.else956:                                       ; preds = %sw.bb949
  store i8 108, i8* %intsize, align 1
  br label %if.end957

if.end957:                                        ; preds = %if.else956, %if.then954
  br label %sw.epilog969

sw.bb958:                                         ; preds = %if.end945
  %494 = load i8*, i8** %q, align 8
  %incdec.ptr959 = getelementptr inbounds i8, i8* %494, i32 1
  store i8* %incdec.ptr959, i8** %q, align 8
  %495 = load i8, i8* %incdec.ptr959, align 1
  %conv960 = sext i8 %495 to i32
  %cmp961 = icmp eq i32 %conv960, 104
  br i1 %cmp961, label %if.then963, label %if.else965

if.then963:                                       ; preds = %sw.bb958
  store i8 99, i8* %intsize, align 1
  %496 = load i8*, i8** %q, align 8
  %incdec.ptr964 = getelementptr inbounds i8, i8* %496, i32 1
  store i8* %incdec.ptr964, i8** %q, align 8
  br label %if.end966

if.else965:                                       ; preds = %sw.bb958
  store i8 104, i8* %intsize, align 1
  br label %if.end966

if.end966:                                        ; preds = %if.else965, %if.then963
  br label %sw.epilog969

sw.bb967:                                         ; preds = %if.end945, %if.end945, %if.end945
  %497 = load i8*, i8** %q, align 8
  %incdec.ptr968 = getelementptr inbounds i8, i8* %497, i32 1
  store i8* %incdec.ptr968, i8** %q, align 8
  %498 = load i8, i8* %497, align 1
  store i8 %498, i8* %intsize, align 1
  br label %sw.epilog969

sw.epilog969:                                     ; preds = %if.end945, %sw.bb967, %if.end966, %if.end957, %sw.bb947
  %499 = load i8*, i8** %q, align 8
  %500 = load i8, i8* %499, align 1
  %conv970 = sext i8 %500 to i32
  %cmp971 = icmp eq i32 %conv970, 37
  br i1 %cmp971, label %if.then973, label %if.end978

if.then973:                                       ; preds = %sw.epilog969
  %501 = load i8*, i8** %q, align 8
  %incdec.ptr974 = getelementptr inbounds i8, i8* %501, i32 1
  store i8* %incdec.ptr974, i8** %q, align 8
  store i8* %501, i8** %eptr, align 8
  store i64 1, i64* %elen, align 8
  %502 = load i8, i8* %vectorize, align 1
  %tobool975 = trunc i8 %502 to i1
  br i1 %tobool975, label %if.then976, label %if.end977

if.then976:                                       ; preds = %if.then973
  store i8 37, i8* %c, align 1
  br label %unknown

if.end977:                                        ; preds = %if.then973
  br label %string

if.end978:                                        ; preds = %sw.epilog969
  %503 = load i8, i8* %vectorize, align 1
  %tobool979 = trunc i8 %503 to i1
  br i1 %tobool979, label %if.end1014, label %land.lhs.true980

land.lhs.true980:                                 ; preds = %if.end978
  %504 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool981 = icmp ne [1 x %struct.__va_list_tag]* %504, null
  br i1 %tobool981, label %if.end1014, label %if.then982

if.then982:                                       ; preds = %land.lhs.true980
  %505 = load i32, i32* %efix, align 4
  %tobool983 = icmp ne i32 %505, 0
  br i1 %tobool983, label %if.then984, label %if.else999

if.then984:                                       ; preds = %if.then982
  %506 = load i32, i32* %efix, align 4
  %sub986 = sub nsw i32 %506, 1
  store i32 %sub986, i32* %i985, align 4
  %507 = load i32, i32* %i985, align 4
  %cmp987 = icmp sge i32 %507, 0
  br i1 %cmp987, label %land.lhs.true989, label %cond.false995

land.lhs.true989:                                 ; preds = %if.then984
  %508 = load i32, i32* %i985, align 4
  %509 = load i32, i32* %svmax.addr, align 4
  %cmp990 = icmp slt i32 %508, %509
  br i1 %cmp990, label %cond.true992, label %cond.false995

cond.true992:                                     ; preds = %land.lhs.true989
  %510 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %511 = load i32, i32* %i985, align 4
  %idxprom993 = sext i32 %511 to i64
  %arrayidx994 = getelementptr inbounds %struct.sv*, %struct.sv** %510, i64 %idxprom993
  %512 = load %struct.sv*, %struct.sv** %arrayidx994, align 8
  br label %cond.end997

cond.false995:                                    ; preds = %land.lhs.true989, %if.then984
  %call996 = call %struct.sv* @S_vcatpvfn_missing_argument()
  br label %cond.end997

cond.end997:                                      ; preds = %cond.false995, %cond.true992
  %cond998 = phi %struct.sv* [ %512, %cond.true992 ], [ %call996, %cond.false995 ]
  store %struct.sv* %cond998, %struct.sv** %argsv, align 8
  br label %if.end1013

if.else999:                                       ; preds = %if.then982
  %513 = load i32, i32* %svix, align 4
  %cmp1000 = icmp sge i32 %513, 0
  br i1 %cmp1000, label %land.lhs.true1002, label %cond.false1009

land.lhs.true1002:                                ; preds = %if.else999
  %514 = load i32, i32* %svix, align 4
  %515 = load i32, i32* %svmax.addr, align 4
  %cmp1003 = icmp slt i32 %514, %515
  br i1 %cmp1003, label %cond.true1005, label %cond.false1009

cond.true1005:                                    ; preds = %land.lhs.true1002
  %516 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %517 = load i32, i32* %svix, align 4
  %inc1006 = add nsw i32 %517, 1
  store i32 %inc1006, i32* %svix, align 4
  %idxprom1007 = sext i32 %517 to i64
  %arrayidx1008 = getelementptr inbounds %struct.sv*, %struct.sv** %516, i64 %idxprom1007
  %518 = load %struct.sv*, %struct.sv** %arrayidx1008, align 8
  br label %cond.end1011

cond.false1009:                                   ; preds = %land.lhs.true1002, %if.else999
  %call1010 = call %struct.sv* @S_vcatpvfn_missing_argument()
  br label %cond.end1011

cond.end1011:                                     ; preds = %cond.false1009, %cond.true1005
  %cond1012 = phi %struct.sv* [ %518, %cond.true1005 ], [ %call1010, %cond.false1009 ]
  store %struct.sv* %cond1012, %struct.sv** %argsv, align 8
  br label %if.end1013

if.end1013:                                       ; preds = %cond.end1011, %cond.end997
  br label %if.end1014

if.end1014:                                       ; preds = %if.end1013, %land.lhs.true980, %if.end978
  %519 = load %struct.sv*, %struct.sv** %argsv, align 8
  %tobool1015 = icmp ne %struct.sv* %519, null
  br i1 %tobool1015, label %land.lhs.true1016, label %if.end1057

land.lhs.true1016:                                ; preds = %if.end1014
  %520 = load i8*, i8** %q, align 8
  %521 = load i8, i8* %520, align 1
  %conv1017 = sext i8 %521 to i32
  %call1018 = call i8* @strchr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.72, i64 0, i64 0), i32 %conv1017) #8
  %tobool1019 = icmp ne i8* %call1018, null
  br i1 %tobool1019, label %if.then1020, label %if.end1057

if.then1020:                                      ; preds = %land.lhs.true1016
  %522 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1021 = getelementptr inbounds %struct.sv, %struct.sv* %522, i32 0, i32 2
  %523 = load i32, i32* %sv_flags1021, align 4
  %and1022 = and i32 %523, 2097152
  %tobool1023 = icmp ne i32 %and1022, 0
  br i1 %tobool1023, label %cond.true1024, label %cond.false1025

cond.true1024:                                    ; preds = %if.then1020
  br i1 true, label %land.rhs1026, label %land.end1029

cond.false1025:                                   ; preds = %if.then1020
  br i1 false, label %land.rhs1026, label %land.end1029

land.rhs1026:                                     ; preds = %cond.false1025, %cond.true1024
  %524 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call1027 = call i32 @Perl_mg_get(%struct.sv* %524)
  %tobool1028 = icmp ne i32 %call1027, 0
  br label %land.end1029

land.end1029:                                     ; preds = %land.rhs1026, %cond.false1025, %cond.true1024
  %525 = phi i1 [ false, %cond.false1025 ], [ false, %cond.true1024 ], [ %tobool1028, %land.rhs1026 ]
  %land.ext1030 = zext i1 %525 to i32
  %526 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1031 = getelementptr inbounds %struct.sv, %struct.sv* %526, i32 0, i32 2
  %527 = load i32, i32* %sv_flags1031, align 4
  %and1032 = and i32 %527, 2048
  %tobool1033 = icmp ne i32 %and1032, 0
  br i1 %tobool1033, label %land.lhs.true1034, label %cond.false1048

land.lhs.true1034:                                ; preds = %land.end1029
  %528 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_u1035 = getelementptr inbounds %struct.sv, %struct.sv* %528, i32 0, i32 3
  %svu_rv1036 = bitcast %union.anon* %sv_u1035 to %struct.sv**
  %529 = load %struct.sv*, %struct.sv** %svu_rv1036, align 8
  %sv_flags1037 = getelementptr inbounds %struct.sv, %struct.sv* %529, i32 0, i32 2
  %530 = load i32, i32* %sv_flags1037, align 4
  %and1038 = and i32 %530, 1048576
  %tobool1039 = icmp ne i32 %and1038, 0
  br i1 %tobool1039, label %land.lhs.true1040, label %cond.false1048

land.lhs.true1040:                                ; preds = %land.lhs.true1034
  %531 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_u1041 = getelementptr inbounds %struct.sv, %struct.sv* %531, i32 0, i32 3
  %svu_rv1042 = bitcast %union.anon* %sv_u1041 to %struct.sv**
  %532 = load %struct.sv*, %struct.sv** %svu_rv1042, align 8
  %sv_any1043 = getelementptr inbounds %struct.sv, %struct.sv* %532, i32 0, i32 0
  %533 = load i8*, i8** %sv_any1043, align 8
  %534 = bitcast i8* %533 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %534, i32 0, i32 0
  %535 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags1044 = getelementptr inbounds %struct.hv, %struct.hv* %535, i32 0, i32 2
  %536 = load i32, i32* %sv_flags1044, align 4
  %and1045 = and i32 %536, 268435456
  %tobool1046 = icmp ne i32 %and1045, 0
  br i1 %tobool1046, label %cond.true1047, label %cond.false1048

cond.true1047:                                    ; preds = %land.lhs.true1040
  br i1 true, label %if.then1049, label %if.end1051

cond.false1048:                                   ; preds = %land.lhs.true1040, %land.lhs.true1034, %land.end1029
  br i1 false, label %if.then1049, label %if.end1051

if.then1049:                                      ; preds = %cond.false1048, %cond.true1047
  %537 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call1050 = call %struct.sv* @Perl_sv_2num(%struct.sv* %537)
  store %struct.sv* %call1050, %struct.sv** %argsv, align 8
  br label %if.end1051

if.end1051:                                       ; preds = %if.then1049, %cond.false1048, %cond.true1047
  %538 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call1052 = call zeroext i1 @Perl_isinfnansv(%struct.sv* %538)
  %539 = zext i1 %call1052 to i64
  %cond1054 = select i1 %call1052, i32 1, i32 0
  %tobool1055 = icmp ne i32 %cond1054, 0
  %frombool1056 = zext i1 %tobool1055 to i8
  store i8 %frombool1056, i8* %infnan, align 1
  br label %if.end1057

if.end1057:                                       ; preds = %if.end1051, %land.lhs.true1016, %if.end1014
  %540 = load i8*, i8** %q, align 8
  %incdec.ptr1058 = getelementptr inbounds i8, i8* %540, i32 1
  store i8* %incdec.ptr1058, i8** %q, align 8
  %541 = load i8, i8* %540, align 1
  store i8 %541, i8* %c, align 1
  %conv1059 = sext i8 %541 to i32
  switch i32 %conv1059, label %sw.default2357 [
    i32 99, label %sw.bb1060
    i32 115, label %sw.bb1132
    i32 112, label %sw.bb1274
    i32 68, label %sw.bb1302
    i32 100, label %sw.bb1303
    i32 105, label %sw.bb1303
    i32 85, label %sw.bb1475
    i32 117, label %sw.bb1476
    i32 66, label %sw.bb1477
    i32 98, label %sw.bb1477
    i32 79, label %sw.bb1478
    i32 111, label %sw.bb1479
    i32 88, label %sw.bb1480
    i32 120, label %sw.bb1480
    i32 70, label %sw.bb1740
    i32 101, label %sw.bb1741
    i32 69, label %sw.bb1741
    i32 102, label %sw.bb1741
    i32 103, label %sw.bb1741
    i32 71, label %sw.bb1741
    i32 97, label %sw.bb1741
    i32 65, label %sw.bb1741
    i32 110, label %sw.bb2238
  ]

sw.bb1060:                                        ; preds = %if.end1057
  %542 = load i8, i8* %vectorize, align 1
  %tobool1061 = trunc i8 %542 to i1
  br i1 %tobool1061, label %if.then1062, label %if.end1063

if.then1062:                                      ; preds = %sw.bb1060
  br label %unknown

if.end1063:                                       ; preds = %sw.bb1060
  %543 = load i8, i8* %infnan, align 1
  %tobool1064 = trunc i8 %543 to i1
  br i1 %tobool1064, label %if.then1065, label %if.end1078

if.then1065:                                      ; preds = %if.end1063
  %544 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1066 = getelementptr inbounds %struct.sv, %struct.sv* %544, i32 0, i32 2
  %545 = load i32, i32* %sv_flags1066, align 4
  %and1067 = and i32 %545, 512
  %tobool1068 = icmp ne i32 %and1067, 0
  br i1 %tobool1068, label %cond.true1069, label %cond.false1073

cond.true1069:                                    ; preds = %if.then1065
  %546 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any1070 = getelementptr inbounds %struct.sv, %struct.sv* %546, i32 0, i32 0
  %547 = load i8*, i8** %sv_any1070, align 8
  %548 = bitcast i8* %547 to %struct.xpvnv*
  %xnv_u1071 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %548, i32 0, i32 5
  %xnv_nv1072 = bitcast %union._xnvu* %xnv_u1071 to double*
  %549 = load double, double* %xnv_nv1072, align 8
  br label %cond.end1075

cond.false1073:                                   ; preds = %if.then1065
  %550 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call1074 = call double @Perl_sv_2nv_flags(%struct.sv* %550, i32 0)
  br label %cond.end1075

cond.end1075:                                     ; preds = %cond.false1073, %cond.true1069
  %cond1076 = phi double [ %549, %cond.true1069 ], [ %call1074, %cond.false1073 ]
  %551 = load i8, i8* %c, align 1
  %conv1077 = sext i8 %551 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.73, i64 0, i64 0), double %cond1076, i32 %conv1077)
  br label %if.end1078

if.end1078:                                       ; preds = %cond.end1075, %if.end1063
  %552 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool1079 = icmp ne [1 x %struct.__va_list_tag]* %552, null
  br i1 %tobool1079, label %cond.true1080, label %cond.false1094

cond.true1080:                                    ; preds = %if.end1078
  %553 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1081 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %553, i64 0, i64 0
  %gp_offset_p1082 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1081, i32 0, i32 0
  %gp_offset1083 = load i32, i32* %gp_offset_p1082, align 8
  %fits_in_gp1084 = icmp ule i32 %gp_offset1083, 40
  br i1 %fits_in_gp1084, label %vaarg.in_reg1085, label %vaarg.in_mem1087

vaarg.in_reg1085:                                 ; preds = %cond.true1080
  %554 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1081, i32 0, i32 3
  %reg_save_area1086 = load i8*, i8** %554, align 8
  %555 = getelementptr i8, i8* %reg_save_area1086, i32 %gp_offset1083
  %556 = bitcast i8* %555 to i32*
  %557 = add i32 %gp_offset1083, 8
  store i32 %557, i32* %gp_offset_p1082, align 8
  br label %vaarg.end1091

vaarg.in_mem1087:                                 ; preds = %cond.true1080
  %overflow_arg_area_p1088 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1081, i32 0, i32 2
  %overflow_arg_area1089 = load i8*, i8** %overflow_arg_area_p1088, align 8
  %558 = bitcast i8* %overflow_arg_area1089 to i32*
  %overflow_arg_area.next1090 = getelementptr i8, i8* %overflow_arg_area1089, i32 8
  store i8* %overflow_arg_area.next1090, i8** %overflow_arg_area_p1088, align 8
  br label %vaarg.end1091

vaarg.end1091:                                    ; preds = %vaarg.in_mem1087, %vaarg.in_reg1085
  %vaarg.addr1092 = phi i32* [ %556, %vaarg.in_reg1085 ], [ %558, %vaarg.in_mem1087 ]
  %559 = load i32, i32* %vaarg.addr1092, align 4
  %conv1093 = sext i32 %559 to i64
  br label %cond.end1106

cond.false1094:                                   ; preds = %if.end1078
  %560 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1095 = getelementptr inbounds %struct.sv, %struct.sv* %560, i32 0, i32 2
  %561 = load i32, i32* %sv_flags1095, align 4
  %and1096 = and i32 %561, 256
  %tobool1097 = icmp ne i32 %and1096, 0
  br i1 %tobool1097, label %cond.true1098, label %cond.false1102

cond.true1098:                                    ; preds = %cond.false1094
  %562 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any1099 = getelementptr inbounds %struct.sv, %struct.sv* %562, i32 0, i32 0
  %563 = load i8*, i8** %sv_any1099, align 8
  %564 = bitcast i8* %563 to %struct.xpviv*
  %xiv_u1100 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %564, i32 0, i32 4
  %xivu_iv1101 = bitcast %union._xivu* %xiv_u1100 to i64*
  %565 = load i64, i64* %xivu_iv1101, align 8
  br label %cond.end1104

cond.false1102:                                   ; preds = %cond.false1094
  %566 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call1103 = call i64 @Perl_sv_2iv_flags(%struct.sv* %566, i32 0)
  br label %cond.end1104

cond.end1104:                                     ; preds = %cond.false1102, %cond.true1098
  %cond1105 = phi i64 [ %565, %cond.true1098 ], [ %call1103, %cond.false1102 ]
  br label %cond.end1106

cond.end1106:                                     ; preds = %cond.end1104, %vaarg.end1091
  %cond1107 = phi i64 [ %conv1093, %vaarg.end1091 ], [ %cond1105, %cond.end1104 ]
  store i64 %cond1107, i64* %uv, align 8
  %567 = load i64, i64* %uv, align 8
  %cmp1108 = icmp ugt i64 %567, 255
  br i1 %cmp1108, label %land.lhs.true1117, label %lor.lhs.false1110

lor.lhs.false1110:                                ; preds = %cond.end1106
  %568 = load i64, i64* %uv, align 8
  %cmp1111 = icmp ult i64 %568, 128
  br i1 %cmp1111, label %if.else1129, label %land.lhs.true1113

land.lhs.true1113:                                ; preds = %lor.lhs.false1110
  %569 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1114 = getelementptr inbounds %struct.sv, %struct.sv* %569, i32 0, i32 2
  %570 = load i32, i32* %sv_flags1114, align 4
  %and1115 = and i32 %570, 536870912
  %tobool1116 = icmp ne i32 %and1115, 0
  br i1 %tobool1116, label %land.lhs.true1117, label %if.else1129

land.lhs.true1117:                                ; preds = %land.lhs.true1113, %cond.end1106
  %571 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints1118 = getelementptr inbounds %struct.cop, %struct.cop* %571, i32 0, i32 10
  %572 = load i32, i32* %cop_hints1118, align 8
  %add1119 = add i32 %572, 0
  %and1120 = and i32 %add1119, 8
  %tobool1121 = icmp ne i32 %and1120, 0
  br i1 %tobool1121, label %if.else1129, label %if.then1122

if.then1122:                                      ; preds = %land.lhs.true1117
  %arraydecay1123 = getelementptr inbounds [14 x i8], [14 x i8]* %utf8buf, i64 0, i64 0
  store i8* %arraydecay1123, i8** %eptr, align 8
  %573 = load i8*, i8** %eptr, align 8
  %574 = load i64, i64* %uv, align 8
  %call1124 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %573, i64 %574, i64 0)
  %arraydecay1125 = getelementptr inbounds [14 x i8], [14 x i8]* %utf8buf, i64 0, i64 0
  %sub.ptr.lhs.cast1126 = ptrtoint i8* %call1124 to i64
  %sub.ptr.rhs.cast1127 = ptrtoint i8* %arraydecay1125 to i64
  %sub.ptr.sub1128 = sub i64 %sub.ptr.lhs.cast1126, %sub.ptr.rhs.cast1127
  store i64 %sub.ptr.sub1128, i64* %elen, align 8
  store i8 1, i8* %is_utf8, align 1
  br label %if.end1131

if.else1129:                                      ; preds = %land.lhs.true1117, %land.lhs.true1113, %lor.lhs.false1110
  %575 = load i64, i64* %uv, align 8
  %conv1130 = trunc i64 %575 to i8
  store i8 %conv1130, i8* %c, align 1
  store i8* %c, i8** %eptr, align 8
  store i64 1, i64* %elen, align 8
  br label %if.end1131

if.end1131:                                       ; preds = %if.else1129, %if.then1122
  br label %string

sw.bb1132:                                        ; preds = %if.end1057
  %576 = load i8, i8* %vectorize, align 1
  %tobool1133 = trunc i8 %576 to i1
  br i1 %tobool1133, label %if.then1134, label %if.end1135

if.then1134:                                      ; preds = %sw.bb1132
  br label %unknown

if.end1135:                                       ; preds = %sw.bb1132
  %577 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool1136 = icmp ne [1 x %struct.__va_list_tag]* %577, null
  br i1 %tobool1136, label %if.then1137, label %if.else1155

if.then1137:                                      ; preds = %if.end1135
  %578 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1138 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %578, i64 0, i64 0
  %gp_offset_p1139 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1138, i32 0, i32 0
  %gp_offset1140 = load i32, i32* %gp_offset_p1139, align 8
  %fits_in_gp1141 = icmp ule i32 %gp_offset1140, 40
  br i1 %fits_in_gp1141, label %vaarg.in_reg1142, label %vaarg.in_mem1144

vaarg.in_reg1142:                                 ; preds = %if.then1137
  %579 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1138, i32 0, i32 3
  %reg_save_area1143 = load i8*, i8** %579, align 8
  %580 = getelementptr i8, i8* %reg_save_area1143, i32 %gp_offset1140
  %581 = bitcast i8* %580 to i8**
  %582 = add i32 %gp_offset1140, 8
  store i32 %582, i32* %gp_offset_p1139, align 8
  br label %vaarg.end1148

vaarg.in_mem1144:                                 ; preds = %if.then1137
  %overflow_arg_area_p1145 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1138, i32 0, i32 2
  %overflow_arg_area1146 = load i8*, i8** %overflow_arg_area_p1145, align 8
  %583 = bitcast i8* %overflow_arg_area1146 to i8**
  %overflow_arg_area.next1147 = getelementptr i8, i8* %overflow_arg_area1146, i32 8
  store i8* %overflow_arg_area.next1147, i8** %overflow_arg_area_p1145, align 8
  br label %vaarg.end1148

vaarg.end1148:                                    ; preds = %vaarg.in_mem1144, %vaarg.in_reg1142
  %vaarg.addr1149 = phi i8** [ %581, %vaarg.in_reg1142 ], [ %583, %vaarg.in_mem1144 ]
  %584 = load i8*, i8** %vaarg.addr1149, align 8
  store i8* %584, i8** %eptr, align 8
  %585 = load i8*, i8** %eptr, align 8
  %tobool1150 = icmp ne i8* %585, null
  br i1 %tobool1150, label %if.then1151, label %if.else1153

if.then1151:                                      ; preds = %vaarg.end1148
  %586 = load i8*, i8** %eptr, align 8
  %call1152 = call i64 @strlen(i8* %586) #8
  store i64 %call1152, i64* %elen, align 8
  br label %if.end1154

if.else1153:                                      ; preds = %vaarg.end1148
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Perl_sv_vcatpvfn_flags.nullstr, i64 0, i64 0), i8** %eptr, align 8
  store i64 6, i64* %elen, align 8
  br label %if.end1154

if.end1154:                                       ; preds = %if.else1153, %if.then1151
  br label %if.end1266

if.else1155:                                      ; preds = %if.end1135
  %587 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1156 = getelementptr inbounds %struct.sv, %struct.sv* %587, i32 0, i32 2
  %588 = load i32, i32* %sv_flags1156, align 4
  %and1157 = and i32 %588, 2098176
  %cmp1158 = icmp eq i32 %and1157, 1024
  br i1 %cmp1158, label %cond.true1160, label %cond.false1166

cond.true1160:                                    ; preds = %if.else1155
  %589 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any1161 = getelementptr inbounds %struct.sv, %struct.sv* %589, i32 0, i32 0
  %590 = load i8*, i8** %sv_any1161, align 8
  %591 = bitcast i8* %590 to %struct.xpv*
  %xpv_cur1162 = getelementptr inbounds %struct.xpv, %struct.xpv* %591, i32 0, i32 2
  %592 = load i64, i64* %xpv_cur1162, align 8
  store i64 %592, i64* %elen, align 8
  %593 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_u1163 = getelementptr inbounds %struct.sv, %struct.sv* %593, i32 0, i32 3
  %svu_pv1164 = bitcast %union.anon* %sv_u1163 to i8**
  %594 = load i8*, i8** %svu_pv1164, align 8
  %add.ptr1165 = getelementptr inbounds i8, i8* %594, i64 0
  br label %cond.end1168

cond.false1166:                                   ; preds = %if.else1155
  %595 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call1167 = call i8* @Perl_sv_2pv_flags(%struct.sv* %595, i64* %elen, i32 34)
  br label %cond.end1168

cond.end1168:                                     ; preds = %cond.false1166, %cond.true1160
  %cond1169 = phi i8* [ %add.ptr1165, %cond.true1160 ], [ %call1167, %cond.false1166 ]
  store i8* %cond1169, i8** %eptr, align 8
  %596 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1170 = getelementptr inbounds %struct.sv, %struct.sv* %596, i32 0, i32 2
  %597 = load i32, i32* %sv_flags1170, align 4
  %and1171 = and i32 %597, 536870912
  %tobool1172 = icmp ne i32 %and1171, 0
  br i1 %tobool1172, label %land.lhs.true1173, label %if.end1265

land.lhs.true1173:                                ; preds = %cond.end1168
  %598 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints1174 = getelementptr inbounds %struct.cop, %struct.cop* %598, i32 0, i32 10
  %599 = load i32, i32* %cop_hints1174, align 8
  %add1175 = add i32 %599, 0
  %and1176 = and i32 %add1175, 8
  %tobool1177 = icmp ne i32 %and1176, 0
  br i1 %tobool1177, label %if.end1265, label %if.then1178

if.then1178:                                      ; preds = %land.lhs.true1173
  %600 = load i64, i64* %precis, align 8
  store i64 %600, i64* %old_precis, align 8
  %601 = load i8, i8* %has_precis, align 1
  %tobool1179 = trunc i8 %601 to i1
  br i1 %tobool1179, label %land.lhs.true1181, label %if.end1221

land.lhs.true1181:                                ; preds = %if.then1178
  %602 = load i64, i64* %precis, align 8
  %603 = load i64, i64* %elen, align 8
  %cmp1182 = icmp ult i64 %602, %603
  br i1 %cmp1182, label %if.then1184, label %if.end1221

if.then1184:                                      ; preds = %land.lhs.true1181
  %604 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1185 = getelementptr inbounds %struct.sv, %struct.sv* %604, i32 0, i32 2
  %605 = load i32, i32* %sv_flags1185, align 4
  %and1186 = and i32 %605, 2097152
  %tobool1187 = icmp ne i32 %and1186, 0
  br i1 %tobool1187, label %cond.true1206, label %lor.lhs.false1188

lor.lhs.false1188:                                ; preds = %if.then1184
  %606 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1189 = getelementptr inbounds %struct.sv, %struct.sv* %606, i32 0, i32 2
  %607 = load i32, i32* %sv_flags1189, align 4
  %and1190 = and i32 %607, 2048
  %tobool1191 = icmp ne i32 %and1190, 0
  br i1 %tobool1191, label %land.lhs.true1192, label %cond.false1209

land.lhs.true1192:                                ; preds = %lor.lhs.false1188
  %608 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_u1193 = getelementptr inbounds %struct.sv, %struct.sv* %608, i32 0, i32 3
  %svu_rv1194 = bitcast %union.anon* %sv_u1193 to %struct.sv**
  %609 = load %struct.sv*, %struct.sv** %svu_rv1194, align 8
  %sv_flags1195 = getelementptr inbounds %struct.sv, %struct.sv* %609, i32 0, i32 2
  %610 = load i32, i32* %sv_flags1195, align 4
  %and1196 = and i32 %610, 1048576
  %tobool1197 = icmp ne i32 %and1196, 0
  br i1 %tobool1197, label %land.lhs.true1198, label %cond.false1209

land.lhs.true1198:                                ; preds = %land.lhs.true1192
  %611 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_u1199 = getelementptr inbounds %struct.sv, %struct.sv* %611, i32 0, i32 3
  %svu_rv1200 = bitcast %union.anon* %sv_u1199 to %struct.sv**
  %612 = load %struct.sv*, %struct.sv** %svu_rv1200, align 8
  %sv_any1201 = getelementptr inbounds %struct.sv, %struct.sv* %612, i32 0, i32 0
  %613 = load i8*, i8** %sv_any1201, align 8
  %614 = bitcast i8* %613 to %struct.xpvmg*
  %xmg_stash1202 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %614, i32 0, i32 0
  %615 = load %struct.hv*, %struct.hv** %xmg_stash1202, align 8
  %sv_flags1203 = getelementptr inbounds %struct.hv, %struct.hv* %615, i32 0, i32 2
  %616 = load i32, i32* %sv_flags1203, align 4
  %and1204 = and i32 %616, 268435456
  %tobool1205 = icmp ne i32 %and1204, 0
  br i1 %tobool1205, label %cond.true1206, label %cond.false1209

cond.true1206:                                    ; preds = %land.lhs.true1198, %if.then1184
  %617 = load i8*, i8** %eptr, align 8
  %618 = load i8*, i8** %eptr, align 8
  %619 = load i64, i64* %elen, align 8
  %add.ptr1207 = getelementptr inbounds i8, i8* %618, i64 %619
  %call1208 = call i64 @Perl_utf8_length(i8* %617, i8* %add.ptr1207)
  br label %cond.end1211

cond.false1209:                                   ; preds = %land.lhs.true1198, %land.lhs.true1192, %lor.lhs.false1188
  %620 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call1210 = call i64 @Perl_sv_len_utf8(%struct.sv* %620)
  br label %cond.end1211

cond.end1211:                                     ; preds = %cond.false1209, %cond.true1206
  %cond1212 = phi i64 [ %call1208, %cond.true1206 ], [ %call1210, %cond.false1209 ]
  store i64 %cond1212, i64* %ulen, align 8
  %621 = load i64, i64* %precis, align 8
  %622 = load i64, i64* %ulen, align 8
  %cmp1214 = icmp ugt i64 %621, %622
  br i1 %cmp1214, label %cond.true1216, label %cond.false1217

cond.true1216:                                    ; preds = %cond.end1211
  %623 = load i64, i64* %ulen, align 8
  br label %cond.end1218

cond.false1217:                                   ; preds = %cond.end1211
  %624 = load i64, i64* %precis, align 8
  br label %cond.end1218

cond.end1218:                                     ; preds = %cond.false1217, %cond.true1216
  %cond1219 = phi i64 [ %623, %cond.true1216 ], [ %624, %cond.false1217 ]
  store i64 %cond1219, i64* %p1213, align 8
  %625 = load %struct.sv*, %struct.sv** %argsv, align 8
  %626 = load i8*, i8** %eptr, align 8
  %627 = load i64, i64* %p1213, align 8
  %call1220 = call i64 @S_sv_or_pv_pos_u2b(%struct.sv* %625, i8* %626, i64 %627, i64* null)
  store i64 %call1220, i64* %precis, align 8
  br label %if.end1221

if.end1221:                                       ; preds = %cond.end1218, %land.lhs.true1181, %if.then1178
  %628 = load i64, i64* %width, align 8
  %tobool1222 = icmp ne i64 %628, 0
  br i1 %tobool1222, label %if.then1223, label %if.end1264

if.then1223:                                      ; preds = %if.end1221
  %629 = load i8, i8* %has_precis, align 1
  %tobool1224 = trunc i8 %629 to i1
  br i1 %tobool1224, label %land.lhs.true1226, label %if.else1232

land.lhs.true1226:                                ; preds = %if.then1223
  %630 = load i64, i64* %precis, align 8
  %631 = load i64, i64* %elen, align 8
  %cmp1227 = icmp ult i64 %630, %631
  br i1 %cmp1227, label %if.then1229, label %if.else1232

if.then1229:                                      ; preds = %land.lhs.true1226
  %632 = load i64, i64* %precis, align 8
  %633 = load i64, i64* %old_precis, align 8
  %sub1230 = sub i64 %632, %633
  %634 = load i64, i64* %width, align 8
  %add1231 = add i64 %634, %sub1230
  store i64 %add1231, i64* %width, align 8
  br label %if.end1263

if.else1232:                                      ; preds = %land.lhs.true1226, %if.then1223
  %635 = load i64, i64* %elen, align 8
  %636 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1233 = getelementptr inbounds %struct.sv, %struct.sv* %636, i32 0, i32 2
  %637 = load i32, i32* %sv_flags1233, align 4
  %and1234 = and i32 %637, 2097152
  %tobool1235 = icmp ne i32 %and1234, 0
  br i1 %tobool1235, label %cond.true1254, label %lor.lhs.false1236

lor.lhs.false1236:                                ; preds = %if.else1232
  %638 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1237 = getelementptr inbounds %struct.sv, %struct.sv* %638, i32 0, i32 2
  %639 = load i32, i32* %sv_flags1237, align 4
  %and1238 = and i32 %639, 2048
  %tobool1239 = icmp ne i32 %and1238, 0
  br i1 %tobool1239, label %land.lhs.true1240, label %cond.false1257

land.lhs.true1240:                                ; preds = %lor.lhs.false1236
  %640 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_u1241 = getelementptr inbounds %struct.sv, %struct.sv* %640, i32 0, i32 3
  %svu_rv1242 = bitcast %union.anon* %sv_u1241 to %struct.sv**
  %641 = load %struct.sv*, %struct.sv** %svu_rv1242, align 8
  %sv_flags1243 = getelementptr inbounds %struct.sv, %struct.sv* %641, i32 0, i32 2
  %642 = load i32, i32* %sv_flags1243, align 4
  %and1244 = and i32 %642, 1048576
  %tobool1245 = icmp ne i32 %and1244, 0
  br i1 %tobool1245, label %land.lhs.true1246, label %cond.false1257

land.lhs.true1246:                                ; preds = %land.lhs.true1240
  %643 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_u1247 = getelementptr inbounds %struct.sv, %struct.sv* %643, i32 0, i32 3
  %svu_rv1248 = bitcast %union.anon* %sv_u1247 to %struct.sv**
  %644 = load %struct.sv*, %struct.sv** %svu_rv1248, align 8
  %sv_any1249 = getelementptr inbounds %struct.sv, %struct.sv* %644, i32 0, i32 0
  %645 = load i8*, i8** %sv_any1249, align 8
  %646 = bitcast i8* %645 to %struct.xpvmg*
  %xmg_stash1250 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %646, i32 0, i32 0
  %647 = load %struct.hv*, %struct.hv** %xmg_stash1250, align 8
  %sv_flags1251 = getelementptr inbounds %struct.hv, %struct.hv* %647, i32 0, i32 2
  %648 = load i32, i32* %sv_flags1251, align 4
  %and1252 = and i32 %648, 268435456
  %tobool1253 = icmp ne i32 %and1252, 0
  br i1 %tobool1253, label %cond.true1254, label %cond.false1257

cond.true1254:                                    ; preds = %land.lhs.true1246, %if.else1232
  %649 = load i8*, i8** %eptr, align 8
  %650 = load i8*, i8** %eptr, align 8
  %651 = load i64, i64* %elen, align 8
  %add.ptr1255 = getelementptr inbounds i8, i8* %650, i64 %651
  %call1256 = call i64 @Perl_utf8_length(i8* %649, i8* %add.ptr1255)
  br label %cond.end1259

cond.false1257:                                   ; preds = %land.lhs.true1246, %land.lhs.true1240, %lor.lhs.false1236
  %652 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call1258 = call i64 @Perl_sv_len_utf8(%struct.sv* %652)
  br label %cond.end1259

cond.end1259:                                     ; preds = %cond.false1257, %cond.true1254
  %cond1260 = phi i64 [ %call1256, %cond.true1254 ], [ %call1258, %cond.false1257 ]
  %sub1261 = sub i64 %635, %cond1260
  %653 = load i64, i64* %width, align 8
  %add1262 = add i64 %653, %sub1261
  store i64 %add1262, i64* %width, align 8
  br label %if.end1263

if.end1263:                                       ; preds = %cond.end1259, %if.then1229
  br label %if.end1264

if.end1264:                                       ; preds = %if.end1263, %if.end1221
  store i8 1, i8* %is_utf8, align 1
  br label %if.end1265

if.end1265:                                       ; preds = %if.end1264, %land.lhs.true1173, %cond.end1168
  br label %if.end1266

if.end1266:                                       ; preds = %if.end1265, %if.end1154
  br label %string

string:                                           ; preds = %if.end1266, %if.end1131, %if.end977, %if.end469, %if.end434, %vaarg.end382
  %654 = load i8, i8* %has_precis, align 1
  %tobool1267 = trunc i8 %654 to i1
  br i1 %tobool1267, label %land.lhs.true1269, label %if.end1273

land.lhs.true1269:                                ; preds = %string
  %655 = load i64, i64* %precis, align 8
  %656 = load i64, i64* %elen, align 8
  %cmp1270 = icmp ult i64 %655, %656
  br i1 %cmp1270, label %if.then1272, label %if.end1273

if.then1272:                                      ; preds = %land.lhs.true1269
  %657 = load i64, i64* %precis, align 8
  store i64 %657, i64* %elen, align 8
  br label %if.end1273

if.end1273:                                       ; preds = %if.then1272, %land.lhs.true1269, %string
  br label %sw.epilog2463

sw.bb1274:                                        ; preds = %if.end1057
  %658 = load i8, i8* %infnan, align 1
  %tobool1275 = trunc i8 %658 to i1
  br i1 %tobool1275, label %if.then1276, label %if.end1277

if.then1276:                                      ; preds = %sw.bb1274
  br label %floating_point

if.end1277:                                       ; preds = %sw.bb1274
  %659 = load i8, i8* %alt, align 1
  %tobool1278 = trunc i8 %659 to i1
  br i1 %tobool1278, label %if.then1283, label %lor.lhs.false1280

lor.lhs.false1280:                                ; preds = %if.end1277
  %660 = load i8, i8* %vectorize, align 1
  %tobool1281 = trunc i8 %660 to i1
  br i1 %tobool1281, label %if.then1283, label %if.end1284

if.then1283:                                      ; preds = %lor.lhs.false1280, %if.end1277
  br label %unknown

if.end1284:                                       ; preds = %lor.lhs.false1280
  %661 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool1285 = icmp ne [1 x %struct.__va_list_tag]* %661, null
  br i1 %tobool1285, label %cond.true1286, label %cond.false1299

cond.true1286:                                    ; preds = %if.end1284
  %662 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1287 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %662, i64 0, i64 0
  %gp_offset_p1288 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1287, i32 0, i32 0
  %gp_offset1289 = load i32, i32* %gp_offset_p1288, align 8
  %fits_in_gp1290 = icmp ule i32 %gp_offset1289, 40
  br i1 %fits_in_gp1290, label %vaarg.in_reg1291, label %vaarg.in_mem1293

vaarg.in_reg1291:                                 ; preds = %cond.true1286
  %663 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1287, i32 0, i32 3
  %reg_save_area1292 = load i8*, i8** %663, align 8
  %664 = getelementptr i8, i8* %reg_save_area1292, i32 %gp_offset1289
  %665 = bitcast i8* %664 to i8**
  %666 = add i32 %gp_offset1289, 8
  store i32 %666, i32* %gp_offset_p1288, align 8
  br label %vaarg.end1297

vaarg.in_mem1293:                                 ; preds = %cond.true1286
  %overflow_arg_area_p1294 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1287, i32 0, i32 2
  %overflow_arg_area1295 = load i8*, i8** %overflow_arg_area_p1294, align 8
  %667 = bitcast i8* %overflow_arg_area1295 to i8**
  %overflow_arg_area.next1296 = getelementptr i8, i8* %overflow_arg_area1295, i32 8
  store i8* %overflow_arg_area.next1296, i8** %overflow_arg_area_p1294, align 8
  br label %vaarg.end1297

vaarg.end1297:                                    ; preds = %vaarg.in_mem1293, %vaarg.in_reg1291
  %vaarg.addr1298 = phi i8** [ %665, %vaarg.in_reg1291 ], [ %667, %vaarg.in_mem1293 ]
  %668 = load i8*, i8** %vaarg.addr1298, align 8
  br label %cond.end1300

cond.false1299:                                   ; preds = %if.end1284
  %669 = load %struct.sv*, %struct.sv** %argsv, align 8
  %670 = bitcast %struct.sv* %669 to i8*
  br label %cond.end1300

cond.end1300:                                     ; preds = %cond.false1299, %vaarg.end1297
  %cond1301 = phi i8* [ %668, %vaarg.end1297 ], [ %670, %cond.false1299 ]
  %671 = ptrtoint i8* %cond1301 to i64
  store i64 %671, i64* %uv, align 8
  store i32 16, i32* %base, align 4
  br label %integer

sw.bb1302:                                        ; preds = %if.end1057
  store i8 113, i8* %intsize, align 1
  br label %sw.bb1303

sw.bb1303:                                        ; preds = %if.end1057, %if.end1057, %sw.bb1302
  %672 = load i8, i8* %infnan, align 1
  %tobool1304 = trunc i8 %672 to i1
  br i1 %tobool1304, label %if.then1305, label %if.end1306

if.then1305:                                      ; preds = %sw.bb1303
  br label %floating_point

if.end1306:                                       ; preds = %sw.bb1303
  %673 = load i8, i8* %vectorize, align 1
  %tobool1307 = trunc i8 %673 to i1
  br i1 %tobool1307, label %if.then1308, label %if.else1326

if.then1308:                                      ; preds = %if.end1306
  %674 = load i64, i64* %veclen, align 8
  %tobool1310 = icmp ne i64 %674, 0
  br i1 %tobool1310, label %if.end1312, label %if.then1311

if.then1311:                                      ; preds = %if.then1308
  br label %for.inc2648

if.end1312:                                       ; preds = %if.then1308
  %675 = load i8, i8* %vec_utf8, align 1
  %tobool1313 = trunc i8 %675 to i1
  br i1 %tobool1313, label %if.then1314, label %if.else1316

if.then1314:                                      ; preds = %if.end1312
  %676 = load i8*, i8** %vecstr, align 8
  %677 = load i64, i64* %veclen, align 8
  %call1315 = call i64 @Perl_utf8n_to_uvchr(i8* %676, i64 %677, i64* %ulen1309, i32 1)
  store i64 %call1315, i64* %uv, align 8
  br label %if.end1318

if.else1316:                                      ; preds = %if.end1312
  %678 = load i8*, i8** %vecstr, align 8
  %679 = load i8, i8* %678, align 1
  %conv1317 = zext i8 %679 to i64
  store i64 %conv1317, i64* %uv, align 8
  store i64 1, i64* %ulen1309, align 8
  br label %if.end1318

if.end1318:                                       ; preds = %if.else1316, %if.then1314
  %680 = load i64, i64* %ulen1309, align 8
  %681 = load i8*, i8** %vecstr, align 8
  %add.ptr1319 = getelementptr inbounds i8, i8* %681, i64 %680
  store i8* %add.ptr1319, i8** %vecstr, align 8
  %682 = load i64, i64* %ulen1309, align 8
  %683 = load i64, i64* %veclen, align 8
  %sub1320 = sub i64 %683, %682
  store i64 %sub1320, i64* %veclen, align 8
  %684 = load i8, i8* %plus, align 1
  %tobool1321 = icmp ne i8 %684, 0
  br i1 %tobool1321, label %if.then1322, label %if.end1325

if.then1322:                                      ; preds = %if.end1318
  %685 = load i8, i8* %plus, align 1
  %686 = load i64, i64* %esignlen, align 8
  %inc1323 = add i64 %686, 1
  store i64 %inc1323, i64* %esignlen, align 8
  %arrayidx1324 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i64 0, i64 %686
  store i8 %685, i8* %arrayidx1324, align 1
  br label %if.end1325

if.end1325:                                       ; preds = %if.then1322, %if.end1318
  br label %if.end1452

if.else1326:                                      ; preds = %if.end1306
  %687 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool1327 = icmp ne [1 x %struct.__va_list_tag]* %687, null
  br i1 %tobool1327, label %if.then1328, label %if.else1427

if.then1328:                                      ; preds = %if.else1326
  %688 = load i8, i8* %intsize, align 1
  %conv1329 = sext i8 %688 to i32
  switch i32 %conv1329, label %sw.default1399 [
    i32 99, label %sw.bb1330
    i32 104, label %sw.bb1345
    i32 108, label %sw.bb1360
    i32 86, label %sw.bb1373
    i32 122, label %sw.bb1386
    i32 113, label %sw.bb1413
  ]

sw.bb1330:                                        ; preds = %if.then1328
  %689 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1331 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %689, i64 0, i64 0
  %gp_offset_p1332 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1331, i32 0, i32 0
  %gp_offset1333 = load i32, i32* %gp_offset_p1332, align 8
  %fits_in_gp1334 = icmp ule i32 %gp_offset1333, 40
  br i1 %fits_in_gp1334, label %vaarg.in_reg1335, label %vaarg.in_mem1337

vaarg.in_reg1335:                                 ; preds = %sw.bb1330
  %690 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1331, i32 0, i32 3
  %reg_save_area1336 = load i8*, i8** %690, align 8
  %691 = getelementptr i8, i8* %reg_save_area1336, i32 %gp_offset1333
  %692 = bitcast i8* %691 to i32*
  %693 = add i32 %gp_offset1333, 8
  store i32 %693, i32* %gp_offset_p1332, align 8
  br label %vaarg.end1341

vaarg.in_mem1337:                                 ; preds = %sw.bb1330
  %overflow_arg_area_p1338 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1331, i32 0, i32 2
  %overflow_arg_area1339 = load i8*, i8** %overflow_arg_area_p1338, align 8
  %694 = bitcast i8* %overflow_arg_area1339 to i32*
  %overflow_arg_area.next1340 = getelementptr i8, i8* %overflow_arg_area1339, i32 8
  store i8* %overflow_arg_area.next1340, i8** %overflow_arg_area_p1338, align 8
  br label %vaarg.end1341

vaarg.end1341:                                    ; preds = %vaarg.in_mem1337, %vaarg.in_reg1335
  %vaarg.addr1342 = phi i32* [ %692, %vaarg.in_reg1335 ], [ %694, %vaarg.in_mem1337 ]
  %695 = load i32, i32* %vaarg.addr1342, align 4
  %conv1343 = trunc i32 %695 to i8
  %conv1344 = sext i8 %conv1343 to i64
  store i64 %conv1344, i64* %iv, align 8
  br label %sw.epilog1426

sw.bb1345:                                        ; preds = %if.then1328
  %696 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1346 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %696, i64 0, i64 0
  %gp_offset_p1347 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1346, i32 0, i32 0
  %gp_offset1348 = load i32, i32* %gp_offset_p1347, align 8
  %fits_in_gp1349 = icmp ule i32 %gp_offset1348, 40
  br i1 %fits_in_gp1349, label %vaarg.in_reg1350, label %vaarg.in_mem1352

vaarg.in_reg1350:                                 ; preds = %sw.bb1345
  %697 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1346, i32 0, i32 3
  %reg_save_area1351 = load i8*, i8** %697, align 8
  %698 = getelementptr i8, i8* %reg_save_area1351, i32 %gp_offset1348
  %699 = bitcast i8* %698 to i32*
  %700 = add i32 %gp_offset1348, 8
  store i32 %700, i32* %gp_offset_p1347, align 8
  br label %vaarg.end1356

vaarg.in_mem1352:                                 ; preds = %sw.bb1345
  %overflow_arg_area_p1353 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1346, i32 0, i32 2
  %overflow_arg_area1354 = load i8*, i8** %overflow_arg_area_p1353, align 8
  %701 = bitcast i8* %overflow_arg_area1354 to i32*
  %overflow_arg_area.next1355 = getelementptr i8, i8* %overflow_arg_area1354, i32 8
  store i8* %overflow_arg_area.next1355, i8** %overflow_arg_area_p1353, align 8
  br label %vaarg.end1356

vaarg.end1356:                                    ; preds = %vaarg.in_mem1352, %vaarg.in_reg1350
  %vaarg.addr1357 = phi i32* [ %699, %vaarg.in_reg1350 ], [ %701, %vaarg.in_mem1352 ]
  %702 = load i32, i32* %vaarg.addr1357, align 4
  %conv1358 = trunc i32 %702 to i16
  %conv1359 = sext i16 %conv1358 to i64
  store i64 %conv1359, i64* %iv, align 8
  br label %sw.epilog1426

sw.bb1360:                                        ; preds = %if.then1328
  %703 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1361 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %703, i64 0, i64 0
  %gp_offset_p1362 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1361, i32 0, i32 0
  %gp_offset1363 = load i32, i32* %gp_offset_p1362, align 8
  %fits_in_gp1364 = icmp ule i32 %gp_offset1363, 40
  br i1 %fits_in_gp1364, label %vaarg.in_reg1365, label %vaarg.in_mem1367

vaarg.in_reg1365:                                 ; preds = %sw.bb1360
  %704 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1361, i32 0, i32 3
  %reg_save_area1366 = load i8*, i8** %704, align 8
  %705 = getelementptr i8, i8* %reg_save_area1366, i32 %gp_offset1363
  %706 = bitcast i8* %705 to i64*
  %707 = add i32 %gp_offset1363, 8
  store i32 %707, i32* %gp_offset_p1362, align 8
  br label %vaarg.end1371

vaarg.in_mem1367:                                 ; preds = %sw.bb1360
  %overflow_arg_area_p1368 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1361, i32 0, i32 2
  %overflow_arg_area1369 = load i8*, i8** %overflow_arg_area_p1368, align 8
  %708 = bitcast i8* %overflow_arg_area1369 to i64*
  %overflow_arg_area.next1370 = getelementptr i8, i8* %overflow_arg_area1369, i32 8
  store i8* %overflow_arg_area.next1370, i8** %overflow_arg_area_p1368, align 8
  br label %vaarg.end1371

vaarg.end1371:                                    ; preds = %vaarg.in_mem1367, %vaarg.in_reg1365
  %vaarg.addr1372 = phi i64* [ %706, %vaarg.in_reg1365 ], [ %708, %vaarg.in_mem1367 ]
  %709 = load i64, i64* %vaarg.addr1372, align 8
  store i64 %709, i64* %iv, align 8
  br label %sw.epilog1426

sw.bb1373:                                        ; preds = %if.then1328
  %710 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1374 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %710, i64 0, i64 0
  %gp_offset_p1375 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1374, i32 0, i32 0
  %gp_offset1376 = load i32, i32* %gp_offset_p1375, align 8
  %fits_in_gp1377 = icmp ule i32 %gp_offset1376, 40
  br i1 %fits_in_gp1377, label %vaarg.in_reg1378, label %vaarg.in_mem1380

vaarg.in_reg1378:                                 ; preds = %sw.bb1373
  %711 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1374, i32 0, i32 3
  %reg_save_area1379 = load i8*, i8** %711, align 8
  %712 = getelementptr i8, i8* %reg_save_area1379, i32 %gp_offset1376
  %713 = bitcast i8* %712 to i64*
  %714 = add i32 %gp_offset1376, 8
  store i32 %714, i32* %gp_offset_p1375, align 8
  br label %vaarg.end1384

vaarg.in_mem1380:                                 ; preds = %sw.bb1373
  %overflow_arg_area_p1381 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1374, i32 0, i32 2
  %overflow_arg_area1382 = load i8*, i8** %overflow_arg_area_p1381, align 8
  %715 = bitcast i8* %overflow_arg_area1382 to i64*
  %overflow_arg_area.next1383 = getelementptr i8, i8* %overflow_arg_area1382, i32 8
  store i8* %overflow_arg_area.next1383, i8** %overflow_arg_area_p1381, align 8
  br label %vaarg.end1384

vaarg.end1384:                                    ; preds = %vaarg.in_mem1380, %vaarg.in_reg1378
  %vaarg.addr1385 = phi i64* [ %713, %vaarg.in_reg1378 ], [ %715, %vaarg.in_mem1380 ]
  %716 = load i64, i64* %vaarg.addr1385, align 8
  store i64 %716, i64* %iv, align 8
  br label %sw.epilog1426

sw.bb1386:                                        ; preds = %if.then1328
  %717 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1387 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %717, i64 0, i64 0
  %gp_offset_p1388 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1387, i32 0, i32 0
  %gp_offset1389 = load i32, i32* %gp_offset_p1388, align 8
  %fits_in_gp1390 = icmp ule i32 %gp_offset1389, 40
  br i1 %fits_in_gp1390, label %vaarg.in_reg1391, label %vaarg.in_mem1393

vaarg.in_reg1391:                                 ; preds = %sw.bb1386
  %718 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1387, i32 0, i32 3
  %reg_save_area1392 = load i8*, i8** %718, align 8
  %719 = getelementptr i8, i8* %reg_save_area1392, i32 %gp_offset1389
  %720 = bitcast i8* %719 to i64*
  %721 = add i32 %gp_offset1389, 8
  store i32 %721, i32* %gp_offset_p1388, align 8
  br label %vaarg.end1397

vaarg.in_mem1393:                                 ; preds = %sw.bb1386
  %overflow_arg_area_p1394 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1387, i32 0, i32 2
  %overflow_arg_area1395 = load i8*, i8** %overflow_arg_area_p1394, align 8
  %722 = bitcast i8* %overflow_arg_area1395 to i64*
  %overflow_arg_area.next1396 = getelementptr i8, i8* %overflow_arg_area1395, i32 8
  store i8* %overflow_arg_area.next1396, i8** %overflow_arg_area_p1394, align 8
  br label %vaarg.end1397

vaarg.end1397:                                    ; preds = %vaarg.in_mem1393, %vaarg.in_reg1391
  %vaarg.addr1398 = phi i64* [ %720, %vaarg.in_reg1391 ], [ %722, %vaarg.in_mem1393 ]
  %723 = load i64, i64* %vaarg.addr1398, align 8
  store i64 %723, i64* %iv, align 8
  br label %sw.epilog1426

sw.default1399:                                   ; preds = %if.then1328
  %724 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1400 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %724, i64 0, i64 0
  %gp_offset_p1401 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1400, i32 0, i32 0
  %gp_offset1402 = load i32, i32* %gp_offset_p1401, align 8
  %fits_in_gp1403 = icmp ule i32 %gp_offset1402, 40
  br i1 %fits_in_gp1403, label %vaarg.in_reg1404, label %vaarg.in_mem1406

vaarg.in_reg1404:                                 ; preds = %sw.default1399
  %725 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1400, i32 0, i32 3
  %reg_save_area1405 = load i8*, i8** %725, align 8
  %726 = getelementptr i8, i8* %reg_save_area1405, i32 %gp_offset1402
  %727 = bitcast i8* %726 to i32*
  %728 = add i32 %gp_offset1402, 8
  store i32 %728, i32* %gp_offset_p1401, align 8
  br label %vaarg.end1410

vaarg.in_mem1406:                                 ; preds = %sw.default1399
  %overflow_arg_area_p1407 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1400, i32 0, i32 2
  %overflow_arg_area1408 = load i8*, i8** %overflow_arg_area_p1407, align 8
  %729 = bitcast i8* %overflow_arg_area1408 to i32*
  %overflow_arg_area.next1409 = getelementptr i8, i8* %overflow_arg_area1408, i32 8
  store i8* %overflow_arg_area.next1409, i8** %overflow_arg_area_p1407, align 8
  br label %vaarg.end1410

vaarg.end1410:                                    ; preds = %vaarg.in_mem1406, %vaarg.in_reg1404
  %vaarg.addr1411 = phi i32* [ %727, %vaarg.in_reg1404 ], [ %729, %vaarg.in_mem1406 ]
  %730 = load i32, i32* %vaarg.addr1411, align 4
  %conv1412 = sext i32 %730 to i64
  store i64 %conv1412, i64* %iv, align 8
  br label %sw.epilog1426

sw.bb1413:                                        ; preds = %if.then1328
  %731 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1414 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %731, i64 0, i64 0
  %gp_offset_p1415 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1414, i32 0, i32 0
  %gp_offset1416 = load i32, i32* %gp_offset_p1415, align 8
  %fits_in_gp1417 = icmp ule i32 %gp_offset1416, 40
  br i1 %fits_in_gp1417, label %vaarg.in_reg1418, label %vaarg.in_mem1420

vaarg.in_reg1418:                                 ; preds = %sw.bb1413
  %732 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1414, i32 0, i32 3
  %reg_save_area1419 = load i8*, i8** %732, align 8
  %733 = getelementptr i8, i8* %reg_save_area1419, i32 %gp_offset1416
  %734 = bitcast i8* %733 to i64*
  %735 = add i32 %gp_offset1416, 8
  store i32 %735, i32* %gp_offset_p1415, align 8
  br label %vaarg.end1424

vaarg.in_mem1420:                                 ; preds = %sw.bb1413
  %overflow_arg_area_p1421 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1414, i32 0, i32 2
  %overflow_arg_area1422 = load i8*, i8** %overflow_arg_area_p1421, align 8
  %736 = bitcast i8* %overflow_arg_area1422 to i64*
  %overflow_arg_area.next1423 = getelementptr i8, i8* %overflow_arg_area1422, i32 8
  store i8* %overflow_arg_area.next1423, i8** %overflow_arg_area_p1421, align 8
  br label %vaarg.end1424

vaarg.end1424:                                    ; preds = %vaarg.in_mem1420, %vaarg.in_reg1418
  %vaarg.addr1425 = phi i64* [ %734, %vaarg.in_reg1418 ], [ %736, %vaarg.in_mem1420 ]
  %737 = load i64, i64* %vaarg.addr1425, align 8
  store i64 %737, i64* %iv, align 8
  br label %sw.epilog1426

sw.epilog1426:                                    ; preds = %vaarg.end1424, %vaarg.end1410, %vaarg.end1397, %vaarg.end1384, %vaarg.end1371, %vaarg.end1356, %vaarg.end1341
  br label %if.end1451

if.else1427:                                      ; preds = %if.else1326
  %738 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1428 = getelementptr inbounds %struct.sv, %struct.sv* %738, i32 0, i32 2
  %739 = load i32, i32* %sv_flags1428, align 4
  %and1429 = and i32 %739, 256
  %tobool1430 = icmp ne i32 %and1429, 0
  br i1 %tobool1430, label %cond.true1431, label %cond.false1435

cond.true1431:                                    ; preds = %if.else1427
  %740 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any1432 = getelementptr inbounds %struct.sv, %struct.sv* %740, i32 0, i32 0
  %741 = load i8*, i8** %sv_any1432, align 8
  %742 = bitcast i8* %741 to %struct.xpviv*
  %xiv_u1433 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %742, i32 0, i32 4
  %xivu_iv1434 = bitcast %union._xivu* %xiv_u1433 to i64*
  %743 = load i64, i64* %xivu_iv1434, align 8
  br label %cond.end1437

cond.false1435:                                   ; preds = %if.else1427
  %744 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call1436 = call i64 @Perl_sv_2iv_flags(%struct.sv* %744, i32 0)
  br label %cond.end1437

cond.end1437:                                     ; preds = %cond.false1435, %cond.true1431
  %cond1438 = phi i64 [ %743, %cond.true1431 ], [ %call1436, %cond.false1435 ]
  store i64 %cond1438, i64* %tiv, align 8
  %745 = load i8, i8* %intsize, align 1
  %conv1439 = sext i8 %745 to i32
  switch i32 %conv1439, label %sw.default1448 [
    i32 99, label %sw.bb1440
    i32 104, label %sw.bb1443
    i32 108, label %sw.bb1446
    i32 86, label %sw.bb1447
    i32 113, label %sw.bb1449
  ]

sw.bb1440:                                        ; preds = %cond.end1437
  %746 = load i64, i64* %tiv, align 8
  %conv1441 = trunc i64 %746 to i8
  %conv1442 = sext i8 %conv1441 to i64
  store i64 %conv1442, i64* %iv, align 8
  br label %sw.epilog1450

sw.bb1443:                                        ; preds = %cond.end1437
  %747 = load i64, i64* %tiv, align 8
  %conv1444 = trunc i64 %747 to i16
  %conv1445 = sext i16 %conv1444 to i64
  store i64 %conv1445, i64* %iv, align 8
  br label %sw.epilog1450

sw.bb1446:                                        ; preds = %cond.end1437
  %748 = load i64, i64* %tiv, align 8
  store i64 %748, i64* %iv, align 8
  br label %sw.epilog1450

sw.bb1447:                                        ; preds = %cond.end1437
  br label %sw.default1448

sw.default1448:                                   ; preds = %cond.end1437, %sw.bb1447
  %749 = load i64, i64* %tiv, align 8
  store i64 %749, i64* %iv, align 8
  br label %sw.epilog1450

sw.bb1449:                                        ; preds = %cond.end1437
  %750 = load i64, i64* %tiv, align 8
  store i64 %750, i64* %iv, align 8
  br label %sw.epilog1450

sw.epilog1450:                                    ; preds = %sw.bb1449, %sw.default1448, %sw.bb1446, %sw.bb1443, %sw.bb1440
  br label %if.end1451

if.end1451:                                       ; preds = %sw.epilog1450, %sw.epilog1426
  br label %if.end1452

if.end1452:                                       ; preds = %if.end1451, %if.end1325
  %751 = load i8, i8* %vectorize, align 1
  %tobool1453 = trunc i8 %751 to i1
  br i1 %tobool1453, label %if.end1474, label %if.then1454

if.then1454:                                      ; preds = %if.end1452
  %752 = load i64, i64* %iv, align 8
  %cmp1455 = icmp sge i64 %752, 0
  br i1 %cmp1455, label %if.then1457, label %if.else1463

if.then1457:                                      ; preds = %if.then1454
  %753 = load i64, i64* %iv, align 8
  store i64 %753, i64* %uv, align 8
  %754 = load i8, i8* %plus, align 1
  %tobool1458 = icmp ne i8 %754, 0
  br i1 %tobool1458, label %if.then1459, label %if.end1462

if.then1459:                                      ; preds = %if.then1457
  %755 = load i8, i8* %plus, align 1
  %756 = load i64, i64* %esignlen, align 8
  %inc1460 = add i64 %756, 1
  store i64 %inc1460, i64* %esignlen, align 8
  %arrayidx1461 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i64 0, i64 %756
  store i8 %755, i8* %arrayidx1461, align 1
  br label %if.end1462

if.end1462:                                       ; preds = %if.then1459, %if.then1457
  br label %if.end1473

if.else1463:                                      ; preds = %if.then1454
  %757 = load i64, i64* %iv, align 8
  %cmp1464 = icmp eq i64 %757, -9223372036854775808
  br i1 %cmp1464, label %cond.true1466, label %cond.false1467

cond.true1466:                                    ; preds = %if.else1463
  %758 = load i64, i64* %iv, align 8
  br label %cond.end1469

cond.false1467:                                   ; preds = %if.else1463
  %759 = load i64, i64* %iv, align 8
  %sub1468 = sub nsw i64 0, %759
  br label %cond.end1469

cond.end1469:                                     ; preds = %cond.false1467, %cond.true1466
  %cond1470 = phi i64 [ %758, %cond.true1466 ], [ %sub1468, %cond.false1467 ]
  store i64 %cond1470, i64* %uv, align 8
  %760 = load i64, i64* %esignlen, align 8
  %inc1471 = add i64 %760, 1
  store i64 %inc1471, i64* %esignlen, align 8
  %arrayidx1472 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i64 0, i64 %760
  store i8 45, i8* %arrayidx1472, align 1
  br label %if.end1473

if.end1473:                                       ; preds = %cond.end1469, %if.end1462
  br label %if.end1474

if.end1474:                                       ; preds = %if.end1473, %if.end1452
  store i32 10, i32* %base, align 4
  br label %integer

sw.bb1475:                                        ; preds = %if.end1057
  store i8 113, i8* %intsize, align 1
  br label %sw.bb1476

sw.bb1476:                                        ; preds = %if.end1057, %sw.bb1475
  store i32 10, i32* %base, align 4
  br label %uns_integer

sw.bb1477:                                        ; preds = %if.end1057, %if.end1057
  store i32 2, i32* %base, align 4
  br label %uns_integer

sw.bb1478:                                        ; preds = %if.end1057
  store i8 113, i8* %intsize, align 1
  br label %sw.bb1479

sw.bb1479:                                        ; preds = %if.end1057, %sw.bb1478
  store i32 8, i32* %base, align 4
  br label %uns_integer

sw.bb1480:                                        ; preds = %if.end1057, %if.end1057
  store i32 16, i32* %base, align 4
  br label %uns_integer

uns_integer:                                      ; preds = %sw.bb1480, %sw.bb1479, %sw.bb1477, %sw.bb1476
  %761 = load i8, i8* %infnan, align 1
  %tobool1481 = trunc i8 %761 to i1
  br i1 %tobool1481, label %if.then1482, label %if.end1483

if.then1482:                                      ; preds = %uns_integer
  br label %floating_point

if.end1483:                                       ; preds = %uns_integer
  %762 = load i8, i8* %vectorize, align 1
  %tobool1484 = trunc i8 %762 to i1
  br i1 %tobool1484, label %if.then1485, label %if.else1498

if.then1485:                                      ; preds = %if.end1483
  br label %vector

vector:                                           ; preds = %if.then2646, %if.then1485
  %763 = load i64, i64* %veclen, align 8
  %tobool1487 = icmp ne i64 %763, 0
  br i1 %tobool1487, label %if.end1489, label %if.then1488

if.then1488:                                      ; preds = %vector
  br label %for.inc2648

if.end1489:                                       ; preds = %vector
  %764 = load i8, i8* %vec_utf8, align 1
  %tobool1490 = trunc i8 %764 to i1
  br i1 %tobool1490, label %if.then1491, label %if.else1493

if.then1491:                                      ; preds = %if.end1489
  %765 = load i8*, i8** %vecstr, align 8
  %766 = load i64, i64* %veclen, align 8
  %call1492 = call i64 @Perl_utf8n_to_uvchr(i8* %765, i64 %766, i64* %ulen1486, i32 1)
  store i64 %call1492, i64* %uv, align 8
  br label %if.end1495

if.else1493:                                      ; preds = %if.end1489
  %767 = load i8*, i8** %vecstr, align 8
  %768 = load i8, i8* %767, align 1
  %conv1494 = zext i8 %768 to i64
  store i64 %conv1494, i64* %uv, align 8
  store i64 1, i64* %ulen1486, align 8
  br label %if.end1495

if.end1495:                                       ; preds = %if.else1493, %if.then1491
  %769 = load i64, i64* %ulen1486, align 8
  %770 = load i8*, i8** %vecstr, align 8
  %add.ptr1496 = getelementptr inbounds i8, i8* %770, i64 %769
  store i8* %add.ptr1496, i8** %vecstr, align 8
  %771 = load i64, i64* %ulen1486, align 8
  %772 = load i64, i64* %veclen, align 8
  %sub1497 = sub i64 %772, %771
  store i64 %sub1497, i64* %veclen, align 8
  br label %if.end1622

if.else1498:                                      ; preds = %if.end1483
  %773 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool1499 = icmp ne [1 x %struct.__va_list_tag]* %773, null
  br i1 %tobool1499, label %if.then1500, label %if.else1599

if.then1500:                                      ; preds = %if.else1498
  %774 = load i8, i8* %intsize, align 1
  %conv1501 = sext i8 %774 to i32
  switch i32 %conv1501, label %sw.default1571 [
    i32 99, label %sw.bb1502
    i32 104, label %sw.bb1517
    i32 108, label %sw.bb1532
    i32 86, label %sw.bb1545
    i32 122, label %sw.bb1558
    i32 113, label %sw.bb1585
  ]

sw.bb1502:                                        ; preds = %if.then1500
  %775 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1503 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %775, i64 0, i64 0
  %gp_offset_p1504 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1503, i32 0, i32 0
  %gp_offset1505 = load i32, i32* %gp_offset_p1504, align 8
  %fits_in_gp1506 = icmp ule i32 %gp_offset1505, 40
  br i1 %fits_in_gp1506, label %vaarg.in_reg1507, label %vaarg.in_mem1509

vaarg.in_reg1507:                                 ; preds = %sw.bb1502
  %776 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1503, i32 0, i32 3
  %reg_save_area1508 = load i8*, i8** %776, align 8
  %777 = getelementptr i8, i8* %reg_save_area1508, i32 %gp_offset1505
  %778 = bitcast i8* %777 to i32*
  %779 = add i32 %gp_offset1505, 8
  store i32 %779, i32* %gp_offset_p1504, align 8
  br label %vaarg.end1513

vaarg.in_mem1509:                                 ; preds = %sw.bb1502
  %overflow_arg_area_p1510 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1503, i32 0, i32 2
  %overflow_arg_area1511 = load i8*, i8** %overflow_arg_area_p1510, align 8
  %780 = bitcast i8* %overflow_arg_area1511 to i32*
  %overflow_arg_area.next1512 = getelementptr i8, i8* %overflow_arg_area1511, i32 8
  store i8* %overflow_arg_area.next1512, i8** %overflow_arg_area_p1510, align 8
  br label %vaarg.end1513

vaarg.end1513:                                    ; preds = %vaarg.in_mem1509, %vaarg.in_reg1507
  %vaarg.addr1514 = phi i32* [ %778, %vaarg.in_reg1507 ], [ %780, %vaarg.in_mem1509 ]
  %781 = load i32, i32* %vaarg.addr1514, align 4
  %conv1515 = trunc i32 %781 to i8
  %conv1516 = zext i8 %conv1515 to i64
  store i64 %conv1516, i64* %uv, align 8
  br label %sw.epilog1598

sw.bb1517:                                        ; preds = %if.then1500
  %782 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1518 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %782, i64 0, i64 0
  %gp_offset_p1519 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1518, i32 0, i32 0
  %gp_offset1520 = load i32, i32* %gp_offset_p1519, align 8
  %fits_in_gp1521 = icmp ule i32 %gp_offset1520, 40
  br i1 %fits_in_gp1521, label %vaarg.in_reg1522, label %vaarg.in_mem1524

vaarg.in_reg1522:                                 ; preds = %sw.bb1517
  %783 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1518, i32 0, i32 3
  %reg_save_area1523 = load i8*, i8** %783, align 8
  %784 = getelementptr i8, i8* %reg_save_area1523, i32 %gp_offset1520
  %785 = bitcast i8* %784 to i32*
  %786 = add i32 %gp_offset1520, 8
  store i32 %786, i32* %gp_offset_p1519, align 8
  br label %vaarg.end1528

vaarg.in_mem1524:                                 ; preds = %sw.bb1517
  %overflow_arg_area_p1525 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1518, i32 0, i32 2
  %overflow_arg_area1526 = load i8*, i8** %overflow_arg_area_p1525, align 8
  %787 = bitcast i8* %overflow_arg_area1526 to i32*
  %overflow_arg_area.next1527 = getelementptr i8, i8* %overflow_arg_area1526, i32 8
  store i8* %overflow_arg_area.next1527, i8** %overflow_arg_area_p1525, align 8
  br label %vaarg.end1528

vaarg.end1528:                                    ; preds = %vaarg.in_mem1524, %vaarg.in_reg1522
  %vaarg.addr1529 = phi i32* [ %785, %vaarg.in_reg1522 ], [ %787, %vaarg.in_mem1524 ]
  %788 = load i32, i32* %vaarg.addr1529, align 4
  %conv1530 = trunc i32 %788 to i16
  %conv1531 = zext i16 %conv1530 to i64
  store i64 %conv1531, i64* %uv, align 8
  br label %sw.epilog1598

sw.bb1532:                                        ; preds = %if.then1500
  %789 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1533 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %789, i64 0, i64 0
  %gp_offset_p1534 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1533, i32 0, i32 0
  %gp_offset1535 = load i32, i32* %gp_offset_p1534, align 8
  %fits_in_gp1536 = icmp ule i32 %gp_offset1535, 40
  br i1 %fits_in_gp1536, label %vaarg.in_reg1537, label %vaarg.in_mem1539

vaarg.in_reg1537:                                 ; preds = %sw.bb1532
  %790 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1533, i32 0, i32 3
  %reg_save_area1538 = load i8*, i8** %790, align 8
  %791 = getelementptr i8, i8* %reg_save_area1538, i32 %gp_offset1535
  %792 = bitcast i8* %791 to i64*
  %793 = add i32 %gp_offset1535, 8
  store i32 %793, i32* %gp_offset_p1534, align 8
  br label %vaarg.end1543

vaarg.in_mem1539:                                 ; preds = %sw.bb1532
  %overflow_arg_area_p1540 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1533, i32 0, i32 2
  %overflow_arg_area1541 = load i8*, i8** %overflow_arg_area_p1540, align 8
  %794 = bitcast i8* %overflow_arg_area1541 to i64*
  %overflow_arg_area.next1542 = getelementptr i8, i8* %overflow_arg_area1541, i32 8
  store i8* %overflow_arg_area.next1542, i8** %overflow_arg_area_p1540, align 8
  br label %vaarg.end1543

vaarg.end1543:                                    ; preds = %vaarg.in_mem1539, %vaarg.in_reg1537
  %vaarg.addr1544 = phi i64* [ %792, %vaarg.in_reg1537 ], [ %794, %vaarg.in_mem1539 ]
  %795 = load i64, i64* %vaarg.addr1544, align 8
  store i64 %795, i64* %uv, align 8
  br label %sw.epilog1598

sw.bb1545:                                        ; preds = %if.then1500
  %796 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1546 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %796, i64 0, i64 0
  %gp_offset_p1547 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1546, i32 0, i32 0
  %gp_offset1548 = load i32, i32* %gp_offset_p1547, align 8
  %fits_in_gp1549 = icmp ule i32 %gp_offset1548, 40
  br i1 %fits_in_gp1549, label %vaarg.in_reg1550, label %vaarg.in_mem1552

vaarg.in_reg1550:                                 ; preds = %sw.bb1545
  %797 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1546, i32 0, i32 3
  %reg_save_area1551 = load i8*, i8** %797, align 8
  %798 = getelementptr i8, i8* %reg_save_area1551, i32 %gp_offset1548
  %799 = bitcast i8* %798 to i64*
  %800 = add i32 %gp_offset1548, 8
  store i32 %800, i32* %gp_offset_p1547, align 8
  br label %vaarg.end1556

vaarg.in_mem1552:                                 ; preds = %sw.bb1545
  %overflow_arg_area_p1553 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1546, i32 0, i32 2
  %overflow_arg_area1554 = load i8*, i8** %overflow_arg_area_p1553, align 8
  %801 = bitcast i8* %overflow_arg_area1554 to i64*
  %overflow_arg_area.next1555 = getelementptr i8, i8* %overflow_arg_area1554, i32 8
  store i8* %overflow_arg_area.next1555, i8** %overflow_arg_area_p1553, align 8
  br label %vaarg.end1556

vaarg.end1556:                                    ; preds = %vaarg.in_mem1552, %vaarg.in_reg1550
  %vaarg.addr1557 = phi i64* [ %799, %vaarg.in_reg1550 ], [ %801, %vaarg.in_mem1552 ]
  %802 = load i64, i64* %vaarg.addr1557, align 8
  store i64 %802, i64* %uv, align 8
  br label %sw.epilog1598

sw.bb1558:                                        ; preds = %if.then1500
  %803 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1559 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %803, i64 0, i64 0
  %gp_offset_p1560 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1559, i32 0, i32 0
  %gp_offset1561 = load i32, i32* %gp_offset_p1560, align 8
  %fits_in_gp1562 = icmp ule i32 %gp_offset1561, 40
  br i1 %fits_in_gp1562, label %vaarg.in_reg1563, label %vaarg.in_mem1565

vaarg.in_reg1563:                                 ; preds = %sw.bb1558
  %804 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1559, i32 0, i32 3
  %reg_save_area1564 = load i8*, i8** %804, align 8
  %805 = getelementptr i8, i8* %reg_save_area1564, i32 %gp_offset1561
  %806 = bitcast i8* %805 to i64*
  %807 = add i32 %gp_offset1561, 8
  store i32 %807, i32* %gp_offset_p1560, align 8
  br label %vaarg.end1569

vaarg.in_mem1565:                                 ; preds = %sw.bb1558
  %overflow_arg_area_p1566 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1559, i32 0, i32 2
  %overflow_arg_area1567 = load i8*, i8** %overflow_arg_area_p1566, align 8
  %808 = bitcast i8* %overflow_arg_area1567 to i64*
  %overflow_arg_area.next1568 = getelementptr i8, i8* %overflow_arg_area1567, i32 8
  store i8* %overflow_arg_area.next1568, i8** %overflow_arg_area_p1566, align 8
  br label %vaarg.end1569

vaarg.end1569:                                    ; preds = %vaarg.in_mem1565, %vaarg.in_reg1563
  %vaarg.addr1570 = phi i64* [ %806, %vaarg.in_reg1563 ], [ %808, %vaarg.in_mem1565 ]
  %809 = load i64, i64* %vaarg.addr1570, align 8
  store i64 %809, i64* %uv, align 8
  br label %sw.epilog1598

sw.default1571:                                   ; preds = %if.then1500
  %810 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1572 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %810, i64 0, i64 0
  %gp_offset_p1573 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1572, i32 0, i32 0
  %gp_offset1574 = load i32, i32* %gp_offset_p1573, align 8
  %fits_in_gp1575 = icmp ule i32 %gp_offset1574, 40
  br i1 %fits_in_gp1575, label %vaarg.in_reg1576, label %vaarg.in_mem1578

vaarg.in_reg1576:                                 ; preds = %sw.default1571
  %811 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1572, i32 0, i32 3
  %reg_save_area1577 = load i8*, i8** %811, align 8
  %812 = getelementptr i8, i8* %reg_save_area1577, i32 %gp_offset1574
  %813 = bitcast i8* %812 to i32*
  %814 = add i32 %gp_offset1574, 8
  store i32 %814, i32* %gp_offset_p1573, align 8
  br label %vaarg.end1582

vaarg.in_mem1578:                                 ; preds = %sw.default1571
  %overflow_arg_area_p1579 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1572, i32 0, i32 2
  %overflow_arg_area1580 = load i8*, i8** %overflow_arg_area_p1579, align 8
  %815 = bitcast i8* %overflow_arg_area1580 to i32*
  %overflow_arg_area.next1581 = getelementptr i8, i8* %overflow_arg_area1580, i32 8
  store i8* %overflow_arg_area.next1581, i8** %overflow_arg_area_p1579, align 8
  br label %vaarg.end1582

vaarg.end1582:                                    ; preds = %vaarg.in_mem1578, %vaarg.in_reg1576
  %vaarg.addr1583 = phi i32* [ %813, %vaarg.in_reg1576 ], [ %815, %vaarg.in_mem1578 ]
  %816 = load i32, i32* %vaarg.addr1583, align 4
  %conv1584 = zext i32 %816 to i64
  store i64 %conv1584, i64* %uv, align 8
  br label %sw.epilog1598

sw.bb1585:                                        ; preds = %if.then1500
  %817 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1586 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %817, i64 0, i64 0
  %gp_offset_p1587 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1586, i32 0, i32 0
  %gp_offset1588 = load i32, i32* %gp_offset_p1587, align 8
  %fits_in_gp1589 = icmp ule i32 %gp_offset1588, 40
  br i1 %fits_in_gp1589, label %vaarg.in_reg1590, label %vaarg.in_mem1592

vaarg.in_reg1590:                                 ; preds = %sw.bb1585
  %818 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1586, i32 0, i32 3
  %reg_save_area1591 = load i8*, i8** %818, align 8
  %819 = getelementptr i8, i8* %reg_save_area1591, i32 %gp_offset1588
  %820 = bitcast i8* %819 to i64*
  %821 = add i32 %gp_offset1588, 8
  store i32 %821, i32* %gp_offset_p1587, align 8
  br label %vaarg.end1596

vaarg.in_mem1592:                                 ; preds = %sw.bb1585
  %overflow_arg_area_p1593 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1586, i32 0, i32 2
  %overflow_arg_area1594 = load i8*, i8** %overflow_arg_area_p1593, align 8
  %822 = bitcast i8* %overflow_arg_area1594 to i64*
  %overflow_arg_area.next1595 = getelementptr i8, i8* %overflow_arg_area1594, i32 8
  store i8* %overflow_arg_area.next1595, i8** %overflow_arg_area_p1593, align 8
  br label %vaarg.end1596

vaarg.end1596:                                    ; preds = %vaarg.in_mem1592, %vaarg.in_reg1590
  %vaarg.addr1597 = phi i64* [ %820, %vaarg.in_reg1590 ], [ %822, %vaarg.in_mem1592 ]
  %823 = load i64, i64* %vaarg.addr1597, align 8
  store i64 %823, i64* %uv, align 8
  br label %sw.epilog1598

sw.epilog1598:                                    ; preds = %vaarg.end1596, %vaarg.end1582, %vaarg.end1569, %vaarg.end1556, %vaarg.end1543, %vaarg.end1528, %vaarg.end1513
  br label %if.end1621

if.else1599:                                      ; preds = %if.else1498
  %824 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1600 = getelementptr inbounds %struct.sv, %struct.sv* %824, i32 0, i32 2
  %825 = load i32, i32* %sv_flags1600, align 4
  %and1601 = and i32 %825, 256
  %tobool1602 = icmp ne i32 %and1601, 0
  br i1 %tobool1602, label %cond.true1603, label %cond.false1605

cond.true1603:                                    ; preds = %if.else1599
  %826 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any1604 = getelementptr inbounds %struct.sv, %struct.sv* %826, i32 0, i32 0
  %827 = load i8*, i8** %sv_any1604, align 8
  %828 = bitcast i8* %827 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %828, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %829 = load i64, i64* %xivu_uv, align 8
  br label %cond.end1607

cond.false1605:                                   ; preds = %if.else1599
  %830 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call1606 = call i64 @Perl_sv_2uv_flags(%struct.sv* %830, i32 0)
  br label %cond.end1607

cond.end1607:                                     ; preds = %cond.false1605, %cond.true1603
  %cond1608 = phi i64 [ %829, %cond.true1603 ], [ %call1606, %cond.false1605 ]
  store i64 %cond1608, i64* %tuv, align 8
  %831 = load i8, i8* %intsize, align 1
  %conv1609 = sext i8 %831 to i32
  switch i32 %conv1609, label %sw.default1618 [
    i32 99, label %sw.bb1610
    i32 104, label %sw.bb1613
    i32 108, label %sw.bb1616
    i32 86, label %sw.bb1617
    i32 113, label %sw.bb1619
  ]

sw.bb1610:                                        ; preds = %cond.end1607
  %832 = load i64, i64* %tuv, align 8
  %conv1611 = trunc i64 %832 to i8
  %conv1612 = zext i8 %conv1611 to i64
  store i64 %conv1612, i64* %uv, align 8
  br label %sw.epilog1620

sw.bb1613:                                        ; preds = %cond.end1607
  %833 = load i64, i64* %tuv, align 8
  %conv1614 = trunc i64 %833 to i16
  %conv1615 = zext i16 %conv1614 to i64
  store i64 %conv1615, i64* %uv, align 8
  br label %sw.epilog1620

sw.bb1616:                                        ; preds = %cond.end1607
  %834 = load i64, i64* %tuv, align 8
  store i64 %834, i64* %uv, align 8
  br label %sw.epilog1620

sw.bb1617:                                        ; preds = %cond.end1607
  br label %sw.default1618

sw.default1618:                                   ; preds = %cond.end1607, %sw.bb1617
  %835 = load i64, i64* %tuv, align 8
  store i64 %835, i64* %uv, align 8
  br label %sw.epilog1620

sw.bb1619:                                        ; preds = %cond.end1607
  %836 = load i64, i64* %tuv, align 8
  store i64 %836, i64* %uv, align 8
  br label %sw.epilog1620

sw.epilog1620:                                    ; preds = %sw.bb1619, %sw.default1618, %sw.bb1616, %sw.bb1613, %sw.bb1610
  br label %if.end1621

if.end1621:                                       ; preds = %sw.epilog1620, %sw.epilog1598
  br label %if.end1622

if.end1622:                                       ; preds = %if.end1621, %if.end1495
  br label %integer

integer:                                          ; preds = %if.end1622, %if.end1474, %cond.end1300
  %arraydecay1623 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i64 0, i64 0
  %add.ptr1624 = getelementptr inbounds i8, i8* %arraydecay1623, i64 127
  store i8* %add.ptr1624, i8** %ptr, align 8
  %837 = load i64, i64* %uv, align 8
  %tobool1625 = icmp ne i64 %837, 0
  br i1 %tobool1625, label %cond.true1626, label %cond.false1629

cond.true1626:                                    ; preds = %integer
  %838 = load i8, i8* %alt, align 1
  %tobool1627 = trunc i8 %838 to i1
  %conv1628 = zext i1 %tobool1627 to i32
  br label %cond.end1630

cond.false1629:                                   ; preds = %integer
  br label %cond.end1630

cond.end1630:                                     ; preds = %cond.false1629, %cond.true1626
  %cond1631 = phi i32 [ %conv1628, %cond.true1626 ], [ 0, %cond.false1629 ]
  %tobool1632 = icmp ne i32 %cond1631, 0
  %frombool1633 = zext i1 %tobool1632 to i8
  store i8 %frombool1633, i8* %tempalt, align 1
  store i64 0, i64* %zeros, align 8
  %839 = load i32, i32* %base, align 4
  switch i32 %839, label %sw.default1692 [
    i32 16, label %sw.bb1634
    i32 8, label %sw.bb1654
    i32 2, label %sw.bb1674
  ]

sw.bb1634:                                        ; preds = %cond.end1630
  %840 = load i8, i8* %c, align 1
  %conv1635 = sext i8 %840 to i32
  %cmp1636 = icmp eq i32 %conv1635, 88
  %841 = zext i1 %cmp1636 to i64
  %cond1638 = select i1 %cmp1636, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_hexdigit, i64 0, i64 16), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_hexdigit, i64 0, i64 0)
  store i8* %cond1638, i8** %p, align 8
  br label %do.body1639

do.body1639:                                      ; preds = %do.cond, %sw.bb1634
  %842 = load i64, i64* %uv, align 8
  %and1640 = and i64 %842, 15
  %conv1641 = trunc i64 %and1640 to i32
  store i32 %conv1641, i32* %dig, align 4
  %843 = load i8*, i8** %p, align 8
  %844 = load i32, i32* %dig, align 4
  %idxprom1642 = zext i32 %844 to i64
  %arrayidx1643 = getelementptr inbounds i8, i8* %843, i64 %idxprom1642
  %845 = load i8, i8* %arrayidx1643, align 1
  %846 = load i8*, i8** %ptr, align 8
  %incdec.ptr1644 = getelementptr inbounds i8, i8* %846, i32 -1
  store i8* %incdec.ptr1644, i8** %ptr, align 8
  store i8 %845, i8* %incdec.ptr1644, align 1
  br label %do.cond

do.cond:                                          ; preds = %do.body1639
  %847 = load i64, i64* %uv, align 8
  %shr = lshr i64 %847, 4
  store i64 %shr, i64* %uv, align 8
  %tobool1645 = icmp ne i64 %shr, 0
  br i1 %tobool1645, label %do.body1639, label %do.end1646

do.end1646:                                       ; preds = %do.cond
  %848 = load i8, i8* %tempalt, align 1
  %tobool1647 = trunc i8 %848 to i1
  br i1 %tobool1647, label %if.then1648, label %if.end1653

if.then1648:                                      ; preds = %do.end1646
  %849 = load i64, i64* %esignlen, align 8
  %inc1649 = add i64 %849, 1
  store i64 %inc1649, i64* %esignlen, align 8
  %arrayidx1650 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i64 0, i64 %849
  store i8 48, i8* %arrayidx1650, align 1
  %850 = load i8, i8* %c, align 1
  %851 = load i64, i64* %esignlen, align 8
  %inc1651 = add i64 %851, 1
  store i64 %inc1651, i64* %esignlen, align 8
  %arrayidx1652 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i64 0, i64 %851
  store i8 %850, i8* %arrayidx1652, align 1
  br label %if.end1653

if.end1653:                                       ; preds = %if.then1648, %do.end1646
  br label %sw.epilog1703

sw.bb1654:                                        ; preds = %cond.end1630
  br label %do.body1655

do.body1655:                                      ; preds = %do.cond1661, %sw.bb1654
  %852 = load i64, i64* %uv, align 8
  %and1656 = and i64 %852, 7
  %conv1657 = trunc i64 %and1656 to i32
  store i32 %conv1657, i32* %dig, align 4
  %853 = load i32, i32* %dig, align 4
  %add1658 = add i32 48, %853
  %conv1659 = trunc i32 %add1658 to i8
  %854 = load i8*, i8** %ptr, align 8
  %incdec.ptr1660 = getelementptr inbounds i8, i8* %854, i32 -1
  store i8* %incdec.ptr1660, i8** %ptr, align 8
  store i8 %conv1659, i8* %incdec.ptr1660, align 1
  br label %do.cond1661

do.cond1661:                                      ; preds = %do.body1655
  %855 = load i64, i64* %uv, align 8
  %shr1662 = lshr i64 %855, 3
  store i64 %shr1662, i64* %uv, align 8
  %tobool1663 = icmp ne i64 %shr1662, 0
  br i1 %tobool1663, label %do.body1655, label %do.end1664

do.end1664:                                       ; preds = %do.cond1661
  %856 = load i8, i8* %alt, align 1
  %tobool1665 = trunc i8 %856 to i1
  br i1 %tobool1665, label %land.lhs.true1667, label %if.end1673

land.lhs.true1667:                                ; preds = %do.end1664
  %857 = load i8*, i8** %ptr, align 8
  %858 = load i8, i8* %857, align 1
  %conv1668 = sext i8 %858 to i32
  %cmp1669 = icmp ne i32 %conv1668, 48
  br i1 %cmp1669, label %if.then1671, label %if.end1673

if.then1671:                                      ; preds = %land.lhs.true1667
  %859 = load i8*, i8** %ptr, align 8
  %incdec.ptr1672 = getelementptr inbounds i8, i8* %859, i32 -1
  store i8* %incdec.ptr1672, i8** %ptr, align 8
  store i8 48, i8* %incdec.ptr1672, align 1
  br label %if.end1673

if.end1673:                                       ; preds = %if.then1671, %land.lhs.true1667, %do.end1664
  br label %sw.epilog1703

sw.bb1674:                                        ; preds = %cond.end1630
  br label %do.body1675

do.body1675:                                      ; preds = %do.cond1681, %sw.bb1674
  %860 = load i64, i64* %uv, align 8
  %and1676 = and i64 %860, 1
  %conv1677 = trunc i64 %and1676 to i32
  store i32 %conv1677, i32* %dig, align 4
  %861 = load i32, i32* %dig, align 4
  %add1678 = add i32 48, %861
  %conv1679 = trunc i32 %add1678 to i8
  %862 = load i8*, i8** %ptr, align 8
  %incdec.ptr1680 = getelementptr inbounds i8, i8* %862, i32 -1
  store i8* %incdec.ptr1680, i8** %ptr, align 8
  store i8 %conv1679, i8* %incdec.ptr1680, align 1
  br label %do.cond1681

do.cond1681:                                      ; preds = %do.body1675
  %863 = load i64, i64* %uv, align 8
  %shr1682 = lshr i64 %863, 1
  store i64 %shr1682, i64* %uv, align 8
  %tobool1683 = icmp ne i64 %shr1682, 0
  br i1 %tobool1683, label %do.body1675, label %do.end1684

do.end1684:                                       ; preds = %do.cond1681
  %864 = load i8, i8* %tempalt, align 1
  %tobool1685 = trunc i8 %864 to i1
  br i1 %tobool1685, label %if.then1686, label %if.end1691

if.then1686:                                      ; preds = %do.end1684
  %865 = load i64, i64* %esignlen, align 8
  %inc1687 = add i64 %865, 1
  store i64 %inc1687, i64* %esignlen, align 8
  %arrayidx1688 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i64 0, i64 %865
  store i8 48, i8* %arrayidx1688, align 1
  %866 = load i8, i8* %c, align 1
  %867 = load i64, i64* %esignlen, align 8
  %inc1689 = add i64 %867, 1
  store i64 %inc1689, i64* %esignlen, align 8
  %arrayidx1690 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i64 0, i64 %867
  store i8 %866, i8* %arrayidx1690, align 1
  br label %if.end1691

if.end1691:                                       ; preds = %if.then1686, %do.end1684
  br label %sw.epilog1703

sw.default1692:                                   ; preds = %cond.end1630
  br label %do.body1693

do.body1693:                                      ; preds = %do.cond1699, %sw.default1692
  %868 = load i64, i64* %uv, align 8
  %869 = load i32, i32* %base, align 4
  %conv1694 = zext i32 %869 to i64
  %rem = urem i64 %868, %conv1694
  %conv1695 = trunc i64 %rem to i32
  store i32 %conv1695, i32* %dig, align 4
  %870 = load i32, i32* %dig, align 4
  %add1696 = add i32 48, %870
  %conv1697 = trunc i32 %add1696 to i8
  %871 = load i8*, i8** %ptr, align 8
  %incdec.ptr1698 = getelementptr inbounds i8, i8* %871, i32 -1
  store i8* %incdec.ptr1698, i8** %ptr, align 8
  store i8 %conv1697, i8* %incdec.ptr1698, align 1
  br label %do.cond1699

do.cond1699:                                      ; preds = %do.body1693
  %872 = load i32, i32* %base, align 4
  %conv1700 = zext i32 %872 to i64
  %873 = load i64, i64* %uv, align 8
  %div = udiv i64 %873, %conv1700
  store i64 %div, i64* %uv, align 8
  %tobool1701 = icmp ne i64 %div, 0
  br i1 %tobool1701, label %do.body1693, label %do.end1702

do.end1702:                                       ; preds = %do.cond1699
  br label %sw.epilog1703

sw.epilog1703:                                    ; preds = %do.end1702, %if.end1691, %if.end1673, %if.end1653
  %arraydecay1704 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i64 0, i64 0
  %add.ptr1705 = getelementptr inbounds i8, i8* %arraydecay1704, i64 127
  %874 = load i8*, i8** %ptr, align 8
  %sub.ptr.lhs.cast1706 = ptrtoint i8* %add.ptr1705 to i64
  %sub.ptr.rhs.cast1707 = ptrtoint i8* %874 to i64
  %sub.ptr.sub1708 = sub i64 %sub.ptr.lhs.cast1706, %sub.ptr.rhs.cast1707
  store i64 %sub.ptr.sub1708, i64* %elen, align 8
  %875 = load i8*, i8** %ptr, align 8
  store i8* %875, i8** %eptr, align 8
  %876 = load i8, i8* %has_precis, align 1
  %tobool1709 = trunc i8 %876 to i1
  br i1 %tobool1709, label %if.then1710, label %if.end1739

if.then1710:                                      ; preds = %sw.epilog1703
  %877 = load i64, i64* %precis, align 8
  %878 = load i64, i64* %elen, align 8
  %cmp1711 = icmp ugt i64 %877, %878
  br i1 %cmp1711, label %if.then1713, label %if.else1715

if.then1713:                                      ; preds = %if.then1710
  %879 = load i64, i64* %precis, align 8
  %880 = load i64, i64* %elen, align 8
  %sub1714 = sub i64 %879, %880
  store i64 %sub1714, i64* %zeros, align 8
  br label %if.end1733

if.else1715:                                      ; preds = %if.then1710
  %881 = load i64, i64* %precis, align 8
  %cmp1716 = icmp eq i64 %881, 0
  br i1 %cmp1716, label %land.lhs.true1718, label %if.end1732

land.lhs.true1718:                                ; preds = %if.else1715
  %882 = load i64, i64* %elen, align 8
  %cmp1719 = icmp eq i64 %882, 1
  br i1 %cmp1719, label %land.lhs.true1721, label %if.end1732

land.lhs.true1721:                                ; preds = %land.lhs.true1718
  %883 = load i8*, i8** %eptr, align 8
  %884 = load i8, i8* %883, align 1
  %conv1722 = sext i8 %884 to i32
  %cmp1723 = icmp eq i32 %conv1722, 48
  br i1 %cmp1723, label %land.lhs.true1725, label %if.end1732

land.lhs.true1725:                                ; preds = %land.lhs.true1721
  %885 = load i32, i32* %base, align 4
  %cmp1726 = icmp eq i32 %885, 8
  br i1 %cmp1726, label %land.lhs.true1728, label %if.then1731

land.lhs.true1728:                                ; preds = %land.lhs.true1725
  %886 = load i8, i8* %alt, align 1
  %tobool1729 = trunc i8 %886 to i1
  br i1 %tobool1729, label %if.end1732, label %if.then1731

if.then1731:                                      ; preds = %land.lhs.true1728, %land.lhs.true1725
  store i64 0, i64* %elen, align 8
  br label %if.end1732

if.end1732:                                       ; preds = %if.then1731, %land.lhs.true1728, %land.lhs.true1721, %land.lhs.true1718, %if.else1715
  br label %if.end1733

if.end1733:                                       ; preds = %if.end1732, %if.then1713
  %887 = load i8, i8* %fill, align 1
  %conv1734 = sext i8 %887 to i32
  %cmp1735 = icmp eq i32 %conv1734, 48
  br i1 %cmp1735, label %if.then1737, label %if.end1738

if.then1737:                                      ; preds = %if.end1733
  store i8 32, i8* %fill, align 1
  br label %if.end1738

if.end1738:                                       ; preds = %if.then1737, %if.end1733
  br label %if.end1739

if.end1739:                                       ; preds = %if.end1738, %sw.epilog1703
  br label %sw.epilog2463

floating_point:                                   ; preds = %if.then1482, %if.then1305, %if.then1276
  br label %sw.bb1740

sw.bb1740:                                        ; preds = %if.end1057, %floating_point
  store i8 102, i8* %c, align 1
  br label %sw.bb1741

sw.bb1741:                                        ; preds = %if.end1057, %if.end1057, %if.end1057, %if.end1057, %if.end1057, %if.end1057, %if.end1057, %sw.bb1740
  %888 = load i8, i8* %vectorize, align 1
  %tobool1742 = trunc i8 %888 to i1
  br i1 %tobool1742, label %if.then1743, label %if.end1744

if.then1743:                                      ; preds = %sw.bb1741
  br label %unknown

if.end1744:                                       ; preds = %sw.bb1741
  %889 = load i8, i8* %intsize, align 1
  %conv1745 = sext i8 %889 to i32
  switch i32 %conv1745, label %sw.default1748 [
    i32 86, label %sw.bb1746
    i32 108, label %sw.bb1747
    i32 113, label %sw.bb1749
    i32 99, label %sw.bb1750
    i32 104, label %sw.bb1750
    i32 122, label %sw.bb1750
    i32 116, label %sw.bb1750
    i32 106, label %sw.bb1750
  ]

sw.bb1746:                                        ; preds = %if.end1744
  br label %sw.epilog1751

sw.bb1747:                                        ; preds = %if.end1744
  br label %sw.default1748

sw.default1748:                                   ; preds = %if.end1744, %sw.bb1747
  br label %sw.epilog1751

sw.bb1749:                                        ; preds = %if.end1744
  br label %sw.epilog1751

sw.bb1750:                                        ; preds = %if.end1744, %if.end1744, %if.end1744, %if.end1744, %if.end1744
  br label %unknown

sw.epilog1751:                                    ; preds = %sw.bb1749, %sw.default1748, %sw.bb1746
  %890 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool1752 = icmp ne [1 x %struct.__va_list_tag]* %890, null
  br i1 %tobool1752, label %if.then1753, label %if.else1775

if.then1753:                                      ; preds = %sw.epilog1751
  %891 = load i8, i8* %intsize, align 1
  %conv1754 = sext i8 %891 to i32
  %cmp1755 = icmp eq i32 %conv1754, 113
  br i1 %cmp1755, label %if.then1757, label %if.else1763

if.then1757:                                      ; preds = %if.then1753
  %892 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1758 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %892, i64 0, i64 0
  %overflow_arg_area_p1759 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1758, i32 0, i32 2
  %overflow_arg_area1760 = load i8*, i8** %overflow_arg_area_p1759, align 8
  %893 = ptrtoint i8* %overflow_arg_area1760 to i64
  %894 = add i64 %893, 15
  %895 = and i64 %894, -16
  %overflow_arg_area1760.aligned = inttoptr i64 %895 to i8*
  %896 = bitcast i8* %overflow_arg_area1760.aligned to x86_fp80*
  %overflow_arg_area.next1761 = getelementptr i8, i8* %overflow_arg_area1760.aligned, i32 16
  store i8* %overflow_arg_area.next1761, i8** %overflow_arg_area_p1759, align 8
  %897 = load x86_fp80, x86_fp80* %896, align 16
  store x86_fp80 %897, x86_fp80* %fv, align 16
  %898 = load x86_fp80, x86_fp80* %fv, align 16
  %conv1762 = fptrunc x86_fp80 %898 to double
  store double %conv1762, double* %nv283, align 8
  br label %if.end1774

if.else1763:                                      ; preds = %if.then1753
  %899 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay1764 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %899, i64 0, i64 0
  %fp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1764, i32 0, i32 1
  %fp_offset = load i32, i32* %fp_offset_p, align 4
  %fits_in_fp = icmp ule i32 %fp_offset, 160
  br i1 %fits_in_fp, label %vaarg.in_reg1765, label %vaarg.in_mem1767

vaarg.in_reg1765:                                 ; preds = %if.else1763
  %900 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1764, i32 0, i32 3
  %reg_save_area1766 = load i8*, i8** %900, align 8
  %901 = getelementptr i8, i8* %reg_save_area1766, i32 %fp_offset
  %902 = bitcast i8* %901 to double*
  %903 = add i32 %fp_offset, 16
  store i32 %903, i32* %fp_offset_p, align 4
  br label %vaarg.end1771

vaarg.in_mem1767:                                 ; preds = %if.else1763
  %overflow_arg_area_p1768 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay1764, i32 0, i32 2
  %overflow_arg_area1769 = load i8*, i8** %overflow_arg_area_p1768, align 8
  %904 = bitcast i8* %overflow_arg_area1769 to double*
  %overflow_arg_area.next1770 = getelementptr i8, i8* %overflow_arg_area1769, i32 8
  store i8* %overflow_arg_area.next1770, i8** %overflow_arg_area_p1768, align 8
  br label %vaarg.end1771

vaarg.end1771:                                    ; preds = %vaarg.in_mem1767, %vaarg.in_reg1765
  %vaarg.addr1772 = phi double* [ %902, %vaarg.in_reg1765 ], [ %904, %vaarg.in_mem1767 ]
  %905 = load double, double* %vaarg.addr1772, align 8
  store double %905, double* %nv283, align 8
  %906 = load double, double* %nv283, align 8
  %conv1773 = fpext double %906 to x86_fp80
  store x86_fp80 %conv1773, x86_fp80* %fv, align 16
  br label %if.end1774

if.end1774:                                       ; preds = %vaarg.end1771, %if.then1757
  br label %if.end1801

if.else1775:                                      ; preds = %sw.epilog1751
  %907 = load i8, i8* %infnan, align 1
  %tobool1776 = trunc i8 %907 to i1
  br i1 %tobool1776, label %if.end1788, label %if.then1777

if.then1777:                                      ; preds = %if.else1775
  %908 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1778 = getelementptr inbounds %struct.sv, %struct.sv* %908, i32 0, i32 2
  %909 = load i32, i32* %sv_flags1778, align 4
  %and1779 = and i32 %909, 2097152
  %tobool1780 = icmp ne i32 %and1779, 0
  br i1 %tobool1780, label %cond.true1781, label %cond.false1782

cond.true1781:                                    ; preds = %if.then1777
  br i1 true, label %land.rhs1783, label %land.end1786

cond.false1782:                                   ; preds = %if.then1777
  br i1 false, label %land.rhs1783, label %land.end1786

land.rhs1783:                                     ; preds = %cond.false1782, %cond.true1781
  %910 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call1784 = call i32 @Perl_mg_get(%struct.sv* %910)
  %tobool1785 = icmp ne i32 %call1784, 0
  br label %land.end1786

land.end1786:                                     ; preds = %land.rhs1783, %cond.false1782, %cond.true1781
  %911 = phi i1 [ false, %cond.false1782 ], [ false, %cond.true1781 ], [ %tobool1785, %land.rhs1783 ]
  %land.ext1787 = zext i1 %911 to i32
  br label %if.end1788

if.end1788:                                       ; preds = %land.end1786, %if.else1775
  %912 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags1789 = getelementptr inbounds %struct.sv, %struct.sv* %912, i32 0, i32 2
  %913 = load i32, i32* %sv_flags1789, align 4
  %and1790 = and i32 %913, 512
  %tobool1791 = icmp ne i32 %and1790, 0
  br i1 %tobool1791, label %cond.true1792, label %cond.false1796

cond.true1792:                                    ; preds = %if.end1788
  %914 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any1793 = getelementptr inbounds %struct.sv, %struct.sv* %914, i32 0, i32 0
  %915 = load i8*, i8** %sv_any1793, align 8
  %916 = bitcast i8* %915 to %struct.xpvnv*
  %xnv_u1794 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %916, i32 0, i32 5
  %xnv_nv1795 = bitcast %union._xnvu* %xnv_u1794 to double*
  %917 = load double, double* %xnv_nv1795, align 8
  br label %cond.end1798

cond.false1796:                                   ; preds = %if.end1788
  %918 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call1797 = call double @Perl_sv_2nv_flags(%struct.sv* %918, i32 0)
  br label %cond.end1798

cond.end1798:                                     ; preds = %cond.false1796, %cond.true1792
  %cond1799 = phi double [ %917, %cond.true1792 ], [ %call1797, %cond.false1796 ]
  store double %cond1799, double* %nv283, align 8
  %919 = load double, double* %nv283, align 8
  %conv1800 = fpext double %919 to x86_fp80
  store x86_fp80 %conv1800, x86_fp80* %fv, align 16
  br label %if.end1801

if.end1801:                                       ; preds = %cond.end1798, %if.end1774
  store i64 0, i64* %need, align 8
  %920 = load i8, i8* %c, align 1
  %conv1802 = sext i8 %920 to i32
  %and1803 = and i32 %conv1802, -33
  %cmp1804 = icmp eq i32 %and1803, 69
  br i1 %cmp1804, label %if.end1843, label %land.lhs.true1806

land.lhs.true1806:                                ; preds = %if.end1801
  %921 = load x86_fp80, x86_fp80* %fv, align 16
  %mul1807 = fmul x86_fp80 %921, 0xK00000000000000000000
  %cmp1808 = fcmp oeq x86_fp80 %mul1807, 0xK00000000000000000000
  br i1 %cmp1808, label %if.then1810, label %if.end1843

if.then1810:                                      ; preds = %land.lhs.true1806
  store i32 -2147483648, i32* %i, align 4
  %922 = load x86_fp80, x86_fp80* %fv, align 16
  %conv1811 = fptrunc x86_fp80 %922 to double
  %call1812 = call double @frexp(double %conv1811, i32* %i) #6
  %923 = load i32, i32* %i, align 4
  %cmp1813 = icmp eq i32 %923, -2147483648
  br i1 %cmp1813, label %if.then1815, label %if.end1817

if.then1815:                                      ; preds = %if.then1810
  %924 = load x86_fp80, x86_fp80* %fv, align 16
  %call1816 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.74, i64 0, i64 0), x86_fp80 %924)
  br label %if.end1817

if.end1817:                                       ; preds = %if.then1815, %if.then1810
  %925 = load i8, i8* %c, align 1
  %conv1818 = sext i8 %925 to i32
  %and1819 = and i32 %conv1818, -33
  %cmp1820 = icmp eq i32 %and1819, 65
  %frombool1822 = zext i1 %cmp1820 to i8
  store i8 %frombool1822, i8* %hexfp, align 1
  %926 = load i8, i8* %hexfp, align 1
  %tobool1823 = trunc i8 %926 to i1
  br i1 %tobool1823, label %cond.true1825, label %cond.false1826

cond.true1825:                                    ; preds = %if.end1817
  br i1 true, label %if.then1827, label %if.else1833

cond.false1826:                                   ; preds = %if.end1817
  br i1 false, label %if.then1827, label %if.else1833

if.then1827:                                      ; preds = %cond.false1826, %cond.true1825
  %927 = load x86_fp80, x86_fp80* %fv, align 16
  %cmp1828 = fcmp olt x86_fp80 %927, 0xK00000000000000000000
  %928 = zext i1 %cmp1828 to i64
  %cond1830 = select i1 %cmp1828, i32 1, i32 30
  %conv1831 = sext i32 %cond1830 to i64
  %929 = load i64, i64* %need, align 8
  %add1832 = add i64 %929, %conv1831
  store i64 %add1832, i64* %need, align 8
  br label %if.end1842

if.else1833:                                      ; preds = %cond.false1826, %cond.true1825
  %930 = load i32, i32* %i, align 4
  %cmp1834 = icmp sgt i32 %930, 0
  br i1 %cmp1834, label %if.then1836, label %if.end1841

if.then1836:                                      ; preds = %if.else1833
  %931 = load i32, i32* %i, align 4
  %mul1837 = mul nsw i32 %931, 146
  %div1838 = sdiv i32 %mul1837, 485
  %add1839 = add nsw i32 %div1838, 1
  %conv1840 = sext i32 %add1839 to i64
  store i64 %conv1840, i64* %need, align 8
  br label %if.end1841

if.end1841:                                       ; preds = %if.then1836, %if.else1833
  br label %if.end1842

if.end1842:                                       ; preds = %if.end1841, %if.then1827
  br label %if.end1843

if.end1843:                                       ; preds = %if.end1842, %land.lhs.true1806, %if.end1801
  %932 = load i8, i8* %has_precis, align 1
  %tobool1844 = trunc i8 %932 to i1
  br i1 %tobool1844, label %cond.true1846, label %cond.false1847

cond.true1846:                                    ; preds = %if.end1843
  %933 = load i64, i64* %precis, align 8
  br label %cond.end1848

cond.false1847:                                   ; preds = %if.end1843
  br label %cond.end1848

cond.end1848:                                     ; preds = %cond.false1847, %cond.true1846
  %cond1849 = phi i64 [ %933, %cond.true1846 ], [ 6, %cond.false1847 ]
  %934 = load i64, i64* %need, align 8
  %add1850 = add i64 %934, %cond1849
  store i64 %add1850, i64* %need, align 8
  %935 = load i64, i64* %need, align 8
  %936 = load i64, i64* %width, align 8
  %cmp1851 = icmp ult i64 %935, %936
  br i1 %cmp1851, label %if.then1853, label %if.end1854

if.then1853:                                      ; preds = %cond.end1848
  %937 = load i64, i64* %width, align 8
  store i64 %937, i64* %need, align 8
  br label %if.end1854

if.end1854:                                       ; preds = %if.then1853, %cond.end1848
  %938 = load i64, i64* %need, align 8
  %add1855 = add i64 %938, 20
  store i64 %add1855, i64* %need, align 8
  %939 = load i64, i64* @PL_efloatsize, align 8
  %940 = load i64, i64* %need, align 8
  %cmp1856 = icmp ult i64 %939, %940
  br i1 %cmp1856, label %if.then1858, label %if.end1863

if.then1858:                                      ; preds = %if.end1854
  %941 = load i8*, i8** @PL_efloatbuf, align 8
  call void @Perl_safesysfree(i8* %941)
  %942 = load i64, i64* %need, align 8
  %add1859 = add i64 %942, 20
  store i64 %add1859, i64* @PL_efloatsize, align 8
  %943 = load i64, i64* @PL_efloatsize, align 8
  %mul1860 = mul i64 %943, 1
  %call1861 = call i8* @Perl_safesysmalloc(i64 %mul1860)
  store i8* %call1861, i8** @PL_efloatbuf, align 8
  %944 = load i8*, i8** @PL_efloatbuf, align 8
  %arrayidx1862 = getelementptr inbounds i8, i8* %944, i64 0
  store i8 0, i8* %arrayidx1862, align 1
  br label %if.end1863

if.end1863:                                       ; preds = %if.then1858, %if.end1854
  %945 = load i64, i64* %width, align 8
  %tobool1864 = icmp ne i64 %945, 0
  br i1 %tobool1864, label %if.end1919, label %lor.lhs.false1865

lor.lhs.false1865:                                ; preds = %if.end1863
  %946 = load i8, i8* %left, align 1
  %tobool1866 = trunc i8 %946 to i1
  br i1 %tobool1866, label %if.end1919, label %lor.lhs.false1868

lor.lhs.false1868:                                ; preds = %lor.lhs.false1865
  %947 = load i8, i8* %plus, align 1
  %conv1869 = sext i8 %947 to i32
  %tobool1870 = icmp ne i32 %conv1869, 0
  br i1 %tobool1870, label %if.end1919, label %lor.lhs.false1871

lor.lhs.false1871:                                ; preds = %lor.lhs.false1868
  %948 = load i8, i8* %alt, align 1
  %tobool1872 = trunc i8 %948 to i1
  br i1 %tobool1872, label %if.end1919, label %land.lhs.true1874

land.lhs.true1874:                                ; preds = %lor.lhs.false1871
  %949 = load i8, i8* %fill, align 1
  %conv1875 = sext i8 %949 to i32
  %cmp1876 = icmp ne i32 %conv1875, 48
  br i1 %cmp1876, label %land.lhs.true1878, label %if.end1919

land.lhs.true1878:                                ; preds = %land.lhs.true1874
  %950 = load i8, i8* %has_precis, align 1
  %tobool1879 = trunc i8 %950 to i1
  br i1 %tobool1879, label %land.lhs.true1881, label %if.end1919

land.lhs.true1881:                                ; preds = %land.lhs.true1878
  %951 = load i8, i8* %intsize, align 1
  %conv1882 = sext i8 %951 to i32
  %cmp1883 = icmp ne i32 %conv1882, 113
  br i1 %cmp1883, label %land.lhs.true1885, label %if.end1919

land.lhs.true1885:                                ; preds = %land.lhs.true1881
  %952 = load x86_fp80, x86_fp80* %fv, align 16
  %conv1886 = fptrunc x86_fp80 %952 to double
  %call1887 = call zeroext i1 @Perl_isinfnan(double %conv1886)
  br i1 %call1887, label %cond.false1889, label %cond.true1888

cond.true1888:                                    ; preds = %land.lhs.true1885
  br i1 true, label %if.then1890, label %if.end1919

cond.false1889:                                   ; preds = %land.lhs.true1885
  br i1 false, label %if.then1890, label %if.end1919

if.then1890:                                      ; preds = %cond.false1889, %cond.true1888
  %953 = load i8, i8* %c, align 1
  %conv1891 = sext i8 %953 to i32
  %cmp1892 = icmp eq i32 %conv1891, 103
  br i1 %cmp1892, label %land.lhs.true1894, label %if.else1904

land.lhs.true1894:                                ; preds = %if.then1890
  %954 = load i64, i64* %precis, align 8
  %tobool1895 = icmp ne i64 %954, 0
  br i1 %tobool1895, label %if.then1896, label %if.else1904

if.then1896:                                      ; preds = %land.lhs.true1894
  %955 = load i8*, i8** @PL_efloatbuf, align 8
  %956 = load i64, i64* %precis, align 8
  %conv1897 = trunc i64 %956 to i32
  %957 = load x86_fp80, x86_fp80* %fv, align 16
  %conv1898 = fptrunc x86_fp80 %957 to double
  %call1899 = call i32 (i8*, i8*, ...) @sprintf(i8* %955, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i32 %conv1897, double %conv1898) #6
  %958 = load i8*, i8** @PL_efloatbuf, align 8
  %959 = load i8, i8* %958, align 1
  %tobool1900 = icmp ne i8 %959, 0
  br i1 %tobool1900, label %if.then1901, label %if.end1903

if.then1901:                                      ; preds = %if.then1896
  %960 = load i8*, i8** @PL_efloatbuf, align 8
  %call1902 = call i64 @strlen(i8* %960) #8
  store i64 %call1902, i64* %elen, align 8
  br label %float_converted

if.end1903:                                       ; preds = %if.then1896
  br label %if.end1918

if.else1904:                                      ; preds = %land.lhs.true1894, %if.then1890
  %961 = load i8, i8* %c, align 1
  %conv1905 = sext i8 %961 to i32
  %cmp1906 = icmp eq i32 %conv1905, 102
  br i1 %cmp1906, label %land.lhs.true1908, label %if.end1917

land.lhs.true1908:                                ; preds = %if.else1904
  %962 = load i64, i64* %precis, align 8
  %tobool1909 = icmp ne i64 %962, 0
  br i1 %tobool1909, label %if.end1917, label %if.then1910

if.then1910:                                      ; preds = %land.lhs.true1908
  %963 = load double, double* %nv283, align 8
  %arraydecay1911 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i64 0, i64 0
  %add.ptr1912 = getelementptr inbounds i8, i8* %arraydecay1911, i64 127
  %call1913 = call i8* @S_F0convert(double %963, i8* %add.ptr1912, i64* %elen)
  store i8* %call1913, i8** %eptr, align 8
  %tobool1914 = icmp ne i8* %call1913, null
  br i1 %tobool1914, label %if.then1915, label %if.end1916

if.then1915:                                      ; preds = %if.then1910
  br label %sw.epilog2463

if.end1916:                                       ; preds = %if.then1910
  br label %if.end1917

if.end1917:                                       ; preds = %if.end1916, %land.lhs.true1908, %if.else1904
  br label %if.end1918

if.end1918:                                       ; preds = %if.end1917, %if.end1903
  br label %if.end1919

if.end1919:                                       ; preds = %if.end1918, %cond.false1889, %cond.true1888, %land.lhs.true1881, %land.lhs.true1878, %land.lhs.true1874, %lor.lhs.false1871, %lor.lhs.false1868, %lor.lhs.false1865, %if.end1863
  %964 = load i8, i8* %hexfp, align 1
  %tobool1920 = trunc i8 %964 to i1
  br i1 %tobool1920, label %cond.true1922, label %cond.false1923

cond.true1922:                                    ; preds = %if.end1919
  br i1 true, label %if.then1924, label %if.else2138

cond.false1923:                                   ; preds = %if.end1919
  br i1 false, label %if.then1924, label %if.else2138

if.then1924:                                      ; preds = %cond.false1923, %cond.true1922
  %965 = load i8*, i8** @PL_efloatbuf, align 8
  store i8* %965, i8** %p1925, align 8
  %arraydecay1926 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  store i8* %arraydecay1926, i8** %v, align 8
  store i8* null, i8** %vfnz, align 8
  store i8* null, i8** %vlnz, align 8
  %966 = load i8, i8* %c, align 1
  %conv1927 = sext i8 %966 to i32
  %cmp1928 = icmp eq i32 %conv1927, 97
  %frombool1930 = zext i1 %cmp1928 to i8
  store i8 %frombool1930, i8* %lower, align 1
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_hexdigit, i64 0, i64 0), i8** %xdig, align 8
  store i32 0, i32* %zerotail, align 4
  store i32 0, i32* %exponent, align 4
  store i8 0, i8* %hexradix, align 1
  %967 = load double, double* %nv283, align 8
  %arraydecay1931 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  %call1932 = call i8* @S_hextract(double %967, i32* %exponent, i8* %arraydecay1931, i8* null)
  store i8* %call1932, i8** %vend, align 8
  %968 = load double, double* %nv283, align 8
  %arraydecay1933 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  %969 = load i8*, i8** %vend, align 8
  %call1934 = call i8* @S_hextract(double %968, i32* %exponent, i8* %arraydecay1933, i8* %969)
  %970 = load x86_fp80, x86_fp80* %fv, align 16
  %cmp1935 = fcmp olt x86_fp80 %970, 0xK00000000000000000000
  br i1 %cmp1935, label %if.then1938, label %lor.lhs.false1937

lor.lhs.false1937:                                ; preds = %if.then1924
  %971 = load double, double* %nv283, align 8
  %972 = bitcast double %971 to i64
  %973 = icmp slt i64 %972, 0
  br i1 %973, label %if.then1938, label %if.else1940

if.then1938:                                      ; preds = %lor.lhs.false1937, %if.then1924
  %974 = load i8*, i8** %p1925, align 8
  %incdec.ptr1939 = getelementptr inbounds i8, i8* %974, i32 1
  store i8* %incdec.ptr1939, i8** %p1925, align 8
  store i8 45, i8* %974, align 1
  br label %if.end1945

if.else1940:                                      ; preds = %lor.lhs.false1937
  %975 = load i8, i8* %plus, align 1
  %tobool1941 = icmp ne i8 %975, 0
  br i1 %tobool1941, label %if.then1942, label %if.end1944

if.then1942:                                      ; preds = %if.else1940
  %976 = load i8, i8* %plus, align 1
  %977 = load i8*, i8** %p1925, align 8
  %incdec.ptr1943 = getelementptr inbounds i8, i8* %977, i32 1
  store i8* %incdec.ptr1943, i8** %p1925, align 8
  store i8 %976, i8* %977, align 1
  br label %if.end1944

if.end1944:                                       ; preds = %if.then1942, %if.else1940
  br label %if.end1945

if.end1945:                                       ; preds = %if.end1944, %if.then1938
  %978 = load i8*, i8** %p1925, align 8
  %incdec.ptr1946 = getelementptr inbounds i8, i8* %978, i32 1
  store i8* %incdec.ptr1946, i8** %p1925, align 8
  store i8 48, i8* %978, align 1
  %979 = load i8, i8* %lower, align 1
  %tobool1947 = trunc i8 %979 to i1
  br i1 %tobool1947, label %if.then1948, label %if.else1950

if.then1948:                                      ; preds = %if.end1945
  %980 = load i8*, i8** %p1925, align 8
  %incdec.ptr1949 = getelementptr inbounds i8, i8* %980, i32 1
  store i8* %incdec.ptr1949, i8** %p1925, align 8
  store i8 120, i8* %980, align 1
  br label %if.end1953

if.else1950:                                      ; preds = %if.end1945
  %981 = load i8*, i8** %p1925, align 8
  %incdec.ptr1951 = getelementptr inbounds i8, i8* %981, i32 1
  store i8* %incdec.ptr1951, i8** %p1925, align 8
  store i8 88, i8* %981, align 1
  %982 = load i8*, i8** %xdig, align 8
  %add.ptr1952 = getelementptr inbounds i8, i8* %982, i64 16
  store i8* %add.ptr1952, i8** %xdig, align 8
  br label %if.end1953

if.end1953:                                       ; preds = %if.else1950, %if.then1948
  %arraydecay1954 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  store i8* %arraydecay1954, i8** %v, align 8
  br label %for.cond1955

for.cond1955:                                     ; preds = %for.inc1962, %if.end1953
  %983 = load i8*, i8** %v, align 8
  %984 = load i8*, i8** %vend, align 8
  %cmp1956 = icmp ult i8* %983, %984
  br i1 %cmp1956, label %for.body1958, label %for.end1964

for.body1958:                                     ; preds = %for.cond1955
  %985 = load i8*, i8** %v, align 8
  %986 = load i8, i8* %985, align 1
  %tobool1959 = icmp ne i8 %986, 0
  br i1 %tobool1959, label %if.then1960, label %if.end1961

if.then1960:                                      ; preds = %for.body1958
  %987 = load i8*, i8** %v, align 8
  store i8* %987, i8** %vfnz, align 8
  br label %for.end1964

if.end1961:                                       ; preds = %for.body1958
  br label %for.inc1962

for.inc1962:                                      ; preds = %if.end1961
  %988 = load i8*, i8** %v, align 8
  %incdec.ptr1963 = getelementptr inbounds i8, i8* %988, i32 1
  store i8* %incdec.ptr1963, i8** %v, align 8
  br label %for.cond1955

for.end1964:                                      ; preds = %if.then1960, %for.cond1955
  %989 = load i8*, i8** %vfnz, align 8
  %tobool1965 = icmp ne i8* %989, null
  br i1 %tobool1965, label %if.then1966, label %if.else2065

if.then1966:                                      ; preds = %for.end1964
  %990 = load i8*, i8** %vend, align 8
  %add.ptr1967 = getelementptr inbounds i8, i8* %990, i64 -1
  store i8* %add.ptr1967, i8** %v, align 8
  br label %for.cond1968

for.cond1968:                                     ; preds = %for.inc1976, %if.then1966
  %991 = load i8*, i8** %v, align 8
  %arraydecay1969 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  %cmp1970 = icmp uge i8* %991, %arraydecay1969
  br i1 %cmp1970, label %for.body1972, label %for.end1978

for.body1972:                                     ; preds = %for.cond1968
  %992 = load i8*, i8** %v, align 8
  %993 = load i8, i8* %992, align 1
  %tobool1973 = icmp ne i8 %993, 0
  br i1 %tobool1973, label %if.then1974, label %if.end1975

if.then1974:                                      ; preds = %for.body1972
  %994 = load i8*, i8** %v, align 8
  store i8* %994, i8** %vlnz, align 8
  br label %for.end1978

if.end1975:                                       ; preds = %for.body1972
  br label %for.inc1976

for.inc1976:                                      ; preds = %if.end1975
  %995 = load i8*, i8** %v, align 8
  %incdec.ptr1977 = getelementptr inbounds i8, i8* %995, i32 -1
  store i8* %incdec.ptr1977, i8** %v, align 8
  br label %for.cond1968

for.end1978:                                      ; preds = %if.then1974, %for.cond1968
  %996 = load x86_fp80, x86_fp80* %fv, align 16
  %cmp1979 = fcmp une x86_fp80 %996, 0xK00000000000000000000
  br i1 %cmp1979, label %if.then1981, label %if.end1982

if.then1981:                                      ; preds = %for.end1978
  %997 = load i32, i32* %exponent, align 4
  %dec = add nsw i32 %997, -1
  store i32 %dec, i32* %exponent, align 4
  br label %if.end1982

if.end1982:                                       ; preds = %if.then1981, %for.end1978
  %998 = load i64, i64* %precis, align 8
  %cmp1983 = icmp ugt i64 %998, 0
  br i1 %cmp1983, label %if.then1985, label %if.end2055

if.then1985:                                      ; preds = %if.end1982
  %999 = load i64, i64* %precis, align 8
  %add1986 = add i64 %999, 1
  %1000 = load i8*, i8** %vend, align 8
  %arraydecay1987 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  %sub.ptr.lhs.cast1988 = ptrtoint i8* %1000 to i64
  %sub.ptr.rhs.cast1989 = ptrtoint i8* %arraydecay1987 to i64
  %sub.ptr.sub1990 = sub i64 %sub.ptr.lhs.cast1988, %sub.ptr.rhs.cast1989
  %cmp1991 = icmp slt i64 %add1986, %sub.ptr.sub1990
  br i1 %cmp1991, label %if.then1993, label %if.else2047

if.then1993:                                      ; preds = %if.then1985
  %arraydecay1994 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  %1001 = load i64, i64* %precis, align 8
  %add.ptr1995 = getelementptr inbounds i8, i8* %arraydecay1994, i64 %1001
  %add.ptr1996 = getelementptr inbounds i8, i8* %add.ptr1995, i64 1
  store i8* %add.ptr1996, i8** %v, align 8
  %1002 = load i8*, i8** %v, align 8
  %1003 = load i8, i8* %1002, align 1
  %conv1997 = zext i8 %1003 to i32
  %cmp1998 = icmp sgt i32 %conv1997, 8
  %frombool2000 = zext i1 %cmp1998 to i8
  store i8 %frombool2000, i8* %round, align 1
  %1004 = load i8, i8* %round, align 1
  %tobool2001 = trunc i8 %1004 to i1
  br i1 %tobool2001, label %if.end2018, label %land.lhs.true2002

land.lhs.true2002:                                ; preds = %if.then1993
  %1005 = load i8*, i8** %v, align 8
  %1006 = load i8, i8* %1005, align 1
  %conv2003 = zext i8 %1006 to i32
  %cmp2004 = icmp eq i32 %conv2003, 8
  br i1 %cmp2004, label %if.then2006, label %if.end2018

if.then2006:                                      ; preds = %land.lhs.true2002
  %1007 = load i8*, i8** %v, align 8
  %incdec.ptr2007 = getelementptr inbounds i8, i8* %1007, i32 1
  store i8* %incdec.ptr2007, i8** %v, align 8
  br label %for.cond2008

for.cond2008:                                     ; preds = %for.inc2015, %if.then2006
  %1008 = load i8*, i8** %v, align 8
  %1009 = load i8*, i8** %vend, align 8
  %cmp2009 = icmp ult i8* %1008, %1009
  br i1 %cmp2009, label %for.body2011, label %for.end2017

for.body2011:                                     ; preds = %for.cond2008
  %1010 = load i8*, i8** %v, align 8
  %1011 = load i8, i8* %1010, align 1
  %tobool2012 = icmp ne i8 %1011, 0
  br i1 %tobool2012, label %if.then2013, label %if.end2014

if.then2013:                                      ; preds = %for.body2011
  store i8 1, i8* %round, align 1
  br label %for.end2017

if.end2014:                                       ; preds = %for.body2011
  br label %for.inc2015

for.inc2015:                                      ; preds = %if.end2014
  %1012 = load i8*, i8** %v, align 8
  %incdec.ptr2016 = getelementptr inbounds i8, i8* %1012, i32 1
  store i8* %incdec.ptr2016, i8** %v, align 8
  br label %for.cond2008

for.end2017:                                      ; preds = %if.then2013, %for.cond2008
  br label %if.end2018

if.end2018:                                       ; preds = %for.end2017, %land.lhs.true2002, %if.then1993
  %1013 = load i8, i8* %round, align 1
  %tobool2019 = trunc i8 %1013 to i1
  br i1 %tobool2019, label %if.then2020, label %if.end2044

if.then2020:                                      ; preds = %if.end2018
  %arraydecay2021 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  %1014 = load i64, i64* %precis, align 8
  %add.ptr2022 = getelementptr inbounds i8, i8* %arraydecay2021, i64 %1014
  store i8* %add.ptr2022, i8** %v, align 8
  br label %for.cond2023

for.cond2023:                                     ; preds = %for.inc2041, %if.then2020
  %1015 = load i8*, i8** %v, align 8
  %arraydecay2024 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  %cmp2025 = icmp uge i8* %1015, %arraydecay2024
  br i1 %cmp2025, label %for.body2027, label %for.end2043

for.body2027:                                     ; preds = %for.cond2023
  %1016 = load i8*, i8** %v, align 8
  %1017 = load i8, i8* %1016, align 1
  %conv2028 = zext i8 %1017 to i32
  %cmp2029 = icmp slt i32 %conv2028, 15
  br i1 %cmp2029, label %if.then2031, label %if.end2033

if.then2031:                                      ; preds = %for.body2027
  %1018 = load i8*, i8** %v, align 8
  %1019 = load i8, i8* %1018, align 1
  %inc2032 = add i8 %1019, 1
  store i8 %inc2032, i8* %1018, align 1
  br label %for.end2043

if.end2033:                                       ; preds = %for.body2027
  %1020 = load i8*, i8** %v, align 8
  store i8 0, i8* %1020, align 1
  %1021 = load i8*, i8** %v, align 8
  %arraydecay2034 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  %cmp2035 = icmp eq i8* %1021, %arraydecay2034
  br i1 %cmp2035, label %if.then2037, label %if.end2040

if.then2037:                                      ; preds = %if.end2033
  %1022 = load i8*, i8** %xdig, align 8
  %arrayidx2038 = getelementptr inbounds i8, i8* %1022, i64 1
  %1023 = load i8, i8* %arrayidx2038, align 1
  %1024 = load i8*, i8** %p1925, align 8
  %incdec.ptr2039 = getelementptr inbounds i8, i8* %1024, i32 1
  store i8* %incdec.ptr2039, i8** %p1925, align 8
  store i8 %1023, i8* %1024, align 1
  br label %if.end2040

if.end2040:                                       ; preds = %if.then2037, %if.end2033
  br label %for.inc2041

for.inc2041:                                      ; preds = %if.end2040
  %1025 = load i8*, i8** %v, align 8
  %incdec.ptr2042 = getelementptr inbounds i8, i8* %1025, i32 -1
  store i8* %incdec.ptr2042, i8** %v, align 8
  br label %for.cond2023

for.end2043:                                      ; preds = %if.then2031, %for.cond2023
  br label %if.end2044

if.end2044:                                       ; preds = %for.end2043, %if.end2018
  %arraydecay2045 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  %1026 = load i64, i64* %precis, align 8
  %add.ptr2046 = getelementptr inbounds i8, i8* %arraydecay2045, i64 %1026
  store i8* %add.ptr2046, i8** %vlnz, align 8
  br label %if.end2054

if.else2047:                                      ; preds = %if.then1985
  %1027 = load i64, i64* %precis, align 8
  %1028 = load i8*, i8** %vlnz, align 8
  %arraydecay2048 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  %sub.ptr.lhs.cast2049 = ptrtoint i8* %1028 to i64
  %sub.ptr.rhs.cast2050 = ptrtoint i8* %arraydecay2048 to i64
  %sub.ptr.sub2051 = sub i64 %sub.ptr.lhs.cast2049, %sub.ptr.rhs.cast2050
  %sub2052 = sub i64 %1027, %sub.ptr.sub2051
  %conv2053 = trunc i64 %sub2052 to i32
  store i32 %conv2053, i32* %zerotail, align 4
  br label %if.end2054

if.end2054:                                       ; preds = %if.else2047, %if.end2044
  br label %if.end2055

if.end2055:                                       ; preds = %if.end2054, %if.end1982
  %arraydecay2056 = getelementptr inbounds [17 x i8], [17 x i8]* %vhex, i64 0, i64 0
  store i8* %arraydecay2056, i8** %v, align 8
  %1029 = load i8*, i8** %xdig, align 8
  %1030 = load i8*, i8** %v, align 8
  %incdec.ptr2057 = getelementptr inbounds i8, i8* %1030, i32 1
  store i8* %incdec.ptr2057, i8** %v, align 8
  %1031 = load i8, i8* %1030, align 1
  %idxprom2058 = zext i8 %1031 to i64
  %arrayidx2059 = getelementptr inbounds i8, i8* %1029, i64 %idxprom2058
  %1032 = load i8, i8* %arrayidx2059, align 1
  %1033 = load i8*, i8** %p1925, align 8
  %incdec.ptr2060 = getelementptr inbounds i8, i8* %1033, i32 1
  store i8* %incdec.ptr2060, i8** %p1925, align 8
  store i8 %1032, i8* %1033, align 1
  %1034 = load i8*, i8** %vfnz, align 8
  %1035 = load i8*, i8** %vlnz, align 8
  %cmp2061 = icmp ult i8* %1034, %1035
  br i1 %cmp2061, label %if.then2063, label %if.end2064

if.then2063:                                      ; preds = %if.end2055
  store i8 1, i8* %hexradix, align 1
  br label %if.end2064

if.end2064:                                       ; preds = %if.then2063, %if.end2055
  br label %if.end2068

if.else2065:                                      ; preds = %for.end1964
  %1036 = load i8*, i8** %p1925, align 8
  %incdec.ptr2066 = getelementptr inbounds i8, i8* %1036, i32 1
  store i8* %incdec.ptr2066, i8** %p1925, align 8
  store i8 48, i8* %1036, align 1
  store i32 0, i32* %exponent, align 4
  %1037 = load i64, i64* %precis, align 8
  %conv2067 = trunc i64 %1037 to i32
  store i32 %conv2067, i32* %zerotail, align 4
  br label %if.end2068

if.end2068:                                       ; preds = %if.else2065, %if.end2064
  %1038 = load i64, i64* %precis, align 8
  %cmp2069 = icmp ugt i64 %1038, 0
  br i1 %cmp2069, label %if.then2074, label %lor.lhs.false2071

lor.lhs.false2071:                                ; preds = %if.end2068
  %1039 = load i8, i8* %alt, align 1
  %tobool2072 = trunc i8 %1039 to i1
  br i1 %tobool2072, label %if.then2074, label %if.end2075

if.then2074:                                      ; preds = %lor.lhs.false2071, %if.end2068
  store i8 1, i8* %hexradix, align 1
  br label %if.end2075

if.end2075:                                       ; preds = %if.then2074, %lor.lhs.false2071
  %1040 = load i8, i8* %hexradix, align 1
  %tobool2076 = trunc i8 %1040 to i1
  br i1 %tobool2076, label %if.then2077, label %if.end2079

if.then2077:                                      ; preds = %if.end2075
  %1041 = load i8*, i8** %p1925, align 8
  %incdec.ptr2078 = getelementptr inbounds i8, i8* %1041, i32 1
  store i8* %incdec.ptr2078, i8** %p1925, align 8
  store i8 46, i8* %1041, align 1
  br label %if.end2079

if.end2079:                                       ; preds = %if.then2077, %if.end2075
  %1042 = load i8*, i8** %vlnz, align 8
  %tobool2080 = icmp ne i8* %1042, null
  br i1 %tobool2080, label %if.then2081, label %if.end2091

if.then2081:                                      ; preds = %if.end2079
  br label %while.cond2082

while.cond2082:                                   ; preds = %while.body2085, %if.then2081
  %1043 = load i8*, i8** %v, align 8
  %1044 = load i8*, i8** %vlnz, align 8
  %cmp2083 = icmp ule i8* %1043, %1044
  br i1 %cmp2083, label %while.body2085, label %while.end2090

while.body2085:                                   ; preds = %while.cond2082
  %1045 = load i8*, i8** %xdig, align 8
  %1046 = load i8*, i8** %v, align 8
  %incdec.ptr2086 = getelementptr inbounds i8, i8* %1046, i32 1
  store i8* %incdec.ptr2086, i8** %v, align 8
  %1047 = load i8, i8* %1046, align 1
  %idxprom2087 = zext i8 %1047 to i64
  %arrayidx2088 = getelementptr inbounds i8, i8* %1045, i64 %idxprom2087
  %1048 = load i8, i8* %arrayidx2088, align 1
  %1049 = load i8*, i8** %p1925, align 8
  %incdec.ptr2089 = getelementptr inbounds i8, i8* %1049, i32 1
  store i8* %incdec.ptr2089, i8** %p1925, align 8
  store i8 %1048, i8* %1049, align 1
  br label %while.cond2082

while.end2090:                                    ; preds = %while.cond2082
  br label %if.end2091

if.end2091:                                       ; preds = %while.end2090, %if.end2079
  %1050 = load i32, i32* %zerotail, align 4
  %cmp2092 = icmp sgt i32 %1050, 0
  br i1 %cmp2092, label %if.then2094, label %if.end2101

if.then2094:                                      ; preds = %if.end2091
  br label %while.cond2095

while.cond2095:                                   ; preds = %while.body2098, %if.then2094
  %1051 = load i32, i32* %zerotail, align 4
  %dec2096 = add nsw i32 %1051, -1
  store i32 %dec2096, i32* %zerotail, align 4
  %tobool2097 = icmp ne i32 %1051, 0
  br i1 %tobool2097, label %while.body2098, label %while.end2100

while.body2098:                                   ; preds = %while.cond2095
  %1052 = load i8*, i8** %p1925, align 8
  %incdec.ptr2099 = getelementptr inbounds i8, i8* %1052, i32 1
  store i8* %incdec.ptr2099, i8** %p1925, align 8
  store i8 48, i8* %1052, align 1
  br label %while.cond2095

while.end2100:                                    ; preds = %while.cond2095
  br label %if.end2101

if.end2101:                                       ; preds = %while.end2100, %if.end2091
  %1053 = load i8*, i8** %p1925, align 8
  %1054 = load i8*, i8** @PL_efloatbuf, align 8
  %sub.ptr.lhs.cast2102 = ptrtoint i8* %1053 to i64
  %sub.ptr.rhs.cast2103 = ptrtoint i8* %1054 to i64
  %sub.ptr.sub2104 = sub i64 %sub.ptr.lhs.cast2102, %sub.ptr.rhs.cast2103
  store i64 %sub.ptr.sub2104, i64* %elen, align 8
  %1055 = load i8*, i8** %p1925, align 8
  %1056 = load i64, i64* @PL_efloatsize, align 8
  %1057 = load i64, i64* %elen, align 8
  %sub2105 = sub i64 %1056, %1057
  %1058 = load i8, i8* %lower, align 1
  %tobool2106 = trunc i8 %1058 to i1
  %1059 = zext i1 %tobool2106 to i64
  %cond2108 = select i1 %tobool2106, i32 112, i32 80
  %1060 = load i32, i32* %exponent, align 4
  %call2109 = call i32 (i8*, i64, i8*, ...) @Perl_my_snprintf(i8* %1055, i64 %sub2105, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.75, i64 0, i64 0), i32 %cond2108, i32 %1060)
  %conv2110 = sext i32 %call2109 to i64
  %1061 = load i64, i64* %elen, align 8
  %add2111 = add i64 %1061, %conv2110
  store i64 %add2111, i64* %elen, align 8
  %1062 = load i64, i64* %elen, align 8
  %1063 = load i64, i64* %width, align 8
  %cmp2112 = icmp ult i64 %1062, %1063
  br i1 %cmp2112, label %if.then2114, label %if.end2137

if.then2114:                                      ; preds = %if.end2101
  %1064 = load i8, i8* %left, align 1
  %tobool2115 = trunc i8 %1064 to i1
  br i1 %tobool2115, label %if.then2116, label %if.else2119

if.then2116:                                      ; preds = %if.then2114
  %1065 = load i8*, i8** @PL_efloatbuf, align 8
  %1066 = load i64, i64* %elen, align 8
  %add.ptr2117 = getelementptr inbounds i8, i8* %1065, i64 %1066
  %1067 = load i64, i64* %width, align 8
  %1068 = load i64, i64* %elen, align 8
  %sub2118 = sub i64 %1067, %1068
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr2117, i8 32, i64 %sub2118, i1 false)
  br label %if.end2136

if.else2119:                                      ; preds = %if.then2114
  %1069 = load i8, i8* %fill, align 1
  %conv2120 = sext i8 %1069 to i32
  %cmp2121 = icmp eq i32 %conv2120, 48
  br i1 %cmp2121, label %if.then2123, label %if.else2130

if.then2123:                                      ; preds = %if.else2119
  %1070 = load i64, i64* %width, align 8
  %1071 = load i64, i64* %elen, align 8
  %sub2124 = sub i64 %1070, %1071
  store i64 %sub2124, i64* %nzero, align 8
  %1072 = load i8*, i8** @PL_efloatbuf, align 8
  %add.ptr2125 = getelementptr inbounds i8, i8* %1072, i64 2
  store i8* %add.ptr2125, i8** %zerox, align 8
  %1073 = load i8*, i8** %zerox, align 8
  %1074 = load i64, i64* %nzero, align 8
  %add.ptr2126 = getelementptr inbounds i8, i8* %1073, i64 %1074
  %1075 = load i8*, i8** %zerox, align 8
  %1076 = load i64, i64* %elen, align 8
  %sub2127 = sub i64 %1076, 2
  %mul2128 = mul i64 %sub2127, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr2126, i8* align 1 %1075, i64 %mul2128, i1 false)
  %1077 = load i8*, i8** %zerox, align 8
  %1078 = load i8, i8* %fill, align 1
  %conv2129 = sext i8 %1078 to i32
  %1079 = trunc i32 %conv2129 to i8
  %1080 = load i64, i64* %nzero, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1077, i8 %1079, i64 %1080, i1 false)
  br label %if.end2135

if.else2130:                                      ; preds = %if.else2119
  %1081 = load i8*, i8** @PL_efloatbuf, align 8
  %1082 = load i64, i64* %width, align 8
  %add.ptr2131 = getelementptr inbounds i8, i8* %1081, i64 %1082
  %1083 = load i64, i64* %elen, align 8
  %idx.neg = sub i64 0, %1083
  %add.ptr2132 = getelementptr inbounds i8, i8* %add.ptr2131, i64 %idx.neg
  %1084 = load i8*, i8** @PL_efloatbuf, align 8
  %1085 = load i64, i64* %elen, align 8
  %mul2133 = mul i64 %1085, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr2132, i8* align 1 %1084, i64 %mul2133, i1 false)
  %1086 = load i8*, i8** @PL_efloatbuf, align 8
  %1087 = load i64, i64* %width, align 8
  %1088 = load i64, i64* %elen, align 8
  %sub2134 = sub i64 %1087, %1088
  call void @llvm.memset.p0i8.i64(i8* align 1 %1086, i8 32, i64 %sub2134, i1 false)
  br label %if.end2135

if.end2135:                                       ; preds = %if.else2130, %if.then2123
  br label %if.end2136

if.end2136:                                       ; preds = %if.end2135, %if.then2116
  %1089 = load i64, i64* %width, align 8
  store i64 %1089, i64* %elen, align 8
  br label %if.end2137

if.end2137:                                       ; preds = %if.end2136, %if.end2101
  br label %if.end2158

if.else2138:                                      ; preds = %cond.false1923, %cond.true1922
  %1090 = load double, double* %nv283, align 8
  %1091 = load i8*, i8** @PL_efloatbuf, align 8
  %1092 = load i64, i64* @PL_efloatsize, align 8
  %1093 = load i8, i8* %plus, align 1
  %call2139 = call i64 @S_infnan_2pv(double %1090, i8* %1091, i64 %1092, i8 signext %1093)
  store i64 %call2139, i64* %elen, align 8
  %1094 = load i64, i64* %elen, align 8
  %tobool2140 = icmp ne i64 %1094, 0
  br i1 %tobool2140, label %if.then2141, label %if.end2157

if.then2141:                                      ; preds = %if.else2138
  %1095 = load i64, i64* %elen, align 8
  %1096 = load i64, i64* %width, align 8
  %cmp2142 = icmp ult i64 %1095, %1096
  br i1 %cmp2142, label %if.then2144, label %if.end2156

if.then2144:                                      ; preds = %if.then2141
  %1097 = load i8, i8* %left, align 1
  %tobool2145 = trunc i8 %1097 to i1
  br i1 %tobool2145, label %if.then2146, label %if.else2149

if.then2146:                                      ; preds = %if.then2144
  %1098 = load i8*, i8** @PL_efloatbuf, align 8
  %1099 = load i64, i64* %elen, align 8
  %add.ptr2147 = getelementptr inbounds i8, i8* %1098, i64 %1099
  %1100 = load i64, i64* %width, align 8
  %1101 = load i64, i64* %elen, align 8
  %sub2148 = sub i64 %1100, %1101
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr2147, i8 32, i64 %sub2148, i1 false)
  br label %if.end2155

if.else2149:                                      ; preds = %if.then2144
  %1102 = load i8*, i8** @PL_efloatbuf, align 8
  %1103 = load i64, i64* %width, align 8
  %add.ptr2150 = getelementptr inbounds i8, i8* %1102, i64 %1103
  %1104 = load i64, i64* %elen, align 8
  %idx.neg2151 = sub i64 0, %1104
  %add.ptr2152 = getelementptr inbounds i8, i8* %add.ptr2150, i64 %idx.neg2151
  %1105 = load i8*, i8** @PL_efloatbuf, align 8
  %1106 = load i64, i64* %elen, align 8
  %mul2153 = mul i64 %1106, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr2152, i8* align 1 %1105, i64 %mul2153, i1 false)
  %1107 = load i8*, i8** @PL_efloatbuf, align 8
  %1108 = load i64, i64* %width, align 8
  %1109 = load i64, i64* %elen, align 8
  %sub2154 = sub i64 %1108, %1109
  call void @llvm.memset.p0i8.i64(i8* align 1 %1107, i8 32, i64 %sub2154, i1 false)
  br label %if.end2155

if.end2155:                                       ; preds = %if.else2149, %if.then2146
  %1110 = load i64, i64* %width, align 8
  store i64 %1110, i64* %elen, align 8
  br label %if.end2156

if.end2156:                                       ; preds = %if.end2155, %if.then2141
  br label %if.end2157

if.end2157:                                       ; preds = %if.end2156, %if.else2138
  br label %if.end2158

if.end2158:                                       ; preds = %if.end2157, %if.end2137
  %1111 = load i64, i64* %elen, align 8
  %cmp2159 = icmp eq i64 %1111, 0
  br i1 %cmp2159, label %if.then2161, label %if.end2237

if.then2161:                                      ; preds = %if.end2158
  %arraydecay2163 = getelementptr inbounds [127 x i8], [127 x i8]* %ebuf, i64 0, i64 0
  %add.ptr2164 = getelementptr inbounds i8, i8* %arraydecay2163, i64 127
  store i8* %add.ptr2164, i8** %ptr2162, align 8
  %1112 = load i8*, i8** %ptr2162, align 8
  %incdec.ptr2165 = getelementptr inbounds i8, i8* %1112, i32 -1
  store i8* %incdec.ptr2165, i8** %ptr2162, align 8
  store i8 0, i8* %incdec.ptr2165, align 1
  %1113 = load i8, i8* %c, align 1
  %1114 = load i8*, i8** %ptr2162, align 8
  %incdec.ptr2166 = getelementptr inbounds i8, i8* %1114, i32 -1
  store i8* %incdec.ptr2166, i8** %ptr2162, align 8
  store i8 %1113, i8* %incdec.ptr2166, align 1
  %1115 = load i8, i8* %intsize, align 1
  %conv2167 = sext i8 %1115 to i32
  %cmp2168 = icmp eq i32 %conv2167, 113
  br i1 %cmp2168, label %if.then2170, label %if.end2179

if.then2170:                                      ; preds = %if.then2161
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @Perl_sv_vcatpvfn_flags.ldblf, i64 0, i64 0), i8** %p2171, align 8
  br label %while.cond2172

while.cond2172:                                   ; preds = %while.body2175, %if.then2170
  %1116 = load i8*, i8** %p2171, align 8
  %cmp2173 = icmp uge i8* %1116, getelementptr inbounds ([3 x i8], [3 x i8]* @Perl_sv_vcatpvfn_flags.ldblf, i64 0, i64 0)
  br i1 %cmp2173, label %while.body2175, label %while.end2178

while.body2175:                                   ; preds = %while.cond2172
  %1117 = load i8*, i8** %p2171, align 8
  %incdec.ptr2176 = getelementptr inbounds i8, i8* %1117, i32 -1
  store i8* %incdec.ptr2176, i8** %p2171, align 8
  %1118 = load i8, i8* %1117, align 1
  %1119 = load i8*, i8** %ptr2162, align 8
  %incdec.ptr2177 = getelementptr inbounds i8, i8* %1119, i32 -1
  store i8* %incdec.ptr2177, i8** %ptr2162, align 8
  store i8 %1118, i8* %incdec.ptr2177, align 1
  br label %while.cond2172

while.end2178:                                    ; preds = %while.cond2172
  br label %if.end2179

if.end2179:                                       ; preds = %while.end2178, %if.then2161
  %1120 = load i8, i8* %has_precis, align 1
  %tobool2180 = trunc i8 %1120 to i1
  br i1 %tobool2180, label %if.then2181, label %if.end2193

if.then2181:                                      ; preds = %if.end2179
  %1121 = load i64, i64* %precis, align 8
  %conv2182 = trunc i64 %1121 to i32
  store i32 %conv2182, i32* %base, align 4
  br label %do.body2183

do.body2183:                                      ; preds = %do.cond2188, %if.then2181
  %1122 = load i32, i32* %base, align 4
  %rem2184 = urem i32 %1122, 10
  %add2185 = add i32 48, %rem2184
  %conv2186 = trunc i32 %add2185 to i8
  %1123 = load i8*, i8** %ptr2162, align 8
  %incdec.ptr2187 = getelementptr inbounds i8, i8* %1123, i32 -1
  store i8* %incdec.ptr2187, i8** %ptr2162, align 8
  store i8 %conv2186, i8* %incdec.ptr2187, align 1
  br label %do.cond2188

do.cond2188:                                      ; preds = %do.body2183
  %1124 = load i32, i32* %base, align 4
  %div2189 = udiv i32 %1124, 10
  store i32 %div2189, i32* %base, align 4
  %tobool2190 = icmp ne i32 %div2189, 0
  br i1 %tobool2190, label %do.body2183, label %do.end2191

do.end2191:                                       ; preds = %do.cond2188
  %1125 = load i8*, i8** %ptr2162, align 8
  %incdec.ptr2192 = getelementptr inbounds i8, i8* %1125, i32 -1
  store i8* %incdec.ptr2192, i8** %ptr2162, align 8
  store i8 46, i8* %incdec.ptr2192, align 1
  br label %if.end2193

if.end2193:                                       ; preds = %do.end2191, %if.end2179
  %1126 = load i64, i64* %width, align 8
  %tobool2194 = icmp ne i64 %1126, 0
  br i1 %tobool2194, label %if.then2195, label %if.end2206

if.then2195:                                      ; preds = %if.end2193
  %1127 = load i64, i64* %width, align 8
  %conv2196 = trunc i64 %1127 to i32
  store i32 %conv2196, i32* %base, align 4
  br label %do.body2197

do.body2197:                                      ; preds = %do.cond2202, %if.then2195
  %1128 = load i32, i32* %base, align 4
  %rem2198 = urem i32 %1128, 10
  %add2199 = add i32 48, %rem2198
  %conv2200 = trunc i32 %add2199 to i8
  %1129 = load i8*, i8** %ptr2162, align 8
  %incdec.ptr2201 = getelementptr inbounds i8, i8* %1129, i32 -1
  store i8* %incdec.ptr2201, i8** %ptr2162, align 8
  store i8 %conv2200, i8* %incdec.ptr2201, align 1
  br label %do.cond2202

do.cond2202:                                      ; preds = %do.body2197
  %1130 = load i32, i32* %base, align 4
  %div2203 = udiv i32 %1130, 10
  store i32 %div2203, i32* %base, align 4
  %tobool2204 = icmp ne i32 %div2203, 0
  br i1 %tobool2204, label %do.body2197, label %do.end2205

do.end2205:                                       ; preds = %do.cond2202
  br label %if.end2206

if.end2206:                                       ; preds = %do.end2205, %if.end2193
  %1131 = load i8, i8* %fill, align 1
  %conv2207 = sext i8 %1131 to i32
  %cmp2208 = icmp eq i32 %conv2207, 48
  br i1 %cmp2208, label %if.then2210, label %if.end2212

if.then2210:                                      ; preds = %if.end2206
  %1132 = load i8, i8* %fill, align 1
  %1133 = load i8*, i8** %ptr2162, align 8
  %incdec.ptr2211 = getelementptr inbounds i8, i8* %1133, i32 -1
  store i8* %incdec.ptr2211, i8** %ptr2162, align 8
  store i8 %1132, i8* %incdec.ptr2211, align 1
  br label %if.end2212

if.end2212:                                       ; preds = %if.then2210, %if.end2206
  %1134 = load i8, i8* %left, align 1
  %tobool2213 = trunc i8 %1134 to i1
  br i1 %tobool2213, label %if.then2214, label %if.end2216

if.then2214:                                      ; preds = %if.end2212
  %1135 = load i8*, i8** %ptr2162, align 8
  %incdec.ptr2215 = getelementptr inbounds i8, i8* %1135, i32 -1
  store i8* %incdec.ptr2215, i8** %ptr2162, align 8
  store i8 45, i8* %incdec.ptr2215, align 1
  br label %if.end2216

if.end2216:                                       ; preds = %if.then2214, %if.end2212
  %1136 = load i8, i8* %plus, align 1
  %tobool2217 = icmp ne i8 %1136, 0
  br i1 %tobool2217, label %if.then2218, label %if.end2220

if.then2218:                                      ; preds = %if.end2216
  %1137 = load i8, i8* %plus, align 1
  %1138 = load i8*, i8** %ptr2162, align 8
  %incdec.ptr2219 = getelementptr inbounds i8, i8* %1138, i32 -1
  store i8* %incdec.ptr2219, i8** %ptr2162, align 8
  store i8 %1137, i8* %incdec.ptr2219, align 1
  br label %if.end2220

if.end2220:                                       ; preds = %if.then2218, %if.end2216
  %1139 = load i8, i8* %alt, align 1
  %tobool2221 = trunc i8 %1139 to i1
  br i1 %tobool2221, label %if.then2222, label %if.end2224

if.then2222:                                      ; preds = %if.end2220
  %1140 = load i8*, i8** %ptr2162, align 8
  %incdec.ptr2223 = getelementptr inbounds i8, i8* %1140, i32 -1
  store i8* %incdec.ptr2223, i8** %ptr2162, align 8
  store i8 35, i8* %incdec.ptr2223, align 1
  br label %if.end2224

if.end2224:                                       ; preds = %if.then2222, %if.end2220
  %1141 = load i8*, i8** %ptr2162, align 8
  %incdec.ptr2225 = getelementptr inbounds i8, i8* %1141, i32 -1
  store i8* %incdec.ptr2225, i8** %ptr2162, align 8
  store i8 37, i8* %incdec.ptr2225, align 1
  %1142 = load i8, i8* %intsize, align 1
  %conv2226 = sext i8 %1142 to i32
  %cmp2227 = icmp eq i32 %conv2226, 113
  br i1 %cmp2227, label %cond.true2229, label %cond.false2231

cond.true2229:                                    ; preds = %if.end2224
  %1143 = load i8*, i8** @PL_efloatbuf, align 8
  %1144 = load i64, i64* @PL_efloatsize, align 8
  %1145 = load i8*, i8** %ptr2162, align 8
  %1146 = load x86_fp80, x86_fp80* %fv, align 16
  %call2230 = call i32 (i8*, i64, i8*, ...) @Perl_my_snprintf(i8* %1143, i64 %1144, i8* %1145, x86_fp80 %1146)
  br label %cond.end2234

cond.false2231:                                   ; preds = %if.end2224
  %1147 = load i8*, i8** @PL_efloatbuf, align 8
  %1148 = load i64, i64* @PL_efloatsize, align 8
  %1149 = load i8*, i8** %ptr2162, align 8
  %1150 = load x86_fp80, x86_fp80* %fv, align 16
  %conv2232 = fptrunc x86_fp80 %1150 to double
  %call2233 = call i32 (i8*, i64, i8*, ...) @Perl_my_snprintf(i8* %1147, i64 %1148, i8* %1149, double %conv2232)
  br label %cond.end2234

cond.end2234:                                     ; preds = %cond.false2231, %cond.true2229
  %cond2235 = phi i32 [ %call2230, %cond.true2229 ], [ %call2233, %cond.false2231 ]
  %conv2236 = sext i32 %cond2235 to i64
  store i64 %conv2236, i64* %elen, align 8
  br label %if.end2237

if.end2237:                                       ; preds = %cond.end2234, %if.end2158
  br label %float_converted

float_converted:                                  ; preds = %if.end2237, %if.then1901
  %1151 = load i8*, i8** @PL_efloatbuf, align 8
  store i8* %1151, i8** %eptr, align 8
  br label %sw.epilog2463

sw.bb2238:                                        ; preds = %if.end1057
  %1152 = load i8, i8* %vectorize, align 1
  %tobool2239 = trunc i8 %1152 to i1
  br i1 %tobool2239, label %if.then2240, label %if.end2241

if.then2240:                                      ; preds = %sw.bb2238
  br label %unknown

if.end2241:                                       ; preds = %sw.bb2238
  %1153 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2242 = getelementptr inbounds %struct.sv, %struct.sv* %1153, i32 0, i32 0
  %1154 = load i8*, i8** %sv_any2242, align 8
  %1155 = bitcast i8* %1154 to %struct.xpv*
  %xpv_cur2243 = getelementptr inbounds %struct.xpv, %struct.xpv* %1155, i32 0, i32 2
  %1156 = load i64, i64* %xpv_cur2243, align 8
  %1157 = load i64, i64* %origlen, align 8
  %sub2244 = sub i64 %1156, %1157
  %conv2245 = trunc i64 %sub2244 to i32
  store i32 %conv2245, i32* %i, align 4
  %1158 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool2246 = icmp ne [1 x %struct.__va_list_tag]* %1158, null
  br i1 %tobool2246, label %if.then2247, label %if.else2347

if.then2247:                                      ; preds = %if.end2241
  %1159 = load i8, i8* %intsize, align 1
  %conv2248 = sext i8 %1159 to i32
  switch i32 %conv2248, label %sw.default2277 [
    i32 99, label %sw.bb2249
    i32 104, label %sw.bb2263
    i32 108, label %sw.bb2290
    i32 86, label %sw.bb2304
    i32 122, label %sw.bb2318
    i32 113, label %sw.bb2332
  ]

sw.bb2249:                                        ; preds = %if.then2247
  %1160 = load i32, i32* %i, align 4
  %conv2250 = trunc i32 %1160 to i8
  %1161 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay2251 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %1161, i64 0, i64 0
  %gp_offset_p2252 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2251, i32 0, i32 0
  %gp_offset2253 = load i32, i32* %gp_offset_p2252, align 8
  %fits_in_gp2254 = icmp ule i32 %gp_offset2253, 40
  br i1 %fits_in_gp2254, label %vaarg.in_reg2255, label %vaarg.in_mem2257

vaarg.in_reg2255:                                 ; preds = %sw.bb2249
  %1162 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2251, i32 0, i32 3
  %reg_save_area2256 = load i8*, i8** %1162, align 8
  %1163 = getelementptr i8, i8* %reg_save_area2256, i32 %gp_offset2253
  %1164 = bitcast i8* %1163 to i8**
  %1165 = add i32 %gp_offset2253, 8
  store i32 %1165, i32* %gp_offset_p2252, align 8
  br label %vaarg.end2261

vaarg.in_mem2257:                                 ; preds = %sw.bb2249
  %overflow_arg_area_p2258 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2251, i32 0, i32 2
  %overflow_arg_area2259 = load i8*, i8** %overflow_arg_area_p2258, align 8
  %1166 = bitcast i8* %overflow_arg_area2259 to i8**
  %overflow_arg_area.next2260 = getelementptr i8, i8* %overflow_arg_area2259, i32 8
  store i8* %overflow_arg_area.next2260, i8** %overflow_arg_area_p2258, align 8
  br label %vaarg.end2261

vaarg.end2261:                                    ; preds = %vaarg.in_mem2257, %vaarg.in_reg2255
  %vaarg.addr2262 = phi i8** [ %1164, %vaarg.in_reg2255 ], [ %1166, %vaarg.in_mem2257 ]
  %1167 = load i8*, i8** %vaarg.addr2262, align 8
  store i8 %conv2250, i8* %1167, align 1
  br label %sw.epilog2346

sw.bb2263:                                        ; preds = %if.then2247
  %1168 = load i32, i32* %i, align 4
  %conv2264 = trunc i32 %1168 to i16
  %1169 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay2265 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %1169, i64 0, i64 0
  %gp_offset_p2266 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2265, i32 0, i32 0
  %gp_offset2267 = load i32, i32* %gp_offset_p2266, align 8
  %fits_in_gp2268 = icmp ule i32 %gp_offset2267, 40
  br i1 %fits_in_gp2268, label %vaarg.in_reg2269, label %vaarg.in_mem2271

vaarg.in_reg2269:                                 ; preds = %sw.bb2263
  %1170 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2265, i32 0, i32 3
  %reg_save_area2270 = load i8*, i8** %1170, align 8
  %1171 = getelementptr i8, i8* %reg_save_area2270, i32 %gp_offset2267
  %1172 = bitcast i8* %1171 to i16**
  %1173 = add i32 %gp_offset2267, 8
  store i32 %1173, i32* %gp_offset_p2266, align 8
  br label %vaarg.end2275

vaarg.in_mem2271:                                 ; preds = %sw.bb2263
  %overflow_arg_area_p2272 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2265, i32 0, i32 2
  %overflow_arg_area2273 = load i8*, i8** %overflow_arg_area_p2272, align 8
  %1174 = bitcast i8* %overflow_arg_area2273 to i16**
  %overflow_arg_area.next2274 = getelementptr i8, i8* %overflow_arg_area2273, i32 8
  store i8* %overflow_arg_area.next2274, i8** %overflow_arg_area_p2272, align 8
  br label %vaarg.end2275

vaarg.end2275:                                    ; preds = %vaarg.in_mem2271, %vaarg.in_reg2269
  %vaarg.addr2276 = phi i16** [ %1172, %vaarg.in_reg2269 ], [ %1174, %vaarg.in_mem2271 ]
  %1175 = load i16*, i16** %vaarg.addr2276, align 8
  store i16 %conv2264, i16* %1175, align 2
  br label %sw.epilog2346

sw.default2277:                                   ; preds = %if.then2247
  %1176 = load i32, i32* %i, align 4
  %1177 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay2278 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %1177, i64 0, i64 0
  %gp_offset_p2279 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2278, i32 0, i32 0
  %gp_offset2280 = load i32, i32* %gp_offset_p2279, align 8
  %fits_in_gp2281 = icmp ule i32 %gp_offset2280, 40
  br i1 %fits_in_gp2281, label %vaarg.in_reg2282, label %vaarg.in_mem2284

vaarg.in_reg2282:                                 ; preds = %sw.default2277
  %1178 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2278, i32 0, i32 3
  %reg_save_area2283 = load i8*, i8** %1178, align 8
  %1179 = getelementptr i8, i8* %reg_save_area2283, i32 %gp_offset2280
  %1180 = bitcast i8* %1179 to i32**
  %1181 = add i32 %gp_offset2280, 8
  store i32 %1181, i32* %gp_offset_p2279, align 8
  br label %vaarg.end2288

vaarg.in_mem2284:                                 ; preds = %sw.default2277
  %overflow_arg_area_p2285 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2278, i32 0, i32 2
  %overflow_arg_area2286 = load i8*, i8** %overflow_arg_area_p2285, align 8
  %1182 = bitcast i8* %overflow_arg_area2286 to i32**
  %overflow_arg_area.next2287 = getelementptr i8, i8* %overflow_arg_area2286, i32 8
  store i8* %overflow_arg_area.next2287, i8** %overflow_arg_area_p2285, align 8
  br label %vaarg.end2288

vaarg.end2288:                                    ; preds = %vaarg.in_mem2284, %vaarg.in_reg2282
  %vaarg.addr2289 = phi i32** [ %1180, %vaarg.in_reg2282 ], [ %1182, %vaarg.in_mem2284 ]
  %1183 = load i32*, i32** %vaarg.addr2289, align 8
  store i32 %1176, i32* %1183, align 4
  br label %sw.epilog2346

sw.bb2290:                                        ; preds = %if.then2247
  %1184 = load i32, i32* %i, align 4
  %conv2291 = sext i32 %1184 to i64
  %1185 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay2292 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %1185, i64 0, i64 0
  %gp_offset_p2293 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2292, i32 0, i32 0
  %gp_offset2294 = load i32, i32* %gp_offset_p2293, align 8
  %fits_in_gp2295 = icmp ule i32 %gp_offset2294, 40
  br i1 %fits_in_gp2295, label %vaarg.in_reg2296, label %vaarg.in_mem2298

vaarg.in_reg2296:                                 ; preds = %sw.bb2290
  %1186 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2292, i32 0, i32 3
  %reg_save_area2297 = load i8*, i8** %1186, align 8
  %1187 = getelementptr i8, i8* %reg_save_area2297, i32 %gp_offset2294
  %1188 = bitcast i8* %1187 to i64**
  %1189 = add i32 %gp_offset2294, 8
  store i32 %1189, i32* %gp_offset_p2293, align 8
  br label %vaarg.end2302

vaarg.in_mem2298:                                 ; preds = %sw.bb2290
  %overflow_arg_area_p2299 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2292, i32 0, i32 2
  %overflow_arg_area2300 = load i8*, i8** %overflow_arg_area_p2299, align 8
  %1190 = bitcast i8* %overflow_arg_area2300 to i64**
  %overflow_arg_area.next2301 = getelementptr i8, i8* %overflow_arg_area2300, i32 8
  store i8* %overflow_arg_area.next2301, i8** %overflow_arg_area_p2299, align 8
  br label %vaarg.end2302

vaarg.end2302:                                    ; preds = %vaarg.in_mem2298, %vaarg.in_reg2296
  %vaarg.addr2303 = phi i64** [ %1188, %vaarg.in_reg2296 ], [ %1190, %vaarg.in_mem2298 ]
  %1191 = load i64*, i64** %vaarg.addr2303, align 8
  store i64 %conv2291, i64* %1191, align 8
  br label %sw.epilog2346

sw.bb2304:                                        ; preds = %if.then2247
  %1192 = load i32, i32* %i, align 4
  %conv2305 = sext i32 %1192 to i64
  %1193 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay2306 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %1193, i64 0, i64 0
  %gp_offset_p2307 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2306, i32 0, i32 0
  %gp_offset2308 = load i32, i32* %gp_offset_p2307, align 8
  %fits_in_gp2309 = icmp ule i32 %gp_offset2308, 40
  br i1 %fits_in_gp2309, label %vaarg.in_reg2310, label %vaarg.in_mem2312

vaarg.in_reg2310:                                 ; preds = %sw.bb2304
  %1194 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2306, i32 0, i32 3
  %reg_save_area2311 = load i8*, i8** %1194, align 8
  %1195 = getelementptr i8, i8* %reg_save_area2311, i32 %gp_offset2308
  %1196 = bitcast i8* %1195 to i64**
  %1197 = add i32 %gp_offset2308, 8
  store i32 %1197, i32* %gp_offset_p2307, align 8
  br label %vaarg.end2316

vaarg.in_mem2312:                                 ; preds = %sw.bb2304
  %overflow_arg_area_p2313 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2306, i32 0, i32 2
  %overflow_arg_area2314 = load i8*, i8** %overflow_arg_area_p2313, align 8
  %1198 = bitcast i8* %overflow_arg_area2314 to i64**
  %overflow_arg_area.next2315 = getelementptr i8, i8* %overflow_arg_area2314, i32 8
  store i8* %overflow_arg_area.next2315, i8** %overflow_arg_area_p2313, align 8
  br label %vaarg.end2316

vaarg.end2316:                                    ; preds = %vaarg.in_mem2312, %vaarg.in_reg2310
  %vaarg.addr2317 = phi i64** [ %1196, %vaarg.in_reg2310 ], [ %1198, %vaarg.in_mem2312 ]
  %1199 = load i64*, i64** %vaarg.addr2317, align 8
  store i64 %conv2305, i64* %1199, align 8
  br label %sw.epilog2346

sw.bb2318:                                        ; preds = %if.then2247
  %1200 = load i32, i32* %i, align 4
  %conv2319 = sext i32 %1200 to i64
  %1201 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay2320 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %1201, i64 0, i64 0
  %gp_offset_p2321 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2320, i32 0, i32 0
  %gp_offset2322 = load i32, i32* %gp_offset_p2321, align 8
  %fits_in_gp2323 = icmp ule i32 %gp_offset2322, 40
  br i1 %fits_in_gp2323, label %vaarg.in_reg2324, label %vaarg.in_mem2326

vaarg.in_reg2324:                                 ; preds = %sw.bb2318
  %1202 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2320, i32 0, i32 3
  %reg_save_area2325 = load i8*, i8** %1202, align 8
  %1203 = getelementptr i8, i8* %reg_save_area2325, i32 %gp_offset2322
  %1204 = bitcast i8* %1203 to i64**
  %1205 = add i32 %gp_offset2322, 8
  store i32 %1205, i32* %gp_offset_p2321, align 8
  br label %vaarg.end2330

vaarg.in_mem2326:                                 ; preds = %sw.bb2318
  %overflow_arg_area_p2327 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2320, i32 0, i32 2
  %overflow_arg_area2328 = load i8*, i8** %overflow_arg_area_p2327, align 8
  %1206 = bitcast i8* %overflow_arg_area2328 to i64**
  %overflow_arg_area.next2329 = getelementptr i8, i8* %overflow_arg_area2328, i32 8
  store i8* %overflow_arg_area.next2329, i8** %overflow_arg_area_p2327, align 8
  br label %vaarg.end2330

vaarg.end2330:                                    ; preds = %vaarg.in_mem2326, %vaarg.in_reg2324
  %vaarg.addr2331 = phi i64** [ %1204, %vaarg.in_reg2324 ], [ %1206, %vaarg.in_mem2326 ]
  %1207 = load i64*, i64** %vaarg.addr2331, align 8
  store i64 %conv2319, i64* %1207, align 8
  br label %sw.epilog2346

sw.bb2332:                                        ; preds = %if.then2247
  %1208 = load i32, i32* %i, align 4
  %conv2333 = sext i32 %1208 to i64
  %1209 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay2334 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %1209, i64 0, i64 0
  %gp_offset_p2335 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2334, i32 0, i32 0
  %gp_offset2336 = load i32, i32* %gp_offset_p2335, align 8
  %fits_in_gp2337 = icmp ule i32 %gp_offset2336, 40
  br i1 %fits_in_gp2337, label %vaarg.in_reg2338, label %vaarg.in_mem2340

vaarg.in_reg2338:                                 ; preds = %sw.bb2332
  %1210 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2334, i32 0, i32 3
  %reg_save_area2339 = load i8*, i8** %1210, align 8
  %1211 = getelementptr i8, i8* %reg_save_area2339, i32 %gp_offset2336
  %1212 = bitcast i8* %1211 to i64**
  %1213 = add i32 %gp_offset2336, 8
  store i32 %1213, i32* %gp_offset_p2335, align 8
  br label %vaarg.end2344

vaarg.in_mem2340:                                 ; preds = %sw.bb2332
  %overflow_arg_area_p2341 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2334, i32 0, i32 2
  %overflow_arg_area2342 = load i8*, i8** %overflow_arg_area_p2341, align 8
  %1214 = bitcast i8* %overflow_arg_area2342 to i64**
  %overflow_arg_area.next2343 = getelementptr i8, i8* %overflow_arg_area2342, i32 8
  store i8* %overflow_arg_area.next2343, i8** %overflow_arg_area_p2341, align 8
  br label %vaarg.end2344

vaarg.end2344:                                    ; preds = %vaarg.in_mem2340, %vaarg.in_reg2338
  %vaarg.addr2345 = phi i64** [ %1212, %vaarg.in_reg2338 ], [ %1214, %vaarg.in_mem2340 ]
  %1215 = load i64*, i64** %vaarg.addr2345, align 8
  store i64 %conv2333, i64* %1215, align 8
  br label %sw.epilog2346

sw.epilog2346:                                    ; preds = %vaarg.end2344, %vaarg.end2330, %vaarg.end2316, %vaarg.end2302, %vaarg.end2288, %vaarg.end2275, %vaarg.end2261
  br label %if.end2356

if.else2347:                                      ; preds = %if.end2241
  %1216 = load %struct.sv*, %struct.sv** %argsv, align 8
  %1217 = load i8, i8* %has_utf8, align 1
  %tobool2348 = trunc i8 %1217 to i1
  br i1 %tobool2348, label %cond.true2350, label %cond.false2352

cond.true2350:                                    ; preds = %if.else2347
  %1218 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call2351 = call i64 @Perl_sv_len_utf8(%struct.sv* %1218)
  br label %cond.end2354

cond.false2352:                                   ; preds = %if.else2347
  %1219 = load i32, i32* %i, align 4
  %conv2353 = sext i32 %1219 to i64
  br label %cond.end2354

cond.end2354:                                     ; preds = %cond.false2352, %cond.true2350
  %cond2355 = phi i64 [ %call2351, %cond.true2350 ], [ %conv2353, %cond.false2352 ]
  call void @Perl_sv_setuv_mg(%struct.sv* %1216, i64 %cond2355)
  br label %if.end2356

if.end2356:                                       ; preds = %cond.end2354, %sw.epilog2346
  br label %for.inc2648

sw.default2357:                                   ; preds = %if.end1057
  br label %unknown

unknown:                                          ; preds = %sw.default2357, %if.then2240, %sw.bb1750, %if.then1743, %if.then1283, %if.then1134, %if.then1062, %if.then976, %if.then735, %if.then732, %if.then540, %if.else530
  %1220 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %tobool2358 = icmp ne [1 x %struct.__va_list_tag]* %1220, null
  br i1 %tobool2358, label %if.end2413, label %land.lhs.true2359

land.lhs.true2359:                                ; preds = %unknown
  %1221 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type2360 = getelementptr inbounds %struct.op, %struct.op* %1221, i32 0, i32 4
  %bf.load2361 = load i16, i16* %op_type2360, align 8
  %bf.clear2362 = and i16 %bf.load2361, 511
  %bf.cast2363 = zext i16 %bf.clear2362 to i32
  %cmp2364 = icmp eq i32 %bf.cast2363, 237
  br i1 %cmp2364, label %land.lhs.true2373, label %lor.lhs.false2366

lor.lhs.false2366:                                ; preds = %land.lhs.true2359
  %1222 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type2367 = getelementptr inbounds %struct.op, %struct.op* %1222, i32 0, i32 4
  %bf.load2368 = load i16, i16* %op_type2367, align 8
  %bf.clear2369 = and i16 %bf.load2368, 511
  %bf.cast2370 = zext i16 %bf.clear2369 to i32
  %cmp2371 = icmp eq i32 %bf.cast2370, 125
  br i1 %cmp2371, label %land.lhs.true2373, label %if.end2413

land.lhs.true2373:                                ; preds = %lor.lhs.false2366, %land.lhs.true2359
  %call2374 = call zeroext i1 @Perl_ckwarn(i32 34)
  br i1 %call2374, label %if.then2376, label %if.end2413

if.then2376:                                      ; preds = %land.lhs.true2373
  %call2377 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call2377, %struct.sv** %msg, align 8
  %1223 = load %struct.sv*, %struct.sv** %msg, align 8
  %1224 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type2378 = getelementptr inbounds %struct.op, %struct.op* %1224, i32 0, i32 4
  %bf.load2379 = load i16, i16* %op_type2378, align 8
  %bf.clear2380 = and i16 %bf.load2379, 511
  %bf.cast2381 = zext i16 %bf.clear2380 to i32
  %cmp2382 = icmp eq i32 %bf.cast2381, 237
  %1225 = zext i1 %cmp2382 to i64
  %cond2384 = select i1 %cmp2382, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.77, i64 0, i64 0)
  call void (%struct.sv*, i8*, ...) @Perl_sv_setpvf(%struct.sv* %1223, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.76, i64 0, i64 0), i8* %cond2384)
  %1226 = load i8*, i8** %fmtstart, align 8
  %1227 = load i8*, i8** %patend, align 8
  %cmp2385 = icmp ult i8* %1226, %1227
  br i1 %cmp2385, label %if.then2387, label %if.else2411

if.then2387:                                      ; preds = %if.then2376
  %1228 = load i8*, i8** %q, align 8
  %1229 = load i8*, i8** %patend, align 8
  %cmp2388 = icmp ult i8* %1228, %1229
  br i1 %cmp2388, label %cond.true2390, label %cond.false2391

cond.true2390:                                    ; preds = %if.then2387
  %1230 = load i8*, i8** %q, align 8
  br label %cond.end2392

cond.false2391:                                   ; preds = %if.then2387
  %1231 = load i8*, i8** %patend, align 8
  br label %cond.end2392

cond.end2392:                                     ; preds = %cond.false2391, %cond.true2390
  %cond2393 = phi i8* [ %1230, %cond.true2390 ], [ %1231, %cond.false2391 ]
  store i8* %cond2393, i8** %fmtend, align 8
  %1232 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %1232, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.78, i64 0, i64 0), i64 2, i32 2)
  %1233 = load i8*, i8** %fmtstart, align 8
  store i8* %1233, i8** %f, align 8
  br label %for.cond2394

for.cond2394:                                     ; preds = %for.inc2408, %cond.end2392
  %1234 = load i8*, i8** %f, align 8
  %1235 = load i8*, i8** %fmtend, align 8
  %cmp2395 = icmp ult i8* %1234, %1235
  br i1 %cmp2395, label %for.body2397, label %for.end2410

for.body2397:                                     ; preds = %for.cond2394
  %1236 = load i8*, i8** %f, align 8
  %1237 = load i8, i8* %1236, align 1
  %idxprom2398 = zext i8 %1237 to i64
  %arrayidx2399 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom2398
  %1238 = load i32, i32* %arrayidx2399, align 4
  %and2400 = and i32 %1238, 16448
  %cmp2401 = icmp eq i32 %and2400, 16448
  br i1 %cmp2401, label %if.then2403, label %if.else2404

if.then2403:                                      ; preds = %for.body2397
  %1239 = load %struct.sv*, %struct.sv** %msg, align 8
  %1240 = load i8*, i8** %f, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %1239, i8* %1240, i64 1, i32 0)
  br label %if.end2407

if.else2404:                                      ; preds = %for.body2397
  %1241 = load %struct.sv*, %struct.sv** %msg, align 8
  %1242 = load i8*, i8** %f, align 8
  %1243 = load i8, i8* %1242, align 1
  %conv2405 = sext i8 %1243 to i64
  %and2406 = and i64 %conv2405, 255
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %1241, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.79, i64 0, i64 0), i64 %and2406)
  br label %if.end2407

if.end2407:                                       ; preds = %if.else2404, %if.then2403
  br label %for.inc2408

for.inc2408:                                      ; preds = %if.end2407
  %1244 = load i8*, i8** %f, align 8
  %incdec.ptr2409 = getelementptr inbounds i8, i8* %1244, i32 1
  store i8* %incdec.ptr2409, i8** %f, align 8
  br label %for.cond2394

for.end2410:                                      ; preds = %for.cond2394
  %1245 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %1245, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.80, i64 0, i64 0), i64 1, i32 2)
  br label %if.end2412

if.else2411:                                      ; preds = %if.then2376
  %1246 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %1246, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.81, i64 0, i64 0), i64 13, i32 2)
  br label %if.end2412

if.end2412:                                       ; preds = %if.else2411, %for.end2410
  %1247 = load %struct.sv*, %struct.sv** %msg, align 8
  %1248 = bitcast %struct.sv* %1247 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 34, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.82, i64 0, i64 0), i8* %1248)
  br label %if.end2413

if.end2413:                                       ; preds = %if.end2412, %land.lhs.true2373, %lor.lhs.false2366, %unknown
  %1249 = load i8, i8* %c, align 1
  %conv2414 = sext i8 %1249 to i32
  %cmp2415 = icmp eq i32 %conv2414, 0
  br i1 %cmp2415, label %if.then2417, label %if.end2419

if.then2417:                                      ; preds = %if.end2413
  %1250 = load i8*, i8** %q, align 8
  %incdec.ptr2418 = getelementptr inbounds i8, i8* %1250, i32 -1
  store i8* %incdec.ptr2418, i8** %q, align 8
  br label %if.end2419

if.end2419:                                       ; preds = %if.then2417, %if.end2413
  %1251 = load i8*, i8** %p, align 8
  store i8* %1251, i8** %eptr, align 8
  %1252 = load i8*, i8** %q, align 8
  %1253 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast2420 = ptrtoint i8* %1252 to i64
  %sub.ptr.rhs.cast2421 = ptrtoint i8* %1253 to i64
  %sub.ptr.sub2422 = sub i64 %sub.ptr.lhs.cast2420, %sub.ptr.rhs.cast2421
  store i64 %sub.ptr.sub2422, i64* %elen, align 8
  %1254 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2423 = getelementptr inbounds %struct.sv, %struct.sv* %1254, i32 0, i32 2
  %1255 = load i32, i32* %sv_flags2423, align 4
  %and2424 = and i32 %1255, 268435456
  %tobool2425 = icmp ne i32 %and2424, 0
  br i1 %tobool2425, label %cond.true2434, label %lor.lhs.false2426

lor.lhs.false2426:                                ; preds = %if.end2419
  %1256 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2427 = getelementptr inbounds %struct.sv, %struct.sv* %1256, i32 0, i32 0
  %1257 = load i8*, i8** %sv_any2427, align 8
  %1258 = bitcast i8* %1257 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %1258, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  %1259 = load i64, i64* %xpvlenu_len, align 8
  %1260 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2428 = getelementptr inbounds %struct.sv, %struct.sv* %1260, i32 0, i32 0
  %1261 = load i8*, i8** %sv_any2428, align 8
  %1262 = bitcast i8* %1261 to %struct.xpv*
  %xpv_cur2429 = getelementptr inbounds %struct.xpv, %struct.xpv* %1262, i32 0, i32 2
  %1263 = load i64, i64* %xpv_cur2429, align 8
  %1264 = load i64, i64* %elen, align 8
  %add2430 = add i64 %1263, %1264
  %add2431 = add i64 %add2430, 1
  %cmp2432 = icmp ult i64 %1259, %add2431
  br i1 %cmp2432, label %cond.true2434, label %cond.false2440

cond.true2434:                                    ; preds = %lor.lhs.false2426, %if.end2419
  %1265 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1266 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2435 = getelementptr inbounds %struct.sv, %struct.sv* %1266, i32 0, i32 0
  %1267 = load i8*, i8** %sv_any2435, align 8
  %1268 = bitcast i8* %1267 to %struct.xpv*
  %xpv_cur2436 = getelementptr inbounds %struct.xpv, %struct.xpv* %1268, i32 0, i32 2
  %1269 = load i64, i64* %xpv_cur2436, align 8
  %1270 = load i64, i64* %elen, align 8
  %add2437 = add i64 %1269, %1270
  %add2438 = add i64 %add2437, 1
  %call2439 = call i8* @Perl_sv_grow(%struct.sv* %1265, i64 %add2438)
  br label %cond.end2443

cond.false2440:                                   ; preds = %lor.lhs.false2426
  %1271 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u2441 = getelementptr inbounds %struct.sv, %struct.sv* %1271, i32 0, i32 3
  %svu_pv2442 = bitcast %union.anon* %sv_u2441 to i8**
  %1272 = load i8*, i8** %svu_pv2442, align 8
  br label %cond.end2443

cond.end2443:                                     ; preds = %cond.false2440, %cond.true2434
  %cond2444 = phi i8* [ %call2439, %cond.true2434 ], [ %1272, %cond.false2440 ]
  %1273 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u2445 = getelementptr inbounds %struct.sv, %struct.sv* %1273, i32 0, i32 3
  %svu_pv2446 = bitcast %union.anon* %sv_u2445 to i8**
  %1274 = load i8*, i8** %svu_pv2446, align 8
  %1275 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2447 = getelementptr inbounds %struct.sv, %struct.sv* %1275, i32 0, i32 0
  %1276 = load i8*, i8** %sv_any2447, align 8
  %1277 = bitcast i8* %1276 to %struct.xpv*
  %xpv_cur2448 = getelementptr inbounds %struct.xpv, %struct.xpv* %1277, i32 0, i32 2
  %1278 = load i64, i64* %xpv_cur2448, align 8
  %add.ptr2449 = getelementptr inbounds i8, i8* %1274, i64 %1278
  store i8* %add.ptr2449, i8** %p, align 8
  %1279 = load i8*, i8** %p, align 8
  %1280 = load i8*, i8** %eptr, align 8
  %1281 = load i64, i64* %elen, align 8
  %mul2450 = mul i64 %1281, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1279, i8* align 1 %1280, i64 %mul2450, i1 false)
  %1282 = load i64, i64* %elen, align 8
  %1283 = load i8*, i8** %p, align 8
  %add.ptr2451 = getelementptr inbounds i8, i8* %1283, i64 %1282
  store i8* %add.ptr2451, i8** %p, align 8
  %1284 = load i8*, i8** %p, align 8
  store i8 0, i8* %1284, align 1
  br label %do.body2452

do.body2452:                                      ; preds = %cond.end2443
  %1285 = load i8*, i8** %p, align 8
  %1286 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u2453 = getelementptr inbounds %struct.sv, %struct.sv* %1286, i32 0, i32 3
  %svu_pv2454 = bitcast %union.anon* %sv_u2453 to i8**
  %1287 = load i8*, i8** %svu_pv2454, align 8
  %add.ptr2455 = getelementptr inbounds i8, i8* %1287, i64 0
  %sub.ptr.lhs.cast2456 = ptrtoint i8* %1285 to i64
  %sub.ptr.rhs.cast2457 = ptrtoint i8* %add.ptr2455 to i64
  %sub.ptr.sub2458 = sub i64 %sub.ptr.lhs.cast2456, %sub.ptr.rhs.cast2457
  %1288 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2459 = getelementptr inbounds %struct.sv, %struct.sv* %1288, i32 0, i32 0
  %1289 = load i8*, i8** %sv_any2459, align 8
  %1290 = bitcast i8* %1289 to %struct.xpv*
  %xpv_cur2460 = getelementptr inbounds %struct.xpv, %struct.xpv* %1290, i32 0, i32 2
  store i64 %sub.ptr.sub2458, i64* %xpv_cur2460, align 8
  br label %do.end2462

do.end2462:                                       ; preds = %do.body2452
  %1291 = load i32, i32* %osvix, align 4
  store i32 %1291, i32* %svix, align 4
  br label %for.inc2648

sw.epilog2463:                                    ; preds = %float_converted, %if.then1915, %if.end1739, %if.end1273
  %1292 = load i8, i8* %is_utf8, align 1
  %tobool2464 = trunc i8 %1292 to i1
  %conv2465 = zext i1 %tobool2464 to i32
  %1293 = load i8, i8* %has_utf8, align 1
  %tobool2466 = trunc i8 %1293 to i1
  %conv2467 = zext i1 %tobool2466 to i32
  %cmp2468 = icmp ne i32 %conv2465, %conv2467
  br i1 %cmp2468, label %if.then2470, label %if.end2494

if.then2470:                                      ; preds = %sw.epilog2463
  %1294 = load i8, i8* %is_utf8, align 1
  %tobool2471 = trunc i8 %1294 to i1
  br i1 %tobool2471, label %if.then2472, label %if.else2479

if.then2472:                                      ; preds = %if.then2470
  %1295 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2473 = getelementptr inbounds %struct.sv, %struct.sv* %1295, i32 0, i32 0
  %1296 = load i8*, i8** %sv_any2473, align 8
  %1297 = bitcast i8* %1296 to %struct.xpv*
  %xpv_cur2474 = getelementptr inbounds %struct.xpv, %struct.xpv* %1297, i32 0, i32 2
  %1298 = load i64, i64* %xpv_cur2474, align 8
  %tobool2475 = icmp ne i64 %1298, 0
  br i1 %tobool2475, label %if.then2476, label %if.end2478

if.then2476:                                      ; preds = %if.then2472
  %1299 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call2477 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %1299, i32 2, i64 0)
  br label %if.end2478

if.end2478:                                       ; preds = %if.then2476, %if.then2472
  br label %if.end2493

if.else2479:                                      ; preds = %if.then2470
  %1300 = load i64, i64* %elen, align 8
  store i64 %1300, i64* %old_elen, align 8
  %1301 = load i8*, i8** %eptr, align 8
  %1302 = load i64, i64* %elen, align 8
  %call2481 = call %struct.sv* @Perl_newSVpvn_flags(i8* %1301, i64 %1302, i32 524288)
  store %struct.sv* %call2481, %struct.sv** %nsv2480, align 8
  %1303 = load %struct.sv*, %struct.sv** %nsv2480, align 8
  %call2482 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %1303, i32 2, i64 0)
  %1304 = load %struct.sv*, %struct.sv** %nsv2480, align 8
  %sv_u2483 = getelementptr inbounds %struct.sv, %struct.sv* %1304, i32 0, i32 3
  %svu_pv2484 = bitcast %union.anon* %sv_u2483 to i8**
  %1305 = load i8*, i8** %svu_pv2484, align 8
  %add.ptr2485 = getelementptr inbounds i8, i8* %1305, i64 0
  store i8* %add.ptr2485, i8** %eptr, align 8
  %1306 = load %struct.sv*, %struct.sv** %nsv2480, align 8
  %sv_any2486 = getelementptr inbounds %struct.sv, %struct.sv* %1306, i32 0, i32 0
  %1307 = load i8*, i8** %sv_any2486, align 8
  %1308 = bitcast i8* %1307 to %struct.xpv*
  %xpv_cur2487 = getelementptr inbounds %struct.xpv, %struct.xpv* %1308, i32 0, i32 2
  %1309 = load i64, i64* %xpv_cur2487, align 8
  store i64 %1309, i64* %elen, align 8
  %1310 = load i64, i64* %width, align 8
  %tobool2488 = icmp ne i64 %1310, 0
  br i1 %tobool2488, label %if.then2489, label %if.end2492

if.then2489:                                      ; preds = %if.else2479
  %1311 = load i64, i64* %elen, align 8
  %1312 = load i64, i64* %old_elen, align 8
  %sub2490 = sub i64 %1311, %1312
  %1313 = load i64, i64* %width, align 8
  %add2491 = add i64 %1313, %sub2490
  store i64 %add2491, i64* %width, align 8
  br label %if.end2492

if.end2492:                                       ; preds = %if.then2489, %if.else2479
  store i8 1, i8* %is_utf8, align 1
  br label %if.end2493

if.end2493:                                       ; preds = %if.end2492, %if.end2478
  br label %if.end2494

if.end2494:                                       ; preds = %if.end2493, %sw.epilog2463
  %1314 = load i64, i64* %esignlen, align 8
  %1315 = load i64, i64* %zeros, align 8
  %add2495 = add i64 %1314, %1315
  %1316 = load i64, i64* %elen, align 8
  %add2496 = add i64 %add2495, %1316
  store i64 %add2496, i64* %have, align 8
  %1317 = load i64, i64* %have, align 8
  %1318 = load i64, i64* %zeros, align 8
  %cmp2497 = icmp ult i64 %1317, %1318
  br i1 %cmp2497, label %if.then2499, label %if.end2500

if.then2499:                                      ; preds = %if.end2494
  call void @S_croak_memory_wrap()
  br label %if.end2500

if.end2500:                                       ; preds = %if.then2499, %if.end2494
  %1319 = load i64, i64* %have, align 8
  %1320 = load i64, i64* %width, align 8
  %cmp2501 = icmp ugt i64 %1319, %1320
  br i1 %cmp2501, label %cond.true2503, label %cond.false2504

cond.true2503:                                    ; preds = %if.end2500
  %1321 = load i64, i64* %have, align 8
  br label %cond.end2505

cond.false2504:                                   ; preds = %if.end2500
  %1322 = load i64, i64* %width, align 8
  br label %cond.end2505

cond.end2505:                                     ; preds = %cond.false2504, %cond.true2503
  %cond2506 = phi i64 [ %1321, %cond.true2503 ], [ %1322, %cond.false2504 ]
  store i64 %cond2506, i64* %need, align 8
  %1323 = load i64, i64* %need, align 8
  %1324 = load i64, i64* %have, align 8
  %sub2507 = sub i64 %1323, %1324
  store i64 %sub2507, i64* %gap, align 8
  %1325 = load i64, i64* %need, align 8
  %1326 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2508 = getelementptr inbounds %struct.sv, %struct.sv* %1326, i32 0, i32 0
  %1327 = load i8*, i8** %sv_any2508, align 8
  %1328 = bitcast i8* %1327 to %struct.xpv*
  %xpv_cur2509 = getelementptr inbounds %struct.xpv, %struct.xpv* %1328, i32 0, i32 2
  %1329 = load i64, i64* %xpv_cur2509, align 8
  %sub2510 = sub i64 -1, %1329
  %1330 = load i64, i64* %dotstrlen, align 8
  %sub2511 = sub i64 %sub2510, %1330
  %sub2512 = sub i64 %sub2511, 1
  %cmp2513 = icmp uge i64 %1325, %sub2512
  br i1 %cmp2513, label %if.then2515, label %if.end2516

if.then2515:                                      ; preds = %cond.end2505
  call void @S_croak_memory_wrap()
  br label %if.end2516

if.end2516:                                       ; preds = %if.then2515, %cond.end2505
  %1331 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2517 = getelementptr inbounds %struct.sv, %struct.sv* %1331, i32 0, i32 2
  %1332 = load i32, i32* %sv_flags2517, align 4
  %and2518 = and i32 %1332, 268435456
  %tobool2519 = icmp ne i32 %and2518, 0
  br i1 %tobool2519, label %cond.true2531, label %lor.lhs.false2520

lor.lhs.false2520:                                ; preds = %if.end2516
  %1333 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2521 = getelementptr inbounds %struct.sv, %struct.sv* %1333, i32 0, i32 0
  %1334 = load i8*, i8** %sv_any2521, align 8
  %1335 = bitcast i8* %1334 to %struct.xpv*
  %xpv_len_u2522 = getelementptr inbounds %struct.xpv, %struct.xpv* %1335, i32 0, i32 3
  %xpvlenu_len2523 = bitcast %union.anon.19* %xpv_len_u2522 to i64*
  %1336 = load i64, i64* %xpvlenu_len2523, align 8
  %1337 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2524 = getelementptr inbounds %struct.sv, %struct.sv* %1337, i32 0, i32 0
  %1338 = load i8*, i8** %sv_any2524, align 8
  %1339 = bitcast i8* %1338 to %struct.xpv*
  %xpv_cur2525 = getelementptr inbounds %struct.xpv, %struct.xpv* %1339, i32 0, i32 2
  %1340 = load i64, i64* %xpv_cur2525, align 8
  %1341 = load i64, i64* %need, align 8
  %add2526 = add i64 %1340, %1341
  %1342 = load i64, i64* %dotstrlen, align 8
  %add2527 = add i64 %add2526, %1342
  %add2528 = add i64 %add2527, 1
  %cmp2529 = icmp ult i64 %1336, %add2528
  br i1 %cmp2529, label %cond.true2531, label %cond.false2538

cond.true2531:                                    ; preds = %lor.lhs.false2520, %if.end2516
  %1343 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1344 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2532 = getelementptr inbounds %struct.sv, %struct.sv* %1344, i32 0, i32 0
  %1345 = load i8*, i8** %sv_any2532, align 8
  %1346 = bitcast i8* %1345 to %struct.xpv*
  %xpv_cur2533 = getelementptr inbounds %struct.xpv, %struct.xpv* %1346, i32 0, i32 2
  %1347 = load i64, i64* %xpv_cur2533, align 8
  %1348 = load i64, i64* %need, align 8
  %add2534 = add i64 %1347, %1348
  %1349 = load i64, i64* %dotstrlen, align 8
  %add2535 = add i64 %add2534, %1349
  %add2536 = add i64 %add2535, 1
  %call2537 = call i8* @Perl_sv_grow(%struct.sv* %1343, i64 %add2536)
  br label %cond.end2541

cond.false2538:                                   ; preds = %lor.lhs.false2520
  %1350 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u2539 = getelementptr inbounds %struct.sv, %struct.sv* %1350, i32 0, i32 3
  %svu_pv2540 = bitcast %union.anon* %sv_u2539 to i8**
  %1351 = load i8*, i8** %svu_pv2540, align 8
  br label %cond.end2541

cond.end2541:                                     ; preds = %cond.false2538, %cond.true2531
  %cond2542 = phi i8* [ %call2537, %cond.true2531 ], [ %1351, %cond.false2538 ]
  %1352 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u2543 = getelementptr inbounds %struct.sv, %struct.sv* %1352, i32 0, i32 3
  %svu_pv2544 = bitcast %union.anon* %sv_u2543 to i8**
  %1353 = load i8*, i8** %svu_pv2544, align 8
  %1354 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2545 = getelementptr inbounds %struct.sv, %struct.sv* %1354, i32 0, i32 0
  %1355 = load i8*, i8** %sv_any2545, align 8
  %1356 = bitcast i8* %1355 to %struct.xpv*
  %xpv_cur2546 = getelementptr inbounds %struct.xpv, %struct.xpv* %1356, i32 0, i32 2
  %1357 = load i64, i64* %xpv_cur2546, align 8
  %add.ptr2547 = getelementptr inbounds i8, i8* %1353, i64 %1357
  store i8* %add.ptr2547, i8** %p, align 8
  %1358 = load i64, i64* %esignlen, align 8
  %tobool2548 = icmp ne i64 %1358, 0
  br i1 %tobool2548, label %land.lhs.true2549, label %if.end2566

land.lhs.true2549:                                ; preds = %cond.end2541
  %1359 = load i8, i8* %fill, align 1
  %conv2550 = sext i8 %1359 to i32
  %cmp2551 = icmp eq i32 %conv2550, 48
  br i1 %cmp2551, label %if.then2553, label %if.end2566

if.then2553:                                      ; preds = %land.lhs.true2549
  store i32 0, i32* %i2554, align 4
  br label %for.cond2555

for.cond2555:                                     ; preds = %for.inc2563, %if.then2553
  %1360 = load i32, i32* %i2554, align 4
  %1361 = load i64, i64* %esignlen, align 8
  %conv2556 = trunc i64 %1361 to i32
  %cmp2557 = icmp slt i32 %1360, %conv2556
  br i1 %cmp2557, label %for.body2559, label %for.end2565

for.body2559:                                     ; preds = %for.cond2555
  %1362 = load i32, i32* %i2554, align 4
  %idxprom2560 = sext i32 %1362 to i64
  %arrayidx2561 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i64 0, i64 %idxprom2560
  %1363 = load i8, i8* %arrayidx2561, align 1
  %1364 = load i8*, i8** %p, align 8
  %incdec.ptr2562 = getelementptr inbounds i8, i8* %1364, i32 1
  store i8* %incdec.ptr2562, i8** %p, align 8
  store i8 %1363, i8* %1364, align 1
  br label %for.inc2563

for.inc2563:                                      ; preds = %for.body2559
  %1365 = load i32, i32* %i2554, align 4
  %inc2564 = add nsw i32 %1365, 1
  store i32 %inc2564, i32* %i2554, align 4
  br label %for.cond2555

for.end2565:                                      ; preds = %for.cond2555
  br label %if.end2566

if.end2566:                                       ; preds = %for.end2565, %land.lhs.true2549, %cond.end2541
  %1366 = load i64, i64* %gap, align 8
  %tobool2567 = icmp ne i64 %1366, 0
  br i1 %tobool2567, label %land.lhs.true2568, label %if.end2573

land.lhs.true2568:                                ; preds = %if.end2566
  %1367 = load i8, i8* %left, align 1
  %tobool2569 = trunc i8 %1367 to i1
  br i1 %tobool2569, label %if.end2573, label %if.then2570

if.then2570:                                      ; preds = %land.lhs.true2568
  %1368 = load i8*, i8** %p, align 8
  %1369 = load i8, i8* %fill, align 1
  %conv2571 = sext i8 %1369 to i32
  %1370 = trunc i32 %conv2571 to i8
  %1371 = load i64, i64* %gap, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1368, i8 %1370, i64 %1371, i1 false)
  %1372 = load i64, i64* %gap, align 8
  %1373 = load i8*, i8** %p, align 8
  %add.ptr2572 = getelementptr inbounds i8, i8* %1373, i64 %1372
  store i8* %add.ptr2572, i8** %p, align 8
  br label %if.end2573

if.end2573:                                       ; preds = %if.then2570, %land.lhs.true2568, %if.end2566
  %1374 = load i64, i64* %esignlen, align 8
  %tobool2574 = icmp ne i64 %1374, 0
  br i1 %tobool2574, label %land.lhs.true2575, label %if.end2592

land.lhs.true2575:                                ; preds = %if.end2573
  %1375 = load i8, i8* %fill, align 1
  %conv2576 = sext i8 %1375 to i32
  %cmp2577 = icmp ne i32 %conv2576, 48
  br i1 %cmp2577, label %if.then2579, label %if.end2592

if.then2579:                                      ; preds = %land.lhs.true2575
  store i32 0, i32* %i2580, align 4
  br label %for.cond2581

for.cond2581:                                     ; preds = %for.inc2589, %if.then2579
  %1376 = load i32, i32* %i2580, align 4
  %1377 = load i64, i64* %esignlen, align 8
  %conv2582 = trunc i64 %1377 to i32
  %cmp2583 = icmp slt i32 %1376, %conv2582
  br i1 %cmp2583, label %for.body2585, label %for.end2591

for.body2585:                                     ; preds = %for.cond2581
  %1378 = load i32, i32* %i2580, align 4
  %idxprom2586 = sext i32 %1378 to i64
  %arrayidx2587 = getelementptr inbounds [4 x i8], [4 x i8]* %esignbuf, i64 0, i64 %idxprom2586
  %1379 = load i8, i8* %arrayidx2587, align 1
  %1380 = load i8*, i8** %p, align 8
  %incdec.ptr2588 = getelementptr inbounds i8, i8* %1380, i32 1
  store i8* %incdec.ptr2588, i8** %p, align 8
  store i8 %1379, i8* %1380, align 1
  br label %for.inc2589

for.inc2589:                                      ; preds = %for.body2585
  %1381 = load i32, i32* %i2580, align 4
  %inc2590 = add nsw i32 %1381, 1
  store i32 %inc2590, i32* %i2580, align 4
  br label %for.cond2581

for.end2591:                                      ; preds = %for.cond2581
  br label %if.end2592

if.end2592:                                       ; preds = %for.end2591, %land.lhs.true2575, %if.end2573
  %1382 = load i64, i64* %zeros, align 8
  %tobool2593 = icmp ne i64 %1382, 0
  br i1 %tobool2593, label %if.then2594, label %if.end2604

if.then2594:                                      ; preds = %if.end2592
  %1383 = load i64, i64* %zeros, align 8
  %conv2596 = trunc i64 %1383 to i32
  store i32 %conv2596, i32* %i2595, align 4
  br label %for.cond2597

for.cond2597:                                     ; preds = %for.inc2601, %if.then2594
  %1384 = load i32, i32* %i2595, align 4
  %tobool2598 = icmp ne i32 %1384, 0
  br i1 %tobool2598, label %for.body2599, label %for.end2603

for.body2599:                                     ; preds = %for.cond2597
  %1385 = load i8*, i8** %p, align 8
  %incdec.ptr2600 = getelementptr inbounds i8, i8* %1385, i32 1
  store i8* %incdec.ptr2600, i8** %p, align 8
  store i8 48, i8* %1385, align 1
  br label %for.inc2601

for.inc2601:                                      ; preds = %for.body2599
  %1386 = load i32, i32* %i2595, align 4
  %dec2602 = add nsw i32 %1386, -1
  store i32 %dec2602, i32* %i2595, align 4
  br label %for.cond2597

for.end2603:                                      ; preds = %for.cond2597
  br label %if.end2604

if.end2604:                                       ; preds = %for.end2603, %if.end2592
  %1387 = load i64, i64* %elen, align 8
  %tobool2605 = icmp ne i64 %1387, 0
  br i1 %tobool2605, label %if.then2606, label %if.end2609

if.then2606:                                      ; preds = %if.end2604
  %1388 = load i8*, i8** %p, align 8
  %1389 = load i8*, i8** %eptr, align 8
  %1390 = load i64, i64* %elen, align 8
  %mul2607 = mul i64 %1390, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1388, i8* align 1 %1389, i64 %mul2607, i1 false)
  %1391 = load i64, i64* %elen, align 8
  %1392 = load i8*, i8** %p, align 8
  %add.ptr2608 = getelementptr inbounds i8, i8* %1392, i64 %1391
  store i8* %add.ptr2608, i8** %p, align 8
  br label %if.end2609

if.end2609:                                       ; preds = %if.then2606, %if.end2604
  %1393 = load i64, i64* %gap, align 8
  %tobool2610 = icmp ne i64 %1393, 0
  br i1 %tobool2610, label %land.lhs.true2611, label %if.end2616

land.lhs.true2611:                                ; preds = %if.end2609
  %1394 = load i8, i8* %left, align 1
  %tobool2612 = trunc i8 %1394 to i1
  br i1 %tobool2612, label %if.then2614, label %if.end2616

if.then2614:                                      ; preds = %land.lhs.true2611
  %1395 = load i8*, i8** %p, align 8
  %1396 = load i64, i64* %gap, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1395, i8 32, i64 %1396, i1 false)
  %1397 = load i64, i64* %gap, align 8
  %1398 = load i8*, i8** %p, align 8
  %add.ptr2615 = getelementptr inbounds i8, i8* %1398, i64 %1397
  store i8* %add.ptr2615, i8** %p, align 8
  br label %if.end2616

if.end2616:                                       ; preds = %if.then2614, %land.lhs.true2611, %if.end2609
  %1399 = load i8, i8* %vectorize, align 1
  %tobool2617 = trunc i8 %1399 to i1
  br i1 %tobool2617, label %if.then2618, label %if.end2625

if.then2618:                                      ; preds = %if.end2616
  %1400 = load i64, i64* %veclen, align 8
  %tobool2619 = icmp ne i64 %1400, 0
  br i1 %tobool2619, label %if.then2620, label %if.else2623

if.then2620:                                      ; preds = %if.then2618
  %1401 = load i8*, i8** %p, align 8
  %1402 = load i8*, i8** %dotstr, align 8
  %1403 = load i64, i64* %dotstrlen, align 8
  %mul2621 = mul i64 %1403, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1401, i8* align 1 %1402, i64 %mul2621, i1 false)
  %1404 = load i64, i64* %dotstrlen, align 8
  %1405 = load i8*, i8** %p, align 8
  %add.ptr2622 = getelementptr inbounds i8, i8* %1405, i64 %1404
  store i8* %add.ptr2622, i8** %p, align 8
  br label %if.end2624

if.else2623:                                      ; preds = %if.then2618
  store i8 0, i8* %vectorize, align 1
  br label %if.end2624

if.end2624:                                       ; preds = %if.else2623, %if.then2620
  br label %if.end2625

if.end2625:                                       ; preds = %if.end2624, %if.end2616
  %1406 = load i8, i8* %is_utf8, align 1
  %tobool2626 = trunc i8 %1406 to i1
  br i1 %tobool2626, label %if.then2627, label %if.end2628

if.then2627:                                      ; preds = %if.end2625
  store i8 1, i8* %has_utf8, align 1
  br label %if.end2628

if.end2628:                                       ; preds = %if.then2627, %if.end2625
  %1407 = load i8, i8* %has_utf8, align 1
  %tobool2629 = trunc i8 %1407 to i1
  br i1 %tobool2629, label %if.then2630, label %if.end2633

if.then2630:                                      ; preds = %if.end2628
  %1408 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags2631 = getelementptr inbounds %struct.sv, %struct.sv* %1408, i32 0, i32 2
  %1409 = load i32, i32* %sv_flags2631, align 4
  %or2632 = or i32 %1409, 536870912
  store i32 %or2632, i32* %sv_flags2631, align 4
  br label %if.end2633

if.end2633:                                       ; preds = %if.then2630, %if.end2628
  %1410 = load i8*, i8** %p, align 8
  store i8 0, i8* %1410, align 1
  br label %do.body2634

do.body2634:                                      ; preds = %if.end2633
  %1411 = load i8*, i8** %p, align 8
  %1412 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u2635 = getelementptr inbounds %struct.sv, %struct.sv* %1412, i32 0, i32 3
  %svu_pv2636 = bitcast %union.anon* %sv_u2635 to i8**
  %1413 = load i8*, i8** %svu_pv2636, align 8
  %add.ptr2637 = getelementptr inbounds i8, i8* %1413, i64 0
  %sub.ptr.lhs.cast2638 = ptrtoint i8* %1411 to i64
  %sub.ptr.rhs.cast2639 = ptrtoint i8* %add.ptr2637 to i64
  %sub.ptr.sub2640 = sub i64 %sub.ptr.lhs.cast2638, %sub.ptr.rhs.cast2639
  %1414 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any2641 = getelementptr inbounds %struct.sv, %struct.sv* %1414, i32 0, i32 0
  %1415 = load i8*, i8** %sv_any2641, align 8
  %1416 = bitcast i8* %1415 to %struct.xpv*
  %xpv_cur2642 = getelementptr inbounds %struct.xpv, %struct.xpv* %1416, i32 0, i32 2
  store i64 %sub.ptr.sub2640, i64* %xpv_cur2642, align 8
  br label %do.end2644

do.end2644:                                       ; preds = %do.body2634
  %1417 = load i8, i8* %vectorize, align 1
  %tobool2645 = trunc i8 %1417 to i1
  br i1 %tobool2645, label %if.then2646, label %if.end2647

if.then2646:                                      ; preds = %do.end2644
  store i64 0, i64* %esignlen, align 8
  br label %vector

if.end2647:                                       ; preds = %do.end2644
  br label %for.inc2648

for.inc2648:                                      ; preds = %if.end2647, %do.end2462, %if.end2356, %if.then1488, %if.then1311
  %1418 = load i8*, i8** %q, align 8
  store i8* %1418, i8** %p, align 8
  br label %for.cond

for.end2649:                                      ; preds = %if.then326, %for.cond
  %1419 = load i8, i8* %no_redundant_warning, align 1
  %tobool2650 = trunc i8 %1419 to i1
  br i1 %tobool2650, label %if.end2684, label %land.lhs.true2651

land.lhs.true2651:                                ; preds = %for.end2649
  %1420 = load i32, i32* %svmax.addr, align 4
  %1421 = load i32, i32* %svix, align 4
  %add2652 = add nsw i32 %1421, 1
  %cmp2653 = icmp sge i32 %1420, %add2652
  br i1 %cmp2653, label %land.lhs.true2655, label %if.end2684

land.lhs.true2655:                                ; preds = %land.lhs.true2651
  %call2656 = call zeroext i1 @Perl_ckwarn(i32 67)
  br i1 %call2656, label %if.then2658, label %if.end2684

if.then2658:                                      ; preds = %land.lhs.true2655
  %1422 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool2659 = icmp ne %struct.op* %1422, null
  br i1 %tobool2659, label %cond.true2660, label %cond.false2681

cond.true2660:                                    ; preds = %if.then2658
  %1423 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type2661 = getelementptr inbounds %struct.op, %struct.op* %1423, i32 0, i32 4
  %bf.load2662 = load i16, i16* %op_type2661, align 8
  %bf.clear2663 = and i16 %bf.load2662, 511
  %bf.cast2664 = zext i16 %bf.clear2663 to i32
  %cmp2665 = icmp eq i32 %bf.cast2664, 380
  br i1 %cmp2665, label %cond.true2667, label %cond.false2672

cond.true2667:                                    ; preds = %cond.true2660
  %1424 = load %struct.op*, %struct.op** @PL_op, align 8
  %call2668 = call i8* @Perl_custom_op_get_field(%struct.op* %1424, i32 2)
  %coerce.dive2670 = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce2669, i32 0, i32 0
  store i8* %call2668, i8** %coerce.dive2670, align 8
  %xop_desc2671 = bitcast %union.XOPRETANY* %coerce2669 to i8**
  %1425 = load i8*, i8** %xop_desc2671, align 8
  br label %cond.end2679

cond.false2672:                                   ; preds = %cond.true2660
  %1426 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type2673 = getelementptr inbounds %struct.op, %struct.op* %1426, i32 0, i32 4
  %bf.load2674 = load i16, i16* %op_type2673, align 8
  %bf.clear2675 = and i16 %bf.load2674, 511
  %bf.cast2676 = zext i16 %bf.clear2675 to i32
  %idxprom2677 = zext i32 %bf.cast2676 to i64
  %arrayidx2678 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom2677
  %1427 = load i8*, i8** %arrayidx2678, align 8
  br label %cond.end2679

cond.end2679:                                     ; preds = %cond.false2672, %cond.true2667
  %cond2680 = phi i8* [ %1425, %cond.true2667 ], [ %1427, %cond.false2672 ]
  br label %cond.end2682

cond.false2681:                                   ; preds = %if.then2658
  br label %cond.end2682

cond.end2682:                                     ; preds = %cond.false2681, %cond.end2679
  %cond2683 = phi i8* [ %cond2680, %cond.end2679 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0), %cond.false2681 ]
  call void (i32, i8*, ...) @Perl_warner(i32 67, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.64, i64 0, i64 0), i8* %cond2683)
  br label %if.end2684

if.end2684:                                       ; preds = %cond.end2682, %land.lhs.true2655, %land.lhs.true2651, %for.end2649
  br label %do.body2685

do.body2685:                                      ; preds = %if.end2684
  %1428 = load i8, i8* @PL_tainting, align 1
  %tobool2686 = trunc i8 %1428 to i1
  br i1 %tobool2686, label %cond.true2688, label %cond.false2689

cond.true2688:                                    ; preds = %do.body2685
  br i1 true, label %if.then2690, label %if.end2706

cond.false2689:                                   ; preds = %do.body2685
  br i1 false, label %if.then2690, label %if.end2706

if.then2690:                                      ; preds = %cond.false2689, %cond.true2688
  %1429 = load i8, i8* @PL_tainted, align 1
  %tobool2691 = trunc i8 %1429 to i1
  br i1 %tobool2691, label %cond.true2693, label %cond.false2694

cond.true2693:                                    ; preds = %if.then2690
  br i1 true, label %if.then2695, label %if.end2705

cond.false2694:                                   ; preds = %if.then2690
  br i1 false, label %if.then2695, label %if.end2705

if.then2695:                                      ; preds = %cond.false2694, %cond.true2693
  br label %do.body2696

do.body2696:                                      ; preds = %if.then2695
  %1430 = load i8, i8* @PL_tainting, align 1
  %tobool2697 = trunc i8 %1430 to i1
  br i1 %tobool2697, label %cond.true2699, label %cond.false2700

cond.true2699:                                    ; preds = %do.body2696
  br i1 true, label %if.then2701, label %if.end2702

cond.false2700:                                   ; preds = %do.body2696
  br i1 false, label %if.then2701, label %if.end2702

if.then2701:                                      ; preds = %cond.false2700, %cond.true2699
  %1431 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_magic(%struct.sv* %1431, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end2702

if.end2702:                                       ; preds = %if.then2701, %cond.false2700, %cond.true2699
  br label %do.end2704

do.end2704:                                       ; preds = %if.end2702
  br label %if.end2705

if.end2705:                                       ; preds = %do.end2704, %cond.false2694, %cond.true2693
  br label %if.end2706

if.end2706:                                       ; preds = %if.end2705, %cond.false2689, %cond.true2688
  br label %do.end2708

do.end2708:                                       ; preds = %if.end38, %if.end106, %vaarg.end170, %if.then248, %if.then258, %if.end2706
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_vcatpvf(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  %2 = load i8*, i8** %pat.addr, align 8
  %call = call i64 @strlen(i8* %2) #8
  %3 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  call void @Perl_sv_vcatpvfn_flags(%struct.sv* %0, i8* %1, i64 %call, [1 x %struct.__va_list_tag]* %3, %struct.sv** null, i32 0, i8* null, i32 130)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_catpvf_mg(%struct.sv* %sv, i8* %pat, ...) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  %2 = load i8*, i8** %pat.addr, align 8
  %call = call i64 @strlen(i8* %2) #8
  call void @Perl_sv_vcatpvfn_flags(%struct.sv* %0, i8* %1, i64 %call, [1 x %struct.__va_list_tag]* %args, %struct.sv** null, i32 0, i8* null, i32 130)
  br label %do.body

do.body:                                          ; preds = %entry
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call2 = call i32 @Perl_mg_set(%struct.sv* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_vcatpvf_mg(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  %2 = load i8*, i8** %pat.addr, align 8
  %call = call i64 @strlen(i8* %2) #8
  %3 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  call void @Perl_sv_vcatpvfn(%struct.sv* %0, i8* %1, i64 %call, [1 x %struct.__va_list_tag]* %3, %struct.sv** null, i32 0, i8* null)
  br label %do.body

do.body:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1 = call i32 @Perl_mg_set(%struct.sv* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_sv_vcatpvfn(%struct.sv* %sv, i8* %pat, i64 %patlen, [1 x %struct.__va_list_tag]* %args, %struct.sv** %svargs, i32 %svmax, i8* %maybe_tainted) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %pat.addr = alloca i8*, align 8
  %patlen.addr = alloca i64, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  %svargs.addr = alloca %struct.sv**, align 8
  %svmax.addr = alloca i32, align 4
  %maybe_tainted.addr = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pat, i8** %pat.addr, align 8
  store i64 %patlen, i64* %patlen.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  store %struct.sv** %svargs, %struct.sv*** %svargs.addr, align 8
  store i32 %svmax, i32* %svmax.addr, align 4
  store i8* %maybe_tainted, i8** %maybe_tainted.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %1 = load i8*, i8** %pat.addr, align 8
  %2 = load i64, i64* %patlen.addr, align 8
  %3 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %4 = load %struct.sv**, %struct.sv*** %svargs.addr, align 8
  %5 = load i32, i32* %svmax.addr, align 4
  %6 = load i8*, i8** %maybe_tainted.addr, align 8
  call void @Perl_sv_vcatpvfn_flags(%struct.sv* %0, i8* %1, i64 %2, [1 x %struct.__va_list_tag]* %3, %struct.sv** %4, i32 %5, i8* %6, i32 130)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_vcatpvfn_missing_argument() #0 {
entry:
  %coerce = alloca %union.XOPRETANY, align 8
  %call = call zeroext i1 @Perl_ckwarn(i32 66)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %cond.true, label %cond.false7

cond.true:                                        ; preds = %if.then
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 380
  br i1 %cmp, label %cond.true1, label %cond.false

cond.true1:                                       ; preds = %cond.true
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %call2 = call i8* @Perl_custom_op_get_field(%struct.op* %2, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call2, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %3 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type3 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_type3, align 8
  %bf.clear5 = and i16 %bf.load4, 511
  %bf.cast6 = zext i16 %bf.clear5 to i32
  %idxprom = zext i32 %bf.cast6 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %5 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true1
  %cond = phi i8* [ %3, %cond.true1 ], [ %5, %cond.false ]
  br label %cond.end8

cond.false7:                                      ; preds = %if.then
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false7, %cond.end
  %cond9 = phi i8* [ %cond, %cond.end ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0), %cond.false7 ]
  call void (i32, i8*, ...) @Perl_warner(i32 66, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.102, i64 0, i64 0), i8* %cond9)
  br label %if.end

if.end:                                           ; preds = %cond.end8, %entry
  ret %struct.sv* @PL_sv_no
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_F0convert(double %nv, i8* %endbuf, i64* %len) #0 {
entry:
  %retval = alloca i8*, align 8
  %nv.addr = alloca double, align 8
  %endbuf.addr = alloca i8*, align 8
  %len.addr = alloca i64*, align 8
  %neg = alloca i32, align 4
  %uv = alloca i64, align 8
  %n = alloca i64, align 8
  %p = alloca i8*, align 8
  %dig = alloca i32, align 4
  store double %nv, double* %nv.addr, align 8
  store i8* %endbuf, i8** %endbuf.addr, align 8
  store i64* %len, i64** %len.addr, align 8
  %0 = load double, double* %nv.addr, align 8
  %cmp = fcmp olt double %0, 0.000000e+00
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %neg, align 4
  %1 = load double, double* %nv.addr, align 8
  %call = call zeroext i1 @Perl_isinfnan(double %1)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %2 = load double, double* %nv.addr, align 8
  %3 = load i8*, i8** %endbuf.addr, align 8
  %4 = load i64*, i64** %len.addr, align 8
  %5 = load i64, i64* %4, align 8
  %idx.neg = sub i64 0, %5
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.neg
  %6 = load i64*, i64** %len.addr, align 8
  %7 = load i64, i64* %6, align 8
  %call2 = call i64 @S_infnan_2pv(double %2, i8* %add.ptr, i64 %7, i8 signext 0)
  store i64 %call2, i64* %n, align 8
  %8 = load i64, i64* %n, align 8
  %9 = load i64*, i64** %len.addr, align 8
  store i64 %8, i64* %9, align 8
  %10 = load i8*, i8** %endbuf.addr, align 8
  %11 = load i64, i64* %n, align 8
  %idx.neg3 = sub i64 0, %11
  %add.ptr4 = getelementptr inbounds i8, i8* %10, i64 %idx.neg3
  store i8* %add.ptr4, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.false, %cond.true
  %12 = load i32, i32* %neg, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %13 = load double, double* %nv.addr, align 8
  %fneg = fneg double %13
  store double %fneg, double* %nv.addr, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end
  %14 = load double, double* %nv.addr, align 8
  %cmp7 = fcmp olt double %14, 0x43F0000000000000
  br i1 %cmp7, label %if.then9, label %if.end25

if.then9:                                         ; preds = %if.end6
  %15 = load i8*, i8** %endbuf.addr, align 8
  store i8* %15, i8** %p, align 8
  %16 = load double, double* %nv.addr, align 8
  %add = fadd double %16, 5.000000e-01
  store double %add, double* %nv.addr, align 8
  %17 = load double, double* %nv.addr, align 8
  %conv10 = fptoui double %17 to i64
  store i64 %conv10, i64* %uv, align 8
  %18 = load i64, i64* %uv, align 8
  %and = and i64 %18, 1
  %tobool11 = icmp ne i64 %and, 0
  br i1 %tobool11, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %if.then9
  %19 = load i64, i64* %uv, align 8
  %conv12 = uitofp i64 %19 to double
  %20 = load double, double* %nv.addr, align 8
  %cmp13 = fcmp oeq double %conv12, %20
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %land.lhs.true
  %21 = load i64, i64* %uv, align 8
  %dec = add i64 %21, -1
  store i64 %dec, i64* %uv, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %land.lhs.true, %if.then9
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end16
  %22 = load i64, i64* %uv, align 8
  %rem = urem i64 %22, 10
  %conv17 = trunc i64 %rem to i32
  store i32 %conv17, i32* %dig, align 4
  %23 = load i32, i32* %dig, align 4
  %add18 = add i32 48, %23
  %conv19 = trunc i32 %add18 to i8
  %24 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %24, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8
  store i8 %conv19, i8* %incdec.ptr, align 1
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %25 = load i64, i64* %uv, align 8
  %div = udiv i64 %25, 10
  store i64 %div, i64* %uv, align 8
  %tobool20 = icmp ne i64 %div, 0
  br i1 %tobool20, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %26 = load i32, i32* %neg, align 4
  %tobool21 = icmp ne i32 %26, 0
  br i1 %tobool21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %do.end
  %27 = load i8*, i8** %p, align 8
  %incdec.ptr23 = getelementptr inbounds i8, i8* %27, i32 -1
  store i8* %incdec.ptr23, i8** %p, align 8
  store i8 45, i8* %incdec.ptr23, align 1
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %do.end
  %28 = load i8*, i8** %endbuf.addr, align 8
  %29 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %29 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %30 = load i64*, i64** %len.addr, align 8
  store i64 %sub.ptr.sub, i64* %30, align 8
  %31 = load i8*, i8** %p, align 8
  store i8* %31, i8** %retval, align 8
  br label %return

if.end25:                                         ; preds = %if.end6
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end25, %if.end24, %if.then
  %32 = load i8*, i8** %retval, align 8
  ret i8* %32
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_expect_number(i8** %pattern) #0 {
entry:
  %pattern.addr = alloca i8**, align 8
  %var = alloca i32, align 4
  %tmp = alloca i32, align 4
  %coerce = alloca %union.XOPRETANY, align 8
  store i8** %pattern, i8*** %pattern.addr, align 8
  store i32 0, i32* %var, align 4
  %0 = load i8**, i8*** %pattern.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  switch i32 %conv, label %sw.epilog [
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %3 = load i8**, i8*** %pattern.addr, align 8
  %4 = load i8*, i8** %3, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %3, align 8
  %5 = load i8, i8* %4, align 1
  %conv1 = sext i8 %5 to i32
  %sub = sub nsw i32 %conv1, 48
  store i32 %sub, i32* %var, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %sw.bb
  %6 = load i8**, i8*** %pattern.addr, align 8
  %7 = load i8*, i8** %6, align 8
  %8 = load i8, i8* %7, align 1
  %idxprom = zext i8 %8 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %9 = load i32, i32* %arrayidx, align 4
  %and = and i32 %9, 2
  %tobool = icmp ne i32 %and, 0
  %10 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %tobool2 = icmp ne i32 %cond, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i32, i32* %var, align 4
  %mul = mul nsw i32 %11, 10
  %12 = load i8**, i8*** %pattern.addr, align 8
  %13 = load i8*, i8** %12, align 8
  %incdec.ptr3 = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr3, i8** %12, align 8
  %14 = load i8, i8* %13, align 1
  %conv4 = sext i8 %14 to i32
  %sub5 = sub nsw i32 %conv4, 48
  %add = add nsw i32 %mul, %sub5
  store i32 %add, i32* %tmp, align 4
  %15 = load i32, i32* %tmp, align 4
  %16 = load i32, i32* %var, align 4
  %cmp = icmp slt i32 %15, %16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %tobool7 = icmp ne %struct.op* %17, null
  br i1 %tobool7, label %cond.true, label %cond.false18

cond.true:                                        ; preds = %if.then
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp8 = icmp eq i32 %bf.cast, 380
  br i1 %cmp8, label %cond.true10, label %cond.false

cond.true10:                                      ; preds = %cond.true
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %call = call i8* @Perl_custom_op_get_field(%struct.op* %19, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %20 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %21 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type11 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 4
  %bf.load12 = load i16, i16* %op_type11, align 8
  %bf.clear13 = and i16 %bf.load12, 511
  %bf.cast14 = zext i16 %bf.clear13 to i32
  %idxprom15 = zext i32 %bf.cast14 to i64
  %arrayidx16 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom15
  %22 = load i8*, i8** %arrayidx16, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true10
  %cond17 = phi i8* [ %20, %cond.true10 ], [ %22, %cond.false ]
  br label %cond.end19

cond.false18:                                     ; preds = %if.then
  br label %cond.end19

cond.end19:                                       ; preds = %cond.false18, %cond.end
  %cond20 = phi i8* [ %cond17, %cond.end ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.104, i64 0, i64 0), %cond.false18 ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.103, i64 0, i64 0), i8* %cond20)
  br label %if.end

if.end:                                           ; preds = %cond.end19, %while.body
  %23 = load i32, i32* %tmp, align 4
  store i32 %23, i32* %var, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %sw.epilog

sw.epilog:                                        ; preds = %while.end, %entry
  %24 = load i32, i32* %var, align 4
  ret i32 %24
}

declare dso_local zeroext i1 @Perl_sv_derived_from(%struct.sv*, i8*) #1

declare dso_local i8* @Perl_hv_common_key_len(%struct.hv*, i8*, i32, i32, %struct.sv*, i32) #1

declare dso_local i8* @Perl_scan_vstring(i8*, i8*, %struct.sv*) #1

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #3

declare dso_local zeroext i1 @Perl_isinfnansv(%struct.sv*) #1

declare dso_local i8* @Perl_uvoffuni_to_utf8_flags(i8*, i64, i64) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_sv_or_pv_pos_u2b(%struct.sv* %sv, i8* %pv, i64 %pos, i64* %lenp) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %pv.addr = alloca i8*, align 8
  %pos.addr = alloca i64, align 8
  %lenp.addr = alloca i64*, align 8
  %hopped = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pv, i8** %pv.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  store i64* %lenp, i64** %lenp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 2048
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %5 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %6, 1048576
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %land.lhs.true7, label %if.end20

land.lhs.true7:                                   ; preds = %land.lhs.true
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u8 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 3
  %svu_rv9 = bitcast %union.anon* %sv_u8 to %struct.sv**
  %8 = load %struct.sv*, %struct.sv** %svu_rv9, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any, align 8
  %10 = bitcast i8* %9 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %10, i32 0, i32 0
  %11 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags10 = getelementptr inbounds %struct.hv, %struct.hv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %12, 268435456
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then, label %if.end20

if.then:                                          ; preds = %land.lhs.true7, %entry
  %13 = load i8*, i8** %pv.addr, align 8
  %14 = load i64, i64* %pos.addr, align 8
  %conv = trunc i64 %14 to i32
  %call = call i8* @Perl_utf8_hop(i8* %13, i32 %conv)
  store i8* %call, i8** %hopped, align 8
  %15 = load i64*, i64** %lenp.addr, align 8
  %tobool13 = icmp ne i64* %15, null
  br i1 %tobool13, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.then
  %16 = load i8*, i8** %hopped, align 8
  %17 = load i64*, i64** %lenp.addr, align 8
  %18 = load i64, i64* %17, align 8
  %conv15 = trunc i64 %18 to i32
  %call16 = call i8* @Perl_utf8_hop(i8* %16, i32 %conv15)
  %19 = load i8*, i8** %hopped, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %call16 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %19 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %20 = load i64*, i64** %lenp.addr, align 8
  store i64 %sub.ptr.sub, i64* %20, align 8
  br label %if.end

if.end:                                           ; preds = %if.then14, %if.then
  %21 = load i8*, i8** %hopped, align 8
  %22 = load i8*, i8** %pv.addr, align 8
  %sub.ptr.lhs.cast17 = ptrtoint i8* %21 to i64
  %sub.ptr.rhs.cast18 = ptrtoint i8* %22 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  store i64 %sub.ptr.sub19, i64* %retval, align 8
  br label %return

if.end20:                                         ; preds = %land.lhs.true7, %land.lhs.true, %lor.lhs.false
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %24 = load i64, i64* %pos.addr, align 8
  %25 = load i64*, i64** %lenp.addr, align 8
  %call21 = call i64 @Perl_sv_pos_u2b_flags(%struct.sv* %23, i64 %24, i64* %25, i32 32)
  store i64 %call21, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end20, %if.end
  %26 = load i64, i64* %retval, align 8
  ret i64 %26
}

declare dso_local i64 @Perl_utf8n_to_uvchr(i8*, i64, i64*, i32) #1

; Function Attrs: nounwind
declare dso_local double @frexp(double, i32*) #5

declare dso_local %struct.op* @Perl_die(i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_hextract(double %nv, i32* %exponent, i8* %vhex, i8* %vend) #0 {
entry:
  %nv.addr = alloca double, align 8
  %exponent.addr = alloca i32*, align 8
  %vhex.addr = alloca i8*, align 8
  %vend.addr = alloca i8*, align 8
  %v = alloca i8*, align 8
  %ix = alloca i32, align 4
  %ixmin = alloca i32, align 4
  %ixmax = alloca i32, align 4
  %vmaxend = alloca i8*, align 8
  %d = alloca double, align 8
  %e = alloca double, align 8
  %ha = alloca i8, align 1
  %hd = alloca i8, align 1
  store double %nv, double* %nv.addr, align 8
  store i32* %exponent, i32** %exponent.addr, align 8
  store i8* %vhex, i8** %vhex.addr, align 8
  store i8* %vend, i8** %vend.addr, align 8
  %0 = load i8*, i8** %vhex.addr, align 8
  store i8* %0, i8** %v, align 8
  store i32 0, i32* %ixmin, align 4
  store i32 0, i32* %ixmax, align 4
  %1 = load i8*, i8** %vhex.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 16
  store i8* %add.ptr, i8** %vmaxend, align 8
  %2 = load i32, i32* %ix, align 4
  %3 = load double, double* %nv.addr, align 8
  %cmp = fcmp olt double %3, 0.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load double, double* %nv.addr, align 8
  %fneg = fneg double %4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load double, double* %nv.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %fneg, %cond.true ], [ %5, %cond.false ]
  %6 = load i32*, i32** %exponent.addr, align 8
  %call = call double @frexp(double %cond, i32* %6) #6
  %7 = load i8*, i8** %vend.addr, align 8
  %tobool = icmp ne i8* %7, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %8 = load i8*, i8** %vend.addr, align 8
  %9 = load i8*, i8** %vhex.addr, align 8
  %cmp1 = icmp ule i8* %8, %9
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %10 = load i8*, i8** %vend.addr, align 8
  %11 = load i8*, i8** %vmaxend, align 8
  %cmp2 = icmp ugt i8* %10, %11
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.105, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false, %cond.end
  %12 = load double, double* %nv.addr, align 8
  %cmp3 = fcmp oeq double %12, 0.000000e+00
  br i1 %cmp3, label %if.then4, label %if.else9

if.then4:                                         ; preds = %if.end
  %13 = load i8*, i8** %vend.addr, align 8
  %tobool5 = icmp ne i8* %13, null
  br i1 %tobool5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then4
  %14 = load i8*, i8** %v, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr, i8** %v, align 8
  store i8 0, i8* %14, align 1
  br label %if.end8

if.else:                                          ; preds = %if.then4
  %15 = load i8*, i8** %v, align 8
  %incdec.ptr7 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr7, i8** %v, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then6
  %16 = load i32*, i32** %exponent.addr, align 8
  store i32 0, i32* %16, align 4
  br label %if.end73

if.else9:                                         ; preds = %if.end
  %17 = load double, double* %nv.addr, align 8
  %cmp10 = fcmp olt double %17, 0.000000e+00
  br i1 %cmp10, label %cond.true11, label %cond.false13

cond.true11:                                      ; preds = %if.else9
  %18 = load double, double* %nv.addr, align 8
  %fneg12 = fneg double %18
  br label %cond.end14

cond.false13:                                     ; preds = %if.else9
  %19 = load double, double* %nv.addr, align 8
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi double [ %fneg12, %cond.true11 ], [ %19, %cond.false13 ]
  store double %cond15, double* %d, align 8
  store double 1.000000e+00, double* %e, align 8
  store i8 0, i8* %ha, align 1
  store i8 8, i8* %hd, align 1
  %20 = load i32*, i32** %exponent.addr, align 8
  store i32 1, i32* %20, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end14
  %21 = load double, double* %e, align 8
  %22 = load double, double* %d, align 8
  %cmp16 = fcmp ogt double %21, %22
  br i1 %cmp16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %23 = load double, double* %e, align 8
  %mul = fmul double %23, 5.000000e-01
  store double %mul, double* %e, align 8
  %24 = load i32*, i32** %exponent.addr, align 8
  %25 = load i32, i32* %24, align 4
  %dec = add nsw i32 %25, -1
  store i32 %dec, i32* %24, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond17

while.cond17:                                     ; preds = %while.body19, %while.end
  %26 = load double, double* %d, align 8
  %27 = load double, double* %e, align 8
  %28 = load double, double* %e, align 8
  %add = fadd double %27, %28
  %cmp18 = fcmp oge double %26, %add
  br i1 %cmp18, label %while.body19, label %while.end21

while.body19:                                     ; preds = %while.cond17
  %29 = load double, double* %e, align 8
  %30 = load double, double* %e, align 8
  %add20 = fadd double %30, %29
  store double %add20, double* %e, align 8
  %31 = load i32*, i32** %exponent.addr, align 8
  %32 = load i32, i32* %31, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %31, align 4
  br label %while.cond17

while.end21:                                      ; preds = %while.cond17
  %33 = load double, double* %d, align 8
  %34 = load double, double* %e, align 8
  %cmp22 = fcmp oge double %33, %34
  br i1 %cmp22, label %if.then23, label %if.else30

if.then23:                                        ; preds = %while.end21
  %35 = load double, double* %e, align 8
  %36 = load double, double* %d, align 8
  %sub = fsub double %36, %35
  store double %sub, double* %d, align 8
  %37 = load i8*, i8** %vend.addr, align 8
  %tobool24 = icmp ne i8* %37, null
  br i1 %tobool24, label %if.then25, label %if.else27

if.then25:                                        ; preds = %if.then23
  %38 = load i8*, i8** %v, align 8
  %incdec.ptr26 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr26, i8** %v, align 8
  store i8 1, i8* %38, align 1
  br label %if.end29

if.else27:                                        ; preds = %if.then23
  %39 = load i8*, i8** %v, align 8
  %incdec.ptr28 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr28, i8** %v, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.else27, %if.then25
  br label %if.end37

if.else30:                                        ; preds = %while.end21
  %40 = load i8*, i8** %vend.addr, align 8
  %tobool31 = icmp ne i8* %40, null
  br i1 %tobool31, label %if.then32, label %if.else34

if.then32:                                        ; preds = %if.else30
  %41 = load i8*, i8** %v, align 8
  %incdec.ptr33 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr33, i8** %v, align 8
  store i8 0, i8* %41, align 1
  br label %if.end36

if.else34:                                        ; preds = %if.else30
  %42 = load i8*, i8** %v, align 8
  %incdec.ptr35 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr35, i8** %v, align 8
  br label %if.end36

if.end36:                                         ; preds = %if.else34, %if.then32
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.end29
  %43 = load double, double* %e, align 8
  %mul38 = fmul double %43, 5.000000e-01
  store double %mul38, double* %e, align 8
  br label %while.cond39

while.cond39:                                     ; preds = %if.end61, %if.end37
  %44 = load double, double* %d, align 8
  %cmp40 = fcmp ogt double %44, 0.000000e+00
  br i1 %cmp40, label %while.body41, label %while.end63

while.body41:                                     ; preds = %while.cond39
  %45 = load double, double* %d, align 8
  %46 = load double, double* %e, align 8
  %cmp42 = fcmp oge double %45, %46
  br i1 %cmp42, label %if.then43, label %if.end47

if.then43:                                        ; preds = %while.body41
  %47 = load i8, i8* %hd, align 1
  %conv = zext i8 %47 to i32
  %48 = load i8, i8* %ha, align 1
  %conv44 = zext i8 %48 to i32
  %or = or i32 %conv44, %conv
  %conv45 = trunc i32 %or to i8
  store i8 %conv45, i8* %ha, align 1
  %49 = load double, double* %e, align 8
  %50 = load double, double* %d, align 8
  %sub46 = fsub double %50, %49
  store double %sub46, double* %d, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then43, %while.body41
  %51 = load i8, i8* %hd, align 1
  %conv48 = zext i8 %51 to i32
  %cmp49 = icmp eq i32 %conv48, 1
  br i1 %cmp49, label %if.then51, label %if.else58

if.then51:                                        ; preds = %if.end47
  %52 = load i8*, i8** %vend.addr, align 8
  %tobool52 = icmp ne i8* %52, null
  br i1 %tobool52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %if.then51
  %53 = load i8, i8* %ha, align 1
  %54 = load i8*, i8** %v, align 8
  %incdec.ptr54 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %incdec.ptr54, i8** %v, align 8
  store i8 %53, i8* %54, align 1
  br label %if.end57

if.else55:                                        ; preds = %if.then51
  %55 = load i8*, i8** %v, align 8
  %incdec.ptr56 = getelementptr inbounds i8, i8* %55, i32 1
  store i8* %incdec.ptr56, i8** %v, align 8
  br label %if.end57

if.end57:                                         ; preds = %if.else55, %if.then53
  store i8 0, i8* %ha, align 1
  store i8 8, i8* %hd, align 1
  br label %if.end61

if.else58:                                        ; preds = %if.end47
  %56 = load i8, i8* %hd, align 1
  %conv59 = zext i8 %56 to i32
  %shr = ashr i32 %conv59, 1
  %conv60 = trunc i32 %shr to i8
  store i8 %conv60, i8* %hd, align 1
  br label %if.end61

if.end61:                                         ; preds = %if.else58, %if.end57
  %57 = load double, double* %e, align 8
  %mul62 = fmul double %57, 5.000000e-01
  store double %mul62, double* %e, align 8
  br label %while.cond39

while.end63:                                      ; preds = %while.cond39
  %58 = load i8, i8* %ha, align 1
  %tobool64 = icmp ne i8 %58, 0
  br i1 %tobool64, label %if.then65, label %if.end72

if.then65:                                        ; preds = %while.end63
  %59 = load i8*, i8** %vend.addr, align 8
  %tobool66 = icmp ne i8* %59, null
  br i1 %tobool66, label %if.then67, label %if.else69

if.then67:                                        ; preds = %if.then65
  %60 = load i8, i8* %ha, align 1
  %61 = load i8*, i8** %v, align 8
  %incdec.ptr68 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr68, i8** %v, align 8
  store i8 %60, i8* %61, align 1
  br label %if.end71

if.else69:                                        ; preds = %if.then65
  %62 = load i8*, i8** %v, align 8
  %incdec.ptr70 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %incdec.ptr70, i8** %v, align 8
  br label %if.end71

if.end71:                                         ; preds = %if.else69, %if.then67
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %while.end63
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.end8
  %63 = load i8*, i8** %v, align 8
  %64 = load i8*, i8** %vhex.addr, align 8
  %cmp74 = icmp ule i8* %63, %64
  br i1 %cmp74, label %if.then90, label %lor.lhs.false76

lor.lhs.false76:                                  ; preds = %if.end73
  %65 = load i8*, i8** %v, align 8
  %66 = load i8*, i8** %vhex.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %65 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %66 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp77 = icmp sge i64 %sub.ptr.sub, 17
  br i1 %cmp77, label %if.then90, label %lor.lhs.false79

lor.lhs.false79:                                  ; preds = %lor.lhs.false76
  %67 = load i32, i32* %ixmin, align 4
  %cmp80 = icmp slt i32 %67, 0
  br i1 %cmp80, label %if.then90, label %lor.lhs.false82

lor.lhs.false82:                                  ; preds = %lor.lhs.false79
  %68 = load i32, i32* %ixmax, align 4
  %cmp83 = icmp sge i32 %68, 8
  br i1 %cmp83, label %if.then90, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %lor.lhs.false82
  %69 = load i8*, i8** %vend.addr, align 8
  %tobool86 = icmp ne i8* %69, null
  br i1 %tobool86, label %land.lhs.true87, label %if.end91

land.lhs.true87:                                  ; preds = %lor.lhs.false85
  %70 = load i8*, i8** %v, align 8
  %71 = load i8*, i8** %vend.addr, align 8
  %cmp88 = icmp ne i8* %70, %71
  br i1 %cmp88, label %if.then90, label %if.end91

if.then90:                                        ; preds = %land.lhs.true87, %lor.lhs.false82, %lor.lhs.false79, %lor.lhs.false76, %if.end73
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.106, i64 0, i64 0))
  br label %if.end91

if.end91:                                         ; preds = %if.then90, %land.lhs.true87, %lor.lhs.false85
  %72 = load i8*, i8** %v, align 8
  ret i8* %72
}

declare dso_local i32 @Perl_my_snprintf(i8*, i64, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_croak_memory_wrap() #0 {
entry:
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.107, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_memory_wrap, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ptr_tbl* @Perl_ptr_table_new() #0 {
entry:
  %tbl = alloca %struct.ptr_tbl*, align 8
  %call = call i8* @Perl_safesysmalloc(i64 48)
  %0 = bitcast i8* %call to %struct.ptr_tbl*
  store %struct.ptr_tbl* %0, %struct.ptr_tbl** %tbl, align 8
  %1 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl, align 8
  %tbl_max = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %1, i32 0, i32 1
  store i64 511, i64* %tbl_max, align 8
  %2 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl, align 8
  %tbl_items = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %2, i32 0, i32 2
  store i64 0, i64* %tbl_items, align 8
  %3 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl, align 8
  %tbl_arena = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %3, i32 0, i32 3
  store %struct.ptr_tbl_arena* null, %struct.ptr_tbl_arena** %tbl_arena, align 8
  %4 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl, align 8
  %tbl_arena_next = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %4, i32 0, i32 4
  store %struct.ptr_tbl_ent* null, %struct.ptr_tbl_ent** %tbl_arena_next, align 8
  %5 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl, align 8
  %tbl_arena_end = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %5, i32 0, i32 5
  store %struct.ptr_tbl_ent* null, %struct.ptr_tbl_ent** %tbl_arena_end, align 8
  %6 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl, align 8
  %tbl_max1 = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %6, i32 0, i32 1
  %7 = load i64, i64* %tbl_max1, align 8
  %add = add i64 %7, 1
  %call2 = call i8* @Perl_safesyscalloc(i64 %add, i64 8)
  %8 = bitcast i8* %call2 to %struct.ptr_tbl_ent**
  %9 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl, align 8
  %tbl_ary = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %9, i32 0, i32 0
  store %struct.ptr_tbl_ent** %8, %struct.ptr_tbl_ent*** %tbl_ary, align 8
  %10 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl, align 8
  ret %struct.ptr_tbl* %10
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_ptr_table_fetch(%struct.ptr_tbl* %tbl, i8* %sv) #0 {
entry:
  %tbl.addr = alloca %struct.ptr_tbl*, align 8
  %sv.addr = alloca i8*, align 8
  %tblent = alloca %struct.ptr_tbl_ent*, align 8
  store %struct.ptr_tbl* %tbl, %struct.ptr_tbl** %tbl.addr, align 8
  store i8* %sv, i8** %sv.addr, align 8
  %0 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %1 = load i8*, i8** %sv.addr, align 8
  %call = call %struct.ptr_tbl_ent* @S_ptr_table_find(%struct.ptr_tbl* %0, i8* %1)
  store %struct.ptr_tbl_ent* %call, %struct.ptr_tbl_ent** %tblent, align 8
  %2 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  %tobool = icmp ne %struct.ptr_tbl_ent* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  %newval = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %3, i32 0, i32 2
  %4 = load i8*, i8** %newval, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ptr_tbl_ent* @S_ptr_table_find(%struct.ptr_tbl* %tbl, i8* %sv) #0 {
entry:
  %retval = alloca %struct.ptr_tbl_ent*, align 8
  %tbl.addr = alloca %struct.ptr_tbl*, align 8
  %sv.addr = alloca i8*, align 8
  %tblent = alloca %struct.ptr_tbl_ent*, align 8
  %hash = alloca i64, align 8
  store %struct.ptr_tbl* %tbl, %struct.ptr_tbl** %tbl.addr, align 8
  store i8* %sv, i8** %sv.addr, align 8
  %0 = load i8*, i8** %sv.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  %shr = lshr i64 %1, 3
  %2 = load i8*, i8** %sv.addr, align 8
  %3 = ptrtoint i8* %2 to i64
  %shr1 = lshr i64 %3, 10
  %xor = xor i64 %shr, %shr1
  %4 = load i8*, i8** %sv.addr, align 8
  %5 = ptrtoint i8* %4 to i64
  %shr2 = lshr i64 %5, 20
  %xor3 = xor i64 %xor, %shr2
  store i64 %xor3, i64* %hash, align 8
  %6 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_ary = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %6, i32 0, i32 0
  %7 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %tbl_ary, align 8
  %8 = load i64, i64* %hash, align 8
  %9 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_max = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %9, i32 0, i32 1
  %10 = load i64, i64* %tbl_max, align 8
  %and = and i64 %8, %10
  %arrayidx = getelementptr inbounds %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %7, i64 %and
  %11 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %arrayidx, align 8
  store %struct.ptr_tbl_ent* %11, %struct.ptr_tbl_ent** %tblent, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  %tobool = icmp ne %struct.ptr_tbl_ent* %12, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  %oldval = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %13, i32 0, i32 1
  %14 = load i8*, i8** %oldval, align 8
  %15 = load i8*, i8** %sv.addr, align 8
  %cmp = icmp eq i8* %14, %15
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %16 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  store %struct.ptr_tbl_ent* %16, %struct.ptr_tbl_ent** %retval, align 8
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  %next = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %17, i32 0, i32 0
  %18 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %next, align 8
  store %struct.ptr_tbl_ent* %18, %struct.ptr_tbl_ent** %tblent, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.ptr_tbl_ent* null, %struct.ptr_tbl_ent** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  %19 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %retval, align 8
  ret %struct.ptr_tbl_ent* %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_ptr_table_store(%struct.ptr_tbl* %tbl, i8* %oldsv, i8* %newsv) #0 {
entry:
  %tbl.addr = alloca %struct.ptr_tbl*, align 8
  %oldsv.addr = alloca i8*, align 8
  %newsv.addr = alloca i8*, align 8
  %tblent = alloca %struct.ptr_tbl_ent*, align 8
  %entry1 = alloca i64, align 8
  %new_arena = alloca %struct.ptr_tbl_arena*, align 8
  store %struct.ptr_tbl* %tbl, %struct.ptr_tbl** %tbl.addr, align 8
  store i8* %oldsv, i8** %oldsv.addr, align 8
  store i8* %newsv, i8** %newsv.addr, align 8
  %0 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %1 = load i8*, i8** %oldsv.addr, align 8
  %call = call %struct.ptr_tbl_ent* @S_ptr_table_find(%struct.ptr_tbl* %0, i8* %1)
  store %struct.ptr_tbl_ent* %call, %struct.ptr_tbl_ent** %tblent, align 8
  %2 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  %tobool = icmp ne %struct.ptr_tbl_ent* %2, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %newsv.addr, align 8
  %4 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  %newval = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %4, i32 0, i32 2
  store i8* %3, i8** %newval, align 8
  br label %if.end24

if.else:                                          ; preds = %entry
  %5 = load i8*, i8** %oldsv.addr, align 8
  %6 = ptrtoint i8* %5 to i64
  %shr = lshr i64 %6, 3
  %7 = load i8*, i8** %oldsv.addr, align 8
  %8 = ptrtoint i8* %7 to i64
  %shr2 = lshr i64 %8, 10
  %xor = xor i64 %shr, %shr2
  %9 = load i8*, i8** %oldsv.addr, align 8
  %10 = ptrtoint i8* %9 to i64
  %shr3 = lshr i64 %10, 20
  %xor4 = xor i64 %xor, %shr3
  %11 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_max = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %11, i32 0, i32 1
  %12 = load i64, i64* %tbl_max, align 8
  %and = and i64 %xor4, %12
  store i64 %and, i64* %entry1, align 8
  %13 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_arena_next = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %13, i32 0, i32 4
  %14 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tbl_arena_next, align 8
  %15 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_arena_end = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %15, i32 0, i32 5
  %16 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tbl_arena_end, align 8
  %cmp = icmp eq %struct.ptr_tbl_ent* %14, %16
  br i1 %cmp, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.else
  %call6 = call i8* @Perl_safesysmalloc(i64 8192)
  %17 = bitcast i8* %call6 to %struct.ptr_tbl_arena*
  store %struct.ptr_tbl_arena* %17, %struct.ptr_tbl_arena** %new_arena, align 8
  %18 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_arena = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %18, i32 0, i32 3
  %19 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %tbl_arena, align 8
  %20 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %new_arena, align 8
  %next = getelementptr inbounds %struct.ptr_tbl_arena, %struct.ptr_tbl_arena* %20, i32 0, i32 0
  store %struct.ptr_tbl_arena* %19, %struct.ptr_tbl_arena** %next, align 8
  %21 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %new_arena, align 8
  %22 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_arena7 = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %22, i32 0, i32 3
  store %struct.ptr_tbl_arena* %21, %struct.ptr_tbl_arena** %tbl_arena7, align 8
  %23 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %new_arena, align 8
  %array = getelementptr inbounds %struct.ptr_tbl_arena, %struct.ptr_tbl_arena* %23, i32 0, i32 1
  %arraydecay = getelementptr inbounds [341 x %struct.ptr_tbl_ent], [341 x %struct.ptr_tbl_ent]* %array, i64 0, i64 0
  %24 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_arena_next8 = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %24, i32 0, i32 4
  store %struct.ptr_tbl_ent* %arraydecay, %struct.ptr_tbl_ent** %tbl_arena_next8, align 8
  %25 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %new_arena, align 8
  %array9 = getelementptr inbounds %struct.ptr_tbl_arena, %struct.ptr_tbl_arena* %25, i32 0, i32 1
  %arraydecay10 = getelementptr inbounds [341 x %struct.ptr_tbl_ent], [341 x %struct.ptr_tbl_ent]* %array9, i64 0, i64 0
  %add.ptr = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %arraydecay10, i64 341
  %26 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_arena_end11 = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %26, i32 0, i32 5
  store %struct.ptr_tbl_ent* %add.ptr, %struct.ptr_tbl_ent** %tbl_arena_end11, align 8
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.else
  %27 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_arena_next12 = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %27, i32 0, i32 4
  %28 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tbl_arena_next12, align 8
  %incdec.ptr = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %28, i32 1
  store %struct.ptr_tbl_ent* %incdec.ptr, %struct.ptr_tbl_ent** %tbl_arena_next12, align 8
  store %struct.ptr_tbl_ent* %28, %struct.ptr_tbl_ent** %tblent, align 8
  %29 = load i8*, i8** %oldsv.addr, align 8
  %30 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  %oldval = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %30, i32 0, i32 1
  store i8* %29, i8** %oldval, align 8
  %31 = load i8*, i8** %newsv.addr, align 8
  %32 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  %newval13 = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %32, i32 0, i32 2
  store i8* %31, i8** %newval13, align 8
  %33 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_ary = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %33, i32 0, i32 0
  %34 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %tbl_ary, align 8
  %35 = load i64, i64* %entry1, align 8
  %arrayidx = getelementptr inbounds %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %34, i64 %35
  %36 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %arrayidx, align 8
  %37 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  %next14 = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %37, i32 0, i32 0
  store %struct.ptr_tbl_ent* %36, %struct.ptr_tbl_ent** %next14, align 8
  %38 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  %39 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_ary15 = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %39, i32 0, i32 0
  %40 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %tbl_ary15, align 8
  %41 = load i64, i64* %entry1, align 8
  %arrayidx16 = getelementptr inbounds %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %40, i64 %41
  store %struct.ptr_tbl_ent* %38, %struct.ptr_tbl_ent** %arrayidx16, align 8
  %42 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_items = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %42, i32 0, i32 2
  %43 = load i64, i64* %tbl_items, align 8
  %inc = add i64 %43, 1
  store i64 %inc, i64* %tbl_items, align 8
  %44 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %tblent, align 8
  %next17 = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %44, i32 0, i32 0
  %45 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %next17, align 8
  %tobool18 = icmp ne %struct.ptr_tbl_ent* %45, null
  br i1 %tobool18, label %land.lhs.true, label %if.end23

land.lhs.true:                                    ; preds = %if.end
  %46 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_items19 = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %46, i32 0, i32 2
  %47 = load i64, i64* %tbl_items19, align 8
  %48 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_max20 = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %48, i32 0, i32 1
  %49 = load i64, i64* %tbl_max20, align 8
  %cmp21 = icmp ugt i64 %47, %49
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %land.lhs.true
  %50 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  call void @Perl_ptr_table_split(%struct.ptr_tbl* %50)
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %land.lhs.true, %if.end
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_ptr_table_split(%struct.ptr_tbl* %tbl) #0 {
entry:
  %tbl.addr = alloca %struct.ptr_tbl*, align 8
  %ary = alloca %struct.ptr_tbl_ent**, align 8
  %oldsize = alloca i64, align 8
  %newsize = alloca i64, align 8
  %i = alloca i64, align 8
  %entp = alloca %struct.ptr_tbl_ent**, align 8
  %ent = alloca %struct.ptr_tbl_ent*, align 8
  %curentp = alloca %struct.ptr_tbl_ent**, align 8
  store %struct.ptr_tbl* %tbl, %struct.ptr_tbl** %tbl.addr, align 8
  %0 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_ary = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %0, i32 0, i32 0
  %1 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %tbl_ary, align 8
  store %struct.ptr_tbl_ent** %1, %struct.ptr_tbl_ent*** %ary, align 8
  %2 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_max = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %2, i32 0, i32 1
  %3 = load i64, i64* %tbl_max, align 8
  %add = add i64 %3, 1
  store i64 %add, i64* %oldsize, align 8
  %4 = load i64, i64* %oldsize, align 8
  %mul = mul i64 %4, 2
  store i64 %mul, i64* %newsize, align 8
  %5 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %ary, align 8
  %6 = bitcast %struct.ptr_tbl_ent** %5 to i8*
  %7 = load i64, i64* %newsize, align 8
  %mul1 = mul i64 %7, 8
  %call = call i8* @Perl_safesysrealloc(i8* %6, i64 %mul1)
  %8 = bitcast i8* %call to %struct.ptr_tbl_ent**
  store %struct.ptr_tbl_ent** %8, %struct.ptr_tbl_ent*** %ary, align 8
  %9 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %ary, align 8
  %10 = load i64, i64* %oldsize, align 8
  %arrayidx = getelementptr inbounds %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %9, i64 %10
  %11 = bitcast %struct.ptr_tbl_ent** %arrayidx to i8*
  %12 = load i64, i64* %newsize, align 8
  %13 = load i64, i64* %oldsize, align 8
  %sub = sub i64 %12, %13
  %mul2 = mul i64 %sub, 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 0, i64 %mul2, i1 false)
  %14 = load i64, i64* %newsize, align 8
  %dec = add i64 %14, -1
  store i64 %dec, i64* %newsize, align 8
  %15 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_max3 = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %15, i32 0, i32 1
  store i64 %dec, i64* %tbl_max3, align 8
  %16 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %ary, align 8
  %17 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_ary4 = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %17, i32 0, i32 0
  store %struct.ptr_tbl_ent** %16, %struct.ptr_tbl_ent*** %tbl_ary4, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %18 = load i64, i64* %i, align 8
  %19 = load i64, i64* %oldsize, align 8
  %cmp = icmp ult i64 %18, %19
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %ary, align 8
  store %struct.ptr_tbl_ent** %20, %struct.ptr_tbl_ent*** %entp, align 8
  %21 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %ary, align 8
  %22 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %21, align 8
  store %struct.ptr_tbl_ent* %22, %struct.ptr_tbl_ent** %ent, align 8
  %23 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %ent, align 8
  %tobool = icmp ne %struct.ptr_tbl_ent* %23, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %24 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %ary, align 8
  %25 = load i64, i64* %oldsize, align 8
  %add.ptr = getelementptr inbounds %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %24, i64 %25
  store %struct.ptr_tbl_ent** %add.ptr, %struct.ptr_tbl_ent*** %curentp, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %26 = load i64, i64* %newsize, align 8
  %27 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %ent, align 8
  %oldval = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %27, i32 0, i32 1
  %28 = load i8*, i8** %oldval, align 8
  %29 = ptrtoint i8* %28 to i64
  %shr = lshr i64 %29, 3
  %30 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %ent, align 8
  %oldval5 = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %30, i32 0, i32 1
  %31 = load i8*, i8** %oldval5, align 8
  %32 = ptrtoint i8* %31 to i64
  %shr6 = lshr i64 %32, 10
  %xor = xor i64 %shr, %shr6
  %33 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %ent, align 8
  %oldval7 = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %33, i32 0, i32 1
  %34 = load i8*, i8** %oldval7, align 8
  %35 = ptrtoint i8* %34 to i64
  %shr8 = lshr i64 %35, 20
  %xor9 = xor i64 %xor, %shr8
  %and = and i64 %26, %xor9
  %36 = load i64, i64* %i, align 8
  %cmp10 = icmp ne i64 %and, %36
  br i1 %cmp10, label %if.then11, label %if.else

if.then11:                                        ; preds = %do.body
  %37 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %ent, align 8
  %next = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %37, i32 0, i32 0
  %38 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %next, align 8
  %39 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %entp, align 8
  store %struct.ptr_tbl_ent* %38, %struct.ptr_tbl_ent** %39, align 8
  %40 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %curentp, align 8
  %41 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %40, align 8
  %42 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %ent, align 8
  %next12 = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %42, i32 0, i32 0
  store %struct.ptr_tbl_ent* %41, %struct.ptr_tbl_ent** %next12, align 8
  %43 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %ent, align 8
  %44 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %curentp, align 8
  store %struct.ptr_tbl_ent* %43, %struct.ptr_tbl_ent** %44, align 8
  br label %if.end14

if.else:                                          ; preds = %do.body
  %45 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %ent, align 8
  %next13 = getelementptr inbounds %struct.ptr_tbl_ent, %struct.ptr_tbl_ent* %45, i32 0, i32 0
  store %struct.ptr_tbl_ent** %next13, %struct.ptr_tbl_ent*** %entp, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then11
  %46 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %entp, align 8
  %47 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %46, align 8
  store %struct.ptr_tbl_ent* %47, %struct.ptr_tbl_ent** %ent, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end14
  %48 = load %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %ent, align 8
  %tobool15 = icmp ne %struct.ptr_tbl_ent* %48, null
  br i1 %tobool15, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %for.inc

for.inc:                                          ; preds = %do.end, %if.then
  %49 = load i64, i64* %i, align 8
  %inc = add i64 %49, 1
  store i64 %inc, i64* %i, align 8
  %50 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %ary, align 8
  %incdec.ptr = getelementptr inbounds %struct.ptr_tbl_ent*, %struct.ptr_tbl_ent** %50, i32 1
  store %struct.ptr_tbl_ent** %incdec.ptr, %struct.ptr_tbl_ent*** %ary, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_ptr_table_clear(%struct.ptr_tbl* %tbl) #0 {
entry:
  %tbl.addr = alloca %struct.ptr_tbl*, align 8
  %arena = alloca %struct.ptr_tbl_arena*, align 8
  %next = alloca %struct.ptr_tbl_arena*, align 8
  store %struct.ptr_tbl* %tbl, %struct.ptr_tbl** %tbl.addr, align 8
  %0 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tobool = icmp ne %struct.ptr_tbl* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_items = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %1, i32 0, i32 2
  %2 = load i64, i64* %tbl_items, align 8
  %tobool1 = icmp ne i64 %2, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_arena = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %3, i32 0, i32 3
  %4 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %tbl_arena, align 8
  store %struct.ptr_tbl_arena* %4, %struct.ptr_tbl_arena** %arena, align 8
  %5 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_ary = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %5, i32 0, i32 0
  %6 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %tbl_ary, align 8
  %7 = bitcast %struct.ptr_tbl_ent** %6 to i8*
  %8 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_max = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %8, i32 0, i32 1
  %9 = load i64, i64* %tbl_max, align 8
  %add = add i64 %9, 1
  %mul = mul i64 %add, 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 0, i64 %mul, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %10 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %arena, align 8
  %tobool2 = icmp ne %struct.ptr_tbl_arena* %10, null
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %arena, align 8
  %next3 = getelementptr inbounds %struct.ptr_tbl_arena, %struct.ptr_tbl_arena* %11, i32 0, i32 0
  %12 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %next3, align 8
  store %struct.ptr_tbl_arena* %12, %struct.ptr_tbl_arena** %next, align 8
  %13 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %arena, align 8
  %14 = bitcast %struct.ptr_tbl_arena* %13 to i8*
  call void @Perl_safesysfree(i8* %14)
  %15 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %next, align 8
  store %struct.ptr_tbl_arena* %15, %struct.ptr_tbl_arena** %arena, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_items4 = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %16, i32 0, i32 2
  store i64 0, i64* %tbl_items4, align 8
  %17 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_arena5 = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %17, i32 0, i32 3
  store %struct.ptr_tbl_arena* null, %struct.ptr_tbl_arena** %tbl_arena5, align 8
  %18 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_arena_next = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %18, i32 0, i32 4
  store %struct.ptr_tbl_ent* null, %struct.ptr_tbl_ent** %tbl_arena_next, align 8
  %19 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_arena_end = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %19, i32 0, i32 5
  store %struct.ptr_tbl_ent* null, %struct.ptr_tbl_ent** %tbl_arena_end, align 8
  br label %if.end

if.end:                                           ; preds = %while.end, %land.lhs.true, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_ptr_table_free(%struct.ptr_tbl* %tbl) #0 {
entry:
  %tbl.addr = alloca %struct.ptr_tbl*, align 8
  %arena = alloca %struct.ptr_tbl_arena*, align 8
  %next = alloca %struct.ptr_tbl_arena*, align 8
  store %struct.ptr_tbl* %tbl, %struct.ptr_tbl** %tbl.addr, align 8
  %0 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tobool = icmp ne %struct.ptr_tbl* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_arena = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %1, i32 0, i32 3
  %2 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %tbl_arena, align 8
  store %struct.ptr_tbl_arena* %2, %struct.ptr_tbl_arena** %arena, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %arena, align 8
  %tobool1 = icmp ne %struct.ptr_tbl_arena* %3, null
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %arena, align 8
  %next2 = getelementptr inbounds %struct.ptr_tbl_arena, %struct.ptr_tbl_arena* %4, i32 0, i32 0
  %5 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %next2, align 8
  store %struct.ptr_tbl_arena* %5, %struct.ptr_tbl_arena** %next, align 8
  %6 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %arena, align 8
  %7 = bitcast %struct.ptr_tbl_arena* %6 to i8*
  call void @Perl_safesysfree(i8* %7)
  %8 = load %struct.ptr_tbl_arena*, %struct.ptr_tbl_arena** %next, align 8
  store %struct.ptr_tbl_arena* %8, %struct.ptr_tbl_arena** %arena, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %9 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %tbl_ary = getelementptr inbounds %struct.ptr_tbl, %struct.ptr_tbl* %9, i32 0, i32 0
  %10 = load %struct.ptr_tbl_ent**, %struct.ptr_tbl_ent*** %tbl_ary, align 8
  %11 = bitcast %struct.ptr_tbl_ent** %10 to i8*
  call void @Perl_safesysfree(i8* %11)
  %12 = load %struct.ptr_tbl*, %struct.ptr_tbl** %tbl.addr, align 8
  %13 = bitcast %struct.ptr_tbl* %12 to i8*
  call void @Perl_safesysfree(i8* %13)
  br label %return

return:                                           ; preds = %while.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_init_constants() #0 {
entry:
  store i32 2147483647, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_undef, i32 0, i32 1), align 8
  store i32 134283264, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_undef, i32 0, i32 2), align 4
  store i8* null, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_undef, i32 0, i32 0), align 8
  %call = call i8* @S_new_body(i32 6)
  %0 = load i8, i8* getelementptr inbounds ([16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 6, i32 2), align 2
  %conv = zext i8 %0 to i32
  %idx.ext = sext i32 %conv to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %idx.neg
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_no, i32 0, i32 0), align 8
  store i32 2147483647, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_no, i32 0, i32 1), align 8
  store i32 134313734, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_no, i32 0, i32 2), align 4
  %call1 = call i8* @S_new_body(i32 6)
  %1 = load i8, i8* getelementptr inbounds ([16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 6, i32 2), align 2
  %conv2 = zext i8 %1 to i32
  %idx.ext3 = sext i32 %conv2 to i64
  %idx.neg4 = sub i64 0, %idx.ext3
  %add.ptr5 = getelementptr inbounds i8, i8* %call1, i64 %idx.neg4
  store i8* %add.ptr5, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_yes, i32 0, i32 0), align 8
  store i32 2147483647, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_yes, i32 0, i32 1), align 8
  store i32 134313734, i32* getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_yes, i32 0, i32 2), align 4
  br label %do.body

do.body:                                          ; preds = %entry
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_No, i64 0, i64 0), i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_no, i32 0, i32 3, i32 0), align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body6

do.body6:                                         ; preds = %do.end
  %2 = load i8*, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_no, i32 0, i32 0), align 8
  %3 = bitcast i8* %2 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %3, i32 0, i32 2
  store i64 0, i64* %xpv_cur, align 8
  br label %do.end7

do.end7:                                          ; preds = %do.body6
  br label %do.body8

do.body8:                                         ; preds = %do.end7
  %4 = load i8*, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_no, i32 0, i32 0), align 8
  %5 = bitcast i8* %4 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %5, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.19* %xpv_len_u to i64*
  store i64 0, i64* %xpvlenu_len, align 8
  br label %do.end9

do.end9:                                          ; preds = %do.body8
  br label %do.body10

do.body10:                                        ; preds = %do.end9
  %6 = load i8*, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_no, i32 0, i32 0), align 8
  %7 = bitcast i8* %6 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %7, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  store i64 0, i64* %xivu_iv, align 8
  br label %do.end11

do.end11:                                         ; preds = %do.body10
  br label %do.body12

do.body12:                                        ; preds = %do.end11
  %8 = load i8*, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_no, i32 0, i32 0), align 8
  %9 = bitcast i8* %8 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %9, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  store double 0.000000e+00, double* %xnv_nv, align 8
  br label %do.end13

do.end13:                                         ; preds = %do.body12
  br label %do.body14

do.body14:                                        ; preds = %do.end13
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_Yes, i64 0, i64 0), i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_yes, i32 0, i32 3, i32 0), align 8
  br label %do.end15

do.end15:                                         ; preds = %do.body14
  br label %do.body16

do.body16:                                        ; preds = %do.end15
  %10 = load i8*, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_yes, i32 0, i32 0), align 8
  %11 = bitcast i8* %10 to %struct.xpv*
  %xpv_cur17 = getelementptr inbounds %struct.xpv, %struct.xpv* %11, i32 0, i32 2
  store i64 1, i64* %xpv_cur17, align 8
  br label %do.end18

do.end18:                                         ; preds = %do.body16
  br label %do.body19

do.body19:                                        ; preds = %do.end18
  %12 = load i8*, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_yes, i32 0, i32 0), align 8
  %13 = bitcast i8* %12 to %struct.xpv*
  %xpv_len_u20 = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 3
  %xpvlenu_len21 = bitcast %union.anon.19* %xpv_len_u20 to i64*
  store i64 0, i64* %xpvlenu_len21, align 8
  br label %do.end22

do.end22:                                         ; preds = %do.body19
  br label %do.body23

do.body23:                                        ; preds = %do.end22
  %14 = load i8*, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_yes, i32 0, i32 0), align 8
  %15 = bitcast i8* %14 to %struct.xpviv*
  %xiv_u24 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %15, i32 0, i32 4
  %xivu_iv25 = bitcast %union._xivu* %xiv_u24 to i64*
  store i64 1, i64* %xivu_iv25, align 8
  br label %do.end26

do.end26:                                         ; preds = %do.body23
  br label %do.body27

do.body27:                                        ; preds = %do.end26
  %16 = load i8*, i8** getelementptr inbounds (%struct.sv, %struct.sv* @PL_sv_yes, i32 0, i32 0), align 8
  %17 = bitcast i8* %16 to %struct.xpvnv*
  %xnv_u28 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %17, i32 0, i32 5
  %xnv_nv29 = bitcast %union._xnvu* %xnv_u28 to double*
  store double 1.000000e+00, double* %xnv_nv29, align 8
  br label %do.end30

do.end30:                                         ; preds = %do.body27
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_No, i64 0, i64 0), i8** getelementptr inbounds (%struct.padname, %struct.padname* @PL_padname_const, i32 0, i32 0), align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_new_body(i32 %sv_type) #0 {
entry:
  %sv_type.addr = alloca i32, align 4
  %xpv = alloca i8*, align 8
  %r3wt = alloca i8**, align 8
  store i32 %sv_type, i32* %sv_type.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %sv_type.addr, align 4
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [16 x i8*], [16 x i8*]* @PL_body_roots, i64 0, i64 %idxprom
  store i8** %arrayidx, i8*** %r3wt, align 8
  %1 = load i8**, i8*** %r3wt, align 8
  %2 = load i8*, i8** %1, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  %3 = load i8**, i8*** %r3wt, align 8
  %4 = load i8*, i8** %3, align 8
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %5 = load i32, i32* %sv_type.addr, align 4
  %6 = load i32, i32* %sv_type.addr, align 4
  %idxprom1 = zext i32 %6 to i64
  %arrayidx2 = getelementptr inbounds [16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 %idxprom1
  %body_size = getelementptr inbounds %struct.body_details, %struct.body_details* %arrayidx2, i32 0, i32 0
  %7 = load i8, i8* %body_size, align 8
  %conv = zext i8 %7 to i64
  %8 = load i32, i32* %sv_type.addr, align 4
  %idxprom3 = zext i32 %8 to i64
  %arrayidx4 = getelementptr inbounds [16 x %struct.body_details], [16 x %struct.body_details]* @bodies_by_type, i64 0, i64 %idxprom3
  %arena_size = getelementptr inbounds %struct.body_details, %struct.body_details* %arrayidx4, i32 0, i32 4
  %9 = load i32, i32* %arena_size, align 4
  %conv5 = zext i32 %9 to i64
  %call = call i8* @Perl_more_bodies(i32 %5, i64 %conv, i64 %conv5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ %call, %cond.false ]
  %10 = bitcast i8* %cond to %struct.ptr_tbl_ent*
  %11 = bitcast %struct.ptr_tbl_ent* %10 to i8*
  store i8* %11, i8** %xpv, align 8
  %12 = load i8*, i8** %xpv, align 8
  %13 = bitcast i8* %12 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = load i8**, i8*** %r3wt, align 8
  store i8* %14, i8** %15, align 8
  br label %do.end

do.end:                                           ; preds = %cond.end
  %16 = load i8*, i8** %xpv, align 8
  ret i8* %16
}

declare dso_local void @Perl_push_scope() #1

declare dso_local %struct.stackinfo* @Perl_new_stackinfo(i32, i32) #1

declare dso_local void @Perl_save_strlen(i64*) #1

declare dso_local void @Perl_save_re_context() #1

declare dso_local i32* @Perl_markstack_grow() #1

declare dso_local %struct.sv** @Perl_stack_grow(%struct.sv**, %struct.sv**, i64) #1

declare dso_local i32 @Perl_call_method(i8*, i32) #1

declare dso_local void @Perl_free_tmps() #1

declare dso_local void @Perl_croak_popstack() #1

declare dso_local void @Perl_pop_scope() #1

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @Perl_sv_cat_decode(%struct.sv* %dsv, %struct.sv* %encoding, %struct.sv* %ssv, i32* %offset, i8* %tstr, i32 %tlen) #0 {
entry:
  %dsv.addr = alloca %struct.sv*, align 8
  %encoding.addr = alloca %struct.sv*, align 8
  %ssv.addr = alloca %struct.sv*, align 8
  %offset.addr = alloca i32*, align 8
  %tstr.addr = alloca i8*, align 8
  %tlen.addr = alloca i32, align 4
  %ret = alloca i8, align 1
  %offsv = alloca %struct.sv*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark_stack_entry = alloca i32*, align 8
  store %struct.sv* %dsv, %struct.sv** %dsv.addr, align 8
  store %struct.sv* %encoding, %struct.sv** %encoding.addr, align 8
  store %struct.sv* %ssv, %struct.sv** %ssv.addr, align 8
  store i32* %offset, i32** %offset.addr, align 8
  store i8* %tstr, i8** %tstr.addr, align 8
  store i32 %tlen, i32* %tlen.addr, align 4
  store i8 0, i8* %ret, align 1
  %0 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 1024
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 1024
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.lhs.true4, label %if.else

land.lhs.true4:                                   ; preds = %land.lhs.true
  %4 = load %struct.sv*, %struct.sv** %encoding.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %5, 2048
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true4
  %6 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %6, %struct.sv*** %sp, align 8
  call void @Perl_push_scope()
  call void @Perl_save_strlen(i64* @PL_tmps_floor)
  %7 = load i64, i64* @PL_tmps_ix, align 8
  store i64 %7, i64* @PL_tmps_floor, align 8
  call void @Perl_save_re_context()
  br label %do.body

do.body:                                          ; preds = %if.then
  %8 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %8, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr, i32** %mark_stack_entry, align 8
  %9 = load i32*, i32** @PL_markstack_max, align 8
  %cmp = icmp eq i32* %incdec.ptr, %9
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then8, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then8, label %if.end

if.then8:                                         ; preds = %cond.false, %cond.true
  %call = call i32* @Perl_markstack_grow()
  store i32* %call, i32** %mark_stack_entry, align 8
  br label %if.end

if.end:                                           ; preds = %if.then8, %cond.false, %cond.true
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %10 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  %12 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv, i32* %12, align 4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body9

do.body9:                                         ; preds = %do.end
  %13 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast10 = ptrtoint %struct.sv** %13 to i64
  %sub.ptr.rhs.cast11 = ptrtoint %struct.sv** %14 to i64
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast10, %sub.ptr.rhs.cast11
  %sub.ptr.div13 = sdiv exact i64 %sub.ptr.sub12, 8
  %cmp14 = icmp slt i64 %sub.ptr.div13, 6
  br i1 %cmp14, label %cond.true16, label %cond.false17

cond.true16:                                      ; preds = %do.body9
  br i1 true, label %if.then18, label %if.end20

cond.false17:                                     ; preds = %do.body9
  br i1 false, label %if.then18, label %if.end20

if.then18:                                        ; preds = %cond.false17, %cond.true16
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call19 = call %struct.sv** @Perl_stack_grow(%struct.sv** %15, %struct.sv** %16, i64 6)
  store %struct.sv** %call19, %struct.sv*** %sp, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %cond.false17, %cond.true16
  br label %do.end21

do.end21:                                         ; preds = %if.end20
  %18 = load %struct.sv*, %struct.sv** %encoding.addr, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr22 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 1
  store %struct.sv** %incdec.ptr22, %struct.sv*** %sp, align 8
  store %struct.sv* %18, %struct.sv** %incdec.ptr22, align 8
  %20 = load %struct.sv*, %struct.sv** %dsv.addr, align 8
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr23 = getelementptr inbounds %struct.sv*, %struct.sv** %21, i32 1
  store %struct.sv** %incdec.ptr23, %struct.sv*** %sp, align 8
  store %struct.sv* %20, %struct.sv** %incdec.ptr23, align 8
  %22 = load %struct.sv*, %struct.sv** %ssv.addr, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr24 = getelementptr inbounds %struct.sv*, %struct.sv** %23, i32 1
  store %struct.sv** %incdec.ptr24, %struct.sv*** %sp, align 8
  store %struct.sv* %22, %struct.sv** %incdec.ptr24, align 8
  %24 = load i32*, i32** %offset.addr, align 8
  %25 = load i32, i32* %24, align 4
  %conv25 = sext i32 %25 to i64
  %call26 = call %struct.sv* @Perl_newSViv(i64 %conv25)
  store %struct.sv* %call26, %struct.sv** %offsv, align 8
  %26 = load %struct.sv*, %struct.sv** %offsv, align 8
  %call27 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %26)
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr28 = getelementptr inbounds %struct.sv*, %struct.sv** %27, i32 1
  store %struct.sv** %incdec.ptr28, %struct.sv*** %sp, align 8
  store %struct.sv* %call27, %struct.sv** %incdec.ptr28, align 8
  %28 = load i8*, i8** %tstr.addr, align 8
  %29 = load i32, i32* %tlen.addr, align 4
  %conv29 = sext i32 %29 to i64
  %call30 = call %struct.sv* @Perl_newSVpvn_flags(i8* %28, i64 %conv29, i32 524288)
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr31 = getelementptr inbounds %struct.sv*, %struct.sv** %30, i32 1
  store %struct.sv** %incdec.ptr31, %struct.sv*** %sp, align 8
  store %struct.sv* %call30, %struct.sv** %incdec.ptr31, align 8
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %31, %struct.sv*** @PL_stack_sp, align 8
  %call32 = call i32 @Perl_call_method(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.84, i64 0, i64 0), i32 2)
  %32 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %32, %struct.sv*** %sp, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %34 = load %struct.sv*, %struct.sv** %33, align 8
  %tobool33 = icmp ne %struct.sv* %34, null
  br i1 %tobool33, label %cond.true34, label %cond.false35

cond.true34:                                      ; preds = %do.end21
  br i1 true, label %land.rhs, label %land.end115

cond.false35:                                     ; preds = %do.end21
  br i1 false, label %land.rhs, label %land.end115

land.rhs:                                         ; preds = %cond.false35, %cond.true34
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %36 = load %struct.sv*, %struct.sv** %35, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %37, 2097152
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %cond.true39, label %cond.false40

cond.true39:                                      ; preds = %land.rhs
  br i1 true, label %cond.true41, label %cond.false44

cond.false40:                                     ; preds = %land.rhs
  br i1 false, label %cond.true41, label %cond.false44

cond.true41:                                      ; preds = %cond.false40, %cond.true39
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %39 = load %struct.sv*, %struct.sv** %38, align 8
  %call42 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %39, i32 2)
  %conv43 = zext i1 %call42 to i32
  br label %cond.end112

cond.false44:                                     ; preds = %cond.false40, %cond.true39
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  %41 = load %struct.sv*, %struct.sv** %40, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %42, 65280
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %cond.false58, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false44
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  %44 = load %struct.sv*, %struct.sv** %43, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %45, 255
  %cmp50 = icmp eq i32 %and49, 8
  br i1 %cmp50, label %cond.false58, label %lor.lhs.false52

lor.lhs.false52:                                  ; preds = %lor.lhs.false
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  %47 = load %struct.sv*, %struct.sv** %46, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %48, 16826623
  %cmp55 = icmp eq i32 %and54, 16777226
  br i1 %cmp55, label %cond.false58, label %cond.true57

cond.true57:                                      ; preds = %lor.lhs.false52
  br label %cond.end110

cond.false58:                                     ; preds = %lor.lhs.false52, %lor.lhs.false, %cond.false44
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  %50 = load %struct.sv*, %struct.sv** %49, align 8
  %sv_flags59 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags59, align 4
  %and60 = and i32 %51, 1024
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %cond.true62, label %cond.false76

cond.true62:                                      ; preds = %cond.false58
  %52 = load %struct.sv**, %struct.sv*** %sp, align 8
  %53 = load %struct.sv*, %struct.sv** %52, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 0
  %54 = load i8*, i8** %sv_any, align 8
  %55 = bitcast i8* %54 to %struct.xpv*
  %tobool63 = icmp ne %struct.xpv* %55, null
  br i1 %tobool63, label %land.rhs64, label %land.end75

land.rhs64:                                       ; preds = %cond.true62
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  %57 = load %struct.sv*, %struct.sv** %56, align 8
  %sv_any65 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 0
  %58 = load i8*, i8** %sv_any65, align 8
  %59 = bitcast i8* %58 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %59, i32 0, i32 2
  %60 = load i64, i64* %xpv_cur, align 8
  %cmp66 = icmp ugt i64 %60, 1
  br i1 %cmp66, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs64
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  %62 = load %struct.sv*, %struct.sv** %61, align 8
  %sv_any68 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any68, align 8
  %64 = bitcast i8* %63 to %struct.xpv*
  %xpv_cur69 = getelementptr inbounds %struct.xpv, %struct.xpv* %64, i32 0, i32 2
  %65 = load i64, i64* %xpv_cur69, align 8
  %tobool70 = icmp ne i64 %65, 0
  br i1 %tobool70, label %land.rhs71, label %land.end

land.rhs71:                                       ; preds = %lor.rhs
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  %67 = load %struct.sv*, %struct.sv** %66, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %68 = load i8*, i8** %svu_pv, align 8
  %69 = load i8, i8* %68, align 1
  %conv72 = sext i8 %69 to i32
  %cmp73 = icmp ne i32 %conv72, 48
  br label %land.end

land.end:                                         ; preds = %land.rhs71, %lor.rhs
  %70 = phi i1 [ false, %lor.rhs ], [ %cmp73, %land.rhs71 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs64
  %71 = phi i1 [ true, %land.rhs64 ], [ %70, %land.end ]
  br label %land.end75

land.end75:                                       ; preds = %lor.end, %cond.true62
  %72 = phi i1 [ false, %cond.true62 ], [ %71, %lor.end ]
  %land.ext = zext i1 %72 to i32
  br label %cond.end108

cond.false76:                                     ; preds = %cond.false58
  %73 = load %struct.sv**, %struct.sv*** %sp, align 8
  %74 = load %struct.sv*, %struct.sv** %73, align 8
  %sv_flags77 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags77, align 4
  %and78 = and i32 %75, 768
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %cond.true80, label %cond.false105

cond.true80:                                      ; preds = %cond.false76
  %76 = load %struct.sv**, %struct.sv*** %sp, align 8
  %77 = load %struct.sv*, %struct.sv** %76, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %78, 256
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %land.lhs.true84, label %lor.rhs88

land.lhs.true84:                                  ; preds = %cond.true80
  %79 = load %struct.sv**, %struct.sv*** %sp, align 8
  %80 = load %struct.sv*, %struct.sv** %79, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 0
  %81 = load i8*, i8** %sv_any85, align 8
  %82 = bitcast i8* %81 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %82, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %83 = load i64, i64* %xivu_iv, align 8
  %cmp86 = icmp ne i64 %83, 0
  br i1 %cmp86, label %lor.end104, label %lor.rhs88

lor.rhs88:                                        ; preds = %land.lhs.true84, %cond.true80
  %84 = load %struct.sv**, %struct.sv*** %sp, align 8
  %85 = load %struct.sv*, %struct.sv** %84, align 8
  %sv_flags89 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %86, 512
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %land.rhs92, label %land.end102

land.rhs92:                                       ; preds = %lor.rhs88
  %87 = load %struct.sv**, %struct.sv*** %sp, align 8
  %88 = load %struct.sv*, %struct.sv** %87, align 8
  %sv_any93 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 0
  %89 = load i8*, i8** %sv_any93, align 8
  %90 = bitcast i8* %89 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %90, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %91 = load double, double* %xnv_nv, align 8
  %cmp94 = fcmp uno double %91, %91
  br i1 %cmp94, label %lor.end101, label %lor.rhs95

lor.rhs95:                                        ; preds = %land.rhs92
  %92 = load %struct.sv**, %struct.sv*** %sp, align 8
  %93 = load %struct.sv*, %struct.sv** %92, align 8
  %sv_any96 = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 0
  %94 = load i8*, i8** %sv_any96, align 8
  %95 = bitcast i8* %94 to %struct.xpvnv*
  %xnv_u97 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %95, i32 0, i32 5
  %xnv_nv98 = bitcast %union._xnvu* %xnv_u97 to double*
  %96 = load double, double* %xnv_nv98, align 8
  %cmp99 = fcmp une double %96, 0.000000e+00
  br label %lor.end101

lor.end101:                                       ; preds = %lor.rhs95, %land.rhs92
  %97 = phi i1 [ true, %land.rhs92 ], [ %cmp99, %lor.rhs95 ]
  br label %land.end102

land.end102:                                      ; preds = %lor.end101, %lor.rhs88
  %98 = phi i1 [ false, %lor.rhs88 ], [ %97, %lor.end101 ]
  br label %lor.end104

lor.end104:                                       ; preds = %land.end102, %land.lhs.true84
  %99 = phi i1 [ true, %land.lhs.true84 ], [ %98, %land.end102 ]
  %lor.ext = zext i1 %99 to i32
  br label %cond.end

cond.false105:                                    ; preds = %cond.false76
  %100 = load %struct.sv**, %struct.sv*** %sp, align 8
  %101 = load %struct.sv*, %struct.sv** %100, align 8
  %call106 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %101, i32 0)
  %conv107 = zext i1 %call106 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false105, %lor.end104
  %cond = phi i32 [ %lor.ext, %lor.end104 ], [ %conv107, %cond.false105 ]
  br label %cond.end108

cond.end108:                                      ; preds = %cond.end, %land.end75
  %cond109 = phi i32 [ %land.ext, %land.end75 ], [ %cond, %cond.end ]
  br label %cond.end110

cond.end110:                                      ; preds = %cond.end108, %cond.true57
  %cond111 = phi i32 [ 0, %cond.true57 ], [ %cond109, %cond.end108 ]
  br label %cond.end112

cond.end112:                                      ; preds = %cond.end110, %cond.true41
  %cond113 = phi i32 [ %conv43, %cond.true41 ], [ %cond111, %cond.end110 ]
  %tobool114 = icmp ne i32 %cond113, 0
  br label %land.end115

land.end115:                                      ; preds = %cond.end112, %cond.false35, %cond.true34
  %102 = phi i1 [ false, %cond.false35 ], [ false, %cond.true34 ], [ %tobool114, %cond.end112 ]
  %frombool = zext i1 %102 to i8
  store i8 %frombool, i8* %ret, align 1
  %103 = load %struct.sv*, %struct.sv** %offsv, align 8
  %sv_flags117 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags117, align 4
  %and118 = and i32 %104, 2097408
  %cmp119 = icmp eq i32 %and118, 256
  br i1 %cmp119, label %cond.true121, label %cond.false125

cond.true121:                                     ; preds = %land.end115
  %105 = load %struct.sv*, %struct.sv** %offsv, align 8
  %sv_any122 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 0
  %106 = load i8*, i8** %sv_any122, align 8
  %107 = bitcast i8* %106 to %struct.xpviv*
  %xiv_u123 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %107, i32 0, i32 4
  %xivu_iv124 = bitcast %union._xivu* %xiv_u123 to i64*
  %108 = load i64, i64* %xivu_iv124, align 8
  br label %cond.end127

cond.false125:                                    ; preds = %land.end115
  %109 = load %struct.sv*, %struct.sv** %offsv, align 8
  %call126 = call i64 @Perl_sv_2iv_flags(%struct.sv* %109, i32 2)
  br label %cond.end127

cond.end127:                                      ; preds = %cond.false125, %cond.true121
  %cond128 = phi i64 [ %108, %cond.true121 ], [ %call126, %cond.false125 ]
  %conv129 = trunc i64 %cond128 to i32
  %110 = load i32*, i32** %offset.addr, align 8
  store i32 %conv129, i32* %110, align 4
  %111 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %111, %struct.sv*** @PL_stack_sp, align 8
  %112 = load i64, i64* @PL_tmps_ix, align 8
  %113 = load i64, i64* @PL_tmps_floor, align 8
  %cmp130 = icmp sgt i64 %112, %113
  br i1 %cmp130, label %if.then132, label %if.end133

if.then132:                                       ; preds = %cond.end127
  call void @Perl_free_tmps()
  br label %if.end133

if.end133:                                        ; preds = %if.then132, %cond.end127
  call void @Perl_pop_scope()
  br label %if.end134

if.else:                                          ; preds = %land.lhs.true4, %land.lhs.true, %entry
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.85, i64 0, i64 0))
  br label %if.end134

if.end134:                                        ; preds = %if.else, %if.end133
  %114 = load i8, i8* %ret, align 1
  %tobool135 = trunc i8 %114 to i1
  ret i1 %tobool135
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_varname(%struct.gv* %gv, i8 signext %gvtype, i64 %targ, %struct.sv* %keyname, i32 %aindex, i32 %subscript_type) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %gv.addr = alloca %struct.gv*, align 8
  %gvtype.addr = alloca i8, align 1
  %targ.addr = alloca i64, align 8
  %keyname.addr = alloca %struct.sv*, align 8
  %aindex.addr = alloca i32, align 4
  %subscript_type.addr = alloca i32, align 4
  %name = alloca %struct.sv*, align 8
  %buffer = alloca [2 x i8], align 1
  %cv = alloca %struct.cv*, align 8
  %sv = alloca %struct.padname*, align 8
  %sv30 = alloca %struct.sv*, align 8
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  store i8 %gvtype, i8* %gvtype.addr, align 1
  store i64 %targ, i64* %targ.addr, align 8
  store %struct.sv* %keyname, %struct.sv** %keyname.addr, align 8
  store i32 %aindex, i32* %aindex.addr, align 4
  store i32 %subscript_type, i32* %subscript_type.addr, align 4
  %call = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call, %struct.sv** %name, align 8
  %0 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %tobool = icmp ne %struct.gv* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 255
  %cmp = icmp eq i32 %and, 9
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load i8, i8* %gvtype.addr, align 1
  %arrayidx = getelementptr inbounds [2 x i8], [2 x i8]* %buffer, i64 0, i64 0
  store i8 %3, i8* %arrayidx, align 1
  %arrayidx1 = getelementptr inbounds [2 x i8], [2 x i8]* %buffer, i64 0, i64 1
  store i8 0, i8* %arrayidx1, align 1
  %4 = load %struct.sv*, %struct.sv** %name, align 8
  %5 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %buffer, i64 0, i64 0
  call void @Perl_gv_fullname4(%struct.sv* %4, %struct.gv* %5, i8* %arraydecay, i1 zeroext false)
  %6 = load %struct.sv*, %struct.sv** %name, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %7 = load i8*, i8** %svu_pv, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx2, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp ule i32 %conv, 26
  br i1 %cmp3, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.then
  %arrayidx6 = getelementptr inbounds [2 x i8], [2 x i8]* %buffer, i64 0, i64 0
  store i8 94, i8* %arrayidx6, align 1
  %9 = load %struct.sv*, %struct.sv** %name, align 8
  %sv_u7 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_pv8 = bitcast %union.anon* %sv_u7 to i8**
  %10 = load i8*, i8** %svu_pv8, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %11 to i32
  %add = add nsw i32 %conv10, 65
  %sub = sub nsw i32 %add, 1
  %conv11 = trunc i32 %sub to i8
  %arrayidx12 = getelementptr inbounds [2 x i8], [2 x i8]* %buffer, i64 0, i64 1
  store i8 %conv11, i8* %arrayidx12, align 1
  %12 = load %struct.sv*, %struct.sv** %name, align 8
  %arraydecay13 = getelementptr inbounds [2 x i8], [2 x i8]* %buffer, i64 0, i64 0
  call void @Perl_sv_insert_flags(%struct.sv* %12, i64 1, i64 1, i8* %arraydecay13, i64 2, i32 2)
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.then
  br label %if.end26

if.else:                                          ; preds = %land.lhs.true, %entry
  %13 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %tobool14 = icmp ne %struct.gv* %13, null
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %14 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %15 = bitcast %struct.gv* %14 to %struct.cv*
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call15 = call %struct.cv* @Perl_find_runcv(i32* null)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.cv* [ %15, %cond.true ], [ %call15, %cond.false ]
  store %struct.cv* %cond, %struct.cv** %cv, align 8
  %16 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool16 = icmp ne %struct.cv* %16, null
  br i1 %tobool16, label %lor.lhs.false, label %if.then18

lor.lhs.false:                                    ; preds = %cond.end
  %17 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %17, i32 0, i32 0
  %18 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %19 = bitcast %struct.xpvcv* %18 to i8*
  %20 = bitcast i8* %19 to %struct.xpvcv*
  %xcv_padlist_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %20, i32 0, i32 9
  %xcv_padlist = bitcast %union.anon.11* %xcv_padlist_u to %struct.padlist**
  %21 = load %struct.padlist*, %struct.padlist** %xcv_padlist, align 8
  %tobool17 = icmp ne %struct.padlist* %21, null
  br i1 %tobool17, label %if.end19, label %if.then18

if.then18:                                        ; preds = %lor.lhs.false, %cond.end
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end19:                                         ; preds = %lor.lhs.false
  %22 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any20 = getelementptr inbounds %struct.cv, %struct.cv* %22, i32 0, i32 0
  %23 = load %struct.xpvcv*, %struct.xpvcv** %sv_any20, align 8
  %24 = bitcast %struct.xpvcv* %23 to i8*
  %25 = bitcast i8* %24 to %struct.xpvcv*
  %xcv_padlist_u21 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %25, i32 0, i32 9
  %xcv_padlist22 = bitcast %union.anon.11* %xcv_padlist_u21 to %struct.padlist**
  %26 = load %struct.padlist*, %struct.padlist** %xcv_padlist22, align 8
  %xpadl_alloc = getelementptr inbounds %struct.padlist, %struct.padlist* %26, i32 0, i32 1
  %27 = load %struct.av**, %struct.av*** %xpadl_alloc, align 8
  %28 = load %struct.av*, %struct.av** %27, align 8
  %29 = bitcast %struct.av* %28 to %struct.padnamelist*
  %30 = load i64, i64* %targ.addr, align 8
  %call23 = call %struct.padname* @Perl_padnamelist_fetch(%struct.padnamelist* %29, i64 %30)
  store %struct.padname* %call23, %struct.padname** %sv, align 8
  %31 = load %struct.sv*, %struct.sv** %name, align 8
  %32 = load %struct.padname*, %struct.padname** %sv, align 8
  %xpadn_pv = getelementptr inbounds %struct.padname, %struct.padname* %32, i32 0, i32 0
  %33 = load i8*, i8** %xpadn_pv, align 8
  %34 = load %struct.padname*, %struct.padname** %sv, align 8
  %xpadn_len = getelementptr inbounds %struct.padname, %struct.padname* %34, i32 0, i32 7
  %35 = load i8, i8* %xpadn_len, align 8
  %conv24 = zext i8 %35 to i64
  call void @Perl_sv_setpvn(%struct.sv* %31, i8* %33, i64 %conv24)
  %36 = load %struct.sv*, %struct.sv** %name, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags25, align 4
  %or = or i32 %37, 536870912
  store i32 %or, i32* %sv_flags25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.end19, %if.end
  %38 = load i32, i32* %subscript_type.addr, align 4
  %cmp27 = icmp eq i32 %38, 3
  br i1 %cmp27, label %if.then29, label %if.else38

if.then29:                                        ; preds = %if.end26
  %call31 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call31, %struct.sv** %sv30, align 8
  %39 = load %struct.sv*, %struct.sv** %name, align 8
  %sv_u32 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 3
  %svu_pv33 = bitcast %union.anon* %sv_u32 to i8**
  %40 = load i8*, i8** %svu_pv33, align 8
  store i8 36, i8* %40, align 1
  %41 = load %struct.sv*, %struct.sv** %name, align 8
  %42 = load %struct.sv*, %struct.sv** %sv30, align 8
  %43 = load %struct.sv*, %struct.sv** %keyname.addr, align 8
  %sv_u34 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 3
  %svu_pv35 = bitcast %union.anon* %sv_u34 to i8**
  %44 = load i8*, i8** %svu_pv35, align 8
  %add.ptr = getelementptr inbounds i8, i8* %44, i64 0
  %45 = load %struct.sv*, %struct.sv** %keyname.addr, align 8
  %sv_any36 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any36, align 8
  %47 = bitcast i8* %46 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %47, i32 0, i32 2
  %48 = load i64, i64* %xpv_cur, align 8
  %call37 = call i8* @Perl_pv_pretty(%struct.sv* %42, i8* %add.ptr, i64 %48, i64 32, i8* null, i8* null, i32 515)
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.86, i64 0, i64 0), i8* %call37)
  %49 = load %struct.sv*, %struct.sv** %sv30, align 8
  %50 = bitcast %struct.sv* %49 to i8*
  %51 = bitcast i8* %50 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %51)
  br label %if.end51

if.else38:                                        ; preds = %if.end26
  %52 = load i32, i32* %subscript_type.addr, align 4
  %cmp39 = icmp eq i32 %52, 2
  br i1 %cmp39, label %if.then41, label %if.else45

if.then41:                                        ; preds = %if.else38
  %53 = load %struct.sv*, %struct.sv** %name, align 8
  %sv_u42 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 3
  %svu_pv43 = bitcast %union.anon* %sv_u42 to i8**
  %54 = load i8*, i8** %svu_pv43, align 8
  store i8 36, i8* %54, align 1
  %55 = load %struct.sv*, %struct.sv** %name, align 8
  %56 = load i32, i32* %aindex.addr, align 4
  %conv44 = sext i32 %56 to i64
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %55, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.87, i64 0, i64 0), i64 %conv44)
  br label %if.end50

if.else45:                                        ; preds = %if.else38
  %57 = load i32, i32* %subscript_type.addr, align 4
  %cmp46 = icmp eq i32 %57, 4
  br i1 %cmp46, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.else45
  %58 = load %struct.sv*, %struct.sv** %name, align 8
  call void @Perl_sv_insert_flags(%struct.sv* %58, i64 0, i64 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.88, i64 0, i64 0), i64 7, i32 0)
  br label %if.end49

if.end49:                                         ; preds = %if.then48, %if.else45
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then41
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then29
  %59 = load %struct.sv*, %struct.sv** %name, align 8
  store %struct.sv* %59, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end51, %if.then18
  %60 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %60
}

declare dso_local void @Perl_gv_fullname4(%struct.sv*, %struct.gv*, i8*, i1 zeroext) #1

declare dso_local %struct.cv* @Perl_find_runcv(i32*) #1

declare dso_local %struct.padname* @Perl_padnamelist_fetch(%struct.padnamelist*, i64) #1

declare dso_local i8* @Perl_pv_pretty(%struct.sv*, i8*, i64, i64, i8*, i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_find_uninit_var(%struct.op* %obase, %struct.sv* %uninit_sv, i1 zeroext %match, i8** %desc_p) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %obase.addr = alloca %struct.op*, align 8
  %uninit_sv.addr = alloca %struct.sv*, align 8
  %match.addr = alloca i8, align 1
  %desc_p.addr = alloca i8**, align 8
  %sv = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %o = alloca %struct.op*, align 8
  %o2 = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %pad = alloca i8, align 1
  %hash = alloca i8, align 1
  %index = alloca i32, align 4
  %keysv = alloca %struct.sv*, align 8
  %subscript_type = alloca i32, align 4
  %svp = alloca %struct.sv**, align 8
  %av = alloca %struct.av*, align 8
  %svp185 = alloca %struct.sv**, align 8
  %av186 = alloca %struct.av*, align 8
  %negate = alloca i8, align 1
  %kidsv = alloca %struct.sv*, align 8
  %he = alloca %struct.he*, align 8
  %opsv = alloca %struct.sv*, align 8
  %opsviv = alloca i64, align 8
  %svp387 = alloca %struct.sv**, align 8
  %keysv461 = alloca %struct.sv*, align 8
  %index469 = alloca i32, align 4
  %agg_targ = alloca i64, align 8
  %agg_gv = alloca %struct.gv*, align 8
  %index_type = alloca i64, align 8
  %index_targ = alloca i64, align 8
  %index_gv = alloca %struct.gv*, align 8
  %index_const_iv = alloca i64, align 8
  %index_const_sv = alloca %struct.sv*, align 8
  %depth = alloca i32, align 4
  %items = alloca %union.UNOP_AUX_item*, align 8
  %last = alloca %union.UNOP_AUX_item*, align 8
  %actions = alloca i64, align 8
  %is_hv = alloca i8, align 1
  %he623 = alloca %struct.he*, align 8
  %svp634 = alloca %struct.sv**, align 8
  %keysv656 = alloca %struct.sv*, align 8
  %index663 = alloca i32, align 4
  %gv807 = alloca %struct.gv*, align 8
  %type = alloca i16, align 2
  store %struct.op* %obase, %struct.op** %obase.addr, align 8
  store %struct.sv* %uninit_sv, %struct.sv** %uninit_sv.addr, align 8
  %frombool = zext i1 %match to i8
  store i8 %frombool, i8* %match.addr, align 1
  store i8** %desc_p, i8*** %desc_p.addr, align 8
  %0 = load %struct.op*, %struct.op** %obase.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8, i8* %match.addr, align 1
  %tobool1 = trunc i8 %1 to i1
  br i1 %tobool1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %tobool2 = icmp ne %struct.sv* %2, null
  br i1 %tobool2, label %lor.lhs.false3, label %if.then

lor.lhs.false3:                                   ; preds = %land.lhs.true
  %3 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp = icmp eq %struct.sv* %3, @PL_sv_undef
  br i1 %cmp, label %if.then, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false3
  %4 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp5 = icmp eq %struct.sv* %4, @PL_sv_placeholder
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false3, %land.lhs.true, %entry
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false4, %lor.lhs.false
  %5 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 135, label %sw.bb
    i32 149, label %sw.bb
    i32 10, label %sw.bb
    i32 11, label %sw.bb
    i32 15, label %sw.bb90
    i32 9, label %sw.bb120
    i32 6, label %sw.bb132
    i32 137, label %sw.bb153
    i32 136, label %sw.bb178
    i32 148, label %sw.bb211
    i32 138, label %sw.bb233
    i32 150, label %sw.bb233
    i32 153, label %sw.bb499
    i32 38, label %sw.bb679
    i32 220, label %sw.bb683
    i32 35, label %sw.bb732
    i32 36, label %sw.bb732
    i32 33, label %sw.bb732
    i32 31, label %sw.bb732
    i32 237, label %sw.bb774
    i32 238, label %sw.bb774
    i32 239, label %sw.bb774
    i32 342, label %sw.bb804
    i32 380, label %sw.bb804
    i32 24, label %sw.bb804
    i32 222, label %sw.bb804
    i32 223, label %sw.bb804
    i32 225, label %sw.bb804
    i32 228, label %sw.bb804
    i32 233, label %sw.bb804
    i32 242, label %sw.bb804
    i32 251, label %sw.bb804
    i32 249, label %sw.bb804
    i32 253, label %sw.bb804
    i32 254, label %sw.bb804
    i32 255, label %sw.bb804
    i32 256, label %sw.bb804
    i32 257, label %sw.bb804
    i32 258, label %sw.bb804
    i32 259, label %sw.bb804
    i32 261, label %sw.bb804
    i32 263, label %sw.bb804
    i32 266, label %sw.bb804
    i32 267, label %sw.bb804
    i32 268, label %sw.bb804
    i32 277, label %sw.bb804
    i32 269, label %sw.bb804
    i32 270, label %sw.bb804
    i32 271, label %sw.bb804
    i32 278, label %sw.bb804
    i32 272, label %sw.bb804
    i32 279, label %sw.bb804
    i32 273, label %sw.bb804
    i32 283, label %sw.bb804
    i32 284, label %sw.bb804
    i32 289, label %sw.bb804
    i32 285, label %sw.bb804
    i32 280, label %sw.bb804
    i32 282, label %sw.bb804
    i32 281, label %sw.bb804
    i32 290, label %sw.bb804
    i32 286, label %sw.bb804
    i32 287, label %sw.bb804
    i32 288, label %sw.bb804
    i32 291, label %sw.bb804
    i32 292, label %sw.bb804
    i32 274, label %sw.bb804
    i32 275, label %sw.bb804
    i32 276, label %sw.bb804
    i32 302, label %sw.bb804
    i32 305, label %sw.bb804
    i32 306, label %sw.bb804
    i32 307, label %sw.bb804
    i32 308, label %sw.bb804
    i32 309, label %sw.bb804
    i32 310, label %sw.bb804
    i32 325, label %sw.bb804
    i32 326, label %sw.bb804
    i32 337, label %sw.bb804
    i32 376, label %sw.bb804
    i32 44, label %sw.bb804
    i32 121, label %sw.bb804
    i32 141, label %sw.bb804
    i32 144, label %sw.bb804
    i32 167, label %sw.bb804
    i32 188, label %sw.bb804
    i32 340, label %sw.bb804
    i32 19, label %sw.bb804
    i32 83, label %sw.bb804
    i32 107, label %sw.bb804
    i32 154, label %sw.bb804
    i32 240, label %sw.bb804
    i32 241, label %sw.bb804
    i32 185, label %sw.bb805
    i32 208, label %sw.bb805
    i32 174, label %sw.bb806
    i32 175, label %sw.bb806
    i32 46, label %sw.bb820
    i32 42, label %sw.bb827
    i32 41, label %sw.bb827
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end
  %6 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_type6 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load7 = load i16, i16* %op_type6, align 8
  %bf.clear8 = and i16 %bf.load7, 511
  %bf.cast9 = zext i16 %bf.clear8 to i32
  %cmp10 = icmp eq i32 %bf.cast9, 10
  br i1 %cmp10, label %lor.end, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %sw.bb
  %7 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_type12 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load13 = load i16, i16* %op_type12, align 8
  %bf.clear14 = and i16 %bf.load13, 511
  %bf.cast15 = zext i16 %bf.clear14 to i32
  %cmp16 = icmp eq i32 %bf.cast15, 11
  br i1 %cmp16, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false11
  %8 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_type17 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load18 = load i16, i16* %op_type17, align 8
  %bf.clear19 = and i16 %bf.load18, 511
  %bf.cast20 = zext i16 %bf.clear19 to i32
  %cmp21 = icmp eq i32 %bf.cast20, 390
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false11, %sw.bb
  %9 = phi i1 [ true, %lor.lhs.false11 ], [ true, %sw.bb ], [ %cmp21, %lor.rhs ]
  %frombool22 = zext i1 %9 to i8
  store i8 %frombool22, i8* %pad, align 1
  %10 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_type23 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load24 = load i16, i16* %op_type23, align 8
  %bf.clear25 = and i16 %bf.load24, 511
  %bf.cast26 = zext i16 %bf.clear25 to i32
  %cmp27 = icmp eq i32 %bf.cast26, 11
  br i1 %cmp27, label %lor.end41, label %lor.lhs.false28

lor.lhs.false28:                                  ; preds = %lor.end
  %11 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_type29 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 4
  %bf.load30 = load i16, i16* %op_type29, align 8
  %bf.clear31 = and i16 %bf.load30, 511
  %bf.cast32 = zext i16 %bf.clear31 to i32
  %cmp33 = icmp eq i32 %bf.cast32, 149
  br i1 %cmp33, label %lor.end41, label %lor.rhs34

lor.rhs34:                                        ; preds = %lor.lhs.false28
  %12 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_type35 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load36 = load i16, i16* %op_type35, align 8
  %bf.clear37 = and i16 %bf.load36, 511
  %bf.cast38 = zext i16 %bf.clear37 to i32
  %cmp39 = icmp eq i32 %bf.cast38, 390
  br i1 %cmp39, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs34
  %13 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %14 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 3
  %15 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %13, i64 %15
  %16 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags, align 4
  %and = and i32 %17, 255
  %cmp40 = icmp eq i32 %and, 12
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs34
  %18 = phi i1 [ false, %lor.rhs34 ], [ %cmp40, %land.rhs ]
  br label %lor.end41

lor.end41:                                        ; preds = %land.end, %lor.lhs.false28, %lor.end
  %19 = phi i1 [ true, %lor.lhs.false28 ], [ true, %lor.end ], [ %18, %land.end ]
  %frombool42 = zext i1 %19 to i8
  store i8 %frombool42, i8* %hash, align 1
  store i32 0, i32* %index, align 4
  store %struct.sv* null, %struct.sv** %keysv, align 8
  store i32 4, i32* %subscript_type, align 4
  %20 = load i8, i8* %pad, align 1
  %tobool43 = trunc i8 %20 to i1
  br i1 %tobool43, label %if.then44, label %if.else

if.then44:                                        ; preds = %lor.end41
  %21 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %22 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_targ45 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 3
  %23 = load i64, i64* %op_targ45, align 8
  %arrayidx46 = getelementptr inbounds %struct.sv*, %struct.sv** %21, i64 %23
  %24 = load %struct.sv*, %struct.sv** %arrayidx46, align 8
  store %struct.sv* %24, %struct.sv** %sv, align 8
  store %struct.gv* null, %struct.gv** %gv, align 8
  br label %if.end68

if.else:                                          ; preds = %lor.end41
  %25 = load %struct.op*, %struct.op** %obase.addr, align 8
  %26 = bitcast %struct.op* %25 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %26, i32 0, i32 7
  %27 = load %struct.op*, %struct.op** %op_first, align 8
  %op_type47 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 4
  %bf.load48 = load i16, i16* %op_type47, align 8
  %bf.clear49 = and i16 %bf.load48, 511
  %bf.cast50 = zext i16 %bf.clear49 to i32
  %cmp51 = icmp eq i32 %bf.cast50, 7
  br i1 %cmp51, label %if.then52, label %if.else61

if.then52:                                        ; preds = %if.else
  %28 = load %struct.op*, %struct.op** %obase.addr, align 8
  %29 = bitcast %struct.op* %28 to %struct.unop*
  %op_first53 = getelementptr inbounds %struct.unop, %struct.unop* %29, i32 0, i32 7
  %30 = load %struct.op*, %struct.op** %op_first53, align 8
  %31 = bitcast %struct.op* %30 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %31, i32 0, i32 7
  %32 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %33 = bitcast %struct.sv* %32 to %struct.gv*
  store %struct.gv* %33, %struct.gv** %gv, align 8
  %34 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool54 = icmp ne %struct.gv* %34, null
  br i1 %tobool54, label %if.end56, label %if.then55

if.then55:                                        ; preds = %if.then52
  br label %sw.epilog912

if.end56:                                         ; preds = %if.then52
  %35 = load i8, i8* %hash, align 1
  %tobool57 = trunc i8 %35 to i1
  br i1 %tobool57, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end56
  %36 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %36, i32 0, i32 3
  %svu_gp = bitcast %union.anon.6* %sv_u to %struct.gp**
  %37 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %37, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 5
  %38 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %39 = bitcast %struct.hv* %38 to i8*
  %40 = bitcast i8* %39 to %struct.sv*
  br label %cond.end

cond.false:                                       ; preds = %if.end56
  %41 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u58 = getelementptr inbounds %struct.gv, %struct.gv* %41, i32 0, i32 3
  %svu_gp59 = bitcast %union.anon.6* %sv_u58 to %struct.gp**
  %42 = load %struct.gp*, %struct.gp** %svu_gp59, align 8
  %add.ptr60 = getelementptr inbounds %struct.gp, %struct.gp* %42, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr60, i32 0, i32 6
  %43 = load %struct.av*, %struct.av** %gp_av, align 8
  %44 = bitcast %struct.av* %43 to i8*
  %45 = bitcast i8* %44 to %struct.sv*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %40, %cond.true ], [ %45, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %sv, align 8
  br label %if.end67

if.else61:                                        ; preds = %if.else
  %46 = load %struct.op*, %struct.op** %obase.addr, align 8
  %47 = load %struct.op*, %struct.op** @PL_op, align 8
  %cmp62 = icmp eq %struct.op* %46, %47
  br i1 %cmp62, label %if.then63, label %if.else66

if.then63:                                        ; preds = %if.else61
  %48 = load %struct.op*, %struct.op** %obase.addr, align 8
  %49 = bitcast %struct.op* %48 to %struct.unop*
  %op_first64 = getelementptr inbounds %struct.unop, %struct.unop* %49, i32 0, i32 7
  %50 = load %struct.op*, %struct.op** %op_first64, align 8
  %51 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %52 = load i8, i8* %match.addr, align 1
  %tobool65 = trunc i8 %52 to i1
  %53 = load i8**, i8*** %desc_p.addr, align 8
  %call = call %struct.sv* @S_find_uninit_var(%struct.op* %50, %struct.sv* %51, i1 zeroext %tobool65, i8** %53)
  store %struct.sv* %call, %struct.sv** %retval, align 8
  br label %return

if.else66:                                        ; preds = %if.else61
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end67:                                         ; preds = %cond.end
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then44
  %54 = load i8, i8* %hash, align 1
  %tobool69 = trunc i8 %54 to i1
  br i1 %tobool69, label %if.then70, label %if.else75

if.then70:                                        ; preds = %if.end68
  %55 = load %struct.sv*, %struct.sv** %sv, align 8
  %56 = bitcast %struct.sv* %55 to %struct.hv*
  %57 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %call71 = call %struct.sv* @S_find_hash_subscript(%struct.hv* %56, %struct.sv* %57)
  store %struct.sv* %call71, %struct.sv** %keysv, align 8
  %58 = load %struct.sv*, %struct.sv** %keysv, align 8
  %tobool72 = icmp ne %struct.sv* %58, null
  br i1 %tobool72, label %if.then73, label %if.end74

if.then73:                                        ; preds = %if.then70
  store i32 3, i32* %subscript_type, align 4
  br label %if.end74

if.end74:                                         ; preds = %if.then73, %if.then70
  br label %if.end80

if.else75:                                        ; preds = %if.end68
  %59 = load %struct.sv*, %struct.sv** %sv, align 8
  %60 = bitcast %struct.sv* %59 to %struct.av*
  %61 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %call76 = call i32 @S_find_array_subscript(%struct.av* %60, %struct.sv* %61)
  store i32 %call76, i32* %index, align 4
  %62 = load i32, i32* %index, align 4
  %cmp77 = icmp sge i32 %62, 0
  br i1 %cmp77, label %if.then78, label %if.end79

if.then78:                                        ; preds = %if.else75
  store i32 2, i32* %subscript_type, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.then78, %if.else75
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.end74
  %63 = load i8, i8* %match.addr, align 1
  %tobool81 = trunc i8 %63 to i1
  br i1 %tobool81, label %land.lhs.true82, label %if.end85

land.lhs.true82:                                  ; preds = %if.end80
  %64 = load i32, i32* %subscript_type, align 4
  %cmp83 = icmp eq i32 %64, 4
  br i1 %cmp83, label %if.then84, label %if.end85

if.then84:                                        ; preds = %land.lhs.true82
  br label %sw.epilog912

if.end85:                                         ; preds = %land.lhs.true82, %if.end80
  %65 = load %struct.gv*, %struct.gv** %gv, align 8
  %66 = load i8, i8* %hash, align 1
  %tobool86 = trunc i8 %66 to i1
  %67 = zext i1 %tobool86 to i64
  %cond87 = select i1 %tobool86, i32 37, i32 64
  %conv = trunc i32 %cond87 to i8
  %68 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_targ88 = getelementptr inbounds %struct.op, %struct.op* %68, i32 0, i32 3
  %69 = load i64, i64* %op_targ88, align 8
  %70 = load %struct.sv*, %struct.sv** %keysv, align 8
  %71 = load i32, i32* %index, align 4
  %72 = load i32, i32* %subscript_type, align 4
  %call89 = call %struct.sv* @Perl_varname(%struct.gv* %65, i8 signext %conv, i64 %69, %struct.sv* %70, i32 %71, i32 %72)
  store %struct.sv* %call89, %struct.sv** %retval, align 8
  br label %return

sw.bb90:                                          ; preds = %if.end
  %73 = load %struct.op*, %struct.op** %obase.addr, align 8
  %74 = bitcast %struct.op* %73 to %struct.unop*
  %op_first91 = getelementptr inbounds %struct.unop, %struct.unop* %74, i32 0, i32 7
  %75 = load %struct.op*, %struct.op** %op_first91, align 8
  %op_type92 = getelementptr inbounds %struct.op, %struct.op* %75, i32 0, i32 4
  %bf.load93 = load i16, i16* %op_type92, align 8
  %bf.clear94 = and i16 %bf.load93, 511
  %bf.cast95 = zext i16 %bf.clear94 to i32
  %cmp96 = icmp eq i32 %bf.cast95, 7
  br i1 %cmp96, label %if.then98, label %if.end117

if.then98:                                        ; preds = %sw.bb90
  %76 = load %struct.op*, %struct.op** %obase.addr, align 8
  %77 = bitcast %struct.op* %76 to %struct.unop*
  %op_first99 = getelementptr inbounds %struct.unop, %struct.unop* %77, i32 0, i32 7
  %78 = load %struct.op*, %struct.op** %op_first99, align 8
  %79 = bitcast %struct.op* %78 to %struct.svop*
  %op_sv100 = getelementptr inbounds %struct.svop, %struct.svop* %79, i32 0, i32 7
  %80 = load %struct.sv*, %struct.sv** %op_sv100, align 8
  %81 = bitcast %struct.sv* %80 to %struct.gv*
  store %struct.gv* %81, %struct.gv** %gv, align 8
  %82 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool101 = icmp ne %struct.gv* %82, null
  br i1 %tobool101, label %lor.lhs.false102, label %if.then104

lor.lhs.false102:                                 ; preds = %if.then98
  %83 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %83, i32 0, i32 0
  %84 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %84, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %85 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %tobool103 = icmp ne %struct.hv* %85, null
  br i1 %tobool103, label %if.end105, label %if.then104

if.then104:                                       ; preds = %lor.lhs.false102, %if.then98
  br label %sw.epilog912

if.end105:                                        ; preds = %lor.lhs.false102
  %86 = load i8, i8* %match.addr, align 1
  %tobool106 = trunc i8 %86 to i1
  br i1 %tobool106, label %land.lhs.true108, label %if.end115

land.lhs.true108:                                 ; preds = %if.end105
  %87 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u109 = getelementptr inbounds %struct.gv, %struct.gv* %87, i32 0, i32 3
  %svu_gp110 = bitcast %union.anon.6* %sv_u109 to %struct.gp**
  %88 = load %struct.gp*, %struct.gp** %svu_gp110, align 8
  %add.ptr111 = getelementptr inbounds %struct.gp, %struct.gp* %88, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr111, i32 0, i32 0
  %89 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %90 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp112 = icmp ne %struct.sv* %89, %90
  br i1 %cmp112, label %if.then114, label %if.end115

if.then114:                                       ; preds = %land.lhs.true108
  br label %sw.epilog912

if.end115:                                        ; preds = %land.lhs.true108, %if.end105
  %91 = load %struct.gv*, %struct.gv** %gv, align 8
  %call116 = call %struct.sv* @Perl_varname(%struct.gv* %91, i8 signext 36, i64 0, %struct.sv* null, i32 0, i32 1)
  store %struct.sv* %call116, %struct.sv** %retval, align 8
  br label %return

if.end117:                                        ; preds = %sw.bb90
  %92 = load %struct.op*, %struct.op** %obase.addr, align 8
  %93 = bitcast %struct.op* %92 to %struct.unop*
  %op_first118 = getelementptr inbounds %struct.unop, %struct.unop* %93, i32 0, i32 7
  %94 = load %struct.op*, %struct.op** %op_first118, align 8
  %95 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %96 = load i8**, i8*** %desc_p.addr, align 8
  %call119 = call %struct.sv* @S_find_uninit_var(%struct.op* %94, %struct.sv* %95, i1 zeroext true, i8** %96)
  store %struct.sv* %call119, %struct.sv** %retval, align 8
  br label %return

sw.bb120:                                         ; preds = %if.end
  %97 = load i8, i8* %match.addr, align 1
  %tobool121 = trunc i8 %97 to i1
  br i1 %tobool121, label %land.lhs.true123, label %if.end129

land.lhs.true123:                                 ; preds = %sw.bb120
  %98 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %99 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_targ124 = getelementptr inbounds %struct.op, %struct.op* %99, i32 0, i32 3
  %100 = load i64, i64* %op_targ124, align 8
  %arrayidx125 = getelementptr inbounds %struct.sv*, %struct.sv** %98, i64 %100
  %101 = load %struct.sv*, %struct.sv** %arrayidx125, align 8
  %102 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp126 = icmp ne %struct.sv* %101, %102
  br i1 %cmp126, label %if.then128, label %if.end129

if.then128:                                       ; preds = %land.lhs.true123
  br label %sw.epilog912

if.end129:                                        ; preds = %land.lhs.true123, %sw.bb120
  %103 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_targ130 = getelementptr inbounds %struct.op, %struct.op* %103, i32 0, i32 3
  %104 = load i64, i64* %op_targ130, align 8
  %call131 = call %struct.sv* @Perl_varname(%struct.gv* null, i8 signext 36, i64 %104, %struct.sv* null, i32 0, i32 1)
  store %struct.sv* %call131, %struct.sv** %retval, align 8
  br label %return

sw.bb132:                                         ; preds = %if.end
  %105 = load %struct.op*, %struct.op** %obase.addr, align 8
  %106 = bitcast %struct.op* %105 to %struct.svop*
  %op_sv133 = getelementptr inbounds %struct.svop, %struct.svop* %106, i32 0, i32 7
  %107 = load %struct.sv*, %struct.sv** %op_sv133, align 8
  %108 = bitcast %struct.sv* %107 to %struct.gv*
  store %struct.gv* %108, %struct.gv** %gv, align 8
  %109 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool134 = icmp ne %struct.gv* %109, null
  br i1 %tobool134, label %lor.lhs.false135, label %if.then150

lor.lhs.false135:                                 ; preds = %sw.bb132
  %110 = load i8, i8* %match.addr, align 1
  %tobool136 = trunc i8 %110 to i1
  br i1 %tobool136, label %land.lhs.true138, label %lor.lhs.false145

land.lhs.true138:                                 ; preds = %lor.lhs.false135
  %111 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u139 = getelementptr inbounds %struct.gv, %struct.gv* %111, i32 0, i32 3
  %svu_gp140 = bitcast %union.anon.6* %sv_u139 to %struct.gp**
  %112 = load %struct.gp*, %struct.gp** %svu_gp140, align 8
  %add.ptr141 = getelementptr inbounds %struct.gp, %struct.gp* %112, i64 0
  %gp_sv142 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr141, i32 0, i32 0
  %113 = load %struct.sv*, %struct.sv** %gp_sv142, align 8
  %114 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp143 = icmp ne %struct.sv* %113, %114
  br i1 %cmp143, label %if.then150, label %lor.lhs.false145

lor.lhs.false145:                                 ; preds = %land.lhs.true138, %lor.lhs.false135
  %115 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any146 = getelementptr inbounds %struct.gv, %struct.gv* %115, i32 0, i32 0
  %116 = load %struct.xpvgv*, %struct.xpvgv** %sv_any146, align 8
  %xnv_u147 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %116, i32 0, i32 5
  %xgv_stash148 = bitcast %union._xnvu* %xnv_u147 to %struct.hv**
  %117 = load %struct.hv*, %struct.hv** %xgv_stash148, align 8
  %tobool149 = icmp ne %struct.hv* %117, null
  br i1 %tobool149, label %if.end151, label %if.then150

if.then150:                                       ; preds = %lor.lhs.false145, %land.lhs.true138, %sw.bb132
  br label %sw.epilog912

if.end151:                                        ; preds = %lor.lhs.false145
  %118 = load %struct.gv*, %struct.gv** %gv, align 8
  %call152 = call %struct.sv* @Perl_varname(%struct.gv* %118, i8 signext 36, i64 0, %struct.sv* null, i32 0, i32 1)
  store %struct.sv* %call152, %struct.sv** %retval, align 8
  br label %return

sw.bb153:                                         ; preds = %if.end
  %119 = load i8, i8* %match.addr, align 1
  %tobool154 = trunc i8 %119 to i1
  br i1 %tobool154, label %if.then155, label %if.end173

if.then155:                                       ; preds = %sw.bb153
  %120 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %121 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_targ156 = getelementptr inbounds %struct.op, %struct.op* %121, i32 0, i32 3
  %122 = load i64, i64* %op_targ156, align 8
  %arrayidx157 = getelementptr inbounds %struct.sv*, %struct.sv** %120, i64 %122
  %123 = load %struct.sv*, %struct.sv** %arrayidx157, align 8
  %124 = bitcast %struct.sv* %123 to i8*
  %125 = bitcast i8* %124 to %struct.av*
  store %struct.av* %125, %struct.av** %av, align 8
  %126 = load %struct.av*, %struct.av** %av, align 8
  %tobool158 = icmp ne %struct.av* %126, null
  br i1 %tobool158, label %lor.lhs.false159, label %if.then163

lor.lhs.false159:                                 ; preds = %if.then155
  %127 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags160 = getelementptr inbounds %struct.av, %struct.av* %127, i32 0, i32 2
  %128 = load i32, i32* %sv_flags160, align 4
  %and161 = and i32 %128, 8388608
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %if.then163, label %if.end164

if.then163:                                       ; preds = %lor.lhs.false159, %if.then155
  br label %sw.epilog912

if.end164:                                        ; preds = %lor.lhs.false159
  %129 = load %struct.av*, %struct.av** %av, align 8
  %130 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %130, i32 0, i32 6
  %131 = load i8, i8* %op_private, align 1
  %conv165 = sext i8 %131 to i64
  %call166 = call %struct.sv** @Perl_av_fetch(%struct.av* %129, i64 %conv165, i32 0)
  store %struct.sv** %call166, %struct.sv*** %svp, align 8
  %132 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool167 = icmp ne %struct.sv** %132, null
  br i1 %tobool167, label %lor.lhs.false168, label %if.then171

lor.lhs.false168:                                 ; preds = %if.end164
  %133 = load %struct.sv**, %struct.sv*** %svp, align 8
  %134 = load %struct.sv*, %struct.sv** %133, align 8
  %135 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp169 = icmp ne %struct.sv* %134, %135
  br i1 %cmp169, label %if.then171, label %if.end172

if.then171:                                       ; preds = %lor.lhs.false168, %if.end164
  br label %sw.epilog912

if.end172:                                        ; preds = %lor.lhs.false168
  br label %if.end173

if.end173:                                        ; preds = %if.end172, %sw.bb153
  %136 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_targ174 = getelementptr inbounds %struct.op, %struct.op* %136, i32 0, i32 3
  %137 = load i64, i64* %op_targ174, align 8
  %138 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_private175 = getelementptr inbounds %struct.op, %struct.op* %138, i32 0, i32 6
  %139 = load i8, i8* %op_private175, align 1
  %conv176 = sext i8 %139 to i32
  %call177 = call %struct.sv* @Perl_varname(%struct.gv* null, i8 signext 36, i64 %137, %struct.sv* null, i32 %conv176, i32 2)
  store %struct.sv* %call177, %struct.sv** %retval, align 8
  br label %return

sw.bb178:                                         ; preds = %if.end
  %140 = load %struct.op*, %struct.op** %obase.addr, align 8
  %141 = bitcast %struct.op* %140 to %struct.svop*
  %op_sv179 = getelementptr inbounds %struct.svop, %struct.svop* %141, i32 0, i32 7
  %142 = load %struct.sv*, %struct.sv** %op_sv179, align 8
  %143 = bitcast %struct.sv* %142 to %struct.gv*
  store %struct.gv* %143, %struct.gv** %gv, align 8
  %144 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool180 = icmp ne %struct.gv* %144, null
  br i1 %tobool180, label %if.end182, label %if.then181

if.then181:                                       ; preds = %sw.bb178
  br label %sw.epilog912

if.end182:                                        ; preds = %sw.bb178
  %145 = load i8, i8* %match.addr, align 1
  %tobool183 = trunc i8 %145 to i1
  br i1 %tobool183, label %if.then184, label %if.end207

if.then184:                                       ; preds = %if.end182
  %146 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u187 = getelementptr inbounds %struct.gv, %struct.gv* %146, i32 0, i32 3
  %svu_gp188 = bitcast %union.anon.6* %sv_u187 to %struct.gp**
  %147 = load %struct.gp*, %struct.gp** %svu_gp188, align 8
  %add.ptr189 = getelementptr inbounds %struct.gp, %struct.gp* %147, i64 0
  %gp_av190 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr189, i32 0, i32 6
  %148 = load %struct.av*, %struct.av** %gp_av190, align 8
  store %struct.av* %148, %struct.av** %av186, align 8
  %149 = load %struct.av*, %struct.av** %av186, align 8
  %tobool191 = icmp ne %struct.av* %149, null
  br i1 %tobool191, label %lor.lhs.false192, label %if.then196

lor.lhs.false192:                                 ; preds = %if.then184
  %150 = load %struct.av*, %struct.av** %av186, align 8
  %sv_flags193 = getelementptr inbounds %struct.av, %struct.av* %150, i32 0, i32 2
  %151 = load i32, i32* %sv_flags193, align 4
  %and194 = and i32 %151, 8388608
  %tobool195 = icmp ne i32 %and194, 0
  br i1 %tobool195, label %if.then196, label %if.end197

if.then196:                                       ; preds = %lor.lhs.false192, %if.then184
  br label %sw.epilog912

if.end197:                                        ; preds = %lor.lhs.false192
  %152 = load %struct.av*, %struct.av** %av186, align 8
  %153 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_private198 = getelementptr inbounds %struct.op, %struct.op* %153, i32 0, i32 6
  %154 = load i8, i8* %op_private198, align 1
  %conv199 = sext i8 %154 to i64
  %call200 = call %struct.sv** @Perl_av_fetch(%struct.av* %152, i64 %conv199, i32 0)
  store %struct.sv** %call200, %struct.sv*** %svp185, align 8
  %155 = load %struct.sv**, %struct.sv*** %svp185, align 8
  %tobool201 = icmp ne %struct.sv** %155, null
  br i1 %tobool201, label %lor.lhs.false202, label %if.then205

lor.lhs.false202:                                 ; preds = %if.end197
  %156 = load %struct.sv**, %struct.sv*** %svp185, align 8
  %157 = load %struct.sv*, %struct.sv** %156, align 8
  %158 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp203 = icmp ne %struct.sv* %157, %158
  br i1 %cmp203, label %if.then205, label %if.end206

if.then205:                                       ; preds = %lor.lhs.false202, %if.end197
  br label %sw.epilog912

if.end206:                                        ; preds = %lor.lhs.false202
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %if.end182
  %159 = load %struct.gv*, %struct.gv** %gv, align 8
  %160 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_private208 = getelementptr inbounds %struct.op, %struct.op* %160, i32 0, i32 6
  %161 = load i8, i8* %op_private208, align 1
  %conv209 = sext i8 %161 to i32
  %call210 = call %struct.sv* @Perl_varname(%struct.gv* %159, i8 signext 36, i64 0, %struct.sv* null, i32 %conv209, i32 2)
  store %struct.sv* %call210, %struct.sv** %retval, align 8
  br label %return

sw.bb211:                                         ; preds = %if.end
  %162 = load %struct.op*, %struct.op** %obase.addr, align 8
  %163 = bitcast %struct.op* %162 to %struct.unop*
  %op_first212 = getelementptr inbounds %struct.unop, %struct.unop* %163, i32 0, i32 7
  %164 = load %struct.op*, %struct.op** %op_first212, align 8
  store %struct.op* %164, %struct.op** %o, align 8
  %165 = load %struct.op*, %struct.op** %o, align 8
  %tobool213 = icmp ne %struct.op* %165, null
  br i1 %tobool213, label %lor.lhs.false214, label %if.then229

lor.lhs.false214:                                 ; preds = %sw.bb211
  %166 = load %struct.op*, %struct.op** %o, align 8
  %op_type215 = getelementptr inbounds %struct.op, %struct.op* %166, i32 0, i32 4
  %bf.load216 = load i16, i16* %op_type215, align 8
  %bf.clear217 = and i16 %bf.load216, 511
  %bf.cast218 = zext i16 %bf.clear217 to i32
  %cmp219 = icmp ne i32 %bf.cast218, 0
  br i1 %cmp219, label %if.then229, label %lor.lhs.false221

lor.lhs.false221:                                 ; preds = %lor.lhs.false214
  %167 = load %struct.op*, %struct.op** %o, align 8
  %op_targ222 = getelementptr inbounds %struct.op, %struct.op* %167, i32 0, i32 3
  %168 = load i64, i64* %op_targ222, align 8
  %cmp223 = icmp eq i64 %168, 138
  br i1 %cmp223, label %if.end230, label %lor.lhs.false225

lor.lhs.false225:                                 ; preds = %lor.lhs.false221
  %169 = load %struct.op*, %struct.op** %o, align 8
  %op_targ226 = getelementptr inbounds %struct.op, %struct.op* %169, i32 0, i32 3
  %170 = load i64, i64* %op_targ226, align 8
  %cmp227 = icmp eq i64 %170, 150
  br i1 %cmp227, label %if.end230, label %if.then229

if.then229:                                       ; preds = %lor.lhs.false225, %lor.lhs.false214, %sw.bb211
  br label %sw.epilog912

if.end230:                                        ; preds = %lor.lhs.false225, %lor.lhs.false221
  %171 = load %struct.op*, %struct.op** %o, align 8
  %172 = bitcast %struct.op* %171 to %struct.binop*
  %op_last = getelementptr inbounds %struct.binop, %struct.binop* %172, i32 0, i32 8
  %173 = load %struct.op*, %struct.op** %op_last, align 8
  %174 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %175 = load i8, i8* %match.addr, align 1
  %tobool231 = trunc i8 %175 to i1
  %176 = load i8**, i8*** %desc_p.addr, align 8
  %call232 = call %struct.sv* @S_find_uninit_var(%struct.op* %173, %struct.sv* %174, i1 zeroext %tobool231, i8** %176)
  store %struct.sv* %call232, %struct.sv** %retval, align 8
  br label %return

sw.bb233:                                         ; preds = %if.end, %if.end
  store i8 0, i8* %negate, align 1
  %177 = load %struct.op*, %struct.op** @PL_op, align 8
  %178 = load %struct.op*, %struct.op** %obase.addr, align 8
  %cmp234 = icmp eq %struct.op* %177, %178
  br i1 %cmp234, label %if.then236, label %if.end240

if.then236:                                       ; preds = %sw.bb233
  %179 = load %struct.op*, %struct.op** %obase.addr, align 8
  %180 = bitcast %struct.op* %179 to %struct.binop*
  %op_last237 = getelementptr inbounds %struct.binop, %struct.binop* %180, i32 0, i32 8
  %181 = load %struct.op*, %struct.op** %op_last237, align 8
  %182 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %183 = load i8, i8* %match.addr, align 1
  %tobool238 = trunc i8 %183 to i1
  %184 = load i8**, i8*** %desc_p.addr, align 8
  %call239 = call %struct.sv* @S_find_uninit_var(%struct.op* %181, %struct.sv* %182, i1 zeroext %tobool238, i8** %184)
  store %struct.sv* %call239, %struct.sv** %retval, align 8
  br label %return

if.end240:                                        ; preds = %sw.bb233
  store %struct.gv* null, %struct.gv** %gv, align 8
  %185 = load %struct.op*, %struct.op** %obase.addr, align 8
  %186 = bitcast %struct.op* %185 to %struct.binop*
  %op_first241 = getelementptr inbounds %struct.binop, %struct.binop* %186, i32 0, i32 7
  %187 = load %struct.op*, %struct.op** %op_first241, align 8
  store %struct.op* %187, %struct.op** %o, align 8
  %188 = load %struct.op*, %struct.op** %obase.addr, align 8
  %189 = bitcast %struct.op* %188 to %struct.binop*
  %op_last242 = getelementptr inbounds %struct.binop, %struct.binop* %189, i32 0, i32 8
  %190 = load %struct.op*, %struct.op** %op_last242, align 8
  store %struct.op* %190, %struct.op** %kid, align 8
  store %struct.sv* null, %struct.sv** %sv, align 8
  %191 = load %struct.op*, %struct.op** %o, align 8
  %op_type243 = getelementptr inbounds %struct.op, %struct.op* %191, i32 0, i32 4
  %bf.load244 = load i16, i16* %op_type243, align 8
  %bf.clear245 = and i16 %bf.load244, 511
  %bf.cast246 = zext i16 %bf.clear245 to i32
  %cmp247 = icmp eq i32 %bf.cast246, 10
  br i1 %cmp247, label %if.then256, label %lor.lhs.false249

lor.lhs.false249:                                 ; preds = %if.end240
  %192 = load %struct.op*, %struct.op** %o, align 8
  %op_type250 = getelementptr inbounds %struct.op, %struct.op* %192, i32 0, i32 4
  %bf.load251 = load i16, i16* %op_type250, align 8
  %bf.clear252 = and i16 %bf.load251, 511
  %bf.cast253 = zext i16 %bf.clear252 to i32
  %cmp254 = icmp eq i32 %bf.cast253, 11
  br i1 %cmp254, label %if.then256, label %if.else259

if.then256:                                       ; preds = %lor.lhs.false249, %if.end240
  %193 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %194 = load %struct.op*, %struct.op** %o, align 8
  %op_targ257 = getelementptr inbounds %struct.op, %struct.op* %194, i32 0, i32 3
  %195 = load i64, i64* %op_targ257, align 8
  %arrayidx258 = getelementptr inbounds %struct.sv*, %struct.sv** %193, i64 %195
  %196 = load %struct.sv*, %struct.sv** %arrayidx258, align 8
  store %struct.sv* %196, %struct.sv** %sv, align 8
  br label %if.end306

if.else259:                                       ; preds = %lor.lhs.false249
  %197 = load %struct.op*, %struct.op** %o, align 8
  %op_type260 = getelementptr inbounds %struct.op, %struct.op* %197, i32 0, i32 4
  %bf.load261 = load i16, i16* %op_type260, align 8
  %bf.clear262 = and i16 %bf.load261, 511
  %bf.cast263 = zext i16 %bf.clear262 to i32
  %cmp264 = icmp eq i32 %bf.cast263, 135
  br i1 %cmp264, label %land.lhs.true273, label %lor.lhs.false266

lor.lhs.false266:                                 ; preds = %if.else259
  %198 = load %struct.op*, %struct.op** %o, align 8
  %op_type267 = getelementptr inbounds %struct.op, %struct.op* %198, i32 0, i32 4
  %bf.load268 = load i16, i16* %op_type267, align 8
  %bf.clear269 = and i16 %bf.load268, 511
  %bf.cast270 = zext i16 %bf.clear269 to i32
  %cmp271 = icmp eq i32 %bf.cast270, 149
  br i1 %cmp271, label %land.lhs.true273, label %if.end305

land.lhs.true273:                                 ; preds = %lor.lhs.false266, %if.else259
  %199 = load %struct.op*, %struct.op** %o, align 8
  %200 = bitcast %struct.op* %199 to %struct.unop*
  %op_first274 = getelementptr inbounds %struct.unop, %struct.unop* %200, i32 0, i32 7
  %201 = load %struct.op*, %struct.op** %op_first274, align 8
  %op_type275 = getelementptr inbounds %struct.op, %struct.op* %201, i32 0, i32 4
  %bf.load276 = load i16, i16* %op_type275, align 8
  %bf.clear277 = and i16 %bf.load276, 511
  %bf.cast278 = zext i16 %bf.clear277 to i32
  %cmp279 = icmp eq i32 %bf.cast278, 7
  br i1 %cmp279, label %if.then281, label %if.end305

if.then281:                                       ; preds = %land.lhs.true273
  %202 = load %struct.op*, %struct.op** %o, align 8
  %203 = bitcast %struct.op* %202 to %struct.unop*
  %op_first282 = getelementptr inbounds %struct.unop, %struct.unop* %203, i32 0, i32 7
  %204 = load %struct.op*, %struct.op** %op_first282, align 8
  %205 = bitcast %struct.op* %204 to %struct.svop*
  %op_sv283 = getelementptr inbounds %struct.svop, %struct.svop* %205, i32 0, i32 7
  %206 = load %struct.sv*, %struct.sv** %op_sv283, align 8
  %207 = bitcast %struct.sv* %206 to %struct.gv*
  store %struct.gv* %207, %struct.gv** %gv, align 8
  %208 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool284 = icmp ne %struct.gv* %208, null
  br i1 %tobool284, label %if.end286, label %if.then285

if.then285:                                       ; preds = %if.then281
  br label %sw.epilog912

if.end286:                                        ; preds = %if.then281
  %209 = load %struct.op*, %struct.op** %o, align 8
  %op_type287 = getelementptr inbounds %struct.op, %struct.op* %209, i32 0, i32 4
  %bf.load288 = load i16, i16* %op_type287, align 8
  %bf.clear289 = and i16 %bf.load288, 511
  %bf.cast290 = zext i16 %bf.clear289 to i32
  %cmp291 = icmp eq i32 %bf.cast290, 149
  br i1 %cmp291, label %cond.true293, label %cond.false298

cond.true293:                                     ; preds = %if.end286
  %210 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u294 = getelementptr inbounds %struct.gv, %struct.gv* %210, i32 0, i32 3
  %svu_gp295 = bitcast %union.anon.6* %sv_u294 to %struct.gp**
  %211 = load %struct.gp*, %struct.gp** %svu_gp295, align 8
  %add.ptr296 = getelementptr inbounds %struct.gp, %struct.gp* %211, i64 0
  %gp_hv297 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr296, i32 0, i32 5
  %212 = load %struct.hv*, %struct.hv** %gp_hv297, align 8
  %213 = bitcast %struct.hv* %212 to i8*
  %214 = bitcast i8* %213 to %struct.sv*
  br label %cond.end303

cond.false298:                                    ; preds = %if.end286
  %215 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u299 = getelementptr inbounds %struct.gv, %struct.gv* %215, i32 0, i32 3
  %svu_gp300 = bitcast %union.anon.6* %sv_u299 to %struct.gp**
  %216 = load %struct.gp*, %struct.gp** %svu_gp300, align 8
  %add.ptr301 = getelementptr inbounds %struct.gp, %struct.gp* %216, i64 0
  %gp_av302 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr301, i32 0, i32 6
  %217 = load %struct.av*, %struct.av** %gp_av302, align 8
  %218 = bitcast %struct.av* %217 to i8*
  %219 = bitcast i8* %218 to %struct.sv*
  br label %cond.end303

cond.end303:                                      ; preds = %cond.false298, %cond.true293
  %cond304 = phi %struct.sv* [ %214, %cond.true293 ], [ %219, %cond.false298 ]
  store %struct.sv* %cond304, %struct.sv** %sv, align 8
  br label %if.end305

if.end305:                                        ; preds = %cond.end303, %land.lhs.true273, %lor.lhs.false266
  br label %if.end306

if.end306:                                        ; preds = %if.end305, %if.then256
  %220 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool307 = icmp ne %struct.sv* %220, null
  br i1 %tobool307, label %if.end309, label %if.then308

if.then308:                                       ; preds = %if.end306
  br label %sw.epilog912

if.end309:                                        ; preds = %if.end306
  %221 = load %struct.op*, %struct.op** %kid, align 8
  %tobool310 = icmp ne %struct.op* %221, null
  br i1 %tobool310, label %land.lhs.true311, label %if.end320

land.lhs.true311:                                 ; preds = %if.end309
  %222 = load %struct.op*, %struct.op** %kid, align 8
  %op_type312 = getelementptr inbounds %struct.op, %struct.op* %222, i32 0, i32 4
  %bf.load313 = load i16, i16* %op_type312, align 8
  %bf.clear314 = and i16 %bf.load313, 511
  %bf.cast315 = zext i16 %bf.clear314 to i32
  %cmp316 = icmp eq i32 %bf.cast315, 101
  br i1 %cmp316, label %if.then318, label %if.end320

if.then318:                                       ; preds = %land.lhs.true311
  store i8 1, i8* %negate, align 1
  %223 = load %struct.op*, %struct.op** %kid, align 8
  %224 = bitcast %struct.op* %223 to %struct.unop*
  %op_first319 = getelementptr inbounds %struct.unop, %struct.unop* %224, i32 0, i32 7
  %225 = load %struct.op*, %struct.op** %op_first319, align 8
  store %struct.op* %225, %struct.op** %kid, align 8
  br label %if.end320

if.end320:                                        ; preds = %if.then318, %land.lhs.true311, %if.end309
  %226 = load %struct.op*, %struct.op** %kid, align 8
  %tobool321 = icmp ne %struct.op* %226, null
  br i1 %tobool321, label %land.lhs.true322, label %if.else453

land.lhs.true322:                                 ; preds = %if.end320
  %227 = load %struct.op*, %struct.op** %kid, align 8
  %op_type323 = getelementptr inbounds %struct.op, %struct.op* %227, i32 0, i32 4
  %bf.load324 = load i16, i16* %op_type323, align 8
  %bf.clear325 = and i16 %bf.load324, 511
  %bf.cast326 = zext i16 %bf.clear325 to i32
  %cmp327 = icmp eq i32 %bf.cast326, 5
  br i1 %cmp327, label %land.lhs.true329, label %if.else453

land.lhs.true329:                                 ; preds = %land.lhs.true322
  %228 = load %struct.op*, %struct.op** %kid, align 8
  %229 = bitcast %struct.op* %228 to %struct.svop*
  %op_sv330 = getelementptr inbounds %struct.svop, %struct.svop* %229, i32 0, i32 7
  %230 = load %struct.sv*, %struct.sv** %op_sv330, align 8
  %sv_flags331 = getelementptr inbounds %struct.sv, %struct.sv* %230, i32 0, i32 2
  %231 = load i32, i32* %sv_flags331, align 4
  %and332 = and i32 %231, 65280
  %tobool333 = icmp ne i32 %and332, 0
  br i1 %tobool333, label %if.then346, label %lor.lhs.false334

lor.lhs.false334:                                 ; preds = %land.lhs.true329
  %232 = load %struct.op*, %struct.op** %kid, align 8
  %233 = bitcast %struct.op* %232 to %struct.svop*
  %op_sv335 = getelementptr inbounds %struct.svop, %struct.svop* %233, i32 0, i32 7
  %234 = load %struct.sv*, %struct.sv** %op_sv335, align 8
  %sv_flags336 = getelementptr inbounds %struct.sv, %struct.sv* %234, i32 0, i32 2
  %235 = load i32, i32* %sv_flags336, align 4
  %and337 = and i32 %235, 255
  %cmp338 = icmp eq i32 %and337, 8
  br i1 %cmp338, label %if.then346, label %lor.lhs.false340

lor.lhs.false340:                                 ; preds = %lor.lhs.false334
  %236 = load %struct.op*, %struct.op** %kid, align 8
  %237 = bitcast %struct.op* %236 to %struct.svop*
  %op_sv341 = getelementptr inbounds %struct.svop, %struct.svop* %237, i32 0, i32 7
  %238 = load %struct.sv*, %struct.sv** %op_sv341, align 8
  %sv_flags342 = getelementptr inbounds %struct.sv, %struct.sv* %238, i32 0, i32 2
  %239 = load i32, i32* %sv_flags342, align 4
  %and343 = and i32 %239, 16826623
  %cmp344 = icmp eq i32 %and343, 16777226
  br i1 %cmp344, label %if.then346, label %if.else453

if.then346:                                       ; preds = %lor.lhs.false340, %lor.lhs.false334, %land.lhs.true329
  %240 = load i8, i8* %negate, align 1
  %tobool347 = trunc i8 %240 to i1
  br i1 %tobool347, label %if.then348, label %if.else351

if.then348:                                       ; preds = %if.then346
  %call349 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.108, i64 0, i64 0), i64 1, i32 524288)
  store %struct.sv* %call349, %struct.sv** %kidsv, align 8
  %241 = load %struct.sv*, %struct.sv** %kidsv, align 8
  %242 = load %struct.op*, %struct.op** %kid, align 8
  %243 = bitcast %struct.op* %242 to %struct.svop*
  %op_sv350 = getelementptr inbounds %struct.svop, %struct.svop* %243, i32 0, i32 7
  %244 = load %struct.sv*, %struct.sv** %op_sv350, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %241, %struct.sv* %244, i32 2)
  br label %if.end353

if.else351:                                       ; preds = %if.then346
  %245 = load %struct.op*, %struct.op** %kid, align 8
  %246 = bitcast %struct.op* %245 to %struct.svop*
  %op_sv352 = getelementptr inbounds %struct.svop, %struct.svop* %246, i32 0, i32 7
  %247 = load %struct.sv*, %struct.sv** %op_sv352, align 8
  store %struct.sv* %247, %struct.sv** %kidsv, align 8
  br label %if.end353

if.end353:                                        ; preds = %if.else351, %if.then348
  %248 = load i8, i8* %match.addr, align 1
  %tobool354 = trunc i8 %248 to i1
  br i1 %tobool354, label %if.then355, label %if.end402

if.then355:                                       ; preds = %if.end353
  %249 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags356 = getelementptr inbounds %struct.sv, %struct.sv* %249, i32 0, i32 2
  %250 = load i32, i32* %sv_flags356, align 4
  %and357 = and i32 %250, 14680064
  %tobool358 = icmp ne i32 %and357, 0
  br i1 %tobool358, label %if.then359, label %if.end360

if.then359:                                       ; preds = %if.then355
  br label %sw.epilog912

if.end360:                                        ; preds = %if.then355
  %251 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_type361 = getelementptr inbounds %struct.op, %struct.op* %251, i32 0, i32 4
  %bf.load362 = load i16, i16* %op_type361, align 8
  %bf.clear363 = and i16 %bf.load362, 511
  %bf.cast364 = zext i16 %bf.clear363 to i32
  %cmp365 = icmp eq i32 %bf.cast364, 150
  br i1 %cmp365, label %if.then367, label %if.else375

if.then367:                                       ; preds = %if.end360
  %252 = load %struct.sv*, %struct.sv** %sv, align 8
  %253 = bitcast %struct.sv* %252 to i8*
  %254 = bitcast i8* %253 to %struct.hv*
  %255 = load %struct.sv*, %struct.sv** %kidsv, align 8
  %call368 = call i8* @Perl_hv_common(%struct.hv* %254, %struct.sv* %255, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %256 = bitcast i8* %call368 to %struct.he*
  store %struct.he* %256, %struct.he** %he, align 8
  %257 = load %struct.he*, %struct.he** %he, align 8
  %tobool369 = icmp ne %struct.he* %257, null
  br i1 %tobool369, label %lor.lhs.false370, label %if.then373

lor.lhs.false370:                                 ; preds = %if.then367
  %258 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %258, i32 0, i32 2
  %hent_val = bitcast %union.anon.0* %he_valu to %struct.sv**
  %259 = load %struct.sv*, %struct.sv** %hent_val, align 8
  %260 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp371 = icmp ne %struct.sv* %259, %260
  br i1 %cmp371, label %if.then373, label %if.end374

if.then373:                                       ; preds = %lor.lhs.false370, %if.then367
  br label %sw.epilog912

if.end374:                                        ; preds = %lor.lhs.false370
  br label %if.end401

if.else375:                                       ; preds = %if.end360
  %261 = load %struct.op*, %struct.op** %kid, align 8
  %262 = bitcast %struct.op* %261 to %struct.svop*
  %op_sv376 = getelementptr inbounds %struct.svop, %struct.svop* %262, i32 0, i32 7
  %263 = load %struct.sv*, %struct.sv** %op_sv376, align 8
  store %struct.sv* %263, %struct.sv** %opsv, align 8
  %264 = load %struct.sv*, %struct.sv** %opsv, align 8
  %sv_flags377 = getelementptr inbounds %struct.sv, %struct.sv* %264, i32 0, i32 2
  %265 = load i32, i32* %sv_flags377, align 4
  %and378 = and i32 %265, 2097408
  %cmp379 = icmp eq i32 %and378, 256
  br i1 %cmp379, label %cond.true381, label %cond.false383

cond.true381:                                     ; preds = %if.else375
  %266 = load %struct.sv*, %struct.sv** %opsv, align 8
  %sv_any382 = getelementptr inbounds %struct.sv, %struct.sv* %266, i32 0, i32 0
  %267 = load i8*, i8** %sv_any382, align 8
  %268 = bitcast i8* %267 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %268, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %269 = load i64, i64* %xivu_iv, align 8
  br label %cond.end385

cond.false383:                                    ; preds = %if.else375
  %270 = load %struct.sv*, %struct.sv** %opsv, align 8
  %call384 = call i64 @Perl_sv_2iv_flags(%struct.sv* %270, i32 2)
  br label %cond.end385

cond.end385:                                      ; preds = %cond.false383, %cond.true381
  %cond386 = phi i64 [ %269, %cond.true381 ], [ %call384, %cond.false383 ]
  store i64 %cond386, i64* %opsviv, align 8
  %271 = load %struct.sv*, %struct.sv** %sv, align 8
  %272 = bitcast %struct.sv* %271 to i8*
  %273 = bitcast i8* %272 to %struct.av*
  %274 = load i8, i8* %negate, align 1
  %tobool388 = trunc i8 %274 to i1
  br i1 %tobool388, label %cond.true390, label %cond.false391

cond.true390:                                     ; preds = %cond.end385
  %275 = load i64, i64* %opsviv, align 8
  %sub = sub nsw i64 0, %275
  br label %cond.end392

cond.false391:                                    ; preds = %cond.end385
  %276 = load i64, i64* %opsviv, align 8
  br label %cond.end392

cond.end392:                                      ; preds = %cond.false391, %cond.true390
  %cond393 = phi i64 [ %sub, %cond.true390 ], [ %276, %cond.false391 ]
  %call394 = call %struct.sv** @Perl_av_fetch(%struct.av* %273, i64 %cond393, i32 0)
  store %struct.sv** %call394, %struct.sv*** %svp387, align 8
  %277 = load %struct.sv**, %struct.sv*** %svp387, align 8
  %tobool395 = icmp ne %struct.sv** %277, null
  br i1 %tobool395, label %lor.lhs.false396, label %if.then399

lor.lhs.false396:                                 ; preds = %cond.end392
  %278 = load %struct.sv**, %struct.sv*** %svp387, align 8
  %279 = load %struct.sv*, %struct.sv** %278, align 8
  %280 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp397 = icmp ne %struct.sv* %279, %280
  br i1 %cmp397, label %if.then399, label %if.end400

if.then399:                                       ; preds = %lor.lhs.false396, %cond.end392
  br label %sw.epilog912

if.end400:                                        ; preds = %lor.lhs.false396
  br label %if.end401

if.end401:                                        ; preds = %if.end400, %if.end374
  br label %if.end402

if.end402:                                        ; preds = %if.end401, %if.end353
  %281 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_type403 = getelementptr inbounds %struct.op, %struct.op* %281, i32 0, i32 4
  %bf.load404 = load i16, i16* %op_type403, align 8
  %bf.clear405 = and i16 %bf.load404, 511
  %bf.cast406 = zext i16 %bf.clear405 to i32
  %cmp407 = icmp eq i32 %bf.cast406, 150
  br i1 %cmp407, label %if.then409, label %if.else412

if.then409:                                       ; preds = %if.end402
  %282 = load %struct.gv*, %struct.gv** %gv, align 8
  %283 = load %struct.op*, %struct.op** %o, align 8
  %op_targ410 = getelementptr inbounds %struct.op, %struct.op* %283, i32 0, i32 3
  %284 = load i64, i64* %op_targ410, align 8
  %285 = load %struct.sv*, %struct.sv** %kidsv, align 8
  %call411 = call %struct.sv* @Perl_varname(%struct.gv* %282, i8 signext 37, i64 %284, %struct.sv* %285, i32 0, i32 3)
  store %struct.sv* %call411, %struct.sv** %retval, align 8
  br label %return

if.else412:                                       ; preds = %if.end402
  %286 = load %struct.gv*, %struct.gv** %gv, align 8
  %287 = load %struct.op*, %struct.op** %o, align 8
  %op_targ413 = getelementptr inbounds %struct.op, %struct.op* %287, i32 0, i32 3
  %288 = load i64, i64* %op_targ413, align 8
  %289 = load i8, i8* %negate, align 1
  %tobool414 = trunc i8 %289 to i1
  br i1 %tobool414, label %cond.true416, label %cond.false433

cond.true416:                                     ; preds = %if.else412
  %290 = load %struct.op*, %struct.op** %kid, align 8
  %291 = bitcast %struct.op* %290 to %struct.svop*
  %op_sv417 = getelementptr inbounds %struct.svop, %struct.svop* %291, i32 0, i32 7
  %292 = load %struct.sv*, %struct.sv** %op_sv417, align 8
  %sv_flags418 = getelementptr inbounds %struct.sv, %struct.sv* %292, i32 0, i32 2
  %293 = load i32, i32* %sv_flags418, align 4
  %and419 = and i32 %293, 2097408
  %cmp420 = icmp eq i32 %and419, 256
  br i1 %cmp420, label %cond.true422, label %cond.false427

cond.true422:                                     ; preds = %cond.true416
  %294 = load %struct.op*, %struct.op** %kid, align 8
  %295 = bitcast %struct.op* %294 to %struct.svop*
  %op_sv423 = getelementptr inbounds %struct.svop, %struct.svop* %295, i32 0, i32 7
  %296 = load %struct.sv*, %struct.sv** %op_sv423, align 8
  %sv_any424 = getelementptr inbounds %struct.sv, %struct.sv* %296, i32 0, i32 0
  %297 = load i8*, i8** %sv_any424, align 8
  %298 = bitcast i8* %297 to %struct.xpviv*
  %xiv_u425 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %298, i32 0, i32 4
  %xivu_iv426 = bitcast %union._xivu* %xiv_u425 to i64*
  %299 = load i64, i64* %xivu_iv426, align 8
  br label %cond.end430

cond.false427:                                    ; preds = %cond.true416
  %300 = load %struct.op*, %struct.op** %kid, align 8
  %301 = bitcast %struct.op* %300 to %struct.svop*
  %op_sv428 = getelementptr inbounds %struct.svop, %struct.svop* %301, i32 0, i32 7
  %302 = load %struct.sv*, %struct.sv** %op_sv428, align 8
  %call429 = call i64 @Perl_sv_2iv_flags(%struct.sv* %302, i32 2)
  br label %cond.end430

cond.end430:                                      ; preds = %cond.false427, %cond.true422
  %cond431 = phi i64 [ %299, %cond.true422 ], [ %call429, %cond.false427 ]
  %sub432 = sub nsw i64 0, %cond431
  br label %cond.end449

cond.false433:                                    ; preds = %if.else412
  %303 = load %struct.op*, %struct.op** %kid, align 8
  %304 = bitcast %struct.op* %303 to %struct.svop*
  %op_sv434 = getelementptr inbounds %struct.svop, %struct.svop* %304, i32 0, i32 7
  %305 = load %struct.sv*, %struct.sv** %op_sv434, align 8
  %sv_flags435 = getelementptr inbounds %struct.sv, %struct.sv* %305, i32 0, i32 2
  %306 = load i32, i32* %sv_flags435, align 4
  %and436 = and i32 %306, 2097408
  %cmp437 = icmp eq i32 %and436, 256
  br i1 %cmp437, label %cond.true439, label %cond.false444

cond.true439:                                     ; preds = %cond.false433
  %307 = load %struct.op*, %struct.op** %kid, align 8
  %308 = bitcast %struct.op* %307 to %struct.svop*
  %op_sv440 = getelementptr inbounds %struct.svop, %struct.svop* %308, i32 0, i32 7
  %309 = load %struct.sv*, %struct.sv** %op_sv440, align 8
  %sv_any441 = getelementptr inbounds %struct.sv, %struct.sv* %309, i32 0, i32 0
  %310 = load i8*, i8** %sv_any441, align 8
  %311 = bitcast i8* %310 to %struct.xpviv*
  %xiv_u442 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %311, i32 0, i32 4
  %xivu_iv443 = bitcast %union._xivu* %xiv_u442 to i64*
  %312 = load i64, i64* %xivu_iv443, align 8
  br label %cond.end447

cond.false444:                                    ; preds = %cond.false433
  %313 = load %struct.op*, %struct.op** %kid, align 8
  %314 = bitcast %struct.op* %313 to %struct.svop*
  %op_sv445 = getelementptr inbounds %struct.svop, %struct.svop* %314, i32 0, i32 7
  %315 = load %struct.sv*, %struct.sv** %op_sv445, align 8
  %call446 = call i64 @Perl_sv_2iv_flags(%struct.sv* %315, i32 2)
  br label %cond.end447

cond.end447:                                      ; preds = %cond.false444, %cond.true439
  %cond448 = phi i64 [ %312, %cond.true439 ], [ %call446, %cond.false444 ]
  br label %cond.end449

cond.end449:                                      ; preds = %cond.end447, %cond.end430
  %cond450 = phi i64 [ %sub432, %cond.end430 ], [ %cond448, %cond.end447 ]
  %conv451 = trunc i64 %cond450 to i32
  %call452 = call %struct.sv* @Perl_varname(%struct.gv* %286, i8 signext 64, i64 %288, %struct.sv* null, i32 %conv451, i32 2)
  store %struct.sv* %call452, %struct.sv** %retval, align 8
  br label %return

if.else453:                                       ; preds = %lor.lhs.false340, %land.lhs.true322, %if.end320
  %316 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_type454 = getelementptr inbounds %struct.op, %struct.op* %316, i32 0, i32 4
  %bf.load455 = load i16, i16* %op_type454, align 8
  %bf.clear456 = and i16 %bf.load455, 511
  %bf.cast457 = zext i16 %bf.clear456 to i32
  %cmp458 = icmp eq i32 %bf.cast457, 150
  br i1 %cmp458, label %if.then460, label %if.else468

if.then460:                                       ; preds = %if.else453
  %317 = load %struct.sv*, %struct.sv** %sv, align 8
  %318 = bitcast %struct.sv* %317 to %struct.hv*
  %319 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %call462 = call %struct.sv* @S_find_hash_subscript(%struct.hv* %318, %struct.sv* %319)
  store %struct.sv* %call462, %struct.sv** %keysv461, align 8
  %320 = load %struct.sv*, %struct.sv** %keysv461, align 8
  %tobool463 = icmp ne %struct.sv* %320, null
  br i1 %tobool463, label %if.then464, label %if.end467

if.then464:                                       ; preds = %if.then460
  %321 = load %struct.gv*, %struct.gv** %gv, align 8
  %322 = load %struct.op*, %struct.op** %o, align 8
  %op_targ465 = getelementptr inbounds %struct.op, %struct.op* %322, i32 0, i32 3
  %323 = load i64, i64* %op_targ465, align 8
  %324 = load %struct.sv*, %struct.sv** %keysv461, align 8
  %call466 = call %struct.sv* @Perl_varname(%struct.gv* %321, i8 signext 37, i64 %323, %struct.sv* %324, i32 0, i32 3)
  store %struct.sv* %call466, %struct.sv** %retval, align 8
  br label %return

if.end467:                                        ; preds = %if.then460
  br label %if.end477

if.else468:                                       ; preds = %if.else453
  %325 = load %struct.sv*, %struct.sv** %sv, align 8
  %326 = bitcast %struct.sv* %325 to %struct.av*
  %327 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %call470 = call i32 @S_find_array_subscript(%struct.av* %326, %struct.sv* %327)
  store i32 %call470, i32* %index469, align 4
  %328 = load i32, i32* %index469, align 4
  %cmp471 = icmp sge i32 %328, 0
  br i1 %cmp471, label %if.then473, label %if.end476

if.then473:                                       ; preds = %if.else468
  %329 = load %struct.gv*, %struct.gv** %gv, align 8
  %330 = load %struct.op*, %struct.op** %o, align 8
  %op_targ474 = getelementptr inbounds %struct.op, %struct.op* %330, i32 0, i32 3
  %331 = load i64, i64* %op_targ474, align 8
  %332 = load i32, i32* %index469, align 4
  %call475 = call %struct.sv* @Perl_varname(%struct.gv* %329, i8 signext 64, i64 %331, %struct.sv* null, i32 %332, i32 2)
  store %struct.sv* %call475, %struct.sv** %retval, align 8
  br label %return

if.end476:                                        ; preds = %if.else468
  br label %if.end477

if.end477:                                        ; preds = %if.end476, %if.end467
  %333 = load i8, i8* %match.addr, align 1
  %tobool478 = trunc i8 %333 to i1
  br i1 %tobool478, label %if.then479, label %if.end480

if.then479:                                       ; preds = %if.end477
  br label %sw.epilog912

if.end480:                                        ; preds = %if.end477
  %334 = load %struct.gv*, %struct.gv** %gv, align 8
  %335 = load %struct.op*, %struct.op** %o, align 8
  %op_type481 = getelementptr inbounds %struct.op, %struct.op* %335, i32 0, i32 4
  %bf.load482 = load i16, i16* %op_type481, align 8
  %bf.clear483 = and i16 %bf.load482, 511
  %bf.cast484 = zext i16 %bf.clear483 to i32
  %cmp485 = icmp eq i32 %bf.cast484, 10
  br i1 %cmp485, label %lor.end494, label %lor.rhs487

lor.rhs487:                                       ; preds = %if.end480
  %336 = load %struct.op*, %struct.op** %o, align 8
  %op_type488 = getelementptr inbounds %struct.op, %struct.op* %336, i32 0, i32 4
  %bf.load489 = load i16, i16* %op_type488, align 8
  %bf.clear490 = and i16 %bf.load489, 511
  %bf.cast491 = zext i16 %bf.clear490 to i32
  %cmp492 = icmp eq i32 %bf.cast491, 135
  br label %lor.end494

lor.end494:                                       ; preds = %lor.rhs487, %if.end480
  %337 = phi i1 [ true, %if.end480 ], [ %cmp492, %lor.rhs487 ]
  %338 = zext i1 %337 to i64
  %cond495 = select i1 %337, i32 64, i32 37
  %conv496 = trunc i32 %cond495 to i8
  %339 = load %struct.op*, %struct.op** %o, align 8
  %op_targ497 = getelementptr inbounds %struct.op, %struct.op* %339, i32 0, i32 3
  %340 = load i64, i64* %op_targ497, align 8
  %call498 = call %struct.sv* @Perl_varname(%struct.gv* %334, i8 signext %conv496, i64 %340, %struct.sv* null, i32 0, i32 4)
  store %struct.sv* %call498, %struct.sv** %retval, align 8
  br label %return

sw.bb499:                                         ; preds = %if.end
  store i64 0, i64* %agg_targ, align 8
  store %struct.gv* null, %struct.gv** %agg_gv, align 8
  store i64 0, i64* %index_const_iv, align 8
  store i32 0, i32* %depth, align 4
  %341 = load %struct.op*, %struct.op** %obase.addr, align 8
  %342 = bitcast %struct.op* %341 to %struct.unop_aux*
  %op_aux = getelementptr inbounds %struct.unop_aux, %struct.unop_aux* %342, i32 0, i32 8
  %343 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %op_aux, align 8
  store %union.UNOP_AUX_item* %343, %union.UNOP_AUX_item** %items, align 8
  store %union.UNOP_AUX_item* null, %union.UNOP_AUX_item** %last, align 8
  %344 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %uv = bitcast %union.UNOP_AUX_item* %344 to i64*
  %345 = load i64, i64* %uv, align 8
  store i64 %345, i64* %actions, align 8
  %346 = load %struct.op*, %struct.op** @PL_op, align 8
  %347 = load %struct.op*, %struct.op** %obase.addr, align 8
  %cmp500 = icmp eq %struct.op* %346, %347
  br i1 %cmp500, label %if.then502, label %if.end503

if.then502:                                       ; preds = %sw.bb499
  %348 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** @PL_multideref_pc, align 8
  store %union.UNOP_AUX_item* %348, %union.UNOP_AUX_item** %last, align 8
  br label %if.end503

if.end503:                                        ; preds = %if.then502, %sw.bb499
  br label %while.body

while.body:                                       ; preds = %if.end503, %sw.bb505, %if.end552
  store i8 0, i8* %is_hv, align 1
  %349 = load i64, i64* %actions, align 8
  %and504 = and i64 %349, 15
  switch i64 %and504, label %sw.epilog [
    i64 0, label %sw.bb505
    i64 12, label %sw.bb507
    i64 5, label %sw.bb508
    i64 13, label %sw.bb510
    i64 6, label %sw.bb511
    i64 9, label %sw.bb514
    i64 10, label %sw.bb514
    i64 8, label %sw.bb516
    i64 11, label %sw.bb516
    i64 2, label %sw.bb517
    i64 3, label %sw.bb517
    i64 1, label %sw.bb519
    i64 4, label %sw.bb519
  ]

sw.bb505:                                         ; preds = %while.body
  %350 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %350, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr, %union.UNOP_AUX_item** %items, align 8
  %uv506 = bitcast %union.UNOP_AUX_item* %incdec.ptr to i64*
  %351 = load i64, i64* %uv506, align 8
  store i64 %351, i64* %actions, align 8
  br label %while.body

sw.bb507:                                         ; preds = %while.body
  store i8 1, i8* %is_hv, align 1
  br label %sw.bb508

sw.bb508:                                         ; preds = %while.body, %sw.bb507
  %352 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr509 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %352, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr509, %union.UNOP_AUX_item** %items, align 8
  %pad_offset = bitcast %union.UNOP_AUX_item* %incdec.ptr509 to i64*
  %353 = load i64, i64* %pad_offset, align 8
  store i64 %353, i64* %agg_targ, align 8
  store %struct.gv* null, %struct.gv** %agg_gv, align 8
  br label %sw.epilog

sw.bb510:                                         ; preds = %while.body
  store i8 1, i8* %is_hv, align 1
  br label %sw.bb511

sw.bb511:                                         ; preds = %while.body, %sw.bb510
  store i64 0, i64* %agg_targ, align 8
  %354 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr512 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %354, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr512, %union.UNOP_AUX_item** %items, align 8
  %sv513 = bitcast %union.UNOP_AUX_item* %incdec.ptr512 to %struct.sv**
  %355 = load %struct.sv*, %struct.sv** %sv513, align 8
  %356 = bitcast %struct.sv* %355 to %struct.gv*
  store %struct.gv* %356, %struct.gv** %agg_gv, align 8
  br label %sw.epilog

sw.bb514:                                         ; preds = %while.body, %while.body
  %357 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr515 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %357, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr515, %union.UNOP_AUX_item** %items, align 8
  br label %sw.bb516

sw.bb516:                                         ; preds = %while.body, %while.body, %sw.bb514
  store i64 0, i64* %agg_targ, align 8
  store %struct.gv* null, %struct.gv** %agg_gv, align 8
  store i8 1, i8* %is_hv, align 1
  br label %sw.epilog

sw.bb517:                                         ; preds = %while.body, %while.body
  %358 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr518 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %358, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr518, %union.UNOP_AUX_item** %items, align 8
  br label %sw.bb519

sw.bb519:                                         ; preds = %while.body, %while.body, %sw.bb517
  store i64 0, i64* %agg_targ, align 8
  store %struct.gv* null, %struct.gv** %agg_gv, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb519, %while.body, %sw.bb516, %sw.bb511, %sw.bb508
  store i64 0, i64* %index_targ, align 8
  store %struct.gv* null, %struct.gv** %index_gv, align 8
  store %struct.sv* null, %struct.sv** %index_const_sv, align 8
  %359 = load i64, i64* %actions, align 8
  %and520 = and i64 %359, 48
  store i64 %and520, i64* %index_type, align 8
  %360 = load i64, i64* %index_type, align 8
  switch i64 %360, label %sw.epilog536 [
    i64 0, label %sw.bb521
    i64 16, label %sw.bb522
    i64 32, label %sw.bb530
    i64 48, label %sw.bb533
  ]

sw.bb521:                                         ; preds = %sw.epilog
  br label %sw.epilog536

sw.bb522:                                         ; preds = %sw.epilog
  %361 = load i8, i8* %is_hv, align 1
  %tobool523 = trunc i8 %361 to i1
  br i1 %tobool523, label %if.then524, label %if.else527

if.then524:                                       ; preds = %sw.bb522
  %362 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr525 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %362, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr525, %union.UNOP_AUX_item** %items, align 8
  %sv526 = bitcast %union.UNOP_AUX_item* %incdec.ptr525 to %struct.sv**
  %363 = load %struct.sv*, %struct.sv** %sv526, align 8
  store %struct.sv* %363, %struct.sv** %index_const_sv, align 8
  br label %if.end529

if.else527:                                       ; preds = %sw.bb522
  %364 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr528 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %364, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr528, %union.UNOP_AUX_item** %items, align 8
  %iv = bitcast %union.UNOP_AUX_item* %incdec.ptr528 to i64*
  %365 = load i64, i64* %iv, align 8
  store i64 %365, i64* %index_const_iv, align 8
  br label %if.end529

if.end529:                                        ; preds = %if.else527, %if.then524
  br label %sw.epilog536

sw.bb530:                                         ; preds = %sw.epilog
  %366 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr531 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %366, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr531, %union.UNOP_AUX_item** %items, align 8
  %pad_offset532 = bitcast %union.UNOP_AUX_item* %incdec.ptr531 to i64*
  %367 = load i64, i64* %pad_offset532, align 8
  store i64 %367, i64* %index_targ, align 8
  br label %sw.epilog536

sw.bb533:                                         ; preds = %sw.epilog
  %368 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr534 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %368, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr534, %union.UNOP_AUX_item** %items, align 8
  %sv535 = bitcast %union.UNOP_AUX_item* %incdec.ptr534 to %struct.sv**
  %369 = load %struct.sv*, %struct.sv** %sv535, align 8
  %370 = bitcast %struct.sv* %369 to %struct.gv*
  store %struct.gv* %370, %struct.gv** %index_gv, align 8
  br label %sw.epilog536

sw.epilog536:                                     ; preds = %sw.epilog, %sw.bb533, %sw.bb530, %if.end529, %sw.bb521
  %371 = load i64, i64* %index_type, align 8
  %cmp537 = icmp ne i64 %371, 0
  br i1 %cmp537, label %if.then539, label %if.end540

if.then539:                                       ; preds = %sw.epilog536
  %372 = load i32, i32* %depth, align 4
  %inc = add nsw i32 %372, 1
  store i32 %inc, i32* %depth, align 4
  br label %if.end540

if.end540:                                        ; preds = %if.then539, %sw.epilog536
  %373 = load i64, i64* %index_type, align 8
  %cmp541 = icmp eq i64 %373, 0
  br i1 %cmp541, label %if.then551, label %lor.lhs.false543

lor.lhs.false543:                                 ; preds = %if.end540
  %374 = load i64, i64* %actions, align 8
  %and544 = and i64 %374, 64
  %tobool545 = icmp ne i64 %and544, 0
  br i1 %tobool545, label %if.then551, label %lor.lhs.false546

lor.lhs.false546:                                 ; preds = %lor.lhs.false543
  %375 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %last, align 8
  %tobool547 = icmp ne %union.UNOP_AUX_item* %375, null
  br i1 %tobool547, label %land.lhs.true548, label %if.end552

land.lhs.true548:                                 ; preds = %lor.lhs.false546
  %376 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %377 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %last, align 8
  %cmp549 = icmp eq %union.UNOP_AUX_item* %376, %377
  br i1 %cmp549, label %if.then551, label %if.end552

if.then551:                                       ; preds = %land.lhs.true548, %lor.lhs.false543, %if.end540
  br label %while.end

if.end552:                                        ; preds = %land.lhs.true548, %lor.lhs.false546
  %378 = load i64, i64* %actions, align 8
  %shr = lshr i64 %378, 7
  store i64 %shr, i64* %actions, align 8
  br label %while.body

while.end:                                        ; preds = %if.then551
  %379 = load %struct.op*, %struct.op** @PL_op, align 8
  %380 = load %struct.op*, %struct.op** %obase.addr, align 8
  %cmp553 = icmp eq %struct.op* %379, %380
  br i1 %cmp553, label %if.then555, label %if.end583

if.then555:                                       ; preds = %while.end
  %381 = load i64, i64* %actions, align 8
  %and556 = and i64 %381, 64
  %tobool557 = icmp ne i64 %and556, 0
  br i1 %tobool557, label %land.lhs.true558, label %cond.false569

land.lhs.true558:                                 ; preds = %if.then555
  %382 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_private559 = getelementptr inbounds %struct.op, %struct.op* %382, i32 0, i32 6
  %383 = load i8, i8* %op_private559, align 1
  %conv560 = zext i8 %383 to i32
  %and561 = and i32 %conv560, 48
  %tobool562 = icmp ne i32 %and561, 0
  br i1 %tobool562, label %cond.true563, label %cond.false569

cond.true563:                                     ; preds = %land.lhs.true558
  %384 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_private564 = getelementptr inbounds %struct.op, %struct.op* %384, i32 0, i32 6
  %385 = load i8, i8* %op_private564, align 1
  %conv565 = zext i8 %385 to i32
  %and566 = and i32 %conv565, 16
  %tobool567 = icmp ne i32 %and566, 0
  %386 = zext i1 %tobool567 to i64
  %cond568 = select i1 %tobool567, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.109, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.110, i64 0, i64 0)
  br label %cond.end573

cond.false569:                                    ; preds = %land.lhs.true558, %if.then555
  %387 = load i8, i8* %is_hv, align 1
  %tobool570 = trunc i8 %387 to i1
  %388 = zext i1 %tobool570 to i64
  %cond572 = select i1 %tobool570, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.111, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.112, i64 0, i64 0)
  br label %cond.end573

cond.end573:                                      ; preds = %cond.false569, %cond.true563
  %cond574 = phi i8* [ %cond568, %cond.true563 ], [ %cond572, %cond.false569 ]
  %389 = load i8**, i8*** %desc_p.addr, align 8
  store i8* %cond574, i8** %389, align 8
  %390 = load %struct.gv*, %struct.gv** %index_gv, align 8
  %tobool575 = icmp ne %struct.gv* %390, null
  br i1 %tobool575, label %if.then576, label %if.end578

if.then576:                                       ; preds = %cond.end573
  %391 = load %struct.gv*, %struct.gv** %index_gv, align 8
  %call577 = call %struct.sv* @Perl_varname(%struct.gv* %391, i8 signext 36, i64 0, %struct.sv* null, i32 0, i32 1)
  store %struct.sv* %call577, %struct.sv** %retval, align 8
  br label %return

if.end578:                                        ; preds = %cond.end573
  %392 = load i64, i64* %index_targ, align 8
  %tobool579 = icmp ne i64 %392, 0
  br i1 %tobool579, label %if.then580, label %if.end582

if.then580:                                       ; preds = %if.end578
  %393 = load i64, i64* %index_targ, align 8
  %call581 = call %struct.sv* @Perl_varname(%struct.gv* null, i8 signext 36, i64 %393, %struct.sv* null, i32 0, i32 1)
  store %struct.sv* %call581, %struct.sv** %retval, align 8
  br label %return

if.end582:                                        ; preds = %if.end578
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end583:                                        ; preds = %while.end
  %394 = load i32, i32* %depth, align 4
  %cmp584 = icmp ne i32 %394, 1
  br i1 %cmp584, label %if.then586, label %if.end587

if.then586:                                       ; preds = %if.end583
  br label %sw.epilog912

if.end587:                                        ; preds = %if.end583
  %395 = load i64, i64* %agg_targ, align 8
  %tobool588 = icmp ne i64 %395, 0
  br i1 %tobool588, label %if.then589, label %if.else591

if.then589:                                       ; preds = %if.end587
  %396 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %397 = load i64, i64* %agg_targ, align 8
  %arrayidx590 = getelementptr inbounds %struct.sv*, %struct.sv** %396, i64 %397
  %398 = load %struct.sv*, %struct.sv** %arrayidx590, align 8
  store %struct.sv* %398, %struct.sv** %sv, align 8
  br label %if.end610

if.else591:                                       ; preds = %if.end587
  %399 = load %struct.gv*, %struct.gv** %agg_gv, align 8
  %tobool592 = icmp ne %struct.gv* %399, null
  br i1 %tobool592, label %if.then593, label %if.else608

if.then593:                                       ; preds = %if.else591
  %400 = load i8, i8* %is_hv, align 1
  %tobool594 = trunc i8 %400 to i1
  br i1 %tobool594, label %cond.true596, label %cond.false601

cond.true596:                                     ; preds = %if.then593
  %401 = load %struct.gv*, %struct.gv** %agg_gv, align 8
  %sv_u597 = getelementptr inbounds %struct.gv, %struct.gv* %401, i32 0, i32 3
  %svu_gp598 = bitcast %union.anon.6* %sv_u597 to %struct.gp**
  %402 = load %struct.gp*, %struct.gp** %svu_gp598, align 8
  %add.ptr599 = getelementptr inbounds %struct.gp, %struct.gp* %402, i64 0
  %gp_hv600 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr599, i32 0, i32 5
  %403 = load %struct.hv*, %struct.hv** %gp_hv600, align 8
  %404 = bitcast %struct.hv* %403 to i8*
  %405 = bitcast i8* %404 to %struct.sv*
  br label %cond.end606

cond.false601:                                    ; preds = %if.then593
  %406 = load %struct.gv*, %struct.gv** %agg_gv, align 8
  %sv_u602 = getelementptr inbounds %struct.gv, %struct.gv* %406, i32 0, i32 3
  %svu_gp603 = bitcast %union.anon.6* %sv_u602 to %struct.gp**
  %407 = load %struct.gp*, %struct.gp** %svu_gp603, align 8
  %add.ptr604 = getelementptr inbounds %struct.gp, %struct.gp* %407, i64 0
  %gp_av605 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr604, i32 0, i32 6
  %408 = load %struct.av*, %struct.av** %gp_av605, align 8
  %409 = bitcast %struct.av* %408 to i8*
  %410 = bitcast i8* %409 to %struct.sv*
  br label %cond.end606

cond.end606:                                      ; preds = %cond.false601, %cond.true596
  %cond607 = phi %struct.sv* [ %405, %cond.true596 ], [ %410, %cond.false601 ]
  store %struct.sv* %cond607, %struct.sv** %sv, align 8
  br label %if.end609

if.else608:                                       ; preds = %if.else591
  br label %sw.epilog912

if.end609:                                        ; preds = %cond.end606
  br label %if.end610

if.end610:                                        ; preds = %if.end609, %if.then589
  %411 = load i64, i64* %index_type, align 8
  %cmp611 = icmp eq i64 %411, 16
  br i1 %cmp611, label %if.then613, label %if.else653

if.then613:                                       ; preds = %if.end610
  %412 = load i8, i8* %match.addr, align 1
  %tobool614 = trunc i8 %412 to i1
  br i1 %tobool614, label %if.then615, label %if.end643

if.then615:                                       ; preds = %if.then613
  %413 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags616 = getelementptr inbounds %struct.sv, %struct.sv* %413, i32 0, i32 2
  %414 = load i32, i32* %sv_flags616, align 4
  %and617 = and i32 %414, 14680064
  %tobool618 = icmp ne i32 %and617, 0
  br i1 %tobool618, label %if.then619, label %if.end620

if.then619:                                       ; preds = %if.then615
  br label %sw.epilog912

if.end620:                                        ; preds = %if.then615
  %415 = load i8, i8* %is_hv, align 1
  %tobool621 = trunc i8 %415 to i1
  br i1 %tobool621, label %if.then622, label %if.else633

if.then622:                                       ; preds = %if.end620
  %416 = load %struct.sv*, %struct.sv** %sv, align 8
  %417 = bitcast %struct.sv* %416 to i8*
  %418 = bitcast i8* %417 to %struct.hv*
  %419 = load %struct.sv*, %struct.sv** %index_const_sv, align 8
  %call624 = call i8* @Perl_hv_common(%struct.hv* %418, %struct.sv* %419, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %420 = bitcast i8* %call624 to %struct.he*
  store %struct.he* %420, %struct.he** %he623, align 8
  %421 = load %struct.he*, %struct.he** %he623, align 8
  %tobool625 = icmp ne %struct.he* %421, null
  br i1 %tobool625, label %lor.lhs.false626, label %if.then631

lor.lhs.false626:                                 ; preds = %if.then622
  %422 = load %struct.he*, %struct.he** %he623, align 8
  %he_valu627 = getelementptr inbounds %struct.he, %struct.he* %422, i32 0, i32 2
  %hent_val628 = bitcast %union.anon.0* %he_valu627 to %struct.sv**
  %423 = load %struct.sv*, %struct.sv** %hent_val628, align 8
  %424 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp629 = icmp ne %struct.sv* %423, %424
  br i1 %cmp629, label %if.then631, label %if.end632

if.then631:                                       ; preds = %lor.lhs.false626, %if.then622
  br label %sw.epilog912

if.end632:                                        ; preds = %lor.lhs.false626
  br label %if.end642

if.else633:                                       ; preds = %if.end620
  %425 = load %struct.sv*, %struct.sv** %sv, align 8
  %426 = bitcast %struct.sv* %425 to i8*
  %427 = bitcast i8* %426 to %struct.av*
  %428 = load i64, i64* %index_const_iv, align 8
  %call635 = call %struct.sv** @Perl_av_fetch(%struct.av* %427, i64 %428, i32 0)
  store %struct.sv** %call635, %struct.sv*** %svp634, align 8
  %429 = load %struct.sv**, %struct.sv*** %svp634, align 8
  %tobool636 = icmp ne %struct.sv** %429, null
  br i1 %tobool636, label %lor.lhs.false637, label %if.then640

lor.lhs.false637:                                 ; preds = %if.else633
  %430 = load %struct.sv**, %struct.sv*** %svp634, align 8
  %431 = load %struct.sv*, %struct.sv** %430, align 8
  %432 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp638 = icmp ne %struct.sv* %431, %432
  br i1 %cmp638, label %if.then640, label %if.end641

if.then640:                                       ; preds = %lor.lhs.false637, %if.else633
  br label %sw.epilog912

if.end641:                                        ; preds = %lor.lhs.false637
  br label %if.end642

if.end642:                                        ; preds = %if.end641, %if.end632
  br label %if.end643

if.end643:                                        ; preds = %if.end642, %if.then613
  %433 = load i8, i8* %is_hv, align 1
  %tobool644 = trunc i8 %433 to i1
  br i1 %tobool644, label %cond.true646, label %cond.false648

cond.true646:                                     ; preds = %if.end643
  %434 = load %struct.gv*, %struct.gv** %agg_gv, align 8
  %435 = load i64, i64* %agg_targ, align 8
  %436 = load %struct.sv*, %struct.sv** %index_const_sv, align 8
  %call647 = call %struct.sv* @Perl_varname(%struct.gv* %434, i8 signext 37, i64 %435, %struct.sv* %436, i32 0, i32 3)
  br label %cond.end651

cond.false648:                                    ; preds = %if.end643
  %437 = load %struct.gv*, %struct.gv** %agg_gv, align 8
  %438 = load i64, i64* %agg_targ, align 8
  %439 = load i64, i64* %index_const_iv, align 8
  %conv649 = trunc i64 %439 to i32
  %call650 = call %struct.sv* @Perl_varname(%struct.gv* %437, i8 signext 64, i64 %438, %struct.sv* null, i32 %conv649, i32 2)
  br label %cond.end651

cond.end651:                                      ; preds = %cond.false648, %cond.true646
  %cond652 = phi %struct.sv* [ %call647, %cond.true646 ], [ %call650, %cond.false648 ]
  store %struct.sv* %cond652, %struct.sv** %retval, align 8
  br label %return

if.else653:                                       ; preds = %if.end610
  %440 = load i8, i8* %is_hv, align 1
  %tobool654 = trunc i8 %440 to i1
  br i1 %tobool654, label %if.then655, label %if.else662

if.then655:                                       ; preds = %if.else653
  %441 = load %struct.sv*, %struct.sv** %sv, align 8
  %442 = bitcast %struct.sv* %441 to %struct.hv*
  %443 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %call657 = call %struct.sv* @S_find_hash_subscript(%struct.hv* %442, %struct.sv* %443)
  store %struct.sv* %call657, %struct.sv** %keysv656, align 8
  %444 = load %struct.sv*, %struct.sv** %keysv656, align 8
  %tobool658 = icmp ne %struct.sv* %444, null
  br i1 %tobool658, label %if.then659, label %if.end661

if.then659:                                       ; preds = %if.then655
  %445 = load %struct.gv*, %struct.gv** %agg_gv, align 8
  %446 = load i64, i64* %agg_targ, align 8
  %447 = load %struct.sv*, %struct.sv** %keysv656, align 8
  %call660 = call %struct.sv* @Perl_varname(%struct.gv* %445, i8 signext 37, i64 %446, %struct.sv* %447, i32 0, i32 3)
  store %struct.sv* %call660, %struct.sv** %retval, align 8
  br label %return

if.end661:                                        ; preds = %if.then655
  br label %if.end670

if.else662:                                       ; preds = %if.else653
  %448 = load %struct.sv*, %struct.sv** %sv, align 8
  %449 = bitcast %struct.sv* %448 to %struct.av*
  %450 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %call664 = call i32 @S_find_array_subscript(%struct.av* %449, %struct.sv* %450)
  store i32 %call664, i32* %index663, align 4
  %451 = load i32, i32* %index663, align 4
  %cmp665 = icmp sge i32 %451, 0
  br i1 %cmp665, label %if.then667, label %if.end669

if.then667:                                       ; preds = %if.else662
  %452 = load %struct.gv*, %struct.gv** %agg_gv, align 8
  %453 = load i64, i64* %agg_targ, align 8
  %454 = load i32, i32* %index663, align 4
  %call668 = call %struct.sv* @Perl_varname(%struct.gv* %452, i8 signext 64, i64 %453, %struct.sv* null, i32 %454, i32 2)
  store %struct.sv* %call668, %struct.sv** %retval, align 8
  br label %return

if.end669:                                        ; preds = %if.else662
  br label %if.end670

if.end670:                                        ; preds = %if.end669, %if.end661
  %455 = load i8, i8* %match.addr, align 1
  %tobool671 = trunc i8 %455 to i1
  br i1 %tobool671, label %if.then672, label %if.end673

if.then672:                                       ; preds = %if.end670
  br label %sw.epilog912

if.end673:                                        ; preds = %if.end670
  %456 = load %struct.gv*, %struct.gv** %agg_gv, align 8
  %457 = load i8, i8* %is_hv, align 1
  %tobool674 = trunc i8 %457 to i1
  %458 = zext i1 %tobool674 to i64
  %cond676 = select i1 %tobool674, i32 37, i32 64
  %conv677 = trunc i32 %cond676 to i8
  %459 = load i64, i64* %agg_targ, align 8
  %call678 = call %struct.sv* @Perl_varname(%struct.gv* %456, i8 signext %conv677, i64 %459, %struct.sv* null, i32 0, i32 4)
  store %struct.sv* %call678, %struct.sv** %retval, align 8
  br label %return

sw.bb679:                                         ; preds = %if.end
  %460 = load %struct.op*, %struct.op** %obase.addr, align 8
  %461 = bitcast %struct.op* %460 to %struct.binop*
  %op_first680 = getelementptr inbounds %struct.binop, %struct.binop* %461, i32 0, i32 7
  %462 = load %struct.op*, %struct.op** %op_first680, align 8
  %463 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %464 = load i8, i8* %match.addr, align 1
  %tobool681 = trunc i8 %464 to i1
  %465 = load i8**, i8*** %desc_p.addr, align 8
  %call682 = call %struct.sv* @S_find_uninit_var(%struct.op* %462, %struct.sv* %463, i1 zeroext %tobool681, i8** %465)
  store %struct.sv* %call682, %struct.sv** %retval, align 8
  br label %return

sw.bb683:                                         ; preds = %if.end
  %466 = load %struct.op*, %struct.op** %obase.addr, align 8
  %467 = bitcast %struct.op* %466 to %struct.unop*
  %op_first684 = getelementptr inbounds %struct.unop, %struct.unop* %467, i32 0, i32 7
  %468 = load %struct.op*, %struct.op** %op_first684, align 8
  store %struct.op* %468, %struct.op** %o, align 8
  %469 = load %struct.op*, %struct.op** %o, align 8
  %op_type685 = getelementptr inbounds %struct.op, %struct.op* %469, i32 0, i32 4
  %bf.load686 = load i16, i16* %op_type685, align 8
  %bf.clear687 = and i16 %bf.load686, 511
  %bf.cast688 = zext i16 %bf.clear687 to i32
  %cmp689 = icmp eq i32 %bf.cast688, 3
  br i1 %cmp689, label %if.then702, label %lor.lhs.false691

lor.lhs.false691:                                 ; preds = %sw.bb683
  %470 = load %struct.op*, %struct.op** %o, align 8
  %op_type692 = getelementptr inbounds %struct.op, %struct.op* %470, i32 0, i32 4
  %bf.load693 = load i16, i16* %op_type692, align 8
  %bf.clear694 = and i16 %bf.load693, 511
  %bf.cast695 = zext i16 %bf.clear694 to i32
  %cmp696 = icmp eq i32 %bf.cast695, 0
  br i1 %cmp696, label %land.lhs.true698, label %if.end704

land.lhs.true698:                                 ; preds = %lor.lhs.false691
  %471 = load %struct.op*, %struct.op** %o, align 8
  %op_targ699 = getelementptr inbounds %struct.op, %struct.op* %471, i32 0, i32 3
  %472 = load i64, i64* %op_targ699, align 8
  %cmp700 = icmp eq i64 %472, 3
  br i1 %cmp700, label %if.then702, label %if.end704

if.then702:                                       ; preds = %land.lhs.true698, %sw.bb683
  %473 = load %struct.op*, %struct.op** %o, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %473, i32 0, i32 1
  %474 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr703 = getelementptr inbounds %struct.op, %struct.op* %474, i64 0
  store %struct.op* %add.ptr703, %struct.op** %o, align 8
  br label %if.end704

if.end704:                                        ; preds = %if.then702, %land.lhs.true698, %lor.lhs.false691
  %475 = load %struct.op*, %struct.op** %o, align 8
  %op_sibling705 = getelementptr inbounds %struct.op, %struct.op* %475, i32 0, i32 1
  %476 = load %struct.op*, %struct.op** %op_sibling705, align 8
  %tobool706 = icmp ne %struct.op* %476, null
  br i1 %tobool706, label %cond.true707, label %cond.false708

cond.true707:                                     ; preds = %if.end704
  br i1 true, label %if.end731, label %if.then709

cond.false708:                                    ; preds = %if.end704
  br i1 false, label %if.end731, label %if.then709

if.then709:                                       ; preds = %cond.false708, %cond.true707
  %477 = load %struct.op*, %struct.op** %o, align 8
  %op_type710 = getelementptr inbounds %struct.op, %struct.op* %477, i32 0, i32 4
  %bf.load711 = load i16, i16* %op_type710, align 8
  %bf.clear712 = and i16 %bf.load711, 511
  %bf.cast713 = zext i16 %bf.clear712 to i32
  %cmp714 = icmp eq i32 %bf.cast713, 7
  br i1 %cmp714, label %if.then716, label %if.end730

if.then716:                                       ; preds = %if.then709
  %478 = load %struct.op*, %struct.op** %o, align 8
  %479 = bitcast %struct.op* %478 to %struct.svop*
  %op_sv717 = getelementptr inbounds %struct.svop, %struct.svop* %479, i32 0, i32 7
  %480 = load %struct.sv*, %struct.sv** %op_sv717, align 8
  %481 = bitcast %struct.sv* %480 to %struct.gv*
  store %struct.gv* %481, %struct.gv** %gv, align 8
  %482 = load i8, i8* %match.addr, align 1
  %tobool718 = trunc i8 %482 to i1
  br i1 %tobool718, label %land.lhs.true720, label %if.end728

land.lhs.true720:                                 ; preds = %if.then716
  %483 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u721 = getelementptr inbounds %struct.gv, %struct.gv* %483, i32 0, i32 3
  %svu_gp722 = bitcast %union.anon.6* %sv_u721 to %struct.gp**
  %484 = load %struct.gp*, %struct.gp** %svu_gp722, align 8
  %add.ptr723 = getelementptr inbounds %struct.gp, %struct.gp* %484, i64 0
  %gp_sv724 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr723, i32 0, i32 0
  %485 = load %struct.sv*, %struct.sv** %gp_sv724, align 8
  %486 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp725 = icmp ne %struct.sv* %485, %486
  br i1 %cmp725, label %if.then727, label %if.end728

if.then727:                                       ; preds = %land.lhs.true720
  br label %sw.epilog912

if.end728:                                        ; preds = %land.lhs.true720, %if.then716
  %487 = load %struct.gv*, %struct.gv** %gv, align 8
  %call729 = call %struct.sv* @Perl_varname(%struct.gv* %487, i8 signext 36, i64 0, %struct.sv* null, i32 0, i32 1)
  store %struct.sv* %call729, %struct.sv** %retval, align 8
  br label %return

if.end730:                                        ; preds = %if.then709
  br label %sw.epilog912

if.end731:                                        ; preds = %cond.false708, %cond.true707
  br label %do_op

sw.bb732:                                         ; preds = %if.end, %if.end, %if.end, %if.end
  %488 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %488, i32 0, i32 5
  %489 = load i8, i8* %op_flags, align 2
  %conv733 = zext i8 %489 to i32
  %and734 = and i32 %conv733, 64
  %tobool735 = icmp ne i32 %and734, 0
  br i1 %tobool735, label %if.end773, label %if.then736

if.then736:                                       ; preds = %sw.bb732
  %490 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %491 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u737 = getelementptr inbounds %struct.gv, %struct.gv* %491, i32 0, i32 3
  %svu_gp738 = bitcast %union.anon.6* %sv_u737 to %struct.gp**
  %492 = load %struct.gp*, %struct.gp** %svu_gp738, align 8
  %add.ptr739 = getelementptr inbounds %struct.gp, %struct.gp* %492, i64 0
  %gp_sv740 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr739, i32 0, i32 0
  %493 = load %struct.sv*, %struct.sv** %gp_sv740, align 8
  %tobool741 = icmp ne %struct.sv* %493, null
  br i1 %tobool741, label %cond.true742, label %cond.false747

cond.true742:                                     ; preds = %if.then736
  %494 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u743 = getelementptr inbounds %struct.gv, %struct.gv* %494, i32 0, i32 3
  %svu_gp744 = bitcast %union.anon.6* %sv_u743 to %struct.gp**
  %495 = load %struct.gp*, %struct.gp** %svu_gp744, align 8
  %add.ptr745 = getelementptr inbounds %struct.gp, %struct.gp* %495, i64 0
  %gp_sv746 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr745, i32 0, i32 0
  br label %cond.end753

cond.false747:                                    ; preds = %if.then736
  %496 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %call748 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %496, i32 0)
  %sv_u749 = getelementptr inbounds %struct.gv, %struct.gv* %call748, i32 0, i32 3
  %svu_gp750 = bitcast %union.anon.6* %sv_u749 to %struct.gp**
  %497 = load %struct.gp*, %struct.gp** %svu_gp750, align 8
  %add.ptr751 = getelementptr inbounds %struct.gp, %struct.gp* %497, i64 0
  %gp_sv752 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr751, i32 0, i32 0
  br label %cond.end753

cond.end753:                                      ; preds = %cond.false747, %cond.true742
  %cond754 = phi %struct.sv** [ %gp_sv746, %cond.true742 ], [ %gp_sv752, %cond.false747 ]
  %498 = load %struct.sv*, %struct.sv** %cond754, align 8
  %add.ptr755 = getelementptr inbounds %struct.sv, %struct.sv* %498, i64 0
  %cmp756 = icmp eq %struct.sv* %490, %add.ptr755
  br i1 %cmp756, label %if.then758, label %if.else760

if.then758:                                       ; preds = %cond.end753
  %call759 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.113, i64 0, i64 0), i64 2, i32 524288)
  store %struct.sv* %call759, %struct.sv** %retval, align 8
  br label %return

if.else760:                                       ; preds = %cond.end753
  %499 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_targ761 = getelementptr inbounds %struct.op, %struct.op* %499, i32 0, i32 3
  %500 = load i64, i64* %op_targ761, align 8
  %tobool762 = icmp ne i64 %500, 0
  br i1 %tobool762, label %land.lhs.true763, label %if.end771

land.lhs.true763:                                 ; preds = %if.else760
  %501 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %502 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %503 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_targ764 = getelementptr inbounds %struct.op, %struct.op* %503, i32 0, i32 3
  %504 = load i64, i64* %op_targ764, align 8
  %arrayidx765 = getelementptr inbounds %struct.sv*, %struct.sv** %502, i64 %504
  %505 = load %struct.sv*, %struct.sv** %arrayidx765, align 8
  %cmp766 = icmp eq %struct.sv* %501, %505
  br i1 %cmp766, label %if.then768, label %if.end771

if.then768:                                       ; preds = %land.lhs.true763
  %506 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_targ769 = getelementptr inbounds %struct.op, %struct.op* %506, i32 0, i32 3
  %507 = load i64, i64* %op_targ769, align 8
  %call770 = call %struct.sv* @Perl_varname(%struct.gv* null, i8 signext 36, i64 %507, %struct.sv* null, i32 0, i32 1)
  store %struct.sv* %call770, %struct.sv** %retval, align 8
  br label %return

if.end771:                                        ; preds = %land.lhs.true763, %if.else760
  br label %if.end772

if.end772:                                        ; preds = %if.end771
  br label %if.end773

if.end773:                                        ; preds = %if.end772, %sw.bb732
  br label %do_op

sw.bb774:                                         ; preds = %if.end, %if.end, %if.end
  store i8 1, i8* %match.addr, align 1
  %508 = load %struct.op*, %struct.op** %obase.addr, align 8
  %509 = bitcast %struct.op* %508 to %struct.unop*
  %op_first775 = getelementptr inbounds %struct.unop, %struct.unop* %509, i32 0, i32 7
  %510 = load %struct.op*, %struct.op** %op_first775, align 8
  store %struct.op* %510, %struct.op** %o, align 8
  %511 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_flags776 = getelementptr inbounds %struct.op, %struct.op* %511, i32 0, i32 5
  %512 = load i8, i8* %op_flags776, align 2
  %conv777 = zext i8 %512 to i32
  %and778 = and i32 %conv777, 64
  %tobool779 = icmp ne i32 %and778, 0
  br i1 %tobool779, label %land.lhs.true780, label %if.end803

land.lhs.true780:                                 ; preds = %sw.bb774
  %513 = load %struct.op*, %struct.op** %o, align 8
  %op_type781 = getelementptr inbounds %struct.op, %struct.op* %513, i32 0, i32 4
  %bf.load782 = load i16, i16* %op_type781, align 8
  %bf.clear783 = and i16 %bf.load782, 511
  %bf.cast784 = zext i16 %bf.clear783 to i32
  %cmp785 = icmp eq i32 %bf.cast784, 3
  br i1 %cmp785, label %if.then798, label %lor.lhs.false787

lor.lhs.false787:                                 ; preds = %land.lhs.true780
  %514 = load %struct.op*, %struct.op** %o, align 8
  %op_type788 = getelementptr inbounds %struct.op, %struct.op* %514, i32 0, i32 4
  %bf.load789 = load i16, i16* %op_type788, align 8
  %bf.clear790 = and i16 %bf.load789, 511
  %bf.cast791 = zext i16 %bf.clear790 to i32
  %cmp792 = icmp eq i32 %bf.cast791, 0
  br i1 %cmp792, label %land.lhs.true794, label %if.end803

land.lhs.true794:                                 ; preds = %lor.lhs.false787
  %515 = load %struct.op*, %struct.op** %o, align 8
  %op_targ795 = getelementptr inbounds %struct.op, %struct.op* %515, i32 0, i32 3
  %516 = load i64, i64* %op_targ795, align 8
  %cmp796 = icmp eq i64 %516, 3
  br i1 %cmp796, label %if.then798, label %if.end803

if.then798:                                       ; preds = %land.lhs.true794, %land.lhs.true780
  %517 = load %struct.op*, %struct.op** %o, align 8
  %op_sibling799 = getelementptr inbounds %struct.op, %struct.op* %517, i32 0, i32 1
  %518 = load %struct.op*, %struct.op** %op_sibling799, align 8
  %add.ptr800 = getelementptr inbounds %struct.op, %struct.op* %518, i64 0
  %op_sibling801 = getelementptr inbounds %struct.op, %struct.op* %add.ptr800, i32 0, i32 1
  %519 = load %struct.op*, %struct.op** %op_sibling801, align 8
  %add.ptr802 = getelementptr inbounds %struct.op, %struct.op* %519, i64 0
  store %struct.op* %add.ptr802, %struct.op** %o, align 8
  br label %if.end803

if.end803:                                        ; preds = %if.then798, %land.lhs.true794, %lor.lhs.false787, %sw.bb774
  br label %do_op2

sw.bb804:                                         ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  store i8 1, i8* %match.addr, align 1
  br label %do_op

sw.bb805:                                         ; preds = %if.end, %if.end
  br label %sw.epilog912

sw.bb806:                                         ; preds = %if.end, %if.end
  %call808 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.66, i64 0, i64 0), i64 1, i32 128, i32 3)
  store %struct.gv* %call808, %struct.gv** %gv807, align 8
  %520 = load %struct.gv*, %struct.gv** %gv807, align 8
  %tobool809 = icmp ne %struct.gv* %520, null
  br i1 %tobool809, label %land.lhs.true810, label %if.end819

land.lhs.true810:                                 ; preds = %sw.bb806
  %521 = load %struct.gv*, %struct.gv** %gv807, align 8
  %sv_u811 = getelementptr inbounds %struct.gv, %struct.gv* %521, i32 0, i32 3
  %svu_gp812 = bitcast %union.anon.6* %sv_u811 to %struct.gp**
  %522 = load %struct.gp*, %struct.gp** %svu_gp812, align 8
  %add.ptr813 = getelementptr inbounds %struct.gp, %struct.gp* %522, i64 0
  %gp_sv814 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr813, i32 0, i32 0
  %523 = load %struct.sv*, %struct.sv** %gp_sv814, align 8
  %524 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %cmp815 = icmp eq %struct.sv* %523, %524
  br i1 %cmp815, label %if.then817, label %if.end819

if.then817:                                       ; preds = %land.lhs.true810
  %call818 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.114, i64 0, i64 0), i64 2, i32 524288)
  store %struct.sv* %call818, %struct.sv** %retval, align 8
  br label %return

if.end819:                                        ; preds = %land.lhs.true810, %sw.bb806
  br label %do_op

sw.bb820:                                         ; preds = %if.end
  %525 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_flags821 = getelementptr inbounds %struct.op, %struct.op* %525, i32 0, i32 5
  %526 = load i8, i8* %op_flags821, align 2
  %conv822 = zext i8 %526 to i32
  %and823 = and i32 %conv822, 32
  %tobool824 = icmp ne i32 %and823, 0
  br i1 %tobool824, label %if.end826, label %if.then825

if.then825:                                       ; preds = %sw.bb820
  br label %sw.epilog912

if.end826:                                        ; preds = %sw.bb820
  br label %sw.bb827

sw.bb827:                                         ; preds = %if.end, %if.end, %if.end826
  %527 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags828 = getelementptr inbounds %struct.sv, %struct.sv* %527, i32 0, i32 2
  %528 = load i32, i32* %sv_flags828, align 4
  %and829 = and i32 %528, 2048
  %tobool830 = icmp ne i32 %and829, 0
  br i1 %tobool830, label %land.lhs.true831, label %if.end837

land.lhs.true831:                                 ; preds = %sw.bb827
  %529 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %530 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u832 = getelementptr inbounds %struct.sv, %struct.sv* %530, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u832 to %struct.sv**
  %531 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %cmp833 = icmp eq %struct.sv* %529, %531
  br i1 %cmp833, label %if.then835, label %if.end837

if.then835:                                       ; preds = %land.lhs.true831
  %call836 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.115, i64 0, i64 0), i64 5, i32 524288)
  store %struct.sv* %call836, %struct.sv** %retval, align 8
  br label %return

if.end837:                                        ; preds = %land.lhs.true831, %sw.bb827
  br label %sw.default

sw.default:                                       ; preds = %if.end, %if.end837
  br label %do_op

do_op:                                            ; preds = %sw.default, %if.end819, %sw.bb804, %if.end773, %if.end731
  %532 = load %struct.op*, %struct.op** %obase.addr, align 8
  %op_flags838 = getelementptr inbounds %struct.op, %struct.op* %532, i32 0, i32 5
  %533 = load i8, i8* %op_flags838, align 2
  %conv839 = zext i8 %533 to i32
  %and840 = and i32 %conv839, 4
  %tobool841 = icmp ne i32 %and840, 0
  br i1 %tobool841, label %if.end843, label %if.then842

if.then842:                                       ; preds = %do_op
  br label %sw.epilog912

if.end843:                                        ; preds = %do_op
  %534 = load %struct.op*, %struct.op** %obase.addr, align 8
  %535 = bitcast %struct.op* %534 to %struct.unop*
  %op_first844 = getelementptr inbounds %struct.unop, %struct.unop* %535, i32 0, i32 7
  %536 = load %struct.op*, %struct.op** %op_first844, align 8
  store %struct.op* %536, %struct.op** %o, align 8
  br label %do_op2

do_op2:                                           ; preds = %if.end843, %if.end803
  %537 = load %struct.op*, %struct.op** %o, align 8
  %tobool845 = icmp ne %struct.op* %537, null
  br i1 %tobool845, label %if.end847, label %if.then846

if.then846:                                       ; preds = %do_op2
  br label %sw.epilog912

if.end847:                                        ; preds = %do_op2
  store %struct.op* null, %struct.op** %o2, align 8
  %538 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %538, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end847
  %539 = load %struct.op*, %struct.op** %kid, align 8
  %tobool848 = icmp ne %struct.op* %539, null
  br i1 %tobool848, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %540 = load %struct.op*, %struct.op** %kid, align 8
  %op_type849 = getelementptr inbounds %struct.op, %struct.op* %540, i32 0, i32 4
  %bf.load850 = load i16, i16* %op_type849, align 8
  %bf.clear851 = and i16 %bf.load850, 511
  %bf.cast852 = zext i16 %bf.clear851 to i32
  %conv853 = trunc i32 %bf.cast852 to i16
  store i16 %conv853, i16* %type, align 2
  %541 = load i16, i16* %type, align 2
  %conv854 = zext i16 %541 to i32
  %cmp855 = icmp eq i32 %conv854, 5
  br i1 %cmp855, label %land.lhs.true857, label %lor.lhs.false874

land.lhs.true857:                                 ; preds = %for.body
  %542 = load %struct.op*, %struct.op** %kid, align 8
  %543 = bitcast %struct.op* %542 to %struct.svop*
  %op_sv858 = getelementptr inbounds %struct.svop, %struct.svop* %543, i32 0, i32 7
  %544 = load %struct.sv*, %struct.sv** %op_sv858, align 8
  %sv_flags859 = getelementptr inbounds %struct.sv, %struct.sv* %544, i32 0, i32 2
  %545 = load i32, i32* %sv_flags859, align 4
  %and860 = and i32 %545, 65280
  %tobool861 = icmp ne i32 %and860, 0
  br i1 %tobool861, label %if.then891, label %lor.lhs.false862

lor.lhs.false862:                                 ; preds = %land.lhs.true857
  %546 = load %struct.op*, %struct.op** %kid, align 8
  %547 = bitcast %struct.op* %546 to %struct.svop*
  %op_sv863 = getelementptr inbounds %struct.svop, %struct.svop* %547, i32 0, i32 7
  %548 = load %struct.sv*, %struct.sv** %op_sv863, align 8
  %sv_flags864 = getelementptr inbounds %struct.sv, %struct.sv* %548, i32 0, i32 2
  %549 = load i32, i32* %sv_flags864, align 4
  %and865 = and i32 %549, 255
  %cmp866 = icmp eq i32 %and865, 8
  br i1 %cmp866, label %if.then891, label %lor.lhs.false868

lor.lhs.false868:                                 ; preds = %lor.lhs.false862
  %550 = load %struct.op*, %struct.op** %kid, align 8
  %551 = bitcast %struct.op* %550 to %struct.svop*
  %op_sv869 = getelementptr inbounds %struct.svop, %struct.svop* %551, i32 0, i32 7
  %552 = load %struct.sv*, %struct.sv** %op_sv869, align 8
  %sv_flags870 = getelementptr inbounds %struct.sv, %struct.sv* %552, i32 0, i32 2
  %553 = load i32, i32* %sv_flags870, align 4
  %and871 = and i32 %553, 16826623
  %cmp872 = icmp eq i32 %and871, 16777226
  br i1 %cmp872, label %if.then891, label %lor.lhs.false874

lor.lhs.false874:                                 ; preds = %lor.lhs.false868, %for.body
  %554 = load i16, i16* %type, align 2
  %conv875 = zext i16 %554 to i32
  %cmp876 = icmp eq i32 %conv875, 0
  br i1 %cmp876, label %land.lhs.true878, label %lor.lhs.false883

land.lhs.true878:                                 ; preds = %lor.lhs.false874
  %555 = load %struct.op*, %struct.op** %kid, align 8
  %op_flags879 = getelementptr inbounds %struct.op, %struct.op* %555, i32 0, i32 5
  %556 = load i8, i8* %op_flags879, align 2
  %conv880 = zext i8 %556 to i32
  %and881 = and i32 %conv880, 4
  %tobool882 = icmp ne i32 %and881, 0
  br i1 %tobool882, label %lor.lhs.false883, label %if.then891

lor.lhs.false883:                                 ; preds = %land.lhs.true878, %lor.lhs.false874
  %557 = load i16, i16* %type, align 2
  %conv884 = zext i16 %557 to i32
  %cmp885 = icmp eq i32 %conv884, 3
  br i1 %cmp885, label %if.then891, label %lor.lhs.false887

lor.lhs.false887:                                 ; preds = %lor.lhs.false883
  %558 = load i16, i16* %type, align 2
  %conv888 = zext i16 %558 to i32
  %cmp889 = icmp eq i32 %conv888, 390
  br i1 %cmp889, label %if.then891, label %if.end892

if.then891:                                       ; preds = %lor.lhs.false887, %lor.lhs.false883, %land.lhs.true878, %lor.lhs.false868, %lor.lhs.false862, %land.lhs.true857
  br label %for.inc

if.end892:                                        ; preds = %lor.lhs.false887
  %559 = load %struct.op*, %struct.op** %o2, align 8
  %tobool893 = icmp ne %struct.op* %559, null
  br i1 %tobool893, label %if.then894, label %if.end895

if.then894:                                       ; preds = %if.end892
  store %struct.op* null, %struct.op** %o2, align 8
  br label %for.end

if.end895:                                        ; preds = %if.end892
  %560 = load %struct.op*, %struct.op** %kid, align 8
  store %struct.op* %560, %struct.op** %o2, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end895, %if.then891
  %561 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling896 = getelementptr inbounds %struct.op, %struct.op* %561, i32 0, i32 1
  %562 = load %struct.op*, %struct.op** %op_sibling896, align 8
  %add.ptr897 = getelementptr inbounds %struct.op, %struct.op* %562, i64 0
  store %struct.op* %add.ptr897, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then894, %for.cond
  %563 = load %struct.op*, %struct.op** %o2, align 8
  %tobool898 = icmp ne %struct.op* %563, null
  br i1 %tobool898, label %if.then899, label %if.end902

if.then899:                                       ; preds = %for.end
  %564 = load %struct.op*, %struct.op** %o2, align 8
  %565 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %566 = load i8, i8* %match.addr, align 1
  %tobool900 = trunc i8 %566 to i1
  %567 = load i8**, i8*** %desc_p.addr, align 8
  %call901 = call %struct.sv* @S_find_uninit_var(%struct.op* %564, %struct.sv* %565, i1 zeroext %tobool900, i8** %567)
  store %struct.sv* %call901, %struct.sv** %retval, align 8
  br label %return

if.end902:                                        ; preds = %for.end
  br label %while.cond

while.cond:                                       ; preds = %if.end908, %if.end902
  %568 = load %struct.op*, %struct.op** %o, align 8
  %tobool903 = icmp ne %struct.op* %568, null
  br i1 %tobool903, label %while.body904, label %while.end911

while.body904:                                    ; preds = %while.cond
  %569 = load %struct.op*, %struct.op** %o, align 8
  %570 = load %struct.sv*, %struct.sv** %uninit_sv.addr, align 8
  %571 = load i8**, i8*** %desc_p.addr, align 8
  %call905 = call %struct.sv* @S_find_uninit_var(%struct.op* %569, %struct.sv* %570, i1 zeroext true, i8** %571)
  store %struct.sv* %call905, %struct.sv** %sv, align 8
  %572 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool906 = icmp ne %struct.sv* %572, null
  br i1 %tobool906, label %if.then907, label %if.end908

if.then907:                                       ; preds = %while.body904
  %573 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %573, %struct.sv** %retval, align 8
  br label %return

if.end908:                                        ; preds = %while.body904
  %574 = load %struct.op*, %struct.op** %o, align 8
  %op_sibling909 = getelementptr inbounds %struct.op, %struct.op* %574, i32 0, i32 1
  %575 = load %struct.op*, %struct.op** %op_sibling909, align 8
  %add.ptr910 = getelementptr inbounds %struct.op, %struct.op* %575, i64 0
  store %struct.op* %add.ptr910, %struct.op** %o, align 8
  br label %while.cond

while.end911:                                     ; preds = %while.cond
  br label %sw.epilog912

sw.epilog912:                                     ; preds = %while.end911, %if.then846, %if.then842, %if.then825, %sw.bb805, %if.end730, %if.then727, %if.then672, %if.then640, %if.then631, %if.then619, %if.else608, %if.then586, %if.then479, %if.then399, %if.then373, %if.then359, %if.then308, %if.then285, %if.then229, %if.then205, %if.then196, %if.then181, %if.then171, %if.then163, %if.then150, %if.then128, %if.then114, %if.then104, %if.then84, %if.then55
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog912, %if.then907, %if.then899, %if.then835, %if.then817, %if.then768, %if.then758, %if.end728, %sw.bb679, %if.end673, %if.then667, %if.then659, %cond.end651, %if.end582, %if.then580, %if.then576, %lor.end494, %if.then473, %if.then464, %cond.end449, %if.then409, %if.then236, %if.end230, %if.end207, %if.end173, %if.end151, %if.end129, %if.end117, %if.end115, %if.end85, %if.else66, %if.then63, %if.then
  %576 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %576
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_sv_display(%struct.sv* %sv, i8* %tmpbuf, i64 %tmpbuf_size) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %tmpbuf.addr = alloca i8*, align 8
  %tmpbuf_size.addr = alloca i64, align 8
  %pv = alloca i8*, align 8
  %dsv = alloca %struct.sv*, align 8
  %d = alloca i8*, align 8
  %limit = alloca i8*, align 8
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %ch = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %tmpbuf, i8** %tmpbuf.addr, align 8
  store i64 %tmpbuf_size, i64* %tmpbuf_size.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 536870912
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %2, i32 0, i32 10
  %3 = load i32, i32* %cop_hints, align 8
  %add = add i32 %3, 0
  %and1 = and i32 %add, 8
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %call = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i64 0, i32 524288)
  store %struct.sv* %call, %struct.sv** %dsv, align 8
  %4 = load %struct.sv*, %struct.sv** %dsv, align 8
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call3 = call i8* @Perl_sv_uni_display(%struct.sv* %4, %struct.sv* %5, i64 10, i64 1)
  store i8* %call3, i8** %pv, align 8
  br label %if.end97

if.else:                                          ; preds = %land.lhs.true, %entry
  %6 = load i8*, i8** %tmpbuf.addr, align 8
  store i8* %6, i8** %d, align 8
  %7 = load i8*, i8** %tmpbuf.addr, align 8
  %8 = load i64, i64* %tmpbuf_size.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %8
  %add.ptr4 = getelementptr inbounds i8, i8* %add.ptr, i64 -8
  store i8* %add.ptr4, i8** %limit, align 8
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %10 = load i8*, i8** %svu_pv, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %10, i64 0
  store i8* %add.ptr5, i8** %s, align 8
  %11 = load i8*, i8** %s, align 8
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any, align 8
  %14 = bitcast i8* %13 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %14, i32 0, i32 2
  %15 = load i64, i64* %xpv_cur, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %11, i64 %15
  store i8* %add.ptr6, i8** %end, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %16 = load i8*, i8** %s, align 8
  %17 = load i8*, i8** %end, align 8
  %cmp = icmp ult i8* %16, %17
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %18 = load i8*, i8** %d, align 8
  %19 = load i8*, i8** %limit, align 8
  %cmp7 = icmp ult i8* %18, %19
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %20 = phi i1 [ false, %for.cond ], [ %cmp7, %land.rhs ]
  br i1 %20, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %21 = load i8*, i8** %s, align 8
  %22 = load i8, i8* %21, align 1
  %conv = sext i8 %22 to i32
  %and8 = and i32 %conv, 255
  store i32 %and8, i32* %ch, align 4
  %23 = load i32, i32* %ch, align 4
  %conv9 = sext i32 %23 to i64
  %cmp10 = icmp ult i64 %conv9, 128
  br i1 %cmp10, label %if.end, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %for.body
  %24 = load i32, i32* %ch, align 4
  %and13 = and i32 %24, -128
  %cmp14 = icmp eq i32 %and13, 0
  br i1 %cmp14, label %land.lhs.true16, label %if.then21

land.lhs.true16:                                  ; preds = %land.lhs.true12
  %call17 = call i16** @__ctype_b_loc() #9
  %25 = load i16*, i16** %call17, align 8
  %26 = load i32, i32* %ch, align 4
  %idxprom = sext i32 %26 to i64
  %arrayidx = getelementptr inbounds i16, i16* %25, i64 %idxprom
  %27 = load i16, i16* %arrayidx, align 2
  %conv18 = zext i16 %27 to i32
  %and19 = and i32 %conv18, 16384
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.end, label %if.then21

if.then21:                                        ; preds = %land.lhs.true16, %land.lhs.true12
  %28 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  store i8 77, i8* %28, align 1
  %29 = load i8*, i8** %d, align 8
  %incdec.ptr22 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %incdec.ptr22, i8** %d, align 8
  store i8 45, i8* %29, align 1
  %30 = load i32, i32* %ch, align 4
  %and23 = and i32 %30, 127
  store i32 %and23, i32* %ch, align 4
  br label %if.end

if.end:                                           ; preds = %if.then21, %land.lhs.true16, %for.body
  %31 = load i32, i32* %ch, align 4
  %cmp24 = icmp eq i32 %31, 10
  br i1 %cmp24, label %if.then26, label %if.else29

if.then26:                                        ; preds = %if.end
  %32 = load i8*, i8** %d, align 8
  %incdec.ptr27 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %incdec.ptr27, i8** %d, align 8
  store i8 92, i8* %32, align 1
  %33 = load i8*, i8** %d, align 8
  %incdec.ptr28 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr28, i8** %d, align 8
  store i8 110, i8* %33, align 1
  br label %if.end88

if.else29:                                        ; preds = %if.end
  %34 = load i32, i32* %ch, align 4
  %cmp30 = icmp eq i32 %34, 13
  br i1 %cmp30, label %if.then32, label %if.else35

if.then32:                                        ; preds = %if.else29
  %35 = load i8*, i8** %d, align 8
  %incdec.ptr33 = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %incdec.ptr33, i8** %d, align 8
  store i8 92, i8* %35, align 1
  %36 = load i8*, i8** %d, align 8
  %incdec.ptr34 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr34, i8** %d, align 8
  store i8 114, i8* %36, align 1
  br label %if.end87

if.else35:                                        ; preds = %if.else29
  %37 = load i32, i32* %ch, align 4
  %cmp36 = icmp eq i32 %37, 12
  br i1 %cmp36, label %if.then38, label %if.else41

if.then38:                                        ; preds = %if.else35
  %38 = load i8*, i8** %d, align 8
  %incdec.ptr39 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr39, i8** %d, align 8
  store i8 92, i8* %38, align 1
  %39 = load i8*, i8** %d, align 8
  %incdec.ptr40 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr40, i8** %d, align 8
  store i8 102, i8* %39, align 1
  br label %if.end86

if.else41:                                        ; preds = %if.else35
  %40 = load i32, i32* %ch, align 4
  %cmp42 = icmp eq i32 %40, 92
  br i1 %cmp42, label %if.then44, label %if.else47

if.then44:                                        ; preds = %if.else41
  %41 = load i8*, i8** %d, align 8
  %incdec.ptr45 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr45, i8** %d, align 8
  store i8 92, i8* %41, align 1
  %42 = load i8*, i8** %d, align 8
  %incdec.ptr46 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr46, i8** %d, align 8
  store i8 92, i8* %42, align 1
  br label %if.end85

if.else47:                                        ; preds = %if.else41
  %43 = load i32, i32* %ch, align 4
  %cmp48 = icmp eq i32 %43, 0
  br i1 %cmp48, label %if.then50, label %if.else53

if.then50:                                        ; preds = %if.else47
  %44 = load i8*, i8** %d, align 8
  %incdec.ptr51 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr51, i8** %d, align 8
  store i8 92, i8* %44, align 1
  %45 = load i8*, i8** %d, align 8
  %incdec.ptr52 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr52, i8** %d, align 8
  store i8 48, i8* %45, align 1
  br label %if.end84

if.else53:                                        ; preds = %if.else47
  %46 = load i32, i32* %ch, align 4
  %and54 = and i32 %46, -128
  %cmp55 = icmp eq i32 %and54, 0
  br i1 %cmp55, label %land.lhs.true57, label %if.else67

land.lhs.true57:                                  ; preds = %if.else53
  %call58 = call i16** @__ctype_b_loc() #9
  %47 = load i16*, i16** %call58, align 8
  %48 = load i32, i32* %ch, align 4
  %idxprom59 = sext i32 %48 to i64
  %arrayidx60 = getelementptr inbounds i16, i16* %47, i64 %idxprom59
  %49 = load i16, i16* %arrayidx60, align 2
  %conv61 = zext i16 %49 to i32
  %and62 = and i32 %conv61, 16384
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %if.then64, label %if.else67

if.then64:                                        ; preds = %land.lhs.true57
  %50 = load i32, i32* %ch, align 4
  %conv65 = trunc i32 %50 to i8
  %51 = load i8*, i8** %d, align 8
  %incdec.ptr66 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr66, i8** %d, align 8
  store i8 %conv65, i8* %51, align 1
  br label %if.end83

if.else67:                                        ; preds = %land.lhs.true57, %if.else53
  %52 = load i8*, i8** %d, align 8
  %incdec.ptr68 = getelementptr inbounds i8, i8* %52, i32 1
  store i8* %incdec.ptr68, i8** %d, align 8
  store i8 94, i8* %52, align 1
  %53 = load i32, i32* %ch, align 4
  %conv69 = trunc i32 %53 to i8
  %idxprom70 = zext i8 %conv69 to i64
  %arrayidx71 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom70
  %54 = load i32, i32* %arrayidx71, align 4
  %and72 = and i32 %54, 16392
  %cmp73 = icmp eq i32 %and72, 16392
  br i1 %cmp73, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else67
  %55 = load i32, i32* %ch, align 4
  %conv75 = trunc i32 %55 to i8
  %conv76 = zext i8 %conv75 to i32
  %sub = sub nsw i32 %conv76, 32
  %conv77 = trunc i32 %sub to i8
  %conv78 = zext i8 %conv77 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.else67
  %56 = load i32, i32* %ch, align 4
  %conv79 = trunc i32 %56 to i8
  %conv80 = zext i8 %conv79 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv78, %cond.true ], [ %conv80, %cond.false ]
  %xor = xor i32 %cond, 64
  %conv81 = trunc i32 %xor to i8
  %57 = load i8*, i8** %d, align 8
  %incdec.ptr82 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %incdec.ptr82, i8** %d, align 8
  store i8 %conv81, i8* %57, align 1
  br label %if.end83

if.end83:                                         ; preds = %cond.end, %if.then64
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.then50
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.then44
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.then38
  br label %if.end87

if.end87:                                         ; preds = %if.end86, %if.then32
  br label %if.end88

if.end88:                                         ; preds = %if.end87, %if.then26
  br label %for.inc

for.inc:                                          ; preds = %if.end88
  %58 = load i8*, i8** %s, align 8
  %incdec.ptr89 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr89, i8** %s, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %59 = load i8*, i8** %s, align 8
  %60 = load i8*, i8** %end, align 8
  %cmp90 = icmp ult i8* %59, %60
  br i1 %cmp90, label %if.then92, label %if.end96

if.then92:                                        ; preds = %for.end
  %61 = load i8*, i8** %d, align 8
  %incdec.ptr93 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr93, i8** %d, align 8
  store i8 46, i8* %61, align 1
  %62 = load i8*, i8** %d, align 8
  %incdec.ptr94 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %incdec.ptr94, i8** %d, align 8
  store i8 46, i8* %62, align 1
  %63 = load i8*, i8** %d, align 8
  %incdec.ptr95 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %incdec.ptr95, i8** %d, align 8
  store i8 46, i8* %63, align 1
  br label %if.end96

if.end96:                                         ; preds = %if.then92, %for.end
  %64 = load i8*, i8** %d, align 8
  store i8 0, i8* %64, align 1
  %65 = load i8*, i8** %tmpbuf.addr, align 8
  store i8* %65, i8** %pv, align 8
  br label %if.end97

if.end97:                                         ; preds = %if.end96, %if.then
  %66 = load i8*, i8** %pv, align 8
  ret i8* %66
}

declare dso_local i8* @Perl_sv_uni_display(%struct.sv*, %struct.sv*, i64, i64) #1

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #4

; Function Attrs: noinline nounwind uwtable
define internal void @S_sv_setnv(%struct.sv* %sv, i32 %numtype) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %numtype.addr = alloca i32, align 4
  %pok = alloca i8, align 1
  %nok = alloca i8, align 1
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i32 %numtype, i32* %numtype.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 1024
  %tobool = icmp ne i32 %and, 0
  %2 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %tobool1 = icmp ne i32 %cond, 0
  %frombool = zext i1 %tobool1 to i8
  store i8 %frombool, i8* %pok, align 1
  store i8 0, i8* %nok, align 1
  %3 = load i32, i32* %numtype.addr, align 4
  %and2 = and i32 %3, 16
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %4 = load i32, i32* %numtype.addr, align 4
  %and4 = and i32 %4, 8
  %tobool5 = icmp ne i32 %and4, 0
  %5 = zext i1 %tobool5 to i64
  %cond6 = select i1 %tobool5, double 0xFFF0000000000000, double 0x7FF0000000000000
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %8, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  store double %cond6, double* %xnv_nv, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  store i8 1, i8* %nok, align 1
  br label %if.end24

if.else:                                          ; preds = %entry
  %9 = load i32, i32* %numtype.addr, align 4
  %and7 = and i32 %9, 32
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.then9, label %if.else15

if.then9:                                         ; preds = %if.else
  br label %do.body10

do.body10:                                        ; preds = %if.then9
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any11 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 0
  %11 = load i8*, i8** %sv_any11, align 8
  %12 = bitcast i8* %11 to %struct.xpvnv*
  %xnv_u12 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %12, i32 0, i32 5
  %xnv_nv13 = bitcast %union._xnvu* %xnv_u12 to double*
  store double 0x7FF8000000000000, double* %xnv_nv13, align 8
  br label %do.end14

do.end14:                                         ; preds = %do.body10
  store i8 1, i8* %nok, align 1
  br label %if.end23

if.else15:                                        ; preds = %if.else
  %13 = load i8, i8* %pok, align 1
  %tobool16 = trunc i8 %13 to i1
  br i1 %tobool16, label %if.then17, label %if.end

if.then17:                                        ; preds = %if.else15
  br label %do.body18

do.body18:                                        ; preds = %if.then17
  %14 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %15 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 0
  %call = call double @Perl_my_atof(i8* %add.ptr)
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any19 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any19, align 8
  %18 = bitcast i8* %17 to %struct.xpvnv*
  %xnv_u20 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %18, i32 0, i32 5
  %xnv_nv21 = bitcast %union._xnvu* %xnv_u20 to double*
  store double %call, double* %xnv_nv21, align 8
  br label %do.end22

do.end22:                                         ; preds = %do.body18
  br label %if.end

if.end:                                           ; preds = %do.end22, %if.else15
  br label %if.end23

if.end23:                                         ; preds = %if.end, %do.end14
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %do.end
  %19 = load i8, i8* %nok, align 1
  %tobool25 = trunc i8 %19 to i1
  br i1 %tobool25, label %if.then26, label %if.end40

if.then26:                                        ; preds = %if.end24
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %21, 1610547455
  store i32 %and28, i32* %sv_flags27, align 4
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %23, 33554432
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then26
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call32 = call i32 @Perl_sv_backoff(%struct.sv* %24)
  %tobool33 = icmp ne i32 %call32, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then26
  %25 = phi i1 [ false, %if.then26 ], [ %tobool33, %land.rhs ]
  %land.ext = zext i1 %25 to i32
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags34, align 4
  %or = or i32 %27, 8704
  store i32 %or, i32* %sv_flags34, align 4
  %28 = load i8, i8* %pok, align 1
  %tobool35 = trunc i8 %28 to i1
  br i1 %tobool35, label %if.then36, label %if.end39

if.then36:                                        ; preds = %land.end
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags37, align 4
  %or38 = or i32 %30, 17408
  store i32 %or38, i32* %sv_flags37, align 4
  br label %if.end39

if.end39:                                         ; preds = %if.then36, %land.end
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.end24
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_sv_2iuv_non_preserve(%struct.sv* %sv) #0 {
entry:
  %retval = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 0
  %1 = load i8*, i8** %sv_any, align 8
  %2 = bitcast i8* %1 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %2, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %3 = load double, double* %xnv_nv, align 8
  %cmp = fcmp olt double %3, 0xC3E0000000000000
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %or = or i32 %5, 4096
  store i32 %or, i32* %sv_flags, align 4
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags1, align 4
  %or2 = or i32 %7, 8704
  store i32 %or2, i32* %sv_flags1, align 4
  br label %do.body

do.body:                                          ; preds = %if.then
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any3, align 8
  %10 = bitcast i8* %9 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %10, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  store i64 -9223372036854775808, i64* %xivu_iv, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any4 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any4, align 8
  %13 = bitcast i8* %12 to %struct.xpvnv*
  %xnv_u5 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %13, i32 0, i32 5
  %xnv_nv6 = bitcast %union._xnvu* %xnv_u5 to double*
  %14 = load double, double* %xnv_nv6, align 8
  %cmp7 = fcmp ogt double %14, 0x43F0000000000000
  br i1 %cmp7, label %if.then8, label %if.end18

if.then8:                                         ; preds = %if.end
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags9, align 4
  %or10 = or i32 %16, 4096
  store i32 %or10, i32* %sv_flags9, align 4
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags11, align 4
  %or12 = or i32 %18, 8704
  store i32 %or12, i32* %sv_flags11, align 4
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags13, align 4
  %or14 = or i32 %20, -2147483648
  store i32 %or14, i32* %sv_flags13, align 4
  br label %do.body15

do.body15:                                        ; preds = %if.then8
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any16 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any16, align 8
  %23 = bitcast i8* %22 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %23, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  store i64 -1, i64* %xivu_uv, align 8
  br label %do.end17

do.end17:                                         ; preds = %do.body15
  store i32 5, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags19, align 4
  %or20 = or i32 %25, 4096
  store i32 %or20, i32* %sv_flags19, align 4
  %26 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags21, align 4
  %or22 = or i32 %27, 8704
  store i32 %or22, i32* %sv_flags21, align 4
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any23, align 8
  %30 = bitcast i8* %29 to %struct.xpvnv*
  %xnv_u24 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %30, i32 0, i32 5
  %xnv_nv25 = bitcast %union._xnvu* %xnv_u24 to double*
  %31 = load double, double* %xnv_nv25, align 8
  %cmp26 = fcmp ole double %31, 0x43E0000000000000
  br i1 %cmp26, label %if.then27, label %if.end53

if.then27:                                        ; preds = %if.end18
  br label %do.body28

do.body28:                                        ; preds = %if.then27
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any29 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any29, align 8
  %34 = bitcast i8* %33 to %struct.xpvnv*
  %xnv_u30 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %34, i32 0, i32 5
  %xnv_nv31 = bitcast %union._xnvu* %xnv_u30 to double*
  %35 = load double, double* %xnv_nv31, align 8
  %call = call i64 @Perl_cast_iv(double %35)
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any32 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 0
  %37 = load i8*, i8** %sv_any32, align 8
  %38 = bitcast i8* %37 to %struct.xpviv*
  %xiv_u33 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %38, i32 0, i32 4
  %xivu_iv34 = bitcast %union._xivu* %xiv_u33 to i64*
  store i64 %call, i64* %xivu_iv34, align 8
  br label %do.end35

do.end35:                                         ; preds = %do.body28
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any36 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any36, align 8
  %41 = bitcast i8* %40 to %struct.xpviv*
  %xiv_u37 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %41, i32 0, i32 4
  %xivu_iv38 = bitcast %union._xivu* %xiv_u37 to i64*
  %42 = load i64, i64* %xivu_iv38, align 8
  %conv = sitofp i64 %42 to double
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any39 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any39, align 8
  %45 = bitcast i8* %44 to %struct.xpvnv*
  %xnv_u40 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %45, i32 0, i32 5
  %xnv_nv41 = bitcast %union._xnvu* %xnv_u40 to double*
  %46 = load double, double* %xnv_nv41, align 8
  %cmp42 = fcmp oeq double %conv, %46
  br i1 %cmp42, label %if.then44, label %if.else

if.then44:                                        ; preds = %do.end35
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags45, align 4
  %or46 = or i32 %48, 4352
  store i32 %or46, i32* %sv_flags45, align 4
  br label %if.end47

if.else:                                          ; preds = %do.end35
  br label %if.end47

if.end47:                                         ; preds = %if.else, %if.then44
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any48 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any48, align 8
  %51 = bitcast i8* %50 to %struct.xpvnv*
  %xnv_u49 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %51, i32 0, i32 5
  %xnv_nv50 = bitcast %union._xnvu* %xnv_u49 to double*
  %52 = load double, double* %xnv_nv50, align 8
  %cmp51 = fcmp olt double %52, 0.000000e+00
  %53 = zext i1 %cmp51 to i64
  %cond = select i1 %cmp51, i32 2, i32 2
  store i32 %cond, i32* %retval, align 4
  br label %return

if.end53:                                         ; preds = %if.end18
  %54 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags54, align 4
  %or55 = or i32 %55, -2147483648
  store i32 %or55, i32* %sv_flags54, align 4
  br label %do.body56

do.body56:                                        ; preds = %if.end53
  %56 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any57 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 0
  %57 = load i8*, i8** %sv_any57, align 8
  %58 = bitcast i8* %57 to %struct.xpvnv*
  %xnv_u58 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %58, i32 0, i32 5
  %xnv_nv59 = bitcast %union._xnvu* %xnv_u58 to double*
  %59 = load double, double* %xnv_nv59, align 8
  %call60 = call i64 @Perl_cast_uv(double %59)
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any61 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any61, align 8
  %62 = bitcast i8* %61 to %struct.xpvuv*
  %xuv_u62 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %62, i32 0, i32 4
  %xivu_uv63 = bitcast %union._xivu* %xuv_u62 to i64*
  store i64 %call60, i64* %xivu_uv63, align 8
  br label %do.end64

do.end64:                                         ; preds = %do.body56
  %63 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any65 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 0
  %64 = load i8*, i8** %sv_any65, align 8
  %65 = bitcast i8* %64 to %struct.xpvuv*
  %xuv_u66 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %65, i32 0, i32 4
  %xivu_uv67 = bitcast %union._xivu* %xuv_u66 to i64*
  %66 = load i64, i64* %xivu_uv67, align 8
  %conv68 = uitofp i64 %66 to double
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any69 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 0
  %68 = load i8*, i8** %sv_any69, align 8
  %69 = bitcast i8* %68 to %struct.xpvnv*
  %xnv_u70 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %69, i32 0, i32 5
  %xnv_nv71 = bitcast %union._xnvu* %xnv_u70 to double*
  %70 = load double, double* %xnv_nv71, align 8
  %cmp72 = fcmp oeq double %conv68, %70
  br i1 %cmp72, label %if.then74, label %if.else84

if.then74:                                        ; preds = %do.end64
  %71 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any75 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any75, align 8
  %73 = bitcast i8* %72 to %struct.xpvuv*
  %xuv_u76 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %73, i32 0, i32 4
  %xivu_uv77 = bitcast %union._xivu* %xuv_u76 to i64*
  %74 = load i64, i64* %xivu_uv77, align 8
  %cmp78 = icmp eq i64 %74, -1
  br i1 %cmp78, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.then74
  store i32 5, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %if.then74
  %75 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags82 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags82, align 4
  %or83 = or i32 %76, 4352
  store i32 %or83, i32* %sv_flags82, align 4
  br label %if.end85

if.else84:                                        ; preds = %do.end64
  br label %if.end85

if.end85:                                         ; preds = %if.else84, %if.end81
  store i32 4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end85, %if.then80, %if.end47, %do.end17, %do.end
  %77 = load i32, i32* %retval, align 4
  ret i32 %77
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #7

declare dso_local void @Perl_gv_name_set(%struct.gv*, i8*, i32, i32) #1

declare dso_local void @Perl_mro_isa_changed_in(%struct.hv*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_sv_add_arena(i8* %ptr, i32 %size, i32 %flags) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %sva = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %svend = alloca %struct.sv*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = bitcast i8* %0 to %struct.sv*
  store %struct.sv* %1, %struct.sv** %sva, align 8
  %2 = load %struct.sv*, %struct.sv** @PL_sv_arenaroot, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %4 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  store i8* %3, i8** %sv_any, align 8
  %5 = load i32, i32* %size.addr, align 4
  %conv = zext i32 %5 to i64
  %div = udiv i64 %conv, 24
  %conv1 = trunc i64 %div to i32
  %6 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 1
  store i32 %conv1, i32* %sv_refcnt, align 8
  %7 = load i32, i32* %flags.addr, align 4
  %8 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  store i32 %7, i32* %sv_flags, align 4
  %9 = load %struct.sv*, %struct.sv** %sva, align 8
  store %struct.sv* %9, %struct.sv** @PL_sv_arenaroot, align 8
  %10 = load %struct.sv*, %struct.sv** %sva, align 8
  %add.ptr = getelementptr inbounds %struct.sv, %struct.sv* %10, i64 1
  store %struct.sv* %add.ptr, %struct.sv** @PL_sv_root, align 8
  %11 = load %struct.sv*, %struct.sv** %sva, align 8
  %12 = load %struct.sv*, %struct.sv** %sva, align 8
  %sv_refcnt2 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 1
  %13 = load i32, i32* %sv_refcnt2, align 8
  %sub = sub i32 %13, 1
  %idxprom = zext i32 %sub to i64
  %arrayidx = getelementptr inbounds %struct.sv, %struct.sv* %11, i64 %idxprom
  store %struct.sv* %arrayidx, %struct.sv** %svend, align 8
  %14 = load %struct.sv*, %struct.sv** %sva, align 8
  %add.ptr3 = getelementptr inbounds %struct.sv, %struct.sv* %14, i64 1
  store %struct.sv* %add.ptr3, %struct.sv** %sv, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %16 = load %struct.sv*, %struct.sv** %svend, align 8
  %cmp = icmp ult %struct.sv* %15, %16
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %add.ptr5 = getelementptr inbounds %struct.sv, %struct.sv* %17, i64 1
  %18 = bitcast %struct.sv* %add.ptr5 to i8*
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  store i8* %18, i8** %sv_any6, align 8
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  store i32 255, i32* %sv_flags7, align 4
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 1
  store %struct.sv* %incdec.ptr, %struct.sv** %sv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any8 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  store i8* null, i8** %sv_any8, align 8
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  store i32 255, i32* %sv_flags9, align 4
  ret void
}

declare dso_local %struct.mro_meta* @Perl_mro_meta_init(%struct.hv*) #1

declare dso_local %struct.gv* @Perl_gv_fetchmeth_pvn_autoload(%struct.hv*, i8*, i64, i32, i32) #1

declare dso_local i32 @Perl_call_sv(%struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_sv_pos_u2b_midway(i8* %start, i8* %send, i64 %uoffset, i64 %uend) #0 {
entry:
  %retval = alloca i64, align 8
  %start.addr = alloca i8*, align 8
  %send.addr = alloca i8*, align 8
  %uoffset.addr = alloca i64, align 8
  %uend.addr = alloca i64, align 8
  %backw = alloca i64, align 8
  %s = alloca i8*, align 8
  store i8* %start, i8** %start.addr, align 8
  store i8* %send, i8** %send.addr, align 8
  store i64 %uoffset, i64* %uoffset.addr, align 8
  store i64 %uend, i64* %uend.addr, align 8
  %0 = load i64, i64* %uend.addr, align 8
  %1 = load i64, i64* %uoffset.addr, align 8
  %sub = sub i64 %0, %1
  store i64 %sub, i64* %backw, align 8
  %2 = load i64, i64* %uoffset.addr, align 8
  %3 = load i64, i64* %backw, align 8
  %mul = mul i64 2, %3
  %cmp = icmp ult i64 %2, %mul
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %start.addr, align 8
  store i8* %4, i8** %s, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %5 = load i8*, i8** %s, align 8
  %6 = load i8*, i8** %send.addr, align 8
  %cmp1 = icmp ult i8* %5, %6
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %7 = load i64, i64* %uoffset.addr, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %uoffset.addr, align 8
  %tobool = icmp ne i64 %7, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load i8*, i8** %s, align 8
  %10 = load i8, i8* %9, align 1
  %idxprom = zext i8 %10 to i64
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %11 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %11 to i32
  %12 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %conv to i64
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %13 = load i8*, i8** %s, align 8
  %14 = load i8*, i8** %send.addr, align 8
  %cmp2 = icmp ugt i8* %13, %14
  br i1 %cmp2, label %if.then4, label %if.end

if.then4:                                         ; preds = %while.end
  %15 = load i8*, i8** %send.addr, align 8
  store i8* %15, i8** %s, align 8
  br label %if.end

if.end:                                           ; preds = %if.then4, %while.end
  %16 = load i8*, i8** %s, align 8
  %17 = load i8*, i8** %start.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %16 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %retval, align 8
  br label %return

if.end5:                                          ; preds = %entry
  br label %while.cond6

while.cond6:                                      ; preds = %while.end16, %if.end5
  %18 = load i64, i64* %backw, align 8
  %dec7 = add i64 %18, -1
  store i64 %dec7, i64* %backw, align 8
  %tobool8 = icmp ne i64 %18, 0
  br i1 %tobool8, label %while.body9, label %while.end17

while.body9:                                      ; preds = %while.cond6
  %19 = load i8*, i8** %send.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %19, i32 -1
  store i8* %incdec.ptr, i8** %send.addr, align 8
  br label %while.cond10

while.cond10:                                     ; preds = %while.body14, %while.body9
  %20 = load i8*, i8** %send.addr, align 8
  %21 = load i8, i8* %20, align 1
  %conv11 = zext i8 %21 to i32
  %and = and i32 %conv11, 192
  %cmp12 = icmp eq i32 %and, 128
  br i1 %cmp12, label %while.body14, label %while.end16

while.body14:                                     ; preds = %while.cond10
  %22 = load i8*, i8** %send.addr, align 8
  %incdec.ptr15 = getelementptr inbounds i8, i8* %22, i32 -1
  store i8* %incdec.ptr15, i8** %send.addr, align 8
  br label %while.cond10

while.end16:                                      ; preds = %while.cond10
  br label %while.cond6

while.end17:                                      ; preds = %while.cond6
  %23 = load i8*, i8** %send.addr, align 8
  %24 = load i8*, i8** %start.addr, align 8
  %sub.ptr.lhs.cast18 = ptrtoint i8* %23 to i64
  %sub.ptr.rhs.cast19 = ptrtoint i8* %24 to i64
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast18, %sub.ptr.rhs.cast19
  store i64 %sub.ptr.sub20, i64* %retval, align 8
  br label %return

return:                                           ; preds = %while.end17, %if.end
  %25 = load i64, i64* %retval, align 8
  ret i64 %25
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_sv_pos_u2b_forwards(i8* %start, i8* %send, i64* %uoffset_p, i8* %at_end) #0 {
entry:
  %start.addr = alloca i8*, align 8
  %send.addr = alloca i8*, align 8
  %uoffset_p.addr = alloca i64*, align 8
  %at_end.addr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %uoffset = alloca i64, align 8
  store i8* %start, i8** %start.addr, align 8
  store i8* %send, i8** %send.addr, align 8
  store i64* %uoffset_p, i64** %uoffset_p.addr, align 8
  store i8* %at_end, i8** %at_end.addr, align 8
  %0 = load i8*, i8** %start.addr, align 8
  store i8* %0, i8** %s, align 8
  %1 = load i64*, i64** %uoffset_p.addr, align 8
  %2 = load i64, i64* %1, align 8
  store i64 %2, i64* %uoffset, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %s, align 8
  %4 = load i8*, i8** %send.addr, align 8
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load i64, i64* %uoffset, align 8
  %tobool = icmp ne i64 %5, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %7 = load i64, i64* %uoffset, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %uoffset, align 8
  %8 = load i8*, i8** %s, align 8
  %9 = load i8, i8* %8, align 1
  %idxprom = zext i8 %9 to i64
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %10 to i32
  %11 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %conv to i64
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext
  store i8* %add.ptr, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %12 = load i8*, i8** %s, align 8
  %13 = load i8*, i8** %send.addr, align 8
  %cmp1 = icmp eq i8* %12, %13
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %14 = load i8*, i8** %at_end.addr, align 8
  store i8 1, i8* %14, align 1
  br label %if.end6

if.else:                                          ; preds = %while.end
  %15 = load i8*, i8** %s, align 8
  %16 = load i8*, i8** %send.addr, align 8
  %cmp3 = icmp ugt i8* %15, %16
  br i1 %cmp3, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.else
  %17 = load i8*, i8** %at_end.addr, align 8
  store i8 1, i8* %17, align 1
  %18 = load i8*, i8** %send.addr, align 8
  store i8* %18, i8** %s, align 8
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  %19 = load i64, i64* %uoffset, align 8
  %20 = load i64*, i64** %uoffset_p.addr, align 8
  %21 = load i64, i64* %20, align 8
  %sub = sub i64 %21, %19
  store i64 %sub, i64* %20, align 8
  %22 = load i8*, i8** %s, align 8
  %23 = load i8*, i8** %start.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %22 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i64 %sub.ptr.sub
}

declare dso_local void @Perl_save_I8(i8*) #1

declare dso_local i8* @Perl_utf8_hop(i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_find_hash_subscript(%struct.hv* %hv, %struct.sv* %val) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %hv.addr = alloca %struct.hv*, align 8
  %val.addr = alloca %struct.sv*, align 8
  %array = alloca %struct.he**, align 8
  %i = alloca i32, align 4
  %entry10 = alloca %struct.he*, align 8
  store %struct.hv* %hv, %struct.hv** %hv.addr, align 8
  store %struct.sv* %val, %struct.sv** %val.addr, align 8
  %0 = load %struct.hv*, %struct.hv** %hv.addr, align 8
  %tobool = icmp ne %struct.hv* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.hv*, %struct.hv** %hv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 14680064
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.hv*, %struct.hv** %hv.addr, align 8
  %sv_u = getelementptr inbounds %struct.hv, %struct.hv* %3, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u to %struct.he***
  %4 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %tobool3 = icmp ne %struct.he** %4, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %5 = load %struct.hv*, %struct.hv** %hv.addr, align 8
  %sv_any = getelementptr inbounds %struct.hv, %struct.hv* %5, i32 0, i32 0
  %6 = load %struct.xpvhv*, %struct.xpvhv** %sv_any, align 8
  %xhv_keys = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %6, i32 0, i32 2
  %7 = load i64, i64* %xhv_keys, align 8
  %cmp = icmp ugt i64 %7, 1000
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %8 = load %struct.hv*, %struct.hv** %hv.addr, align 8
  %sv_u5 = getelementptr inbounds %struct.hv, %struct.hv* %8, i32 0, i32 3
  %svu_hash6 = bitcast %union.anon.4* %sv_u5 to %struct.he***
  %9 = load %struct.he**, %struct.he*** %svu_hash6, align 8
  store %struct.he** %9, %struct.he*** %array, align 8
  %10 = load %struct.hv*, %struct.hv** %hv.addr, align 8
  %sv_any7 = getelementptr inbounds %struct.hv, %struct.hv* %10, i32 0, i32 0
  %11 = load %struct.xpvhv*, %struct.xpvhv** %sv_any7, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %11, i32 0, i32 3
  %12 = load i64, i64* %xhv_max, align 8
  %conv = trunc i64 %12 to i32
  store i32 %conv, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc43, %if.end
  %13 = load i32, i32* %i, align 4
  %cmp8 = icmp sge i32 %13, 0
  br i1 %cmp8, label %for.body, label %for.end44

for.body:                                         ; preds = %for.cond
  %14 = load %struct.he**, %struct.he*** %array, align 8
  %15 = load i32, i32* %i, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %14, i64 %idxprom
  %16 = load %struct.he*, %struct.he** %arrayidx, align 8
  store %struct.he* %16, %struct.he** %entry10, align 8
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc, %for.body
  %17 = load %struct.he*, %struct.he** %entry10, align 8
  %tobool12 = icmp ne %struct.he* %17, null
  br i1 %tobool12, label %for.body13, label %for.end

for.body13:                                       ; preds = %for.cond11
  %18 = load %struct.he*, %struct.he** %entry10, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %18, i32 0, i32 2
  %hent_val = bitcast %union.anon.0* %he_valu to %struct.sv**
  %19 = load %struct.sv*, %struct.sv** %hent_val, align 8
  %20 = load %struct.sv*, %struct.sv** %val.addr, align 8
  %cmp14 = icmp ne %struct.sv* %19, %20
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %for.body13
  br label %for.inc

if.end17:                                         ; preds = %for.body13
  %21 = load %struct.he*, %struct.he** %entry10, align 8
  %he_valu18 = getelementptr inbounds %struct.he, %struct.he* %21, i32 0, i32 2
  %hent_val19 = bitcast %union.anon.0* %he_valu18 to %struct.sv**
  %22 = load %struct.sv*, %struct.sv** %hent_val19, align 8
  %cmp20 = icmp eq %struct.sv* %22, @PL_sv_undef
  br i1 %cmp20, label %if.then27, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %if.end17
  %23 = load %struct.he*, %struct.he** %entry10, align 8
  %he_valu23 = getelementptr inbounds %struct.he, %struct.he* %23, i32 0, i32 2
  %hent_val24 = bitcast %union.anon.0* %he_valu23 to %struct.sv**
  %24 = load %struct.sv*, %struct.sv** %hent_val24, align 8
  %cmp25 = icmp eq %struct.sv* %24, @PL_sv_placeholder
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %lor.lhs.false22, %if.end17
  br label %for.inc

if.end28:                                         ; preds = %lor.lhs.false22
  %25 = load %struct.he*, %struct.he** %entry10, align 8
  %hent_hek = getelementptr inbounds %struct.he, %struct.he* %25, i32 0, i32 1
  %26 = load %struct.hek*, %struct.hek** %hent_hek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %26, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %tobool29 = icmp ne i8* %arraydecay, null
  br i1 %tobool29, label %if.end31, label %if.then30

if.then30:                                        ; preds = %if.end28
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end31:                                         ; preds = %if.end28
  %27 = load %struct.he*, %struct.he** %entry10, align 8
  %hent_hek32 = getelementptr inbounds %struct.he, %struct.he* %27, i32 0, i32 1
  %28 = load %struct.hek*, %struct.hek** %hent_hek32, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %28, i32 0, i32 1
  %29 = load i32, i32* %hek_len, align 4
  %cmp33 = icmp eq i32 %29, -2
  br i1 %cmp33, label %if.then35, label %if.end39

if.then35:                                        ; preds = %if.end31
  %30 = load %struct.he*, %struct.he** %entry10, align 8
  %hent_hek36 = getelementptr inbounds %struct.he, %struct.he* %30, i32 0, i32 1
  %31 = load %struct.hek*, %struct.hek** %hent_hek36, align 8
  %hek_key37 = getelementptr inbounds %struct.hek, %struct.hek* %31, i32 0, i32 2
  %arraydecay38 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key37, i64 0, i64 0
  %32 = bitcast i8* %arraydecay38 to %struct.sv**
  %33 = load %struct.sv*, %struct.sv** %32, align 4
  %call = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %33, i32 1538)
  store %struct.sv* %call, %struct.sv** %retval, align 8
  br label %return

if.end39:                                         ; preds = %if.end31
  %34 = load %struct.he*, %struct.he** %entry10, align 8
  %hent_hek40 = getelementptr inbounds %struct.he, %struct.he* %34, i32 0, i32 1
  %35 = load %struct.hek*, %struct.hek** %hent_hek40, align 8
  %call41 = call %struct.sv* @Perl_newSVhek(%struct.hek* %35)
  %call42 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call41)
  store %struct.sv* %call42, %struct.sv** %retval, align 8
  br label %return

for.inc:                                          ; preds = %if.then27, %if.then16
  %36 = load %struct.he*, %struct.he** %entry10, align 8
  %hent_next = getelementptr inbounds %struct.he, %struct.he* %36, i32 0, i32 0
  %37 = load %struct.he*, %struct.he** %hent_next, align 8
  store %struct.he* %37, %struct.he** %entry10, align 8
  br label %for.cond11

for.end:                                          ; preds = %for.cond11
  br label %for.inc43

for.inc43:                                        ; preds = %for.end
  %38 = load i32, i32* %i, align 4
  %dec = add nsw i32 %38, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end44:                                        ; preds = %for.cond
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %for.end44, %if.end39, %if.then35, %if.then30, %if.then
  %39 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %39
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_find_array_subscript(%struct.av* %av, %struct.sv* %val) #0 {
entry:
  %retval = alloca i32, align 4
  %av.addr = alloca %struct.av*, align 8
  %val.addr = alloca %struct.sv*, align 8
  %svp = alloca %struct.sv**, align 8
  %i = alloca i32, align 4
  store %struct.av* %av, %struct.av** %av.addr, align 8
  store %struct.sv* %val, %struct.sv** %val.addr, align 8
  %0 = load %struct.av*, %struct.av** %av.addr, align 8
  %tobool = icmp ne %struct.av* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 14680064
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %3, i32 0, i32 3
  %svu_array = bitcast %union.anon.3* %sv_u to %struct.sv***
  %4 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %tobool3 = icmp ne %struct.sv** %4, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %5 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %5, i32 0, i32 0
  %6 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %6, i32 0, i32 2
  %7 = load i64, i64* %xav_fill, align 8
  %cmp = icmp sgt i64 %7, 1000
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %8 = load %struct.sv*, %struct.sv** %val.addr, align 8
  %cmp5 = icmp ne %struct.sv* %8, @PL_sv_undef
  br i1 %cmp5, label %if.then6, label %if.end17

if.then6:                                         ; preds = %if.end
  %9 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_u7 = getelementptr inbounds %struct.av, %struct.av* %9, i32 0, i32 3
  %svu_array8 = bitcast %union.anon.3* %sv_u7 to %struct.sv***
  %10 = load %struct.sv**, %struct.sv*** %svu_array8, align 8
  store %struct.sv** %10, %struct.sv*** %svp, align 8
  %11 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_any9 = getelementptr inbounds %struct.av, %struct.av* %11, i32 0, i32 0
  %12 = load %struct.xpvav*, %struct.xpvav** %sv_any9, align 8
  %xav_fill10 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %12, i32 0, i32 2
  %13 = load i64, i64* %xav_fill10, align 8
  %conv = trunc i64 %13 to i32
  store i32 %conv, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then6
  %14 = load i32, i32* %i, align 4
  %cmp11 = icmp sge i32 %14, 0
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load %struct.sv**, %struct.sv*** %svp, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom = sext i32 %16 to i64
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %15, i64 %idxprom
  %17 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %18 = load %struct.sv*, %struct.sv** %val.addr, align 8
  %cmp13 = icmp eq %struct.sv* %17, %18
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  store i32 %19, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end16
  %20 = load i32, i32* %i, align 4
  %dec = add nsw i32 %20, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end17

if.end17:                                         ; preds = %for.end, %if.end
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end17, %if.then15, %if.then
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

declare dso_local %struct.sv** @Perl_av_fetch(%struct.av*, i64, i32) #1

declare dso_local %struct.gv* @Perl_gv_add_by_type(%struct.gv*, i32) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone speculatable willreturn }
attributes #8 = { nounwind readonly }
attributes #9 = { nounwind readnone }
attributes #10 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
