; ModuleID = 'tree-sra.c'
source_filename = "tree-sra.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.anon = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.processor_costs = type { i32, i32, i32, i32, [5 x i32], i32, [5 x i32], i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, [3 x i32], [3 x i32], i32, [2 x i32], [2 x i32], i32, [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x %struct.stringop_algs], [2 x %struct.stringop_algs], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.stringop_algs = type { i32, [4 x %struct.stringop_strategy] }
%struct.stringop_strategy = type { i32, i32 }
%struct.access = type { i64, i64, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.gimple_statement_d*, %struct.access*, %struct.access*, %struct.access*, %struct.access*, %struct.assign_link*, %struct.assign_link*, %struct.access*, %union.tree_node*, i16 }
%struct.assign_link = type { %struct.access*, %struct.access*, %struct.assign_link* }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.VEC_ipa_parm_adjustment_t_heap = type { %struct.VEC_ipa_parm_adjustment_t_base }
%struct.VEC_ipa_parm_adjustment_t_base = type { i32, i32, [1 x %struct.ipa_parm_adjustment] }
%struct.ipa_parm_adjustment = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, i32, i8 }
%struct.referenced_var_iterator = type { %struct.htab_iterator }
%struct.htab_iterator = type { %struct.htab*, i8**, i8** }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.VEC_access_p_heap = type { %struct.VEC_access_p_base }
%struct.VEC_access_p_base = type { i32, i32, [1 x %struct.access*] }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, i8*, i8, i8, i8, i8, [1 x %union.tree_node*] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.var_ann_d = type { i8, i32, %union.tree_node* }
%struct.tree_var_decl = type { %struct.tree_decl_with_vis, %struct.var_ann_d* }
%struct.tree_parm_decl = type { %struct.tree_decl_with_rtl, %struct.rtx_def*, %struct.var_ann_d* }
%struct.tree_result_decl = type { %struct.tree_decl_with_rtl, %struct.var_ann_d* }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.tree_constructor = type { %struct.tree_common, %struct.VEC_constructor_elt_gc* }
%struct.VEC_constructor_elt_gc = type { %struct.VEC_constructor_elt_base }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.constructor_elt_d = type { %union.tree_node*, %union.tree_node* }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.ao_ref_s = type { %union.tree_node*, %union.tree_node*, i64, i64, i64, i32, i32 }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.VEC_basic_block_heap = type { %struct.VEC_basic_block_base }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }

@tree_code_type = external dso_local constant [0 x i32], align 4
@.str = private unnamed_addr constant [5 x i8] c"esra\00", align 1
@pass_sra_early = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8 ()* @gate_intra_sra, i32 ()* @early_intra_sra, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 63, i32 40, i32 0, i32 0, i32 0, i32 2055 } }, align 8, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"sra\00", align 1
@pass_sra = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8 ()* @gate_intra_sra, i32 ()* @late_intra_sra, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 63, i32 40, i32 0, i32 0, i32 2097152, i32 2055 } }, align 8, !dbg !3091
@.str.2 = private unnamed_addr constant [9 x i8] c"eipa_sra\00", align 1
@pass_early_ipa_sra = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8 ()* @ipa_early_sra_gate, i32 ()* @ipa_early_sra, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 20, i32 0, i32 0, i32 0, i32 0, i32 129 } }, align 8, !dbg !3119
@.str.3 = private unnamed_addr constant [11 x i8] c"tree-sra.c\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@flag_tree_sra = external dso_local global i32, align 4
@sra_mode = internal global i32 0, align 4, !dbg !3121
@cfun = external dso_local global %struct.function*, align 8
@.str.5 = private unnamed_addr constant [28 x i8] c"Scalar replacements created\00", align 1
@sra_stats = internal global %struct.anon zeroinitializer, align 4, !dbg !3172
@.str.6 = private unnamed_addr constant [21 x i8] c"Modified expressions\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Subtree copy stmts\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"Subreplacement stmts\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"Deleted stmts\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"Separate LHS and RHS handling\00", align 1
@candidate_bitmap = internal global %struct.bitmap_head_def* null, align 8, !dbg !3123
@should_scalarize_away_bitmap = internal global %struct.bitmap_head_def* null, align 8, !dbg !3125
@cannot_scalarize_away_bitmap = internal global %struct.bitmap_head_def* null, align 8, !dbg !3127
@name_obstack = internal global %struct.obstack zeroinitializer, align 8, !dbg !3129
@.str.11 = private unnamed_addr constant [13 x i8] c"SRA accesses\00", align 1
@access_pool = internal global %struct.alloc_pool_def* null, align 8, !dbg !3131
@.str.12 = private unnamed_addr constant [10 x i8] c"SRA links\00", align 1
@link_pool = internal global %struct.alloc_pool_def* null, align 8, !dbg !3154
@base_access_vec = internal global %struct.pointer_map_t* null, align 8, !dbg !3156
@encountered_apply_args = internal global i8 0, align 1, !dbg !3158
@encountered_recursive_call = internal global i8 0, align 1, !dbg !3160
@encountered_unchangable_recursive_call = internal global i8 0, align 1, !dbg !3162
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.13 = private unnamed_addr constant [17 x i8] c"Candidate (%d): \00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@final_bbs = internal global %struct.bitmap_head_def* null, align 8, !dbg !3164
@current_function_decl = external dso_local global %union.tree_node*, align 8
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.15 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@func_param_count = internal global i32 0, align 4, !dbg !3166
@.str.16 = private unnamed_addr constant [24 x i8] c"LHS of a throwing stmt.\00", align 1
@.str.17 = private unnamed_addr constant [24 x i8] c"RHS of a throwing stmt.\00", align 1
@.str.18 = private unnamed_addr constant [17 x i8] c"! Disqualifying \00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c" - %s\0A\00", align 1
@.str.20 = private unnamed_addr constant [37 x i8] c"Non-scalarizable GIMPLE_ASM operand.\00", align 1
@.str.21 = private unnamed_addr constant [43 x i8] c"V_C_E under a different handled component.\00", align 1
@.str.22 = private unnamed_addr constant [37 x i8] c"Encountered a variable sized access.\00", align 1
@.str.23 = private unnamed_addr constant [44 x i8] c"Encountered an acces not aligned to a byte.\00", align 1
@.str.24 = private unnamed_addr constant [37 x i8] c"Encountered an unconstrained access.\00", align 1
@bb_dereferences = internal global i64* null, align 8, !dbg !3168
@ix86_cost = external dso_local global %struct.processor_costs*, align 8
@.str.25 = private unnamed_addr constant [35 x i8] c"Will attempt to totally scalarize \00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c" (UID: %u): \0A\00", align 1
@.str.27 = private unnamed_addr constant [41 x i8] c"No or inhibitingly overlapping accesses.\00", align 1
@.str.28 = private unnamed_addr constant [19 x i8] c"\0AAccess trees for \00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"No scalar replacements to be created.\00", align 1
@.str.30 = private unnamed_addr constant [22 x i8] c"Scalarized aggregates\00", align 1
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@work_queue_head = internal global %struct.access* null, align 8, !dbg !3170
@.str.31 = private unnamed_addr constant [9 x i8] c"Marking \00", align 1
@.str.32 = private unnamed_addr constant [24 x i8] c" offset: %u, size: %u: \00", align 1
@.str.33 = private unnamed_addr constant [18 x i8] c" to be replaced.\0A\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"* \00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"access { \00", align 1
@.str.36 = private unnamed_addr constant [13 x i8] c"base = (%d)'\00", align 1
@.str.37 = private unnamed_addr constant [16 x i8] c"', offset = %ld\00", align 1
@.str.38 = private unnamed_addr constant [13 x i8] c", size = %ld\00", align 1
@.str.39 = private unnamed_addr constant [10 x i8] c", expr = \00", align 1
@.str.40 = private unnamed_addr constant [10 x i8] c", type = \00", align 1
@.str.41 = private unnamed_addr constant [264 x i8] c", grp_write = %d, total_scalarization = %d, grp_read = %d, grp_hint = %d, grp_covered = %d, grp_unscalarizable_region = %d, grp_unscalarized_data = %d, grp_partial_lhs = %d, grp_to_be_replaced = %d, grp_maybe_modified = %d, grp_not_necessarilly_dereferenced = %d\0A\00", align 1
@.str.42 = private unnamed_addr constant [62 x i8] c", write = %d, total_scalarization = %d, grp_partial_lhs = %d\0A\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"SR\00", align 1
@.str.44 = private unnamed_addr constant [27 x i8] c"Created a replacement for \00", align 1
@.str.45 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.46 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.47 = private unnamed_addr constant [4 x i8] c"D%u\00", align 1
@.str.48 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@flag_ipa_sra = external dso_local global i32, align 4
@.str.49 = private unnamed_addr constant [37 x i8] c"Function has no IPA-SRA candidates.\0A\00", align 1
@.str.50 = private unnamed_addr constant [58 x i8] c"There are callers with insufficient number of arguments.\0A\00", align 1
@.str.51 = private unnamed_addr constant [41 x i8] c"Function calls  __builtin_apply_args().\0A\00", align 1
@.str.52 = private unnamed_addr constant [62 x i8] c"Function calls itself with insufficient number of arguments.\0A\00", align 1
@.str.53 = private unnamed_addr constant [26 x i8] c"Unused parameters deleted\00", align 1
@.str.54 = private unnamed_addr constant [40 x i8] c"Scalar parameters converted to by-value\00", align 1
@.str.55 = private unnamed_addr constant [31 x i8] c"Aggregate parameters broken up\00", align 1
@.str.56 = private unnamed_addr constant [39 x i8] c"Aggregate parameter components created\00", align 1
@.str.57 = private unnamed_addr constant [46 x i8] c"Function not local to this compilation unit.\0A\00", align 1
@.str.58 = private unnamed_addr constant [31 x i8] c"Function is a virtual method.\0A\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.59 = private unnamed_addr constant [42 x i8] c"Function too big to be made truly local.\0A\00", align 1
@.str.60 = private unnamed_addr constant [51 x i8] c"Function has no callers in this compilation unit.\0A\00", align 1
@.str.61 = private unnamed_addr constant [24 x i8] c"Function uses stdarg. \0A\00", align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@.str.62 = private unnamed_addr constant [34 x i8] c"NOT proceeding to change params.\0A\00", align 1
@no_accesses_representant = internal global %struct.access zeroinitializer, align 8, !dbg !3186
@.str.63 = private unnamed_addr constant [39 x i8] c"Dereference table before propagation:\0A\00", align 1
@.str.64 = private unnamed_addr constant [38 x i8] c"Dereference table after propagation:\0A\00", align 1
@.str.65 = private unnamed_addr constant [11 x i8] c"%4i  %i   \00", align 1
@.str.66 = private unnamed_addr constant [6 x i8] c" %4ld\00", align 1
@.str.67 = private unnamed_addr constant [34 x i8] c"Evaluating PARAM group sizes for \00", align 1
@.str.68 = private unnamed_addr constant [42 x i8] c"    ....will be split into %i components\0A\00", align 1
@.str.69 = private unnamed_addr constant [5 x i8] c"ISRA\00", align 1
@.str.70 = private unnamed_addr constant [23 x i8] c"About to replace expr \00", align 1
@.str.71 = private unnamed_addr constant [7 x i8] c" with \00", align 1
@.str.72 = private unnamed_addr constant [42 x i8] c"replacing an SSA name of a removed param \00", align 1
@.str.73 = private unnamed_addr constant [4 x i8] c"ISR\00", align 1
@.str.74 = private unnamed_addr constant [36 x i8] c"Adjusting call (%i -> %i) %s -> %s\0A\00", align 1
@.str.75 = private unnamed_addr constant [25 x i8] c"Adjusting recursive call\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @build_ref_for_offset(%union.tree_node** %expr, %union.tree_node* %type, i64 %offset, %union.tree_node* %exp_type, i8 zeroext %allow_ptr) #0 !dbg !3192 {
entry:
  %expr.addr = alloca %union.tree_node**, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca i64, align 8
  %exp_type.addr = alloca %union.tree_node*, align 8
  %allow_ptr.addr = alloca i8, align 1
  %loc = alloca i32, align 4
  store %union.tree_node** %expr, %union.tree_node*** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr.addr, metadata !3196, metadata !DIExpression()), !dbg !3197
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3198, metadata !DIExpression()), !dbg !3199
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !3200, metadata !DIExpression()), !dbg !3201
  store %union.tree_node* %exp_type, %union.tree_node** %exp_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp_type.addr, metadata !3202, metadata !DIExpression()), !dbg !3203
  store i8 %allow_ptr, i8* %allow_ptr.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %allow_ptr.addr, metadata !3204, metadata !DIExpression()), !dbg !3205
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !3206, metadata !DIExpression()), !dbg !3207
  %0 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !3208
  %tobool = icmp ne %union.tree_node** %0, null, !dbg !3208
  br i1 %tobool, label %cond.true, label %cond.false9, !dbg !3208

cond.true:                                        ; preds = %entry
  %1 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !3209
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !3209
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3209
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3209
  %bf.load = load i64, i64* %3, align 8, !dbg !3209
  %bf.clear = and i64 %bf.load, 65535, !dbg !3209
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3209
  %idxprom = sext i32 %bf.cast to i64, !dbg !3209
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3209
  %4 = load i32, i32* %arrayidx, align 4, !dbg !3209
  %cmp = icmp uge i32 %4, 4, !dbg !3209
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !3209

land.lhs.true:                                    ; preds = %cond.true
  %5 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !3209
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !3209
  %base1 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3209
  %7 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3209
  %bf.load2 = load i64, i64* %7, align 8, !dbg !3209
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !3209
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !3209
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !3209
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !3209
  %8 = load i32, i32* %arrayidx6, align 4, !dbg !3209
  %cmp7 = icmp ule i32 %8, 10, !dbg !3209
  br i1 %cmp7, label %cond.true8, label %cond.false, !dbg !3209

cond.true8:                                       ; preds = %land.lhs.true
  %9 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !3209
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !3209
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !3209
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !3209
  %11 = load i32, i32* %locus, align 8, !dbg !3209
  br label %cond.end, !dbg !3209

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  br label %cond.end, !dbg !3209

cond.end:                                         ; preds = %cond.false, %cond.true8
  %cond = phi i32 [ %11, %cond.true8 ], [ 0, %cond.false ], !dbg !3209
  br label %cond.end10, !dbg !3208

cond.false9:                                      ; preds = %entry
  br label %cond.end10, !dbg !3208

cond.end10:                                       ; preds = %cond.false9, %cond.end
  %cond11 = phi i32 [ %cond, %cond.end ], [ 0, %cond.false9 ], !dbg !3208
  store i32 %cond11, i32* %loc, align 4, !dbg !3207
  %12 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !3210
  %tobool12 = icmp ne %union.tree_node** %12, null, !dbg !3210
  br i1 %tobool12, label %if.then, label %if.end, !dbg !3212

if.then:                                          ; preds = %cond.end10
  %13 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !3213
  %14 = load %union.tree_node*, %union.tree_node** %13, align 8, !dbg !3214
  %call = call %union.tree_node* @unshare_expr(%union.tree_node* %14), !dbg !3215
  %15 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !3216
  store %union.tree_node* %call, %union.tree_node** %15, align 8, !dbg !3217
  br label %if.end, !dbg !3218

if.end:                                           ; preds = %if.then, %cond.end10
  %16 = load i8, i8* %allow_ptr.addr, align 1, !dbg !3219
  %conv = zext i8 %16 to i32, !dbg !3219
  %tobool13 = icmp ne i32 %conv, 0, !dbg !3219
  br i1 %tobool13, label %land.lhs.true14, label %if.end33, !dbg !3221

land.lhs.true14:                                  ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3222
  %base15 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !3222
  %18 = bitcast %struct.tree_base* %base15 to i64*, !dbg !3222
  %bf.load16 = load i64, i64* %18, align 8, !dbg !3222
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !3222
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !3222
  %cmp19 = icmp eq i32 %bf.cast18, 10, !dbg !3222
  br i1 %cmp19, label %if.then27, label %lor.lhs.false, !dbg !3222

lor.lhs.false:                                    ; preds = %land.lhs.true14
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3222
  %base21 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !3222
  %20 = bitcast %struct.tree_base* %base21 to i64*, !dbg !3222
  %bf.load22 = load i64, i64* %20, align 8, !dbg !3222
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !3222
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !3222
  %cmp25 = icmp eq i32 %bf.cast24, 12, !dbg !3222
  br i1 %cmp25, label %if.then27, label %if.end33, !dbg !3223

if.then27:                                        ; preds = %lor.lhs.false, %land.lhs.true14
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3224
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !3224
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3224
  %22 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !3224
  store %union.tree_node* %22, %union.tree_node** %type.addr, align 8, !dbg !3226
  %23 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !3227
  %tobool29 = icmp ne %union.tree_node** %23, null, !dbg !3227
  br i1 %tobool29, label %if.then30, label %if.end32, !dbg !3229

if.then30:                                        ; preds = %if.then27
  %24 = load i32, i32* %loc, align 4, !dbg !3230
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3230
  %26 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !3230
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !3230
  %call31 = call %union.tree_node* @fold_build1_stat_loc(i32 %24, i32 47, %union.tree_node* %25, %union.tree_node* %27), !dbg !3230
  %28 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !3231
  store %union.tree_node* %call31, %union.tree_node** %28, align 8, !dbg !3232
  br label %if.end32, !dbg !3233

if.end32:                                         ; preds = %if.then30, %if.then27
  br label %if.end33, !dbg !3234

if.end33:                                         ; preds = %if.end32, %lor.lhs.false, %if.end
  %29 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !3235
  %30 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3236
  %31 = load i64, i64* %offset.addr, align 8, !dbg !3237
  %32 = load %union.tree_node*, %union.tree_node** %exp_type.addr, align 8, !dbg !3238
  %call34 = call zeroext i8 @build_ref_for_offset_1(%union.tree_node** %29, %union.tree_node* %30, i64 %31, %union.tree_node* %32), !dbg !3239
  ret i8 %call34, !dbg !3240
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @build_ref_for_offset_1(%union.tree_node** %res, %union.tree_node* %type, i64 %offset, %union.tree_node* %exp_type) #0 !dbg !3241 {
entry:
  %retval = alloca i8, align 1
  %res.addr = alloca %union.tree_node**, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca i64, align 8
  %exp_type.addr = alloca %union.tree_node*, align 8
  %fld = alloca %union.tree_node*, align 8
  %tr_size = alloca %union.tree_node*, align 8
  %index = alloca %union.tree_node*, align 8
  %minidx = alloca %union.tree_node*, align 8
  %el_size = alloca i64, align 8
  %pos = alloca i64, align 8
  %size = alloca i64, align 8
  %expr = alloca %union.tree_node*, align 8
  %expr_ptr = alloca %union.tree_node**, align 8
  store %union.tree_node** %res, %union.tree_node*** %res.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %res.addr, metadata !3244, metadata !DIExpression()), !dbg !3245
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3246, metadata !DIExpression()), !dbg !3247
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !3248, metadata !DIExpression()), !dbg !3249
  store %union.tree_node* %exp_type, %union.tree_node** %exp_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp_type.addr, metadata !3250, metadata !DIExpression()), !dbg !3251
  br label %while.body, !dbg !3252

while.body:                                       ; preds = %entry, %sw.epilog
  call void @llvm.dbg.declare(metadata %union.tree_node** %fld, metadata !3253, metadata !DIExpression()), !dbg !3255
  call void @llvm.dbg.declare(metadata %union.tree_node** %tr_size, metadata !3256, metadata !DIExpression()), !dbg !3257
  call void @llvm.dbg.declare(metadata %union.tree_node** %index, metadata !3258, metadata !DIExpression()), !dbg !3259
  call void @llvm.dbg.declare(metadata %union.tree_node** %minidx, metadata !3260, metadata !DIExpression()), !dbg !3261
  call void @llvm.dbg.declare(metadata i64* %el_size, metadata !3262, metadata !DIExpression()), !dbg !3263
  %0 = load i64, i64* %offset.addr, align 8, !dbg !3264
  %cmp = icmp eq i64 %0, 0, !dbg !3266
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3267

land.lhs.true:                                    ; preds = %while.body
  %1 = load %union.tree_node*, %union.tree_node** %exp_type.addr, align 8, !dbg !3268
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !3268
  br i1 %tobool, label %land.lhs.true1, label %if.end, !dbg !3269

land.lhs.true1:                                   ; preds = %land.lhs.true
  %2 = load %union.tree_node*, %union.tree_node** %exp_type.addr, align 8, !dbg !3270
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3271
  %call = call zeroext i8 @types_compatible_p(%union.tree_node* %2, %union.tree_node* %3), !dbg !3272
  %conv = zext i8 %call to i32, !dbg !3272
  %tobool2 = icmp ne i32 %conv, 0, !dbg !3272
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3273

if.then:                                          ; preds = %land.lhs.true1
  store i8 1, i8* %retval, align 1, !dbg !3274
  br label %return, !dbg !3274

if.end:                                           ; preds = %land.lhs.true1, %land.lhs.true, %while.body
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3275
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3275
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !3275
  %bf.load = load i64, i64* %5, align 8, !dbg !3275
  %bf.clear = and i64 %bf.load, 65535, !dbg !3275
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3275
  switch i32 %bf.cast, label %sw.default [
    i32 17, label %sw.bb
    i32 18, label %sw.bb
    i32 16, label %sw.bb
    i32 15, label %sw.bb61
  ], !dbg !3276

sw.bb:                                            ; preds = %if.end, %if.end, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3277
  %type3 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !3277
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 1, !dbg !3277
  %7 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !3277
  store %union.tree_node* %7, %union.tree_node** %fld, align 8, !dbg !3280
  br label %for.cond, !dbg !3281

for.cond:                                         ; preds = %for.inc, %sw.bb
  %8 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !3282
  %tobool4 = icmp ne %union.tree_node* %8, null, !dbg !3284
  br i1 %tobool4, label %for.body, label %for.end, !dbg !3284

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !3285, metadata !DIExpression()), !dbg !3287
  call void @llvm.dbg.declare(metadata i64* %size, metadata !3288, metadata !DIExpression()), !dbg !3289
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !3290, metadata !DIExpression()), !dbg !3291
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_ptr, metadata !3292, metadata !DIExpression()), !dbg !3293
  %9 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !3294
  %base5 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3294
  %10 = bitcast %struct.tree_base* %base5 to i64*, !dbg !3294
  %bf.load6 = load i64, i64* %10, align 8, !dbg !3294
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !3294
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !3294
  %cmp9 = icmp ne i32 %bf.cast8, 31, !dbg !3296
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !3297

if.then11:                                        ; preds = %for.body
  br label %for.inc, !dbg !3298

if.end12:                                         ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !3299
  %call13 = call i64 @int_bit_position(%union.tree_node* %11), !dbg !3300
  store i64 %call13, i64* %pos, align 8, !dbg !3301
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3302
  %base14 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3302
  %13 = bitcast %struct.tree_base* %base14 to i64*, !dbg !3302
  %bf.load15 = load i64, i64* %13, align 8, !dbg !3302
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !3302
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !3302
  %cmp18 = icmp eq i32 %bf.cast17, 16, !dbg !3302
  br i1 %cmp18, label %cond.false, label %lor.lhs.false, !dbg !3302

lor.lhs.false:                                    ; preds = %if.end12
  %14 = load i64, i64* %pos, align 8, !dbg !3302
  %cmp20 = icmp eq i64 %14, 0, !dbg !3302
  br i1 %cmp20, label %cond.false, label %cond.true, !dbg !3302

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 1405, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3302
  br label %cond.end, !dbg !3302

cond.false:                                       ; preds = %lor.lhs.false, %if.end12
  br label %cond.end, !dbg !3302

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3302
  %15 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !3303
  %decl_common = bitcast %union.tree_node* %15 to %struct.tree_decl_common*, !dbg !3303
  %size22 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !3303
  %16 = load %union.tree_node*, %union.tree_node** %size22, align 8, !dbg !3303
  store %union.tree_node* %16, %union.tree_node** %tr_size, align 8, !dbg !3304
  %17 = load %union.tree_node*, %union.tree_node** %tr_size, align 8, !dbg !3305
  %tobool23 = icmp ne %union.tree_node* %17, null, !dbg !3305
  br i1 %tobool23, label %lor.lhs.false24, label %if.then27, !dbg !3307

lor.lhs.false24:                                  ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %tr_size, align 8, !dbg !3308
  %call25 = call i32 @host_integerp(%union.tree_node* %18, i32 1), !dbg !3309
  %tobool26 = icmp ne i32 %call25, 0, !dbg !3309
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !3310

if.then27:                                        ; preds = %lor.lhs.false24, %cond.end
  br label %for.inc, !dbg !3311

if.end28:                                         ; preds = %lor.lhs.false24
  %19 = load %union.tree_node*, %union.tree_node** %tr_size, align 8, !dbg !3312
  %call29 = call i64 @tree_low_cst(%union.tree_node* %19, i32 1), !dbg !3313
  store i64 %call29, i64* %size, align 8, !dbg !3314
  %20 = load i64, i64* %size, align 8, !dbg !3315
  %cmp30 = icmp eq i64 %20, 0, !dbg !3317
  br i1 %cmp30, label %if.then32, label %if.else, !dbg !3318

if.then32:                                        ; preds = %if.end28
  %21 = load i64, i64* %pos, align 8, !dbg !3319
  %22 = load i64, i64* %offset.addr, align 8, !dbg !3322
  %cmp33 = icmp ne i64 %21, %22, !dbg !3323
  br i1 %cmp33, label %if.then35, label %if.end36, !dbg !3324

if.then35:                                        ; preds = %if.then32
  br label %for.inc, !dbg !3325

if.end36:                                         ; preds = %if.then32
  br label %if.end44, !dbg !3326

if.else:                                          ; preds = %if.end28
  %23 = load i64, i64* %pos, align 8, !dbg !3327
  %24 = load i64, i64* %offset.addr, align 8, !dbg !3329
  %cmp37 = icmp sgt i64 %23, %24, !dbg !3330
  br i1 %cmp37, label %if.then42, label %lor.lhs.false39, !dbg !3331

lor.lhs.false39:                                  ; preds = %if.else
  %25 = load i64, i64* %pos, align 8, !dbg !3332
  %26 = load i64, i64* %size, align 8, !dbg !3333
  %add = add nsw i64 %25, %26, !dbg !3334
  %27 = load i64, i64* %offset.addr, align 8, !dbg !3335
  %cmp40 = icmp sle i64 %add, %27, !dbg !3336
  br i1 %cmp40, label %if.then42, label %if.end43, !dbg !3337

if.then42:                                        ; preds = %lor.lhs.false39, %if.else
  br label %for.inc, !dbg !3338

if.end43:                                         ; preds = %lor.lhs.false39
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end36
  %28 = load %union.tree_node**, %union.tree_node*** %res.addr, align 8, !dbg !3339
  %tobool45 = icmp ne %union.tree_node** %28, null, !dbg !3339
  br i1 %tobool45, label %if.then46, label %if.else49, !dbg !3341

if.then46:                                        ; preds = %if.end44
  %29 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !3342
  %common = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !3342
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3342
  %30 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !3342
  %31 = load %union.tree_node**, %union.tree_node*** %res.addr, align 8, !dbg !3342
  %32 = load %union.tree_node*, %union.tree_node** %31, align 8, !dbg !3342
  %33 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !3342
  %call48 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %30, %union.tree_node* %32, %union.tree_node* %33, %union.tree_node* null), !dbg !3342
  store %union.tree_node* %call48, %union.tree_node** %expr, align 8, !dbg !3344
  store %union.tree_node** %expr, %union.tree_node*** %expr_ptr, align 8, !dbg !3345
  br label %if.end50, !dbg !3346

if.else49:                                        ; preds = %if.end44
  store %union.tree_node** null, %union.tree_node*** %expr_ptr, align 8, !dbg !3347
  br label %if.end50

if.end50:                                         ; preds = %if.else49, %if.then46
  %34 = load %union.tree_node**, %union.tree_node*** %expr_ptr, align 8, !dbg !3348
  %35 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !3350
  %common51 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !3350
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !3350
  %36 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !3350
  %37 = load i64, i64* %offset.addr, align 8, !dbg !3351
  %38 = load i64, i64* %pos, align 8, !dbg !3352
  %sub = sub nsw i64 %37, %38, !dbg !3353
  %39 = load %union.tree_node*, %union.tree_node** %exp_type.addr, align 8, !dbg !3354
  %call53 = call zeroext i8 @build_ref_for_offset_1(%union.tree_node** %34, %union.tree_node* %36, i64 %sub, %union.tree_node* %39), !dbg !3355
  %tobool54 = icmp ne i8 %call53, 0, !dbg !3355
  br i1 %tobool54, label %if.then55, label %if.end59, !dbg !3356

if.then55:                                        ; preds = %if.end50
  %40 = load %union.tree_node**, %union.tree_node*** %res.addr, align 8, !dbg !3357
  %tobool56 = icmp ne %union.tree_node** %40, null, !dbg !3357
  br i1 %tobool56, label %if.then57, label %if.end58, !dbg !3360

if.then57:                                        ; preds = %if.then55
  %41 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3361
  %42 = load %union.tree_node**, %union.tree_node*** %res.addr, align 8, !dbg !3362
  store %union.tree_node* %41, %union.tree_node** %42, align 8, !dbg !3363
  br label %if.end58, !dbg !3364

if.end58:                                         ; preds = %if.then57, %if.then55
  store i8 1, i8* %retval, align 1, !dbg !3365
  br label %return, !dbg !3365

if.end59:                                         ; preds = %if.end50
  br label %for.inc, !dbg !3366

for.inc:                                          ; preds = %if.end59, %if.then42, %if.then35, %if.then27, %if.then11
  %43 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !3367
  %common60 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !3367
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 1, !dbg !3367
  %44 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3367
  store %union.tree_node* %44, %union.tree_node** %fld, align 8, !dbg !3368
  br label %for.cond, !dbg !3369, !llvm.loop !3370

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !3372
  br label %return, !dbg !3372

sw.bb61:                                          ; preds = %if.end
  %45 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3373
  %common62 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !3373
  %type63 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 2, !dbg !3373
  %46 = load %union.tree_node*, %union.tree_node** %type63, align 8, !dbg !3373
  %type64 = bitcast %union.tree_node* %46 to %struct.tree_type*, !dbg !3373
  %size65 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type64, i32 0, i32 2, !dbg !3373
  %47 = load %union.tree_node*, %union.tree_node** %size65, align 8, !dbg !3373
  store %union.tree_node* %47, %union.tree_node** %tr_size, align 8, !dbg !3374
  %48 = load %union.tree_node*, %union.tree_node** %tr_size, align 8, !dbg !3375
  %tobool66 = icmp ne %union.tree_node* %48, null, !dbg !3375
  br i1 %tobool66, label %lor.lhs.false67, label %if.then70, !dbg !3377

lor.lhs.false67:                                  ; preds = %sw.bb61
  %49 = load %union.tree_node*, %union.tree_node** %tr_size, align 8, !dbg !3378
  %call68 = call i32 @host_integerp(%union.tree_node* %49, i32 1), !dbg !3379
  %tobool69 = icmp ne i32 %call68, 0, !dbg !3379
  br i1 %tobool69, label %if.end71, label %if.then70, !dbg !3380

if.then70:                                        ; preds = %lor.lhs.false67, %sw.bb61
  store i8 0, i8* %retval, align 1, !dbg !3381
  br label %return, !dbg !3381

if.end71:                                         ; preds = %lor.lhs.false67
  %50 = load %union.tree_node*, %union.tree_node** %tr_size, align 8, !dbg !3382
  %call72 = call i64 @tree_low_cst(%union.tree_node* %50, i32 1), !dbg !3383
  store i64 %call72, i64* %el_size, align 8, !dbg !3384
  %51 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3385
  %type73 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !3385
  %values74 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type73, i32 0, i32 1, !dbg !3385
  %52 = load %union.tree_node*, %union.tree_node** %values74, align 8, !dbg !3385
  %type75 = bitcast %union.tree_node* %52 to %struct.tree_type*, !dbg !3385
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type75, i32 0, i32 13, !dbg !3385
  %53 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !3385
  store %union.tree_node* %53, %union.tree_node** %minidx, align 8, !dbg !3386
  %54 = load %union.tree_node*, %union.tree_node** %minidx, align 8, !dbg !3387
  %base76 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !3387
  %55 = bitcast %struct.tree_base* %base76 to i64*, !dbg !3387
  %bf.load77 = load i64, i64* %55, align 8, !dbg !3387
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !3387
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !3387
  %cmp80 = icmp ne i32 %bf.cast79, 23, !dbg !3389
  br i1 %cmp80, label %if.then85, label %lor.lhs.false82, !dbg !3390

lor.lhs.false82:                                  ; preds = %if.end71
  %56 = load i64, i64* %el_size, align 8, !dbg !3391
  %cmp83 = icmp eq i64 %56, 0, !dbg !3392
  br i1 %cmp83, label %if.then85, label %if.end86, !dbg !3393

if.then85:                                        ; preds = %lor.lhs.false82, %if.end71
  store i8 0, i8* %retval, align 1, !dbg !3394
  br label %return, !dbg !3394

if.end86:                                         ; preds = %lor.lhs.false82
  %57 = load %union.tree_node**, %union.tree_node*** %res.addr, align 8, !dbg !3395
  %tobool87 = icmp ne %union.tree_node** %57, null, !dbg !3395
  br i1 %tobool87, label %if.then88, label %if.end100, !dbg !3397

if.then88:                                        ; preds = %if.end86
  %58 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3398
  %type89 = bitcast %union.tree_node* %58 to %struct.tree_type*, !dbg !3398
  %values90 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type89, i32 0, i32 1, !dbg !3398
  %59 = load %union.tree_node*, %union.tree_node** %values90, align 8, !dbg !3398
  %60 = load i64, i64* %offset.addr, align 8, !dbg !3400
  %61 = load i64, i64* %el_size, align 8, !dbg !3401
  %div = sdiv i64 %60, %61, !dbg !3402
  %call91 = call %union.tree_node* @build_int_cst(%union.tree_node* %59, i64 %div), !dbg !3403
  store %union.tree_node* %call91, %union.tree_node** %index, align 8, !dbg !3404
  %62 = load %union.tree_node*, %union.tree_node** %minidx, align 8, !dbg !3405
  %call92 = call i32 @integer_zerop(%union.tree_node* %62), !dbg !3407
  %tobool93 = icmp ne i32 %call92, 0, !dbg !3407
  br i1 %tobool93, label %if.end96, label %if.then94, !dbg !3408

if.then94:                                        ; preds = %if.then88
  %63 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !3409
  %64 = load %union.tree_node*, %union.tree_node** %minidx, align 8, !dbg !3410
  %call95 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %63, %union.tree_node* %64, i32 0), !dbg !3411
  store %union.tree_node* %call95, %union.tree_node** %index, align 8, !dbg !3412
  br label %if.end96, !dbg !3413

if.end96:                                         ; preds = %if.then94, %if.then88
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3414
  %common97 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !3414
  %type98 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common97, i32 0, i32 2, !dbg !3414
  %66 = load %union.tree_node*, %union.tree_node** %type98, align 8, !dbg !3414
  %67 = load %union.tree_node**, %union.tree_node*** %res.addr, align 8, !dbg !3414
  %68 = load %union.tree_node*, %union.tree_node** %67, align 8, !dbg !3414
  %69 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !3414
  %call99 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %66, %union.tree_node* %68, %union.tree_node* %69, %union.tree_node* null, %union.tree_node* null), !dbg !3414
  %70 = load %union.tree_node**, %union.tree_node*** %res.addr, align 8, !dbg !3415
  store %union.tree_node* %call99, %union.tree_node** %70, align 8, !dbg !3416
  br label %if.end100, !dbg !3417

if.end100:                                        ; preds = %if.end96, %if.end86
  %71 = load i64, i64* %offset.addr, align 8, !dbg !3418
  %72 = load i64, i64* %el_size, align 8, !dbg !3419
  %rem = srem i64 %71, %72, !dbg !3420
  store i64 %rem, i64* %offset.addr, align 8, !dbg !3421
  %73 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3422
  %common101 = bitcast %union.tree_node* %73 to %struct.tree_common*, !dbg !3422
  %type102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common101, i32 0, i32 2, !dbg !3422
  %74 = load %union.tree_node*, %union.tree_node** %type102, align 8, !dbg !3422
  store %union.tree_node* %74, %union.tree_node** %type.addr, align 8, !dbg !3423
  br label %sw.epilog, !dbg !3424

sw.default:                                       ; preds = %if.end
  %75 = load i64, i64* %offset.addr, align 8, !dbg !3425
  %cmp103 = icmp ne i64 %75, 0, !dbg !3427
  br i1 %cmp103, label %if.then105, label %if.end106, !dbg !3428

if.then105:                                       ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !3429
  br label %return, !dbg !3429

if.end106:                                        ; preds = %sw.default
  %76 = load %union.tree_node*, %union.tree_node** %exp_type.addr, align 8, !dbg !3430
  %tobool107 = icmp ne %union.tree_node* %76, null, !dbg !3430
  br i1 %tobool107, label %if.then108, label %if.else109, !dbg !3432

if.then108:                                       ; preds = %if.end106
  store i8 0, i8* %retval, align 1, !dbg !3433
  br label %return, !dbg !3433

if.else109:                                       ; preds = %if.end106
  store i8 1, i8* %retval, align 1, !dbg !3434
  br label %return, !dbg !3434

sw.epilog:                                        ; preds = %if.end100
  br label %while.body, !dbg !3252, !llvm.loop !3435

return:                                           ; preds = %if.else109, %if.then108, %if.then105, %if.then85, %if.then70, %for.end, %if.end58, %if.then
  %77 = load i8, i8* %retval, align 1, !dbg !3437
  ret i8 %77, !dbg !3437
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_intra_sra() #0 !dbg !3438 {
entry:
  %0 = load i32, i32* @flag_tree_sra, align 4, !dbg !3439
  %cmp = icmp ne i32 %0, 0, !dbg !3440
  %conv = zext i1 %cmp to i32, !dbg !3440
  %conv1 = trunc i32 %conv to i8, !dbg !3439
  ret i8 %conv1, !dbg !3441
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @early_intra_sra() #0 !dbg !3442 {
entry:
  store i32 1, i32* @sra_mode, align 4, !dbg !3443
  %call = call i32 @perform_intra_sra(), !dbg !3444
  ret i32 %call, !dbg !3445
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @late_intra_sra() #0 !dbg !3446 {
entry:
  store i32 2, i32* @sra_mode, align 4, !dbg !3447
  %call = call i32 @perform_intra_sra(), !dbg !3448
  ret i32 %call, !dbg !3449
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ipa_early_sra_gate() #0 !dbg !3450 {
entry:
  %0 = load i32, i32* @flag_ipa_sra, align 4, !dbg !3451
  %conv = trunc i32 %0 to i8, !dbg !3451
  ret i8 %conv, !dbg !3452
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ipa_early_sra() #0 !dbg !3453 {
entry:
  %retval = alloca i32, align 4
  %node = alloca %struct.cgraph_node*, align 8
  %adjustments = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %ret = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3454, metadata !DIExpression()), !dbg !3661
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3662
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %0), !dbg !3663
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !3661
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, metadata !3664, metadata !DIExpression()), !dbg !3666
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !3667, metadata !DIExpression()), !dbg !3668
  store i32 0, i32* %ret, align 4, !dbg !3668
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3669
  %call1 = call zeroext i8 @ipa_sra_preliminary_function_checks(%struct.cgraph_node* %1), !dbg !3671
  %tobool = icmp ne i8 %call1, 0, !dbg !3671
  br i1 %tobool, label %if.end, label %if.then, !dbg !3672

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3673
  br label %return, !dbg !3673

if.end:                                           ; preds = %entry
  call void @sra_initialize(), !dbg !3674
  store i32 0, i32* @sra_mode, align 4, !dbg !3675
  %call2 = call zeroext i8 @find_param_candidates(), !dbg !3676
  %tobool3 = icmp ne i8 %call2, 0, !dbg !3676
  br i1 %tobool3, label %if.end9, label %if.then4, !dbg !3678

if.then4:                                         ; preds = %if.end
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3679
  %tobool5 = icmp ne %struct._IO_FILE* %2, null, !dbg !3679
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !3682

if.then6:                                         ; preds = %if.then4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3683
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.49, i64 0, i64 0)), !dbg !3684
  br label %if.end8, !dbg !3684

if.end8:                                          ; preds = %if.then6, %if.then4
  br label %simple_out, !dbg !3685

if.end9:                                          ; preds = %if.end
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3686
  %call10 = call zeroext i8 @all_callers_have_enough_arguments_p(%struct.cgraph_node* %4), !dbg !3688
  %tobool11 = icmp ne i8 %call10, 0, !dbg !3688
  br i1 %tobool11, label %if.end17, label %if.then12, !dbg !3689

if.then12:                                        ; preds = %if.end9
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3690
  %tobool13 = icmp ne %struct._IO_FILE* %5, null, !dbg !3690
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !3693

if.then14:                                        ; preds = %if.then12
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3694
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.50, i64 0, i64 0)), !dbg !3695
  br label %if.end16, !dbg !3695

if.end16:                                         ; preds = %if.then14, %if.then12
  br label %simple_out, !dbg !3696

if.end17:                                         ; preds = %if.end9
  %7 = load i32, i32* @func_param_count, align 4, !dbg !3697
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3697
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !3697
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3697
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3697
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 5, !dbg !3697
  %10 = load i32, i32* %x_last_basic_block, align 8, !dbg !3697
  %mul = mul nsw i32 %7, %10, !dbg !3697
  %conv = sext i32 %mul to i64, !dbg !3697
  %call18 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !3697
  %11 = bitcast i8* %call18 to i64*, !dbg !3697
  store i64* %11, i64** @bb_dereferences, align 8, !dbg !3698
  %call19 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3699
  store %struct.bitmap_head_def* %call19, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !3700
  %call20 = call zeroext i8 @scan_function(i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)* @build_access_from_expr, i32 (%union.gimple_statement_d**, %struct.gimple_stmt_iterator*, i8*)* @build_accesses_from_assign, i8 (%union.gimple_statement_d*, i8*)* null, i8 zeroext 1, i8* null), !dbg !3701
  %12 = load i8, i8* @encountered_apply_args, align 1, !dbg !3702
  %tobool21 = icmp ne i8 %12, 0, !dbg !3702
  br i1 %tobool21, label %if.then22, label %if.end27, !dbg !3704

if.then22:                                        ; preds = %if.end17
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3705
  %tobool23 = icmp ne %struct._IO_FILE* %13, null, !dbg !3705
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !3708

if.then24:                                        ; preds = %if.then22
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3709
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.51, i64 0, i64 0)), !dbg !3710
  br label %if.end26, !dbg !3710

if.end26:                                         ; preds = %if.then24, %if.then22
  br label %out, !dbg !3711

if.end27:                                         ; preds = %if.end17
  %15 = load i8, i8* @encountered_unchangable_recursive_call, align 1, !dbg !3712
  %tobool28 = icmp ne i8 %15, 0, !dbg !3712
  br i1 %tobool28, label %if.then29, label %if.end34, !dbg !3714

if.then29:                                        ; preds = %if.end27
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3715
  %tobool30 = icmp ne %struct._IO_FILE* %16, null, !dbg !3715
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !3718

if.then31:                                        ; preds = %if.then29
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3719
  %call32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.52, i64 0, i64 0)), !dbg !3720
  br label %if.end33, !dbg !3720

if.end33:                                         ; preds = %if.then31, %if.then29
  br label %out, !dbg !3721

if.end34:                                         ; preds = %if.end27
  %call35 = call %struct.VEC_ipa_parm_adjustment_t_heap* @analyze_all_param_acesses(), !dbg !3722
  store %struct.VEC_ipa_parm_adjustment_t_heap* %call35, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !3723
  %18 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !3724
  %tobool36 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %18, null, !dbg !3724
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !3726

if.then37:                                        ; preds = %if.end34
  br label %out, !dbg !3727

if.end38:                                         ; preds = %if.end34
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3728
  %tobool39 = icmp ne %struct._IO_FILE* %19, null, !dbg !3728
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !3730

if.then40:                                        ; preds = %if.end38
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3731
  %21 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !3732
  %22 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3733
  call void @ipa_dump_param_adjustments(%struct._IO_FILE* %20, %struct.VEC_ipa_parm_adjustment_t_heap* %21, %union.tree_node* %22), !dbg !3734
  br label %if.end41, !dbg !3734

if.end41:                                         ; preds = %if.then40, %if.end38
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3735
  %24 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !3736
  call void @modify_function(%struct.cgraph_node* %23, %struct.VEC_ipa_parm_adjustment_t_heap* %24), !dbg !3737
  call void @VEC_ipa_parm_adjustment_t_heap_free(%struct.VEC_ipa_parm_adjustment_t_heap** %adjustments), !dbg !3738
  store i32 2048, i32* %ret, align 4, !dbg !3739
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3740
  %add.ptr42 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !3740
  %26 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 6), align 4, !dbg !3741
  call void @statistics_counter_event(%struct.function* %add.ptr42, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.53, i64 0, i64 0), i32 %26), !dbg !3742
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3743
  %add.ptr43 = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !3743
  %28 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 7), align 4, !dbg !3744
  call void @statistics_counter_event(%struct.function* %add.ptr43, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.54, i64 0, i64 0), i32 %28), !dbg !3745
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3746
  %add.ptr44 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !3746
  %30 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 8), align 4, !dbg !3747
  call void @statistics_counter_event(%struct.function* %add.ptr44, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.55, i64 0, i64 0), i32 %30), !dbg !3748
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3749
  %add.ptr45 = getelementptr inbounds %struct.function, %struct.function* %31, i64 0, !dbg !3749
  %32 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 9), align 4, !dbg !3750
  call void @statistics_counter_event(%struct.function* %add.ptr45, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.56, i64 0, i64 0), i32 %32), !dbg !3751
  br label %out, !dbg !3751

out:                                              ; preds = %if.end41, %if.then37, %if.end33, %if.end26
  call void @llvm.dbg.label(metadata !3752), !dbg !3753
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !3754
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %33), !dbg !3754
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !3754
  %34 = load i64*, i64** @bb_dereferences, align 8, !dbg !3755
  %35 = bitcast i64* %34 to i8*, !dbg !3755
  call void @free(i8* %35), !dbg !3756
  br label %simple_out, !dbg !3756

simple_out:                                       ; preds = %out, %if.end16, %if.end8
  call void @llvm.dbg.label(metadata !3757), !dbg !3758
  call void @sra_deinitialize(), !dbg !3759
  %36 = load i32, i32* %ret, align 4, !dbg !3760
  store i32 %36, i32* %retval, align 4, !dbg !3761
  br label %return, !dbg !3761

return:                                           ; preds = %simple_out, %if.then
  %37 = load i32, i32* %retval, align 4, !dbg !3762
  ret i32 %37, !dbg !3762
}

declare dso_local zeroext i8 @types_compatible_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local i64 @int_bit_position(%union.tree_node*) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

declare dso_local %union.tree_node* @build3_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local %union.tree_node* @int_const_binop(i32, %union.tree_node*, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @build4_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @perform_intra_sra() #0 !dbg !3763 {
entry:
  %ret = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !3764, metadata !DIExpression()), !dbg !3765
  store i32 0, i32* %ret, align 4, !dbg !3765
  call void @sra_initialize(), !dbg !3766
  %call = call zeroext i8 @find_var_candidates(), !dbg !3767
  %tobool = icmp ne i8 %call, 0, !dbg !3767
  br i1 %tobool, label %if.end, label %if.then, !dbg !3769

if.then:                                          ; preds = %entry
  br label %out, !dbg !3770

if.end:                                           ; preds = %entry
  %call1 = call zeroext i8 @scan_function(i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)* @build_access_from_expr, i32 (%union.gimple_statement_d**, %struct.gimple_stmt_iterator*, i8*)* @build_accesses_from_assign, i8 (%union.gimple_statement_d*, i8*)* null, i8 zeroext 1, i8* null), !dbg !3771
  %tobool2 = icmp ne i8 %call1, 0, !dbg !3771
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !3773

if.then3:                                         ; preds = %if.end
  br label %out, !dbg !3774

if.end4:                                          ; preds = %if.end
  %call5 = call zeroext i8 @analyze_all_variable_accesses(), !dbg !3775
  %tobool6 = icmp ne i8 %call5, 0, !dbg !3775
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !3777

if.then7:                                         ; preds = %if.end4
  br label %out, !dbg !3778

if.end8:                                          ; preds = %if.end4
  %call9 = call zeroext i8 @scan_function(i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)* @sra_modify_expr, i32 (%union.gimple_statement_d**, %struct.gimple_stmt_iterator*, i8*)* @sra_modify_assign, i8 (%union.gimple_statement_d*, i8*)* null, i8 zeroext 0, i8* null), !dbg !3779
  call void @initialize_parameter_reductions(), !dbg !3780
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3781
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3781
  %1 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 0), align 4, !dbg !3782
  call void @statistics_counter_event(%struct.function* %add.ptr, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i64 0, i64 0), i32 %1), !dbg !3783
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3784
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3784
  %3 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 1), align 4, !dbg !3785
  call void @statistics_counter_event(%struct.function* %add.ptr10, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 %3), !dbg !3786
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3787
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3787
  %5 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 2), align 4, !dbg !3788
  call void @statistics_counter_event(%struct.function* %add.ptr11, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0), i32 %5), !dbg !3789
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3790
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3790
  %7 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 3), align 4, !dbg !3791
  call void @statistics_counter_event(%struct.function* %add.ptr12, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0), i32 %7), !dbg !3792
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3793
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !3793
  %9 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 4), align 4, !dbg !3794
  call void @statistics_counter_event(%struct.function* %add.ptr13, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0), i32 %9), !dbg !3795
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3796
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !3796
  %11 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 5), align 4, !dbg !3797
  call void @statistics_counter_event(%struct.function* %add.ptr14, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0), i32 %11), !dbg !3798
  store i32 2048, i32* %ret, align 4, !dbg !3799
  br label %out, !dbg !3800

out:                                              ; preds = %if.end8, %if.then7, %if.then3, %if.then
  call void @llvm.dbg.label(metadata !3801), !dbg !3802
  call void @sra_deinitialize(), !dbg !3803
  %12 = load i32, i32* %ret, align 4, !dbg !3804
  ret i32 %12, !dbg !3805
}

; Function Attrs: noinline nounwind uwtable
define internal void @sra_initialize() #0 !dbg !3806 {
entry:
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3807
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !3808
  %call1 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3809
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** @should_scalarize_away_bitmap, align 8, !dbg !3810
  %call2 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3811
  store %struct.bitmap_head_def* %call2, %struct.bitmap_head_def** @cannot_scalarize_away_bitmap, align 8, !dbg !3812
  %call3 = call i32 @_obstack_begin(%struct.obstack* @name_obstack, i32 0, i32 0, i8* (i64)* @xmalloc, void (i8*)* @free), !dbg !3813
  %call4 = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i64 120, i64 16), !dbg !3814
  store %struct.alloc_pool_def* %call4, %struct.alloc_pool_def** @access_pool, align 8, !dbg !3815
  %call5 = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i64 24, i64 16), !dbg !3816
  store %struct.alloc_pool_def* %call5, %struct.alloc_pool_def** @link_pool, align 8, !dbg !3817
  %call6 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !3818
  store %struct.pointer_map_t* %call6, %struct.pointer_map_t** @base_access_vec, align 8, !dbg !3819
  call void @llvm.memset.p0i8.i64(i8* align 4 bitcast (%struct.anon* @sra_stats to i8*), i8 0, i64 40, i1 false), !dbg !3820
  store i8 0, i8* @encountered_apply_args, align 1, !dbg !3821
  store i8 0, i8* @encountered_recursive_call, align 1, !dbg !3822
  store i8 0, i8* @encountered_unchangable_recursive_call, align 1, !dbg !3823
  ret void, !dbg !3824
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_var_candidates() #0 !dbg !3825 {
entry:
  %var = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %rvi = alloca %struct.referenced_var_iterator, align 8
  %ret = alloca i8, align 1
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !3826, metadata !DIExpression()), !dbg !3827
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3828, metadata !DIExpression()), !dbg !3829
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator* %rvi, metadata !3830, metadata !DIExpression()), !dbg !3841
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !3842, metadata !DIExpression()), !dbg !3843
  store i8 0, i8* %ret, align 1, !dbg !3843
  %call = call %union.tree_node* @first_referenced_var(%struct.referenced_var_iterator* %rvi), !dbg !3844
  store %union.tree_node* %call, %union.tree_node** %var, align 8, !dbg !3844
  br label %for.cond, !dbg !3844

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @end_referenced_vars_p(%struct.referenced_var_iterator* %rvi), !dbg !3846
  %tobool = icmp ne i8 %call1, 0, !dbg !3846
  %lnot = xor i1 %tobool, true, !dbg !3846
  br i1 %lnot, label %for.body, label %for.end, !dbg !3844

for.body:                                         ; preds = %for.cond
  %0 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3848
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3848
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3848
  %bf.load = load i64, i64* %1, align 8, !dbg !3848
  %bf.clear = and i64 %bf.load, 65535, !dbg !3848
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3848
  %cmp = icmp ne i32 %bf.cast, 32, !dbg !3851
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3852

land.lhs.true:                                    ; preds = %for.body
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3853
  %base2 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3853
  %3 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3853
  %bf.load3 = load i64, i64* %3, align 8, !dbg !3853
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !3853
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !3853
  %cmp6 = icmp ne i32 %bf.cast5, 34, !dbg !3854
  br i1 %cmp6, label %if.then, label %if.end, !dbg !3855

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc, !dbg !3856

if.end:                                           ; preds = %land.lhs.true, %for.body
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3857
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !3857
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3857
  %5 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !3857
  store %union.tree_node* %5, %union.tree_node** %type, align 8, !dbg !3858
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3859
  %base8 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3859
  %7 = bitcast %struct.tree_base* %base8 to i64*, !dbg !3859
  %bf.load9 = load i64, i64* %7, align 8, !dbg !3859
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !3859
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !3859
  %cmp12 = icmp eq i32 %bf.cast11, 15, !dbg !3859
  br i1 %cmp12, label %lor.lhs.false30, label %lor.lhs.false, !dbg !3859

lor.lhs.false:                                    ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3859
  %base13 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !3859
  %9 = bitcast %struct.tree_base* %base13 to i64*, !dbg !3859
  %bf.load14 = load i64, i64* %9, align 8, !dbg !3859
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !3859
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !3859
  %cmp17 = icmp eq i32 %bf.cast16, 16, !dbg !3859
  br i1 %cmp17, label %lor.lhs.false30, label %lor.lhs.false18, !dbg !3859

lor.lhs.false18:                                  ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3859
  %base19 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !3859
  %11 = bitcast %struct.tree_base* %base19 to i64*, !dbg !3859
  %bf.load20 = load i64, i64* %11, align 8, !dbg !3859
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !3859
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !3859
  %cmp23 = icmp eq i32 %bf.cast22, 17, !dbg !3859
  br i1 %cmp23, label %lor.lhs.false30, label %lor.lhs.false24, !dbg !3859

lor.lhs.false24:                                  ; preds = %lor.lhs.false18
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3859
  %base25 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3859
  %13 = bitcast %struct.tree_base* %base25 to i64*, !dbg !3859
  %bf.load26 = load i64, i64* %13, align 8, !dbg !3859
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !3859
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !3859
  %cmp29 = icmp eq i32 %bf.cast28, 18, !dbg !3859
  br i1 %cmp29, label %lor.lhs.false30, label %if.then65, !dbg !3861

lor.lhs.false30:                                  ; preds = %lor.lhs.false24, %lor.lhs.false18, %lor.lhs.false, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3862
  %call31 = call zeroext i8 @needs_to_live_in_memory(%union.tree_node* %14), !dbg !3863
  %conv = zext i8 %call31 to i32, !dbg !3863
  %tobool32 = icmp ne i32 %conv, 0, !dbg !3863
  br i1 %tobool32, label %if.then65, label %lor.lhs.false33, !dbg !3864

lor.lhs.false33:                                  ; preds = %lor.lhs.false30
  %15 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3865
  %base34 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !3865
  %16 = bitcast %struct.tree_base* %base34 to i64*, !dbg !3865
  %bf.load35 = load i64, i64* %16, align 8, !dbg !3865
  %bf.lshr = lshr i64 %bf.load35, 19, !dbg !3865
  %bf.clear36 = and i64 %bf.lshr, 1, !dbg !3865
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !3865
  %tobool38 = icmp ne i32 %bf.cast37, 0, !dbg !3865
  br i1 %tobool38, label %if.then65, label %lor.lhs.false39, !dbg !3866

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3867
  %type40 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !3867
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type40, i32 0, i32 2, !dbg !3867
  %18 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !3867
  %cmp41 = icmp ne %union.tree_node* %18, null, !dbg !3867
  br i1 %cmp41, label %lor.lhs.false43, label %if.then65, !dbg !3868

lor.lhs.false43:                                  ; preds = %lor.lhs.false39
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3869
  %type44 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !3869
  %size45 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type44, i32 0, i32 2, !dbg !3869
  %20 = load %union.tree_node*, %union.tree_node** %size45, align 8, !dbg !3869
  %call46 = call i32 @host_integerp(%union.tree_node* %20, i32 1), !dbg !3870
  %tobool47 = icmp ne i32 %call46, 0, !dbg !3870
  br i1 %tobool47, label %lor.lhs.false48, label %if.then65, !dbg !3871

lor.lhs.false48:                                  ; preds = %lor.lhs.false43
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3872
  %type49 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !3872
  %size50 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 2, !dbg !3872
  %22 = load %union.tree_node*, %union.tree_node** %size50, align 8, !dbg !3872
  %call51 = call i64 @tree_low_cst(%union.tree_node* %22, i32 1), !dbg !3873
  %cmp52 = icmp eq i64 %call51, 0, !dbg !3874
  br i1 %cmp52, label %if.then65, label %lor.lhs.false54, !dbg !3875

lor.lhs.false54:                                  ; preds = %lor.lhs.false48
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3876
  %call55 = call zeroext i8 @type_internals_preclude_sra_p(%union.tree_node* %23), !dbg !3877
  %conv56 = zext i8 %call55 to i32, !dbg !3877
  %tobool57 = icmp ne i32 %conv56, 0, !dbg !3877
  br i1 %tobool57, label %if.then65, label %lor.lhs.false58, !dbg !3878

lor.lhs.false58:                                  ; preds = %lor.lhs.false54
  %24 = load i32, i32* @sra_mode, align 4, !dbg !3879
  %cmp59 = icmp eq i32 %24, 1, !dbg !3880
  br i1 %cmp59, label %land.lhs.true61, label %if.end66, !dbg !3881

land.lhs.true61:                                  ; preds = %lor.lhs.false58
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3882
  %call62 = call zeroext i8 @is_va_list_type(%union.tree_node* %25), !dbg !3883
  %conv63 = zext i8 %call62 to i32, !dbg !3883
  %tobool64 = icmp ne i32 %conv63, 0, !dbg !3883
  br i1 %tobool64, label %if.then65, label %if.end66, !dbg !3884

if.then65:                                        ; preds = %land.lhs.true61, %lor.lhs.false54, %lor.lhs.false48, %lor.lhs.false43, %lor.lhs.false39, %lor.lhs.false33, %lor.lhs.false30, %lor.lhs.false24
  br label %for.inc, !dbg !3885

if.end66:                                         ; preds = %land.lhs.true61, %lor.lhs.false58
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !3886
  %27 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3887
  %decl_minimal = bitcast %union.tree_node* %27 to %struct.tree_decl_minimal*, !dbg !3887
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !3887
  %28 = load i32, i32* %uid, align 4, !dbg !3887
  %call67 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %26, i32 %28), !dbg !3888
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3889
  %tobool68 = icmp ne %struct._IO_FILE* %29, null, !dbg !3889
  br i1 %tobool68, label %land.lhs.true69, label %if.end76, !dbg !3891

land.lhs.true69:                                  ; preds = %if.end66
  %30 = load i32, i32* @dump_flags, align 4, !dbg !3892
  %and = and i32 %30, 8, !dbg !3893
  %tobool70 = icmp ne i32 %and, 0, !dbg !3893
  br i1 %tobool70, label %if.then71, label %if.end76, !dbg !3894

if.then71:                                        ; preds = %land.lhs.true69
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3895
  %32 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3897
  %decl_minimal72 = bitcast %union.tree_node* %32 to %struct.tree_decl_minimal*, !dbg !3897
  %uid73 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal72, i32 0, i32 2, !dbg !3897
  %33 = load i32, i32* %uid73, align 4, !dbg !3897
  %call74 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0), i32 %33), !dbg !3898
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3899
  %35 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3900
  call void @print_generic_expr(%struct._IO_FILE* %34, %union.tree_node* %35, i32 0), !dbg !3901
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3902
  %call75 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !3903
  br label %if.end76, !dbg !3904

if.end76:                                         ; preds = %if.then71, %land.lhs.true69, %if.end66
  store i8 1, i8* %ret, align 1, !dbg !3905
  br label %for.inc, !dbg !3906

for.inc:                                          ; preds = %if.end76, %if.then65, %if.then
  %call77 = call %union.tree_node* @next_referenced_var(%struct.referenced_var_iterator* %rvi), !dbg !3846
  store %union.tree_node* %call77, %union.tree_node** %var, align 8, !dbg !3846
  br label %for.cond, !dbg !3846, !llvm.loop !3907

for.end:                                          ; preds = %for.cond
  %37 = load i8, i8* %ret, align 1, !dbg !3909
  ret i8 %37, !dbg !3910
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @scan_function(i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)* %scan_expr, i32 (%union.gimple_statement_d**, %struct.gimple_stmt_iterator*, i8*)* %scan_assign, i8 (%union.gimple_statement_d*, i8*)* %handle_ssa_defs, i8 zeroext %analysis_stage, i8* %data) #0 !dbg !3911 {
entry:
  %scan_expr.addr = alloca i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)*, align 8
  %scan_assign.addr = alloca i32 (%union.gimple_statement_d**, %struct.gimple_stmt_iterator*, i8*)*, align 8
  %handle_ssa_defs.addr = alloca i8 (%union.gimple_statement_d*, i8*)*, align 8
  %analysis_stage.addr = alloca i8, align 1
  %data.addr = alloca i8*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %t = alloca %union.tree_node**, align 8
  %ret = alloca i8, align 1
  %bb_changed = alloca i8, align 1
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp10 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %assign_result = alloca i32, align 4
  %any = alloca i8, align 1
  %deleted = alloca i8, align 1
  %argp = alloca %union.tree_node**, align 8
  %dest = alloca %union.tree_node*, align 8
  %flags = alloca i32, align 4
  %lhs_ptr = alloca %union.tree_node**, align 8
  %op = alloca %union.tree_node**, align 8
  %op171 = alloca %union.tree_node**, align 8
  store i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)* %scan_expr, i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)** %scan_expr.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)** %scan_expr.addr, metadata !3930, metadata !DIExpression()), !dbg !3931
  store i32 (%union.gimple_statement_d**, %struct.gimple_stmt_iterator*, i8*)* %scan_assign, i32 (%union.gimple_statement_d**, %struct.gimple_stmt_iterator*, i8*)** %scan_assign.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (%union.gimple_statement_d**, %struct.gimple_stmt_iterator*, i8*)** %scan_assign.addr, metadata !3932, metadata !DIExpression()), !dbg !3933
  store i8 (%union.gimple_statement_d*, i8*)* %handle_ssa_defs, i8 (%union.gimple_statement_d*, i8*)** %handle_ssa_defs.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.gimple_statement_d*, i8*)** %handle_ssa_defs.addr, metadata !3934, metadata !DIExpression()), !dbg !3935
  store i8 %analysis_stage, i8* %analysis_stage.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %analysis_stage.addr, metadata !3936, metadata !DIExpression()), !dbg !3937
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3938, metadata !DIExpression()), !dbg !3939
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3940, metadata !DIExpression()), !dbg !3941
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3942, metadata !DIExpression()), !dbg !3943
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3944, metadata !DIExpression()), !dbg !3945
  call void @llvm.dbg.declare(metadata %union.tree_node*** %t, metadata !3946, metadata !DIExpression()), !dbg !3947
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !3948, metadata !DIExpression()), !dbg !3949
  store i8 0, i8* %ret, align 1, !dbg !3949
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3950
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3950
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3950
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3950
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3950
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3950
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !3950
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3950
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !3950
  br label %for.cond, !dbg !3950

for.cond:                                         ; preds = %for.inc203, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3952
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3952
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3952
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3952
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3952
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !3952
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3952
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !3952
  br i1 %cmp, label %for.body, label %for.end205, !dbg !3950

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8* %bb_changed, metadata !3954, metadata !DIExpression()), !dbg !3956
  store i8 0, i8* %bb_changed, align 1, !dbg !3956
  %8 = load i8 (%union.gimple_statement_d*, i8*)*, i8 (%union.gimple_statement_d*, i8*)** %handle_ssa_defs.addr, align 8, !dbg !3957
  %tobool = icmp ne i8 (%union.gimple_statement_d*, i8*)* %8, null, !dbg !3957
  br i1 %tobool, label %if.then, label %if.end, !dbg !3959

if.then:                                          ; preds = %for.body
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3960
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %9), !dbg !3962
  %10 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3962
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3962
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !3962
  br label %for.cond3, !dbg !3963

for.cond3:                                        ; preds = %for.inc, %if.then
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3964
  %tobool4 = icmp ne i8 %call, 0, !dbg !3966
  %lnot = xor i1 %tobool4, true, !dbg !3966
  br i1 %lnot, label %for.body5, label %for.end, !dbg !3967

for.body5:                                        ; preds = %for.cond3
  %12 = load i8 (%union.gimple_statement_d*, i8*)*, i8 (%union.gimple_statement_d*, i8*)** %handle_ssa_defs.addr, align 8, !dbg !3968
  %call6 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3969
  %13 = load i8*, i8** %data.addr, align 8, !dbg !3970
  %call7 = call zeroext i8 %12(%union.gimple_statement_d* %call6, i8* %13), !dbg !3968
  %conv = zext i8 %call7 to i32, !dbg !3968
  %14 = load i8, i8* %ret, align 1, !dbg !3971
  %conv8 = zext i8 %14 to i32, !dbg !3971
  %or = or i32 %conv8, %conv, !dbg !3971
  %conv9 = trunc i32 %or to i8, !dbg !3971
  store i8 %conv9, i8* %ret, align 1, !dbg !3971
  br label %for.inc, !dbg !3972

for.inc:                                          ; preds = %for.body5
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3973
  br label %for.cond3, !dbg !3974, !llvm.loop !3975

for.end:                                          ; preds = %for.cond3
  br label %if.end, !dbg !3976

if.end:                                           ; preds = %for.end, %for.body
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3977
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp10, %struct.basic_block_def* %15), !dbg !3978
  %16 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3978
  %17 = bitcast %struct.gimple_stmt_iterator* %tmp10 to i8*, !dbg !3978
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 24, i1 false), !dbg !3978
  br label %while.cond, !dbg !3979

while.cond:                                       ; preds = %if.end192, %if.end
  %call11 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3980
  %tobool12 = icmp ne i8 %call11, 0, !dbg !3981
  %lnot13 = xor i1 %tobool12, true, !dbg !3981
  br i1 %lnot13, label %while.body, label %while.end, !dbg !3979

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3982, metadata !DIExpression()), !dbg !3984
  %call14 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3985
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %stmt, align 8, !dbg !3984
  call void @llvm.dbg.declare(metadata i32* %assign_result, metadata !3986, metadata !DIExpression()), !dbg !3987
  call void @llvm.dbg.declare(metadata i8* %any, metadata !3988, metadata !DIExpression()), !dbg !3989
  store i8 0, i8* %any, align 1, !dbg !3989
  call void @llvm.dbg.declare(metadata i8* %deleted, metadata !3990, metadata !DIExpression()), !dbg !3991
  store i8 0, i8* %deleted, align 1, !dbg !3991
  %18 = load i8, i8* %analysis_stage.addr, align 1, !dbg !3992
  %conv15 = zext i8 %18 to i32, !dbg !3992
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !3992
  br i1 %tobool16, label %land.lhs.true, label %if.end24, !dbg !3994

land.lhs.true:                                    ; preds = %while.body
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !3995
  %tobool17 = icmp ne %struct.bitmap_head_def* %19, null, !dbg !3995
  br i1 %tobool17, label %land.lhs.true18, label %if.end24, !dbg !3996

land.lhs.true18:                                  ; preds = %land.lhs.true
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3997
  %call19 = call zeroext i8 @stmt_can_throw_external(%union.gimple_statement_d* %20), !dbg !3998
  %conv20 = zext i8 %call19 to i32, !dbg !3998
  %tobool21 = icmp ne i32 %conv20, 0, !dbg !3998
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !3999

if.then22:                                        ; preds = %land.lhs.true18
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !4000
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4001
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 9, !dbg !4002
  %23 = load i32, i32* %index, align 8, !dbg !4002
  %call23 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %21, i32 %23), !dbg !4003
  br label %if.end24, !dbg !4003

if.end24:                                         ; preds = %if.then22, %land.lhs.true18, %land.lhs.true, %while.body
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4004
  %call25 = call i32 @gimple_code(%union.gimple_statement_d* %24), !dbg !4005
  switch i32 %call25, label %sw.default [
    i32 9, label %sw.bb
    i32 6, label %sw.bb44
    i32 8, label %sw.bb65
    i32 7, label %sw.bb142
  ], !dbg !4006

sw.bb:                                            ; preds = %if.end24
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4007
  %call26 = call %union.tree_node** @gimple_return_retval_ptr(%union.gimple_statement_d* %25), !dbg !4009
  store %union.tree_node** %call26, %union.tree_node*** %t, align 8, !dbg !4010
  %26 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !4011
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !4013
  %cmp27 = icmp ne %union.tree_node* %27, null, !dbg !4014
  br i1 %cmp27, label %if.then29, label %if.end35, !dbg !4015

if.then29:                                        ; preds = %sw.bb
  %28 = load i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)*, i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)** %scan_expr.addr, align 8, !dbg !4016
  %29 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !4017
  %30 = load i8*, i8** %data.addr, align 8, !dbg !4018
  %call30 = call zeroext i8 %28(%union.tree_node** %29, %struct.gimple_stmt_iterator* %gsi, i8 zeroext 0, i8* %30), !dbg !4016
  %conv31 = zext i8 %call30 to i32, !dbg !4016
  %31 = load i8, i8* %any, align 1, !dbg !4019
  %conv32 = zext i8 %31 to i32, !dbg !4019
  %or33 = or i32 %conv32, %conv31, !dbg !4019
  %conv34 = trunc i32 %or33 to i8, !dbg !4019
  store i8 %conv34, i8* %any, align 1, !dbg !4019
  br label %if.end35, !dbg !4020

if.end35:                                         ; preds = %if.then29, %sw.bb
  %32 = load i8, i8* %analysis_stage.addr, align 1, !dbg !4021
  %conv36 = zext i8 %32 to i32, !dbg !4021
  %tobool37 = icmp ne i32 %conv36, 0, !dbg !4021
  br i1 %tobool37, label %land.lhs.true38, label %if.end43, !dbg !4023

land.lhs.true38:                                  ; preds = %if.end35
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !4024
  %tobool39 = icmp ne %struct.bitmap_head_def* %33, null, !dbg !4024
  br i1 %tobool39, label %if.then40, label %if.end43, !dbg !4025

if.then40:                                        ; preds = %land.lhs.true38
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !4026
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4027
  %index41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 9, !dbg !4028
  %36 = load i32, i32* %index41, align 8, !dbg !4028
  %call42 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %34, i32 %36), !dbg !4029
  br label %if.end43, !dbg !4029

if.end43:                                         ; preds = %if.then40, %land.lhs.true38, %if.end35
  br label %sw.epilog, !dbg !4030

sw.bb44:                                          ; preds = %if.end24
  %37 = load i32 (%union.gimple_statement_d**, %struct.gimple_stmt_iterator*, i8*)*, i32 (%union.gimple_statement_d**, %struct.gimple_stmt_iterator*, i8*)** %scan_assign.addr, align 8, !dbg !4031
  %38 = load i8*, i8** %data.addr, align 8, !dbg !4032
  %call45 = call i32 %37(%union.gimple_statement_d** %stmt, %struct.gimple_stmt_iterator* %gsi, i8* %38), !dbg !4031
  store i32 %call45, i32* %assign_result, align 4, !dbg !4033
  %39 = load i32, i32* %assign_result, align 4, !dbg !4034
  %cmp46 = icmp eq i32 %39, 1, !dbg !4035
  %conv47 = zext i1 %cmp46 to i32, !dbg !4035
  %40 = load i8, i8* %any, align 1, !dbg !4036
  %conv48 = zext i8 %40 to i32, !dbg !4036
  %or49 = or i32 %conv48, %conv47, !dbg !4036
  %conv50 = trunc i32 %or49 to i8, !dbg !4036
  store i8 %conv50, i8* %any, align 1, !dbg !4036
  %41 = load i32, i32* %assign_result, align 4, !dbg !4037
  %cmp51 = icmp eq i32 %41, 2, !dbg !4038
  %conv52 = zext i1 %cmp51 to i32, !dbg !4038
  %conv53 = trunc i32 %conv52 to i8, !dbg !4037
  store i8 %conv53, i8* %deleted, align 1, !dbg !4039
  %42 = load i8 (%union.gimple_statement_d*, i8*)*, i8 (%union.gimple_statement_d*, i8*)** %handle_ssa_defs.addr, align 8, !dbg !4040
  %tobool54 = icmp ne i8 (%union.gimple_statement_d*, i8*)* %42, null, !dbg !4040
  br i1 %tobool54, label %land.lhs.true55, label %if.end64, !dbg !4042

land.lhs.true55:                                  ; preds = %sw.bb44
  %43 = load i32, i32* %assign_result, align 4, !dbg !4043
  %cmp56 = icmp ne i32 %43, 2, !dbg !4044
  br i1 %cmp56, label %if.then58, label %if.end64, !dbg !4045

if.then58:                                        ; preds = %land.lhs.true55
  %44 = load i8 (%union.gimple_statement_d*, i8*)*, i8 (%union.gimple_statement_d*, i8*)** %handle_ssa_defs.addr, align 8, !dbg !4046
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4047
  %46 = load i8*, i8** %data.addr, align 8, !dbg !4048
  %call59 = call zeroext i8 %44(%union.gimple_statement_d* %45, i8* %46), !dbg !4046
  %conv60 = zext i8 %call59 to i32, !dbg !4046
  %47 = load i8, i8* %any, align 1, !dbg !4049
  %conv61 = zext i8 %47 to i32, !dbg !4049
  %or62 = or i32 %conv61, %conv60, !dbg !4049
  %conv63 = trunc i32 %or62 to i8, !dbg !4049
  store i8 %conv63, i8* %any, align 1, !dbg !4049
  br label %if.end64, !dbg !4050

if.end64:                                         ; preds = %if.then58, %land.lhs.true55, %sw.bb44
  br label %sw.epilog, !dbg !4051

sw.bb65:                                          ; preds = %if.end24
  store i32 0, i32* %i, align 4, !dbg !4052
  br label %for.cond66, !dbg !4054

for.cond66:                                       ; preds = %for.inc77, %sw.bb65
  %48 = load i32, i32* %i, align 4, !dbg !4055
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4057
  %call67 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %49), !dbg !4058
  %cmp68 = icmp ult i32 %48, %call67, !dbg !4059
  br i1 %cmp68, label %for.body70, label %for.end78, !dbg !4060

for.body70:                                       ; preds = %for.cond66
  call void @llvm.dbg.declare(metadata %union.tree_node*** %argp, metadata !4061, metadata !DIExpression()), !dbg !4063
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4064
  %51 = load i32, i32* %i, align 4, !dbg !4065
  %call71 = call %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %50, i32 %51), !dbg !4066
  store %union.tree_node** %call71, %union.tree_node*** %argp, align 8, !dbg !4063
  %52 = load i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)*, i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)** %scan_expr.addr, align 8, !dbg !4067
  %53 = load %union.tree_node**, %union.tree_node*** %argp, align 8, !dbg !4068
  %54 = load i8*, i8** %data.addr, align 8, !dbg !4069
  %call72 = call zeroext i8 %52(%union.tree_node** %53, %struct.gimple_stmt_iterator* %gsi, i8 zeroext 0, i8* %54), !dbg !4067
  %conv73 = zext i8 %call72 to i32, !dbg !4067
  %55 = load i8, i8* %any, align 1, !dbg !4070
  %conv74 = zext i8 %55 to i32, !dbg !4070
  %or75 = or i32 %conv74, %conv73, !dbg !4070
  %conv76 = trunc i32 %or75 to i8, !dbg !4070
  store i8 %conv76, i8* %any, align 1, !dbg !4070
  br label %for.inc77, !dbg !4071

for.inc77:                                        ; preds = %for.body70
  %56 = load i32, i32* %i, align 4, !dbg !4072
  %inc = add i32 %56, 1, !dbg !4072
  store i32 %inc, i32* %i, align 4, !dbg !4072
  br label %for.cond66, !dbg !4073, !llvm.loop !4074

for.end78:                                        ; preds = %for.cond66
  %57 = load i8, i8* %analysis_stage.addr, align 1, !dbg !4076
  %conv79 = zext i8 %57 to i32, !dbg !4076
  %tobool80 = icmp ne i32 %conv79, 0, !dbg !4076
  br i1 %tobool80, label %land.lhs.true81, label %if.end118, !dbg !4078

land.lhs.true81:                                  ; preds = %for.end78
  %58 = load i32, i32* @sra_mode, align 4, !dbg !4079
  %cmp82 = icmp eq i32 %58, 0, !dbg !4080
  br i1 %cmp82, label %if.then84, label %if.end118, !dbg !4081

if.then84:                                        ; preds = %land.lhs.true81
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest, metadata !4082, metadata !DIExpression()), !dbg !4084
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4085
  %call85 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %59), !dbg !4086
  store %union.tree_node* %call85, %union.tree_node** %dest, align 8, !dbg !4084
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !4087, metadata !DIExpression()), !dbg !4088
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4089
  %call86 = call i32 @gimple_call_flags(%union.gimple_statement_d* %60), !dbg !4090
  store i32 %call86, i32* %flags, align 4, !dbg !4088
  %61 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !4091
  %tobool87 = icmp ne %union.tree_node* %61, null, !dbg !4091
  br i1 %tobool87, label %if.then88, label %if.end109, !dbg !4093

if.then88:                                        ; preds = %if.then84
  %62 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !4094
  %function_decl = bitcast %union.tree_node* %62 to %struct.tree_function_decl*, !dbg !4094
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4094
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !4094
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !4094
  %bf.clear = and i32 %bf.lshr, 3, !dbg !4094
  %cmp89 = icmp eq i32 %bf.clear, 3, !dbg !4097
  br i1 %cmp89, label %land.lhs.true91, label %if.end98, !dbg !4098

land.lhs.true91:                                  ; preds = %if.then88
  %63 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !4099
  %function_decl92 = bitcast %union.tree_node* %63 to %struct.tree_function_decl*, !dbg !4099
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl92, i32 0, i32 5, !dbg !4099
  %bf.load93 = load i32, i32* %function_code, align 8, !dbg !4099
  %bf.clear94 = and i32 %bf.load93, 2047, !dbg !4099
  %cmp95 = icmp eq i32 %bf.clear94, 417, !dbg !4100
  br i1 %cmp95, label %if.then97, label %if.end98, !dbg !4101

if.then97:                                        ; preds = %land.lhs.true91
  store i8 1, i8* @encountered_apply_args, align 1, !dbg !4102
  br label %if.end98, !dbg !4103

if.end98:                                         ; preds = %if.then97, %land.lhs.true91, %if.then88
  %64 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !4104
  %call99 = call %struct.cgraph_node* @cgraph_get_node(%union.tree_node* %64), !dbg !4106
  %65 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4107
  %call100 = call %struct.cgraph_node* @cgraph_get_node(%union.tree_node* %65), !dbg !4108
  %cmp101 = icmp eq %struct.cgraph_node* %call99, %call100, !dbg !4109
  br i1 %cmp101, label %if.then103, label %if.end108, !dbg !4110

if.then103:                                       ; preds = %if.end98
  store i8 1, i8* @encountered_recursive_call, align 1, !dbg !4111
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4113
  %call104 = call zeroext i8 @callsite_has_enough_arguments_p(%union.gimple_statement_d* %66), !dbg !4115
  %tobool105 = icmp ne i8 %call104, 0, !dbg !4115
  br i1 %tobool105, label %if.end107, label %if.then106, !dbg !4116

if.then106:                                       ; preds = %if.then103
  store i8 1, i8* @encountered_unchangable_recursive_call, align 1, !dbg !4117
  br label %if.end107, !dbg !4118

if.end107:                                        ; preds = %if.then106, %if.then103
  br label %if.end108, !dbg !4119

if.end108:                                        ; preds = %if.end107, %if.end98
  br label %if.end109, !dbg !4120

if.end109:                                        ; preds = %if.end108, %if.then84
  %67 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !4121
  %tobool110 = icmp ne %struct.bitmap_head_def* %67, null, !dbg !4121
  br i1 %tobool110, label %land.lhs.true111, label %if.end117, !dbg !4123

land.lhs.true111:                                 ; preds = %if.end109
  %68 = load i32, i32* %flags, align 4, !dbg !4124
  %and = and i32 %68, 3, !dbg !4125
  %cmp112 = icmp eq i32 %and, 0, !dbg !4126
  br i1 %cmp112, label %if.then114, label %if.end117, !dbg !4127

if.then114:                                       ; preds = %land.lhs.true111
  %69 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !4128
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4129
  %index115 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %70, i32 0, i32 9, !dbg !4130
  %71 = load i32, i32* %index115, align 8, !dbg !4130
  %call116 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %69, i32 %71), !dbg !4131
  br label %if.end117, !dbg !4131

if.end117:                                        ; preds = %if.then114, %land.lhs.true111, %if.end109
  br label %if.end118, !dbg !4132

if.end118:                                        ; preds = %if.end117, %land.lhs.true81, %for.end78
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4133
  %call119 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %72), !dbg !4135
  %tobool120 = icmp ne %union.tree_node* %call119, null, !dbg !4135
  br i1 %tobool120, label %if.then121, label %if.end141, !dbg !4136

if.then121:                                       ; preds = %if.end118
  call void @llvm.dbg.declare(metadata %union.tree_node*** %lhs_ptr, metadata !4137, metadata !DIExpression()), !dbg !4139
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4140
  %call122 = call %union.tree_node** @gimple_call_lhs_ptr(%union.gimple_statement_d* %73), !dbg !4141
  store %union.tree_node** %call122, %union.tree_node*** %lhs_ptr, align 8, !dbg !4139
  %74 = load i8, i8* %analysis_stage.addr, align 1, !dbg !4142
  %tobool123 = icmp ne i8 %74, 0, !dbg !4142
  br i1 %tobool123, label %lor.lhs.false, label %if.then126, !dbg !4144

lor.lhs.false:                                    ; preds = %if.then121
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4145
  %76 = load %union.tree_node**, %union.tree_node*** %lhs_ptr, align 8, !dbg !4146
  %77 = load %union.tree_node*, %union.tree_node** %76, align 8, !dbg !4147
  %call124 = call zeroext i8 @disqualify_ops_if_throwing_stmt(%union.gimple_statement_d* %75, %union.tree_node* %77, %union.tree_node* null), !dbg !4148
  %tobool125 = icmp ne i8 %call124, 0, !dbg !4148
  br i1 %tobool125, label %if.end140, label %if.then126, !dbg !4149

if.then126:                                       ; preds = %lor.lhs.false, %if.then121
  %78 = load i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)*, i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)** %scan_expr.addr, align 8, !dbg !4150
  %79 = load %union.tree_node**, %union.tree_node*** %lhs_ptr, align 8, !dbg !4152
  %80 = load i8*, i8** %data.addr, align 8, !dbg !4153
  %call127 = call zeroext i8 %78(%union.tree_node** %79, %struct.gimple_stmt_iterator* %gsi, i8 zeroext 1, i8* %80), !dbg !4150
  %conv128 = zext i8 %call127 to i32, !dbg !4150
  %81 = load i8, i8* %any, align 1, !dbg !4154
  %conv129 = zext i8 %81 to i32, !dbg !4154
  %or130 = or i32 %conv129, %conv128, !dbg !4154
  %conv131 = trunc i32 %or130 to i8, !dbg !4154
  store i8 %conv131, i8* %any, align 1, !dbg !4154
  %82 = load i8 (%union.gimple_statement_d*, i8*)*, i8 (%union.gimple_statement_d*, i8*)** %handle_ssa_defs.addr, align 8, !dbg !4155
  %tobool132 = icmp ne i8 (%union.gimple_statement_d*, i8*)* %82, null, !dbg !4155
  br i1 %tobool132, label %if.then133, label %if.end139, !dbg !4157

if.then133:                                       ; preds = %if.then126
  %83 = load i8 (%union.gimple_statement_d*, i8*)*, i8 (%union.gimple_statement_d*, i8*)** %handle_ssa_defs.addr, align 8, !dbg !4158
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4159
  %85 = load i8*, i8** %data.addr, align 8, !dbg !4160
  %call134 = call zeroext i8 %83(%union.gimple_statement_d* %84, i8* %85), !dbg !4158
  %conv135 = zext i8 %call134 to i32, !dbg !4158
  %86 = load i8, i8* %any, align 1, !dbg !4161
  %conv136 = zext i8 %86 to i32, !dbg !4161
  %or137 = or i32 %conv136, %conv135, !dbg !4161
  %conv138 = trunc i32 %or137 to i8, !dbg !4161
  store i8 %conv138, i8* %any, align 1, !dbg !4161
  br label %if.end139, !dbg !4162

if.end139:                                        ; preds = %if.then133, %if.then126
  br label %if.end140, !dbg !4163

if.end140:                                        ; preds = %if.end139, %lor.lhs.false
  br label %if.end141, !dbg !4164

if.end141:                                        ; preds = %if.end140, %if.end118
  br label %sw.epilog, !dbg !4165

sw.bb142:                                         ; preds = %if.end24
  %87 = load i8, i8* %analysis_stage.addr, align 1, !dbg !4166
  %tobool143 = icmp ne i8 %87, 0, !dbg !4166
  br i1 %tobool143, label %if.then144, label %if.end151, !dbg !4168

if.then144:                                       ; preds = %sw.bb142
  %88 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4169
  %call145 = call zeroext i8 @walk_stmt_load_store_addr_ops(%union.gimple_statement_d* %88, i8* null, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* null, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* null, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* @asm_visit_addr), !dbg !4171
  %89 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !4172
  %tobool146 = icmp ne %struct.bitmap_head_def* %89, null, !dbg !4172
  br i1 %tobool146, label %if.then147, label %if.end150, !dbg !4174

if.then147:                                       ; preds = %if.then144
  %90 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !4175
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4176
  %index148 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %91, i32 0, i32 9, !dbg !4177
  %92 = load i32, i32* %index148, align 8, !dbg !4177
  %call149 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %90, i32 %92), !dbg !4178
  br label %if.end150, !dbg !4178

if.end150:                                        ; preds = %if.then147, %if.then144
  br label %if.end151, !dbg !4179

if.end151:                                        ; preds = %if.end150, %sw.bb142
  store i32 0, i32* %i, align 4, !dbg !4180
  br label %for.cond152, !dbg !4182

for.cond152:                                      ; preds = %for.inc163, %if.end151
  %93 = load i32, i32* %i, align 4, !dbg !4183
  %94 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4185
  %call153 = call i32 @gimple_asm_ninputs(%union.gimple_statement_d* %94), !dbg !4186
  %cmp154 = icmp ult i32 %93, %call153, !dbg !4187
  br i1 %cmp154, label %for.body156, label %for.end165, !dbg !4188

for.body156:                                      ; preds = %for.cond152
  call void @llvm.dbg.declare(metadata %union.tree_node*** %op, metadata !4189, metadata !DIExpression()), !dbg !4191
  %95 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4192
  %96 = load i32, i32* %i, align 4, !dbg !4192
  %call157 = call %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %95, i32 %96), !dbg !4192
  %list = bitcast %union.tree_node* %call157 to %struct.tree_list*, !dbg !4192
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !4192
  store %union.tree_node** %value, %union.tree_node*** %op, align 8, !dbg !4191
  %97 = load i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)*, i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)** %scan_expr.addr, align 8, !dbg !4193
  %98 = load %union.tree_node**, %union.tree_node*** %op, align 8, !dbg !4194
  %99 = load i8*, i8** %data.addr, align 8, !dbg !4195
  %call158 = call zeroext i8 %97(%union.tree_node** %98, %struct.gimple_stmt_iterator* %gsi, i8 zeroext 0, i8* %99), !dbg !4193
  %conv159 = zext i8 %call158 to i32, !dbg !4193
  %100 = load i8, i8* %any, align 1, !dbg !4196
  %conv160 = zext i8 %100 to i32, !dbg !4196
  %or161 = or i32 %conv160, %conv159, !dbg !4196
  %conv162 = trunc i32 %or161 to i8, !dbg !4196
  store i8 %conv162, i8* %any, align 1, !dbg !4196
  br label %for.inc163, !dbg !4197

for.inc163:                                       ; preds = %for.body156
  %101 = load i32, i32* %i, align 4, !dbg !4198
  %inc164 = add i32 %101, 1, !dbg !4198
  store i32 %inc164, i32* %i, align 4, !dbg !4198
  br label %for.cond152, !dbg !4199, !llvm.loop !4200

for.end165:                                       ; preds = %for.cond152
  store i32 0, i32* %i, align 4, !dbg !4202
  br label %for.cond166, !dbg !4204

for.cond166:                                      ; preds = %for.inc180, %for.end165
  %102 = load i32, i32* %i, align 4, !dbg !4205
  %103 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4207
  %call167 = call i32 @gimple_asm_noutputs(%union.gimple_statement_d* %103), !dbg !4208
  %cmp168 = icmp ult i32 %102, %call167, !dbg !4209
  br i1 %cmp168, label %for.body170, label %for.end182, !dbg !4210

for.body170:                                      ; preds = %for.cond166
  call void @llvm.dbg.declare(metadata %union.tree_node*** %op171, metadata !4211, metadata !DIExpression()), !dbg !4213
  %104 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4214
  %105 = load i32, i32* %i, align 4, !dbg !4214
  %call172 = call %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %104, i32 %105), !dbg !4214
  %list173 = bitcast %union.tree_node* %call172 to %struct.tree_list*, !dbg !4214
  %value174 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list173, i32 0, i32 2, !dbg !4214
  store %union.tree_node** %value174, %union.tree_node*** %op171, align 8, !dbg !4213
  %106 = load i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)*, i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)** %scan_expr.addr, align 8, !dbg !4215
  %107 = load %union.tree_node**, %union.tree_node*** %op171, align 8, !dbg !4216
  %108 = load i8*, i8** %data.addr, align 8, !dbg !4217
  %call175 = call zeroext i8 %106(%union.tree_node** %107, %struct.gimple_stmt_iterator* %gsi, i8 zeroext 1, i8* %108), !dbg !4215
  %conv176 = zext i8 %call175 to i32, !dbg !4215
  %109 = load i8, i8* %any, align 1, !dbg !4218
  %conv177 = zext i8 %109 to i32, !dbg !4218
  %or178 = or i32 %conv177, %conv176, !dbg !4218
  %conv179 = trunc i32 %or178 to i8, !dbg !4218
  store i8 %conv179, i8* %any, align 1, !dbg !4218
  br label %for.inc180, !dbg !4219

for.inc180:                                       ; preds = %for.body170
  %110 = load i32, i32* %i, align 4, !dbg !4220
  %inc181 = add i32 %110, 1, !dbg !4220
  store i32 %inc181, i32* %i, align 4, !dbg !4220
  br label %for.cond166, !dbg !4221, !llvm.loop !4222

for.end182:                                       ; preds = %for.cond166
  br label %sw.epilog, !dbg !4224

sw.default:                                       ; preds = %if.end24
  br label %sw.epilog, !dbg !4225

sw.epilog:                                        ; preds = %sw.default, %for.end182, %if.end141, %if.end64, %if.end43
  %111 = load i8, i8* %any, align 1, !dbg !4226
  %tobool183 = icmp ne i8 %111, 0, !dbg !4226
  br i1 %tobool183, label %if.then184, label %if.end189, !dbg !4228

if.then184:                                       ; preds = %sw.epilog
  store i8 1, i8* %ret, align 1, !dbg !4229
  %112 = load i8, i8* %analysis_stage.addr, align 1, !dbg !4231
  %tobool185 = icmp ne i8 %112, 0, !dbg !4231
  br i1 %tobool185, label %if.end188, label %if.then186, !dbg !4233

if.then186:                                       ; preds = %if.then184
  store i8 1, i8* %bb_changed, align 1, !dbg !4234
  %113 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4236
  call void @update_stmt(%union.gimple_statement_d* %113), !dbg !4237
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4238
  %call187 = call zeroext i8 @maybe_clean_eh_stmt(%union.gimple_statement_d* %114), !dbg !4239
  br label %if.end188, !dbg !4240

if.end188:                                        ; preds = %if.then186, %if.then184
  br label %if.end189, !dbg !4241

if.end189:                                        ; preds = %if.end188, %sw.epilog
  %115 = load i8, i8* %deleted, align 1, !dbg !4242
  %tobool190 = icmp ne i8 %115, 0, !dbg !4242
  br i1 %tobool190, label %if.then191, label %if.else, !dbg !4244

if.then191:                                       ; preds = %if.end189
  store i8 1, i8* %bb_changed, align 1, !dbg !4245
  br label %if.end192, !dbg !4246

if.else:                                          ; preds = %if.end189
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4247
  store i8 1, i8* %ret, align 1, !dbg !4249
  br label %if.end192

if.end192:                                        ; preds = %if.else, %if.then191
  br label %while.cond, !dbg !3979, !llvm.loop !4250

while.end:                                        ; preds = %while.cond
  %116 = load i8, i8* %analysis_stage.addr, align 1, !dbg !4252
  %tobool193 = icmp ne i8 %116, 0, !dbg !4252
  br i1 %tobool193, label %if.end202, label %land.lhs.true194, !dbg !4254

land.lhs.true194:                                 ; preds = %while.end
  %117 = load i8, i8* %bb_changed, align 1, !dbg !4255
  %conv195 = zext i8 %117 to i32, !dbg !4255
  %tobool196 = icmp ne i32 %conv195, 0, !dbg !4255
  br i1 %tobool196, label %land.lhs.true197, label %if.end202, !dbg !4256

land.lhs.true197:                                 ; preds = %land.lhs.true194
  %118 = load i32, i32* @sra_mode, align 4, !dbg !4257
  %cmp198 = icmp eq i32 %118, 0, !dbg !4258
  br i1 %cmp198, label %if.then200, label %if.end202, !dbg !4259

if.then200:                                       ; preds = %land.lhs.true197
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4260
  %call201 = call zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def* %119), !dbg !4261
  br label %if.end202, !dbg !4261

if.end202:                                        ; preds = %if.then200, %land.lhs.true197, %land.lhs.true194, %while.end
  br label %for.inc203, !dbg !4262

for.inc203:                                       ; preds = %if.end202
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3952
  %next_bb204 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %120, i32 0, i32 6, !dbg !3952
  %121 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb204, align 8, !dbg !3952
  store %struct.basic_block_def* %121, %struct.basic_block_def** %bb, align 8, !dbg !3952
  br label %for.cond, !dbg !3952, !llvm.loop !4263

for.end205:                                       ; preds = %for.cond
  %122 = load i8, i8* %ret, align 1, !dbg !4265
  ret i8 %122, !dbg !4266
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @build_access_from_expr(%union.tree_node** %expr_ptr, %struct.gimple_stmt_iterator* %gsi, i8 zeroext %write, i8* %data) #0 !dbg !4267 {
entry:
  %retval = alloca i8, align 1
  %expr_ptr.addr = alloca %union.tree_node**, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %write.addr = alloca i8, align 1
  %data.addr = alloca i8*, align 8
  %access = alloca %struct.access*, align 8
  store %union.tree_node** %expr_ptr, %union.tree_node*** %expr_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_ptr.addr, metadata !4268, metadata !DIExpression()), !dbg !4269
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !4270, metadata !DIExpression()), !dbg !4271
  store i8 %write, i8* %write.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %write.addr, metadata !4272, metadata !DIExpression()), !dbg !4273
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4274, metadata !DIExpression()), !dbg !4275
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !4276, metadata !DIExpression()), !dbg !4277
  %0 = load %union.tree_node**, %union.tree_node*** %expr_ptr.addr, align 8, !dbg !4278
  %1 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4279
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %1), !dbg !4280
  %2 = load i8, i8* %write.addr, align 1, !dbg !4281
  %call1 = call %struct.access* @build_access_from_expr_1(%union.tree_node** %0, %union.gimple_statement_d* %call, i8 zeroext %2), !dbg !4282
  store %struct.access* %call1, %struct.access** %access, align 8, !dbg !4283
  %3 = load %struct.access*, %struct.access** %access, align 8, !dbg !4284
  %tobool = icmp ne %struct.access* %3, null, !dbg !4284
  br i1 %tobool, label %if.then, label %if.end5, !dbg !4286

if.then:                                          ; preds = %entry
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cannot_scalarize_away_bitmap, align 8, !dbg !4287
  %tobool2 = icmp ne %struct.bitmap_head_def* %4, null, !dbg !4287
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !4290

if.then3:                                         ; preds = %if.then
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cannot_scalarize_away_bitmap, align 8, !dbg !4291
  %6 = load %struct.access*, %struct.access** %access, align 8, !dbg !4292
  %base = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 2, !dbg !4292
  %7 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !4292
  %decl_minimal = bitcast %union.tree_node* %7 to %struct.tree_decl_minimal*, !dbg !4292
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !4292
  %8 = load i32, i32* %uid, align 4, !dbg !4292
  %call4 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %5, i32 %8), !dbg !4293
  br label %if.end, !dbg !4293

if.end:                                           ; preds = %if.then3, %if.then
  store i8 1, i8* %retval, align 1, !dbg !4294
  br label %return, !dbg !4294

if.end5:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4295
  br label %return, !dbg !4295

return:                                           ; preds = %if.end5, %if.end
  %9 = load i8, i8* %retval, align 1, !dbg !4296
  ret i8 %9, !dbg !4296
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @build_accesses_from_assign(%union.gimple_statement_d** %stmt_ptr, %struct.gimple_stmt_iterator* %gsi, i8* %data) #0 !dbg !4297 {
entry:
  %retval = alloca i32, align 4
  %stmt_ptr.addr = alloca %union.gimple_statement_d**, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %data.addr = alloca i8*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %lhs_ptr = alloca %union.tree_node**, align 8
  %rhs_ptr = alloca %union.tree_node**, align 8
  %lacc = alloca %struct.access*, align 8
  %racc = alloca %struct.access*, align 8
  %link = alloca %struct.assign_link*, align 8
  store %union.gimple_statement_d** %stmt_ptr, %union.gimple_statement_d*** %stmt_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmt_ptr.addr, metadata !4298, metadata !DIExpression()), !dbg !4299
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !4300, metadata !DIExpression()), !dbg !4301
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4302, metadata !DIExpression()), !dbg !4303
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4304, metadata !DIExpression()), !dbg !4305
  %0 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt_ptr.addr, align 8, !dbg !4306
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %0, align 8, !dbg !4307
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !4305
  call void @llvm.dbg.declare(metadata %union.tree_node*** %lhs_ptr, metadata !4308, metadata !DIExpression()), !dbg !4309
  call void @llvm.dbg.declare(metadata %union.tree_node*** %rhs_ptr, metadata !4310, metadata !DIExpression()), !dbg !4311
  call void @llvm.dbg.declare(metadata %struct.access** %lacc, metadata !4312, metadata !DIExpression()), !dbg !4313
  call void @llvm.dbg.declare(metadata %struct.access** %racc, metadata !4314, metadata !DIExpression()), !dbg !4315
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4316
  %call = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %2), !dbg !4318
  %tobool = icmp ne i8 %call, 0, !dbg !4318
  br i1 %tobool, label %if.end, label %if.then, !dbg !4319

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4320
  br label %return, !dbg !4320

if.end:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4321
  %call1 = call %union.tree_node** @gimple_assign_lhs_ptr(%union.gimple_statement_d* %3), !dbg !4322
  store %union.tree_node** %call1, %union.tree_node*** %lhs_ptr, align 8, !dbg !4323
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4324
  %call2 = call %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %4), !dbg !4325
  store %union.tree_node** %call2, %union.tree_node*** %rhs_ptr, align 8, !dbg !4326
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4327
  %6 = load %union.tree_node**, %union.tree_node*** %lhs_ptr, align 8, !dbg !4329
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !4330
  %8 = load %union.tree_node**, %union.tree_node*** %rhs_ptr, align 8, !dbg !4331
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !4332
  %call3 = call zeroext i8 @disqualify_ops_if_throwing_stmt(%union.gimple_statement_d* %5, %union.tree_node* %7, %union.tree_node* %9), !dbg !4333
  %tobool4 = icmp ne i8 %call3, 0, !dbg !4333
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !4334

if.then5:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !4335
  br label %return, !dbg !4335

if.end6:                                          ; preds = %if.end
  %10 = load %union.tree_node**, %union.tree_node*** %rhs_ptr, align 8, !dbg !4336
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4337
  %call7 = call %struct.access* @build_access_from_expr_1(%union.tree_node** %10, %union.gimple_statement_d* %11, i8 zeroext 0), !dbg !4338
  store %struct.access* %call7, %struct.access** %racc, align 8, !dbg !4339
  %12 = load %union.tree_node**, %union.tree_node*** %lhs_ptr, align 8, !dbg !4340
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4341
  %call8 = call %struct.access* @build_access_from_expr_1(%union.tree_node** %12, %union.gimple_statement_d* %13, i8 zeroext 1), !dbg !4342
  store %struct.access* %call8, %struct.access** %lacc, align 8, !dbg !4343
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @should_scalarize_away_bitmap, align 8, !dbg !4344
  %tobool9 = icmp ne %struct.bitmap_head_def* %14, null, !dbg !4344
  br i1 %tobool9, label %land.lhs.true, label %if.end19, !dbg !4346

land.lhs.true:                                    ; preds = %if.end6
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4347
  %call10 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %15), !dbg !4348
  %tobool11 = icmp ne i8 %call10, 0, !dbg !4348
  br i1 %tobool11, label %if.end19, label %land.lhs.true12, !dbg !4349

land.lhs.true12:                                  ; preds = %land.lhs.true
  %16 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4350
  %tobool13 = icmp ne %struct.access* %16, null, !dbg !4350
  br i1 %tobool13, label %land.lhs.true14, label %if.end19, !dbg !4351

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %17 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4352
  %type = getelementptr inbounds %struct.access, %struct.access* %17, i32 0, i32 4, !dbg !4353
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4353
  %call15 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %18), !dbg !4354
  %tobool16 = icmp ne i8 %call15, 0, !dbg !4354
  br i1 %tobool16, label %if.end19, label %if.then17, !dbg !4355

if.then17:                                        ; preds = %land.lhs.true14
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @should_scalarize_away_bitmap, align 8, !dbg !4356
  %20 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4357
  %base = getelementptr inbounds %struct.access, %struct.access* %20, i32 0, i32 2, !dbg !4357
  %21 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !4357
  %decl_minimal = bitcast %union.tree_node* %21 to %struct.tree_decl_minimal*, !dbg !4357
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !4357
  %22 = load i32, i32* %uid, align 4, !dbg !4357
  %call18 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %19, i32 %22), !dbg !4358
  br label %if.end19, !dbg !4358

if.end19:                                         ; preds = %if.then17, %land.lhs.true14, %land.lhs.true12, %land.lhs.true, %if.end6
  %23 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4359
  %tobool20 = icmp ne %struct.access* %23, null, !dbg !4359
  br i1 %tobool20, label %land.lhs.true21, label %if.end77, !dbg !4361

land.lhs.true21:                                  ; preds = %if.end19
  %24 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4362
  %tobool22 = icmp ne %struct.access* %24, null, !dbg !4362
  br i1 %tobool22, label %land.lhs.true23, label %if.end77, !dbg !4363

land.lhs.true23:                                  ; preds = %land.lhs.true21
  %25 = load i32, i32* @sra_mode, align 4, !dbg !4364
  %cmp = icmp eq i32 %25, 1, !dbg !4365
  br i1 %cmp, label %land.lhs.true25, label %lor.lhs.false, !dbg !4366

lor.lhs.false:                                    ; preds = %land.lhs.true23
  %26 = load i32, i32* @sra_mode, align 4, !dbg !4367
  %cmp24 = icmp eq i32 %26, 2, !dbg !4368
  br i1 %cmp24, label %land.lhs.true25, label %if.end77, !dbg !4369

land.lhs.true25:                                  ; preds = %lor.lhs.false, %land.lhs.true23
  %27 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4370
  %grp_unscalarizable_region = getelementptr inbounds %struct.access, %struct.access* %27, i32 0, i32 14, !dbg !4371
  %bf.load = load i16, i16* %grp_unscalarizable_region, align 8, !dbg !4371
  %bf.lshr = lshr i16 %bf.load, 7, !dbg !4371
  %bf.clear = and i16 %bf.lshr, 1, !dbg !4371
  %bf.cast = zext i16 %bf.clear to i32, !dbg !4371
  %tobool26 = icmp ne i32 %bf.cast, 0, !dbg !4370
  br i1 %tobool26, label %if.end77, label %land.lhs.true27, !dbg !4372

land.lhs.true27:                                  ; preds = %land.lhs.true25
  %28 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4373
  %grp_unscalarizable_region28 = getelementptr inbounds %struct.access, %struct.access* %28, i32 0, i32 14, !dbg !4374
  %bf.load29 = load i16, i16* %grp_unscalarizable_region28, align 8, !dbg !4374
  %bf.lshr30 = lshr i16 %bf.load29, 7, !dbg !4374
  %bf.clear31 = and i16 %bf.lshr30, 1, !dbg !4374
  %bf.cast32 = zext i16 %bf.clear31 to i32, !dbg !4374
  %tobool33 = icmp ne i32 %bf.cast32, 0, !dbg !4373
  br i1 %tobool33, label %if.end77, label %land.lhs.true34, !dbg !4375

land.lhs.true34:                                  ; preds = %land.lhs.true27
  %29 = load %union.tree_node**, %union.tree_node*** %lhs_ptr, align 8, !dbg !4376
  %30 = load %union.tree_node*, %union.tree_node** %29, align 8, !dbg !4376
  %common = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !4376
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4376
  %31 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !4376
  %base36 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !4376
  %32 = bitcast %struct.tree_base* %base36 to i64*, !dbg !4376
  %bf.load37 = load i64, i64* %32, align 8, !dbg !4376
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !4376
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !4376
  %cmp40 = icmp eq i32 %bf.cast39, 15, !dbg !4376
  br i1 %cmp40, label %land.lhs.true65, label %lor.lhs.false41, !dbg !4376

lor.lhs.false41:                                  ; preds = %land.lhs.true34
  %33 = load %union.tree_node**, %union.tree_node*** %lhs_ptr, align 8, !dbg !4376
  %34 = load %union.tree_node*, %union.tree_node** %33, align 8, !dbg !4376
  %common42 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !4376
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !4376
  %35 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !4376
  %base44 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !4376
  %36 = bitcast %struct.tree_base* %base44 to i64*, !dbg !4376
  %bf.load45 = load i64, i64* %36, align 8, !dbg !4376
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !4376
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !4376
  %cmp48 = icmp eq i32 %bf.cast47, 16, !dbg !4376
  br i1 %cmp48, label %land.lhs.true65, label %lor.lhs.false49, !dbg !4376

lor.lhs.false49:                                  ; preds = %lor.lhs.false41
  %37 = load %union.tree_node**, %union.tree_node*** %lhs_ptr, align 8, !dbg !4376
  %38 = load %union.tree_node*, %union.tree_node** %37, align 8, !dbg !4376
  %common50 = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !4376
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2, !dbg !4376
  %39 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !4376
  %base52 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !4376
  %40 = bitcast %struct.tree_base* %base52 to i64*, !dbg !4376
  %bf.load53 = load i64, i64* %40, align 8, !dbg !4376
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !4376
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !4376
  %cmp56 = icmp eq i32 %bf.cast55, 17, !dbg !4376
  br i1 %cmp56, label %land.lhs.true65, label %lor.lhs.false57, !dbg !4376

lor.lhs.false57:                                  ; preds = %lor.lhs.false49
  %41 = load %union.tree_node**, %union.tree_node*** %lhs_ptr, align 8, !dbg !4376
  %42 = load %union.tree_node*, %union.tree_node** %41, align 8, !dbg !4376
  %common58 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !4376
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2, !dbg !4376
  %43 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !4376
  %base60 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !4376
  %44 = bitcast %struct.tree_base* %base60 to i64*, !dbg !4376
  %bf.load61 = load i64, i64* %44, align 8, !dbg !4376
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !4376
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !4376
  %cmp64 = icmp eq i32 %bf.cast63, 18, !dbg !4376
  br i1 %cmp64, label %land.lhs.true65, label %if.end77, !dbg !4377

land.lhs.true65:                                  ; preds = %lor.lhs.false57, %lor.lhs.false49, %lor.lhs.false41, %land.lhs.true34
  %45 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4378
  %size = getelementptr inbounds %struct.access, %struct.access* %45, i32 0, i32 1, !dbg !4379
  %46 = load i64, i64* %size, align 8, !dbg !4379
  %47 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4380
  %size66 = getelementptr inbounds %struct.access, %struct.access* %47, i32 0, i32 1, !dbg !4381
  %48 = load i64, i64* %size66, align 8, !dbg !4381
  %cmp67 = icmp eq i64 %46, %48, !dbg !4382
  br i1 %cmp67, label %land.lhs.true68, label %if.end77, !dbg !4383

land.lhs.true68:                                  ; preds = %land.lhs.true65
  %49 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4384
  %type69 = getelementptr inbounds %struct.access, %struct.access* %49, i32 0, i32 4, !dbg !4385
  %50 = load %union.tree_node*, %union.tree_node** %type69, align 8, !dbg !4385
  %51 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4386
  %type70 = getelementptr inbounds %struct.access, %struct.access* %51, i32 0, i32 4, !dbg !4387
  %52 = load %union.tree_node*, %union.tree_node** %type70, align 8, !dbg !4387
  %call71 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %50, %union.tree_node* %52), !dbg !4388
  %conv = zext i8 %call71 to i32, !dbg !4388
  %tobool72 = icmp ne i32 %conv, 0, !dbg !4388
  br i1 %tobool72, label %if.then73, label %if.end77, !dbg !4389

if.then73:                                        ; preds = %land.lhs.true68
  call void @llvm.dbg.declare(metadata %struct.assign_link** %link, metadata !4390, metadata !DIExpression()), !dbg !4392
  %53 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @link_pool, align 8, !dbg !4393
  %call74 = call i8* @pool_alloc(%struct.alloc_pool_def* %53), !dbg !4394
  %54 = bitcast i8* %call74 to %struct.assign_link*, !dbg !4395
  store %struct.assign_link* %54, %struct.assign_link** %link, align 8, !dbg !4396
  %55 = load %struct.assign_link*, %struct.assign_link** %link, align 8, !dbg !4397
  %56 = bitcast %struct.assign_link* %55 to i8*, !dbg !4398
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 24, i1 false), !dbg !4398
  %57 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4399
  %58 = load %struct.assign_link*, %struct.assign_link** %link, align 8, !dbg !4400
  %lacc75 = getelementptr inbounds %struct.assign_link, %struct.assign_link* %58, i32 0, i32 0, !dbg !4401
  store %struct.access* %57, %struct.access** %lacc75, align 8, !dbg !4402
  %59 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4403
  %60 = load %struct.assign_link*, %struct.assign_link** %link, align 8, !dbg !4404
  %racc76 = getelementptr inbounds %struct.assign_link, %struct.assign_link* %60, i32 0, i32 1, !dbg !4405
  store %struct.access* %59, %struct.access** %racc76, align 8, !dbg !4406
  %61 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4407
  %62 = load %struct.assign_link*, %struct.assign_link** %link, align 8, !dbg !4408
  call void @add_link_to_rhs(%struct.access* %61, %struct.assign_link* %62), !dbg !4409
  br label %if.end77, !dbg !4410

if.end77:                                         ; preds = %if.then73, %land.lhs.true68, %land.lhs.true65, %lor.lhs.false57, %land.lhs.true27, %land.lhs.true25, %lor.lhs.false, %land.lhs.true21, %if.end19
  %63 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4411
  %tobool78 = icmp ne %struct.access* %63, null, !dbg !4411
  br i1 %tobool78, label %lor.end, label %lor.rhs, !dbg !4412

lor.rhs:                                          ; preds = %if.end77
  %64 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4413
  %tobool79 = icmp ne %struct.access* %64, null, !dbg !4412
  br label %lor.end, !dbg !4412

lor.end:                                          ; preds = %lor.rhs, %if.end77
  %65 = phi i1 [ true, %if.end77 ], [ %tobool79, %lor.rhs ]
  %66 = zext i1 %65 to i64, !dbg !4414
  %cond = select i1 %65, i32 1, i32 0, !dbg !4414
  store i32 %cond, i32* %retval, align 4, !dbg !4415
  br label %return, !dbg !4415

return:                                           ; preds = %lor.end, %if.then5, %if.then
  %67 = load i32, i32* %retval, align 4, !dbg !4416
  ret i32 %67, !dbg !4416
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @analyze_all_variable_accesses() #0 !dbg !4417 {
entry:
  %retval = alloca i8, align 1
  %res = alloca i32, align 4
  %tmp = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %max_total_scalarization_size = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  %var35 = alloca %union.tree_node*, align 8
  %access = alloca %struct.access*, align 8
  %var47 = alloca %union.tree_node*, align 8
  %access49 = alloca %struct.access*, align 8
  call void @llvm.dbg.declare(metadata i32* %res, metadata !4418, metadata !DIExpression()), !dbg !4419
  store i32 0, i32* %res, align 4, !dbg !4419
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp, metadata !4420, metadata !DIExpression()), !dbg !4421
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4422
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %tmp, align 8, !dbg !4421
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4423, metadata !DIExpression()), !dbg !4431
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4432, metadata !DIExpression()), !dbg !4433
  call void @llvm.dbg.declare(metadata i32* %max_total_scalarization_size, metadata !4434, metadata !DIExpression()), !dbg !4435
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4436
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4436
  %call1 = call zeroext i8 @optimize_function_for_speed_p(%struct.function* %add.ptr), !dbg !4436
  %conv = zext i8 %call1 to i32, !dbg !4436
  %tobool = icmp ne i32 %conv, 0, !dbg !4436
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4436

cond.true:                                        ; preds = %entry
  %1 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8, !dbg !4436
  %move_ratio = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %1, i32 0, i32 10, !dbg !4436
  %2 = load i32, i32* %move_ratio, align 4, !dbg !4436
  br label %cond.end, !dbg !4436

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4436

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 3, %cond.false ], !dbg !4436
  %mul = mul nsw i32 32, %cond, !dbg !4437
  store i32 %mul, i32* %max_total_scalarization_size, align 4, !dbg !4438
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !4439
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %3, i32 0, i32* %i), !dbg !4439
  br label %for.cond, !dbg !4439

for.cond:                                         ; preds = %for.inc, %cond.end
  %call2 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4441
  %tobool3 = icmp ne i8 %call2, 0, !dbg !4439
  br i1 %tobool3, label %for.body, label %for.end, !dbg !4439

for.body:                                         ; preds = %for.cond
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @should_scalarize_away_bitmap, align 8, !dbg !4443
  %5 = load i32, i32* %i, align 4, !dbg !4445
  %call4 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %4, i32 %5), !dbg !4446
  %tobool5 = icmp ne i32 %call4, 0, !dbg !4446
  br i1 %tobool5, label %land.lhs.true, label %if.end30, !dbg !4447

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cannot_scalarize_away_bitmap, align 8, !dbg !4448
  %7 = load i32, i32* %i, align 4, !dbg !4449
  %call6 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %6, i32 %7), !dbg !4450
  %tobool7 = icmp ne i32 %call6, 0, !dbg !4450
  br i1 %tobool7, label %if.end30, label %if.then, !dbg !4451

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !4452, metadata !DIExpression()), !dbg !4454
  %8 = load i32, i32* %i, align 4, !dbg !4455
  %call8 = call %union.tree_node* @referenced_var_lookup(i32 %8), !dbg !4455
  store %union.tree_node* %call8, %union.tree_node** %var, align 8, !dbg !4454
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4456
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !4456
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !4456
  %bf.load = load i64, i64* %10, align 8, !dbg !4456
  %bf.clear = and i64 %bf.load, 65535, !dbg !4456
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4456
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !4458
  br i1 %cmp, label %land.lhs.true10, label %if.end29, !dbg !4459

land.lhs.true10:                                  ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4460
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !4460
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4460
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4460
  %type11 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !4460
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 2, !dbg !4460
  %13 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !4460
  %call12 = call i64 @tree_low_cst(%union.tree_node* %13, i32 1), !dbg !4461
  %conv13 = trunc i64 %call12 to i32, !dbg !4462
  %14 = load i32, i32* %max_total_scalarization_size, align 4, !dbg !4463
  %cmp14 = icmp ule i32 %conv13, %14, !dbg !4464
  br i1 %cmp14, label %land.lhs.true16, label %if.end29, !dbg !4465

land.lhs.true16:                                  ; preds = %land.lhs.true10
  %15 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4466
  %common17 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !4466
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !4466
  %16 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !4466
  %call19 = call zeroext i8 @type_consists_of_records_p(%union.tree_node* %16), !dbg !4467
  %conv20 = zext i8 %call19 to i32, !dbg !4467
  %tobool21 = icmp ne i32 %conv20, 0, !dbg !4467
  br i1 %tobool21, label %if.then22, label %if.end29, !dbg !4468

if.then22:                                        ; preds = %land.lhs.true16
  %17 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4469
  %18 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4471
  call void @completely_scalarize_record(%union.tree_node* %17, %union.tree_node* %18, i64 0), !dbg !4472
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4473
  %tobool23 = icmp ne %struct._IO_FILE* %19, null, !dbg !4473
  br i1 %tobool23, label %land.lhs.true24, label %if.end, !dbg !4475

land.lhs.true24:                                  ; preds = %if.then22
  %20 = load i32, i32* @dump_flags, align 4, !dbg !4476
  %and = and i32 %20, 8, !dbg !4477
  %tobool25 = icmp ne i32 %and, 0, !dbg !4477
  br i1 %tobool25, label %if.then26, label %if.end, !dbg !4478

if.then26:                                        ; preds = %land.lhs.true24
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4479
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.25, i64 0, i64 0)), !dbg !4481
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4482
  %23 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4483
  call void @print_generic_expr(%struct._IO_FILE* %22, %union.tree_node* %23, i32 0), !dbg !4484
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4485
  %25 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4486
  %decl_minimal = bitcast %union.tree_node* %25 to %struct.tree_decl_minimal*, !dbg !4486
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !4486
  %26 = load i32, i32* %uid, align 4, !dbg !4486
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i64 0, i64 0), i32 %26), !dbg !4487
  br label %if.end, !dbg !4488

if.end:                                           ; preds = %if.then26, %land.lhs.true24, %if.then22
  br label %if.end29, !dbg !4489

if.end29:                                         ; preds = %if.end, %land.lhs.true16, %land.lhs.true10, %if.then
  br label %if.end30, !dbg !4490

if.end30:                                         ; preds = %if.end29, %land.lhs.true, %for.body
  br label %for.inc, !dbg !4491

for.inc:                                          ; preds = %if.end30
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4441
  br label %for.cond, !dbg !4441, !llvm.loop !4492

for.end:                                          ; preds = %for.cond
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !4494
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !4495
  call void @bitmap_copy(%struct.bitmap_head_def* %27, %struct.bitmap_head_def* %28), !dbg !4496
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !4497
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %29, i32 0, i32* %i), !dbg !4497
  br label %for.cond31, !dbg !4497

for.cond31:                                       ; preds = %for.inc41, %for.end
  %call32 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4499
  %tobool33 = icmp ne i8 %call32, 0, !dbg !4497
  br i1 %tobool33, label %for.body34, label %for.end42, !dbg !4497

for.body34:                                       ; preds = %for.cond31
  call void @llvm.dbg.declare(metadata %union.tree_node** %var35, metadata !4501, metadata !DIExpression()), !dbg !4503
  %30 = load i32, i32* %i, align 4, !dbg !4504
  %call36 = call %union.tree_node* @referenced_var_lookup(i32 %30), !dbg !4504
  store %union.tree_node* %call36, %union.tree_node** %var35, align 8, !dbg !4503
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !4505, metadata !DIExpression()), !dbg !4506
  %31 = load %union.tree_node*, %union.tree_node** %var35, align 8, !dbg !4507
  %call37 = call %struct.access* @sort_and_splice_var_accesses(%union.tree_node* %31), !dbg !4508
  store %struct.access* %call37, %struct.access** %access, align 8, !dbg !4509
  %32 = load %struct.access*, %struct.access** %access, align 8, !dbg !4510
  %tobool38 = icmp ne %struct.access* %32, null, !dbg !4510
  br i1 %tobool38, label %if.then39, label %if.else, !dbg !4512

if.then39:                                        ; preds = %for.body34
  %33 = load %struct.access*, %struct.access** %access, align 8, !dbg !4513
  call void @build_access_trees(%struct.access* %33), !dbg !4514
  br label %if.end40, !dbg !4514

if.else:                                          ; preds = %for.body34
  %34 = load %union.tree_node*, %union.tree_node** %var35, align 8, !dbg !4515
  call void @disqualify_candidate(%union.tree_node* %34, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.27, i64 0, i64 0)), !dbg !4516
  br label %if.end40

if.end40:                                         ; preds = %if.else, %if.then39
  br label %for.inc41, !dbg !4517

for.inc41:                                        ; preds = %if.end40
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4499
  br label %for.cond31, !dbg !4499, !llvm.loop !4518

for.end42:                                        ; preds = %for.cond31
  call void @propagate_all_subaccesses(), !dbg !4520
  %35 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !4521
  %36 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !4522
  call void @bitmap_copy(%struct.bitmap_head_def* %35, %struct.bitmap_head_def* %36), !dbg !4523
  %37 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !4524
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %37, i32 0, i32* %i), !dbg !4524
  br label %for.cond43, !dbg !4524

for.cond43:                                       ; preds = %for.inc67, %for.end42
  %call44 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4526
  %tobool45 = icmp ne i8 %call44, 0, !dbg !4524
  br i1 %tobool45, label %for.body46, label %for.end68, !dbg !4524

for.body46:                                       ; preds = %for.cond43
  call void @llvm.dbg.declare(metadata %union.tree_node** %var47, metadata !4528, metadata !DIExpression()), !dbg !4530
  %38 = load i32, i32* %i, align 4, !dbg !4531
  %call48 = call %union.tree_node* @referenced_var_lookup(i32 %38), !dbg !4531
  store %union.tree_node* %call48, %union.tree_node** %var47, align 8, !dbg !4530
  call void @llvm.dbg.declare(metadata %struct.access** %access49, metadata !4532, metadata !DIExpression()), !dbg !4533
  %39 = load %union.tree_node*, %union.tree_node** %var47, align 8, !dbg !4534
  %call50 = call %struct.access* @get_first_repr_for_decl(%union.tree_node* %39), !dbg !4535
  store %struct.access* %call50, %struct.access** %access49, align 8, !dbg !4533
  %40 = load %struct.access*, %struct.access** %access49, align 8, !dbg !4536
  %call51 = call zeroext i8 @analyze_access_trees(%struct.access* %40), !dbg !4538
  %tobool52 = icmp ne i8 %call51, 0, !dbg !4538
  br i1 %tobool52, label %if.then53, label %if.else65, !dbg !4539

if.then53:                                        ; preds = %for.body46
  %41 = load i32, i32* %res, align 4, !dbg !4540
  %inc = add nsw i32 %41, 1, !dbg !4540
  store i32 %inc, i32* %res, align 4, !dbg !4540
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4542
  %tobool54 = icmp ne %struct._IO_FILE* %42, null, !dbg !4542
  br i1 %tobool54, label %land.lhs.true55, label %if.end64, !dbg !4544

land.lhs.true55:                                  ; preds = %if.then53
  %43 = load i32, i32* @dump_flags, align 4, !dbg !4545
  %and56 = and i32 %43, 8, !dbg !4546
  %tobool57 = icmp ne i32 %and56, 0, !dbg !4546
  br i1 %tobool57, label %if.then58, label %if.end64, !dbg !4547

if.then58:                                        ; preds = %land.lhs.true55
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4548
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.28, i64 0, i64 0)), !dbg !4550
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4551
  %46 = load %union.tree_node*, %union.tree_node** %var47, align 8, !dbg !4552
  call void @print_generic_expr(%struct._IO_FILE* %45, %union.tree_node* %46, i32 0), !dbg !4553
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4554
  %48 = load %union.tree_node*, %union.tree_node** %var47, align 8, !dbg !4555
  %decl_minimal60 = bitcast %union.tree_node* %48 to %struct.tree_decl_minimal*, !dbg !4555
  %uid61 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal60, i32 0, i32 2, !dbg !4555
  %49 = load i32, i32* %uid61, align 4, !dbg !4555
  %call62 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i64 0, i64 0), i32 %49), !dbg !4556
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4557
  %51 = load %struct.access*, %struct.access** %access49, align 8, !dbg !4558
  call void @dump_access_tree(%struct._IO_FILE* %50, %struct.access* %51), !dbg !4559
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4560
  %call63 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !4561
  br label %if.end64, !dbg !4562

if.end64:                                         ; preds = %if.then58, %land.lhs.true55, %if.then53
  br label %if.end66, !dbg !4563

if.else65:                                        ; preds = %for.body46
  %53 = load %union.tree_node*, %union.tree_node** %var47, align 8, !dbg !4564
  call void @disqualify_candidate(%union.tree_node* %53, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i64 0, i64 0)), !dbg !4565
  br label %if.end66

if.end66:                                         ; preds = %if.else65, %if.end64
  br label %for.inc67, !dbg !4566

for.inc67:                                        ; preds = %if.end66
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4526
  br label %for.cond43, !dbg !4526, !llvm.loop !4567

for.end68:                                        ; preds = %for.cond43
  %54 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !4569
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %54), !dbg !4569
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %tmp, align 8, !dbg !4569
  %55 = load i32, i32* %res, align 4, !dbg !4570
  %tobool69 = icmp ne i32 %55, 0, !dbg !4570
  br i1 %tobool69, label %if.then70, label %if.else72, !dbg !4572

if.then70:                                        ; preds = %for.end68
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4573
  %add.ptr71 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !4573
  %57 = load i32, i32* %res, align 4, !dbg !4575
  call void @statistics_counter_event(%struct.function* %add.ptr71, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.30, i64 0, i64 0), i32 %57), !dbg !4576
  store i8 1, i8* %retval, align 1, !dbg !4577
  br label %return, !dbg !4577

if.else72:                                        ; preds = %for.end68
  store i8 0, i8* %retval, align 1, !dbg !4578
  br label %return, !dbg !4578

return:                                           ; preds = %if.else72, %if.then70
  %58 = load i8, i8* %retval, align 1, !dbg !4579
  ret i8 %58, !dbg !4579
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sra_modify_expr(%union.tree_node** %expr, %struct.gimple_stmt_iterator* %gsi, i8 zeroext %write, i8* %data) #0 !dbg !4580 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node**, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %write.addr = alloca i8, align 1
  %data.addr = alloca i8*, align 8
  %access = alloca %struct.access*, align 8
  %type = alloca %union.tree_node*, align 8
  %bfr = alloca %union.tree_node*, align 8
  %repl = alloca %union.tree_node*, align 8
  %ref = alloca %union.tree_node*, align 8
  %ok = alloca i8, align 1
  %stmt = alloca %union.gimple_statement_d*, align 8
  %stmt47 = alloca %union.gimple_statement_d*, align 8
  %start_offset = alloca i64, align 8
  %chunk_size = alloca i64, align 8
  store %union.tree_node** %expr, %union.tree_node*** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr.addr, metadata !4581, metadata !DIExpression()), !dbg !4582
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !4583, metadata !DIExpression()), !dbg !4584
  store i8 %write, i8* %write.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %write.addr, metadata !4585, metadata !DIExpression()), !dbg !4586
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4587, metadata !DIExpression()), !dbg !4588
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !4589, metadata !DIExpression()), !dbg !4590
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4591, metadata !DIExpression()), !dbg !4592
  call void @llvm.dbg.declare(metadata %union.tree_node** %bfr, metadata !4593, metadata !DIExpression()), !dbg !4594
  %0 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !4595
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !4595
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4595
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4595
  %bf.load = load i64, i64* %2, align 8, !dbg !4595
  %bf.clear = and i64 %bf.load, 65535, !dbg !4595
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4595
  %cmp = icmp eq i32 %bf.cast, 42, !dbg !4597
  br i1 %cmp, label %if.then, label %if.else, !dbg !4598

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !4599
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !4601
  store %union.tree_node* %4, %union.tree_node** %bfr, align 8, !dbg !4602
  %5 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !4603
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !4603
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !4603
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4603
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4603
  store %union.tree_node** %arrayidx, %union.tree_node*** %expr.addr, align 8, !dbg !4604
  br label %if.end, !dbg !4605

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %bfr, align 8, !dbg !4606
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !4607
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !4607
  %base1 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4607
  %9 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4607
  %bf.load2 = load i64, i64* %9, align 8, !dbg !4607
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4607
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4607
  %cmp5 = icmp eq i32 %bf.cast4, 43, !dbg !4609
  br i1 %cmp5, label %if.then11, label %lor.lhs.false, !dbg !4610

lor.lhs.false:                                    ; preds = %if.end
  %10 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !4611
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !4611
  %base6 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !4611
  %12 = bitcast %struct.tree_base* %base6 to i64*, !dbg !4611
  %bf.load7 = load i64, i64* %12, align 8, !dbg !4611
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !4611
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !4611
  %cmp10 = icmp eq i32 %bf.cast9, 44, !dbg !4612
  br i1 %cmp10, label %if.then11, label %if.end15, !dbg !4613

if.then11:                                        ; preds = %lor.lhs.false, %if.end
  %13 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !4614
  %14 = load %union.tree_node*, %union.tree_node** %13, align 8, !dbg !4614
  %exp12 = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !4614
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !4614
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 0, !dbg !4614
  store %union.tree_node** %arrayidx14, %union.tree_node*** %expr.addr, align 8, !dbg !4615
  br label %if.end15, !dbg !4616

if.end15:                                         ; preds = %if.then11, %lor.lhs.false
  %15 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !4617
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !4618
  %call = call %struct.access* @get_access_for_expr(%union.tree_node* %16), !dbg !4619
  store %struct.access* %call, %struct.access** %access, align 8, !dbg !4620
  %17 = load %struct.access*, %struct.access** %access, align 8, !dbg !4621
  %tobool = icmp ne %struct.access* %17, null, !dbg !4621
  br i1 %tobool, label %if.end17, label %if.then16, !dbg !4623

if.then16:                                        ; preds = %if.end15
  store i8 0, i8* %retval, align 1, !dbg !4624
  br label %return, !dbg !4624

if.end17:                                         ; preds = %if.end15
  %18 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !4625
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !4625
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !4625
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4625
  %20 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !4625
  store %union.tree_node* %20, %union.tree_node** %type, align 8, !dbg !4626
  %21 = load %struct.access*, %struct.access** %access, align 8, !dbg !4627
  %grp_to_be_replaced = getelementptr inbounds %struct.access, %struct.access* %21, i32 0, i32 14, !dbg !4629
  %bf.load19 = load i16, i16* %grp_to_be_replaced, align 8, !dbg !4629
  %bf.lshr = lshr i16 %bf.load19, 10, !dbg !4629
  %bf.clear20 = and i16 %bf.lshr, 1, !dbg !4629
  %bf.cast21 = zext i16 %bf.clear20 to i32, !dbg !4629
  %tobool22 = icmp ne i32 %bf.cast21, 0, !dbg !4627
  br i1 %tobool22, label %if.then23, label %if.end61, !dbg !4630

if.then23:                                        ; preds = %if.end17
  call void @llvm.dbg.declare(metadata %union.tree_node** %repl, metadata !4631, metadata !DIExpression()), !dbg !4633
  %22 = load %struct.access*, %struct.access** %access, align 8, !dbg !4634
  %call24 = call %union.tree_node* @get_access_replacement(%struct.access* %22), !dbg !4635
  store %union.tree_node* %call24, %union.tree_node** %repl, align 8, !dbg !4633
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4636
  %24 = load %struct.access*, %struct.access** %access, align 8, !dbg !4638
  %type25 = getelementptr inbounds %struct.access, %struct.access* %24, i32 0, i32 4, !dbg !4639
  %25 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !4639
  %call26 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %23, %union.tree_node* %25), !dbg !4640
  %tobool27 = icmp ne i8 %call26, 0, !dbg !4640
  br i1 %tobool27, label %if.else59, label %if.then28, !dbg !4641

if.then28:                                        ; preds = %if.then23
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !4642, metadata !DIExpression()), !dbg !4644
  %26 = load %struct.access*, %struct.access** %access, align 8, !dbg !4645
  %base29 = getelementptr inbounds %struct.access, %struct.access* %26, i32 0, i32 2, !dbg !4646
  %27 = load %union.tree_node*, %union.tree_node** %base29, align 8, !dbg !4646
  store %union.tree_node* %27, %union.tree_node** %ref, align 8, !dbg !4644
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !4647, metadata !DIExpression()), !dbg !4648
  %28 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !4649
  %common30 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !4649
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !4649
  %29 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !4649
  %30 = load %struct.access*, %struct.access** %access, align 8, !dbg !4650
  %offset = getelementptr inbounds %struct.access, %struct.access* %30, i32 0, i32 0, !dbg !4651
  %31 = load i64, i64* %offset, align 8, !dbg !4651
  %32 = load %struct.access*, %struct.access** %access, align 8, !dbg !4652
  %type32 = getelementptr inbounds %struct.access, %struct.access* %32, i32 0, i32 4, !dbg !4653
  %33 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !4653
  %call33 = call zeroext i8 @build_ref_for_offset(%union.tree_node** %ref, %union.tree_node* %29, i64 %31, %union.tree_node* %33, i8 zeroext 0), !dbg !4654
  store i8 %call33, i8* %ok, align 1, !dbg !4655
  %34 = load i8, i8* %ok, align 1, !dbg !4656
  %tobool34 = icmp ne i8 %34, 0, !dbg !4656
  br i1 %tobool34, label %cond.false, label %cond.true, !dbg !4656

cond.true:                                        ; preds = %if.then28
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 2333, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4656
  br label %cond.end, !dbg !4656

cond.false:                                       ; preds = %if.then28
  br label %cond.end, !dbg !4656

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4656
  %35 = load i8, i8* %write.addr, align 1, !dbg !4657
  %tobool35 = icmp ne i8 %35, 0, !dbg !4657
  br i1 %tobool35, label %if.then36, label %if.else46, !dbg !4659

if.then36:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4660, metadata !DIExpression()), !dbg !4662
  %36 = load %struct.access*, %struct.access** %access, align 8, !dbg !4663
  %grp_partial_lhs = getelementptr inbounds %struct.access, %struct.access* %36, i32 0, i32 14, !dbg !4665
  %bf.load37 = load i16, i16* %grp_partial_lhs, align 8, !dbg !4665
  %bf.lshr38 = lshr i16 %bf.load37, 9, !dbg !4665
  %bf.clear39 = and i16 %bf.lshr38, 1, !dbg !4665
  %bf.cast40 = zext i16 %bf.clear39 to i32, !dbg !4665
  %tobool41 = icmp ne i32 %bf.cast40, 0, !dbg !4663
  br i1 %tobool41, label %if.then42, label %if.end44, !dbg !4666

if.then42:                                        ; preds = %if.then36
  %37 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4667
  %38 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !4668
  %call43 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %37, %union.tree_node* %38, i8 zeroext 1, %union.tree_node* null, i8 zeroext 0, i32 0), !dbg !4669
  store %union.tree_node* %call43, %union.tree_node** %ref, align 8, !dbg !4670
  br label %if.end44, !dbg !4671

if.end44:                                         ; preds = %if.then42, %if.then36
  %39 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !4672
  %40 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !4672
  %call45 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %39, %union.tree_node* %40), !dbg !4672
  store %union.gimple_statement_d* %call45, %union.gimple_statement_d** %stmt, align 8, !dbg !4673
  %41 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4674
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4675
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %41, %union.gimple_statement_d* %42, i32 0), !dbg !4676
  br label %if.end58, !dbg !4677

if.else46:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt47, metadata !4678, metadata !DIExpression()), !dbg !4680
  %43 = load %struct.access*, %struct.access** %access, align 8, !dbg !4681
  %grp_partial_lhs48 = getelementptr inbounds %struct.access, %struct.access* %43, i32 0, i32 14, !dbg !4683
  %bf.load49 = load i16, i16* %grp_partial_lhs48, align 8, !dbg !4683
  %bf.lshr50 = lshr i16 %bf.load49, 9, !dbg !4683
  %bf.clear51 = and i16 %bf.lshr50, 1, !dbg !4683
  %bf.cast52 = zext i16 %bf.clear51 to i32, !dbg !4683
  %tobool53 = icmp ne i32 %bf.cast52, 0, !dbg !4681
  br i1 %tobool53, label %if.then54, label %if.end56, !dbg !4684

if.then54:                                        ; preds = %if.else46
  %44 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4685
  %45 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !4686
  %call55 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %44, %union.tree_node* %45, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !4687
  store %union.tree_node* %call55, %union.tree_node** %repl, align 8, !dbg !4688
  br label %if.end56, !dbg !4689

if.end56:                                         ; preds = %if.then54, %if.else46
  %46 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !4690
  %47 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !4690
  %call57 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %46, %union.tree_node* %47), !dbg !4690
  store %union.gimple_statement_d* %call57, %union.gimple_statement_d** %stmt47, align 8, !dbg !4691
  %48 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4692
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt47, align 8, !dbg !4693
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %48, %union.gimple_statement_d* %49, i32 1), !dbg !4694
  br label %if.end58

if.end58:                                         ; preds = %if.end56, %if.end44
  br label %if.end60, !dbg !4695

if.else59:                                        ; preds = %if.then23
  %50 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !4696
  %51 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !4697
  store %union.tree_node* %50, %union.tree_node** %51, align 8, !dbg !4698
  br label %if.end60

if.end60:                                         ; preds = %if.else59, %if.end58
  %52 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 1), align 4, !dbg !4699
  %inc = add nsw i32 %52, 1, !dbg !4699
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 1), align 4, !dbg !4699
  br label %if.end61, !dbg !4700

if.end61:                                         ; preds = %if.end60, %if.end17
  %53 = load %struct.access*, %struct.access** %access, align 8, !dbg !4701
  %first_child = getelementptr inbounds %struct.access, %struct.access* %53, i32 0, i32 8, !dbg !4703
  %54 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !4703
  %tobool62 = icmp ne %struct.access* %54, null, !dbg !4701
  br i1 %tobool62, label %if.then63, label %if.end90, !dbg !4704

if.then63:                                        ; preds = %if.end61
  call void @llvm.dbg.declare(metadata i64* %start_offset, metadata !4705, metadata !DIExpression()), !dbg !4707
  call void @llvm.dbg.declare(metadata i64* %chunk_size, metadata !4708, metadata !DIExpression()), !dbg !4709
  %55 = load %union.tree_node*, %union.tree_node** %bfr, align 8, !dbg !4710
  %tobool64 = icmp ne %union.tree_node* %55, null, !dbg !4710
  br i1 %tobool64, label %land.lhs.true, label %if.else86, !dbg !4712

land.lhs.true:                                    ; preds = %if.then63
  %56 = load %union.tree_node*, %union.tree_node** %bfr, align 8, !dbg !4713
  %exp65 = bitcast %union.tree_node* %56 to %struct.tree_exp*, !dbg !4713
  %operands66 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp65, i32 0, i32 3, !dbg !4713
  %arrayidx67 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands66, i64 0, i64 1, !dbg !4713
  %57 = load %union.tree_node*, %union.tree_node** %arrayidx67, align 8, !dbg !4713
  %call68 = call i32 @host_integerp(%union.tree_node* %57, i32 1), !dbg !4714
  %tobool69 = icmp ne i32 %call68, 0, !dbg !4714
  br i1 %tobool69, label %land.lhs.true70, label %if.else86, !dbg !4715

land.lhs.true70:                                  ; preds = %land.lhs.true
  %58 = load %union.tree_node*, %union.tree_node** %bfr, align 8, !dbg !4716
  %exp71 = bitcast %union.tree_node* %58 to %struct.tree_exp*, !dbg !4716
  %operands72 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp71, i32 0, i32 3, !dbg !4716
  %arrayidx73 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands72, i64 0, i64 2, !dbg !4716
  %59 = load %union.tree_node*, %union.tree_node** %arrayidx73, align 8, !dbg !4716
  %call74 = call i32 @host_integerp(%union.tree_node* %59, i32 1), !dbg !4717
  %tobool75 = icmp ne i32 %call74, 0, !dbg !4717
  br i1 %tobool75, label %if.then76, label %if.else86, !dbg !4718

if.then76:                                        ; preds = %land.lhs.true70
  %60 = load %union.tree_node*, %union.tree_node** %bfr, align 8, !dbg !4719
  %exp77 = bitcast %union.tree_node* %60 to %struct.tree_exp*, !dbg !4719
  %operands78 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp77, i32 0, i32 3, !dbg !4719
  %arrayidx79 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands78, i64 0, i64 1, !dbg !4719
  %61 = load %union.tree_node*, %union.tree_node** %arrayidx79, align 8, !dbg !4719
  %call80 = call i64 @tree_low_cst(%union.tree_node* %61, i32 1), !dbg !4721
  store i64 %call80, i64* %chunk_size, align 8, !dbg !4722
  %62 = load %struct.access*, %struct.access** %access, align 8, !dbg !4723
  %offset81 = getelementptr inbounds %struct.access, %struct.access* %62, i32 0, i32 0, !dbg !4724
  %63 = load i64, i64* %offset81, align 8, !dbg !4724
  %64 = load %union.tree_node*, %union.tree_node** %bfr, align 8, !dbg !4725
  %exp82 = bitcast %union.tree_node* %64 to %struct.tree_exp*, !dbg !4725
  %operands83 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp82, i32 0, i32 3, !dbg !4725
  %arrayidx84 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands83, i64 0, i64 2, !dbg !4725
  %65 = load %union.tree_node*, %union.tree_node** %arrayidx84, align 8, !dbg !4725
  %call85 = call i64 @tree_low_cst(%union.tree_node* %65, i32 1), !dbg !4726
  %add = add nsw i64 %63, %call85, !dbg !4727
  store i64 %add, i64* %start_offset, align 8, !dbg !4728
  br label %if.end87, !dbg !4729

if.else86:                                        ; preds = %land.lhs.true70, %land.lhs.true, %if.then63
  store i64 0, i64* %chunk_size, align 8, !dbg !4730
  store i64 0, i64* %start_offset, align 8, !dbg !4731
  br label %if.end87

if.end87:                                         ; preds = %if.else86, %if.then76
  %66 = load %struct.access*, %struct.access** %access, align 8, !dbg !4732
  %first_child88 = getelementptr inbounds %struct.access, %struct.access* %66, i32 0, i32 8, !dbg !4733
  %67 = load %struct.access*, %struct.access** %first_child88, align 8, !dbg !4733
  %68 = load %struct.access*, %struct.access** %access, align 8, !dbg !4734
  %base89 = getelementptr inbounds %struct.access, %struct.access* %68, i32 0, i32 2, !dbg !4735
  %69 = load %union.tree_node*, %union.tree_node** %base89, align 8, !dbg !4735
  %70 = load i64, i64* %start_offset, align 8, !dbg !4736
  %71 = load i64, i64* %chunk_size, align 8, !dbg !4737
  %72 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4738
  %73 = load i8, i8* %write.addr, align 1, !dbg !4739
  %74 = load i8, i8* %write.addr, align 1, !dbg !4740
  call void @generate_subtree_copies(%struct.access* %67, %union.tree_node* %69, i64 0, i64 %70, i64 %71, %struct.gimple_stmt_iterator* %72, i8 zeroext %73, i8 zeroext %74), !dbg !4741
  br label %if.end90, !dbg !4742

if.end90:                                         ; preds = %if.end87, %if.end61
  store i8 1, i8* %retval, align 1, !dbg !4743
  br label %return, !dbg !4743

return:                                           ; preds = %if.end90, %if.then16
  %75 = load i8, i8* %retval, align 1, !dbg !4744
  ret i8 %75, !dbg !4744
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sra_modify_assign(%union.gimple_statement_d** %stmt, %struct.gimple_stmt_iterator* %gsi, i8* %data) #0 !dbg !4745 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d**, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %data.addr = alloca i8*, align 8
  %lacc = alloca %struct.access*, align 8
  %racc = alloca %struct.access*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %modify_this_stmt = alloca i8, align 1
  %force_gimple_rhs = alloca i8, align 1
  %loc = alloca i32, align 4
  %orig_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %expr = alloca %union.tree_node*, align 8
  %expr186 = alloca %union.tree_node*, align 8
  %orig_gsi272 = alloca %struct.gimple_stmt_iterator, align 8
  %refreshed = alloca i32, align 4
  store %union.gimple_statement_d** %stmt, %union.gimple_statement_d*** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmt.addr, metadata !4746, metadata !DIExpression()), !dbg !4747
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !4748, metadata !DIExpression()), !dbg !4749
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4750, metadata !DIExpression()), !dbg !4751
  call void @llvm.dbg.declare(metadata %struct.access** %lacc, metadata !4752, metadata !DIExpression()), !dbg !4753
  call void @llvm.dbg.declare(metadata %struct.access** %racc, metadata !4754, metadata !DIExpression()), !dbg !4755
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4756, metadata !DIExpression()), !dbg !4757
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !4758, metadata !DIExpression()), !dbg !4759
  call void @llvm.dbg.declare(metadata i8* %modify_this_stmt, metadata !4760, metadata !DIExpression()), !dbg !4761
  store i8 0, i8* %modify_this_stmt, align 1, !dbg !4761
  call void @llvm.dbg.declare(metadata i8* %force_gimple_rhs, metadata !4762, metadata !DIExpression()), !dbg !4763
  store i8 0, i8* %force_gimple_rhs, align 1, !dbg !4763
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !4764, metadata !DIExpression()), !dbg !4765
  %0 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !4766
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %0, align 8, !dbg !4767
  %call = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !4768
  store i32 %call, i32* %loc, align 4, !dbg !4765
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %orig_gsi, metadata !4769, metadata !DIExpression()), !dbg !4770
  %2 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4771
  %3 = bitcast %struct.gimple_stmt_iterator* %orig_gsi to i8*, !dbg !4772
  %4 = bitcast %struct.gimple_stmt_iterator* %2 to i8*, !dbg !4772
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !4772
  %5 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !4773
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %5, align 8, !dbg !4775
  %call1 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %6), !dbg !4776
  %tobool = icmp ne i8 %call1, 0, !dbg !4776
  br i1 %tobool, label %if.end, label %if.then, !dbg !4777

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4778
  br label %return, !dbg !4778

if.end:                                           ; preds = %entry
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !4779
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %7, align 8, !dbg !4780
  %call2 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %8), !dbg !4781
  store %union.tree_node* %call2, %union.tree_node** %lhs, align 8, !dbg !4782
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !4783
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %9, align 8, !dbg !4784
  %call3 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %10), !dbg !4785
  store %union.tree_node* %call3, %union.tree_node** %rhs, align 8, !dbg !4786
  %11 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4787
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !4787
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !4787
  %bf.load = load i64, i64* %12, align 8, !dbg !4787
  %bf.clear = and i64 %bf.load, 65535, !dbg !4787
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4787
  %cmp = icmp eq i32 %bf.cast, 51, !dbg !4789
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !4790

if.then4:                                         ; preds = %if.end
  %13 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !4791
  %14 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4792
  %call5 = call i32 @sra_modify_constructor_assign(%union.gimple_statement_d** %13, %struct.gimple_stmt_iterator* %14), !dbg !4793
  store i32 %call5, i32* %retval, align 4, !dbg !4794
  br label %return, !dbg !4794

if.end6:                                          ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4795
  %base7 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !4795
  %16 = bitcast %struct.tree_base* %base7 to i64*, !dbg !4795
  %bf.load8 = load i64, i64* %16, align 8, !dbg !4795
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !4795
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !4795
  %cmp11 = icmp eq i32 %bf.cast10, 43, !dbg !4797
  br i1 %cmp11, label %if.then41, label %lor.lhs.false, !dbg !4798

lor.lhs.false:                                    ; preds = %if.end6
  %17 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4799
  %base12 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !4799
  %18 = bitcast %struct.tree_base* %base12 to i64*, !dbg !4799
  %bf.load13 = load i64, i64* %18, align 8, !dbg !4799
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !4799
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !4799
  %cmp16 = icmp eq i32 %bf.cast15, 43, !dbg !4800
  br i1 %cmp16, label %if.then41, label %lor.lhs.false17, !dbg !4801

lor.lhs.false17:                                  ; preds = %lor.lhs.false
  %19 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4802
  %base18 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !4802
  %20 = bitcast %struct.tree_base* %base18 to i64*, !dbg !4802
  %bf.load19 = load i64, i64* %20, align 8, !dbg !4802
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !4802
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !4802
  %cmp22 = icmp eq i32 %bf.cast21, 44, !dbg !4803
  br i1 %cmp22, label %if.then41, label %lor.lhs.false23, !dbg !4804

lor.lhs.false23:                                  ; preds = %lor.lhs.false17
  %21 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4805
  %base24 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !4805
  %22 = bitcast %struct.tree_base* %base24 to i64*, !dbg !4805
  %bf.load25 = load i64, i64* %22, align 8, !dbg !4805
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !4805
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !4805
  %cmp28 = icmp eq i32 %bf.cast27, 44, !dbg !4806
  br i1 %cmp28, label %if.then41, label %lor.lhs.false29, !dbg !4807

lor.lhs.false29:                                  ; preds = %lor.lhs.false23
  %23 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4808
  %base30 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !4808
  %24 = bitcast %struct.tree_base* %base30 to i64*, !dbg !4808
  %bf.load31 = load i64, i64* %24, align 8, !dbg !4808
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !4808
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !4808
  %cmp34 = icmp eq i32 %bf.cast33, 42, !dbg !4809
  br i1 %cmp34, label %if.then41, label %lor.lhs.false35, !dbg !4810

lor.lhs.false35:                                  ; preds = %lor.lhs.false29
  %25 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4811
  %base36 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !4811
  %26 = bitcast %struct.tree_base* %base36 to i64*, !dbg !4811
  %bf.load37 = load i64, i64* %26, align 8, !dbg !4811
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !4811
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !4811
  %cmp40 = icmp eq i32 %bf.cast39, 42, !dbg !4812
  br i1 %cmp40, label %if.then41, label %if.end50, !dbg !4813

if.then41:                                        ; preds = %lor.lhs.false35, %lor.lhs.false29, %lor.lhs.false23, %lor.lhs.false17, %lor.lhs.false, %if.end6
  %27 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !4814
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %27, align 8, !dbg !4816
  %call42 = call %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %28), !dbg !4817
  %29 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4818
  %30 = load i8*, i8** %data.addr, align 8, !dbg !4819
  %call43 = call zeroext i8 @sra_modify_expr(%union.tree_node** %call42, %struct.gimple_stmt_iterator* %29, i8 zeroext 0, i8* %30), !dbg !4820
  store i8 %call43, i8* %modify_this_stmt, align 1, !dbg !4821
  %31 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !4822
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %31, align 8, !dbg !4823
  %call44 = call %union.tree_node** @gimple_assign_lhs_ptr(%union.gimple_statement_d* %32), !dbg !4824
  %33 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4825
  %34 = load i8*, i8** %data.addr, align 8, !dbg !4826
  %call45 = call zeroext i8 @sra_modify_expr(%union.tree_node** %call44, %struct.gimple_stmt_iterator* %33, i8 zeroext 1, i8* %34), !dbg !4827
  %conv = zext i8 %call45 to i32, !dbg !4827
  %35 = load i8, i8* %modify_this_stmt, align 1, !dbg !4828
  %conv46 = zext i8 %35 to i32, !dbg !4828
  %or = or i32 %conv46, %conv, !dbg !4828
  %conv47 = trunc i32 %or to i8, !dbg !4828
  store i8 %conv47, i8* %modify_this_stmt, align 1, !dbg !4828
  %36 = load i8, i8* %modify_this_stmt, align 1, !dbg !4829
  %conv48 = zext i8 %36 to i32, !dbg !4829
  %tobool49 = icmp ne i32 %conv48, 0, !dbg !4829
  %37 = zext i1 %tobool49 to i64, !dbg !4829
  %cond = select i1 %tobool49, i32 1, i32 0, !dbg !4829
  store i32 %cond, i32* %retval, align 4, !dbg !4830
  br label %return, !dbg !4830

if.end50:                                         ; preds = %lor.lhs.false35
  %38 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4831
  %call51 = call %struct.access* @get_access_for_expr(%union.tree_node* %38), !dbg !4832
  store %struct.access* %call51, %struct.access** %lacc, align 8, !dbg !4833
  %39 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4834
  %call52 = call %struct.access* @get_access_for_expr(%union.tree_node* %39), !dbg !4835
  store %struct.access* %call52, %struct.access** %racc, align 8, !dbg !4836
  %40 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4837
  %tobool53 = icmp ne %struct.access* %40, null, !dbg !4837
  br i1 %tobool53, label %if.end56, label %land.lhs.true, !dbg !4839

land.lhs.true:                                    ; preds = %if.end50
  %41 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4840
  %tobool54 = icmp ne %struct.access* %41, null, !dbg !4840
  br i1 %tobool54, label %if.end56, label %if.then55, !dbg !4841

if.then55:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !4842
  br label %return, !dbg !4842

if.end56:                                         ; preds = %land.lhs.true, %if.end50
  %42 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4843
  %tobool57 = icmp ne %struct.access* %42, null, !dbg !4843
  br i1 %tobool57, label %land.lhs.true58, label %if.end72, !dbg !4845

land.lhs.true58:                                  ; preds = %if.end56
  %43 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4846
  %grp_to_be_replaced = getelementptr inbounds %struct.access, %struct.access* %43, i32 0, i32 14, !dbg !4847
  %bf.load59 = load i16, i16* %grp_to_be_replaced, align 8, !dbg !4847
  %bf.lshr = lshr i16 %bf.load59, 10, !dbg !4847
  %bf.clear60 = and i16 %bf.lshr, 1, !dbg !4847
  %bf.cast61 = zext i16 %bf.clear60 to i32, !dbg !4847
  %tobool62 = icmp ne i32 %bf.cast61, 0, !dbg !4846
  br i1 %tobool62, label %if.then63, label %if.end72, !dbg !4848

if.then63:                                        ; preds = %land.lhs.true58
  %44 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4849
  %call64 = call %union.tree_node* @get_access_replacement(%struct.access* %44), !dbg !4851
  store %union.tree_node* %call64, %union.tree_node** %lhs, align 8, !dbg !4852
  %45 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !4853
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %45, align 8, !dbg !4854
  %47 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4855
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %46, %union.tree_node* %47), !dbg !4856
  store i8 1, i8* %modify_this_stmt, align 1, !dbg !4857
  %48 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4858
  %grp_partial_lhs = getelementptr inbounds %struct.access, %struct.access* %48, i32 0, i32 14, !dbg !4860
  %bf.load65 = load i16, i16* %grp_partial_lhs, align 8, !dbg !4860
  %bf.lshr66 = lshr i16 %bf.load65, 9, !dbg !4860
  %bf.clear67 = and i16 %bf.lshr66, 1, !dbg !4860
  %bf.cast68 = zext i16 %bf.clear67 to i32, !dbg !4860
  %tobool69 = icmp ne i32 %bf.cast68, 0, !dbg !4858
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !4861

if.then70:                                        ; preds = %if.then63
  store i8 1, i8* %force_gimple_rhs, align 1, !dbg !4862
  br label %if.end71, !dbg !4863

if.end71:                                         ; preds = %if.then70, %if.then63
  %49 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 1), align 4, !dbg !4864
  %inc = add nsw i32 %49, 1, !dbg !4864
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 1), align 4, !dbg !4864
  br label %if.end72, !dbg !4865

if.end72:                                         ; preds = %if.end71, %land.lhs.true58, %if.end56
  %50 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4866
  %tobool73 = icmp ne %struct.access* %50, null, !dbg !4866
  br i1 %tobool73, label %land.lhs.true74, label %if.end92, !dbg !4868

land.lhs.true74:                                  ; preds = %if.end72
  %51 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4869
  %grp_to_be_replaced75 = getelementptr inbounds %struct.access, %struct.access* %51, i32 0, i32 14, !dbg !4870
  %bf.load76 = load i16, i16* %grp_to_be_replaced75, align 8, !dbg !4870
  %bf.lshr77 = lshr i16 %bf.load76, 10, !dbg !4870
  %bf.clear78 = and i16 %bf.lshr77, 1, !dbg !4870
  %bf.cast79 = zext i16 %bf.clear78 to i32, !dbg !4870
  %tobool80 = icmp ne i32 %bf.cast79, 0, !dbg !4869
  br i1 %tobool80, label %if.then81, label %if.end92, !dbg !4871

if.then81:                                        ; preds = %land.lhs.true74
  %52 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4872
  %call82 = call %union.tree_node* @get_access_replacement(%struct.access* %52), !dbg !4874
  store %union.tree_node* %call82, %union.tree_node** %rhs, align 8, !dbg !4875
  store i8 1, i8* %modify_this_stmt, align 1, !dbg !4876
  %53 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4877
  %grp_partial_lhs83 = getelementptr inbounds %struct.access, %struct.access* %53, i32 0, i32 14, !dbg !4879
  %bf.load84 = load i16, i16* %grp_partial_lhs83, align 8, !dbg !4879
  %bf.lshr85 = lshr i16 %bf.load84, 9, !dbg !4879
  %bf.clear86 = and i16 %bf.lshr85, 1, !dbg !4879
  %bf.cast87 = zext i16 %bf.clear86 to i32, !dbg !4879
  %tobool88 = icmp ne i32 %bf.cast87, 0, !dbg !4877
  br i1 %tobool88, label %if.then89, label %if.end90, !dbg !4880

if.then89:                                        ; preds = %if.then81
  store i8 1, i8* %force_gimple_rhs, align 1, !dbg !4881
  br label %if.end90, !dbg !4882

if.end90:                                         ; preds = %if.then89, %if.then81
  %54 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 1), align 4, !dbg !4883
  %inc91 = add nsw i32 %54, 1, !dbg !4883
  store i32 %inc91, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 1), align 4, !dbg !4883
  br label %if.end92, !dbg !4884

if.end92:                                         ; preds = %if.end90, %land.lhs.true74, %if.end72
  %55 = load i8, i8* %modify_this_stmt, align 1, !dbg !4885
  %tobool93 = icmp ne i8 %55, 0, !dbg !4885
  br i1 %tobool93, label %if.then94, label %if.end223, !dbg !4887

if.then94:                                        ; preds = %if.end92
  %56 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4888
  %common = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !4888
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4888
  %57 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4888
  %58 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4891
  %common95 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !4891
  %type96 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common95, i32 0, i32 2, !dbg !4891
  %59 = load %union.tree_node*, %union.tree_node** %type96, align 8, !dbg !4891
  %call97 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %57, %union.tree_node* %59), !dbg !4892
  %tobool98 = icmp ne i8 %call97, 0, !dbg !4892
  br i1 %tobool98, label %if.end222, label %if.then99, !dbg !4893

if.then99:                                        ; preds = %if.then94
  %60 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4894
  %common100 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !4894
  %type101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2, !dbg !4894
  %61 = load %union.tree_node*, %union.tree_node** %type101, align 8, !dbg !4894
  %base102 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !4894
  %62 = bitcast %struct.tree_base* %base102 to i64*, !dbg !4894
  %bf.load103 = load i64, i64* %62, align 8, !dbg !4894
  %bf.clear104 = and i64 %bf.load103, 65535, !dbg !4894
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !4894
  %cmp106 = icmp eq i32 %bf.cast105, 15, !dbg !4894
  br i1 %cmp106, label %land.lhs.true135, label %lor.lhs.false108, !dbg !4894

lor.lhs.false108:                                 ; preds = %if.then99
  %63 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4894
  %common109 = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !4894
  %type110 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common109, i32 0, i32 2, !dbg !4894
  %64 = load %union.tree_node*, %union.tree_node** %type110, align 8, !dbg !4894
  %base111 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !4894
  %65 = bitcast %struct.tree_base* %base111 to i64*, !dbg !4894
  %bf.load112 = load i64, i64* %65, align 8, !dbg !4894
  %bf.clear113 = and i64 %bf.load112, 65535, !dbg !4894
  %bf.cast114 = trunc i64 %bf.clear113 to i32, !dbg !4894
  %cmp115 = icmp eq i32 %bf.cast114, 16, !dbg !4894
  br i1 %cmp115, label %land.lhs.true135, label %lor.lhs.false117, !dbg !4894

lor.lhs.false117:                                 ; preds = %lor.lhs.false108
  %66 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4894
  %common118 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !4894
  %type119 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common118, i32 0, i32 2, !dbg !4894
  %67 = load %union.tree_node*, %union.tree_node** %type119, align 8, !dbg !4894
  %base120 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !4894
  %68 = bitcast %struct.tree_base* %base120 to i64*, !dbg !4894
  %bf.load121 = load i64, i64* %68, align 8, !dbg !4894
  %bf.clear122 = and i64 %bf.load121, 65535, !dbg !4894
  %bf.cast123 = trunc i64 %bf.clear122 to i32, !dbg !4894
  %cmp124 = icmp eq i32 %bf.cast123, 17, !dbg !4894
  br i1 %cmp124, label %land.lhs.true135, label %lor.lhs.false126, !dbg !4894

lor.lhs.false126:                                 ; preds = %lor.lhs.false117
  %69 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4894
  %common127 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !4894
  %type128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 2, !dbg !4894
  %70 = load %union.tree_node*, %union.tree_node** %type128, align 8, !dbg !4894
  %base129 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !4894
  %71 = bitcast %struct.tree_base* %base129 to i64*, !dbg !4894
  %bf.load130 = load i64, i64* %71, align 8, !dbg !4894
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !4894
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !4894
  %cmp133 = icmp eq i32 %bf.cast132, 18, !dbg !4894
  br i1 %cmp133, label %land.lhs.true135, label %if.else, !dbg !4897

land.lhs.true135:                                 ; preds = %lor.lhs.false126, %lor.lhs.false117, %lor.lhs.false108, %if.then99
  %72 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4898
  %call136 = call zeroext i8 @access_has_children_p(%struct.access* %72), !dbg !4899
  %tobool137 = icmp ne i8 %call136, 0, !dbg !4899
  br i1 %tobool137, label %if.else, label %if.then138, !dbg !4900

if.then138:                                       ; preds = %land.lhs.true135
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !4901, metadata !DIExpression()), !dbg !4903
  %73 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4904
  store %union.tree_node* %73, %union.tree_node** %expr, align 8, !dbg !4903
  %74 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4905
  %common139 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !4905
  %type140 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common139, i32 0, i32 2, !dbg !4905
  %75 = load %union.tree_node*, %union.tree_node** %type140, align 8, !dbg !4905
  %76 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4907
  %common141 = bitcast %union.tree_node* %76 to %struct.tree_common*, !dbg !4907
  %type142 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common141, i32 0, i32 2, !dbg !4907
  %77 = load %union.tree_node*, %union.tree_node** %type142, align 8, !dbg !4907
  %call143 = call zeroext i8 @build_ref_for_offset(%union.tree_node** %expr, %union.tree_node* %75, i64 0, %union.tree_node* %77, i8 zeroext 0), !dbg !4908
  %tobool144 = icmp ne i8 %call143, 0, !dbg !4908
  br i1 %tobool144, label %if.then145, label %if.end146, !dbg !4909

if.then145:                                       ; preds = %if.then138
  %78 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4910
  store %union.tree_node* %78, %union.tree_node** %lhs, align 8, !dbg !4912
  %79 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !4913
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %79, align 8, !dbg !4914
  %81 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4915
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %80, %union.tree_node* %81), !dbg !4916
  br label %if.end146, !dbg !4917

if.end146:                                        ; preds = %if.then145, %if.then138
  br label %if.end196, !dbg !4918

if.else:                                          ; preds = %land.lhs.true135, %lor.lhs.false126
  %82 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4919
  %common147 = bitcast %union.tree_node* %82 to %struct.tree_common*, !dbg !4919
  %type148 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common147, i32 0, i32 2, !dbg !4919
  %83 = load %union.tree_node*, %union.tree_node** %type148, align 8, !dbg !4919
  %base149 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !4919
  %84 = bitcast %struct.tree_base* %base149 to i64*, !dbg !4919
  %bf.load150 = load i64, i64* %84, align 8, !dbg !4919
  %bf.clear151 = and i64 %bf.load150, 65535, !dbg !4919
  %bf.cast152 = trunc i64 %bf.clear151 to i32, !dbg !4919
  %cmp153 = icmp eq i32 %bf.cast152, 15, !dbg !4919
  br i1 %cmp153, label %land.lhs.true182, label %lor.lhs.false155, !dbg !4919

lor.lhs.false155:                                 ; preds = %if.else
  %85 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4919
  %common156 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !4919
  %type157 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common156, i32 0, i32 2, !dbg !4919
  %86 = load %union.tree_node*, %union.tree_node** %type157, align 8, !dbg !4919
  %base158 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !4919
  %87 = bitcast %struct.tree_base* %base158 to i64*, !dbg !4919
  %bf.load159 = load i64, i64* %87, align 8, !dbg !4919
  %bf.clear160 = and i64 %bf.load159, 65535, !dbg !4919
  %bf.cast161 = trunc i64 %bf.clear160 to i32, !dbg !4919
  %cmp162 = icmp eq i32 %bf.cast161, 16, !dbg !4919
  br i1 %cmp162, label %land.lhs.true182, label %lor.lhs.false164, !dbg !4919

lor.lhs.false164:                                 ; preds = %lor.lhs.false155
  %88 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4919
  %common165 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !4919
  %type166 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common165, i32 0, i32 2, !dbg !4919
  %89 = load %union.tree_node*, %union.tree_node** %type166, align 8, !dbg !4919
  %base167 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !4919
  %90 = bitcast %struct.tree_base* %base167 to i64*, !dbg !4919
  %bf.load168 = load i64, i64* %90, align 8, !dbg !4919
  %bf.clear169 = and i64 %bf.load168, 65535, !dbg !4919
  %bf.cast170 = trunc i64 %bf.clear169 to i32, !dbg !4919
  %cmp171 = icmp eq i32 %bf.cast170, 17, !dbg !4919
  br i1 %cmp171, label %land.lhs.true182, label %lor.lhs.false173, !dbg !4919

lor.lhs.false173:                                 ; preds = %lor.lhs.false164
  %91 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4919
  %common174 = bitcast %union.tree_node* %91 to %struct.tree_common*, !dbg !4919
  %type175 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common174, i32 0, i32 2, !dbg !4919
  %92 = load %union.tree_node*, %union.tree_node** %type175, align 8, !dbg !4919
  %base176 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !4919
  %93 = bitcast %struct.tree_base* %base176 to i64*, !dbg !4919
  %bf.load177 = load i64, i64* %93, align 8, !dbg !4919
  %bf.clear178 = and i64 %bf.load177, 65535, !dbg !4919
  %bf.cast179 = trunc i64 %bf.clear178 to i32, !dbg !4919
  %cmp180 = icmp eq i32 %bf.cast179, 18, !dbg !4919
  br i1 %cmp180, label %land.lhs.true182, label %if.end195, !dbg !4921

land.lhs.true182:                                 ; preds = %lor.lhs.false173, %lor.lhs.false164, %lor.lhs.false155, %if.else
  %94 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4922
  %call183 = call zeroext i8 @access_has_children_p(%struct.access* %94), !dbg !4923
  %tobool184 = icmp ne i8 %call183, 0, !dbg !4923
  br i1 %tobool184, label %if.end195, label %if.then185, !dbg !4924

if.then185:                                       ; preds = %land.lhs.true182
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr186, metadata !4925, metadata !DIExpression()), !dbg !4927
  %95 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4928
  store %union.tree_node* %95, %union.tree_node** %expr186, align 8, !dbg !4927
  %96 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4929
  %common187 = bitcast %union.tree_node* %96 to %struct.tree_common*, !dbg !4929
  %type188 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common187, i32 0, i32 2, !dbg !4929
  %97 = load %union.tree_node*, %union.tree_node** %type188, align 8, !dbg !4929
  %98 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4931
  %common189 = bitcast %union.tree_node* %98 to %struct.tree_common*, !dbg !4931
  %type190 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common189, i32 0, i32 2, !dbg !4931
  %99 = load %union.tree_node*, %union.tree_node** %type190, align 8, !dbg !4931
  %call191 = call zeroext i8 @build_ref_for_offset(%union.tree_node** %expr186, %union.tree_node* %97, i64 0, %union.tree_node* %99, i8 zeroext 0), !dbg !4932
  %tobool192 = icmp ne i8 %call191, 0, !dbg !4932
  br i1 %tobool192, label %if.then193, label %if.end194, !dbg !4933

if.then193:                                       ; preds = %if.then185
  %100 = load %union.tree_node*, %union.tree_node** %expr186, align 8, !dbg !4934
  store %union.tree_node* %100, %union.tree_node** %rhs, align 8, !dbg !4935
  br label %if.end194, !dbg !4936

if.end194:                                        ; preds = %if.then193, %if.then185
  br label %if.end195, !dbg !4937

if.end195:                                        ; preds = %if.end194, %land.lhs.true182, %lor.lhs.false173
  br label %if.end196

if.end196:                                        ; preds = %if.end195, %if.end146
  %101 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4938
  %common197 = bitcast %union.tree_node* %101 to %struct.tree_common*, !dbg !4938
  %type198 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common197, i32 0, i32 2, !dbg !4938
  %102 = load %union.tree_node*, %union.tree_node** %type198, align 8, !dbg !4938
  %103 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4940
  %common199 = bitcast %union.tree_node* %103 to %struct.tree_common*, !dbg !4940
  %type200 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common199, i32 0, i32 2, !dbg !4940
  %104 = load %union.tree_node*, %union.tree_node** %type200, align 8, !dbg !4940
  %call201 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %102, %union.tree_node* %104), !dbg !4941
  %tobool202 = icmp ne i8 %call201, 0, !dbg !4941
  br i1 %tobool202, label %if.end221, label %if.then203, !dbg !4942

if.then203:                                       ; preds = %if.end196
  %105 = load i32, i32* %loc, align 4, !dbg !4943
  %106 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4943
  %common204 = bitcast %union.tree_node* %106 to %struct.tree_common*, !dbg !4943
  %type205 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common204, i32 0, i32 2, !dbg !4943
  %107 = load %union.tree_node*, %union.tree_node** %type205, align 8, !dbg !4943
  %108 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4943
  %call206 = call %union.tree_node* @fold_build1_stat_loc(i32 %105, i32 118, %union.tree_node* %107, %union.tree_node* %108), !dbg !4943
  store %union.tree_node* %call206, %union.tree_node** %rhs, align 8, !dbg !4945
  %109 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4946
  %common207 = bitcast %union.tree_node* %109 to %struct.tree_common*, !dbg !4946
  %type208 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common207, i32 0, i32 2, !dbg !4946
  %110 = load %union.tree_node*, %union.tree_node** %type208, align 8, !dbg !4946
  %call209 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %110), !dbg !4948
  %conv210 = zext i8 %call209 to i32, !dbg !4948
  %tobool211 = icmp ne i32 %conv210, 0, !dbg !4948
  br i1 %tobool211, label %land.lhs.true212, label %if.end220, !dbg !4949

land.lhs.true212:                                 ; preds = %if.then203
  %111 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4950
  %base213 = bitcast %union.tree_node* %111 to %struct.tree_base*, !dbg !4950
  %112 = bitcast %struct.tree_base* %base213 to i64*, !dbg !4950
  %bf.load214 = load i64, i64* %112, align 8, !dbg !4950
  %bf.clear215 = and i64 %bf.load214, 65535, !dbg !4950
  %bf.cast216 = trunc i64 %bf.clear215 to i32, !dbg !4950
  %cmp217 = icmp ne i32 %bf.cast216, 141, !dbg !4951
  br i1 %cmp217, label %if.then219, label %if.end220, !dbg !4952

if.then219:                                       ; preds = %land.lhs.true212
  store i8 1, i8* %force_gimple_rhs, align 1, !dbg !4953
  br label %if.end220, !dbg !4954

if.end220:                                        ; preds = %if.then219, %land.lhs.true212, %if.then203
  br label %if.end221, !dbg !4955

if.end221:                                        ; preds = %if.end220, %if.end196
  br label %if.end222, !dbg !4956

if.end222:                                        ; preds = %if.end221, %if.then94
  br label %if.end223, !dbg !4957

if.end223:                                        ; preds = %if.end222, %if.end92
  %113 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !4958
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %113, align 8, !dbg !4960
  %call224 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %114), !dbg !4961
  %conv225 = zext i8 %call224 to i32, !dbg !4961
  %tobool226 = icmp ne i32 %conv225, 0, !dbg !4961
  br i1 %tobool226, label %if.then250, label %lor.lhs.false227, !dbg !4962

lor.lhs.false227:                                 ; preds = %if.end223
  %115 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4963
  %call228 = call zeroext i8 @contains_view_convert_expr_p(%union.tree_node* %115), !dbg !4964
  %conv229 = zext i8 %call228 to i32, !dbg !4964
  %tobool230 = icmp ne i32 %conv229, 0, !dbg !4964
  br i1 %tobool230, label %if.then250, label %lor.lhs.false231, !dbg !4965

lor.lhs.false231:                                 ; preds = %lor.lhs.false227
  %116 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4966
  %call232 = call zeroext i8 @contains_view_convert_expr_p(%union.tree_node* %116), !dbg !4967
  %conv233 = zext i8 %call232 to i32, !dbg !4967
  %tobool234 = icmp ne i32 %conv233, 0, !dbg !4967
  br i1 %tobool234, label %if.then250, label %lor.lhs.false235, !dbg !4968

lor.lhs.false235:                                 ; preds = %lor.lhs.false231
  %117 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4969
  %call236 = call zeroext i8 @access_has_children_p(%struct.access* %117), !dbg !4970
  %conv237 = zext i8 %call236 to i32, !dbg !4970
  %tobool238 = icmp ne i32 %conv237, 0, !dbg !4970
  br i1 %tobool238, label %land.lhs.true239, label %lor.lhs.false242, !dbg !4971

land.lhs.true239:                                 ; preds = %lor.lhs.false235
  %118 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4972
  %119 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4973
  %120 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4974
  %offset = getelementptr inbounds %struct.access, %struct.access* %120, i32 0, i32 0, !dbg !4975
  %121 = load i64, i64* %offset, align 8, !dbg !4975
  %call240 = call zeroext i8 @ref_expr_for_all_replacements_p(%struct.access* %118, %union.tree_node* %119, i64 %121), !dbg !4976
  %tobool241 = icmp ne i8 %call240, 0, !dbg !4976
  br i1 %tobool241, label %lor.lhs.false242, label %if.then250, !dbg !4977

lor.lhs.false242:                                 ; preds = %land.lhs.true239, %lor.lhs.false235
  %122 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4978
  %call243 = call zeroext i8 @access_has_children_p(%struct.access* %122), !dbg !4979
  %conv244 = zext i8 %call243 to i32, !dbg !4979
  %tobool245 = icmp ne i32 %conv244, 0, !dbg !4979
  br i1 %tobool245, label %land.lhs.true246, label %if.else263, !dbg !4980

land.lhs.true246:                                 ; preds = %lor.lhs.false242
  %123 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4981
  %124 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4982
  %125 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4983
  %offset247 = getelementptr inbounds %struct.access, %struct.access* %125, i32 0, i32 0, !dbg !4984
  %126 = load i64, i64* %offset247, align 8, !dbg !4984
  %call248 = call zeroext i8 @ref_expr_for_all_replacements_p(%struct.access* %123, %union.tree_node* %124, i64 %126), !dbg !4985
  %tobool249 = icmp ne i8 %call248, 0, !dbg !4985
  br i1 %tobool249, label %if.else263, label %if.then250, !dbg !4986

if.then250:                                       ; preds = %land.lhs.true246, %land.lhs.true239, %lor.lhs.false231, %lor.lhs.false227, %if.end223
  %127 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4987
  %call251 = call zeroext i8 @access_has_children_p(%struct.access* %127), !dbg !4990
  %tobool252 = icmp ne i8 %call251, 0, !dbg !4990
  br i1 %tobool252, label %if.then253, label %if.end255, !dbg !4991

if.then253:                                       ; preds = %if.then250
  %128 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4992
  %first_child = getelementptr inbounds %struct.access, %struct.access* %128, i32 0, i32 8, !dbg !4993
  %129 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !4993
  %130 = load %struct.access*, %struct.access** %racc, align 8, !dbg !4994
  %base254 = getelementptr inbounds %struct.access, %struct.access* %130, i32 0, i32 2, !dbg !4995
  %131 = load %union.tree_node*, %union.tree_node** %base254, align 8, !dbg !4995
  %132 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4996
  call void @generate_subtree_copies(%struct.access* %129, %union.tree_node* %131, i64 0, i64 0, i64 0, %struct.gimple_stmt_iterator* %132, i8 zeroext 0, i8 zeroext 0), !dbg !4997
  br label %if.end255, !dbg !4997

if.end255:                                        ; preds = %if.then253, %if.then250
  %133 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !4998
  %call256 = call zeroext i8 @access_has_children_p(%struct.access* %133), !dbg !5000
  %tobool257 = icmp ne i8 %call256, 0, !dbg !5000
  br i1 %tobool257, label %if.then258, label %if.end261, !dbg !5001

if.then258:                                       ; preds = %if.end255
  %134 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !5002
  %first_child259 = getelementptr inbounds %struct.access, %struct.access* %134, i32 0, i32 8, !dbg !5003
  %135 = load %struct.access*, %struct.access** %first_child259, align 8, !dbg !5003
  %136 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !5004
  %base260 = getelementptr inbounds %struct.access, %struct.access* %136, i32 0, i32 2, !dbg !5005
  %137 = load %union.tree_node*, %union.tree_node** %base260, align 8, !dbg !5005
  %138 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5006
  call void @generate_subtree_copies(%struct.access* %135, %union.tree_node* %137, i64 0, i64 0, i64 0, %struct.gimple_stmt_iterator* %138, i8 zeroext 1, i8 zeroext 1), !dbg !5007
  br label %if.end261, !dbg !5007

if.end261:                                        ; preds = %if.then258, %if.end255
  %139 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 5), align 4, !dbg !5008
  %inc262 = add nsw i32 %139, 1, !dbg !5008
  store i32 %inc262, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 5), align 4, !dbg !5008
  br label %if.end338, !dbg !5009

if.else263:                                       ; preds = %land.lhs.true246, %lor.lhs.false242
  %140 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !5010
  %call264 = call zeroext i8 @access_has_children_p(%struct.access* %140), !dbg !5013
  %conv265 = zext i8 %call264 to i32, !dbg !5013
  %tobool266 = icmp ne i32 %conv265, 0, !dbg !5013
  br i1 %tobool266, label %land.lhs.true267, label %if.else301, !dbg !5014

land.lhs.true267:                                 ; preds = %if.else263
  %141 = load %struct.access*, %struct.access** %racc, align 8, !dbg !5015
  %call268 = call zeroext i8 @access_has_children_p(%struct.access* %141), !dbg !5016
  %conv269 = zext i8 %call268 to i32, !dbg !5016
  %tobool270 = icmp ne i32 %conv269, 0, !dbg !5016
  br i1 %tobool270, label %if.then271, label %if.else301, !dbg !5017

if.then271:                                       ; preds = %land.lhs.true267
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %orig_gsi272, metadata !5018, metadata !DIExpression()), !dbg !5020
  %142 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5021
  %143 = bitcast %struct.gimple_stmt_iterator* %orig_gsi272 to i8*, !dbg !5022
  %144 = bitcast %struct.gimple_stmt_iterator* %142 to i8*, !dbg !5022
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %144, i64 24, i1 false), !dbg !5022
  call void @llvm.dbg.declare(metadata i32* %refreshed, metadata !5023, metadata !DIExpression()), !dbg !5024
  %145 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !5025
  %grp_read = getelementptr inbounds %struct.access, %struct.access* %145, i32 0, i32 14, !dbg !5027
  %bf.load273 = load i16, i16* %grp_read, align 8, !dbg !5027
  %bf.lshr274 = lshr i16 %bf.load273, 4, !dbg !5027
  %bf.clear275 = and i16 %bf.lshr274, 1, !dbg !5027
  %bf.cast276 = zext i16 %bf.clear275 to i32, !dbg !5027
  %tobool277 = icmp ne i32 %bf.cast276, 0, !dbg !5025
  br i1 %tobool277, label %land.lhs.true278, label %if.else286, !dbg !5028

land.lhs.true278:                                 ; preds = %if.then271
  %146 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !5029
  %grp_covered = getelementptr inbounds %struct.access, %struct.access* %146, i32 0, i32 14, !dbg !5030
  %bf.load279 = load i16, i16* %grp_covered, align 8, !dbg !5030
  %bf.lshr280 = lshr i16 %bf.load279, 6, !dbg !5030
  %bf.clear281 = and i16 %bf.lshr280, 1, !dbg !5030
  %bf.cast282 = zext i16 %bf.clear281 to i32, !dbg !5030
  %tobool283 = icmp ne i32 %bf.cast282, 0, !dbg !5029
  br i1 %tobool283, label %if.else286, label %if.then284, !dbg !5031

if.then284:                                       ; preds = %land.lhs.true278
  %147 = load %struct.access*, %struct.access** %racc, align 8, !dbg !5032
  %148 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5033
  %149 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5034
  %call285 = call i32 @handle_unscalarized_data_in_subtree(%struct.access* %147, %union.tree_node* %148, %struct.gimple_stmt_iterator* %149), !dbg !5035
  store i32 %call285, i32* %refreshed, align 4, !dbg !5036
  br label %if.end287, !dbg !5037

if.else286:                                       ; preds = %land.lhs.true278, %if.then271
  store i32 0, i32* %refreshed, align 4, !dbg !5038
  br label %if.end287

if.end287:                                        ; preds = %if.else286, %if.then284
  %150 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !5039
  %first_child288 = getelementptr inbounds %struct.access, %struct.access* %150, i32 0, i32 8, !dbg !5040
  %151 = load %struct.access*, %struct.access** %first_child288, align 8, !dbg !5040
  %152 = load %struct.access*, %struct.access** %racc, align 8, !dbg !5041
  %153 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !5042
  %offset289 = getelementptr inbounds %struct.access, %struct.access* %153, i32 0, i32 0, !dbg !5043
  %154 = load i64, i64* %offset289, align 8, !dbg !5043
  %155 = load %struct.access*, %struct.access** %racc, align 8, !dbg !5044
  %offset290 = getelementptr inbounds %struct.access, %struct.access* %155, i32 0, i32 0, !dbg !5045
  %156 = load i64, i64* %offset290, align 8, !dbg !5045
  %157 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5046
  %158 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5047
  call void @load_assign_lhs_subreplacements(%struct.access* %151, %struct.access* %152, i64 %154, i64 %156, %struct.gimple_stmt_iterator* %orig_gsi272, %struct.gimple_stmt_iterator* %157, i32* %refreshed, %union.tree_node* %158), !dbg !5048
  %159 = load i32, i32* %refreshed, align 4, !dbg !5049
  %cmp291 = icmp ne i32 %159, 1, !dbg !5051
  br i1 %cmp291, label %if.then293, label %if.end300, !dbg !5052

if.then293:                                       ; preds = %if.end287
  %160 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !5053
  %161 = load %union.gimple_statement_d*, %union.gimple_statement_d** %160, align 8, !dbg !5056
  %162 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5057
  %call294 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %162), !dbg !5058
  %cmp295 = icmp eq %union.gimple_statement_d* %161, %call294, !dbg !5059
  br i1 %cmp295, label %if.then297, label %if.end298, !dbg !5060

if.then297:                                       ; preds = %if.then293
  %163 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5061
  call void @gsi_next(%struct.gimple_stmt_iterator* %163), !dbg !5062
  br label %if.end298, !dbg !5062

if.end298:                                        ; preds = %if.then297, %if.then293
  %164 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !5063
  %165 = load %union.gimple_statement_d*, %union.gimple_statement_d** %164, align 8, !dbg !5064
  call void @unlink_stmt_vdef(%union.gimple_statement_d* %165), !dbg !5065
  call void @gsi_remove(%struct.gimple_stmt_iterator* %orig_gsi272, i8 zeroext 1), !dbg !5066
  %166 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 4), align 4, !dbg !5067
  %inc299 = add nsw i32 %166, 1, !dbg !5067
  store i32 %inc299, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 4), align 4, !dbg !5067
  store i32 2, i32* %retval, align 4, !dbg !5068
  br label %return, !dbg !5068

if.end300:                                        ; preds = %if.end287
  br label %if.end337, !dbg !5069

if.else301:                                       ; preds = %land.lhs.true267, %if.else263
  %167 = load %struct.access*, %struct.access** %racc, align 8, !dbg !5070
  %call302 = call zeroext i8 @access_has_children_p(%struct.access* %167), !dbg !5073
  %tobool303 = icmp ne i8 %call302, 0, !dbg !5073
  br i1 %tobool303, label %if.then304, label %if.else329, !dbg !5074

if.then304:                                       ; preds = %if.else301
  %168 = load %struct.access*, %struct.access** %racc, align 8, !dbg !5075
  %grp_unscalarized_data = getelementptr inbounds %struct.access, %struct.access* %168, i32 0, i32 14, !dbg !5078
  %bf.load305 = load i16, i16* %grp_unscalarized_data, align 8, !dbg !5078
  %bf.lshr306 = lshr i16 %bf.load305, 8, !dbg !5078
  %bf.clear307 = and i16 %bf.lshr306, 1, !dbg !5078
  %bf.cast308 = zext i16 %bf.clear307 to i32, !dbg !5078
  %tobool309 = icmp ne i32 %bf.cast308, 0, !dbg !5075
  br i1 %tobool309, label %if.else325, label %land.lhs.true310, !dbg !5079

land.lhs.true310:                                 ; preds = %if.then304
  %169 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5080
  %base311 = bitcast %union.tree_node* %169 to %struct.tree_base*, !dbg !5080
  %170 = bitcast %struct.tree_base* %base311 to i64*, !dbg !5080
  %bf.load312 = load i64, i64* %170, align 8, !dbg !5080
  %bf.clear313 = and i64 %bf.load312, 65535, !dbg !5080
  %bf.cast314 = trunc i64 %bf.clear313 to i32, !dbg !5080
  %cmp315 = icmp ne i32 %bf.cast314, 141, !dbg !5081
  br i1 %cmp315, label %if.then317, label %if.else325, !dbg !5082

if.then317:                                       ; preds = %land.lhs.true310
  %171 = load %struct.access*, %struct.access** %racc, align 8, !dbg !5083
  %first_child318 = getelementptr inbounds %struct.access, %struct.access* %171, i32 0, i32 8, !dbg !5085
  %172 = load %struct.access*, %struct.access** %first_child318, align 8, !dbg !5085
  %173 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5086
  %174 = load %struct.access*, %struct.access** %racc, align 8, !dbg !5087
  %offset319 = getelementptr inbounds %struct.access, %struct.access* %174, i32 0, i32 0, !dbg !5088
  %175 = load i64, i64* %offset319, align 8, !dbg !5088
  %176 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5089
  call void @generate_subtree_copies(%struct.access* %172, %union.tree_node* %173, i64 %175, i64 0, i64 0, %struct.gimple_stmt_iterator* %176, i8 zeroext 0, i8 zeroext 0), !dbg !5090
  %177 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !5091
  %178 = load %union.gimple_statement_d*, %union.gimple_statement_d** %177, align 8, !dbg !5091
  %179 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5091
  %call320 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %179), !dbg !5091
  %cmp321 = icmp eq %union.gimple_statement_d* %178, %call320, !dbg !5091
  br i1 %cmp321, label %cond.false, label %cond.true, !dbg !5091

cond.true:                                        ; preds = %if.then317
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 2718, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5091
  br label %cond.end, !dbg !5091

cond.false:                                       ; preds = %if.then317
  br label %cond.end, !dbg !5091

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond323 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5091
  %180 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !5092
  %181 = load %union.gimple_statement_d*, %union.gimple_statement_d** %180, align 8, !dbg !5093
  call void @unlink_stmt_vdef(%union.gimple_statement_d* %181), !dbg !5094
  %182 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5095
  call void @gsi_remove(%struct.gimple_stmt_iterator* %182, i8 zeroext 1), !dbg !5096
  %183 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 4), align 4, !dbg !5097
  %inc324 = add nsw i32 %183, 1, !dbg !5097
  store i32 %inc324, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 4), align 4, !dbg !5097
  store i32 2, i32* %retval, align 4, !dbg !5098
  br label %return, !dbg !5098

if.else325:                                       ; preds = %land.lhs.true310, %if.then304
  %184 = load %struct.access*, %struct.access** %racc, align 8, !dbg !5099
  %first_child326 = getelementptr inbounds %struct.access, %struct.access* %184, i32 0, i32 8, !dbg !5100
  %185 = load %struct.access*, %struct.access** %first_child326, align 8, !dbg !5100
  %186 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5101
  %187 = load %struct.access*, %struct.access** %racc, align 8, !dbg !5102
  %offset327 = getelementptr inbounds %struct.access, %struct.access* %187, i32 0, i32 0, !dbg !5103
  %188 = load i64, i64* %offset327, align 8, !dbg !5103
  %189 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5104
  call void @generate_subtree_copies(%struct.access* %185, %union.tree_node* %186, i64 %188, i64 0, i64 0, %struct.gimple_stmt_iterator* %189, i8 zeroext 0, i8 zeroext 1), !dbg !5105
  br label %if.end328

if.end328:                                        ; preds = %if.else325
  br label %if.end336, !dbg !5106

if.else329:                                       ; preds = %if.else301
  %190 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !5107
  %call330 = call zeroext i8 @access_has_children_p(%struct.access* %190), !dbg !5109
  %tobool331 = icmp ne i8 %call330, 0, !dbg !5109
  br i1 %tobool331, label %if.then332, label %if.end335, !dbg !5110

if.then332:                                       ; preds = %if.else329
  %191 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !5111
  %first_child333 = getelementptr inbounds %struct.access, %struct.access* %191, i32 0, i32 8, !dbg !5112
  %192 = load %struct.access*, %struct.access** %first_child333, align 8, !dbg !5112
  %193 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5113
  %194 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !5114
  %offset334 = getelementptr inbounds %struct.access, %struct.access* %194, i32 0, i32 0, !dbg !5115
  %195 = load i64, i64* %offset334, align 8, !dbg !5115
  %196 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5116
  call void @generate_subtree_copies(%struct.access* %192, %union.tree_node* %193, i64 %195, i64 0, i64 0, %struct.gimple_stmt_iterator* %196, i8 zeroext 1, i8 zeroext 1), !dbg !5117
  br label %if.end335, !dbg !5117

if.end335:                                        ; preds = %if.then332, %if.else329
  br label %if.end336

if.end336:                                        ; preds = %if.end335, %if.end328
  br label %if.end337

if.end337:                                        ; preds = %if.end336, %if.end300
  br label %if.end338

if.end338:                                        ; preds = %if.end337, %if.end261
  %197 = load i8, i8* %force_gimple_rhs, align 1, !dbg !5118
  %tobool339 = icmp ne i8 %197, 0, !dbg !5118
  br i1 %tobool339, label %if.then340, label %if.end342, !dbg !5120

if.then340:                                       ; preds = %if.end338
  %198 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5121
  %call341 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %orig_gsi, %union.tree_node* %198, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !5122
  store %union.tree_node* %call341, %union.tree_node** %rhs, align 8, !dbg !5123
  br label %if.end342, !dbg !5124

if.end342:                                        ; preds = %if.then340, %if.end338
  %199 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !5125
  %200 = load %union.gimple_statement_d*, %union.gimple_statement_d** %199, align 8, !dbg !5127
  %call343 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %200), !dbg !5128
  %201 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5129
  %cmp344 = icmp ne %union.tree_node* %call343, %201, !dbg !5130
  br i1 %cmp344, label %if.then346, label %if.end354, !dbg !5131

if.then346:                                       ; preds = %if.end342
  %202 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5132
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %orig_gsi, %union.tree_node* %202), !dbg !5134
  %203 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !5135
  %204 = load %union.gimple_statement_d*, %union.gimple_statement_d** %203, align 8, !dbg !5135
  %call347 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %orig_gsi), !dbg !5135
  %cmp348 = icmp eq %union.gimple_statement_d* %204, %call347, !dbg !5135
  br i1 %cmp348, label %cond.false351, label %cond.true350, !dbg !5135

cond.true350:                                     ; preds = %if.then346
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 2742, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5135
  br label %cond.end352, !dbg !5135

cond.false351:                                    ; preds = %if.then346
  br label %cond.end352, !dbg !5135

cond.end352:                                      ; preds = %cond.false351, %cond.true350
  %cond353 = phi i32 [ 0, %cond.true350 ], [ 0, %cond.false351 ], !dbg !5135
  br label %if.end354, !dbg !5136

if.end354:                                        ; preds = %cond.end352, %if.end342
  %205 = load i8, i8* %modify_this_stmt, align 1, !dbg !5137
  %conv355 = zext i8 %205 to i32, !dbg !5137
  %tobool356 = icmp ne i32 %conv355, 0, !dbg !5137
  %206 = zext i1 %tobool356 to i64, !dbg !5137
  %cond357 = select i1 %tobool356, i32 1, i32 0, !dbg !5137
  store i32 %cond357, i32* %retval, align 4, !dbg !5138
  br label %return, !dbg !5138

return:                                           ; preds = %if.end354, %cond.end, %if.end298, %if.then55, %if.then41, %if.then4, %if.then
  %207 = load i32, i32* %retval, align 4, !dbg !5139
  ret i32 %207, !dbg !5139
}

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_parameter_reductions() #0 !dbg !5140 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  %parm = alloca %union.tree_node*, align 8
  %access_vec = alloca %struct.VEC_access_p_heap*, align 8
  %access = alloca %struct.access*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5141, metadata !DIExpression()), !dbg !5142
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5143, metadata !DIExpression()), !dbg !5144
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %seq, align 8, !dbg !5144
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !5145, metadata !DIExpression()), !dbg !5146
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5147
  %decl_non_common = bitcast %union.tree_node* %0 to %struct.tree_decl_non_common*, !dbg !5147
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !5147
  %1 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !5147
  store %union.tree_node* %1, %union.tree_node** %parm, align 8, !dbg !5149
  br label %for.cond, !dbg !5150

for.cond:                                         ; preds = %for.inc15, %entry
  %2 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !5151
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5153
  br i1 %tobool, label %for.body, label %for.end16, !dbg !5153

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap** %access_vec, metadata !5154, metadata !DIExpression()), !dbg !5156
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !5157, metadata !DIExpression()), !dbg !5158
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !5159
  %4 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !5161
  %decl_minimal = bitcast %union.tree_node* %4 to %struct.tree_decl_minimal*, !dbg !5161
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !5161
  %5 = load i32, i32* %uid, align 4, !dbg !5161
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %3, i32 %5), !dbg !5162
  %tobool1 = icmp ne i32 %call, 0, !dbg !5162
  br i1 %tobool1, label %if.end, label %if.then, !dbg !5163

if.then:                                          ; preds = %for.body
  br label %for.inc15, !dbg !5164

if.end:                                           ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !5165
  %call2 = call %struct.VEC_access_p_heap* @get_base_access_vector(%union.tree_node* %6), !dbg !5166
  store %struct.VEC_access_p_heap* %call2, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !5167
  %7 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !5168
  %tobool3 = icmp ne %struct.VEC_access_p_heap* %7, null, !dbg !5168
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !5170

if.then4:                                         ; preds = %if.end
  br label %for.inc15, !dbg !5171

if.end5:                                          ; preds = %if.end
  %8 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5172
  %tobool6 = icmp ne %struct.gimple_seq_d* %8, null, !dbg !5172
  br i1 %tobool6, label %if.end9, label %if.then7, !dbg !5174

if.then7:                                         ; preds = %if.end5
  %call8 = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !5175
  store %struct.gimple_seq_d* %call8, %struct.gimple_seq_d** %seq, align 8, !dbg !5177
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5178
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %9), !dbg !5179
  %10 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5179
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5179
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !5179
  br label %if.end9, !dbg !5180

if.end9:                                          ; preds = %if.then7, %if.end5
  %12 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !5181
  %tobool10 = icmp ne %struct.VEC_access_p_heap* %12, null, !dbg !5181
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !5181

cond.true:                                        ; preds = %if.end9
  %13 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !5181
  %base = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %13, i32 0, i32 0, !dbg !5181
  br label %cond.end, !dbg !5181

cond.false:                                       ; preds = %if.end9
  br label %cond.end, !dbg !5181

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5181
  %call11 = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond, i32 0), !dbg !5181
  store %struct.access* %call11, %struct.access** %access, align 8, !dbg !5183
  br label %for.cond12, !dbg !5184

for.cond12:                                       ; preds = %for.inc, %cond.end
  %14 = load %struct.access*, %struct.access** %access, align 8, !dbg !5185
  %tobool13 = icmp ne %struct.access* %14, null, !dbg !5187
  br i1 %tobool13, label %for.body14, label %for.end, !dbg !5187

for.body14:                                       ; preds = %for.cond12
  %15 = load %struct.access*, %struct.access** %access, align 8, !dbg !5188
  %16 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !5189
  call void @generate_subtree_copies(%struct.access* %15, %union.tree_node* %16, i64 0, i64 0, i64 0, %struct.gimple_stmt_iterator* %gsi, i8 zeroext 1, i8 zeroext 1), !dbg !5190
  br label %for.inc, !dbg !5190

for.inc:                                          ; preds = %for.body14
  %17 = load %struct.access*, %struct.access** %access, align 8, !dbg !5191
  %next_grp = getelementptr inbounds %struct.access, %struct.access* %17, i32 0, i32 6, !dbg !5192
  %18 = load %struct.access*, %struct.access** %next_grp, align 8, !dbg !5192
  store %struct.access* %18, %struct.access** %access, align 8, !dbg !5193
  br label %for.cond12, !dbg !5194, !llvm.loop !5195

for.end:                                          ; preds = %for.cond12
  br label %for.inc15, !dbg !5197

for.inc15:                                        ; preds = %for.end, %if.then4, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !5198
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !5198
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5198
  %20 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5198
  store %union.tree_node* %20, %union.tree_node** %parm, align 8, !dbg !5199
  br label %for.cond, !dbg !5200, !llvm.loop !5201

for.end16:                                        ; preds = %for.cond
  %21 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5203
  %tobool17 = icmp ne %struct.gimple_seq_d* %21, null, !dbg !5203
  br i1 %tobool17, label %if.then18, label %if.end21, !dbg !5205

if.then18:                                        ; preds = %for.end16
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5206
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !5206
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5206
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5206
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 0, !dbg !5206
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5206
  %call19 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %24), !dbg !5207
  %25 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5208
  %call20 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %call19, %struct.gimple_seq_d* %25), !dbg !5209
  br label %if.end21, !dbg !5209

if.end21:                                         ; preds = %if.then18, %for.end16
  ret void, !dbg !5210
}

declare dso_local void @statistics_counter_event(%struct.function*, i8*, i32) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @sra_deinitialize() #0 !dbg !5211 {
entry:
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !5212
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %0), !dbg !5212
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !5212
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @should_scalarize_away_bitmap, align 8, !dbg !5213
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %1), !dbg !5213
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @should_scalarize_away_bitmap, align 8, !dbg !5213
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cannot_scalarize_away_bitmap, align 8, !dbg !5214
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %2), !dbg !5214
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @cannot_scalarize_away_bitmap, align 8, !dbg !5214
  %3 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @access_pool, align 8, !dbg !5215
  call void @free_alloc_pool(%struct.alloc_pool_def* %3), !dbg !5216
  %4 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @link_pool, align 8, !dbg !5217
  call void @free_alloc_pool(%struct.alloc_pool_def* %4), !dbg !5218
  %5 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !5219
  %6 = bitcast %struct._obstack_chunk* %5 to i8*, !dbg !5219
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i64, !dbg !5219
  %sub.ptr.sub = sub i64 0, %sub.ptr.rhs.cast, !dbg !5219
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !5219
  %7 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !5219
  %cmp = icmp sgt i64 %7, 0, !dbg !5219
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !5219

land.lhs.true:                                    ; preds = %entry
  %8 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !5219
  %9 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 4), align 8, !dbg !5219
  %10 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !5219
  %11 = bitcast %struct._obstack_chunk* %10 to i8*, !dbg !5219
  %sub.ptr.lhs.cast = ptrtoint i8* %9 to i64, !dbg !5219
  %sub.ptr.rhs.cast1 = ptrtoint i8* %11 to i64, !dbg !5219
  %sub.ptr.sub2 = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast1, !dbg !5219
  %cmp3 = icmp slt i64 %8, %sub.ptr.sub2, !dbg !5219
  br i1 %cmp3, label %cond.true, label %cond.false, !dbg !5219

cond.true:                                        ; preds = %land.lhs.true
  %12 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !5219
  %13 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !5219
  %14 = bitcast %struct._obstack_chunk* %13 to i8*, !dbg !5219
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %12, !dbg !5219
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 2), align 8, !dbg !5219
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !5219
  %15 = ptrtoint i8* %add.ptr to i64, !dbg !5219
  br label %cond.end, !dbg !5219

cond.false:                                       ; preds = %land.lhs.true, %entry
  %16 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !5219
  %17 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !5219
  %18 = bitcast %struct._obstack_chunk* %17 to i8*, !dbg !5219
  %add.ptr4 = getelementptr inbounds i8, i8* %18, i64 %16, !dbg !5219
  call void @obstack_free(%struct.obstack* @name_obstack, i8* %add.ptr4), !dbg !5219
  br label %cond.end, !dbg !5219

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %15, %cond.true ], [ 0, %cond.false ], !dbg !5219
  %19 = load %struct.pointer_map_t*, %struct.pointer_map_t** @base_access_vec, align 8, !dbg !5220
  call void @pointer_map_traverse(%struct.pointer_map_t* %19, i8 (i8*, i8**, i8*)* @delete_base_accesses, i8* null), !dbg !5221
  %20 = load %struct.pointer_map_t*, %struct.pointer_map_t** @base_access_vec, align 8, !dbg !5222
  call void @pointer_map_destroy(%struct.pointer_map_t* %20), !dbg !5223
  ret void, !dbg !5224
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local i32 @_obstack_begin(%struct.obstack*, i32, i32, i8* (i64)*, void (i8*)*) #2

declare dso_local i8* @xmalloc(i64) #2

declare dso_local void @free(i8*) #2

declare dso_local %struct.alloc_pool_def* @create_alloc_pool(i8*, i64, i64) #2

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @first_referenced_var(%struct.referenced_var_iterator* %iter) #0 !dbg !5225 {
entry:
  %iter.addr = alloca %struct.referenced_var_iterator*, align 8
  store %struct.referenced_var_iterator* %iter, %struct.referenced_var_iterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator** %iter.addr, metadata !5230, metadata !DIExpression()), !dbg !5231
  %0 = load %struct.referenced_var_iterator*, %struct.referenced_var_iterator** %iter.addr, align 8, !dbg !5232
  %hti = getelementptr inbounds %struct.referenced_var_iterator, %struct.referenced_var_iterator* %0, i32 0, i32 0, !dbg !5233
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5234
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !5234
  %call = call %struct.htab* @gimple_referenced_vars(%struct.function* %add.ptr), !dbg !5235
  %call1 = call i8* @first_htab_element(%struct.htab_iterator* %hti, %struct.htab* %call), !dbg !5236
  %2 = bitcast i8* %call1 to %union.tree_node*, !dbg !5237
  ret %union.tree_node* %2, !dbg !5238
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_referenced_vars_p(%struct.referenced_var_iterator* %iter) #0 !dbg !5239 {
entry:
  %iter.addr = alloca %struct.referenced_var_iterator*, align 8
  store %struct.referenced_var_iterator* %iter, %struct.referenced_var_iterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator** %iter.addr, metadata !5244, metadata !DIExpression()), !dbg !5245
  %0 = load %struct.referenced_var_iterator*, %struct.referenced_var_iterator** %iter.addr, align 8, !dbg !5246
  %hti = getelementptr inbounds %struct.referenced_var_iterator, %struct.referenced_var_iterator* %0, i32 0, i32 0, !dbg !5247
  %call = call zeroext i8 @end_htab_p(%struct.htab_iterator* %hti), !dbg !5248
  ret i8 %call, !dbg !5249
}

declare dso_local zeroext i8 @needs_to_live_in_memory(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @type_internals_preclude_sra_p(%union.tree_node* %type) #0 !dbg !5250 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %fld = alloca %union.tree_node*, align 8
  %et = alloca %union.tree_node*, align 8
  %ft = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5253, metadata !DIExpression()), !dbg !5254
  call void @llvm.dbg.declare(metadata %union.tree_node** %fld, metadata !5255, metadata !DIExpression()), !dbg !5256
  call void @llvm.dbg.declare(metadata %union.tree_node** %et, metadata !5257, metadata !DIExpression()), !dbg !5258
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5259
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5259
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5259
  %bf.load = load i64, i64* %1, align 8, !dbg !5259
  %bf.clear = and i64 %bf.load, 65535, !dbg !5259
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5259
  switch i32 %bf.cast, label %sw.default [
    i32 16, label %sw.bb
    i32 17, label %sw.bb
    i32 18, label %sw.bb
    i32 15, label %sw.bb54
  ], !dbg !5260

sw.bb:                                            ; preds = %entry, %entry, %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5261
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !5261
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !5261
  %3 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !5261
  store %union.tree_node* %3, %union.tree_node** %fld, align 8, !dbg !5264
  br label %for.cond, !dbg !5265

for.cond:                                         ; preds = %for.inc, %sw.bb
  %4 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !5266
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !5268
  br i1 %tobool, label %for.body, label %for.end, !dbg !5268

for.body:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !5269
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5269
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !5269
  %bf.load3 = load i64, i64* %6, align 8, !dbg !5269
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !5269
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !5269
  %cmp = icmp eq i32 %bf.cast5, 31, !dbg !5271
  br i1 %cmp, label %if.then, label %if.end52, !dbg !5272

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %ft, metadata !5273, metadata !DIExpression()), !dbg !5275
  %7 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !5276
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !5276
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5276
  %8 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !5276
  store %union.tree_node* %8, %union.tree_node** %ft, align 8, !dbg !5275
  %9 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !5277
  %base7 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5277
  %10 = bitcast %struct.tree_base* %base7 to i64*, !dbg !5277
  %bf.load8 = load i64, i64* %10, align 8, !dbg !5277
  %bf.lshr = lshr i64 %bf.load8, 19, !dbg !5277
  %bf.clear9 = and i64 %bf.lshr, 1, !dbg !5277
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !5277
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !5277
  br i1 %tobool11, label %if.then24, label %lor.lhs.false, !dbg !5279

lor.lhs.false:                                    ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !5280
  %field_decl = bitcast %union.tree_node* %11 to %struct.tree_field_decl*, !dbg !5280
  %offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !5280
  %12 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !5280
  %tobool12 = icmp ne %union.tree_node* %12, null, !dbg !5280
  br i1 %tobool12, label %lor.lhs.false13, label %if.then24, !dbg !5281

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !5282
  %decl_common = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !5282
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !5282
  %14 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !5282
  %tobool14 = icmp ne %union.tree_node* %14, null, !dbg !5282
  br i1 %tobool14, label %lor.lhs.false15, label %if.then24, !dbg !5283

lor.lhs.false15:                                  ; preds = %lor.lhs.false13
  %15 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !5284
  %field_decl16 = bitcast %union.tree_node* %15 to %struct.tree_field_decl*, !dbg !5284
  %offset17 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl16, i32 0, i32 1, !dbg !5284
  %16 = load %union.tree_node*, %union.tree_node** %offset17, align 8, !dbg !5284
  %call = call i32 @host_integerp(%union.tree_node* %16, i32 1), !dbg !5285
  %tobool18 = icmp ne i32 %call, 0, !dbg !5285
  br i1 %tobool18, label %lor.lhs.false19, label %if.then24, !dbg !5286

lor.lhs.false19:                                  ; preds = %lor.lhs.false15
  %17 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !5287
  %decl_common20 = bitcast %union.tree_node* %17 to %struct.tree_decl_common*, !dbg !5287
  %size21 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common20, i32 0, i32 1, !dbg !5287
  %18 = load %union.tree_node*, %union.tree_node** %size21, align 8, !dbg !5287
  %call22 = call i32 @host_integerp(%union.tree_node* %18, i32 1), !dbg !5288
  %tobool23 = icmp ne i32 %call22, 0, !dbg !5288
  br i1 %tobool23, label %if.end, label %if.then24, !dbg !5289

if.then24:                                        ; preds = %lor.lhs.false19, %lor.lhs.false15, %lor.lhs.false13, %lor.lhs.false, %if.then
  store i8 1, i8* %retval, align 1, !dbg !5290
  br label %return, !dbg !5290

if.end:                                           ; preds = %lor.lhs.false19
  %19 = load %union.tree_node*, %union.tree_node** %ft, align 8, !dbg !5291
  %base25 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !5291
  %20 = bitcast %struct.tree_base* %base25 to i64*, !dbg !5291
  %bf.load26 = load i64, i64* %20, align 8, !dbg !5291
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !5291
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !5291
  %cmp29 = icmp eq i32 %bf.cast28, 15, !dbg !5291
  br i1 %cmp29, label %land.lhs.true, label %lor.lhs.false30, !dbg !5291

lor.lhs.false30:                                  ; preds = %if.end
  %21 = load %union.tree_node*, %union.tree_node** %ft, align 8, !dbg !5291
  %base31 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !5291
  %22 = bitcast %struct.tree_base* %base31 to i64*, !dbg !5291
  %bf.load32 = load i64, i64* %22, align 8, !dbg !5291
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !5291
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !5291
  %cmp35 = icmp eq i32 %bf.cast34, 16, !dbg !5291
  br i1 %cmp35, label %land.lhs.true, label %lor.lhs.false36, !dbg !5291

lor.lhs.false36:                                  ; preds = %lor.lhs.false30
  %23 = load %union.tree_node*, %union.tree_node** %ft, align 8, !dbg !5291
  %base37 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !5291
  %24 = bitcast %struct.tree_base* %base37 to i64*, !dbg !5291
  %bf.load38 = load i64, i64* %24, align 8, !dbg !5291
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !5291
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !5291
  %cmp41 = icmp eq i32 %bf.cast40, 17, !dbg !5291
  br i1 %cmp41, label %land.lhs.true, label %lor.lhs.false42, !dbg !5291

lor.lhs.false42:                                  ; preds = %lor.lhs.false36
  %25 = load %union.tree_node*, %union.tree_node** %ft, align 8, !dbg !5291
  %base43 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !5291
  %26 = bitcast %struct.tree_base* %base43 to i64*, !dbg !5291
  %bf.load44 = load i64, i64* %26, align 8, !dbg !5291
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !5291
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !5291
  %cmp47 = icmp eq i32 %bf.cast46, 18, !dbg !5291
  br i1 %cmp47, label %land.lhs.true, label %if.end51, !dbg !5293

land.lhs.true:                                    ; preds = %lor.lhs.false42, %lor.lhs.false36, %lor.lhs.false30, %if.end
  %27 = load %union.tree_node*, %union.tree_node** %ft, align 8, !dbg !5294
  %call48 = call zeroext i8 @type_internals_preclude_sra_p(%union.tree_node* %27), !dbg !5295
  %conv = zext i8 %call48 to i32, !dbg !5295
  %tobool49 = icmp ne i32 %conv, 0, !dbg !5295
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !5296

if.then50:                                        ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !5297
  br label %return, !dbg !5297

if.end51:                                         ; preds = %land.lhs.true, %lor.lhs.false42
  br label %if.end52, !dbg !5298

if.end52:                                         ; preds = %if.end51, %for.body
  br label %for.inc, !dbg !5299

for.inc:                                          ; preds = %if.end52
  %28 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !5300
  %common53 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !5300
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 1, !dbg !5300
  %29 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5300
  store %union.tree_node* %29, %union.tree_node** %fld, align 8, !dbg !5301
  br label %for.cond, !dbg !5302, !llvm.loop !5303

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !5305
  br label %return, !dbg !5305

sw.bb54:                                          ; preds = %entry
  %30 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5306
  %common55 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !5306
  %type56 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 2, !dbg !5306
  %31 = load %union.tree_node*, %union.tree_node** %type56, align 8, !dbg !5306
  store %union.tree_node* %31, %union.tree_node** %et, align 8, !dbg !5307
  %32 = load %union.tree_node*, %union.tree_node** %et, align 8, !dbg !5308
  %base57 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !5308
  %33 = bitcast %struct.tree_base* %base57 to i64*, !dbg !5308
  %bf.load58 = load i64, i64* %33, align 8, !dbg !5308
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !5308
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !5308
  %cmp61 = icmp eq i32 %bf.cast60, 15, !dbg !5308
  br i1 %cmp61, label %if.then84, label %lor.lhs.false63, !dbg !5308

lor.lhs.false63:                                  ; preds = %sw.bb54
  %34 = load %union.tree_node*, %union.tree_node** %et, align 8, !dbg !5308
  %base64 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !5308
  %35 = bitcast %struct.tree_base* %base64 to i64*, !dbg !5308
  %bf.load65 = load i64, i64* %35, align 8, !dbg !5308
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !5308
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !5308
  %cmp68 = icmp eq i32 %bf.cast67, 16, !dbg !5308
  br i1 %cmp68, label %if.then84, label %lor.lhs.false70, !dbg !5308

lor.lhs.false70:                                  ; preds = %lor.lhs.false63
  %36 = load %union.tree_node*, %union.tree_node** %et, align 8, !dbg !5308
  %base71 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !5308
  %37 = bitcast %struct.tree_base* %base71 to i64*, !dbg !5308
  %bf.load72 = load i64, i64* %37, align 8, !dbg !5308
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !5308
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !5308
  %cmp75 = icmp eq i32 %bf.cast74, 17, !dbg !5308
  br i1 %cmp75, label %if.then84, label %lor.lhs.false77, !dbg !5308

lor.lhs.false77:                                  ; preds = %lor.lhs.false70
  %38 = load %union.tree_node*, %union.tree_node** %et, align 8, !dbg !5308
  %base78 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !5308
  %39 = bitcast %struct.tree_base* %base78 to i64*, !dbg !5308
  %bf.load79 = load i64, i64* %39, align 8, !dbg !5308
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !5308
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !5308
  %cmp82 = icmp eq i32 %bf.cast81, 18, !dbg !5308
  br i1 %cmp82, label %if.then84, label %if.else, !dbg !5310

if.then84:                                        ; preds = %lor.lhs.false77, %lor.lhs.false70, %lor.lhs.false63, %sw.bb54
  %40 = load %union.tree_node*, %union.tree_node** %et, align 8, !dbg !5311
  %call85 = call zeroext i8 @type_internals_preclude_sra_p(%union.tree_node* %40), !dbg !5312
  store i8 %call85, i8* %retval, align 1, !dbg !5313
  br label %return, !dbg !5313

if.else:                                          ; preds = %lor.lhs.false77
  store i8 0, i8* %retval, align 1, !dbg !5314
  br label %return, !dbg !5314

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5315
  br label %return, !dbg !5315

return:                                           ; preds = %sw.default, %if.else, %if.then84, %for.end, %if.then50, %if.then24
  %41 = load i8, i8* %retval, align 1, !dbg !5316
  ret i8 %41, !dbg !5316
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_va_list_type(%union.tree_node* %type) #0 !dbg !5317 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5318, metadata !DIExpression()), !dbg !5319
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5320
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !5320
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 16, !dbg !5320
  %1 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !5320
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 44), align 16, !dbg !5321
  %type2 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !5321
  %main_variant3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 16, !dbg !5321
  %3 = load %union.tree_node*, %union.tree_node** %main_variant3, align 8, !dbg !5321
  %cmp = icmp eq %union.tree_node* %1, %3, !dbg !5322
  %conv = zext i1 %cmp to i32, !dbg !5322
  %conv4 = trunc i32 %conv to i8, !dbg !5320
  ret i8 %conv4, !dbg !5323
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @next_referenced_var(%struct.referenced_var_iterator* %iter) #0 !dbg !5324 {
entry:
  %iter.addr = alloca %struct.referenced_var_iterator*, align 8
  store %struct.referenced_var_iterator* %iter, %struct.referenced_var_iterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator** %iter.addr, metadata !5325, metadata !DIExpression()), !dbg !5326
  %0 = load %struct.referenced_var_iterator*, %struct.referenced_var_iterator** %iter.addr, align 8, !dbg !5327
  %hti = getelementptr inbounds %struct.referenced_var_iterator, %struct.referenced_var_iterator* %0, i32 0, i32 0, !dbg !5328
  %call = call i8* @next_htab_element(%struct.htab_iterator* %hti), !dbg !5329
  %1 = bitcast i8* %call to %union.tree_node*, !dbg !5330
  ret %union.tree_node* %1, !dbg !5331
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @first_htab_element(%struct.htab_iterator* %hti, %struct.htab* %table) #0 !dbg !5332 {
entry:
  %retval = alloca i8*, align 8
  %hti.addr = alloca %struct.htab_iterator*, align 8
  %table.addr = alloca %struct.htab*, align 8
  %x = alloca i8*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !5336, metadata !DIExpression()), !dbg !5337
  store %struct.htab* %table, %struct.htab** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %table.addr, metadata !5338, metadata !DIExpression()), !dbg !5339
  %0 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !5340
  %1 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5341
  %htab = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %1, i32 0, i32 0, !dbg !5342
  store %struct.htab* %0, %struct.htab** %htab, align 8, !dbg !5343
  %2 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !5344
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %2, i32 0, i32 3, !dbg !5345
  %3 = load i8**, i8*** %entries, align 8, !dbg !5345
  %4 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5346
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %4, i32 0, i32 1, !dbg !5347
  store i8** %3, i8*** %slot, align 8, !dbg !5348
  %5 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5349
  %slot1 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %5, i32 0, i32 1, !dbg !5350
  %6 = load i8**, i8*** %slot1, align 8, !dbg !5350
  %7 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !5351
  %call = call i64 @htab_size(%struct.htab* %7), !dbg !5352
  %add.ptr = getelementptr inbounds i8*, i8** %6, i64 %call, !dbg !5353
  %8 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5354
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %8, i32 0, i32 2, !dbg !5355
  store i8** %add.ptr, i8*** %limit, align 8, !dbg !5356
  br label %do.body, !dbg !5357

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata i8** %x, metadata !5358, metadata !DIExpression()), !dbg !5360
  %9 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5361
  %slot2 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %9, i32 0, i32 1, !dbg !5362
  %10 = load i8**, i8*** %slot2, align 8, !dbg !5362
  %11 = load i8*, i8** %10, align 8, !dbg !5363
  store i8* %11, i8** %x, align 8, !dbg !5360
  %12 = load i8*, i8** %x, align 8, !dbg !5364
  %cmp = icmp ne i8* %12, null, !dbg !5366
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5367

land.lhs.true:                                    ; preds = %do.body
  %13 = load i8*, i8** %x, align 8, !dbg !5368
  %cmp3 = icmp ne i8* %13, inttoptr (i64 1 to i8*), !dbg !5369
  br i1 %cmp3, label %if.then, label %if.end, !dbg !5370

if.then:                                          ; preds = %land.lhs.true
  br label %do.end, !dbg !5371

if.end:                                           ; preds = %land.lhs.true, %do.body
  br label %do.cond, !dbg !5372

do.cond:                                          ; preds = %if.end
  %14 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5373
  %slot4 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %14, i32 0, i32 1, !dbg !5374
  %15 = load i8**, i8*** %slot4, align 8, !dbg !5375
  %incdec.ptr = getelementptr inbounds i8*, i8** %15, i32 1, !dbg !5375
  store i8** %incdec.ptr, i8*** %slot4, align 8, !dbg !5375
  %16 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5376
  %limit5 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %16, i32 0, i32 2, !dbg !5377
  %17 = load i8**, i8*** %limit5, align 8, !dbg !5377
  %cmp6 = icmp ult i8** %incdec.ptr, %17, !dbg !5378
  br i1 %cmp6, label %do.body, label %do.end, !dbg !5372, !llvm.loop !5379

do.end:                                           ; preds = %do.cond, %if.then
  %18 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5381
  %slot7 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %18, i32 0, i32 1, !dbg !5383
  %19 = load i8**, i8*** %slot7, align 8, !dbg !5383
  %20 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5384
  %limit8 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %20, i32 0, i32 2, !dbg !5385
  %21 = load i8**, i8*** %limit8, align 8, !dbg !5385
  %cmp9 = icmp ult i8** %19, %21, !dbg !5386
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !5387

if.then10:                                        ; preds = %do.end
  %22 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5388
  %slot11 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %22, i32 0, i32 1, !dbg !5389
  %23 = load i8**, i8*** %slot11, align 8, !dbg !5389
  %24 = load i8*, i8** %23, align 8, !dbg !5390
  store i8* %24, i8** %retval, align 8, !dbg !5391
  br label %return, !dbg !5391

if.end12:                                         ; preds = %do.end
  store i8* null, i8** %retval, align 8, !dbg !5392
  br label %return, !dbg !5392

return:                                           ; preds = %if.end12, %if.then10
  %25 = load i8*, i8** %retval, align 8, !dbg !5393
  ret i8* %25, !dbg !5393
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.htab* @gimple_referenced_vars(%struct.function* %fun) #0 !dbg !5394 {
entry:
  %retval = alloca %struct.htab*, align 8
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !5399, metadata !DIExpression()), !dbg !5400
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !5401
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 3, !dbg !5403
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5403
  %tobool = icmp ne %struct.gimple_df* %1, null, !dbg !5401
  br i1 %tobool, label %if.end, label %if.then, !dbg !5404

if.then:                                          ; preds = %entry
  store %struct.htab* null, %struct.htab** %retval, align 8, !dbg !5405
  br label %return, !dbg !5405

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !5406
  %gimple_df1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 3, !dbg !5407
  %3 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df1, align 8, !dbg !5407
  %referenced_vars = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %3, i32 0, i32 0, !dbg !5408
  %4 = load %struct.htab*, %struct.htab** %referenced_vars, align 8, !dbg !5408
  store %struct.htab* %4, %struct.htab** %retval, align 8, !dbg !5409
  br label %return, !dbg !5409

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.htab*, %struct.htab** %retval, align 8, !dbg !5410
  ret %struct.htab* %5, !dbg !5410
}

declare dso_local i64 @htab_size(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_htab_p(%struct.htab_iterator* %hti) #0 !dbg !5411 {
entry:
  %retval = alloca i8, align 1
  %hti.addr = alloca %struct.htab_iterator*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !5416, metadata !DIExpression()), !dbg !5417
  %0 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5418
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %0, i32 0, i32 1, !dbg !5420
  %1 = load i8**, i8*** %slot, align 8, !dbg !5420
  %2 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5421
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %2, i32 0, i32 2, !dbg !5422
  %3 = load i8**, i8*** %limit, align 8, !dbg !5422
  %cmp = icmp uge i8** %1, %3, !dbg !5423
  br i1 %cmp, label %if.then, label %if.end, !dbg !5424

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !5425
  br label %return, !dbg !5425

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5426
  br label %return, !dbg !5426

return:                                           ; preds = %if.end, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !5427
  ret i8 %4, !dbg !5427
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @next_htab_element(%struct.htab_iterator* %hti) #0 !dbg !5428 {
entry:
  %retval = alloca i8*, align 8
  %hti.addr = alloca %struct.htab_iterator*, align 8
  %x = alloca i8*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !5431, metadata !DIExpression()), !dbg !5432
  br label %while.cond, !dbg !5433

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5434
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %0, i32 0, i32 1, !dbg !5435
  %1 = load i8**, i8*** %slot, align 8, !dbg !5436
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1, !dbg !5436
  store i8** %incdec.ptr, i8*** %slot, align 8, !dbg !5436
  %2 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5437
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %2, i32 0, i32 2, !dbg !5438
  %3 = load i8**, i8*** %limit, align 8, !dbg !5438
  %cmp = icmp ult i8** %incdec.ptr, %3, !dbg !5439
  br i1 %cmp, label %while.body, label %while.end, !dbg !5433

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %x, metadata !5440, metadata !DIExpression()), !dbg !5442
  %4 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5443
  %slot1 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %4, i32 0, i32 1, !dbg !5444
  %5 = load i8**, i8*** %slot1, align 8, !dbg !5444
  %6 = load i8*, i8** %5, align 8, !dbg !5445
  store i8* %6, i8** %x, align 8, !dbg !5442
  %7 = load i8*, i8** %x, align 8, !dbg !5446
  %cmp2 = icmp ne i8* %7, null, !dbg !5448
  br i1 %cmp2, label %land.lhs.true, label %if.end, !dbg !5449

land.lhs.true:                                    ; preds = %while.body
  %8 = load i8*, i8** %x, align 8, !dbg !5450
  %cmp3 = icmp ne i8* %8, inttoptr (i64 1 to i8*), !dbg !5451
  br i1 %cmp3, label %if.then, label %if.end, !dbg !5452

if.then:                                          ; preds = %land.lhs.true
  %9 = load i8*, i8** %x, align 8, !dbg !5453
  store i8* %9, i8** %retval, align 8, !dbg !5454
  br label %return, !dbg !5454

if.end:                                           ; preds = %land.lhs.true, %while.body
  br label %while.cond, !dbg !5433, !llvm.loop !5455

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval, align 8, !dbg !5457
  br label %return, !dbg !5457

return:                                           ; preds = %while.end, %if.then
  %10 = load i8*, i8** %retval, align 8, !dbg !5458
  ret i8* %10, !dbg !5458
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5459 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5462, metadata !DIExpression()), !dbg !5463
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5464
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5464
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5465
  %conv = zext i1 %cmp to i32, !dbg !5465
  %conv1 = trunc i32 %conv to i8, !dbg !5466
  ret i8 %conv1, !dbg !5467
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5468 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5471, metadata !DIExpression()), !dbg !5472
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5473
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5473
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5474
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5474
  ret %union.gimple_statement_d* %1, !dbg !5475
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5476 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5479, metadata !DIExpression()), !dbg !5480
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5481
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5482
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5482
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5483
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5483
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5484
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5485
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5486
  ret void, !dbg !5487
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5488 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5491, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5493, metadata !DIExpression()), !dbg !5494
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5495, metadata !DIExpression()), !dbg !5496
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5497
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !5498
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !5499
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5500
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !5501
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5502
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5503
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5504
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5505
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !5506
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5507
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5508
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !5509
  ret void, !dbg !5510
}

declare dso_local zeroext i8 @stmt_can_throw_external(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !5511 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5515, metadata !DIExpression()), !dbg !5516
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5517
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5518
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5519
  %bf.load = load i32, i32* %1, align 8, !dbg !5519
  %bf.clear = and i32 %bf.load, 255, !dbg !5519
  ret i32 %bf.clear, !dbg !5520
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_return_retval_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5521 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5524, metadata !DIExpression()), !dbg !5525
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5526
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 0), !dbg !5527
  ret %union.tree_node** %call, !dbg !5528
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !5529 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5532, metadata !DIExpression()), !dbg !5533
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !5534, metadata !DIExpression()), !dbg !5535
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5536
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !5537
  store i32 %call, i32* %num_ops, align 4, !dbg !5538
  %1 = load i32, i32* %num_ops, align 4, !dbg !5539
  %sub = sub i32 %1, 3, !dbg !5540
  ret i32 %sub, !dbg !5541
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !5542 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5545, metadata !DIExpression()), !dbg !5546
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5547, metadata !DIExpression()), !dbg !5548
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5549
  %1 = load i32, i32* %index.addr, align 4, !dbg !5550
  %add = add i32 %1, 3, !dbg !5551
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 %add), !dbg !5552
  ret %union.tree_node** %call, !dbg !5553
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !5554 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5557, metadata !DIExpression()), !dbg !5558
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !5559, metadata !DIExpression()), !dbg !5560
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5561
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !5562
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !5560
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5563
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5563
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5563
  %bf.load = load i64, i64* %2, align 8, !dbg !5563
  %bf.clear = and i64 %bf.load, 65535, !dbg !5563
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5563
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !5565
  br i1 %cmp, label %if.then, label %if.end, !dbg !5566

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5567
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !5567
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5567
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5567
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5567
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !5568
  br label %return, !dbg !5568

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5569
  br label %return, !dbg !5569

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5570
  ret %union.tree_node* %5, !dbg !5570
}

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

declare dso_local %struct.cgraph_node* @cgraph_get_node(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @callsite_has_enough_arguments_p(%union.gimple_statement_d* %call) #0 !dbg !5571 {
entry:
  %call.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !5574, metadata !DIExpression()), !dbg !5575
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !5576
  %call1 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %0), !dbg !5577
  %1 = load i32, i32* @func_param_count, align 4, !dbg !5578
  %cmp = icmp uge i32 %call1, %1, !dbg !5579
  %conv = zext i1 %cmp to i32, !dbg !5579
  %conv2 = trunc i32 %conv to i8, !dbg !5577
  ret i8 %conv2, !dbg !5580
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5581 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5582, metadata !DIExpression()), !dbg !5583
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5584
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5585
  ret %union.tree_node* %call, !dbg !5586
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_call_lhs_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5587 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5588, metadata !DIExpression()), !dbg !5589
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5590
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 0), !dbg !5591
  ret %union.tree_node** %call, !dbg !5592
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @disqualify_ops_if_throwing_stmt(%union.gimple_statement_d* %stmt, %union.tree_node* %lhs, %union.tree_node* %rhs) #0 !dbg !5593 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5596, metadata !DIExpression()), !dbg !5597
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !5598, metadata !DIExpression()), !dbg !5599
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !5600, metadata !DIExpression()), !dbg !5601
  %0 = load i32, i32* @sra_mode, align 4, !dbg !5602
  %cmp = icmp eq i32 %0, 1, !dbg !5604
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !5605

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @sra_mode, align 4, !dbg !5606
  %cmp1 = icmp eq i32 %1, 2, !dbg !5607
  br i1 %cmp1, label %land.lhs.true, label %if.end8, !dbg !5608

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5609
  %call = call zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d* %2), !dbg !5610
  %conv = zext i8 %call to i32, !dbg !5610
  %tobool = icmp ne i32 %conv, 0, !dbg !5610
  br i1 %tobool, label %if.then, label %lor.lhs.false2, !dbg !5611

lor.lhs.false2:                                   ; preds = %land.lhs.true
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5612
  %call3 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %3), !dbg !5613
  %conv4 = zext i8 %call3 to i32, !dbg !5613
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !5613
  br i1 %tobool5, label %if.then, label %if.end8, !dbg !5614

if.then:                                          ; preds = %lor.lhs.false2, %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !5615
  call void @disqualify_base_of_expr(%union.tree_node* %4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)), !dbg !5617
  %5 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !5618
  %tobool6 = icmp ne %union.tree_node* %5, null, !dbg !5618
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !5620

if.then7:                                         ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !5621
  call void @disqualify_base_of_expr(%union.tree_node* %6, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.17, i64 0, i64 0)), !dbg !5622
  br label %if.end, !dbg !5622

if.end:                                           ; preds = %if.then7, %if.then
  store i8 1, i8* %retval, align 1, !dbg !5623
  br label %return, !dbg !5623

if.end8:                                          ; preds = %lor.lhs.false2, %lor.lhs.false
  store i8 0, i8* %retval, align 1, !dbg !5624
  br label %return, !dbg !5624

return:                                           ; preds = %if.end8, %if.end
  %7 = load i8, i8* %retval, align 1, !dbg !5625
  ret i8 %7, !dbg !5625
}

declare dso_local zeroext i8 @walk_stmt_load_store_addr_ops(%union.gimple_statement_d*, i8*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @asm_visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %op, i8* %data) #0 !dbg !5626 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca i8*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5629, metadata !DIExpression()), !dbg !5630
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !5631, metadata !DIExpression()), !dbg !5632
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5633, metadata !DIExpression()), !dbg !5634
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5635
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5635
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5635
  %bf.load = load i64, i64* %1, align 8, !dbg !5635
  %bf.clear = and i64 %bf.load, 65535, !dbg !5635
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5635
  %idxprom = sext i32 %bf.cast to i64, !dbg !5635
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5635
  %2 = load i32, i32* %arrayidx, align 4, !dbg !5635
  %cmp = icmp eq i32 %2, 3, !dbg !5635
  br i1 %cmp, label %if.then, label %if.end, !dbg !5637

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5638
  call void @disqualify_candidate(%union.tree_node* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20, i64 0, i64 0)), !dbg !5639
  br label %if.end, !dbg !5639

if.end:                                           ; preds = %if.then, %entry
  ret i8 0, !dbg !5640
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_ninputs(%union.gimple_statement_d* %gs) #0 !dbg !5641 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5642, metadata !DIExpression()), !dbg !5643
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5644
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !5645
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !5646
  %1 = load i8, i8* %ni, align 8, !dbg !5646
  %conv = zext i8 %1 to i32, !dbg !5644
  ret i32 %conv, !dbg !5647
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !5648 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5651, metadata !DIExpression()), !dbg !5652
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5653, metadata !DIExpression()), !dbg !5654
  %0 = load i32, i32* %index.addr, align 4, !dbg !5655
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5655
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !5655
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !5655
  %2 = load i8, i8* %ni, align 8, !dbg !5655
  %conv = zext i8 %2 to i32, !dbg !5655
  %cmp = icmp ule i32 %0, %conv, !dbg !5655
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5655

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i32 2622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5655
  br label %cond.end, !dbg !5655

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5655

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5655
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5656
  %4 = load i32, i32* %index.addr, align 4, !dbg !5657
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %4), !dbg !5658
  ret %union.tree_node* %call, !dbg !5659
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_noutputs(%union.gimple_statement_d* %gs) #0 !dbg !5660 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5661, metadata !DIExpression()), !dbg !5662
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5663
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !5664
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !5665
  %1 = load i8, i8* %no, align 1, !dbg !5665
  %conv = zext i8 %1 to i32, !dbg !5663
  ret i32 %conv, !dbg !5666
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !5667 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5668, metadata !DIExpression()), !dbg !5669
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5670, metadata !DIExpression()), !dbg !5671
  %0 = load i32, i32* %index.addr, align 4, !dbg !5672
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5672
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !5672
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !5672
  %2 = load i8, i8* %no, align 1, !dbg !5672
  %conv = zext i8 %2 to i32, !dbg !5672
  %cmp = icmp ule i32 %0, %conv, !dbg !5672
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5672

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i32 2655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5672
  br label %cond.end, !dbg !5672

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5672

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5672
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5673
  %4 = load i32, i32* %index.addr, align 4, !dbg !5674
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5675
  %gimple_asm2 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_asm*, !dbg !5676
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm2, i32 0, i32 2, !dbg !5677
  %6 = load i8, i8* %ni, align 8, !dbg !5677
  %conv3 = zext i8 %6 to i32, !dbg !5675
  %add = add i32 %4, %conv3, !dbg !5678
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %add), !dbg !5679
  ret %union.tree_node* %call, !dbg !5680
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !5681 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !5684, metadata !DIExpression()), !dbg !5685
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5686
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5688
  %tobool = icmp ne i8 %call, 0, !dbg !5688
  br i1 %tobool, label %if.then, label %if.end, !dbg !5689

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5690
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !5692
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5693
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !5694
  br label %if.end, !dbg !5695

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5696
}

declare dso_local zeroext i8 @maybe_clean_eh_stmt(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !5697 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5703, metadata !DIExpression()), !dbg !5704
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5705
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5706
  %1 = load i32, i32* %flags, align 8, !dbg !5706
  %and = and i32 %1, 512, !dbg !5707
  %tobool = icmp ne i32 %and, 0, !dbg !5707
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !5708

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5709
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5710
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5711
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !5711
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !5709
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5712

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5713
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5714
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !5715
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !5715
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !5716
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5716
  br label %cond.end, !dbg !5712

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5712

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !5712
  ret %struct.gimple_seq_d* %cond, !dbg !5717
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !5718 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5724, metadata !DIExpression()), !dbg !5725
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5726
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5726
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5726

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5727
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5728
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5728
  br label %cond.end, !dbg !5726

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5726

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5726
  ret %struct.gimple_seq_node_d* %cond, !dbg !5729
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5730 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5731, metadata !DIExpression()), !dbg !5732
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5733, metadata !DIExpression()), !dbg !5734
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5735
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5737
  %tobool = icmp ne i8 %call, 0, !dbg !5737
  br i1 %tobool, label %if.then, label %if.else, !dbg !5738

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5739
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5741
  %2 = load i32, i32* %i.addr, align 4, !dbg !5742
  %idx.ext = zext i32 %2 to i64, !dbg !5743
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !5743
  store %union.tree_node** %add.ptr, %union.tree_node*** %retval, align 8, !dbg !5744
  br label %return, !dbg !5744

if.else:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !5745
  br label %return, !dbg !5745

return:                                           ; preds = %if.else, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !5746
  ret %union.tree_node** %3, !dbg !5746
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !5747 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5750, metadata !DIExpression()), !dbg !5751
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5752
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5753
  %cmp = icmp uge i32 %call, 1, !dbg !5754
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5755

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5756
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5757
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5758
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5759
  %land.ext = zext i1 %2 to i32, !dbg !5755
  %conv = trunc i32 %land.ext to i8, !dbg !5753
  ret i8 %conv, !dbg !5760
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !5761 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5764, metadata !DIExpression()), !dbg !5765
  call void @llvm.dbg.declare(metadata i64* %off, metadata !5766, metadata !DIExpression()), !dbg !5767
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5768
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !5769
  %idxprom = zext i32 %call to i64, !dbg !5770
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !5770
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5770
  store i64 %1, i64* %off, align 8, !dbg !5771
  %2 = load i64, i64* %off, align 8, !dbg !5772
  %cmp = icmp ne i64 %2, 0, !dbg !5772
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5772

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5772
  br label %cond.end, !dbg !5772

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5772

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5772
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5773
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !5774
  %5 = load i64, i64* %off, align 8, !dbg !5775
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5776
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !5777
  ret %union.tree_node** %6, !dbg !5778
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !5779 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5782, metadata !DIExpression()), !dbg !5783
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5784
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5785
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !5786
  ret i32 %call1, !dbg !5787
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !5788 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5791, metadata !DIExpression()), !dbg !5792
  %0 = load i32, i32* %code.addr, align 4, !dbg !5793
  %idxprom = zext i32 %0 to i64, !dbg !5794
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !5794
  %1 = load i32, i32* %arrayidx, align 4, !dbg !5794
  ret i32 %1, !dbg !5795
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !5796 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5797, metadata !DIExpression()), !dbg !5798
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5799
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5800
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !5801
  %1 = load i32, i32* %num_ops, align 4, !dbg !5801
  ret i32 %1, !dbg !5802
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !5803 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5804, metadata !DIExpression()), !dbg !5805
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5806
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5807
  ret %union.tree_node* %call, !dbg !5808
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5809 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5810, metadata !DIExpression()), !dbg !5811
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5812, metadata !DIExpression()), !dbg !5813
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5814
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5816
  %tobool = icmp ne i8 %call, 0, !dbg !5816
  br i1 %tobool, label %if.then, label %if.else, !dbg !5817

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5818
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5820
  %2 = load i32, i32* %i.addr, align 4, !dbg !5821
  %idxprom = zext i32 %2 to i64, !dbg !5820
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5820
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5820
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5822
  br label %return, !dbg !5822

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5823
  br label %return, !dbg !5823

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5824
  ret %union.tree_node* %4, !dbg !5824
}

declare dso_local zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @disqualify_base_of_expr(%union.tree_node* %t, i8* %reason) #0 !dbg !5825 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %reason.addr = alloca i8*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5828, metadata !DIExpression()), !dbg !5829
  store i8* %reason, i8** %reason.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %reason.addr, metadata !5830, metadata !DIExpression()), !dbg !5831
  br label %while.cond, !dbg !5832

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5833
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !5834
  %tobool = icmp ne i8 %call, 0, !dbg !5832
  br i1 %tobool, label %while.body, label %while.end, !dbg !5832

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5835
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !5835
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5835
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5835
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5835
  store %union.tree_node* %2, %union.tree_node** %t.addr, align 8, !dbg !5836
  br label %while.cond, !dbg !5832, !llvm.loop !5837

while.end:                                        ; preds = %while.cond
  %3 = load i32, i32* @sra_mode, align 4, !dbg !5838
  %cmp = icmp eq i32 %3, 0, !dbg !5840
  br i1 %cmp, label %if.then, label %if.end18, !dbg !5841

if.then:                                          ; preds = %while.end
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5842
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5842
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !5842
  %bf.load = load i64, i64* %5, align 8, !dbg !5842
  %bf.clear = and i64 %bf.load, 65535, !dbg !5842
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5842
  %cmp1 = icmp eq i32 %bf.cast, 47, !dbg !5842
  br i1 %cmp1, label %if.then13, label %lor.lhs.false, !dbg !5842

lor.lhs.false:                                    ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5842
  %base2 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5842
  %7 = bitcast %struct.tree_base* %base2 to i64*, !dbg !5842
  %bf.load3 = load i64, i64* %7, align 8, !dbg !5842
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !5842
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !5842
  %cmp6 = icmp eq i32 %bf.cast5, 48, !dbg !5842
  br i1 %cmp6, label %if.then13, label %lor.lhs.false7, !dbg !5842

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5842
  %base8 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5842
  %9 = bitcast %struct.tree_base* %base8 to i64*, !dbg !5842
  %bf.load9 = load i64, i64* %9, align 8, !dbg !5842
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !5842
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !5842
  %cmp12 = icmp eq i32 %bf.cast11, 49, !dbg !5842
  br i1 %cmp12, label %if.then13, label %if.end, !dbg !5845

if.then13:                                        ; preds = %lor.lhs.false7, %lor.lhs.false, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5846
  %exp14 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !5846
  %operands15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp14, i32 0, i32 3, !dbg !5846
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands15, i64 0, i64 0, !dbg !5846
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !5846
  store %union.tree_node* %11, %union.tree_node** %t.addr, align 8, !dbg !5847
  br label %if.end, !dbg !5848

if.end:                                           ; preds = %if.then13, %lor.lhs.false7
  %12 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5849
  %call17 = call %union.tree_node* @get_ssa_base_param(%union.tree_node* %12), !dbg !5850
  store %union.tree_node* %call17, %union.tree_node** %t.addr, align 8, !dbg !5851
  br label %if.end18, !dbg !5852

if.end18:                                         ; preds = %if.end, %while.end
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5853
  %tobool19 = icmp ne %union.tree_node* %13, null, !dbg !5853
  br i1 %tobool19, label %land.lhs.true, label %if.end27, !dbg !5855

land.lhs.true:                                    ; preds = %if.end18
  %14 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5856
  %base20 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5856
  %15 = bitcast %struct.tree_base* %base20 to i64*, !dbg !5856
  %bf.load21 = load i64, i64* %15, align 8, !dbg !5856
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !5856
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !5856
  %idxprom = sext i32 %bf.cast23 to i64, !dbg !5856
  %arrayidx24 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5856
  %16 = load i32, i32* %arrayidx24, align 4, !dbg !5856
  %cmp25 = icmp eq i32 %16, 3, !dbg !5856
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !5857

if.then26:                                        ; preds = %land.lhs.true
  %17 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5858
  %18 = load i8*, i8** %reason.addr, align 8, !dbg !5859
  call void @disqualify_candidate(%union.tree_node* %17, i8* %18), !dbg !5860
  br label %if.end27, !dbg !5860

if.end27:                                         ; preds = %if.then26, %land.lhs.true, %if.end18
  ret void, !dbg !5861
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !5862 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5868, metadata !DIExpression()), !dbg !5869
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5870
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5870
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5870
  %bf.load = load i64, i64* %1, align 8, !dbg !5870
  %bf.clear = and i64 %bf.load, 65535, !dbg !5870
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5870
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !5871

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !5872
  br label %return, !dbg !5872

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5874
  br label %return, !dbg !5874

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !5875
  ret i8 %2, !dbg !5875
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_ssa_base_param(%union.tree_node* %t) #0 !dbg !5876 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5879, metadata !DIExpression()), !dbg !5880
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5881
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5881
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5881
  %bf.load = load i64, i64* %1, align 8, !dbg !5881
  %bf.clear = and i64 %bf.load, 65535, !dbg !5881
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5881
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !5883
  br i1 %cmp, label %if.then, label %if.end, !dbg !5884

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5885
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5885
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5885
  %bf.load2 = load i64, i64* %3, align 8, !dbg !5885
  %bf.lshr = lshr i64 %bf.load2, 32, !dbg !5885
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !5885
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5885
  %tobool = icmp ne i32 %bf.cast4, 0, !dbg !5885
  br i1 %tobool, label %if.then5, label %if.else, !dbg !5888

if.then5:                                         ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5889
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !5889
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5889
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5889
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !5890
  br label %return, !dbg !5890

if.else:                                          ; preds = %if.then
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5891
  br label %return, !dbg !5891

if.end:                                           ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5892
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !5893
  br label %return, !dbg !5893

return:                                           ; preds = %if.end, %if.else, %if.then5
  %7 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5894
  ret %union.tree_node* %7, !dbg !5894
}

; Function Attrs: noinline nounwind uwtable
define internal void @disqualify_candidate(%union.tree_node* %decl, i8* %reason) #0 !dbg !5895 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %reason.addr = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5896, metadata !DIExpression()), !dbg !5897
  store i8* %reason, i8** %reason.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %reason.addr, metadata !5898, metadata !DIExpression()), !dbg !5899
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !5900
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5901
  %decl_minimal = bitcast %union.tree_node* %1 to %struct.tree_decl_minimal*, !dbg !5901
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !5901
  %2 = load i32, i32* %uid, align 4, !dbg !5901
  %call = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %0, i32 %2), !dbg !5902
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5903
  %tobool = icmp ne %struct._IO_FILE* %3, null, !dbg !5903
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5905

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @dump_flags, align 4, !dbg !5906
  %and = and i32 %4, 8, !dbg !5907
  %tobool1 = icmp ne i32 %and, 0, !dbg !5907
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5908

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5909
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i64 0, i64 0)), !dbg !5911
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5912
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5913
  call void @print_generic_expr(%struct._IO_FILE* %6, %union.tree_node* %7, i32 0), !dbg !5914
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5915
  %9 = load i8*, i8** %reason.addr, align 8, !dbg !5916
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i64 0, i64 0), i8* %9), !dbg !5917
  br label %if.end, !dbg !5918

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !5919
}

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @build_access_from_expr_1(%union.tree_node** %expr_ptr, %union.gimple_statement_d* %stmt, i8 zeroext %write) #0 !dbg !5920 {
entry:
  %retval = alloca %struct.access*, align 8
  %expr_ptr.addr = alloca %union.tree_node**, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %write.addr = alloca i8, align 1
  %ret = alloca %struct.access*, align 8
  %expr = alloca %union.tree_node*, align 8
  %partial_ref = alloca i8, align 1
  store %union.tree_node** %expr_ptr, %union.tree_node*** %expr_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_ptr.addr, metadata !5923, metadata !DIExpression()), !dbg !5924
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5925, metadata !DIExpression()), !dbg !5926
  store i8 %write, i8* %write.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %write.addr, metadata !5927, metadata !DIExpression()), !dbg !5928
  call void @llvm.dbg.declare(metadata %struct.access** %ret, metadata !5929, metadata !DIExpression()), !dbg !5930
  store %struct.access* null, %struct.access** %ret, align 8, !dbg !5930
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !5931, metadata !DIExpression()), !dbg !5932
  %0 = load %union.tree_node**, %union.tree_node*** %expr_ptr.addr, align 8, !dbg !5933
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5934
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !5932
  call void @llvm.dbg.declare(metadata i8* %partial_ref, metadata !5935, metadata !DIExpression()), !dbg !5936
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5937
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5937
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5937
  %bf.load = load i64, i64* %3, align 8, !dbg !5937
  %bf.clear = and i64 %bf.load, 65535, !dbg !5937
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5937
  %cmp = icmp eq i32 %bf.cast, 42, !dbg !5939
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5940

lor.lhs.false:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5941
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5941
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5941
  %bf.load2 = load i64, i64* %5, align 8, !dbg !5941
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5941
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5941
  %cmp5 = icmp eq i32 %bf.cast4, 44, !dbg !5942
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !5943

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5944
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5944
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !5944
  %bf.load8 = load i64, i64* %7, align 8, !dbg !5944
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !5944
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !5944
  %cmp11 = icmp eq i32 %bf.cast10, 43, !dbg !5945
  br i1 %cmp11, label %if.then, label %if.else, !dbg !5946

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %8 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5947
  %exp = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !5947
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5947
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5947
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5947
  store %union.tree_node* %9, %union.tree_node** %expr, align 8, !dbg !5949
  store i8 1, i8* %partial_ref, align 1, !dbg !5950
  br label %if.end, !dbg !5951

if.else:                                          ; preds = %lor.lhs.false6
  store i8 0, i8* %partial_ref, align 1, !dbg !5952
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5953
  %base12 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5953
  %11 = bitcast %struct.tree_base* %base12 to i64*, !dbg !5953
  %bf.load13 = load i64, i64* %11, align 8, !dbg !5953
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !5953
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !5953
  %cmp16 = icmp eq i32 %bf.cast15, 118, !dbg !5955
  br i1 %cmp16, label %if.then17, label %if.end21, !dbg !5956

if.then17:                                        ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5957
  %exp18 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !5957
  %operands19 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp18, i32 0, i32 3, !dbg !5957
  %arrayidx20 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands19, i64 0, i64 0, !dbg !5957
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx20, align 8, !dbg !5957
  store %union.tree_node* %13, %union.tree_node** %expr, align 8, !dbg !5958
  br label %if.end21, !dbg !5959

if.end21:                                         ; preds = %if.then17, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5960
  %call = call zeroext i8 @contains_view_convert_expr_p(%union.tree_node* %14), !dbg !5962
  %tobool = icmp ne i8 %call, 0, !dbg !5962
  br i1 %tobool, label %if.then22, label %if.end23, !dbg !5963

if.then22:                                        ; preds = %if.end21
  %15 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5964
  call void @disqualify_base_of_expr(%union.tree_node* %15, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.21, i64 0, i64 0)), !dbg !5966
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !5967
  br label %return, !dbg !5967

if.end23:                                         ; preds = %if.end21
  %16 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5968
  %base24 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5968
  %17 = bitcast %struct.tree_base* %base24 to i64*, !dbg !5968
  %bf.load25 = load i64, i64* %17, align 8, !dbg !5968
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !5968
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !5968
  switch i32 %bf.cast27, label %sw.default [
    i32 47, label %sw.bb
    i32 32, label %sw.bb31
    i32 34, label %sw.bb31
    i32 36, label %sw.bb31
    i32 41, label %sw.bb31
    i32 45, label %sw.bb31
    i32 46, label %sw.bb31
  ], !dbg !5969

sw.bb:                                            ; preds = %if.end23
  %18 = load i32, i32* @sra_mode, align 4, !dbg !5970
  %cmp28 = icmp ne i32 %18, 0, !dbg !5973
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !5974

if.then29:                                        ; preds = %sw.bb
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !5975
  br label %return, !dbg !5975

if.end30:                                         ; preds = %sw.bb
  br label %sw.bb31, !dbg !5976

sw.bb31:                                          ; preds = %if.end23, %if.end23, %if.end23, %if.end23, %if.end23, %if.end23, %if.end30
  %19 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !5977
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5978
  %21 = load i8, i8* %write.addr, align 1, !dbg !5979
  %call32 = call %struct.access* @create_access(%union.tree_node* %19, %union.gimple_statement_d* %20, i8 zeroext %21), !dbg !5980
  store %struct.access* %call32, %struct.access** %ret, align 8, !dbg !5981
  br label %sw.epilog, !dbg !5982

sw.default:                                       ; preds = %if.end23
  br label %sw.epilog, !dbg !5983

sw.epilog:                                        ; preds = %sw.default, %sw.bb31
  %22 = load i8, i8* %write.addr, align 1, !dbg !5984
  %conv = zext i8 %22 to i32, !dbg !5984
  %tobool33 = icmp ne i32 %conv, 0, !dbg !5984
  br i1 %tobool33, label %land.lhs.true, label %if.end41, !dbg !5986

land.lhs.true:                                    ; preds = %sw.epilog
  %23 = load i8, i8* %partial_ref, align 1, !dbg !5987
  %conv34 = zext i8 %23 to i32, !dbg !5987
  %tobool35 = icmp ne i32 %conv34, 0, !dbg !5987
  br i1 %tobool35, label %land.lhs.true36, label %if.end41, !dbg !5988

land.lhs.true36:                                  ; preds = %land.lhs.true
  %24 = load %struct.access*, %struct.access** %ret, align 8, !dbg !5989
  %tobool37 = icmp ne %struct.access* %24, null, !dbg !5989
  br i1 %tobool37, label %if.then38, label %if.end41, !dbg !5990

if.then38:                                        ; preds = %land.lhs.true36
  %25 = load %struct.access*, %struct.access** %ret, align 8, !dbg !5991
  %grp_partial_lhs = getelementptr inbounds %struct.access, %struct.access* %25, i32 0, i32 14, !dbg !5992
  %bf.load39 = load i16, i16* %grp_partial_lhs, align 8, !dbg !5993
  %bf.clear40 = and i16 %bf.load39, -513, !dbg !5993
  %bf.set = or i16 %bf.clear40, 512, !dbg !5993
  store i16 %bf.set, i16* %grp_partial_lhs, align 8, !dbg !5993
  br label %if.end41, !dbg !5991

if.end41:                                         ; preds = %if.then38, %land.lhs.true36, %land.lhs.true, %sw.epilog
  %26 = load %struct.access*, %struct.access** %ret, align 8, !dbg !5994
  store %struct.access* %26, %struct.access** %retval, align 8, !dbg !5995
  br label %return, !dbg !5995

return:                                           ; preds = %if.end41, %if.then29, %if.then22
  %27 = load %struct.access*, %struct.access** %retval, align 8, !dbg !5996
  ret %struct.access* %27, !dbg !5996
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @contains_view_convert_expr_p(%union.tree_node* %ref) #0 !dbg !5997 {
entry:
  %retval = alloca i8, align 1
  %ref.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !5998, metadata !DIExpression()), !dbg !5999
  br label %while.cond, !dbg !6000

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !6001
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !6002
  %tobool = icmp ne i8 %call, 0, !dbg !6000
  br i1 %tobool, label %while.body, label %while.end, !dbg !6000

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !6003
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6003
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6003
  %bf.load = load i64, i64* %2, align 8, !dbg !6003
  %bf.clear = and i64 %bf.load, 65535, !dbg !6003
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6003
  %cmp = icmp eq i32 %bf.cast, 118, !dbg !6006
  br i1 %cmp, label %if.then, label %if.end, !dbg !6007

if.then:                                          ; preds = %while.body
  store i8 1, i8* %retval, align 1, !dbg !6008
  br label %return, !dbg !6008

if.end:                                           ; preds = %while.body
  %3 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !6009
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !6009
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6009
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6009
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6009
  store %union.tree_node* %4, %union.tree_node** %ref.addr, align 8, !dbg !6010
  br label %while.cond, !dbg !6000, !llvm.loop !6011

while.end:                                        ; preds = %while.cond
  store i8 0, i8* %retval, align 1, !dbg !6013
  br label %return, !dbg !6013

return:                                           ; preds = %while.end, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !6014
  ret i8 %5, !dbg !6014
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @create_access(%union.tree_node* %expr, %union.gimple_statement_d* %stmt, i8 zeroext %write) #0 !dbg !6015 {
entry:
  %retval = alloca %struct.access*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %write.addr = alloca i8, align 1
  %access = alloca %struct.access*, align 8
  %offset = alloca i64, align 8
  %size = alloca i64, align 8
  %max_size = alloca i64, align 8
  %base = alloca %union.tree_node*, align 8
  %ptr = alloca i8, align 1
  %unscalarizable_region = alloca i8, align 1
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !6018, metadata !DIExpression()), !dbg !6019
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6020, metadata !DIExpression()), !dbg !6021
  store i8 %write, i8* %write.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %write.addr, metadata !6022, metadata !DIExpression()), !dbg !6023
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !6024, metadata !DIExpression()), !dbg !6025
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !6026, metadata !DIExpression()), !dbg !6027
  call void @llvm.dbg.declare(metadata i64* %size, metadata !6028, metadata !DIExpression()), !dbg !6029
  call void @llvm.dbg.declare(metadata i64* %max_size, metadata !6030, metadata !DIExpression()), !dbg !6031
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !6032, metadata !DIExpression()), !dbg !6033
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6034
  store %union.tree_node* %0, %union.tree_node** %base, align 8, !dbg !6033
  call void @llvm.dbg.declare(metadata i8* %ptr, metadata !6035, metadata !DIExpression()), !dbg !6036
  call void @llvm.dbg.declare(metadata i8* %unscalarizable_region, metadata !6037, metadata !DIExpression()), !dbg !6038
  store i8 0, i8* %unscalarizable_region, align 1, !dbg !6038
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6039
  %call = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %1, i64* %offset, i64* %size, i64* %max_size), !dbg !6040
  store %union.tree_node* %call, %union.tree_node** %base, align 8, !dbg !6041
  %2 = load i32, i32* @sra_mode, align 4, !dbg !6042
  %cmp = icmp eq i32 %2, 0, !dbg !6044
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !6045

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6046
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6046
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6046
  %bf.load = load i64, i64* %4, align 8, !dbg !6046
  %bf.clear = and i64 %bf.load, 65535, !dbg !6046
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6046
  %cmp2 = icmp eq i32 %bf.cast, 47, !dbg !6046
  br i1 %cmp2, label %if.then, label %lor.lhs.false, !dbg !6046

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6046
  %base3 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6046
  %6 = bitcast %struct.tree_base* %base3 to i64*, !dbg !6046
  %bf.load4 = load i64, i64* %6, align 8, !dbg !6046
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !6046
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !6046
  %cmp7 = icmp eq i32 %bf.cast6, 48, !dbg !6046
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !6046

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6046
  %base9 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6046
  %8 = bitcast %struct.tree_base* %base9 to i64*, !dbg !6046
  %bf.load10 = load i64, i64* %8, align 8, !dbg !6046
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !6046
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !6046
  %cmp13 = icmp eq i32 %bf.cast12, 49, !dbg !6046
  br i1 %cmp13, label %if.then, label %if.else, !dbg !6047

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false, %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6048
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !6048
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6048
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6048
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6048
  %call14 = call %union.tree_node* @get_ssa_base_param(%union.tree_node* %10), !dbg !6050
  store %union.tree_node* %call14, %union.tree_node** %base, align 8, !dbg !6051
  %11 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6052
  %tobool = icmp ne %union.tree_node* %11, null, !dbg !6052
  br i1 %tobool, label %if.end, label %if.then15, !dbg !6054

if.then15:                                        ; preds = %if.then
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !6055
  br label %return, !dbg !6055

if.end:                                           ; preds = %if.then
  store i8 1, i8* %ptr, align 1, !dbg !6056
  br label %if.end16, !dbg !6057

if.else:                                          ; preds = %lor.lhs.false8, %entry
  store i8 0, i8* %ptr, align 1, !dbg !6058
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.end
  %12 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6059
  %base17 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6059
  %13 = bitcast %struct.tree_base* %base17 to i64*, !dbg !6059
  %bf.load18 = load i64, i64* %13, align 8, !dbg !6059
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !6059
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !6059
  %idxprom = sext i32 %bf.cast20 to i64, !dbg !6059
  %arrayidx21 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6059
  %14 = load i32, i32* %arrayidx21, align 4, !dbg !6059
  %cmp22 = icmp eq i32 %14, 3, !dbg !6059
  br i1 %cmp22, label %lor.lhs.false23, label %if.then26, !dbg !6061

lor.lhs.false23:                                  ; preds = %if.end16
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !6062
  %16 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6063
  %decl_minimal = bitcast %union.tree_node* %16 to %struct.tree_decl_minimal*, !dbg !6063
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !6063
  %17 = load i32, i32* %uid, align 4, !dbg !6063
  %call24 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %15, i32 %17), !dbg !6064
  %tobool25 = icmp ne i32 %call24, 0, !dbg !6064
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !6065

if.then26:                                        ; preds = %lor.lhs.false23, %if.end16
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !6066
  br label %return, !dbg !6066

if.end27:                                         ; preds = %lor.lhs.false23
  %18 = load i32, i32* @sra_mode, align 4, !dbg !6067
  %cmp28 = icmp eq i32 %18, 0, !dbg !6069
  br i1 %cmp28, label %if.then29, label %if.else44, !dbg !6070

if.then29:                                        ; preds = %if.end27
  %19 = load i64, i64* %size, align 8, !dbg !6071
  %cmp30 = icmp slt i64 %19, 0, !dbg !6074
  br i1 %cmp30, label %if.then33, label %lor.lhs.false31, !dbg !6075

lor.lhs.false31:                                  ; preds = %if.then29
  %20 = load i64, i64* %size, align 8, !dbg !6076
  %21 = load i64, i64* %max_size, align 8, !dbg !6077
  %cmp32 = icmp ne i64 %20, %21, !dbg !6078
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !6079

if.then33:                                        ; preds = %lor.lhs.false31, %if.then29
  %22 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6080
  call void @disqualify_candidate(%union.tree_node* %22, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.22, i64 0, i64 0)), !dbg !6082
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !6083
  br label %return, !dbg !6083

if.end34:                                         ; preds = %lor.lhs.false31
  %23 = load i64, i64* %offset, align 8, !dbg !6084
  %rem = srem i64 %23, 8, !dbg !6086
  %cmp35 = icmp ne i64 %rem, 0, !dbg !6087
  br i1 %cmp35, label %if.then39, label %lor.lhs.false36, !dbg !6088

lor.lhs.false36:                                  ; preds = %if.end34
  %24 = load i64, i64* %size, align 8, !dbg !6089
  %rem37 = srem i64 %24, 8, !dbg !6090
  %cmp38 = icmp ne i64 %rem37, 0, !dbg !6091
  br i1 %cmp38, label %if.then39, label %if.end40, !dbg !6092

if.then39:                                        ; preds = %lor.lhs.false36, %if.end34
  %25 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6093
  call void @disqualify_candidate(%union.tree_node* %25, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i64 0, i64 0)), !dbg !6095
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !6096
  br label %return, !dbg !6096

if.end40:                                         ; preds = %lor.lhs.false36
  %26 = load i8, i8* %ptr, align 1, !dbg !6097
  %tobool41 = icmp ne i8 %26, 0, !dbg !6097
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !6099

if.then42:                                        ; preds = %if.end40
  %27 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6100
  %28 = load i64, i64* %offset, align 8, !dbg !6101
  %29 = load i64, i64* %size, align 8, !dbg !6102
  %add = add nsw i64 %28, %29, !dbg !6103
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6104
  call void @mark_parm_dereference(%union.tree_node* %27, i64 %add, %union.gimple_statement_d* %30), !dbg !6105
  br label %if.end43, !dbg !6105

if.end43:                                         ; preds = %if.then42, %if.end40
  br label %if.end51, !dbg !6106

if.else44:                                        ; preds = %if.end27
  %31 = load i64, i64* %size, align 8, !dbg !6107
  %32 = load i64, i64* %max_size, align 8, !dbg !6110
  %cmp45 = icmp ne i64 %31, %32, !dbg !6111
  br i1 %cmp45, label %if.then46, label %if.end47, !dbg !6112

if.then46:                                        ; preds = %if.else44
  %33 = load i64, i64* %max_size, align 8, !dbg !6113
  store i64 %33, i64* %size, align 8, !dbg !6115
  store i8 1, i8* %unscalarizable_region, align 1, !dbg !6116
  br label %if.end47, !dbg !6117

if.end47:                                         ; preds = %if.then46, %if.else44
  %34 = load i64, i64* %size, align 8, !dbg !6118
  %cmp48 = icmp slt i64 %34, 0, !dbg !6120
  br i1 %cmp48, label %if.then49, label %if.end50, !dbg !6121

if.then49:                                        ; preds = %if.end47
  %35 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6122
  call void @disqualify_candidate(%union.tree_node* %35, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.24, i64 0, i64 0)), !dbg !6124
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !6125
  br label %return, !dbg !6125

if.end50:                                         ; preds = %if.end47
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.end43
  %36 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6126
  %37 = load i64, i64* %offset, align 8, !dbg !6127
  %38 = load i64, i64* %size, align 8, !dbg !6128
  %call52 = call %struct.access* @create_access_1(%union.tree_node* %36, i64 %37, i64 %38), !dbg !6129
  store %struct.access* %call52, %struct.access** %access, align 8, !dbg !6130
  %39 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6131
  %40 = load %struct.access*, %struct.access** %access, align 8, !dbg !6132
  %expr53 = getelementptr inbounds %struct.access, %struct.access* %40, i32 0, i32 3, !dbg !6133
  store %union.tree_node* %39, %union.tree_node** %expr53, align 8, !dbg !6134
  %41 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6135
  %common = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !6135
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6135
  %42 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6135
  %43 = load %struct.access*, %struct.access** %access, align 8, !dbg !6136
  %type54 = getelementptr inbounds %struct.access, %struct.access* %43, i32 0, i32 4, !dbg !6137
  store %union.tree_node* %42, %union.tree_node** %type54, align 8, !dbg !6138
  %44 = load i8, i8* %write.addr, align 1, !dbg !6139
  %conv = zext i8 %44 to i32, !dbg !6139
  %45 = load %struct.access*, %struct.access** %access, align 8, !dbg !6140
  %write55 = getelementptr inbounds %struct.access, %struct.access* %45, i32 0, i32 14, !dbg !6141
  %46 = trunc i32 %conv to i16, !dbg !6142
  %bf.load56 = load i16, i16* %write55, align 8, !dbg !6142
  %bf.value = and i16 %46, 1, !dbg !6142
  %bf.clear57 = and i16 %bf.load56, -2, !dbg !6142
  %bf.set = or i16 %bf.clear57, %bf.value, !dbg !6142
  store i16 %bf.set, i16* %write55, align 8, !dbg !6142
  %bf.result.cast = zext i16 %bf.value to i32, !dbg !6142
  %47 = load i8, i8* %unscalarizable_region, align 1, !dbg !6143
  %conv58 = zext i8 %47 to i32, !dbg !6143
  %48 = load %struct.access*, %struct.access** %access, align 8, !dbg !6144
  %grp_unscalarizable_region = getelementptr inbounds %struct.access, %struct.access* %48, i32 0, i32 14, !dbg !6145
  %49 = trunc i32 %conv58 to i16, !dbg !6146
  %bf.load59 = load i16, i16* %grp_unscalarizable_region, align 8, !dbg !6146
  %bf.value60 = and i16 %49, 1, !dbg !6146
  %bf.shl = shl i16 %bf.value60, 7, !dbg !6146
  %bf.clear61 = and i16 %bf.load59, -129, !dbg !6146
  %bf.set62 = or i16 %bf.clear61, %bf.shl, !dbg !6146
  store i16 %bf.set62, i16* %grp_unscalarizable_region, align 8, !dbg !6146
  %bf.result.cast63 = zext i16 %bf.value60 to i32, !dbg !6146
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6147
  %51 = load %struct.access*, %struct.access** %access, align 8, !dbg !6148
  %stmt64 = getelementptr inbounds %struct.access, %struct.access* %51, i32 0, i32 5, !dbg !6149
  store %union.gimple_statement_d* %50, %union.gimple_statement_d** %stmt64, align 8, !dbg !6150
  %52 = load %struct.access*, %struct.access** %access, align 8, !dbg !6151
  store %struct.access* %52, %struct.access** %retval, align 8, !dbg !6152
  br label %return, !dbg !6152

return:                                           ; preds = %if.end51, %if.then49, %if.then39, %if.then33, %if.then26, %if.then15
  %53 = load %struct.access*, %struct.access** %retval, align 8, !dbg !6153
  ret %struct.access* %53, !dbg !6153
}

declare dso_local %union.tree_node* @get_ref_base_and_extent(%union.tree_node*, i64*, i64*, i64*) #2

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_parm_dereference(%union.tree_node* %base, i64 %dist, %union.gimple_statement_d* %stmt) #0 !dbg !6154 {
entry:
  %base.addr = alloca %union.tree_node*, align 8
  %dist.addr = alloca i64, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %idx = alloca i32, align 4
  %parm_index = alloca i32, align 4
  %parm = alloca %union.tree_node*, align 8
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !6157, metadata !DIExpression()), !dbg !6158
  store i64 %dist, i64* %dist.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %dist.addr, metadata !6159, metadata !DIExpression()), !dbg !6160
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6161, metadata !DIExpression()), !dbg !6162
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6163, metadata !DIExpression()), !dbg !6164
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6165
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !6166
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !6164
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !6167, metadata !DIExpression()), !dbg !6168
  call void @llvm.dbg.declare(metadata i32* %parm_index, metadata !6169, metadata !DIExpression()), !dbg !6170
  store i32 0, i32* %parm_index, align 4, !dbg !6170
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !6171, metadata !DIExpression()), !dbg !6172
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !6173
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6175
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !6176
  %3 = load i32, i32* %index, align 8, !dbg !6176
  %call1 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %3), !dbg !6177
  %tobool = icmp ne i32 %call1, 0, !dbg !6177
  br i1 %tobool, label %if.then, label %if.end, !dbg !6178

if.then:                                          ; preds = %entry
  br label %if.end9, !dbg !6179

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6180
  %decl_non_common = bitcast %union.tree_node* %4 to %struct.tree_decl_non_common*, !dbg !6180
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !6180
  %5 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !6180
  store %union.tree_node* %5, %union.tree_node** %parm, align 8, !dbg !6182
  br label %for.cond, !dbg !6183

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6184
  %tobool2 = icmp ne %union.tree_node* %6, null, !dbg !6184
  br i1 %tobool2, label %land.rhs, label %land.end, !dbg !6186

land.rhs:                                         ; preds = %for.cond
  %7 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6187
  %8 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !6188
  %cmp = icmp ne %union.tree_node* %7, %8, !dbg !6189
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ], !dbg !6190
  br i1 %9, label %for.body, label %for.end, !dbg !6191

for.body:                                         ; preds = %land.end
  %10 = load i32, i32* %parm_index, align 4, !dbg !6192
  %inc = add nsw i32 %10, 1, !dbg !6192
  store i32 %inc, i32* %parm_index, align 4, !dbg !6192
  br label %for.inc, !dbg !6193

for.inc:                                          ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6194
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !6194
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6194
  %12 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6194
  store %union.tree_node* %12, %union.tree_node** %parm, align 8, !dbg !6195
  br label %for.cond, !dbg !6196, !llvm.loop !6197

for.end:                                          ; preds = %land.end
  %13 = load i32, i32* %parm_index, align 4, !dbg !6199
  %14 = load i32, i32* @func_param_count, align 4, !dbg !6199
  %cmp3 = icmp slt i32 %13, %14, !dbg !6199
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !6199

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 698, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6199
  br label %cond.end, !dbg !6199

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !6199

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6199
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6200
  %index4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !6201
  %16 = load i32, i32* %index4, align 8, !dbg !6201
  %17 = load i32, i32* @func_param_count, align 4, !dbg !6202
  %mul = mul nsw i32 %16, %17, !dbg !6203
  %18 = load i32, i32* %parm_index, align 4, !dbg !6204
  %add = add nsw i32 %mul, %18, !dbg !6205
  store i32 %add, i32* %idx, align 4, !dbg !6206
  %19 = load i64*, i64** @bb_dereferences, align 8, !dbg !6207
  %20 = load i32, i32* %idx, align 4, !dbg !6209
  %idxprom = sext i32 %20 to i64, !dbg !6207
  %arrayidx = getelementptr inbounds i64, i64* %19, i64 %idxprom, !dbg !6207
  %21 = load i64, i64* %arrayidx, align 8, !dbg !6207
  %22 = load i64, i64* %dist.addr, align 8, !dbg !6210
  %cmp5 = icmp slt i64 %21, %22, !dbg !6211
  br i1 %cmp5, label %if.then6, label %if.end9, !dbg !6212

if.then6:                                         ; preds = %cond.end
  %23 = load i64, i64* %dist.addr, align 8, !dbg !6213
  %24 = load i64*, i64** @bb_dereferences, align 8, !dbg !6214
  %25 = load i32, i32* %idx, align 4, !dbg !6215
  %idxprom7 = sext i32 %25 to i64, !dbg !6214
  %arrayidx8 = getelementptr inbounds i64, i64* %24, i64 %idxprom7, !dbg !6214
  store i64 %23, i64* %arrayidx8, align 8, !dbg !6216
  br label %if.end9, !dbg !6214

if.end9:                                          ; preds = %if.then, %if.then6, %cond.end
  ret void, !dbg !6217
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @create_access_1(%union.tree_node* %base, i64 %offset, i64 %size) #0 !dbg !6218 {
entry:
  %base.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %vec = alloca %struct.VEC_access_p_heap*, align 8
  %access = alloca %struct.access*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !6221, metadata !DIExpression()), !dbg !6222
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !6223, metadata !DIExpression()), !dbg !6224
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !6225, metadata !DIExpression()), !dbg !6226
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap** %vec, metadata !6227, metadata !DIExpression()), !dbg !6228
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !6229, metadata !DIExpression()), !dbg !6230
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !6231, metadata !DIExpression()), !dbg !6232
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @access_pool, align 8, !dbg !6233
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %0), !dbg !6234
  %1 = bitcast i8* %call to %struct.access*, !dbg !6235
  store %struct.access* %1, %struct.access** %access, align 8, !dbg !6236
  %2 = load %struct.access*, %struct.access** %access, align 8, !dbg !6237
  %3 = bitcast %struct.access* %2 to i8*, !dbg !6238
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 120, i1 false), !dbg !6238
  %4 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !6239
  %5 = load %struct.access*, %struct.access** %access, align 8, !dbg !6240
  %base1 = getelementptr inbounds %struct.access, %struct.access* %5, i32 0, i32 2, !dbg !6241
  store %union.tree_node* %4, %union.tree_node** %base1, align 8, !dbg !6242
  %6 = load i64, i64* %offset.addr, align 8, !dbg !6243
  %7 = load %struct.access*, %struct.access** %access, align 8, !dbg !6244
  %offset2 = getelementptr inbounds %struct.access, %struct.access* %7, i32 0, i32 0, !dbg !6245
  store i64 %6, i64* %offset2, align 8, !dbg !6246
  %8 = load i64, i64* %size.addr, align 8, !dbg !6247
  %9 = load %struct.access*, %struct.access** %access, align 8, !dbg !6248
  %size3 = getelementptr inbounds %struct.access, %struct.access* %9, i32 0, i32 1, !dbg !6249
  store i64 %8, i64* %size3, align 8, !dbg !6250
  %10 = load %struct.pointer_map_t*, %struct.pointer_map_t** @base_access_vec, align 8, !dbg !6251
  %11 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !6252
  %12 = bitcast %union.tree_node* %11 to i8*, !dbg !6252
  %call4 = call i8** @pointer_map_contains(%struct.pointer_map_t* %10, i8* %12), !dbg !6253
  store i8** %call4, i8*** %slot, align 8, !dbg !6254
  %13 = load i8**, i8*** %slot, align 8, !dbg !6255
  %tobool = icmp ne i8** %13, null, !dbg !6255
  br i1 %tobool, label %if.then, label %if.else, !dbg !6257

if.then:                                          ; preds = %entry
  %14 = load i8**, i8*** %slot, align 8, !dbg !6258
  %15 = load i8*, i8** %14, align 8, !dbg !6259
  %16 = bitcast i8* %15 to %struct.VEC_access_p_heap*, !dbg !6260
  store %struct.VEC_access_p_heap* %16, %struct.VEC_access_p_heap** %vec, align 8, !dbg !6261
  br label %if.end, !dbg !6262

if.else:                                          ; preds = %entry
  %call5 = call %struct.VEC_access_p_heap* @VEC_access_p_heap_alloc(i32 32), !dbg !6263
  store %struct.VEC_access_p_heap* %call5, %struct.VEC_access_p_heap** %vec, align 8, !dbg !6264
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load %struct.access*, %struct.access** %access, align 8, !dbg !6265
  %call6 = call %struct.access** @VEC_access_p_heap_safe_push(%struct.VEC_access_p_heap** %vec, %struct.access* %17), !dbg !6265
  %18 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %vec, align 8, !dbg !6266
  %19 = load %struct.pointer_map_t*, %struct.pointer_map_t** @base_access_vec, align 8, !dbg !6267
  %20 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !6268
  %21 = bitcast %union.tree_node* %20 to i8*, !dbg !6268
  %call7 = call i8** @pointer_map_insert(%struct.pointer_map_t* %19, i8* %21), !dbg !6269
  %22 = bitcast i8** %call7 to %struct.VEC_access_p_heap**, !dbg !6270
  store %struct.VEC_access_p_heap* %18, %struct.VEC_access_p_heap** %22, align 8, !dbg !6271
  %23 = load %struct.access*, %struct.access** %access, align 8, !dbg !6272
  ret %struct.access* %23, !dbg !6273
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !6274 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6277, metadata !DIExpression()), !dbg !6278
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6279
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6280
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !6281
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6281
  ret %struct.basic_block_def* %1, !dbg !6282
}

declare dso_local i8* @pool_alloc(%struct.alloc_pool_def*) #2

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_access_p_heap* @VEC_access_p_heap_alloc(i32 %alloc_) #0 !dbg !6283 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6286, metadata !DIExpression()), !dbg !6287
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6287
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6287
  %1 = bitcast i8* %call to %struct.VEC_access_p_heap*, !dbg !6287
  ret %struct.VEC_access_p_heap* %1, !dbg !6287
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access** @VEC_access_p_heap_safe_push(%struct.VEC_access_p_heap** %vec_, %struct.access* %obj_) #0 !dbg !6288 {
entry:
  %vec_.addr = alloca %struct.VEC_access_p_heap**, align 8
  %obj_.addr = alloca %struct.access*, align 8
  store %struct.VEC_access_p_heap** %vec_, %struct.VEC_access_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap*** %vec_.addr, metadata !6292, metadata !DIExpression()), !dbg !6293
  store %struct.access* %obj_, %struct.access** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %obj_.addr, metadata !6294, metadata !DIExpression()), !dbg !6293
  %0 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %vec_.addr, align 8, !dbg !6293
  %call = call i32 @VEC_access_p_heap_reserve(%struct.VEC_access_p_heap** %0, i32 1), !dbg !6293
  %1 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %vec_.addr, align 8, !dbg !6293
  %2 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %1, align 8, !dbg !6293
  %tobool = icmp ne %struct.VEC_access_p_heap* %2, null, !dbg !6293
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6293

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %vec_.addr, align 8, !dbg !6293
  %4 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %3, align 8, !dbg !6293
  %base = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %4, i32 0, i32 0, !dbg !6293
  br label %cond.end, !dbg !6293

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6293

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6293
  %5 = load %struct.access*, %struct.access** %obj_.addr, align 8, !dbg !6293
  %call1 = call %struct.access** @VEC_access_p_base_quick_push(%struct.VEC_access_p_base* %cond, %struct.access* %5), !dbg !6293
  ret %struct.access** %call1, !dbg !6293
}

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_access_p_heap_reserve(%struct.VEC_access_p_heap** %vec_, i32 %alloc_) #0 !dbg !6295 {
entry:
  %vec_.addr = alloca %struct.VEC_access_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_access_p_heap** %vec_, %struct.VEC_access_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap*** %vec_.addr, metadata !6298, metadata !DIExpression()), !dbg !6299
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6300, metadata !DIExpression()), !dbg !6299
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6301, metadata !DIExpression()), !dbg !6299
  %0 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %vec_.addr, align 8, !dbg !6299
  %1 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %0, align 8, !dbg !6299
  %tobool = icmp ne %struct.VEC_access_p_heap* %1, null, !dbg !6299
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6299

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %vec_.addr, align 8, !dbg !6299
  %3 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %2, align 8, !dbg !6299
  %base = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %3, i32 0, i32 0, !dbg !6299
  br label %cond.end, !dbg !6299

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6299

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6299
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6299
  %call = call i32 @VEC_access_p_base_space(%struct.VEC_access_p_base* %cond, i32 %4), !dbg !6299
  %tobool1 = icmp ne i32 %call, 0, !dbg !6299
  %lnot = xor i1 %tobool1, true, !dbg !6299
  %lnot.ext = zext i1 %lnot to i32, !dbg !6299
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6299
  %5 = load i32, i32* %extend, align 4, !dbg !6302
  %tobool2 = icmp ne i32 %5, 0, !dbg !6302
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6299

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %vec_.addr, align 8, !dbg !6302
  %7 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %6, align 8, !dbg !6302
  %8 = bitcast %struct.VEC_access_p_heap* %7 to i8*, !dbg !6302
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6302
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !6302
  %10 = bitcast i8* %call3 to %struct.VEC_access_p_heap*, !dbg !6302
  %11 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %vec_.addr, align 8, !dbg !6302
  store %struct.VEC_access_p_heap* %10, %struct.VEC_access_p_heap** %11, align 8, !dbg !6302
  br label %if.end, !dbg !6302

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6299
  ret i32 %12, !dbg !6299
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access** @VEC_access_p_base_quick_push(%struct.VEC_access_p_base* %vec_, %struct.access* %obj_) #0 !dbg !6304 {
entry:
  %vec_.addr = alloca %struct.VEC_access_p_base*, align 8
  %obj_.addr = alloca %struct.access*, align 8
  %slot_ = alloca %struct.access**, align 8
  store %struct.VEC_access_p_base* %vec_, %struct.VEC_access_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_base** %vec_.addr, metadata !6308, metadata !DIExpression()), !dbg !6309
  store %struct.access* %obj_, %struct.access** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %obj_.addr, metadata !6310, metadata !DIExpression()), !dbg !6309
  call void @llvm.dbg.declare(metadata %struct.access*** %slot_, metadata !6311, metadata !DIExpression()), !dbg !6309
  %0 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !6309
  %num = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %0, i32 0, i32 0, !dbg !6309
  %1 = load i32, i32* %num, align 8, !dbg !6309
  %2 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !6309
  %alloc = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %2, i32 0, i32 1, !dbg !6309
  %3 = load i32, i32* %alloc, align 4, !dbg !6309
  %cmp = icmp ult i32 %1, %3, !dbg !6309
  %conv = zext i1 %cmp to i32, !dbg !6309
  %4 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !6309
  %vec = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %4, i32 0, i32 2, !dbg !6309
  %5 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !6309
  %num1 = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %5, i32 0, i32 0, !dbg !6309
  %6 = load i32, i32* %num1, align 8, !dbg !6309
  %inc = add i32 %6, 1, !dbg !6309
  store i32 %inc, i32* %num1, align 8, !dbg !6309
  %idxprom = zext i32 %6 to i64, !dbg !6309
  %arrayidx = getelementptr inbounds [1 x %struct.access*], [1 x %struct.access*]* %vec, i64 0, i64 %idxprom, !dbg !6309
  store %struct.access** %arrayidx, %struct.access*** %slot_, align 8, !dbg !6309
  %7 = load %struct.access*, %struct.access** %obj_.addr, align 8, !dbg !6309
  %8 = load %struct.access**, %struct.access*** %slot_, align 8, !dbg !6309
  store %struct.access* %7, %struct.access** %8, align 8, !dbg !6309
  %9 = load %struct.access**, %struct.access*** %slot_, align 8, !dbg !6309
  ret %struct.access** %9, !dbg !6309
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_access_p_base_space(%struct.VEC_access_p_base* %vec_, i32 %alloc_) #0 !dbg !6312 {
entry:
  %vec_.addr = alloca %struct.VEC_access_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_access_p_base* %vec_, %struct.VEC_access_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_base** %vec_.addr, metadata !6315, metadata !DIExpression()), !dbg !6316
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6317, metadata !DIExpression()), !dbg !6316
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6316
  %cmp = icmp sge i32 %0, 0, !dbg !6316
  %conv = zext i1 %cmp to i32, !dbg !6316
  %1 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !6316
  %tobool = icmp ne %struct.VEC_access_p_base* %1, null, !dbg !6316
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6316

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !6316
  %alloc = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %2, i32 0, i32 1, !dbg !6316
  %3 = load i32, i32* %alloc, align 4, !dbg !6316
  %4 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !6316
  %num = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %4, i32 0, i32 0, !dbg !6316
  %5 = load i32, i32* %num, align 8, !dbg !6316
  %sub = sub i32 %3, %5, !dbg !6316
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6316
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6316
  %conv2 = zext i1 %cmp1 to i32, !dbg !6316
  br label %cond.end, !dbg !6316

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6316
  %tobool3 = icmp ne i32 %7, 0, !dbg !6316
  %lnot = xor i1 %tobool3, true, !dbg !6316
  %lnot.ext = zext i1 %lnot to i32, !dbg !6316
  br label %cond.end, !dbg !6316

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6316
  ret i32 %cond, !dbg !6316
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_assign_lhs_ptr(%union.gimple_statement_d* %gs) #0 !dbg !6318 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6319, metadata !DIExpression()), !dbg !6320
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6321
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 0), !dbg !6322
  ret %union.tree_node** %call, !dbg !6323
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %gs) #0 !dbg !6324 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6325, metadata !DIExpression()), !dbg !6326
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6327
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 1), !dbg !6328
  ret %union.tree_node** %call, !dbg !6329
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %stmt) #0 !dbg !6330 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6331, metadata !DIExpression()), !dbg !6332
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6333
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6335
  %tobool = icmp ne i8 %call, 0, !dbg !6335
  br i1 %tobool, label %if.then, label %if.else, !dbg !6336

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6337
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6338
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6339
  %bf.load = load i32, i32* %2, align 8, !dbg !6339
  %bf.lshr = lshr i32 %bf.load, 14, !dbg !6339
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6339
  %conv = trunc i32 %bf.clear to i8, !dbg !6337
  store i8 %conv, i8* %retval, align 1, !dbg !6340
  br label %return, !dbg !6340

if.else:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6341
  br label %return, !dbg !6341

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !6342
  ret i8 %3, !dbg !6342
}

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) #2

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_link_to_rhs(%struct.access* %racc, %struct.assign_link* %link) #0 !dbg !6343 {
entry:
  %racc.addr = alloca %struct.access*, align 8
  %link.addr = alloca %struct.assign_link*, align 8
  store %struct.access* %racc, %struct.access** %racc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %racc.addr, metadata !6346, metadata !DIExpression()), !dbg !6347
  store %struct.assign_link* %link, %struct.assign_link** %link.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_link** %link.addr, metadata !6348, metadata !DIExpression()), !dbg !6349
  %0 = load %struct.assign_link*, %struct.assign_link** %link.addr, align 8, !dbg !6350
  %racc1 = getelementptr inbounds %struct.assign_link, %struct.assign_link* %0, i32 0, i32 1, !dbg !6350
  %1 = load %struct.access*, %struct.access** %racc1, align 8, !dbg !6350
  %2 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !6350
  %cmp = icmp eq %struct.access* %1, %2, !dbg !6350
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6350

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 485, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6350
  br label %cond.end, !dbg !6350

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6350

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6350
  %3 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !6351
  %first_link = getelementptr inbounds %struct.access, %struct.access* %3, i32 0, i32 10, !dbg !6353
  %4 = load %struct.assign_link*, %struct.assign_link** %first_link, align 8, !dbg !6353
  %tobool = icmp ne %struct.assign_link* %4, null, !dbg !6351
  br i1 %tobool, label %if.else, label %if.then, !dbg !6354

if.then:                                          ; preds = %cond.end
  %5 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !6355
  %last_link = getelementptr inbounds %struct.access, %struct.access* %5, i32 0, i32 11, !dbg !6355
  %6 = load %struct.assign_link*, %struct.assign_link** %last_link, align 8, !dbg !6355
  %tobool2 = icmp ne %struct.assign_link* %6, null, !dbg !6355
  br i1 %tobool2, label %cond.true3, label %cond.false4, !dbg !6355

cond.true3:                                       ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 489, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6355
  br label %cond.end5, !dbg !6355

cond.false4:                                      ; preds = %if.then
  br label %cond.end5, !dbg !6355

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !6355
  %7 = load %struct.assign_link*, %struct.assign_link** %link.addr, align 8, !dbg !6357
  %8 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !6358
  %first_link7 = getelementptr inbounds %struct.access, %struct.access* %8, i32 0, i32 10, !dbg !6359
  store %struct.assign_link* %7, %struct.assign_link** %first_link7, align 8, !dbg !6360
  br label %if.end, !dbg !6361

if.else:                                          ; preds = %cond.end
  %9 = load %struct.assign_link*, %struct.assign_link** %link.addr, align 8, !dbg !6362
  %10 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !6363
  %last_link8 = getelementptr inbounds %struct.access, %struct.access* %10, i32 0, i32 11, !dbg !6364
  %11 = load %struct.assign_link*, %struct.assign_link** %last_link8, align 8, !dbg !6364
  %next = getelementptr inbounds %struct.assign_link, %struct.assign_link* %11, i32 0, i32 2, !dbg !6365
  store %struct.assign_link* %9, %struct.assign_link** %next, align 8, !dbg !6366
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end5
  %12 = load %struct.assign_link*, %struct.assign_link** %link.addr, align 8, !dbg !6367
  %13 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !6368
  %last_link9 = getelementptr inbounds %struct.access, %struct.access* %13, i32 0, i32 11, !dbg !6369
  store %struct.assign_link* %12, %struct.assign_link** %last_link9, align 8, !dbg !6370
  %14 = load %struct.assign_link*, %struct.assign_link** %link.addr, align 8, !dbg !6371
  %next10 = getelementptr inbounds %struct.assign_link, %struct.assign_link* %14, i32 0, i32 2, !dbg !6372
  store %struct.assign_link* null, %struct.assign_link** %next10, align 8, !dbg !6373
  ret void, !dbg !6374
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !6375 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6376, metadata !DIExpression()), !dbg !6377
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6378
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6379
  %cmp = icmp uge i32 %call, 6, !dbg !6380
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6381

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6382
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6383
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6384
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6385
  %land.ext = zext i1 %2 to i32, !dbg !6381
  %conv = trunc i32 %land.ext to i8, !dbg !6379
  ret i8 %conv, !dbg !6386
}

declare dso_local zeroext i8 @optimize_function_for_speed_p(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !6387 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !6395, metadata !DIExpression()), !dbg !6396
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !6397, metadata !DIExpression()), !dbg !6398
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !6399, metadata !DIExpression()), !dbg !6400
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !6401, metadata !DIExpression()), !dbg !6402
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !6403
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !6404
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !6404
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6405
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !6406
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !6407
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6408
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !6409
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !6410
  br label %while.body, !dbg !6411

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6412
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !6415
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !6415
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !6412
  br i1 %tobool, label %if.end, label %if.then, !dbg !6416

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6417
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !6419
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !6420
  br label %while.end, !dbg !6421

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6422
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !6424
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !6424
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !6425
  %9 = load i32, i32* %indx, align 8, !dbg !6425
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !6426
  %div = udiv i32 %10, 128, !dbg !6427
  %cmp = icmp uge i32 %9, %div, !dbg !6428
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !6429

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !6430

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6431
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !6432
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !6432
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !6433
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !6433
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6434
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !6435
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !6436
  br label %while.body, !dbg !6411, !llvm.loop !6437

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6439
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !6441
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !6441
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !6442
  %17 = load i32, i32* %indx9, align 8, !dbg !6442
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !6443
  %div10 = udiv i32 %18, 128, !dbg !6444
  %cmp11 = icmp ne i32 %17, %div10, !dbg !6445
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !6446

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6447
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !6448
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !6448
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !6449
  %21 = load i32, i32* %indx14, align 8, !dbg !6449
  %mul = mul i32 %21, 128, !dbg !6450
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !6451
  br label %if.end15, !dbg !6452

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !6453
  %div16 = udiv i32 %22, 64, !dbg !6454
  %rem = urem i32 %div16, 2, !dbg !6455
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6456
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !6457
  store i32 %rem, i32* %word_no, align 8, !dbg !6458
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6459
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !6460
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !6460
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !6461
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6462
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !6463
  %27 = load i32, i32* %word_no18, align 8, !dbg !6463
  %idxprom = zext i32 %27 to i64, !dbg !6459
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !6459
  %28 = load i64, i64* %arrayidx, align 8, !dbg !6459
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6464
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !6465
  store i64 %28, i64* %bits19, align 8, !dbg !6466
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !6467
  %rem20 = urem i32 %30, 64, !dbg !6468
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6469
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !6470
  %32 = load i64, i64* %bits21, align 8, !dbg !6471
  %sh_prom = zext i32 %rem20 to i64, !dbg !6471
  %shr = lshr i64 %32, %sh_prom, !dbg !6471
  store i64 %shr, i64* %bits21, align 8, !dbg !6471
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6472
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !6473
  %34 = load i64, i64* %bits22, align 8, !dbg !6473
  %tobool23 = icmp ne i64 %34, 0, !dbg !6474
  %lnot = xor i1 %tobool23, true, !dbg !6474
  %lnot.ext = zext i1 %lnot to i32, !dbg !6474
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !6475
  %add = add i32 %35, %lnot.ext, !dbg !6475
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !6475
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !6476
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !6477
  store i32 %36, i32* %37, align 4, !dbg !6478
  ret void, !dbg !6479
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !6480 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !6483, metadata !DIExpression()), !dbg !6484
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !6485, metadata !DIExpression()), !dbg !6486
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6487
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !6489
  %1 = load i64, i64* %bits, align 8, !dbg !6489
  %tobool = icmp ne i64 %1, 0, !dbg !6487
  br i1 %tobool, label %if.then, label %if.end, !dbg !6490

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !6491

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !6492), !dbg !6494
  br label %while.cond, !dbg !6495

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6496
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !6497
  %3 = load i64, i64* %bits1, align 8, !dbg !6497
  %and = and i64 %3, 1, !dbg !6498
  %tobool2 = icmp ne i64 %and, 0, !dbg !6499
  %lnot = xor i1 %tobool2, true, !dbg !6499
  br i1 %lnot, label %while.body, label %while.end, !dbg !6495

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6500
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !6502
  %5 = load i64, i64* %bits3, align 8, !dbg !6503
  %shr = lshr i64 %5, 1, !dbg !6503
  store i64 %shr, i64* %bits3, align 8, !dbg !6503
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !6504
  %7 = load i32, i32* %6, align 4, !dbg !6505
  %add = add i32 %7, 1, !dbg !6505
  store i32 %add, i32* %6, align 4, !dbg !6505
  br label %while.cond, !dbg !6495, !llvm.loop !6506

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !6508
  br label %return, !dbg !6508

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !6509
  %9 = load i32, i32* %8, align 4, !dbg !6510
  %add4 = add i32 %9, 64, !dbg !6511
  %sub = sub i32 %add4, 1, !dbg !6512
  %div = udiv i32 %sub, 64, !dbg !6513
  %mul = mul i32 %div, 64, !dbg !6514
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !6515
  store i32 %mul, i32* %10, align 4, !dbg !6516
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6517
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !6518
  %12 = load i32, i32* %word_no, align 8, !dbg !6519
  %inc = add i32 %12, 1, !dbg !6519
  store i32 %inc, i32* %word_no, align 8, !dbg !6519
  br label %while.body6, !dbg !6520

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !6521

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6523
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !6524
  %14 = load i32, i32* %word_no8, align 8, !dbg !6524
  %cmp = icmp ne i32 %14, 2, !dbg !6525
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !6521

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6526
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !6528
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !6528
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !6529
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6530
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !6531
  %18 = load i32, i32* %word_no11, align 8, !dbg !6531
  %idxprom = zext i32 %18 to i64, !dbg !6526
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !6526
  %19 = load i64, i64* %arrayidx, align 8, !dbg !6526
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6532
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !6533
  store i64 %19, i64* %bits12, align 8, !dbg !6534
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6535
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !6537
  %22 = load i64, i64* %bits13, align 8, !dbg !6537
  %tobool14 = icmp ne i64 %22, 0, !dbg !6535
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !6538

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !6539

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !6540
  %24 = load i32, i32* %23, align 4, !dbg !6541
  %add17 = add i32 %24, 64, !dbg !6541
  store i32 %add17, i32* %23, align 4, !dbg !6541
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6542
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !6543
  %26 = load i32, i32* %word_no18, align 8, !dbg !6544
  %inc19 = add i32 %26, 1, !dbg !6544
  store i32 %inc19, i32* %word_no18, align 8, !dbg !6544
  br label %while.cond7, !dbg !6521, !llvm.loop !6545

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6547
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !6548
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !6548
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !6549
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !6549
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6550
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !6551
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !6552
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6553
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !6555
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !6555
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !6553
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !6556

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !6557
  br label %return, !dbg !6557

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6558
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !6559
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !6559
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !6560
  %35 = load i32, i32* %indx, align 8, !dbg !6560
  %mul28 = mul i32 %35, 128, !dbg !6561
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !6562
  store i32 %mul28, i32* %36, align 4, !dbg !6563
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6564
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !6565
  store i32 0, i32* %word_no29, align 8, !dbg !6566
  br label %while.body6, !dbg !6520, !llvm.loop !6567

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !6569
  ret i8 %38, !dbg !6569
}

declare dso_local %union.tree_node* @referenced_var_lookup(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @type_consists_of_records_p(%union.tree_node* %type) #0 !dbg !6570 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %fld = alloca %union.tree_node*, align 8
  %last_fld_has_zero_size = alloca i8, align 1
  %ft = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6571, metadata !DIExpression()), !dbg !6572
  call void @llvm.dbg.declare(metadata %union.tree_node** %fld, metadata !6573, metadata !DIExpression()), !dbg !6574
  call void @llvm.dbg.declare(metadata i8* %last_fld_has_zero_size, metadata !6575, metadata !DIExpression()), !dbg !6576
  store i8 0, i8* %last_fld_has_zero_size, align 1, !dbg !6576
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6577
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6577
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6577
  %bf.load = load i64, i64* %1, align 8, !dbg !6577
  %bf.clear = and i64 %bf.load, 65535, !dbg !6577
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6577
  %cmp = icmp ne i32 %bf.cast, 16, !dbg !6579
  br i1 %cmp, label %if.then, label %if.end, !dbg !6580

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6581
  br label %return, !dbg !6581

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6582
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !6582
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !6582
  %3 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !6582
  store %union.tree_node* %3, %union.tree_node** %fld, align 8, !dbg !6584
  br label %for.cond, !dbg !6585

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6586
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !6588
  br i1 %tobool, label %for.body, label %for.end, !dbg !6588

for.body:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6589
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6589
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !6589
  %bf.load3 = load i64, i64* %6, align 8, !dbg !6589
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !6589
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !6589
  %cmp6 = icmp eq i32 %bf.cast5, 31, !dbg !6591
  br i1 %cmp6, label %if.then7, label %if.end17, !dbg !6592

if.then7:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %ft, metadata !6593, metadata !DIExpression()), !dbg !6595
  %7 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6596
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !6596
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6596
  %8 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !6596
  store %union.tree_node* %8, %union.tree_node** %ft, align 8, !dbg !6595
  %9 = load %union.tree_node*, %union.tree_node** %ft, align 8, !dbg !6597
  %call = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %9), !dbg !6599
  %tobool9 = icmp ne i8 %call, 0, !dbg !6599
  br i1 %tobool9, label %if.end13, label %land.lhs.true, !dbg !6600

land.lhs.true:                                    ; preds = %if.then7
  %10 = load %union.tree_node*, %union.tree_node** %ft, align 8, !dbg !6601
  %call10 = call zeroext i8 @type_consists_of_records_p(%union.tree_node* %10), !dbg !6602
  %tobool11 = icmp ne i8 %call10, 0, !dbg !6602
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !6603

if.then12:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !6604
  br label %return, !dbg !6604

if.end13:                                         ; preds = %land.lhs.true, %if.then7
  %11 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6605
  %decl_common = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !6605
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !6605
  %12 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !6605
  %call14 = call i64 @tree_low_cst(%union.tree_node* %12, i32 1), !dbg !6606
  %cmp15 = icmp eq i64 %call14, 0, !dbg !6607
  %conv = zext i1 %cmp15 to i32, !dbg !6607
  %conv16 = trunc i32 %conv to i8, !dbg !6606
  store i8 %conv16, i8* %last_fld_has_zero_size, align 1, !dbg !6608
  br label %if.end17, !dbg !6609

if.end17:                                         ; preds = %if.end13, %for.body
  br label %for.inc, !dbg !6610

for.inc:                                          ; preds = %if.end17
  %13 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6611
  %common18 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !6611
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 1, !dbg !6611
  %14 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6611
  store %union.tree_node* %14, %union.tree_node** %fld, align 8, !dbg !6612
  br label %for.cond, !dbg !6613, !llvm.loop !6614

for.end:                                          ; preds = %for.cond
  %15 = load i8, i8* %last_fld_has_zero_size, align 1, !dbg !6616
  %tobool19 = icmp ne i8 %15, 0, !dbg !6616
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !6618

if.then20:                                        ; preds = %for.end
  store i8 0, i8* %retval, align 1, !dbg !6619
  br label %return, !dbg !6619

if.end21:                                         ; preds = %for.end
  store i8 1, i8* %retval, align 1, !dbg !6620
  br label %return, !dbg !6620

return:                                           ; preds = %if.end21, %if.then20, %if.then12, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !6621
  ret i8 %16, !dbg !6621
}

; Function Attrs: noinline nounwind uwtable
define internal void @completely_scalarize_record(%union.tree_node* %base, %union.tree_node* %decl, i64 %offset) #0 !dbg !6622 {
entry:
  %base.addr = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca i64, align 8
  %fld = alloca %union.tree_node*, align 8
  %decl_type = alloca %union.tree_node*, align 8
  %pos = alloca i64, align 8
  %ft = alloca %union.tree_node*, align 8
  %access = alloca %struct.access*, align 8
  %size = alloca i64, align 8
  %expr = alloca %union.tree_node*, align 8
  %ok = alloca i8, align 1
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !6625, metadata !DIExpression()), !dbg !6626
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6627, metadata !DIExpression()), !dbg !6628
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !6629, metadata !DIExpression()), !dbg !6630
  call void @llvm.dbg.declare(metadata %union.tree_node** %fld, metadata !6631, metadata !DIExpression()), !dbg !6632
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl_type, metadata !6633, metadata !DIExpression()), !dbg !6634
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6635
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !6635
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6635
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6635
  store %union.tree_node* %1, %union.tree_node** %decl_type, align 8, !dbg !6634
  %2 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !6636
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !6636
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !6636
  %3 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !6636
  store %union.tree_node* %3, %union.tree_node** %fld, align 8, !dbg !6638
  br label %for.cond, !dbg !6639

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6640
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !6642
  br i1 %tobool, label %for.body, label %for.end, !dbg !6642

for.body:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6643
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6643
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !6643
  %bf.load = load i64, i64* %6, align 8, !dbg !6643
  %bf.clear = and i64 %bf.load, 65535, !dbg !6643
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6643
  %cmp = icmp eq i32 %bf.cast, 31, !dbg !6645
  br i1 %cmp, label %if.then, label %if.end19, !dbg !6646

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !6647, metadata !DIExpression()), !dbg !6649
  %7 = load i64, i64* %offset.addr, align 8, !dbg !6650
  %8 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6651
  %call = call i64 @int_bit_position(%union.tree_node* %8), !dbg !6652
  %add = add nsw i64 %7, %call, !dbg !6653
  store i64 %add, i64* %pos, align 8, !dbg !6649
  call void @llvm.dbg.declare(metadata %union.tree_node** %ft, metadata !6654, metadata !DIExpression()), !dbg !6655
  %9 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6656
  %common3 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !6656
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !6656
  %10 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !6656
  store %union.tree_node* %10, %union.tree_node** %ft, align 8, !dbg !6655
  %11 = load %union.tree_node*, %union.tree_node** %ft, align 8, !dbg !6657
  %call5 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %11), !dbg !6659
  %tobool6 = icmp ne i8 %call5, 0, !dbg !6659
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !6660

if.then7:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !6661, metadata !DIExpression()), !dbg !6663
  call void @llvm.dbg.declare(metadata i64* %size, metadata !6664, metadata !DIExpression()), !dbg !6665
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !6666, metadata !DIExpression()), !dbg !6667
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !6668, metadata !DIExpression()), !dbg !6669
  %12 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6670
  %decl_common = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !6670
  %size8 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !6670
  %13 = load %union.tree_node*, %union.tree_node** %size8, align 8, !dbg !6670
  %call9 = call i64 @tree_low_cst(%union.tree_node* %13, i32 1), !dbg !6671
  store i64 %call9, i64* %size, align 8, !dbg !6672
  %14 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !6673
  store %union.tree_node* %14, %union.tree_node** %expr, align 8, !dbg !6674
  %15 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !6675
  %common10 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !6675
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !6675
  %16 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !6675
  %17 = load i64, i64* %pos, align 8, !dbg !6676
  %18 = load %union.tree_node*, %union.tree_node** %ft, align 8, !dbg !6677
  %call12 = call zeroext i8 @build_ref_for_offset(%union.tree_node** %expr, %union.tree_node* %16, i64 %17, %union.tree_node* %18, i8 zeroext 0), !dbg !6678
  store i8 %call12, i8* %ok, align 1, !dbg !6679
  %19 = load i8, i8* %ok, align 1, !dbg !6680
  %tobool13 = icmp ne i8 %19, 0, !dbg !6680
  br i1 %tobool13, label %cond.false, label %cond.true, !dbg !6680

cond.true:                                        ; preds = %if.then7
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 863, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6680
  br label %cond.end, !dbg !6680

cond.false:                                       ; preds = %if.then7
  br label %cond.end, !dbg !6680

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6680
  %20 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !6681
  %21 = load i64, i64* %pos, align 8, !dbg !6682
  %22 = load i64, i64* %size, align 8, !dbg !6683
  %call14 = call %struct.access* @create_access_1(%union.tree_node* %20, i64 %21, i64 %22), !dbg !6684
  store %struct.access* %call14, %struct.access** %access, align 8, !dbg !6685
  %23 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6686
  %24 = load %struct.access*, %struct.access** %access, align 8, !dbg !6687
  %expr15 = getelementptr inbounds %struct.access, %struct.access* %24, i32 0, i32 3, !dbg !6688
  store %union.tree_node* %23, %union.tree_node** %expr15, align 8, !dbg !6689
  %25 = load %union.tree_node*, %union.tree_node** %ft, align 8, !dbg !6690
  %26 = load %struct.access*, %struct.access** %access, align 8, !dbg !6691
  %type16 = getelementptr inbounds %struct.access, %struct.access* %26, i32 0, i32 4, !dbg !6692
  store %union.tree_node* %25, %union.tree_node** %type16, align 8, !dbg !6693
  %27 = load %struct.access*, %struct.access** %access, align 8, !dbg !6694
  %total_scalarization = getelementptr inbounds %struct.access, %struct.access* %27, i32 0, i32 14, !dbg !6695
  %bf.load17 = load i16, i16* %total_scalarization, align 8, !dbg !6696
  %bf.clear18 = and i16 %bf.load17, -3, !dbg !6696
  %bf.set = or i16 %bf.clear18, 2, !dbg !6696
  store i16 %bf.set, i16* %total_scalarization, align 8, !dbg !6696
  br label %if.end, !dbg !6697

if.else:                                          ; preds = %if.then
  %28 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !6698
  %29 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6699
  %30 = load i64, i64* %pos, align 8, !dbg !6700
  call void @completely_scalarize_record(%union.tree_node* %28, %union.tree_node* %29, i64 %30), !dbg !6701
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  br label %if.end19, !dbg !6702

if.end19:                                         ; preds = %if.end, %for.body
  br label %for.inc, !dbg !6703

for.inc:                                          ; preds = %if.end19
  %31 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6704
  %common20 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !6704
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 1, !dbg !6704
  %32 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6704
  store %union.tree_node* %32, %union.tree_node** %fld, align 8, !dbg !6705
  br label %for.cond, !dbg !6706, !llvm.loop !6707

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6709
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !6710 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !6713, metadata !DIExpression()), !dbg !6714
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !6715, metadata !DIExpression()), !dbg !6716
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !6717
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !6718
  %1 = load i64, i64* %bits, align 8, !dbg !6719
  %shr = lshr i64 %1, 1, !dbg !6719
  store i64 %shr, i64* %bits, align 8, !dbg !6719
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !6720
  %3 = load i32, i32* %2, align 4, !dbg !6721
  %add = add i32 %3, 1, !dbg !6721
  store i32 %add, i32* %2, align 4, !dbg !6721
  ret void, !dbg !6722
}

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @sort_and_splice_var_accesses(%union.tree_node* %var) #0 !dbg !6723 {
entry:
  %retval = alloca %struct.access*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %access_count = alloca i32, align 4
  %res = alloca %struct.access*, align 8
  %prev_acc_ptr = alloca %struct.access**, align 8
  %access_vec = alloca %struct.VEC_access_p_heap*, align 8
  %first = alloca i8, align 1
  %low = alloca i64, align 8
  %high = alloca i64, align 8
  %access = alloca %struct.access*, align 8
  %grp_write = alloca i8, align 1
  %grp_read = alloca i8, align 1
  %multiple_reads = alloca i8, align 1
  %total_scalarization = alloca i8, align 1
  %grp_partial_lhs = alloca i8, align 1
  %first_scalar = alloca i8, align 1
  %unscalarizable_region = alloca i8, align 1
  %ac2 = alloca %struct.access*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6726, metadata !DIExpression()), !dbg !6727
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6728, metadata !DIExpression()), !dbg !6729
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6730, metadata !DIExpression()), !dbg !6731
  call void @llvm.dbg.declare(metadata i32* %access_count, metadata !6732, metadata !DIExpression()), !dbg !6733
  call void @llvm.dbg.declare(metadata %struct.access** %res, metadata !6734, metadata !DIExpression()), !dbg !6735
  call void @llvm.dbg.declare(metadata %struct.access*** %prev_acc_ptr, metadata !6736, metadata !DIExpression()), !dbg !6738
  store %struct.access** %res, %struct.access*** %prev_acc_ptr, align 8, !dbg !6738
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap** %access_vec, metadata !6739, metadata !DIExpression()), !dbg !6740
  call void @llvm.dbg.declare(metadata i8* %first, metadata !6741, metadata !DIExpression()), !dbg !6742
  store i8 1, i8* %first, align 1, !dbg !6742
  call void @llvm.dbg.declare(metadata i64* %low, metadata !6743, metadata !DIExpression()), !dbg !6744
  store i64 -1, i64* %low, align 8, !dbg !6744
  call void @llvm.dbg.declare(metadata i64* %high, metadata !6745, metadata !DIExpression()), !dbg !6746
  store i64 0, i64* %high, align 8, !dbg !6746
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6747
  %call = call %struct.VEC_access_p_heap* @get_base_access_vector(%union.tree_node* %0), !dbg !6748
  store %struct.VEC_access_p_heap* %call, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !6749
  %1 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !6750
  %tobool = icmp ne %struct.VEC_access_p_heap* %1, null, !dbg !6750
  br i1 %tobool, label %if.end, label %if.then, !dbg !6752

if.then:                                          ; preds = %entry
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !6753
  br label %return, !dbg !6753

if.end:                                           ; preds = %entry
  %2 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !6754
  %tobool1 = icmp ne %struct.VEC_access_p_heap* %2, null, !dbg !6754
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6754

cond.true:                                        ; preds = %if.end
  %3 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !6754
  %base = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %3, i32 0, i32 0, !dbg !6754
  br label %cond.end, !dbg !6754

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6754

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6754
  %call2 = call i32 @VEC_access_p_base_length(%struct.VEC_access_p_base* %cond), !dbg !6754
  store i32 %call2, i32* %access_count, align 4, !dbg !6755
  %4 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !6756
  %tobool3 = icmp ne %struct.VEC_access_p_heap* %4, null, !dbg !6756
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !6756

cond.true4:                                       ; preds = %cond.end
  %5 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !6756
  %base5 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %5, i32 0, i32 0, !dbg !6756
  br label %cond.end7, !dbg !6756

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !6756

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_access_p_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !6756
  %call9 = call %struct.access** @VEC_access_p_base_address(%struct.VEC_access_p_base* %cond8), !dbg !6756
  %6 = bitcast %struct.access** %call9 to i8*, !dbg !6756
  %7 = load i32, i32* %access_count, align 4, !dbg !6757
  %conv = sext i32 %7 to i64, !dbg !6757
  call void @spec_qsort(i8* %6, i64 %conv, i64 8, i32 (i8*, i8*)* @compare_access_positions), !dbg !6758
  store i32 0, i32* %i, align 4, !dbg !6759
  br label %while.cond, !dbg !6760

while.cond:                                       ; preds = %if.end183, %cond.end7
  %8 = load i32, i32* %i, align 4, !dbg !6761
  %9 = load i32, i32* %access_count, align 4, !dbg !6762
  %cmp = icmp slt i32 %8, %9, !dbg !6763
  br i1 %cmp, label %while.body, label %while.end184, !dbg !6760

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !6764, metadata !DIExpression()), !dbg !6766
  %10 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !6767
  %tobool11 = icmp ne %struct.VEC_access_p_heap* %10, null, !dbg !6767
  br i1 %tobool11, label %cond.true12, label %cond.false14, !dbg !6767

cond.true12:                                      ; preds = %while.body
  %11 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !6767
  %base13 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %11, i32 0, i32 0, !dbg !6767
  br label %cond.end15, !dbg !6767

cond.false14:                                     ; preds = %while.body
  br label %cond.end15, !dbg !6767

cond.end15:                                       ; preds = %cond.false14, %cond.true12
  %cond16 = phi %struct.VEC_access_p_base* [ %base13, %cond.true12 ], [ null, %cond.false14 ], !dbg !6767
  %12 = load i32, i32* %i, align 4, !dbg !6767
  %call17 = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond16, i32 %12), !dbg !6767
  store %struct.access* %call17, %struct.access** %access, align 8, !dbg !6766
  call void @llvm.dbg.declare(metadata i8* %grp_write, metadata !6768, metadata !DIExpression()), !dbg !6769
  %13 = load %struct.access*, %struct.access** %access, align 8, !dbg !6770
  %write = getelementptr inbounds %struct.access, %struct.access* %13, i32 0, i32 14, !dbg !6771
  %bf.load = load i16, i16* %write, align 8, !dbg !6771
  %bf.clear = and i16 %bf.load, 1, !dbg !6771
  %bf.cast = zext i16 %bf.clear to i32, !dbg !6771
  %conv18 = trunc i32 %bf.cast to i8, !dbg !6770
  store i8 %conv18, i8* %grp_write, align 1, !dbg !6769
  call void @llvm.dbg.declare(metadata i8* %grp_read, metadata !6772, metadata !DIExpression()), !dbg !6773
  %14 = load %struct.access*, %struct.access** %access, align 8, !dbg !6774
  %write19 = getelementptr inbounds %struct.access, %struct.access* %14, i32 0, i32 14, !dbg !6775
  %bf.load20 = load i16, i16* %write19, align 8, !dbg !6775
  %bf.clear21 = and i16 %bf.load20, 1, !dbg !6775
  %bf.cast22 = zext i16 %bf.clear21 to i32, !dbg !6775
  %tobool23 = icmp ne i32 %bf.cast22, 0, !dbg !6776
  %lnot = xor i1 %tobool23, true, !dbg !6776
  %lnot.ext = zext i1 %lnot to i32, !dbg !6776
  %conv24 = trunc i32 %lnot.ext to i8, !dbg !6776
  store i8 %conv24, i8* %grp_read, align 1, !dbg !6773
  call void @llvm.dbg.declare(metadata i8* %multiple_reads, metadata !6777, metadata !DIExpression()), !dbg !6778
  store i8 0, i8* %multiple_reads, align 1, !dbg !6778
  call void @llvm.dbg.declare(metadata i8* %total_scalarization, metadata !6779, metadata !DIExpression()), !dbg !6780
  %15 = load %struct.access*, %struct.access** %access, align 8, !dbg !6781
  %total_scalarization25 = getelementptr inbounds %struct.access, %struct.access* %15, i32 0, i32 14, !dbg !6782
  %bf.load26 = load i16, i16* %total_scalarization25, align 8, !dbg !6782
  %bf.lshr = lshr i16 %bf.load26, 1, !dbg !6782
  %bf.clear27 = and i16 %bf.lshr, 1, !dbg !6782
  %bf.cast28 = zext i16 %bf.clear27 to i32, !dbg !6782
  %conv29 = trunc i32 %bf.cast28 to i8, !dbg !6781
  store i8 %conv29, i8* %total_scalarization, align 1, !dbg !6780
  call void @llvm.dbg.declare(metadata i8* %grp_partial_lhs, metadata !6783, metadata !DIExpression()), !dbg !6784
  %16 = load %struct.access*, %struct.access** %access, align 8, !dbg !6785
  %grp_partial_lhs30 = getelementptr inbounds %struct.access, %struct.access* %16, i32 0, i32 14, !dbg !6786
  %bf.load31 = load i16, i16* %grp_partial_lhs30, align 8, !dbg !6786
  %bf.lshr32 = lshr i16 %bf.load31, 9, !dbg !6786
  %bf.clear33 = and i16 %bf.lshr32, 1, !dbg !6786
  %bf.cast34 = zext i16 %bf.clear33 to i32, !dbg !6786
  %conv35 = trunc i32 %bf.cast34 to i8, !dbg !6785
  store i8 %conv35, i8* %grp_partial_lhs, align 1, !dbg !6784
  call void @llvm.dbg.declare(metadata i8* %first_scalar, metadata !6787, metadata !DIExpression()), !dbg !6788
  %17 = load %struct.access*, %struct.access** %access, align 8, !dbg !6789
  %type = getelementptr inbounds %struct.access, %struct.access* %17, i32 0, i32 4, !dbg !6790
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6790
  %call36 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %18), !dbg !6791
  store i8 %call36, i8* %first_scalar, align 1, !dbg !6788
  call void @llvm.dbg.declare(metadata i8* %unscalarizable_region, metadata !6792, metadata !DIExpression()), !dbg !6793
  %19 = load %struct.access*, %struct.access** %access, align 8, !dbg !6794
  %grp_unscalarizable_region = getelementptr inbounds %struct.access, %struct.access* %19, i32 0, i32 14, !dbg !6795
  %bf.load37 = load i16, i16* %grp_unscalarizable_region, align 8, !dbg !6795
  %bf.lshr38 = lshr i16 %bf.load37, 7, !dbg !6795
  %bf.clear39 = and i16 %bf.lshr38, 1, !dbg !6795
  %bf.cast40 = zext i16 %bf.clear39 to i32, !dbg !6795
  %conv41 = trunc i32 %bf.cast40 to i8, !dbg !6794
  store i8 %conv41, i8* %unscalarizable_region, align 1, !dbg !6793
  %20 = load i8, i8* %first, align 1, !dbg !6796
  %conv42 = zext i8 %20 to i32, !dbg !6796
  %tobool43 = icmp ne i32 %conv42, 0, !dbg !6796
  br i1 %tobool43, label %if.then46, label %lor.lhs.false, !dbg !6798

lor.lhs.false:                                    ; preds = %cond.end15
  %21 = load %struct.access*, %struct.access** %access, align 8, !dbg !6799
  %offset = getelementptr inbounds %struct.access, %struct.access* %21, i32 0, i32 0, !dbg !6800
  %22 = load i64, i64* %offset, align 8, !dbg !6800
  %23 = load i64, i64* %high, align 8, !dbg !6801
  %cmp44 = icmp sge i64 %22, %23, !dbg !6802
  br i1 %cmp44, label %if.then46, label %if.else, !dbg !6803

if.then46:                                        ; preds = %lor.lhs.false, %cond.end15
  store i8 0, i8* %first, align 1, !dbg !6804
  %24 = load %struct.access*, %struct.access** %access, align 8, !dbg !6806
  %offset47 = getelementptr inbounds %struct.access, %struct.access* %24, i32 0, i32 0, !dbg !6807
  %25 = load i64, i64* %offset47, align 8, !dbg !6807
  store i64 %25, i64* %low, align 8, !dbg !6808
  %26 = load %struct.access*, %struct.access** %access, align 8, !dbg !6809
  %offset48 = getelementptr inbounds %struct.access, %struct.access* %26, i32 0, i32 0, !dbg !6810
  %27 = load i64, i64* %offset48, align 8, !dbg !6810
  %28 = load %struct.access*, %struct.access** %access, align 8, !dbg !6811
  %size = getelementptr inbounds %struct.access, %struct.access* %28, i32 0, i32 1, !dbg !6812
  %29 = load i64, i64* %size, align 8, !dbg !6812
  %add = add nsw i64 %27, %29, !dbg !6813
  store i64 %add, i64* %high, align 8, !dbg !6814
  br label %if.end73, !dbg !6815

if.else:                                          ; preds = %lor.lhs.false
  %30 = load %struct.access*, %struct.access** %access, align 8, !dbg !6816
  %offset49 = getelementptr inbounds %struct.access, %struct.access* %30, i32 0, i32 0, !dbg !6818
  %31 = load i64, i64* %offset49, align 8, !dbg !6818
  %32 = load i64, i64* %low, align 8, !dbg !6819
  %cmp50 = icmp sgt i64 %31, %32, !dbg !6820
  br i1 %cmp50, label %land.lhs.true, label %if.else58, !dbg !6821

land.lhs.true:                                    ; preds = %if.else
  %33 = load %struct.access*, %struct.access** %access, align 8, !dbg !6822
  %offset52 = getelementptr inbounds %struct.access, %struct.access* %33, i32 0, i32 0, !dbg !6823
  %34 = load i64, i64* %offset52, align 8, !dbg !6823
  %35 = load %struct.access*, %struct.access** %access, align 8, !dbg !6824
  %size53 = getelementptr inbounds %struct.access, %struct.access* %35, i32 0, i32 1, !dbg !6825
  %36 = load i64, i64* %size53, align 8, !dbg !6825
  %add54 = add nsw i64 %34, %36, !dbg !6826
  %37 = load i64, i64* %high, align 8, !dbg !6827
  %cmp55 = icmp sgt i64 %add54, %37, !dbg !6828
  br i1 %cmp55, label %if.then57, label %if.else58, !dbg !6829

if.then57:                                        ; preds = %land.lhs.true
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !6830
  br label %return, !dbg !6830

if.else58:                                        ; preds = %land.lhs.true, %if.else
  %38 = load %struct.access*, %struct.access** %access, align 8, !dbg !6831
  %offset59 = getelementptr inbounds %struct.access, %struct.access* %38, i32 0, i32 0, !dbg !6831
  %39 = load i64, i64* %offset59, align 8, !dbg !6831
  %40 = load i64, i64* %low, align 8, !dbg !6831
  %cmp60 = icmp sge i64 %39, %40, !dbg !6831
  br i1 %cmp60, label %land.lhs.true62, label %cond.true68, !dbg !6831

land.lhs.true62:                                  ; preds = %if.else58
  %41 = load %struct.access*, %struct.access** %access, align 8, !dbg !6831
  %offset63 = getelementptr inbounds %struct.access, %struct.access* %41, i32 0, i32 0, !dbg !6831
  %42 = load i64, i64* %offset63, align 8, !dbg !6831
  %43 = load %struct.access*, %struct.access** %access, align 8, !dbg !6831
  %size64 = getelementptr inbounds %struct.access, %struct.access* %43, i32 0, i32 1, !dbg !6831
  %44 = load i64, i64* %size64, align 8, !dbg !6831
  %add65 = add nsw i64 %42, %44, !dbg !6831
  %45 = load i64, i64* %high, align 8, !dbg !6831
  %cmp66 = icmp sle i64 %add65, %45, !dbg !6831
  br i1 %cmp66, label %cond.false69, label %cond.true68, !dbg !6831

cond.true68:                                      ; preds = %land.lhs.true62, %if.else58
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 1602, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6831
  br label %cond.end70, !dbg !6831

cond.false69:                                     ; preds = %land.lhs.true62
  br label %cond.end70, !dbg !6831

cond.end70:                                       ; preds = %cond.false69, %cond.true68
  %cond71 = phi i32 [ 0, %cond.true68 ], [ 0, %cond.false69 ], !dbg !6831
  br label %if.end72

if.end72:                                         ; preds = %cond.end70
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.then46
  %46 = load i32, i32* %i, align 4, !dbg !6832
  %add74 = add nsw i32 %46, 1, !dbg !6833
  store i32 %add74, i32* %j, align 4, !dbg !6834
  br label %while.cond75, !dbg !6835

while.cond75:                                     ; preds = %cond.end140, %if.end73
  %47 = load i32, i32* %j, align 4, !dbg !6836
  %48 = load i32, i32* %access_count, align 4, !dbg !6837
  %cmp76 = icmp slt i32 %47, %48, !dbg !6838
  br i1 %cmp76, label %while.body78, label %while.end, !dbg !6835

while.body78:                                     ; preds = %while.cond75
  call void @llvm.dbg.declare(metadata %struct.access** %ac2, metadata !6839, metadata !DIExpression()), !dbg !6841
  %49 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !6842
  %tobool79 = icmp ne %struct.VEC_access_p_heap* %49, null, !dbg !6842
  br i1 %tobool79, label %cond.true80, label %cond.false82, !dbg !6842

cond.true80:                                      ; preds = %while.body78
  %50 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !6842
  %base81 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %50, i32 0, i32 0, !dbg !6842
  br label %cond.end83, !dbg !6842

cond.false82:                                     ; preds = %while.body78
  br label %cond.end83, !dbg !6842

cond.end83:                                       ; preds = %cond.false82, %cond.true80
  %cond84 = phi %struct.VEC_access_p_base* [ %base81, %cond.true80 ], [ null, %cond.false82 ], !dbg !6842
  %51 = load i32, i32* %j, align 4, !dbg !6842
  %call85 = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond84, i32 %51), !dbg !6842
  store %struct.access* %call85, %struct.access** %ac2, align 8, !dbg !6841
  %52 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !6843
  %offset86 = getelementptr inbounds %struct.access, %struct.access* %52, i32 0, i32 0, !dbg !6845
  %53 = load i64, i64* %offset86, align 8, !dbg !6845
  %54 = load %struct.access*, %struct.access** %access, align 8, !dbg !6846
  %offset87 = getelementptr inbounds %struct.access, %struct.access* %54, i32 0, i32 0, !dbg !6847
  %55 = load i64, i64* %offset87, align 8, !dbg !6847
  %cmp88 = icmp ne i64 %53, %55, !dbg !6848
  br i1 %cmp88, label %if.then95, label %lor.lhs.false90, !dbg !6849

lor.lhs.false90:                                  ; preds = %cond.end83
  %56 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !6850
  %size91 = getelementptr inbounds %struct.access, %struct.access* %56, i32 0, i32 1, !dbg !6851
  %57 = load i64, i64* %size91, align 8, !dbg !6851
  %58 = load %struct.access*, %struct.access** %access, align 8, !dbg !6852
  %size92 = getelementptr inbounds %struct.access, %struct.access* %58, i32 0, i32 1, !dbg !6853
  %59 = load i64, i64* %size92, align 8, !dbg !6853
  %cmp93 = icmp ne i64 %57, %59, !dbg !6854
  br i1 %cmp93, label %if.then95, label %if.end96, !dbg !6855

if.then95:                                        ; preds = %lor.lhs.false90, %cond.end83
  br label %while.end, !dbg !6856

if.end96:                                         ; preds = %lor.lhs.false90
  %60 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !6857
  %write97 = getelementptr inbounds %struct.access, %struct.access* %60, i32 0, i32 14, !dbg !6859
  %bf.load98 = load i16, i16* %write97, align 8, !dbg !6859
  %bf.clear99 = and i16 %bf.load98, 1, !dbg !6859
  %bf.cast100 = zext i16 %bf.clear99 to i32, !dbg !6859
  %tobool101 = icmp ne i32 %bf.cast100, 0, !dbg !6857
  br i1 %tobool101, label %if.then102, label %if.else103, !dbg !6860

if.then102:                                       ; preds = %if.end96
  store i8 1, i8* %grp_write, align 1, !dbg !6861
  br label %if.end108, !dbg !6862

if.else103:                                       ; preds = %if.end96
  %61 = load i8, i8* %grp_read, align 1, !dbg !6863
  %tobool104 = icmp ne i8 %61, 0, !dbg !6863
  br i1 %tobool104, label %if.then105, label %if.else106, !dbg !6866

if.then105:                                       ; preds = %if.else103
  store i8 1, i8* %multiple_reads, align 1, !dbg !6867
  br label %if.end107, !dbg !6868

if.else106:                                       ; preds = %if.else103
  store i8 1, i8* %grp_read, align 1, !dbg !6869
  br label %if.end107

if.end107:                                        ; preds = %if.else106, %if.then105
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %if.then102
  %62 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !6870
  %grp_partial_lhs109 = getelementptr inbounds %struct.access, %struct.access* %62, i32 0, i32 14, !dbg !6871
  %bf.load110 = load i16, i16* %grp_partial_lhs109, align 8, !dbg !6871
  %bf.lshr111 = lshr i16 %bf.load110, 9, !dbg !6871
  %bf.clear112 = and i16 %bf.lshr111, 1, !dbg !6871
  %bf.cast113 = zext i16 %bf.clear112 to i32, !dbg !6871
  %63 = load i8, i8* %grp_partial_lhs, align 1, !dbg !6872
  %conv114 = zext i8 %63 to i32, !dbg !6872
  %or = or i32 %conv114, %bf.cast113, !dbg !6872
  %conv115 = trunc i32 %or to i8, !dbg !6872
  store i8 %conv115, i8* %grp_partial_lhs, align 1, !dbg !6872
  %64 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !6873
  %grp_unscalarizable_region116 = getelementptr inbounds %struct.access, %struct.access* %64, i32 0, i32 14, !dbg !6874
  %bf.load117 = load i16, i16* %grp_unscalarizable_region116, align 8, !dbg !6874
  %bf.lshr118 = lshr i16 %bf.load117, 7, !dbg !6874
  %bf.clear119 = and i16 %bf.lshr118, 1, !dbg !6874
  %bf.cast120 = zext i16 %bf.clear119 to i32, !dbg !6874
  %65 = load i8, i8* %unscalarizable_region, align 1, !dbg !6875
  %conv121 = zext i8 %65 to i32, !dbg !6875
  %or122 = or i32 %conv121, %bf.cast120, !dbg !6875
  %conv123 = trunc i32 %or122 to i8, !dbg !6875
  store i8 %conv123, i8* %unscalarizable_region, align 1, !dbg !6875
  %66 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !6876
  %total_scalarization124 = getelementptr inbounds %struct.access, %struct.access* %66, i32 0, i32 14, !dbg !6877
  %bf.load125 = load i16, i16* %total_scalarization124, align 8, !dbg !6877
  %bf.lshr126 = lshr i16 %bf.load125, 1, !dbg !6877
  %bf.clear127 = and i16 %bf.lshr126, 1, !dbg !6877
  %bf.cast128 = zext i16 %bf.clear127 to i32, !dbg !6877
  %67 = load i8, i8* %total_scalarization, align 1, !dbg !6878
  %conv129 = zext i8 %67 to i32, !dbg !6878
  %or130 = or i32 %conv129, %bf.cast128, !dbg !6878
  %conv131 = trunc i32 %or130 to i8, !dbg !6878
  store i8 %conv131, i8* %total_scalarization, align 1, !dbg !6878
  %68 = load %struct.access*, %struct.access** %access, align 8, !dbg !6879
  %69 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !6880
  call void @relink_to_new_repr(%struct.access* %68, %struct.access* %69), !dbg !6881
  %70 = load i8, i8* %first_scalar, align 1, !dbg !6882
  %conv132 = zext i8 %70 to i32, !dbg !6882
  %tobool133 = icmp ne i32 %conv132, 0, !dbg !6882
  br i1 %tobool133, label %cond.false139, label %lor.lhs.false134, !dbg !6882

lor.lhs.false134:                                 ; preds = %if.end108
  %71 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !6882
  %type135 = getelementptr inbounds %struct.access, %struct.access* %71, i32 0, i32 4, !dbg !6882
  %72 = load %union.tree_node*, %union.tree_node** %type135, align 8, !dbg !6882
  %call136 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %72), !dbg !6882
  %tobool137 = icmp ne i8 %call136, 0, !dbg !6882
  br i1 %tobool137, label %cond.true138, label %cond.false139, !dbg !6882

cond.true138:                                     ; preds = %lor.lhs.false134
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 1627, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6882
  br label %cond.end140, !dbg !6882

cond.false139:                                    ; preds = %lor.lhs.false134, %if.end108
  br label %cond.end140, !dbg !6882

cond.end140:                                      ; preds = %cond.false139, %cond.true138
  %cond141 = phi i32 [ 0, %cond.true138 ], [ 0, %cond.false139 ], !dbg !6882
  %73 = load %struct.access*, %struct.access** %access, align 8, !dbg !6883
  %74 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !6884
  %group_representative = getelementptr inbounds %struct.access, %struct.access* %74, i32 0, i32 7, !dbg !6885
  store %struct.access* %73, %struct.access** %group_representative, align 8, !dbg !6886
  %75 = load i32, i32* %j, align 4, !dbg !6887
  %inc = add nsw i32 %75, 1, !dbg !6887
  store i32 %inc, i32* %j, align 4, !dbg !6887
  br label %while.cond75, !dbg !6835, !llvm.loop !6888

while.end:                                        ; preds = %if.then95, %while.cond75
  %76 = load i32, i32* %j, align 4, !dbg !6890
  store i32 %76, i32* %i, align 4, !dbg !6891
  %77 = load %struct.access*, %struct.access** %access, align 8, !dbg !6892
  %78 = load %struct.access*, %struct.access** %access, align 8, !dbg !6893
  %group_representative142 = getelementptr inbounds %struct.access, %struct.access* %78, i32 0, i32 7, !dbg !6894
  store %struct.access* %77, %struct.access** %group_representative142, align 8, !dbg !6895
  %79 = load i8, i8* %grp_write, align 1, !dbg !6896
  %conv143 = zext i8 %79 to i32, !dbg !6896
  %80 = load %struct.access*, %struct.access** %access, align 8, !dbg !6897
  %grp_write144 = getelementptr inbounds %struct.access, %struct.access* %80, i32 0, i32 14, !dbg !6898
  %81 = trunc i32 %conv143 to i16, !dbg !6899
  %bf.load145 = load i16, i16* %grp_write144, align 8, !dbg !6899
  %bf.value = and i16 %81, 1, !dbg !6899
  %bf.shl = shl i16 %bf.value, 3, !dbg !6899
  %bf.clear146 = and i16 %bf.load145, -9, !dbg !6899
  %bf.set = or i16 %bf.clear146, %bf.shl, !dbg !6899
  store i16 %bf.set, i16* %grp_write144, align 8, !dbg !6899
  %bf.result.cast = zext i16 %bf.value to i32, !dbg !6899
  %82 = load i8, i8* %grp_read, align 1, !dbg !6900
  %conv147 = zext i8 %82 to i32, !dbg !6900
  %83 = load %struct.access*, %struct.access** %access, align 8, !dbg !6901
  %grp_read148 = getelementptr inbounds %struct.access, %struct.access* %83, i32 0, i32 14, !dbg !6902
  %84 = trunc i32 %conv147 to i16, !dbg !6903
  %bf.load149 = load i16, i16* %grp_read148, align 8, !dbg !6903
  %bf.value150 = and i16 %84, 1, !dbg !6903
  %bf.shl151 = shl i16 %bf.value150, 4, !dbg !6903
  %bf.clear152 = and i16 %bf.load149, -17, !dbg !6903
  %bf.set153 = or i16 %bf.clear152, %bf.shl151, !dbg !6903
  store i16 %bf.set153, i16* %grp_read148, align 8, !dbg !6903
  %bf.result.cast154 = zext i16 %bf.value150 to i32, !dbg !6903
  %85 = load i8, i8* %multiple_reads, align 1, !dbg !6904
  %conv155 = zext i8 %85 to i32, !dbg !6904
  %tobool156 = icmp ne i32 %conv155, 0, !dbg !6904
  br i1 %tobool156, label %lor.end, label %lor.rhs, !dbg !6905

lor.rhs:                                          ; preds = %while.end
  %86 = load i8, i8* %total_scalarization, align 1, !dbg !6906
  %conv157 = zext i8 %86 to i32, !dbg !6906
  %tobool158 = icmp ne i32 %conv157, 0, !dbg !6905
  br label %lor.end, !dbg !6905

lor.end:                                          ; preds = %lor.rhs, %while.end
  %87 = phi i1 [ true, %while.end ], [ %tobool158, %lor.rhs ]
  %lor.ext = zext i1 %87 to i32, !dbg !6905
  %88 = load %struct.access*, %struct.access** %access, align 8, !dbg !6907
  %grp_hint = getelementptr inbounds %struct.access, %struct.access* %88, i32 0, i32 14, !dbg !6908
  %89 = trunc i32 %lor.ext to i16, !dbg !6909
  %bf.load159 = load i16, i16* %grp_hint, align 8, !dbg !6909
  %bf.value160 = and i16 %89, 1, !dbg !6909
  %bf.shl161 = shl i16 %bf.value160, 5, !dbg !6909
  %bf.clear162 = and i16 %bf.load159, -33, !dbg !6909
  %bf.set163 = or i16 %bf.clear162, %bf.shl161, !dbg !6909
  store i16 %bf.set163, i16* %grp_hint, align 8, !dbg !6909
  %bf.result.cast164 = zext i16 %bf.value160 to i32, !dbg !6909
  %90 = load i8, i8* %grp_partial_lhs, align 1, !dbg !6910
  %conv165 = zext i8 %90 to i32, !dbg !6910
  %91 = load %struct.access*, %struct.access** %access, align 8, !dbg !6911
  %grp_partial_lhs166 = getelementptr inbounds %struct.access, %struct.access* %91, i32 0, i32 14, !dbg !6912
  %92 = trunc i32 %conv165 to i16, !dbg !6913
  %bf.load167 = load i16, i16* %grp_partial_lhs166, align 8, !dbg !6913
  %bf.value168 = and i16 %92, 1, !dbg !6913
  %bf.shl169 = shl i16 %bf.value168, 9, !dbg !6913
  %bf.clear170 = and i16 %bf.load167, -513, !dbg !6913
  %bf.set171 = or i16 %bf.clear170, %bf.shl169, !dbg !6913
  store i16 %bf.set171, i16* %grp_partial_lhs166, align 8, !dbg !6913
  %bf.result.cast172 = zext i16 %bf.value168 to i32, !dbg !6913
  %93 = load i8, i8* %unscalarizable_region, align 1, !dbg !6914
  %conv173 = zext i8 %93 to i32, !dbg !6914
  %94 = load %struct.access*, %struct.access** %access, align 8, !dbg !6915
  %grp_unscalarizable_region174 = getelementptr inbounds %struct.access, %struct.access* %94, i32 0, i32 14, !dbg !6916
  %95 = trunc i32 %conv173 to i16, !dbg !6917
  %bf.load175 = load i16, i16* %grp_unscalarizable_region174, align 8, !dbg !6917
  %bf.value176 = and i16 %95, 1, !dbg !6917
  %bf.shl177 = shl i16 %bf.value176, 7, !dbg !6917
  %bf.clear178 = and i16 %bf.load175, -129, !dbg !6917
  %bf.set179 = or i16 %bf.clear178, %bf.shl177, !dbg !6917
  store i16 %bf.set179, i16* %grp_unscalarizable_region174, align 8, !dbg !6917
  %bf.result.cast180 = zext i16 %bf.value176 to i32, !dbg !6917
  %96 = load %struct.access*, %struct.access** %access, align 8, !dbg !6918
  %first_link = getelementptr inbounds %struct.access, %struct.access* %96, i32 0, i32 10, !dbg !6920
  %97 = load %struct.assign_link*, %struct.assign_link** %first_link, align 8, !dbg !6920
  %tobool181 = icmp ne %struct.assign_link* %97, null, !dbg !6918
  br i1 %tobool181, label %if.then182, label %if.end183, !dbg !6921

if.then182:                                       ; preds = %lor.end
  %98 = load %struct.access*, %struct.access** %access, align 8, !dbg !6922
  call void @add_access_to_work_queue(%struct.access* %98), !dbg !6923
  br label %if.end183, !dbg !6923

if.end183:                                        ; preds = %if.then182, %lor.end
  %99 = load %struct.access*, %struct.access** %access, align 8, !dbg !6924
  %100 = load %struct.access**, %struct.access*** %prev_acc_ptr, align 8, !dbg !6925
  store %struct.access* %99, %struct.access** %100, align 8, !dbg !6926
  %101 = load %struct.access*, %struct.access** %access, align 8, !dbg !6927
  %next_grp = getelementptr inbounds %struct.access, %struct.access* %101, i32 0, i32 6, !dbg !6928
  store %struct.access** %next_grp, %struct.access*** %prev_acc_ptr, align 8, !dbg !6929
  br label %while.cond, !dbg !6760, !llvm.loop !6930

while.end184:                                     ; preds = %while.cond
  %102 = load %struct.access*, %struct.access** %res, align 8, !dbg !6932
  %103 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !6932
  %tobool185 = icmp ne %struct.VEC_access_p_heap* %103, null, !dbg !6932
  br i1 %tobool185, label %cond.true186, label %cond.false188, !dbg !6932

cond.true186:                                     ; preds = %while.end184
  %104 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !6932
  %base187 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %104, i32 0, i32 0, !dbg !6932
  br label %cond.end189, !dbg !6932

cond.false188:                                    ; preds = %while.end184
  br label %cond.end189, !dbg !6932

cond.end189:                                      ; preds = %cond.false188, %cond.true186
  %cond190 = phi %struct.VEC_access_p_base* [ %base187, %cond.true186 ], [ null, %cond.false188 ], !dbg !6932
  %call191 = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond190, i32 0), !dbg !6932
  %cmp192 = icmp eq %struct.access* %102, %call191, !dbg !6932
  br i1 %cmp192, label %cond.false195, label %cond.true194, !dbg !6932

cond.true194:                                     ; preds = %cond.end189
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 1647, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6932
  br label %cond.end196, !dbg !6932

cond.false195:                                    ; preds = %cond.end189
  br label %cond.end196, !dbg !6932

cond.end196:                                      ; preds = %cond.false195, %cond.true194
  %cond197 = phi i32 [ 0, %cond.true194 ], [ 0, %cond.false195 ], !dbg !6932
  %105 = load %struct.access*, %struct.access** %res, align 8, !dbg !6933
  store %struct.access* %105, %struct.access** %retval, align 8, !dbg !6934
  br label %return, !dbg !6934

return:                                           ; preds = %cond.end196, %if.then57, %if.then
  %106 = load %struct.access*, %struct.access** %retval, align 8, !dbg !6935
  ret %struct.access* %106, !dbg !6935
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_access_trees(%struct.access* %access) #0 !dbg !6936 {
entry:
  %access.addr = alloca %struct.access*, align 8
  %root = alloca %struct.access*, align 8
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !6939, metadata !DIExpression()), !dbg !6940
  br label %while.cond, !dbg !6941

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !6942
  %tobool = icmp ne %struct.access* %0, null, !dbg !6941
  br i1 %tobool, label %while.body, label %while.end, !dbg !6941

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.access** %root, metadata !6943, metadata !DIExpression()), !dbg !6945
  %1 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !6946
  store %struct.access* %1, %struct.access** %root, align 8, !dbg !6945
  call void @build_access_subtree(%struct.access** %access.addr), !dbg !6947
  %2 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !6948
  %3 = load %struct.access*, %struct.access** %root, align 8, !dbg !6949
  %next_grp = getelementptr inbounds %struct.access, %struct.access* %3, i32 0, i32 6, !dbg !6950
  store %struct.access* %2, %struct.access** %next_grp, align 8, !dbg !6951
  br label %while.cond, !dbg !6941, !llvm.loop !6952

while.end:                                        ; preds = %while.cond
  ret void, !dbg !6954
}

; Function Attrs: noinline nounwind uwtable
define internal void @propagate_all_subaccesses() #0 !dbg !6955 {
entry:
  %racc = alloca %struct.access*, align 8
  %link = alloca %struct.assign_link*, align 8
  %lacc = alloca %struct.access*, align 8
  br label %while.cond, !dbg !6956

while.cond:                                       ; preds = %for.end, %entry
  %0 = load %struct.access*, %struct.access** @work_queue_head, align 8, !dbg !6957
  %tobool = icmp ne %struct.access* %0, null, !dbg !6956
  br i1 %tobool, label %while.body, label %while.end, !dbg !6956

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.access** %racc, metadata !6958, metadata !DIExpression()), !dbg !6960
  %call = call %struct.access* @pop_access_from_work_queue(), !dbg !6961
  store %struct.access* %call, %struct.access** %racc, align 8, !dbg !6960
  call void @llvm.dbg.declare(metadata %struct.assign_link** %link, metadata !6962, metadata !DIExpression()), !dbg !6963
  %1 = load %struct.access*, %struct.access** %racc, align 8, !dbg !6964
  %first_link = getelementptr inbounds %struct.access, %struct.access* %1, i32 0, i32 10, !dbg !6964
  %2 = load %struct.assign_link*, %struct.assign_link** %first_link, align 8, !dbg !6964
  %tobool1 = icmp ne %struct.assign_link* %2, null, !dbg !6964
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !6964

cond.true:                                        ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 2020, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6964
  br label %cond.end, !dbg !6964

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !6964

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6964
  %3 = load %struct.access*, %struct.access** %racc, align 8, !dbg !6965
  %first_link2 = getelementptr inbounds %struct.access, %struct.access* %3, i32 0, i32 10, !dbg !6967
  %4 = load %struct.assign_link*, %struct.assign_link** %first_link2, align 8, !dbg !6967
  store %struct.assign_link* %4, %struct.assign_link** %link, align 8, !dbg !6968
  br label %for.cond, !dbg !6969

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load %struct.assign_link*, %struct.assign_link** %link, align 8, !dbg !6970
  %tobool3 = icmp ne %struct.assign_link* %5, null, !dbg !6972
  br i1 %tobool3, label %for.body, label %for.end, !dbg !6972

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.access** %lacc, metadata !6973, metadata !DIExpression()), !dbg !6975
  %6 = load %struct.assign_link*, %struct.assign_link** %link, align 8, !dbg !6976
  %lacc4 = getelementptr inbounds %struct.assign_link, %struct.assign_link* %6, i32 0, i32 0, !dbg !6977
  %7 = load %struct.access*, %struct.access** %lacc4, align 8, !dbg !6977
  store %struct.access* %7, %struct.access** %lacc, align 8, !dbg !6975
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !6978
  %9 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !6980
  %base = getelementptr inbounds %struct.access, %struct.access* %9, i32 0, i32 2, !dbg !6980
  %10 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6980
  %decl_minimal = bitcast %union.tree_node* %10 to %struct.tree_decl_minimal*, !dbg !6980
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !6980
  %11 = load i32, i32* %uid, align 4, !dbg !6980
  %call5 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %8, i32 %11), !dbg !6981
  %tobool6 = icmp ne i32 %call5, 0, !dbg !6981
  br i1 %tobool6, label %if.end, label %if.then, !dbg !6982

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !6983

if.end:                                           ; preds = %for.body
  %12 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !6984
  %group_representative = getelementptr inbounds %struct.access, %struct.access* %12, i32 0, i32 7, !dbg !6985
  %13 = load %struct.access*, %struct.access** %group_representative, align 8, !dbg !6985
  store %struct.access* %13, %struct.access** %lacc, align 8, !dbg !6986
  %14 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !6987
  %15 = load %struct.access*, %struct.access** %racc, align 8, !dbg !6989
  %call7 = call zeroext i8 @propagate_subaccesses_across_link(%struct.access* %14, %struct.access* %15), !dbg !6990
  %conv = zext i8 %call7 to i32, !dbg !6990
  %tobool8 = icmp ne i32 %conv, 0, !dbg !6990
  br i1 %tobool8, label %land.lhs.true, label %if.end12, !dbg !6991

land.lhs.true:                                    ; preds = %if.end
  %16 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !6992
  %first_link9 = getelementptr inbounds %struct.access, %struct.access* %16, i32 0, i32 10, !dbg !6993
  %17 = load %struct.assign_link*, %struct.assign_link** %first_link9, align 8, !dbg !6993
  %tobool10 = icmp ne %struct.assign_link* %17, null, !dbg !6992
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !6994

if.then11:                                        ; preds = %land.lhs.true
  %18 = load %struct.access*, %struct.access** %lacc, align 8, !dbg !6995
  call void @add_access_to_work_queue(%struct.access* %18), !dbg !6996
  br label %if.end12, !dbg !6996

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end
  br label %for.inc, !dbg !6997

for.inc:                                          ; preds = %if.end12, %if.then
  %19 = load %struct.assign_link*, %struct.assign_link** %link, align 8, !dbg !6998
  %next = getelementptr inbounds %struct.assign_link, %struct.assign_link* %19, i32 0, i32 2, !dbg !6999
  %20 = load %struct.assign_link*, %struct.assign_link** %next, align 8, !dbg !6999
  store %struct.assign_link* %20, %struct.assign_link** %link, align 8, !dbg !7000
  br label %for.cond, !dbg !7001, !llvm.loop !7002

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !6956, !llvm.loop !7004

while.end:                                        ; preds = %while.cond
  ret void, !dbg !7006
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @get_first_repr_for_decl(%union.tree_node* %base) #0 !dbg !7007 {
entry:
  %retval = alloca %struct.access*, align 8
  %base.addr = alloca %union.tree_node*, align 8
  %access_vec = alloca %struct.VEC_access_p_heap*, align 8
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !7008, metadata !DIExpression()), !dbg !7009
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap** %access_vec, metadata !7010, metadata !DIExpression()), !dbg !7011
  %0 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7012
  %call = call %struct.VEC_access_p_heap* @get_base_access_vector(%union.tree_node* %0), !dbg !7013
  store %struct.VEC_access_p_heap* %call, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !7014
  %1 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !7015
  %tobool = icmp ne %struct.VEC_access_p_heap* %1, null, !dbg !7015
  br i1 %tobool, label %if.end, label %if.then, !dbg !7017

if.then:                                          ; preds = %entry
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !7018
  br label %return, !dbg !7018

if.end:                                           ; preds = %entry
  %2 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !7019
  %tobool1 = icmp ne %struct.VEC_access_p_heap* %2, null, !dbg !7019
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7019

cond.true:                                        ; preds = %if.end
  %3 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !7019
  %base2 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %3, i32 0, i32 0, !dbg !7019
  br label %cond.end, !dbg !7019

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7019

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_p_base* [ %base2, %cond.true ], [ null, %cond.false ], !dbg !7019
  %call3 = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond, i32 0), !dbg !7019
  store %struct.access* %call3, %struct.access** %retval, align 8, !dbg !7020
  br label %return, !dbg !7020

return:                                           ; preds = %cond.end, %if.then
  %4 = load %struct.access*, %struct.access** %retval, align 8, !dbg !7021
  ret %struct.access* %4, !dbg !7021
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @analyze_access_trees(%struct.access* %access) #0 !dbg !7022 {
entry:
  %access.addr = alloca %struct.access*, align 8
  %ret = alloca i8, align 1
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !7025, metadata !DIExpression()), !dbg !7026
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !7027, metadata !DIExpression()), !dbg !7028
  store i8 0, i8* %ret, align 1, !dbg !7028
  br label %while.cond, !dbg !7029

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !7030
  %tobool = icmp ne %struct.access* %0, null, !dbg !7029
  br i1 %tobool, label %while.body, label %while.end, !dbg !7029

while.body:                                       ; preds = %while.cond
  %1 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !7031
  %call = call zeroext i8 @analyze_access_subtree(%struct.access* %1, i8 zeroext 1, i8 zeroext 0, i8 zeroext 0), !dbg !7034
  %tobool1 = icmp ne i8 %call, 0, !dbg !7034
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7035

if.then:                                          ; preds = %while.body
  store i8 1, i8* %ret, align 1, !dbg !7036
  br label %if.end, !dbg !7037

if.end:                                           ; preds = %if.then, %while.body
  %2 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !7038
  %next_grp = getelementptr inbounds %struct.access, %struct.access* %2, i32 0, i32 6, !dbg !7039
  %3 = load %struct.access*, %struct.access** %next_grp, align 8, !dbg !7039
  store %struct.access* %3, %struct.access** %access.addr, align 8, !dbg !7040
  br label %while.cond, !dbg !7029, !llvm.loop !7041

while.end:                                        ; preds = %while.cond
  %4 = load i8, i8* %ret, align 1, !dbg !7043
  ret i8 %4, !dbg !7044
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_access_tree(%struct._IO_FILE* %f, %struct.access* %access) #0 !dbg !7045 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %access.addr = alloca %struct.access*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !7098, metadata !DIExpression()), !dbg !7099
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !7100, metadata !DIExpression()), !dbg !7101
  br label %for.cond, !dbg !7102

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !7103
  %tobool = icmp ne %struct.access* %0, null, !dbg !7106
  br i1 %tobool, label %for.body, label %for.end, !dbg !7106

for.body:                                         ; preds = %for.cond
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !7107
  %2 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !7108
  call void @dump_access_tree_1(%struct._IO_FILE* %1, %struct.access* %2, i32 0), !dbg !7109
  br label %for.inc, !dbg !7109

for.inc:                                          ; preds = %for.body
  %3 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !7110
  %next_grp = getelementptr inbounds %struct.access, %struct.access* %3, i32 0, i32 6, !dbg !7111
  %4 = load %struct.access*, %struct.access** %next_grp, align 8, !dbg !7111
  store %struct.access* %4, %struct.access** %access.addr, align 8, !dbg !7112
  br label %for.cond, !dbg !7113, !llvm.loop !7114

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7116
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_access_p_heap* @get_base_access_vector(%union.tree_node* %base) #0 !dbg !7117 {
entry:
  %retval = alloca %struct.VEC_access_p_heap*, align 8
  %base.addr = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !7120, metadata !DIExpression()), !dbg !7121
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !7122, metadata !DIExpression()), !dbg !7123
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @base_access_vec, align 8, !dbg !7124
  %1 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7125
  %2 = bitcast %union.tree_node* %1 to i8*, !dbg !7125
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %2), !dbg !7126
  store i8** %call, i8*** %slot, align 8, !dbg !7127
  %3 = load i8**, i8*** %slot, align 8, !dbg !7128
  %tobool = icmp ne i8** %3, null, !dbg !7128
  br i1 %tobool, label %if.else, label %if.then, !dbg !7130

if.then:                                          ; preds = %entry
  store %struct.VEC_access_p_heap* null, %struct.VEC_access_p_heap** %retval, align 8, !dbg !7131
  br label %return, !dbg !7131

if.else:                                          ; preds = %entry
  %4 = load i8**, i8*** %slot, align 8, !dbg !7132
  %5 = bitcast i8** %4 to %struct.VEC_access_p_heap**, !dbg !7133
  %6 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %5, align 8, !dbg !7133
  store %struct.VEC_access_p_heap* %6, %struct.VEC_access_p_heap** %retval, align 8, !dbg !7134
  br label %return, !dbg !7134

return:                                           ; preds = %if.else, %if.then
  %7 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %retval, align 8, !dbg !7135
  ret %struct.VEC_access_p_heap* %7, !dbg !7135
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_access_p_base_length(%struct.VEC_access_p_base* %vec_) #0 !dbg !7136 {
entry:
  %vec_.addr = alloca %struct.VEC_access_p_base*, align 8
  store %struct.VEC_access_p_base* %vec_, %struct.VEC_access_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_base** %vec_.addr, metadata !7141, metadata !DIExpression()), !dbg !7142
  %0 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !7142
  %tobool = icmp ne %struct.VEC_access_p_base* %0, null, !dbg !7142
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7142

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !7142
  %num = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %1, i32 0, i32 0, !dbg !7142
  %2 = load i32, i32* %num, align 8, !dbg !7142
  br label %cond.end, !dbg !7142

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7142

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7142
  ret i32 %cond, !dbg !7142
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.access** @VEC_access_p_base_address(%struct.VEC_access_p_base* %vec_) #0 !dbg !7143 {
entry:
  %vec_.addr = alloca %struct.VEC_access_p_base*, align 8
  store %struct.VEC_access_p_base* %vec_, %struct.VEC_access_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_base** %vec_.addr, metadata !7146, metadata !DIExpression()), !dbg !7147
  %0 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !7147
  %tobool = icmp ne %struct.VEC_access_p_base* %0, null, !dbg !7147
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7147

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !7147
  %vec = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %1, i32 0, i32 2, !dbg !7147
  %arraydecay = getelementptr inbounds [1 x %struct.access*], [1 x %struct.access*]* %vec, i64 0, i64 0, !dbg !7147
  br label %cond.end, !dbg !7147

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7147

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.access** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !7147
  ret %struct.access** %cond, !dbg !7147
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compare_access_positions(i8* %a, i8* %b) #0 !dbg !7148 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %fp1 = alloca %struct.access**, align 8
  %fp2 = alloca %struct.access**, align 8
  %f1 = alloca %struct.access*, align 8
  %f2 = alloca %struct.access*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7149, metadata !DIExpression()), !dbg !7150
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7151, metadata !DIExpression()), !dbg !7152
  call void @llvm.dbg.declare(metadata %struct.access*** %fp1, metadata !7153, metadata !DIExpression()), !dbg !7154
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7155
  %1 = bitcast i8* %0 to %struct.access**, !dbg !7156
  store %struct.access** %1, %struct.access*** %fp1, align 8, !dbg !7154
  call void @llvm.dbg.declare(metadata %struct.access*** %fp2, metadata !7157, metadata !DIExpression()), !dbg !7158
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7159
  %3 = bitcast i8* %2 to %struct.access**, !dbg !7160
  store %struct.access** %3, %struct.access*** %fp2, align 8, !dbg !7158
  call void @llvm.dbg.declare(metadata %struct.access** %f1, metadata !7161, metadata !DIExpression()), !dbg !7162
  %4 = load %struct.access**, %struct.access*** %fp1, align 8, !dbg !7163
  %5 = load %struct.access*, %struct.access** %4, align 8, !dbg !7164
  store %struct.access* %5, %struct.access** %f1, align 8, !dbg !7162
  call void @llvm.dbg.declare(metadata %struct.access** %f2, metadata !7165, metadata !DIExpression()), !dbg !7166
  %6 = load %struct.access**, %struct.access*** %fp2, align 8, !dbg !7167
  %7 = load %struct.access*, %struct.access** %6, align 8, !dbg !7168
  store %struct.access* %7, %struct.access** %f2, align 8, !dbg !7166
  %8 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7169
  %offset = getelementptr inbounds %struct.access, %struct.access* %8, i32 0, i32 0, !dbg !7171
  %9 = load i64, i64* %offset, align 8, !dbg !7171
  %10 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7172
  %offset1 = getelementptr inbounds %struct.access, %struct.access* %10, i32 0, i32 0, !dbg !7173
  %11 = load i64, i64* %offset1, align 8, !dbg !7173
  %cmp = icmp ne i64 %9, %11, !dbg !7174
  br i1 %cmp, label %if.then, label %if.end, !dbg !7175

if.then:                                          ; preds = %entry
  %12 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7176
  %offset2 = getelementptr inbounds %struct.access, %struct.access* %12, i32 0, i32 0, !dbg !7177
  %13 = load i64, i64* %offset2, align 8, !dbg !7177
  %14 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7178
  %offset3 = getelementptr inbounds %struct.access, %struct.access* %14, i32 0, i32 0, !dbg !7179
  %15 = load i64, i64* %offset3, align 8, !dbg !7179
  %cmp4 = icmp slt i64 %13, %15, !dbg !7180
  %16 = zext i1 %cmp4 to i64, !dbg !7176
  %cond = select i1 %cmp4, i32 -1, i32 1, !dbg !7176
  store i32 %cond, i32* %retval, align 4, !dbg !7181
  br label %return, !dbg !7181

if.end:                                           ; preds = %entry
  %17 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7182
  %size = getelementptr inbounds %struct.access, %struct.access* %17, i32 0, i32 1, !dbg !7184
  %18 = load i64, i64* %size, align 8, !dbg !7184
  %19 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7185
  %size5 = getelementptr inbounds %struct.access, %struct.access* %19, i32 0, i32 1, !dbg !7186
  %20 = load i64, i64* %size5, align 8, !dbg !7186
  %cmp6 = icmp eq i64 %18, %20, !dbg !7187
  br i1 %cmp6, label %if.then7, label %if.end237, !dbg !7188

if.then7:                                         ; preds = %if.end
  %21 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7189
  %type = getelementptr inbounds %struct.access, %struct.access* %21, i32 0, i32 4, !dbg !7192
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7192
  %23 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7193
  %type8 = getelementptr inbounds %struct.access, %struct.access* %23, i32 0, i32 4, !dbg !7194
  %24 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !7194
  %cmp9 = icmp eq %union.tree_node* %22, %24, !dbg !7195
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !7196

if.then10:                                        ; preds = %if.then7
  store i32 0, i32* %retval, align 4, !dbg !7197
  br label %return, !dbg !7197

if.else:                                          ; preds = %if.then7
  %25 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7198
  %type11 = getelementptr inbounds %struct.access, %struct.access* %25, i32 0, i32 4, !dbg !7200
  %26 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !7200
  %call = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %26), !dbg !7201
  %tobool = icmp ne i8 %call, 0, !dbg !7201
  br i1 %tobool, label %if.else16, label %land.lhs.true, !dbg !7202

land.lhs.true:                                    ; preds = %if.else
  %27 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7203
  %type12 = getelementptr inbounds %struct.access, %struct.access* %27, i32 0, i32 4, !dbg !7204
  %28 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7204
  %call13 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %28), !dbg !7205
  %conv = zext i8 %call13 to i32, !dbg !7205
  %tobool14 = icmp ne i32 %conv, 0, !dbg !7205
  br i1 %tobool14, label %if.then15, label %if.else16, !dbg !7206

if.then15:                                        ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !7207
  br label %return, !dbg !7207

if.else16:                                        ; preds = %land.lhs.true, %if.else
  %29 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7208
  %type17 = getelementptr inbounds %struct.access, %struct.access* %29, i32 0, i32 4, !dbg !7210
  %30 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !7210
  %call18 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %30), !dbg !7211
  %conv19 = zext i8 %call18 to i32, !dbg !7211
  %tobool20 = icmp ne i32 %conv19, 0, !dbg !7211
  br i1 %tobool20, label %land.lhs.true21, label %if.else26, !dbg !7212

land.lhs.true21:                                  ; preds = %if.else16
  %31 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7213
  %type22 = getelementptr inbounds %struct.access, %struct.access* %31, i32 0, i32 4, !dbg !7214
  %32 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !7214
  %call23 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %32), !dbg !7215
  %tobool24 = icmp ne i8 %call23, 0, !dbg !7215
  br i1 %tobool24, label %if.else26, label %if.then25, !dbg !7216

if.then25:                                        ; preds = %land.lhs.true21
  store i32 -1, i32* %retval, align 4, !dbg !7217
  br label %return, !dbg !7217

if.else26:                                        ; preds = %land.lhs.true21, %if.else16
  %33 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7218
  %type27 = getelementptr inbounds %struct.access, %struct.access* %33, i32 0, i32 4, !dbg !7218
  %34 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !7218
  %base = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !7218
  %35 = bitcast %struct.tree_base* %base to i64*, !dbg !7218
  %bf.load = load i64, i64* %35, align 8, !dbg !7218
  %bf.clear = and i64 %bf.load, 65535, !dbg !7218
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7218
  %cmp28 = icmp ne i32 %bf.cast, 13, !dbg !7220
  br i1 %cmp28, label %land.lhs.true30, label %if.else54, !dbg !7221

land.lhs.true30:                                  ; preds = %if.else26
  %36 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7222
  %type31 = getelementptr inbounds %struct.access, %struct.access* %36, i32 0, i32 4, !dbg !7222
  %37 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !7222
  %base32 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !7222
  %38 = bitcast %struct.tree_base* %base32 to i64*, !dbg !7222
  %bf.load33 = load i64, i64* %38, align 8, !dbg !7222
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !7222
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !7222
  %cmp36 = icmp ne i32 %bf.cast35, 14, !dbg !7223
  br i1 %cmp36, label %land.lhs.true38, label %if.else54, !dbg !7224

land.lhs.true38:                                  ; preds = %land.lhs.true30
  %39 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7225
  %type39 = getelementptr inbounds %struct.access, %struct.access* %39, i32 0, i32 4, !dbg !7225
  %40 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !7225
  %base40 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !7225
  %41 = bitcast %struct.tree_base* %base40 to i64*, !dbg !7225
  %bf.load41 = load i64, i64* %41, align 8, !dbg !7225
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !7225
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !7225
  %cmp44 = icmp eq i32 %bf.cast43, 13, !dbg !7226
  br i1 %cmp44, label %if.then53, label %lor.lhs.false, !dbg !7227

lor.lhs.false:                                    ; preds = %land.lhs.true38
  %42 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7228
  %type46 = getelementptr inbounds %struct.access, %struct.access* %42, i32 0, i32 4, !dbg !7228
  %43 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !7228
  %base47 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !7228
  %44 = bitcast %struct.tree_base* %base47 to i64*, !dbg !7228
  %bf.load48 = load i64, i64* %44, align 8, !dbg !7228
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !7228
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !7228
  %cmp51 = icmp eq i32 %bf.cast50, 14, !dbg !7229
  br i1 %cmp51, label %if.then53, label %if.else54, !dbg !7230

if.then53:                                        ; preds = %lor.lhs.false, %land.lhs.true38
  store i32 1, i32* %retval, align 4, !dbg !7231
  br label %return, !dbg !7231

if.else54:                                        ; preds = %lor.lhs.false, %land.lhs.true30, %if.else26
  %45 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7232
  %type55 = getelementptr inbounds %struct.access, %struct.access* %45, i32 0, i32 4, !dbg !7232
  %46 = load %union.tree_node*, %union.tree_node** %type55, align 8, !dbg !7232
  %base56 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !7232
  %47 = bitcast %struct.tree_base* %base56 to i64*, !dbg !7232
  %bf.load57 = load i64, i64* %47, align 8, !dbg !7232
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !7232
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !7232
  %cmp60 = icmp eq i32 %bf.cast59, 13, !dbg !7234
  br i1 %cmp60, label %land.lhs.true70, label %lor.lhs.false62, !dbg !7235

lor.lhs.false62:                                  ; preds = %if.else54
  %48 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7236
  %type63 = getelementptr inbounds %struct.access, %struct.access* %48, i32 0, i32 4, !dbg !7236
  %49 = load %union.tree_node*, %union.tree_node** %type63, align 8, !dbg !7236
  %base64 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !7236
  %50 = bitcast %struct.tree_base* %base64 to i64*, !dbg !7236
  %bf.load65 = load i64, i64* %50, align 8, !dbg !7236
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !7236
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !7236
  %cmp68 = icmp eq i32 %bf.cast67, 14, !dbg !7237
  br i1 %cmp68, label %land.lhs.true70, label %if.else87, !dbg !7238

land.lhs.true70:                                  ; preds = %lor.lhs.false62, %if.else54
  %51 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7239
  %type71 = getelementptr inbounds %struct.access, %struct.access* %51, i32 0, i32 4, !dbg !7239
  %52 = load %union.tree_node*, %union.tree_node** %type71, align 8, !dbg !7239
  %base72 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !7239
  %53 = bitcast %struct.tree_base* %base72 to i64*, !dbg !7239
  %bf.load73 = load i64, i64* %53, align 8, !dbg !7239
  %bf.clear74 = and i64 %bf.load73, 65535, !dbg !7239
  %bf.cast75 = trunc i64 %bf.clear74 to i32, !dbg !7239
  %cmp76 = icmp ne i32 %bf.cast75, 13, !dbg !7240
  br i1 %cmp76, label %land.lhs.true78, label %if.else87, !dbg !7241

land.lhs.true78:                                  ; preds = %land.lhs.true70
  %54 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7242
  %type79 = getelementptr inbounds %struct.access, %struct.access* %54, i32 0, i32 4, !dbg !7242
  %55 = load %union.tree_node*, %union.tree_node** %type79, align 8, !dbg !7242
  %base80 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !7242
  %56 = bitcast %struct.tree_base* %base80 to i64*, !dbg !7242
  %bf.load81 = load i64, i64* %56, align 8, !dbg !7242
  %bf.clear82 = and i64 %bf.load81, 65535, !dbg !7242
  %bf.cast83 = trunc i64 %bf.clear82 to i32, !dbg !7242
  %cmp84 = icmp ne i32 %bf.cast83, 14, !dbg !7243
  br i1 %cmp84, label %if.then86, label %if.else87, !dbg !7244

if.then86:                                        ; preds = %land.lhs.true78
  store i32 -1, i32* %retval, align 4, !dbg !7245
  br label %return, !dbg !7245

if.else87:                                        ; preds = %land.lhs.true78, %land.lhs.true70, %lor.lhs.false62
  %57 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7246
  %type88 = getelementptr inbounds %struct.access, %struct.access* %57, i32 0, i32 4, !dbg !7246
  %58 = load %union.tree_node*, %union.tree_node** %type88, align 8, !dbg !7246
  %base89 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !7246
  %59 = bitcast %struct.tree_base* %base89 to i64*, !dbg !7246
  %bf.load90 = load i64, i64* %59, align 8, !dbg !7246
  %bf.clear91 = and i64 %bf.load90, 65535, !dbg !7246
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !7246
  %cmp93 = icmp eq i32 %bf.cast92, 6, !dbg !7246
  br i1 %cmp93, label %land.lhs.true111, label %lor.lhs.false95, !dbg !7246

lor.lhs.false95:                                  ; preds = %if.else87
  %60 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7246
  %type96 = getelementptr inbounds %struct.access, %struct.access* %60, i32 0, i32 4, !dbg !7246
  %61 = load %union.tree_node*, %union.tree_node** %type96, align 8, !dbg !7246
  %base97 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !7246
  %62 = bitcast %struct.tree_base* %base97 to i64*, !dbg !7246
  %bf.load98 = load i64, i64* %62, align 8, !dbg !7246
  %bf.clear99 = and i64 %bf.load98, 65535, !dbg !7246
  %bf.cast100 = trunc i64 %bf.clear99 to i32, !dbg !7246
  %cmp101 = icmp eq i32 %bf.cast100, 7, !dbg !7246
  br i1 %cmp101, label %land.lhs.true111, label %lor.lhs.false103, !dbg !7246

lor.lhs.false103:                                 ; preds = %lor.lhs.false95
  %63 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7246
  %type104 = getelementptr inbounds %struct.access, %struct.access* %63, i32 0, i32 4, !dbg !7246
  %64 = load %union.tree_node*, %union.tree_node** %type104, align 8, !dbg !7246
  %base105 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !7246
  %65 = bitcast %struct.tree_base* %base105 to i64*, !dbg !7246
  %bf.load106 = load i64, i64* %65, align 8, !dbg !7246
  %bf.clear107 = and i64 %bf.load106, 65535, !dbg !7246
  %bf.cast108 = trunc i64 %bf.clear107 to i32, !dbg !7246
  %cmp109 = icmp eq i32 %bf.cast108, 8, !dbg !7246
  br i1 %cmp109, label %land.lhs.true111, label %if.else145, !dbg !7248

land.lhs.true111:                                 ; preds = %lor.lhs.false103, %lor.lhs.false95, %if.else87
  %66 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7249
  %type112 = getelementptr inbounds %struct.access, %struct.access* %66, i32 0, i32 4, !dbg !7249
  %67 = load %union.tree_node*, %union.tree_node** %type112, align 8, !dbg !7249
  %base113 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !7249
  %68 = bitcast %struct.tree_base* %base113 to i64*, !dbg !7249
  %bf.load114 = load i64, i64* %68, align 8, !dbg !7249
  %bf.clear115 = and i64 %bf.load114, 65535, !dbg !7249
  %bf.cast116 = trunc i64 %bf.clear115 to i32, !dbg !7249
  %cmp117 = icmp eq i32 %bf.cast116, 6, !dbg !7249
  br i1 %cmp117, label %if.then135, label %lor.lhs.false119, !dbg !7249

lor.lhs.false119:                                 ; preds = %land.lhs.true111
  %69 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7249
  %type120 = getelementptr inbounds %struct.access, %struct.access* %69, i32 0, i32 4, !dbg !7249
  %70 = load %union.tree_node*, %union.tree_node** %type120, align 8, !dbg !7249
  %base121 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !7249
  %71 = bitcast %struct.tree_base* %base121 to i64*, !dbg !7249
  %bf.load122 = load i64, i64* %71, align 8, !dbg !7249
  %bf.clear123 = and i64 %bf.load122, 65535, !dbg !7249
  %bf.cast124 = trunc i64 %bf.clear123 to i32, !dbg !7249
  %cmp125 = icmp eq i32 %bf.cast124, 7, !dbg !7249
  br i1 %cmp125, label %if.then135, label %lor.lhs.false127, !dbg !7249

lor.lhs.false127:                                 ; preds = %lor.lhs.false119
  %72 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7249
  %type128 = getelementptr inbounds %struct.access, %struct.access* %72, i32 0, i32 4, !dbg !7249
  %73 = load %union.tree_node*, %union.tree_node** %type128, align 8, !dbg !7249
  %base129 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !7249
  %74 = bitcast %struct.tree_base* %base129 to i64*, !dbg !7249
  %bf.load130 = load i64, i64* %74, align 8, !dbg !7249
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !7249
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !7249
  %cmp133 = icmp eq i32 %bf.cast132, 8, !dbg !7249
  br i1 %cmp133, label %if.then135, label %if.else145, !dbg !7250

if.then135:                                       ; preds = %lor.lhs.false127, %lor.lhs.false119, %land.lhs.true111
  %75 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7251
  %type136 = getelementptr inbounds %struct.access, %struct.access* %75, i32 0, i32 4, !dbg !7251
  %76 = load %union.tree_node*, %union.tree_node** %type136, align 8, !dbg !7251
  %type137 = bitcast %union.tree_node* %76 to %struct.tree_type*, !dbg !7251
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type137, i32 0, i32 6, !dbg !7251
  %bf.load138 = load i32, i32* %precision, align 4, !dbg !7251
  %bf.clear139 = and i32 %bf.load138, 1023, !dbg !7251
  %77 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7252
  %type140 = getelementptr inbounds %struct.access, %struct.access* %77, i32 0, i32 4, !dbg !7252
  %78 = load %union.tree_node*, %union.tree_node** %type140, align 8, !dbg !7252
  %type141 = bitcast %union.tree_node* %78 to %struct.tree_type*, !dbg !7252
  %precision142 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type141, i32 0, i32 6, !dbg !7252
  %bf.load143 = load i32, i32* %precision142, align 4, !dbg !7252
  %bf.clear144 = and i32 %bf.load143, 1023, !dbg !7252
  %sub = sub nsw i32 %bf.clear139, %bf.clear144, !dbg !7253
  store i32 %sub, i32* %retval, align 4, !dbg !7254
  br label %return, !dbg !7254

if.else145:                                       ; preds = %lor.lhs.false127, %lor.lhs.false103
  %79 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7255
  %type146 = getelementptr inbounds %struct.access, %struct.access* %79, i32 0, i32 4, !dbg !7255
  %80 = load %union.tree_node*, %union.tree_node** %type146, align 8, !dbg !7255
  %base147 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !7255
  %81 = bitcast %struct.tree_base* %base147 to i64*, !dbg !7255
  %bf.load148 = load i64, i64* %81, align 8, !dbg !7255
  %bf.clear149 = and i64 %bf.load148, 65535, !dbg !7255
  %bf.cast150 = trunc i64 %bf.clear149 to i32, !dbg !7255
  %cmp151 = icmp eq i32 %bf.cast150, 6, !dbg !7255
  br i1 %cmp151, label %land.lhs.true169, label %lor.lhs.false153, !dbg !7255

lor.lhs.false153:                                 ; preds = %if.else145
  %82 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7255
  %type154 = getelementptr inbounds %struct.access, %struct.access* %82, i32 0, i32 4, !dbg !7255
  %83 = load %union.tree_node*, %union.tree_node** %type154, align 8, !dbg !7255
  %base155 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !7255
  %84 = bitcast %struct.tree_base* %base155 to i64*, !dbg !7255
  %bf.load156 = load i64, i64* %84, align 8, !dbg !7255
  %bf.clear157 = and i64 %bf.load156, 65535, !dbg !7255
  %bf.cast158 = trunc i64 %bf.clear157 to i32, !dbg !7255
  %cmp159 = icmp eq i32 %bf.cast158, 7, !dbg !7255
  br i1 %cmp159, label %land.lhs.true169, label %lor.lhs.false161, !dbg !7255

lor.lhs.false161:                                 ; preds = %lor.lhs.false153
  %85 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7255
  %type162 = getelementptr inbounds %struct.access, %struct.access* %85, i32 0, i32 4, !dbg !7255
  %86 = load %union.tree_node*, %union.tree_node** %type162, align 8, !dbg !7255
  %base163 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !7255
  %87 = bitcast %struct.tree_base* %base163 to i64*, !dbg !7255
  %bf.load164 = load i64, i64* %87, align 8, !dbg !7255
  %bf.clear165 = and i64 %bf.load164, 65535, !dbg !7255
  %bf.cast166 = trunc i64 %bf.clear165 to i32, !dbg !7255
  %cmp167 = icmp eq i32 %bf.cast166, 8, !dbg !7255
  br i1 %cmp167, label %land.lhs.true169, label %if.else183, !dbg !7257

land.lhs.true169:                                 ; preds = %lor.lhs.false161, %lor.lhs.false153, %if.else145
  %88 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7258
  %type170 = getelementptr inbounds %struct.access, %struct.access* %88, i32 0, i32 4, !dbg !7258
  %89 = load %union.tree_node*, %union.tree_node** %type170, align 8, !dbg !7258
  %type171 = bitcast %union.tree_node* %89 to %struct.tree_type*, !dbg !7258
  %size172 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type171, i32 0, i32 2, !dbg !7258
  %90 = load %union.tree_node*, %union.tree_node** %size172, align 8, !dbg !7258
  %int_cst = bitcast %union.tree_node* %90 to %struct.tree_int_cst*, !dbg !7258
  %int_cst173 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7258
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst173, i32 0, i32 0, !dbg !7258
  %91 = load i64, i64* %low, align 8, !dbg !7258
  %92 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7259
  %type174 = getelementptr inbounds %struct.access, %struct.access* %92, i32 0, i32 4, !dbg !7259
  %93 = load %union.tree_node*, %union.tree_node** %type174, align 8, !dbg !7259
  %type175 = bitcast %union.tree_node* %93 to %struct.tree_type*, !dbg !7259
  %precision176 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type175, i32 0, i32 6, !dbg !7259
  %bf.load177 = load i32, i32* %precision176, align 4, !dbg !7259
  %bf.clear178 = and i32 %bf.load177, 1023, !dbg !7259
  %conv179 = zext i32 %bf.clear178 to i64, !dbg !7259
  %cmp180 = icmp ne i64 %91, %conv179, !dbg !7260
  br i1 %cmp180, label %if.then182, label %if.else183, !dbg !7261

if.then182:                                       ; preds = %land.lhs.true169
  store i32 1, i32* %retval, align 4, !dbg !7262
  br label %return, !dbg !7262

if.else183:                                       ; preds = %land.lhs.true169, %lor.lhs.false161
  %94 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7263
  %type184 = getelementptr inbounds %struct.access, %struct.access* %94, i32 0, i32 4, !dbg !7263
  %95 = load %union.tree_node*, %union.tree_node** %type184, align 8, !dbg !7263
  %base185 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !7263
  %96 = bitcast %struct.tree_base* %base185 to i64*, !dbg !7263
  %bf.load186 = load i64, i64* %96, align 8, !dbg !7263
  %bf.clear187 = and i64 %bf.load186, 65535, !dbg !7263
  %bf.cast188 = trunc i64 %bf.clear187 to i32, !dbg !7263
  %cmp189 = icmp eq i32 %bf.cast188, 6, !dbg !7263
  br i1 %cmp189, label %land.lhs.true207, label %lor.lhs.false191, !dbg !7263

lor.lhs.false191:                                 ; preds = %if.else183
  %97 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7263
  %type192 = getelementptr inbounds %struct.access, %struct.access* %97, i32 0, i32 4, !dbg !7263
  %98 = load %union.tree_node*, %union.tree_node** %type192, align 8, !dbg !7263
  %base193 = bitcast %union.tree_node* %98 to %struct.tree_base*, !dbg !7263
  %99 = bitcast %struct.tree_base* %base193 to i64*, !dbg !7263
  %bf.load194 = load i64, i64* %99, align 8, !dbg !7263
  %bf.clear195 = and i64 %bf.load194, 65535, !dbg !7263
  %bf.cast196 = trunc i64 %bf.clear195 to i32, !dbg !7263
  %cmp197 = icmp eq i32 %bf.cast196, 7, !dbg !7263
  br i1 %cmp197, label %land.lhs.true207, label %lor.lhs.false199, !dbg !7263

lor.lhs.false199:                                 ; preds = %lor.lhs.false191
  %100 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7263
  %type200 = getelementptr inbounds %struct.access, %struct.access* %100, i32 0, i32 4, !dbg !7263
  %101 = load %union.tree_node*, %union.tree_node** %type200, align 8, !dbg !7263
  %base201 = bitcast %union.tree_node* %101 to %struct.tree_base*, !dbg !7263
  %102 = bitcast %struct.tree_base* %base201 to i64*, !dbg !7263
  %bf.load202 = load i64, i64* %102, align 8, !dbg !7263
  %bf.clear203 = and i64 %bf.load202, 65535, !dbg !7263
  %bf.cast204 = trunc i64 %bf.clear203 to i32, !dbg !7263
  %cmp205 = icmp eq i32 %bf.cast204, 8, !dbg !7263
  br i1 %cmp205, label %land.lhs.true207, label %if.end223, !dbg !7265

land.lhs.true207:                                 ; preds = %lor.lhs.false199, %lor.lhs.false191, %if.else183
  %103 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7266
  %type208 = getelementptr inbounds %struct.access, %struct.access* %103, i32 0, i32 4, !dbg !7266
  %104 = load %union.tree_node*, %union.tree_node** %type208, align 8, !dbg !7266
  %type209 = bitcast %union.tree_node* %104 to %struct.tree_type*, !dbg !7266
  %size210 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type209, i32 0, i32 2, !dbg !7266
  %105 = load %union.tree_node*, %union.tree_node** %size210, align 8, !dbg !7266
  %int_cst211 = bitcast %union.tree_node* %105 to %struct.tree_int_cst*, !dbg !7266
  %int_cst212 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst211, i32 0, i32 1, !dbg !7266
  %low213 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst212, i32 0, i32 0, !dbg !7266
  %106 = load i64, i64* %low213, align 8, !dbg !7266
  %107 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7267
  %type214 = getelementptr inbounds %struct.access, %struct.access* %107, i32 0, i32 4, !dbg !7267
  %108 = load %union.tree_node*, %union.tree_node** %type214, align 8, !dbg !7267
  %type215 = bitcast %union.tree_node* %108 to %struct.tree_type*, !dbg !7267
  %precision216 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type215, i32 0, i32 6, !dbg !7267
  %bf.load217 = load i32, i32* %precision216, align 4, !dbg !7267
  %bf.clear218 = and i32 %bf.load217, 1023, !dbg !7267
  %conv219 = zext i32 %bf.clear218 to i64, !dbg !7267
  %cmp220 = icmp ne i64 %106, %conv219, !dbg !7268
  br i1 %cmp220, label %if.then222, label %if.end223, !dbg !7269

if.then222:                                       ; preds = %land.lhs.true207
  store i32 -1, i32* %retval, align 4, !dbg !7270
  br label %return, !dbg !7270

if.end223:                                        ; preds = %land.lhs.true207, %lor.lhs.false199
  br label %if.end224

if.end224:                                        ; preds = %if.end223
  br label %if.end225

if.end225:                                        ; preds = %if.end224
  br label %if.end226

if.end226:                                        ; preds = %if.end225
  br label %if.end227

if.end227:                                        ; preds = %if.end226
  br label %if.end228

if.end228:                                        ; preds = %if.end227
  br label %if.end229

if.end229:                                        ; preds = %if.end228
  br label %if.end230

if.end230:                                        ; preds = %if.end229
  %109 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7271
  %type231 = getelementptr inbounds %struct.access, %struct.access* %109, i32 0, i32 4, !dbg !7271
  %110 = load %union.tree_node*, %union.tree_node** %type231, align 8, !dbg !7271
  %type232 = bitcast %union.tree_node* %110 to %struct.tree_type*, !dbg !7271
  %uid = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type232, i32 0, i32 5, !dbg !7271
  %111 = load i32, i32* %uid, align 8, !dbg !7271
  %112 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7272
  %type233 = getelementptr inbounds %struct.access, %struct.access* %112, i32 0, i32 4, !dbg !7272
  %113 = load %union.tree_node*, %union.tree_node** %type233, align 8, !dbg !7272
  %type234 = bitcast %union.tree_node* %113 to %struct.tree_type*, !dbg !7272
  %uid235 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type234, i32 0, i32 5, !dbg !7272
  %114 = load i32, i32* %uid235, align 8, !dbg !7272
  %sub236 = sub i32 %111, %114, !dbg !7273
  store i32 %sub236, i32* %retval, align 4, !dbg !7274
  br label %return, !dbg !7274

if.end237:                                        ; preds = %if.end
  %115 = load %struct.access*, %struct.access** %f1, align 8, !dbg !7275
  %size238 = getelementptr inbounds %struct.access, %struct.access* %115, i32 0, i32 1, !dbg !7276
  %116 = load i64, i64* %size238, align 8, !dbg !7276
  %117 = load %struct.access*, %struct.access** %f2, align 8, !dbg !7277
  %size239 = getelementptr inbounds %struct.access, %struct.access* %117, i32 0, i32 1, !dbg !7278
  %118 = load i64, i64* %size239, align 8, !dbg !7278
  %cmp240 = icmp sgt i64 %116, %118, !dbg !7279
  %119 = zext i1 %cmp240 to i64, !dbg !7275
  %cond242 = select i1 %cmp240, i32 -1, i32 1, !dbg !7275
  store i32 %cond242, i32* %retval, align 4, !dbg !7280
  br label %return, !dbg !7280

return:                                           ; preds = %if.end237, %if.end230, %if.then222, %if.then182, %if.then135, %if.then86, %if.then53, %if.then25, %if.then15, %if.then10, %if.then
  %120 = load i32, i32* %retval, align 4, !dbg !7281
  ret i32 %120, !dbg !7281
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %vec_, i32 %ix_) #0 !dbg !7282 {
entry:
  %vec_.addr = alloca %struct.VEC_access_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_access_p_base* %vec_, %struct.VEC_access_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_base** %vec_.addr, metadata !7285, metadata !DIExpression()), !dbg !7286
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7287, metadata !DIExpression()), !dbg !7286
  %0 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !7286
  %tobool = icmp ne %struct.VEC_access_p_base* %0, null, !dbg !7286
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7286

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7286
  %2 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !7286
  %num = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %2, i32 0, i32 0, !dbg !7286
  %3 = load i32, i32* %num, align 8, !dbg !7286
  %cmp = icmp ult i32 %1, %3, !dbg !7286
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7288
  %land.ext = zext i1 %4 to i32, !dbg !7286
  %5 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !7286
  %vec = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %5, i32 0, i32 2, !dbg !7286
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7286
  %idxprom = zext i32 %6 to i64, !dbg !7286
  %arrayidx = getelementptr inbounds [1 x %struct.access*], [1 x %struct.access*]* %vec, i64 0, i64 %idxprom, !dbg !7286
  %7 = load %struct.access*, %struct.access** %arrayidx, align 8, !dbg !7286
  ret %struct.access* %7, !dbg !7286
}

; Function Attrs: noinline nounwind uwtable
define internal void @relink_to_new_repr(%struct.access* %new_racc, %struct.access* %old_racc) #0 !dbg !7289 {
entry:
  %new_racc.addr = alloca %struct.access*, align 8
  %old_racc.addr = alloca %struct.access*, align 8
  store %struct.access* %new_racc, %struct.access** %new_racc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %new_racc.addr, metadata !7292, metadata !DIExpression()), !dbg !7293
  store %struct.access* %old_racc, %struct.access** %old_racc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %old_racc.addr, metadata !7294, metadata !DIExpression()), !dbg !7295
  %0 = load %struct.access*, %struct.access** %old_racc.addr, align 8, !dbg !7296
  %first_link = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 10, !dbg !7298
  %1 = load %struct.assign_link*, %struct.assign_link** %first_link, align 8, !dbg !7298
  %tobool = icmp ne %struct.assign_link* %1, null, !dbg !7296
  br i1 %tobool, label %if.end, label %if.then, !dbg !7299

if.then:                                          ; preds = %entry
  %2 = load %struct.access*, %struct.access** %old_racc.addr, align 8, !dbg !7300
  %last_link = getelementptr inbounds %struct.access, %struct.access* %2, i32 0, i32 11, !dbg !7300
  %3 = load %struct.assign_link*, %struct.assign_link** %last_link, align 8, !dbg !7300
  %tobool1 = icmp ne %struct.assign_link* %3, null, !dbg !7300
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7300

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 506, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7300
  br label %cond.end, !dbg !7300

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !7300

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7300
  br label %return, !dbg !7302

if.end:                                           ; preds = %entry
  %4 = load %struct.access*, %struct.access** %new_racc.addr, align 8, !dbg !7303
  %first_link2 = getelementptr inbounds %struct.access, %struct.access* %4, i32 0, i32 10, !dbg !7305
  %5 = load %struct.assign_link*, %struct.assign_link** %first_link2, align 8, !dbg !7305
  %tobool3 = icmp ne %struct.assign_link* %5, null, !dbg !7303
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !7306

if.then4:                                         ; preds = %if.end
  %6 = load %struct.access*, %struct.access** %new_racc.addr, align 8, !dbg !7307
  %last_link5 = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 11, !dbg !7307
  %7 = load %struct.assign_link*, %struct.assign_link** %last_link5, align 8, !dbg !7307
  %next = getelementptr inbounds %struct.assign_link, %struct.assign_link* %7, i32 0, i32 2, !dbg !7307
  %8 = load %struct.assign_link*, %struct.assign_link** %next, align 8, !dbg !7307
  %tobool6 = icmp ne %struct.assign_link* %8, null, !dbg !7307
  br i1 %tobool6, label %cond.true7, label %cond.false8, !dbg !7307

cond.true7:                                       ; preds = %if.then4
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 512, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7307
  br label %cond.end9, !dbg !7307

cond.false8:                                      ; preds = %if.then4
  br label %cond.end9, !dbg !7307

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ 0, %cond.true7 ], [ 0, %cond.false8 ], !dbg !7307
  %9 = load %struct.access*, %struct.access** %old_racc.addr, align 8, !dbg !7309
  %last_link11 = getelementptr inbounds %struct.access, %struct.access* %9, i32 0, i32 11, !dbg !7309
  %10 = load %struct.assign_link*, %struct.assign_link** %last_link11, align 8, !dbg !7309
  %tobool12 = icmp ne %struct.assign_link* %10, null, !dbg !7309
  br i1 %tobool12, label %lor.lhs.false, label %cond.false17, !dbg !7309

lor.lhs.false:                                    ; preds = %cond.end9
  %11 = load %struct.access*, %struct.access** %old_racc.addr, align 8, !dbg !7309
  %last_link13 = getelementptr inbounds %struct.access, %struct.access* %11, i32 0, i32 11, !dbg !7309
  %12 = load %struct.assign_link*, %struct.assign_link** %last_link13, align 8, !dbg !7309
  %next14 = getelementptr inbounds %struct.assign_link, %struct.assign_link* %12, i32 0, i32 2, !dbg !7309
  %13 = load %struct.assign_link*, %struct.assign_link** %next14, align 8, !dbg !7309
  %tobool15 = icmp ne %struct.assign_link* %13, null, !dbg !7309
  br i1 %tobool15, label %cond.true16, label %cond.false17, !dbg !7309

cond.true16:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 513, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7309
  br label %cond.end18, !dbg !7309

cond.false17:                                     ; preds = %lor.lhs.false, %cond.end9
  br label %cond.end18, !dbg !7309

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !7309
  %14 = load %struct.access*, %struct.access** %old_racc.addr, align 8, !dbg !7310
  %first_link20 = getelementptr inbounds %struct.access, %struct.access* %14, i32 0, i32 10, !dbg !7311
  %15 = load %struct.assign_link*, %struct.assign_link** %first_link20, align 8, !dbg !7311
  %16 = load %struct.access*, %struct.access** %new_racc.addr, align 8, !dbg !7312
  %last_link21 = getelementptr inbounds %struct.access, %struct.access* %16, i32 0, i32 11, !dbg !7313
  %17 = load %struct.assign_link*, %struct.assign_link** %last_link21, align 8, !dbg !7313
  %next22 = getelementptr inbounds %struct.assign_link, %struct.assign_link* %17, i32 0, i32 2, !dbg !7314
  store %struct.assign_link* %15, %struct.assign_link** %next22, align 8, !dbg !7315
  %18 = load %struct.access*, %struct.access** %old_racc.addr, align 8, !dbg !7316
  %last_link23 = getelementptr inbounds %struct.access, %struct.access* %18, i32 0, i32 11, !dbg !7317
  %19 = load %struct.assign_link*, %struct.assign_link** %last_link23, align 8, !dbg !7317
  %20 = load %struct.access*, %struct.access** %new_racc.addr, align 8, !dbg !7318
  %last_link24 = getelementptr inbounds %struct.access, %struct.access* %20, i32 0, i32 11, !dbg !7319
  store %struct.assign_link* %19, %struct.assign_link** %last_link24, align 8, !dbg !7320
  br label %if.end35, !dbg !7321

if.else:                                          ; preds = %if.end
  %21 = load %struct.access*, %struct.access** %new_racc.addr, align 8, !dbg !7322
  %last_link25 = getelementptr inbounds %struct.access, %struct.access* %21, i32 0, i32 11, !dbg !7322
  %22 = load %struct.assign_link*, %struct.assign_link** %last_link25, align 8, !dbg !7322
  %tobool26 = icmp ne %struct.assign_link* %22, null, !dbg !7322
  br i1 %tobool26, label %cond.true27, label %cond.false28, !dbg !7322

cond.true27:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 520, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7322
  br label %cond.end29, !dbg !7322

cond.false28:                                     ; preds = %if.else
  br label %cond.end29, !dbg !7322

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i32 [ 0, %cond.true27 ], [ 0, %cond.false28 ], !dbg !7322
  %23 = load %struct.access*, %struct.access** %old_racc.addr, align 8, !dbg !7324
  %first_link31 = getelementptr inbounds %struct.access, %struct.access* %23, i32 0, i32 10, !dbg !7325
  %24 = load %struct.assign_link*, %struct.assign_link** %first_link31, align 8, !dbg !7325
  %25 = load %struct.access*, %struct.access** %new_racc.addr, align 8, !dbg !7326
  %first_link32 = getelementptr inbounds %struct.access, %struct.access* %25, i32 0, i32 10, !dbg !7327
  store %struct.assign_link* %24, %struct.assign_link** %first_link32, align 8, !dbg !7328
  %26 = load %struct.access*, %struct.access** %old_racc.addr, align 8, !dbg !7329
  %last_link33 = getelementptr inbounds %struct.access, %struct.access* %26, i32 0, i32 11, !dbg !7330
  %27 = load %struct.assign_link*, %struct.assign_link** %last_link33, align 8, !dbg !7330
  %28 = load %struct.access*, %struct.access** %new_racc.addr, align 8, !dbg !7331
  %last_link34 = getelementptr inbounds %struct.access, %struct.access* %28, i32 0, i32 11, !dbg !7332
  store %struct.assign_link* %27, %struct.assign_link** %last_link34, align 8, !dbg !7333
  br label %if.end35

if.end35:                                         ; preds = %cond.end29, %cond.end18
  %29 = load %struct.access*, %struct.access** %old_racc.addr, align 8, !dbg !7334
  %last_link36 = getelementptr inbounds %struct.access, %struct.access* %29, i32 0, i32 11, !dbg !7335
  store %struct.assign_link* null, %struct.assign_link** %last_link36, align 8, !dbg !7336
  %30 = load %struct.access*, %struct.access** %old_racc.addr, align 8, !dbg !7337
  %first_link37 = getelementptr inbounds %struct.access, %struct.access* %30, i32 0, i32 10, !dbg !7338
  store %struct.assign_link* null, %struct.assign_link** %first_link37, align 8, !dbg !7339
  br label %return, !dbg !7340

return:                                           ; preds = %if.end35, %cond.end
  ret void, !dbg !7340
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_access_to_work_queue(%struct.access* %access) #0 !dbg !7341 {
entry:
  %access.addr = alloca %struct.access*, align 8
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !7342, metadata !DIExpression()), !dbg !7343
  %0 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !7344
  %grp_queued = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 14, !dbg !7346
  %bf.load = load i16, i16* %grp_queued, align 8, !dbg !7346
  %bf.lshr = lshr i16 %bf.load, 2, !dbg !7346
  %bf.clear = and i16 %bf.lshr, 1, !dbg !7346
  %bf.cast = zext i16 %bf.clear to i32, !dbg !7346
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7344
  br i1 %tobool, label %if.end, label %if.then, !dbg !7347

if.then:                                          ; preds = %entry
  %1 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !7348
  %next_queued = getelementptr inbounds %struct.access, %struct.access* %1, i32 0, i32 12, !dbg !7348
  %2 = load %struct.access*, %struct.access** %next_queued, align 8, !dbg !7348
  %tobool1 = icmp ne %struct.access* %2, null, !dbg !7348
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7348

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 535, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7348
  br label %cond.end, !dbg !7348

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !7348

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7348
  %3 = load %struct.access*, %struct.access** @work_queue_head, align 8, !dbg !7350
  %4 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !7351
  %next_queued2 = getelementptr inbounds %struct.access, %struct.access* %4, i32 0, i32 12, !dbg !7352
  store %struct.access* %3, %struct.access** %next_queued2, align 8, !dbg !7353
  %5 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !7354
  %grp_queued3 = getelementptr inbounds %struct.access, %struct.access* %5, i32 0, i32 14, !dbg !7355
  %bf.load4 = load i16, i16* %grp_queued3, align 8, !dbg !7356
  %bf.clear5 = and i16 %bf.load4, -5, !dbg !7356
  %bf.set = or i16 %bf.clear5, 4, !dbg !7356
  store i16 %bf.set, i16* %grp_queued3, align 8, !dbg !7356
  %6 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !7357
  store %struct.access* %6, %struct.access** @work_queue_head, align 8, !dbg !7358
  br label %if.end, !dbg !7359

if.end:                                           ; preds = %cond.end, %entry
  ret void, !dbg !7360
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_access_subtree(%struct.access** %access) #0 !dbg !7361 {
entry:
  %access.addr = alloca %struct.access**, align 8
  %root = alloca %struct.access*, align 8
  %last_child = alloca %struct.access*, align 8
  %limit = alloca i64, align 8
  store %struct.access** %access, %struct.access*** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access*** %access.addr, metadata !7364, metadata !DIExpression()), !dbg !7365
  call void @llvm.dbg.declare(metadata %struct.access** %root, metadata !7366, metadata !DIExpression()), !dbg !7367
  %0 = load %struct.access**, %struct.access*** %access.addr, align 8, !dbg !7368
  %1 = load %struct.access*, %struct.access** %0, align 8, !dbg !7369
  store %struct.access* %1, %struct.access** %root, align 8, !dbg !7367
  call void @llvm.dbg.declare(metadata %struct.access** %last_child, metadata !7370, metadata !DIExpression()), !dbg !7371
  store %struct.access* null, %struct.access** %last_child, align 8, !dbg !7371
  call void @llvm.dbg.declare(metadata i64* %limit, metadata !7372, metadata !DIExpression()), !dbg !7373
  %2 = load %struct.access*, %struct.access** %root, align 8, !dbg !7374
  %offset = getelementptr inbounds %struct.access, %struct.access* %2, i32 0, i32 0, !dbg !7375
  %3 = load i64, i64* %offset, align 8, !dbg !7375
  %4 = load %struct.access*, %struct.access** %root, align 8, !dbg !7376
  %size = getelementptr inbounds %struct.access, %struct.access* %4, i32 0, i32 1, !dbg !7377
  %5 = load i64, i64* %size, align 8, !dbg !7377
  %add = add nsw i64 %3, %5, !dbg !7378
  store i64 %add, i64* %limit, align 8, !dbg !7373
  %6 = load %struct.access**, %struct.access*** %access.addr, align 8, !dbg !7379
  %7 = load %struct.access*, %struct.access** %6, align 8, !dbg !7380
  %next_grp = getelementptr inbounds %struct.access, %struct.access* %7, i32 0, i32 6, !dbg !7381
  %8 = load %struct.access*, %struct.access** %next_grp, align 8, !dbg !7381
  %9 = load %struct.access**, %struct.access*** %access.addr, align 8, !dbg !7382
  store %struct.access* %8, %struct.access** %9, align 8, !dbg !7383
  br label %while.cond, !dbg !7384

while.cond:                                       ; preds = %if.end, %entry
  %10 = load %struct.access**, %struct.access*** %access.addr, align 8, !dbg !7385
  %11 = load %struct.access*, %struct.access** %10, align 8, !dbg !7386
  %tobool = icmp ne %struct.access* %11, null, !dbg !7386
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7387

land.rhs:                                         ; preds = %while.cond
  %12 = load %struct.access**, %struct.access*** %access.addr, align 8, !dbg !7388
  %13 = load %struct.access*, %struct.access** %12, align 8, !dbg !7389
  %offset1 = getelementptr inbounds %struct.access, %struct.access* %13, i32 0, i32 0, !dbg !7390
  %14 = load i64, i64* %offset1, align 8, !dbg !7390
  %15 = load %struct.access**, %struct.access*** %access.addr, align 8, !dbg !7391
  %16 = load %struct.access*, %struct.access** %15, align 8, !dbg !7392
  %size2 = getelementptr inbounds %struct.access, %struct.access* %16, i32 0, i32 1, !dbg !7393
  %17 = load i64, i64* %size2, align 8, !dbg !7393
  %add3 = add nsw i64 %14, %17, !dbg !7394
  %18 = load i64, i64* %limit, align 8, !dbg !7395
  %cmp = icmp sle i64 %add3, %18, !dbg !7396
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %19 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !7397
  br i1 %19, label %while.body, label %while.end, !dbg !7384

while.body:                                       ; preds = %land.end
  %20 = load %struct.access*, %struct.access** %last_child, align 8, !dbg !7398
  %tobool4 = icmp ne %struct.access* %20, null, !dbg !7398
  br i1 %tobool4, label %if.else, label %if.then, !dbg !7401

if.then:                                          ; preds = %while.body
  %21 = load %struct.access**, %struct.access*** %access.addr, align 8, !dbg !7402
  %22 = load %struct.access*, %struct.access** %21, align 8, !dbg !7403
  %23 = load %struct.access*, %struct.access** %root, align 8, !dbg !7404
  %first_child = getelementptr inbounds %struct.access, %struct.access* %23, i32 0, i32 8, !dbg !7405
  store %struct.access* %22, %struct.access** %first_child, align 8, !dbg !7406
  br label %if.end, !dbg !7404

if.else:                                          ; preds = %while.body
  %24 = load %struct.access**, %struct.access*** %access.addr, align 8, !dbg !7407
  %25 = load %struct.access*, %struct.access** %24, align 8, !dbg !7408
  %26 = load %struct.access*, %struct.access** %last_child, align 8, !dbg !7409
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %26, i32 0, i32 9, !dbg !7410
  store %struct.access* %25, %struct.access** %next_sibling, align 8, !dbg !7411
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %27 = load %struct.access**, %struct.access*** %access.addr, align 8, !dbg !7412
  %28 = load %struct.access*, %struct.access** %27, align 8, !dbg !7413
  store %struct.access* %28, %struct.access** %last_child, align 8, !dbg !7414
  %29 = load %struct.access**, %struct.access*** %access.addr, align 8, !dbg !7415
  call void @build_access_subtree(%struct.access** %29), !dbg !7416
  br label %while.cond, !dbg !7384, !llvm.loop !7417

while.end:                                        ; preds = %land.end
  ret void, !dbg !7419
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @pop_access_from_work_queue() #0 !dbg !7420 {
entry:
  %access = alloca %struct.access*, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !7423, metadata !DIExpression()), !dbg !7424
  %0 = load %struct.access*, %struct.access** @work_queue_head, align 8, !dbg !7425
  store %struct.access* %0, %struct.access** %access, align 8, !dbg !7424
  %1 = load %struct.access*, %struct.access** %access, align 8, !dbg !7426
  %next_queued = getelementptr inbounds %struct.access, %struct.access* %1, i32 0, i32 12, !dbg !7427
  %2 = load %struct.access*, %struct.access** %next_queued, align 8, !dbg !7427
  store %struct.access* %2, %struct.access** @work_queue_head, align 8, !dbg !7428
  %3 = load %struct.access*, %struct.access** %access, align 8, !dbg !7429
  %next_queued1 = getelementptr inbounds %struct.access, %struct.access* %3, i32 0, i32 12, !dbg !7430
  store %struct.access* null, %struct.access** %next_queued1, align 8, !dbg !7431
  %4 = load %struct.access*, %struct.access** %access, align 8, !dbg !7432
  %grp_queued = getelementptr inbounds %struct.access, %struct.access* %4, i32 0, i32 14, !dbg !7433
  %bf.load = load i16, i16* %grp_queued, align 8, !dbg !7434
  %bf.clear = and i16 %bf.load, -5, !dbg !7434
  store i16 %bf.clear, i16* %grp_queued, align 8, !dbg !7434
  %5 = load %struct.access*, %struct.access** %access, align 8, !dbg !7435
  ret %struct.access* %5, !dbg !7436
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @propagate_subaccesses_across_link(%struct.access* %lacc, %struct.access* %racc) #0 !dbg !7437 {
entry:
  %retval = alloca i8, align 1
  %lacc.addr = alloca %struct.access*, align 8
  %racc.addr = alloca %struct.access*, align 8
  %rchild = alloca %struct.access*, align 8
  %norm_delta = alloca i64, align 8
  %ret = alloca i8, align 1
  %t = alloca %union.tree_node*, align 8
  %new_acc = alloca %struct.access*, align 8
  %norm_offset = alloca i64, align 8
  store %struct.access* %lacc, %struct.access** %lacc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %lacc.addr, metadata !7440, metadata !DIExpression()), !dbg !7441
  store %struct.access* %racc, %struct.access** %racc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %racc.addr, metadata !7442, metadata !DIExpression()), !dbg !7443
  call void @llvm.dbg.declare(metadata %struct.access** %rchild, metadata !7444, metadata !DIExpression()), !dbg !7445
  call void @llvm.dbg.declare(metadata i64* %norm_delta, metadata !7446, metadata !DIExpression()), !dbg !7447
  %0 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !7448
  %offset = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 0, !dbg !7449
  %1 = load i64, i64* %offset, align 8, !dbg !7449
  %2 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !7450
  %offset1 = getelementptr inbounds %struct.access, %struct.access* %2, i32 0, i32 0, !dbg !7451
  %3 = load i64, i64* %offset1, align 8, !dbg !7451
  %sub = sub nsw i64 %1, %3, !dbg !7452
  store i64 %sub, i64* %norm_delta, align 8, !dbg !7447
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !7453, metadata !DIExpression()), !dbg !7454
  store i8 0, i8* %ret, align 1, !dbg !7454
  %4 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !7455
  %type = getelementptr inbounds %struct.access, %struct.access* %4, i32 0, i32 4, !dbg !7457
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7457
  %call = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %5), !dbg !7458
  %conv = zext i8 %call to i32, !dbg !7458
  %tobool = icmp ne i32 %conv, 0, !dbg !7458
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !7459

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !7460
  %grp_unscalarizable_region = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 14, !dbg !7461
  %bf.load = load i16, i16* %grp_unscalarizable_region, align 8, !dbg !7461
  %bf.lshr = lshr i16 %bf.load, 7, !dbg !7461
  %bf.clear = and i16 %bf.lshr, 1, !dbg !7461
  %bf.cast = zext i16 %bf.clear to i32, !dbg !7461
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !7460
  br i1 %tobool2, label %if.then, label %lor.lhs.false3, !dbg !7462

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %7 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !7463
  %grp_unscalarizable_region4 = getelementptr inbounds %struct.access, %struct.access* %7, i32 0, i32 14, !dbg !7464
  %bf.load5 = load i16, i16* %grp_unscalarizable_region4, align 8, !dbg !7464
  %bf.lshr6 = lshr i16 %bf.load5, 7, !dbg !7464
  %bf.clear7 = and i16 %bf.lshr6, 1, !dbg !7464
  %bf.cast8 = zext i16 %bf.clear7 to i32, !dbg !7464
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !7463
  br i1 %tobool9, label %if.then, label %if.end, !dbg !7465

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !7466
  br label %return, !dbg !7466

if.end:                                           ; preds = %lor.lhs.false3
  %8 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !7467
  %first_child = getelementptr inbounds %struct.access, %struct.access* %8, i32 0, i32 8, !dbg !7469
  %9 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !7469
  %tobool10 = icmp ne %struct.access* %9, null, !dbg !7467
  br i1 %tobool10, label %if.end28, label %land.lhs.true, !dbg !7470

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !7471
  %first_child11 = getelementptr inbounds %struct.access, %struct.access* %10, i32 0, i32 8, !dbg !7472
  %11 = load %struct.access*, %struct.access** %first_child11, align 8, !dbg !7472
  %tobool12 = icmp ne %struct.access* %11, null, !dbg !7471
  br i1 %tobool12, label %if.end28, label %land.lhs.true13, !dbg !7473

land.lhs.true13:                                  ; preds = %land.lhs.true
  %12 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !7474
  %type14 = getelementptr inbounds %struct.access, %struct.access* %12, i32 0, i32 4, !dbg !7475
  %13 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !7475
  %call15 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %13), !dbg !7476
  %conv16 = zext i8 %call15 to i32, !dbg !7476
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !7476
  br i1 %tobool17, label %if.then18, label %if.end28, !dbg !7477

if.then18:                                        ; preds = %land.lhs.true13
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7478, metadata !DIExpression()), !dbg !7480
  %14 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !7481
  %base = getelementptr inbounds %struct.access, %struct.access* %14, i32 0, i32 2, !dbg !7482
  %15 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7482
  store %union.tree_node* %15, %union.tree_node** %t, align 8, !dbg !7480
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7483
  %common = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !7483
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7483
  %17 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !7483
  %18 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !7485
  %offset20 = getelementptr inbounds %struct.access, %struct.access* %18, i32 0, i32 0, !dbg !7486
  %19 = load i64, i64* %offset20, align 8, !dbg !7486
  %20 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !7487
  %type21 = getelementptr inbounds %struct.access, %struct.access* %20, i32 0, i32 4, !dbg !7488
  %21 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !7488
  %call22 = call zeroext i8 @build_ref_for_offset(%union.tree_node** %t, %union.tree_node* %17, i64 %19, %union.tree_node* %21, i8 zeroext 0), !dbg !7489
  %tobool23 = icmp ne i8 %call22, 0, !dbg !7489
  br i1 %tobool23, label %if.then24, label %if.end27, !dbg !7490

if.then24:                                        ; preds = %if.then18
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7491
  %23 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !7493
  %expr = getelementptr inbounds %struct.access, %struct.access* %23, i32 0, i32 3, !dbg !7494
  store %union.tree_node* %22, %union.tree_node** %expr, align 8, !dbg !7495
  %24 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !7496
  %type25 = getelementptr inbounds %struct.access, %struct.access* %24, i32 0, i32 4, !dbg !7497
  %25 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !7497
  %26 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !7498
  %type26 = getelementptr inbounds %struct.access, %struct.access* %26, i32 0, i32 4, !dbg !7499
  store %union.tree_node* %25, %union.tree_node** %type26, align 8, !dbg !7500
  br label %if.end27, !dbg !7501

if.end27:                                         ; preds = %if.then24, %if.then18
  store i8 0, i8* %retval, align 1, !dbg !7502
  br label %return, !dbg !7502

if.end28:                                         ; preds = %land.lhs.true13, %land.lhs.true, %if.end
  %27 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !7503
  %first_child29 = getelementptr inbounds %struct.access, %struct.access* %27, i32 0, i32 8, !dbg !7505
  %28 = load %struct.access*, %struct.access** %first_child29, align 8, !dbg !7505
  store %struct.access* %28, %struct.access** %rchild, align 8, !dbg !7506
  br label %for.cond, !dbg !7507

for.cond:                                         ; preds = %for.inc, %if.end28
  %29 = load %struct.access*, %struct.access** %rchild, align 8, !dbg !7508
  %tobool30 = icmp ne %struct.access* %29, null, !dbg !7510
  br i1 %tobool30, label %for.body, label %for.end, !dbg !7510

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.access** %new_acc, metadata !7511, metadata !DIExpression()), !dbg !7513
  store %struct.access* null, %struct.access** %new_acc, align 8, !dbg !7513
  call void @llvm.dbg.declare(metadata i64* %norm_offset, metadata !7514, metadata !DIExpression()), !dbg !7515
  %30 = load %struct.access*, %struct.access** %rchild, align 8, !dbg !7516
  %offset31 = getelementptr inbounds %struct.access, %struct.access* %30, i32 0, i32 0, !dbg !7517
  %31 = load i64, i64* %offset31, align 8, !dbg !7517
  %32 = load i64, i64* %norm_delta, align 8, !dbg !7518
  %add = add nsw i64 %31, %32, !dbg !7519
  store i64 %add, i64* %norm_offset, align 8, !dbg !7515
  %33 = load %struct.access*, %struct.access** %rchild, align 8, !dbg !7520
  %grp_unscalarizable_region32 = getelementptr inbounds %struct.access, %struct.access* %33, i32 0, i32 14, !dbg !7522
  %bf.load33 = load i16, i16* %grp_unscalarizable_region32, align 8, !dbg !7522
  %bf.lshr34 = lshr i16 %bf.load33, 7, !dbg !7522
  %bf.clear35 = and i16 %bf.lshr34, 1, !dbg !7522
  %bf.cast36 = zext i16 %bf.clear35 to i32, !dbg !7522
  %tobool37 = icmp ne i32 %bf.cast36, 0, !dbg !7520
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !7523

if.then38:                                        ; preds = %for.body
  br label %for.inc, !dbg !7524

if.end39:                                         ; preds = %for.body
  %34 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !7525
  %35 = load i64, i64* %norm_offset, align 8, !dbg !7527
  %36 = load %struct.access*, %struct.access** %rchild, align 8, !dbg !7528
  %size = getelementptr inbounds %struct.access, %struct.access* %36, i32 0, i32 1, !dbg !7529
  %37 = load i64, i64* %size, align 8, !dbg !7529
  %call40 = call zeroext i8 @child_would_conflict_in_lacc(%struct.access* %34, i64 %35, i64 %37, %struct.access** %new_acc), !dbg !7530
  %tobool41 = icmp ne i8 %call40, 0, !dbg !7530
  br i1 %tobool41, label %if.then42, label %if.end69, !dbg !7531

if.then42:                                        ; preds = %if.end39
  %38 = load %struct.access*, %struct.access** %new_acc, align 8, !dbg !7532
  %tobool43 = icmp ne %struct.access* %38, null, !dbg !7532
  br i1 %tobool43, label %if.then44, label %if.end68, !dbg !7535

if.then44:                                        ; preds = %if.then42
  %39 = load %struct.access*, %struct.access** %rchild, align 8, !dbg !7536
  %grp_hint = getelementptr inbounds %struct.access, %struct.access* %39, i32 0, i32 14, !dbg !7538
  %bf.load45 = load i16, i16* %grp_hint, align 8, !dbg !7539
  %bf.clear46 = and i16 %bf.load45, -33, !dbg !7539
  %bf.set = or i16 %bf.clear46, 32, !dbg !7539
  store i16 %bf.set, i16* %grp_hint, align 8, !dbg !7539
  %40 = load %struct.access*, %struct.access** %new_acc, align 8, !dbg !7540
  %grp_read = getelementptr inbounds %struct.access, %struct.access* %40, i32 0, i32 14, !dbg !7541
  %bf.load47 = load i16, i16* %grp_read, align 8, !dbg !7541
  %bf.lshr48 = lshr i16 %bf.load47, 4, !dbg !7541
  %bf.clear49 = and i16 %bf.lshr48, 1, !dbg !7541
  %bf.cast50 = zext i16 %bf.clear49 to i32, !dbg !7541
  %41 = load %struct.access*, %struct.access** %new_acc, align 8, !dbg !7542
  %grp_hint51 = getelementptr inbounds %struct.access, %struct.access* %41, i32 0, i32 14, !dbg !7543
  %bf.load52 = load i16, i16* %grp_hint51, align 8, !dbg !7544
  %bf.lshr53 = lshr i16 %bf.load52, 5, !dbg !7544
  %bf.clear54 = and i16 %bf.lshr53, 1, !dbg !7544
  %bf.cast55 = zext i16 %bf.clear54 to i32, !dbg !7544
  %or = or i32 %bf.cast55, %bf.cast50, !dbg !7544
  %42 = trunc i32 %or to i16, !dbg !7544
  %bf.load56 = load i16, i16* %grp_hint51, align 8, !dbg !7544
  %bf.value = and i16 %42, 1, !dbg !7544
  %bf.shl = shl i16 %bf.value, 5, !dbg !7544
  %bf.clear57 = and i16 %bf.load56, -33, !dbg !7544
  %bf.set58 = or i16 %bf.clear57, %bf.shl, !dbg !7544
  store i16 %bf.set58, i16* %grp_hint51, align 8, !dbg !7544
  %bf.result.cast = zext i16 %bf.value to i32, !dbg !7544
  %43 = load %struct.access*, %struct.access** %rchild, align 8, !dbg !7545
  %first_child59 = getelementptr inbounds %struct.access, %struct.access* %43, i32 0, i32 8, !dbg !7547
  %44 = load %struct.access*, %struct.access** %first_child59, align 8, !dbg !7547
  %tobool60 = icmp ne %struct.access* %44, null, !dbg !7545
  br i1 %tobool60, label %if.then61, label %if.end67, !dbg !7548

if.then61:                                        ; preds = %if.then44
  %45 = load %struct.access*, %struct.access** %new_acc, align 8, !dbg !7549
  %46 = load %struct.access*, %struct.access** %rchild, align 8, !dbg !7550
  %call62 = call zeroext i8 @propagate_subaccesses_across_link(%struct.access* %45, %struct.access* %46), !dbg !7551
  %conv63 = zext i8 %call62 to i32, !dbg !7551
  %47 = load i8, i8* %ret, align 1, !dbg !7552
  %conv64 = zext i8 %47 to i32, !dbg !7552
  %or65 = or i32 %conv64, %conv63, !dbg !7552
  %conv66 = trunc i32 %or65 to i8, !dbg !7552
  store i8 %conv66, i8* %ret, align 1, !dbg !7552
  br label %if.end67, !dbg !7553

if.end67:                                         ; preds = %if.then61, %if.then44
  br label %if.end68, !dbg !7554

if.end68:                                         ; preds = %if.end67, %if.then42
  br label %for.inc, !dbg !7555

if.end69:                                         ; preds = %if.end39
  %48 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !7556
  %base70 = getelementptr inbounds %struct.access, %struct.access* %48, i32 0, i32 2, !dbg !7556
  %49 = load %union.tree_node*, %union.tree_node** %base70, align 8, !dbg !7556
  %common71 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !7556
  %type72 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common71, i32 0, i32 2, !dbg !7556
  %50 = load %union.tree_node*, %union.tree_node** %type72, align 8, !dbg !7556
  %51 = load i64, i64* %norm_offset, align 8, !dbg !7558
  %52 = load %struct.access*, %struct.access** %rchild, align 8, !dbg !7559
  %type73 = getelementptr inbounds %struct.access, %struct.access* %52, i32 0, i32 4, !dbg !7560
  %53 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !7560
  %call74 = call zeroext i8 @build_ref_for_offset(%union.tree_node** null, %union.tree_node* %50, i64 %51, %union.tree_node* %53, i8 zeroext 0), !dbg !7561
  %tobool75 = icmp ne i8 %call74, 0, !dbg !7561
  br i1 %tobool75, label %if.end77, label %if.then76, !dbg !7562

if.then76:                                        ; preds = %if.end69
  br label %for.inc, !dbg !7563

if.end77:                                         ; preds = %if.end69
  %54 = load %struct.access*, %struct.access** %rchild, align 8, !dbg !7564
  %grp_hint78 = getelementptr inbounds %struct.access, %struct.access* %54, i32 0, i32 14, !dbg !7565
  %bf.load79 = load i16, i16* %grp_hint78, align 8, !dbg !7566
  %bf.clear80 = and i16 %bf.load79, -33, !dbg !7566
  %bf.set81 = or i16 %bf.clear80, 32, !dbg !7566
  store i16 %bf.set81, i16* %grp_hint78, align 8, !dbg !7566
  %55 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !7567
  %56 = load %struct.access*, %struct.access** %rchild, align 8, !dbg !7568
  %57 = load i64, i64* %norm_offset, align 8, !dbg !7569
  %call82 = call %struct.access* @create_artificial_child_access(%struct.access* %55, %struct.access* %56, i64 %57), !dbg !7570
  store %struct.access* %call82, %struct.access** %new_acc, align 8, !dbg !7571
  %58 = load %struct.access*, %struct.access** %new_acc, align 8, !dbg !7572
  %tobool83 = icmp ne %struct.access* %58, null, !dbg !7572
  br i1 %tobool83, label %if.then84, label %if.end90, !dbg !7574

if.then84:                                        ; preds = %if.end77
  store i8 1, i8* %ret, align 1, !dbg !7575
  %59 = load %struct.access*, %struct.access** %racc.addr, align 8, !dbg !7577
  %first_child85 = getelementptr inbounds %struct.access, %struct.access* %59, i32 0, i32 8, !dbg !7579
  %60 = load %struct.access*, %struct.access** %first_child85, align 8, !dbg !7579
  %tobool86 = icmp ne %struct.access* %60, null, !dbg !7577
  br i1 %tobool86, label %if.then87, label %if.end89, !dbg !7580

if.then87:                                        ; preds = %if.then84
  %61 = load %struct.access*, %struct.access** %new_acc, align 8, !dbg !7581
  %62 = load %struct.access*, %struct.access** %rchild, align 8, !dbg !7582
  %call88 = call zeroext i8 @propagate_subaccesses_across_link(%struct.access* %61, %struct.access* %62), !dbg !7583
  br label %if.end89, !dbg !7583

if.end89:                                         ; preds = %if.then87, %if.then84
  br label %if.end90, !dbg !7584

if.end90:                                         ; preds = %if.end89, %if.end77
  br label %for.inc, !dbg !7585

for.inc:                                          ; preds = %if.end90, %if.then76, %if.end68, %if.then38
  %63 = load %struct.access*, %struct.access** %rchild, align 8, !dbg !7586
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %63, i32 0, i32 9, !dbg !7587
  %64 = load %struct.access*, %struct.access** %next_sibling, align 8, !dbg !7587
  store %struct.access* %64, %struct.access** %rchild, align 8, !dbg !7588
  br label %for.cond, !dbg !7589, !llvm.loop !7590

for.end:                                          ; preds = %for.cond
  %65 = load i8, i8* %ret, align 1, !dbg !7592
  store i8 %65, i8* %retval, align 1, !dbg !7593
  br label %return, !dbg !7593

return:                                           ; preds = %for.end, %if.end27, %if.then
  %66 = load i8, i8* %retval, align 1, !dbg !7594
  ret i8 %66, !dbg !7594
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @child_would_conflict_in_lacc(%struct.access* %lacc, i64 %norm_offset, i64 %size, %struct.access** %exact_match) #0 !dbg !7595 {
entry:
  %retval = alloca i8, align 1
  %lacc.addr = alloca %struct.access*, align 8
  %norm_offset.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %exact_match.addr = alloca %struct.access**, align 8
  %child = alloca %struct.access*, align 8
  store %struct.access* %lacc, %struct.access** %lacc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %lacc.addr, metadata !7598, metadata !DIExpression()), !dbg !7599
  store i64 %norm_offset, i64* %norm_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %norm_offset.addr, metadata !7600, metadata !DIExpression()), !dbg !7601
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !7602, metadata !DIExpression()), !dbg !7603
  store %struct.access** %exact_match, %struct.access*** %exact_match.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access*** %exact_match.addr, metadata !7604, metadata !DIExpression()), !dbg !7605
  call void @llvm.dbg.declare(metadata %struct.access** %child, metadata !7606, metadata !DIExpression()), !dbg !7607
  %0 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !7608
  %first_child = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 8, !dbg !7610
  %1 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !7610
  store %struct.access* %1, %struct.access** %child, align 8, !dbg !7611
  br label %for.cond, !dbg !7612

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.access*, %struct.access** %child, align 8, !dbg !7613
  %tobool = icmp ne %struct.access* %2, null, !dbg !7615
  br i1 %tobool, label %for.body, label %for.end, !dbg !7615

for.body:                                         ; preds = %for.cond
  %3 = load %struct.access*, %struct.access** %child, align 8, !dbg !7616
  %offset = getelementptr inbounds %struct.access, %struct.access* %3, i32 0, i32 0, !dbg !7619
  %4 = load i64, i64* %offset, align 8, !dbg !7619
  %5 = load i64, i64* %norm_offset.addr, align 8, !dbg !7620
  %cmp = icmp eq i64 %4, %5, !dbg !7621
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7622

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.access*, %struct.access** %child, align 8, !dbg !7623
  %size1 = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 1, !dbg !7624
  %7 = load i64, i64* %size1, align 8, !dbg !7624
  %8 = load i64, i64* %size.addr, align 8, !dbg !7625
  %cmp2 = icmp eq i64 %7, %8, !dbg !7626
  br i1 %cmp2, label %if.then, label %if.end, !dbg !7627

if.then:                                          ; preds = %land.lhs.true
  %9 = load %struct.access*, %struct.access** %child, align 8, !dbg !7628
  %10 = load %struct.access**, %struct.access*** %exact_match.addr, align 8, !dbg !7630
  store %struct.access* %9, %struct.access** %10, align 8, !dbg !7631
  store i8 1, i8* %retval, align 1, !dbg !7632
  br label %return, !dbg !7632

if.end:                                           ; preds = %land.lhs.true, %for.body
  %11 = load %struct.access*, %struct.access** %child, align 8, !dbg !7633
  %offset3 = getelementptr inbounds %struct.access, %struct.access* %11, i32 0, i32 0, !dbg !7635
  %12 = load i64, i64* %offset3, align 8, !dbg !7635
  %13 = load i64, i64* %norm_offset.addr, align 8, !dbg !7636
  %14 = load i64, i64* %size.addr, align 8, !dbg !7637
  %add = add nsw i64 %13, %14, !dbg !7638
  %cmp4 = icmp slt i64 %12, %add, !dbg !7639
  br i1 %cmp4, label %land.lhs.true5, label %if.end11, !dbg !7640

land.lhs.true5:                                   ; preds = %if.end
  %15 = load %struct.access*, %struct.access** %child, align 8, !dbg !7641
  %offset6 = getelementptr inbounds %struct.access, %struct.access* %15, i32 0, i32 0, !dbg !7642
  %16 = load i64, i64* %offset6, align 8, !dbg !7642
  %17 = load %struct.access*, %struct.access** %child, align 8, !dbg !7643
  %size7 = getelementptr inbounds %struct.access, %struct.access* %17, i32 0, i32 1, !dbg !7644
  %18 = load i64, i64* %size7, align 8, !dbg !7644
  %add8 = add nsw i64 %16, %18, !dbg !7645
  %19 = load i64, i64* %norm_offset.addr, align 8, !dbg !7646
  %cmp9 = icmp sgt i64 %add8, %19, !dbg !7647
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !7648

if.then10:                                        ; preds = %land.lhs.true5
  store i8 1, i8* %retval, align 1, !dbg !7649
  br label %return, !dbg !7649

if.end11:                                         ; preds = %land.lhs.true5, %if.end
  br label %for.inc, !dbg !7650

for.inc:                                          ; preds = %if.end11
  %20 = load %struct.access*, %struct.access** %child, align 8, !dbg !7651
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %20, i32 0, i32 9, !dbg !7652
  %21 = load %struct.access*, %struct.access** %next_sibling, align 8, !dbg !7652
  store %struct.access* %21, %struct.access** %child, align 8, !dbg !7653
  br label %for.cond, !dbg !7654, !llvm.loop !7655

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !7657
  br label %return, !dbg !7657

return:                                           ; preds = %for.end, %if.then10, %if.then
  %22 = load i8, i8* %retval, align 1, !dbg !7658
  ret i8 %22, !dbg !7658
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @create_artificial_child_access(%struct.access* %parent, %struct.access* %model, i64 %new_offset) #0 !dbg !7659 {
entry:
  %retval = alloca %struct.access*, align 8
  %parent.addr = alloca %struct.access*, align 8
  %model.addr = alloca %struct.access*, align 8
  %new_offset.addr = alloca i64, align 8
  %access = alloca %struct.access*, align 8
  %child = alloca %struct.access**, align 8
  %expr = alloca %union.tree_node*, align 8
  store %struct.access* %parent, %struct.access** %parent.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %parent.addr, metadata !7662, metadata !DIExpression()), !dbg !7663
  store %struct.access* %model, %struct.access** %model.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %model.addr, metadata !7664, metadata !DIExpression()), !dbg !7665
  store i64 %new_offset, i64* %new_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %new_offset.addr, metadata !7666, metadata !DIExpression()), !dbg !7667
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !7668, metadata !DIExpression()), !dbg !7669
  call void @llvm.dbg.declare(metadata %struct.access*** %child, metadata !7670, metadata !DIExpression()), !dbg !7671
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !7672, metadata !DIExpression()), !dbg !7673
  %0 = load %struct.access*, %struct.access** %parent.addr, align 8, !dbg !7674
  %base = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 2, !dbg !7675
  %1 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7675
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !7673
  %2 = load %struct.access*, %struct.access** %model.addr, align 8, !dbg !7676
  %grp_unscalarizable_region = getelementptr inbounds %struct.access, %struct.access* %2, i32 0, i32 14, !dbg !7676
  %bf.load = load i16, i16* %grp_unscalarizable_region, align 8, !dbg !7676
  %bf.lshr = lshr i16 %bf.load, 7, !dbg !7676
  %bf.clear = and i16 %bf.lshr, 1, !dbg !7676
  %bf.cast = zext i16 %bf.clear to i32, !dbg !7676
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7676
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7676

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 1912, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7676
  br label %cond.end, !dbg !7676

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7676

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7676
  %3 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7677
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !7677
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7677
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7677
  %5 = load i64, i64* %new_offset.addr, align 8, !dbg !7679
  %6 = load %struct.access*, %struct.access** %model.addr, align 8, !dbg !7680
  %type1 = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 4, !dbg !7681
  %7 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7681
  %call = call zeroext i8 @build_ref_for_offset(%union.tree_node** %expr, %union.tree_node* %4, i64 %5, %union.tree_node* %7, i8 zeroext 0), !dbg !7682
  %tobool2 = icmp ne i8 %call, 0, !dbg !7682
  br i1 %tobool2, label %if.end, label %if.then, !dbg !7683

if.then:                                          ; preds = %cond.end
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !7684
  br label %return, !dbg !7684

if.end:                                           ; preds = %cond.end
  %8 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @access_pool, align 8, !dbg !7685
  %call3 = call i8* @pool_alloc(%struct.alloc_pool_def* %8), !dbg !7686
  %9 = bitcast i8* %call3 to %struct.access*, !dbg !7687
  store %struct.access* %9, %struct.access** %access, align 8, !dbg !7688
  %10 = load %struct.access*, %struct.access** %access, align 8, !dbg !7689
  %11 = bitcast %struct.access* %10 to i8*, !dbg !7690
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 120, i1 false), !dbg !7690
  %12 = load %struct.access*, %struct.access** %parent.addr, align 8, !dbg !7691
  %base4 = getelementptr inbounds %struct.access, %struct.access* %12, i32 0, i32 2, !dbg !7692
  %13 = load %union.tree_node*, %union.tree_node** %base4, align 8, !dbg !7692
  %14 = load %struct.access*, %struct.access** %access, align 8, !dbg !7693
  %base5 = getelementptr inbounds %struct.access, %struct.access* %14, i32 0, i32 2, !dbg !7694
  store %union.tree_node* %13, %union.tree_node** %base5, align 8, !dbg !7695
  %15 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7696
  %16 = load %struct.access*, %struct.access** %access, align 8, !dbg !7697
  %expr6 = getelementptr inbounds %struct.access, %struct.access* %16, i32 0, i32 3, !dbg !7698
  store %union.tree_node* %15, %union.tree_node** %expr6, align 8, !dbg !7699
  %17 = load i64, i64* %new_offset.addr, align 8, !dbg !7700
  %18 = load %struct.access*, %struct.access** %access, align 8, !dbg !7701
  %offset = getelementptr inbounds %struct.access, %struct.access* %18, i32 0, i32 0, !dbg !7702
  store i64 %17, i64* %offset, align 8, !dbg !7703
  %19 = load %struct.access*, %struct.access** %model.addr, align 8, !dbg !7704
  %size = getelementptr inbounds %struct.access, %struct.access* %19, i32 0, i32 1, !dbg !7705
  %20 = load i64, i64* %size, align 8, !dbg !7705
  %21 = load %struct.access*, %struct.access** %access, align 8, !dbg !7706
  %size7 = getelementptr inbounds %struct.access, %struct.access* %21, i32 0, i32 1, !dbg !7707
  store i64 %20, i64* %size7, align 8, !dbg !7708
  %22 = load %struct.access*, %struct.access** %model.addr, align 8, !dbg !7709
  %type8 = getelementptr inbounds %struct.access, %struct.access* %22, i32 0, i32 4, !dbg !7710
  %23 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !7710
  %24 = load %struct.access*, %struct.access** %access, align 8, !dbg !7711
  %type9 = getelementptr inbounds %struct.access, %struct.access* %24, i32 0, i32 4, !dbg !7712
  store %union.tree_node* %23, %union.tree_node** %type9, align 8, !dbg !7713
  %25 = load %struct.access*, %struct.access** %access, align 8, !dbg !7714
  %grp_write = getelementptr inbounds %struct.access, %struct.access* %25, i32 0, i32 14, !dbg !7715
  %bf.load10 = load i16, i16* %grp_write, align 8, !dbg !7716
  %bf.clear11 = and i16 %bf.load10, -9, !dbg !7716
  %bf.set = or i16 %bf.clear11, 8, !dbg !7716
  store i16 %bf.set, i16* %grp_write, align 8, !dbg !7716
  %26 = load %struct.access*, %struct.access** %access, align 8, !dbg !7717
  %grp_read = getelementptr inbounds %struct.access, %struct.access* %26, i32 0, i32 14, !dbg !7718
  %bf.load12 = load i16, i16* %grp_read, align 8, !dbg !7719
  %bf.clear13 = and i16 %bf.load12, -17, !dbg !7719
  store i16 %bf.clear13, i16* %grp_read, align 8, !dbg !7719
  %27 = load %struct.access*, %struct.access** %parent.addr, align 8, !dbg !7720
  %first_child = getelementptr inbounds %struct.access, %struct.access* %27, i32 0, i32 8, !dbg !7721
  store %struct.access** %first_child, %struct.access*** %child, align 8, !dbg !7722
  br label %while.cond, !dbg !7723

while.cond:                                       ; preds = %while.body, %if.end
  %28 = load %struct.access**, %struct.access*** %child, align 8, !dbg !7724
  %29 = load %struct.access*, %struct.access** %28, align 8, !dbg !7725
  %tobool14 = icmp ne %struct.access* %29, null, !dbg !7725
  br i1 %tobool14, label %land.rhs, label %land.end, !dbg !7726

land.rhs:                                         ; preds = %while.cond
  %30 = load %struct.access**, %struct.access*** %child, align 8, !dbg !7727
  %31 = load %struct.access*, %struct.access** %30, align 8, !dbg !7728
  %offset15 = getelementptr inbounds %struct.access, %struct.access* %31, i32 0, i32 0, !dbg !7729
  %32 = load i64, i64* %offset15, align 8, !dbg !7729
  %33 = load i64, i64* %new_offset.addr, align 8, !dbg !7730
  %cmp = icmp slt i64 %32, %33, !dbg !7731
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %34 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !7732
  br i1 %34, label %while.body, label %while.end, !dbg !7723

while.body:                                       ; preds = %land.end
  %35 = load %struct.access**, %struct.access*** %child, align 8, !dbg !7733
  %36 = load %struct.access*, %struct.access** %35, align 8, !dbg !7734
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %36, i32 0, i32 9, !dbg !7735
  store %struct.access** %next_sibling, %struct.access*** %child, align 8, !dbg !7736
  br label %while.cond, !dbg !7723, !llvm.loop !7737

while.end:                                        ; preds = %land.end
  %37 = load %struct.access**, %struct.access*** %child, align 8, !dbg !7738
  %38 = load %struct.access*, %struct.access** %37, align 8, !dbg !7739
  %39 = load %struct.access*, %struct.access** %access, align 8, !dbg !7740
  %next_sibling16 = getelementptr inbounds %struct.access, %struct.access* %39, i32 0, i32 9, !dbg !7741
  store %struct.access* %38, %struct.access** %next_sibling16, align 8, !dbg !7742
  %40 = load %struct.access*, %struct.access** %access, align 8, !dbg !7743
  %41 = load %struct.access**, %struct.access*** %child, align 8, !dbg !7744
  store %struct.access* %40, %struct.access** %41, align 8, !dbg !7745
  %42 = load %struct.access*, %struct.access** %access, align 8, !dbg !7746
  store %struct.access* %42, %struct.access** %retval, align 8, !dbg !7747
  br label %return, !dbg !7747

return:                                           ; preds = %while.end, %if.then
  %43 = load %struct.access*, %struct.access** %retval, align 8, !dbg !7748
  ret %struct.access* %43, !dbg !7748
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @analyze_access_subtree(%struct.access* %root, i8 zeroext %allow_replacements, i8 zeroext %mark_read, i8 zeroext %mark_write) #0 !dbg !7749 {
entry:
  %retval = alloca i8, align 1
  %root.addr = alloca %struct.access*, align 8
  %allow_replacements.addr = alloca i8, align 1
  %mark_read.addr = alloca i8, align 1
  %mark_write.addr = alloca i8, align 1
  %child = alloca %struct.access*, align 8
  %limit = alloca i64, align 8
  %covered_to = alloca i64, align 8
  %scalar = alloca i8, align 1
  %hole = alloca i8, align 1
  %sth_created = alloca i8, align 1
  %direct_read = alloca i8, align 1
  store %struct.access* %root, %struct.access** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %root.addr, metadata !7752, metadata !DIExpression()), !dbg !7753
  store i8 %allow_replacements, i8* %allow_replacements.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %allow_replacements.addr, metadata !7754, metadata !DIExpression()), !dbg !7755
  store i8 %mark_read, i8* %mark_read.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %mark_read.addr, metadata !7756, metadata !DIExpression()), !dbg !7757
  store i8 %mark_write, i8* %mark_write.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %mark_write.addr, metadata !7758, metadata !DIExpression()), !dbg !7759
  call void @llvm.dbg.declare(metadata %struct.access** %child, metadata !7760, metadata !DIExpression()), !dbg !7761
  call void @llvm.dbg.declare(metadata i64* %limit, metadata !7762, metadata !DIExpression()), !dbg !7763
  %0 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7764
  %offset = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 0, !dbg !7765
  %1 = load i64, i64* %offset, align 8, !dbg !7765
  %2 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7766
  %size = getelementptr inbounds %struct.access, %struct.access* %2, i32 0, i32 1, !dbg !7767
  %3 = load i64, i64* %size, align 8, !dbg !7767
  %add = add nsw i64 %1, %3, !dbg !7768
  store i64 %add, i64* %limit, align 8, !dbg !7763
  call void @llvm.dbg.declare(metadata i64* %covered_to, metadata !7769, metadata !DIExpression()), !dbg !7770
  %4 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7771
  %offset1 = getelementptr inbounds %struct.access, %struct.access* %4, i32 0, i32 0, !dbg !7772
  %5 = load i64, i64* %offset1, align 8, !dbg !7772
  store i64 %5, i64* %covered_to, align 8, !dbg !7770
  call void @llvm.dbg.declare(metadata i8* %scalar, metadata !7773, metadata !DIExpression()), !dbg !7774
  %6 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7775
  %type = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 4, !dbg !7776
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7776
  %call = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %7), !dbg !7777
  store i8 %call, i8* %scalar, align 1, !dbg !7774
  call void @llvm.dbg.declare(metadata i8* %hole, metadata !7778, metadata !DIExpression()), !dbg !7779
  store i8 0, i8* %hole, align 1, !dbg !7779
  call void @llvm.dbg.declare(metadata i8* %sth_created, metadata !7780, metadata !DIExpression()), !dbg !7781
  store i8 0, i8* %sth_created, align 1, !dbg !7781
  call void @llvm.dbg.declare(metadata i8* %direct_read, metadata !7782, metadata !DIExpression()), !dbg !7783
  %8 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7784
  %grp_read = getelementptr inbounds %struct.access, %struct.access* %8, i32 0, i32 14, !dbg !7785
  %bf.load = load i16, i16* %grp_read, align 8, !dbg !7785
  %bf.lshr = lshr i16 %bf.load, 4, !dbg !7785
  %bf.clear = and i16 %bf.lshr, 1, !dbg !7785
  %bf.cast = zext i16 %bf.clear to i32, !dbg !7785
  %conv = trunc i32 %bf.cast to i8, !dbg !7784
  store i8 %conv, i8* %direct_read, align 1, !dbg !7783
  %9 = load i8, i8* %mark_read.addr, align 1, !dbg !7786
  %tobool = icmp ne i8 %9, 0, !dbg !7786
  br i1 %tobool, label %if.then, label %if.else, !dbg !7788

if.then:                                          ; preds = %entry
  %10 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7789
  %grp_read2 = getelementptr inbounds %struct.access, %struct.access* %10, i32 0, i32 14, !dbg !7790
  %bf.load3 = load i16, i16* %grp_read2, align 8, !dbg !7791
  %bf.clear4 = and i16 %bf.load3, -17, !dbg !7791
  %bf.set = or i16 %bf.clear4, 16, !dbg !7791
  store i16 %bf.set, i16* %grp_read2, align 8, !dbg !7791
  br label %if.end12, !dbg !7789

if.else:                                          ; preds = %entry
  %11 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7792
  %grp_read5 = getelementptr inbounds %struct.access, %struct.access* %11, i32 0, i32 14, !dbg !7794
  %bf.load6 = load i16, i16* %grp_read5, align 8, !dbg !7794
  %bf.lshr7 = lshr i16 %bf.load6, 4, !dbg !7794
  %bf.clear8 = and i16 %bf.lshr7, 1, !dbg !7794
  %bf.cast9 = zext i16 %bf.clear8 to i32, !dbg !7794
  %tobool10 = icmp ne i32 %bf.cast9, 0, !dbg !7792
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !7795

if.then11:                                        ; preds = %if.else
  store i8 1, i8* %mark_read.addr, align 1, !dbg !7796
  br label %if.end, !dbg !7797

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end, %if.then
  %12 = load i8, i8* %mark_write.addr, align 1, !dbg !7798
  %tobool13 = icmp ne i8 %12, 0, !dbg !7798
  br i1 %tobool13, label %if.then14, label %if.else18, !dbg !7800

if.then14:                                        ; preds = %if.end12
  %13 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7801
  %grp_write = getelementptr inbounds %struct.access, %struct.access* %13, i32 0, i32 14, !dbg !7802
  %bf.load15 = load i16, i16* %grp_write, align 8, !dbg !7803
  %bf.clear16 = and i16 %bf.load15, -9, !dbg !7803
  %bf.set17 = or i16 %bf.clear16, 8, !dbg !7803
  store i16 %bf.set17, i16* %grp_write, align 8, !dbg !7803
  br label %if.end27, !dbg !7801

if.else18:                                        ; preds = %if.end12
  %14 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7804
  %grp_write19 = getelementptr inbounds %struct.access, %struct.access* %14, i32 0, i32 14, !dbg !7806
  %bf.load20 = load i16, i16* %grp_write19, align 8, !dbg !7806
  %bf.lshr21 = lshr i16 %bf.load20, 3, !dbg !7806
  %bf.clear22 = and i16 %bf.lshr21, 1, !dbg !7806
  %bf.cast23 = zext i16 %bf.clear22 to i32, !dbg !7806
  %tobool24 = icmp ne i32 %bf.cast23, 0, !dbg !7804
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !7807

if.then25:                                        ; preds = %if.else18
  store i8 1, i8* %mark_write.addr, align 1, !dbg !7808
  br label %if.end26, !dbg !7809

if.end26:                                         ; preds = %if.then25, %if.else18
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then14
  %15 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7810
  %grp_unscalarizable_region = getelementptr inbounds %struct.access, %struct.access* %15, i32 0, i32 14, !dbg !7812
  %bf.load28 = load i16, i16* %grp_unscalarizable_region, align 8, !dbg !7812
  %bf.lshr29 = lshr i16 %bf.load28, 7, !dbg !7812
  %bf.clear30 = and i16 %bf.lshr29, 1, !dbg !7812
  %bf.cast31 = zext i16 %bf.clear30 to i32, !dbg !7812
  %tobool32 = icmp ne i32 %bf.cast31, 0, !dbg !7810
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !7813

if.then33:                                        ; preds = %if.end27
  store i8 0, i8* %allow_replacements.addr, align 1, !dbg !7814
  br label %if.end34, !dbg !7815

if.end34:                                         ; preds = %if.then33, %if.end27
  %16 = load i8, i8* %allow_replacements.addr, align 1, !dbg !7816
  %conv35 = zext i8 %16 to i32, !dbg !7816
  %tobool36 = icmp ne i32 %conv35, 0, !dbg !7816
  br i1 %tobool36, label %land.lhs.true, label %if.end41, !dbg !7818

land.lhs.true:                                    ; preds = %if.end34
  %17 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7819
  %expr = getelementptr inbounds %struct.access, %struct.access* %17, i32 0, i32 3, !dbg !7820
  %18 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7820
  %call37 = call zeroext i8 @expr_with_var_bounded_array_refs_p(%union.tree_node* %18), !dbg !7821
  %conv38 = zext i8 %call37 to i32, !dbg !7821
  %tobool39 = icmp ne i32 %conv38, 0, !dbg !7821
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !7822

if.then40:                                        ; preds = %land.lhs.true
  store i8 0, i8* %allow_replacements.addr, align 1, !dbg !7823
  br label %if.end41, !dbg !7824

if.end41:                                         ; preds = %if.then40, %land.lhs.true, %if.end34
  %19 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7825
  %first_child = getelementptr inbounds %struct.access, %struct.access* %19, i32 0, i32 8, !dbg !7827
  %20 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !7827
  store %struct.access* %20, %struct.access** %child, align 8, !dbg !7828
  br label %for.cond, !dbg !7829

for.cond:                                         ; preds = %for.inc, %if.end41
  %21 = load %struct.access*, %struct.access** %child, align 8, !dbg !7830
  %tobool42 = icmp ne %struct.access* %21, null, !dbg !7832
  br i1 %tobool42, label %for.body, label %for.end, !dbg !7832

for.body:                                         ; preds = %for.cond
  %22 = load i8, i8* %hole, align 1, !dbg !7833
  %tobool43 = icmp ne i8 %22, 0, !dbg !7833
  br i1 %tobool43, label %if.else48, label %land.lhs.true44, !dbg !7836

land.lhs.true44:                                  ; preds = %for.body
  %23 = load %struct.access*, %struct.access** %child, align 8, !dbg !7837
  %offset45 = getelementptr inbounds %struct.access, %struct.access* %23, i32 0, i32 0, !dbg !7838
  %24 = load i64, i64* %offset45, align 8, !dbg !7838
  %25 = load i64, i64* %covered_to, align 8, !dbg !7839
  %cmp = icmp slt i64 %24, %25, !dbg !7840
  br i1 %cmp, label %if.then47, label %if.else48, !dbg !7841

if.then47:                                        ; preds = %land.lhs.true44
  store i8 1, i8* %hole, align 1, !dbg !7842
  br label %if.end51, !dbg !7843

if.else48:                                        ; preds = %land.lhs.true44, %for.body
  %26 = load %struct.access*, %struct.access** %child, align 8, !dbg !7844
  %size49 = getelementptr inbounds %struct.access, %struct.access* %26, i32 0, i32 1, !dbg !7845
  %27 = load i64, i64* %size49, align 8, !dbg !7845
  %28 = load i64, i64* %covered_to, align 8, !dbg !7846
  %add50 = add nsw i64 %28, %27, !dbg !7846
  store i64 %add50, i64* %covered_to, align 8, !dbg !7846
  br label %if.end51

if.end51:                                         ; preds = %if.else48, %if.then47
  %29 = load %struct.access*, %struct.access** %child, align 8, !dbg !7847
  %30 = load i8, i8* %allow_replacements.addr, align 1, !dbg !7848
  %31 = load i8, i8* %mark_read.addr, align 1, !dbg !7849
  %32 = load i8, i8* %mark_write.addr, align 1, !dbg !7850
  %call52 = call zeroext i8 @analyze_access_subtree(%struct.access* %29, i8 zeroext %30, i8 zeroext %31, i8 zeroext %32), !dbg !7851
  %conv53 = zext i8 %call52 to i32, !dbg !7851
  %33 = load i8, i8* %sth_created, align 1, !dbg !7852
  %conv54 = zext i8 %33 to i32, !dbg !7852
  %or = or i32 %conv54, %conv53, !dbg !7852
  %conv55 = trunc i32 %or to i8, !dbg !7852
  store i8 %conv55, i8* %sth_created, align 1, !dbg !7852
  %34 = load %struct.access*, %struct.access** %child, align 8, !dbg !7853
  %grp_unscalarized_data = getelementptr inbounds %struct.access, %struct.access* %34, i32 0, i32 14, !dbg !7854
  %bf.load56 = load i16, i16* %grp_unscalarized_data, align 8, !dbg !7854
  %bf.lshr57 = lshr i16 %bf.load56, 8, !dbg !7854
  %bf.clear58 = and i16 %bf.lshr57, 1, !dbg !7854
  %bf.cast59 = zext i16 %bf.clear58 to i32, !dbg !7854
  %35 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7855
  %grp_unscalarized_data60 = getelementptr inbounds %struct.access, %struct.access* %35, i32 0, i32 14, !dbg !7856
  %bf.load61 = load i16, i16* %grp_unscalarized_data60, align 8, !dbg !7857
  %bf.lshr62 = lshr i16 %bf.load61, 8, !dbg !7857
  %bf.clear63 = and i16 %bf.lshr62, 1, !dbg !7857
  %bf.cast64 = zext i16 %bf.clear63 to i32, !dbg !7857
  %or65 = or i32 %bf.cast64, %bf.cast59, !dbg !7857
  %36 = trunc i32 %or65 to i16, !dbg !7857
  %bf.load66 = load i16, i16* %grp_unscalarized_data60, align 8, !dbg !7857
  %bf.value = and i16 %36, 1, !dbg !7857
  %bf.shl = shl i16 %bf.value, 8, !dbg !7857
  %bf.clear67 = and i16 %bf.load66, -257, !dbg !7857
  %bf.set68 = or i16 %bf.clear67, %bf.shl, !dbg !7857
  store i16 %bf.set68, i16* %grp_unscalarized_data60, align 8, !dbg !7857
  %bf.result.cast = zext i16 %bf.value to i32, !dbg !7857
  %37 = load %struct.access*, %struct.access** %child, align 8, !dbg !7858
  %grp_covered = getelementptr inbounds %struct.access, %struct.access* %37, i32 0, i32 14, !dbg !7859
  %bf.load69 = load i16, i16* %grp_covered, align 8, !dbg !7859
  %bf.lshr70 = lshr i16 %bf.load69, 6, !dbg !7859
  %bf.clear71 = and i16 %bf.lshr70, 1, !dbg !7859
  %bf.cast72 = zext i16 %bf.clear71 to i32, !dbg !7859
  %tobool73 = icmp ne i32 %bf.cast72, 0, !dbg !7860
  %lnot = xor i1 %tobool73, true, !dbg !7860
  %lnot.ext = zext i1 %lnot to i32, !dbg !7860
  %38 = load i8, i8* %hole, align 1, !dbg !7861
  %conv74 = zext i8 %38 to i32, !dbg !7861
  %or75 = or i32 %conv74, %lnot.ext, !dbg !7861
  %conv76 = trunc i32 %or75 to i8, !dbg !7861
  store i8 %conv76, i8* %hole, align 1, !dbg !7861
  br label %for.inc, !dbg !7862

for.inc:                                          ; preds = %if.end51
  %39 = load %struct.access*, %struct.access** %child, align 8, !dbg !7863
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %39, i32 0, i32 9, !dbg !7864
  %40 = load %struct.access*, %struct.access** %next_sibling, align 8, !dbg !7864
  store %struct.access* %40, %struct.access** %child, align 8, !dbg !7865
  br label %for.cond, !dbg !7866, !llvm.loop !7867

for.end:                                          ; preds = %for.cond
  %41 = load i8, i8* %allow_replacements.addr, align 1, !dbg !7869
  %conv77 = zext i8 %41 to i32, !dbg !7869
  %tobool78 = icmp ne i32 %conv77, 0, !dbg !7869
  br i1 %tobool78, label %land.lhs.true79, label %if.else124, !dbg !7871

land.lhs.true79:                                  ; preds = %for.end
  %42 = load i8, i8* %scalar, align 1, !dbg !7872
  %conv80 = zext i8 %42 to i32, !dbg !7872
  %tobool81 = icmp ne i32 %conv80, 0, !dbg !7872
  br i1 %tobool81, label %land.lhs.true82, label %if.else124, !dbg !7873

land.lhs.true82:                                  ; preds = %land.lhs.true79
  %43 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7874
  %first_child83 = getelementptr inbounds %struct.access, %struct.access* %43, i32 0, i32 8, !dbg !7875
  %44 = load %struct.access*, %struct.access** %first_child83, align 8, !dbg !7875
  %tobool84 = icmp ne %struct.access* %44, null, !dbg !7874
  br i1 %tobool84, label %if.else124, label %land.lhs.true85, !dbg !7876

land.lhs.true85:                                  ; preds = %land.lhs.true82
  %45 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7877
  %grp_hint = getelementptr inbounds %struct.access, %struct.access* %45, i32 0, i32 14, !dbg !7878
  %bf.load86 = load i16, i16* %grp_hint, align 8, !dbg !7878
  %bf.lshr87 = lshr i16 %bf.load86, 5, !dbg !7878
  %bf.clear88 = and i16 %bf.lshr87, 1, !dbg !7878
  %bf.cast89 = zext i16 %bf.clear88 to i32, !dbg !7878
  %tobool90 = icmp ne i32 %bf.cast89, 0, !dbg !7877
  br i1 %tobool90, label %land.lhs.true100, label %lor.lhs.false, !dbg !7879

lor.lhs.false:                                    ; preds = %land.lhs.true85
  %46 = load i8, i8* %direct_read, align 1, !dbg !7880
  %conv91 = zext i8 %46 to i32, !dbg !7880
  %tobool92 = icmp ne i32 %conv91, 0, !dbg !7880
  br i1 %tobool92, label %land.lhs.true93, label %if.else124, !dbg !7881

land.lhs.true93:                                  ; preds = %lor.lhs.false
  %47 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7882
  %grp_write94 = getelementptr inbounds %struct.access, %struct.access* %47, i32 0, i32 14, !dbg !7883
  %bf.load95 = load i16, i16* %grp_write94, align 8, !dbg !7883
  %bf.lshr96 = lshr i16 %bf.load95, 3, !dbg !7883
  %bf.clear97 = and i16 %bf.lshr96, 1, !dbg !7883
  %bf.cast98 = zext i16 %bf.clear97 to i32, !dbg !7883
  %tobool99 = icmp ne i32 %bf.cast98, 0, !dbg !7882
  br i1 %tobool99, label %land.lhs.true100, label %if.else124, !dbg !7884

land.lhs.true100:                                 ; preds = %land.lhs.true93, %land.lhs.true85
  %48 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7885
  %base = getelementptr inbounds %struct.access, %struct.access* %48, i32 0, i32 2, !dbg !7885
  %49 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7885
  %common = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !7885
  %type101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7885
  %50 = load %union.tree_node*, %union.tree_node** %type101, align 8, !dbg !7885
  %51 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7886
  %offset102 = getelementptr inbounds %struct.access, %struct.access* %51, i32 0, i32 0, !dbg !7887
  %52 = load i64, i64* %offset102, align 8, !dbg !7887
  %53 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7888
  %type103 = getelementptr inbounds %struct.access, %struct.access* %53, i32 0, i32 4, !dbg !7889
  %54 = load %union.tree_node*, %union.tree_node** %type103, align 8, !dbg !7889
  %call104 = call zeroext i8 @build_ref_for_offset(%union.tree_node** null, %union.tree_node* %50, i64 %52, %union.tree_node* %54, i8 zeroext 0), !dbg !7890
  %conv105 = zext i8 %call104 to i32, !dbg !7890
  %tobool106 = icmp ne i32 %conv105, 0, !dbg !7890
  br i1 %tobool106, label %if.then107, label %if.else124, !dbg !7891

if.then107:                                       ; preds = %land.lhs.true100
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7892
  %tobool108 = icmp ne %struct._IO_FILE* %55, null, !dbg !7892
  br i1 %tobool108, label %land.lhs.true109, label %if.end120, !dbg !7895

land.lhs.true109:                                 ; preds = %if.then107
  %56 = load i32, i32* @dump_flags, align 4, !dbg !7896
  %and = and i32 %56, 8, !dbg !7897
  %tobool110 = icmp ne i32 %and, 0, !dbg !7897
  br i1 %tobool110, label %if.then111, label %if.end120, !dbg !7898

if.then111:                                       ; preds = %land.lhs.true109
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7899
  %call112 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.31, i64 0, i64 0)), !dbg !7901
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7902
  %59 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7903
  %base113 = getelementptr inbounds %struct.access, %struct.access* %59, i32 0, i32 2, !dbg !7904
  %60 = load %union.tree_node*, %union.tree_node** %base113, align 8, !dbg !7904
  call void @print_generic_expr(%struct._IO_FILE* %58, %union.tree_node* %60, i32 0), !dbg !7905
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7906
  %62 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7907
  %offset114 = getelementptr inbounds %struct.access, %struct.access* %62, i32 0, i32 0, !dbg !7908
  %63 = load i64, i64* %offset114, align 8, !dbg !7908
  %conv115 = trunc i64 %63 to i32, !dbg !7909
  %64 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7910
  %size116 = getelementptr inbounds %struct.access, %struct.access* %64, i32 0, i32 1, !dbg !7911
  %65 = load i64, i64* %size116, align 8, !dbg !7911
  %conv117 = trunc i64 %65 to i32, !dbg !7912
  %call118 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.32, i64 0, i64 0), i32 %conv115, i32 %conv117), !dbg !7913
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7914
  %call119 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %66, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.33, i64 0, i64 0)), !dbg !7915
  br label %if.end120, !dbg !7916

if.end120:                                        ; preds = %if.then111, %land.lhs.true109, %if.then107
  %67 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7917
  %grp_to_be_replaced = getelementptr inbounds %struct.access, %struct.access* %67, i32 0, i32 14, !dbg !7918
  %bf.load121 = load i16, i16* %grp_to_be_replaced, align 8, !dbg !7919
  %bf.clear122 = and i16 %bf.load121, -1025, !dbg !7919
  %bf.set123 = or i16 %bf.clear122, 1024, !dbg !7919
  store i16 %bf.set123, i16* %grp_to_be_replaced, align 8, !dbg !7919
  store i8 1, i8* %sth_created, align 1, !dbg !7920
  store i8 0, i8* %hole, align 1, !dbg !7921
  br label %if.end129, !dbg !7922

if.else124:                                       ; preds = %land.lhs.true100, %land.lhs.true93, %lor.lhs.false, %land.lhs.true82, %land.lhs.true79, %for.end
  %68 = load i64, i64* %covered_to, align 8, !dbg !7923
  %69 = load i64, i64* %limit, align 8, !dbg !7925
  %cmp125 = icmp slt i64 %68, %69, !dbg !7926
  br i1 %cmp125, label %if.then127, label %if.end128, !dbg !7927

if.then127:                                       ; preds = %if.else124
  store i8 1, i8* %hole, align 1, !dbg !7928
  br label %if.end128, !dbg !7929

if.end128:                                        ; preds = %if.then127, %if.else124
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.end120
  %70 = load i8, i8* %sth_created, align 1, !dbg !7930
  %conv130 = zext i8 %70 to i32, !dbg !7930
  %tobool131 = icmp ne i32 %conv130, 0, !dbg !7930
  br i1 %tobool131, label %land.lhs.true132, label %if.end139, !dbg !7932

land.lhs.true132:                                 ; preds = %if.end129
  %71 = load i8, i8* %hole, align 1, !dbg !7933
  %tobool133 = icmp ne i8 %71, 0, !dbg !7933
  br i1 %tobool133, label %if.end139, label %if.then134, !dbg !7934

if.then134:                                       ; preds = %land.lhs.true132
  %72 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7935
  %grp_covered135 = getelementptr inbounds %struct.access, %struct.access* %72, i32 0, i32 14, !dbg !7937
  %bf.load136 = load i16, i16* %grp_covered135, align 8, !dbg !7938
  %bf.clear137 = and i16 %bf.load136, -65, !dbg !7938
  %bf.set138 = or i16 %bf.clear137, 64, !dbg !7938
  store i16 %bf.set138, i16* %grp_covered135, align 8, !dbg !7938
  store i8 1, i8* %retval, align 1, !dbg !7939
  br label %return, !dbg !7939

if.end139:                                        ; preds = %land.lhs.true132, %if.end129
  %73 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7940
  %grp_write140 = getelementptr inbounds %struct.access, %struct.access* %73, i32 0, i32 14, !dbg !7942
  %bf.load141 = load i16, i16* %grp_write140, align 8, !dbg !7942
  %bf.lshr142 = lshr i16 %bf.load141, 3, !dbg !7942
  %bf.clear143 = and i16 %bf.lshr142, 1, !dbg !7942
  %bf.cast144 = zext i16 %bf.clear143 to i32, !dbg !7942
  %tobool145 = icmp ne i32 %bf.cast144, 0, !dbg !7940
  br i1 %tobool145, label %if.then154, label %lor.lhs.false146, !dbg !7943

lor.lhs.false146:                                 ; preds = %if.end139
  %74 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7944
  %base147 = getelementptr inbounds %struct.access, %struct.access* %74, i32 0, i32 2, !dbg !7944
  %75 = load %union.tree_node*, %union.tree_node** %base147, align 8, !dbg !7944
  %base148 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !7944
  %76 = bitcast %struct.tree_base* %base148 to i64*, !dbg !7944
  %bf.load149 = load i64, i64* %76, align 8, !dbg !7944
  %bf.clear150 = and i64 %bf.load149, 65535, !dbg !7944
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !7944
  %cmp152 = icmp eq i32 %bf.cast151, 34, !dbg !7945
  br i1 %cmp152, label %if.then154, label %if.end159, !dbg !7946

if.then154:                                       ; preds = %lor.lhs.false146, %if.end139
  %77 = load %struct.access*, %struct.access** %root.addr, align 8, !dbg !7947
  %grp_unscalarized_data155 = getelementptr inbounds %struct.access, %struct.access* %77, i32 0, i32 14, !dbg !7948
  %bf.load156 = load i16, i16* %grp_unscalarized_data155, align 8, !dbg !7949
  %bf.clear157 = and i16 %bf.load156, -257, !dbg !7949
  %bf.set158 = or i16 %bf.clear157, 256, !dbg !7949
  store i16 %bf.set158, i16* %grp_unscalarized_data155, align 8, !dbg !7949
  br label %if.end159, !dbg !7947

if.end159:                                        ; preds = %if.then154, %lor.lhs.false146
  %78 = load i8, i8* %sth_created, align 1, !dbg !7950
  %tobool160 = icmp ne i8 %78, 0, !dbg !7950
  br i1 %tobool160, label %if.then161, label %if.end162, !dbg !7952

if.then161:                                       ; preds = %if.end159
  store i8 1, i8* %retval, align 1, !dbg !7953
  br label %return, !dbg !7953

if.end162:                                        ; preds = %if.end159
  store i8 0, i8* %retval, align 1, !dbg !7954
  br label %return, !dbg !7954

return:                                           ; preds = %if.end162, %if.then161, %if.then134
  %79 = load i8, i8* %retval, align 1, !dbg !7955
  ret i8 %79, !dbg !7955
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @expr_with_var_bounded_array_refs_p(%union.tree_node* %expr) #0 !dbg !7956 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !7957, metadata !DIExpression()), !dbg !7958
  br label %while.cond, !dbg !7959

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7960
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !7961
  %tobool = icmp ne i8 %call, 0, !dbg !7959
  br i1 %tobool, label %while.body, label %while.end, !dbg !7959

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7962
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7962
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7962
  %bf.load = load i64, i64* %2, align 8, !dbg !7962
  %bf.clear = and i64 %bf.load, 65535, !dbg !7962
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7962
  %cmp = icmp eq i32 %bf.cast, 45, !dbg !7965
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7966

land.lhs.true:                                    ; preds = %while.body
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7967
  %call1 = call %union.tree_node* @array_ref_low_bound(%union.tree_node* %3), !dbg !7968
  %call2 = call i32 @host_integerp(%union.tree_node* %call1, i32 0), !dbg !7969
  %tobool3 = icmp ne i32 %call2, 0, !dbg !7969
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7970

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !7971
  br label %return, !dbg !7971

if.end:                                           ; preds = %land.lhs.true, %while.body
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7972
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !7972
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7972
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7972
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7972
  store %union.tree_node* %5, %union.tree_node** %expr.addr, align 8, !dbg !7973
  br label %while.cond, !dbg !7959, !llvm.loop !7974

while.end:                                        ; preds = %while.cond
  store i8 0, i8* %retval, align 1, !dbg !7976
  br label %return, !dbg !7976

return:                                           ; preds = %while.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !7977
  ret i8 %6, !dbg !7977
}

declare dso_local %union.tree_node* @array_ref_low_bound(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @dump_access_tree_1(%struct._IO_FILE* %f, %struct.access* %access, i32 %level) #0 !dbg !7978 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %access.addr = alloca %struct.access*, align 8
  %level.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !7981, metadata !DIExpression()), !dbg !7982
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !7983, metadata !DIExpression()), !dbg !7984
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !7985, metadata !DIExpression()), !dbg !7986
  br label %do.body, !dbg !7987

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7988, metadata !DIExpression()), !dbg !7990
  store i32 0, i32* %i, align 4, !dbg !7991
  br label %for.cond, !dbg !7993

for.cond:                                         ; preds = %for.inc, %do.body
  %0 = load i32, i32* %i, align 4, !dbg !7994
  %1 = load i32, i32* %level.addr, align 4, !dbg !7996
  %cmp = icmp slt i32 %0, %1, !dbg !7997
  br i1 %cmp, label %for.body, label %for.end, !dbg !7998

for.body:                                         ; preds = %for.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7999
  %call = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i64 0, i64 0), %struct._IO_FILE* %2), !dbg !8000
  br label %for.inc, !dbg !8000

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4, !dbg !8001
  %inc = add nsw i32 %3, 1, !dbg !8001
  store i32 %inc, i32* %i, align 4, !dbg !8001
  br label %for.cond, !dbg !8002, !llvm.loop !8003

for.end:                                          ; preds = %for.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8005
  %5 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8006
  call void @dump_access(%struct._IO_FILE* %4, %struct.access* %5, i8 zeroext 1), !dbg !8007
  %6 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8008
  %first_child = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 8, !dbg !8010
  %7 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !8010
  %tobool = icmp ne %struct.access* %7, null, !dbg !8008
  br i1 %tobool, label %if.then, label %if.end, !dbg !8011

if.then:                                          ; preds = %for.end
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8012
  %9 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8013
  %first_child1 = getelementptr inbounds %struct.access, %struct.access* %9, i32 0, i32 8, !dbg !8014
  %10 = load %struct.access*, %struct.access** %first_child1, align 8, !dbg !8014
  %11 = load i32, i32* %level.addr, align 4, !dbg !8015
  %add = add nsw i32 %11, 1, !dbg !8016
  call void @dump_access_tree_1(%struct._IO_FILE* %8, %struct.access* %10, i32 %add), !dbg !8017
  br label %if.end, !dbg !8017

if.end:                                           ; preds = %if.then, %for.end
  %12 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8018
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %12, i32 0, i32 9, !dbg !8019
  %13 = load %struct.access*, %struct.access** %next_sibling, align 8, !dbg !8019
  store %struct.access* %13, %struct.access** %access.addr, align 8, !dbg !8020
  br label %do.cond, !dbg !8021

do.cond:                                          ; preds = %if.end
  %14 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8022
  %tobool2 = icmp ne %struct.access* %14, null, !dbg !8021
  br i1 %tobool2, label %do.body, label %do.end, !dbg !8021, !llvm.loop !8023

do.end:                                           ; preds = %do.cond
  ret void, !dbg !8025
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @dump_access(%struct._IO_FILE* %f, %struct.access* %access, i8 zeroext %grp) #0 !dbg !8026 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %access.addr = alloca %struct.access*, align 8
  %grp.addr = alloca i8, align 1
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !8029, metadata !DIExpression()), !dbg !8030
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !8031, metadata !DIExpression()), !dbg !8032
  store i8 %grp, i8* %grp.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %grp.addr, metadata !8033, metadata !DIExpression()), !dbg !8034
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8035
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i64 0, i64 0)), !dbg !8036
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8037
  %2 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8038
  %base = getelementptr inbounds %struct.access, %struct.access* %2, i32 0, i32 2, !dbg !8038
  %3 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8038
  %decl_minimal = bitcast %union.tree_node* %3 to %struct.tree_decl_minimal*, !dbg !8038
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !8038
  %4 = load i32, i32* %uid, align 4, !dbg !8038
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.36, i64 0, i64 0), i32 %4), !dbg !8039
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8040
  %6 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8041
  %base2 = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 2, !dbg !8042
  %7 = load %union.tree_node*, %union.tree_node** %base2, align 8, !dbg !8042
  call void @print_generic_expr(%struct._IO_FILE* %5, %union.tree_node* %7, i32 0), !dbg !8043
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8044
  %9 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8045
  %offset = getelementptr inbounds %struct.access, %struct.access* %9, i32 0, i32 0, !dbg !8046
  %10 = load i64, i64* %offset, align 8, !dbg !8046
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.37, i64 0, i64 0), i64 %10), !dbg !8047
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8048
  %12 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8049
  %size = getelementptr inbounds %struct.access, %struct.access* %12, i32 0, i32 1, !dbg !8050
  %13 = load i64, i64* %size, align 8, !dbg !8050
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.38, i64 0, i64 0), i64 %13), !dbg !8051
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8052
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.39, i64 0, i64 0)), !dbg !8053
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8054
  %16 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8055
  %expr = getelementptr inbounds %struct.access, %struct.access* %16, i32 0, i32 3, !dbg !8056
  %17 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8056
  call void @print_generic_expr(%struct._IO_FILE* %15, %union.tree_node* %17, i32 0), !dbg !8057
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8058
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40, i64 0, i64 0)), !dbg !8059
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8060
  %20 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8061
  %type = getelementptr inbounds %struct.access, %struct.access* %20, i32 0, i32 4, !dbg !8062
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8062
  call void @print_generic_expr(%struct._IO_FILE* %19, %union.tree_node* %21, i32 0), !dbg !8063
  %22 = load i8, i8* %grp.addr, align 1, !dbg !8064
  %tobool = icmp ne i8 %22, 0, !dbg !8064
  br i1 %tobool, label %if.then, label %if.else, !dbg !8066

if.then:                                          ; preds = %entry
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8067
  %24 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8068
  %grp_write = getelementptr inbounds %struct.access, %struct.access* %24, i32 0, i32 14, !dbg !8069
  %bf.load = load i16, i16* %grp_write, align 8, !dbg !8069
  %bf.lshr = lshr i16 %bf.load, 3, !dbg !8069
  %bf.clear = and i16 %bf.lshr, 1, !dbg !8069
  %bf.cast = zext i16 %bf.clear to i32, !dbg !8069
  %25 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8070
  %total_scalarization = getelementptr inbounds %struct.access, %struct.access* %25, i32 0, i32 14, !dbg !8071
  %bf.load7 = load i16, i16* %total_scalarization, align 8, !dbg !8071
  %bf.lshr8 = lshr i16 %bf.load7, 1, !dbg !8071
  %bf.clear9 = and i16 %bf.lshr8, 1, !dbg !8071
  %bf.cast10 = zext i16 %bf.clear9 to i32, !dbg !8071
  %26 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8072
  %grp_read = getelementptr inbounds %struct.access, %struct.access* %26, i32 0, i32 14, !dbg !8073
  %bf.load11 = load i16, i16* %grp_read, align 8, !dbg !8073
  %bf.lshr12 = lshr i16 %bf.load11, 4, !dbg !8073
  %bf.clear13 = and i16 %bf.lshr12, 1, !dbg !8073
  %bf.cast14 = zext i16 %bf.clear13 to i32, !dbg !8073
  %27 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8074
  %grp_hint = getelementptr inbounds %struct.access, %struct.access* %27, i32 0, i32 14, !dbg !8075
  %bf.load15 = load i16, i16* %grp_hint, align 8, !dbg !8075
  %bf.lshr16 = lshr i16 %bf.load15, 5, !dbg !8075
  %bf.clear17 = and i16 %bf.lshr16, 1, !dbg !8075
  %bf.cast18 = zext i16 %bf.clear17 to i32, !dbg !8075
  %28 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8076
  %grp_covered = getelementptr inbounds %struct.access, %struct.access* %28, i32 0, i32 14, !dbg !8077
  %bf.load19 = load i16, i16* %grp_covered, align 8, !dbg !8077
  %bf.lshr20 = lshr i16 %bf.load19, 6, !dbg !8077
  %bf.clear21 = and i16 %bf.lshr20, 1, !dbg !8077
  %bf.cast22 = zext i16 %bf.clear21 to i32, !dbg !8077
  %29 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8078
  %grp_unscalarizable_region = getelementptr inbounds %struct.access, %struct.access* %29, i32 0, i32 14, !dbg !8079
  %bf.load23 = load i16, i16* %grp_unscalarizable_region, align 8, !dbg !8079
  %bf.lshr24 = lshr i16 %bf.load23, 7, !dbg !8079
  %bf.clear25 = and i16 %bf.lshr24, 1, !dbg !8079
  %bf.cast26 = zext i16 %bf.clear25 to i32, !dbg !8079
  %30 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8080
  %grp_unscalarized_data = getelementptr inbounds %struct.access, %struct.access* %30, i32 0, i32 14, !dbg !8081
  %bf.load27 = load i16, i16* %grp_unscalarized_data, align 8, !dbg !8081
  %bf.lshr28 = lshr i16 %bf.load27, 8, !dbg !8081
  %bf.clear29 = and i16 %bf.lshr28, 1, !dbg !8081
  %bf.cast30 = zext i16 %bf.clear29 to i32, !dbg !8081
  %31 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8082
  %grp_partial_lhs = getelementptr inbounds %struct.access, %struct.access* %31, i32 0, i32 14, !dbg !8083
  %bf.load31 = load i16, i16* %grp_partial_lhs, align 8, !dbg !8083
  %bf.lshr32 = lshr i16 %bf.load31, 9, !dbg !8083
  %bf.clear33 = and i16 %bf.lshr32, 1, !dbg !8083
  %bf.cast34 = zext i16 %bf.clear33 to i32, !dbg !8083
  %32 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8084
  %grp_to_be_replaced = getelementptr inbounds %struct.access, %struct.access* %32, i32 0, i32 14, !dbg !8085
  %bf.load35 = load i16, i16* %grp_to_be_replaced, align 8, !dbg !8085
  %bf.lshr36 = lshr i16 %bf.load35, 10, !dbg !8085
  %bf.clear37 = and i16 %bf.lshr36, 1, !dbg !8085
  %bf.cast38 = zext i16 %bf.clear37 to i32, !dbg !8085
  %33 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8086
  %grp_maybe_modified = getelementptr inbounds %struct.access, %struct.access* %33, i32 0, i32 14, !dbg !8087
  %bf.load39 = load i16, i16* %grp_maybe_modified, align 8, !dbg !8087
  %bf.lshr40 = lshr i16 %bf.load39, 11, !dbg !8087
  %bf.clear41 = and i16 %bf.lshr40, 1, !dbg !8087
  %bf.cast42 = zext i16 %bf.clear41 to i32, !dbg !8087
  %34 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8088
  %grp_not_necessarilly_dereferenced = getelementptr inbounds %struct.access, %struct.access* %34, i32 0, i32 14, !dbg !8089
  %bf.load43 = load i16, i16* %grp_not_necessarilly_dereferenced, align 8, !dbg !8089
  %bf.lshr44 = lshr i16 %bf.load43, 13, !dbg !8089
  %bf.clear45 = and i16 %bf.lshr44, 1, !dbg !8089
  %bf.cast46 = zext i16 %bf.clear45 to i32, !dbg !8089
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([264 x i8], [264 x i8]* @.str.41, i64 0, i64 0), i32 %bf.cast, i32 %bf.cast10, i32 %bf.cast14, i32 %bf.cast18, i32 %bf.cast22, i32 %bf.cast26, i32 %bf.cast30, i32 %bf.cast34, i32 %bf.cast38, i32 %bf.cast42, i32 %bf.cast46), !dbg !8090
  br label %if.end, !dbg !8090

if.else:                                          ; preds = %entry
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !8091
  %36 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8092
  %write = getelementptr inbounds %struct.access, %struct.access* %36, i32 0, i32 14, !dbg !8093
  %bf.load48 = load i16, i16* %write, align 8, !dbg !8093
  %bf.clear49 = and i16 %bf.load48, 1, !dbg !8093
  %bf.cast50 = zext i16 %bf.clear49 to i32, !dbg !8093
  %37 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8094
  %total_scalarization51 = getelementptr inbounds %struct.access, %struct.access* %37, i32 0, i32 14, !dbg !8095
  %bf.load52 = load i16, i16* %total_scalarization51, align 8, !dbg !8095
  %bf.lshr53 = lshr i16 %bf.load52, 1, !dbg !8095
  %bf.clear54 = and i16 %bf.lshr53, 1, !dbg !8095
  %bf.cast55 = zext i16 %bf.clear54 to i32, !dbg !8095
  %38 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8096
  %grp_partial_lhs56 = getelementptr inbounds %struct.access, %struct.access* %38, i32 0, i32 14, !dbg !8097
  %bf.load57 = load i16, i16* %grp_partial_lhs56, align 8, !dbg !8097
  %bf.lshr58 = lshr i16 %bf.load57, 9, !dbg !8097
  %bf.clear59 = and i16 %bf.lshr58, 1, !dbg !8097
  %bf.cast60 = zext i16 %bf.clear59 to i32, !dbg !8097
  %call61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.42, i64 0, i64 0), i32 %bf.cast50, i32 %bf.cast55, i32 %bf.cast60), !dbg !8098
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !8099
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @get_access_for_expr(%union.tree_node* %expr) #0 !dbg !8100 {
entry:
  %retval = alloca %struct.access*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %offset = alloca i64, align 8
  %size = alloca i64, align 8
  %max_size = alloca i64, align 8
  %base = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8101, metadata !DIExpression()), !dbg !8102
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !8103, metadata !DIExpression()), !dbg !8104
  call void @llvm.dbg.declare(metadata i64* %size, metadata !8105, metadata !DIExpression()), !dbg !8106
  call void @llvm.dbg.declare(metadata i64* %max_size, metadata !8107, metadata !DIExpression()), !dbg !8108
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !8109, metadata !DIExpression()), !dbg !8110
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8111
  %base1 = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8111
  %1 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8111
  %bf.load = load i64, i64* %1, align 8, !dbg !8111
  %bf.clear = and i64 %bf.load, 65535, !dbg !8111
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8111
  %cmp = icmp eq i32 %bf.cast, 118, !dbg !8113
  br i1 %cmp, label %if.then, label %if.end, !dbg !8114

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8115
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !8115
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8115
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8115
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8115
  store %union.tree_node* %3, %union.tree_node** %expr.addr, align 8, !dbg !8116
  br label %if.end, !dbg !8117

if.end:                                           ; preds = %if.then, %entry
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8118
  %call = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %4, i64* %offset, i64* %size, i64* %max_size), !dbg !8119
  store %union.tree_node* %call, %union.tree_node** %base, align 8, !dbg !8120
  %5 = load i64, i64* %max_size, align 8, !dbg !8121
  %cmp2 = icmp eq i64 %5, -1, !dbg !8123
  br i1 %cmp2, label %if.then9, label %lor.lhs.false, !dbg !8124

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8125
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !8125
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !8125
  %bf.load4 = load i64, i64* %7, align 8, !dbg !8125
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !8125
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !8125
  %idxprom = sext i32 %bf.cast6 to i64, !dbg !8125
  %arrayidx7 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8125
  %8 = load i32, i32* %arrayidx7, align 4, !dbg !8125
  %cmp8 = icmp eq i32 %8, 3, !dbg !8125
  br i1 %cmp8, label %if.end10, label %if.then9, !dbg !8126

if.then9:                                         ; preds = %lor.lhs.false, %if.end
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !8127
  br label %return, !dbg !8127

if.end10:                                         ; preds = %lor.lhs.false
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !8128
  %10 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8130
  %decl_minimal = bitcast %union.tree_node* %10 to %struct.tree_decl_minimal*, !dbg !8130
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !8130
  %11 = load i32, i32* %uid, align 4, !dbg !8130
  %call11 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %9, i32 %11), !dbg !8131
  %tobool = icmp ne i32 %call11, 0, !dbg !8131
  br i1 %tobool, label %if.end13, label %if.then12, !dbg !8132

if.then12:                                        ; preds = %if.end10
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !8133
  br label %return, !dbg !8133

if.end13:                                         ; preds = %if.end10
  %12 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8134
  %13 = load i64, i64* %offset, align 8, !dbg !8135
  %14 = load i64, i64* %max_size, align 8, !dbg !8136
  %call14 = call %struct.access* @get_var_base_offset_size_access(%union.tree_node* %12, i64 %13, i64 %14), !dbg !8137
  store %struct.access* %call14, %struct.access** %retval, align 8, !dbg !8138
  br label %return, !dbg !8138

return:                                           ; preds = %if.end13, %if.then12, %if.then9
  %15 = load %struct.access*, %struct.access** %retval, align 8, !dbg !8139
  ret %struct.access* %15, !dbg !8139
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_access_replacement(%struct.access* %access) #0 !dbg !8140 {
entry:
  %access.addr = alloca %struct.access*, align 8
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !8143, metadata !DIExpression()), !dbg !8144
  %0 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8145
  %grp_to_be_replaced = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 14, !dbg !8145
  %bf.load = load i16, i16* %grp_to_be_replaced, align 8, !dbg !8145
  %bf.lshr = lshr i16 %bf.load, 10, !dbg !8145
  %bf.clear = and i16 %bf.lshr, 1, !dbg !8145
  %bf.cast = zext i16 %bf.clear to i32, !dbg !8145
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8145
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8145

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 1709, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8145
  br label %cond.end, !dbg !8145

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8145

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8145
  %1 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8146
  %replacement_decl = getelementptr inbounds %struct.access, %struct.access* %1, i32 0, i32 13, !dbg !8148
  %2 = load %union.tree_node*, %union.tree_node** %replacement_decl, align 8, !dbg !8148
  %tobool1 = icmp ne %union.tree_node* %2, null, !dbg !8146
  br i1 %tobool1, label %if.end, label %if.then, !dbg !8149

if.then:                                          ; preds = %cond.end
  %3 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8150
  %call = call %union.tree_node* @create_access_replacement(%struct.access* %3), !dbg !8151
  %4 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8152
  %replacement_decl2 = getelementptr inbounds %struct.access, %struct.access* %4, i32 0, i32 13, !dbg !8153
  store %union.tree_node* %call, %union.tree_node** %replacement_decl2, align 8, !dbg !8154
  br label %if.end, !dbg !8152

if.end:                                           ; preds = %if.then, %cond.end
  %5 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8155
  %replacement_decl3 = getelementptr inbounds %struct.access, %struct.access* %5, i32 0, i32 13, !dbg !8156
  %6 = load %union.tree_node*, %union.tree_node** %replacement_decl3, align 8, !dbg !8156
  ret %union.tree_node* %6, !dbg !8157
}

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @generate_subtree_copies(%struct.access* %access, %union.tree_node* %agg, i64 %top_offset, i64 %start_offset, i64 %chunk_size, %struct.gimple_stmt_iterator* %gsi, i8 zeroext %write, i8 zeroext %insert_after) #0 !dbg !8158 {
entry:
  %access.addr = alloca %struct.access*, align 8
  %agg.addr = alloca %union.tree_node*, align 8
  %top_offset.addr = alloca i64, align 8
  %start_offset.addr = alloca i64, align 8
  %chunk_size.addr = alloca i64, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %write.addr = alloca i8, align 1
  %insert_after.addr = alloca i8, align 1
  %expr = alloca %union.tree_node*, align 8
  %repl = alloca %union.tree_node*, align 8
  %ref_found = alloca i8, align 1
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !8161, metadata !DIExpression()), !dbg !8162
  store %union.tree_node* %agg, %union.tree_node** %agg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %agg.addr, metadata !8163, metadata !DIExpression()), !dbg !8164
  store i64 %top_offset, i64* %top_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %top_offset.addr, metadata !8165, metadata !DIExpression()), !dbg !8166
  store i64 %start_offset, i64* %start_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %start_offset.addr, metadata !8167, metadata !DIExpression()), !dbg !8168
  store i64 %chunk_size, i64* %chunk_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %chunk_size.addr, metadata !8169, metadata !DIExpression()), !dbg !8170
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !8171, metadata !DIExpression()), !dbg !8172
  store i8 %write, i8* %write.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %write.addr, metadata !8173, metadata !DIExpression()), !dbg !8174
  store i8 %insert_after, i8* %insert_after.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %insert_after.addr, metadata !8175, metadata !DIExpression()), !dbg !8176
  br label %do.body, !dbg !8177

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !8178, metadata !DIExpression()), !dbg !8180
  %0 = load %union.tree_node*, %union.tree_node** %agg.addr, align 8, !dbg !8181
  store %union.tree_node* %0, %union.tree_node** %expr, align 8, !dbg !8180
  %1 = load i64, i64* %chunk_size.addr, align 8, !dbg !8182
  %tobool = icmp ne i64 %1, 0, !dbg !8182
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8184

land.lhs.true:                                    ; preds = %do.body
  %2 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8185
  %offset = getelementptr inbounds %struct.access, %struct.access* %2, i32 0, i32 0, !dbg !8186
  %3 = load i64, i64* %offset, align 8, !dbg !8186
  %4 = load i64, i64* %start_offset.addr, align 8, !dbg !8187
  %5 = load i64, i64* %chunk_size.addr, align 8, !dbg !8188
  %add = add nsw i64 %4, %5, !dbg !8189
  %cmp = icmp sge i64 %3, %add, !dbg !8190
  br i1 %cmp, label %if.then, label %if.end, !dbg !8191

if.then:                                          ; preds = %land.lhs.true
  br label %do.end, !dbg !8192

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8193
  %grp_to_be_replaced = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 14, !dbg !8195
  %bf.load = load i16, i16* %grp_to_be_replaced, align 8, !dbg !8195
  %bf.lshr = lshr i16 %bf.load, 10, !dbg !8195
  %bf.clear = and i16 %bf.lshr, 1, !dbg !8195
  %bf.cast = zext i16 %bf.clear to i32, !dbg !8195
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !8193
  br i1 %tobool1, label %land.lhs.true2, label %if.end51, !dbg !8196

land.lhs.true2:                                   ; preds = %if.end
  %7 = load i64, i64* %chunk_size.addr, align 8, !dbg !8197
  %cmp3 = icmp eq i64 %7, 0, !dbg !8198
  br i1 %cmp3, label %if.then7, label %lor.lhs.false, !dbg !8199

lor.lhs.false:                                    ; preds = %land.lhs.true2
  %8 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8200
  %offset4 = getelementptr inbounds %struct.access, %struct.access* %8, i32 0, i32 0, !dbg !8201
  %9 = load i64, i64* %offset4, align 8, !dbg !8201
  %10 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8202
  %size = getelementptr inbounds %struct.access, %struct.access* %10, i32 0, i32 1, !dbg !8203
  %11 = load i64, i64* %size, align 8, !dbg !8203
  %add5 = add nsw i64 %9, %11, !dbg !8204
  %12 = load i64, i64* %start_offset.addr, align 8, !dbg !8205
  %cmp6 = icmp sgt i64 %add5, %12, !dbg !8206
  br i1 %cmp6, label %if.then7, label %if.end51, !dbg !8207

if.then7:                                         ; preds = %lor.lhs.false, %land.lhs.true2
  call void @llvm.dbg.declare(metadata %union.tree_node** %repl, metadata !8208, metadata !DIExpression()), !dbg !8210
  %13 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8211
  %call = call %union.tree_node* @get_access_replacement(%struct.access* %13), !dbg !8212
  store %union.tree_node* %call, %union.tree_node** %repl, align 8, !dbg !8210
  call void @llvm.dbg.declare(metadata i8* %ref_found, metadata !8213, metadata !DIExpression()), !dbg !8214
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8215, metadata !DIExpression()), !dbg !8216
  %14 = load %union.tree_node*, %union.tree_node** %agg.addr, align 8, !dbg !8217
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !8217
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8217
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8217
  %16 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8218
  %offset8 = getelementptr inbounds %struct.access, %struct.access* %16, i32 0, i32 0, !dbg !8219
  %17 = load i64, i64* %offset8, align 8, !dbg !8219
  %18 = load i64, i64* %top_offset.addr, align 8, !dbg !8220
  %sub = sub nsw i64 %17, %18, !dbg !8221
  %19 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8222
  %type9 = getelementptr inbounds %struct.access, %struct.access* %19, i32 0, i32 4, !dbg !8223
  %20 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !8223
  %call10 = call zeroext i8 @build_ref_for_offset(%union.tree_node** %expr, %union.tree_node* %15, i64 %sub, %union.tree_node* %20, i8 zeroext 0), !dbg !8224
  store i8 %call10, i8* %ref_found, align 1, !dbg !8225
  %21 = load i8, i8* %ref_found, align 1, !dbg !8226
  %tobool11 = icmp ne i8 %21, 0, !dbg !8226
  br i1 %tobool11, label %cond.false, label %cond.true, !dbg !8226

cond.true:                                        ; preds = %if.then7
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 2190, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8226
  br label %cond.end, !dbg !8226

cond.false:                                       ; preds = %if.then7
  br label %cond.end, !dbg !8226

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8226
  %22 = load i8, i8* %write.addr, align 1, !dbg !8227
  %tobool12 = icmp ne i8 %22, 0, !dbg !8227
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !8229

if.then13:                                        ; preds = %cond.end
  %23 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8230
  %grp_partial_lhs = getelementptr inbounds %struct.access, %struct.access* %23, i32 0, i32 14, !dbg !8233
  %bf.load14 = load i16, i16* %grp_partial_lhs, align 8, !dbg !8233
  %bf.lshr15 = lshr i16 %bf.load14, 9, !dbg !8233
  %bf.clear16 = and i16 %bf.lshr15, 1, !dbg !8233
  %bf.cast17 = zext i16 %bf.clear16 to i32, !dbg !8233
  %tobool18 = icmp ne i32 %bf.cast17, 0, !dbg !8230
  br i1 %tobool18, label %if.then19, label %if.end25, !dbg !8234

if.then19:                                        ; preds = %if.then13
  %24 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8235
  %25 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8236
  %26 = load i8, i8* %insert_after.addr, align 1, !dbg !8237
  %tobool20 = icmp ne i8 %26, 0, !dbg !8238
  %lnot = xor i1 %tobool20, true, !dbg !8238
  %lnot.ext = zext i1 %lnot to i32, !dbg !8238
  %conv = trunc i32 %lnot.ext to i8, !dbg !8238
  %27 = load i8, i8* %insert_after.addr, align 1, !dbg !8239
  %conv21 = zext i8 %27 to i32, !dbg !8239
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !8239
  %28 = zext i1 %tobool22 to i64, !dbg !8239
  %cond23 = select i1 %tobool22, i32 0, i32 1, !dbg !8239
  %call24 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %24, %union.tree_node* %25, i8 zeroext 1, %union.tree_node* null, i8 zeroext %conv, i32 %cond23), !dbg !8240
  store %union.tree_node* %call24, %union.tree_node** %expr, align 8, !dbg !8241
  br label %if.end25, !dbg !8242

if.end25:                                         ; preds = %if.then19, %if.then13
  %29 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8243
  %30 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8243
  %call26 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %29, %union.tree_node* %30), !dbg !8243
  store %union.gimple_statement_d* %call26, %union.gimple_statement_d** %stmt, align 8, !dbg !8244
  br label %if.end46, !dbg !8245

if.else:                                          ; preds = %cond.end
  %31 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8246
  %base = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !8246
  %32 = bitcast %struct.tree_base* %base to i64*, !dbg !8246
  %bf.load27 = load i64, i64* %32, align 8, !dbg !8248
  %bf.clear28 = and i64 %bf.load27, -8388609, !dbg !8248
  %bf.set = or i64 %bf.clear28, 8388608, !dbg !8248
  store i64 %bf.set, i64* %32, align 8, !dbg !8248
  %33 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8249
  %grp_partial_lhs29 = getelementptr inbounds %struct.access, %struct.access* %33, i32 0, i32 14, !dbg !8251
  %bf.load30 = load i16, i16* %grp_partial_lhs29, align 8, !dbg !8251
  %bf.lshr31 = lshr i16 %bf.load30, 9, !dbg !8251
  %bf.clear32 = and i16 %bf.lshr31, 1, !dbg !8251
  %bf.cast33 = zext i16 %bf.clear32 to i32, !dbg !8251
  %tobool34 = icmp ne i32 %bf.cast33, 0, !dbg !8249
  br i1 %tobool34, label %if.then35, label %if.end44, !dbg !8252

if.then35:                                        ; preds = %if.else
  %34 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8253
  %35 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8254
  %36 = load i8, i8* %insert_after.addr, align 1, !dbg !8255
  %tobool36 = icmp ne i8 %36, 0, !dbg !8256
  %lnot37 = xor i1 %tobool36, true, !dbg !8256
  %lnot.ext38 = zext i1 %lnot37 to i32, !dbg !8256
  %conv39 = trunc i32 %lnot.ext38 to i8, !dbg !8256
  %37 = load i8, i8* %insert_after.addr, align 1, !dbg !8257
  %conv40 = zext i8 %37 to i32, !dbg !8257
  %tobool41 = icmp ne i32 %conv40, 0, !dbg !8257
  %38 = zext i1 %tobool41 to i64, !dbg !8257
  %cond42 = select i1 %tobool41, i32 0, i32 1, !dbg !8257
  %call43 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %34, %union.tree_node* %35, i8 zeroext 1, %union.tree_node* null, i8 zeroext %conv39, i32 %cond42), !dbg !8258
  store %union.tree_node* %call43, %union.tree_node** %repl, align 8, !dbg !8259
  br label %if.end44, !dbg !8260

if.end44:                                         ; preds = %if.then35, %if.else
  %39 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8261
  %40 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8261
  %call45 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %39, %union.tree_node* %40), !dbg !8261
  store %union.gimple_statement_d* %call45, %union.gimple_statement_d** %stmt, align 8, !dbg !8262
  br label %if.end46

if.end46:                                         ; preds = %if.end44, %if.end25
  %41 = load i8, i8* %insert_after.addr, align 1, !dbg !8263
  %tobool47 = icmp ne i8 %41, 0, !dbg !8263
  br i1 %tobool47, label %if.then48, label %if.else49, !dbg !8265

if.then48:                                        ; preds = %if.end46
  %42 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8266
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8267
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %42, %union.gimple_statement_d* %43, i32 0), !dbg !8268
  br label %if.end50, !dbg !8268

if.else49:                                        ; preds = %if.end46
  %44 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8269
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8270
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %44, %union.gimple_statement_d* %45, i32 1), !dbg !8271
  br label %if.end50

if.end50:                                         ; preds = %if.else49, %if.then48
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8272
  call void @update_stmt(%union.gimple_statement_d* %46), !dbg !8273
  %47 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 2), align 4, !dbg !8274
  %inc = add nsw i32 %47, 1, !dbg !8274
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 2), align 4, !dbg !8274
  br label %if.end51, !dbg !8275

if.end51:                                         ; preds = %if.end50, %lor.lhs.false, %if.end
  %48 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8276
  %first_child = getelementptr inbounds %struct.access, %struct.access* %48, i32 0, i32 8, !dbg !8278
  %49 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !8278
  %tobool52 = icmp ne %struct.access* %49, null, !dbg !8276
  br i1 %tobool52, label %if.then53, label %if.end55, !dbg !8279

if.then53:                                        ; preds = %if.end51
  %50 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8280
  %first_child54 = getelementptr inbounds %struct.access, %struct.access* %50, i32 0, i32 8, !dbg !8281
  %51 = load %struct.access*, %struct.access** %first_child54, align 8, !dbg !8281
  %52 = load %union.tree_node*, %union.tree_node** %agg.addr, align 8, !dbg !8282
  %53 = load i64, i64* %top_offset.addr, align 8, !dbg !8283
  %54 = load i64, i64* %start_offset.addr, align 8, !dbg !8284
  %55 = load i64, i64* %chunk_size.addr, align 8, !dbg !8285
  %56 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8286
  %57 = load i8, i8* %write.addr, align 1, !dbg !8287
  %58 = load i8, i8* %insert_after.addr, align 1, !dbg !8288
  call void @generate_subtree_copies(%struct.access* %51, %union.tree_node* %52, i64 %53, i64 %54, i64 %55, %struct.gimple_stmt_iterator* %56, i8 zeroext %57, i8 zeroext %58), !dbg !8289
  br label %if.end55, !dbg !8289

if.end55:                                         ; preds = %if.then53, %if.end51
  %59 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8290
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %59, i32 0, i32 9, !dbg !8291
  %60 = load %struct.access*, %struct.access** %next_sibling, align 8, !dbg !8291
  store %struct.access* %60, %struct.access** %access.addr, align 8, !dbg !8292
  br label %do.cond, !dbg !8293

do.cond:                                          ; preds = %if.end55
  %61 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8294
  %tobool56 = icmp ne %struct.access* %61, null, !dbg !8293
  br i1 %tobool56, label %do.body, label %do.end, !dbg !8293, !llvm.loop !8295

do.end:                                           ; preds = %if.then, %do.cond
  ret void, !dbg !8297
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @get_var_base_offset_size_access(%union.tree_node* %base, i64 %offset, i64 %size) #0 !dbg !8298 {
entry:
  %retval = alloca %struct.access*, align 8
  %base.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %access = alloca %struct.access*, align 8
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !8299, metadata !DIExpression()), !dbg !8300
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !8301, metadata !DIExpression()), !dbg !8302
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !8303, metadata !DIExpression()), !dbg !8304
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !8305, metadata !DIExpression()), !dbg !8306
  %0 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8307
  %call = call %struct.access* @get_first_repr_for_decl(%union.tree_node* %0), !dbg !8308
  store %struct.access* %call, %struct.access** %access, align 8, !dbg !8309
  br label %while.cond, !dbg !8310

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.access*, %struct.access** %access, align 8, !dbg !8311
  %tobool = icmp ne %struct.access* %1, null, !dbg !8311
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8312

land.rhs:                                         ; preds = %while.cond
  %2 = load %struct.access*, %struct.access** %access, align 8, !dbg !8313
  %offset1 = getelementptr inbounds %struct.access, %struct.access* %2, i32 0, i32 0, !dbg !8314
  %3 = load i64, i64* %offset1, align 8, !dbg !8314
  %4 = load %struct.access*, %struct.access** %access, align 8, !dbg !8315
  %size2 = getelementptr inbounds %struct.access, %struct.access* %4, i32 0, i32 1, !dbg !8316
  %5 = load i64, i64* %size2, align 8, !dbg !8316
  %add = add nsw i64 %3, %5, !dbg !8317
  %6 = load i64, i64* %offset.addr, align 8, !dbg !8318
  %cmp = icmp sle i64 %add, %6, !dbg !8319
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !8320
  br i1 %7, label %while.body, label %while.end, !dbg !8310

while.body:                                       ; preds = %land.end
  %8 = load %struct.access*, %struct.access** %access, align 8, !dbg !8321
  %next_grp = getelementptr inbounds %struct.access, %struct.access* %8, i32 0, i32 6, !dbg !8322
  %9 = load %struct.access*, %struct.access** %next_grp, align 8, !dbg !8322
  store %struct.access* %9, %struct.access** %access, align 8, !dbg !8323
  br label %while.cond, !dbg !8310, !llvm.loop !8324

while.end:                                        ; preds = %land.end
  %10 = load %struct.access*, %struct.access** %access, align 8, !dbg !8325
  %tobool3 = icmp ne %struct.access* %10, null, !dbg !8325
  br i1 %tobool3, label %if.end, label %if.then, !dbg !8327

if.then:                                          ; preds = %while.end
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !8328
  br label %return, !dbg !8328

if.end:                                           ; preds = %while.end
  %11 = load %struct.access*, %struct.access** %access, align 8, !dbg !8329
  %12 = load i64, i64* %offset.addr, align 8, !dbg !8330
  %13 = load i64, i64* %size.addr, align 8, !dbg !8331
  %call4 = call %struct.access* @find_access_in_subtree(%struct.access* %11, i64 %12, i64 %13), !dbg !8332
  store %struct.access* %call4, %struct.access** %retval, align 8, !dbg !8333
  br label %return, !dbg !8333

return:                                           ; preds = %if.end, %if.then
  %14 = load %struct.access*, %struct.access** %retval, align 8, !dbg !8334
  ret %struct.access* %14, !dbg !8334
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @find_access_in_subtree(%struct.access* %access, i64 %offset, i64 %size) #0 !dbg !8335 {
entry:
  %access.addr = alloca %struct.access*, align 8
  %offset.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %child = alloca %struct.access*, align 8
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !8338, metadata !DIExpression()), !dbg !8339
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !8340, metadata !DIExpression()), !dbg !8341
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !8342, metadata !DIExpression()), !dbg !8343
  br label %while.cond, !dbg !8344

while.cond:                                       ; preds = %while.end, %entry
  %0 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8345
  %tobool = icmp ne %struct.access* %0, null, !dbg !8345
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8346

land.rhs:                                         ; preds = %while.cond
  %1 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8347
  %offset1 = getelementptr inbounds %struct.access, %struct.access* %1, i32 0, i32 0, !dbg !8348
  %2 = load i64, i64* %offset1, align 8, !dbg !8348
  %3 = load i64, i64* %offset.addr, align 8, !dbg !8349
  %cmp = icmp ne i64 %2, %3, !dbg !8350
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !8351

lor.rhs:                                          ; preds = %land.rhs
  %4 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8352
  %size2 = getelementptr inbounds %struct.access, %struct.access* %4, i32 0, i32 1, !dbg !8353
  %5 = load i64, i64* %size2, align 8, !dbg !8353
  %6 = load i64, i64* %size.addr, align 8, !dbg !8354
  %cmp3 = icmp ne i64 %5, %6, !dbg !8355
  br label %lor.end, !dbg !8351

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %7 = phi i1 [ true, %land.rhs ], [ %cmp3, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %7, %lor.end ], !dbg !8356
  br i1 %8, label %while.body, label %while.end12, !dbg !8344

while.body:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.access** %child, metadata !8357, metadata !DIExpression()), !dbg !8359
  %9 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8360
  %first_child = getelementptr inbounds %struct.access, %struct.access* %9, i32 0, i32 8, !dbg !8361
  %10 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !8361
  store %struct.access* %10, %struct.access** %child, align 8, !dbg !8359
  br label %while.cond4, !dbg !8362

while.cond4:                                      ; preds = %while.body11, %while.body
  %11 = load %struct.access*, %struct.access** %child, align 8, !dbg !8363
  %tobool5 = icmp ne %struct.access* %11, null, !dbg !8363
  br i1 %tobool5, label %land.rhs6, label %land.end10, !dbg !8364

land.rhs6:                                        ; preds = %while.cond4
  %12 = load %struct.access*, %struct.access** %child, align 8, !dbg !8365
  %offset7 = getelementptr inbounds %struct.access, %struct.access* %12, i32 0, i32 0, !dbg !8366
  %13 = load i64, i64* %offset7, align 8, !dbg !8366
  %14 = load %struct.access*, %struct.access** %child, align 8, !dbg !8367
  %size8 = getelementptr inbounds %struct.access, %struct.access* %14, i32 0, i32 1, !dbg !8368
  %15 = load i64, i64* %size8, align 8, !dbg !8368
  %add = add nsw i64 %13, %15, !dbg !8369
  %16 = load i64, i64* %offset.addr, align 8, !dbg !8370
  %cmp9 = icmp sle i64 %add, %16, !dbg !8371
  br label %land.end10

land.end10:                                       ; preds = %land.rhs6, %while.cond4
  %17 = phi i1 [ false, %while.cond4 ], [ %cmp9, %land.rhs6 ], !dbg !8372
  br i1 %17, label %while.body11, label %while.end, !dbg !8362

while.body11:                                     ; preds = %land.end10
  %18 = load %struct.access*, %struct.access** %child, align 8, !dbg !8373
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %18, i32 0, i32 9, !dbg !8374
  %19 = load %struct.access*, %struct.access** %next_sibling, align 8, !dbg !8374
  store %struct.access* %19, %struct.access** %child, align 8, !dbg !8375
  br label %while.cond4, !dbg !8362, !llvm.loop !8376

while.end:                                        ; preds = %land.end10
  %20 = load %struct.access*, %struct.access** %child, align 8, !dbg !8377
  store %struct.access* %20, %struct.access** %access.addr, align 8, !dbg !8378
  br label %while.cond, !dbg !8344, !llvm.loop !8379

while.end12:                                      ; preds = %land.end
  %21 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8381
  ret %struct.access* %21, !dbg !8382
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @create_access_replacement(%struct.access* %access) #0 !dbg !8383 {
entry:
  %access.addr = alloca %struct.access*, align 8
  %repl = alloca %union.tree_node*, align 8
  %pretty_name = alloca i8*, align 8
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !8384, metadata !DIExpression()), !dbg !8385
  call void @llvm.dbg.declare(metadata %union.tree_node** %repl, metadata !8386, metadata !DIExpression()), !dbg !8387
  %0 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8388
  %type = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 4, !dbg !8389
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8389
  %call = call %union.tree_node* @create_tmp_var(%union.tree_node* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i64 0, i64 0)), !dbg !8390
  store %union.tree_node* %call, %union.tree_node** %repl, align 8, !dbg !8391
  %2 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8392
  %call1 = call %struct.var_ann_d* @get_var_ann(%union.tree_node* %2), !dbg !8393
  %3 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8394
  %call2 = call zeroext i8 @add_referenced_var(%union.tree_node* %3), !dbg !8395
  %4 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8396
  call void @mark_sym_for_renaming(%union.tree_node* %4), !dbg !8397
  %5 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8398
  %grp_partial_lhs = getelementptr inbounds %struct.access, %struct.access* %5, i32 0, i32 14, !dbg !8400
  %bf.load = load i16, i16* %grp_partial_lhs, align 8, !dbg !8400
  %bf.lshr = lshr i16 %bf.load, 9, !dbg !8400
  %bf.clear = and i16 %bf.lshr, 1, !dbg !8400
  %bf.cast = zext i16 %bf.clear to i32, !dbg !8400
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8398
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !8401

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8402
  %type3 = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 4, !dbg !8402
  %7 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !8402
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !8402
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !8402
  %bf.load4 = load i64, i64* %8, align 8, !dbg !8402
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !8402
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !8402
  %cmp = icmp eq i32 %bf.cast6, 13, !dbg !8403
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8404

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8405
  %type7 = getelementptr inbounds %struct.access, %struct.access* %9, i32 0, i32 4, !dbg !8405
  %10 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !8405
  %base8 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !8405
  %11 = bitcast %struct.tree_base* %base8 to i64*, !dbg !8405
  %bf.load9 = load i64, i64* %11, align 8, !dbg !8405
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !8405
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !8405
  %cmp12 = icmp eq i32 %bf.cast11, 14, !dbg !8406
  br i1 %cmp12, label %if.then, label %if.end, !dbg !8407

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8408
  %decl_common = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !8408
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8408
  %13 = bitcast i40* %gimple_reg_flag to i64*, !dbg !8408
  %bf.load13 = load i64, i64* %13, align 8, !dbg !8409
  %bf.clear14 = and i64 %bf.load13, -134217729, !dbg !8409
  %bf.set = or i64 %bf.clear14, 134217728, !dbg !8409
  store i64 %bf.set, i64* %13, align 8, !dbg !8409
  br label %if.end, !dbg !8408

if.end:                                           ; preds = %if.then, %lor.lhs.false, %entry
  %14 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8410
  %base15 = getelementptr inbounds %struct.access, %struct.access* %14, i32 0, i32 2, !dbg !8410
  %15 = load %union.tree_node*, %union.tree_node** %base15, align 8, !dbg !8410
  %decl_minimal = bitcast %union.tree_node* %15 to %struct.tree_decl_minimal*, !dbg !8410
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !8410
  %16 = load i32, i32* %locus, align 8, !dbg !8410
  %17 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8411
  %decl_minimal16 = bitcast %union.tree_node* %17 to %struct.tree_decl_minimal*, !dbg !8411
  %locus17 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal16, i32 0, i32 1, !dbg !8411
  store i32 %16, i32* %locus17, align 8, !dbg !8412
  %18 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8413
  %decl_common18 = bitcast %union.tree_node* %18 to %struct.tree_decl_common*, !dbg !8413
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common18, i32 0, i32 2, !dbg !8413
  %19 = bitcast i40* %artificial_flag to i64*, !dbg !8413
  %bf.load19 = load i64, i64* %19, align 8, !dbg !8414
  %bf.clear20 = and i64 %bf.load19, -4097, !dbg !8414
  %bf.set21 = or i64 %bf.clear20, 4096, !dbg !8414
  store i64 %bf.set21, i64* %19, align 8, !dbg !8414
  %20 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8415
  %base22 = getelementptr inbounds %struct.access, %struct.access* %20, i32 0, i32 2, !dbg !8415
  %21 = load %union.tree_node*, %union.tree_node** %base22, align 8, !dbg !8415
  %decl_common23 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !8415
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common23, i32 0, i32 2, !dbg !8415
  %22 = bitcast i40* %ignored_flag to i64*, !dbg !8415
  %bf.load24 = load i64, i64* %22, align 8, !dbg !8415
  %bf.lshr25 = lshr i64 %bf.load24, 10, !dbg !8415
  %bf.clear26 = and i64 %bf.lshr25, 1, !dbg !8415
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !8415
  %23 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8416
  %decl_common28 = bitcast %union.tree_node* %23 to %struct.tree_decl_common*, !dbg !8416
  %ignored_flag29 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common28, i32 0, i32 2, !dbg !8416
  %24 = bitcast i40* %ignored_flag29 to i64*, !dbg !8416
  %25 = zext i32 %bf.cast27 to i64, !dbg !8417
  %bf.load30 = load i64, i64* %24, align 8, !dbg !8417
  %bf.value = and i64 %25, 1, !dbg !8417
  %bf.shl = shl i64 %bf.value, 10, !dbg !8417
  %bf.clear31 = and i64 %bf.load30, -1025, !dbg !8417
  %bf.set32 = or i64 %bf.clear31, %bf.shl, !dbg !8417
  store i64 %bf.set32, i64* %24, align 8, !dbg !8417
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !8417
  %26 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8418
  %base33 = getelementptr inbounds %struct.access, %struct.access* %26, i32 0, i32 2, !dbg !8418
  %27 = load %union.tree_node*, %union.tree_node** %base33, align 8, !dbg !8418
  %decl_minimal34 = bitcast %union.tree_node* %27 to %struct.tree_decl_minimal*, !dbg !8418
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal34, i32 0, i32 3, !dbg !8418
  %28 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8418
  %tobool35 = icmp ne %union.tree_node* %28, null, !dbg !8418
  br i1 %tobool35, label %land.lhs.true36, label %if.else, !dbg !8420

land.lhs.true36:                                  ; preds = %if.end
  %29 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8421
  %base37 = getelementptr inbounds %struct.access, %struct.access* %29, i32 0, i32 2, !dbg !8421
  %30 = load %union.tree_node*, %union.tree_node** %base37, align 8, !dbg !8421
  %decl_common38 = bitcast %union.tree_node* %30 to %struct.tree_decl_common*, !dbg !8421
  %ignored_flag39 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common38, i32 0, i32 2, !dbg !8421
  %31 = bitcast i40* %ignored_flag39 to i64*, !dbg !8421
  %bf.load40 = load i64, i64* %31, align 8, !dbg !8421
  %bf.lshr41 = lshr i64 %bf.load40, 10, !dbg !8421
  %bf.clear42 = and i64 %bf.lshr41, 1, !dbg !8421
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !8421
  %tobool44 = icmp ne i32 %bf.cast43, 0, !dbg !8421
  br i1 %tobool44, label %if.else, label %land.lhs.true45, !dbg !8422

land.lhs.true45:                                  ; preds = %land.lhs.true36
  %32 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8423
  %base46 = getelementptr inbounds %struct.access, %struct.access* %32, i32 0, i32 2, !dbg !8423
  %33 = load %union.tree_node*, %union.tree_node** %base46, align 8, !dbg !8423
  %decl_common47 = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !8423
  %artificial_flag48 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common47, i32 0, i32 2, !dbg !8423
  %34 = bitcast i40* %artificial_flag48 to i64*, !dbg !8423
  %bf.load49 = load i64, i64* %34, align 8, !dbg !8423
  %bf.lshr50 = lshr i64 %bf.load49, 12, !dbg !8423
  %bf.clear51 = and i64 %bf.lshr50, 1, !dbg !8423
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !8423
  %tobool53 = icmp ne i32 %bf.cast52, 0, !dbg !8423
  br i1 %tobool53, label %if.else, label %if.then54, !dbg !8424

if.then54:                                        ; preds = %land.lhs.true45
  call void @llvm.dbg.declare(metadata i8** %pretty_name, metadata !8425, metadata !DIExpression()), !dbg !8427
  %35 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8428
  %expr = getelementptr inbounds %struct.access, %struct.access* %35, i32 0, i32 3, !dbg !8429
  %36 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8429
  %call55 = call i8* @make_fancy_name(%union.tree_node* %36), !dbg !8430
  store i8* %call55, i8** %pretty_name, align 8, !dbg !8427
  %37 = load i8*, i8** %pretty_name, align 8, !dbg !8431
  %call56 = call %union.tree_node* @get_identifier(i8* %37), !dbg !8432
  %38 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8433
  %decl_minimal57 = bitcast %union.tree_node* %38 to %struct.tree_decl_minimal*, !dbg !8433
  %name58 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal57, i32 0, i32 3, !dbg !8433
  store %union.tree_node* %call56, %union.tree_node** %name58, align 8, !dbg !8434
  %39 = load i8*, i8** %pretty_name, align 8, !dbg !8435
  %40 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !8435
  %41 = bitcast %struct._obstack_chunk* %40 to i8*, !dbg !8435
  %sub.ptr.lhs.cast = ptrtoint i8* %39 to i64, !dbg !8435
  %sub.ptr.rhs.cast = ptrtoint i8* %41 to i64, !dbg !8435
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !8435
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8435
  %42 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8435
  %cmp59 = icmp sgt i64 %42, 0, !dbg !8435
  br i1 %cmp59, label %land.lhs.true60, label %cond.false, !dbg !8435

land.lhs.true60:                                  ; preds = %if.then54
  %43 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8435
  %44 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 4), align 8, !dbg !8435
  %45 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !8435
  %46 = bitcast %struct._obstack_chunk* %45 to i8*, !dbg !8435
  %sub.ptr.lhs.cast61 = ptrtoint i8* %44 to i64, !dbg !8435
  %sub.ptr.rhs.cast62 = ptrtoint i8* %46 to i64, !dbg !8435
  %sub.ptr.sub63 = sub i64 %sub.ptr.lhs.cast61, %sub.ptr.rhs.cast62, !dbg !8435
  %cmp64 = icmp slt i64 %43, %sub.ptr.sub63, !dbg !8435
  br i1 %cmp64, label %cond.true, label %cond.false, !dbg !8435

cond.true:                                        ; preds = %land.lhs.true60
  %47 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8435
  %48 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !8435
  %49 = bitcast %struct._obstack_chunk* %48 to i8*, !dbg !8435
  %add.ptr = getelementptr inbounds i8, i8* %49, i64 %47, !dbg !8435
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 2), align 8, !dbg !8435
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8435
  %50 = ptrtoint i8* %add.ptr to i64, !dbg !8435
  br label %cond.end, !dbg !8435

cond.false:                                       ; preds = %land.lhs.true60, %if.then54
  %51 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8435
  %52 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !8435
  %53 = bitcast %struct._obstack_chunk* %52 to i8*, !dbg !8435
  %add.ptr65 = getelementptr inbounds i8, i8* %53, i64 %51, !dbg !8435
  call void @obstack_free(%struct.obstack* @name_obstack, i8* %add.ptr65), !dbg !8435
  br label %cond.end, !dbg !8435

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %50, %cond.true ], [ 0, %cond.false ], !dbg !8435
  %54 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8436
  %55 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8436
  %expr66 = getelementptr inbounds %struct.access, %struct.access* %55, i32 0, i32 3, !dbg !8436
  %56 = load %union.tree_node*, %union.tree_node** %expr66, align 8, !dbg !8436
  call void @decl_debug_expr_insert(%union.tree_node* %54, %union.tree_node* %56), !dbg !8436
  %57 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8437
  %decl_common67 = bitcast %union.tree_node* %57 to %struct.tree_decl_common*, !dbg !8437
  %debug_expr_is_from = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common67, i32 0, i32 2, !dbg !8437
  %58 = bitcast i40* %debug_expr_is_from to i64*, !dbg !8437
  %bf.load68 = load i64, i64* %58, align 8, !dbg !8438
  %bf.clear69 = and i64 %bf.load68, -16385, !dbg !8438
  %bf.set70 = or i64 %bf.clear69, 16384, !dbg !8438
  store i64 %bf.set70, i64* %58, align 8, !dbg !8438
  %59 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8439
  %base71 = getelementptr inbounds %struct.access, %struct.access* %59, i32 0, i32 2, !dbg !8439
  %60 = load %union.tree_node*, %union.tree_node** %base71, align 8, !dbg !8439
  %base72 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !8439
  %61 = bitcast %struct.tree_base* %base72 to i64*, !dbg !8439
  %bf.load73 = load i64, i64* %61, align 8, !dbg !8439
  %bf.lshr74 = lshr i64 %bf.load73, 23, !dbg !8439
  %bf.clear75 = and i64 %bf.lshr74, 1, !dbg !8439
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !8439
  %62 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8440
  %base77 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !8440
  %63 = bitcast %struct.tree_base* %base77 to i64*, !dbg !8440
  %64 = zext i32 %bf.cast76 to i64, !dbg !8441
  %bf.load78 = load i64, i64* %63, align 8, !dbg !8441
  %bf.value79 = and i64 %64, 1, !dbg !8441
  %bf.shl80 = shl i64 %bf.value79, 23, !dbg !8441
  %bf.clear81 = and i64 %bf.load78, -8388609, !dbg !8441
  %bf.set82 = or i64 %bf.clear81, %bf.shl80, !dbg !8441
  store i64 %bf.set82, i64* %63, align 8, !dbg !8441
  %bf.result.cast83 = trunc i64 %bf.value79 to i32, !dbg !8441
  br label %if.end88, !dbg !8442

if.else:                                          ; preds = %land.lhs.true45, %land.lhs.true36, %if.end
  %65 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8443
  %base84 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !8443
  %66 = bitcast %struct.tree_base* %base84 to i64*, !dbg !8443
  %bf.load85 = load i64, i64* %66, align 8, !dbg !8444
  %bf.clear86 = and i64 %bf.load85, -8388609, !dbg !8444
  %bf.set87 = or i64 %bf.clear86, 8388608, !dbg !8444
  store i64 %bf.set87, i64* %66, align 8, !dbg !8444
  br label %if.end88

if.end88:                                         ; preds = %if.else, %cond.end
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8445
  %tobool89 = icmp ne %struct._IO_FILE* %67, null, !dbg !8445
  br i1 %tobool89, label %if.then90, label %if.end96, !dbg !8447

if.then90:                                        ; preds = %if.end88
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8448
  %call91 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.44, i64 0, i64 0)), !dbg !8450
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8451
  %70 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8452
  %base92 = getelementptr inbounds %struct.access, %struct.access* %70, i32 0, i32 2, !dbg !8453
  %71 = load %union.tree_node*, %union.tree_node** %base92, align 8, !dbg !8453
  call void @print_generic_expr(%struct._IO_FILE* %69, %union.tree_node* %71, i32 0), !dbg !8454
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8455
  %73 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8456
  %offset = getelementptr inbounds %struct.access, %struct.access* %73, i32 0, i32 0, !dbg !8457
  %74 = load i64, i64* %offset, align 8, !dbg !8457
  %conv = trunc i64 %74 to i32, !dbg !8458
  %75 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8459
  %size = getelementptr inbounds %struct.access, %struct.access* %75, i32 0, i32 1, !dbg !8460
  %76 = load i64, i64* %size, align 8, !dbg !8460
  %conv93 = trunc i64 %76 to i32, !dbg !8461
  %call94 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.32, i64 0, i64 0), i32 %conv, i32 %conv93), !dbg !8462
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8463
  %78 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8464
  call void @print_generic_expr(%struct._IO_FILE* %77, %union.tree_node* %78, i32 0), !dbg !8465
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8466
  %call95 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !8467
  br label %if.end96, !dbg !8468

if.end96:                                         ; preds = %if.then90, %if.end88
  %80 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 0), align 4, !dbg !8469
  %inc = add nsw i32 %80, 1, !dbg !8469
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 0), align 4, !dbg !8469
  %81 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !8470
  ret %union.tree_node* %81, !dbg !8471
}

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.var_ann_d* @get_var_ann(%union.tree_node* %var) #0 !dbg !8472 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.var_ann_d**, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8476, metadata !DIExpression()), !dbg !8477
  call void @llvm.dbg.declare(metadata %struct.var_ann_d*** %p, metadata !8478, metadata !DIExpression()), !dbg !8480
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8481
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8481
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8481
  %bf.load = load i64, i64* %1, align 8, !dbg !8481
  %bf.clear = and i64 %bf.load, 65535, !dbg !8481
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8481
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !8481
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8481

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8481
  %var_decl = bitcast %union.tree_node* %2 to %struct.tree_var_decl*, !dbg !8481
  %ann = getelementptr inbounds %struct.tree_var_decl, %struct.tree_var_decl* %var_decl, i32 0, i32 1, !dbg !8481
  br label %cond.end19, !dbg !8481

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8481
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8481
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8481
  %bf.load2 = load i64, i64* %4, align 8, !dbg !8481
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !8481
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8481
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !8481
  br i1 %cmp5, label %cond.true6, label %cond.false8, !dbg !8481

cond.true6:                                       ; preds = %cond.false
  %5 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8481
  %parm_decl = bitcast %union.tree_node* %5 to %struct.tree_parm_decl*, !dbg !8481
  %ann7 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 2, !dbg !8481
  br label %cond.end17, !dbg !8481

cond.false8:                                      ; preds = %cond.false
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8481
  %base9 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !8481
  %7 = bitcast %struct.tree_base* %base9 to i64*, !dbg !8481
  %bf.load10 = load i64, i64* %7, align 8, !dbg !8481
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !8481
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !8481
  %cmp13 = icmp eq i32 %bf.cast12, 36, !dbg !8481
  br i1 %cmp13, label %cond.true14, label %cond.false16, !dbg !8481

cond.true14:                                      ; preds = %cond.false8
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8481
  %result_decl = bitcast %union.tree_node* %8 to %struct.tree_result_decl*, !dbg !8481
  %ann15 = getelementptr inbounds %struct.tree_result_decl, %struct.tree_result_decl* %result_decl, i32 0, i32 1, !dbg !8481
  br label %cond.end, !dbg !8481

cond.false16:                                     ; preds = %cond.false8
  br label %cond.end, !dbg !8481

cond.end:                                         ; preds = %cond.false16, %cond.true14
  %cond = phi %struct.var_ann_d** [ %ann15, %cond.true14 ], [ null, %cond.false16 ], !dbg !8481
  br label %cond.end17, !dbg !8481

cond.end17:                                       ; preds = %cond.end, %cond.true6
  %cond18 = phi %struct.var_ann_d** [ %ann7, %cond.true6 ], [ %cond, %cond.end ], !dbg !8481
  br label %cond.end19, !dbg !8481

cond.end19:                                       ; preds = %cond.end17, %cond.true
  %cond20 = phi %struct.var_ann_d** [ %ann, %cond.true ], [ %cond18, %cond.end17 ], !dbg !8481
  store %struct.var_ann_d** %cond20, %struct.var_ann_d*** %p, align 8, !dbg !8480
  %9 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !8482
  %tobool = icmp ne %struct.var_ann_d** %9, null, !dbg !8482
  br i1 %tobool, label %cond.false22, label %cond.true21, !dbg !8482

cond.true21:                                      ; preds = %cond.end19
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0), i32 144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8482
  br label %cond.end23, !dbg !8482

cond.false22:                                     ; preds = %cond.end19
  br label %cond.end23, !dbg !8482

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi i32 [ 0, %cond.true21 ], [ 0, %cond.false22 ], !dbg !8482
  %10 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !8483
  %11 = load %struct.var_ann_d*, %struct.var_ann_d** %10, align 8, !dbg !8484
  %tobool25 = icmp ne %struct.var_ann_d* %11, null, !dbg !8484
  br i1 %tobool25, label %cond.true26, label %cond.false27, !dbg !8484

cond.true26:                                      ; preds = %cond.end23
  %12 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !8485
  %13 = load %struct.var_ann_d*, %struct.var_ann_d** %12, align 8, !dbg !8486
  br label %cond.end28, !dbg !8484

cond.false27:                                     ; preds = %cond.end23
  %14 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8487
  %call = call %struct.var_ann_d* @create_var_ann(%union.tree_node* %14), !dbg !8488
  br label %cond.end28, !dbg !8484

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi %struct.var_ann_d* [ %13, %cond.true26 ], [ %call, %cond.false27 ], !dbg !8484
  ret %struct.var_ann_d* %cond29, !dbg !8489
}

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @make_fancy_name(%union.tree_node* %expr) #0 !dbg !8490 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8493, metadata !DIExpression()), !dbg !8494
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8495
  call void @make_fancy_name_1(%union.tree_node* %0), !dbg !8496
  %1 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8497
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !8497
  %2 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 4), align 8, !dbg !8497
  %cmp = icmp ugt i8* %add.ptr, %2, !dbg !8497
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8497

cond.true:                                        ; preds = %entry
  call void @_obstack_newchunk(%struct.obstack* @name_obstack, i32 1), !dbg !8497
  br label %cond.end, !dbg !8497

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8497

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8497
  %3 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8497
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !8497
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8497
  store i8 0, i8* %3, align 1, !dbg !8497
  %4 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8498
  %5 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 2), align 8, !dbg !8498
  %cmp1 = icmp eq i8* %4, %5, !dbg !8498
  br i1 %cmp1, label %cond.true2, label %cond.false3, !dbg !8498

cond.true2:                                       ; preds = %cond.end
  %bf.load = load i8, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 10), align 8, !dbg !8498
  %bf.clear = and i8 %bf.load, -3, !dbg !8498
  %bf.set = or i8 %bf.clear, 2, !dbg !8498
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 10), align 8, !dbg !8498
  br label %cond.end4, !dbg !8498

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !8498

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !8498
  %6 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 2), align 8, !dbg !8498
  %sub.ptr.lhs.cast = ptrtoint i8* %6 to i64, !dbg !8498
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, 0, !dbg !8498
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8498
  %7 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8498
  %sub.ptr.lhs.cast6 = ptrtoint i8* %7 to i64, !dbg !8498
  %sub.ptr.sub7 = sub i64 %sub.ptr.lhs.cast6, 0, !dbg !8498
  %8 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 6), align 8, !dbg !8498
  %conv = sext i32 %8 to i64, !dbg !8498
  %add = add nsw i64 %sub.ptr.sub7, %conv, !dbg !8498
  %9 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 6), align 8, !dbg !8498
  %neg = xor i32 %9, -1, !dbg !8498
  %conv8 = sext i32 %neg to i64, !dbg !8498
  %and = and i64 %add, %conv8, !dbg !8498
  %10 = inttoptr i64 %and to i8*, !dbg !8498
  store i8* %10, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8498
  %11 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8498
  %12 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !8498
  %13 = bitcast %struct._obstack_chunk* %12 to i8*, !dbg !8498
  %sub.ptr.lhs.cast9 = ptrtoint i8* %11 to i64, !dbg !8498
  %sub.ptr.rhs.cast = ptrtoint i8* %13 to i64, !dbg !8498
  %sub.ptr.sub10 = sub i64 %sub.ptr.lhs.cast9, %sub.ptr.rhs.cast, !dbg !8498
  %14 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 4), align 8, !dbg !8498
  %15 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !8498
  %16 = bitcast %struct._obstack_chunk* %15 to i8*, !dbg !8498
  %sub.ptr.lhs.cast11 = ptrtoint i8* %14 to i64, !dbg !8498
  %sub.ptr.rhs.cast12 = ptrtoint i8* %16 to i64, !dbg !8498
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12, !dbg !8498
  %cmp14 = icmp sgt i64 %sub.ptr.sub10, %sub.ptr.sub13, !dbg !8498
  br i1 %cmp14, label %cond.true16, label %cond.false17, !dbg !8498

cond.true16:                                      ; preds = %cond.end4
  %17 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 4), align 8, !dbg !8498
  store i8* %17, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8498
  br label %cond.end18, !dbg !8498

cond.false17:                                     ; preds = %cond.end4
  br label %cond.end18, !dbg !8498

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i8* [ %17, %cond.true16 ], [ null, %cond.false17 ], !dbg !8498
  %18 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8498
  store i8* %18, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 2), align 8, !dbg !8498
  %19 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8498
  %20 = inttoptr i64 %19 to i8*, !dbg !8498
  ret i8* %20, !dbg !8499
}

declare dso_local %union.tree_node* @get_identifier(i8*) #2

declare dso_local void @obstack_free(%struct.obstack*, i8*) #2

declare dso_local void @decl_debug_expr_insert(%union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.var_ann_d* @create_var_ann(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @make_fancy_name_1(%union.tree_node* %expr) #0 !dbg !8500 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  %buffer = alloca [32 x i8], align 16
  %index = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8503, metadata !DIExpression()), !dbg !8504
  call void @llvm.dbg.declare(metadata [32 x i8]* %buffer, metadata !8505, metadata !DIExpression()), !dbg !8509
  call void @llvm.dbg.declare(metadata %union.tree_node** %index, metadata !8510, metadata !DIExpression()), !dbg !8511
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8512
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8512
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8512
  %bf.load = load i64, i64* %1, align 8, !dbg !8512
  %bf.clear = and i64 %bf.load, 65535, !dbg !8512
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8512
  %idxprom = sext i32 %bf.cast to i64, !dbg !8512
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8512
  %2 = load i32, i32* %arrayidx, align 4, !dbg !8512
  %cmp = icmp eq i32 %2, 3, !dbg !8512
  br i1 %cmp, label %if.then, label %if.end, !dbg !8514

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8515
  call void @make_fancy_decl_name(%union.tree_node* %3), !dbg !8517
  br label %sw.epilog, !dbg !8518

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8519
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !8519
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8519
  %bf.load2 = load i64, i64* %5, align 8, !dbg !8519
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !8519
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8519
  switch i32 %bf.cast4, label %sw.default [
    i32 41, label %sw.bb
    i32 45, label %sw.bb10
    i32 42, label %sw.bb42
    i32 43, label %sw.bb42
    i32 44, label %sw.bb42
  ], !dbg !8520

sw.bb:                                            ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8521
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !8521
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8521
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8521
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !8521
  call void @make_fancy_name_1(%union.tree_node* %7), !dbg !8523
  %8 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8524
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 1, !dbg !8524
  %9 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 4), align 8, !dbg !8524
  %cmp6 = icmp ugt i8* %add.ptr, %9, !dbg !8524
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !8524

cond.true:                                        ; preds = %sw.bb
  call void @_obstack_newchunk(%struct.obstack* @name_obstack, i32 1), !dbg !8524
  br label %cond.end, !dbg !8524

cond.false:                                       ; preds = %sw.bb
  br label %cond.end, !dbg !8524

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8524
  %10 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8524
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1, !dbg !8524
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8524
  store i8 36, i8* %10, align 1, !dbg !8524
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8525
  %exp7 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !8525
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !8525
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 1, !dbg !8525
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !8525
  call void @make_fancy_decl_name(%union.tree_node* %12), !dbg !8526
  br label %sw.epilog, !dbg !8527

sw.bb10:                                          ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8528
  %exp11 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !8528
  %operands12 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp11, i32 0, i32 3, !dbg !8528
  %arrayidx13 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands12, i64 0, i64 0, !dbg !8528
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !8528
  call void @make_fancy_name_1(%union.tree_node* %14), !dbg !8529
  %15 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8530
  %add.ptr14 = getelementptr inbounds i8, i8* %15, i64 1, !dbg !8530
  %16 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 4), align 8, !dbg !8530
  %cmp15 = icmp ugt i8* %add.ptr14, %16, !dbg !8530
  br i1 %cmp15, label %cond.true16, label %cond.false17, !dbg !8530

cond.true16:                                      ; preds = %sw.bb10
  call void @_obstack_newchunk(%struct.obstack* @name_obstack, i32 1), !dbg !8530
  br label %cond.end18, !dbg !8530

cond.false17:                                     ; preds = %sw.bb10
  br label %cond.end18, !dbg !8530

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !8530
  %17 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8530
  %incdec.ptr20 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !8530
  store i8* %incdec.ptr20, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8530
  store i8 36, i8* %17, align 1, !dbg !8530
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8531
  %exp21 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !8531
  %operands22 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp21, i32 0, i32 3, !dbg !8531
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands22, i64 0, i64 1, !dbg !8531
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx23, align 8, !dbg !8531
  store %union.tree_node* %19, %union.tree_node** %index, align 8, !dbg !8532
  %20 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !8533
  %base24 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !8533
  %21 = bitcast %struct.tree_base* %base24 to i64*, !dbg !8533
  %bf.load25 = load i64, i64* %21, align 8, !dbg !8533
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !8533
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !8533
  %cmp28 = icmp ne i32 %bf.cast27, 23, !dbg !8535
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !8536

if.then29:                                        ; preds = %cond.end18
  br label %sw.epilog, !dbg !8537

if.end30:                                         ; preds = %cond.end18
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %buffer, i64 0, i64 0, !dbg !8538
  %22 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !8539
  %int_cst = bitcast %union.tree_node* %22 to %struct.tree_int_cst*, !dbg !8539
  %int_cst31 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !8539
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst31, i32 0, i32 0, !dbg !8539
  %23 = load i64, i64* %low, align 8, !dbg !8539
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.46, i64 0, i64 0), i64 %23), !dbg !8540
  %arraydecay32 = getelementptr inbounds [32 x i8], [32 x i8]* %buffer, i64 0, i64 0, !dbg !8541
  %call33 = call i64 @strlen(i8* %arraydecay32), !dbg !8541
  store i64 %call33, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8541
  %24 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8541
  %25 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8541
  %add.ptr34 = getelementptr inbounds i8, i8* %24, i64 %25, !dbg !8541
  %26 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 4), align 8, !dbg !8541
  %cmp35 = icmp ugt i8* %add.ptr34, %26, !dbg !8541
  br i1 %cmp35, label %cond.true36, label %cond.false37, !dbg !8541

cond.true36:                                      ; preds = %if.end30
  %27 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8541
  %conv = trunc i64 %27 to i32, !dbg !8541
  call void @_obstack_newchunk(%struct.obstack* @name_obstack, i32 %conv), !dbg !8541
  br label %cond.end38, !dbg !8541

cond.false37:                                     ; preds = %if.end30
  br label %cond.end38, !dbg !8541

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi i32 [ 0, %cond.true36 ], [ 0, %cond.false37 ], !dbg !8541
  %28 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8541
  %arraydecay40 = getelementptr inbounds [32 x i8], [32 x i8]* %buffer, i64 0, i64 0, !dbg !8541
  %29 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8541
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 16 %arraydecay40, i64 %29, i1 false), !dbg !8541
  %30 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8541
  %31 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8541
  %add.ptr41 = getelementptr inbounds i8, i8* %31, i64 %30, !dbg !8541
  store i8* %add.ptr41, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8541
  br label %sw.epilog, !dbg !8542

sw.bb42:                                          ; preds = %if.end, %if.end, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 1358, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8543
  br label %sw.epilog, !dbg !8544

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !8545

sw.epilog:                                        ; preds = %if.then, %sw.default, %sw.bb42, %cond.end38, %if.then29, %cond.end
  ret void, !dbg !8546
}

declare dso_local void @_obstack_newchunk(%struct.obstack*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @make_fancy_decl_name(%union.tree_node* %decl) #0 !dbg !8547 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %buffer = alloca [32 x i8], align 16
  %name = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !8548, metadata !DIExpression()), !dbg !8549
  call void @llvm.dbg.declare(metadata [32 x i8]* %buffer, metadata !8550, metadata !DIExpression()), !dbg !8551
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !8552, metadata !DIExpression()), !dbg !8553
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8554
  %decl_minimal = bitcast %union.tree_node* %0 to %struct.tree_decl_minimal*, !dbg !8554
  %name1 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !8554
  %1 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !8554
  store %union.tree_node* %1, %union.tree_node** %name, align 8, !dbg !8553
  %2 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8555
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !8555
  br i1 %tobool, label %if.then, label %if.else, !dbg !8557

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8558
  %identifier = bitcast %union.tree_node* %3 to %struct.tree_identifier*, !dbg !8558
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !8558
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !8558
  %4 = load i32, i32* %len, align 8, !dbg !8558
  %conv = zext i32 %4 to i64, !dbg !8558
  store i64 %conv, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8558
  %5 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8558
  %6 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8558
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %6, !dbg !8558
  %7 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 4), align 8, !dbg !8558
  %cmp = icmp ugt i8* %add.ptr, %7, !dbg !8558
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8558

cond.true:                                        ; preds = %if.then
  %8 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8558
  %conv3 = trunc i64 %8 to i32, !dbg !8558
  call void @_obstack_newchunk(%struct.obstack* @name_obstack, i32 %conv3), !dbg !8558
  br label %cond.end, !dbg !8558

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !8558

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8558
  %9 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8558
  %10 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8558
  %identifier4 = bitcast %union.tree_node* %10 to %struct.tree_identifier*, !dbg !8558
  %id5 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier4, i32 0, i32 1, !dbg !8558
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id5, i32 0, i32 0, !dbg !8558
  %11 = load i8*, i8** %str, align 8, !dbg !8558
  %12 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8558
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %11, i64 %12, i1 false), !dbg !8558
  %13 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8558
  %14 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8558
  %add.ptr6 = getelementptr inbounds i8, i8* %14, i64 %13, !dbg !8558
  store i8* %add.ptr6, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8558
  br label %if.end, !dbg !8558

if.else:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %buffer, i64 0, i64 0, !dbg !8559
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8561
  %decl_minimal7 = bitcast %union.tree_node* %15 to %struct.tree_decl_minimal*, !dbg !8561
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal7, i32 0, i32 2, !dbg !8561
  %16 = load i32, i32* %uid, align 4, !dbg !8561
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), i32 %16), !dbg !8562
  %arraydecay8 = getelementptr inbounds [32 x i8], [32 x i8]* %buffer, i64 0, i64 0, !dbg !8563
  %call9 = call i64 @strlen(i8* %arraydecay8), !dbg !8563
  store i64 %call9, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8563
  %17 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8563
  %18 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8563
  %add.ptr10 = getelementptr inbounds i8, i8* %17, i64 %18, !dbg !8563
  %19 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 4), align 8, !dbg !8563
  %cmp11 = icmp ugt i8* %add.ptr10, %19, !dbg !8563
  br i1 %cmp11, label %cond.true13, label %cond.false15, !dbg !8563

cond.true13:                                      ; preds = %if.else
  %20 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8563
  %conv14 = trunc i64 %20 to i32, !dbg !8563
  call void @_obstack_newchunk(%struct.obstack* @name_obstack, i32 %conv14), !dbg !8563
  br label %cond.end16, !dbg !8563

cond.false15:                                     ; preds = %if.else
  br label %cond.end16, !dbg !8563

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi i32 [ 0, %cond.true13 ], [ 0, %cond.false15 ], !dbg !8563
  %21 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8563
  %arraydecay18 = getelementptr inbounds [32 x i8], [32 x i8]* %buffer, i64 0, i64 0, !dbg !8563
  %22 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8563
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %21, i8* align 16 %arraydecay18, i64 %22, i1 false), !dbg !8563
  %23 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !8563
  %24 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8563
  %add.ptr19 = getelementptr inbounds i8, i8* %24, i64 %23, !dbg !8563
  store i8* %add.ptr19, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !8563
  br label %if.end

if.end:                                           ; preds = %cond.end16, %cond.end
  ret void, !dbg !8564
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i64 @strlen(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !8565 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8568, metadata !DIExpression()), !dbg !8569
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8570
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8571
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !8572
  %1 = load i32, i32* %location, align 8, !dbg !8572
  ret i32 %1, !dbg !8573
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !8574 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8575, metadata !DIExpression()), !dbg !8576
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8577
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !8578
  ret %union.tree_node* %call, !dbg !8579
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !8580 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8581, metadata !DIExpression()), !dbg !8582
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8583
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !8584
  ret %union.tree_node* %call, !dbg !8585
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sra_modify_constructor_assign(%union.gimple_statement_d** %stmt, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !8586 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d**, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %acc = alloca %struct.access*, align 8
  store %union.gimple_statement_d** %stmt, %union.gimple_statement_d*** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmt.addr, metadata !8589, metadata !DIExpression()), !dbg !8590
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !8591, metadata !DIExpression()), !dbg !8592
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !8593, metadata !DIExpression()), !dbg !8594
  %0 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !8595
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %0, align 8, !dbg !8596
  %call = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !8597
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !8594
  call void @llvm.dbg.declare(metadata %struct.access** %acc, metadata !8598, metadata !DIExpression()), !dbg !8599
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8600
  %call1 = call %struct.access* @get_access_for_expr(%union.tree_node* %2), !dbg !8601
  store %struct.access* %call1, %struct.access** %acc, align 8, !dbg !8602
  %3 = load %struct.access*, %struct.access** %acc, align 8, !dbg !8603
  %tobool = icmp ne %struct.access* %3, null, !dbg !8603
  br i1 %tobool, label %if.end, label %if.then, !dbg !8605

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !8606
  br label %return, !dbg !8606

if.end:                                           ; preds = %entry
  %4 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !8607
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %4, align 8, !dbg !8607
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %5), !dbg !8607
  %constructor = bitcast %union.tree_node* %call2 to %struct.tree_constructor*, !dbg !8607
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !8607
  %6 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !8607
  %tobool3 = icmp ne %struct.VEC_constructor_elt_gc* %6, null, !dbg !8607
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !8607

cond.true:                                        ; preds = %if.end
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !8607
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %7, align 8, !dbg !8607
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %8), !dbg !8607
  %constructor5 = bitcast %union.tree_node* %call4 to %struct.tree_constructor*, !dbg !8607
  %elts6 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor5, i32 0, i32 1, !dbg !8607
  %9 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts6, align 8, !dbg !8607
  %base = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %9, i32 0, i32 0, !dbg !8607
  br label %cond.end, !dbg !8607

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !8607

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8607
  %call7 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !8607
  %cmp = icmp ugt i32 %call7, 0, !dbg !8609
  br i1 %cmp, label %if.then8, label %if.end14, !dbg !8610

if.then8:                                         ; preds = %cond.end
  %10 = load %struct.access*, %struct.access** %acc, align 8, !dbg !8611
  %call9 = call zeroext i8 @access_has_children_p(%struct.access* %10), !dbg !8614
  %tobool10 = icmp ne i8 %call9, 0, !dbg !8614
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !8615

if.then11:                                        ; preds = %if.then8
  %11 = load %struct.access*, %struct.access** %acc, align 8, !dbg !8616
  %first_child = getelementptr inbounds %struct.access, %struct.access* %11, i32 0, i32 8, !dbg !8617
  %12 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !8617
  %13 = load %struct.access*, %struct.access** %acc, align 8, !dbg !8618
  %base12 = getelementptr inbounds %struct.access, %struct.access* %13, i32 0, i32 2, !dbg !8619
  %14 = load %union.tree_node*, %union.tree_node** %base12, align 8, !dbg !8619
  %15 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8620
  call void @generate_subtree_copies(%struct.access* %12, %union.tree_node* %14, i64 0, i64 0, i64 0, %struct.gimple_stmt_iterator* %15, i8 zeroext 1, i8 zeroext 1), !dbg !8621
  br label %if.end13, !dbg !8621

if.end13:                                         ; preds = %if.then11, %if.then8
  store i32 1, i32* %retval, align 4, !dbg !8622
  br label %return, !dbg !8622

if.end14:                                         ; preds = %cond.end
  %16 = load %struct.access*, %struct.access** %acc, align 8, !dbg !8623
  %grp_covered = getelementptr inbounds %struct.access, %struct.access* %16, i32 0, i32 14, !dbg !8625
  %bf.load = load i16, i16* %grp_covered, align 8, !dbg !8625
  %bf.lshr = lshr i16 %bf.load, 6, !dbg !8625
  %bf.clear = and i16 %bf.lshr, 1, !dbg !8625
  %bf.cast = zext i16 %bf.clear to i32, !dbg !8625
  %tobool15 = icmp ne i32 %bf.cast, 0, !dbg !8623
  br i1 %tobool15, label %if.then16, label %if.else, !dbg !8626

if.then16:                                        ; preds = %if.end14
  %17 = load %struct.access*, %struct.access** %acc, align 8, !dbg !8627
  %18 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8629
  call void @init_subtree_with_zero(%struct.access* %17, %struct.gimple_stmt_iterator* %18, i8 zeroext 0), !dbg !8630
  %19 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !8631
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %19, align 8, !dbg !8632
  call void @unlink_stmt_vdef(%union.gimple_statement_d* %20), !dbg !8633
  %21 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8634
  call void @gsi_remove(%struct.gimple_stmt_iterator* %21, i8 zeroext 1), !dbg !8635
  store i32 2, i32* %retval, align 4, !dbg !8636
  br label %return, !dbg !8636

if.else:                                          ; preds = %if.end14
  %22 = load %struct.access*, %struct.access** %acc, align 8, !dbg !8637
  %23 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8639
  call void @init_subtree_with_zero(%struct.access* %22, %struct.gimple_stmt_iterator* %23, i8 zeroext 1), !dbg !8640
  store i32 1, i32* %retval, align 4, !dbg !8641
  br label %return, !dbg !8641

return:                                           ; preds = %if.else, %if.then16, %if.end13, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !8642
  ret i32 %24, !dbg !8642
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !8643 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8646, metadata !DIExpression()), !dbg !8647
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !8648, metadata !DIExpression()), !dbg !8649
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8650
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8651
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !8652
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8653
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !8653
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8655

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8656
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8656
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !8656
  %bf.load = load i64, i64* %4, align 8, !dbg !8656
  %bf.clear = and i64 %bf.load, 65535, !dbg !8656
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8656
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !8657
  br i1 %cmp, label %if.then, label %if.end, !dbg !8658

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8659
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8660
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !8660
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !8660
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8661
  br label %if.end, !dbg !8660

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !8662
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @access_has_children_p(%struct.access* %acc) #0 !dbg !8663 {
entry:
  %acc.addr = alloca %struct.access*, align 8
  store %struct.access* %acc, %struct.access** %acc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %acc.addr, metadata !8664, metadata !DIExpression()), !dbg !8665
  %0 = load %struct.access*, %struct.access** %acc.addr, align 8, !dbg !8666
  %tobool = icmp ne %struct.access* %0, null, !dbg !8666
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8667

land.rhs:                                         ; preds = %entry
  %1 = load %struct.access*, %struct.access** %acc.addr, align 8, !dbg !8668
  %first_child = getelementptr inbounds %struct.access, %struct.access* %1, i32 0, i32 8, !dbg !8669
  %2 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !8669
  %tobool1 = icmp ne %struct.access* %2, null, !dbg !8667
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !8670
  %land.ext = zext i1 %3 to i32, !dbg !8667
  %conv = trunc i32 %land.ext to i8, !dbg !8666
  ret i8 %conv, !dbg !8671
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ref_expr_for_all_replacements_p(%struct.access* %access, %union.tree_node* %agg, i64 %top_offset) #0 !dbg !8672 {
entry:
  %retval = alloca i8, align 1
  %access.addr = alloca %struct.access*, align 8
  %agg.addr = alloca %union.tree_node*, align 8
  %top_offset.addr = alloca i64, align 8
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !8675, metadata !DIExpression()), !dbg !8676
  store %union.tree_node* %agg, %union.tree_node** %agg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %agg.addr, metadata !8677, metadata !DIExpression()), !dbg !8678
  store i64 %top_offset, i64* %top_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %top_offset.addr, metadata !8679, metadata !DIExpression()), !dbg !8680
  br label %do.body, !dbg !8681

do.body:                                          ; preds = %do.cond, %entry
  %0 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8682
  %grp_to_be_replaced = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 14, !dbg !8685
  %bf.load = load i16, i16* %grp_to_be_replaced, align 8, !dbg !8685
  %bf.lshr = lshr i16 %bf.load, 10, !dbg !8685
  %bf.clear = and i16 %bf.lshr, 1, !dbg !8685
  %bf.cast = zext i16 %bf.clear to i32, !dbg !8685
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8682
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8686

land.lhs.true:                                    ; preds = %do.body
  %1 = load %union.tree_node*, %union.tree_node** %agg.addr, align 8, !dbg !8687
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !8687
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8687
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8687
  %3 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8688
  %offset = getelementptr inbounds %struct.access, %struct.access* %3, i32 0, i32 0, !dbg !8689
  %4 = load i64, i64* %offset, align 8, !dbg !8689
  %5 = load i64, i64* %top_offset.addr, align 8, !dbg !8690
  %sub = sub nsw i64 %4, %5, !dbg !8691
  %6 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8692
  %type1 = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 4, !dbg !8693
  %7 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8693
  %call = call zeroext i8 @build_ref_for_offset(%union.tree_node** null, %union.tree_node* %2, i64 %sub, %union.tree_node* %7, i8 zeroext 0), !dbg !8694
  %tobool2 = icmp ne i8 %call, 0, !dbg !8694
  br i1 %tobool2, label %if.end, label %if.then, !dbg !8695

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !8696
  br label %return, !dbg !8696

if.end:                                           ; preds = %land.lhs.true, %do.body
  %8 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8697
  %first_child = getelementptr inbounds %struct.access, %struct.access* %8, i32 0, i32 8, !dbg !8699
  %9 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !8699
  %tobool3 = icmp ne %struct.access* %9, null, !dbg !8697
  br i1 %tobool3, label %land.lhs.true4, label %if.end9, !dbg !8700

land.lhs.true4:                                   ; preds = %if.end
  %10 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8701
  %first_child5 = getelementptr inbounds %struct.access, %struct.access* %10, i32 0, i32 8, !dbg !8702
  %11 = load %struct.access*, %struct.access** %first_child5, align 8, !dbg !8702
  %12 = load %union.tree_node*, %union.tree_node** %agg.addr, align 8, !dbg !8703
  %13 = load i64, i64* %top_offset.addr, align 8, !dbg !8704
  %call6 = call zeroext i8 @ref_expr_for_all_replacements_p(%struct.access* %11, %union.tree_node* %12, i64 %13), !dbg !8705
  %tobool7 = icmp ne i8 %call6, 0, !dbg !8705
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !8706

if.then8:                                         ; preds = %land.lhs.true4
  store i8 0, i8* %retval, align 1, !dbg !8707
  br label %return, !dbg !8707

if.end9:                                          ; preds = %land.lhs.true4, %if.end
  %14 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8708
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %14, i32 0, i32 9, !dbg !8709
  %15 = load %struct.access*, %struct.access** %next_sibling, align 8, !dbg !8709
  store %struct.access* %15, %struct.access** %access.addr, align 8, !dbg !8710
  br label %do.cond, !dbg !8711

do.cond:                                          ; preds = %if.end9
  %16 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8712
  %tobool10 = icmp ne %struct.access* %16, null, !dbg !8711
  br i1 %tobool10, label %do.body, label %do.end, !dbg !8711, !llvm.loop !8713

do.end:                                           ; preds = %do.cond
  store i8 1, i8* %retval, align 1, !dbg !8715
  br label %return, !dbg !8715

return:                                           ; preds = %do.end, %if.then8, %if.then
  %17 = load i8, i8* %retval, align 1, !dbg !8716
  ret i8 %17, !dbg !8716
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @handle_unscalarized_data_in_subtree(%struct.access* %top_racc, %union.tree_node* %lhs, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !8717 {
entry:
  %retval = alloca i32, align 4
  %top_racc.addr = alloca %struct.access*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.access* %top_racc, %struct.access** %top_racc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %top_racc.addr, metadata !8720, metadata !DIExpression()), !dbg !8721
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !8722, metadata !DIExpression()), !dbg !8723
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !8724, metadata !DIExpression()), !dbg !8725
  %0 = load %struct.access*, %struct.access** %top_racc.addr, align 8, !dbg !8726
  %grp_unscalarized_data = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 14, !dbg !8728
  %bf.load = load i16, i16* %grp_unscalarized_data, align 8, !dbg !8728
  %bf.lshr = lshr i16 %bf.load, 8, !dbg !8728
  %bf.clear = and i16 %bf.lshr, 1, !dbg !8728
  %bf.cast = zext i16 %bf.clear to i32, !dbg !8728
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8726
  br i1 %tobool, label %if.then, label %if.else, !dbg !8729

if.then:                                          ; preds = %entry
  %1 = load %struct.access*, %struct.access** %top_racc.addr, align 8, !dbg !8730
  %first_child = getelementptr inbounds %struct.access, %struct.access* %1, i32 0, i32 8, !dbg !8732
  %2 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !8732
  %3 = load %struct.access*, %struct.access** %top_racc.addr, align 8, !dbg !8733
  %base = getelementptr inbounds %struct.access, %struct.access* %3, i32 0, i32 2, !dbg !8734
  %4 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8734
  %5 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8735
  call void @generate_subtree_copies(%struct.access* %2, %union.tree_node* %4, i64 0, i64 0, i64 0, %struct.gimple_stmt_iterator* %5, i8 zeroext 0, i8 zeroext 0), !dbg !8736
  store i32 1, i32* %retval, align 4, !dbg !8737
  br label %return, !dbg !8737

if.else:                                          ; preds = %entry
  %6 = load %struct.access*, %struct.access** %top_racc.addr, align 8, !dbg !8738
  %first_child1 = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 8, !dbg !8740
  %7 = load %struct.access*, %struct.access** %first_child1, align 8, !dbg !8740
  %8 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8741
  %9 = load %struct.access*, %struct.access** %top_racc.addr, align 8, !dbg !8742
  %offset = getelementptr inbounds %struct.access, %struct.access* %9, i32 0, i32 0, !dbg !8743
  %10 = load i64, i64* %offset, align 8, !dbg !8743
  %11 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8744
  call void @generate_subtree_copies(%struct.access* %7, %union.tree_node* %8, i64 %10, i64 0, i64 0, %struct.gimple_stmt_iterator* %11, i8 zeroext 0, i8 zeroext 0), !dbg !8745
  store i32 2, i32* %retval, align 4, !dbg !8746
  br label %return, !dbg !8746

return:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !8747
  ret i32 %12, !dbg !8747
}

; Function Attrs: noinline nounwind uwtable
define internal void @load_assign_lhs_subreplacements(%struct.access* %lacc, %struct.access* %top_racc, i64 %left_offset, i64 %right_offset, %struct.gimple_stmt_iterator* %old_gsi, %struct.gimple_stmt_iterator* %new_gsi, i32* %refreshed, %union.tree_node* %lhs) #0 !dbg !8748 {
entry:
  %lacc.addr = alloca %struct.access*, align 8
  %top_racc.addr = alloca %struct.access*, align 8
  %left_offset.addr = alloca i64, align 8
  %right_offset.addr = alloca i64, align 8
  %old_gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %new_gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %refreshed.addr = alloca i32*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %racc = alloca %struct.access*, align 8
  %offset = alloca i64, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %repl_found = alloca i8, align 1
  %repl_found47 = alloca i8, align 1
  store %struct.access* %lacc, %struct.access** %lacc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %lacc.addr, metadata !8752, metadata !DIExpression()), !dbg !8753
  store %struct.access* %top_racc, %struct.access** %top_racc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %top_racc.addr, metadata !8754, metadata !DIExpression()), !dbg !8755
  store i64 %left_offset, i64* %left_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %left_offset.addr, metadata !8756, metadata !DIExpression()), !dbg !8757
  store i64 %right_offset, i64* %right_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %right_offset.addr, metadata !8758, metadata !DIExpression()), !dbg !8759
  store %struct.gimple_stmt_iterator* %old_gsi, %struct.gimple_stmt_iterator** %old_gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %old_gsi.addr, metadata !8760, metadata !DIExpression()), !dbg !8761
  store %struct.gimple_stmt_iterator* %new_gsi, %struct.gimple_stmt_iterator** %new_gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %new_gsi.addr, metadata !8762, metadata !DIExpression()), !dbg !8763
  store i32* %refreshed, i32** %refreshed.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %refreshed.addr, metadata !8764, metadata !DIExpression()), !dbg !8765
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !8766, metadata !DIExpression()), !dbg !8767
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !8768, metadata !DIExpression()), !dbg !8769
  %0 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8770
  %expr = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 3, !dbg !8770
  %1 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8770
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8770
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8770
  %bf.load = load i64, i64* %2, align 8, !dbg !8770
  %bf.clear = and i64 %bf.load, 65535, !dbg !8770
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8770
  %idxprom = sext i32 %bf.cast to i64, !dbg !8770
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8770
  %3 = load i32, i32* %arrayidx, align 4, !dbg !8770
  %cmp = icmp uge i32 %3, 4, !dbg !8770
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !8770

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8770
  %expr1 = getelementptr inbounds %struct.access, %struct.access* %4, i32 0, i32 3, !dbg !8770
  %5 = load %union.tree_node*, %union.tree_node** %expr1, align 8, !dbg !8770
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !8770
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !8770
  %bf.load3 = load i64, i64* %6, align 8, !dbg !8770
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !8770
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !8770
  %idxprom6 = sext i32 %bf.cast5 to i64, !dbg !8770
  %arrayidx7 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom6, !dbg !8770
  %7 = load i32, i32* %arrayidx7, align 4, !dbg !8770
  %cmp8 = icmp ule i32 %7, 10, !dbg !8770
  br i1 %cmp8, label %cond.true, label %cond.false, !dbg !8770

cond.true:                                        ; preds = %land.lhs.true
  %8 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8770
  %expr9 = getelementptr inbounds %struct.access, %struct.access* %8, i32 0, i32 3, !dbg !8770
  %9 = load %union.tree_node*, %union.tree_node** %expr9, align 8, !dbg !8770
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !8770
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !8770
  %10 = load i32, i32* %locus, align 8, !dbg !8770
  br label %cond.end, !dbg !8770

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !8770

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ 0, %cond.false ], !dbg !8770
  store i32 %cond, i32* %loc, align 4, !dbg !8769
  br label %do.body, !dbg !8771

do.body:                                          ; preds = %do.cond, %cond.end
  %11 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8772
  %grp_to_be_replaced = getelementptr inbounds %struct.access, %struct.access* %11, i32 0, i32 14, !dbg !8775
  %bf.load10 = load i16, i16* %grp_to_be_replaced, align 8, !dbg !8775
  %bf.lshr = lshr i16 %bf.load10, 10, !dbg !8775
  %bf.clear11 = and i16 %bf.lshr, 1, !dbg !8775
  %bf.cast12 = zext i16 %bf.clear11 to i32, !dbg !8775
  %tobool = icmp ne i32 %bf.cast12, 0, !dbg !8772
  br i1 %tobool, label %if.then, label %if.else63, !dbg !8776

if.then:                                          ; preds = %do.body
  call void @llvm.dbg.declare(metadata %struct.access** %racc, metadata !8777, metadata !DIExpression()), !dbg !8779
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !8780, metadata !DIExpression()), !dbg !8781
  %12 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8782
  %offset13 = getelementptr inbounds %struct.access, %struct.access* %12, i32 0, i32 0, !dbg !8783
  %13 = load i64, i64* %offset13, align 8, !dbg !8783
  %14 = load i64, i64* %left_offset.addr, align 8, !dbg !8784
  %sub = sub nsw i64 %13, %14, !dbg !8785
  %15 = load i64, i64* %right_offset.addr, align 8, !dbg !8786
  %add = add nsw i64 %sub, %15, !dbg !8787
  store i64 %add, i64* %offset, align 8, !dbg !8781
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8788, metadata !DIExpression()), !dbg !8789
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !8790, metadata !DIExpression()), !dbg !8791
  %16 = load %struct.access*, %struct.access** %top_racc.addr, align 8, !dbg !8792
  %17 = load i64, i64* %offset, align 8, !dbg !8793
  %18 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8794
  %size = getelementptr inbounds %struct.access, %struct.access* %18, i32 0, i32 1, !dbg !8795
  %19 = load i64, i64* %size, align 8, !dbg !8795
  %call = call %struct.access* @find_access_in_subtree(%struct.access* %16, i64 %17, i64 %19), !dbg !8796
  store %struct.access* %call, %struct.access** %racc, align 8, !dbg !8797
  %20 = load %struct.access*, %struct.access** %racc, align 8, !dbg !8798
  %tobool14 = icmp ne %struct.access* %20, null, !dbg !8798
  br i1 %tobool14, label %land.lhs.true15, label %if.else, !dbg !8800

land.lhs.true15:                                  ; preds = %if.then
  %21 = load %struct.access*, %struct.access** %racc, align 8, !dbg !8801
  %grp_to_be_replaced16 = getelementptr inbounds %struct.access, %struct.access* %21, i32 0, i32 14, !dbg !8802
  %bf.load17 = load i16, i16* %grp_to_be_replaced16, align 8, !dbg !8802
  %bf.lshr18 = lshr i16 %bf.load17, 10, !dbg !8802
  %bf.clear19 = and i16 %bf.lshr18, 1, !dbg !8802
  %bf.cast20 = zext i16 %bf.clear19 to i32, !dbg !8802
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !8801
  br i1 %tobool21, label %if.then22, label %if.else, !dbg !8803

if.then22:                                        ; preds = %land.lhs.true15
  %22 = load %struct.access*, %struct.access** %racc, align 8, !dbg !8804
  %call23 = call %union.tree_node* @get_access_replacement(%struct.access* %22), !dbg !8806
  store %union.tree_node* %call23, %union.tree_node** %rhs, align 8, !dbg !8807
  %23 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8808
  %type = getelementptr inbounds %struct.access, %struct.access* %23, i32 0, i32 4, !dbg !8810
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8810
  %25 = load %struct.access*, %struct.access** %racc, align 8, !dbg !8811
  %type24 = getelementptr inbounds %struct.access, %struct.access* %25, i32 0, i32 4, !dbg !8812
  %26 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !8812
  %call25 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %24, %union.tree_node* %26), !dbg !8813
  %tobool26 = icmp ne i8 %call25, 0, !dbg !8813
  br i1 %tobool26, label %if.end, label %if.then27, !dbg !8814

if.then27:                                        ; preds = %if.then22
  %27 = load i32, i32* %loc, align 4, !dbg !8815
  %28 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8815
  %type28 = getelementptr inbounds %struct.access, %struct.access* %28, i32 0, i32 4, !dbg !8815
  %29 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !8815
  %30 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8815
  %call29 = call %union.tree_node* @fold_build1_stat_loc(i32 %27, i32 118, %union.tree_node* %29, %union.tree_node* %30), !dbg !8815
  store %union.tree_node* %call29, %union.tree_node** %rhs, align 8, !dbg !8816
  br label %if.end, !dbg !8817

if.end:                                           ; preds = %if.then27, %if.then22
  br label %if.end60, !dbg !8818

if.else:                                          ; preds = %land.lhs.true15, %if.then
  %31 = load i32*, i32** %refreshed.addr, align 8, !dbg !8819
  %32 = load i32, i32* %31, align 4, !dbg !8822
  %cmp30 = icmp eq i32 %32, 0, !dbg !8823
  br i1 %cmp30, label %if.then31, label %if.end33, !dbg !8824

if.then31:                                        ; preds = %if.else
  %33 = load %struct.access*, %struct.access** %top_racc.addr, align 8, !dbg !8825
  %34 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8826
  %35 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %old_gsi.addr, align 8, !dbg !8827
  %call32 = call i32 @handle_unscalarized_data_in_subtree(%struct.access* %33, %union.tree_node* %34, %struct.gimple_stmt_iterator* %35), !dbg !8828
  %36 = load i32*, i32** %refreshed.addr, align 8, !dbg !8829
  store i32 %call32, i32* %36, align 4, !dbg !8830
  br label %if.end33, !dbg !8831

if.end33:                                         ; preds = %if.then31, %if.else
  %37 = load i32*, i32** %refreshed.addr, align 8, !dbg !8832
  %38 = load i32, i32* %37, align 4, !dbg !8834
  %cmp34 = icmp eq i32 %38, 2, !dbg !8835
  br i1 %cmp34, label %if.then35, label %if.else46, !dbg !8836

if.then35:                                        ; preds = %if.end33
  call void @llvm.dbg.declare(metadata i8* %repl_found, metadata !8837, metadata !DIExpression()), !dbg !8839
  %39 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8840
  %base36 = getelementptr inbounds %struct.access, %struct.access* %39, i32 0, i32 2, !dbg !8841
  %40 = load %union.tree_node*, %union.tree_node** %base36, align 8, !dbg !8841
  store %union.tree_node* %40, %union.tree_node** %rhs, align 8, !dbg !8842
  %41 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8843
  %common = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !8843
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8843
  %42 = load %union.tree_node*, %union.tree_node** %type37, align 8, !dbg !8843
  %43 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8844
  %offset38 = getelementptr inbounds %struct.access, %struct.access* %43, i32 0, i32 0, !dbg !8845
  %44 = load i64, i64* %offset38, align 8, !dbg !8845
  %45 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8846
  %type39 = getelementptr inbounds %struct.access, %struct.access* %45, i32 0, i32 4, !dbg !8847
  %46 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !8847
  %call40 = call zeroext i8 @build_ref_for_offset(%union.tree_node** %rhs, %union.tree_node* %42, i64 %44, %union.tree_node* %46, i8 zeroext 0), !dbg !8848
  store i8 %call40, i8* %repl_found, align 1, !dbg !8849
  %47 = load i8, i8* %repl_found, align 1, !dbg !8850
  %tobool41 = icmp ne i8 %47, 0, !dbg !8850
  br i1 %tobool41, label %cond.false43, label %cond.true42, !dbg !8850

cond.true42:                                      ; preds = %if.then35
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 2462, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8850
  br label %cond.end44, !dbg !8850

cond.false43:                                     ; preds = %if.then35
  br label %cond.end44, !dbg !8850

cond.end44:                                       ; preds = %cond.false43, %cond.true42
  %cond45 = phi i32 [ 0, %cond.true42 ], [ 0, %cond.false43 ], !dbg !8850
  br label %if.end59, !dbg !8851

if.else46:                                        ; preds = %if.end33
  call void @llvm.dbg.declare(metadata i8* %repl_found47, metadata !8852, metadata !DIExpression()), !dbg !8854
  %48 = load %struct.access*, %struct.access** %top_racc.addr, align 8, !dbg !8855
  %base48 = getelementptr inbounds %struct.access, %struct.access* %48, i32 0, i32 2, !dbg !8856
  %49 = load %union.tree_node*, %union.tree_node** %base48, align 8, !dbg !8856
  store %union.tree_node* %49, %union.tree_node** %rhs, align 8, !dbg !8857
  %50 = load %struct.access*, %struct.access** %top_racc.addr, align 8, !dbg !8858
  %base49 = getelementptr inbounds %struct.access, %struct.access* %50, i32 0, i32 2, !dbg !8858
  %51 = load %union.tree_node*, %union.tree_node** %base49, align 8, !dbg !8858
  %common50 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !8858
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2, !dbg !8858
  %52 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !8858
  %53 = load i64, i64* %offset, align 8, !dbg !8859
  %54 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8860
  %type52 = getelementptr inbounds %struct.access, %struct.access* %54, i32 0, i32 4, !dbg !8861
  %55 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !8861
  %call53 = call zeroext i8 @build_ref_for_offset(%union.tree_node** %rhs, %union.tree_node* %52, i64 %53, %union.tree_node* %55, i8 zeroext 0), !dbg !8862
  store i8 %call53, i8* %repl_found47, align 1, !dbg !8863
  %56 = load i8, i8* %repl_found47, align 1, !dbg !8864
  %tobool54 = icmp ne i8 %56, 0, !dbg !8864
  br i1 %tobool54, label %cond.false56, label %cond.true55, !dbg !8864

cond.true55:                                      ; preds = %if.else46
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 2472, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8864
  br label %cond.end57, !dbg !8864

cond.false56:                                     ; preds = %if.else46
  br label %cond.end57, !dbg !8864

cond.end57:                                       ; preds = %cond.false56, %cond.true55
  %cond58 = phi i32 [ 0, %cond.true55 ], [ 0, %cond.false56 ], !dbg !8864
  br label %if.end59

if.end59:                                         ; preds = %cond.end57, %cond.end44
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.end
  %57 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8865
  %call61 = call %union.tree_node* @get_access_replacement(%struct.access* %57), !dbg !8865
  %58 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8865
  %call62 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call61, %union.tree_node* %58), !dbg !8865
  store %union.gimple_statement_d* %call62, %union.gimple_statement_d** %stmt, align 8, !dbg !8866
  %59 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %new_gsi.addr, align 8, !dbg !8867
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8868
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %59, %union.gimple_statement_d* %60, i32 0), !dbg !8869
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8870
  call void @update_stmt(%union.gimple_statement_d* %61), !dbg !8871
  %62 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 3), align 4, !dbg !8872
  %inc = add nsw i32 %62, 1, !dbg !8872
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 3), align 4, !dbg !8872
  br label %if.end80, !dbg !8873

if.else63:                                        ; preds = %do.body
  %63 = load i32*, i32** %refreshed.addr, align 8, !dbg !8874
  %64 = load i32, i32* %63, align 4, !dbg !8876
  %cmp64 = icmp eq i32 %64, 0, !dbg !8877
  br i1 %cmp64, label %land.lhs.true65, label %if.end79, !dbg !8878

land.lhs.true65:                                  ; preds = %if.else63
  %65 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8879
  %grp_read = getelementptr inbounds %struct.access, %struct.access* %65, i32 0, i32 14, !dbg !8880
  %bf.load66 = load i16, i16* %grp_read, align 8, !dbg !8880
  %bf.lshr67 = lshr i16 %bf.load66, 4, !dbg !8880
  %bf.clear68 = and i16 %bf.lshr67, 1, !dbg !8880
  %bf.cast69 = zext i16 %bf.clear68 to i32, !dbg !8880
  %tobool70 = icmp ne i32 %bf.cast69, 0, !dbg !8879
  br i1 %tobool70, label %land.lhs.true71, label %if.end79, !dbg !8881

land.lhs.true71:                                  ; preds = %land.lhs.true65
  %66 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8882
  %grp_covered = getelementptr inbounds %struct.access, %struct.access* %66, i32 0, i32 14, !dbg !8883
  %bf.load72 = load i16, i16* %grp_covered, align 8, !dbg !8883
  %bf.lshr73 = lshr i16 %bf.load72, 6, !dbg !8883
  %bf.clear74 = and i16 %bf.lshr73, 1, !dbg !8883
  %bf.cast75 = zext i16 %bf.clear74 to i32, !dbg !8883
  %tobool76 = icmp ne i32 %bf.cast75, 0, !dbg !8882
  br i1 %tobool76, label %if.end79, label %if.then77, !dbg !8884

if.then77:                                        ; preds = %land.lhs.true71
  %67 = load %struct.access*, %struct.access** %top_racc.addr, align 8, !dbg !8885
  %68 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8886
  %69 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %old_gsi.addr, align 8, !dbg !8887
  %call78 = call i32 @handle_unscalarized_data_in_subtree(%struct.access* %67, %union.tree_node* %68, %struct.gimple_stmt_iterator* %69), !dbg !8888
  %70 = load i32*, i32** %refreshed.addr, align 8, !dbg !8889
  store i32 %call78, i32* %70, align 4, !dbg !8890
  br label %if.end79, !dbg !8891

if.end79:                                         ; preds = %if.then77, %land.lhs.true71, %land.lhs.true65, %if.else63
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.end60
  %71 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8892
  %first_child = getelementptr inbounds %struct.access, %struct.access* %71, i32 0, i32 8, !dbg !8894
  %72 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !8894
  %tobool81 = icmp ne %struct.access* %72, null, !dbg !8892
  br i1 %tobool81, label %if.then82, label %if.end84, !dbg !8895

if.then82:                                        ; preds = %if.end80
  %73 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8896
  %first_child83 = getelementptr inbounds %struct.access, %struct.access* %73, i32 0, i32 8, !dbg !8897
  %74 = load %struct.access*, %struct.access** %first_child83, align 8, !dbg !8897
  %75 = load %struct.access*, %struct.access** %top_racc.addr, align 8, !dbg !8898
  %76 = load i64, i64* %left_offset.addr, align 8, !dbg !8899
  %77 = load i64, i64* %right_offset.addr, align 8, !dbg !8900
  %78 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %old_gsi.addr, align 8, !dbg !8901
  %79 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %new_gsi.addr, align 8, !dbg !8902
  %80 = load i32*, i32** %refreshed.addr, align 8, !dbg !8903
  %81 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8904
  call void @load_assign_lhs_subreplacements(%struct.access* %74, %struct.access* %75, i64 %76, i64 %77, %struct.gimple_stmt_iterator* %78, %struct.gimple_stmt_iterator* %79, i32* %80, %union.tree_node* %81), !dbg !8905
  br label %if.end84, !dbg !8905

if.end84:                                         ; preds = %if.then82, %if.end80
  %82 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8906
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %82, i32 0, i32 9, !dbg !8907
  %83 = load %struct.access*, %struct.access** %next_sibling, align 8, !dbg !8907
  store %struct.access* %83, %struct.access** %lacc.addr, align 8, !dbg !8908
  br label %do.cond, !dbg !8909

do.cond:                                          ; preds = %if.end84
  %84 = load %struct.access*, %struct.access** %lacc.addr, align 8, !dbg !8910
  %tobool85 = icmp ne %struct.access* %84, null, !dbg !8909
  br i1 %tobool85, label %do.body, label %do.end, !dbg !8909, !llvm.loop !8911

do.end:                                           ; preds = %do.cond
  ret void, !dbg !8913
}

declare dso_local void @unlink_stmt_vdef(%union.gimple_statement_d*) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %vec_) #0 !dbg !8914 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !8919, metadata !DIExpression()), !dbg !8920
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !8920
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !8920
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8920

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !8920
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %1, i32 0, i32 0, !dbg !8920
  %2 = load i32, i32* %num, align 8, !dbg !8920
  br label %cond.end, !dbg !8920

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8920

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8920
  ret i32 %cond, !dbg !8920
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_subtree_with_zero(%struct.access* %access, %struct.gimple_stmt_iterator* %gsi, i8 zeroext %insert_after) #0 !dbg !8921 {
entry:
  %access.addr = alloca %struct.access*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %insert_after.addr = alloca i8, align 1
  %child = alloca %struct.access*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !8924, metadata !DIExpression()), !dbg !8925
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !8926, metadata !DIExpression()), !dbg !8927
  store i8 %insert_after, i8* %insert_after.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %insert_after.addr, metadata !8928, metadata !DIExpression()), !dbg !8929
  call void @llvm.dbg.declare(metadata %struct.access** %child, metadata !8930, metadata !DIExpression()), !dbg !8931
  %0 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8932
  %grp_to_be_replaced = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 14, !dbg !8934
  %bf.load = load i16, i16* %grp_to_be_replaced, align 8, !dbg !8934
  %bf.lshr = lshr i16 %bf.load, 10, !dbg !8934
  %bf.clear = and i16 %bf.lshr, 1, !dbg !8934
  %bf.cast = zext i16 %bf.clear to i32, !dbg !8934
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8932
  br i1 %tobool, label %if.then, label %if.end5, !dbg !8935

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8936, metadata !DIExpression()), !dbg !8938
  %1 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8939
  %call = call %union.tree_node* @get_access_replacement(%struct.access* %1), !dbg !8939
  %2 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8939
  %type = getelementptr inbounds %struct.access, %struct.access* %2, i32 0, i32 4, !dbg !8939
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8939
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !8939
  %call1 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %3, %union.tree_node* %4), !dbg !8939
  %call2 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call, %union.tree_node* %call1), !dbg !8939
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %stmt, align 8, !dbg !8940
  %5 = load i8, i8* %insert_after.addr, align 1, !dbg !8941
  %tobool3 = icmp ne i8 %5, 0, !dbg !8941
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !8943

if.then4:                                         ; preds = %if.then
  %6 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8944
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8945
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %6, %union.gimple_statement_d* %7, i32 0), !dbg !8946
  br label %if.end, !dbg !8946

if.else:                                          ; preds = %if.then
  %8 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8947
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8948
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %8, %union.gimple_statement_d* %9, i32 1), !dbg !8949
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8950
  call void @update_stmt(%union.gimple_statement_d* %10), !dbg !8951
  br label %if.end5, !dbg !8952

if.end5:                                          ; preds = %if.end, %entry
  %11 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !8953
  %first_child = getelementptr inbounds %struct.access, %struct.access* %11, i32 0, i32 8, !dbg !8955
  %12 = load %struct.access*, %struct.access** %first_child, align 8, !dbg !8955
  store %struct.access* %12, %struct.access** %child, align 8, !dbg !8956
  br label %for.cond, !dbg !8957

for.cond:                                         ; preds = %for.inc, %if.end5
  %13 = load %struct.access*, %struct.access** %child, align 8, !dbg !8958
  %tobool6 = icmp ne %struct.access* %13, null, !dbg !8960
  br i1 %tobool6, label %for.body, label %for.end, !dbg !8960

for.body:                                         ; preds = %for.cond
  %14 = load %struct.access*, %struct.access** %child, align 8, !dbg !8961
  %15 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !8962
  %16 = load i8, i8* %insert_after.addr, align 1, !dbg !8963
  call void @init_subtree_with_zero(%struct.access* %14, %struct.gimple_stmt_iterator* %15, i8 zeroext %16), !dbg !8964
  br label %for.inc, !dbg !8964

for.inc:                                          ; preds = %for.body
  %17 = load %struct.access*, %struct.access** %child, align 8, !dbg !8965
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %17, i32 0, i32 9, !dbg !8966
  %18 = load %struct.access*, %struct.access** %next_sibling, align 8, !dbg !8966
  store %struct.access* %18, %struct.access** %child, align 8, !dbg !8967
  br label %for.cond, !dbg !8968, !llvm.loop !8969

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8971
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !8972 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8975, metadata !DIExpression()), !dbg !8976
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !8977, metadata !DIExpression()), !dbg !8978
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !8979, metadata !DIExpression()), !dbg !8980
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8981
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8981
  %conv = zext i8 %call to i32, !dbg !8981
  %tobool = icmp ne i32 %conv, 0, !dbg !8981
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !8981

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !8981
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8981
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !8981
  %cmp = icmp ult i32 %1, %call1, !dbg !8981
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8981

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8981
  br label %cond.end, !dbg !8981

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !8981

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8981
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !8982
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8983
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !8984
  %5 = load i32, i32* %i.addr, align 4, !dbg !8985
  %idxprom = zext i32 %5 to i64, !dbg !8984
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !8984
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !8986
  ret void, !dbg !8987
}

declare dso_local %struct.gimple_seq_d* @gimple_seq_alloc() #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !8988 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !8991, metadata !DIExpression()), !dbg !8992
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !8993, metadata !DIExpression()), !dbg !8994
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !8995
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !8996
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8997
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !8998
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !8999
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !9000
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !9001
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !9002
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !9002
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !9003
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !9004

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !9005
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !9005
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !9006
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9006
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !9007
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !9008

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !9009
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !9009
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !9010
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !9010
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !9011
  br label %cond.end, !dbg !9008

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !9008

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !9008
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !9012
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !9013
  ret void, !dbg !9014
}

declare dso_local %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def*, %struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !9015 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9018, metadata !DIExpression()), !dbg !9019
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9020
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !9020
  %tobool = icmp ne i8 %call, 0, !dbg !9020
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9020

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.48, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9020
  br label %cond.end, !dbg !9020

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9020

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9020
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9021
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !9021
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9021
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !9021
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !9021

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9021
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !9021
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !9021
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !9021
  br label %cond.end5, !dbg !9021

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9021

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !9021
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !9021
  ret %struct.edge_def* %call7, !dbg !9022
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !9023 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9026, metadata !DIExpression()), !dbg !9027
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9028
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !9028
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9028
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !9028
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9028

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9028
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !9028
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !9028
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !9028
  br label %cond.end, !dbg !9028

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9028

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9028
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !9028
  %cmp = icmp eq i32 %call, 1, !dbg !9029
  %conv = zext i1 %cmp to i32, !dbg !9029
  %conv2 = trunc i32 %conv to i8, !dbg !9028
  ret i8 %conv2, !dbg !9030
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !9031 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !9036, metadata !DIExpression()), !dbg !9037
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9038, metadata !DIExpression()), !dbg !9037
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9037
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !9037
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9037

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9037
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9037
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !9037
  %3 = load i32, i32* %num, align 8, !dbg !9037
  %cmp = icmp ult i32 %1, %3, !dbg !9037
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !9039
  %land.ext = zext i1 %4 to i32, !dbg !9037
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9037
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !9037
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !9037
  %idxprom = zext i32 %6 to i64, !dbg !9037
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !9037
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !9037
  ret %struct.edge_def* %7, !dbg !9037
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !9040 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !9043, metadata !DIExpression()), !dbg !9044
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9044
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !9044
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9044

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9044
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !9044
  %2 = load i32, i32* %num, align 8, !dbg !9044
  br label %cond.end, !dbg !9044

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9044

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !9044
  ret i32 %cond, !dbg !9044
}

declare dso_local void @free_alloc_pool(%struct.alloc_pool_def*) #2

declare dso_local void @pointer_map_traverse(%struct.pointer_map_t*, i8 (i8*, i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @delete_base_accesses(i8* %key, i8** %value, i8* %data) #0 !dbg !9045 {
entry:
  %key.addr = alloca i8*, align 8
  %value.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %access_vec = alloca %struct.VEC_access_p_heap*, align 8
  store i8* %key, i8** %key.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key.addr, metadata !9048, metadata !DIExpression()), !dbg !9049
  store i8** %value, i8*** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %value.addr, metadata !9050, metadata !DIExpression()), !dbg !9051
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9052, metadata !DIExpression()), !dbg !9053
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap** %access_vec, metadata !9054, metadata !DIExpression()), !dbg !9055
  %0 = load i8**, i8*** %value.addr, align 8, !dbg !9056
  %1 = load i8*, i8** %0, align 8, !dbg !9057
  %2 = bitcast i8* %1 to %struct.VEC_access_p_heap*, !dbg !9058
  store %struct.VEC_access_p_heap* %2, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !9059
  call void @VEC_access_p_heap_free(%struct.VEC_access_p_heap** %access_vec), !dbg !9060
  ret i8 1, !dbg !9061
}

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_access_p_heap_free(%struct.VEC_access_p_heap** %vec_) #0 !dbg !9062 {
entry:
  %vec_.addr = alloca %struct.VEC_access_p_heap**, align 8
  store %struct.VEC_access_p_heap** %vec_, %struct.VEC_access_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap*** %vec_.addr, metadata !9065, metadata !DIExpression()), !dbg !9066
  %0 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %vec_.addr, align 8, !dbg !9067
  %1 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %0, align 8, !dbg !9067
  %tobool = icmp ne %struct.VEC_access_p_heap* %1, null, !dbg !9067
  br i1 %tobool, label %if.then, label %if.end, !dbg !9066

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %vec_.addr, align 8, !dbg !9067
  %3 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %2, align 8, !dbg !9067
  %4 = bitcast %struct.VEC_access_p_heap* %3 to i8*, !dbg !9067
  call void @free(i8* %4), !dbg !9067
  br label %if.end, !dbg !9067

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %vec_.addr, align 8, !dbg !9066
  store %struct.VEC_access_p_heap* null, %struct.VEC_access_p_heap** %5, align 8, !dbg !9066
  ret void, !dbg !9066
}

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ipa_sra_preliminary_function_checks(%struct.cgraph_node* %node) #0 !dbg !9069 {
entry:
  %retval = alloca i8, align 1
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !9072, metadata !DIExpression()), !dbg !9073
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !9074
  %call = call zeroext i8 @cgraph_node_can_be_local_p(%struct.cgraph_node* %0), !dbg !9076
  %tobool = icmp ne i8 %call, 0, !dbg !9076
  br i1 %tobool, label %if.end4, label %if.then, !dbg !9077

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9078
  %tobool1 = icmp ne %struct._IO_FILE* %1, null, !dbg !9078
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !9081

if.then2:                                         ; preds = %if.then
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9082
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.57, i64 0, i64 0)), !dbg !9083
  br label %if.end, !dbg !9083

if.end:                                           ; preds = %if.then2, %if.then
  store i8 0, i8* %retval, align 1, !dbg !9084
  br label %return, !dbg !9084

if.end4:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9085
  %decl_common = bitcast %union.tree_node* %3 to %struct.tree_decl_common*, !dbg !9085
  %virtual_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !9085
  %4 = bitcast i40* %virtual_flag to i64*, !dbg !9085
  %bf.load = load i64, i64* %4, align 8, !dbg !9085
  %bf.lshr = lshr i64 %bf.load, 9, !dbg !9085
  %bf.clear = and i64 %bf.lshr, 1, !dbg !9085
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9085
  %tobool5 = icmp ne i32 %bf.cast, 0, !dbg !9085
  br i1 %tobool5, label %if.then6, label %if.end11, !dbg !9087

if.then6:                                         ; preds = %if.end4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9088
  %tobool7 = icmp ne %struct._IO_FILE* %5, null, !dbg !9088
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !9091

if.then8:                                         ; preds = %if.then6
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9092
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.58, i64 0, i64 0)), !dbg !9093
  br label %if.end10, !dbg !9093

if.end10:                                         ; preds = %if.then8, %if.then6
  store i8 0, i8* %retval, align 1, !dbg !9094
  br label %return, !dbg !9094

if.end11:                                         ; preds = %if.end4
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !9095
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !9095
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9095
  %decl_with_vis = bitcast %union.tree_node* %8 to %struct.tree_decl_with_vis*, !dbg !9095
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !9095
  %9 = bitcast i24* %comdat_flag to i32*, !dbg !9095
  %bf.load12 = load i32, i32* %9, align 8, !dbg !9095
  %bf.lshr13 = lshr i32 %bf.load12, 9, !dbg !9095
  %bf.clear14 = and i32 %bf.lshr13, 1, !dbg !9095
  %tobool15 = icmp ne i32 %bf.clear14, 0, !dbg !9095
  br i1 %tobool15, label %land.lhs.true, label %lor.lhs.false, !dbg !9097

lor.lhs.false:                                    ; preds = %if.end11
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !9098
  %decl16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 0, !dbg !9098
  %11 = load %union.tree_node*, %union.tree_node** %decl16, align 8, !dbg !9098
  %decl_common17 = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !9098
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common17, i32 0, i32 2, !dbg !9098
  %12 = bitcast i40* %decl_flag_1 to i64*, !dbg !9098
  %bf.load18 = load i64, i64* %12, align 8, !dbg !9098
  %bf.lshr19 = lshr i64 %bf.load18, 25, !dbg !9098
  %bf.clear20 = and i64 %bf.lshr19, 1, !dbg !9098
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !9098
  %tobool22 = icmp ne i32 %bf.cast21, 0, !dbg !9098
  br i1 %tobool22, label %land.lhs.true, label %if.end28, !dbg !9099

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end11
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !9100
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 19, !dbg !9101
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 4, !dbg !9102
  %14 = load i32, i32* %size, align 4, !dbg !9102
  %15 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !9103
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %15, i64 3, !dbg !9103
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !9103
  %16 = load i32, i32* %value, align 8, !dbg !9103
  %cmp = icmp sge i32 %14, %16, !dbg !9104
  br i1 %cmp, label %if.then23, label %if.end28, !dbg !9105

if.then23:                                        ; preds = %land.lhs.true
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9106
  %tobool24 = icmp ne %struct._IO_FILE* %17, null, !dbg !9106
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !9109

if.then25:                                        ; preds = %if.then23
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9110
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.59, i64 0, i64 0)), !dbg !9111
  br label %if.end27, !dbg !9111

if.end27:                                         ; preds = %if.then25, %if.then23
  store i8 0, i8* %retval, align 1, !dbg !9112
  br label %return, !dbg !9112

if.end28:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !9113
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 2, !dbg !9115
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !9115
  %tobool29 = icmp ne %struct.cgraph_edge* %20, null, !dbg !9113
  br i1 %tobool29, label %if.end35, label %if.then30, !dbg !9116

if.then30:                                        ; preds = %if.end28
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9117
  %tobool31 = icmp ne %struct._IO_FILE* %21, null, !dbg !9117
  br i1 %tobool31, label %if.then32, label %if.end34, !dbg !9120

if.then32:                                        ; preds = %if.then30
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9121
  %call33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.60, i64 0, i64 0)), !dbg !9122
  br label %if.end34, !dbg !9122

if.end34:                                         ; preds = %if.then32, %if.then30
  store i8 0, i8* %retval, align 1, !dbg !9123
  br label %return, !dbg !9123

if.end35:                                         ; preds = %if.end28
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9124
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !9124
  %stdarg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !9126
  %bf.load36 = load i32, i32* %stdarg, align 8, !dbg !9126
  %bf.lshr37 = lshr i32 %bf.load36, 22, !dbg !9126
  %bf.clear38 = and i32 %bf.lshr37, 1, !dbg !9126
  %tobool39 = icmp ne i32 %bf.clear38, 0, !dbg !9124
  br i1 %tobool39, label %if.then40, label %if.end45, !dbg !9127

if.then40:                                        ; preds = %if.end35
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9128
  %tobool41 = icmp ne %struct._IO_FILE* %24, null, !dbg !9128
  br i1 %tobool41, label %if.then42, label %if.end44, !dbg !9131

if.then42:                                        ; preds = %if.then40
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9132
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.61, i64 0, i64 0)), !dbg !9133
  br label %if.end44, !dbg !9133

if.end44:                                         ; preds = %if.then42, %if.then40
  store i8 0, i8* %retval, align 1, !dbg !9134
  br label %return, !dbg !9134

if.end45:                                         ; preds = %if.end35
  store i8 1, i8* %retval, align 1, !dbg !9135
  br label %return, !dbg !9135

return:                                           ; preds = %if.end45, %if.end44, %if.end34, %if.end27, %if.end10, %if.end
  %26 = load i8, i8* %retval, align 1, !dbg !9136
  ret i8 %26, !dbg !9136
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_param_candidates() #0 !dbg !9137 {
entry:
  %parm = alloca %union.tree_node*, align 8
  %count = alloca i32, align 4
  %ret = alloca i8, align 1
  %type = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !9138, metadata !DIExpression()), !dbg !9139
  call void @llvm.dbg.declare(metadata i32* %count, metadata !9140, metadata !DIExpression()), !dbg !9141
  store i32 0, i32* %count, align 4, !dbg !9141
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !9142, metadata !DIExpression()), !dbg !9143
  store i8 0, i8* %ret, align 1, !dbg !9143
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9144
  %decl_non_common = bitcast %union.tree_node* %0 to %struct.tree_decl_non_common*, !dbg !9144
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !9144
  %1 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !9144
  store %union.tree_node* %1, %union.tree_node** %parm, align 8, !dbg !9146
  br label %for.cond, !dbg !9147

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !9148
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !9150
  br i1 %tobool, label %for.body, label %for.end, !dbg !9150

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9151, metadata !DIExpression()), !dbg !9153
  %3 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !9154
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !9154
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9154
  %4 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !9154
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !9153
  %5 = load i32, i32* %count, align 4, !dbg !9155
  %inc = add nsw i32 %5, 1, !dbg !9155
  store i32 %inc, i32* %count, align 4, !dbg !9155
  %6 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !9156
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9156
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !9156
  %bf.load = load i64, i64* %7, align 8, !dbg !9156
  %bf.lshr = lshr i64 %bf.load, 19, !dbg !9156
  %bf.clear = and i64 %bf.lshr, 1, !dbg !9156
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9156
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !9156
  br i1 %tobool2, label %if.then, label %lor.lhs.false, !dbg !9158

lor.lhs.false:                                    ; preds = %for.body
  %8 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !9159
  %base3 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !9159
  %9 = bitcast %struct.tree_base* %base3 to i64*, !dbg !9159
  %bf.load4 = load i64, i64* %9, align 8, !dbg !9159
  %bf.lshr5 = lshr i64 %bf.load4, 18, !dbg !9159
  %bf.clear6 = and i64 %bf.lshr5, 1, !dbg !9159
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !9159
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !9159
  br i1 %tobool8, label %if.then, label %lor.lhs.false9, !dbg !9160

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9161
  %call = call zeroext i8 @is_va_list_type(%union.tree_node* %10), !dbg !9162
  %conv = zext i8 %call to i32, !dbg !9162
  %tobool10 = icmp ne i32 %conv, 0, !dbg !9162
  br i1 %tobool10, label %if.then, label %if.end, !dbg !9163

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false, %for.body
  br label %for.inc, !dbg !9164

if.end:                                           ; preds = %lor.lhs.false9
  %11 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !9165
  %call11 = call zeroext i8 @is_unused_scalar_param(%union.tree_node* %11), !dbg !9167
  %tobool12 = icmp ne i8 %call11, 0, !dbg !9167
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !9168

if.then13:                                        ; preds = %if.end
  store i8 1, i8* %ret, align 1, !dbg !9169
  br label %for.inc, !dbg !9171

if.end14:                                         ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9172
  %base15 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !9172
  %13 = bitcast %struct.tree_base* %base15 to i64*, !dbg !9172
  %bf.load16 = load i64, i64* %13, align 8, !dbg !9172
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !9172
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !9172
  %cmp = icmp eq i32 %bf.cast18, 10, !dbg !9172
  br i1 %cmp, label %if.then27, label %lor.lhs.false20, !dbg !9172

lor.lhs.false20:                                  ; preds = %if.end14
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9172
  %base21 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !9172
  %15 = bitcast %struct.tree_base* %base21 to i64*, !dbg !9172
  %bf.load22 = load i64, i64* %15, align 8, !dbg !9172
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !9172
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !9172
  %cmp25 = icmp eq i32 %bf.cast24, 12, !dbg !9172
  br i1 %cmp25, label %if.then27, label %if.else, !dbg !9174

if.then27:                                        ; preds = %lor.lhs.false20, %if.end14
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9175
  %common28 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !9175
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !9175
  %17 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !9175
  store %union.tree_node* %17, %union.tree_node** %type, align 8, !dbg !9177
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9178
  %base30 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !9178
  %19 = bitcast %struct.tree_base* %base30 to i64*, !dbg !9178
  %bf.load31 = load i64, i64* %19, align 8, !dbg !9178
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !9178
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !9178
  %cmp34 = icmp eq i32 %bf.cast33, 20, !dbg !9180
  br i1 %cmp34, label %if.then54, label %lor.lhs.false36, !dbg !9181

lor.lhs.false36:                                  ; preds = %if.then27
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9182
  %base37 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !9182
  %21 = bitcast %struct.tree_base* %base37 to i64*, !dbg !9182
  %bf.load38 = load i64, i64* %21, align 8, !dbg !9182
  %bf.lshr39 = lshr i64 %bf.load38, 19, !dbg !9182
  %bf.clear40 = and i64 %bf.lshr39, 1, !dbg !9182
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !9182
  %tobool42 = icmp ne i32 %bf.cast41, 0, !dbg !9182
  br i1 %tobool42, label %if.then54, label %lor.lhs.false43, !dbg !9183

lor.lhs.false43:                                  ; preds = %lor.lhs.false36
  %22 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !9184
  %call44 = call zeroext i8 @is_gimple_reg(%union.tree_node* %22), !dbg !9185
  %tobool45 = icmp ne i8 %call44, 0, !dbg !9185
  br i1 %tobool45, label %lor.lhs.false46, label %if.then54, !dbg !9186

lor.lhs.false46:                                  ; preds = %lor.lhs.false43
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9187
  %call47 = call zeroext i8 @is_va_list_type(%union.tree_node* %23), !dbg !9188
  %conv48 = zext i8 %call47 to i32, !dbg !9188
  %tobool49 = icmp ne i32 %conv48, 0, !dbg !9188
  br i1 %tobool49, label %if.then54, label %lor.lhs.false50, !dbg !9189

lor.lhs.false50:                                  ; preds = %lor.lhs.false46
  %24 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !9190
  %call51 = call zeroext i8 @ptr_parm_has_direct_uses(%union.tree_node* %24), !dbg !9191
  %conv52 = zext i8 %call51 to i32, !dbg !9191
  %tobool53 = icmp ne i32 %conv52, 0, !dbg !9191
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !9192

if.then54:                                        ; preds = %lor.lhs.false50, %lor.lhs.false46, %lor.lhs.false43, %lor.lhs.false36, %if.then27
  br label %for.inc, !dbg !9193

if.end55:                                         ; preds = %lor.lhs.false50
  br label %if.end85, !dbg !9194

if.else:                                          ; preds = %lor.lhs.false20
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9195
  %base56 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !9195
  %26 = bitcast %struct.tree_base* %base56 to i64*, !dbg !9195
  %bf.load57 = load i64, i64* %26, align 8, !dbg !9195
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !9195
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !9195
  %cmp60 = icmp eq i32 %bf.cast59, 15, !dbg !9195
  br i1 %cmp60, label %if.end84, label %lor.lhs.false62, !dbg !9195

lor.lhs.false62:                                  ; preds = %if.else
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9195
  %base63 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !9195
  %28 = bitcast %struct.tree_base* %base63 to i64*, !dbg !9195
  %bf.load64 = load i64, i64* %28, align 8, !dbg !9195
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !9195
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !9195
  %cmp67 = icmp eq i32 %bf.cast66, 16, !dbg !9195
  br i1 %cmp67, label %if.end84, label %lor.lhs.false69, !dbg !9195

lor.lhs.false69:                                  ; preds = %lor.lhs.false62
  %29 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9195
  %base70 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !9195
  %30 = bitcast %struct.tree_base* %base70 to i64*, !dbg !9195
  %bf.load71 = load i64, i64* %30, align 8, !dbg !9195
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !9195
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !9195
  %cmp74 = icmp eq i32 %bf.cast73, 17, !dbg !9195
  br i1 %cmp74, label %if.end84, label %lor.lhs.false76, !dbg !9195

lor.lhs.false76:                                  ; preds = %lor.lhs.false69
  %31 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9195
  %base77 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !9195
  %32 = bitcast %struct.tree_base* %base77 to i64*, !dbg !9195
  %bf.load78 = load i64, i64* %32, align 8, !dbg !9195
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !9195
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !9195
  %cmp81 = icmp eq i32 %bf.cast80, 18, !dbg !9195
  br i1 %cmp81, label %if.end84, label %if.then83, !dbg !9197

if.then83:                                        ; preds = %lor.lhs.false76
  br label %for.inc, !dbg !9198

if.end84:                                         ; preds = %lor.lhs.false76, %lor.lhs.false69, %lor.lhs.false62, %if.else
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.end55
  %33 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9199
  %type86 = bitcast %union.tree_node* %33 to %struct.tree_type*, !dbg !9199
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type86, i32 0, i32 2, !dbg !9199
  %34 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !9199
  %cmp87 = icmp ne %union.tree_node* %34, null, !dbg !9199
  br i1 %cmp87, label %lor.lhs.false89, label %if.then131, !dbg !9201

lor.lhs.false89:                                  ; preds = %if.end85
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9202
  %type90 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !9202
  %size91 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type90, i32 0, i32 2, !dbg !9202
  %36 = load %union.tree_node*, %union.tree_node** %size91, align 8, !dbg !9202
  %call92 = call i32 @host_integerp(%union.tree_node* %36, i32 1), !dbg !9203
  %tobool93 = icmp ne i32 %call92, 0, !dbg !9203
  br i1 %tobool93, label %lor.lhs.false94, label %if.then131, !dbg !9204

lor.lhs.false94:                                  ; preds = %lor.lhs.false89
  %37 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9205
  %type95 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !9205
  %size96 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type95, i32 0, i32 2, !dbg !9205
  %38 = load %union.tree_node*, %union.tree_node** %size96, align 8, !dbg !9205
  %call97 = call i64 @tree_low_cst(%union.tree_node* %38, i32 1), !dbg !9206
  %cmp98 = icmp eq i64 %call97, 0, !dbg !9207
  br i1 %cmp98, label %if.then131, label %lor.lhs.false100, !dbg !9208

lor.lhs.false100:                                 ; preds = %lor.lhs.false94
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9209
  %base101 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !9209
  %40 = bitcast %struct.tree_base* %base101 to i64*, !dbg !9209
  %bf.load102 = load i64, i64* %40, align 8, !dbg !9209
  %bf.clear103 = and i64 %bf.load102, 65535, !dbg !9209
  %bf.cast104 = trunc i64 %bf.clear103 to i32, !dbg !9209
  %cmp105 = icmp eq i32 %bf.cast104, 15, !dbg !9209
  br i1 %cmp105, label %land.lhs.true, label %lor.lhs.false107, !dbg !9209

lor.lhs.false107:                                 ; preds = %lor.lhs.false100
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9209
  %base108 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !9209
  %42 = bitcast %struct.tree_base* %base108 to i64*, !dbg !9209
  %bf.load109 = load i64, i64* %42, align 8, !dbg !9209
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !9209
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !9209
  %cmp112 = icmp eq i32 %bf.cast111, 16, !dbg !9209
  br i1 %cmp112, label %land.lhs.true, label %lor.lhs.false114, !dbg !9209

lor.lhs.false114:                                 ; preds = %lor.lhs.false107
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9209
  %base115 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !9209
  %44 = bitcast %struct.tree_base* %base115 to i64*, !dbg !9209
  %bf.load116 = load i64, i64* %44, align 8, !dbg !9209
  %bf.clear117 = and i64 %bf.load116, 65535, !dbg !9209
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !9209
  %cmp119 = icmp eq i32 %bf.cast118, 17, !dbg !9209
  br i1 %cmp119, label %land.lhs.true, label %lor.lhs.false121, !dbg !9209

lor.lhs.false121:                                 ; preds = %lor.lhs.false114
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9209
  %base122 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !9209
  %46 = bitcast %struct.tree_base* %base122 to i64*, !dbg !9209
  %bf.load123 = load i64, i64* %46, align 8, !dbg !9209
  %bf.clear124 = and i64 %bf.load123, 65535, !dbg !9209
  %bf.cast125 = trunc i64 %bf.clear124 to i32, !dbg !9209
  %cmp126 = icmp eq i32 %bf.cast125, 18, !dbg !9209
  br i1 %cmp126, label %land.lhs.true, label %if.end132, !dbg !9210

land.lhs.true:                                    ; preds = %lor.lhs.false121, %lor.lhs.false114, %lor.lhs.false107, %lor.lhs.false100
  %47 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9211
  %call128 = call zeroext i8 @type_internals_preclude_sra_p(%union.tree_node* %47), !dbg !9212
  %conv129 = zext i8 %call128 to i32, !dbg !9212
  %tobool130 = icmp ne i32 %conv129, 0, !dbg !9212
  br i1 %tobool130, label %if.then131, label %if.end132, !dbg !9213

if.then131:                                       ; preds = %land.lhs.true, %lor.lhs.false94, %lor.lhs.false89, %if.end85
  br label %for.inc, !dbg !9214

if.end132:                                        ; preds = %land.lhs.true, %lor.lhs.false121
  %48 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !9215
  %49 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !9216
  %decl_minimal = bitcast %union.tree_node* %49 to %struct.tree_decl_minimal*, !dbg !9216
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !9216
  %50 = load i32, i32* %uid, align 4, !dbg !9216
  %call133 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %48, i32 %50), !dbg !9217
  store i8 1, i8* %ret, align 1, !dbg !9218
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9219
  %tobool134 = icmp ne %struct._IO_FILE* %51, null, !dbg !9219
  br i1 %tobool134, label %land.lhs.true135, label %if.end142, !dbg !9221

land.lhs.true135:                                 ; preds = %if.end132
  %52 = load i32, i32* @dump_flags, align 4, !dbg !9222
  %and = and i32 %52, 8, !dbg !9223
  %tobool136 = icmp ne i32 %and, 0, !dbg !9223
  br i1 %tobool136, label %if.then137, label %if.end142, !dbg !9224

if.then137:                                       ; preds = %land.lhs.true135
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9225
  %54 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !9227
  %decl_minimal138 = bitcast %union.tree_node* %54 to %struct.tree_decl_minimal*, !dbg !9227
  %uid139 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal138, i32 0, i32 2, !dbg !9227
  %55 = load i32, i32* %uid139, align 4, !dbg !9227
  %call140 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0), i32 %55), !dbg !9228
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9229
  %57 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !9230
  call void @print_generic_expr(%struct._IO_FILE* %56, %union.tree_node* %57, i32 0), !dbg !9231
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9232
  %call141 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !9233
  br label %if.end142, !dbg !9234

if.end142:                                        ; preds = %if.then137, %land.lhs.true135, %if.end132
  br label %for.inc, !dbg !9235

for.inc:                                          ; preds = %if.end142, %if.then131, %if.then83, %if.then54, %if.then13, %if.then
  %59 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !9236
  %common143 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !9236
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common143, i32 0, i32 1, !dbg !9236
  %60 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !9236
  store %union.tree_node* %60, %union.tree_node** %parm, align 8, !dbg !9237
  br label %for.cond, !dbg !9238, !llvm.loop !9239

for.end:                                          ; preds = %for.cond
  %61 = load i32, i32* %count, align 4, !dbg !9241
  store i32 %61, i32* @func_param_count, align 4, !dbg !9242
  %62 = load i8, i8* %ret, align 1, !dbg !9243
  ret i8 %62, !dbg !9244
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @all_callers_have_enough_arguments_p(%struct.cgraph_node* %node) #0 !dbg !9245 {
entry:
  %retval = alloca i8, align 1
  %node.addr = alloca %struct.cgraph_node*, align 8
  %cs = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !9246, metadata !DIExpression()), !dbg !9247
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs, metadata !9248, metadata !DIExpression()), !dbg !9249
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !9250
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 2, !dbg !9252
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !9252
  store %struct.cgraph_edge* %1, %struct.cgraph_edge** %cs, align 8, !dbg !9253
  br label %for.cond, !dbg !9254

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !9255
  %tobool = icmp ne %struct.cgraph_edge* %2, null, !dbg !9257
  br i1 %tobool, label %for.body, label %for.end, !dbg !9257

for.body:                                         ; preds = %for.cond
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !9258
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %3, i32 0, i32 7, !dbg !9260
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !9260
  %call = call zeroext i8 @callsite_has_enough_arguments_p(%union.gimple_statement_d* %4), !dbg !9261
  %tobool1 = icmp ne i8 %call, 0, !dbg !9261
  br i1 %tobool1, label %if.end, label %if.then, !dbg !9262

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !9263
  br label %return, !dbg !9263

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9264

for.inc:                                          ; preds = %if.end
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !9265
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %5, i32 0, i32 4, !dbg !9266
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !9266
  store %struct.cgraph_edge* %6, %struct.cgraph_edge** %cs, align 8, !dbg !9267
  br label %for.cond, !dbg !9268, !llvm.loop !9269

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !9271
  br label %return, !dbg !9271

return:                                           ; preds = %for.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !9272
  ret i8 %7, !dbg !9272
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ipa_parm_adjustment_t_heap* @analyze_all_param_acesses() #0 !dbg !9273 {
entry:
  %retval = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %repr_state = alloca i32, align 4
  %proceed = alloca i8, align 1
  %i = alloca i32, align 4
  %adjustments_count = alloca i32, align 4
  %representatives = alloca %struct.VEC_access_p_heap*, align 8
  %adjustments = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %repr = alloca %struct.access*, align 8
  %new_components = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %repr_state, metadata !9276, metadata !DIExpression()), !dbg !9277
  call void @llvm.dbg.declare(metadata i8* %proceed, metadata !9278, metadata !DIExpression()), !dbg !9279
  store i8 0, i8* %proceed, align 1, !dbg !9279
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9280, metadata !DIExpression()), !dbg !9281
  call void @llvm.dbg.declare(metadata i32* %adjustments_count, metadata !9282, metadata !DIExpression()), !dbg !9283
  store i32 0, i32* %adjustments_count, align 4, !dbg !9283
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap** %representatives, metadata !9284, metadata !DIExpression()), !dbg !9285
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, metadata !9286, metadata !DIExpression()), !dbg !9287
  %call = call i32 @splice_all_param_accesses(%struct.VEC_access_p_heap** %representatives), !dbg !9288
  store i32 %call, i32* %repr_state, align 4, !dbg !9289
  %0 = load i32, i32* %repr_state, align 4, !dbg !9290
  %cmp = icmp eq i32 %0, 0, !dbg !9292
  br i1 %cmp, label %if.then, label %if.end, !dbg !9293

if.then:                                          ; preds = %entry
  store %struct.VEC_ipa_parm_adjustment_t_heap* null, %struct.VEC_ipa_parm_adjustment_t_heap** %retval, align 8, !dbg !9294
  br label %return, !dbg !9294

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %repr_state, align 4, !dbg !9295
  %cmp1 = icmp eq i32 %1, 4, !dbg !9297
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !9298

if.then2:                                         ; preds = %if.end
  %2 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives, align 8, !dbg !9299
  call void @analyze_caller_dereference_legality(%struct.VEC_access_p_heap* %2), !dbg !9301
  %3 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives, align 8, !dbg !9302
  call void @analyze_modified_params(%struct.VEC_access_p_heap* %3), !dbg !9303
  br label %if.end3, !dbg !9304

if.end3:                                          ; preds = %if.then2, %if.end
  store i32 0, i32* %i, align 4, !dbg !9305
  br label %for.cond, !dbg !9307

for.cond:                                         ; preds = %for.inc, %if.end3
  %4 = load i32, i32* %i, align 4, !dbg !9308
  %5 = load i32, i32* @func_param_count, align 4, !dbg !9310
  %cmp4 = icmp slt i32 %4, %5, !dbg !9311
  br i1 %cmp4, label %for.body, label %for.end, !dbg !9312

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.access** %repr, metadata !9313, metadata !DIExpression()), !dbg !9315
  %6 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives, align 8, !dbg !9316
  %tobool = icmp ne %struct.VEC_access_p_heap* %6, null, !dbg !9316
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9316

cond.true:                                        ; preds = %for.body
  %7 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives, align 8, !dbg !9316
  %base = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %7, i32 0, i32 0, !dbg !9316
  br label %cond.end, !dbg !9316

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !9316

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9316
  %8 = load i32, i32* %i, align 4, !dbg !9316
  %call5 = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond, i32 %8), !dbg !9316
  store %struct.access* %call5, %struct.access** %repr, align 8, !dbg !9315
  %9 = load %struct.access*, %struct.access** %repr, align 8, !dbg !9317
  %tobool6 = icmp ne %struct.access* %9, null, !dbg !9317
  br i1 %tobool6, label %land.lhs.true, label %if.else49, !dbg !9319

land.lhs.true:                                    ; preds = %cond.end
  %10 = load %struct.access*, %struct.access** %repr, align 8, !dbg !9320
  %call7 = call zeroext i8 @no_accesses_p(%struct.access* %10), !dbg !9321
  %tobool8 = icmp ne i8 %call7, 0, !dbg !9321
  br i1 %tobool8, label %if.else49, label %if.then9, !dbg !9322

if.then9:                                         ; preds = %land.lhs.true
  %11 = load %struct.access*, %struct.access** %repr, align 8, !dbg !9323
  %grp_scalar_ptr = getelementptr inbounds %struct.access, %struct.access* %11, i32 0, i32 14, !dbg !9326
  %bf.load = load i16, i16* %grp_scalar_ptr, align 8, !dbg !9326
  %bf.lshr = lshr i16 %bf.load, 12, !dbg !9326
  %bf.clear = and i16 %bf.lshr, 1, !dbg !9326
  %bf.cast = zext i16 %bf.clear to i32, !dbg !9326
  %tobool10 = icmp ne i32 %bf.cast, 0, !dbg !9323
  br i1 %tobool10, label %if.then11, label %if.else32, !dbg !9327

if.then11:                                        ; preds = %if.then9
  %12 = load i32, i32* %adjustments_count, align 4, !dbg !9328
  %inc = add nsw i32 %12, 1, !dbg !9328
  store i32 %inc, i32* %adjustments_count, align 4, !dbg !9328
  %13 = load %struct.access*, %struct.access** %repr, align 8, !dbg !9330
  %grp_not_necessarilly_dereferenced = getelementptr inbounds %struct.access, %struct.access* %13, i32 0, i32 14, !dbg !9332
  %bf.load12 = load i16, i16* %grp_not_necessarilly_dereferenced, align 8, !dbg !9332
  %bf.lshr13 = lshr i16 %bf.load12, 13, !dbg !9332
  %bf.clear14 = and i16 %bf.lshr13, 1, !dbg !9332
  %bf.cast15 = zext i16 %bf.clear14 to i32, !dbg !9332
  %tobool16 = icmp ne i32 %bf.cast15, 0, !dbg !9330
  br i1 %tobool16, label %if.then22, label %lor.lhs.false, !dbg !9333

lor.lhs.false:                                    ; preds = %if.then11
  %14 = load %struct.access*, %struct.access** %repr, align 8, !dbg !9334
  %grp_maybe_modified = getelementptr inbounds %struct.access, %struct.access* %14, i32 0, i32 14, !dbg !9335
  %bf.load17 = load i16, i16* %grp_maybe_modified, align 8, !dbg !9335
  %bf.lshr18 = lshr i16 %bf.load17, 11, !dbg !9335
  %bf.clear19 = and i16 %bf.lshr18, 1, !dbg !9335
  %bf.cast20 = zext i16 %bf.clear19 to i32, !dbg !9335
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !9334
  br i1 %tobool21, label %if.then22, label %if.else, !dbg !9336

if.then22:                                        ; preds = %lor.lhs.false, %if.then11
  %15 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives, align 8, !dbg !9337
  %tobool23 = icmp ne %struct.VEC_access_p_heap* %15, null, !dbg !9337
  br i1 %tobool23, label %cond.true24, label %cond.false26, !dbg !9337

cond.true24:                                      ; preds = %if.then22
  %16 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives, align 8, !dbg !9337
  %base25 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %16, i32 0, i32 0, !dbg !9337
  br label %cond.end27, !dbg !9337

cond.false26:                                     ; preds = %if.then22
  br label %cond.end27, !dbg !9337

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi %struct.VEC_access_p_base* [ %base25, %cond.true24 ], [ null, %cond.false26 ], !dbg !9337
  %17 = load i32, i32* %i, align 4, !dbg !9337
  %call29 = call %struct.access* @VEC_access_p_base_replace(%struct.VEC_access_p_base* %cond28, i32 %17, %struct.access* null), !dbg !9337
  br label %if.end31, !dbg !9337

if.else:                                          ; preds = %lor.lhs.false
  store i8 1, i8* %proceed, align 1, !dbg !9338
  %18 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 7), align 4, !dbg !9340
  %inc30 = add nsw i32 %18, 1, !dbg !9340
  store i32 %inc30, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 7), align 4, !dbg !9340
  br label %if.end31

if.end31:                                         ; preds = %if.else, %cond.end27
  br label %if.end48, !dbg !9341

if.else32:                                        ; preds = %if.then9
  call void @llvm.dbg.declare(metadata i32* %new_components, metadata !9342, metadata !DIExpression()), !dbg !9344
  %19 = load %struct.access*, %struct.access** %repr, align 8, !dbg !9345
  %call33 = call i32 @decide_one_param_reduction(%struct.access* %19), !dbg !9346
  store i32 %call33, i32* %new_components, align 4, !dbg !9344
  %20 = load i32, i32* %new_components, align 4, !dbg !9347
  %cmp34 = icmp eq i32 %20, 0, !dbg !9349
  br i1 %cmp34, label %if.then35, label %if.else44, !dbg !9350

if.then35:                                        ; preds = %if.else32
  %21 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives, align 8, !dbg !9351
  %tobool36 = icmp ne %struct.VEC_access_p_heap* %21, null, !dbg !9351
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !9351

cond.true37:                                      ; preds = %if.then35
  %22 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives, align 8, !dbg !9351
  %base38 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %22, i32 0, i32 0, !dbg !9351
  br label %cond.end40, !dbg !9351

cond.false39:                                     ; preds = %if.then35
  br label %cond.end40, !dbg !9351

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_access_p_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !9351
  %23 = load i32, i32* %i, align 4, !dbg !9351
  %call42 = call %struct.access* @VEC_access_p_base_replace(%struct.VEC_access_p_base* %cond41, i32 %23, %struct.access* null), !dbg !9351
  %24 = load i32, i32* %adjustments_count, align 4, !dbg !9353
  %inc43 = add nsw i32 %24, 1, !dbg !9353
  store i32 %inc43, i32* %adjustments_count, align 4, !dbg !9353
  br label %if.end47, !dbg !9354

if.else44:                                        ; preds = %if.else32
  %25 = load i32, i32* %new_components, align 4, !dbg !9355
  %26 = load i32, i32* %adjustments_count, align 4, !dbg !9357
  %add = add nsw i32 %26, %25, !dbg !9357
  store i32 %add, i32* %adjustments_count, align 4, !dbg !9357
  %27 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 8), align 4, !dbg !9358
  %inc45 = add nsw i32 %27, 1, !dbg !9358
  store i32 %inc45, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 8), align 4, !dbg !9358
  %28 = load i32, i32* %new_components, align 4, !dbg !9359
  %29 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 9), align 4, !dbg !9360
  %add46 = add nsw i32 %29, %28, !dbg !9360
  store i32 %add46, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 9), align 4, !dbg !9360
  store i8 1, i8* %proceed, align 1, !dbg !9361
  br label %if.end47

if.end47:                                         ; preds = %if.else44, %cond.end40
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.end31
  br label %if.end56, !dbg !9362

if.else49:                                        ; preds = %land.lhs.true, %cond.end
  %30 = load %struct.access*, %struct.access** %repr, align 8, !dbg !9363
  %call50 = call zeroext i8 @no_accesses_p(%struct.access* %30), !dbg !9366
  %tobool51 = icmp ne i8 %call50, 0, !dbg !9366
  br i1 %tobool51, label %if.then52, label %if.end54, !dbg !9367

if.then52:                                        ; preds = %if.else49
  store i8 1, i8* %proceed, align 1, !dbg !9368
  %31 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 6), align 4, !dbg !9370
  %inc53 = add nsw i32 %31, 1, !dbg !9370
  store i32 %inc53, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sra_stats, i32 0, i32 6), align 4, !dbg !9370
  br label %if.end54, !dbg !9371

if.end54:                                         ; preds = %if.then52, %if.else49
  %32 = load i32, i32* %adjustments_count, align 4, !dbg !9372
  %inc55 = add nsw i32 %32, 1, !dbg !9372
  store i32 %inc55, i32* %adjustments_count, align 4, !dbg !9372
  br label %if.end56

if.end56:                                         ; preds = %if.end54, %if.end48
  br label %for.inc, !dbg !9373

for.inc:                                          ; preds = %if.end56
  %33 = load i32, i32* %i, align 4, !dbg !9374
  %inc57 = add nsw i32 %33, 1, !dbg !9374
  store i32 %inc57, i32* %i, align 4, !dbg !9374
  br label %for.cond, !dbg !9375, !llvm.loop !9376

for.end:                                          ; preds = %for.cond
  %34 = load i8, i8* %proceed, align 1, !dbg !9378
  %tobool58 = icmp ne i8 %34, 0, !dbg !9378
  br i1 %tobool58, label %if.end63, label %land.lhs.true59, !dbg !9380

land.lhs.true59:                                  ; preds = %for.end
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9381
  %tobool60 = icmp ne %struct._IO_FILE* %35, null, !dbg !9381
  br i1 %tobool60, label %if.then61, label %if.end63, !dbg !9382

if.then61:                                        ; preds = %land.lhs.true59
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9383
  %call62 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.62, i64 0, i64 0)), !dbg !9384
  br label %if.end63, !dbg !9384

if.end63:                                         ; preds = %if.then61, %land.lhs.true59, %for.end
  %37 = load i8, i8* %proceed, align 1, !dbg !9385
  %tobool64 = icmp ne i8 %37, 0, !dbg !9385
  br i1 %tobool64, label %if.then65, label %if.else67, !dbg !9387

if.then65:                                        ; preds = %if.end63
  %38 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives, align 8, !dbg !9388
  %39 = load i32, i32* %adjustments_count, align 4, !dbg !9389
  %call66 = call %struct.VEC_ipa_parm_adjustment_t_heap* @turn_representatives_into_adjustments(%struct.VEC_access_p_heap* %38, i32 %39), !dbg !9390
  store %struct.VEC_ipa_parm_adjustment_t_heap* %call66, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !9391
  br label %if.end68, !dbg !9392

if.else67:                                        ; preds = %if.end63
  store %struct.VEC_ipa_parm_adjustment_t_heap* null, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !9393
  br label %if.end68

if.end68:                                         ; preds = %if.else67, %if.then65
  call void @VEC_access_p_heap_free(%struct.VEC_access_p_heap** %representatives), !dbg !9394
  %40 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !9395
  store %struct.VEC_ipa_parm_adjustment_t_heap* %40, %struct.VEC_ipa_parm_adjustment_t_heap** %retval, align 8, !dbg !9396
  br label %return, !dbg !9396

return:                                           ; preds = %if.end68, %if.then
  %41 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %retval, align 8, !dbg !9397
  ret %struct.VEC_ipa_parm_adjustment_t_heap* %41, !dbg !9397
}

declare dso_local void @ipa_dump_param_adjustments(%struct._IO_FILE*, %struct.VEC_ipa_parm_adjustment_t_heap*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @modify_function(%struct.cgraph_node* %node, %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments) #0 !dbg !9398 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %adjustments.addr = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %alias = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !9401, metadata !DIExpression()), !dbg !9402
  store %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, metadata !9403, metadata !DIExpression()), !dbg !9404
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %alias, metadata !9405, metadata !DIExpression()), !dbg !9406
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !9407
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 13, !dbg !9409
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !9409
  store %struct.cgraph_node* %1, %struct.cgraph_node** %alias, align 8, !dbg !9410
  br label %for.cond, !dbg !9411

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !9412
  %tobool = icmp ne %struct.cgraph_node* %2, null, !dbg !9414
  br i1 %tobool, label %for.body, label %for.end, !dbg !9414

for.body:                                         ; preds = %for.cond
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !9415
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 0, !dbg !9416
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9416
  %5 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !9417
  call void @ipa_modify_formal_parameters(%union.tree_node* %4, %struct.VEC_ipa_parm_adjustment_t_heap* %5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.69, i64 0, i64 0)), !dbg !9418
  br label %for.inc, !dbg !9418

for.inc:                                          ; preds = %for.body
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !9419
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 3, !dbg !9420
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !9420
  store %struct.cgraph_node* %7, %struct.cgraph_node** %alias, align 8, !dbg !9421
  br label %for.cond, !dbg !9422, !llvm.loop !9423

for.end:                                          ; preds = %for.cond
  %8 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9425
  call void @create_abstract_origin(%union.tree_node* %8), !dbg !9426
  %9 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9427
  %10 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !9428
  call void @ipa_modify_formal_parameters(%union.tree_node* %9, %struct.VEC_ipa_parm_adjustment_t_heap* %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.69, i64 0, i64 0)), !dbg !9429
  %11 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !9430
  %12 = bitcast %struct.VEC_ipa_parm_adjustment_t_heap* %11 to i8*, !dbg !9430
  %call = call zeroext i8 @scan_function(i8 (%union.tree_node**, %struct.gimple_stmt_iterator*, i8, i8*)* @sra_ipa_modify_expr, i32 (%union.gimple_statement_d**, %struct.gimple_stmt_iterator*, i8*)* @sra_ipa_modify_assign, i8 (%union.gimple_statement_d*, i8*)* @replace_removed_params_ssa_names, i8 zeroext 0, i8* %12), !dbg !9431
  %13 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !9432
  call void @sra_ipa_reset_debug_stmts(%struct.VEC_ipa_parm_adjustment_t_heap* %13), !dbg !9433
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !9434
  %15 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !9435
  call void @convert_callers(%struct.cgraph_node* %14, %struct.VEC_ipa_parm_adjustment_t_heap* %15), !dbg !9436
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !9437
  call void @cgraph_make_node_local(%struct.cgraph_node* %16), !dbg !9438
  ret void, !dbg !9439
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_parm_adjustment_t_heap_free(%struct.VEC_ipa_parm_adjustment_t_heap** %vec_) #0 !dbg !9440 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_parm_adjustment_t_heap**, align 8
  store %struct.VEC_ipa_parm_adjustment_t_heap** %vec_, %struct.VEC_ipa_parm_adjustment_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap*** %vec_.addr, metadata !9444, metadata !DIExpression()), !dbg !9445
  %0 = load %struct.VEC_ipa_parm_adjustment_t_heap**, %struct.VEC_ipa_parm_adjustment_t_heap*** %vec_.addr, align 8, !dbg !9446
  %1 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %0, align 8, !dbg !9446
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %1, null, !dbg !9446
  br i1 %tobool, label %if.then, label %if.end, !dbg !9445

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ipa_parm_adjustment_t_heap**, %struct.VEC_ipa_parm_adjustment_t_heap*** %vec_.addr, align 8, !dbg !9446
  %3 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %2, align 8, !dbg !9446
  %4 = bitcast %struct.VEC_ipa_parm_adjustment_t_heap* %3 to i8*, !dbg !9446
  call void @free(i8* %4), !dbg !9446
  br label %if.end, !dbg !9446

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ipa_parm_adjustment_t_heap**, %struct.VEC_ipa_parm_adjustment_t_heap*** %vec_.addr, align 8, !dbg !9445
  store %struct.VEC_ipa_parm_adjustment_t_heap* null, %struct.VEC_ipa_parm_adjustment_t_heap** %5, align 8, !dbg !9445
  ret void, !dbg !9445
}

declare dso_local zeroext i8 @cgraph_node_can_be_local_p(%struct.cgraph_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_unused_scalar_param(%union.tree_node* %parm) #0 !dbg !9448 {
entry:
  %parm.addr = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  store %union.tree_node* %parm, %union.tree_node** %parm.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm.addr, metadata !9449, metadata !DIExpression()), !dbg !9450
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !9451, metadata !DIExpression()), !dbg !9452
  %0 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !9453
  %call = call zeroext i8 @is_gimple_reg(%union.tree_node* %0), !dbg !9454
  %conv = zext i8 %call to i32, !dbg !9454
  %tobool = icmp ne i32 %conv, 0, !dbg !9454
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9455

land.rhs:                                         ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9456
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !9456
  %2 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !9457
  %call1 = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr, %union.tree_node* %2), !dbg !9458
  store %union.tree_node* %call1, %union.tree_node** %name, align 8, !dbg !9459
  %tobool2 = icmp ne %union.tree_node* %call1, null, !dbg !9459
  br i1 %tobool2, label %lor.rhs, label %lor.end, !dbg !9460

lor.rhs:                                          ; preds = %land.rhs
  %3 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !9461
  %call3 = call zeroext i8 @has_zero_uses(%union.tree_node* %3), !dbg !9462
  %conv4 = zext i8 %call3 to i32, !dbg !9462
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !9460
  br label %lor.end, !dbg !9460

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %4 = phi i1 [ true, %land.rhs ], [ %tobool5, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %5 = phi i1 [ false, %entry ], [ %4, %lor.end ], !dbg !9463
  %land.ext = zext i1 %5 to i32, !dbg !9455
  %conv6 = trunc i32 %land.ext to i8, !dbg !9464
  ret i8 %conv6, !dbg !9465
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ptr_parm_has_direct_uses(%union.tree_node* %parm) #0 !dbg !9466 {
entry:
  %parm.addr = alloca %union.tree_node*, align 8
  %ui = alloca %struct.immediate_use_iterator_d, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %name = alloca %union.tree_node*, align 8
  %ret = alloca i8, align 1
  %uses_ok = alloca i32, align 4
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  store %union.tree_node* %parm, %union.tree_node** %parm.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm.addr, metadata !9467, metadata !DIExpression()), !dbg !9468
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %ui, metadata !9469, metadata !DIExpression()), !dbg !9477
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !9478, metadata !DIExpression()), !dbg !9479
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !9480, metadata !DIExpression()), !dbg !9481
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9482
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !9482
  %1 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !9483
  %call = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr, %union.tree_node* %1), !dbg !9484
  store %union.tree_node* %call, %union.tree_node** %name, align 8, !dbg !9481
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !9485, metadata !DIExpression()), !dbg !9486
  store i8 0, i8* %ret, align 1, !dbg !9486
  %2 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !9487
  %call1 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %ui, %union.tree_node* %2), !dbg !9487
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !9487
  br label %for.cond, !dbg !9487

for.cond:                                         ; preds = %for.inc125, %entry
  %call2 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %ui), !dbg !9489
  %tobool = icmp ne i8 %call2, 0, !dbg !9489
  %lnot = xor i1 %tobool, true, !dbg !9489
  br i1 %lnot, label %for.body, label %for.end127, !dbg !9487

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %uses_ok, metadata !9491, metadata !DIExpression()), !dbg !9493
  store i32 0, i32* %uses_ok, align 4, !dbg !9493
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !9494, metadata !DIExpression()), !dbg !9495
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9496
  %call3 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %3), !dbg !9498
  %tobool4 = icmp ne i8 %call3, 0, !dbg !9498
  br i1 %tobool4, label %if.then, label %if.end, !dbg !9499

if.then:                                          ; preds = %for.body
  br label %for.inc125, !dbg !9500

if.end:                                           ; preds = %for.body
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9501
  %call5 = call zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %4), !dbg !9503
  %tobool6 = icmp ne i8 %call5, 0, !dbg !9503
  br i1 %tobool6, label %if.then7, label %if.end28, !dbg !9504

if.then7:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !9505, metadata !DIExpression()), !dbg !9507
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9508
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %5), !dbg !9509
  store %union.tree_node* %call8, %union.tree_node** %lhs, align 8, !dbg !9507
  br label %while.cond, !dbg !9510

while.cond:                                       ; preds = %while.body, %if.then7
  %6 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9511
  %call9 = call zeroext i8 @handled_component_p(%union.tree_node* %6), !dbg !9512
  %tobool10 = icmp ne i8 %call9, 0, !dbg !9510
  br i1 %tobool10, label %while.body, label %while.end, !dbg !9510

while.body:                                       ; preds = %while.cond
  %7 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9513
  %exp = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !9513
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9513
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9513
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9513
  store %union.tree_node* %8, %union.tree_node** %lhs, align 8, !dbg !9514
  br label %while.cond, !dbg !9510, !llvm.loop !9515

while.end:                                        ; preds = %while.cond
  %9 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9516
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !9516
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !9516
  %bf.load = load i64, i64* %10, align 8, !dbg !9516
  %bf.clear = and i64 %bf.load, 65535, !dbg !9516
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9516
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !9516
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !9516

lor.lhs.false:                                    ; preds = %while.end
  %11 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9516
  %base11 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !9516
  %12 = bitcast %struct.tree_base* %base11 to i64*, !dbg !9516
  %bf.load12 = load i64, i64* %12, align 8, !dbg !9516
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !9516
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !9516
  %cmp15 = icmp eq i32 %bf.cast14, 48, !dbg !9516
  br i1 %cmp15, label %land.lhs.true, label %lor.lhs.false16, !dbg !9516

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9516
  %base17 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !9516
  %14 = bitcast %struct.tree_base* %base17 to i64*, !dbg !9516
  %bf.load18 = load i64, i64* %14, align 8, !dbg !9516
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !9516
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !9516
  %cmp21 = icmp eq i32 %bf.cast20, 49, !dbg !9516
  br i1 %cmp21, label %land.lhs.true, label %if.end27, !dbg !9518

land.lhs.true:                                    ; preds = %lor.lhs.false16, %lor.lhs.false, %while.end
  %15 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9519
  %exp22 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !9519
  %operands23 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 3, !dbg !9519
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands23, i64 0, i64 0, !dbg !9519
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !9519
  %17 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !9520
  %cmp25 = icmp eq %union.tree_node* %16, %17, !dbg !9521
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !9522

if.then26:                                        ; preds = %land.lhs.true
  %18 = load i32, i32* %uses_ok, align 4, !dbg !9523
  %inc = add nsw i32 %18, 1, !dbg !9523
  store i32 %inc, i32* %uses_ok, align 4, !dbg !9523
  br label %if.end27, !dbg !9524

if.end27:                                         ; preds = %if.then26, %land.lhs.true, %lor.lhs.false16
  br label %if.end28, !dbg !9525

if.end28:                                         ; preds = %if.end27, %if.end
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9526
  %call29 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %19), !dbg !9528
  %tobool30 = icmp ne i8 %call29, 0, !dbg !9528
  br i1 %tobool30, label %if.then31, label %if.else, !dbg !9529

if.then31:                                        ; preds = %if.end28
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !9530, metadata !DIExpression()), !dbg !9532
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9533
  %call32 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %20), !dbg !9534
  store %union.tree_node* %call32, %union.tree_node** %rhs, align 8, !dbg !9532
  br label %while.cond33, !dbg !9535

while.cond33:                                     ; preds = %while.body36, %if.then31
  %21 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9536
  %call34 = call zeroext i8 @handled_component_p(%union.tree_node* %21), !dbg !9537
  %tobool35 = icmp ne i8 %call34, 0, !dbg !9535
  br i1 %tobool35, label %while.body36, label %while.end40, !dbg !9535

while.body36:                                     ; preds = %while.cond33
  %22 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9538
  %exp37 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !9538
  %operands38 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp37, i32 0, i32 3, !dbg !9538
  %arrayidx39 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands38, i64 0, i64 0, !dbg !9538
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx39, align 8, !dbg !9538
  store %union.tree_node* %23, %union.tree_node** %rhs, align 8, !dbg !9539
  br label %while.cond33, !dbg !9535, !llvm.loop !9540

while.end40:                                      ; preds = %while.cond33
  %24 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9541
  %base41 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !9541
  %25 = bitcast %struct.tree_base* %base41 to i64*, !dbg !9541
  %bf.load42 = load i64, i64* %25, align 8, !dbg !9541
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !9541
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !9541
  %cmp45 = icmp eq i32 %bf.cast44, 47, !dbg !9541
  br i1 %cmp45, label %land.lhs.true58, label %lor.lhs.false46, !dbg !9541

lor.lhs.false46:                                  ; preds = %while.end40
  %26 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9541
  %base47 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !9541
  %27 = bitcast %struct.tree_base* %base47 to i64*, !dbg !9541
  %bf.load48 = load i64, i64* %27, align 8, !dbg !9541
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !9541
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !9541
  %cmp51 = icmp eq i32 %bf.cast50, 48, !dbg !9541
  br i1 %cmp51, label %land.lhs.true58, label %lor.lhs.false52, !dbg !9541

lor.lhs.false52:                                  ; preds = %lor.lhs.false46
  %28 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9541
  %base53 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !9541
  %29 = bitcast %struct.tree_base* %base53 to i64*, !dbg !9541
  %bf.load54 = load i64, i64* %29, align 8, !dbg !9541
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !9541
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !9541
  %cmp57 = icmp eq i32 %bf.cast56, 49, !dbg !9541
  br i1 %cmp57, label %land.lhs.true58, label %if.end65, !dbg !9543

land.lhs.true58:                                  ; preds = %lor.lhs.false52, %lor.lhs.false46, %while.end40
  %30 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9544
  %exp59 = bitcast %union.tree_node* %30 to %struct.tree_exp*, !dbg !9544
  %operands60 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp59, i32 0, i32 3, !dbg !9544
  %arrayidx61 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands60, i64 0, i64 0, !dbg !9544
  %31 = load %union.tree_node*, %union.tree_node** %arrayidx61, align 8, !dbg !9544
  %32 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !9545
  %cmp62 = icmp eq %union.tree_node* %31, %32, !dbg !9546
  br i1 %cmp62, label %if.then63, label %if.end65, !dbg !9547

if.then63:                                        ; preds = %land.lhs.true58
  %33 = load i32, i32* %uses_ok, align 4, !dbg !9548
  %inc64 = add nsw i32 %33, 1, !dbg !9548
  store i32 %inc64, i32* %uses_ok, align 4, !dbg !9548
  br label %if.end65, !dbg !9549

if.end65:                                         ; preds = %if.then63, %land.lhs.true58, %lor.lhs.false52
  br label %if.end109, !dbg !9550

if.else:                                          ; preds = %if.end28
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9551
  %call66 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %34), !dbg !9553
  %tobool67 = icmp ne i8 %call66, 0, !dbg !9553
  br i1 %tobool67, label %if.then68, label %if.end108, !dbg !9554

if.then68:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9555, metadata !DIExpression()), !dbg !9557
  store i32 0, i32* %i, align 4, !dbg !9558
  br label %for.cond69, !dbg !9560

for.cond69:                                       ; preds = %for.inc, %if.then68
  %35 = load i32, i32* %i, align 4, !dbg !9561
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9563
  %call70 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %36), !dbg !9564
  %cmp71 = icmp ult i32 %35, %call70, !dbg !9565
  br i1 %cmp71, label %for.body72, label %for.end, !dbg !9566

for.body72:                                       ; preds = %for.cond69
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !9567, metadata !DIExpression()), !dbg !9569
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9570
  %38 = load i32, i32* %i, align 4, !dbg !9571
  %call73 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %37, i32 %38), !dbg !9572
  store %union.tree_node* %call73, %union.tree_node** %arg, align 8, !dbg !9569
  br label %while.cond74, !dbg !9573

while.cond74:                                     ; preds = %while.body77, %for.body72
  %39 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9574
  %call75 = call zeroext i8 @handled_component_p(%union.tree_node* %39), !dbg !9575
  %tobool76 = icmp ne i8 %call75, 0, !dbg !9573
  br i1 %tobool76, label %while.body77, label %while.end81, !dbg !9573

while.body77:                                     ; preds = %while.cond74
  %40 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9576
  %exp78 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !9576
  %operands79 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp78, i32 0, i32 3, !dbg !9576
  %arrayidx80 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands79, i64 0, i64 0, !dbg !9576
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx80, align 8, !dbg !9576
  store %union.tree_node* %41, %union.tree_node** %arg, align 8, !dbg !9577
  br label %while.cond74, !dbg !9573, !llvm.loop !9578

while.end81:                                      ; preds = %while.cond74
  %42 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9579
  %base82 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !9579
  %43 = bitcast %struct.tree_base* %base82 to i64*, !dbg !9579
  %bf.load83 = load i64, i64* %43, align 8, !dbg !9579
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !9579
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !9579
  %cmp86 = icmp eq i32 %bf.cast85, 47, !dbg !9579
  br i1 %cmp86, label %land.lhs.true99, label %lor.lhs.false87, !dbg !9579

lor.lhs.false87:                                  ; preds = %while.end81
  %44 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9579
  %base88 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !9579
  %45 = bitcast %struct.tree_base* %base88 to i64*, !dbg !9579
  %bf.load89 = load i64, i64* %45, align 8, !dbg !9579
  %bf.clear90 = and i64 %bf.load89, 65535, !dbg !9579
  %bf.cast91 = trunc i64 %bf.clear90 to i32, !dbg !9579
  %cmp92 = icmp eq i32 %bf.cast91, 48, !dbg !9579
  br i1 %cmp92, label %land.lhs.true99, label %lor.lhs.false93, !dbg !9579

lor.lhs.false93:                                  ; preds = %lor.lhs.false87
  %46 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9579
  %base94 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !9579
  %47 = bitcast %struct.tree_base* %base94 to i64*, !dbg !9579
  %bf.load95 = load i64, i64* %47, align 8, !dbg !9579
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !9579
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !9579
  %cmp98 = icmp eq i32 %bf.cast97, 49, !dbg !9579
  br i1 %cmp98, label %land.lhs.true99, label %if.end106, !dbg !9581

land.lhs.true99:                                  ; preds = %lor.lhs.false93, %lor.lhs.false87, %while.end81
  %48 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9582
  %exp100 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !9582
  %operands101 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp100, i32 0, i32 3, !dbg !9582
  %arrayidx102 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands101, i64 0, i64 0, !dbg !9582
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx102, align 8, !dbg !9582
  %50 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !9583
  %cmp103 = icmp eq %union.tree_node* %49, %50, !dbg !9584
  br i1 %cmp103, label %if.then104, label %if.end106, !dbg !9585

if.then104:                                       ; preds = %land.lhs.true99
  %51 = load i32, i32* %uses_ok, align 4, !dbg !9586
  %inc105 = add nsw i32 %51, 1, !dbg !9586
  store i32 %inc105, i32* %uses_ok, align 4, !dbg !9586
  br label %if.end106, !dbg !9587

if.end106:                                        ; preds = %if.then104, %land.lhs.true99, %lor.lhs.false93
  br label %for.inc, !dbg !9588

for.inc:                                          ; preds = %if.end106
  %52 = load i32, i32* %i, align 4, !dbg !9589
  %inc107 = add i32 %52, 1, !dbg !9589
  store i32 %inc107, i32* %i, align 4, !dbg !9589
  br label %for.cond69, !dbg !9590, !llvm.loop !9591

for.end:                                          ; preds = %for.cond69
  br label %if.end108, !dbg !9593

if.end108:                                        ; preds = %for.end, %if.else
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.end65
  %call110 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %ui), !dbg !9594
  store %struct.ssa_use_operand_d* %call110, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9594
  br label %for.cond111, !dbg !9594

for.cond111:                                      ; preds = %for.inc116, %if.end109
  %call112 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %ui), !dbg !9596
  %tobool113 = icmp ne i8 %call112, 0, !dbg !9596
  %lnot114 = xor i1 %tobool113, true, !dbg !9596
  br i1 %lnot114, label %for.body115, label %for.end118, !dbg !9594

for.body115:                                      ; preds = %for.cond111
  %53 = load i32, i32* %uses_ok, align 4, !dbg !9598
  %dec = add nsw i32 %53, -1, !dbg !9598
  store i32 %dec, i32* %uses_ok, align 4, !dbg !9598
  br label %for.inc116, !dbg !9598

for.inc116:                                       ; preds = %for.body115
  %call117 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %ui), !dbg !9596
  store %struct.ssa_use_operand_d* %call117, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9596
  br label %for.cond111, !dbg !9596, !llvm.loop !9599

for.end118:                                       ; preds = %for.cond111
  %54 = load i32, i32* %uses_ok, align 4, !dbg !9601
  %cmp119 = icmp ne i32 %54, 0, !dbg !9603
  br i1 %cmp119, label %if.then120, label %if.end121, !dbg !9604

if.then120:                                       ; preds = %for.end118
  store i8 1, i8* %ret, align 1, !dbg !9605
  br label %if.end121, !dbg !9606

if.end121:                                        ; preds = %if.then120, %for.end118
  %55 = load i8, i8* %ret, align 1, !dbg !9607
  %tobool122 = icmp ne i8 %55, 0, !dbg !9607
  br i1 %tobool122, label %if.then123, label %if.end124, !dbg !9609

if.then123:                                       ; preds = %if.end121
  call void @end_imm_use_stmt_traverse(%struct.immediate_use_iterator_d* %ui), !dbg !9610
  br label %for.end127, !dbg !9610

if.end124:                                        ; preds = %if.end121
  br label %for.inc125, !dbg !9612

for.inc125:                                       ; preds = %if.end124, %if.then
  %call126 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %ui), !dbg !9489
  store %union.gimple_statement_d* %call126, %union.gimple_statement_d** %stmt, align 8, !dbg !9489
  br label %for.cond, !dbg !9489, !llvm.loop !9613

for.end127:                                       ; preds = %if.then123, %for.cond
  %56 = load i8, i8* %ret, align 1, !dbg !9615
  ret i8 %56, !dbg !9616
}

declare dso_local %union.tree_node* @gimple_default_def(%struct.function*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @has_zero_uses(%union.tree_node* %var) #0 !dbg !9617 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !9618, metadata !DIExpression()), !dbg !9619
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !9620, metadata !DIExpression()), !dbg !9624
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9625
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !9625
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !9625
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !9624
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !9626
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !9628
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !9629
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9629
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !9630
  br i1 %cmp, label %if.then, label %if.end, !dbg !9631

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !9632
  br label %return, !dbg !9632

if.end:                                           ; preds = %entry
  %4 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !9633
  %tobool = icmp ne i32 %4, 0, !dbg !9633
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !9635

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !9636
  br label %return, !dbg !9636

if.end2:                                          ; preds = %if.end
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !9637
  %call = call zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d* %5), !dbg !9638
  store i8 %call, i8* %retval, align 1, !dbg !9639
  br label %return, !dbg !9639

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !9640
  ret i8 %6, !dbg !9640
}

declare dso_local zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !9641 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9645, metadata !DIExpression()), !dbg !9646
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !9647, metadata !DIExpression()), !dbg !9648
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9649
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !9649
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !9649
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9650
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !9651
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !9652
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9653
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !9654
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !9654
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !9655
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9655
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9656
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !9657
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !9658
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9659
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !9660
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !9661
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9662
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !9663
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !9664
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !9665
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9666
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !9667
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !9668
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !9669
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9670
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !9671
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !9672
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !9673
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !9674
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9675
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !9676
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !9677
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !9678
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9679
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !9681
  %tobool = icmp ne i8 %call, 0, !dbg !9681
  br i1 %tobool, label %if.then, label %if.end, !dbg !9682

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !9683
  br label %return, !dbg !9683

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9684
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !9685
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !9685
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9686
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !9687
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9688
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !9688
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !9688
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !9688
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !9688
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !9688
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !9689
  br label %return, !dbg !9689

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !9690
  ret %union.gimple_statement_d* %18, !dbg !9690
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !9691 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9696, metadata !DIExpression()), !dbg !9697
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9698
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !9699
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !9699
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9700
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !9701
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !9701
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !9702
  %conv = zext i1 %cmp to i32, !dbg !9702
  %conv1 = trunc i32 %conv to i8, !dbg !9703
  ret i8 %conv1, !dbg !9704
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !9705 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9706, metadata !DIExpression()), !dbg !9707
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9708
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9709
  %cmp = icmp eq i32 %call, 2, !dbg !9710
  %conv = zext i1 %cmp to i32, !dbg !9710
  %conv1 = trunc i32 %conv to i8, !dbg !9709
  ret i8 %conv1, !dbg !9711
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %stmt) #0 !dbg !9712 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9713, metadata !DIExpression()), !dbg !9714
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9715
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !9716
  %conv = zext i8 %call to i32, !dbg !9716
  %tobool = icmp ne i32 %conv, 0, !dbg !9716
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !9717

lor.rhs:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9718
  %call1 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !9719
  %conv2 = zext i8 %call1 to i32, !dbg !9719
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !9719
  br i1 %tobool3, label %land.rhs, label %land.end, !dbg !9720

land.rhs:                                         ; preds = %lor.rhs
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9721
  %call4 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !9722
  %cmp = icmp ne %union.tree_node* %call4, null, !dbg !9723
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %3 = phi i1 [ false, %lor.rhs ], [ %cmp, %land.rhs ], !dbg !9724
  br label %lor.end, !dbg !9717

lor.end:                                          ; preds = %land.end, %entry
  %4 = phi i1 [ true, %entry ], [ %3, %land.end ]
  %lor.ext = zext i1 %4 to i32, !dbg !9717
  %conv6 = trunc i32 %lor.ext to i8, !dbg !9725
  ret i8 %conv6, !dbg !9726
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !9727 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9728, metadata !DIExpression()), !dbg !9729
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9730
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9731
  %cmp = icmp eq i32 %call, 8, !dbg !9732
  %conv = zext i1 %cmp to i32, !dbg !9732
  %conv1 = trunc i32 %conv to i8, !dbg !9731
  ret i8 %conv1, !dbg !9733
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !9734 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9735, metadata !DIExpression()), !dbg !9736
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9737, metadata !DIExpression()), !dbg !9738
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9739
  %1 = load i32, i32* %index.addr, align 4, !dbg !9740
  %add = add i32 %1, 3, !dbg !9741
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !9742
  ret %union.tree_node* %call, !dbg !9743
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !9744 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9747, metadata !DIExpression()), !dbg !9748
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9749
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !9750
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !9750
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !9751
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9751
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9752
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !9753
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !9754
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9755
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !9756
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !9756
  ret %struct.ssa_use_operand_d* %5, !dbg !9757
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !9758 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9759, metadata !DIExpression()), !dbg !9760
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9761
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !9762
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !9762
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9763
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !9764
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !9765
  %conv = zext i1 %cmp to i32, !dbg !9765
  %conv1 = trunc i32 %conv to i8, !dbg !9766
  ret i8 %conv1, !dbg !9767
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !9768 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9769, metadata !DIExpression()), !dbg !9770
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9771
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !9772
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !9772
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9773
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !9774
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !9775
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9776
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !9778
  %tobool = icmp ne i8 %call, 0, !dbg !9778
  br i1 %tobool, label %if.then, label %if.else, !dbg !9779

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9780
  br label %return, !dbg !9780

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9781
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !9783
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !9783
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !9784
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9784
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9785
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !9786
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !9787
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9788
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !9789
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !9789
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9790
  br label %return, !dbg !9790

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9791
  ret %struct.ssa_use_operand_d* %10, !dbg !9791
}

; Function Attrs: noinline nounwind uwtable
define internal void @end_imm_use_stmt_traverse(%struct.immediate_use_iterator_d* %imm) #0 !dbg !9792 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9795, metadata !DIExpression()), !dbg !9796
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9797
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !9798
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node), !dbg !9799
  ret void, !dbg !9800
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !9801 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9804, metadata !DIExpression()), !dbg !9805
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9806
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !9807
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !9808
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9808
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9809
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !9810
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !9811
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9812
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !9814
  %tobool = icmp ne i8 %call, 0, !dbg !9814
  br i1 %tobool, label %if.then, label %if.end4, !dbg !9815

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9816
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !9819
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !9820
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !9820
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !9821
  br i1 %cmp, label %if.then2, label %if.end, !dbg !9822

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9823
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !9824
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !9825
  br label %if.end, !dbg !9825

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !9826
  br label %return, !dbg !9826

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9827
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !9828
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !9828
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9829
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !9830
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9831
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !9831
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !9831
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !9831
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !9831
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9831
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !9832
  br label %return, !dbg !9832

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !9833
  ret %union.gimple_statement_d* %13, !dbg !9833
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !9834 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !9837, metadata !DIExpression()), !dbg !9838
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9839, metadata !DIExpression()), !dbg !9840
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !9841, metadata !DIExpression()), !dbg !9842
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !9843, metadata !DIExpression()), !dbg !9844
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9845
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9844
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !9846, metadata !DIExpression()), !dbg !9847
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9848
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !9848
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !9848
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9848
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !9847
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !9849, metadata !DIExpression()), !dbg !9850
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9851
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !9851
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !9850
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !9852, metadata !DIExpression()), !dbg !9865
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !9866, metadata !DIExpression()), !dbg !9867
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9868
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !9869
  %conv = zext i8 %call1 to i32, !dbg !9869
  %tobool = icmp ne i32 %conv, 0, !dbg !9869
  %5 = zext i1 %tobool to i64, !dbg !9869
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !9869
  store i32 %cond, i32* %flag, align 4, !dbg !9870
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !9871
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !9873
  %cmp = icmp eq i32 %call2, 16, !dbg !9874
  br i1 %cmp, label %if.then, label %if.else, !dbg !9875

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !9876
  %8 = load i32, i32* %flag, align 4, !dbg !9876
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !9876
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9876
  br label %for.cond, !dbg !9876

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !9879
  %tobool6 = icmp ne i8 %call5, 0, !dbg !9879
  %lnot = xor i1 %tobool6, true, !dbg !9879
  br i1 %lnot, label %for.body, label %for.end, !dbg !9876

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9881
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !9881
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9883
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !9884
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !9885

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9886
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9887
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9888
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !9889
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9890
  br label %if.end, !dbg !9891

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !9883

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !9879
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9879
  br label %for.cond, !dbg !9879, !llvm.loop !9892

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !9894

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !9895
  %cmp13 = icmp eq i32 %14, 1, !dbg !9898
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !9899

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !9900
  %16 = load i32, i32* %flag, align 4, !dbg !9900
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !9900
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9900
  br label %for.cond17, !dbg !9900

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !9903
  %tobool19 = icmp ne i8 %call18, 0, !dbg !9903
  %lnot20 = xor i1 %tobool19, true, !dbg !9903
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !9900

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9905
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !9905
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9907
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !9908
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !9909

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9910
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9911
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9912
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !9913
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9914
  br label %if.end27, !dbg !9915

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !9907

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !9903
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9903
  br label %for.cond17, !dbg !9903, !llvm.loop !9916

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !9918

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !9919
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !9921
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9922
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !9923
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !9924

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9925
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !9925
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9928
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !9929
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !9930

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9931
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9932
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9933
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !9934
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9935
  br label %if.end41, !dbg !9936

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !9937

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9938
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !9940
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !9941
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !9941
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !9942
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !9943

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9944
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !9945
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !9946
  br label %if.end49, !dbg !9946

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9947
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !9948
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9949
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !9950
  ret void, !dbg !9951
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !9952 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !9955, metadata !DIExpression()), !dbg !9956
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !9957
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !9958
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !9958
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !9959
  ret %union.tree_node* %2, !dbg !9960
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !9961 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !9965, metadata !DIExpression()), !dbg !9966
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !9967, metadata !DIExpression()), !dbg !9968
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !9969, metadata !DIExpression()), !dbg !9970
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !9971, metadata !DIExpression()), !dbg !9972
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !9973
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !9974
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !9972
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !9975, metadata !DIExpression()), !dbg !9976
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9977
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !9978
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9979
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !9980
  store i8 0, i8* %done, align 8, !dbg !9981
  %3 = load i32, i32* %flags.addr, align 4, !dbg !9982
  %and = and i32 %3, 5, !dbg !9982
  %cmp = icmp ne i32 %and, 0, !dbg !9982
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9982

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9982
  br label %cond.end, !dbg !9982

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9982

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9982
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !9983
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !9984
  %conv = zext i8 %call1 to i32, !dbg !9984
  %tobool = icmp ne i32 %conv, 0, !dbg !9984
  %5 = zext i1 %tobool to i64, !dbg !9984
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !9984
  store i32 %cond2, i32* %comp, align 4, !dbg !9985
  %6 = load i32, i32* %flags.addr, align 4, !dbg !9986
  %7 = load i32, i32* %comp, align 4, !dbg !9988
  %and3 = and i32 %6, %7, !dbg !9989
  %cmp4 = icmp eq i32 %and3, 0, !dbg !9990
  br i1 %cmp4, label %if.then, label %if.end, !dbg !9991

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9992
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !9994
  store i8 1, i8* %done6, align 8, !dbg !9995
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9996
  br label %return, !dbg !9996

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !9997
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9998
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !9999
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !10000
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !10001
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !10002
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10003
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !10004
  store i32 %call7, i32* %num_phi, align 4, !dbg !10005
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10006
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !10007
  store i32 2, i32* %iter_type, align 4, !dbg !10008
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10009
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !10010
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10011
  br label %return, !dbg !10011

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10012
  ret %struct.ssa_use_operand_d* %15, !dbg !10012
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !10013 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10018, metadata !DIExpression()), !dbg !10019
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10020
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !10021
  %1 = load i8, i8* %done, align 8, !dbg !10021
  ret i8 %1, !dbg !10022
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !10023 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !10026, metadata !DIExpression()), !dbg !10027
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !10028, metadata !DIExpression()), !dbg !10029
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !10030, metadata !DIExpression()), !dbg !10031
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10032
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10034
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !10035
  br i1 %cmp, label %if.then, label %if.end3, !dbg !10036

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10037
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !10040
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !10040
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10041
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !10042
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !10043

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10044
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10045
  br label %if.end, !dbg !10046

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10047
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !10049
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10050
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10051
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !10052
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10053
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10054
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !10055

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10056
  ret %struct.ssa_use_operand_d* %10, !dbg !10057
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !10058 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10061, metadata !DIExpression()), !dbg !10062
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !10063, metadata !DIExpression()), !dbg !10064
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10065
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !10067
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !10067
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !10065
  br i1 %tobool, label %if.then, label %if.end, !dbg !10068

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10069
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !10069
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !10069
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !10069
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10071
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10072
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !10073
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !10073
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !10074
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !10074
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10075
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !10076
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !10077
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10078
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10079
  br label %return, !dbg !10079

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10080
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !10082
  %10 = load i32, i32* %phi_i, align 8, !dbg !10082
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10083
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !10084
  %12 = load i32, i32* %num_phi, align 4, !dbg !10084
  %cmp = icmp slt i32 %10, %12, !dbg !10085
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !10086

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10087
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !10087
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !10087
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10087
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !10087
  %16 = load i32, i32* %phi_i5, align 8, !dbg !10087
  %inc = add nsw i32 %16, 1, !dbg !10087
  store i32 %inc, i32* %phi_i5, align 8, !dbg !10087
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !10087
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10089
  br label %return, !dbg !10089

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10090
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !10091
  store i8 1, i8* %done, align 8, !dbg !10092
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10093
  br label %return, !dbg !10093

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10094
  ret %struct.ssa_use_operand_d* %18, !dbg !10094
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !10095 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10096, metadata !DIExpression()), !dbg !10097
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10098, metadata !DIExpression()), !dbg !10099
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10100, metadata !DIExpression()), !dbg !10101
  %0 = load i32, i32* %flags.addr, align 4, !dbg !10102
  %and = and i32 %0, 10, !dbg !10102
  %cmp = icmp eq i32 %and, 0, !dbg !10102
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !10102

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !10102
  %and1 = and i32 %1, 1, !dbg !10102
  %tobool = icmp ne i32 %and1, 0, !dbg !10102
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10102

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10102
  br label %cond.end, !dbg !10102

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !10102

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10102
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10103
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10104
  %4 = load i32, i32* %flags.addr, align 4, !dbg !10105
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !10106
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10107
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !10108
  store i32 2, i32* %iter_type, align 4, !dbg !10109
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10110
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !10111
  ret %struct.ssa_use_operand_d* %call, !dbg !10112
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !10113 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10116, metadata !DIExpression()), !dbg !10117
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !10118, metadata !DIExpression()), !dbg !10119
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10120
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10122
  %tobool = icmp ne i8 %call, 0, !dbg !10122
  br i1 %tobool, label %if.end, label %if.then, !dbg !10123

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10124
  br label %return, !dbg !10124

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10125
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !10126
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !10127
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !10128
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !10128
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !10129
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !10130
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !10130
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !10132

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !10133
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !10133
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !10134
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !10134
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10135
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10136
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !10137
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !10138
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !10139

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !10140
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !10140
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10141
  br label %return, !dbg !10141

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10142
  br label %return, !dbg !10142

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10143
  ret %struct.ssa_use_operand_d* %8, !dbg !10143
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !10144 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !10147, metadata !DIExpression()), !dbg !10148
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10149
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !10151
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10151
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !10152
  br i1 %cmp, label %if.then, label %if.end, !dbg !10153

if.then:                                          ; preds = %entry
  br label %return, !dbg !10154

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10155
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !10156
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !10156
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10157
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !10158
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !10158
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !10159
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !10160
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10161
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !10162
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !10162
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10163
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !10164
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !10164
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !10165
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !10166
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10167
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !10168
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !10169
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10170
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !10171
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !10172
  br label %return, !dbg !10173

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !10173
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !10174 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !10177, metadata !DIExpression()), !dbg !10178
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !10179, metadata !DIExpression()), !dbg !10180
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !10181
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10182
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !10183
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10184
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !10185
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !10186
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !10186
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10187
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !10188
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !10189
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10190
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !10191
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !10192
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !10192
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !10193
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !10194
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10195
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !10196
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !10197
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !10198
  ret void, !dbg !10199
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !10200 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10201, metadata !DIExpression()), !dbg !10202
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10203
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !10204
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !10205
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !10205
  ret %union.tree_node* %1, !dbg !10206
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !10207 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10210, metadata !DIExpression()), !dbg !10211
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10212
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !10213
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !10214
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10215
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !10216
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !10217
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10218
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !10219
  store i32 0, i32* %iter_type, align 4, !dbg !10220
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10221
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !10222
  store i32 0, i32* %phi_i, align 8, !dbg !10223
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10224
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !10225
  store i32 0, i32* %num_phi, align 4, !dbg !10226
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10227
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !10228
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !10229
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10230
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !10231
  store i8 1, i8* %done, align 8, !dbg !10232
  ret void, !dbg !10233
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !10234 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10235, metadata !DIExpression()), !dbg !10236
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10237
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !10238
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !10239
  %1 = load i32, i32* %nargs, align 4, !dbg !10239
  ret i32 %1, !dbg !10240
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !10241 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10244, metadata !DIExpression()), !dbg !10245
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !10246, metadata !DIExpression()), !dbg !10247
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10248
  %1 = load i32, i32* %i.addr, align 4, !dbg !10249
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !10250
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !10251
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !10252
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !10253 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10257, metadata !DIExpression()), !dbg !10258
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !10259, metadata !DIExpression()), !dbg !10260
  %0 = load i32, i32* %index.addr, align 4, !dbg !10261
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10261
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !10261
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !10261
  %2 = load i32, i32* %capacity, align 8, !dbg !10261
  %cmp = icmp ule i32 %0, %2, !dbg !10261
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10261

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10261
  br label %cond.end, !dbg !10261

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10261

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10261
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10262
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !10263
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !10264
  %4 = load i32, i32* %index.addr, align 4, !dbg !10265
  %idxprom = zext i32 %4 to i64, !dbg !10262
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !10262
  ret %struct.phi_arg_d* %arrayidx, !dbg !10266
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !10267 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10270, metadata !DIExpression()), !dbg !10271
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10272, metadata !DIExpression()), !dbg !10273
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10274, metadata !DIExpression()), !dbg !10275
  %0 = load i32, i32* %flags.addr, align 4, !dbg !10276
  %and = and i32 %0, 8, !dbg !10276
  %tobool = icmp ne i32 %and, 0, !dbg !10276
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !10276

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !10276
  %and1 = and i32 %1, 2, !dbg !10276
  %tobool2 = icmp ne i32 %and1, 0, !dbg !10276
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !10276

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !10276
  %and3 = and i32 %2, 4, !dbg !10276
  %tobool4 = icmp ne i32 %and3, 0, !dbg !10276
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !10276

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !10276
  %and6 = and i32 %3, 1, !dbg !10276
  %tobool7 = icmp ne i32 %and6, 0, !dbg !10276
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !10276

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10276
  br label %cond.end, !dbg !10276

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !10276

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10276
  %4 = load i32, i32* %flags.addr, align 4, !dbg !10277
  %and8 = and i32 %4, 10, !dbg !10278
  %tobool9 = icmp ne i32 %and8, 0, !dbg !10278
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !10279

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10280
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !10281
  br label %cond.end12, !dbg !10279

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !10279

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !10279
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10282
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !10283
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !10284
  %7 = load i32, i32* %flags.addr, align 4, !dbg !10285
  %and14 = and i32 %7, 8, !dbg !10287
  %tobool15 = icmp ne i32 %and14, 0, !dbg !10287
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !10288

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10289
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !10290
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !10290
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !10289
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !10291

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10292
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !10293
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !10294
  br i1 %cmp, label %if.then, label %if.end, !dbg !10295

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10296
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !10297
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !10297
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !10298
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !10298
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10299
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !10300
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !10301
  br label %if.end, !dbg !10299

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !10302
  %and23 = and i32 %15, 5, !dbg !10303
  %tobool24 = icmp ne i32 %and23, 0, !dbg !10303
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !10304

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10305
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !10306
  br label %cond.end28, !dbg !10304

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !10304

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !10304
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10307
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !10308
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !10309
  %18 = load i32, i32* %flags.addr, align 4, !dbg !10310
  %and30 = and i32 %18, 4, !dbg !10312
  %tobool31 = icmp ne i32 %and30, 0, !dbg !10312
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !10313

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10314
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !10315
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !10315
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !10314
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !10316

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10317
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !10318
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !10319
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !10320

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10321
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !10322
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !10322
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !10323
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !10323
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10324
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !10325
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !10326
  br label %if.end42, !dbg !10324

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10327
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !10328
  store i8 0, i8* %done, align 8, !dbg !10329
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10330
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !10331
  store i32 0, i32* %phi_i, align 8, !dbg !10332
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10333
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !10334
  store i32 0, i32* %num_phi, align 4, !dbg !10335
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10336
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !10337
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !10338
  ret void, !dbg !10339
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !10340 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10343, metadata !DIExpression()), !dbg !10344
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10345
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !10347
  %tobool = icmp ne i8 %call, 0, !dbg !10347
  br i1 %tobool, label %if.end, label %if.then, !dbg !10348

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !10349
  br label %return, !dbg !10349

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10350
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !10351
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !10352
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !10353
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !10353
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !10354
  br label %return, !dbg !10354

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !10355
  ret %struct.def_optype_d* %3, !dbg !10355
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !10356 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10357, metadata !DIExpression()), !dbg !10358
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10359
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10361
  %tobool = icmp ne i8 %call, 0, !dbg !10361
  br i1 %tobool, label %if.end, label %if.then, !dbg !10362

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10363
  br label %return, !dbg !10363

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10364
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10365
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !10366
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !10366
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !10367
  br label %return, !dbg !10367

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10368
  ret %union.tree_node* %3, !dbg !10368
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !10369 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10372, metadata !DIExpression()), !dbg !10373
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10374
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !10376
  %tobool = icmp ne i8 %call, 0, !dbg !10376
  br i1 %tobool, label %if.end, label %if.then, !dbg !10377

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !10378
  br label %return, !dbg !10378

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10379
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !10380
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !10381
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !10382
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !10382
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !10383
  br label %return, !dbg !10383

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !10384
  ret %struct.use_optype_d* %3, !dbg !10384
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !10385 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10386, metadata !DIExpression()), !dbg !10387
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10388
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10390
  %tobool = icmp ne i8 %call, 0, !dbg !10390
  br i1 %tobool, label %if.end, label %if.then, !dbg !10391

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10392
  br label %return, !dbg !10392

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10393
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10394
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !10395
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !10395
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !10396
  br label %return, !dbg !10396

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10397
  ret %union.tree_node* %3, !dbg !10397
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !10398 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10399, metadata !DIExpression()), !dbg !10400
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10401
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !10402
  %cmp = icmp eq i32 %call, 6, !dbg !10403
  %conv = zext i1 %cmp to i32, !dbg !10403
  %conv1 = trunc i32 %conv to i8, !dbg !10402
  ret i8 %conv1, !dbg !10404
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @splice_all_param_accesses(%struct.VEC_access_p_heap** %representatives) #0 !dbg !10405 {
entry:
  %retval = alloca i32, align 4
  %representatives.addr = alloca %struct.VEC_access_p_heap**, align 8
  %result = alloca i32, align 4
  %parm = alloca %union.tree_node*, align 8
  %repr = alloca %struct.access*, align 8
  %ro_grp = alloca i8, align 1
  store %struct.VEC_access_p_heap** %representatives, %struct.VEC_access_p_heap*** %representatives.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap*** %representatives.addr, metadata !10408, metadata !DIExpression()), !dbg !10409
  call void @llvm.dbg.declare(metadata i32* %result, metadata !10410, metadata !DIExpression()), !dbg !10411
  store i32 0, i32* %result, align 4, !dbg !10411
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !10412, metadata !DIExpression()), !dbg !10413
  call void @llvm.dbg.declare(metadata %struct.access** %repr, metadata !10414, metadata !DIExpression()), !dbg !10415
  %0 = load i32, i32* @func_param_count, align 4, !dbg !10416
  %call = call %struct.VEC_access_p_heap* @VEC_access_p_heap_alloc(i32 %0), !dbg !10416
  %1 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %representatives.addr, align 8, !dbg !10417
  store %struct.VEC_access_p_heap* %call, %struct.VEC_access_p_heap** %1, align 8, !dbg !10418
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !10419
  %decl_non_common = bitcast %union.tree_node* %2 to %struct.tree_decl_non_common*, !dbg !10419
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !10419
  %3 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !10419
  store %union.tree_node* %3, %union.tree_node** %parm, align 8, !dbg !10421
  br label %for.cond, !dbg !10422

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10423
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !10425
  br i1 %tobool, label %for.body, label %for.end, !dbg !10425

for.body:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10426
  %call1 = call zeroext i8 @is_unused_scalar_param(%union.tree_node* %5), !dbg !10429
  %tobool2 = icmp ne i8 %call1, 0, !dbg !10429
  br i1 %tobool2, label %if.then, label %if.else, !dbg !10430

if.then:                                          ; preds = %for.body
  %6 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %representatives.addr, align 8, !dbg !10431
  %7 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %6, align 8, !dbg !10431
  %tobool3 = icmp ne %struct.VEC_access_p_heap* %7, null, !dbg !10431
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !10431

cond.true:                                        ; preds = %if.then
  %8 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %representatives.addr, align 8, !dbg !10431
  %9 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %8, align 8, !dbg !10431
  %base = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %9, i32 0, i32 0, !dbg !10431
  br label %cond.end, !dbg !10431

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !10431

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10431
  %call4 = call %struct.access** @VEC_access_p_base_quick_push(%struct.VEC_access_p_base* %cond, %struct.access* @no_accesses_representant), !dbg !10431
  %10 = load i32, i32* %result, align 4, !dbg !10433
  %cmp = icmp eq i32 %10, 0, !dbg !10435
  br i1 %cmp, label %if.then5, label %if.end, !dbg !10436

if.then5:                                         ; preds = %cond.end
  store i32 1, i32* %result, align 4, !dbg !10437
  br label %if.end, !dbg !10438

if.end:                                           ; preds = %if.then5, %cond.end
  br label %if.end107, !dbg !10439

if.else:                                          ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10440
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !10440
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10440
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10440
  %base6 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !10440
  %13 = bitcast %struct.tree_base* %base6 to i64*, !dbg !10440
  %bf.load = load i64, i64* %13, align 8, !dbg !10440
  %bf.clear = and i64 %bf.load, 65535, !dbg !10440
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10440
  %cmp7 = icmp eq i32 %bf.cast, 10, !dbg !10440
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false, !dbg !10440

lor.lhs.false:                                    ; preds = %if.else
  %14 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10440
  %common8 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !10440
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !10440
  %15 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !10440
  %base10 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !10440
  %16 = bitcast %struct.tree_base* %base10 to i64*, !dbg !10440
  %bf.load11 = load i64, i64* %16, align 8, !dbg !10440
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !10440
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !10440
  %cmp14 = icmp eq i32 %bf.cast13, 12, !dbg !10440
  br i1 %cmp14, label %land.lhs.true, label %if.else36, !dbg !10442

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.else
  %17 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10443
  %common15 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !10443
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !10443
  %18 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !10443
  %common17 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !10443
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !10443
  %19 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !10443
  %call19 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %19), !dbg !10444
  %conv = zext i8 %call19 to i32, !dbg !10444
  %tobool20 = icmp ne i32 %conv, 0, !dbg !10444
  br i1 %tobool20, label %land.lhs.true21, label %if.else36, !dbg !10445

land.lhs.true21:                                  ; preds = %land.lhs.true
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !10446
  %21 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10447
  %decl_minimal = bitcast %union.tree_node* %21 to %struct.tree_decl_minimal*, !dbg !10447
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !10447
  %22 = load i32, i32* %uid, align 4, !dbg !10447
  %call22 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %20, i32 %22), !dbg !10448
  %tobool23 = icmp ne i32 %call22, 0, !dbg !10448
  br i1 %tobool23, label %if.then24, label %if.else36, !dbg !10449

if.then24:                                        ; preds = %land.lhs.true21
  %23 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10450
  %call25 = call %struct.access* @unmodified_by_ref_scalar_representative(%union.tree_node* %23), !dbg !10452
  store %struct.access* %call25, %struct.access** %repr, align 8, !dbg !10453
  %24 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %representatives.addr, align 8, !dbg !10454
  %25 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %24, align 8, !dbg !10454
  %tobool26 = icmp ne %struct.VEC_access_p_heap* %25, null, !dbg !10454
  br i1 %tobool26, label %cond.true27, label %cond.false29, !dbg !10454

cond.true27:                                      ; preds = %if.then24
  %26 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %representatives.addr, align 8, !dbg !10454
  %27 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %26, align 8, !dbg !10454
  %base28 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %27, i32 0, i32 0, !dbg !10454
  br label %cond.end30, !dbg !10454

cond.false29:                                     ; preds = %if.then24
  br label %cond.end30, !dbg !10454

cond.end30:                                       ; preds = %cond.false29, %cond.true27
  %cond31 = phi %struct.VEC_access_p_base* [ %base28, %cond.true27 ], [ null, %cond.false29 ], !dbg !10454
  %28 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10454
  %call32 = call %struct.access** @VEC_access_p_base_quick_push(%struct.VEC_access_p_base* %cond31, %struct.access* %28), !dbg !10454
  %29 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10455
  %tobool33 = icmp ne %struct.access* %29, null, !dbg !10455
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !10457

if.then34:                                        ; preds = %cond.end30
  store i32 4, i32* %result, align 4, !dbg !10458
  br label %if.end35, !dbg !10459

if.end35:                                         ; preds = %if.then34, %cond.end30
  br label %if.end106, !dbg !10460

if.else36:                                        ; preds = %land.lhs.true21, %land.lhs.true, %lor.lhs.false
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @candidate_bitmap, align 8, !dbg !10461
  %31 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10463
  %decl_minimal37 = bitcast %union.tree_node* %31 to %struct.tree_decl_minimal*, !dbg !10463
  %uid38 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal37, i32 0, i32 2, !dbg !10463
  %32 = load i32, i32* %uid38, align 4, !dbg !10463
  %call39 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %30, i32 %32), !dbg !10464
  %tobool40 = icmp ne i32 %call39, 0, !dbg !10464
  br i1 %tobool40, label %if.then41, label %if.else97, !dbg !10465

if.then41:                                        ; preds = %if.else36
  call void @llvm.dbg.declare(metadata i8* %ro_grp, metadata !10466, metadata !DIExpression()), !dbg !10468
  store i8 0, i8* %ro_grp, align 1, !dbg !10468
  %33 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10469
  %call42 = call %struct.access* @splice_param_accesses(%union.tree_node* %33, i8* %ro_grp), !dbg !10470
  store %struct.access* %call42, %struct.access** %repr, align 8, !dbg !10471
  %34 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %representatives.addr, align 8, !dbg !10472
  %35 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %34, align 8, !dbg !10472
  %tobool43 = icmp ne %struct.VEC_access_p_heap* %35, null, !dbg !10472
  br i1 %tobool43, label %cond.true44, label %cond.false46, !dbg !10472

cond.true44:                                      ; preds = %if.then41
  %36 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %representatives.addr, align 8, !dbg !10472
  %37 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %36, align 8, !dbg !10472
  %base45 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %37, i32 0, i32 0, !dbg !10472
  br label %cond.end47, !dbg !10472

cond.false46:                                     ; preds = %if.then41
  br label %cond.end47, !dbg !10472

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi %struct.VEC_access_p_base* [ %base45, %cond.true44 ], [ null, %cond.false46 ], !dbg !10472
  %38 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10472
  %call49 = call %struct.access** @VEC_access_p_base_quick_push(%struct.VEC_access_p_base* %cond48, %struct.access* %38), !dbg !10472
  %39 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10473
  %tobool50 = icmp ne %struct.access* %39, null, !dbg !10473
  br i1 %tobool50, label %land.lhs.true51, label %if.else87, !dbg !10475

land.lhs.true51:                                  ; preds = %cond.end47
  %40 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10476
  %call52 = call zeroext i8 @no_accesses_p(%struct.access* %40), !dbg !10477
  %tobool53 = icmp ne i8 %call52, 0, !dbg !10477
  br i1 %tobool53, label %if.else87, label %if.then54, !dbg !10478

if.then54:                                        ; preds = %land.lhs.true51
  %41 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10479
  %common55 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !10479
  %type56 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 2, !dbg !10479
  %42 = load %union.tree_node*, %union.tree_node** %type56, align 8, !dbg !10479
  %base57 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !10479
  %43 = bitcast %struct.tree_base* %base57 to i64*, !dbg !10479
  %bf.load58 = load i64, i64* %43, align 8, !dbg !10479
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !10479
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !10479
  %cmp61 = icmp eq i32 %bf.cast60, 10, !dbg !10479
  br i1 %cmp61, label %if.then72, label %lor.lhs.false63, !dbg !10479

lor.lhs.false63:                                  ; preds = %if.then54
  %44 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10479
  %common64 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !10479
  %type65 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 2, !dbg !10479
  %45 = load %union.tree_node*, %union.tree_node** %type65, align 8, !dbg !10479
  %base66 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !10479
  %46 = bitcast %struct.tree_base* %base66 to i64*, !dbg !10479
  %bf.load67 = load i64, i64* %46, align 8, !dbg !10479
  %bf.clear68 = and i64 %bf.load67, 65535, !dbg !10479
  %bf.cast69 = trunc i64 %bf.clear68 to i32, !dbg !10479
  %cmp70 = icmp eq i32 %bf.cast69, 12, !dbg !10479
  br i1 %cmp70, label %if.then72, label %if.else81, !dbg !10482

if.then72:                                        ; preds = %lor.lhs.false63, %if.then54
  %47 = load i8, i8* %ro_grp, align 1, !dbg !10483
  %tobool73 = icmp ne i8 %47, 0, !dbg !10483
  br i1 %tobool73, label %if.then74, label %if.else75, !dbg !10486

if.then74:                                        ; preds = %if.then72
  store i32 4, i32* %result, align 4, !dbg !10487
  br label %if.end80, !dbg !10488

if.else75:                                        ; preds = %if.then72
  %48 = load i32, i32* %result, align 4, !dbg !10489
  %cmp76 = icmp ult i32 %48, 3, !dbg !10491
  br i1 %cmp76, label %if.then78, label %if.end79, !dbg !10492

if.then78:                                        ; preds = %if.else75
  store i32 3, i32* %result, align 4, !dbg !10493
  br label %if.end79, !dbg !10494

if.end79:                                         ; preds = %if.then78, %if.else75
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.then74
  br label %if.end86, !dbg !10495

if.else81:                                        ; preds = %lor.lhs.false63
  %49 = load i32, i32* %result, align 4, !dbg !10496
  %cmp82 = icmp ult i32 %49, 2, !dbg !10498
  br i1 %cmp82, label %if.then84, label %if.end85, !dbg !10499

if.then84:                                        ; preds = %if.else81
  store i32 2, i32* %result, align 4, !dbg !10500
  br label %if.end85, !dbg !10501

if.end85:                                         ; preds = %if.then84, %if.else81
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.end80
  br label %if.end96, !dbg !10502

if.else87:                                        ; preds = %land.lhs.true51, %cond.end47
  %50 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10503
  %call88 = call zeroext i8 @no_accesses_p(%struct.access* %50), !dbg !10505
  %conv89 = zext i8 %call88 to i32, !dbg !10505
  %tobool90 = icmp ne i32 %conv89, 0, !dbg !10505
  br i1 %tobool90, label %land.lhs.true91, label %if.end95, !dbg !10506

land.lhs.true91:                                  ; preds = %if.else87
  %51 = load i32, i32* %result, align 4, !dbg !10507
  %cmp92 = icmp eq i32 %51, 0, !dbg !10508
  br i1 %cmp92, label %if.then94, label %if.end95, !dbg !10509

if.then94:                                        ; preds = %land.lhs.true91
  store i32 1, i32* %result, align 4, !dbg !10510
  br label %if.end95, !dbg !10511

if.end95:                                         ; preds = %if.then94, %land.lhs.true91, %if.else87
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.end86
  br label %if.end105, !dbg !10512

if.else97:                                        ; preds = %if.else36
  %52 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %representatives.addr, align 8, !dbg !10513
  %53 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %52, align 8, !dbg !10513
  %tobool98 = icmp ne %struct.VEC_access_p_heap* %53, null, !dbg !10513
  br i1 %tobool98, label %cond.true99, label %cond.false101, !dbg !10513

cond.true99:                                      ; preds = %if.else97
  %54 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %representatives.addr, align 8, !dbg !10513
  %55 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %54, align 8, !dbg !10513
  %base100 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %55, i32 0, i32 0, !dbg !10513
  br label %cond.end102, !dbg !10513

cond.false101:                                    ; preds = %if.else97
  br label %cond.end102, !dbg !10513

cond.end102:                                      ; preds = %cond.false101, %cond.true99
  %cond103 = phi %struct.VEC_access_p_base* [ %base100, %cond.true99 ], [ null, %cond.false101 ], !dbg !10513
  %call104 = call %struct.access** @VEC_access_p_base_quick_push(%struct.VEC_access_p_base* %cond103, %struct.access* null), !dbg !10513
  br label %if.end105

if.end105:                                        ; preds = %cond.end102, %if.end96
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %if.end35
  br label %if.end107

if.end107:                                        ; preds = %if.end106, %if.end
  br label %for.inc, !dbg !10514

for.inc:                                          ; preds = %if.end107
  %56 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10515
  %common108 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !10515
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common108, i32 0, i32 1, !dbg !10515
  %57 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !10515
  store %union.tree_node* %57, %union.tree_node** %parm, align 8, !dbg !10516
  br label %for.cond, !dbg !10517, !llvm.loop !10518

for.end:                                          ; preds = %for.cond
  %58 = load i32, i32* %result, align 4, !dbg !10520
  %cmp109 = icmp eq i32 %58, 0, !dbg !10522
  br i1 %cmp109, label %if.then111, label %if.end112, !dbg !10523

if.then111:                                       ; preds = %for.end
  %59 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %representatives.addr, align 8, !dbg !10524
  call void @VEC_access_p_heap_free(%struct.VEC_access_p_heap** %59), !dbg !10524
  %60 = load %struct.VEC_access_p_heap**, %struct.VEC_access_p_heap*** %representatives.addr, align 8, !dbg !10526
  store %struct.VEC_access_p_heap* null, %struct.VEC_access_p_heap** %60, align 8, !dbg !10527
  store i32 0, i32* %retval, align 4, !dbg !10528
  br label %return, !dbg !10528

if.end112:                                        ; preds = %for.end
  %61 = load i32, i32* %result, align 4, !dbg !10529
  store i32 %61, i32* %retval, align 4, !dbg !10530
  br label %return, !dbg !10530

return:                                           ; preds = %if.end112, %if.then111
  %62 = load i32, i32* %retval, align 4, !dbg !10531
  ret i32 %62, !dbg !10531
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_caller_dereference_legality(%struct.VEC_access_p_heap* %representatives) #0 !dbg !10532 {
entry:
  %representatives.addr = alloca %struct.VEC_access_p_heap*, align 8
  %i = alloca i32, align 4
  %repr = alloca %struct.access*, align 8
  %idx = alloca i32, align 4
  store %struct.VEC_access_p_heap* %representatives, %struct.VEC_access_p_heap** %representatives.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap** %representatives.addr, metadata !10535, metadata !DIExpression()), !dbg !10536
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10537, metadata !DIExpression()), !dbg !10538
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10539
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !10539
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !10541

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !10542
  %and = and i32 %1, 8, !dbg !10543
  %tobool1 = icmp ne i32 %and, 0, !dbg !10543
  br i1 %tobool1, label %if.then, label %if.end, !dbg !10544

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10545
  %3 = load i64*, i64** @bb_dereferences, align 8, !dbg !10546
  call void @dump_dereferences_table(%struct._IO_FILE* %2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.63, i64 0, i64 0), i64* %3), !dbg !10547
  br label %if.end, !dbg !10547

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  call void @propagate_dereference_distances(), !dbg !10548
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10549
  %tobool2 = icmp ne %struct._IO_FILE* %4, null, !dbg !10549
  br i1 %tobool2, label %land.lhs.true3, label %if.end7, !dbg !10551

land.lhs.true3:                                   ; preds = %if.end
  %5 = load i32, i32* @dump_flags, align 4, !dbg !10552
  %and4 = and i32 %5, 8, !dbg !10553
  %tobool5 = icmp ne i32 %and4, 0, !dbg !10553
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !10554

if.then6:                                         ; preds = %land.lhs.true3
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10555
  %7 = load i64*, i64** @bb_dereferences, align 8, !dbg !10556
  call void @dump_dereferences_table(%struct._IO_FILE* %6, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.64, i64 0, i64 0), i64* %7), !dbg !10557
  br label %if.end7, !dbg !10557

if.end7:                                          ; preds = %if.then6, %land.lhs.true3, %if.end
  store i32 0, i32* %i, align 4, !dbg !10558
  br label %for.cond, !dbg !10560

for.cond:                                         ; preds = %for.inc, %if.end7
  %8 = load i32, i32* %i, align 4, !dbg !10561
  %9 = load i32, i32* @func_param_count, align 4, !dbg !10563
  %cmp = icmp slt i32 %8, %9, !dbg !10564
  br i1 %cmp, label %for.body, label %for.end, !dbg !10565

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.access** %repr, metadata !10566, metadata !DIExpression()), !dbg !10568
  %10 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives.addr, align 8, !dbg !10569
  %tobool8 = icmp ne %struct.VEC_access_p_heap* %10, null, !dbg !10569
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !10569

cond.true:                                        ; preds = %for.body
  %11 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives.addr, align 8, !dbg !10569
  %base = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %11, i32 0, i32 0, !dbg !10569
  br label %cond.end, !dbg !10569

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !10569

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10569
  %12 = load i32, i32* %i, align 4, !dbg !10569
  %call = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond, i32 %12), !dbg !10569
  store %struct.access* %call, %struct.access** %repr, align 8, !dbg !10568
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !10570, metadata !DIExpression()), !dbg !10571
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10572
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !10572
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10572
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10572
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 0, !dbg !10572
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10572
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !10573
  %16 = load i32, i32* %index, align 8, !dbg !10573
  %17 = load i32, i32* @func_param_count, align 4, !dbg !10574
  %mul = mul nsw i32 %16, %17, !dbg !10575
  %18 = load i32, i32* %i, align 4, !dbg !10576
  %add = add nsw i32 %mul, %18, !dbg !10577
  store i32 %add, i32* %idx, align 4, !dbg !10571
  %19 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10578
  %tobool9 = icmp ne %struct.access* %19, null, !dbg !10578
  br i1 %tobool9, label %lor.lhs.false, label %if.then12, !dbg !10580

lor.lhs.false:                                    ; preds = %cond.end
  %20 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10581
  %call10 = call zeroext i8 @no_accesses_p(%struct.access* %20), !dbg !10582
  %conv = zext i8 %call10 to i32, !dbg !10582
  %tobool11 = icmp ne i32 %conv, 0, !dbg !10582
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !10583

if.then12:                                        ; preds = %lor.lhs.false, %cond.end
  br label %for.inc, !dbg !10584

if.end13:                                         ; preds = %lor.lhs.false
  br label %do.body, !dbg !10585

do.body:                                          ; preds = %do.cond, %if.end13
  %21 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10586
  %offset = getelementptr inbounds %struct.access, %struct.access* %21, i32 0, i32 0, !dbg !10589
  %22 = load i64, i64* %offset, align 8, !dbg !10589
  %23 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10590
  %size = getelementptr inbounds %struct.access, %struct.access* %23, i32 0, i32 1, !dbg !10591
  %24 = load i64, i64* %size, align 8, !dbg !10591
  %add14 = add nsw i64 %22, %24, !dbg !10592
  %25 = load i64*, i64** @bb_dereferences, align 8, !dbg !10593
  %26 = load i32, i32* %idx, align 4, !dbg !10594
  %idxprom = sext i32 %26 to i64, !dbg !10593
  %arrayidx = getelementptr inbounds i64, i64* %25, i64 %idxprom, !dbg !10593
  %27 = load i64, i64* %arrayidx, align 8, !dbg !10593
  %cmp15 = icmp sgt i64 %add14, %27, !dbg !10595
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !10596

if.then17:                                        ; preds = %do.body
  %28 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10597
  %grp_not_necessarilly_dereferenced = getelementptr inbounds %struct.access, %struct.access* %28, i32 0, i32 14, !dbg !10598
  %bf.load = load i16, i16* %grp_not_necessarilly_dereferenced, align 8, !dbg !10599
  %bf.clear = and i16 %bf.load, -8193, !dbg !10599
  %bf.set = or i16 %bf.clear, 8192, !dbg !10599
  store i16 %bf.set, i16* %grp_not_necessarilly_dereferenced, align 8, !dbg !10599
  br label %if.end18, !dbg !10597

if.end18:                                         ; preds = %if.then17, %do.body
  %29 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10600
  %next_grp = getelementptr inbounds %struct.access, %struct.access* %29, i32 0, i32 6, !dbg !10601
  %30 = load %struct.access*, %struct.access** %next_grp, align 8, !dbg !10601
  store %struct.access* %30, %struct.access** %repr, align 8, !dbg !10602
  br label %do.cond, !dbg !10603

do.cond:                                          ; preds = %if.end18
  %31 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10604
  %tobool19 = icmp ne %struct.access* %31, null, !dbg !10603
  br i1 %tobool19, label %do.body, label %do.end, !dbg !10603, !llvm.loop !10605

do.end:                                           ; preds = %do.cond
  br label %for.inc, !dbg !10607

for.inc:                                          ; preds = %do.end, %if.then12
  %32 = load i32, i32* %i, align 4, !dbg !10608
  %inc = add nsw i32 %32, 1, !dbg !10608
  store i32 %inc, i32* %i, align 4, !dbg !10608
  br label %for.cond, !dbg !10609, !llvm.loop !10610

for.end:                                          ; preds = %for.cond
  ret void, !dbg !10612
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_modified_params(%struct.VEC_access_p_heap* %representatives) #0 !dbg !10613 {
entry:
  %representatives.addr = alloca %struct.VEC_access_p_heap*, align 8
  %i = alloca i32, align 4
  %repr = alloca %struct.access*, align 8
  %access = alloca %struct.access*, align 8
  %visited = alloca %struct.bitmap_head_def*, align 8
  %ar = alloca %struct.ao_ref_s, align 8
  store %struct.VEC_access_p_heap* %representatives, %struct.VEC_access_p_heap** %representatives.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap** %representatives.addr, metadata !10614, metadata !DIExpression()), !dbg !10615
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10616, metadata !DIExpression()), !dbg !10617
  store i32 0, i32* %i, align 4, !dbg !10618
  br label %for.cond, !dbg !10620

for.cond:                                         ; preds = %for.inc40, %entry
  %0 = load i32, i32* %i, align 4, !dbg !10621
  %1 = load i32, i32* @func_param_count, align 4, !dbg !10623
  %cmp = icmp slt i32 %0, %1, !dbg !10624
  br i1 %cmp, label %for.body, label %for.end41, !dbg !10625

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.access** %repr, metadata !10626, metadata !DIExpression()), !dbg !10628
  %2 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives.addr, align 8, !dbg !10629
  %tobool = icmp ne %struct.VEC_access_p_heap* %2, null, !dbg !10629
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10629

cond.true:                                        ; preds = %for.body
  %3 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives.addr, align 8, !dbg !10629
  %base = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %3, i32 0, i32 0, !dbg !10629
  br label %cond.end, !dbg !10629

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !10629

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10629
  %4 = load i32, i32* %i, align 4, !dbg !10629
  %call = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond, i32 %4), !dbg !10629
  store %struct.access* %call, %struct.access** %repr, align 8, !dbg !10631
  br label %for.cond1, !dbg !10632

for.cond1:                                        ; preds = %for.inc38, %cond.end
  %5 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10633
  %tobool2 = icmp ne %struct.access* %5, null, !dbg !10635
  br i1 %tobool2, label %for.body3, label %for.end39, !dbg !10635

for.body3:                                        ; preds = %for.cond1
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !10636, metadata !DIExpression()), !dbg !10638
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %visited, metadata !10639, metadata !DIExpression()), !dbg !10640
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s* %ar, metadata !10641, metadata !DIExpression()), !dbg !10652
  %6 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10653
  %call4 = call zeroext i8 @no_accesses_p(%struct.access* %6), !dbg !10655
  %tobool5 = icmp ne i8 %call4, 0, !dbg !10655
  br i1 %tobool5, label %if.then, label %if.end, !dbg !10656

if.then:                                          ; preds = %for.body3
  br label %for.inc38, !dbg !10657

if.end:                                           ; preds = %for.body3
  %7 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10658
  %base6 = getelementptr inbounds %struct.access, %struct.access* %7, i32 0, i32 2, !dbg !10658
  %8 = load %union.tree_node*, %union.tree_node** %base6, align 8, !dbg !10658
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !10658
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10658
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10658
  %base7 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !10658
  %10 = bitcast %struct.tree_base* %base7 to i64*, !dbg !10658
  %bf.load = load i64, i64* %10, align 8, !dbg !10658
  %bf.clear = and i64 %bf.load, 65535, !dbg !10658
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10658
  %cmp8 = icmp eq i32 %bf.cast, 10, !dbg !10658
  br i1 %cmp8, label %lor.lhs.false17, label %lor.lhs.false, !dbg !10658

lor.lhs.false:                                    ; preds = %if.end
  %11 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10658
  %base9 = getelementptr inbounds %struct.access, %struct.access* %11, i32 0, i32 2, !dbg !10658
  %12 = load %union.tree_node*, %union.tree_node** %base9, align 8, !dbg !10658
  %common10 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !10658
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !10658
  %13 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !10658
  %base12 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !10658
  %14 = bitcast %struct.tree_base* %base12 to i64*, !dbg !10658
  %bf.load13 = load i64, i64* %14, align 8, !dbg !10658
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !10658
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !10658
  %cmp16 = icmp eq i32 %bf.cast15, 12, !dbg !10658
  br i1 %cmp16, label %lor.lhs.false17, label %if.then22, !dbg !10660

lor.lhs.false17:                                  ; preds = %lor.lhs.false, %if.end
  %15 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10661
  %grp_maybe_modified = getelementptr inbounds %struct.access, %struct.access* %15, i32 0, i32 14, !dbg !10662
  %bf.load18 = load i16, i16* %grp_maybe_modified, align 8, !dbg !10662
  %bf.lshr = lshr i16 %bf.load18, 11, !dbg !10662
  %bf.clear19 = and i16 %bf.lshr, 1, !dbg !10662
  %bf.cast20 = zext i16 %bf.clear19 to i32, !dbg !10662
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !10661
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !10663

if.then22:                                        ; preds = %lor.lhs.false17, %lor.lhs.false
  br label %for.inc38, !dbg !10664

if.end23:                                         ; preds = %lor.lhs.false17
  %16 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10665
  %expr = getelementptr inbounds %struct.access, %struct.access* %16, i32 0, i32 3, !dbg !10666
  %17 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10666
  call void @ao_ref_init(%struct.ao_ref_s* %ar, %union.tree_node* %17), !dbg !10667
  %call24 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !10668
  store %struct.bitmap_head_def* %call24, %struct.bitmap_head_def** %visited, align 8, !dbg !10669
  %18 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10670
  store %struct.access* %18, %struct.access** %access, align 8, !dbg !10672
  br label %for.cond25, !dbg !10673

for.cond25:                                       ; preds = %for.inc, %if.end23
  %19 = load %struct.access*, %struct.access** %access, align 8, !dbg !10674
  %tobool26 = icmp ne %struct.access* %19, null, !dbg !10676
  br i1 %tobool26, label %for.body27, label %for.end, !dbg !10676

for.body27:                                       ; preds = %for.cond25
  %20 = load %struct.access*, %struct.access** %access, align 8, !dbg !10677
  %stmt = getelementptr inbounds %struct.access, %struct.access* %20, i32 0, i32 5, !dbg !10679
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10679
  %call28 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !10680
  %22 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10681
  %23 = bitcast %struct.access* %22 to i8*, !dbg !10681
  %call29 = call i32 @walk_aliased_vdefs(%struct.ao_ref_s* %ar, %union.tree_node* %call28, i8 (%struct.ao_ref_s*, %union.tree_node*, i8*)* @mark_maybe_modified, i8* %23, %struct.bitmap_head_def** %visited), !dbg !10682
  %24 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10683
  %grp_maybe_modified30 = getelementptr inbounds %struct.access, %struct.access* %24, i32 0, i32 14, !dbg !10685
  %bf.load31 = load i16, i16* %grp_maybe_modified30, align 8, !dbg !10685
  %bf.lshr32 = lshr i16 %bf.load31, 11, !dbg !10685
  %bf.clear33 = and i16 %bf.lshr32, 1, !dbg !10685
  %bf.cast34 = zext i16 %bf.clear33 to i32, !dbg !10685
  %tobool35 = icmp ne i32 %bf.cast34, 0, !dbg !10683
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !10686

if.then36:                                        ; preds = %for.body27
  br label %for.end, !dbg !10687

if.end37:                                         ; preds = %for.body27
  br label %for.inc, !dbg !10688

for.inc:                                          ; preds = %if.end37
  %25 = load %struct.access*, %struct.access** %access, align 8, !dbg !10689
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %25, i32 0, i32 9, !dbg !10690
  %26 = load %struct.access*, %struct.access** %next_sibling, align 8, !dbg !10690
  store %struct.access* %26, %struct.access** %access, align 8, !dbg !10691
  br label %for.cond25, !dbg !10692, !llvm.loop !10693

for.end:                                          ; preds = %if.then36, %for.cond25
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !10695
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %27), !dbg !10695
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %visited, align 8, !dbg !10695
  br label %for.inc38, !dbg !10696

for.inc38:                                        ; preds = %for.end, %if.then22, %if.then
  %28 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10697
  %next_grp = getelementptr inbounds %struct.access, %struct.access* %28, i32 0, i32 6, !dbg !10698
  %29 = load %struct.access*, %struct.access** %next_grp, align 8, !dbg !10698
  store %struct.access* %29, %struct.access** %repr, align 8, !dbg !10699
  br label %for.cond1, !dbg !10700, !llvm.loop !10701

for.end39:                                        ; preds = %for.cond1
  br label %for.inc40, !dbg !10703

for.inc40:                                        ; preds = %for.end39
  %30 = load i32, i32* %i, align 4, !dbg !10704
  %inc = add nsw i32 %30, 1, !dbg !10704
  store i32 %inc, i32* %i, align 4, !dbg !10704
  br label %for.cond, !dbg !10705, !llvm.loop !10706

for.end41:                                        ; preds = %for.cond
  ret void, !dbg !10708
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @no_accesses_p(%struct.access* %access) #0 !dbg !10709 {
entry:
  %access.addr = alloca %struct.access*, align 8
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !10710, metadata !DIExpression()), !dbg !10711
  %0 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !10712
  %cmp = icmp eq %struct.access* %0, @no_accesses_representant, !dbg !10713
  %conv = zext i1 %cmp to i32, !dbg !10713
  %conv1 = trunc i32 %conv to i8, !dbg !10712
  ret i8 %conv1, !dbg !10714
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @VEC_access_p_base_replace(%struct.VEC_access_p_base* %vec_, i32 %ix_, %struct.access* %obj_) #0 !dbg !10715 {
entry:
  %vec_.addr = alloca %struct.VEC_access_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.access*, align 8
  %old_obj_ = alloca %struct.access*, align 8
  store %struct.VEC_access_p_base* %vec_, %struct.VEC_access_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_base** %vec_.addr, metadata !10718, metadata !DIExpression()), !dbg !10719
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !10720, metadata !DIExpression()), !dbg !10719
  store %struct.access* %obj_, %struct.access** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %obj_.addr, metadata !10721, metadata !DIExpression()), !dbg !10719
  call void @llvm.dbg.declare(metadata %struct.access** %old_obj_, metadata !10722, metadata !DIExpression()), !dbg !10719
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !10719
  %1 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !10719
  %num = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %1, i32 0, i32 0, !dbg !10719
  %2 = load i32, i32* %num, align 8, !dbg !10719
  %cmp = icmp ult i32 %0, %2, !dbg !10719
  %conv = zext i1 %cmp to i32, !dbg !10719
  %3 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !10719
  %vec = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %3, i32 0, i32 2, !dbg !10719
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !10719
  %idxprom = zext i32 %4 to i64, !dbg !10719
  %arrayidx = getelementptr inbounds [1 x %struct.access*], [1 x %struct.access*]* %vec, i64 0, i64 %idxprom, !dbg !10719
  %5 = load %struct.access*, %struct.access** %arrayidx, align 8, !dbg !10719
  store %struct.access* %5, %struct.access** %old_obj_, align 8, !dbg !10719
  %6 = load %struct.access*, %struct.access** %obj_.addr, align 8, !dbg !10719
  %7 = load %struct.VEC_access_p_base*, %struct.VEC_access_p_base** %vec_.addr, align 8, !dbg !10719
  %vec1 = getelementptr inbounds %struct.VEC_access_p_base, %struct.VEC_access_p_base* %7, i32 0, i32 2, !dbg !10719
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !10719
  %idxprom2 = zext i32 %8 to i64, !dbg !10719
  %arrayidx3 = getelementptr inbounds [1 x %struct.access*], [1 x %struct.access*]* %vec1, i64 0, i64 %idxprom2, !dbg !10719
  store %struct.access* %6, %struct.access** %arrayidx3, align 8, !dbg !10719
  %9 = load %struct.access*, %struct.access** %old_obj_, align 8, !dbg !10719
  ret %struct.access* %9, !dbg !10719
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @decide_one_param_reduction(%struct.access* %repr) #0 !dbg !10723 {
entry:
  %retval = alloca i32, align 4
  %repr.addr = alloca %struct.access*, align 8
  %total_size = alloca i32, align 4
  %cur_parm_size = alloca i32, align 4
  %agg_size = alloca i32, align 4
  %new_param_count = alloca i32, align 4
  %parm_size_limit = alloca i32, align 4
  %by_ref = alloca i8, align 1
  %parm = alloca %union.tree_node*, align 8
  %acc = alloca %struct.access*, align 8
  store %struct.access* %repr, %struct.access** %repr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %repr.addr, metadata !10726, metadata !DIExpression()), !dbg !10727
  call void @llvm.dbg.declare(metadata i32* %total_size, metadata !10728, metadata !DIExpression()), !dbg !10729
  call void @llvm.dbg.declare(metadata i32* %cur_parm_size, metadata !10730, metadata !DIExpression()), !dbg !10731
  call void @llvm.dbg.declare(metadata i32* %agg_size, metadata !10732, metadata !DIExpression()), !dbg !10733
  call void @llvm.dbg.declare(metadata i32* %new_param_count, metadata !10734, metadata !DIExpression()), !dbg !10735
  call void @llvm.dbg.declare(metadata i32* %parm_size_limit, metadata !10736, metadata !DIExpression()), !dbg !10737
  call void @llvm.dbg.declare(metadata i8* %by_ref, metadata !10738, metadata !DIExpression()), !dbg !10739
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !10740, metadata !DIExpression()), !dbg !10741
  %0 = load %struct.access*, %struct.access** %repr.addr, align 8, !dbg !10742
  %base = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 2, !dbg !10743
  %1 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !10743
  store %union.tree_node* %1, %union.tree_node** %parm, align 8, !dbg !10744
  %2 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10745
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !10745
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10745
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10745
  %type1 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !10745
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 2, !dbg !10745
  %4 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !10745
  %call = call i64 @tree_low_cst(%union.tree_node* %4, i32 1), !dbg !10746
  %conv = trunc i64 %call to i32, !dbg !10746
  store i32 %conv, i32* %cur_parm_size, align 4, !dbg !10747
  %5 = load i32, i32* %cur_parm_size, align 4, !dbg !10748
  %cmp = icmp sgt i32 %5, 0, !dbg !10748
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10748

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 3411, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10748
  br label %cond.end, !dbg !10748

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10748

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10748
  %6 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10749
  %common3 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !10749
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !10749
  %7 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !10749
  %base5 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !10749
  %8 = bitcast %struct.tree_base* %base5 to i64*, !dbg !10749
  %bf.load = load i64, i64* %8, align 8, !dbg !10749
  %bf.clear = and i64 %bf.load, 65535, !dbg !10749
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10749
  %cmp6 = icmp eq i32 %bf.cast, 10, !dbg !10749
  br i1 %cmp6, label %if.then, label %lor.lhs.false, !dbg !10749

lor.lhs.false:                                    ; preds = %cond.end
  %9 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10749
  %common8 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !10749
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !10749
  %10 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !10749
  %base10 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !10749
  %11 = bitcast %struct.tree_base* %base10 to i64*, !dbg !10749
  %bf.load11 = load i64, i64* %11, align 8, !dbg !10749
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !10749
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !10749
  %cmp14 = icmp eq i32 %bf.cast13, 12, !dbg !10749
  br i1 %cmp14, label %if.then, label %if.else, !dbg !10751

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  store i8 1, i8* %by_ref, align 1, !dbg !10752
  %12 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10754
  %common16 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !10754
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !10754
  %13 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !10754
  %common18 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !10754
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !10754
  %14 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !10754
  %type20 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !10754
  %size21 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type20, i32 0, i32 2, !dbg !10754
  %15 = load %union.tree_node*, %union.tree_node** %size21, align 8, !dbg !10754
  %call22 = call i64 @tree_low_cst(%union.tree_node* %15, i32 1), !dbg !10755
  %conv23 = trunc i64 %call22 to i32, !dbg !10755
  store i32 %conv23, i32* %agg_size, align 4, !dbg !10756
  br label %if.end, !dbg !10757

if.else:                                          ; preds = %lor.lhs.false
  store i8 0, i8* %by_ref, align 1, !dbg !10758
  %16 = load i32, i32* %cur_parm_size, align 4, !dbg !10760
  store i32 %16, i32* %agg_size, align 4, !dbg !10761
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10762
  %tobool = icmp ne %struct._IO_FILE* %17, null, !dbg !10762
  br i1 %tobool, label %if.then24, label %if.end28, !dbg !10764

if.then24:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.access** %acc, metadata !10765, metadata !DIExpression()), !dbg !10767
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10768
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.67, i64 0, i64 0)), !dbg !10769
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10770
  %20 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10771
  call void @print_generic_expr(%struct._IO_FILE* %19, %union.tree_node* %20, i32 0), !dbg !10772
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10773
  %22 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10774
  %decl_minimal = bitcast %union.tree_node* %22 to %struct.tree_decl_minimal*, !dbg !10774
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !10774
  %23 = load i32, i32* %uid, align 4, !dbg !10774
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i64 0, i64 0), i32 %23), !dbg !10775
  %24 = load %struct.access*, %struct.access** %repr.addr, align 8, !dbg !10776
  store %struct.access* %24, %struct.access** %acc, align 8, !dbg !10778
  br label %for.cond, !dbg !10779

for.cond:                                         ; preds = %for.inc, %if.then24
  %25 = load %struct.access*, %struct.access** %acc, align 8, !dbg !10780
  %tobool27 = icmp ne %struct.access* %25, null, !dbg !10782
  br i1 %tobool27, label %for.body, label %for.end, !dbg !10782

for.body:                                         ; preds = %for.cond
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10783
  %27 = load %struct.access*, %struct.access** %acc, align 8, !dbg !10784
  call void @dump_access(%struct._IO_FILE* %26, %struct.access* %27, i8 zeroext 1), !dbg !10785
  br label %for.inc, !dbg !10785

for.inc:                                          ; preds = %for.body
  %28 = load %struct.access*, %struct.access** %acc, align 8, !dbg !10786
  %next_grp = getelementptr inbounds %struct.access, %struct.access* %28, i32 0, i32 6, !dbg !10787
  %29 = load %struct.access*, %struct.access** %next_grp, align 8, !dbg !10787
  store %struct.access* %29, %struct.access** %acc, align 8, !dbg !10788
  br label %for.cond, !dbg !10789, !llvm.loop !10790

for.end:                                          ; preds = %for.cond
  br label %if.end28, !dbg !10792

if.end28:                                         ; preds = %for.end, %if.end
  store i32 0, i32* %total_size, align 4, !dbg !10793
  store i32 0, i32* %new_param_count, align 4, !dbg !10794
  br label %for.cond29, !dbg !10795

for.cond29:                                       ; preds = %for.inc57, %if.end28
  %30 = load %struct.access*, %struct.access** %repr.addr, align 8, !dbg !10796
  %tobool30 = icmp ne %struct.access* %30, null, !dbg !10799
  br i1 %tobool30, label %for.body31, label %for.end59, !dbg !10799

for.body31:                                       ; preds = %for.cond29
  %31 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10800
  %32 = load %struct.access*, %struct.access** %repr.addr, align 8, !dbg !10800
  %base32 = getelementptr inbounds %struct.access, %struct.access* %32, i32 0, i32 2, !dbg !10800
  %33 = load %union.tree_node*, %union.tree_node** %base32, align 8, !dbg !10800
  %cmp33 = icmp eq %union.tree_node* %31, %33, !dbg !10800
  br i1 %cmp33, label %cond.false36, label %cond.true35, !dbg !10800

cond.true35:                                      ; preds = %for.body31
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 3439, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10800
  br label %cond.end37, !dbg !10800

cond.false36:                                     ; preds = %for.body31
  br label %cond.end37, !dbg !10800

cond.end37:                                       ; preds = %cond.false36, %cond.true35
  %cond38 = phi i32 [ 0, %cond.true35 ], [ 0, %cond.false36 ], !dbg !10800
  %34 = load i32, i32* %new_param_count, align 4, !dbg !10802
  %inc = add nsw i32 %34, 1, !dbg !10802
  store i32 %inc, i32* %new_param_count, align 4, !dbg !10802
  %35 = load i8, i8* %by_ref, align 1, !dbg !10803
  %tobool39 = icmp ne i8 %35, 0, !dbg !10803
  br i1 %tobool39, label %lor.lhs.false40, label %if.then50, !dbg !10805

lor.lhs.false40:                                  ; preds = %cond.end37
  %36 = load %struct.access*, %struct.access** %repr.addr, align 8, !dbg !10806
  %grp_maybe_modified = getelementptr inbounds %struct.access, %struct.access* %36, i32 0, i32 14, !dbg !10807
  %bf.load41 = load i16, i16* %grp_maybe_modified, align 8, !dbg !10807
  %bf.lshr = lshr i16 %bf.load41, 11, !dbg !10807
  %bf.clear42 = and i16 %bf.lshr, 1, !dbg !10807
  %bf.cast43 = zext i16 %bf.clear42 to i32, !dbg !10807
  %tobool44 = icmp ne i32 %bf.cast43, 0, !dbg !10806
  br i1 %tobool44, label %if.else54, label %land.lhs.true, !dbg !10808

land.lhs.true:                                    ; preds = %lor.lhs.false40
  %37 = load %struct.access*, %struct.access** %repr.addr, align 8, !dbg !10809
  %grp_not_necessarilly_dereferenced = getelementptr inbounds %struct.access, %struct.access* %37, i32 0, i32 14, !dbg !10810
  %bf.load45 = load i16, i16* %grp_not_necessarilly_dereferenced, align 8, !dbg !10810
  %bf.lshr46 = lshr i16 %bf.load45, 13, !dbg !10810
  %bf.clear47 = and i16 %bf.lshr46, 1, !dbg !10810
  %bf.cast48 = zext i16 %bf.clear47 to i32, !dbg !10810
  %tobool49 = icmp ne i32 %bf.cast48, 0, !dbg !10809
  br i1 %tobool49, label %if.else54, label %if.then50, !dbg !10811

if.then50:                                        ; preds = %land.lhs.true, %cond.end37
  %38 = load %struct.access*, %struct.access** %repr.addr, align 8, !dbg !10812
  %size51 = getelementptr inbounds %struct.access, %struct.access* %38, i32 0, i32 1, !dbg !10813
  %39 = load i64, i64* %size51, align 8, !dbg !10813
  %40 = load i32, i32* %total_size, align 4, !dbg !10814
  %conv52 = sext i32 %40 to i64, !dbg !10814
  %add = add nsw i64 %conv52, %39, !dbg !10814
  %conv53 = trunc i64 %add to i32, !dbg !10814
  store i32 %conv53, i32* %total_size, align 4, !dbg !10814
  br label %if.end56, !dbg !10815

if.else54:                                        ; preds = %land.lhs.true, %lor.lhs.false40
  %41 = load i32, i32* %cur_parm_size, align 4, !dbg !10816
  %42 = load i32, i32* %total_size, align 4, !dbg !10817
  %add55 = add nsw i32 %42, %41, !dbg !10817
  store i32 %add55, i32* %total_size, align 4, !dbg !10817
  br label %if.end56

if.end56:                                         ; preds = %if.else54, %if.then50
  br label %for.inc57, !dbg !10818

for.inc57:                                        ; preds = %if.end56
  %43 = load %struct.access*, %struct.access** %repr.addr, align 8, !dbg !10819
  %next_grp58 = getelementptr inbounds %struct.access, %struct.access* %43, i32 0, i32 6, !dbg !10820
  %44 = load %struct.access*, %struct.access** %next_grp58, align 8, !dbg !10820
  store %struct.access* %44, %struct.access** %repr.addr, align 8, !dbg !10821
  br label %for.cond29, !dbg !10822, !llvm.loop !10823

for.end59:                                        ; preds = %for.cond29
  %45 = load i32, i32* %new_param_count, align 4, !dbg !10825
  %cmp60 = icmp sgt i32 %45, 0, !dbg !10825
  br i1 %cmp60, label %cond.false63, label %cond.true62, !dbg !10825

cond.true62:                                      ; preds = %for.end59
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 3449, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10825
  br label %cond.end64, !dbg !10825

cond.false63:                                     ; preds = %for.end59
  br label %cond.end64, !dbg !10825

cond.end64:                                       ; preds = %cond.false63, %cond.true62
  %cond65 = phi i32 [ 0, %cond.true62 ], [ 0, %cond.false63 ], !dbg !10825
  %46 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10826
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %46, i64 0, !dbg !10826
  %call66 = call zeroext i8 @optimize_function_for_size_p(%struct.function* %add.ptr), !dbg !10828
  %tobool67 = icmp ne i8 %call66, 0, !dbg !10828
  br i1 %tobool67, label %if.then68, label %if.else69, !dbg !10829

if.then68:                                        ; preds = %cond.end64
  %47 = load i32, i32* %cur_parm_size, align 4, !dbg !10830
  store i32 %47, i32* %parm_size_limit, align 4, !dbg !10831
  br label %if.end70, !dbg !10832

if.else69:                                        ; preds = %cond.end64
  %48 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !10833
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %48, i64 118, !dbg !10833
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !10833
  %49 = load i32, i32* %value, align 8, !dbg !10833
  %50 = load i32, i32* %cur_parm_size, align 4, !dbg !10834
  %mul = mul nsw i32 %49, %50, !dbg !10835
  store i32 %mul, i32* %parm_size_limit, align 4, !dbg !10836
  br label %if.end70

if.end70:                                         ; preds = %if.else69, %if.then68
  %51 = load i32, i32* %total_size, align 4, !dbg !10837
  %52 = load i32, i32* %agg_size, align 4, !dbg !10839
  %cmp71 = icmp slt i32 %51, %52, !dbg !10840
  br i1 %cmp71, label %land.lhs.true73, label %if.else81, !dbg !10841

land.lhs.true73:                                  ; preds = %if.end70
  %53 = load i32, i32* %total_size, align 4, !dbg !10842
  %54 = load i32, i32* %parm_size_limit, align 4, !dbg !10843
  %cmp74 = icmp sle i32 %53, %54, !dbg !10844
  br i1 %cmp74, label %if.then76, label %if.else81, !dbg !10845

if.then76:                                        ; preds = %land.lhs.true73
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10846
  %tobool77 = icmp ne %struct._IO_FILE* %55, null, !dbg !10846
  br i1 %tobool77, label %if.then78, label %if.end80, !dbg !10849

if.then78:                                        ; preds = %if.then76
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10850
  %57 = load i32, i32* %new_param_count, align 4, !dbg !10851
  %call79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.68, i64 0, i64 0), i32 %57), !dbg !10852
  br label %if.end80, !dbg !10852

if.end80:                                         ; preds = %if.then78, %if.then76
  %58 = load i32, i32* %new_param_count, align 4, !dbg !10853
  store i32 %58, i32* %retval, align 4, !dbg !10854
  br label %return, !dbg !10854

if.else81:                                        ; preds = %land.lhs.true73, %if.end70
  store i32 0, i32* %retval, align 4, !dbg !10855
  br label %return, !dbg !10855

return:                                           ; preds = %if.else81, %if.end80
  %59 = load i32, i32* %retval, align 4, !dbg !10856
  ret i32 %59, !dbg !10856
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ipa_parm_adjustment_t_heap* @turn_representatives_into_adjustments(%struct.VEC_access_p_heap* %representatives, i32 %adjustments_count) #0 !dbg !10857 {
entry:
  %representatives.addr = alloca %struct.VEC_access_p_heap*, align 8
  %adjustments_count.addr = alloca i32, align 4
  %parms = alloca %struct.VEC_tree_heap*, align 8
  %adjustments = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %parm = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %repr = alloca %struct.access*, align 8
  %adj = alloca %struct.ipa_parm_adjustment*, align 8
  %adj26 = alloca %struct.ipa_parm_adjustment*, align 8
  %index = alloca i32, align 4
  store %struct.VEC_access_p_heap* %representatives, %struct.VEC_access_p_heap** %representatives.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap** %representatives.addr, metadata !10860, metadata !DIExpression()), !dbg !10861
  store i32 %adjustments_count, i32* %adjustments_count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %adjustments_count.addr, metadata !10862, metadata !DIExpression()), !dbg !10863
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %parms, metadata !10864, metadata !DIExpression()), !dbg !10870
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, metadata !10871, metadata !DIExpression()), !dbg !10872
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !10873, metadata !DIExpression()), !dbg !10874
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10875, metadata !DIExpression()), !dbg !10876
  %0 = load i32, i32* %adjustments_count.addr, align 4, !dbg !10877
  %cmp = icmp sgt i32 %0, 0, !dbg !10877
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10877

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 3572, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10877
  br label %cond.end, !dbg !10877

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10877

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10877
  %1 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !10878
  %call = call %struct.VEC_tree_heap* @ipa_get_vector_of_formal_parms(%union.tree_node* %1), !dbg !10879
  store %struct.VEC_tree_heap* %call, %struct.VEC_tree_heap** %parms, align 8, !dbg !10880
  %2 = load i32, i32* %adjustments_count.addr, align 4, !dbg !10881
  %call1 = call %struct.VEC_ipa_parm_adjustment_t_heap* @VEC_ipa_parm_adjustment_t_heap_alloc(i32 %2), !dbg !10881
  store %struct.VEC_ipa_parm_adjustment_t_heap* %call1, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !10882
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !10883
  %decl_non_common = bitcast %union.tree_node* %3 to %struct.tree_decl_non_common*, !dbg !10883
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !10883
  %4 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !10883
  store %union.tree_node* %4, %union.tree_node** %parm, align 8, !dbg !10884
  store i32 0, i32* %i, align 4, !dbg !10885
  br label %for.cond, !dbg !10887

for.cond:                                         ; preds = %for.inc80, %cond.end
  %5 = load i32, i32* %i, align 4, !dbg !10888
  %6 = load i32, i32* @func_param_count, align 4, !dbg !10890
  %cmp2 = icmp slt i32 %5, %6, !dbg !10891
  br i1 %cmp2, label %for.body, label %for.end82, !dbg !10892

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.access** %repr, metadata !10893, metadata !DIExpression()), !dbg !10895
  %7 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives.addr, align 8, !dbg !10896
  %tobool = icmp ne %struct.VEC_access_p_heap* %7, null, !dbg !10896
  br i1 %tobool, label %cond.true3, label %cond.false4, !dbg !10896

cond.true3:                                       ; preds = %for.body
  %8 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %representatives.addr, align 8, !dbg !10896
  %base = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %8, i32 0, i32 0, !dbg !10896
  br label %cond.end5, !dbg !10896

cond.false4:                                      ; preds = %for.body
  br label %cond.end5, !dbg !10896

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi %struct.VEC_access_p_base* [ %base, %cond.true3 ], [ null, %cond.false4 ], !dbg !10896
  %9 = load i32, i32* %i, align 4, !dbg !10896
  %call7 = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond6, i32 %9), !dbg !10896
  store %struct.access* %call7, %struct.access** %repr, align 8, !dbg !10895
  %10 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10897
  %tobool8 = icmp ne %struct.access* %10, null, !dbg !10897
  br i1 %tobool8, label %lor.lhs.false, label %if.then, !dbg !10899

lor.lhs.false:                                    ; preds = %cond.end5
  %11 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10900
  %call9 = call zeroext i8 @no_accesses_p(%struct.access* %11), !dbg !10901
  %conv = zext i8 %call9 to i32, !dbg !10901
  %tobool10 = icmp ne i32 %conv, 0, !dbg !10901
  br i1 %tobool10, label %if.then, label %if.else25, !dbg !10902

if.then:                                          ; preds = %lor.lhs.false, %cond.end5
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %adj, metadata !10903, metadata !DIExpression()), !dbg !10906
  %12 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !10907
  %tobool11 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %12, null, !dbg !10907
  br i1 %tobool11, label %cond.true12, label %cond.false14, !dbg !10907

cond.true12:                                      ; preds = %if.then
  %13 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !10907
  %base13 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %13, i32 0, i32 0, !dbg !10907
  br label %cond.end15, !dbg !10907

cond.false14:                                     ; preds = %if.then
  br label %cond.end15, !dbg !10907

cond.end15:                                       ; preds = %cond.false14, %cond.true12
  %cond16 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base13, %cond.true12 ], [ null, %cond.false14 ], !dbg !10907
  %call17 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_quick_push(%struct.VEC_ipa_parm_adjustment_t_base* %cond16, %struct.ipa_parm_adjustment* null), !dbg !10907
  store %struct.ipa_parm_adjustment* %call17, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !10908
  %14 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !10909
  %15 = bitcast %struct.ipa_parm_adjustment* %14 to i8*, !dbg !10910
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 56, i1 false), !dbg !10910
  %16 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10911
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parms, align 8, !dbg !10912
  %call18 = call i32 @get_param_index(%union.tree_node* %16, %struct.VEC_tree_heap* %17), !dbg !10913
  %18 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !10914
  %base_index = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %18, i32 0, i32 6, !dbg !10915
  store i32 %call18, i32* %base_index, align 8, !dbg !10916
  %19 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10917
  %20 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !10918
  %base19 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %20, i32 0, i32 0, !dbg !10919
  store %union.tree_node* %19, %union.tree_node** %base19, align 8, !dbg !10920
  %21 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10921
  %tobool20 = icmp ne %struct.access* %21, null, !dbg !10921
  br i1 %tobool20, label %if.else, label %if.then21, !dbg !10923

if.then21:                                        ; preds = %cond.end15
  %22 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !10924
  %copy_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %22, i32 0, i32 7, !dbg !10925
  %bf.load = load i8, i8* %copy_param, align 4, !dbg !10926
  %bf.clear = and i8 %bf.load, -2, !dbg !10926
  %bf.set = or i8 %bf.clear, 1, !dbg !10926
  store i8 %bf.set, i8* %copy_param, align 4, !dbg !10926
  br label %if.end, !dbg !10924

if.else:                                          ; preds = %cond.end15
  %23 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !10927
  %remove_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %23, i32 0, i32 7, !dbg !10928
  %bf.load22 = load i8, i8* %remove_param, align 4, !dbg !10929
  %bf.clear23 = and i8 %bf.load22, -3, !dbg !10929
  %bf.set24 = or i8 %bf.clear23, 2, !dbg !10929
  store i8 %bf.set24, i8* %remove_param, align 4, !dbg !10929
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then21
  br label %if.end79, !dbg !10930

if.else25:                                        ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %adj26, metadata !10931, metadata !DIExpression()), !dbg !10933
  call void @llvm.dbg.declare(metadata i32* %index, metadata !10934, metadata !DIExpression()), !dbg !10935
  %24 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10936
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parms, align 8, !dbg !10937
  %call27 = call i32 @get_param_index(%union.tree_node* %24, %struct.VEC_tree_heap* %25), !dbg !10938
  store i32 %call27, i32* %index, align 4, !dbg !10935
  br label %for.cond28, !dbg !10939

for.cond28:                                       ; preds = %for.inc, %if.else25
  %26 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10940
  %tobool29 = icmp ne %struct.access* %26, null, !dbg !10943
  br i1 %tobool29, label %for.body30, label %for.end, !dbg !10943

for.body30:                                       ; preds = %for.cond28
  %27 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !10944
  %tobool31 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %27, null, !dbg !10944
  br i1 %tobool31, label %cond.true32, label %cond.false34, !dbg !10944

cond.true32:                                      ; preds = %for.body30
  %28 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !10944
  %base33 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %28, i32 0, i32 0, !dbg !10944
  br label %cond.end35, !dbg !10944

cond.false34:                                     ; preds = %for.body30
  br label %cond.end35, !dbg !10944

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base33, %cond.true32 ], [ null, %cond.false34 ], !dbg !10944
  %call37 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_quick_push(%struct.VEC_ipa_parm_adjustment_t_base* %cond36, %struct.ipa_parm_adjustment* null), !dbg !10944
  store %struct.ipa_parm_adjustment* %call37, %struct.ipa_parm_adjustment** %adj26, align 8, !dbg !10946
  %29 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj26, align 8, !dbg !10947
  %30 = bitcast %struct.ipa_parm_adjustment* %29 to i8*, !dbg !10948
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 56, i1 false), !dbg !10948
  %31 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10949
  %base38 = getelementptr inbounds %struct.access, %struct.access* %31, i32 0, i32 2, !dbg !10949
  %32 = load %union.tree_node*, %union.tree_node** %base38, align 8, !dbg !10949
  %33 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10949
  %cmp39 = icmp eq %union.tree_node* %32, %33, !dbg !10949
  br i1 %cmp39, label %cond.false42, label %cond.true41, !dbg !10949

cond.true41:                                      ; preds = %cond.end35
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 3602, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10949
  br label %cond.end43, !dbg !10949

cond.false42:                                     ; preds = %cond.end35
  br label %cond.end43, !dbg !10949

cond.end43:                                       ; preds = %cond.false42, %cond.true41
  %cond44 = phi i32 [ 0, %cond.true41 ], [ 0, %cond.false42 ], !dbg !10949
  %34 = load i32, i32* %index, align 4, !dbg !10950
  %35 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj26, align 8, !dbg !10951
  %base_index45 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %35, i32 0, i32 6, !dbg !10952
  store i32 %34, i32* %base_index45, align 8, !dbg !10953
  %36 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10954
  %base46 = getelementptr inbounds %struct.access, %struct.access* %36, i32 0, i32 2, !dbg !10955
  %37 = load %union.tree_node*, %union.tree_node** %base46, align 8, !dbg !10955
  %38 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj26, align 8, !dbg !10956
  %base47 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %38, i32 0, i32 0, !dbg !10957
  store %union.tree_node* %37, %union.tree_node** %base47, align 8, !dbg !10958
  %39 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10959
  %type = getelementptr inbounds %struct.access, %struct.access* %39, i32 0, i32 4, !dbg !10960
  %40 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10960
  %41 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj26, align 8, !dbg !10961
  %type48 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %41, i32 0, i32 1, !dbg !10962
  store %union.tree_node* %40, %union.tree_node** %type48, align 8, !dbg !10963
  %42 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10964
  %offset = getelementptr inbounds %struct.access, %struct.access* %42, i32 0, i32 0, !dbg !10965
  %43 = load i64, i64* %offset, align 8, !dbg !10965
  %44 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj26, align 8, !dbg !10966
  %offset49 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %44, i32 0, i32 5, !dbg !10967
  store i64 %43, i64* %offset49, align 8, !dbg !10968
  %45 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10969
  %base50 = getelementptr inbounds %struct.access, %struct.access* %45, i32 0, i32 2, !dbg !10969
  %46 = load %union.tree_node*, %union.tree_node** %base50, align 8, !dbg !10969
  %common = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !10969
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10969
  %47 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !10969
  %base52 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !10969
  %48 = bitcast %struct.tree_base* %base52 to i64*, !dbg !10969
  %bf.load53 = load i64, i64* %48, align 8, !dbg !10969
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !10969
  %bf.cast = trunc i64 %bf.clear54 to i32, !dbg !10969
  %cmp55 = icmp eq i32 %bf.cast, 10, !dbg !10969
  br i1 %cmp55, label %land.rhs, label %lor.lhs.false57, !dbg !10969

lor.lhs.false57:                                  ; preds = %cond.end43
  %49 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10969
  %base58 = getelementptr inbounds %struct.access, %struct.access* %49, i32 0, i32 2, !dbg !10969
  %50 = load %union.tree_node*, %union.tree_node** %base58, align 8, !dbg !10969
  %common59 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !10969
  %type60 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common59, i32 0, i32 2, !dbg !10969
  %51 = load %union.tree_node*, %union.tree_node** %type60, align 8, !dbg !10969
  %base61 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !10969
  %52 = bitcast %struct.tree_base* %base61 to i64*, !dbg !10969
  %bf.load62 = load i64, i64* %52, align 8, !dbg !10969
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !10969
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !10969
  %cmp65 = icmp eq i32 %bf.cast64, 12, !dbg !10969
  br i1 %cmp65, label %land.rhs, label %land.end, !dbg !10970

land.rhs:                                         ; preds = %lor.lhs.false57, %cond.end43
  %53 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10971
  %grp_maybe_modified = getelementptr inbounds %struct.access, %struct.access* %53, i32 0, i32 14, !dbg !10972
  %bf.load67 = load i16, i16* %grp_maybe_modified, align 8, !dbg !10972
  %bf.lshr = lshr i16 %bf.load67, 11, !dbg !10972
  %bf.clear68 = and i16 %bf.lshr, 1, !dbg !10972
  %bf.cast69 = zext i16 %bf.clear68 to i32, !dbg !10972
  %tobool70 = icmp ne i32 %bf.cast69, 0, !dbg !10971
  br i1 %tobool70, label %lor.end, label %lor.rhs, !dbg !10973

lor.rhs:                                          ; preds = %land.rhs
  %54 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10974
  %grp_not_necessarilly_dereferenced = getelementptr inbounds %struct.access, %struct.access* %54, i32 0, i32 14, !dbg !10975
  %bf.load71 = load i16, i16* %grp_not_necessarilly_dereferenced, align 8, !dbg !10975
  %bf.lshr72 = lshr i16 %bf.load71, 13, !dbg !10975
  %bf.clear73 = and i16 %bf.lshr72, 1, !dbg !10975
  %bf.cast74 = zext i16 %bf.clear73 to i32, !dbg !10975
  %tobool75 = icmp ne i32 %bf.cast74, 0, !dbg !10973
  br label %lor.end, !dbg !10973

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %55 = phi i1 [ true, %land.rhs ], [ %tobool75, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.lhs.false57
  %56 = phi i1 [ false, %lor.lhs.false57 ], [ %55, %lor.end ], !dbg !10976
  %land.ext = zext i1 %56 to i32, !dbg !10970
  %57 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj26, align 8, !dbg !10977
  %by_ref = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %57, i32 0, i32 7, !dbg !10978
  %58 = trunc i32 %land.ext to i8, !dbg !10979
  %bf.load76 = load i8, i8* %by_ref, align 4, !dbg !10979
  %bf.value = and i8 %58, 1, !dbg !10979
  %bf.shl = shl i8 %bf.value, 2, !dbg !10979
  %bf.clear77 = and i8 %bf.load76, -5, !dbg !10979
  %bf.set78 = or i8 %bf.clear77, %bf.shl, !dbg !10979
  store i8 %bf.set78, i8* %by_ref, align 4, !dbg !10979
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !10979
  br label %for.inc, !dbg !10980

for.inc:                                          ; preds = %land.end
  %59 = load %struct.access*, %struct.access** %repr, align 8, !dbg !10981
  %next_grp = getelementptr inbounds %struct.access, %struct.access* %59, i32 0, i32 6, !dbg !10982
  %60 = load %struct.access*, %struct.access** %next_grp, align 8, !dbg !10982
  store %struct.access* %60, %struct.access** %repr, align 8, !dbg !10983
  br label %for.cond28, !dbg !10984, !llvm.loop !10985

for.end:                                          ; preds = %for.cond28
  br label %if.end79

if.end79:                                         ; preds = %for.end, %if.end
  br label %for.inc80, !dbg !10987

for.inc80:                                        ; preds = %if.end79
  %61 = load i32, i32* %i, align 4, !dbg !10988
  %inc = add nsw i32 %61, 1, !dbg !10988
  store i32 %inc, i32* %i, align 4, !dbg !10988
  %62 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10989
  %common81 = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !10989
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 1, !dbg !10989
  %63 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !10989
  store %union.tree_node* %63, %union.tree_node** %parm, align 8, !dbg !10990
  br label %for.cond, !dbg !10991, !llvm.loop !10992

for.end82:                                        ; preds = %for.cond
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %parms), !dbg !10994
  %64 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !10995
  ret %struct.VEC_ipa_parm_adjustment_t_heap* %64, !dbg !10996
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @unmodified_by_ref_scalar_representative(%union.tree_node* %parm) #0 !dbg !10997 {
entry:
  %retval = alloca %struct.access*, align 8
  %parm.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %access_count = alloca i32, align 4
  %repr = alloca %struct.access*, align 8
  %access_vec = alloca %struct.VEC_access_p_heap*, align 8
  %access = alloca %struct.access*, align 8
  store %union.tree_node* %parm, %union.tree_node** %parm.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm.addr, metadata !10998, metadata !DIExpression()), !dbg !10999
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11000, metadata !DIExpression()), !dbg !11001
  call void @llvm.dbg.declare(metadata i32* %access_count, metadata !11002, metadata !DIExpression()), !dbg !11003
  call void @llvm.dbg.declare(metadata %struct.access** %repr, metadata !11004, metadata !DIExpression()), !dbg !11005
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap** %access_vec, metadata !11006, metadata !DIExpression()), !dbg !11007
  %0 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11008
  %call = call %struct.VEC_access_p_heap* @get_base_access_vector(%union.tree_node* %0), !dbg !11009
  store %struct.VEC_access_p_heap* %call, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11010
  %1 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11011
  %tobool = icmp ne %struct.VEC_access_p_heap* %1, null, !dbg !11011
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11011

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 3267, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !11011
  br label %cond.end, !dbg !11011

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11011

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11011
  %2 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11012
  %tobool1 = icmp ne %struct.VEC_access_p_heap* %2, null, !dbg !11012
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !11012

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11012
  %base = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %3, i32 0, i32 0, !dbg !11012
  br label %cond.end4, !dbg !11012

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !11012

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi %struct.VEC_access_p_base* [ %base, %cond.true2 ], [ null, %cond.false3 ], !dbg !11012
  %call6 = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond5, i32 0), !dbg !11012
  store %struct.access* %call6, %struct.access** %repr, align 8, !dbg !11013
  %4 = load %struct.access*, %struct.access** %repr, align 8, !dbg !11014
  %write = getelementptr inbounds %struct.access, %struct.access* %4, i32 0, i32 14, !dbg !11016
  %bf.load = load i16, i16* %write, align 8, !dbg !11016
  %bf.clear = and i16 %bf.load, 1, !dbg !11016
  %bf.cast = zext i16 %bf.clear to i32, !dbg !11016
  %tobool7 = icmp ne i32 %bf.cast, 0, !dbg !11014
  br i1 %tobool7, label %if.then, label %if.end, !dbg !11017

if.then:                                          ; preds = %cond.end4
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !11018
  br label %return, !dbg !11018

if.end:                                           ; preds = %cond.end4
  %5 = load %struct.access*, %struct.access** %repr, align 8, !dbg !11019
  %6 = load %struct.access*, %struct.access** %repr, align 8, !dbg !11020
  %group_representative = getelementptr inbounds %struct.access, %struct.access* %6, i32 0, i32 7, !dbg !11021
  store %struct.access* %5, %struct.access** %group_representative, align 8, !dbg !11022
  %7 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11023
  %tobool8 = icmp ne %struct.VEC_access_p_heap* %7, null, !dbg !11023
  br i1 %tobool8, label %cond.true9, label %cond.false11, !dbg !11023

cond.true9:                                       ; preds = %if.end
  %8 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11023
  %base10 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %8, i32 0, i32 0, !dbg !11023
  br label %cond.end12, !dbg !11023

cond.false11:                                     ; preds = %if.end
  br label %cond.end12, !dbg !11023

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi %struct.VEC_access_p_base* [ %base10, %cond.true9 ], [ null, %cond.false11 ], !dbg !11023
  %call14 = call i32 @VEC_access_p_base_length(%struct.VEC_access_p_base* %cond13), !dbg !11023
  store i32 %call14, i32* %access_count, align 4, !dbg !11024
  store i32 1, i32* %i, align 4, !dbg !11025
  br label %for.cond, !dbg !11027

for.cond:                                         ; preds = %for.inc, %cond.end12
  %9 = load i32, i32* %i, align 4, !dbg !11028
  %10 = load i32, i32* %access_count, align 4, !dbg !11030
  %cmp = icmp slt i32 %9, %10, !dbg !11031
  br i1 %cmp, label %for.body, label %for.end, !dbg !11032

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !11033, metadata !DIExpression()), !dbg !11035
  %11 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11036
  %tobool15 = icmp ne %struct.VEC_access_p_heap* %11, null, !dbg !11036
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !11036

cond.true16:                                      ; preds = %for.body
  %12 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11036
  %base17 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %12, i32 0, i32 0, !dbg !11036
  br label %cond.end19, !dbg !11036

cond.false18:                                     ; preds = %for.body
  br label %cond.end19, !dbg !11036

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_access_p_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !11036
  %13 = load i32, i32* %i, align 4, !dbg !11036
  %call21 = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond20, i32 %13), !dbg !11036
  store %struct.access* %call21, %struct.access** %access, align 8, !dbg !11035
  %14 = load %struct.access*, %struct.access** %access, align 8, !dbg !11037
  %write22 = getelementptr inbounds %struct.access, %struct.access* %14, i32 0, i32 14, !dbg !11039
  %bf.load23 = load i16, i16* %write22, align 8, !dbg !11039
  %bf.clear24 = and i16 %bf.load23, 1, !dbg !11039
  %bf.cast25 = zext i16 %bf.clear24 to i32, !dbg !11039
  %tobool26 = icmp ne i32 %bf.cast25, 0, !dbg !11037
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !11040

if.then27:                                        ; preds = %cond.end19
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !11041
  br label %return, !dbg !11041

if.end28:                                         ; preds = %cond.end19
  %15 = load %struct.access*, %struct.access** %repr, align 8, !dbg !11042
  %16 = load %struct.access*, %struct.access** %access, align 8, !dbg !11043
  %group_representative29 = getelementptr inbounds %struct.access, %struct.access* %16, i32 0, i32 7, !dbg !11044
  store %struct.access* %15, %struct.access** %group_representative29, align 8, !dbg !11045
  %17 = load %struct.access*, %struct.access** %repr, align 8, !dbg !11046
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %17, i32 0, i32 9, !dbg !11047
  %18 = load %struct.access*, %struct.access** %next_sibling, align 8, !dbg !11047
  %19 = load %struct.access*, %struct.access** %access, align 8, !dbg !11048
  %next_sibling30 = getelementptr inbounds %struct.access, %struct.access* %19, i32 0, i32 9, !dbg !11049
  store %struct.access* %18, %struct.access** %next_sibling30, align 8, !dbg !11050
  %20 = load %struct.access*, %struct.access** %access, align 8, !dbg !11051
  %21 = load %struct.access*, %struct.access** %repr, align 8, !dbg !11052
  %next_sibling31 = getelementptr inbounds %struct.access, %struct.access* %21, i32 0, i32 9, !dbg !11053
  store %struct.access* %20, %struct.access** %next_sibling31, align 8, !dbg !11054
  br label %for.inc, !dbg !11055

for.inc:                                          ; preds = %if.end28
  %22 = load i32, i32* %i, align 4, !dbg !11056
  %inc = add nsw i32 %22, 1, !dbg !11056
  store i32 %inc, i32* %i, align 4, !dbg !11056
  br label %for.cond, !dbg !11057, !llvm.loop !11058

for.end:                                          ; preds = %for.cond
  %23 = load %struct.access*, %struct.access** %repr, align 8, !dbg !11060
  %grp_read = getelementptr inbounds %struct.access, %struct.access* %23, i32 0, i32 14, !dbg !11061
  %bf.load32 = load i16, i16* %grp_read, align 8, !dbg !11062
  %bf.clear33 = and i16 %bf.load32, -17, !dbg !11062
  %bf.set = or i16 %bf.clear33, 16, !dbg !11062
  store i16 %bf.set, i16* %grp_read, align 8, !dbg !11062
  %24 = load %struct.access*, %struct.access** %repr, align 8, !dbg !11063
  %grp_scalar_ptr = getelementptr inbounds %struct.access, %struct.access* %24, i32 0, i32 14, !dbg !11064
  %bf.load34 = load i16, i16* %grp_scalar_ptr, align 8, !dbg !11065
  %bf.clear35 = and i16 %bf.load34, -4097, !dbg !11065
  %bf.set36 = or i16 %bf.clear35, 4096, !dbg !11065
  store i16 %bf.set36, i16* %grp_scalar_ptr, align 8, !dbg !11065
  %25 = load %struct.access*, %struct.access** %repr, align 8, !dbg !11066
  store %struct.access* %25, %struct.access** %retval, align 8, !dbg !11067
  br label %return, !dbg !11067

return:                                           ; preds = %for.end, %if.then27, %if.then
  %26 = load %struct.access*, %struct.access** %retval, align 8, !dbg !11068
  ret %struct.access* %26, !dbg !11068
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access* @splice_param_accesses(%union.tree_node* %parm, i8* %ro_grp) #0 !dbg !11069 {
entry:
  %retval = alloca %struct.access*, align 8
  %parm.addr = alloca %union.tree_node*, align 8
  %ro_grp.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %access_count = alloca i32, align 4
  %group_count = alloca i32, align 4
  %agg_size = alloca i32, align 4
  %total_size = alloca i32, align 4
  %access = alloca %struct.access*, align 8
  %res = alloca %struct.access*, align 8
  %prev_acc_ptr = alloca %struct.access**, align 8
  %access_vec = alloca %struct.VEC_access_p_heap*, align 8
  %modification = alloca i8, align 1
  %ac2 = alloca %struct.access*, align 8
  store %union.tree_node* %parm, %union.tree_node** %parm.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm.addr, metadata !11073, metadata !DIExpression()), !dbg !11074
  store i8* %ro_grp, i8** %ro_grp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ro_grp.addr, metadata !11075, metadata !DIExpression()), !dbg !11076
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11077, metadata !DIExpression()), !dbg !11078
  call void @llvm.dbg.declare(metadata i32* %j, metadata !11079, metadata !DIExpression()), !dbg !11080
  call void @llvm.dbg.declare(metadata i32* %access_count, metadata !11081, metadata !DIExpression()), !dbg !11082
  call void @llvm.dbg.declare(metadata i32* %group_count, metadata !11083, metadata !DIExpression()), !dbg !11084
  call void @llvm.dbg.declare(metadata i32* %agg_size, metadata !11085, metadata !DIExpression()), !dbg !11086
  call void @llvm.dbg.declare(metadata i32* %total_size, metadata !11087, metadata !DIExpression()), !dbg !11088
  store i32 0, i32* %total_size, align 4, !dbg !11088
  call void @llvm.dbg.declare(metadata %struct.access** %access, metadata !11089, metadata !DIExpression()), !dbg !11090
  call void @llvm.dbg.declare(metadata %struct.access** %res, metadata !11091, metadata !DIExpression()), !dbg !11092
  call void @llvm.dbg.declare(metadata %struct.access*** %prev_acc_ptr, metadata !11093, metadata !DIExpression()), !dbg !11094
  store %struct.access** %res, %struct.access*** %prev_acc_ptr, align 8, !dbg !11094
  call void @llvm.dbg.declare(metadata %struct.VEC_access_p_heap** %access_vec, metadata !11095, metadata !DIExpression()), !dbg !11096
  %0 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11097
  %call = call %struct.VEC_access_p_heap* @get_base_access_vector(%union.tree_node* %0), !dbg !11098
  store %struct.VEC_access_p_heap* %call, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11099
  %1 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11100
  %tobool = icmp ne %struct.VEC_access_p_heap* %1, null, !dbg !11100
  br i1 %tobool, label %if.end, label %if.then, !dbg !11102

if.then:                                          ; preds = %entry
  store %struct.access* @no_accesses_representant, %struct.access** %retval, align 8, !dbg !11103
  br label %return, !dbg !11103

if.end:                                           ; preds = %entry
  %2 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11104
  %tobool1 = icmp ne %struct.VEC_access_p_heap* %2, null, !dbg !11104
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !11104

cond.true:                                        ; preds = %if.end
  %3 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11104
  %base = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %3, i32 0, i32 0, !dbg !11104
  br label %cond.end, !dbg !11104

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !11104

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11104
  %call2 = call i32 @VEC_access_p_base_length(%struct.VEC_access_p_base* %cond), !dbg !11104
  store i32 %call2, i32* %access_count, align 4, !dbg !11105
  %4 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11106
  %tobool3 = icmp ne %struct.VEC_access_p_heap* %4, null, !dbg !11106
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !11106

cond.true4:                                       ; preds = %cond.end
  %5 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11106
  %base5 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %5, i32 0, i32 0, !dbg !11106
  br label %cond.end7, !dbg !11106

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !11106

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_access_p_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !11106
  %call9 = call %struct.access** @VEC_access_p_base_address(%struct.VEC_access_p_base* %cond8), !dbg !11106
  %6 = bitcast %struct.access** %call9 to i8*, !dbg !11106
  %7 = load i32, i32* %access_count, align 4, !dbg !11107
  %conv = sext i32 %7 to i64, !dbg !11107
  call void @spec_qsort(i8* %6, i64 %conv, i64 8, i32 (i8*, i8*)* @compare_access_positions), !dbg !11108
  store i32 0, i32* %i, align 4, !dbg !11109
  store i32 0, i32* %total_size, align 4, !dbg !11110
  store i32 0, i32* %group_count, align 4, !dbg !11111
  br label %while.cond, !dbg !11112

while.cond:                                       ; preds = %if.end70, %cond.end7
  %8 = load i32, i32* %i, align 4, !dbg !11113
  %9 = load i32, i32* %access_count, align 4, !dbg !11114
  %cmp = icmp slt i32 %8, %9, !dbg !11115
  br i1 %cmp, label %while.body, label %while.end75, !dbg !11112

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8* %modification, metadata !11116, metadata !DIExpression()), !dbg !11118
  %10 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11119
  %tobool11 = icmp ne %struct.VEC_access_p_heap* %10, null, !dbg !11119
  br i1 %tobool11, label %cond.true12, label %cond.false14, !dbg !11119

cond.true12:                                      ; preds = %while.body
  %11 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11119
  %base13 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %11, i32 0, i32 0, !dbg !11119
  br label %cond.end15, !dbg !11119

cond.false14:                                     ; preds = %while.body
  br label %cond.end15, !dbg !11119

cond.end15:                                       ; preds = %cond.false14, %cond.true12
  %cond16 = phi %struct.VEC_access_p_base* [ %base13, %cond.true12 ], [ null, %cond.false14 ], !dbg !11119
  %12 = load i32, i32* %i, align 4, !dbg !11119
  %call17 = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond16, i32 %12), !dbg !11119
  store %struct.access* %call17, %struct.access** %access, align 8, !dbg !11120
  %13 = load %struct.access*, %struct.access** %access, align 8, !dbg !11121
  %write = getelementptr inbounds %struct.access, %struct.access* %13, i32 0, i32 14, !dbg !11122
  %bf.load = load i16, i16* %write, align 8, !dbg !11122
  %bf.clear = and i16 %bf.load, 1, !dbg !11122
  %bf.cast = zext i16 %bf.clear to i32, !dbg !11122
  %conv18 = trunc i32 %bf.cast to i8, !dbg !11121
  store i8 %conv18, i8* %modification, align 1, !dbg !11123
  %14 = load %struct.access*, %struct.access** %access, align 8, !dbg !11124
  %call19 = call zeroext i8 @access_precludes_ipa_sra_p(%struct.access* %14), !dbg !11126
  %tobool20 = icmp ne i8 %call19, 0, !dbg !11126
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !11127

if.then21:                                        ; preds = %cond.end15
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !11128
  br label %return, !dbg !11128

if.end22:                                         ; preds = %cond.end15
  %15 = load i32, i32* %i, align 4, !dbg !11129
  %add = add nsw i32 %15, 1, !dbg !11130
  store i32 %add, i32* %j, align 4, !dbg !11131
  br label %while.cond23, !dbg !11132

while.cond23:                                     ; preds = %if.end55, %if.end22
  %16 = load i32, i32* %j, align 4, !dbg !11133
  %17 = load i32, i32* %access_count, align 4, !dbg !11134
  %cmp24 = icmp slt i32 %16, %17, !dbg !11135
  br i1 %cmp24, label %while.body26, label %while.end, !dbg !11132

while.body26:                                     ; preds = %while.cond23
  call void @llvm.dbg.declare(metadata %struct.access** %ac2, metadata !11136, metadata !DIExpression()), !dbg !11138
  %18 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11139
  %tobool27 = icmp ne %struct.VEC_access_p_heap* %18, null, !dbg !11139
  br i1 %tobool27, label %cond.true28, label %cond.false30, !dbg !11139

cond.true28:                                      ; preds = %while.body26
  %19 = load %struct.VEC_access_p_heap*, %struct.VEC_access_p_heap** %access_vec, align 8, !dbg !11139
  %base29 = getelementptr inbounds %struct.VEC_access_p_heap, %struct.VEC_access_p_heap* %19, i32 0, i32 0, !dbg !11139
  br label %cond.end31, !dbg !11139

cond.false30:                                     ; preds = %while.body26
  br label %cond.end31, !dbg !11139

cond.end31:                                       ; preds = %cond.false30, %cond.true28
  %cond32 = phi %struct.VEC_access_p_base* [ %base29, %cond.true28 ], [ null, %cond.false30 ], !dbg !11139
  %20 = load i32, i32* %j, align 4, !dbg !11139
  %call33 = call %struct.access* @VEC_access_p_base_index(%struct.VEC_access_p_base* %cond32, i32 %20), !dbg !11139
  store %struct.access* %call33, %struct.access** %ac2, align 8, !dbg !11138
  %21 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !11140
  %offset = getelementptr inbounds %struct.access, %struct.access* %21, i32 0, i32 0, !dbg !11142
  %22 = load i64, i64* %offset, align 8, !dbg !11142
  %23 = load %struct.access*, %struct.access** %access, align 8, !dbg !11143
  %offset34 = getelementptr inbounds %struct.access, %struct.access* %23, i32 0, i32 0, !dbg !11144
  %24 = load i64, i64* %offset34, align 8, !dbg !11144
  %cmp35 = icmp ne i64 %22, %24, !dbg !11145
  br i1 %cmp35, label %if.then37, label %if.else44, !dbg !11146

if.then37:                                        ; preds = %cond.end31
  %25 = load %struct.access*, %struct.access** %access, align 8, !dbg !11147
  %offset38 = getelementptr inbounds %struct.access, %struct.access* %25, i32 0, i32 0, !dbg !11150
  %26 = load i64, i64* %offset38, align 8, !dbg !11150
  %27 = load %struct.access*, %struct.access** %access, align 8, !dbg !11151
  %size = getelementptr inbounds %struct.access, %struct.access* %27, i32 0, i32 1, !dbg !11152
  %28 = load i64, i64* %size, align 8, !dbg !11152
  %add39 = add nsw i64 %26, %28, !dbg !11153
  %29 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !11154
  %offset40 = getelementptr inbounds %struct.access, %struct.access* %29, i32 0, i32 0, !dbg !11155
  %30 = load i64, i64* %offset40, align 8, !dbg !11155
  %cmp41 = icmp sgt i64 %add39, %30, !dbg !11156
  br i1 %cmp41, label %if.then43, label %if.else, !dbg !11157

if.then43:                                        ; preds = %if.then37
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !11158
  br label %return, !dbg !11158

if.else:                                          ; preds = %if.then37
  br label %while.end, !dbg !11159

if.else44:                                        ; preds = %cond.end31
  %31 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !11160
  %size45 = getelementptr inbounds %struct.access, %struct.access* %31, i32 0, i32 1, !dbg !11162
  %32 = load i64, i64* %size45, align 8, !dbg !11162
  %33 = load %struct.access*, %struct.access** %access, align 8, !dbg !11163
  %size46 = getelementptr inbounds %struct.access, %struct.access* %33, i32 0, i32 1, !dbg !11164
  %34 = load i64, i64* %size46, align 8, !dbg !11164
  %cmp47 = icmp ne i64 %32, %34, !dbg !11165
  br i1 %cmp47, label %if.then49, label %if.end50, !dbg !11166

if.then49:                                        ; preds = %if.else44
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !11167
  br label %return, !dbg !11167

if.end50:                                         ; preds = %if.else44
  br label %if.end51

if.end51:                                         ; preds = %if.end50
  %35 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !11168
  %call52 = call zeroext i8 @access_precludes_ipa_sra_p(%struct.access* %35), !dbg !11170
  %tobool53 = icmp ne i8 %call52, 0, !dbg !11170
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !11171

if.then54:                                        ; preds = %if.end51
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !11172
  br label %return, !dbg !11172

if.end55:                                         ; preds = %if.end51
  %36 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !11173
  %write56 = getelementptr inbounds %struct.access, %struct.access* %36, i32 0, i32 14, !dbg !11174
  %bf.load57 = load i16, i16* %write56, align 8, !dbg !11174
  %bf.clear58 = and i16 %bf.load57, 1, !dbg !11174
  %bf.cast59 = zext i16 %bf.clear58 to i32, !dbg !11174
  %37 = load i8, i8* %modification, align 1, !dbg !11175
  %conv60 = zext i8 %37 to i32, !dbg !11175
  %or = or i32 %conv60, %bf.cast59, !dbg !11175
  %conv61 = trunc i32 %or to i8, !dbg !11175
  store i8 %conv61, i8* %modification, align 1, !dbg !11175
  %38 = load %struct.access*, %struct.access** %access, align 8, !dbg !11176
  %39 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !11177
  %group_representative = getelementptr inbounds %struct.access, %struct.access* %39, i32 0, i32 7, !dbg !11178
  store %struct.access* %38, %struct.access** %group_representative, align 8, !dbg !11179
  %40 = load %struct.access*, %struct.access** %access, align 8, !dbg !11180
  %next_sibling = getelementptr inbounds %struct.access, %struct.access* %40, i32 0, i32 9, !dbg !11181
  %41 = load %struct.access*, %struct.access** %next_sibling, align 8, !dbg !11181
  %42 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !11182
  %next_sibling62 = getelementptr inbounds %struct.access, %struct.access* %42, i32 0, i32 9, !dbg !11183
  store %struct.access* %41, %struct.access** %next_sibling62, align 8, !dbg !11184
  %43 = load %struct.access*, %struct.access** %ac2, align 8, !dbg !11185
  %44 = load %struct.access*, %struct.access** %access, align 8, !dbg !11186
  %next_sibling63 = getelementptr inbounds %struct.access, %struct.access* %44, i32 0, i32 9, !dbg !11187
  store %struct.access* %43, %struct.access** %next_sibling63, align 8, !dbg !11188
  %45 = load i32, i32* %j, align 4, !dbg !11189
  %inc = add nsw i32 %45, 1, !dbg !11189
  store i32 %inc, i32* %j, align 4, !dbg !11189
  br label %while.cond23, !dbg !11132, !llvm.loop !11190

while.end:                                        ; preds = %if.else, %while.cond23
  %46 = load i32, i32* %group_count, align 4, !dbg !11192
  %inc64 = add nsw i32 %46, 1, !dbg !11192
  store i32 %inc64, i32* %group_count, align 4, !dbg !11192
  %47 = load i8, i8* %modification, align 1, !dbg !11193
  %conv65 = zext i8 %47 to i32, !dbg !11193
  %48 = load %struct.access*, %struct.access** %access, align 8, !dbg !11194
  %grp_maybe_modified = getelementptr inbounds %struct.access, %struct.access* %48, i32 0, i32 14, !dbg !11195
  %49 = trunc i32 %conv65 to i16, !dbg !11196
  %bf.load66 = load i16, i16* %grp_maybe_modified, align 8, !dbg !11196
  %bf.value = and i16 %49, 1, !dbg !11196
  %bf.shl = shl i16 %bf.value, 11, !dbg !11196
  %bf.clear67 = and i16 %bf.load66, -2049, !dbg !11196
  %bf.set = or i16 %bf.clear67, %bf.shl, !dbg !11196
  store i16 %bf.set, i16* %grp_maybe_modified, align 8, !dbg !11196
  %bf.result.cast = zext i16 %bf.value to i32, !dbg !11196
  %50 = load i8, i8* %modification, align 1, !dbg !11197
  %tobool68 = icmp ne i8 %50, 0, !dbg !11197
  br i1 %tobool68, label %if.end70, label %if.then69, !dbg !11199

if.then69:                                        ; preds = %while.end
  %51 = load i8*, i8** %ro_grp.addr, align 8, !dbg !11200
  store i8 1, i8* %51, align 1, !dbg !11201
  br label %if.end70, !dbg !11202

if.end70:                                         ; preds = %if.then69, %while.end
  %52 = load %struct.access*, %struct.access** %access, align 8, !dbg !11203
  %53 = load %struct.access**, %struct.access*** %prev_acc_ptr, align 8, !dbg !11204
  store %struct.access* %52, %struct.access** %53, align 8, !dbg !11205
  %54 = load %struct.access*, %struct.access** %access, align 8, !dbg !11206
  %next_grp = getelementptr inbounds %struct.access, %struct.access* %54, i32 0, i32 6, !dbg !11207
  store %struct.access** %next_grp, %struct.access*** %prev_acc_ptr, align 8, !dbg !11208
  %55 = load %struct.access*, %struct.access** %access, align 8, !dbg !11209
  %size71 = getelementptr inbounds %struct.access, %struct.access* %55, i32 0, i32 1, !dbg !11210
  %56 = load i64, i64* %size71, align 8, !dbg !11210
  %57 = load i32, i32* %total_size, align 4, !dbg !11211
  %conv72 = sext i32 %57 to i64, !dbg !11211
  %add73 = add nsw i64 %conv72, %56, !dbg !11211
  %conv74 = trunc i64 %add73 to i32, !dbg !11211
  store i32 %conv74, i32* %total_size, align 4, !dbg !11211
  %58 = load i32, i32* %j, align 4, !dbg !11212
  store i32 %58, i32* %i, align 4, !dbg !11213
  br label %while.cond, !dbg !11112, !llvm.loop !11214

while.end75:                                      ; preds = %while.cond
  %59 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11216
  %common = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !11216
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11216
  %60 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11216
  %base76 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !11216
  %61 = bitcast %struct.tree_base* %base76 to i64*, !dbg !11216
  %bf.load77 = load i64, i64* %61, align 8, !dbg !11216
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !11216
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !11216
  %cmp80 = icmp eq i32 %bf.cast79, 10, !dbg !11216
  br i1 %cmp80, label %if.then90, label %lor.lhs.false, !dbg !11216

lor.lhs.false:                                    ; preds = %while.end75
  %62 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11216
  %common82 = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !11216
  %type83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 2, !dbg !11216
  %63 = load %union.tree_node*, %union.tree_node** %type83, align 8, !dbg !11216
  %base84 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !11216
  %64 = bitcast %struct.tree_base* %base84 to i64*, !dbg !11216
  %bf.load85 = load i64, i64* %64, align 8, !dbg !11216
  %bf.clear86 = and i64 %bf.load85, 65535, !dbg !11216
  %bf.cast87 = trunc i64 %bf.clear86 to i32, !dbg !11216
  %cmp88 = icmp eq i32 %bf.cast87, 12, !dbg !11216
  br i1 %cmp88, label %if.then90, label %if.else99, !dbg !11218

if.then90:                                        ; preds = %lor.lhs.false, %while.end75
  %65 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11219
  %common91 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !11219
  %type92 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common91, i32 0, i32 2, !dbg !11219
  %66 = load %union.tree_node*, %union.tree_node** %type92, align 8, !dbg !11219
  %common93 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !11219
  %type94 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common93, i32 0, i32 2, !dbg !11219
  %67 = load %union.tree_node*, %union.tree_node** %type94, align 8, !dbg !11219
  %type95 = bitcast %union.tree_node* %67 to %struct.tree_type*, !dbg !11219
  %size96 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type95, i32 0, i32 2, !dbg !11219
  %68 = load %union.tree_node*, %union.tree_node** %size96, align 8, !dbg !11219
  %call97 = call i64 @tree_low_cst(%union.tree_node* %68, i32 1), !dbg !11220
  %conv98 = trunc i64 %call97 to i32, !dbg !11220
  store i32 %conv98, i32* %agg_size, align 4, !dbg !11221
  br label %if.end106, !dbg !11222

if.else99:                                        ; preds = %lor.lhs.false
  %69 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11223
  %common100 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !11223
  %type101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2, !dbg !11223
  %70 = load %union.tree_node*, %union.tree_node** %type101, align 8, !dbg !11223
  %type102 = bitcast %union.tree_node* %70 to %struct.tree_type*, !dbg !11223
  %size103 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type102, i32 0, i32 2, !dbg !11223
  %71 = load %union.tree_node*, %union.tree_node** %size103, align 8, !dbg !11223
  %call104 = call i64 @tree_low_cst(%union.tree_node* %71, i32 1), !dbg !11224
  %conv105 = trunc i64 %call104 to i32, !dbg !11224
  store i32 %conv105, i32* %agg_size, align 4, !dbg !11225
  br label %if.end106

if.end106:                                        ; preds = %if.else99, %if.then90
  %72 = load i32, i32* %total_size, align 4, !dbg !11226
  %73 = load i32, i32* %agg_size, align 4, !dbg !11228
  %cmp107 = icmp sge i32 %72, %73, !dbg !11229
  br i1 %cmp107, label %if.then109, label %if.end110, !dbg !11230

if.then109:                                       ; preds = %if.end106
  store %struct.access* null, %struct.access** %retval, align 8, !dbg !11231
  br label %return, !dbg !11231

if.end110:                                        ; preds = %if.end106
  %74 = load i32, i32* %group_count, align 4, !dbg !11232
  %cmp111 = icmp sgt i32 %74, 0, !dbg !11232
  br i1 %cmp111, label %cond.false114, label %cond.true113, !dbg !11232

cond.true113:                                     ; preds = %if.end110
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 3395, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !11232
  br label %cond.end115, !dbg !11232

cond.false114:                                    ; preds = %if.end110
  br label %cond.end115, !dbg !11232

cond.end115:                                      ; preds = %cond.false114, %cond.true113
  %cond116 = phi i32 [ 0, %cond.true113 ], [ 0, %cond.false114 ], !dbg !11232
  %75 = load %struct.access*, %struct.access** %res, align 8, !dbg !11233
  store %struct.access* %75, %struct.access** %retval, align 8, !dbg !11234
  br label %return, !dbg !11234

return:                                           ; preds = %cond.end115, %if.then109, %if.then54, %if.then49, %if.then43, %if.then21, %if.then
  %76 = load %struct.access*, %struct.access** %retval, align 8, !dbg !11235
  ret %struct.access* %76, !dbg !11235
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @access_precludes_ipa_sra_p(%struct.access* %access) #0 !dbg !11236 {
entry:
  %retval = alloca i8, align 1
  %access.addr = alloca %struct.access*, align 8
  store %struct.access* %access, %struct.access** %access.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access** %access.addr, metadata !11237, metadata !DIExpression()), !dbg !11238
  %0 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !11239
  %write = getelementptr inbounds %struct.access, %struct.access* %0, i32 0, i32 14, !dbg !11241
  %bf.load = load i16, i16* %write, align 8, !dbg !11241
  %bf.clear = and i16 %bf.load, 1, !dbg !11241
  %bf.cast = zext i16 %bf.clear to i32, !dbg !11241
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !11239
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !11242

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !11243
  %stmt = getelementptr inbounds %struct.access, %struct.access* %1, i32 0, i32 5, !dbg !11244
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11244
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %2), !dbg !11245
  %conv = zext i8 %call to i32, !dbg !11245
  %tobool1 = icmp ne i32 %conv, 0, !dbg !11245
  br i1 %tobool1, label %if.then, label %lor.lhs.false, !dbg !11246

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load %struct.access*, %struct.access** %access.addr, align 8, !dbg !11247
  %stmt2 = getelementptr inbounds %struct.access, %struct.access* %3, i32 0, i32 5, !dbg !11248
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !11248
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !11249
  %cmp = icmp eq i32 %call3, 7, !dbg !11250
  br i1 %cmp, label %if.then, label %if.end, !dbg !11251

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !11252
  br label %return, !dbg !11252

if.end:                                           ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !11253
  br label %return, !dbg !11253

return:                                           ; preds = %if.end, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !11254
  ret i8 %5, !dbg !11254
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_dereferences_table(%struct._IO_FILE* %f, i8* %str, i64* %table) #0 !dbg !11255 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %str.addr = alloca i8*, align 8
  %table.addr = alloca i64*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %idx = alloca i32, align 4
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !11258, metadata !DIExpression()), !dbg !11259
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !11260, metadata !DIExpression()), !dbg !11261
  store i64* %table, i64** %table.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %table.addr, metadata !11262, metadata !DIExpression()), !dbg !11263
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !11264, metadata !DIExpression()), !dbg !11265
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11266
  %1 = load i8*, i8** %str.addr, align 8, !dbg !11267
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* %1), !dbg !11268
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11269
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !11269
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !11269
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !11269
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 0, !dbg !11269
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !11269
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !11269
  br label %for.cond, !dbg !11269

for.cond:                                         ; preds = %for.inc16, %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11271
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11271
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !11271
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !11271
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !11271
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !11271
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !11271
  %cmp = icmp ne %struct.basic_block_def* %5, %8, !dbg !11271
  br i1 %cmp, label %for.body, label %for.end17, !dbg !11269

for.body:                                         ; preds = %for.cond
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !11273
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11275
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 9, !dbg !11276
  %11 = load i32, i32* %index, align 8, !dbg !11276
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !11277
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11278
  %index3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 9, !dbg !11279
  %14 = load i32, i32* %index3, align 8, !dbg !11279
  %call4 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %12, i32 %14), !dbg !11280
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i64 0, i64 0), i32 %11, i32 %call4), !dbg !11281
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11282
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11284
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !11284
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !11284
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !11284
  %x_exit_block_ptr8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 1, !dbg !11284
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr8, align 8, !dbg !11284
  %cmp9 = icmp ne %struct.basic_block_def* %15, %18, !dbg !11285
  br i1 %cmp9, label %if.then, label %if.end, !dbg !11286

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11287, metadata !DIExpression()), !dbg !11289
  store i32 0, i32* %i, align 4, !dbg !11290
  br label %for.cond10, !dbg !11292

for.cond10:                                       ; preds = %for.inc, %if.then
  %19 = load i32, i32* %i, align 4, !dbg !11293
  %20 = load i32, i32* @func_param_count, align 4, !dbg !11295
  %cmp11 = icmp slt i32 %19, %20, !dbg !11296
  br i1 %cmp11, label %for.body12, label %for.end, !dbg !11297

for.body12:                                       ; preds = %for.cond10
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !11298, metadata !DIExpression()), !dbg !11300
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11301
  %index13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !11302
  %22 = load i32, i32* %index13, align 8, !dbg !11302
  %23 = load i32, i32* @func_param_count, align 4, !dbg !11303
  %mul = mul nsw i32 %22, %23, !dbg !11304
  %24 = load i32, i32* %i, align 4, !dbg !11305
  %add = add nsw i32 %mul, %24, !dbg !11306
  store i32 %add, i32* %idx, align 4, !dbg !11300
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !11307
  %26 = load i64*, i64** %table.addr, align 8, !dbg !11308
  %27 = load i32, i32* %idx, align 4, !dbg !11309
  %idxprom = sext i32 %27 to i64, !dbg !11308
  %arrayidx = getelementptr inbounds i64, i64* %26, i64 %idxprom, !dbg !11308
  %28 = load i64, i64* %arrayidx, align 8, !dbg !11308
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.66, i64 0, i64 0), i64 %28), !dbg !11310
  br label %for.inc, !dbg !11311

for.inc:                                          ; preds = %for.body12
  %29 = load i32, i32* %i, align 4, !dbg !11312
  %inc = add nsw i32 %29, 1, !dbg !11312
  store i32 %inc, i32* %i, align 4, !dbg !11312
  br label %for.cond10, !dbg !11313, !llvm.loop !11314

for.end:                                          ; preds = %for.cond10
  br label %if.end, !dbg !11316

if.end:                                           ; preds = %for.end, %for.body
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !11317
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !11318
  br label %for.inc16, !dbg !11319

for.inc16:                                        ; preds = %if.end
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11271
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 6, !dbg !11271
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !11271
  store %struct.basic_block_def* %32, %struct.basic_block_def** %bb, align 8, !dbg !11271
  br label %for.cond, !dbg !11271, !llvm.loop !11320

for.end17:                                        ; preds = %for.cond
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11322
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !11323
  ret void, !dbg !11324
}

; Function Attrs: noinline nounwind uwtable
define internal void @propagate_dereference_distances() #0 !dbg !11325 {
entry:
  %queue = alloca %struct.VEC_basic_block_heap*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %change = alloca i8, align 1
  %i = alloca i32, align 4
  %idx = alloca i32, align 4
  %first = alloca i8, align 1
  %inh = alloca i64, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %succ_idx = alloca i32, align 4
  %tmp81 = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %queue, metadata !11326, metadata !DIExpression()), !dbg !11327
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !11328, metadata !DIExpression()), !dbg !11329
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11330
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !11330
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !11330
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !11330
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !11330
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !11330
  %call = call %struct.VEC_basic_block_heap* @VEC_basic_block_heap_alloc(i32 %2), !dbg !11330
  store %struct.VEC_basic_block_heap* %call, %struct.VEC_basic_block_heap** %queue, align 8, !dbg !11331
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %queue, align 8, !dbg !11332
  %tobool = icmp ne %struct.VEC_basic_block_heap* %3, null, !dbg !11332
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11332

cond.true:                                        ; preds = %entry
  %4 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %queue, align 8, !dbg !11332
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %4, i32 0, i32 0, !dbg !11332
  br label %cond.end, !dbg !11332

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11332

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11332
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11332
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !11332
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !11332
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !11332
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 0, !dbg !11332
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !11332
  %call3 = call %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %cond, %struct.basic_block_def* %7), !dbg !11332
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11333
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !11333
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !11333
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !11333
  %x_entry_block_ptr6 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 0, !dbg !11333
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr6, align 8, !dbg !11333
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 6, !dbg !11333
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !11333
  store %struct.basic_block_def* %11, %struct.basic_block_def** %bb, align 8, !dbg !11333
  br label %for.cond, !dbg !11333

for.cond:                                         ; preds = %for.inc, %cond.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11335
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11335
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !11335
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !11335
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !11335
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 1, !dbg !11335
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !11335
  %cmp = icmp ne %struct.basic_block_def* %12, %15, !dbg !11335
  br i1 %cmp, label %for.body, label %for.end, !dbg !11333

for.body:                                         ; preds = %for.cond
  %16 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %queue, align 8, !dbg !11337
  %tobool9 = icmp ne %struct.VEC_basic_block_heap* %16, null, !dbg !11337
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !11337

cond.true10:                                      ; preds = %for.body
  %17 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %queue, align 8, !dbg !11337
  %base11 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %17, i32 0, i32 0, !dbg !11337
  br label %cond.end13, !dbg !11337

cond.false12:                                     ; preds = %for.body
  br label %cond.end13, !dbg !11337

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_basic_block_base* [ %base11, %cond.true10 ], [ null, %cond.false12 ], !dbg !11337
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11337
  %call15 = call %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %cond14, %struct.basic_block_def* %18), !dbg !11337
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11339
  %20 = bitcast %struct.basic_block_def* %19 to i8*, !dbg !11339
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11340
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 2, !dbg !11341
  store i8* %20, i8** %aux, align 8, !dbg !11342
  br label %for.inc, !dbg !11343

for.inc:                                          ; preds = %cond.end13
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11335
  %next_bb16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 6, !dbg !11335
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb16, align 8, !dbg !11335
  store %struct.basic_block_def* %23, %struct.basic_block_def** %bb, align 8, !dbg !11335
  br label %for.cond, !dbg !11335, !llvm.loop !11344

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !11346

while.cond:                                       ; preds = %if.end105, %if.then, %for.end
  %24 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %queue, align 8, !dbg !11347
  %tobool17 = icmp ne %struct.VEC_basic_block_heap* %24, null, !dbg !11347
  br i1 %tobool17, label %cond.true18, label %cond.false20, !dbg !11347

cond.true18:                                      ; preds = %while.cond
  %25 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %queue, align 8, !dbg !11347
  %base19 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %25, i32 0, i32 0, !dbg !11347
  br label %cond.end21, !dbg !11347

cond.false20:                                     ; preds = %while.cond
  br label %cond.end21, !dbg !11347

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi %struct.VEC_basic_block_base* [ %base19, %cond.true18 ], [ null, %cond.false20 ], !dbg !11347
  %call23 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond22), !dbg !11347
  %cmp24 = icmp eq i32 %call23, 0, !dbg !11347
  %lnot = xor i1 %cmp24, true, !dbg !11348
  br i1 %lnot, label %while.body, label %while.end, !dbg !11346

while.body:                                       ; preds = %cond.end21
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !11349, metadata !DIExpression()), !dbg !11357
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !11358, metadata !DIExpression()), !dbg !11359
  call void @llvm.dbg.declare(metadata i8* %change, metadata !11360, metadata !DIExpression()), !dbg !11361
  store i8 0, i8* %change, align 1, !dbg !11361
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11362, metadata !DIExpression()), !dbg !11363
  %26 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %queue, align 8, !dbg !11364
  %tobool25 = icmp ne %struct.VEC_basic_block_heap* %26, null, !dbg !11364
  br i1 %tobool25, label %cond.true26, label %cond.false28, !dbg !11364

cond.true26:                                      ; preds = %while.body
  %27 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %queue, align 8, !dbg !11364
  %base27 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %27, i32 0, i32 0, !dbg !11364
  br label %cond.end29, !dbg !11364

cond.false28:                                     ; preds = %while.body
  br label %cond.end29, !dbg !11364

cond.end29:                                       ; preds = %cond.false28, %cond.true26
  %cond30 = phi %struct.VEC_basic_block_base* [ %base27, %cond.true26 ], [ null, %cond.false28 ], !dbg !11364
  %call31 = call %struct.basic_block_def* @VEC_basic_block_base_pop(%struct.VEC_basic_block_base* %cond30), !dbg !11364
  store %struct.basic_block_def* %call31, %struct.basic_block_def** %bb, align 8, !dbg !11365
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11366
  %aux32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 2, !dbg !11367
  store i8* null, i8** %aux32, align 8, !dbg !11368
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !11369
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11371
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 9, !dbg !11372
  %31 = load i32, i32* %index, align 8, !dbg !11372
  %call33 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %29, i32 %31), !dbg !11373
  %tobool34 = icmp ne i32 %call33, 0, !dbg !11373
  br i1 %tobool34, label %if.then, label %if.end, !dbg !11374

if.then:                                          ; preds = %cond.end29
  br label %while.cond, !dbg !11375, !llvm.loop !11376

if.end:                                           ; preds = %cond.end29
  store i32 0, i32* %i, align 4, !dbg !11378
  br label %for.cond35, !dbg !11380

for.cond35:                                       ; preds = %for.inc73, %if.end
  %32 = load i32, i32* %i, align 4, !dbg !11381
  %33 = load i32, i32* @func_param_count, align 4, !dbg !11383
  %cmp36 = icmp slt i32 %32, %33, !dbg !11384
  br i1 %cmp36, label %for.body37, label %for.end74, !dbg !11385

for.body37:                                       ; preds = %for.cond35
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !11386, metadata !DIExpression()), !dbg !11388
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11389
  %index38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 9, !dbg !11390
  %35 = load i32, i32* %index38, align 8, !dbg !11390
  %36 = load i32, i32* @func_param_count, align 4, !dbg !11391
  %mul = mul nsw i32 %35, %36, !dbg !11392
  %37 = load i32, i32* %i, align 4, !dbg !11393
  %add = add nsw i32 %mul, %37, !dbg !11394
  store i32 %add, i32* %idx, align 4, !dbg !11388
  call void @llvm.dbg.declare(metadata i8* %first, metadata !11395, metadata !DIExpression()), !dbg !11396
  store i8 1, i8* %first, align 1, !dbg !11396
  call void @llvm.dbg.declare(metadata i64* %inh, metadata !11397, metadata !DIExpression()), !dbg !11398
  store i64 0, i64* %inh, align 8, !dbg !11398
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11399
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 1, !dbg !11399
  %call39 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !11399
  %39 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !11399
  %40 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %39, i32 0, i32 0, !dbg !11399
  %41 = extractvalue { i32, %struct.VEC_edge_gc** } %call39, 0, !dbg !11399
  store i32 %41, i32* %40, align 8, !dbg !11399
  %42 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %39, i32 0, i32 1, !dbg !11399
  %43 = extractvalue { i32, %struct.VEC_edge_gc** } %call39, 1, !dbg !11399
  store %struct.VEC_edge_gc** %43, %struct.VEC_edge_gc*** %42, align 8, !dbg !11399
  %44 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11399
  %45 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !11399
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 16, i1 false), !dbg !11399
  br label %for.cond40, !dbg !11399

for.cond40:                                       ; preds = %for.inc63, %for.body37
  %46 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11401
  %47 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %46, i32 0, i32 0, !dbg !11401
  %48 = load i32, i32* %47, align 8, !dbg !11401
  %49 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %46, i32 0, i32 1, !dbg !11401
  %50 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %49, align 8, !dbg !11401
  %call41 = call zeroext i8 @ei_cond(i32 %48, %struct.VEC_edge_gc** %50, %struct.edge_def** %e), !dbg !11401
  %tobool42 = icmp ne i8 %call41, 0, !dbg !11399
  br i1 %tobool42, label %for.body43, label %for.end64, !dbg !11399

for.body43:                                       ; preds = %for.cond40
  call void @llvm.dbg.declare(metadata i32* %succ_idx, metadata !11403, metadata !DIExpression()), !dbg !11405
  %51 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11406
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 1, !dbg !11407
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !11407
  %index44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 9, !dbg !11408
  %53 = load i32, i32* %index44, align 8, !dbg !11408
  %54 = load i32, i32* @func_param_count, align 4, !dbg !11409
  %mul45 = mul nsw i32 %53, %54, !dbg !11410
  %55 = load i32, i32* %i, align 4, !dbg !11411
  %add46 = add nsw i32 %mul45, %55, !dbg !11412
  store i32 %add46, i32* %succ_idx, align 4, !dbg !11405
  %56 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11413
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %56, i32 0, i32 0, !dbg !11415
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !11415
  %58 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11416
  %add.ptr47 = getelementptr inbounds %struct.function, %struct.function* %58, i64 0, !dbg !11416
  %cfg48 = getelementptr inbounds %struct.function, %struct.function* %add.ptr47, i32 0, i32 1, !dbg !11416
  %59 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg48, align 8, !dbg !11416
  %x_exit_block_ptr49 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %59, i32 0, i32 1, !dbg !11416
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr49, align 8, !dbg !11416
  %cmp50 = icmp eq %struct.basic_block_def* %57, %60, !dbg !11417
  br i1 %cmp50, label %if.then51, label %if.end52, !dbg !11418

if.then51:                                        ; preds = %for.body43
  br label %for.inc63, !dbg !11419

if.end52:                                         ; preds = %for.body43
  %61 = load i8, i8* %first, align 1, !dbg !11420
  %tobool53 = icmp ne i8 %61, 0, !dbg !11420
  br i1 %tobool53, label %if.then54, label %if.else, !dbg !11422

if.then54:                                        ; preds = %if.end52
  store i8 0, i8* %first, align 1, !dbg !11423
  %62 = load i64*, i64** @bb_dereferences, align 8, !dbg !11425
  %63 = load i32, i32* %succ_idx, align 4, !dbg !11426
  %idxprom = sext i32 %63 to i64, !dbg !11425
  %arrayidx = getelementptr inbounds i64, i64* %62, i64 %idxprom, !dbg !11425
  %64 = load i64, i64* %arrayidx, align 8, !dbg !11425
  store i64 %64, i64* %inh, align 8, !dbg !11427
  br label %if.end62, !dbg !11428

if.else:                                          ; preds = %if.end52
  %65 = load i64*, i64** @bb_dereferences, align 8, !dbg !11429
  %66 = load i32, i32* %succ_idx, align 4, !dbg !11431
  %idxprom55 = sext i32 %66 to i64, !dbg !11429
  %arrayidx56 = getelementptr inbounds i64, i64* %65, i64 %idxprom55, !dbg !11429
  %67 = load i64, i64* %arrayidx56, align 8, !dbg !11429
  %68 = load i64, i64* %inh, align 8, !dbg !11432
  %cmp57 = icmp slt i64 %67, %68, !dbg !11433
  br i1 %cmp57, label %if.then58, label %if.end61, !dbg !11434

if.then58:                                        ; preds = %if.else
  %69 = load i64*, i64** @bb_dereferences, align 8, !dbg !11435
  %70 = load i32, i32* %succ_idx, align 4, !dbg !11436
  %idxprom59 = sext i32 %70 to i64, !dbg !11435
  %arrayidx60 = getelementptr inbounds i64, i64* %69, i64 %idxprom59, !dbg !11435
  %71 = load i64, i64* %arrayidx60, align 8, !dbg !11435
  store i64 %71, i64* %inh, align 8, !dbg !11437
  br label %if.end61, !dbg !11438

if.end61:                                         ; preds = %if.then58, %if.else
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then54
  br label %for.inc63, !dbg !11439

for.inc63:                                        ; preds = %if.end62, %if.then51
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11401
  br label %for.cond40, !dbg !11401, !llvm.loop !11440

for.end64:                                        ; preds = %for.cond40
  %72 = load i8, i8* %first, align 1, !dbg !11442
  %tobool65 = icmp ne i8 %72, 0, !dbg !11442
  br i1 %tobool65, label %if.end72, label %land.lhs.true, !dbg !11444

land.lhs.true:                                    ; preds = %for.end64
  %73 = load i64*, i64** @bb_dereferences, align 8, !dbg !11445
  %74 = load i32, i32* %idx, align 4, !dbg !11446
  %idxprom66 = sext i32 %74 to i64, !dbg !11445
  %arrayidx67 = getelementptr inbounds i64, i64* %73, i64 %idxprom66, !dbg !11445
  %75 = load i64, i64* %arrayidx67, align 8, !dbg !11445
  %76 = load i64, i64* %inh, align 8, !dbg !11447
  %cmp68 = icmp slt i64 %75, %76, !dbg !11448
  br i1 %cmp68, label %if.then69, label %if.end72, !dbg !11449

if.then69:                                        ; preds = %land.lhs.true
  %77 = load i64, i64* %inh, align 8, !dbg !11450
  %78 = load i64*, i64** @bb_dereferences, align 8, !dbg !11452
  %79 = load i32, i32* %idx, align 4, !dbg !11453
  %idxprom70 = sext i32 %79 to i64, !dbg !11452
  %arrayidx71 = getelementptr inbounds i64, i64* %78, i64 %idxprom70, !dbg !11452
  store i64 %77, i64* %arrayidx71, align 8, !dbg !11454
  store i8 1, i8* %change, align 1, !dbg !11455
  br label %if.end72, !dbg !11456

if.end72:                                         ; preds = %if.then69, %land.lhs.true, %for.end64
  br label %for.inc73, !dbg !11457

for.inc73:                                        ; preds = %if.end72
  %80 = load i32, i32* %i, align 4, !dbg !11458
  %inc = add nsw i32 %80, 1, !dbg !11458
  store i32 %inc, i32* %i, align 4, !dbg !11458
  br label %for.cond35, !dbg !11459, !llvm.loop !11460

for.end74:                                        ; preds = %for.cond35
  %81 = load i8, i8* %change, align 1, !dbg !11462
  %conv = zext i8 %81 to i32, !dbg !11462
  %tobool75 = icmp ne i32 %conv, 0, !dbg !11462
  br i1 %tobool75, label %land.lhs.true76, label %if.end105, !dbg !11464

land.lhs.true76:                                  ; preds = %for.end74
  %82 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @final_bbs, align 8, !dbg !11465
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11466
  %index77 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %83, i32 0, i32 9, !dbg !11467
  %84 = load i32, i32* %index77, align 8, !dbg !11467
  %call78 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %82, i32 %84), !dbg !11468
  %tobool79 = icmp ne i32 %call78, 0, !dbg !11468
  br i1 %tobool79, label %if.end105, label %if.then80, !dbg !11469

if.then80:                                        ; preds = %land.lhs.true76
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11470
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 0, !dbg !11470
  %call82 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !11470
  %86 = bitcast %struct.edge_iterator* %tmp81 to { i32, %struct.VEC_edge_gc** }*, !dbg !11470
  %87 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %86, i32 0, i32 0, !dbg !11470
  %88 = extractvalue { i32, %struct.VEC_edge_gc** } %call82, 0, !dbg !11470
  store i32 %88, i32* %87, align 8, !dbg !11470
  %89 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %86, i32 0, i32 1, !dbg !11470
  %90 = extractvalue { i32, %struct.VEC_edge_gc** } %call82, 1, !dbg !11470
  store %struct.VEC_edge_gc** %90, %struct.VEC_edge_gc*** %89, align 8, !dbg !11470
  %91 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11470
  %92 = bitcast %struct.edge_iterator* %tmp81 to i8*, !dbg !11470
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 16, i1 false), !dbg !11470
  br label %for.cond83, !dbg !11470

for.cond83:                                       ; preds = %for.inc103, %if.then80
  %93 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11472
  %94 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %93, i32 0, i32 0, !dbg !11472
  %95 = load i32, i32* %94, align 8, !dbg !11472
  %96 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %93, i32 0, i32 1, !dbg !11472
  %97 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %96, align 8, !dbg !11472
  %call84 = call zeroext i8 @ei_cond(i32 %95, %struct.VEC_edge_gc** %97, %struct.edge_def** %e), !dbg !11472
  %tobool85 = icmp ne i8 %call84, 0, !dbg !11470
  br i1 %tobool85, label %for.body86, label %for.end104, !dbg !11470

for.body86:                                       ; preds = %for.cond83
  %98 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11474
  %src87 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %98, i32 0, i32 0, !dbg !11477
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %src87, align 8, !dbg !11477
  %aux88 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %99, i32 0, i32 2, !dbg !11478
  %100 = load i8*, i8** %aux88, align 8, !dbg !11478
  %tobool89 = icmp ne i8* %100, null, !dbg !11474
  br i1 %tobool89, label %if.then90, label %if.end91, !dbg !11479

if.then90:                                        ; preds = %for.body86
  br label %for.inc103, !dbg !11480

if.end91:                                         ; preds = %for.body86
  %101 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11481
  %src92 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %101, i32 0, i32 0, !dbg !11482
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %src92, align 8, !dbg !11482
  %103 = bitcast %struct.basic_block_def* %102 to i8*, !dbg !11481
  %104 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11483
  %src93 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %104, i32 0, i32 0, !dbg !11484
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %src93, align 8, !dbg !11484
  %aux94 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %105, i32 0, i32 2, !dbg !11485
  store i8* %103, i8** %aux94, align 8, !dbg !11486
  %106 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %queue, align 8, !dbg !11487
  %tobool95 = icmp ne %struct.VEC_basic_block_heap* %106, null, !dbg !11487
  br i1 %tobool95, label %cond.true96, label %cond.false98, !dbg !11487

cond.true96:                                      ; preds = %if.end91
  %107 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %queue, align 8, !dbg !11487
  %base97 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %107, i32 0, i32 0, !dbg !11487
  br label %cond.end99, !dbg !11487

cond.false98:                                     ; preds = %if.end91
  br label %cond.end99, !dbg !11487

cond.end99:                                       ; preds = %cond.false98, %cond.true96
  %cond100 = phi %struct.VEC_basic_block_base* [ %base97, %cond.true96 ], [ null, %cond.false98 ], !dbg !11487
  %108 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11487
  %src101 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %108, i32 0, i32 0, !dbg !11487
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %src101, align 8, !dbg !11487
  %call102 = call %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %cond100, %struct.basic_block_def* %109), !dbg !11487
  br label %for.inc103, !dbg !11488

for.inc103:                                       ; preds = %cond.end99, %if.then90
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11472
  br label %for.cond83, !dbg !11472, !llvm.loop !11489

for.end104:                                       ; preds = %for.cond83
  br label %if.end105, !dbg !11490

if.end105:                                        ; preds = %for.end104, %land.lhs.true76, %for.end74
  br label %while.cond, !dbg !11346, !llvm.loop !11376

while.end:                                        ; preds = %cond.end21
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %queue), !dbg !11491
  ret void, !dbg !11492
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_basic_block_heap* @VEC_basic_block_heap_alloc(i32 %alloc_) #0 !dbg !11493 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11496, metadata !DIExpression()), !dbg !11497
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11497
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !11497
  %1 = bitcast i8* %call to %struct.VEC_basic_block_heap*, !dbg !11497
  ret %struct.VEC_basic_block_heap* %1, !dbg !11497
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %vec_, %struct.basic_block_def* %obj_) #0 !dbg !11498 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  %slot_ = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !11503, metadata !DIExpression()), !dbg !11504
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !11505, metadata !DIExpression()), !dbg !11504
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %slot_, metadata !11506, metadata !DIExpression()), !dbg !11504
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !11504
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %0, i32 0, i32 0, !dbg !11504
  %1 = load i32, i32* %num, align 8, !dbg !11504
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !11504
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !11504
  %3 = load i32, i32* %alloc, align 4, !dbg !11504
  %cmp = icmp ult i32 %1, %3, !dbg !11504
  %conv = zext i1 %cmp to i32, !dbg !11504
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !11504
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !11504
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !11504
  %num1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 0, !dbg !11504
  %6 = load i32, i32* %num1, align 8, !dbg !11504
  %inc = add i32 %6, 1, !dbg !11504
  store i32 %inc, i32* %num1, align 8, !dbg !11504
  %idxprom = zext i32 %6 to i64, !dbg !11504
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !11504
  store %struct.basic_block_def** %arrayidx, %struct.basic_block_def*** %slot_, align 8, !dbg !11504
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !11504
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !11504
  store %struct.basic_block_def* %7, %struct.basic_block_def** %8, align 8, !dbg !11504
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !11504
  ret %struct.basic_block_def** %9, !dbg !11504
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %vec_) #0 !dbg !11507 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !11512, metadata !DIExpression()), !dbg !11513
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !11513
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !11513
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11513

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !11513
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !11513
  %2 = load i32, i32* %num, align 8, !dbg !11513
  br label %cond.end, !dbg !11513

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11513

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !11513
  ret i32 %cond, !dbg !11513
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_pop(%struct.VEC_basic_block_base* %vec_) #0 !dbg !11514 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %obj_ = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !11517, metadata !DIExpression()), !dbg !11518
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_, metadata !11519, metadata !DIExpression()), !dbg !11518
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !11518
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %0, i32 0, i32 0, !dbg !11518
  %1 = load i32, i32* %num, align 8, !dbg !11518
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !11518
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 2, !dbg !11518
  %3 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !11518
  %num1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %3, i32 0, i32 0, !dbg !11518
  %4 = load i32, i32* %num1, align 8, !dbg !11518
  %dec = add i32 %4, -1, !dbg !11518
  store i32 %dec, i32* %num1, align 8, !dbg !11518
  %idxprom = zext i32 %dec to i64, !dbg !11518
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !11518
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !11518
  store %struct.basic_block_def* %5, %struct.basic_block_def** %obj_, align 8, !dbg !11518
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_, align 8, !dbg !11518
  ret %struct.basic_block_def* %6, !dbg !11518
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !11520 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !11523, metadata !DIExpression()), !dbg !11524
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !11525, metadata !DIExpression()), !dbg !11526
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !11527
  store i32 0, i32* %index, align 8, !dbg !11528
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !11529
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !11530
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !11531
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !11532
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !11532
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !11532
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !11533 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !11537, metadata !DIExpression()), !dbg !11538
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !11539, metadata !DIExpression()), !dbg !11540
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11541
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !11541
  %5 = load i32, i32* %4, align 8, !dbg !11541
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !11541
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !11541
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !11541
  %tobool = icmp ne i8 %call, 0, !dbg !11541
  br i1 %tobool, label %if.else, label %if.then, !dbg !11543

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11544
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !11544
  %10 = load i32, i32* %9, align 8, !dbg !11544
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !11544
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !11544
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !11544
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !11546
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !11547
  store i8 1, i8* %retval, align 1, !dbg !11548
  br label %return, !dbg !11548

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !11549
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !11551
  store i8 0, i8* %retval, align 1, !dbg !11552
  br label %return, !dbg !11552

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !11553
  ret i8 %15, !dbg !11553
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !11554 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !11558, metadata !DIExpression()), !dbg !11559
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !11560
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !11560
  %1 = load i32, i32* %index, align 8, !dbg !11560
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !11560
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !11560
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !11560
  %5 = load i32, i32* %4, align 8, !dbg !11560
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !11560
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !11560
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !11560
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !11560
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11560

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !11560
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !11560
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !11560
  %11 = load i32, i32* %10, align 8, !dbg !11560
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !11560
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !11560
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !11560
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !11560
  br label %cond.end, !dbg !11560

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11560

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11560
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !11560
  %cmp = icmp ult i32 %1, %call2, !dbg !11560
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !11560

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.48, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !11560
  br label %cond.end5, !dbg !11560

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !11560

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !11560
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !11561
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !11562
  %15 = load i32, i32* %index7, align 8, !dbg !11563
  %inc = add i32 %15, 1, !dbg !11563
  store i32 %inc, i32* %index7, align 8, !dbg !11563
  ret void, !dbg !11564
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %vec_) #0 !dbg !11565 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !11569, metadata !DIExpression()), !dbg !11570
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !11571
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !11571
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !11571
  br i1 %tobool, label %if.then, label %if.end, !dbg !11570

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !11571
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !11571
  %4 = bitcast %struct.VEC_basic_block_heap* %3 to i8*, !dbg !11571
  call void @free(i8* %4), !dbg !11571
  br label %if.end, !dbg !11571

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !11570
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %5, align 8, !dbg !11570
  ret void, !dbg !11570
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !11573 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !11576, metadata !DIExpression()), !dbg !11577
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !11578
  %3 = load i32, i32* %index, align 8, !dbg !11578
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !11579
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !11579
  %6 = load i32, i32* %5, align 8, !dbg !11579
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !11579
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !11579
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !11579
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !11579
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11579

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !11579
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !11579
  %11 = load i32, i32* %10, align 8, !dbg !11579
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !11579
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !11579
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !11579
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !11579
  br label %cond.end, !dbg !11579

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11579

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11579
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !11579
  %cmp = icmp eq i32 %3, %call2, !dbg !11580
  %conv = zext i1 %cmp to i32, !dbg !11580
  %conv3 = trunc i32 %conv to i8, !dbg !11581
  ret i8 %conv3, !dbg !11582
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !11583 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !11586, metadata !DIExpression()), !dbg !11587
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !11588
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !11588
  %5 = load i32, i32* %4, align 8, !dbg !11588
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !11588
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !11588
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !11588
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !11588
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11588

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !11588
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !11588
  %10 = load i32, i32* %9, align 8, !dbg !11588
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !11588
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !11588
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !11588
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !11588
  br label %cond.end, !dbg !11588

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11588

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11588
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !11588
  %13 = load i32, i32* %index, align 8, !dbg !11588
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !11588
  ret %struct.edge_def* %call2, !dbg !11589
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !11590 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !11593, metadata !DIExpression()), !dbg !11594
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !11595
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !11595
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !11595
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11595

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.48, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !11595
  br label %cond.end, !dbg !11595

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11595

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11595
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !11596
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !11596
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !11597
  ret %struct.VEC_edge_gc* %5, !dbg !11598
}

declare dso_local void @ao_ref_init(%struct.ao_ref_s*, %union.tree_node*) #2

declare dso_local i32 @walk_aliased_vdefs(%struct.ao_ref_s*, %union.tree_node*, i8 (%struct.ao_ref_s*, %union.tree_node*, i8*)*, i8*, %struct.bitmap_head_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @mark_maybe_modified(%struct.ao_ref_s* %ao, %union.tree_node* %vdef, i8* %data) #0 !dbg !11599 {
entry:
  %ao.addr = alloca %struct.ao_ref_s*, align 8
  %vdef.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca i8*, align 8
  %repr = alloca %struct.access*, align 8
  store %struct.ao_ref_s* %ao, %struct.ao_ref_s** %ao.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s** %ao.addr, metadata !11603, metadata !DIExpression()), !dbg !11604
  store %union.tree_node* %vdef, %union.tree_node** %vdef.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vdef.addr, metadata !11605, metadata !DIExpression()), !dbg !11606
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !11607, metadata !DIExpression()), !dbg !11608
  call void @llvm.dbg.declare(metadata %struct.access** %repr, metadata !11609, metadata !DIExpression()), !dbg !11610
  %0 = load i8*, i8** %data.addr, align 8, !dbg !11611
  %1 = bitcast i8* %0 to %struct.access*, !dbg !11612
  store %struct.access* %1, %struct.access** %repr, align 8, !dbg !11610
  %2 = load %struct.access*, %struct.access** %repr, align 8, !dbg !11613
  %grp_maybe_modified = getelementptr inbounds %struct.access, %struct.access* %2, i32 0, i32 14, !dbg !11614
  %bf.load = load i16, i16* %grp_maybe_modified, align 8, !dbg !11615
  %bf.clear = and i16 %bf.load, -2049, !dbg !11615
  %bf.set = or i16 %bf.clear, 2048, !dbg !11615
  store i16 %bf.set, i16* %grp_maybe_modified, align 8, !dbg !11615
  ret i8 1, !dbg !11616
}

declare dso_local zeroext i8 @optimize_function_for_size_p(%struct.function*) #2

declare dso_local %struct.VEC_tree_heap* @ipa_get_vector_of_formal_parms(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ipa_parm_adjustment_t_heap* @VEC_ipa_parm_adjustment_t_heap_alloc(i32 %alloc_) #0 !dbg !11617 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11620, metadata !DIExpression()), !dbg !11621
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11621
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 56), !dbg !11621
  %1 = bitcast i8* %call to %struct.VEC_ipa_parm_adjustment_t_heap*, !dbg !11621
  ret %struct.VEC_ipa_parm_adjustment_t_heap* %1, !dbg !11621
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_quick_push(%struct.VEC_ipa_parm_adjustment_t_base* %vec_, %struct.ipa_parm_adjustment* %obj_) #0 !dbg !11622 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_parm_adjustment_t_base*, align 8
  %obj_.addr = alloca %struct.ipa_parm_adjustment*, align 8
  %slot_ = alloca %struct.ipa_parm_adjustment*, align 8
  store %struct.VEC_ipa_parm_adjustment_t_base* %vec_, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, metadata !11629, metadata !DIExpression()), !dbg !11630
  store %struct.ipa_parm_adjustment* %obj_, %struct.ipa_parm_adjustment** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %obj_.addr, metadata !11631, metadata !DIExpression()), !dbg !11630
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %slot_, metadata !11632, metadata !DIExpression()), !dbg !11630
  %0 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !11630
  %num = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %0, i32 0, i32 0, !dbg !11630
  %1 = load i32, i32* %num, align 8, !dbg !11630
  %2 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !11630
  %alloc = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %2, i32 0, i32 1, !dbg !11630
  %3 = load i32, i32* %alloc, align 4, !dbg !11630
  %cmp = icmp ult i32 %1, %3, !dbg !11630
  %conv = zext i1 %cmp to i32, !dbg !11630
  %4 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !11630
  %vec = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %4, i32 0, i32 2, !dbg !11630
  %5 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !11630
  %num1 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %5, i32 0, i32 0, !dbg !11630
  %6 = load i32, i32* %num1, align 8, !dbg !11630
  %inc = add i32 %6, 1, !dbg !11630
  store i32 %inc, i32* %num1, align 8, !dbg !11630
  %idxprom = zext i32 %6 to i64, !dbg !11630
  %arrayidx = getelementptr inbounds [1 x %struct.ipa_parm_adjustment], [1 x %struct.ipa_parm_adjustment]* %vec, i64 0, i64 %idxprom, !dbg !11630
  store %struct.ipa_parm_adjustment* %arrayidx, %struct.ipa_parm_adjustment** %slot_, align 8, !dbg !11630
  %7 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %obj_.addr, align 8, !dbg !11633
  %tobool = icmp ne %struct.ipa_parm_adjustment* %7, null, !dbg !11633
  br i1 %tobool, label %if.then, label %if.end, !dbg !11630

if.then:                                          ; preds = %entry
  %8 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %slot_, align 8, !dbg !11633
  %9 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %obj_.addr, align 8, !dbg !11633
  %10 = bitcast %struct.ipa_parm_adjustment* %8 to i8*, !dbg !11633
  %11 = bitcast %struct.ipa_parm_adjustment* %9 to i8*, !dbg !11633
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 56, i1 false), !dbg !11633
  br label %if.end, !dbg !11633

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %slot_, align 8, !dbg !11630
  ret %struct.ipa_parm_adjustment* %12, !dbg !11630
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_param_index(%union.tree_node* %base, %struct.VEC_tree_heap* %parms) #0 !dbg !11635 {
entry:
  %retval = alloca i32, align 4
  %base.addr = alloca %union.tree_node*, align 8
  %parms.addr = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !11638, metadata !DIExpression()), !dbg !11639
  store %struct.VEC_tree_heap* %parms, %struct.VEC_tree_heap** %parms.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %parms.addr, metadata !11640, metadata !DIExpression()), !dbg !11641
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11642, metadata !DIExpression()), !dbg !11643
  call void @llvm.dbg.declare(metadata i32* %len, metadata !11644, metadata !DIExpression()), !dbg !11645
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parms.addr, align 8, !dbg !11646
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !11646
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11646

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parms.addr, align 8, !dbg !11646
  %base1 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !11646
  br label %cond.end, !dbg !11646

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11646

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base1, %cond.true ], [ null, %cond.false ], !dbg !11646
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !11646
  store i32 %call, i32* %len, align 4, !dbg !11647
  store i32 0, i32* %i, align 4, !dbg !11648
  br label %for.cond, !dbg !11650

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4, !dbg !11651
  %3 = load i32, i32* %len, align 4, !dbg !11653
  %cmp = icmp slt i32 %2, %3, !dbg !11654
  br i1 %cmp, label %for.body, label %for.end, !dbg !11655

for.body:                                         ; preds = %for.cond
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parms.addr, align 8, !dbg !11656
  %tobool2 = icmp ne %struct.VEC_tree_heap* %4, null, !dbg !11656
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !11656

cond.true3:                                       ; preds = %for.body
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parms.addr, align 8, !dbg !11656
  %base4 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %5, i32 0, i32 0, !dbg !11656
  br label %cond.end6, !dbg !11656

cond.false5:                                      ; preds = %for.body
  br label %cond.end6, !dbg !11656

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_tree_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !11656
  %6 = load i32, i32* %i, align 4, !dbg !11656
  %call8 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond7, i32 %6), !dbg !11656
  %7 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !11658
  %cmp9 = icmp eq %union.tree_node* %call8, %7, !dbg !11659
  br i1 %cmp9, label %if.then, label %if.end, !dbg !11660

if.then:                                          ; preds = %cond.end6
  %8 = load i32, i32* %i, align 4, !dbg !11661
  store i32 %8, i32* %retval, align 4, !dbg !11662
  br label %return, !dbg !11662

if.end:                                           ; preds = %cond.end6
  br label %for.inc, !dbg !11658

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !11663
  %inc = add nsw i32 %9, 1, !dbg !11663
  store i32 %inc, i32* %i, align 4, !dbg !11663
  br label %for.cond, !dbg !11664, !llvm.loop !11665

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 3552, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !11667
  store i32 0, i32* %retval, align 4, !dbg !11668
  br label %return, !dbg !11668

return:                                           ; preds = %for.end, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !11669
  ret i32 %10, !dbg !11669
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !11670 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !11674, metadata !DIExpression()), !dbg !11675
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !11676
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !11676
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !11676
  br i1 %tobool, label %if.then, label %if.end, !dbg !11675

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !11676
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !11676
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !11676
  call void @free(i8* %4), !dbg !11676
  br label %if.end, !dbg !11676

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !11675
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !11675
  ret void, !dbg !11675
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !11678 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !11683, metadata !DIExpression()), !dbg !11684
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !11684
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !11684
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11684

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !11684
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !11684
  %2 = load i32, i32* %num, align 8, !dbg !11684
  br label %cond.end, !dbg !11684

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11684

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !11684
  ret i32 %cond, !dbg !11684
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !11685 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !11688, metadata !DIExpression()), !dbg !11689
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !11690, metadata !DIExpression()), !dbg !11689
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !11689
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !11689
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !11689

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !11689
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !11689
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !11689
  %3 = load i32, i32* %num, align 8, !dbg !11689
  %cmp = icmp ult i32 %1, %3, !dbg !11689
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !11691
  %land.ext = zext i1 %4 to i32, !dbg !11689
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !11689
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !11689
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !11689
  %idxprom = zext i32 %6 to i64, !dbg !11689
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !11689
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11689
  ret %union.tree_node* %7, !dbg !11689
}

declare dso_local void @ipa_modify_formal_parameters(%union.tree_node*, %struct.VEC_ipa_parm_adjustment_t_heap*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @create_abstract_origin(%union.tree_node* %old_decl) #0 !dbg !11692 {
entry:
  %old_decl.addr = alloca %union.tree_node*, align 8
  %new_decl = alloca %union.tree_node*, align 8
  store %union.tree_node* %old_decl, %union.tree_node** %old_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_decl.addr, metadata !11693, metadata !DIExpression()), !dbg !11694
  %0 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !11695
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !11695
  %abstract_origin = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 7, !dbg !11695
  %1 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8, !dbg !11695
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !11695
  br i1 %tobool, label %if.end, label %if.then, !dbg !11697

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl, metadata !11698, metadata !DIExpression()), !dbg !11700
  %2 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !11701
  %call = call %union.tree_node* @copy_node_stat(%union.tree_node* %2), !dbg !11701
  store %union.tree_node* %call, %union.tree_node** %new_decl, align 8, !dbg !11700
  %3 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !11702
  %decl_common1 = bitcast %union.tree_node* %3 to %struct.tree_decl_common*, !dbg !11702
  %abstract_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common1, i32 0, i32 2, !dbg !11702
  %4 = bitcast i40* %abstract_flag to i64*, !dbg !11702
  %bf.load = load i64, i64* %4, align 8, !dbg !11703
  %bf.clear = and i64 %bf.load, -2049, !dbg !11703
  %bf.set = or i64 %bf.clear, 2048, !dbg !11703
  store i64 %bf.set, i64* %4, align 8, !dbg !11703
  %5 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !11704
  %decl_with_vis = bitcast %union.tree_node* %5 to %struct.tree_decl_with_vis*, !dbg !11704
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 1, !dbg !11704
  store %union.tree_node* null, %union.tree_node** %assembler_name, align 8, !dbg !11704
  %6 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !11705
  call void @set_decl_rtl(%union.tree_node* %6, %struct.rtx_def* null), !dbg !11705
  %7 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !11706
  %function_decl = bitcast %union.tree_node* %7 to %struct.tree_function_decl*, !dbg !11706
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !11706
  store %struct.function* null, %struct.function** %f, align 8, !dbg !11707
  %8 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !11708
  %decl_common2 = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !11708
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common2, i32 0, i32 2, !dbg !11708
  %9 = bitcast i40* %artificial_flag to i64*, !dbg !11708
  %bf.load3 = load i64, i64* %9, align 8, !dbg !11709
  %bf.clear4 = and i64 %bf.load3, -4097, !dbg !11709
  %bf.set5 = or i64 %bf.clear4, 4096, !dbg !11709
  store i64 %bf.set5, i64* %9, align 8, !dbg !11709
  %10 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !11710
  %11 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !11711
  %decl_common6 = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !11711
  %abstract_origin7 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common6, i32 0, i32 7, !dbg !11711
  store %union.tree_node* %10, %union.tree_node** %abstract_origin7, align 8, !dbg !11712
  br label %if.end, !dbg !11713

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !11714
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sra_ipa_modify_expr(%union.tree_node** %expr, %struct.gimple_stmt_iterator* %gsi, i8 zeroext %dont_convert, i8* %data) #0 !dbg !11715 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node**, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %dont_convert.addr = alloca i8, align 1
  %data.addr = alloca i8*, align 8
  %adjustments = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %adj = alloca %struct.ipa_parm_adjustment*, align 8
  %cand = alloca %struct.ipa_parm_adjustment*, align 8
  %offset = alloca i64, align 8
  %size = alloca i64, align 8
  %max_size = alloca i64, align 8
  %base = alloca %union.tree_node*, align 8
  %src = alloca %union.tree_node*, align 8
  %folded = alloca %union.tree_node*, align 8
  %vce = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr, %union.tree_node*** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr.addr, metadata !11716, metadata !DIExpression()), !dbg !11717
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !11718, metadata !DIExpression()), !dbg !11719
  store i8 %dont_convert, i8* %dont_convert.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %dont_convert.addr, metadata !11720, metadata !DIExpression()), !dbg !11721
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !11722, metadata !DIExpression()), !dbg !11723
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, metadata !11724, metadata !DIExpression()), !dbg !11725
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11726, metadata !DIExpression()), !dbg !11727
  call void @llvm.dbg.declare(metadata i32* %len, metadata !11728, metadata !DIExpression()), !dbg !11729
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %adj, metadata !11730, metadata !DIExpression()), !dbg !11731
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %cand, metadata !11732, metadata !DIExpression()), !dbg !11733
  store %struct.ipa_parm_adjustment* null, %struct.ipa_parm_adjustment** %cand, align 8, !dbg !11733
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !11734, metadata !DIExpression()), !dbg !11735
  call void @llvm.dbg.declare(metadata i64* %size, metadata !11736, metadata !DIExpression()), !dbg !11737
  call void @llvm.dbg.declare(metadata i64* %max_size, metadata !11738, metadata !DIExpression()), !dbg !11739
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !11740, metadata !DIExpression()), !dbg !11741
  call void @llvm.dbg.declare(metadata %union.tree_node** %src, metadata !11742, metadata !DIExpression()), !dbg !11743
  %0 = load i8*, i8** %data.addr, align 8, !dbg !11744
  %1 = bitcast i8* %0 to %struct.VEC_ipa_parm_adjustment_t_heap*, !dbg !11745
  store %struct.VEC_ipa_parm_adjustment_t_heap* %1, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !11746
  %2 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !11747
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %2, null, !dbg !11747
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11747

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !11747
  %base1 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %3, i32 0, i32 0, !dbg !11747
  br label %cond.end, !dbg !11747

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11747

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base1, %cond.true ], [ null, %cond.false ], !dbg !11747
  %call = call i32 @VEC_ipa_parm_adjustment_t_base_length(%struct.VEC_ipa_parm_adjustment_t_base* %cond), !dbg !11747
  store i32 %call, i32* %len, align 4, !dbg !11748
  %4 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !11749
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !11749
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !11749
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !11749
  %bf.load = load i64, i64* %6, align 8, !dbg !11749
  %bf.clear = and i64 %bf.load, 65535, !dbg !11749
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11749
  %cmp = icmp eq i32 %bf.cast, 42, !dbg !11751
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !11752

lor.lhs.false:                                    ; preds = %cond.end
  %7 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !11753
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !11753
  %base3 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !11753
  %9 = bitcast %struct.tree_base* %base3 to i64*, !dbg !11753
  %bf.load4 = load i64, i64* %9, align 8, !dbg !11753
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !11753
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !11753
  %cmp7 = icmp eq i32 %bf.cast6, 44, !dbg !11754
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !11755

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %10 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !11756
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !11756
  %base9 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !11756
  %12 = bitcast %struct.tree_base* %base9 to i64*, !dbg !11756
  %bf.load10 = load i64, i64* %12, align 8, !dbg !11756
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !11756
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !11756
  %cmp13 = icmp eq i32 %bf.cast12, 43, !dbg !11757
  br i1 %cmp13, label %if.then, label %if.end, !dbg !11758

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false, %cond.end
  %13 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !11759
  %14 = load %union.tree_node*, %union.tree_node** %13, align 8, !dbg !11759
  %exp = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !11759
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11759
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !11759
  store %union.tree_node** %arrayidx, %union.tree_node*** %expr.addr, align 8, !dbg !11761
  store i8 0, i8* %dont_convert.addr, align 1, !dbg !11762
  br label %if.end, !dbg !11763

if.end:                                           ; preds = %if.then, %lor.lhs.false8
  %15 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !11764
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !11765
  %call14 = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %16, i64* %offset, i64* %size, i64* %max_size), !dbg !11766
  store %union.tree_node* %call14, %union.tree_node** %base, align 8, !dbg !11767
  %17 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11768
  %tobool15 = icmp ne %union.tree_node* %17, null, !dbg !11768
  br i1 %tobool15, label %lor.lhs.false16, label %if.then20, !dbg !11770

lor.lhs.false16:                                  ; preds = %if.end
  %18 = load i64, i64* %size, align 8, !dbg !11771
  %cmp17 = icmp eq i64 %18, -1, !dbg !11772
  br i1 %cmp17, label %if.then20, label %lor.lhs.false18, !dbg !11773

lor.lhs.false18:                                  ; preds = %lor.lhs.false16
  %19 = load i64, i64* %max_size, align 8, !dbg !11774
  %cmp19 = icmp eq i64 %19, -1, !dbg !11775
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !11776

if.then20:                                        ; preds = %lor.lhs.false18, %lor.lhs.false16, %if.end
  store i8 0, i8* %retval, align 1, !dbg !11777
  br label %return, !dbg !11777

if.end21:                                         ; preds = %lor.lhs.false18
  %20 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11778
  %base22 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !11778
  %21 = bitcast %struct.tree_base* %base22 to i64*, !dbg !11778
  %bf.load23 = load i64, i64* %21, align 8, !dbg !11778
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !11778
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !11778
  %cmp26 = icmp eq i32 %bf.cast25, 47, !dbg !11778
  br i1 %cmp26, label %if.then39, label %lor.lhs.false27, !dbg !11778

lor.lhs.false27:                                  ; preds = %if.end21
  %22 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11778
  %base28 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !11778
  %23 = bitcast %struct.tree_base* %base28 to i64*, !dbg !11778
  %bf.load29 = load i64, i64* %23, align 8, !dbg !11778
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !11778
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !11778
  %cmp32 = icmp eq i32 %bf.cast31, 48, !dbg !11778
  br i1 %cmp32, label %if.then39, label %lor.lhs.false33, !dbg !11778

lor.lhs.false33:                                  ; preds = %lor.lhs.false27
  %24 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11778
  %base34 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !11778
  %25 = bitcast %struct.tree_base* %base34 to i64*, !dbg !11778
  %bf.load35 = load i64, i64* %25, align 8, !dbg !11778
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !11778
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !11778
  %cmp38 = icmp eq i32 %bf.cast37, 49, !dbg !11778
  br i1 %cmp38, label %if.then39, label %if.end43, !dbg !11780

if.then39:                                        ; preds = %lor.lhs.false33, %lor.lhs.false27, %if.end21
  %26 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11781
  %exp40 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !11781
  %operands41 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp40, i32 0, i32 3, !dbg !11781
  %arrayidx42 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands41, i64 0, i64 0, !dbg !11781
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx42, align 8, !dbg !11781
  store %union.tree_node* %27, %union.tree_node** %base, align 8, !dbg !11782
  br label %if.end43, !dbg !11783

if.end43:                                         ; preds = %if.then39, %lor.lhs.false33
  %28 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11784
  %call44 = call %union.tree_node* @get_ssa_base_param(%union.tree_node* %28), !dbg !11785
  store %union.tree_node* %call44, %union.tree_node** %base, align 8, !dbg !11786
  %29 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11787
  %tobool45 = icmp ne %union.tree_node* %29, null, !dbg !11787
  br i1 %tobool45, label %lor.lhs.false46, label %if.then52, !dbg !11789

lor.lhs.false46:                                  ; preds = %if.end43
  %30 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11790
  %base47 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !11790
  %31 = bitcast %struct.tree_base* %base47 to i64*, !dbg !11790
  %bf.load48 = load i64, i64* %31, align 8, !dbg !11790
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !11790
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !11790
  %cmp51 = icmp ne i32 %bf.cast50, 34, !dbg !11791
  br i1 %cmp51, label %if.then52, label %if.end53, !dbg !11792

if.then52:                                        ; preds = %lor.lhs.false46, %if.end43
  store i8 0, i8* %retval, align 1, !dbg !11793
  br label %return, !dbg !11793

if.end53:                                         ; preds = %lor.lhs.false46
  store i32 0, i32* %i, align 4, !dbg !11794
  br label %for.cond, !dbg !11796

for.cond:                                         ; preds = %for.inc, %if.end53
  %32 = load i32, i32* %i, align 4, !dbg !11797
  %33 = load i32, i32* %len, align 4, !dbg !11799
  %cmp54 = icmp slt i32 %32, %33, !dbg !11800
  br i1 %cmp54, label %for.body, label %for.end, !dbg !11801

for.body:                                         ; preds = %for.cond
  %34 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !11802
  %tobool55 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %34, null, !dbg !11802
  br i1 %tobool55, label %cond.true56, label %cond.false58, !dbg !11802

cond.true56:                                      ; preds = %for.body
  %35 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !11802
  %base57 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %35, i32 0, i32 0, !dbg !11802
  br label %cond.end59, !dbg !11802

cond.false58:                                     ; preds = %for.body
  br label %cond.end59, !dbg !11802

cond.end59:                                       ; preds = %cond.false58, %cond.true56
  %cond60 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base57, %cond.true56 ], [ null, %cond.false58 ], !dbg !11802
  %36 = load i32, i32* %i, align 4, !dbg !11802
  %call61 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond60, i32 %36), !dbg !11802
  store %struct.ipa_parm_adjustment* %call61, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !11804
  %37 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !11805
  %base62 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %37, i32 0, i32 0, !dbg !11807
  %38 = load %union.tree_node*, %union.tree_node** %base62, align 8, !dbg !11807
  %39 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11808
  %cmp63 = icmp eq %union.tree_node* %38, %39, !dbg !11809
  br i1 %cmp63, label %land.lhs.true, label %if.end72, !dbg !11810

land.lhs.true:                                    ; preds = %cond.end59
  %40 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !11811
  %offset64 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %40, i32 0, i32 5, !dbg !11812
  %41 = load i64, i64* %offset64, align 8, !dbg !11812
  %42 = load i64, i64* %offset, align 8, !dbg !11813
  %cmp65 = icmp eq i64 %41, %42, !dbg !11814
  br i1 %cmp65, label %if.then71, label %lor.lhs.false66, !dbg !11815

lor.lhs.false66:                                  ; preds = %land.lhs.true
  %43 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !11816
  %remove_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %43, i32 0, i32 7, !dbg !11817
  %bf.load67 = load i8, i8* %remove_param, align 4, !dbg !11817
  %bf.lshr = lshr i8 %bf.load67, 1, !dbg !11817
  %bf.clear68 = and i8 %bf.lshr, 1, !dbg !11817
  %bf.cast69 = zext i8 %bf.clear68 to i32, !dbg !11817
  %tobool70 = icmp ne i32 %bf.cast69, 0, !dbg !11816
  br i1 %tobool70, label %if.then71, label %if.end72, !dbg !11818

if.then71:                                        ; preds = %lor.lhs.false66, %land.lhs.true
  %44 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !11819
  store %struct.ipa_parm_adjustment* %44, %struct.ipa_parm_adjustment** %cand, align 8, !dbg !11821
  br label %for.end, !dbg !11822

if.end72:                                         ; preds = %lor.lhs.false66, %cond.end59
  br label %for.inc, !dbg !11823

for.inc:                                          ; preds = %if.end72
  %45 = load i32, i32* %i, align 4, !dbg !11824
  %inc = add nsw i32 %45, 1, !dbg !11824
  store i32 %inc, i32* %i, align 4, !dbg !11824
  br label %for.cond, !dbg !11825, !llvm.loop !11826

for.end:                                          ; preds = %if.then71, %for.cond
  %46 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %cand, align 8, !dbg !11828
  %tobool73 = icmp ne %struct.ipa_parm_adjustment* %46, null, !dbg !11828
  br i1 %tobool73, label %lor.lhs.false74, label %if.then86, !dbg !11830

lor.lhs.false74:                                  ; preds = %for.end
  %47 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %cand, align 8, !dbg !11831
  %copy_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %47, i32 0, i32 7, !dbg !11832
  %bf.load75 = load i8, i8* %copy_param, align 4, !dbg !11832
  %bf.clear76 = and i8 %bf.load75, 1, !dbg !11832
  %bf.cast77 = zext i8 %bf.clear76 to i32, !dbg !11832
  %tobool78 = icmp ne i32 %bf.cast77, 0, !dbg !11831
  br i1 %tobool78, label %if.then86, label %lor.lhs.false79, !dbg !11833

lor.lhs.false79:                                  ; preds = %lor.lhs.false74
  %48 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %cand, align 8, !dbg !11834
  %remove_param80 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %48, i32 0, i32 7, !dbg !11835
  %bf.load81 = load i8, i8* %remove_param80, align 4, !dbg !11835
  %bf.lshr82 = lshr i8 %bf.load81, 1, !dbg !11835
  %bf.clear83 = and i8 %bf.lshr82, 1, !dbg !11835
  %bf.cast84 = zext i8 %bf.clear83 to i32, !dbg !11835
  %tobool85 = icmp ne i32 %bf.cast84, 0, !dbg !11834
  br i1 %tobool85, label %if.then86, label %if.end87, !dbg !11836

if.then86:                                        ; preds = %lor.lhs.false79, %lor.lhs.false74, %for.end
  store i8 0, i8* %retval, align 1, !dbg !11837
  br label %return, !dbg !11837

if.end87:                                         ; preds = %lor.lhs.false79
  %49 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %cand, align 8, !dbg !11838
  %by_ref = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %49, i32 0, i32 7, !dbg !11840
  %bf.load88 = load i8, i8* %by_ref, align 4, !dbg !11840
  %bf.lshr89 = lshr i8 %bf.load88, 2, !dbg !11840
  %bf.clear90 = and i8 %bf.lshr89, 1, !dbg !11840
  %bf.cast91 = zext i8 %bf.clear90 to i32, !dbg !11840
  %tobool92 = icmp ne i32 %bf.cast91, 0, !dbg !11838
  br i1 %tobool92, label %if.then93, label %if.else, !dbg !11841

if.then93:                                        ; preds = %if.end87
  call void @llvm.dbg.declare(metadata %union.tree_node** %folded, metadata !11842, metadata !DIExpression()), !dbg !11844
  %50 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %cand, align 8, !dbg !11845
  %reduction = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %50, i32 0, i32 2, !dbg !11845
  %51 = load %union.tree_node*, %union.tree_node** %reduction, align 8, !dbg !11845
  %common = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !11845
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11845
  %52 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11845
  %common94 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !11845
  %type95 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common94, i32 0, i32 2, !dbg !11845
  %53 = load %union.tree_node*, %union.tree_node** %type95, align 8, !dbg !11845
  %54 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %cand, align 8, !dbg !11845
  %reduction96 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %54, i32 0, i32 2, !dbg !11845
  %55 = load %union.tree_node*, %union.tree_node** %reduction96, align 8, !dbg !11845
  %call97 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %53, %union.tree_node* %55), !dbg !11845
  store %union.tree_node* %call97, %union.tree_node** %src, align 8, !dbg !11846
  %56 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !11847
  %call98 = call %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node* %56), !dbg !11848
  store %union.tree_node* %call98, %union.tree_node** %folded, align 8, !dbg !11849
  %57 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !11850
  %tobool99 = icmp ne %union.tree_node* %57, null, !dbg !11850
  br i1 %tobool99, label %if.then100, label %if.end101, !dbg !11852

if.then100:                                       ; preds = %if.then93
  %58 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !11853
  store %union.tree_node* %58, %union.tree_node** %src, align 8, !dbg !11854
  br label %if.end101, !dbg !11855

if.end101:                                        ; preds = %if.then100, %if.then93
  br label %if.end103, !dbg !11856

if.else:                                          ; preds = %if.end87
  %59 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %cand, align 8, !dbg !11857
  %reduction102 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %59, i32 0, i32 2, !dbg !11858
  %60 = load %union.tree_node*, %union.tree_node** %reduction102, align 8, !dbg !11858
  store %union.tree_node* %60, %union.tree_node** %src, align 8, !dbg !11859
  br label %if.end103

if.end103:                                        ; preds = %if.else, %if.end101
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11860
  %tobool104 = icmp ne %struct._IO_FILE* %61, null, !dbg !11860
  br i1 %tobool104, label %land.lhs.true105, label %if.end111, !dbg !11862

land.lhs.true105:                                 ; preds = %if.end103
  %62 = load i32, i32* @dump_flags, align 4, !dbg !11863
  %and = and i32 %62, 8, !dbg !11864
  %tobool106 = icmp ne i32 %and, 0, !dbg !11864
  br i1 %tobool106, label %if.then107, label %if.end111, !dbg !11865

if.then107:                                       ; preds = %land.lhs.true105
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11866
  %call108 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.70, i64 0, i64 0)), !dbg !11868
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11869
  %65 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !11870
  %66 = load %union.tree_node*, %union.tree_node** %65, align 8, !dbg !11871
  call void @print_generic_expr(%struct._IO_FILE* %64, %union.tree_node* %66, i32 0), !dbg !11872
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11873
  %call109 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i64 0, i64 0)), !dbg !11874
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11875
  %69 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !11876
  call void @print_generic_expr(%struct._IO_FILE* %68, %union.tree_node* %69, i32 0), !dbg !11877
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11878
  %call110 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !11879
  br label %if.end111, !dbg !11880

if.end111:                                        ; preds = %if.then107, %land.lhs.true105, %if.end103
  %71 = load i8, i8* %dont_convert.addr, align 1, !dbg !11881
  %tobool112 = icmp ne i8 %71, 0, !dbg !11881
  br i1 %tobool112, label %if.else123, label %land.lhs.true113, !dbg !11883

land.lhs.true113:                                 ; preds = %if.end111
  %72 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !11884
  %73 = load %union.tree_node*, %union.tree_node** %72, align 8, !dbg !11884
  %common114 = bitcast %union.tree_node* %73 to %struct.tree_common*, !dbg !11884
  %type115 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common114, i32 0, i32 2, !dbg !11884
  %74 = load %union.tree_node*, %union.tree_node** %type115, align 8, !dbg !11884
  %75 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %cand, align 8, !dbg !11885
  %type116 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %75, i32 0, i32 1, !dbg !11886
  %76 = load %union.tree_node*, %union.tree_node** %type116, align 8, !dbg !11886
  %call117 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %74, %union.tree_node* %76), !dbg !11887
  %tobool118 = icmp ne i8 %call117, 0, !dbg !11887
  br i1 %tobool118, label %if.else123, label %if.then119, !dbg !11888

if.then119:                                       ; preds = %land.lhs.true113
  call void @llvm.dbg.declare(metadata %union.tree_node** %vce, metadata !11889, metadata !DIExpression()), !dbg !11891
  %77 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !11892
  %78 = load %union.tree_node*, %union.tree_node** %77, align 8, !dbg !11892
  %common120 = bitcast %union.tree_node* %78 to %struct.tree_common*, !dbg !11892
  %type121 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common120, i32 0, i32 2, !dbg !11892
  %79 = load %union.tree_node*, %union.tree_node** %type121, align 8, !dbg !11892
  %80 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !11892
  %call122 = call %union.tree_node* @build1_stat(i32 118, %union.tree_node* %79, %union.tree_node* %80), !dbg !11892
  store %union.tree_node* %call122, %union.tree_node** %vce, align 8, !dbg !11891
  %81 = load %union.tree_node*, %union.tree_node** %vce, align 8, !dbg !11893
  %82 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !11894
  store %union.tree_node* %81, %union.tree_node** %82, align 8, !dbg !11895
  br label %if.end124, !dbg !11896

if.else123:                                       ; preds = %land.lhs.true113, %if.end111
  %83 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !11897
  %84 = load %union.tree_node**, %union.tree_node*** %expr.addr, align 8, !dbg !11898
  store %union.tree_node* %83, %union.tree_node** %84, align 8, !dbg !11899
  br label %if.end124

if.end124:                                        ; preds = %if.else123, %if.then119
  store i8 1, i8* %retval, align 1, !dbg !11900
  br label %return, !dbg !11900

return:                                           ; preds = %if.end124, %if.then86, %if.then52, %if.then20
  %85 = load i8, i8* %retval, align 1, !dbg !11901
  ret i8 %85, !dbg !11901
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sra_ipa_modify_assign(%union.gimple_statement_d** %stmt_ptr, %struct.gimple_stmt_iterator* %gsi, i8* %data) #0 !dbg !11902 {
entry:
  %retval = alloca i32, align 4
  %stmt_ptr.addr = alloca %union.gimple_statement_d**, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %data.addr = alloca i8*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %lhs_p = alloca %union.tree_node**, align 8
  %rhs_p = alloca %union.tree_node**, align 8
  %any = alloca i8, align 1
  %new_rhs = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d** %stmt_ptr, %union.gimple_statement_d*** %stmt_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmt_ptr.addr, metadata !11903, metadata !DIExpression()), !dbg !11904
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !11905, metadata !DIExpression()), !dbg !11906
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !11907, metadata !DIExpression()), !dbg !11908
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !11909, metadata !DIExpression()), !dbg !11910
  %0 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt_ptr.addr, align 8, !dbg !11911
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %0, align 8, !dbg !11912
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !11910
  call void @llvm.dbg.declare(metadata %union.tree_node*** %lhs_p, metadata !11913, metadata !DIExpression()), !dbg !11914
  call void @llvm.dbg.declare(metadata %union.tree_node*** %rhs_p, metadata !11915, metadata !DIExpression()), !dbg !11916
  call void @llvm.dbg.declare(metadata i8* %any, metadata !11917, metadata !DIExpression()), !dbg !11918
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11919
  %call = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %2), !dbg !11921
  %tobool = icmp ne i8 %call, 0, !dbg !11921
  br i1 %tobool, label %if.end, label %if.then, !dbg !11922

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !11923
  br label %return, !dbg !11923

if.end:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11924
  %call1 = call %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %3), !dbg !11925
  store %union.tree_node** %call1, %union.tree_node*** %rhs_p, align 8, !dbg !11926
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11927
  %call2 = call %union.tree_node** @gimple_assign_lhs_ptr(%union.gimple_statement_d* %4), !dbg !11928
  store %union.tree_node** %call2, %union.tree_node*** %lhs_p, align 8, !dbg !11929
  %5 = load %union.tree_node**, %union.tree_node*** %rhs_p, align 8, !dbg !11930
  %6 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !11931
  %7 = load i8*, i8** %data.addr, align 8, !dbg !11932
  %call3 = call zeroext i8 @sra_ipa_modify_expr(%union.tree_node** %5, %struct.gimple_stmt_iterator* %6, i8 zeroext 1, i8* %7), !dbg !11933
  store i8 %call3, i8* %any, align 1, !dbg !11934
  %8 = load %union.tree_node**, %union.tree_node*** %lhs_p, align 8, !dbg !11935
  %9 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !11936
  %10 = load i8*, i8** %data.addr, align 8, !dbg !11937
  %call4 = call zeroext i8 @sra_ipa_modify_expr(%union.tree_node** %8, %struct.gimple_stmt_iterator* %9, i8 zeroext 1, i8* %10), !dbg !11938
  %conv = zext i8 %call4 to i32, !dbg !11938
  %11 = load i8, i8* %any, align 1, !dbg !11939
  %conv5 = zext i8 %11 to i32, !dbg !11939
  %or = or i32 %conv5, %conv, !dbg !11939
  %conv6 = trunc i32 %or to i8, !dbg !11939
  store i8 %conv6, i8* %any, align 1, !dbg !11939
  %12 = load i8, i8* %any, align 1, !dbg !11940
  %tobool7 = icmp ne i8 %12, 0, !dbg !11940
  br i1 %tobool7, label %if.then8, label %if.end56, !dbg !11942

if.then8:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_rhs, metadata !11943, metadata !DIExpression()), !dbg !11945
  store %union.tree_node* null, %union.tree_node** %new_rhs, align 8, !dbg !11945
  %13 = load %union.tree_node**, %union.tree_node*** %lhs_p, align 8, !dbg !11946
  %14 = load %union.tree_node*, %union.tree_node** %13, align 8, !dbg !11946
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !11946
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11946
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11946
  %16 = load %union.tree_node**, %union.tree_node*** %rhs_p, align 8, !dbg !11948
  %17 = load %union.tree_node*, %union.tree_node** %16, align 8, !dbg !11948
  %common9 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !11948
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !11948
  %18 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !11948
  %call11 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %15, %union.tree_node* %18), !dbg !11949
  %tobool12 = icmp ne i8 %call11, 0, !dbg !11949
  br i1 %tobool12, label %if.else34, label %if.then13, !dbg !11950

if.then13:                                        ; preds = %if.then8
  %19 = load %union.tree_node**, %union.tree_node*** %rhs_p, align 8, !dbg !11951
  %20 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !11951
  %base = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !11951
  %21 = bitcast %struct.tree_base* %base to i64*, !dbg !11951
  %bf.load = load i64, i64* %21, align 8, !dbg !11951
  %bf.clear = and i64 %bf.load, 65535, !dbg !11951
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11951
  %cmp = icmp eq i32 %bf.cast, 51, !dbg !11954
  br i1 %cmp, label %if.then15, label %if.else28, !dbg !11955

if.then15:                                        ; preds = %if.then13
  %22 = load %union.tree_node**, %union.tree_node*** %lhs_p, align 8, !dbg !11956
  %23 = load %union.tree_node*, %union.tree_node** %22, align 8, !dbg !11956
  %common16 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !11956
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !11956
  %24 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !11956
  %call18 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %24), !dbg !11959
  %tobool19 = icmp ne i8 %call18, 0, !dbg !11959
  br i1 %tobool19, label %if.then20, label %if.else, !dbg !11960

if.then20:                                        ; preds = %if.then15
  %25 = load %union.tree_node**, %union.tree_node*** %lhs_p, align 8, !dbg !11961
  %26 = load %union.tree_node*, %union.tree_node** %25, align 8, !dbg !11961
  %common21 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !11961
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !11961
  %27 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !11961
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !11961
  %call23 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %27, %union.tree_node* %28), !dbg !11961
  %29 = load %union.tree_node**, %union.tree_node*** %rhs_p, align 8, !dbg !11962
  store %union.tree_node* %call23, %union.tree_node** %29, align 8, !dbg !11963
  br label %if.end27, !dbg !11964

if.else:                                          ; preds = %if.then15
  %30 = load %union.tree_node**, %union.tree_node*** %lhs_p, align 8, !dbg !11965
  %31 = load %union.tree_node*, %union.tree_node** %30, align 8, !dbg !11965
  %common24 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !11965
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !11965
  %32 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !11965
  %call26 = call %union.tree_node* @build_constructor(%union.tree_node* %32, %struct.VEC_constructor_elt_gc* null), !dbg !11966
  %33 = load %union.tree_node**, %union.tree_node*** %rhs_p, align 8, !dbg !11967
  store %union.tree_node* %call26, %union.tree_node** %33, align 8, !dbg !11968
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then20
  br label %if.end33, !dbg !11969

if.else28:                                        ; preds = %if.then13
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11970
  %call29 = call i32 @gimple_location(%union.gimple_statement_d* %34), !dbg !11970
  %35 = load %union.tree_node**, %union.tree_node*** %lhs_p, align 8, !dbg !11970
  %36 = load %union.tree_node*, %union.tree_node** %35, align 8, !dbg !11970
  %common30 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !11970
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !11970
  %37 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !11970
  %38 = load %union.tree_node**, %union.tree_node*** %rhs_p, align 8, !dbg !11970
  %39 = load %union.tree_node*, %union.tree_node** %38, align 8, !dbg !11970
  %call32 = call %union.tree_node* @fold_build1_stat_loc(i32 %call29, i32 118, %union.tree_node* %37, %union.tree_node* %39), !dbg !11970
  store %union.tree_node* %call32, %union.tree_node** %new_rhs, align 8, !dbg !11971
  br label %if.end33

if.end33:                                         ; preds = %if.else28, %if.end27
  br label %if.end51, !dbg !11972

if.else34:                                        ; preds = %if.then8
  %40 = load %union.tree_node**, %union.tree_node*** %rhs_p, align 8, !dbg !11973
  %41 = load %union.tree_node*, %union.tree_node** %40, align 8, !dbg !11973
  %base35 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !11973
  %42 = bitcast %struct.tree_base* %base35 to i64*, !dbg !11973
  %bf.load36 = load i64, i64* %42, align 8, !dbg !11973
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !11973
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !11973
  %idxprom = sext i32 %bf.cast38 to i64, !dbg !11973
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !11973
  %43 = load i32, i32* %arrayidx, align 4, !dbg !11973
  %cmp39 = icmp eq i32 %43, 4, !dbg !11973
  br i1 %cmp39, label %land.lhs.true, label %if.end50, !dbg !11975

land.lhs.true:                                    ; preds = %if.else34
  %44 = load %union.tree_node**, %union.tree_node*** %lhs_p, align 8, !dbg !11976
  %45 = load %union.tree_node*, %union.tree_node** %44, align 8, !dbg !11976
  %common41 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !11976
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !11976
  %46 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !11976
  %call43 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %46), !dbg !11977
  %conv44 = zext i8 %call43 to i32, !dbg !11977
  %tobool45 = icmp ne i32 %conv44, 0, !dbg !11977
  br i1 %tobool45, label %land.lhs.true46, label %if.end50, !dbg !11978

land.lhs.true46:                                  ; preds = %land.lhs.true
  %47 = load %union.tree_node**, %union.tree_node*** %lhs_p, align 8, !dbg !11979
  %48 = load %union.tree_node*, %union.tree_node** %47, align 8, !dbg !11980
  %call47 = call zeroext i8 @is_gimple_reg(%union.tree_node* %48), !dbg !11981
  %tobool48 = icmp ne i8 %call47, 0, !dbg !11981
  br i1 %tobool48, label %if.end50, label %if.then49, !dbg !11982

if.then49:                                        ; preds = %land.lhs.true46
  %49 = load %union.tree_node**, %union.tree_node*** %rhs_p, align 8, !dbg !11983
  %50 = load %union.tree_node*, %union.tree_node** %49, align 8, !dbg !11984
  store %union.tree_node* %50, %union.tree_node** %new_rhs, align 8, !dbg !11985
  br label %if.end50, !dbg !11986

if.end50:                                         ; preds = %if.then49, %land.lhs.true46, %land.lhs.true, %if.else34
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.end33
  %51 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !11987
  %tobool52 = icmp ne %union.tree_node* %51, null, !dbg !11987
  br i1 %tobool52, label %if.then53, label %if.end55, !dbg !11989

if.then53:                                        ; preds = %if.end51
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !11990, metadata !DIExpression()), !dbg !11992
  %52 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !11993
  %53 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !11994
  %call54 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %52, %union.tree_node* %53, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !11995
  store %union.tree_node* %call54, %union.tree_node** %tmp, align 8, !dbg !11992
  %54 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !11996
  %55 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !11997
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %54, %union.tree_node* %55), !dbg !11998
  br label %if.end55, !dbg !11999

if.end55:                                         ; preds = %if.then53, %if.end51
  store i32 1, i32* %retval, align 4, !dbg !12000
  br label %return, !dbg !12000

if.end56:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !12001
  br label %return, !dbg !12001

return:                                           ; preds = %if.end56, %if.end55, %if.then
  %56 = load i32, i32* %retval, align 4, !dbg !12002
  ret i32 %56, !dbg !12002
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @replace_removed_params_ssa_names(%union.gimple_statement_d* %stmt, i8* %data) #0 !dbg !12003 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %data.addr = alloca i8*, align 8
  %adjustments = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %adj = alloca %struct.ipa_parm_adjustment*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %repl = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !12004, metadata !DIExpression()), !dbg !12005
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !12006, metadata !DIExpression()), !dbg !12007
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, metadata !12008, metadata !DIExpression()), !dbg !12009
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %adj, metadata !12010, metadata !DIExpression()), !dbg !12011
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !12012, metadata !DIExpression()), !dbg !12013
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !12014, metadata !DIExpression()), !dbg !12015
  call void @llvm.dbg.declare(metadata %union.tree_node** %repl, metadata !12016, metadata !DIExpression()), !dbg !12017
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !12018, metadata !DIExpression()), !dbg !12019
  %0 = load i8*, i8** %data.addr, align 8, !dbg !12020
  %1 = bitcast i8* %0 to %struct.VEC_ipa_parm_adjustment_t_heap*, !dbg !12021
  store %struct.VEC_ipa_parm_adjustment_t_heap* %1, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !12022
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12023
  %call = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !12025
  %cmp = icmp eq i32 %call, 16, !dbg !12026
  br i1 %cmp, label %if.then, label %if.else, !dbg !12027

if.then:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12028
  %call1 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %3), !dbg !12029
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !12030
  br label %if.end12, !dbg !12031

if.else:                                          ; preds = %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12032
  %call2 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %4), !dbg !12034
  %tobool = icmp ne i8 %call2, 0, !dbg !12034
  br i1 %tobool, label %if.then3, label %if.else5, !dbg !12035

if.then3:                                         ; preds = %if.else
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12036
  %call4 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %5), !dbg !12037
  store %union.tree_node* %call4, %union.tree_node** %lhs, align 8, !dbg !12038
  br label %if.end11, !dbg !12039

if.else5:                                         ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12040
  %call6 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %6), !dbg !12042
  %tobool7 = icmp ne i8 %call6, 0, !dbg !12042
  br i1 %tobool7, label %if.then8, label %if.else10, !dbg !12043

if.then8:                                         ; preds = %if.else5
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12044
  %call9 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %7), !dbg !12045
  store %union.tree_node* %call9, %union.tree_node** %lhs, align 8, !dbg !12046
  br label %if.end, !dbg !12047

if.else10:                                        ; preds = %if.else5
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 3773, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !12048
  br label %if.end

if.end:                                           ; preds = %if.else10, %if.then8
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.then3
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !12049
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !12049
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !12049
  %bf.load = load i64, i64* %9, align 8, !dbg !12049
  %bf.clear = and i64 %bf.load, 65535, !dbg !12049
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12049
  %cmp13 = icmp ne i32 %bf.cast, 141, !dbg !12051
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !12052

if.then14:                                        ; preds = %if.end12
  store i8 0, i8* %retval, align 1, !dbg !12053
  br label %return, !dbg !12053

if.end15:                                         ; preds = %if.end12
  %10 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !12054
  %ssa_name = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !12054
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !12054
  %11 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !12054
  store %union.tree_node* %11, %union.tree_node** %decl, align 8, !dbg !12055
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !12056
  %base16 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !12056
  %13 = bitcast %struct.tree_base* %base16 to i64*, !dbg !12056
  %bf.load17 = load i64, i64* %13, align 8, !dbg !12056
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !12056
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !12056
  %cmp20 = icmp ne i32 %bf.cast19, 34, !dbg !12058
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !12059

if.then21:                                        ; preds = %if.end15
  store i8 0, i8* %retval, align 1, !dbg !12060
  br label %return, !dbg !12060

if.end22:                                         ; preds = %if.end15
  %14 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !12061
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !12062
  %call23 = call %struct.ipa_parm_adjustment* @get_adjustment_for_base(%struct.VEC_ipa_parm_adjustment_t_heap* %14, %union.tree_node* %15), !dbg !12063
  store %struct.ipa_parm_adjustment* %call23, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !12064
  %16 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !12065
  %tobool24 = icmp ne %struct.ipa_parm_adjustment* %16, null, !dbg !12065
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !12067

if.then25:                                        ; preds = %if.end22
  store i8 0, i8* %retval, align 1, !dbg !12068
  br label %return, !dbg !12068

if.end26:                                         ; preds = %if.end22
  %17 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !12069
  %call27 = call %union.tree_node* @get_replaced_param_substitute(%struct.ipa_parm_adjustment* %17), !dbg !12070
  store %union.tree_node* %call27, %union.tree_node** %repl, align 8, !dbg !12071
  %18 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !12072
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12073
  %call28 = call %union.tree_node* @make_ssa_name(%union.tree_node* %18, %union.gimple_statement_d* %19), !dbg !12074
  store %union.tree_node* %call28, %union.tree_node** %name, align 8, !dbg !12075
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12076
  %tobool29 = icmp ne %struct._IO_FILE* %20, null, !dbg !12076
  br i1 %tobool29, label %if.then30, label %if.end34, !dbg !12078

if.then30:                                        ; preds = %if.end26
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12079
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.72, i64 0, i64 0)), !dbg !12081
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12082
  %23 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !12083
  call void @print_generic_expr(%struct._IO_FILE* %22, %union.tree_node* %23, i32 0), !dbg !12084
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12085
  %call32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i64 0, i64 0)), !dbg !12086
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12087
  %26 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12088
  call void @print_generic_expr(%struct._IO_FILE* %25, %union.tree_node* %26, i32 0), !dbg !12089
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12090
  %call33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !12091
  br label %if.end34, !dbg !12092

if.end34:                                         ; preds = %if.then30, %if.end26
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12093
  %call35 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %28), !dbg !12095
  %tobool36 = icmp ne i8 %call35, 0, !dbg !12095
  br i1 %tobool36, label %if.then37, label %if.else38, !dbg !12096

if.then37:                                        ; preds = %if.end34
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12097
  %30 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12098
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %29, %union.tree_node* %30), !dbg !12099
  br label %if.end44, !dbg !12099

if.else38:                                        ; preds = %if.end34
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12100
  %call39 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %31), !dbg !12102
  %tobool40 = icmp ne i8 %call39, 0, !dbg !12102
  br i1 %tobool40, label %if.then41, label %if.else42, !dbg !12103

if.then41:                                        ; preds = %if.else38
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12104
  %33 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12105
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %32, %union.tree_node* %33), !dbg !12106
  br label %if.end43, !dbg !12106

if.else42:                                        ; preds = %if.else38
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12107
  %35 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12108
  call void @gimple_phi_set_result(%union.gimple_statement_d* %34, %union.tree_node* %35), !dbg !12109
  br label %if.end43

if.end43:                                         ; preds = %if.else42, %if.then41
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then37
  %36 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !12110
  %37 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12111
  call void @replace_uses_by(%union.tree_node* %36, %union.tree_node* %37), !dbg !12112
  store i8 1, i8* %retval, align 1, !dbg !12113
  br label %return, !dbg !12113

return:                                           ; preds = %if.end44, %if.then25, %if.then21, %if.then14
  %38 = load i8, i8* %retval, align 1, !dbg !12114
  ret i8 %38, !dbg !12114
}

; Function Attrs: noinline nounwind uwtable
define internal void @sra_ipa_reset_debug_stmts(%struct.VEC_ipa_parm_adjustment_t_heap* %adjustments) #0 !dbg !12115 {
entry:
  %adjustments.addr = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %adj = alloca %struct.ipa_parm_adjustment*, align 8
  %ui = alloca %struct.immediate_use_iterator_d, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %name = alloca %union.tree_node*, align 8
  store %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, metadata !12118, metadata !DIExpression()), !dbg !12119
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12120, metadata !DIExpression()), !dbg !12121
  call void @llvm.dbg.declare(metadata i32* %len, metadata !12122, metadata !DIExpression()), !dbg !12123
  %0 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !12124
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %0, null, !dbg !12124
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12124

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !12124
  %base = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %1, i32 0, i32 0, !dbg !12124
  br label %cond.end, !dbg !12124

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12124

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12124
  %call = call i32 @VEC_ipa_parm_adjustment_t_base_length(%struct.VEC_ipa_parm_adjustment_t_base* %cond), !dbg !12124
  store i32 %call, i32* %len, align 4, !dbg !12125
  store i32 0, i32* %i, align 4, !dbg !12126
  br label %for.cond, !dbg !12128

for.cond:                                         ; preds = %for.inc29, %cond.end
  %2 = load i32, i32* %i, align 4, !dbg !12129
  %3 = load i32, i32* %len, align 4, !dbg !12131
  %cmp = icmp slt i32 %2, %3, !dbg !12132
  br i1 %cmp, label %for.body, label %for.end30, !dbg !12133

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %adj, metadata !12134, metadata !DIExpression()), !dbg !12136
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %ui, metadata !12137, metadata !DIExpression()), !dbg !12138
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !12139, metadata !DIExpression()), !dbg !12140
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !12141, metadata !DIExpression()), !dbg !12142
  %4 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !12143
  %tobool1 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %4, null, !dbg !12143
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !12143

cond.true2:                                       ; preds = %for.body
  %5 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !12143
  %base3 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %5, i32 0, i32 0, !dbg !12143
  br label %cond.end5, !dbg !12143

cond.false4:                                      ; preds = %for.body
  br label %cond.end5, !dbg !12143

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !12143
  %6 = load i32, i32* %i, align 4, !dbg !12143
  %call7 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond6, i32 %6), !dbg !12143
  store %struct.ipa_parm_adjustment* %call7, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !12144
  %7 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !12145
  %copy_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %7, i32 0, i32 7, !dbg !12147
  %bf.load = load i8, i8* %copy_param, align 4, !dbg !12147
  %bf.clear = and i8 %bf.load, 1, !dbg !12147
  %bf.cast = zext i8 %bf.clear to i32, !dbg !12147
  %tobool8 = icmp ne i32 %bf.cast, 0, !dbg !12145
  br i1 %tobool8, label %if.then, label %lor.lhs.false, !dbg !12148

lor.lhs.false:                                    ; preds = %cond.end5
  %8 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !12149
  %base9 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %8, i32 0, i32 0, !dbg !12150
  %9 = load %union.tree_node*, %union.tree_node** %base9, align 8, !dbg !12150
  %call10 = call zeroext i8 @is_gimple_reg(%union.tree_node* %9), !dbg !12151
  %tobool11 = icmp ne i8 %call10, 0, !dbg !12151
  br i1 %tobool11, label %if.end, label %if.then, !dbg !12152

if.then:                                          ; preds = %lor.lhs.false, %cond.end5
  br label %for.inc29, !dbg !12153

if.end:                                           ; preds = %lor.lhs.false
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12154
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !12154
  %11 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !12155
  %base12 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %11, i32 0, i32 0, !dbg !12156
  %12 = load %union.tree_node*, %union.tree_node** %base12, align 8, !dbg !12156
  %call13 = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr, %union.tree_node* %12), !dbg !12157
  store %union.tree_node* %call13, %union.tree_node** %name, align 8, !dbg !12158
  %13 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12159
  %tobool14 = icmp ne %union.tree_node* %13, null, !dbg !12159
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !12161

if.then15:                                        ; preds = %if.end
  br label %for.inc29, !dbg !12162

if.end16:                                         ; preds = %if.end
  %14 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12163
  %call17 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %ui, %union.tree_node* %14), !dbg !12163
  store %union.gimple_statement_d* %call17, %union.gimple_statement_d** %stmt, align 8, !dbg !12163
  br label %for.cond18, !dbg !12163

for.cond18:                                       ; preds = %for.inc, %if.end16
  %call19 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %ui), !dbg !12165
  %tobool20 = icmp ne i8 %call19, 0, !dbg !12165
  %lnot = xor i1 %tobool20, true, !dbg !12165
  br i1 %lnot, label %for.body21, label %for.end, !dbg !12163

for.body21:                                       ; preds = %for.cond18
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12167
  %call22 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %15), !dbg !12167
  %tobool23 = icmp ne i8 %call22, 0, !dbg !12167
  br i1 %tobool23, label %cond.false25, label %cond.true24, !dbg !12167

cond.true24:                                      ; preds = %for.body21
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 3980, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !12167
  br label %cond.end26, !dbg !12167

cond.false25:                                     ; preds = %for.body21
  br label %cond.end26, !dbg !12167

cond.end26:                                       ; preds = %cond.false25, %cond.true24
  %cond27 = phi i32 [ 0, %cond.true24 ], [ 0, %cond.false25 ], !dbg !12167
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12169
  call void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %16), !dbg !12170
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12171
  call void @update_stmt(%union.gimple_statement_d* %17), !dbg !12172
  br label %for.inc, !dbg !12173

for.inc:                                          ; preds = %cond.end26
  %call28 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %ui), !dbg !12165
  store %union.gimple_statement_d* %call28, %union.gimple_statement_d** %stmt, align 8, !dbg !12165
  br label %for.cond18, !dbg !12165, !llvm.loop !12174

for.end:                                          ; preds = %for.cond18
  br label %for.inc29, !dbg !12176

for.inc29:                                        ; preds = %for.end, %if.then15, %if.then
  %18 = load i32, i32* %i, align 4, !dbg !12177
  %inc = add nsw i32 %18, 1, !dbg !12177
  store i32 %inc, i32* %i, align 4, !dbg !12177
  br label %for.cond, !dbg !12178, !llvm.loop !12179

for.end30:                                        ; preds = %for.cond
  ret void, !dbg !12181
}

; Function Attrs: noinline nounwind uwtable
define internal void @convert_callers(%struct.cgraph_node* %node, %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments) #0 !dbg !12182 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %adjustments.addr = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %old_cur_fndecl = alloca %union.tree_node*, align 8
  %cs = alloca %struct.cgraph_edge*, align 8
  %this_block = alloca %struct.basic_block_def*, align 8
  %recomputed_callers = alloca %struct.bitmap_head_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %call_fndecl = alloca %union.tree_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !12183, metadata !DIExpression()), !dbg !12184
  store %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, metadata !12185, metadata !DIExpression()), !dbg !12186
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_cur_fndecl, metadata !12187, metadata !DIExpression()), !dbg !12188
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !12189
  store %union.tree_node* %0, %union.tree_node** %old_cur_fndecl, align 8, !dbg !12188
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs, metadata !12190, metadata !DIExpression()), !dbg !12191
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %this_block, metadata !12192, metadata !DIExpression()), !dbg !12193
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %recomputed_callers, metadata !12194, metadata !DIExpression()), !dbg !12195
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !12196
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %recomputed_callers, align 8, !dbg !12195
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !12197
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 2, !dbg !12199
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !12199
  store %struct.cgraph_edge* %2, %struct.cgraph_edge** %cs, align 8, !dbg !12200
  br label %for.cond, !dbg !12201

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12202
  %tobool = icmp ne %struct.cgraph_edge* %3, null, !dbg !12204
  br i1 %tobool, label %for.body, label %for.end, !dbg !12204

for.body:                                         ; preds = %for.cond
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12205
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 1, !dbg !12207
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !12207
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 0, !dbg !12208
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !12208
  store %union.tree_node* %6, %union.tree_node** @current_function_decl, align 8, !dbg !12209
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12210
  %caller1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %7, i32 0, i32 1, !dbg !12210
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %caller1, align 8, !dbg !12210
  %decl2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 0, !dbg !12210
  %9 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !12210
  %function_decl = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !12210
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !12210
  %10 = load %struct.function*, %struct.function** %f, align 8, !dbg !12210
  call void @push_cfun(%struct.function* %10), !dbg !12211
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12212
  %tobool3 = icmp ne %struct._IO_FILE* %11, null, !dbg !12212
  br i1 %tobool3, label %if.then, label %if.end, !dbg !12214

if.then:                                          ; preds = %for.body
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12215
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12216
  %caller4 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 1, !dbg !12217
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %caller4, align 8, !dbg !12217
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 24, !dbg !12218
  %15 = load i32, i32* %uid, align 8, !dbg !12218
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12219
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %16, i32 0, i32 2, !dbg !12220
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !12220
  %uid5 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 24, !dbg !12221
  %18 = load i32, i32* %uid5, align 8, !dbg !12221
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12222
  %caller6 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %19, i32 0, i32 1, !dbg !12223
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %caller6, align 8, !dbg !12223
  %call7 = call i8* @cgraph_node_name(%struct.cgraph_node* %20), !dbg !12224
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12225
  %callee8 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %21, i32 0, i32 2, !dbg !12226
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %callee8, align 8, !dbg !12226
  %call9 = call i8* @cgraph_node_name(%struct.cgraph_node* %22), !dbg !12227
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.74, i64 0, i64 0), i32 %15, i32 %18, i8* %call7, i8* %call9), !dbg !12228
  br label %if.end, !dbg !12228

if.end:                                           ; preds = %if.then, %for.body
  %23 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12229
  %24 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12230
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %24, i32 0, i32 7, !dbg !12231
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !12231
  %26 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !12232
  call void @ipa_modify_call_arguments(%struct.cgraph_edge* %23, %union.gimple_statement_d* %25, %struct.VEC_ipa_parm_adjustment_t_heap* %26), !dbg !12233
  call void @pop_cfun(), !dbg !12234
  br label %for.inc, !dbg !12235

for.inc:                                          ; preds = %if.end
  %27 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12236
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %27, i32 0, i32 4, !dbg !12237
  %28 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !12237
  store %struct.cgraph_edge* %28, %struct.cgraph_edge** %cs, align 8, !dbg !12238
  br label %for.cond, !dbg !12239, !llvm.loop !12240

for.end:                                          ; preds = %for.cond
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !12242
  %callers11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %29, i32 0, i32 2, !dbg !12244
  %30 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers11, align 8, !dbg !12244
  store %struct.cgraph_edge* %30, %struct.cgraph_edge** %cs, align 8, !dbg !12245
  br label %for.cond12, !dbg !12246

for.cond12:                                       ; preds = %for.inc26, %for.end
  %31 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12247
  %tobool13 = icmp ne %struct.cgraph_edge* %31, null, !dbg !12249
  br i1 %tobool13, label %for.body14, label %for.end28, !dbg !12249

for.body14:                                       ; preds = %for.cond12
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %recomputed_callers, align 8, !dbg !12250
  %33 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12252
  %caller15 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %33, i32 0, i32 1, !dbg !12253
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %caller15, align 8, !dbg !12253
  %uid16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %34, i32 0, i32 24, !dbg !12254
  %35 = load i32, i32* %uid16, align 8, !dbg !12254
  %call17 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %32, i32 %35), !dbg !12255
  %tobool18 = icmp ne i32 %call17, 0, !dbg !12255
  br i1 %tobool18, label %if.end25, label %if.then19, !dbg !12256

if.then19:                                        ; preds = %for.body14
  %36 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12257
  %caller20 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %36, i32 0, i32 1, !dbg !12259
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %caller20, align 8, !dbg !12259
  %call21 = call i32 @compute_inline_parameters(%struct.cgraph_node* %37), !dbg !12260
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %recomputed_callers, align 8, !dbg !12261
  %39 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12262
  %caller22 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %39, i32 0, i32 1, !dbg !12263
  %40 = load %struct.cgraph_node*, %struct.cgraph_node** %caller22, align 8, !dbg !12263
  %uid23 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %40, i32 0, i32 24, !dbg !12264
  %41 = load i32, i32* %uid23, align 8, !dbg !12264
  %call24 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %38, i32 %41), !dbg !12265
  br label %if.end25, !dbg !12266

if.end25:                                         ; preds = %if.then19, %for.body14
  br label %for.inc26, !dbg !12267

for.inc26:                                        ; preds = %if.end25
  %42 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !12268
  %next_caller27 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %42, i32 0, i32 4, !dbg !12269
  %43 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller27, align 8, !dbg !12269
  store %struct.cgraph_edge* %43, %struct.cgraph_edge** %cs, align 8, !dbg !12270
  br label %for.cond12, !dbg !12271, !llvm.loop !12272

for.end28:                                        ; preds = %for.cond12
  %44 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %recomputed_callers, align 8, !dbg !12274
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %44), !dbg !12274
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %recomputed_callers, align 8, !dbg !12274
  %45 = load %union.tree_node*, %union.tree_node** %old_cur_fndecl, align 8, !dbg !12275
  store %union.tree_node* %45, %union.tree_node** @current_function_decl, align 8, !dbg !12276
  %46 = load i8, i8* @encountered_recursive_call, align 1, !dbg !12277
  %tobool29 = icmp ne i8 %46, 0, !dbg !12277
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !12279

if.then30:                                        ; preds = %for.end28
  br label %return, !dbg !12280

if.end31:                                         ; preds = %for.end28
  %47 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12281
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %47, i64 0, !dbg !12281
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !12281
  %48 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !12281
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %48, i32 0, i32 0, !dbg !12281
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !12281
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 6, !dbg !12281
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !12281
  store %struct.basic_block_def* %50, %struct.basic_block_def** %this_block, align 8, !dbg !12281
  br label %for.cond32, !dbg !12281

for.cond32:                                       ; preds = %for.inc57, %if.end31
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %this_block, align 8, !dbg !12283
  %52 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12283
  %add.ptr33 = getelementptr inbounds %struct.function, %struct.function* %52, i64 0, !dbg !12283
  %cfg34 = getelementptr inbounds %struct.function, %struct.function* %add.ptr33, i32 0, i32 1, !dbg !12283
  %53 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg34, align 8, !dbg !12283
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %53, i32 0, i32 1, !dbg !12283
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !12283
  %cmp = icmp ne %struct.basic_block_def* %51, %54, !dbg !12283
  br i1 %cmp, label %for.body35, label %for.end59, !dbg !12281

for.body35:                                       ; preds = %for.cond32
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !12285, metadata !DIExpression()), !dbg !12287
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %this_block, align 8, !dbg !12288
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %55), !dbg !12290
  %56 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !12290
  %57 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !12290
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 24, i1 false), !dbg !12290
  br label %for.cond36, !dbg !12291

for.cond36:                                       ; preds = %for.inc55, %for.body35
  %call37 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12292
  %tobool38 = icmp ne i8 %call37, 0, !dbg !12294
  %lnot = xor i1 %tobool38, true, !dbg !12294
  br i1 %lnot, label %for.body39, label %for.end56, !dbg !12295

for.body39:                                       ; preds = %for.cond36
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !12296, metadata !DIExpression()), !dbg !12298
  %call40 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12299
  store %union.gimple_statement_d* %call40, %union.gimple_statement_d** %stmt, align 8, !dbg !12298
  call void @llvm.dbg.declare(metadata %union.tree_node** %call_fndecl, metadata !12300, metadata !DIExpression()), !dbg !12301
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12302
  %call41 = call i32 @gimple_code(%union.gimple_statement_d* %58), !dbg !12304
  %cmp42 = icmp ne i32 %call41, 8, !dbg !12305
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !12306

if.then43:                                        ; preds = %for.body39
  br label %for.inc55, !dbg !12307

if.end44:                                         ; preds = %for.body39
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12308
  %call45 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %59), !dbg !12309
  store %union.tree_node* %call45, %union.tree_node** %call_fndecl, align 8, !dbg !12310
  %60 = load %union.tree_node*, %union.tree_node** %call_fndecl, align 8, !dbg !12311
  %tobool46 = icmp ne %union.tree_node* %60, null, !dbg !12311
  br i1 %tobool46, label %land.lhs.true, label %if.end54, !dbg !12313

land.lhs.true:                                    ; preds = %if.end44
  %61 = load %union.tree_node*, %union.tree_node** %call_fndecl, align 8, !dbg !12314
  %call47 = call %struct.cgraph_node* @cgraph_get_node(%union.tree_node* %61), !dbg !12315
  %62 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !12316
  %cmp48 = icmp eq %struct.cgraph_node* %call47, %62, !dbg !12317
  br i1 %cmp48, label %if.then49, label %if.end54, !dbg !12318

if.then49:                                        ; preds = %land.lhs.true
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12319
  %tobool50 = icmp ne %struct._IO_FILE* %63, null, !dbg !12319
  br i1 %tobool50, label %if.then51, label %if.end53, !dbg !12322

if.then51:                                        ; preds = %if.then49
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12323
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.75, i64 0, i64 0)), !dbg !12324
  br label %if.end53, !dbg !12324

if.end53:                                         ; preds = %if.then51, %if.then49
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12325
  %66 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !12326
  call void @ipa_modify_call_arguments(%struct.cgraph_edge* null, %union.gimple_statement_d* %65, %struct.VEC_ipa_parm_adjustment_t_heap* %66), !dbg !12327
  br label %if.end54, !dbg !12328

if.end54:                                         ; preds = %if.end53, %land.lhs.true, %if.end44
  br label %for.inc55, !dbg !12329

for.inc55:                                        ; preds = %if.end54, %if.then43
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !12330
  br label %for.cond36, !dbg !12331, !llvm.loop !12332

for.end56:                                        ; preds = %for.cond36
  br label %for.inc57, !dbg !12334

for.inc57:                                        ; preds = %for.end56
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %this_block, align 8, !dbg !12283
  %next_bb58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 6, !dbg !12283
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb58, align 8, !dbg !12283
  store %struct.basic_block_def* %68, %struct.basic_block_def** %this_block, align 8, !dbg !12283
  br label %for.cond32, !dbg !12283, !llvm.loop !12335

for.end59:                                        ; preds = %for.cond32
  br label %return, !dbg !12337

return:                                           ; preds = %for.end59, %if.then30
  ret void, !dbg !12338
}

declare dso_local void @cgraph_make_node_local(%struct.cgraph_node*) #2

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

declare dso_local void @set_decl_rtl(%union.tree_node*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_parm_adjustment_t_base_length(%struct.VEC_ipa_parm_adjustment_t_base* %vec_) #0 !dbg !12339 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_parm_adjustment_t_base*, align 8
  store %struct.VEC_ipa_parm_adjustment_t_base* %vec_, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, metadata !12344, metadata !DIExpression()), !dbg !12345
  %0 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !12345
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_base* %0, null, !dbg !12345
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12345

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !12345
  %num = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %1, i32 0, i32 0, !dbg !12345
  %2 = load i32, i32* %num, align 8, !dbg !12345
  br label %cond.end, !dbg !12345

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12345

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !12345
  ret i32 %cond, !dbg !12345
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %vec_, i32 %ix_) #0 !dbg !12346 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_parm_adjustment_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_ipa_parm_adjustment_t_base* %vec_, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, metadata !12349, metadata !DIExpression()), !dbg !12350
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !12351, metadata !DIExpression()), !dbg !12350
  %0 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !12350
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_base* %0, null, !dbg !12350
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12350

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !12350
  %2 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !12350
  %num = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %2, i32 0, i32 0, !dbg !12350
  %3 = load i32, i32* %num, align 8, !dbg !12350
  %cmp = icmp ult i32 %1, %3, !dbg !12350
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !12352
  %land.ext = zext i1 %4 to i32, !dbg !12350
  %5 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !12350
  %vec = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %5, i32 0, i32 2, !dbg !12350
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !12350
  %idxprom = zext i32 %6 to i64, !dbg !12350
  %arrayidx = getelementptr inbounds [1 x %struct.ipa_parm_adjustment], [1 x %struct.ipa_parm_adjustment]* %vec, i64 0, i64 %idxprom, !dbg !12350
  ret %struct.ipa_parm_adjustment* %arrayidx, !dbg !12350
}

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_constructor(%union.tree_node*, %struct.VEC_constructor_elt_gc*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_parm_adjustment* @get_adjustment_for_base(%struct.VEC_ipa_parm_adjustment_t_heap* %adjustments, %union.tree_node* %base) #0 !dbg !12353 {
entry:
  %retval = alloca %struct.ipa_parm_adjustment*, align 8
  %adjustments.addr = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %base.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %adj = alloca %struct.ipa_parm_adjustment*, align 8
  store %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, metadata !12356, metadata !DIExpression()), !dbg !12357
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !12358, metadata !DIExpression()), !dbg !12359
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12360, metadata !DIExpression()), !dbg !12361
  call void @llvm.dbg.declare(metadata i32* %len, metadata !12362, metadata !DIExpression()), !dbg !12363
  %0 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !12364
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %0, null, !dbg !12364
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12364

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !12364
  %base1 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %1, i32 0, i32 0, !dbg !12364
  br label %cond.end, !dbg !12364

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12364

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base1, %cond.true ], [ null, %cond.false ], !dbg !12364
  %call = call i32 @VEC_ipa_parm_adjustment_t_base_length(%struct.VEC_ipa_parm_adjustment_t_base* %cond), !dbg !12364
  store i32 %call, i32* %len, align 4, !dbg !12365
  store i32 0, i32* %i, align 4, !dbg !12366
  br label %for.cond, !dbg !12368

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4, !dbg !12369
  %3 = load i32, i32* %len, align 4, !dbg !12371
  %cmp = icmp slt i32 %2, %3, !dbg !12372
  br i1 %cmp, label %for.body, label %for.end, !dbg !12373

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %adj, metadata !12374, metadata !DIExpression()), !dbg !12376
  %4 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !12377
  %tobool2 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %4, null, !dbg !12377
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !12377

cond.true3:                                       ; preds = %for.body
  %5 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !12377
  %base4 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %5, i32 0, i32 0, !dbg !12377
  br label %cond.end6, !dbg !12377

cond.false5:                                      ; preds = %for.body
  br label %cond.end6, !dbg !12377

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !12377
  %6 = load i32, i32* %i, align 4, !dbg !12377
  %call8 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond7, i32 %6), !dbg !12377
  store %struct.ipa_parm_adjustment* %call8, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !12378
  %7 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !12379
  %copy_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %7, i32 0, i32 7, !dbg !12381
  %bf.load = load i8, i8* %copy_param, align 4, !dbg !12381
  %bf.clear = and i8 %bf.load, 1, !dbg !12381
  %bf.cast = zext i8 %bf.clear to i32, !dbg !12381
  %tobool9 = icmp ne i32 %bf.cast, 0, !dbg !12379
  br i1 %tobool9, label %if.end, label %land.lhs.true, !dbg !12382

land.lhs.true:                                    ; preds = %cond.end6
  %8 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !12383
  %base10 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %8, i32 0, i32 0, !dbg !12384
  %9 = load %union.tree_node*, %union.tree_node** %base10, align 8, !dbg !12384
  %10 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !12385
  %cmp11 = icmp eq %union.tree_node* %9, %10, !dbg !12386
  br i1 %cmp11, label %if.then, label %if.end, !dbg !12387

if.then:                                          ; preds = %land.lhs.true
  %11 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !12388
  store %struct.ipa_parm_adjustment* %11, %struct.ipa_parm_adjustment** %retval, align 8, !dbg !12389
  br label %return, !dbg !12389

if.end:                                           ; preds = %land.lhs.true, %cond.end6
  br label %for.inc, !dbg !12390

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !12391
  %inc = add nsw i32 %12, 1, !dbg !12391
  store i32 %inc, i32* %i, align 4, !dbg !12391
  br label %for.cond, !dbg !12392, !llvm.loop !12393

for.end:                                          ; preds = %for.cond
  store %struct.ipa_parm_adjustment* null, %struct.ipa_parm_adjustment** %retval, align 8, !dbg !12395
  br label %return, !dbg !12395

return:                                           ; preds = %for.end, %if.then
  %13 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %retval, align 8, !dbg !12396
  ret %struct.ipa_parm_adjustment* %13, !dbg !12396
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_replaced_param_substitute(%struct.ipa_parm_adjustment* %adj) #0 !dbg !12397 {
entry:
  %adj.addr = alloca %struct.ipa_parm_adjustment*, align 8
  %repl = alloca %union.tree_node*, align 8
  %pretty_name = alloca i8*, align 8
  store %struct.ipa_parm_adjustment* %adj, %struct.ipa_parm_adjustment** %adj.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %adj.addr, metadata !12400, metadata !DIExpression()), !dbg !12401
  call void @llvm.dbg.declare(metadata %union.tree_node** %repl, metadata !12402, metadata !DIExpression()), !dbg !12403
  %0 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj.addr, align 8, !dbg !12404
  %new_ssa_base = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %0, i32 0, i32 3, !dbg !12406
  %1 = load %union.tree_node*, %union.tree_node** %new_ssa_base, align 8, !dbg !12406
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !12404
  br i1 %tobool, label %if.else, label %if.then, !dbg !12407

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %pretty_name, metadata !12408, metadata !DIExpression()), !dbg !12410
  %2 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj.addr, align 8, !dbg !12411
  %base = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %2, i32 0, i32 0, !dbg !12412
  %3 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !12412
  %call = call i8* @make_fancy_name(%union.tree_node* %3), !dbg !12413
  store i8* %call, i8** %pretty_name, align 8, !dbg !12410
  %4 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj.addr, align 8, !dbg !12414
  %base1 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %4, i32 0, i32 0, !dbg !12414
  %5 = load %union.tree_node*, %union.tree_node** %base1, align 8, !dbg !12414
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !12414
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12414
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12414
  %call2 = call %union.tree_node* @create_tmp_var(%union.tree_node* %6, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.73, i64 0, i64 0)), !dbg !12415
  store %union.tree_node* %call2, %union.tree_node** %repl, align 8, !dbg !12416
  %7 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !12417
  %common3 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !12417
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !12417
  %8 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !12417
  %base5 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !12417
  %9 = bitcast %struct.tree_base* %base5 to i64*, !dbg !12417
  %bf.load = load i64, i64* %9, align 8, !dbg !12417
  %bf.clear = and i64 %bf.load, 65535, !dbg !12417
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12417
  %cmp = icmp eq i32 %bf.cast, 13, !dbg !12419
  br i1 %cmp, label %if.then13, label %lor.lhs.false, !dbg !12420

lor.lhs.false:                                    ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !12421
  %common6 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !12421
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !12421
  %11 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !12421
  %base8 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !12421
  %12 = bitcast %struct.tree_base* %base8 to i64*, !dbg !12421
  %bf.load9 = load i64, i64* %12, align 8, !dbg !12421
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !12421
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !12421
  %cmp12 = icmp eq i32 %bf.cast11, 14, !dbg !12422
  br i1 %cmp12, label %if.then13, label %if.end, !dbg !12423

if.then13:                                        ; preds = %lor.lhs.false, %if.then
  %13 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !12424
  %decl_common = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !12424
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !12424
  %14 = bitcast i40* %gimple_reg_flag to i64*, !dbg !12424
  %bf.load14 = load i64, i64* %14, align 8, !dbg !12425
  %bf.clear15 = and i64 %bf.load14, -134217729, !dbg !12425
  %bf.set = or i64 %bf.clear15, 134217728, !dbg !12425
  store i64 %bf.set, i64* %14, align 8, !dbg !12425
  br label %if.end, !dbg !12424

if.end:                                           ; preds = %if.then13, %lor.lhs.false
  %15 = load i8*, i8** %pretty_name, align 8, !dbg !12426
  %call16 = call %union.tree_node* @get_identifier(i8* %15), !dbg !12427
  %16 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !12428
  %decl_minimal = bitcast %union.tree_node* %16 to %struct.tree_decl_minimal*, !dbg !12428
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !12428
  store %union.tree_node* %call16, %union.tree_node** %name, align 8, !dbg !12429
  %17 = load i8*, i8** %pretty_name, align 8, !dbg !12430
  %18 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !12430
  %19 = bitcast %struct._obstack_chunk* %18 to i8*, !dbg !12430
  %sub.ptr.lhs.cast = ptrtoint i8* %17 to i64, !dbg !12430
  %sub.ptr.rhs.cast = ptrtoint i8* %19 to i64, !dbg !12430
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !12430
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !12430
  %20 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !12430
  %cmp17 = icmp sgt i64 %20, 0, !dbg !12430
  br i1 %cmp17, label %land.lhs.true, label %cond.false, !dbg !12430

land.lhs.true:                                    ; preds = %if.end
  %21 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !12430
  %22 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 4), align 8, !dbg !12430
  %23 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !12430
  %24 = bitcast %struct._obstack_chunk* %23 to i8*, !dbg !12430
  %sub.ptr.lhs.cast18 = ptrtoint i8* %22 to i64, !dbg !12430
  %sub.ptr.rhs.cast19 = ptrtoint i8* %24 to i64, !dbg !12430
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast18, %sub.ptr.rhs.cast19, !dbg !12430
  %cmp21 = icmp slt i64 %21, %sub.ptr.sub20, !dbg !12430
  br i1 %cmp21, label %cond.true, label %cond.false, !dbg !12430

cond.true:                                        ; preds = %land.lhs.true
  %25 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !12430
  %26 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !12430
  %27 = bitcast %struct._obstack_chunk* %26 to i8*, !dbg !12430
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 %25, !dbg !12430
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 2), align 8, !dbg !12430
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 3), align 8, !dbg !12430
  %28 = ptrtoint i8* %add.ptr to i64, !dbg !12430
  br label %cond.end, !dbg !12430

cond.false:                                       ; preds = %land.lhs.true, %if.end
  %29 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 5), align 8, !dbg !12430
  %30 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @name_obstack, i32 0, i32 1), align 8, !dbg !12430
  %31 = bitcast %struct._obstack_chunk* %30 to i8*, !dbg !12430
  %add.ptr22 = getelementptr inbounds i8, i8* %31, i64 %29, !dbg !12430
  call void @obstack_free(%struct.obstack* @name_obstack, i8* %add.ptr22), !dbg !12430
  br label %cond.end, !dbg !12430

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %28, %cond.true ], [ 0, %cond.false ], !dbg !12430
  %32 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !12431
  %call23 = call %struct.var_ann_d* @get_var_ann(%union.tree_node* %32), !dbg !12432
  %33 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !12433
  %call24 = call zeroext i8 @add_referenced_var(%union.tree_node* %33), !dbg !12434
  %34 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !12435
  %35 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj.addr, align 8, !dbg !12436
  %new_ssa_base25 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %35, i32 0, i32 3, !dbg !12437
  store %union.tree_node* %34, %union.tree_node** %new_ssa_base25, align 8, !dbg !12438
  br label %if.end27, !dbg !12439

if.else:                                          ; preds = %entry
  %36 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj.addr, align 8, !dbg !12440
  %new_ssa_base26 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %36, i32 0, i32 3, !dbg !12441
  %37 = load %union.tree_node*, %union.tree_node** %new_ssa_base26, align 8, !dbg !12441
  store %union.tree_node* %37, %union.tree_node** %repl, align 8, !dbg !12442
  br label %if.end27

if.end27:                                         ; preds = %if.else, %cond.end
  %38 = load %union.tree_node*, %union.tree_node** %repl, align 8, !dbg !12443
  ret %union.tree_node* %38, !dbg !12444
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !12445 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !12448, metadata !DIExpression()), !dbg !12449
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !12450, metadata !DIExpression()), !dbg !12451
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12452
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !12452
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !12453
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12454
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !12455
  ret %union.tree_node* %call, !dbg !12456
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !12457 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12458, metadata !DIExpression()), !dbg !12459
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !12460, metadata !DIExpression()), !dbg !12461
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12462
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !12463
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !12464
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !12465
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !12465
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !12467

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !12468
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !12468
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !12468
  %bf.load = load i64, i64* %4, align 8, !dbg !12468
  %bf.clear = and i64 %bf.load, 65535, !dbg !12468
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12468
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !12469
  br i1 %cmp, label %if.then, label %if.end, !dbg !12470

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12471
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !12472
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !12472
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !12472
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !12473
  br label %if.end, !dbg !12472

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !12474
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_phi_set_result(%union.gimple_statement_d* %gs, %union.tree_node* %result) #0 !dbg !12475 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %result.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12476, metadata !DIExpression()), !dbg !12477
  store %union.tree_node* %result, %union.tree_node** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %result.addr, metadata !12478, metadata !DIExpression()), !dbg !12479
  %0 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !12480
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12481
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !12482
  %result1 = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !12483
  store %union.tree_node* %0, %union.tree_node** %result1, align 8, !dbg !12484
  ret void, !dbg !12485
}

declare dso_local void @replace_uses_by(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %dbg) #0 !dbg !12486 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !12487, metadata !DIExpression()), !dbg !12488
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !12489
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* null), !dbg !12490
  ret void, !dbg !12491
}

declare dso_local void @push_cfun(%struct.function*) #2

declare dso_local i8* @cgraph_node_name(%struct.cgraph_node*) #2

declare dso_local void @ipa_modify_call_arguments(%struct.cgraph_edge*, %union.gimple_statement_d*, %struct.VEC_ipa_parm_adjustment_t_heap*) #2

declare dso_local void @pop_cfun() #2

declare dso_local i32 @compute_inline_parameters(%struct.cgraph_node*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3188, !3189, !3190}
!llvm.ident = !{!3191}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_sra_early", scope: !2, file: !3, line: 2851, type: !3093, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1692, globals: !3090, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-sra.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !335, !340, !345, !363, !370, !377, !390, !397, !573, !578, !712, !717, !723, !1443, !1457, !1496, !1522, !1527, !1532, !1555, !1678, !1685}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !330, line: 363, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334}
!332 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!335 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !330, line: 355, baseType: !7, size: 32, elements: !336)
!336 = !{!337, !338, !339}
!337 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!338 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!339 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !341, line: 474, baseType: !7, size: 32, elements: !342)
!341 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!342 = !{!343, !344}
!343 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!345 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !346)
!346 = !{!347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362}
!347 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!363 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !364)
!364 = !{!365, !366, !367, !368, !369}
!365 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389}
!379 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!384 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!385 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!386 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!387 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!388 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!389 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !391, line: 104, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395, !396}
!393 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !398, line: 74, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!399 = !{!400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572}
!400 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!401 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!403 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!404 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!405 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!406 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!407 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!572 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!573 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "sra_mode", file: !3, line: 94, baseType: !7, size: 32, elements: !574)
!574 = !{!575, !576, !577}
!575 = !DIEnumerator(name: "SRA_MODE_EARLY_IPA", value: 0, isUnsigned: true)
!576 = !DIEnumerator(name: "SRA_MODE_EARLY_INTRA", value: 1, isUnsigned: true)
!577 = !DIEnumerator(name: "SRA_MODE_INTRA", value: 2, isUnsigned: true)
!578 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !579)
!579 = !{!580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711}
!580 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!581 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!582 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!583 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!584 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!585 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!586 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!587 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!588 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!589 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!590 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!591 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!592 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!593 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!594 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!595 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!596 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!597 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!598 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!599 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!600 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!601 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!602 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!603 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!604 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!605 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!606 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!607 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!608 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!609 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!610 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!611 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!612 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!613 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!614 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!615 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!616 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!617 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!618 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!619 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!620 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!621 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!622 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!623 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!624 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!625 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!626 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!627 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!628 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!629 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!630 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!631 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!632 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!633 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!634 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!635 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!636 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!637 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!638 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!639 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!640 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!641 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!642 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!643 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!644 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!645 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!646 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!647 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!648 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!649 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!650 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!651 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!652 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!653 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!654 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!655 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!656 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!657 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!658 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!659 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!660 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!661 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!662 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!663 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!664 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!665 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!666 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!667 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!668 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!669 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!670 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!671 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!672 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!673 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!674 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!675 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!676 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!677 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!678 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!679 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!680 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!681 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!682 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!683 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!684 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!685 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!686 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!687 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!688 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!689 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!690 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!691 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!692 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!693 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!694 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!695 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!696 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!697 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!698 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!699 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!700 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!701 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!702 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!703 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!704 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!705 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!706 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!707 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!708 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!709 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!710 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!711 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!712 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "scan_assign_result", file: !3, line: 1002, baseType: !7, size: 32, elements: !713)
!713 = !{!714, !715, !716}
!714 = !DIEnumerator(name: "SRA_SA_NONE", value: 0, isUnsigned: true)
!715 = !DIEnumerator(name: "SRA_SA_PROCESSED", value: 1, isUnsigned: true)
!716 = !DIEnumerator(name: "SRA_SA_REMOVED", value: 2, isUnsigned: true)
!717 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !135, line: 205, baseType: !7, size: 32, elements: !718)
!718 = !{!719, !720, !721, !722}
!719 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!723 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !135, line: 220, baseType: !7, size: 32, elements: !724)
!724 = !{!725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442}
!725 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1399 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1400 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1401 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1402 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1403 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1404 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1405 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1406 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1407 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1408 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1409 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1410 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1411 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1412 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1413 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1414 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1415 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1416 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1417 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1418 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1419 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1420 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1421 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1422 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1423 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1424 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1425 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1426 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1427 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1428 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1429 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1430 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1431 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1432 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1433 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1434 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1435 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1436 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1437 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1438 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1439 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1440 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1441 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1442 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1443 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !330, line: 295, baseType: !7, size: 32, elements: !1444)
!1444 = !{!1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456}
!1445 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!1446 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!1447 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1448 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1449 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1450 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!1451 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!1452 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!1453 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!1454 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!1455 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!1456 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!1457 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !1458, line: 51, baseType: !7, size: 32, elements: !1459)
!1458 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1459 = !{!1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495}
!1460 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!1461 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!1462 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!1463 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!1464 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!1465 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!1466 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!1467 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!1468 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!1469 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!1470 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!1471 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!1472 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!1473 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!1474 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!1475 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!1476 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!1477 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!1478 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!1479 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!1480 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!1481 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!1482 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!1483 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!1484 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!1485 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!1486 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!1487 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!1488 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!1489 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!1490 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!1491 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!1492 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!1493 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!1494 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!1495 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!1496 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !1458, line: 727, baseType: !7, size: 32, elements: !1497)
!1497 = !{!1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521}
!1498 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!1499 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!1500 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!1501 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!1502 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!1503 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!1504 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!1505 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!1506 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!1507 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!1508 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!1509 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!1510 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!1511 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!1512 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!1513 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!1514 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!1515 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!1516 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!1517 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!1518 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!1519 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!1520 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!1521 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!1522 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !1458, line: 4603, baseType: !7, size: 32, elements: !1523)
!1523 = !{!1524, !1525, !1526}
!1524 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!1525 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!1526 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!1527 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "unscalarized_data_handling", file: !3, line: 2384, baseType: !7, size: 32, elements: !1528)
!1528 = !{!1529, !1530, !1531}
!1529 = !DIEnumerator(name: "SRA_UDH_NONE", value: 0, isUnsigned: true)
!1530 = !DIEnumerator(name: "SRA_UDH_RIGHT", value: 1, isUnsigned: true)
!1531 = !DIEnumerator(name: "SRA_UDH_LEFT", value: 2, isUnsigned: true)
!1532 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1533, line: 309, baseType: !7, size: 32, elements: !1534)
!1533 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1534 = !{!1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554}
!1535 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!1536 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!1537 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!1538 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!1539 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!1540 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!1541 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!1542 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!1543 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!1544 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!1545 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!1546 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!1547 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!1548 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!1549 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!1550 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!1551 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!1552 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!1553 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!1554 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!1555 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !1556, line: 82, baseType: !7, size: 32, elements: !1557)
!1556 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1557 = !{!1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677}
!1558 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!1559 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!1560 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!1561 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!1562 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!1563 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!1564 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!1565 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!1566 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!1567 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!1568 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!1569 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!1570 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!1571 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!1572 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!1573 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!1574 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!1575 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!1576 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!1577 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!1578 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!1579 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!1580 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!1581 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!1582 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!1583 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!1584 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!1585 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!1586 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!1587 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!1588 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!1589 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!1590 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!1591 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!1592 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!1593 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!1594 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!1595 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!1596 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!1597 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!1598 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!1599 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!1600 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!1601 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!1602 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!1603 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!1604 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!1605 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!1606 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!1607 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!1608 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!1609 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!1610 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!1611 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!1612 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!1613 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!1614 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!1615 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!1616 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!1617 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!1618 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!1619 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!1620 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!1621 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!1622 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!1623 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!1624 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!1625 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!1626 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!1627 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!1628 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!1629 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!1630 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!1631 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!1632 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!1633 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!1634 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!1635 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!1636 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!1637 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!1638 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!1639 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!1640 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!1641 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!1642 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!1643 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!1644 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!1645 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!1646 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!1647 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!1648 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!1649 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!1650 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!1651 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!1652 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!1653 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!1654 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!1655 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!1656 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!1657 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!1658 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!1659 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!1660 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!1661 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!1662 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!1663 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!1664 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!1665 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!1666 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!1667 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!1668 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!1669 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!1670 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!1671 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!1672 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!1673 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!1674 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!1675 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!1676 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!1677 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!1678 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !1679, line: 119, baseType: !7, size: 32, elements: !1680)
!1679 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1680 = !{!1681, !1682, !1683, !1684}
!1681 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!1682 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!1683 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!1684 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!1685 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ipa_splicing_result", file: !3, line: 3471, baseType: !7, size: 32, elements: !1686)
!1686 = !{!1687, !1688, !1689, !1690, !1691}
!1687 = !DIEnumerator(name: "NO_GOOD_ACCESS", value: 0, isUnsigned: true)
!1688 = !DIEnumerator(name: "UNUSED_PARAMS", value: 1, isUnsigned: true)
!1689 = !DIEnumerator(name: "BY_VAL_ACCESSES", value: 2, isUnsigned: true)
!1690 = !DIEnumerator(name: "MODIF_BY_REF_ACCESSES", value: 3, isUnsigned: true)
!1691 = !DIEnumerator(name: "UNMODIF_BY_REF_ACCESSES", value: 4, isUnsigned: true)
!1692 = !{!1693, !134, !1694, !1696, !1977, !2994, !2475, !2025, !2997, !2058, !1962, !7, !2999, !3036, !3049, !3013, !2541, !3051, !3052, !3054, !1897, !3055, !3056, !3059, !3064}
!1693 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1694 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1695, line: 44, baseType: !7)
!1695 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1696 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1697, line: 56, baseType: !1698)
!1697 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1700)
!1700 = !{!1701, !1734, !1740, !1753, !1772, !1783, !1788, !1798, !1804, !1818, !1828, !1866, !2327, !2355, !2372, !2373, !2378, !2387, !2393, !2398, !2402, !2406, !2645, !2692, !2698, !2704, !2711, !2724, !2738, !2755, !2767, !2789, !2804, !2976}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1699, file: !135, line: 3372, baseType: !1702, size: 64)
!1702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1703)
!1703 = !{!1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733}
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1702, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1702, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1702, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1702, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1702, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1702, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1702, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1702, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1702, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1702, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1702, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1702, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1702, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1702, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1702, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1702, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1702, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1702, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1702, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1702, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1702, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1702, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1702, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1702, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1702, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1702, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1702, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1702, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1702, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1702, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1699, file: !135, line: 3373, baseType: !1735, size: 192)
!1735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1736)
!1736 = !{!1737, !1738, !1739}
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1735, file: !135, line: 403, baseType: !1702, size: 64)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1735, file: !135, line: 404, baseType: !1696, size: 64, offset: 64)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1735, file: !135, line: 405, baseType: !1696, size: 64, offset: 128)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1699, file: !135, line: 3374, baseType: !1741, size: 320)
!1741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1742)
!1742 = !{!1743, !1744}
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1741, file: !135, line: 1385, baseType: !1735, size: 192)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1741, file: !135, line: 1386, baseType: !1745, size: 128, offset: 192)
!1745 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1746, line: 58, baseType: !1747)
!1746 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1747 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1746, line: 54, size: 128, elements: !1748)
!1748 = !{!1749, !1751}
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1747, file: !1746, line: 56, baseType: !1750, size: 64)
!1750 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1747, file: !1746, line: 57, baseType: !1752, size: 64, offset: 64)
!1752 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1699, file: !135, line: 3375, baseType: !1754, size: 256)
!1754 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1755)
!1755 = !{!1756, !1757}
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1754, file: !135, line: 1398, baseType: !1735, size: 192)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1754, file: !135, line: 1399, baseType: !1758, size: 64, offset: 192)
!1758 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1759, size: 64)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1760, line: 52, size: 256, elements: !1761)
!1760 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1761 = !{!1762, !1763, !1764, !1765, !1766, !1767, !1768}
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1759, file: !1760, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1759, file: !1760, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1759, file: !1760, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1759, file: !1760, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1759, file: !1760, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1759, file: !1760, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1759, file: !1760, line: 62, baseType: !1769, size: 192, offset: 64)
!1769 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1750, size: 192, elements: !1770)
!1770 = !{!1771}
!1771 = !DISubrange(count: 3)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1699, file: !135, line: 3376, baseType: !1773, size: 256)
!1773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1774)
!1774 = !{!1775, !1776}
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1773, file: !135, line: 1409, baseType: !1735, size: 192)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1773, file: !135, line: 1410, baseType: !1777, size: 64, offset: 192)
!1777 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1778, size: 64)
!1778 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1779, line: 27, size: 192, elements: !1780)
!1779 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1780 = !{!1781, !1782}
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1778, file: !1779, line: 29, baseType: !1745, size: 128)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1778, file: !1779, line: 30, baseType: !5, size: 32, offset: 128)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1699, file: !135, line: 3377, baseType: !1784, size: 256)
!1784 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1785)
!1785 = !{!1786, !1787}
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1784, file: !135, line: 1438, baseType: !1735, size: 192)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1784, file: !135, line: 1439, baseType: !1696, size: 64, offset: 192)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1699, file: !135, line: 3378, baseType: !1789, size: 256)
!1789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1790)
!1790 = !{!1791, !1792, !1793}
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1789, file: !135, line: 1419, baseType: !1735, size: 192)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1789, file: !135, line: 1420, baseType: !1693, size: 32, offset: 192)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1789, file: !135, line: 1421, baseType: !1794, size: 8, offset: 224)
!1794 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1795, size: 8, elements: !1796)
!1795 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1796 = !{!1797}
!1797 = !DISubrange(count: 1)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1699, file: !135, line: 3379, baseType: !1799, size: 320)
!1799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1800)
!1800 = !{!1801, !1802, !1803}
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1799, file: !135, line: 1429, baseType: !1735, size: 192)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1799, file: !135, line: 1430, baseType: !1696, size: 64, offset: 192)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1799, file: !135, line: 1431, baseType: !1696, size: 64, offset: 256)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1699, file: !135, line: 3380, baseType: !1805, size: 320)
!1805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1806)
!1806 = !{!1807, !1808}
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1805, file: !135, line: 1461, baseType: !1735, size: 192)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1805, file: !135, line: 1462, baseType: !1809, size: 128, offset: 192)
!1809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1810, line: 31, size: 128, elements: !1811)
!1810 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1811 = !{!1812, !1816, !1817}
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1809, file: !1810, line: 32, baseType: !1813, size: 64)
!1813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1814, size: 64)
!1814 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1815)
!1815 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1809, file: !1810, line: 33, baseType: !7, size: 32, offset: 64)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1809, file: !1810, line: 34, baseType: !7, size: 32, offset: 96)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1699, file: !135, line: 3381, baseType: !1819, size: 384)
!1819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1820)
!1820 = !{!1821, !1822, !1825, !1826, !1827}
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1819, file: !135, line: 2508, baseType: !1735, size: 192)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1819, file: !135, line: 2509, baseType: !1823, size: 32, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1824, line: 58, baseType: !1694)
!1824 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1819, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1819, file: !135, line: 2511, baseType: !1696, size: 64, offset: 256)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1819, file: !135, line: 2512, baseType: !1696, size: 64, offset: 320)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1699, file: !135, line: 3382, baseType: !1829, size: 896)
!1829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1830)
!1830 = !{!1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1829, file: !135, line: 2653, baseType: !1819, size: 384)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1829, file: !135, line: 2654, baseType: !1696, size: 64, offset: 384)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1829, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1829, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1829, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1829, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1829, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1829, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1829, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1829, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1829, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1829, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1829, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1829, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1829, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1829, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1829, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1829, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1829, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1829, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1829, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1829, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1829, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1829, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1829, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1829, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1829, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1829, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1829, file: !135, line: 2705, baseType: !1696, size: 64, offset: 576)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1829, file: !135, line: 2706, baseType: !1696, size: 64, offset: 640)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1829, file: !135, line: 2707, baseType: !1696, size: 64, offset: 704)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1829, file: !135, line: 2708, baseType: !1696, size: 64, offset: 768)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1829, file: !135, line: 2711, baseType: !1864, size: 64, offset: 832)
!1864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1865, size: 64)
!1865 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1699, file: !135, line: 3383, baseType: !1867, size: 960)
!1867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1868)
!1868 = !{!1869, !1870}
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1867, file: !135, line: 2757, baseType: !1829, size: 896)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1867, file: !135, line: 2758, baseType: !1871, size: 64, offset: 896)
!1871 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1697, line: 50, baseType: !1872)
!1872 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1873, size: 64)
!1873 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1874, line: 240, size: 384, elements: !1875)
!1874 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1875 = !{!1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886}
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1873, file: !1874, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1873, file: !1874, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1873, file: !1874, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1873, file: !1874, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1873, file: !1874, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1873, file: !1874, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1873, file: !1874, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1873, file: !1874, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1873, file: !1874, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1873, file: !1874, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1873, file: !1874, line: 321, baseType: !1887, size: 320, offset: 64)
!1887 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1874, line: 315, size: 320, elements: !1888)
!1888 = !{!1889, !2294, !2296, !2325, !2326}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1887, file: !1874, line: 316, baseType: !1890, size: 64)
!1890 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1891, size: 64, elements: !1796)
!1891 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1874, line: 183, baseType: !1892)
!1892 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1874, line: 166, size: 64, elements: !1893)
!1893 = !{!1894, !1895, !1896, !1899, !1900, !1908, !1909, !1921, !1924, !1986, !1987, !2271, !2284, !2291}
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1892, file: !1874, line: 168, baseType: !1693, size: 32)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1892, file: !1874, line: 169, baseType: !7, size: 32)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1892, file: !1874, line: 170, baseType: !1897, size: 64)
!1897 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1898, size: 64)
!1898 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1795)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1892, file: !1874, line: 171, baseType: !1871, size: 64)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1892, file: !1874, line: 172, baseType: !1901, size: 64)
!1901 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1697, line: 53, baseType: !1902)
!1902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1903, size: 64)
!1903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1874, line: 359, size: 128, elements: !1904)
!1904 = !{!1905, !1906}
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1903, file: !1874, line: 360, baseType: !1693, size: 32)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1903, file: !1874, line: 361, baseType: !1907, size: 64, offset: 64)
!1907 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1871, size: 64, elements: !1796)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1892, file: !1874, line: 173, baseType: !5, size: 32)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1892, file: !1874, line: 174, baseType: !1910, size: 32)
!1910 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1874, line: 133, baseType: !1911)
!1911 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1874, line: 115, size: 32, elements: !1912)
!1912 = !{!1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920}
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1911, file: !1874, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1911, file: !1874, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1911, file: !1874, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1911, file: !1874, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1911, file: !1874, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1911, file: !1874, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1911, file: !1874, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1911, file: !1874, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1892, file: !1874, line: 175, baseType: !1922, size: 64)
!1922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1923, size: 64)
!1923 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1874, line: 175, flags: DIFlagFwdDecl)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1892, file: !1874, line: 176, baseType: !1925, size: 64)
!1925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1926, size: 64)
!1926 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1927, line: 75, size: 256, elements: !1928)
!1927 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1928 = !{!1929, !1943, !1944, !1945}
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1926, file: !1927, line: 76, baseType: !1930, size: 64)
!1930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1931, size: 64)
!1931 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1927, line: 68, baseType: !1932)
!1932 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1927, line: 63, size: 320, elements: !1933)
!1933 = !{!1934, !1936, !1937, !1938}
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1932, file: !1927, line: 64, baseType: !1935, size: 64)
!1935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1932, size: 64)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1932, file: !1927, line: 65, baseType: !1935, size: 64, offset: 64)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1932, file: !1927, line: 66, baseType: !7, size: 32, offset: 128)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1932, file: !1927, line: 67, baseType: !1939, size: 128, offset: 192)
!1939 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1940, size: 128, elements: !1941)
!1940 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1927, line: 29, baseType: !1750)
!1941 = !{!1942}
!1942 = !DISubrange(count: 2)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1926, file: !1927, line: 77, baseType: !1930, size: 64, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1926, file: !1927, line: 78, baseType: !7, size: 32, offset: 128)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1926, file: !1927, line: 79, baseType: !1946, size: 64, offset: 192)
!1946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1947, size: 64)
!1947 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1927, line: 49, baseType: !1948)
!1948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1927, line: 45, size: 832, elements: !1949)
!1949 = !{!1950, !1951, !1952}
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1948, file: !1927, line: 46, baseType: !1935, size: 64)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1948, file: !1927, line: 47, baseType: !1925, size: 64, offset: 64)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1948, file: !1927, line: 48, baseType: !1953, size: 704, offset: 128)
!1953 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1954, line: 164, size: 704, elements: !1955)
!1954 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1955 = !{!1956, !1957, !1968, !1969, !1970, !1971, !1972, !1973, !1978, !1982, !1983, !1984, !1985}
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1953, file: !1954, line: 166, baseType: !1752, size: 64)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1953, file: !1954, line: 167, baseType: !1958, size: 64, offset: 64)
!1958 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1959, size: 64)
!1959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1954, line: 157, size: 192, elements: !1960)
!1960 = !{!1961, !1963, !1964}
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1959, file: !1954, line: 159, baseType: !1962, size: 64)
!1962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1795, size: 64)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1959, file: !1954, line: 160, baseType: !1958, size: 64, offset: 64)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1959, file: !1954, line: 161, baseType: !1965, size: 32, offset: 128)
!1965 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1795, size: 32, elements: !1966)
!1966 = !{!1967}
!1967 = !DISubrange(count: 4)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1953, file: !1954, line: 168, baseType: !1962, size: 64, offset: 128)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1953, file: !1954, line: 169, baseType: !1962, size: 64, offset: 192)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1953, file: !1954, line: 170, baseType: !1962, size: 64, offset: 256)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1953, file: !1954, line: 171, baseType: !1752, size: 64, offset: 320)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1953, file: !1954, line: 172, baseType: !1693, size: 32, offset: 384)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1953, file: !1954, line: 176, baseType: !1974, size: 64, offset: 448)
!1974 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1975, size: 64)
!1975 = !DISubroutineType(types: !1976)
!1976 = !{!1958, !1977, !1752}
!1977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1953, file: !1954, line: 177, baseType: !1979, size: 64, offset: 512)
!1979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1980, size: 64)
!1980 = !DISubroutineType(types: !1981)
!1981 = !{null, !1977, !1958}
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1953, file: !1954, line: 178, baseType: !1977, size: 64, offset: 576)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1953, file: !1954, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1953, file: !1954, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1953, file: !1954, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1892, file: !1874, line: 177, baseType: !1696, size: 64)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1892, file: !1874, line: 178, baseType: !1988, size: 64)
!1988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1989, size: 64)
!1989 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !330, line: 217, size: 832, elements: !1990)
!1990 = !{!1991, !2236, !2237, !2238, !2241, !2245, !2246, !2247, !2265, !2266, !2267, !2268, !2269, !2270}
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1989, file: !330, line: 219, baseType: !1992, size: 64)
!1992 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1993, size: 64)
!1993 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !330, line: 151, baseType: !1994)
!1994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !330, line: 151, size: 128, elements: !1995)
!1995 = !{!1996}
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1994, file: !330, line: 151, baseType: !1997, size: 128)
!1997 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !330, line: 150, baseType: !1998)
!1998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !330, line: 150, size: 128, elements: !1999)
!1999 = !{!2000, !2001, !2002}
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1998, file: !330, line: 150, baseType: !7, size: 32)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1998, file: !330, line: 150, baseType: !7, size: 32, offset: 32)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1998, file: !330, line: 150, baseType: !2003, size: 64, offset: 64)
!2003 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2004, size: 64, elements: !1796)
!2004 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1697, line: 108, baseType: !2005)
!2005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2006, size: 64)
!2006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !330, line: 122, size: 512, elements: !2007)
!2007 = !{!2008, !2009, !2010, !2228, !2229, !2230, !2231, !2232, !2233, !2234}
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2006, file: !330, line: 124, baseType: !1988, size: 64)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2006, file: !330, line: 125, baseType: !1988, size: 64, offset: 64)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !2006, file: !330, line: 131, baseType: !2011, size: 64, offset: 128)
!2011 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !330, line: 128, size: 64, elements: !2012)
!2012 = !{!2013, !2227}
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2011, file: !330, line: 129, baseType: !2014, size: 64)
!2014 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1697, line: 66, baseType: !2015)
!2015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2016, size: 64)
!2016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1458, line: 143, size: 192, elements: !2017)
!2017 = !{!2018, !2225, !2226}
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2016, file: !1458, line: 145, baseType: !2019, size: 64)
!2019 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1697, line: 69, baseType: !2020)
!2020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2021, size: 64)
!2021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !1458, line: 136, size: 192, elements: !2022)
!2022 = !{!2023, !2223, !2224}
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2021, file: !1458, line: 137, baseType: !2024, size: 64)
!2024 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1697, line: 58, baseType: !2025)
!2025 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2026, size: 64)
!2026 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1458, line: 737, size: 768, elements: !2027)
!2027 = !{!2028, !2045, !2078, !2084, !2089, !2094, !2101, !2107, !2113, !2118, !2132, !2137, !2143, !2148, !2158, !2163, !2181, !2188, !2195, !2201, !2206, !2212, !2218}
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2026, file: !1458, line: 738, baseType: !2029, size: 256)
!2029 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !1458, line: 271, size: 256, elements: !2030)
!2030 = !{!2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044}
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2029, file: !1458, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !2029, file: !1458, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2029, file: !1458, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !2029, file: !1458, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !2029, file: !1458, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2029, file: !1458, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !2029, file: !1458, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2029, file: !1458, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2029, file: !1458, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2029, file: !1458, line: 312, baseType: !7, size: 32, offset: 32)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !2029, file: !1458, line: 316, baseType: !1823, size: 32, offset: 64)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !2029, file: !1458, line: 319, baseType: !7, size: 32, offset: 96)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2029, file: !1458, line: 323, baseType: !1988, size: 64, offset: 128)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2029, file: !1458, line: 327, baseType: !1696, size: 64, offset: 192)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !2026, file: !1458, line: 739, baseType: !2046, size: 448)
!2046 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !1458, line: 350, size: 448, elements: !2047)
!2047 = !{!2048, !2076}
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2046, file: !1458, line: 353, baseType: !2049, size: 384)
!2049 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !1458, line: 333, size: 384, elements: !2050)
!2050 = !{!2051, !2052, !2059}
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2049, file: !1458, line: 336, baseType: !2029, size: 256)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2049, file: !1458, line: 343, baseType: !2053, size: 64, offset: 256)
!2053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2054, size: 64)
!2054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1679, line: 37, size: 128, elements: !2055)
!2055 = !{!2056, !2057}
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2054, file: !1679, line: 39, baseType: !2053, size: 64)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2054, file: !1679, line: 40, baseType: !2058, size: 64, offset: 64)
!2058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1696, size: 64)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2049, file: !1458, line: 344, baseType: !2060, size: 64, offset: 320)
!2060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2061, size: 64)
!2061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1679, line: 45, size: 320, elements: !2062)
!2062 = !{!2063, !2064}
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2061, file: !1679, line: 47, baseType: !2060, size: 64)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2061, file: !1679, line: 48, baseType: !2065, size: 256, offset: 64)
!2065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !2066)
!2066 = !{!2067, !2069, !2070, !2075}
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2065, file: !135, line: 1884, baseType: !2068, size: 64)
!2068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2065, size: 64)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2065, file: !135, line: 1885, baseType: !2068, size: 64, offset: 64)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2065, file: !135, line: 1891, baseType: !2071, size: 64, offset: 128)
!2071 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2065, file: !135, line: 1891, size: 64, elements: !2072)
!2072 = !{!2073, !2074}
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2071, file: !135, line: 1891, baseType: !2024, size: 64)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2071, file: !135, line: 1891, baseType: !1696, size: 64)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2065, file: !135, line: 1892, baseType: !2058, size: 64, offset: 192)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2046, file: !1458, line: 359, baseType: !2077, size: 64, offset: 384)
!2077 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1696, size: 64, elements: !1796)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !2026, file: !1458, line: 740, baseType: !2079, size: 512)
!2079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !1458, line: 365, size: 512, elements: !2080)
!2080 = !{!2081, !2082, !2083}
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2079, file: !1458, line: 368, baseType: !2049, size: 384)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2079, file: !1458, line: 373, baseType: !1696, size: 64, offset: 384)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2079, file: !1458, line: 374, baseType: !1696, size: 64, offset: 448)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !2026, file: !1458, line: 741, baseType: !2085, size: 576)
!2085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !1458, line: 380, size: 576, elements: !2086)
!2086 = !{!2087, !2088}
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2085, file: !1458, line: 383, baseType: !2079, size: 512)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2085, file: !1458, line: 389, baseType: !2077, size: 64, offset: 512)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2026, file: !1458, line: 742, baseType: !2090, size: 320)
!2090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !1458, line: 395, size: 320, elements: !2091)
!2091 = !{!2092, !2093}
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2090, file: !1458, line: 397, baseType: !2029, size: 256)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2090, file: !1458, line: 400, baseType: !2014, size: 64, offset: 256)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !2026, file: !1458, line: 743, baseType: !2095, size: 448)
!2095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !1458, line: 406, size: 448, elements: !2096)
!2096 = !{!2097, !2098, !2099, !2100}
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2095, file: !1458, line: 408, baseType: !2029, size: 256)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2095, file: !1458, line: 412, baseType: !1696, size: 64, offset: 256)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2095, file: !1458, line: 420, baseType: !1696, size: 64, offset: 320)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2095, file: !1458, line: 423, baseType: !2014, size: 64, offset: 384)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !2026, file: !1458, line: 744, baseType: !2102, size: 384)
!2102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !1458, line: 429, size: 384, elements: !2103)
!2103 = !{!2104, !2105, !2106}
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2102, file: !1458, line: 431, baseType: !2029, size: 256)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2102, file: !1458, line: 434, baseType: !1696, size: 64, offset: 256)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2102, file: !1458, line: 437, baseType: !2014, size: 64, offset: 320)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !2026, file: !1458, line: 745, baseType: !2108, size: 384)
!2108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !1458, line: 443, size: 384, elements: !2109)
!2109 = !{!2110, !2111, !2112}
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2108, file: !1458, line: 445, baseType: !2029, size: 256)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2108, file: !1458, line: 449, baseType: !1696, size: 64, offset: 256)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2108, file: !1458, line: 453, baseType: !2014, size: 64, offset: 320)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !2026, file: !1458, line: 746, baseType: !2114, size: 320)
!2114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !1458, line: 459, size: 320, elements: !2115)
!2115 = !{!2116, !2117}
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2114, file: !1458, line: 461, baseType: !2029, size: 256)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2114, file: !1458, line: 464, baseType: !1696, size: 64, offset: 256)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !2026, file: !1458, line: 747, baseType: !2119, size: 768)
!2119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !1458, line: 469, size: 768, elements: !2120)
!2120 = !{!2121, !2122, !2123, !2124, !2125}
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2119, file: !1458, line: 471, baseType: !2029, size: 256)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2119, file: !1458, line: 474, baseType: !7, size: 32, offset: 256)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2119, file: !1458, line: 475, baseType: !7, size: 32, offset: 288)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2119, file: !1458, line: 478, baseType: !1696, size: 64, offset: 320)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2119, file: !1458, line: 481, baseType: !2126, size: 384, offset: 384)
!2126 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2127, size: 384, elements: !1796)
!2127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !2128)
!2128 = !{!2129, !2130, !2131}
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2127, file: !135, line: 1920, baseType: !2065, size: 256)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2127, file: !135, line: 1921, baseType: !1696, size: 64, offset: 256)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2127, file: !135, line: 1922, baseType: !1823, size: 32, offset: 320)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !2026, file: !1458, line: 748, baseType: !2133, size: 320)
!2133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !1458, line: 487, size: 320, elements: !2134)
!2134 = !{!2135, !2136}
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2133, file: !1458, line: 490, baseType: !2029, size: 256)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2133, file: !1458, line: 494, baseType: !1693, size: 32, offset: 256)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !2026, file: !1458, line: 749, baseType: !2138, size: 384)
!2138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !1458, line: 500, size: 384, elements: !2139)
!2139 = !{!2140, !2141, !2142}
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2138, file: !1458, line: 502, baseType: !2029, size: 256)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2138, file: !1458, line: 506, baseType: !2014, size: 64, offset: 256)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2138, file: !1458, line: 510, baseType: !2014, size: 64, offset: 320)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !2026, file: !1458, line: 750, baseType: !2144, size: 320)
!2144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !1458, line: 529, size: 320, elements: !2145)
!2145 = !{!2146, !2147}
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2144, file: !1458, line: 531, baseType: !2029, size: 256)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2144, file: !1458, line: 540, baseType: !2014, size: 64, offset: 256)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !2026, file: !1458, line: 751, baseType: !2149, size: 704)
!2149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !1458, line: 546, size: 704, elements: !2150)
!2150 = !{!2151, !2152, !2153, !2154, !2155, !2156, !2157}
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2149, file: !1458, line: 549, baseType: !2079, size: 512)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2149, file: !1458, line: 553, baseType: !1897, size: 64, offset: 512)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2149, file: !1458, line: 557, baseType: !1815, size: 8, offset: 576)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2149, file: !1458, line: 558, baseType: !1815, size: 8, offset: 584)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2149, file: !1458, line: 559, baseType: !1815, size: 8, offset: 592)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2149, file: !1458, line: 560, baseType: !1815, size: 8, offset: 600)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2149, file: !1458, line: 566, baseType: !2077, size: 64, offset: 640)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !2026, file: !1458, line: 752, baseType: !2159, size: 384)
!2159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !1458, line: 571, size: 384, elements: !2160)
!2160 = !{!2161, !2162}
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2159, file: !1458, line: 573, baseType: !2090, size: 320)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2159, file: !1458, line: 577, baseType: !1696, size: 64, offset: 320)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !2026, file: !1458, line: 753, baseType: !2164, size: 576)
!2164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !1458, line: 600, size: 576, elements: !2165)
!2165 = !{!2166, !2167, !2168, !2171, !2180}
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2164, file: !1458, line: 602, baseType: !2090, size: 320)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2164, file: !1458, line: 605, baseType: !1696, size: 64, offset: 320)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2164, file: !1458, line: 609, baseType: !2169, size: 64, offset: 384)
!2169 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2170, line: 46, baseType: !1750)
!2170 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2164, file: !1458, line: 612, baseType: !2172, size: 64, offset: 448)
!2172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2173, size: 64)
!2173 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !1458, line: 581, size: 320, elements: !2174)
!2174 = !{!2175, !2176, !2177, !2178, !2179}
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2173, file: !1458, line: 583, baseType: !134, size: 32)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2173, file: !1458, line: 586, baseType: !1696, size: 64, offset: 64)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2173, file: !1458, line: 589, baseType: !1696, size: 64, offset: 128)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2173, file: !1458, line: 592, baseType: !1696, size: 64, offset: 192)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2173, file: !1458, line: 595, baseType: !1696, size: 64, offset: 256)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2164, file: !1458, line: 616, baseType: !2014, size: 64, offset: 512)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !2026, file: !1458, line: 754, baseType: !2182, size: 512)
!2182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !1458, line: 622, size: 512, elements: !2183)
!2183 = !{!2184, !2185, !2186, !2187}
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2182, file: !1458, line: 624, baseType: !2090, size: 320)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2182, file: !1458, line: 628, baseType: !1696, size: 64, offset: 320)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2182, file: !1458, line: 632, baseType: !1696, size: 64, offset: 384)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2182, file: !1458, line: 636, baseType: !1696, size: 64, offset: 448)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !2026, file: !1458, line: 755, baseType: !2189, size: 704)
!2189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !1458, line: 642, size: 704, elements: !2190)
!2190 = !{!2191, !2192, !2193, !2194}
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2189, file: !1458, line: 644, baseType: !2182, size: 512)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2189, file: !1458, line: 648, baseType: !1696, size: 64, offset: 512)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2189, file: !1458, line: 652, baseType: !1696, size: 64, offset: 576)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2189, file: !1458, line: 653, baseType: !1696, size: 64, offset: 640)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !2026, file: !1458, line: 756, baseType: !2196, size: 448)
!2196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !1458, line: 663, size: 448, elements: !2197)
!2197 = !{!2198, !2199, !2200}
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2196, file: !1458, line: 665, baseType: !2090, size: 320)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2196, file: !1458, line: 668, baseType: !1696, size: 64, offset: 320)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2196, file: !1458, line: 673, baseType: !1696, size: 64, offset: 384)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !2026, file: !1458, line: 757, baseType: !2202, size: 384)
!2202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !1458, line: 694, size: 384, elements: !2203)
!2203 = !{!2204, !2205}
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2202, file: !1458, line: 696, baseType: !2090, size: 320)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2202, file: !1458, line: 699, baseType: !1696, size: 64, offset: 320)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !2026, file: !1458, line: 758, baseType: !2207, size: 384)
!2207 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !1458, line: 681, size: 384, elements: !2208)
!2208 = !{!2209, !2210, !2211}
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2207, file: !1458, line: 683, baseType: !2029, size: 256)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2207, file: !1458, line: 686, baseType: !1696, size: 64, offset: 256)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2207, file: !1458, line: 689, baseType: !1696, size: 64, offset: 320)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !2026, file: !1458, line: 759, baseType: !2213, size: 384)
!2213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !1458, line: 707, size: 384, elements: !2214)
!2214 = !{!2215, !2216, !2217}
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2213, file: !1458, line: 709, baseType: !2029, size: 256)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2213, file: !1458, line: 712, baseType: !1696, size: 64, offset: 256)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2213, file: !1458, line: 712, baseType: !1696, size: 64, offset: 320)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !2026, file: !1458, line: 760, baseType: !2219, size: 320)
!2219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !1458, line: 718, size: 320, elements: !2220)
!2220 = !{!2221, !2222}
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2219, file: !1458, line: 720, baseType: !2029, size: 256)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2219, file: !1458, line: 723, baseType: !1696, size: 64, offset: 256)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2021, file: !1458, line: 138, baseType: !2020, size: 64, offset: 64)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2021, file: !1458, line: 139, baseType: !2020, size: 64, offset: 128)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !2016, file: !1458, line: 146, baseType: !2019, size: 64, offset: 64)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2016, file: !1458, line: 152, baseType: !2014, size: 64, offset: 128)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2011, file: !330, line: 130, baseType: !1871, size: 64)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2006, file: !330, line: 134, baseType: !1977, size: 64, offset: 192)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !2006, file: !330, line: 137, baseType: !1696, size: 64, offset: 256)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !2006, file: !330, line: 138, baseType: !1823, size: 32, offset: 320)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !2006, file: !330, line: 142, baseType: !7, size: 32, offset: 352)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2006, file: !330, line: 144, baseType: !1693, size: 32, offset: 384)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !2006, file: !330, line: 145, baseType: !1693, size: 32, offset: 416)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2006, file: !330, line: 146, baseType: !2235, size: 64, offset: 448)
!2235 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !330, line: 119, baseType: !1752)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1989, file: !330, line: 220, baseType: !1992, size: 64, offset: 64)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1989, file: !330, line: 223, baseType: !1977, size: 64, offset: 128)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1989, file: !330, line: 226, baseType: !2239, size: 64, offset: 192)
!2239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2240, size: 64)
!2240 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 185, flags: DIFlagFwdDecl)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1989, file: !330, line: 229, baseType: !2242, size: 128, offset: 256)
!2242 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2243, size: 128, elements: !1941)
!2243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2244, size: 64)
!2244 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !330, line: 229, flags: DIFlagFwdDecl)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1989, file: !330, line: 232, baseType: !1988, size: 64, offset: 384)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1989, file: !330, line: 233, baseType: !1988, size: 64, offset: 448)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1989, file: !330, line: 238, baseType: !2248, size: 64, offset: 512)
!2248 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !330, line: 235, size: 64, elements: !2249)
!2249 = !{!2250, !2256}
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2248, file: !330, line: 236, baseType: !2251, size: 64)
!2251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2252, size: 64)
!2252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !330, line: 273, size: 128, elements: !2253)
!2253 = !{!2254, !2255}
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2252, file: !330, line: 275, baseType: !2014, size: 64)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2252, file: !330, line: 278, baseType: !2014, size: 64, offset: 64)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2248, file: !330, line: 237, baseType: !2257, size: 64)
!2257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2258, size: 64)
!2258 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !330, line: 259, size: 320, elements: !2259)
!2259 = !{!2260, !2261, !2262, !2263, !2264}
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2258, file: !330, line: 261, baseType: !1871, size: 64)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2258, file: !330, line: 262, baseType: !1871, size: 64, offset: 64)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2258, file: !330, line: 266, baseType: !1871, size: 64, offset: 128)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2258, file: !330, line: 267, baseType: !1871, size: 64, offset: 192)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2258, file: !330, line: 270, baseType: !1693, size: 32, offset: 256)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1989, file: !330, line: 241, baseType: !2235, size: 64, offset: 576)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1989, file: !330, line: 244, baseType: !1693, size: 32, offset: 640)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1989, file: !330, line: 247, baseType: !1693, size: 32, offset: 672)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1989, file: !330, line: 250, baseType: !1693, size: 32, offset: 704)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1989, file: !330, line: 253, baseType: !1693, size: 32, offset: 736)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1989, file: !330, line: 256, baseType: !1693, size: 32, offset: 768)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1892, file: !1874, line: 179, baseType: !2272, size: 64)
!2272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2273, size: 64)
!2273 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1874, line: 150, baseType: !2274)
!2274 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1874, line: 142, size: 320, elements: !2275)
!2275 = !{!2276, !2277, !2278, !2279, !2282, !2283}
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2274, file: !1874, line: 144, baseType: !1696, size: 64)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2274, file: !1874, line: 145, baseType: !1871, size: 64, offset: 64)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2274, file: !1874, line: 146, baseType: !1871, size: 64, offset: 128)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2274, file: !1874, line: 147, baseType: !2280, size: 32, offset: 192)
!2280 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2281, line: 31, baseType: !1693)
!2281 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2274, file: !1874, line: 148, baseType: !7, size: 32, offset: 224)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2274, file: !1874, line: 149, baseType: !1815, size: 8, offset: 256)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1892, file: !1874, line: 180, baseType: !2285, size: 64)
!2285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2286, size: 64)
!2286 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1874, line: 162, baseType: !2287)
!2287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1874, line: 159, size: 128, elements: !2288)
!2288 = !{!2289, !2290}
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2287, file: !1874, line: 160, baseType: !1696, size: 64)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2287, file: !1874, line: 161, baseType: !1752, size: 64, offset: 64)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1892, file: !1874, line: 181, baseType: !2292, size: 64)
!2292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2293, size: 64)
!2293 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1874, line: 181, flags: DIFlagFwdDecl)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1887, file: !1874, line: 317, baseType: !2295, size: 64)
!2295 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1752, size: 64, elements: !1796)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1887, file: !1874, line: 318, baseType: !2297, size: 320)
!2297 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1874, line: 188, size: 320, elements: !2298)
!2298 = !{!2299, !2301, !2324}
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2297, file: !1874, line: 190, baseType: !2300, size: 192)
!2300 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1891, size: 192, elements: !1770)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2297, file: !1874, line: 193, baseType: !2302, size: 64, offset: 192)
!2302 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2303, size: 64)
!2303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1874, line: 206, size: 320, elements: !2304)
!2304 = !{!2305, !2309, !2310, !2311, !2323}
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2303, file: !1874, line: 208, baseType: !2306, size: 64)
!2306 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2307, size: 64)
!2307 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1697, line: 62, baseType: !2308)
!2308 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1697, line: 61, flags: DIFlagFwdDecl)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2303, file: !1874, line: 211, baseType: !7, size: 32, offset: 64)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2303, file: !1874, line: 214, baseType: !1752, size: 64, offset: 128)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2303, file: !1874, line: 224, baseType: !2312, size: 64, offset: 192)
!2312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2313, size: 64)
!2313 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1874, line: 202, baseType: !2314)
!2314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1874, line: 202, size: 128, elements: !2315)
!2315 = !{!2316}
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2314, file: !1874, line: 202, baseType: !2317, size: 128)
!2317 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1874, line: 200, baseType: !2318)
!2318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1874, line: 200, size: 128, elements: !2319)
!2319 = !{!2320, !2321, !2322}
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2318, file: !1874, line: 200, baseType: !7, size: 32)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2318, file: !1874, line: 200, baseType: !7, size: 32, offset: 32)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2318, file: !1874, line: 200, baseType: !1907, size: 64, offset: 64)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2303, file: !1874, line: 234, baseType: !2312, size: 64, offset: 256)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2297, file: !1874, line: 197, baseType: !1752, size: 64, offset: 256)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1887, file: !1874, line: 319, baseType: !1759, size: 256)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1887, file: !1874, line: 320, baseType: !1778, size: 192)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1699, file: !135, line: 3384, baseType: !2328, size: 1472)
!2328 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !2329)
!2329 = !{!2330, !2351, !2352, !2353, !2354}
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2328, file: !135, line: 3115, baseType: !2331, size: 1216)
!2331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !2332)
!2332 = !{!2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350}
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2331, file: !135, line: 2985, baseType: !1867, size: 960)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2331, file: !135, line: 2986, baseType: !1696, size: 64, offset: 960)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2331, file: !135, line: 2987, baseType: !1696, size: 64, offset: 1024)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2331, file: !135, line: 2988, baseType: !1696, size: 64, offset: 1088)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2331, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2331, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2331, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2331, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2331, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2331, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2331, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2331, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2331, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2331, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2331, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2331, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2331, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2331, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2328, file: !135, line: 3117, baseType: !1696, size: 64, offset: 1216)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2328, file: !135, line: 3119, baseType: !1696, size: 64, offset: 1280)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2328, file: !135, line: 3121, baseType: !1696, size: 64, offset: 1344)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2328, file: !135, line: 3123, baseType: !1696, size: 64, offset: 1408)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1699, file: !135, line: 3385, baseType: !2356, size: 1088)
!2356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !2357)
!2357 = !{!2358, !2359, !2360}
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2356, file: !135, line: 2875, baseType: !1867, size: 960)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2356, file: !135, line: 2876, baseType: !1871, size: 64, offset: 960)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2356, file: !135, line: 2877, baseType: !2361, size: 64, offset: 1024)
!2361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2362, size: 64)
!2362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2363, line: 172, size: 128, elements: !2364)
!2363 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2364 = !{!2365, !2366, !2367, !2368, !2369, !2370, !2371}
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2362, file: !2363, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2362, file: !2363, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2362, file: !2363, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2362, file: !2363, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2362, file: !2363, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2362, file: !2363, line: 195, baseType: !7, size: 32, offset: 32)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2362, file: !2363, line: 199, baseType: !1696, size: 64, offset: 64)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1699, file: !135, line: 3386, baseType: !2331, size: 1216)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1699, file: !135, line: 3387, baseType: !2374, size: 1280)
!2374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !2375)
!2375 = !{!2376, !2377}
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2374, file: !135, line: 3094, baseType: !2331, size: 1216)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2374, file: !135, line: 3095, baseType: !2361, size: 64, offset: 1216)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1699, file: !135, line: 3388, baseType: !2379, size: 1216)
!2379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !2380)
!2380 = !{!2381, !2382, !2383, !2384, !2385, !2386}
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2379, file: !135, line: 2825, baseType: !1829, size: 896)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2379, file: !135, line: 2827, baseType: !1696, size: 64, offset: 896)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2379, file: !135, line: 2828, baseType: !1696, size: 64, offset: 960)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2379, file: !135, line: 2829, baseType: !1696, size: 64, offset: 1024)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2379, file: !135, line: 2830, baseType: !1696, size: 64, offset: 1088)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2379, file: !135, line: 2831, baseType: !1696, size: 64, offset: 1152)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1699, file: !135, line: 3389, baseType: !2388, size: 1024)
!2388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !2389)
!2389 = !{!2390, !2391, !2392}
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2388, file: !135, line: 2851, baseType: !1867, size: 960)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2388, file: !135, line: 2852, baseType: !1693, size: 32, offset: 960)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2388, file: !135, line: 2853, baseType: !1693, size: 32, offset: 992)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1699, file: !135, line: 3390, baseType: !2394, size: 1024)
!2394 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !2395)
!2395 = !{!2396, !2397}
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2394, file: !135, line: 2858, baseType: !1867, size: 960)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2394, file: !135, line: 2859, baseType: !2361, size: 64, offset: 960)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1699, file: !135, line: 3391, baseType: !2399, size: 960)
!2399 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !2400)
!2400 = !{!2401}
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2399, file: !135, line: 2863, baseType: !1867, size: 960)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1699, file: !135, line: 3392, baseType: !2403, size: 1472)
!2403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !2404)
!2404 = !{!2405}
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2403, file: !135, line: 3305, baseType: !2328, size: 1472)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1699, file: !135, line: 3393, baseType: !2407, size: 1792)
!2407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !2408)
!2408 = !{!2409, !2410, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644}
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2407, file: !135, line: 3249, baseType: !2328, size: 1472)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2407, file: !135, line: 3251, baseType: !2411, size: 64, offset: 1472)
!2411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2412, size: 64)
!2412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2413, line: 463, size: 1152, elements: !2414)
!2413 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2414 = !{!2415, !2418, !2449, !2450, !2565, !2568, !2569, !2570, !2571, !2572, !2573, !2597, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623}
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2412, file: !2413, line: 464, baseType: !2416, size: 64)
!2416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2417, size: 64)
!2417 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2413, line: 464, flags: DIFlagFwdDecl)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2412, file: !2413, line: 467, baseType: !2419, size: 64, offset: 64)
!2419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2420, size: 64)
!2420 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !330, line: 374, size: 640, elements: !2421)
!2421 = !{!2422, !2424, !2425, !2438, !2439, !2440, !2441, !2442, !2443, !2445, !2447, !2448}
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2420, file: !330, line: 377, baseType: !2423, size: 64)
!2423 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1697, line: 111, baseType: !1988)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2420, file: !330, line: 378, baseType: !2423, size: 64, offset: 64)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2420, file: !330, line: 381, baseType: !2426, size: 64, offset: 128)
!2426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2427, size: 64)
!2427 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !330, line: 282, baseType: !2428)
!2428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !330, line: 282, size: 128, elements: !2429)
!2429 = !{!2430}
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2428, file: !330, line: 282, baseType: !2431, size: 128)
!2431 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !330, line: 281, baseType: !2432)
!2432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !330, line: 281, size: 128, elements: !2433)
!2433 = !{!2434, !2435, !2436}
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2432, file: !330, line: 281, baseType: !7, size: 32)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2432, file: !330, line: 281, baseType: !7, size: 32, offset: 32)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2432, file: !330, line: 281, baseType: !2437, size: 64, offset: 64)
!2437 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2423, size: 64, elements: !1796)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2420, file: !330, line: 384, baseType: !1693, size: 32, offset: 192)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2420, file: !330, line: 387, baseType: !1693, size: 32, offset: 224)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2420, file: !330, line: 390, baseType: !1693, size: 32, offset: 256)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2420, file: !330, line: 394, baseType: !2426, size: 64, offset: 320)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2420, file: !330, line: 396, baseType: !329, size: 32, offset: 384)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2420, file: !330, line: 399, baseType: !2444, size: 64, offset: 416)
!2444 = !DICompositeType(tag: DW_TAG_array_type, baseType: !335, size: 64, elements: !1941)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2420, file: !330, line: 402, baseType: !2446, size: 64, offset: 480)
!2446 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1941)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2420, file: !330, line: 406, baseType: !1693, size: 32, offset: 544)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2420, file: !330, line: 409, baseType: !1693, size: 32, offset: 576)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2412, file: !2413, line: 470, baseType: !2015, size: 64, offset: 128)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2412, file: !2413, line: 473, baseType: !2451, size: 64, offset: 192)
!2451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2452, size: 64)
!2452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2363, line: 39, size: 1152, elements: !2453)
!2453 = !{!2454, !2504, !2517, !2529, !2530, !2542, !2543, !2547, !2548, !2549, !2550, !2551}
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2452, file: !2363, line: 41, baseType: !2455, size: 64)
!2455 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2456, line: 144, baseType: !2457)
!2456 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2458, size: 64)
!2458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2456, line: 100, size: 896, elements: !2459)
!2459 = !{!2460, !2468, !2473, !2478, !2480, !2481, !2482, !2483, !2484, !2485, !2490, !2492, !2493, !2498, !2503}
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2458, file: !2456, line: 102, baseType: !2461, size: 64)
!2461 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2456, line: 52, baseType: !2462)
!2462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2463, size: 64)
!2463 = !DISubroutineType(types: !2464)
!2464 = !{!2465, !2466}
!2465 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2456, line: 47, baseType: !7)
!2466 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2467, size: 64)
!2467 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2458, file: !2456, line: 105, baseType: !2469, size: 64, offset: 64)
!2469 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2456, line: 59, baseType: !2470)
!2470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2471, size: 64)
!2471 = !DISubroutineType(types: !2472)
!2472 = !{!1693, !2466, !2466}
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2458, file: !2456, line: 108, baseType: !2474, size: 64, offset: 128)
!2474 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2456, line: 63, baseType: !2475)
!2475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2476, size: 64)
!2476 = !DISubroutineType(types: !2477)
!2477 = !{null, !1977}
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2458, file: !2456, line: 111, baseType: !2479, size: 64, offset: 192)
!2479 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1977, size: 64)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2458, file: !2456, line: 114, baseType: !2169, size: 64, offset: 256)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2458, file: !2456, line: 117, baseType: !2169, size: 64, offset: 320)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2458, file: !2456, line: 120, baseType: !2169, size: 64, offset: 384)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2458, file: !2456, line: 124, baseType: !7, size: 32, offset: 448)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2458, file: !2456, line: 128, baseType: !7, size: 32, offset: 480)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2458, file: !2456, line: 131, baseType: !2486, size: 64, offset: 512)
!2486 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2456, line: 75, baseType: !2487)
!2487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2488, size: 64)
!2488 = !DISubroutineType(types: !2489)
!2489 = !{!1977, !2169, !2169}
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2458, file: !2456, line: 132, baseType: !2491, size: 64, offset: 576)
!2491 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2456, line: 78, baseType: !2475)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2458, file: !2456, line: 135, baseType: !1977, size: 64, offset: 640)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2458, file: !2456, line: 136, baseType: !2494, size: 64, offset: 704)
!2494 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2456, line: 82, baseType: !2495)
!2495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2496, size: 64)
!2496 = !DISubroutineType(types: !2497)
!2497 = !{!1977, !1977, !2169, !2169}
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2458, file: !2456, line: 137, baseType: !2499, size: 64, offset: 768)
!2499 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2456, line: 83, baseType: !2500)
!2500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2501, size: 64)
!2501 = !DISubroutineType(types: !2502)
!2502 = !{null, !1977, !1977}
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2458, file: !2456, line: 141, baseType: !7, size: 32, offset: 832)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2452, file: !2363, line: 48, baseType: !2505, size: 64, offset: 64)
!2505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2506, size: 64)
!2506 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !1458, line: 35, baseType: !2507)
!2507 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !1458, line: 35, size: 128, elements: !2508)
!2508 = !{!2509}
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2507, file: !1458, line: 35, baseType: !2510, size: 128)
!2510 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !1458, line: 33, baseType: !2511)
!2511 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !1458, line: 33, size: 128, elements: !2512)
!2512 = !{!2513, !2514, !2515}
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2511, file: !1458, line: 33, baseType: !7, size: 32)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2511, file: !1458, line: 33, baseType: !7, size: 32, offset: 32)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2511, file: !1458, line: 33, baseType: !2516, size: 64, offset: 64)
!2516 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2024, size: 64, elements: !1796)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2452, file: !2363, line: 51, baseType: !2518, size: 64, offset: 128)
!2518 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2519, size: 64)
!2519 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !2520)
!2520 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !2521)
!2521 = !{!2522}
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2520, file: !135, line: 183, baseType: !2523, size: 128)
!2523 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !2524)
!2524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !2525)
!2525 = !{!2526, !2527, !2528}
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2524, file: !135, line: 182, baseType: !7, size: 32)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2524, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2524, file: !135, line: 182, baseType: !2077, size: 64, offset: 64)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2452, file: !2363, line: 54, baseType: !1696, size: 64, offset: 192)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2452, file: !2363, line: 57, baseType: !2531, size: 128, offset: 256)
!2531 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2532, line: 31, size: 128, elements: !2533)
!2532 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2533 = !{!2534, !2535, !2536, !2537, !2538, !2539, !2540}
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2531, file: !2532, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2531, file: !2532, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2531, file: !2532, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2531, file: !2532, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2531, file: !2532, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2531, file: !2532, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2531, file: !2532, line: 56, baseType: !2541, size: 64, offset: 64)
!2541 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1697, line: 47, baseType: !1925)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2452, file: !2363, line: 60, baseType: !2531, size: 128, offset: 384)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2452, file: !2363, line: 64, baseType: !2544, size: 64, offset: 512)
!2544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2545, size: 64)
!2545 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2546, line: 33, flags: DIFlagFwdDecl)
!2546 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2452, file: !2363, line: 67, baseType: !1696, size: 64, offset: 576)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2452, file: !2363, line: 73, baseType: !2455, size: 64, offset: 640)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2452, file: !2363, line: 77, baseType: !2541, size: 64, offset: 704)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2452, file: !2363, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2452, file: !2363, line: 82, baseType: !2552, size: 320, offset: 832)
!2552 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1679, line: 62, size: 320, elements: !2553)
!2553 = !{!2554, !2560, !2561, !2562, !2563, !2564}
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2552, file: !1679, line: 63, baseType: !2555, size: 64)
!2555 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2556, size: 64)
!2556 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1679, line: 56, size: 128, elements: !2557)
!2557 = !{!2558, !2559}
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2556, file: !1679, line: 57, baseType: !2555, size: 64)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2556, file: !1679, line: 58, baseType: !1794, size: 8, offset: 64)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2552, file: !1679, line: 64, baseType: !7, size: 32, offset: 64)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2552, file: !1679, line: 66, baseType: !7, size: 32, offset: 96)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2552, file: !1679, line: 68, baseType: !1815, size: 8, offset: 128)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2552, file: !1679, line: 70, baseType: !2053, size: 64, offset: 192)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2552, file: !1679, line: 71, baseType: !2060, size: 64, offset: 256)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2412, file: !2413, line: 476, baseType: !2566, size: 64, offset: 256)
!2566 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2567, size: 64)
!2567 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2413, line: 476, flags: DIFlagFwdDecl)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2412, file: !2413, line: 479, baseType: !2455, size: 64, offset: 320)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2412, file: !2413, line: 484, baseType: !1696, size: 64, offset: 384)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2412, file: !2413, line: 488, baseType: !1696, size: 64, offset: 448)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2412, file: !2413, line: 493, baseType: !1696, size: 64, offset: 512)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2412, file: !2413, line: 496, baseType: !1696, size: 64, offset: 576)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2412, file: !2413, line: 501, baseType: !2574, size: 64, offset: 640)
!2574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2575, size: 64)
!2575 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !341, line: 2355, size: 576, elements: !2576)
!2576 = !{!2577, !2580, !2581, !2582, !2583, !2585, !2586, !2591, !2592, !2593, !2594, !2595, !2596}
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2575, file: !341, line: 2356, baseType: !2578, size: 64)
!2578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2579, size: 64)
!2579 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !341, line: 2356, flags: DIFlagFwdDecl)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2575, file: !341, line: 2357, baseType: !1897, size: 64, offset: 64)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2575, file: !341, line: 2358, baseType: !1693, size: 32, offset: 128)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2575, file: !341, line: 2359, baseType: !1693, size: 32, offset: 160)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2575, file: !341, line: 2360, baseType: !2584, size: 128, offset: 192)
!2584 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1693, size: 128, elements: !1966)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2575, file: !341, line: 2364, baseType: !1693, size: 32, offset: 320)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2575, file: !341, line: 2367, baseType: !2587, size: 128, offset: 384)
!2587 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !341, line: 2349, size: 128, elements: !2588)
!2588 = !{!2589, !2590}
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2587, file: !341, line: 2351, baseType: !1871, size: 64)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2587, file: !341, line: 2352, baseType: !1752, size: 64, offset: 64)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2575, file: !341, line: 2371, baseType: !340, size: 32, offset: 512)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2575, file: !341, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2575, file: !341, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2575, file: !341, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2575, file: !341, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2575, file: !341, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2412, file: !2413, line: 504, baseType: !2598, size: 64, offset: 704)
!2598 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2599, size: 64)
!2599 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2413, line: 504, flags: DIFlagFwdDecl)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2412, file: !2413, line: 507, baseType: !2455, size: 64, offset: 768)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2412, file: !2413, line: 510, baseType: !1693, size: 32, offset: 832)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2412, file: !2413, line: 513, baseType: !1693, size: 32, offset: 864)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2412, file: !2413, line: 516, baseType: !1823, size: 32, offset: 896)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2412, file: !2413, line: 519, baseType: !1823, size: 32, offset: 928)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2412, file: !2413, line: 522, baseType: !7, size: 32, offset: 960)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2412, file: !2413, line: 523, baseType: !7, size: 32, offset: 992)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2412, file: !2413, line: 528, baseType: !1897, size: 64, offset: 1024)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2412, file: !2413, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2412, file: !2413, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2412, file: !2413, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2412, file: !2413, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2412, file: !2413, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2412, file: !2413, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2412, file: !2413, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2412, file: !2413, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2412, file: !2413, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2412, file: !2413, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2412, file: !2413, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2412, file: !2413, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2412, file: !2413, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2412, file: !2413, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2412, file: !2413, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2412, file: !2413, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2407, file: !135, line: 3254, baseType: !1696, size: 64, offset: 1536)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2407, file: !135, line: 3257, baseType: !1696, size: 64, offset: 1600)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2407, file: !135, line: 3258, baseType: !1696, size: 64, offset: 1664)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2407, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2407, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2407, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2407, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2407, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2407, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2407, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2407, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2407, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2407, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2407, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2407, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2407, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2407, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2407, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2407, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2407, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2407, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1699, file: !135, line: 3394, baseType: !2646, size: 1344)
!2646 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2647)
!2647 = !{!2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670, !2671, !2672, !2673, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689}
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2646, file: !135, line: 2280, baseType: !1735, size: 192)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2646, file: !135, line: 2281, baseType: !1696, size: 64, offset: 192)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2646, file: !135, line: 2282, baseType: !1696, size: 64, offset: 256)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2646, file: !135, line: 2283, baseType: !1696, size: 64, offset: 320)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2646, file: !135, line: 2284, baseType: !1696, size: 64, offset: 384)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2646, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2646, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2646, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2646, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2646, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2646, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2646, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2646, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2646, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2646, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2646, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2646, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2646, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2646, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2646, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2646, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2646, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2646, file: !135, line: 2306, baseType: !2280, size: 32, offset: 544)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2646, file: !135, line: 2307, baseType: !1696, size: 64, offset: 576)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2646, file: !135, line: 2308, baseType: !1696, size: 64, offset: 640)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2646, file: !135, line: 2314, baseType: !2674, size: 64, offset: 704)
!2674 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2675)
!2675 = !{!2676, !2677, !2678}
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2674, file: !135, line: 2310, baseType: !1693, size: 32)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2674, file: !135, line: 2311, baseType: !1897, size: 64)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2674, file: !135, line: 2312, baseType: !2679, size: 64)
!2679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2680, size: 64)
!2680 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2646, file: !135, line: 2315, baseType: !1696, size: 64, offset: 768)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2646, file: !135, line: 2316, baseType: !1696, size: 64, offset: 832)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2646, file: !135, line: 2317, baseType: !1696, size: 64, offset: 896)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2646, file: !135, line: 2318, baseType: !1696, size: 64, offset: 960)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2646, file: !135, line: 2319, baseType: !1696, size: 64, offset: 1024)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2646, file: !135, line: 2320, baseType: !1696, size: 64, offset: 1088)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2646, file: !135, line: 2321, baseType: !1696, size: 64, offset: 1152)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2646, file: !135, line: 2322, baseType: !1696, size: 64, offset: 1216)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2646, file: !135, line: 2324, baseType: !2690, size: 64, offset: 1280)
!2690 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2691, size: 64)
!2691 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1699, file: !135, line: 3395, baseType: !2693, size: 320)
!2693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2694)
!2694 = !{!2695, !2696, !2697}
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2693, file: !135, line: 1470, baseType: !1735, size: 192)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2693, file: !135, line: 1471, baseType: !1696, size: 64, offset: 192)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2693, file: !135, line: 1472, baseType: !1696, size: 64, offset: 256)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1699, file: !135, line: 3396, baseType: !2699, size: 320)
!2699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2700)
!2700 = !{!2701, !2702, !2703}
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2699, file: !135, line: 1483, baseType: !1735, size: 192)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2699, file: !135, line: 1484, baseType: !1693, size: 32, offset: 192)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2699, file: !135, line: 1485, baseType: !2077, size: 64, offset: 256)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1699, file: !135, line: 3397, baseType: !2705, size: 384)
!2705 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2706)
!2706 = !{!2707, !2708, !2709, !2710}
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2705, file: !135, line: 1830, baseType: !1735, size: 192)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2705, file: !135, line: 1831, baseType: !1823, size: 32, offset: 192)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2705, file: !135, line: 1832, baseType: !1696, size: 64, offset: 256)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2705, file: !135, line: 1835, baseType: !2077, size: 64, offset: 320)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1699, file: !135, line: 3398, baseType: !2712, size: 704)
!2712 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2713)
!2713 = !{!2714, !2715, !2716, !2717, !2718, !2723}
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2712, file: !135, line: 1899, baseType: !1735, size: 192)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2712, file: !135, line: 1902, baseType: !1696, size: 64, offset: 192)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2712, file: !135, line: 1905, baseType: !2024, size: 64, offset: 256)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2712, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2712, file: !135, line: 1911, baseType: !2719, size: 64, offset: 384)
!2719 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2720, size: 64)
!2720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2363, line: 117, size: 128, elements: !2721)
!2721 = !{!2722}
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2720, file: !2363, line: 120, baseType: !2531, size: 128)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2712, file: !135, line: 1914, baseType: !2065, size: 256, offset: 448)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1699, file: !135, line: 3399, baseType: !2725, size: 704)
!2725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2726)
!2726 = !{!2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737}
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2725, file: !135, line: 2009, baseType: !1735, size: 192)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2725, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2725, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2725, file: !135, line: 2014, baseType: !1823, size: 32, offset: 224)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2725, file: !135, line: 2016, baseType: !1696, size: 64, offset: 256)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2725, file: !135, line: 2017, baseType: !2518, size: 64, offset: 320)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2725, file: !135, line: 2019, baseType: !1696, size: 64, offset: 384)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2725, file: !135, line: 2020, baseType: !1696, size: 64, offset: 448)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2725, file: !135, line: 2021, baseType: !1696, size: 64, offset: 512)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2725, file: !135, line: 2022, baseType: !1696, size: 64, offset: 576)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2725, file: !135, line: 2023, baseType: !1696, size: 64, offset: 640)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1699, file: !135, line: 3400, baseType: !2739, size: 832)
!2739 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2740)
!2740 = !{!2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750}
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2739, file: !135, line: 2431, baseType: !1735, size: 192)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2739, file: !135, line: 2433, baseType: !1696, size: 64, offset: 192)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2739, file: !135, line: 2434, baseType: !1696, size: 64, offset: 256)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2739, file: !135, line: 2435, baseType: !1696, size: 64, offset: 320)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2739, file: !135, line: 2436, baseType: !1696, size: 64, offset: 384)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2739, file: !135, line: 2437, baseType: !2518, size: 64, offset: 448)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2739, file: !135, line: 2438, baseType: !1696, size: 64, offset: 512)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2739, file: !135, line: 2440, baseType: !1696, size: 64, offset: 576)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2739, file: !135, line: 2441, baseType: !1696, size: 64, offset: 640)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2739, file: !135, line: 2443, baseType: !2751, size: 128, offset: 704)
!2751 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2752)
!2752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2753)
!2753 = !{!2754}
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2752, file: !135, line: 182, baseType: !2523, size: 128)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1699, file: !135, line: 3401, baseType: !2756, size: 320)
!2756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2757)
!2757 = !{!2758, !2759, !2766}
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2756, file: !135, line: 3329, baseType: !1735, size: 192)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2756, file: !135, line: 3330, baseType: !2760, size: 64, offset: 192)
!2760 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2761, size: 64)
!2761 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2762)
!2762 = !{!2763, !2764, !2765}
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2761, file: !135, line: 3322, baseType: !2760, size: 64)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2761, file: !135, line: 3323, baseType: !2760, size: 64, offset: 64)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2761, file: !135, line: 3324, baseType: !1696, size: 64, offset: 128)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2756, file: !135, line: 3331, baseType: !2760, size: 64, offset: 256)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1699, file: !135, line: 3402, baseType: !2768, size: 256)
!2768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2769)
!2769 = !{!2770, !2771}
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2768, file: !135, line: 1541, baseType: !1735, size: 192)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2768, file: !135, line: 1542, baseType: !2772, size: 64, offset: 192)
!2772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2773, size: 64)
!2773 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2774)
!2774 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2775)
!2775 = !{!2776}
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2774, file: !135, line: 1538, baseType: !2777, size: 192)
!2777 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2778)
!2778 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2779)
!2779 = !{!2780, !2781, !2782}
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2778, file: !135, line: 1537, baseType: !7, size: 32)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2778, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2778, file: !135, line: 1537, baseType: !2783, size: 128, offset: 64)
!2783 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2784, size: 128, elements: !1796)
!2784 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2785)
!2785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2786)
!2786 = !{!2787, !2788}
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2785, file: !135, line: 1533, baseType: !1696, size: 64)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2785, file: !135, line: 1534, baseType: !1696, size: 64, offset: 64)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1699, file: !135, line: 3403, baseType: !2790, size: 512)
!2790 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2791)
!2791 = !{!2792, !2793, !2794, !2795, !2801, !2802, !2803}
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2790, file: !135, line: 1939, baseType: !1735, size: 192)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2790, file: !135, line: 1940, baseType: !1823, size: 32, offset: 192)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2790, file: !135, line: 1941, baseType: !345, size: 32, offset: 224)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2790, file: !135, line: 1946, baseType: !2796, size: 32, offset: 256)
!2796 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2797)
!2797 = !{!2798, !2799, !2800}
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2796, file: !135, line: 1943, baseType: !363, size: 32)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2796, file: !135, line: 1944, baseType: !370, size: 32)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2796, file: !135, line: 1945, baseType: !134, size: 32)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2790, file: !135, line: 1950, baseType: !2014, size: 64, offset: 320)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2790, file: !135, line: 1951, baseType: !2014, size: 64, offset: 384)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2790, file: !135, line: 1953, baseType: !2077, size: 64, offset: 448)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1699, file: !135, line: 3404, baseType: !2805, size: 1664)
!2805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2806)
!2806 = !{!2807, !2808}
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2805, file: !135, line: 3338, baseType: !1735, size: 192)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2805, file: !135, line: 3341, baseType: !2809, size: 1472, offset: 192)
!2809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2810, line: 410, size: 1472, elements: !2811)
!2810 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2811 = !{!2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975}
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2809, file: !2810, line: 412, baseType: !1693, size: 32)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2809, file: !2810, line: 413, baseType: !1693, size: 32, offset: 32)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2809, file: !2810, line: 414, baseType: !1693, size: 32, offset: 64)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2809, file: !2810, line: 415, baseType: !1693, size: 32, offset: 96)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2809, file: !2810, line: 416, baseType: !1693, size: 32, offset: 128)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2809, file: !2810, line: 417, baseType: !1693, size: 32, offset: 160)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2809, file: !2810, line: 418, baseType: !1815, size: 8, offset: 192)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2809, file: !2810, line: 419, baseType: !1815, size: 8, offset: 200)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2809, file: !2810, line: 420, baseType: !2821, size: 8, offset: 208)
!2821 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2809, file: !2810, line: 421, baseType: !2821, size: 8, offset: 216)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2809, file: !2810, line: 422, baseType: !2821, size: 8, offset: 224)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2809, file: !2810, line: 423, baseType: !2821, size: 8, offset: 232)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2809, file: !2810, line: 424, baseType: !2821, size: 8, offset: 240)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2809, file: !2810, line: 425, baseType: !2821, size: 8, offset: 248)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2809, file: !2810, line: 426, baseType: !2821, size: 8, offset: 256)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2809, file: !2810, line: 427, baseType: !2821, size: 8, offset: 264)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2809, file: !2810, line: 428, baseType: !2821, size: 8, offset: 272)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2809, file: !2810, line: 429, baseType: !2821, size: 8, offset: 280)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2809, file: !2810, line: 430, baseType: !2821, size: 8, offset: 288)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2809, file: !2810, line: 431, baseType: !2821, size: 8, offset: 296)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2809, file: !2810, line: 432, baseType: !2821, size: 8, offset: 304)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2809, file: !2810, line: 433, baseType: !2821, size: 8, offset: 312)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2809, file: !2810, line: 434, baseType: !2821, size: 8, offset: 320)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2809, file: !2810, line: 435, baseType: !2821, size: 8, offset: 328)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2809, file: !2810, line: 436, baseType: !2821, size: 8, offset: 336)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2809, file: !2810, line: 437, baseType: !2821, size: 8, offset: 344)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2809, file: !2810, line: 438, baseType: !2821, size: 8, offset: 352)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2809, file: !2810, line: 439, baseType: !2821, size: 8, offset: 360)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2809, file: !2810, line: 440, baseType: !2821, size: 8, offset: 368)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2809, file: !2810, line: 441, baseType: !2821, size: 8, offset: 376)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2809, file: !2810, line: 442, baseType: !2821, size: 8, offset: 384)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2809, file: !2810, line: 443, baseType: !2821, size: 8, offset: 392)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2809, file: !2810, line: 444, baseType: !2821, size: 8, offset: 400)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2809, file: !2810, line: 445, baseType: !2821, size: 8, offset: 408)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2809, file: !2810, line: 446, baseType: !2821, size: 8, offset: 416)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2809, file: !2810, line: 447, baseType: !2821, size: 8, offset: 424)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2809, file: !2810, line: 448, baseType: !2821, size: 8, offset: 432)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2809, file: !2810, line: 449, baseType: !2821, size: 8, offset: 440)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2809, file: !2810, line: 450, baseType: !2821, size: 8, offset: 448)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2809, file: !2810, line: 451, baseType: !2821, size: 8, offset: 456)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2809, file: !2810, line: 452, baseType: !2821, size: 8, offset: 464)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2809, file: !2810, line: 453, baseType: !2821, size: 8, offset: 472)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2809, file: !2810, line: 454, baseType: !2821, size: 8, offset: 480)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2809, file: !2810, line: 455, baseType: !2821, size: 8, offset: 488)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2809, file: !2810, line: 456, baseType: !2821, size: 8, offset: 496)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2809, file: !2810, line: 457, baseType: !2821, size: 8, offset: 504)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2809, file: !2810, line: 458, baseType: !2821, size: 8, offset: 512)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2809, file: !2810, line: 459, baseType: !2821, size: 8, offset: 520)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2809, file: !2810, line: 460, baseType: !2821, size: 8, offset: 528)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2809, file: !2810, line: 461, baseType: !2821, size: 8, offset: 536)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2809, file: !2810, line: 462, baseType: !2821, size: 8, offset: 544)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2809, file: !2810, line: 463, baseType: !2821, size: 8, offset: 552)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2809, file: !2810, line: 464, baseType: !2821, size: 8, offset: 560)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2809, file: !2810, line: 465, baseType: !2821, size: 8, offset: 568)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2809, file: !2810, line: 466, baseType: !2821, size: 8, offset: 576)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2809, file: !2810, line: 467, baseType: !2821, size: 8, offset: 584)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2809, file: !2810, line: 468, baseType: !2821, size: 8, offset: 592)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2809, file: !2810, line: 469, baseType: !2821, size: 8, offset: 600)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2809, file: !2810, line: 470, baseType: !2821, size: 8, offset: 608)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2809, file: !2810, line: 471, baseType: !2821, size: 8, offset: 616)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2809, file: !2810, line: 472, baseType: !2821, size: 8, offset: 624)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2809, file: !2810, line: 473, baseType: !2821, size: 8, offset: 632)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2809, file: !2810, line: 474, baseType: !2821, size: 8, offset: 640)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2809, file: !2810, line: 475, baseType: !2821, size: 8, offset: 648)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2809, file: !2810, line: 476, baseType: !2821, size: 8, offset: 656)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2809, file: !2810, line: 477, baseType: !2821, size: 8, offset: 664)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2809, file: !2810, line: 478, baseType: !2821, size: 8, offset: 672)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2809, file: !2810, line: 479, baseType: !2821, size: 8, offset: 680)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2809, file: !2810, line: 480, baseType: !2821, size: 8, offset: 688)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2809, file: !2810, line: 481, baseType: !2821, size: 8, offset: 696)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2809, file: !2810, line: 482, baseType: !2821, size: 8, offset: 704)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2809, file: !2810, line: 483, baseType: !2821, size: 8, offset: 712)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2809, file: !2810, line: 484, baseType: !2821, size: 8, offset: 720)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2809, file: !2810, line: 485, baseType: !2821, size: 8, offset: 728)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2809, file: !2810, line: 486, baseType: !2821, size: 8, offset: 736)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2809, file: !2810, line: 487, baseType: !2821, size: 8, offset: 744)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2809, file: !2810, line: 488, baseType: !2821, size: 8, offset: 752)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2809, file: !2810, line: 489, baseType: !2821, size: 8, offset: 760)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2809, file: !2810, line: 490, baseType: !2821, size: 8, offset: 768)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2809, file: !2810, line: 491, baseType: !2821, size: 8, offset: 776)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2809, file: !2810, line: 492, baseType: !2821, size: 8, offset: 784)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2809, file: !2810, line: 493, baseType: !2821, size: 8, offset: 792)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2809, file: !2810, line: 494, baseType: !2821, size: 8, offset: 800)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2809, file: !2810, line: 495, baseType: !2821, size: 8, offset: 808)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2809, file: !2810, line: 496, baseType: !2821, size: 8, offset: 816)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2809, file: !2810, line: 497, baseType: !2821, size: 8, offset: 824)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2809, file: !2810, line: 498, baseType: !2821, size: 8, offset: 832)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2809, file: !2810, line: 499, baseType: !2821, size: 8, offset: 840)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2809, file: !2810, line: 500, baseType: !2821, size: 8, offset: 848)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2809, file: !2810, line: 501, baseType: !2821, size: 8, offset: 856)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2809, file: !2810, line: 502, baseType: !2821, size: 8, offset: 864)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2809, file: !2810, line: 503, baseType: !2821, size: 8, offset: 872)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2809, file: !2810, line: 504, baseType: !2821, size: 8, offset: 880)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2809, file: !2810, line: 505, baseType: !2821, size: 8, offset: 888)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2809, file: !2810, line: 506, baseType: !2821, size: 8, offset: 896)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2809, file: !2810, line: 507, baseType: !2821, size: 8, offset: 904)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2809, file: !2810, line: 508, baseType: !2821, size: 8, offset: 912)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2809, file: !2810, line: 509, baseType: !2821, size: 8, offset: 920)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2809, file: !2810, line: 510, baseType: !2821, size: 8, offset: 928)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2809, file: !2810, line: 511, baseType: !2821, size: 8, offset: 936)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2809, file: !2810, line: 512, baseType: !2821, size: 8, offset: 944)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2809, file: !2810, line: 513, baseType: !2821, size: 8, offset: 952)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2809, file: !2810, line: 514, baseType: !2821, size: 8, offset: 960)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2809, file: !2810, line: 515, baseType: !2821, size: 8, offset: 968)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2809, file: !2810, line: 516, baseType: !2821, size: 8, offset: 976)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2809, file: !2810, line: 517, baseType: !2821, size: 8, offset: 984)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2809, file: !2810, line: 518, baseType: !2821, size: 8, offset: 992)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2809, file: !2810, line: 519, baseType: !2821, size: 8, offset: 1000)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2809, file: !2810, line: 520, baseType: !2821, size: 8, offset: 1008)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2809, file: !2810, line: 521, baseType: !2821, size: 8, offset: 1016)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2809, file: !2810, line: 522, baseType: !2821, size: 8, offset: 1024)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2809, file: !2810, line: 523, baseType: !2821, size: 8, offset: 1032)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2809, file: !2810, line: 524, baseType: !2821, size: 8, offset: 1040)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2809, file: !2810, line: 525, baseType: !2821, size: 8, offset: 1048)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2809, file: !2810, line: 526, baseType: !2821, size: 8, offset: 1056)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2809, file: !2810, line: 527, baseType: !2821, size: 8, offset: 1064)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2809, file: !2810, line: 528, baseType: !2821, size: 8, offset: 1072)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2809, file: !2810, line: 529, baseType: !2821, size: 8, offset: 1080)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2809, file: !2810, line: 530, baseType: !2821, size: 8, offset: 1088)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2809, file: !2810, line: 531, baseType: !2821, size: 8, offset: 1096)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2809, file: !2810, line: 532, baseType: !2821, size: 8, offset: 1104)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2809, file: !2810, line: 533, baseType: !2821, size: 8, offset: 1112)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2809, file: !2810, line: 534, baseType: !2821, size: 8, offset: 1120)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2809, file: !2810, line: 535, baseType: !2821, size: 8, offset: 1128)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2809, file: !2810, line: 536, baseType: !2821, size: 8, offset: 1136)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2809, file: !2810, line: 537, baseType: !2821, size: 8, offset: 1144)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2809, file: !2810, line: 538, baseType: !2821, size: 8, offset: 1152)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2809, file: !2810, line: 539, baseType: !2821, size: 8, offset: 1160)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2809, file: !2810, line: 540, baseType: !2821, size: 8, offset: 1168)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2809, file: !2810, line: 541, baseType: !2821, size: 8, offset: 1176)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2809, file: !2810, line: 542, baseType: !2821, size: 8, offset: 1184)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2809, file: !2810, line: 543, baseType: !2821, size: 8, offset: 1192)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2809, file: !2810, line: 544, baseType: !2821, size: 8, offset: 1200)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2809, file: !2810, line: 545, baseType: !2821, size: 8, offset: 1208)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2809, file: !2810, line: 546, baseType: !2821, size: 8, offset: 1216)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2809, file: !2810, line: 547, baseType: !2821, size: 8, offset: 1224)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2809, file: !2810, line: 548, baseType: !2821, size: 8, offset: 1232)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2809, file: !2810, line: 549, baseType: !2821, size: 8, offset: 1240)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2809, file: !2810, line: 550, baseType: !2821, size: 8, offset: 1248)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2809, file: !2810, line: 551, baseType: !2821, size: 8, offset: 1256)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2809, file: !2810, line: 552, baseType: !2821, size: 8, offset: 1264)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2809, file: !2810, line: 553, baseType: !2821, size: 8, offset: 1272)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2809, file: !2810, line: 554, baseType: !2821, size: 8, offset: 1280)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2809, file: !2810, line: 555, baseType: !2821, size: 8, offset: 1288)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2809, file: !2810, line: 556, baseType: !2821, size: 8, offset: 1296)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2809, file: !2810, line: 557, baseType: !2821, size: 8, offset: 1304)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2809, file: !2810, line: 558, baseType: !2821, size: 8, offset: 1312)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2809, file: !2810, line: 559, baseType: !2821, size: 8, offset: 1320)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2809, file: !2810, line: 560, baseType: !2821, size: 8, offset: 1328)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2809, file: !2810, line: 561, baseType: !2821, size: 8, offset: 1336)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2809, file: !2810, line: 562, baseType: !2821, size: 8, offset: 1344)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2809, file: !2810, line: 563, baseType: !2821, size: 8, offset: 1352)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2809, file: !2810, line: 564, baseType: !2821, size: 8, offset: 1360)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2809, file: !2810, line: 565, baseType: !2821, size: 8, offset: 1368)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2809, file: !2810, line: 566, baseType: !2821, size: 8, offset: 1376)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2809, file: !2810, line: 567, baseType: !2821, size: 8, offset: 1384)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2809, file: !2810, line: 568, baseType: !2821, size: 8, offset: 1392)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2809, file: !2810, line: 569, baseType: !2821, size: 8, offset: 1400)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2809, file: !2810, line: 570, baseType: !2821, size: 8, offset: 1408)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2809, file: !2810, line: 571, baseType: !2821, size: 8, offset: 1416)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2809, file: !2810, line: 572, baseType: !2821, size: 8, offset: 1424)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2809, file: !2810, line: 573, baseType: !2821, size: 8, offset: 1432)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2809, file: !2810, line: 574, baseType: !2821, size: 8, offset: 1440)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1699, file: !135, line: 3405, baseType: !2977, size: 384)
!2977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2978)
!2978 = !{!2979, !2980}
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2977, file: !135, line: 3353, baseType: !1735, size: 192)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2977, file: !135, line: 3356, baseType: !2981, size: 192, offset: 192)
!2981 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2810, line: 578, size: 192, elements: !2982)
!2982 = !{!2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993}
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2981, file: !2810, line: 580, baseType: !1693, size: 32)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2981, file: !2810, line: 581, baseType: !1693, size: 32, offset: 32)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2981, file: !2810, line: 582, baseType: !1693, size: 32, offset: 64)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2981, file: !2810, line: 583, baseType: !1693, size: 32, offset: 96)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2981, file: !2810, line: 584, baseType: !1815, size: 8, offset: 128)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2981, file: !2810, line: 585, baseType: !1815, size: 8, offset: 136)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2981, file: !2810, line: 586, baseType: !1815, size: 8, offset: 144)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2981, file: !2810, line: 587, baseType: !1815, size: 8, offset: 152)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2981, file: !2810, line: 588, baseType: !1815, size: 8, offset: 160)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2981, file: !2810, line: 589, baseType: !1815, size: 8, offset: 168)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2981, file: !2810, line: 590, baseType: !1815, size: 8, offset: 176)
!2994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2995, size: 64)
!2995 = !DISubroutineType(types: !2996)
!2996 = !{!1977, !1752}
!2997 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2998, size: 64)
!2998 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2026)
!2999 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3000, size: 64)
!3000 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "access", file: !3, line: 120, size: 960, elements: !3001)
!3001 = !{!3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035}
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3000, file: !3, line: 125, baseType: !1752, size: 64)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3000, file: !3, line: 126, baseType: !1752, size: 64, offset: 64)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3000, file: !3, line: 127, baseType: !1696, size: 64, offset: 128)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3000, file: !3, line: 132, baseType: !1696, size: 64, offset: 192)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3000, file: !3, line: 134, baseType: !1696, size: 64, offset: 256)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3000, file: !3, line: 137, baseType: !2024, size: 64, offset: 320)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "next_grp", scope: !3000, file: !3, line: 140, baseType: !2999, size: 64, offset: 384)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "group_representative", scope: !3000, file: !3, line: 144, baseType: !2999, size: 64, offset: 448)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "first_child", scope: !3000, file: !3, line: 148, baseType: !2999, size: 64, offset: 512)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling", scope: !3000, file: !3, line: 153, baseType: !2999, size: 64, offset: 576)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "first_link", scope: !3000, file: !3, line: 157, baseType: !3013, size: 64, offset: 640)
!3013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3014, size: 64)
!3014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "assign_link", file: !3, line: 237, size: 192, elements: !3015)
!3015 = !{!3016, !3017, !3018}
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "lacc", scope: !3014, file: !3, line: 239, baseType: !2999, size: 64)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "racc", scope: !3014, file: !3, line: 239, baseType: !2999, size: 64, offset: 64)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3014, file: !3, line: 240, baseType: !3013, size: 64, offset: 128)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "last_link", scope: !3000, file: !3, line: 157, baseType: !3013, size: 64, offset: 704)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "next_queued", scope: !3000, file: !3, line: 160, baseType: !2999, size: 64, offset: 768)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "replacement_decl", scope: !3000, file: !3, line: 165, baseType: !1696, size: 64, offset: 832)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "write", scope: !3000, file: !3, line: 168, baseType: !7, size: 1, offset: 896, flags: DIFlagBitField, extraData: i64 896)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "total_scalarization", scope: !3000, file: !3, line: 172, baseType: !7, size: 1, offset: 897, flags: DIFlagBitField, extraData: i64 896)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "grp_queued", scope: !3000, file: !3, line: 175, baseType: !7, size: 1, offset: 898, flags: DIFlagBitField, extraData: i64 896)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "grp_write", scope: !3000, file: !3, line: 179, baseType: !7, size: 1, offset: 899, flags: DIFlagBitField, extraData: i64 896)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "grp_read", scope: !3000, file: !3, line: 183, baseType: !7, size: 1, offset: 900, flags: DIFlagBitField, extraData: i64 896)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "grp_hint", scope: !3000, file: !3, line: 188, baseType: !7, size: 1, offset: 901, flags: DIFlagBitField, extraData: i64 896)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "grp_covered", scope: !3000, file: !3, line: 192, baseType: !7, size: 1, offset: 902, flags: DIFlagBitField, extraData: i64 896)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "grp_unscalarizable_region", scope: !3000, file: !3, line: 196, baseType: !7, size: 1, offset: 903, flags: DIFlagBitField, extraData: i64 896)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "grp_unscalarized_data", scope: !3000, file: !3, line: 201, baseType: !7, size: 1, offset: 904, flags: DIFlagBitField, extraData: i64 896)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "grp_partial_lhs", scope: !3000, file: !3, line: 205, baseType: !7, size: 1, offset: 905, flags: DIFlagBitField, extraData: i64 896)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "grp_to_be_replaced", scope: !3000, file: !3, line: 210, baseType: !7, size: 1, offset: 906, flags: DIFlagBitField, extraData: i64 896)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "grp_maybe_modified", scope: !3000, file: !3, line: 214, baseType: !7, size: 1, offset: 907, flags: DIFlagBitField, extraData: i64 896)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "grp_scalar_ptr", scope: !3000, file: !3, line: 219, baseType: !7, size: 1, offset: 908, flags: DIFlagBitField, extraData: i64 896)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "grp_not_necessarilly_dereferenced", scope: !3000, file: !3, line: 223, baseType: !7, size: 1, offset: 909, flags: DIFlagBitField, extraData: i64 896)
!3036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3037, size: 64)
!3037 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_access_p_heap", file: !3, line: 229, baseType: !3038)
!3038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_access_p_heap", file: !3, line: 229, size: 128, elements: !3039)
!3039 = !{!3040}
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3038, file: !3, line: 229, baseType: !3041, size: 128)
!3041 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_access_p_base", file: !3, line: 228, baseType: !3042)
!3042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_access_p_base", file: !3, line: 228, size: 128, elements: !3043)
!3043 = !{!3044, !3045, !3046}
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3042, file: !3, line: 228, baseType: !7, size: 32)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3042, file: !3, line: 228, baseType: !7, size: 32, offset: 32)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3042, file: !3, line: 228, baseType: !3047, size: 64, offset: 64)
!3047 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3048, size: 64, elements: !1796)
!3048 = !DIDerivedType(tag: DW_TAG_typedef, name: "access_p", file: !3, line: 226, baseType: !2999)
!3049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3050, size: 64)
!3050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3038, size: 64)
!3051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3036, size: 64)
!3052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3053, size: 64)
!3053 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3048)
!3054 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", file: !2170, line: 35, baseType: !1752)
!3055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1752, size: 64)
!3056 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1679, line: 30, baseType: !3057)
!3057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3058, size: 64)
!3058 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !2065)
!3059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3060, size: 64)
!3060 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_heap", file: !330, line: 283, baseType: !3061)
!3061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_heap", file: !330, line: 283, size: 128, elements: !3062)
!3062 = !{!3063}
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3061, file: !330, line: 283, baseType: !2431, size: 128)
!3064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3065, size: 64)
!3065 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_parm_adjustment_t_heap", file: !3066, line: 485, baseType: !3067)
!3066 = !DIFile(filename: "./ipa-prop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_parm_adjustment_t_heap", file: !3066, line: 485, size: 512, elements: !3068)
!3068 = !{!3069}
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3067, file: !3066, line: 485, baseType: !3070, size: 512)
!3070 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_parm_adjustment_t_base", file: !3066, line: 484, baseType: !3071)
!3071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_parm_adjustment_t_base", file: !3066, line: 484, size: 512, elements: !3072)
!3072 = !{!3073, !3074, !3075}
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3071, file: !3066, line: 484, baseType: !7, size: 32)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3071, file: !3066, line: 484, baseType: !7, size: 32, offset: 32)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3071, file: !3066, line: 484, baseType: !3076, size: 448, offset: 64)
!3076 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3077, size: 448, elements: !1796)
!3077 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_parm_adjustment_t", file: !3066, line: 483, baseType: !3078)
!3078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_parm_adjustment", file: !3066, line: 436, size: 448, elements: !3079)
!3079 = !{!3080, !3081, !3082, !3083, !3084, !3085, !3086, !3087, !3088, !3089}
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3078, file: !3066, line: 443, baseType: !1696, size: 64)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3078, file: !3066, line: 447, baseType: !1696, size: 64, offset: 64)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "reduction", scope: !3078, file: !3066, line: 452, baseType: !1696, size: 64, offset: 128)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "new_ssa_base", scope: !3078, file: !3066, line: 456, baseType: !1696, size: 64, offset: 192)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_value", scope: !3078, file: !3066, line: 460, baseType: !1696, size: 64, offset: 256)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3078, file: !3066, line: 464, baseType: !1752, size: 64, offset: 320)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !3078, file: !3066, line: 469, baseType: !1693, size: 32, offset: 384)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "copy_param", scope: !3078, file: !3066, line: 472, baseType: !7, size: 1, offset: 416, flags: DIFlagBitField, extraData: i64 416)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "remove_param", scope: !3078, file: !3066, line: 477, baseType: !7, size: 1, offset: 417, flags: DIFlagBitField, extraData: i64 416)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "by_ref", scope: !3078, file: !3066, line: 480, baseType: !7, size: 1, offset: 418, flags: DIFlagBitField, extraData: i64 416)
!3090 = !{!0, !3091, !3119, !3121, !3123, !3125, !3127, !3129, !3131, !3154, !3156, !3158, !3160, !3162, !3164, !3166, !3168, !3170, !3172, !3186}
!3091 = !DIGlobalVariableExpression(var: !3092, expr: !DIExpression())
!3092 = distinct !DIGlobalVariable(name: "pass_sra", scope: !2, file: !3, line: 2873, type: !3093, isLocal: false, isDefinition: true)
!3093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !391, line: 156, size: 640, elements: !3094)
!3094 = !{!3095}
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3093, file: !391, line: 158, baseType: !3096, size: 640)
!3096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !391, line: 114, size: 640, elements: !3097)
!3097 = !{!3098, !3099, !3100, !3104, !3108, !3110, !3111, !3112, !3114, !3115, !3116, !3117, !3118}
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3096, file: !391, line: 117, baseType: !390, size: 32)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3096, file: !391, line: 121, baseType: !1897, size: 64, offset: 64)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3096, file: !391, line: 125, baseType: !3101, size: 64, offset: 128)
!3101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3102, size: 64)
!3102 = !DISubroutineType(types: !3103)
!3103 = !{!1815}
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3096, file: !391, line: 130, baseType: !3105, size: 64, offset: 192)
!3105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3106, size: 64)
!3106 = !DISubroutineType(types: !3107)
!3107 = !{!7}
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3096, file: !391, line: 133, baseType: !3109, size: 64, offset: 256)
!3109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3096, size: 64)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3096, file: !391, line: 136, baseType: !3109, size: 64, offset: 320)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3096, file: !391, line: 139, baseType: !1693, size: 32, offset: 384)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3096, file: !391, line: 143, baseType: !3113, size: 32, offset: 416)
!3113 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !398, line: 80, baseType: !397)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3096, file: !391, line: 146, baseType: !7, size: 32, offset: 448)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3096, file: !391, line: 147, baseType: !7, size: 32, offset: 480)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3096, file: !391, line: 148, baseType: !7, size: 32, offset: 512)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3096, file: !391, line: 151, baseType: !7, size: 32, offset: 544)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3096, file: !391, line: 152, baseType: !7, size: 32, offset: 576)
!3119 = !DIGlobalVariableExpression(var: !3120, expr: !DIExpression())
!3120 = distinct !DIGlobalVariable(name: "pass_early_ipa_sra", scope: !2, file: !3, line: 4238, type: !3093, isLocal: false, isDefinition: true)
!3121 = !DIGlobalVariableExpression(var: !3122, expr: !DIExpression())
!3122 = distinct !DIGlobalVariable(name: "sra_mode", scope: !2, file: !3, line: 100, type: !573, isLocal: true, isDefinition: true)
!3123 = !DIGlobalVariableExpression(var: !3124, expr: !DIExpression())
!3124 = distinct !DIGlobalVariable(name: "candidate_bitmap", scope: !2, file: !3, line: 250, type: !2541, isLocal: true, isDefinition: true)
!3125 = !DIGlobalVariableExpression(var: !3126, expr: !DIExpression())
!3126 = distinct !DIGlobalVariable(name: "should_scalarize_away_bitmap", scope: !2, file: !3, line: 254, type: !2541, isLocal: true, isDefinition: true)
!3127 = !DIGlobalVariableExpression(var: !3128, expr: !DIExpression())
!3128 = distinct !DIGlobalVariable(name: "cannot_scalarize_away_bitmap", scope: !2, file: !3, line: 254, type: !2541, isLocal: true, isDefinition: true)
!3129 = !DIGlobalVariableExpression(var: !3130, expr: !DIExpression())
!3130 = distinct !DIGlobalVariable(name: "name_obstack", scope: !2, file: !3, line: 257, type: !1953, isLocal: true, isDefinition: true)
!3131 = !DIGlobalVariableExpression(var: !3132, expr: !DIExpression())
!3132 = distinct !DIGlobalVariable(name: "access_pool", scope: !2, file: !3, line: 232, type: !3133, isLocal: true, isDefinition: true)
!3133 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool", file: !3134, line: 58, baseType: !3135)
!3134 = !DIFile(filename: "./alloc-pool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3136, size: 64)
!3136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_def", file: !3134, line: 32, size: 704, elements: !3137)
!3137 = !{!3138, !3139, !3140, !3146, !3147, !3148, !3149, !3150, !3151, !3152, !3153}
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3136, file: !3134, line: 34, baseType: !1897, size: 64)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "elts_per_block", scope: !3136, file: !3134, line: 38, baseType: !2169, size: 64, offset: 64)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "returned_free_list", scope: !3136, file: !3134, line: 41, baseType: !3141, size: 64, offset: 128)
!3141 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool_list", file: !3134, line: 30, baseType: !3142)
!3142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3143, size: 64)
!3143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_list_def", file: !3134, line: 26, size: 64, elements: !3144)
!3144 = !{!3145}
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3143, file: !3134, line: 28, baseType: !3142, size: 64)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_free_list", scope: !3136, file: !3134, line: 45, baseType: !1962, size: 64, offset: 192)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_elts_remaining", scope: !3136, file: !3134, line: 49, baseType: !2169, size: 64, offset: 256)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "elts_allocated", scope: !3136, file: !3134, line: 51, baseType: !2169, size: 64, offset: 320)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "elts_free", scope: !3136, file: !3134, line: 52, baseType: !2169, size: 64, offset: 384)
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_allocated", scope: !3136, file: !3134, line: 53, baseType: !2169, size: 64, offset: 448)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "block_list", scope: !3136, file: !3134, line: 54, baseType: !3141, size: 64, offset: 512)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !3136, file: !3134, line: 55, baseType: !2169, size: 64, offset: 576)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !3136, file: !3134, line: 56, baseType: !2169, size: 64, offset: 640)
!3154 = !DIGlobalVariableExpression(var: !3155, expr: !DIExpression())
!3155 = distinct !DIGlobalVariable(name: "link_pool", scope: !2, file: !3, line: 244, type: !3133, isLocal: true, isDefinition: true)
!3156 = !DIGlobalVariableExpression(var: !3157, expr: !DIExpression())
!3157 = distinct !DIGlobalVariable(name: "base_access_vec", scope: !2, file: !3, line: 247, type: !2544, isLocal: true, isDefinition: true)
!3158 = !DIGlobalVariableExpression(var: !3159, expr: !DIExpression())
!3159 = distinct !DIGlobalVariable(name: "encountered_apply_args", scope: !2, file: !3, line: 268, type: !1815, isLocal: true, isDefinition: true)
!3160 = !DIGlobalVariableExpression(var: !3161, expr: !DIExpression())
!3161 = distinct !DIGlobalVariable(name: "encountered_recursive_call", scope: !2, file: !3, line: 271, type: !1815, isLocal: true, isDefinition: true)
!3162 = !DIGlobalVariableExpression(var: !3163, expr: !DIExpression())
!3163 = distinct !DIGlobalVariable(name: "encountered_unchangable_recursive_call", scope: !2, file: !3, line: 275, type: !1815, isLocal: true, isDefinition: true)
!3164 = !DIGlobalVariableExpression(var: !3165, expr: !DIExpression())
!3165 = distinct !DIGlobalVariable(name: "final_bbs", scope: !2, file: !3, line: 284, type: !2541, isLocal: true, isDefinition: true)
!3166 = !DIGlobalVariableExpression(var: !3167, expr: !DIExpression())
!3167 = distinct !DIGlobalVariable(name: "func_param_count", scope: !2, file: !3, line: 264, type: !1693, isLocal: true, isDefinition: true)
!3168 = !DIGlobalVariableExpression(var: !3169, expr: !DIExpression())
!3169 = distinct !DIGlobalVariable(name: "bb_dereferences", scope: !2, file: !3, line: 280, type: !3055, isLocal: true, isDefinition: true)
!3170 = !DIGlobalVariableExpression(var: !3171, expr: !DIExpression())
!3171 = distinct !DIGlobalVariable(name: "work_queue_head", scope: !2, file: !3, line: 261, type: !2999, isLocal: true, isDefinition: true)
!3172 = !DIGlobalVariableExpression(var: !3173, expr: !DIExpression())
!3173 = distinct !DIGlobalVariable(name: "sra_stats", scope: !2, file: !3, line: 340, type: !3174, isLocal: true, isDefinition: true)
!3174 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 301, size: 320, elements: !3175)
!3175 = !{!3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185}
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "replacements", scope: !3174, file: !3, line: 307, baseType: !1693, size: 32)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "exprs", scope: !3174, file: !3, line: 311, baseType: !1693, size: 32, offset: 32)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "subtree_copies", scope: !3174, file: !3, line: 314, baseType: !1693, size: 32, offset: 64)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "subreplacements", scope: !3174, file: !3, line: 317, baseType: !1693, size: 32, offset: 96)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "deleted", scope: !3174, file: !3, line: 320, baseType: !1693, size: 32, offset: 128)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "separate_lhs_rhs_handling", scope: !3174, file: !3, line: 325, baseType: !1693, size: 32, offset: 160)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "deleted_unused_parameters", scope: !3174, file: !3, line: 328, baseType: !1693, size: 32, offset: 192)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "scalar_by_ref_to_by_val", scope: !3174, file: !3, line: 332, baseType: !1693, size: 32, offset: 224)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "aggregate_params_reduced", scope: !3174, file: !3, line: 336, baseType: !1693, size: 32, offset: 256)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "param_reductions_created", scope: !3174, file: !3, line: 339, baseType: !1693, size: 32, offset: 288)
!3186 = !DIGlobalVariableExpression(var: !3187, expr: !DIExpression())
!3187 = distinct !DIGlobalVariable(name: "no_accesses_representant", scope: !2, file: !3, line: 287, type: !3000, isLocal: true, isDefinition: true)
!3188 = !{i32 7, !"Dwarf Version", i32 4}
!3189 = !{i32 2, !"Debug Info Version", i32 3}
!3190 = !{i32 1, !"wchar_size", i32 4}
!3191 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3192 = distinct !DISubprogram(name: "build_ref_for_offset", scope: !3, file: !3, line: 1481, type: !3193, scopeLine: 1483, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!3193 = !DISubroutineType(types: !3194)
!3194 = !{!1815, !2058, !1696, !1752, !1696, !1815}
!3195 = !{}
!3196 = !DILocalVariable(name: "expr", arg: 1, scope: !3192, file: !3, line: 1481, type: !2058)
!3197 = !DILocation(line: 1481, column: 29, scope: !3192)
!3198 = !DILocalVariable(name: "type", arg: 2, scope: !3192, file: !3, line: 1481, type: !1696)
!3199 = !DILocation(line: 1481, column: 40, scope: !3192)
!3200 = !DILocalVariable(name: "offset", arg: 3, scope: !3192, file: !3, line: 1481, type: !1752)
!3201 = !DILocation(line: 1481, column: 60, scope: !3192)
!3202 = !DILocalVariable(name: "exp_type", arg: 4, scope: !3192, file: !3, line: 1482, type: !1696)
!3203 = !DILocation(line: 1482, column: 14, scope: !3192)
!3204 = !DILocalVariable(name: "allow_ptr", arg: 5, scope: !3192, file: !3, line: 1482, type: !1815)
!3205 = !DILocation(line: 1482, column: 29, scope: !3192)
!3206 = !DILocalVariable(name: "loc", scope: !3192, file: !3, line: 1484, type: !1823)
!3207 = !DILocation(line: 1484, column: 14, scope: !3192)
!3208 = !DILocation(line: 1484, column: 20, scope: !3192)
!3209 = !DILocation(line: 1484, column: 27, scope: !3192)
!3210 = !DILocation(line: 1486, column: 7, scope: !3211)
!3211 = distinct !DILexicalBlock(scope: !3192, file: !3, line: 1486, column: 7)
!3212 = !DILocation(line: 1486, column: 7, scope: !3192)
!3213 = !DILocation(line: 1487, column: 28, scope: !3211)
!3214 = !DILocation(line: 1487, column: 27, scope: !3211)
!3215 = !DILocation(line: 1487, column: 13, scope: !3211)
!3216 = !DILocation(line: 1487, column: 6, scope: !3211)
!3217 = !DILocation(line: 1487, column: 11, scope: !3211)
!3218 = !DILocation(line: 1487, column: 5, scope: !3211)
!3219 = !DILocation(line: 1489, column: 7, scope: !3220)
!3220 = distinct !DILexicalBlock(scope: !3192, file: !3, line: 1489, column: 7)
!3221 = !DILocation(line: 1489, column: 17, scope: !3220)
!3222 = !DILocation(line: 1489, column: 20, scope: !3220)
!3223 = !DILocation(line: 1489, column: 7, scope: !3192)
!3224 = !DILocation(line: 1491, column: 14, scope: !3225)
!3225 = distinct !DILexicalBlock(scope: !3220, file: !3, line: 1490, column: 5)
!3226 = !DILocation(line: 1491, column: 12, scope: !3225)
!3227 = !DILocation(line: 1492, column: 11, scope: !3228)
!3228 = distinct !DILexicalBlock(scope: !3225, file: !3, line: 1492, column: 11)
!3229 = !DILocation(line: 1492, column: 11, scope: !3225)
!3230 = !DILocation(line: 1493, column: 10, scope: !3228)
!3231 = !DILocation(line: 1493, column: 3, scope: !3228)
!3232 = !DILocation(line: 1493, column: 8, scope: !3228)
!3233 = !DILocation(line: 1493, column: 2, scope: !3228)
!3234 = !DILocation(line: 1494, column: 5, scope: !3225)
!3235 = !DILocation(line: 1496, column: 34, scope: !3192)
!3236 = !DILocation(line: 1496, column: 40, scope: !3192)
!3237 = !DILocation(line: 1496, column: 46, scope: !3192)
!3238 = !DILocation(line: 1496, column: 54, scope: !3192)
!3239 = !DILocation(line: 1496, column: 10, scope: !3192)
!3240 = !DILocation(line: 1496, column: 3, scope: !3192)
!3241 = distinct !DISubprogram(name: "build_ref_for_offset_1", scope: !3, file: !3, line: 1378, type: !3242, scopeLine: 1380, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!3242 = !DISubroutineType(types: !3243)
!3243 = !{!1815, !2058, !1696, !1752, !1696}
!3244 = !DILocalVariable(name: "res", arg: 1, scope: !3241, file: !3, line: 1378, type: !2058)
!3245 = !DILocation(line: 1378, column: 31, scope: !3241)
!3246 = !DILocalVariable(name: "type", arg: 2, scope: !3241, file: !3, line: 1378, type: !1696)
!3247 = !DILocation(line: 1378, column: 41, scope: !3241)
!3248 = !DILocalVariable(name: "offset", arg: 3, scope: !3241, file: !3, line: 1378, type: !1752)
!3249 = !DILocation(line: 1378, column: 61, scope: !3241)
!3250 = !DILocalVariable(name: "exp_type", arg: 4, scope: !3241, file: !3, line: 1379, type: !1696)
!3251 = !DILocation(line: 1379, column: 9, scope: !3241)
!3252 = !DILocation(line: 1381, column: 3, scope: !3241)
!3253 = !DILocalVariable(name: "fld", scope: !3254, file: !3, line: 1383, type: !1696)
!3254 = distinct !DILexicalBlock(scope: !3241, file: !3, line: 1382, column: 5)
!3255 = !DILocation(line: 1383, column: 12, scope: !3254)
!3256 = !DILocalVariable(name: "tr_size", scope: !3254, file: !3, line: 1384, type: !1696)
!3257 = !DILocation(line: 1384, column: 12, scope: !3254)
!3258 = !DILocalVariable(name: "index", scope: !3254, file: !3, line: 1384, type: !1696)
!3259 = !DILocation(line: 1384, column: 21, scope: !3254)
!3260 = !DILocalVariable(name: "minidx", scope: !3254, file: !3, line: 1384, type: !1696)
!3261 = !DILocation(line: 1384, column: 28, scope: !3254)
!3262 = !DILocalVariable(name: "el_size", scope: !3254, file: !3, line: 1385, type: !1752)
!3263 = !DILocation(line: 1385, column: 21, scope: !3254)
!3264 = !DILocation(line: 1387, column: 11, scope: !3265)
!3265 = distinct !DILexicalBlock(scope: !3254, file: !3, line: 1387, column: 11)
!3266 = !DILocation(line: 1387, column: 18, scope: !3265)
!3267 = !DILocation(line: 1387, column: 23, scope: !3265)
!3268 = !DILocation(line: 1387, column: 26, scope: !3265)
!3269 = !DILocation(line: 1388, column: 4, scope: !3265)
!3270 = !DILocation(line: 1388, column: 27, scope: !3265)
!3271 = !DILocation(line: 1388, column: 37, scope: !3265)
!3272 = !DILocation(line: 1388, column: 7, scope: !3265)
!3273 = !DILocation(line: 1387, column: 11, scope: !3254)
!3274 = !DILocation(line: 1389, column: 2, scope: !3265)
!3275 = !DILocation(line: 1391, column: 15, scope: !3254)
!3276 = !DILocation(line: 1391, column: 7, scope: !3254)
!3277 = !DILocation(line: 1396, column: 15, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !3279, file: !3, line: 1396, column: 4)
!3279 = distinct !DILexicalBlock(scope: !3254, file: !3, line: 1392, column: 2)
!3280 = !DILocation(line: 1396, column: 13, scope: !3278)
!3281 = !DILocation(line: 1396, column: 9, scope: !3278)
!3282 = !DILocation(line: 1396, column: 35, scope: !3283)
!3283 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 1396, column: 4)
!3284 = !DILocation(line: 1396, column: 4, scope: !3278)
!3285 = !DILocalVariable(name: "pos", scope: !3286, file: !3, line: 1398, type: !1752)
!3286 = distinct !DILexicalBlock(scope: !3283, file: !3, line: 1397, column: 6)
!3287 = !DILocation(line: 1398, column: 22, scope: !3286)
!3288 = !DILocalVariable(name: "size", scope: !3286, file: !3, line: 1398, type: !1752)
!3289 = !DILocation(line: 1398, column: 27, scope: !3286)
!3290 = !DILocalVariable(name: "expr", scope: !3286, file: !3, line: 1399, type: !1696)
!3291 = !DILocation(line: 1399, column: 13, scope: !3286)
!3292 = !DILocalVariable(name: "expr_ptr", scope: !3286, file: !3, line: 1399, type: !2058)
!3293 = !DILocation(line: 1399, column: 20, scope: !3286)
!3294 = !DILocation(line: 1401, column: 12, scope: !3295)
!3295 = distinct !DILexicalBlock(scope: !3286, file: !3, line: 1401, column: 12)
!3296 = !DILocation(line: 1401, column: 28, scope: !3295)
!3297 = !DILocation(line: 1401, column: 12, scope: !3286)
!3298 = !DILocation(line: 1402, column: 3, scope: !3295)
!3299 = !DILocation(line: 1404, column: 32, scope: !3286)
!3300 = !DILocation(line: 1404, column: 14, scope: !3286)
!3301 = !DILocation(line: 1404, column: 12, scope: !3286)
!3302 = !DILocation(line: 1405, column: 8, scope: !3286)
!3303 = !DILocation(line: 1406, column: 18, scope: !3286)
!3304 = !DILocation(line: 1406, column: 16, scope: !3286)
!3305 = !DILocation(line: 1407, column: 13, scope: !3306)
!3306 = distinct !DILexicalBlock(scope: !3286, file: !3, line: 1407, column: 12)
!3307 = !DILocation(line: 1407, column: 21, scope: !3306)
!3308 = !DILocation(line: 1407, column: 40, scope: !3306)
!3309 = !DILocation(line: 1407, column: 25, scope: !3306)
!3310 = !DILocation(line: 1407, column: 12, scope: !3286)
!3311 = !DILocation(line: 1408, column: 3, scope: !3306)
!3312 = !DILocation(line: 1409, column: 29, scope: !3286)
!3313 = !DILocation(line: 1409, column: 15, scope: !3286)
!3314 = !DILocation(line: 1409, column: 13, scope: !3286)
!3315 = !DILocation(line: 1410, column: 12, scope: !3316)
!3316 = distinct !DILexicalBlock(scope: !3286, file: !3, line: 1410, column: 12)
!3317 = !DILocation(line: 1410, column: 17, scope: !3316)
!3318 = !DILocation(line: 1410, column: 12, scope: !3286)
!3319 = !DILocation(line: 1412, column: 9, scope: !3320)
!3320 = distinct !DILexicalBlock(scope: !3321, file: !3, line: 1412, column: 9)
!3321 = distinct !DILexicalBlock(scope: !3316, file: !3, line: 1411, column: 3)
!3322 = !DILocation(line: 1412, column: 16, scope: !3320)
!3323 = !DILocation(line: 1412, column: 13, scope: !3320)
!3324 = !DILocation(line: 1412, column: 9, scope: !3321)
!3325 = !DILocation(line: 1413, column: 7, scope: !3320)
!3326 = !DILocation(line: 1414, column: 3, scope: !3321)
!3327 = !DILocation(line: 1415, column: 17, scope: !3328)
!3328 = distinct !DILexicalBlock(scope: !3316, file: !3, line: 1415, column: 17)
!3329 = !DILocation(line: 1415, column: 23, scope: !3328)
!3330 = !DILocation(line: 1415, column: 21, scope: !3328)
!3331 = !DILocation(line: 1415, column: 30, scope: !3328)
!3332 = !DILocation(line: 1415, column: 34, scope: !3328)
!3333 = !DILocation(line: 1415, column: 40, scope: !3328)
!3334 = !DILocation(line: 1415, column: 38, scope: !3328)
!3335 = !DILocation(line: 1415, column: 49, scope: !3328)
!3336 = !DILocation(line: 1415, column: 46, scope: !3328)
!3337 = !DILocation(line: 1415, column: 17, scope: !3316)
!3338 = !DILocation(line: 1416, column: 3, scope: !3328)
!3339 = !DILocation(line: 1418, column: 12, scope: !3340)
!3340 = distinct !DILexicalBlock(scope: !3286, file: !3, line: 1418, column: 12)
!3341 = !DILocation(line: 1418, column: 12, scope: !3286)
!3342 = !DILocation(line: 1420, column: 12, scope: !3343)
!3343 = distinct !DILexicalBlock(scope: !3340, file: !3, line: 1419, column: 3)
!3344 = !DILocation(line: 1420, column: 10, scope: !3343)
!3345 = !DILocation(line: 1422, column: 14, scope: !3343)
!3346 = !DILocation(line: 1423, column: 3, scope: !3343)
!3347 = !DILocation(line: 1425, column: 12, scope: !3340)
!3348 = !DILocation(line: 1426, column: 36, scope: !3349)
!3349 = distinct !DILexicalBlock(scope: !3286, file: !3, line: 1426, column: 12)
!3350 = !DILocation(line: 1426, column: 46, scope: !3349)
!3351 = !DILocation(line: 1427, column: 8, scope: !3349)
!3352 = !DILocation(line: 1427, column: 17, scope: !3349)
!3353 = !DILocation(line: 1427, column: 15, scope: !3349)
!3354 = !DILocation(line: 1427, column: 22, scope: !3349)
!3355 = !DILocation(line: 1426, column: 12, scope: !3349)
!3356 = !DILocation(line: 1426, column: 12, scope: !3286)
!3357 = !DILocation(line: 1429, column: 9, scope: !3358)
!3358 = distinct !DILexicalBlock(scope: !3359, file: !3, line: 1429, column: 9)
!3359 = distinct !DILexicalBlock(scope: !3349, file: !3, line: 1428, column: 3)
!3360 = !DILocation(line: 1429, column: 9, scope: !3359)
!3361 = !DILocation(line: 1430, column: 14, scope: !3358)
!3362 = !DILocation(line: 1430, column: 8, scope: !3358)
!3363 = !DILocation(line: 1430, column: 12, scope: !3358)
!3364 = !DILocation(line: 1430, column: 7, scope: !3358)
!3365 = !DILocation(line: 1431, column: 5, scope: !3359)
!3366 = !DILocation(line: 1433, column: 6, scope: !3286)
!3367 = !DILocation(line: 1396, column: 46, scope: !3283)
!3368 = !DILocation(line: 1396, column: 44, scope: !3283)
!3369 = !DILocation(line: 1396, column: 4, scope: !3283)
!3370 = distinct !{!3370, !3284, !3371}
!3371 = !DILocation(line: 1433, column: 6, scope: !3278)
!3372 = !DILocation(line: 1434, column: 4, scope: !3279)
!3373 = !DILocation(line: 1437, column: 14, scope: !3279)
!3374 = !DILocation(line: 1437, column: 12, scope: !3279)
!3375 = !DILocation(line: 1438, column: 9, scope: !3376)
!3376 = distinct !DILexicalBlock(scope: !3279, file: !3, line: 1438, column: 8)
!3377 = !DILocation(line: 1438, column: 17, scope: !3376)
!3378 = !DILocation(line: 1438, column: 36, scope: !3376)
!3379 = !DILocation(line: 1438, column: 21, scope: !3376)
!3380 = !DILocation(line: 1438, column: 8, scope: !3279)
!3381 = !DILocation(line: 1439, column: 6, scope: !3376)
!3382 = !DILocation(line: 1440, column: 28, scope: !3279)
!3383 = !DILocation(line: 1440, column: 14, scope: !3279)
!3384 = !DILocation(line: 1440, column: 12, scope: !3279)
!3385 = !DILocation(line: 1442, column: 13, scope: !3279)
!3386 = !DILocation(line: 1442, column: 11, scope: !3279)
!3387 = !DILocation(line: 1443, column: 8, scope: !3388)
!3388 = distinct !DILexicalBlock(scope: !3279, file: !3, line: 1443, column: 8)
!3389 = !DILocation(line: 1443, column: 27, scope: !3388)
!3390 = !DILocation(line: 1443, column: 42, scope: !3388)
!3391 = !DILocation(line: 1443, column: 45, scope: !3388)
!3392 = !DILocation(line: 1443, column: 53, scope: !3388)
!3393 = !DILocation(line: 1443, column: 8, scope: !3279)
!3394 = !DILocation(line: 1444, column: 6, scope: !3388)
!3395 = !DILocation(line: 1445, column: 8, scope: !3396)
!3396 = distinct !DILexicalBlock(scope: !3279, file: !3, line: 1445, column: 8)
!3397 = !DILocation(line: 1445, column: 8, scope: !3279)
!3398 = !DILocation(line: 1447, column: 31, scope: !3399)
!3399 = distinct !DILexicalBlock(scope: !3396, file: !3, line: 1446, column: 6)
!3400 = !DILocation(line: 1447, column: 51, scope: !3399)
!3401 = !DILocation(line: 1447, column: 60, scope: !3399)
!3402 = !DILocation(line: 1447, column: 58, scope: !3399)
!3403 = !DILocation(line: 1447, column: 16, scope: !3399)
!3404 = !DILocation(line: 1447, column: 14, scope: !3399)
!3405 = !DILocation(line: 1448, column: 28, scope: !3406)
!3406 = distinct !DILexicalBlock(scope: !3399, file: !3, line: 1448, column: 12)
!3407 = !DILocation(line: 1448, column: 13, scope: !3406)
!3408 = !DILocation(line: 1448, column: 12, scope: !3399)
!3409 = !DILocation(line: 1449, column: 39, scope: !3406)
!3410 = !DILocation(line: 1449, column: 46, scope: !3406)
!3411 = !DILocation(line: 1449, column: 11, scope: !3406)
!3412 = !DILocation(line: 1449, column: 9, scope: !3406)
!3413 = !DILocation(line: 1449, column: 3, scope: !3406)
!3414 = !DILocation(line: 1450, column: 15, scope: !3399)
!3415 = !DILocation(line: 1450, column: 9, scope: !3399)
!3416 = !DILocation(line: 1450, column: 13, scope: !3399)
!3417 = !DILocation(line: 1452, column: 6, scope: !3399)
!3418 = !DILocation(line: 1453, column: 13, scope: !3279)
!3419 = !DILocation(line: 1453, column: 22, scope: !3279)
!3420 = !DILocation(line: 1453, column: 20, scope: !3279)
!3421 = !DILocation(line: 1453, column: 11, scope: !3279)
!3422 = !DILocation(line: 1454, column: 11, scope: !3279)
!3423 = !DILocation(line: 1454, column: 9, scope: !3279)
!3424 = !DILocation(line: 1455, column: 4, scope: !3279)
!3425 = !DILocation(line: 1458, column: 8, scope: !3426)
!3426 = distinct !DILexicalBlock(scope: !3279, file: !3, line: 1458, column: 8)
!3427 = !DILocation(line: 1458, column: 15, scope: !3426)
!3428 = !DILocation(line: 1458, column: 8, scope: !3279)
!3429 = !DILocation(line: 1459, column: 6, scope: !3426)
!3430 = !DILocation(line: 1461, column: 8, scope: !3431)
!3431 = distinct !DILexicalBlock(scope: !3279, file: !3, line: 1461, column: 8)
!3432 = !DILocation(line: 1461, column: 8, scope: !3279)
!3433 = !DILocation(line: 1462, column: 6, scope: !3431)
!3434 = !DILocation(line: 1464, column: 6, scope: !3431)
!3435 = distinct !{!3435, !3252, !3436}
!3436 = !DILocation(line: 1466, column: 5, scope: !3241)
!3437 = !DILocation(line: 1467, column: 1, scope: !3241)
!3438 = distinct !DISubprogram(name: "gate_intra_sra", scope: !3, file: !3, line: 2845, type: !3102, scopeLine: 2846, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!3439 = !DILocation(line: 2847, column: 10, scope: !3438)
!3440 = !DILocation(line: 2847, column: 24, scope: !3438)
!3441 = !DILocation(line: 2847, column: 3, scope: !3438)
!3442 = distinct !DISubprogram(name: "early_intra_sra", scope: !3, file: !3, line: 2829, type: !3106, scopeLine: 2830, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!3443 = !DILocation(line: 2831, column: 12, scope: !3442)
!3444 = !DILocation(line: 2832, column: 10, scope: !3442)
!3445 = !DILocation(line: 2832, column: 3, scope: !3442)
!3446 = distinct !DISubprogram(name: "late_intra_sra", scope: !3, file: !3, line: 2837, type: !3106, scopeLine: 2838, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!3447 = !DILocation(line: 2839, column: 12, scope: !3446)
!3448 = !DILocation(line: 2840, column: 10, scope: !3446)
!3449 = !DILocation(line: 2840, column: 3, scope: !3446)
!3450 = distinct !DISubprogram(name: "ipa_early_sra_gate", scope: !3, file: !3, line: 4233, type: !3102, scopeLine: 4234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!3451 = !DILocation(line: 4235, column: 10, scope: !3450)
!3452 = !DILocation(line: 4235, column: 3, scope: !3450)
!3453 = distinct !DISubprogram(name: "ipa_early_sra", scope: !3, file: !3, line: 4155, type: !3106, scopeLine: 4156, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!3454 = !DILocalVariable(name: "node", scope: !3453, file: !3, line: 4157, type: !3455)
!3455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3456, size: 64)
!3456 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !1533, line: 181, size: 2496, elements: !3457)
!3457 = !{!3458, !3459, !3482, !3483, !3484, !3485, !3486, !3487, !3488, !3489, !3490, !3491, !3492, !3493, !3494, !3495, !3496, !3497, !3576, !3598, !3608, !3612, !3638, !3647, !3648, !3649, !3650, !3651, !3652, !3653, !3654, !3655, !3656, !3657, !3658, !3659, !3660}
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3456, file: !1533, line: 182, baseType: !1696, size: 64)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !3456, file: !1533, line: 183, baseType: !3460, size: 64, offset: 64)
!3460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3461, size: 64)
!3461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !1533, line: 314, size: 768, elements: !3462)
!3462 = !{!3463, !3464, !3465, !3466, !3467, !3468, !3469, !3470, !3471, !3472, !3474, !3475, !3476, !3477, !3479, !3480, !3481}
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3461, file: !1533, line: 316, baseType: !2235, size: 64)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !3461, file: !1533, line: 317, baseType: !3455, size: 64, offset: 64)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !3461, file: !1533, line: 318, baseType: !3455, size: 64, offset: 128)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !3461, file: !1533, line: 319, baseType: !3460, size: 64, offset: 192)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !3461, file: !1533, line: 320, baseType: !3460, size: 64, offset: 256)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !3461, file: !1533, line: 321, baseType: !3460, size: 64, offset: 320)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !3461, file: !1533, line: 322, baseType: !3460, size: 64, offset: 384)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !3461, file: !1533, line: 323, baseType: !2024, size: 64, offset: 448)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3461, file: !1533, line: 324, baseType: !1977, size: 64, offset: 512)
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !3461, file: !1533, line: 327, baseType: !3473, size: 32, offset: 576)
!3473 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !1533, line: 312, baseType: !1532)
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !3461, file: !1533, line: 330, baseType: !7, size: 32, offset: 608)
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !3461, file: !1533, line: 334, baseType: !1693, size: 32, offset: 640)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3461, file: !1533, line: 336, baseType: !1693, size: 32, offset: 672)
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !3461, file: !1533, line: 338, baseType: !3478, size: 16, offset: 704)
!3478 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !3461, file: !1533, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !3461, file: !1533, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !3461, file: !1533, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !3456, file: !1533, line: 184, baseType: !3460, size: 64, offset: 128)
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3456, file: !1533, line: 185, baseType: !3455, size: 64, offset: 192)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !3456, file: !1533, line: 186, baseType: !3455, size: 64, offset: 256)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !3456, file: !1533, line: 188, baseType: !3455, size: 64, offset: 320)
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !3456, file: !1533, line: 190, baseType: !3455, size: 64, offset: 384)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !3456, file: !1533, line: 192, baseType: !3455, size: 64, offset: 448)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3456, file: !1533, line: 194, baseType: !3455, size: 64, offset: 512)
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !3456, file: !1533, line: 196, baseType: !3455, size: 64, offset: 576)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !3456, file: !1533, line: 197, baseType: !3455, size: 64, offset: 640)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !3456, file: !1533, line: 198, baseType: !3455, size: 64, offset: 704)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !3456, file: !1533, line: 199, baseType: !3455, size: 64, offset: 768)
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !3456, file: !1533, line: 202, baseType: !3455, size: 64, offset: 832)
!3494 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !3456, file: !1533, line: 204, baseType: !3455, size: 64, offset: 896)
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !3456, file: !1533, line: 207, baseType: !2455, size: 64, offset: 960)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3456, file: !1533, line: 209, baseType: !1977, size: 64, offset: 1024)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !3456, file: !1533, line: 214, baseType: !3498, size: 64, offset: 1088)
!3498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3499, size: 64)
!3499 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !2413, line: 177, baseType: !3500)
!3500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !2413, line: 177, size: 128, elements: !3501)
!3501 = !{!3502}
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3500, file: !2413, line: 177, baseType: !3503, size: 128)
!3503 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !2413, line: 176, baseType: !3504)
!3504 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !2413, line: 176, size: 128, elements: !3505)
!3505 = !{!3506, !3507, !3508}
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3504, file: !2413, line: 176, baseType: !7, size: 32)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3504, file: !2413, line: 176, baseType: !7, size: 32, offset: 32)
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3504, file: !2413, line: 176, baseType: !3509, size: 64, offset: 64)
!3509 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3510, size: 64, elements: !1796)
!3510 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !2413, line: 174, baseType: !3511)
!3511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3512, size: 64)
!3512 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !391, line: 173, size: 1152, elements: !3513)
!3513 = !{!3514, !3515, !3519, !3542, !3543, !3547, !3552, !3553, !3557}
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3512, file: !391, line: 175, baseType: !3096, size: 640)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !3512, file: !391, line: 179, baseType: !3516, size: 64, offset: 640)
!3516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3517, size: 64)
!3517 = !DISubroutineType(types: !3518)
!3518 = !{null}
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !3512, file: !391, line: 182, baseType: !3520, size: 64, offset: 704)
!3520 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3521, size: 64)
!3521 = !DISubroutineType(types: !3522)
!3522 = !{null, !3523}
!3523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3524, size: 64)
!3524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !1533, line: 276, size: 192, elements: !3525)
!3525 = !{!3526, !3527, !3541}
!3526 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !3524, file: !1533, line: 278, baseType: !2455, size: 64)
!3527 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !3524, file: !1533, line: 279, baseType: !3528, size: 64, offset: 64)
!3528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3529, size: 64)
!3529 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !1533, line: 272, baseType: !3530)
!3530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !1533, line: 272, size: 128, elements: !3531)
!3531 = !{!3532}
!3532 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3530, file: !1533, line: 272, baseType: !3533, size: 128)
!3533 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !1533, line: 270, baseType: !3534)
!3534 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !1533, line: 270, size: 128, elements: !3535)
!3535 = !{!3536, !3537, !3538}
!3536 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3534, file: !1533, line: 270, baseType: !7, size: 32)
!3537 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3534, file: !1533, line: 270, baseType: !7, size: 32, offset: 32)
!3538 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3534, file: !1533, line: 270, baseType: !3539, size: 64, offset: 64)
!3539 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3540, size: 64, elements: !1796)
!3540 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !1533, line: 268, baseType: !3455)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3524, file: !1533, line: 280, baseType: !1977, size: 64, offset: 128)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !3512, file: !391, line: 187, baseType: !3516, size: 64, offset: 768)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !3512, file: !391, line: 188, baseType: !3544, size: 64, offset: 832)
!3544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3545, size: 64)
!3545 = !DISubroutineType(types: !3546)
!3546 = !{null, !3455}
!3547 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !3512, file: !391, line: 191, baseType: !3548, size: 64, offset: 896)
!3548 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3549, size: 64)
!3549 = !DISubroutineType(types: !3550)
!3550 = !{null, !3455, !3551}
!3551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2024, size: 64)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !3512, file: !391, line: 195, baseType: !7, size: 32, offset: 960)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !3512, file: !391, line: 196, baseType: !3554, size: 64, offset: 1024)
!3554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3555, size: 64)
!3555 = !DISubroutineType(types: !3556)
!3556 = !{!7, !3455}
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !3512, file: !391, line: 197, baseType: !3558, size: 64, offset: 1088)
!3558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3559, size: 64)
!3559 = !DISubroutineType(types: !3560)
!3560 = !{null, !3561}
!3561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3562, size: 64)
!3562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !1533, line: 358, size: 320, elements: !3563)
!3563 = !{!3564, !3565, !3566, !3567, !3568, !3569, !3570, !3571, !3572, !3573, !3574, !3575}
!3564 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3562, file: !1533, line: 359, baseType: !1696, size: 64)
!3565 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3562, file: !1533, line: 361, baseType: !3561, size: 64, offset: 64)
!3566 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3562, file: !1533, line: 363, baseType: !3561, size: 64, offset: 128)
!3567 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !3562, file: !1533, line: 366, baseType: !3561, size: 64, offset: 192)
!3568 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3562, file: !1533, line: 368, baseType: !1693, size: 32, offset: 256)
!3569 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3562, file: !1533, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!3570 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !3562, file: !1533, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!3571 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3562, file: !1533, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!3572 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3562, file: !1533, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!3573 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !3562, file: !1533, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!3574 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3562, file: !1533, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!3575 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3562, file: !1533, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3456, file: !1533, line: 216, baseType: !3577, size: 320, offset: 1152)
!3577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !1533, line: 88, size: 320, elements: !3578)
!3578 = !{!3579, !3582, !3590, !3591, !3592, !3593, !3594, !3595, !3596, !3597}
!3579 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !3577, file: !1533, line: 90, baseType: !3580, size: 64)
!3580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3581, size: 64)
!3581 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !1533, line: 51, flags: DIFlagFwdDecl)
!3582 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !3577, file: !1533, line: 92, baseType: !3583, size: 192, offset: 64)
!3583 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !1533, line: 57, size: 192, elements: !3584)
!3584 = !{!3585, !3586, !3587, !3588, !3589}
!3585 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !3583, file: !1533, line: 60, baseType: !1752, size: 64)
!3586 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !3583, file: !1533, line: 63, baseType: !1693, size: 32, offset: 64)
!3587 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !3583, file: !1533, line: 65, baseType: !1693, size: 32, offset: 96)
!3588 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !3583, file: !1533, line: 67, baseType: !1693, size: 32, offset: 128)
!3589 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !3583, file: !1533, line: 69, baseType: !1693, size: 32, offset: 160)
!3590 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3577, file: !1533, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!3591 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3577, file: !1533, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!3592 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3577, file: !1533, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!3593 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !3577, file: !1533, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!3594 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3577, file: !1533, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!3595 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !3577, file: !1533, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!3596 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !3577, file: !1533, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!3597 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !3577, file: !1533, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!3598 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !3456, file: !1533, line: 217, baseType: !3599, size: 320, offset: 1472)
!3599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !1533, line: 126, size: 320, elements: !3600)
!3600 = !{!3601, !3602, !3603, !3604, !3605, !3606, !3607}
!3601 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !3599, file: !1533, line: 128, baseType: !1752, size: 64)
!3602 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !3599, file: !1533, line: 130, baseType: !1752, size: 64, offset: 64)
!3603 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !3599, file: !1533, line: 134, baseType: !3455, size: 64, offset: 128)
!3604 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !3599, file: !1533, line: 137, baseType: !1693, size: 32, offset: 192)
!3605 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3599, file: !1533, line: 138, baseType: !1693, size: 32, offset: 224)
!3606 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !3599, file: !1533, line: 141, baseType: !1693, size: 32, offset: 256)
!3607 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !3599, file: !1533, line: 144, baseType: !1815, size: 8, offset: 288)
!3608 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3456, file: !1533, line: 218, baseType: !3609, size: 32, offset: 1792)
!3609 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !1533, line: 150, size: 32, elements: !3610)
!3610 = !{!3611}
!3611 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !3609, file: !1533, line: 151, baseType: !7, size: 32)
!3612 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !3456, file: !1533, line: 219, baseType: !3613, size: 192, offset: 1856)
!3613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !1533, line: 171, size: 192, elements: !3614)
!3614 = !{!3615, !3636, !3637}
!3615 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !3613, file: !1533, line: 173, baseType: !3616, size: 64)
!3616 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3617, size: 64)
!3617 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !1533, line: 169, baseType: !3618)
!3618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !1533, line: 169, size: 128, elements: !3619)
!3619 = !{!3620}
!3620 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3618, file: !1533, line: 169, baseType: !3621, size: 128)
!3621 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !1533, line: 168, baseType: !3622)
!3622 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !1533, line: 168, size: 128, elements: !3623)
!3623 = !{!3624, !3625, !3626}
!3624 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3622, file: !1533, line: 168, baseType: !7, size: 32)
!3625 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3622, file: !1533, line: 168, baseType: !7, size: 32, offset: 32)
!3626 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3622, file: !1533, line: 168, baseType: !3627, size: 64, offset: 64)
!3627 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3628, size: 64, elements: !1796)
!3628 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !1533, line: 167, baseType: !3629)
!3629 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3630, size: 64)
!3630 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !1533, line: 156, size: 192, elements: !3631)
!3631 = !{!3632, !3633, !3634, !3635}
!3632 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !3630, file: !1533, line: 159, baseType: !1696, size: 64)
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !3630, file: !1533, line: 161, baseType: !1696, size: 64, offset: 64)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !3630, file: !1533, line: 163, baseType: !1815, size: 8, offset: 128)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !3630, file: !1533, line: 165, baseType: !1815, size: 8, offset: 136)
!3636 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !3613, file: !1533, line: 174, baseType: !2541, size: 64, offset: 64)
!3637 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !3613, file: !1533, line: 175, baseType: !2541, size: 64, offset: 128)
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !3456, file: !1533, line: 220, baseType: !3639, size: 256, offset: 2048)
!3639 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !1533, line: 74, size: 256, elements: !3640)
!3640 = !{!3641, !3642, !3643, !3644, !3645, !3646}
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !3639, file: !1533, line: 76, baseType: !1752, size: 64)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !3639, file: !1533, line: 77, baseType: !1752, size: 64, offset: 64)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3639, file: !1533, line: 78, baseType: !1696, size: 64, offset: 128)
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !3639, file: !1533, line: 79, baseType: !1815, size: 8, offset: 192)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !3639, file: !1533, line: 80, baseType: !1815, size: 8, offset: 200)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !3639, file: !1533, line: 82, baseType: !1815, size: 8, offset: 208)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3456, file: !1533, line: 223, baseType: !2235, size: 64, offset: 2304)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3456, file: !1533, line: 225, baseType: !1693, size: 32, offset: 2368)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3456, file: !1533, line: 227, baseType: !1693, size: 32, offset: 2400)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !3456, file: !1533, line: 231, baseType: !1693, size: 32, offset: 2432)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3456, file: !1533, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !3456, file: !1533, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !3456, file: !1533, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !3456, file: !1533, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !3456, file: !1533, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3456, file: !1533, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !3456, file: !1533, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3456, file: !1533, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !3456, file: !1533, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !3456, file: !1533, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!3661 = !DILocation(line: 4157, column: 23, scope: !3453)
!3662 = !DILocation(line: 4157, column: 43, scope: !3453)
!3663 = !DILocation(line: 4157, column: 30, scope: !3453)
!3664 = !DILocalVariable(name: "adjustments", scope: !3453, file: !3, line: 4158, type: !3665)
!3665 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_parm_adjustment_vec", file: !3066, line: 487, baseType: !3064)
!3666 = !DILocation(line: 4158, column: 27, scope: !3453)
!3667 = !DILocalVariable(name: "ret", scope: !3453, file: !3, line: 4159, type: !1693)
!3668 = !DILocation(line: 4159, column: 7, scope: !3453)
!3669 = !DILocation(line: 4161, column: 45, scope: !3670)
!3670 = distinct !DILexicalBlock(scope: !3453, file: !3, line: 4161, column: 7)
!3671 = !DILocation(line: 4161, column: 8, scope: !3670)
!3672 = !DILocation(line: 4161, column: 7, scope: !3453)
!3673 = !DILocation(line: 4162, column: 5, scope: !3670)
!3674 = !DILocation(line: 4164, column: 3, scope: !3453)
!3675 = !DILocation(line: 4165, column: 12, scope: !3453)
!3676 = !DILocation(line: 4167, column: 8, scope: !3677)
!3677 = distinct !DILexicalBlock(scope: !3453, file: !3, line: 4167, column: 7)
!3678 = !DILocation(line: 4167, column: 7, scope: !3453)
!3679 = !DILocation(line: 4169, column: 11, scope: !3680)
!3680 = distinct !DILexicalBlock(scope: !3681, file: !3, line: 4169, column: 11)
!3681 = distinct !DILexicalBlock(scope: !3677, file: !3, line: 4168, column: 5)
!3682 = !DILocation(line: 4169, column: 11, scope: !3681)
!3683 = !DILocation(line: 4170, column: 11, scope: !3680)
!3684 = !DILocation(line: 4170, column: 2, scope: !3680)
!3685 = !DILocation(line: 4171, column: 7, scope: !3681)
!3686 = !DILocation(line: 4174, column: 45, scope: !3687)
!3687 = distinct !DILexicalBlock(scope: !3453, file: !3, line: 4174, column: 7)
!3688 = !DILocation(line: 4174, column: 8, scope: !3687)
!3689 = !DILocation(line: 4174, column: 7, scope: !3453)
!3690 = !DILocation(line: 4176, column: 11, scope: !3691)
!3691 = distinct !DILexicalBlock(scope: !3692, file: !3, line: 4176, column: 11)
!3692 = distinct !DILexicalBlock(scope: !3687, file: !3, line: 4175, column: 5)
!3693 = !DILocation(line: 4176, column: 11, scope: !3692)
!3694 = !DILocation(line: 4177, column: 11, scope: !3691)
!3695 = !DILocation(line: 4177, column: 2, scope: !3691)
!3696 = !DILocation(line: 4179, column: 7, scope: !3692)
!3697 = !DILocation(line: 4182, column: 21, scope: !3453)
!3698 = !DILocation(line: 4182, column: 19, scope: !3453)
!3699 = !DILocation(line: 4185, column: 15, scope: !3453)
!3700 = !DILocation(line: 4185, column: 13, scope: !3453)
!3701 = !DILocation(line: 4187, column: 3, scope: !3453)
!3702 = !DILocation(line: 4189, column: 7, scope: !3703)
!3703 = distinct !DILexicalBlock(scope: !3453, file: !3, line: 4189, column: 7)
!3704 = !DILocation(line: 4189, column: 7, scope: !3453)
!3705 = !DILocation(line: 4191, column: 11, scope: !3706)
!3706 = distinct !DILexicalBlock(scope: !3707, file: !3, line: 4191, column: 11)
!3707 = distinct !DILexicalBlock(scope: !3703, file: !3, line: 4190, column: 5)
!3708 = !DILocation(line: 4191, column: 11, scope: !3707)
!3709 = !DILocation(line: 4192, column: 11, scope: !3706)
!3710 = !DILocation(line: 4192, column: 2, scope: !3706)
!3711 = !DILocation(line: 4193, column: 7, scope: !3707)
!3712 = !DILocation(line: 4196, column: 7, scope: !3713)
!3713 = distinct !DILexicalBlock(scope: !3453, file: !3, line: 4196, column: 7)
!3714 = !DILocation(line: 4196, column: 7, scope: !3453)
!3715 = !DILocation(line: 4198, column: 11, scope: !3716)
!3716 = distinct !DILexicalBlock(scope: !3717, file: !3, line: 4198, column: 11)
!3717 = distinct !DILexicalBlock(scope: !3713, file: !3, line: 4197, column: 5)
!3718 = !DILocation(line: 4198, column: 11, scope: !3717)
!3719 = !DILocation(line: 4199, column: 11, scope: !3716)
!3720 = !DILocation(line: 4199, column: 2, scope: !3716)
!3721 = !DILocation(line: 4201, column: 7, scope: !3717)
!3722 = !DILocation(line: 4204, column: 17, scope: !3453)
!3723 = !DILocation(line: 4204, column: 15, scope: !3453)
!3724 = !DILocation(line: 4205, column: 8, scope: !3725)
!3725 = distinct !DILexicalBlock(scope: !3453, file: !3, line: 4205, column: 7)
!3726 = !DILocation(line: 4205, column: 7, scope: !3453)
!3727 = !DILocation(line: 4206, column: 5, scope: !3725)
!3728 = !DILocation(line: 4207, column: 7, scope: !3729)
!3729 = distinct !DILexicalBlock(scope: !3453, file: !3, line: 4207, column: 7)
!3730 = !DILocation(line: 4207, column: 7, scope: !3453)
!3731 = !DILocation(line: 4208, column: 33, scope: !3729)
!3732 = !DILocation(line: 4208, column: 44, scope: !3729)
!3733 = !DILocation(line: 4208, column: 57, scope: !3729)
!3734 = !DILocation(line: 4208, column: 5, scope: !3729)
!3735 = !DILocation(line: 4210, column: 20, scope: !3453)
!3736 = !DILocation(line: 4210, column: 26, scope: !3453)
!3737 = !DILocation(line: 4210, column: 3, scope: !3453)
!3738 = !DILocation(line: 4211, column: 3, scope: !3453)
!3739 = !DILocation(line: 4212, column: 7, scope: !3453)
!3740 = !DILocation(line: 4214, column: 29, scope: !3453)
!3741 = !DILocation(line: 4215, column: 18, scope: !3453)
!3742 = !DILocation(line: 4214, column: 3, scope: !3453)
!3743 = !DILocation(line: 4216, column: 29, scope: !3453)
!3744 = !DILocation(line: 4217, column: 18, scope: !3453)
!3745 = !DILocation(line: 4216, column: 3, scope: !3453)
!3746 = !DILocation(line: 4218, column: 29, scope: !3453)
!3747 = !DILocation(line: 4219, column: 18, scope: !3453)
!3748 = !DILocation(line: 4218, column: 3, scope: !3453)
!3749 = !DILocation(line: 4220, column: 29, scope: !3453)
!3750 = !DILocation(line: 4221, column: 18, scope: !3453)
!3751 = !DILocation(line: 4220, column: 3, scope: !3453)
!3752 = !DILabel(scope: !3453, name: "out", file: !3, line: 4223)
!3753 = !DILocation(line: 4223, column: 2, scope: !3453)
!3754 = !DILocation(line: 4224, column: 3, scope: !3453)
!3755 = !DILocation(line: 4225, column: 9, scope: !3453)
!3756 = !DILocation(line: 4225, column: 3, scope: !3453)
!3757 = !DILabel(scope: !3453, name: "simple_out", file: !3, line: 4226)
!3758 = !DILocation(line: 4226, column: 2, scope: !3453)
!3759 = !DILocation(line: 4227, column: 3, scope: !3453)
!3760 = !DILocation(line: 4228, column: 10, scope: !3453)
!3761 = !DILocation(line: 4228, column: 3, scope: !3453)
!3762 = !DILocation(line: 4229, column: 1, scope: !3453)
!3763 = distinct !DISubprogram(name: "perform_intra_sra", scope: !3, file: !3, line: 2791, type: !3106, scopeLine: 2792, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!3764 = !DILocalVariable(name: "ret", scope: !3763, file: !3, line: 2793, type: !1693)
!3765 = !DILocation(line: 2793, column: 7, scope: !3763)
!3766 = !DILocation(line: 2794, column: 3, scope: !3763)
!3767 = !DILocation(line: 2796, column: 8, scope: !3768)
!3768 = distinct !DILexicalBlock(scope: !3763, file: !3, line: 2796, column: 7)
!3769 = !DILocation(line: 2796, column: 7, scope: !3763)
!3770 = !DILocation(line: 2797, column: 5, scope: !3768)
!3771 = !DILocation(line: 2799, column: 8, scope: !3772)
!3772 = distinct !DILexicalBlock(scope: !3763, file: !3, line: 2799, column: 7)
!3773 = !DILocation(line: 2799, column: 7, scope: !3763)
!3774 = !DILocation(line: 2801, column: 5, scope: !3772)
!3775 = !DILocation(line: 2803, column: 8, scope: !3776)
!3776 = distinct !DILexicalBlock(scope: !3763, file: !3, line: 2803, column: 7)
!3777 = !DILocation(line: 2803, column: 7, scope: !3763)
!3778 = !DILocation(line: 2804, column: 5, scope: !3776)
!3779 = !DILocation(line: 2806, column: 3, scope: !3763)
!3780 = !DILocation(line: 2807, column: 3, scope: !3763)
!3781 = !DILocation(line: 2809, column: 29, scope: !3763)
!3782 = !DILocation(line: 2810, column: 18, scope: !3763)
!3783 = !DILocation(line: 2809, column: 3, scope: !3763)
!3784 = !DILocation(line: 2811, column: 29, scope: !3763)
!3785 = !DILocation(line: 2811, column: 69, scope: !3763)
!3786 = !DILocation(line: 2811, column: 3, scope: !3763)
!3787 = !DILocation(line: 2812, column: 29, scope: !3763)
!3788 = !DILocation(line: 2813, column: 18, scope: !3763)
!3789 = !DILocation(line: 2812, column: 3, scope: !3763)
!3790 = !DILocation(line: 2814, column: 29, scope: !3763)
!3791 = !DILocation(line: 2815, column: 18, scope: !3763)
!3792 = !DILocation(line: 2814, column: 3, scope: !3763)
!3793 = !DILocation(line: 2816, column: 29, scope: !3763)
!3794 = !DILocation(line: 2816, column: 62, scope: !3763)
!3795 = !DILocation(line: 2816, column: 3, scope: !3763)
!3796 = !DILocation(line: 2817, column: 29, scope: !3763)
!3797 = !DILocation(line: 2818, column: 18, scope: !3763)
!3798 = !DILocation(line: 2817, column: 3, scope: !3763)
!3799 = !DILocation(line: 2820, column: 7, scope: !3763)
!3800 = !DILocation(line: 2820, column: 3, scope: !3763)
!3801 = !DILabel(scope: !3763, name: "out", file: !3, line: 2822)
!3802 = !DILocation(line: 2822, column: 2, scope: !3763)
!3803 = !DILocation(line: 2823, column: 3, scope: !3763)
!3804 = !DILocation(line: 2824, column: 10, scope: !3763)
!3805 = !DILocation(line: 2824, column: 3, scope: !3763)
!3806 = distinct !DISubprogram(name: "sra_initialize", scope: !3, file: !3, line: 559, type: !3517, scopeLine: 560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!3807 = !DILocation(line: 561, column: 22, scope: !3806)
!3808 = !DILocation(line: 561, column: 20, scope: !3806)
!3809 = !DILocation(line: 562, column: 34, scope: !3806)
!3810 = !DILocation(line: 562, column: 32, scope: !3806)
!3811 = !DILocation(line: 563, column: 34, scope: !3806)
!3812 = !DILocation(line: 563, column: 32, scope: !3806)
!3813 = !DILocation(line: 564, column: 3, scope: !3806)
!3814 = !DILocation(line: 565, column: 17, scope: !3806)
!3815 = !DILocation(line: 565, column: 15, scope: !3806)
!3816 = !DILocation(line: 566, column: 15, scope: !3806)
!3817 = !DILocation(line: 566, column: 13, scope: !3806)
!3818 = !DILocation(line: 567, column: 21, scope: !3806)
!3819 = !DILocation(line: 567, column: 19, scope: !3806)
!3820 = !DILocation(line: 568, column: 3, scope: !3806)
!3821 = !DILocation(line: 569, column: 26, scope: !3806)
!3822 = !DILocation(line: 570, column: 30, scope: !3806)
!3823 = !DILocation(line: 571, column: 42, scope: !3806)
!3824 = !DILocation(line: 572, column: 1, scope: !3806)
!3825 = distinct !DISubprogram(name: "find_var_candidates", scope: !3, file: !3, line: 1511, type: !3102, scopeLine: 1512, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!3826 = !DILocalVariable(name: "var", scope: !3825, file: !3, line: 1513, type: !1696)
!3827 = !DILocation(line: 1513, column: 8, scope: !3825)
!3828 = !DILocalVariable(name: "type", scope: !3825, file: !3, line: 1513, type: !1696)
!3829 = !DILocation(line: 1513, column: 13, scope: !3825)
!3830 = !DILocalVariable(name: "rvi", scope: !3825, file: !3, line: 1514, type: !3831)
!3831 = !DIDerivedType(tag: DW_TAG_typedef, name: "referenced_var_iterator", file: !2363, line: 336, baseType: !3832)
!3832 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2363, line: 333, size: 192, elements: !3833)
!3833 = !{!3834}
!3834 = !DIDerivedType(tag: DW_TAG_member, name: "hti", scope: !3832, file: !2363, line: 335, baseType: !3835, size: 192)
!3835 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_iterator", file: !2363, line: 98, baseType: !3836)
!3836 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2363, line: 93, size: 192, elements: !3837)
!3837 = !{!3838, !3839, !3840}
!3838 = !DIDerivedType(tag: DW_TAG_member, name: "htab", scope: !3836, file: !2363, line: 95, baseType: !2455, size: 64)
!3839 = !DIDerivedType(tag: DW_TAG_member, name: "slot", scope: !3836, file: !2363, line: 96, baseType: !2479, size: 64, offset: 64)
!3840 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !3836, file: !2363, line: 97, baseType: !2479, size: 64, offset: 128)
!3841 = !DILocation(line: 1514, column: 27, scope: !3825)
!3842 = !DILocalVariable(name: "ret", scope: !3825, file: !3, line: 1515, type: !1815)
!3843 = !DILocation(line: 1515, column: 8, scope: !3825)
!3844 = !DILocation(line: 1517, column: 3, scope: !3845)
!3845 = distinct !DILexicalBlock(scope: !3825, file: !3, line: 1517, column: 3)
!3846 = !DILocation(line: 1517, column: 3, scope: !3847)
!3847 = distinct !DILexicalBlock(scope: !3845, file: !3, line: 1517, column: 3)
!3848 = !DILocation(line: 1519, column: 11, scope: !3849)
!3849 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 1519, column: 11)
!3850 = distinct !DILexicalBlock(scope: !3847, file: !3, line: 1518, column: 5)
!3851 = !DILocation(line: 1519, column: 27, scope: !3849)
!3852 = !DILocation(line: 1519, column: 39, scope: !3849)
!3853 = !DILocation(line: 1519, column: 42, scope: !3849)
!3854 = !DILocation(line: 1519, column: 58, scope: !3849)
!3855 = !DILocation(line: 1519, column: 11, scope: !3850)
!3856 = !DILocation(line: 1520, column: 9, scope: !3849)
!3857 = !DILocation(line: 1521, column: 14, scope: !3850)
!3858 = !DILocation(line: 1521, column: 12, scope: !3850)
!3859 = !DILocation(line: 1523, column: 12, scope: !3860)
!3860 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 1523, column: 11)
!3861 = !DILocation(line: 1524, column: 4, scope: !3860)
!3862 = !DILocation(line: 1524, column: 32, scope: !3860)
!3863 = !DILocation(line: 1524, column: 7, scope: !3860)
!3864 = !DILocation(line: 1525, column: 4, scope: !3860)
!3865 = !DILocation(line: 1525, column: 7, scope: !3860)
!3866 = !DILocation(line: 1526, column: 4, scope: !3860)
!3867 = !DILocation(line: 1526, column: 8, scope: !3860)
!3868 = !DILocation(line: 1527, column: 4, scope: !3860)
!3869 = !DILocation(line: 1527, column: 23, scope: !3860)
!3870 = !DILocation(line: 1527, column: 8, scope: !3860)
!3871 = !DILocation(line: 1528, column: 11, scope: !3860)
!3872 = !DILocation(line: 1528, column: 28, scope: !3860)
!3873 = !DILocation(line: 1528, column: 14, scope: !3860)
!3874 = !DILocation(line: 1528, column: 49, scope: !3860)
!3875 = !DILocation(line: 1529, column: 4, scope: !3860)
!3876 = !DILocation(line: 1529, column: 38, scope: !3860)
!3877 = !DILocation(line: 1529, column: 7, scope: !3860)
!3878 = !DILocation(line: 1533, column: 4, scope: !3860)
!3879 = !DILocation(line: 1533, column: 8, scope: !3860)
!3880 = !DILocation(line: 1533, column: 17, scope: !3860)
!3881 = !DILocation(line: 1534, column: 8, scope: !3860)
!3882 = !DILocation(line: 1534, column: 28, scope: !3860)
!3883 = !DILocation(line: 1534, column: 11, scope: !3860)
!3884 = !DILocation(line: 1523, column: 11, scope: !3850)
!3885 = !DILocation(line: 1535, column: 2, scope: !3860)
!3886 = !DILocation(line: 1537, column: 23, scope: !3850)
!3887 = !DILocation(line: 1537, column: 41, scope: !3850)
!3888 = !DILocation(line: 1537, column: 7, scope: !3850)
!3889 = !DILocation(line: 1539, column: 11, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 1539, column: 11)
!3891 = !DILocation(line: 1539, column: 21, scope: !3890)
!3892 = !DILocation(line: 1539, column: 25, scope: !3890)
!3893 = !DILocation(line: 1539, column: 36, scope: !3890)
!3894 = !DILocation(line: 1539, column: 11, scope: !3850)
!3895 = !DILocation(line: 1541, column: 13, scope: !3896)
!3896 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 1540, column: 2)
!3897 = !DILocation(line: 1541, column: 44, scope: !3896)
!3898 = !DILocation(line: 1541, column: 4, scope: !3896)
!3899 = !DILocation(line: 1542, column: 24, scope: !3896)
!3900 = !DILocation(line: 1542, column: 35, scope: !3896)
!3901 = !DILocation(line: 1542, column: 4, scope: !3896)
!3902 = !DILocation(line: 1543, column: 13, scope: !3896)
!3903 = !DILocation(line: 1543, column: 4, scope: !3896)
!3904 = !DILocation(line: 1544, column: 2, scope: !3896)
!3905 = !DILocation(line: 1545, column: 11, scope: !3850)
!3906 = !DILocation(line: 1546, column: 5, scope: !3850)
!3907 = distinct !{!3907, !3844, !3908}
!3908 = !DILocation(line: 1546, column: 5, scope: !3845)
!3909 = !DILocation(line: 1548, column: 10, scope: !3825)
!3910 = !DILocation(line: 1548, column: 3, scope: !3825)
!3911 = distinct !DISubprogram(name: "scan_function", scope: !3, file: !3, line: 1097, type: !3912, scopeLine: 1103, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!3912 = !DISubroutineType(types: !3913)
!3913 = !{!1815, !3914, !3924, !3927, !1815, !1977}
!3914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3915, size: 64)
!3915 = !DISubroutineType(types: !3916)
!3916 = !{!1815, !2058, !3917, !1815, !1977}
!3917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3918, size: 64)
!3918 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !1458, line: 265, baseType: !3919)
!3919 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1458, line: 254, size: 192, elements: !3920)
!3920 = !{!3921, !3922, !3923}
!3921 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3919, file: !1458, line: 257, baseType: !2019, size: 64)
!3922 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3919, file: !1458, line: 263, baseType: !2014, size: 64, offset: 64)
!3923 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3919, file: !1458, line: 264, baseType: !2423, size: 64, offset: 128)
!3924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3925, size: 64)
!3925 = !DISubroutineType(types: !3926)
!3926 = !{!712, !3551, !3917, !1977}
!3927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3928, size: 64)
!3928 = !DISubroutineType(types: !3929)
!3929 = !{!1815, !2024, !1977}
!3930 = !DILocalVariable(name: "scan_expr", arg: 1, scope: !3911, file: !3, line: 1097, type: !3914)
!3931 = !DILocation(line: 1097, column: 23, scope: !3911)
!3932 = !DILocalVariable(name: "scan_assign", arg: 2, scope: !3911, file: !3, line: 1098, type: !3924)
!3933 = !DILocation(line: 1098, column: 35, scope: !3911)
!3934 = !DILocalVariable(name: "handle_ssa_defs", arg: 3, scope: !3911, file: !3, line: 1101, type: !3927)
!3935 = !DILocation(line: 1101, column: 16, scope: !3911)
!3936 = !DILocalVariable(name: "analysis_stage", arg: 4, scope: !3911, file: !3, line: 1102, type: !1815)
!3937 = !DILocation(line: 1102, column: 14, scope: !3911)
!3938 = !DILocalVariable(name: "data", arg: 5, scope: !3911, file: !3, line: 1102, type: !1977)
!3939 = !DILocation(line: 1102, column: 36, scope: !3911)
!3940 = !DILocalVariable(name: "gsi", scope: !3911, file: !3, line: 1104, type: !3918)
!3941 = !DILocation(line: 1104, column: 24, scope: !3911)
!3942 = !DILocalVariable(name: "bb", scope: !3911, file: !3, line: 1105, type: !2423)
!3943 = !DILocation(line: 1105, column: 15, scope: !3911)
!3944 = !DILocalVariable(name: "i", scope: !3911, file: !3, line: 1106, type: !7)
!3945 = !DILocation(line: 1106, column: 12, scope: !3911)
!3946 = !DILocalVariable(name: "t", scope: !3911, file: !3, line: 1107, type: !2058)
!3947 = !DILocation(line: 1107, column: 9, scope: !3911)
!3948 = !DILocalVariable(name: "ret", scope: !3911, file: !3, line: 1108, type: !1815)
!3949 = !DILocation(line: 1108, column: 8, scope: !3911)
!3950 = !DILocation(line: 1110, column: 3, scope: !3951)
!3951 = distinct !DILexicalBlock(scope: !3911, file: !3, line: 1110, column: 3)
!3952 = !DILocation(line: 1110, column: 3, scope: !3953)
!3953 = distinct !DILexicalBlock(scope: !3951, file: !3, line: 1110, column: 3)
!3954 = !DILocalVariable(name: "bb_changed", scope: !3955, file: !3, line: 1112, type: !1815)
!3955 = distinct !DILexicalBlock(scope: !3953, file: !3, line: 1111, column: 5)
!3956 = !DILocation(line: 1112, column: 12, scope: !3955)
!3957 = !DILocation(line: 1114, column: 11, scope: !3958)
!3958 = distinct !DILexicalBlock(scope: !3955, file: !3, line: 1114, column: 11)
!3959 = !DILocation(line: 1114, column: 11, scope: !3955)
!3960 = !DILocation(line: 1115, column: 29, scope: !3961)
!3961 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 1115, column: 2)
!3962 = !DILocation(line: 1115, column: 13, scope: !3961)
!3963 = !DILocation(line: 1115, column: 7, scope: !3961)
!3964 = !DILocation(line: 1115, column: 35, scope: !3965)
!3965 = distinct !DILexicalBlock(scope: !3961, file: !3, line: 1115, column: 2)
!3966 = !DILocation(line: 1115, column: 34, scope: !3965)
!3967 = !DILocation(line: 1115, column: 2, scope: !3961)
!3968 = !DILocation(line: 1116, column: 11, scope: !3965)
!3969 = !DILocation(line: 1116, column: 28, scope: !3965)
!3970 = !DILocation(line: 1116, column: 44, scope: !3965)
!3971 = !DILocation(line: 1116, column: 8, scope: !3965)
!3972 = !DILocation(line: 1116, column: 4, scope: !3965)
!3973 = !DILocation(line: 1115, column: 52, scope: !3965)
!3974 = !DILocation(line: 1115, column: 2, scope: !3965)
!3975 = distinct !{!3975, !3967, !3976}
!3976 = !DILocation(line: 1116, column: 48, scope: !3961)
!3977 = !DILocation(line: 1118, column: 27, scope: !3955)
!3978 = !DILocation(line: 1118, column: 13, scope: !3955)
!3979 = !DILocation(line: 1119, column: 7, scope: !3955)
!3980 = !DILocation(line: 1119, column: 15, scope: !3955)
!3981 = !DILocation(line: 1119, column: 14, scope: !3955)
!3982 = !DILocalVariable(name: "stmt", scope: !3983, file: !3, line: 1121, type: !2024)
!3983 = distinct !DILexicalBlock(scope: !3955, file: !3, line: 1120, column: 2)
!3984 = !DILocation(line: 1121, column: 11, scope: !3983)
!3985 = !DILocation(line: 1121, column: 18, scope: !3983)
!3986 = !DILocalVariable(name: "assign_result", scope: !3983, file: !3, line: 1122, type: !712)
!3987 = !DILocation(line: 1122, column: 28, scope: !3983)
!3988 = !DILocalVariable(name: "any", scope: !3983, file: !3, line: 1123, type: !1815)
!3989 = !DILocation(line: 1123, column: 9, scope: !3983)
!3990 = !DILocalVariable(name: "deleted", scope: !3983, file: !3, line: 1123, type: !1815)
!3991 = !DILocation(line: 1123, column: 22, scope: !3983)
!3992 = !DILocation(line: 1125, column: 8, scope: !3993)
!3993 = distinct !DILexicalBlock(scope: !3983, file: !3, line: 1125, column: 8)
!3994 = !DILocation(line: 1125, column: 23, scope: !3993)
!3995 = !DILocation(line: 1125, column: 26, scope: !3993)
!3996 = !DILocation(line: 1125, column: 36, scope: !3993)
!3997 = !DILocation(line: 1125, column: 64, scope: !3993)
!3998 = !DILocation(line: 1125, column: 39, scope: !3993)
!3999 = !DILocation(line: 1125, column: 8, scope: !3983)
!4000 = !DILocation(line: 1126, column: 22, scope: !3993)
!4001 = !DILocation(line: 1126, column: 33, scope: !3993)
!4002 = !DILocation(line: 1126, column: 37, scope: !3993)
!4003 = !DILocation(line: 1126, column: 6, scope: !3993)
!4004 = !DILocation(line: 1127, column: 25, scope: !3983)
!4005 = !DILocation(line: 1127, column: 12, scope: !3983)
!4006 = !DILocation(line: 1127, column: 4, scope: !3983)
!4007 = !DILocation(line: 1130, column: 38, scope: !4008)
!4008 = distinct !DILexicalBlock(scope: !3983, file: !3, line: 1128, column: 6)
!4009 = !DILocation(line: 1130, column: 12, scope: !4008)
!4010 = !DILocation(line: 1130, column: 10, scope: !4008)
!4011 = !DILocation(line: 1131, column: 13, scope: !4012)
!4012 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 1131, column: 12)
!4013 = !DILocation(line: 1131, column: 12, scope: !4012)
!4014 = !DILocation(line: 1131, column: 15, scope: !4012)
!4015 = !DILocation(line: 1131, column: 12, scope: !4008)
!4016 = !DILocation(line: 1132, column: 10, scope: !4012)
!4017 = !DILocation(line: 1132, column: 21, scope: !4012)
!4018 = !DILocation(line: 1132, column: 37, scope: !4012)
!4019 = !DILocation(line: 1132, column: 7, scope: !4012)
!4020 = !DILocation(line: 1132, column: 3, scope: !4012)
!4021 = !DILocation(line: 1133, column: 12, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 1133, column: 12)
!4023 = !DILocation(line: 1133, column: 27, scope: !4022)
!4024 = !DILocation(line: 1133, column: 30, scope: !4022)
!4025 = !DILocation(line: 1133, column: 12, scope: !4008)
!4026 = !DILocation(line: 1134, column: 19, scope: !4022)
!4027 = !DILocation(line: 1134, column: 30, scope: !4022)
!4028 = !DILocation(line: 1134, column: 34, scope: !4022)
!4029 = !DILocation(line: 1134, column: 3, scope: !4022)
!4030 = !DILocation(line: 1135, column: 8, scope: !4008)
!4031 = !DILocation(line: 1138, column: 24, scope: !4008)
!4032 = !DILocation(line: 1138, column: 50, scope: !4008)
!4033 = !DILocation(line: 1138, column: 22, scope: !4008)
!4034 = !DILocation(line: 1139, column: 15, scope: !4008)
!4035 = !DILocation(line: 1139, column: 29, scope: !4008)
!4036 = !DILocation(line: 1139, column: 12, scope: !4008)
!4037 = !DILocation(line: 1140, column: 18, scope: !4008)
!4038 = !DILocation(line: 1140, column: 32, scope: !4008)
!4039 = !DILocation(line: 1140, column: 16, scope: !4008)
!4040 = !DILocation(line: 1141, column: 12, scope: !4041)
!4041 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 1141, column: 12)
!4042 = !DILocation(line: 1141, column: 28, scope: !4041)
!4043 = !DILocation(line: 1141, column: 31, scope: !4041)
!4044 = !DILocation(line: 1141, column: 45, scope: !4041)
!4045 = !DILocation(line: 1141, column: 12, scope: !4008)
!4046 = !DILocation(line: 1142, column: 10, scope: !4041)
!4047 = !DILocation(line: 1142, column: 27, scope: !4041)
!4048 = !DILocation(line: 1142, column: 33, scope: !4041)
!4049 = !DILocation(line: 1142, column: 7, scope: !4041)
!4050 = !DILocation(line: 1142, column: 3, scope: !4041)
!4051 = !DILocation(line: 1143, column: 8, scope: !4008)
!4052 = !DILocation(line: 1147, column: 15, scope: !4053)
!4053 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 1147, column: 8)
!4054 = !DILocation(line: 1147, column: 13, scope: !4053)
!4055 = !DILocation(line: 1147, column: 20, scope: !4056)
!4056 = distinct !DILexicalBlock(scope: !4053, file: !3, line: 1147, column: 8)
!4057 = !DILocation(line: 1147, column: 46, scope: !4056)
!4058 = !DILocation(line: 1147, column: 24, scope: !4056)
!4059 = !DILocation(line: 1147, column: 22, scope: !4056)
!4060 = !DILocation(line: 1147, column: 8, scope: !4053)
!4061 = !DILocalVariable(name: "argp", scope: !4062, file: !3, line: 1149, type: !2058)
!4062 = distinct !DILexicalBlock(scope: !4056, file: !3, line: 1148, column: 3)
!4063 = !DILocation(line: 1149, column: 11, scope: !4062)
!4064 = !DILocation(line: 1149, column: 39, scope: !4062)
!4065 = !DILocation(line: 1149, column: 45, scope: !4062)
!4066 = !DILocation(line: 1149, column: 18, scope: !4062)
!4067 = !DILocation(line: 1150, column: 12, scope: !4062)
!4068 = !DILocation(line: 1150, column: 23, scope: !4062)
!4069 = !DILocation(line: 1150, column: 42, scope: !4062)
!4070 = !DILocation(line: 1150, column: 9, scope: !4062)
!4071 = !DILocation(line: 1151, column: 3, scope: !4062)
!4072 = !DILocation(line: 1147, column: 54, scope: !4056)
!4073 = !DILocation(line: 1147, column: 8, scope: !4056)
!4074 = distinct !{!4074, !4060, !4075}
!4075 = !DILocation(line: 1151, column: 3, scope: !4053)
!4076 = !DILocation(line: 1153, column: 12, scope: !4077)
!4077 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 1153, column: 12)
!4078 = !DILocation(line: 1153, column: 27, scope: !4077)
!4079 = !DILocation(line: 1153, column: 30, scope: !4077)
!4080 = !DILocation(line: 1153, column: 39, scope: !4077)
!4081 = !DILocation(line: 1153, column: 12, scope: !4008)
!4082 = !DILocalVariable(name: "dest", scope: !4083, file: !3, line: 1155, type: !1696)
!4083 = distinct !DILexicalBlock(scope: !4077, file: !3, line: 1154, column: 3)
!4084 = !DILocation(line: 1155, column: 10, scope: !4083)
!4085 = !DILocation(line: 1155, column: 37, scope: !4083)
!4086 = !DILocation(line: 1155, column: 17, scope: !4083)
!4087 = !DILocalVariable(name: "flags", scope: !4083, file: !3, line: 1156, type: !1693)
!4088 = !DILocation(line: 1156, column: 9, scope: !4083)
!4089 = !DILocation(line: 1156, column: 36, scope: !4083)
!4090 = !DILocation(line: 1156, column: 17, scope: !4083)
!4091 = !DILocation(line: 1158, column: 9, scope: !4092)
!4092 = distinct !DILexicalBlock(scope: !4083, file: !3, line: 1158, column: 9)
!4093 = !DILocation(line: 1158, column: 9, scope: !4083)
!4094 = !DILocation(line: 1160, column: 13, scope: !4095)
!4095 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 1160, column: 13)
!4096 = distinct !DILexicalBlock(scope: !4092, file: !3, line: 1159, column: 7)
!4097 = !DILocation(line: 1160, column: 40, scope: !4095)
!4098 = !DILocation(line: 1161, column: 6, scope: !4095)
!4099 = !DILocation(line: 1161, column: 9, scope: !4095)
!4100 = !DILocation(line: 1161, column: 35, scope: !4095)
!4101 = !DILocation(line: 1160, column: 13, scope: !4096)
!4102 = !DILocation(line: 1162, column: 27, scope: !4095)
!4103 = !DILocation(line: 1162, column: 4, scope: !4095)
!4104 = !DILocation(line: 1163, column: 30, scope: !4105)
!4105 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 1163, column: 13)
!4106 = !DILocation(line: 1163, column: 13, scope: !4105)
!4107 = !DILocation(line: 1164, column: 26, scope: !4105)
!4108 = !DILocation(line: 1164, column: 9, scope: !4105)
!4109 = !DILocation(line: 1164, column: 6, scope: !4105)
!4110 = !DILocation(line: 1163, column: 13, scope: !4096)
!4111 = !DILocation(line: 1166, column: 33, scope: !4112)
!4112 = distinct !DILexicalBlock(scope: !4105, file: !3, line: 1165, column: 4)
!4113 = !DILocation(line: 1167, column: 44, scope: !4114)
!4114 = distinct !DILexicalBlock(scope: !4112, file: !3, line: 1167, column: 10)
!4115 = !DILocation(line: 1167, column: 11, scope: !4114)
!4116 = !DILocation(line: 1167, column: 10, scope: !4112)
!4117 = !DILocation(line: 1168, column: 47, scope: !4114)
!4118 = !DILocation(line: 1168, column: 8, scope: !4114)
!4119 = !DILocation(line: 1169, column: 4, scope: !4112)
!4120 = !DILocation(line: 1170, column: 7, scope: !4096)
!4121 = !DILocation(line: 1172, column: 9, scope: !4122)
!4122 = distinct !DILexicalBlock(scope: !4083, file: !3, line: 1172, column: 9)
!4123 = !DILocation(line: 1173, column: 9, scope: !4122)
!4124 = !DILocation(line: 1173, column: 13, scope: !4122)
!4125 = !DILocation(line: 1173, column: 19, scope: !4122)
!4126 = !DILocation(line: 1173, column: 45, scope: !4122)
!4127 = !DILocation(line: 1172, column: 9, scope: !4083)
!4128 = !DILocation(line: 1174, column: 23, scope: !4122)
!4129 = !DILocation(line: 1174, column: 34, scope: !4122)
!4130 = !DILocation(line: 1174, column: 38, scope: !4122)
!4131 = !DILocation(line: 1174, column: 7, scope: !4122)
!4132 = !DILocation(line: 1175, column: 3, scope: !4083)
!4133 = !DILocation(line: 1177, column: 29, scope: !4134)
!4134 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 1177, column: 12)
!4135 = !DILocation(line: 1177, column: 12, scope: !4134)
!4136 = !DILocation(line: 1177, column: 12, scope: !4008)
!4137 = !DILocalVariable(name: "lhs_ptr", scope: !4138, file: !3, line: 1179, type: !2058)
!4138 = distinct !DILexicalBlock(scope: !4134, file: !3, line: 1178, column: 3)
!4139 = !DILocation(line: 1179, column: 11, scope: !4138)
!4140 = !DILocation(line: 1179, column: 42, scope: !4138)
!4141 = !DILocation(line: 1179, column: 21, scope: !4138)
!4142 = !DILocation(line: 1180, column: 10, scope: !4143)
!4143 = distinct !DILexicalBlock(scope: !4138, file: !3, line: 1180, column: 9)
!4144 = !DILocation(line: 1181, column: 9, scope: !4143)
!4145 = !DILocation(line: 1181, column: 46, scope: !4143)
!4146 = !DILocation(line: 1182, column: 12, scope: !4143)
!4147 = !DILocation(line: 1182, column: 11, scope: !4143)
!4148 = !DILocation(line: 1181, column: 13, scope: !4143)
!4149 = !DILocation(line: 1180, column: 9, scope: !4138)
!4150 = !DILocation(line: 1184, column: 16, scope: !4151)
!4151 = distinct !DILexicalBlock(scope: !4143, file: !3, line: 1183, column: 7)
!4152 = !DILocation(line: 1184, column: 27, scope: !4151)
!4153 = !DILocation(line: 1184, column: 48, scope: !4151)
!4154 = !DILocation(line: 1184, column: 13, scope: !4151)
!4155 = !DILocation(line: 1185, column: 13, scope: !4156)
!4156 = distinct !DILexicalBlock(scope: !4151, file: !3, line: 1185, column: 13)
!4157 = !DILocation(line: 1185, column: 13, scope: !4151)
!4158 = !DILocation(line: 1186, column: 11, scope: !4156)
!4159 = !DILocation(line: 1186, column: 28, scope: !4156)
!4160 = !DILocation(line: 1186, column: 34, scope: !4156)
!4161 = !DILocation(line: 1186, column: 8, scope: !4156)
!4162 = !DILocation(line: 1186, column: 4, scope: !4156)
!4163 = !DILocation(line: 1187, column: 7, scope: !4151)
!4164 = !DILocation(line: 1188, column: 3, scope: !4138)
!4165 = !DILocation(line: 1189, column: 8, scope: !4008)
!4166 = !DILocation(line: 1192, column: 12, scope: !4167)
!4167 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 1192, column: 12)
!4168 = !DILocation(line: 1192, column: 12, scope: !4008)
!4169 = !DILocation(line: 1194, column: 36, scope: !4170)
!4170 = distinct !DILexicalBlock(scope: !4167, file: !3, line: 1193, column: 3)
!4171 = !DILocation(line: 1194, column: 5, scope: !4170)
!4172 = !DILocation(line: 1196, column: 9, scope: !4173)
!4173 = distinct !DILexicalBlock(scope: !4170, file: !3, line: 1196, column: 9)
!4174 = !DILocation(line: 1196, column: 9, scope: !4170)
!4175 = !DILocation(line: 1197, column: 23, scope: !4173)
!4176 = !DILocation(line: 1197, column: 34, scope: !4173)
!4177 = !DILocation(line: 1197, column: 38, scope: !4173)
!4178 = !DILocation(line: 1197, column: 7, scope: !4173)
!4179 = !DILocation(line: 1198, column: 3, scope: !4170)
!4180 = !DILocation(line: 1199, column: 15, scope: !4181)
!4181 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 1199, column: 8)
!4182 = !DILocation(line: 1199, column: 13, scope: !4181)
!4183 = !DILocation(line: 1199, column: 20, scope: !4184)
!4184 = distinct !DILexicalBlock(scope: !4181, file: !3, line: 1199, column: 8)
!4185 = !DILocation(line: 1199, column: 44, scope: !4184)
!4186 = !DILocation(line: 1199, column: 24, scope: !4184)
!4187 = !DILocation(line: 1199, column: 22, scope: !4184)
!4188 = !DILocation(line: 1199, column: 8, scope: !4181)
!4189 = !DILocalVariable(name: "op", scope: !4190, file: !3, line: 1201, type: !2058)
!4190 = distinct !DILexicalBlock(scope: !4184, file: !3, line: 1200, column: 3)
!4191 = !DILocation(line: 1201, column: 11, scope: !4190)
!4192 = !DILocation(line: 1201, column: 17, scope: !4190)
!4193 = !DILocation(line: 1202, column: 12, scope: !4190)
!4194 = !DILocation(line: 1202, column: 23, scope: !4190)
!4195 = !DILocation(line: 1202, column: 40, scope: !4190)
!4196 = !DILocation(line: 1202, column: 9, scope: !4190)
!4197 = !DILocation(line: 1203, column: 3, scope: !4190)
!4198 = !DILocation(line: 1199, column: 52, scope: !4184)
!4199 = !DILocation(line: 1199, column: 8, scope: !4184)
!4200 = distinct !{!4200, !4188, !4201}
!4201 = !DILocation(line: 1203, column: 3, scope: !4181)
!4202 = !DILocation(line: 1204, column: 15, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 1204, column: 8)
!4204 = !DILocation(line: 1204, column: 13, scope: !4203)
!4205 = !DILocation(line: 1204, column: 20, scope: !4206)
!4206 = distinct !DILexicalBlock(scope: !4203, file: !3, line: 1204, column: 8)
!4207 = !DILocation(line: 1204, column: 45, scope: !4206)
!4208 = !DILocation(line: 1204, column: 24, scope: !4206)
!4209 = !DILocation(line: 1204, column: 22, scope: !4206)
!4210 = !DILocation(line: 1204, column: 8, scope: !4203)
!4211 = !DILocalVariable(name: "op", scope: !4212, file: !3, line: 1206, type: !2058)
!4212 = distinct !DILexicalBlock(scope: !4206, file: !3, line: 1205, column: 3)
!4213 = !DILocation(line: 1206, column: 11, scope: !4212)
!4214 = !DILocation(line: 1206, column: 17, scope: !4212)
!4215 = !DILocation(line: 1207, column: 12, scope: !4212)
!4216 = !DILocation(line: 1207, column: 23, scope: !4212)
!4217 = !DILocation(line: 1207, column: 39, scope: !4212)
!4218 = !DILocation(line: 1207, column: 9, scope: !4212)
!4219 = !DILocation(line: 1208, column: 3, scope: !4212)
!4220 = !DILocation(line: 1204, column: 53, scope: !4206)
!4221 = !DILocation(line: 1204, column: 8, scope: !4206)
!4222 = distinct !{!4222, !4210, !4223}
!4223 = !DILocation(line: 1208, column: 3, scope: !4203)
!4224 = !DILocation(line: 1209, column: 8, scope: !4008)
!4225 = !DILocation(line: 1212, column: 8, scope: !4008)
!4226 = !DILocation(line: 1215, column: 8, scope: !4227)
!4227 = distinct !DILexicalBlock(scope: !3983, file: !3, line: 1215, column: 8)
!4228 = !DILocation(line: 1215, column: 8, scope: !3983)
!4229 = !DILocation(line: 1217, column: 12, scope: !4230)
!4230 = distinct !DILexicalBlock(scope: !4227, file: !3, line: 1216, column: 6)
!4231 = !DILocation(line: 1219, column: 13, scope: !4232)
!4232 = distinct !DILexicalBlock(scope: !4230, file: !3, line: 1219, column: 12)
!4233 = !DILocation(line: 1219, column: 12, scope: !4230)
!4234 = !DILocation(line: 1221, column: 16, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 1220, column: 3)
!4236 = !DILocation(line: 1222, column: 18, scope: !4235)
!4237 = !DILocation(line: 1222, column: 5, scope: !4235)
!4238 = !DILocation(line: 1223, column: 26, scope: !4235)
!4239 = !DILocation(line: 1223, column: 5, scope: !4235)
!4240 = !DILocation(line: 1224, column: 3, scope: !4235)
!4241 = !DILocation(line: 1225, column: 6, scope: !4230)
!4242 = !DILocation(line: 1226, column: 8, scope: !4243)
!4243 = distinct !DILexicalBlock(scope: !3983, file: !3, line: 1226, column: 8)
!4244 = !DILocation(line: 1226, column: 8, scope: !3983)
!4245 = !DILocation(line: 1227, column: 17, scope: !4243)
!4246 = !DILocation(line: 1227, column: 6, scope: !4243)
!4247 = !DILocation(line: 1230, column: 8, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4243, file: !3, line: 1229, column: 6)
!4249 = !DILocation(line: 1231, column: 12, scope: !4248)
!4250 = distinct !{!4250, !3979, !4251}
!4251 = !DILocation(line: 1233, column: 2, scope: !3955)
!4252 = !DILocation(line: 1234, column: 12, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !3955, file: !3, line: 1234, column: 11)
!4254 = !DILocation(line: 1234, column: 27, scope: !4253)
!4255 = !DILocation(line: 1234, column: 30, scope: !4253)
!4256 = !DILocation(line: 1234, column: 41, scope: !4253)
!4257 = !DILocation(line: 1234, column: 44, scope: !4253)
!4258 = !DILocation(line: 1234, column: 53, scope: !4253)
!4259 = !DILocation(line: 1234, column: 11, scope: !3955)
!4260 = !DILocation(line: 1235, column: 30, scope: !4253)
!4261 = !DILocation(line: 1235, column: 2, scope: !4253)
!4262 = !DILocation(line: 1236, column: 5, scope: !3955)
!4263 = distinct !{!4263, !3950, !4264}
!4264 = !DILocation(line: 1236, column: 5, scope: !3951)
!4265 = !DILocation(line: 1238, column: 10, scope: !3911)
!4266 = !DILocation(line: 1238, column: 3, scope: !3911)
!4267 = distinct !DISubprogram(name: "build_access_from_expr", scope: !3, file: !3, line: 962, type: !3915, scopeLine: 965, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!4268 = !DILocalVariable(name: "expr_ptr", arg: 1, scope: !4267, file: !3, line: 962, type: !2058)
!4269 = !DILocation(line: 962, column: 31, scope: !4267)
!4270 = !DILocalVariable(name: "gsi", arg: 2, scope: !4267, file: !3, line: 963, type: !3917)
!4271 = !DILocation(line: 963, column: 26, scope: !4267)
!4272 = !DILocalVariable(name: "write", arg: 3, scope: !4267, file: !3, line: 963, type: !1815)
!4273 = !DILocation(line: 963, column: 53, scope: !4267)
!4274 = !DILocalVariable(name: "data", arg: 4, scope: !4267, file: !3, line: 964, type: !1977)
!4275 = !DILocation(line: 964, column: 10, scope: !4267)
!4276 = !DILocalVariable(name: "access", scope: !4267, file: !3, line: 966, type: !2999)
!4277 = !DILocation(line: 966, column: 18, scope: !4267)
!4278 = !DILocation(line: 968, column: 38, scope: !4267)
!4279 = !DILocation(line: 968, column: 59, scope: !4267)
!4280 = !DILocation(line: 968, column: 48, scope: !4267)
!4281 = !DILocation(line: 968, column: 65, scope: !4267)
!4282 = !DILocation(line: 968, column: 12, scope: !4267)
!4283 = !DILocation(line: 968, column: 10, scope: !4267)
!4284 = !DILocation(line: 969, column: 7, scope: !4285)
!4285 = distinct !DILexicalBlock(scope: !4267, file: !3, line: 969, column: 7)
!4286 = !DILocation(line: 969, column: 7, scope: !4267)
!4287 = !DILocation(line: 974, column: 11, scope: !4288)
!4288 = distinct !DILexicalBlock(scope: !4289, file: !3, line: 974, column: 11)
!4289 = distinct !DILexicalBlock(scope: !4285, file: !3, line: 970, column: 5)
!4290 = !DILocation(line: 974, column: 11, scope: !4289)
!4291 = !DILocation(line: 975, column: 18, scope: !4288)
!4292 = !DILocation(line: 975, column: 48, scope: !4288)
!4293 = !DILocation(line: 975, column: 2, scope: !4288)
!4294 = !DILocation(line: 976, column: 7, scope: !4289)
!4295 = !DILocation(line: 978, column: 3, scope: !4267)
!4296 = !DILocation(line: 979, column: 1, scope: !4267)
!4297 = distinct !DISubprogram(name: "build_accesses_from_assign", scope: !3, file: !3, line: 1014, type: !3925, scopeLine: 1017, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!4298 = !DILocalVariable(name: "stmt_ptr", arg: 1, scope: !4297, file: !3, line: 1014, type: !3551)
!4299 = !DILocation(line: 1014, column: 37, scope: !4297)
!4300 = !DILocalVariable(name: "gsi", arg: 2, scope: !4297, file: !3, line: 1015, type: !3917)
!4301 = !DILocation(line: 1015, column: 30, scope: !4297)
!4302 = !DILocalVariable(name: "data", arg: 3, scope: !4297, file: !3, line: 1016, type: !1977)
!4303 = !DILocation(line: 1016, column: 14, scope: !4297)
!4304 = !DILocalVariable(name: "stmt", scope: !4297, file: !3, line: 1018, type: !2024)
!4305 = !DILocation(line: 1018, column: 10, scope: !4297)
!4306 = !DILocation(line: 1018, column: 18, scope: !4297)
!4307 = !DILocation(line: 1018, column: 17, scope: !4297)
!4308 = !DILocalVariable(name: "lhs_ptr", scope: !4297, file: !3, line: 1019, type: !2058)
!4309 = !DILocation(line: 1019, column: 9, scope: !4297)
!4310 = !DILocalVariable(name: "rhs_ptr", scope: !4297, file: !3, line: 1019, type: !2058)
!4311 = !DILocation(line: 1019, column: 19, scope: !4297)
!4312 = !DILocalVariable(name: "lacc", scope: !4297, file: !3, line: 1020, type: !2999)
!4313 = !DILocation(line: 1020, column: 18, scope: !4297)
!4314 = !DILocalVariable(name: "racc", scope: !4297, file: !3, line: 1020, type: !2999)
!4315 = !DILocation(line: 1020, column: 25, scope: !4297)
!4316 = !DILocation(line: 1022, column: 32, scope: !4317)
!4317 = distinct !DILexicalBlock(scope: !4297, file: !3, line: 1022, column: 7)
!4318 = !DILocation(line: 1022, column: 8, scope: !4317)
!4319 = !DILocation(line: 1022, column: 7, scope: !4297)
!4320 = !DILocation(line: 1023, column: 5, scope: !4317)
!4321 = !DILocation(line: 1025, column: 36, scope: !4297)
!4322 = !DILocation(line: 1025, column: 13, scope: !4297)
!4323 = !DILocation(line: 1025, column: 11, scope: !4297)
!4324 = !DILocation(line: 1026, column: 37, scope: !4297)
!4325 = !DILocation(line: 1026, column: 13, scope: !4297)
!4326 = !DILocation(line: 1026, column: 11, scope: !4297)
!4327 = !DILocation(line: 1028, column: 40, scope: !4328)
!4328 = distinct !DILexicalBlock(scope: !4297, file: !3, line: 1028, column: 7)
!4329 = !DILocation(line: 1028, column: 47, scope: !4328)
!4330 = !DILocation(line: 1028, column: 46, scope: !4328)
!4331 = !DILocation(line: 1028, column: 57, scope: !4328)
!4332 = !DILocation(line: 1028, column: 56, scope: !4328)
!4333 = !DILocation(line: 1028, column: 7, scope: !4328)
!4334 = !DILocation(line: 1028, column: 7, scope: !4297)
!4335 = !DILocation(line: 1029, column: 5, scope: !4328)
!4336 = !DILocation(line: 1031, column: 36, scope: !4297)
!4337 = !DILocation(line: 1031, column: 45, scope: !4297)
!4338 = !DILocation(line: 1031, column: 10, scope: !4297)
!4339 = !DILocation(line: 1031, column: 8, scope: !4297)
!4340 = !DILocation(line: 1032, column: 36, scope: !4297)
!4341 = !DILocation(line: 1032, column: 45, scope: !4297)
!4342 = !DILocation(line: 1032, column: 10, scope: !4297)
!4343 = !DILocation(line: 1032, column: 8, scope: !4297)
!4344 = !DILocation(line: 1034, column: 7, scope: !4345)
!4345 = distinct !DILexicalBlock(scope: !4297, file: !3, line: 1034, column: 7)
!4346 = !DILocation(line: 1034, column: 36, scope: !4345)
!4347 = !DILocation(line: 1034, column: 65, scope: !4345)
!4348 = !DILocation(line: 1034, column: 40, scope: !4345)
!4349 = !DILocation(line: 1035, column: 7, scope: !4345)
!4350 = !DILocation(line: 1035, column: 10, scope: !4345)
!4351 = !DILocation(line: 1035, column: 15, scope: !4345)
!4352 = !DILocation(line: 1035, column: 39, scope: !4345)
!4353 = !DILocation(line: 1035, column: 45, scope: !4345)
!4354 = !DILocation(line: 1035, column: 19, scope: !4345)
!4355 = !DILocation(line: 1034, column: 7, scope: !4297)
!4356 = !DILocation(line: 1036, column: 21, scope: !4345)
!4357 = !DILocation(line: 1036, column: 51, scope: !4345)
!4358 = !DILocation(line: 1036, column: 5, scope: !4345)
!4359 = !DILocation(line: 1038, column: 7, scope: !4360)
!4360 = distinct !DILexicalBlock(scope: !4297, file: !3, line: 1038, column: 7)
!4361 = !DILocation(line: 1038, column: 12, scope: !4360)
!4362 = !DILocation(line: 1038, column: 15, scope: !4360)
!4363 = !DILocation(line: 1039, column: 7, scope: !4360)
!4364 = !DILocation(line: 1039, column: 11, scope: !4360)
!4365 = !DILocation(line: 1039, column: 20, scope: !4360)
!4366 = !DILocation(line: 1039, column: 44, scope: !4360)
!4367 = !DILocation(line: 1039, column: 47, scope: !4360)
!4368 = !DILocation(line: 1039, column: 56, scope: !4360)
!4369 = !DILocation(line: 1040, column: 7, scope: !4360)
!4370 = !DILocation(line: 1040, column: 11, scope: !4360)
!4371 = !DILocation(line: 1040, column: 17, scope: !4360)
!4372 = !DILocation(line: 1041, column: 7, scope: !4360)
!4373 = !DILocation(line: 1041, column: 11, scope: !4360)
!4374 = !DILocation(line: 1041, column: 17, scope: !4360)
!4375 = !DILocation(line: 1042, column: 7, scope: !4360)
!4376 = !DILocation(line: 1042, column: 10, scope: !4360)
!4377 = !DILocation(line: 1045, column: 7, scope: !4360)
!4378 = !DILocation(line: 1045, column: 10, scope: !4360)
!4379 = !DILocation(line: 1045, column: 16, scope: !4360)
!4380 = !DILocation(line: 1045, column: 24, scope: !4360)
!4381 = !DILocation(line: 1045, column: 30, scope: !4360)
!4382 = !DILocation(line: 1045, column: 21, scope: !4360)
!4383 = !DILocation(line: 1046, column: 7, scope: !4360)
!4384 = !DILocation(line: 1046, column: 37, scope: !4360)
!4385 = !DILocation(line: 1046, column: 43, scope: !4360)
!4386 = !DILocation(line: 1046, column: 49, scope: !4360)
!4387 = !DILocation(line: 1046, column: 55, scope: !4360)
!4388 = !DILocation(line: 1046, column: 10, scope: !4360)
!4389 = !DILocation(line: 1038, column: 7, scope: !4297)
!4390 = !DILocalVariable(name: "link", scope: !4391, file: !3, line: 1048, type: !3013)
!4391 = distinct !DILexicalBlock(scope: !4360, file: !3, line: 1047, column: 5)
!4392 = !DILocation(line: 1048, column: 27, scope: !4391)
!4393 = !DILocation(line: 1050, column: 49, scope: !4391)
!4394 = !DILocation(line: 1050, column: 37, scope: !4391)
!4395 = !DILocation(line: 1050, column: 14, scope: !4391)
!4396 = !DILocation(line: 1050, column: 12, scope: !4391)
!4397 = !DILocation(line: 1051, column: 15, scope: !4391)
!4398 = !DILocation(line: 1051, column: 7, scope: !4391)
!4399 = !DILocation(line: 1053, column: 20, scope: !4391)
!4400 = !DILocation(line: 1053, column: 7, scope: !4391)
!4401 = !DILocation(line: 1053, column: 13, scope: !4391)
!4402 = !DILocation(line: 1053, column: 18, scope: !4391)
!4403 = !DILocation(line: 1054, column: 20, scope: !4391)
!4404 = !DILocation(line: 1054, column: 7, scope: !4391)
!4405 = !DILocation(line: 1054, column: 13, scope: !4391)
!4406 = !DILocation(line: 1054, column: 18, scope: !4391)
!4407 = !DILocation(line: 1056, column: 24, scope: !4391)
!4408 = !DILocation(line: 1056, column: 30, scope: !4391)
!4409 = !DILocation(line: 1056, column: 7, scope: !4391)
!4410 = !DILocation(line: 1057, column: 5, scope: !4391)
!4411 = !DILocation(line: 1059, column: 11, scope: !4297)
!4412 = !DILocation(line: 1059, column: 16, scope: !4297)
!4413 = !DILocation(line: 1059, column: 19, scope: !4297)
!4414 = !DILocation(line: 1059, column: 10, scope: !4297)
!4415 = !DILocation(line: 1059, column: 3, scope: !4297)
!4416 = !DILocation(line: 1060, column: 1, scope: !4297)
!4417 = distinct !DISubprogram(name: "analyze_all_variable_accesses", scope: !3, file: !3, line: 2042, type: !3102, scopeLine: 2043, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!4418 = !DILocalVariable(name: "res", scope: !4417, file: !3, line: 2044, type: !1693)
!4419 = !DILocation(line: 2044, column: 7, scope: !4417)
!4420 = !DILocalVariable(name: "tmp", scope: !4417, file: !3, line: 2045, type: !2541)
!4421 = !DILocation(line: 2045, column: 10, scope: !4417)
!4422 = !DILocation(line: 2045, column: 16, scope: !4417)
!4423 = !DILocalVariable(name: "bi", scope: !4417, file: !3, line: 2046, type: !4424)
!4424 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1927, line: 218, baseType: !4425)
!4425 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1927, line: 203, size: 256, elements: !4426)
!4426 = !{!4427, !4428, !4429, !4430}
!4427 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !4425, file: !1927, line: 206, baseType: !1930, size: 64)
!4428 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !4425, file: !1927, line: 209, baseType: !1930, size: 64, offset: 64)
!4429 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !4425, file: !1927, line: 212, baseType: !7, size: 32, offset: 128)
!4430 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !4425, file: !1927, line: 217, baseType: !1940, size: 64, offset: 192)
!4431 = !DILocation(line: 2046, column: 19, scope: !4417)
!4432 = !DILocalVariable(name: "i", scope: !4417, file: !3, line: 2047, type: !7)
!4433 = !DILocation(line: 2047, column: 12, scope: !4417)
!4434 = !DILocalVariable(name: "max_total_scalarization_size", scope: !4417, file: !3, line: 2047, type: !7)
!4435 = !DILocation(line: 2047, column: 15, scope: !4417)
!4436 = !DILocation(line: 2050, column: 7, scope: !4417)
!4437 = !DILocation(line: 2050, column: 5, scope: !4417)
!4438 = !DILocation(line: 2049, column: 32, scope: !4417)
!4439 = !DILocation(line: 2052, column: 3, scope: !4440)
!4440 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 2052, column: 3)
!4441 = !DILocation(line: 2052, column: 3, scope: !4442)
!4442 = distinct !DILexicalBlock(scope: !4440, file: !3, line: 2052, column: 3)
!4443 = !DILocation(line: 2053, column: 23, scope: !4444)
!4444 = distinct !DILexicalBlock(scope: !4442, file: !3, line: 2053, column: 9)
!4445 = !DILocation(line: 2053, column: 53, scope: !4444)
!4446 = !DILocation(line: 2053, column: 9, scope: !4444)
!4447 = !DILocation(line: 2054, column: 2, scope: !4444)
!4448 = !DILocation(line: 2054, column: 20, scope: !4444)
!4449 = !DILocation(line: 2054, column: 50, scope: !4444)
!4450 = !DILocation(line: 2054, column: 6, scope: !4444)
!4451 = !DILocation(line: 2053, column: 9, scope: !4442)
!4452 = !DILocalVariable(name: "var", scope: !4453, file: !3, line: 2056, type: !1696)
!4453 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 2055, column: 7)
!4454 = !DILocation(line: 2056, column: 7, scope: !4453)
!4455 = !DILocation(line: 2056, column: 13, scope: !4453)
!4456 = !DILocation(line: 2058, column: 6, scope: !4457)
!4457 = distinct !DILexicalBlock(scope: !4453, file: !3, line: 2058, column: 6)
!4458 = !DILocation(line: 2058, column: 22, scope: !4457)
!4459 = !DILocation(line: 2059, column: 6, scope: !4457)
!4460 = !DILocation(line: 2059, column: 35, scope: !4457)
!4461 = !DILocation(line: 2059, column: 21, scope: !4457)
!4462 = !DILocation(line: 2059, column: 10, scope: !4457)
!4463 = !DILocation(line: 2060, column: 6, scope: !4457)
!4464 = !DILocation(line: 2060, column: 3, scope: !4457)
!4465 = !DILocation(line: 2061, column: 6, scope: !4457)
!4466 = !DILocation(line: 2061, column: 37, scope: !4457)
!4467 = !DILocation(line: 2061, column: 9, scope: !4457)
!4468 = !DILocation(line: 2058, column: 6, scope: !4453)
!4469 = !DILocation(line: 2063, column: 35, scope: !4470)
!4470 = distinct !DILexicalBlock(scope: !4457, file: !3, line: 2062, column: 4)
!4471 = !DILocation(line: 2063, column: 40, scope: !4470)
!4472 = !DILocation(line: 2063, column: 6, scope: !4470)
!4473 = !DILocation(line: 2064, column: 10, scope: !4474)
!4474 = distinct !DILexicalBlock(scope: !4470, file: !3, line: 2064, column: 10)
!4475 = !DILocation(line: 2064, column: 20, scope: !4474)
!4476 = !DILocation(line: 2064, column: 24, scope: !4474)
!4477 = !DILocation(line: 2064, column: 35, scope: !4474)
!4478 = !DILocation(line: 2064, column: 10, scope: !4470)
!4479 = !DILocation(line: 2066, column: 12, scope: !4480)
!4480 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 2065, column: 8)
!4481 = !DILocation(line: 2066, column: 3, scope: !4480)
!4482 = !DILocation(line: 2067, column: 23, scope: !4480)
!4483 = !DILocation(line: 2067, column: 34, scope: !4480)
!4484 = !DILocation(line: 2067, column: 3, scope: !4480)
!4485 = !DILocation(line: 2068, column: 12, scope: !4480)
!4486 = !DILocation(line: 2068, column: 41, scope: !4480)
!4487 = !DILocation(line: 2068, column: 3, scope: !4480)
!4488 = !DILocation(line: 2069, column: 8, scope: !4480)
!4489 = !DILocation(line: 2070, column: 4, scope: !4470)
!4490 = !DILocation(line: 2071, column: 7, scope: !4453)
!4491 = !DILocation(line: 2054, column: 51, scope: !4444)
!4492 = distinct !{!4492, !4439, !4493}
!4493 = !DILocation(line: 2071, column: 7, scope: !4440)
!4494 = !DILocation(line: 2073, column: 16, scope: !4417)
!4495 = !DILocation(line: 2073, column: 21, scope: !4417)
!4496 = !DILocation(line: 2073, column: 3, scope: !4417)
!4497 = !DILocation(line: 2074, column: 3, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 2074, column: 3)
!4499 = !DILocation(line: 2074, column: 3, scope: !4500)
!4500 = distinct !DILexicalBlock(scope: !4498, file: !3, line: 2074, column: 3)
!4501 = !DILocalVariable(name: "var", scope: !4502, file: !3, line: 2076, type: !1696)
!4502 = distinct !DILexicalBlock(scope: !4500, file: !3, line: 2075, column: 5)
!4503 = !DILocation(line: 2076, column: 12, scope: !4502)
!4504 = !DILocation(line: 2076, column: 18, scope: !4502)
!4505 = !DILocalVariable(name: "access", scope: !4502, file: !3, line: 2077, type: !2999)
!4506 = !DILocation(line: 2077, column: 22, scope: !4502)
!4507 = !DILocation(line: 2079, column: 46, scope: !4502)
!4508 = !DILocation(line: 2079, column: 16, scope: !4502)
!4509 = !DILocation(line: 2079, column: 14, scope: !4502)
!4510 = !DILocation(line: 2080, column: 11, scope: !4511)
!4511 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 2080, column: 11)
!4512 = !DILocation(line: 2080, column: 11, scope: !4502)
!4513 = !DILocation(line: 2081, column: 22, scope: !4511)
!4514 = !DILocation(line: 2081, column: 2, scope: !4511)
!4515 = !DILocation(line: 2083, column: 24, scope: !4511)
!4516 = !DILocation(line: 2083, column: 2, scope: !4511)
!4517 = !DILocation(line: 2085, column: 5, scope: !4502)
!4518 = distinct !{!4518, !4497, !4519}
!4519 = !DILocation(line: 2085, column: 5, scope: !4498)
!4520 = !DILocation(line: 2087, column: 3, scope: !4417)
!4521 = !DILocation(line: 2089, column: 16, scope: !4417)
!4522 = !DILocation(line: 2089, column: 21, scope: !4417)
!4523 = !DILocation(line: 2089, column: 3, scope: !4417)
!4524 = !DILocation(line: 2090, column: 3, scope: !4525)
!4525 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 2090, column: 3)
!4526 = !DILocation(line: 2090, column: 3, scope: !4527)
!4527 = distinct !DILexicalBlock(scope: !4525, file: !3, line: 2090, column: 3)
!4528 = !DILocalVariable(name: "var", scope: !4529, file: !3, line: 2092, type: !1696)
!4529 = distinct !DILexicalBlock(scope: !4527, file: !3, line: 2091, column: 5)
!4530 = !DILocation(line: 2092, column: 12, scope: !4529)
!4531 = !DILocation(line: 2092, column: 18, scope: !4529)
!4532 = !DILocalVariable(name: "access", scope: !4529, file: !3, line: 2093, type: !2999)
!4533 = !DILocation(line: 2093, column: 22, scope: !4529)
!4534 = !DILocation(line: 2093, column: 56, scope: !4529)
!4535 = !DILocation(line: 2093, column: 31, scope: !4529)
!4536 = !DILocation(line: 2095, column: 33, scope: !4537)
!4537 = distinct !DILexicalBlock(scope: !4529, file: !3, line: 2095, column: 11)
!4538 = !DILocation(line: 2095, column: 11, scope: !4537)
!4539 = !DILocation(line: 2095, column: 11, scope: !4529)
!4540 = !DILocation(line: 2097, column: 7, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4537, file: !3, line: 2096, column: 2)
!4542 = !DILocation(line: 2098, column: 8, scope: !4543)
!4543 = distinct !DILexicalBlock(scope: !4541, file: !3, line: 2098, column: 8)
!4544 = !DILocation(line: 2098, column: 18, scope: !4543)
!4545 = !DILocation(line: 2098, column: 22, scope: !4543)
!4546 = !DILocation(line: 2098, column: 33, scope: !4543)
!4547 = !DILocation(line: 2098, column: 8, scope: !4541)
!4548 = !DILocation(line: 2100, column: 17, scope: !4549)
!4549 = distinct !DILexicalBlock(scope: !4543, file: !3, line: 2099, column: 6)
!4550 = !DILocation(line: 2100, column: 8, scope: !4549)
!4551 = !DILocation(line: 2101, column: 28, scope: !4549)
!4552 = !DILocation(line: 2101, column: 39, scope: !4549)
!4553 = !DILocation(line: 2101, column: 8, scope: !4549)
!4554 = !DILocation(line: 2102, column: 17, scope: !4549)
!4555 = !DILocation(line: 2102, column: 46, scope: !4549)
!4556 = !DILocation(line: 2102, column: 8, scope: !4549)
!4557 = !DILocation(line: 2103, column: 26, scope: !4549)
!4558 = !DILocation(line: 2103, column: 37, scope: !4549)
!4559 = !DILocation(line: 2103, column: 8, scope: !4549)
!4560 = !DILocation(line: 2104, column: 17, scope: !4549)
!4561 = !DILocation(line: 2104, column: 8, scope: !4549)
!4562 = !DILocation(line: 2105, column: 6, scope: !4549)
!4563 = !DILocation(line: 2106, column: 2, scope: !4541)
!4564 = !DILocation(line: 2108, column: 24, scope: !4537)
!4565 = !DILocation(line: 2108, column: 2, scope: !4537)
!4566 = !DILocation(line: 2109, column: 5, scope: !4529)
!4567 = distinct !{!4567, !4524, !4568}
!4568 = !DILocation(line: 2109, column: 5, scope: !4525)
!4569 = !DILocation(line: 2111, column: 3, scope: !4417)
!4570 = !DILocation(line: 2113, column: 7, scope: !4571)
!4571 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 2113, column: 7)
!4572 = !DILocation(line: 2113, column: 7, scope: !4417)
!4573 = !DILocation(line: 2115, column: 33, scope: !4574)
!4574 = distinct !DILexicalBlock(scope: !4571, file: !3, line: 2114, column: 5)
!4575 = !DILocation(line: 2115, column: 64, scope: !4574)
!4576 = !DILocation(line: 2115, column: 7, scope: !4574)
!4577 = !DILocation(line: 2116, column: 7, scope: !4574)
!4578 = !DILocation(line: 2119, column: 5, scope: !4571)
!4579 = !DILocation(line: 2120, column: 1, scope: !4417)
!4580 = distinct !DISubprogram(name: "sra_modify_expr", scope: !3, file: !3, line: 2292, type: !3915, scopeLine: 2294, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!4581 = !DILocalVariable(name: "expr", arg: 1, scope: !4580, file: !3, line: 2292, type: !2058)
!4582 = !DILocation(line: 2292, column: 24, scope: !4580)
!4583 = !DILocalVariable(name: "gsi", arg: 2, scope: !4580, file: !3, line: 2292, type: !3917)
!4584 = !DILocation(line: 2292, column: 52, scope: !4580)
!4585 = !DILocalVariable(name: "write", arg: 3, scope: !4580, file: !3, line: 2292, type: !1815)
!4586 = !DILocation(line: 2292, column: 62, scope: !4580)
!4587 = !DILocalVariable(name: "data", arg: 4, scope: !4580, file: !3, line: 2293, type: !1977)
!4588 = !DILocation(line: 2293, column: 10, scope: !4580)
!4589 = !DILocalVariable(name: "access", scope: !4580, file: !3, line: 2295, type: !2999)
!4590 = !DILocation(line: 2295, column: 18, scope: !4580)
!4591 = !DILocalVariable(name: "type", scope: !4580, file: !3, line: 2296, type: !1696)
!4592 = !DILocation(line: 2296, column: 8, scope: !4580)
!4593 = !DILocalVariable(name: "bfr", scope: !4580, file: !3, line: 2296, type: !1696)
!4594 = !DILocation(line: 2296, column: 14, scope: !4580)
!4595 = !DILocation(line: 2298, column: 7, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 2298, column: 7)
!4597 = !DILocation(line: 2298, column: 25, scope: !4596)
!4598 = !DILocation(line: 2298, column: 7, scope: !4580)
!4599 = !DILocation(line: 2300, column: 14, scope: !4600)
!4600 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2299, column: 5)
!4601 = !DILocation(line: 2300, column: 13, scope: !4600)
!4602 = !DILocation(line: 2300, column: 11, scope: !4600)
!4603 = !DILocation(line: 2301, column: 15, scope: !4600)
!4604 = !DILocation(line: 2301, column: 12, scope: !4600)
!4605 = !DILocation(line: 2302, column: 5, scope: !4600)
!4606 = !DILocation(line: 2304, column: 9, scope: !4596)
!4607 = !DILocation(line: 2306, column: 7, scope: !4608)
!4608 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 2306, column: 7)
!4609 = !DILocation(line: 2306, column: 25, scope: !4608)
!4610 = !DILocation(line: 2306, column: 42, scope: !4608)
!4611 = !DILocation(line: 2306, column: 45, scope: !4608)
!4612 = !DILocation(line: 2306, column: 63, scope: !4608)
!4613 = !DILocation(line: 2306, column: 7, scope: !4580)
!4614 = !DILocation(line: 2307, column: 13, scope: !4608)
!4615 = !DILocation(line: 2307, column: 10, scope: !4608)
!4616 = !DILocation(line: 2307, column: 5, scope: !4608)
!4617 = !DILocation(line: 2308, column: 34, scope: !4580)
!4618 = !DILocation(line: 2308, column: 33, scope: !4580)
!4619 = !DILocation(line: 2308, column: 12, scope: !4580)
!4620 = !DILocation(line: 2308, column: 10, scope: !4580)
!4621 = !DILocation(line: 2309, column: 8, scope: !4622)
!4622 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 2309, column: 7)
!4623 = !DILocation(line: 2309, column: 7, scope: !4580)
!4624 = !DILocation(line: 2310, column: 5, scope: !4622)
!4625 = !DILocation(line: 2311, column: 10, scope: !4580)
!4626 = !DILocation(line: 2311, column: 8, scope: !4580)
!4627 = !DILocation(line: 2313, column: 7, scope: !4628)
!4628 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 2313, column: 7)
!4629 = !DILocation(line: 2313, column: 15, scope: !4628)
!4630 = !DILocation(line: 2313, column: 7, scope: !4580)
!4631 = !DILocalVariable(name: "repl", scope: !4632, file: !3, line: 2315, type: !1696)
!4632 = distinct !DILexicalBlock(scope: !4628, file: !3, line: 2314, column: 5)
!4633 = !DILocation(line: 2315, column: 12, scope: !4632)
!4634 = !DILocation(line: 2315, column: 43, scope: !4632)
!4635 = !DILocation(line: 2315, column: 19, scope: !4632)
!4636 = !DILocation(line: 2326, column: 39, scope: !4637)
!4637 = distinct !DILexicalBlock(scope: !4632, file: !3, line: 2326, column: 11)
!4638 = !DILocation(line: 2326, column: 45, scope: !4637)
!4639 = !DILocation(line: 2326, column: 53, scope: !4637)
!4640 = !DILocation(line: 2326, column: 12, scope: !4637)
!4641 = !DILocation(line: 2326, column: 11, scope: !4632)
!4642 = !DILocalVariable(name: "ref", scope: !4643, file: !3, line: 2328, type: !1696)
!4643 = distinct !DILexicalBlock(scope: !4637, file: !3, line: 2327, column: 2)
!4644 = !DILocation(line: 2328, column: 9, scope: !4643)
!4645 = !DILocation(line: 2328, column: 15, scope: !4643)
!4646 = !DILocation(line: 2328, column: 23, scope: !4643)
!4647 = !DILocalVariable(name: "ok", scope: !4643, file: !3, line: 2329, type: !1815)
!4648 = !DILocation(line: 2329, column: 9, scope: !4643)
!4649 = !DILocation(line: 2331, column: 37, scope: !4643)
!4650 = !DILocation(line: 2332, column: 10, scope: !4643)
!4651 = !DILocation(line: 2332, column: 18, scope: !4643)
!4652 = !DILocation(line: 2332, column: 26, scope: !4643)
!4653 = !DILocation(line: 2332, column: 34, scope: !4643)
!4654 = !DILocation(line: 2331, column: 9, scope: !4643)
!4655 = !DILocation(line: 2331, column: 7, scope: !4643)
!4656 = !DILocation(line: 2333, column: 4, scope: !4643)
!4657 = !DILocation(line: 2335, column: 8, scope: !4658)
!4658 = distinct !DILexicalBlock(scope: !4643, file: !3, line: 2335, column: 8)
!4659 = !DILocation(line: 2335, column: 8, scope: !4643)
!4660 = !DILocalVariable(name: "stmt", scope: !4661, file: !3, line: 2337, type: !2024)
!4661 = distinct !DILexicalBlock(scope: !4658, file: !3, line: 2336, column: 6)
!4662 = !DILocation(line: 2337, column: 15, scope: !4661)
!4663 = !DILocation(line: 2339, column: 12, scope: !4664)
!4664 = distinct !DILexicalBlock(scope: !4661, file: !3, line: 2339, column: 12)
!4665 = !DILocation(line: 2339, column: 20, scope: !4664)
!4666 = !DILocation(line: 2339, column: 12, scope: !4661)
!4667 = !DILocation(line: 2340, column: 35, scope: !4664)
!4668 = !DILocation(line: 2340, column: 40, scope: !4664)
!4669 = !DILocation(line: 2340, column: 9, scope: !4664)
!4670 = !DILocation(line: 2340, column: 7, scope: !4664)
!4671 = !DILocation(line: 2340, column: 3, scope: !4664)
!4672 = !DILocation(line: 2342, column: 15, scope: !4661)
!4673 = !DILocation(line: 2342, column: 13, scope: !4661)
!4674 = !DILocation(line: 2343, column: 26, scope: !4661)
!4675 = !DILocation(line: 2343, column: 31, scope: !4661)
!4676 = !DILocation(line: 2343, column: 8, scope: !4661)
!4677 = !DILocation(line: 2344, column: 6, scope: !4661)
!4678 = !DILocalVariable(name: "stmt", scope: !4679, file: !3, line: 2347, type: !2024)
!4679 = distinct !DILexicalBlock(scope: !4658, file: !3, line: 2346, column: 6)
!4680 = !DILocation(line: 2347, column: 15, scope: !4679)
!4681 = !DILocation(line: 2349, column: 12, scope: !4682)
!4682 = distinct !DILexicalBlock(scope: !4679, file: !3, line: 2349, column: 12)
!4683 = !DILocation(line: 2349, column: 20, scope: !4682)
!4684 = !DILocation(line: 2349, column: 12, scope: !4679)
!4685 = !DILocation(line: 2350, column: 36, scope: !4682)
!4686 = !DILocation(line: 2350, column: 41, scope: !4682)
!4687 = !DILocation(line: 2350, column: 10, scope: !4682)
!4688 = !DILocation(line: 2350, column: 8, scope: !4682)
!4689 = !DILocation(line: 2350, column: 3, scope: !4682)
!4690 = !DILocation(line: 2352, column: 15, scope: !4679)
!4691 = !DILocation(line: 2352, column: 13, scope: !4679)
!4692 = !DILocation(line: 2353, column: 27, scope: !4679)
!4693 = !DILocation(line: 2353, column: 32, scope: !4679)
!4694 = !DILocation(line: 2353, column: 8, scope: !4679)
!4695 = !DILocation(line: 2355, column: 2, scope: !4643)
!4696 = !DILocation(line: 2357, column: 10, scope: !4637)
!4697 = !DILocation(line: 2357, column: 3, scope: !4637)
!4698 = !DILocation(line: 2357, column: 8, scope: !4637)
!4699 = !DILocation(line: 2358, column: 22, scope: !4632)
!4700 = !DILocation(line: 2359, column: 5, scope: !4632)
!4701 = !DILocation(line: 2361, column: 7, scope: !4702)
!4702 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 2361, column: 7)
!4703 = !DILocation(line: 2361, column: 15, scope: !4702)
!4704 = !DILocation(line: 2361, column: 7, scope: !4580)
!4705 = !DILocalVariable(name: "start_offset", scope: !4706, file: !3, line: 2363, type: !1752)
!4706 = distinct !DILexicalBlock(scope: !4702, file: !3, line: 2362, column: 5)
!4707 = !DILocation(line: 2363, column: 21, scope: !4706)
!4708 = !DILocalVariable(name: "chunk_size", scope: !4706, file: !3, line: 2363, type: !1752)
!4709 = !DILocation(line: 2363, column: 35, scope: !4706)
!4710 = !DILocation(line: 2364, column: 11, scope: !4711)
!4711 = distinct !DILexicalBlock(scope: !4706, file: !3, line: 2364, column: 11)
!4712 = !DILocation(line: 2365, column: 4, scope: !4711)
!4713 = !DILocation(line: 2365, column: 22, scope: !4711)
!4714 = !DILocation(line: 2365, column: 7, scope: !4711)
!4715 = !DILocation(line: 2366, column: 4, scope: !4711)
!4716 = !DILocation(line: 2366, column: 22, scope: !4711)
!4717 = !DILocation(line: 2366, column: 7, scope: !4711)
!4718 = !DILocation(line: 2364, column: 11, scope: !4706)
!4719 = !DILocation(line: 2368, column: 31, scope: !4720)
!4720 = distinct !DILexicalBlock(scope: !4711, file: !3, line: 2367, column: 2)
!4721 = !DILocation(line: 2368, column: 17, scope: !4720)
!4722 = !DILocation(line: 2368, column: 15, scope: !4720)
!4723 = !DILocation(line: 2369, column: 19, scope: !4720)
!4724 = !DILocation(line: 2369, column: 27, scope: !4720)
!4725 = !DILocation(line: 2370, column: 22, scope: !4720)
!4726 = !DILocation(line: 2370, column: 8, scope: !4720)
!4727 = !DILocation(line: 2370, column: 6, scope: !4720)
!4728 = !DILocation(line: 2369, column: 17, scope: !4720)
!4729 = !DILocation(line: 2371, column: 2, scope: !4720)
!4730 = !DILocation(line: 2373, column: 28, scope: !4711)
!4731 = !DILocation(line: 2373, column: 15, scope: !4711)
!4732 = !DILocation(line: 2375, column: 32, scope: !4706)
!4733 = !DILocation(line: 2375, column: 40, scope: !4706)
!4734 = !DILocation(line: 2375, column: 53, scope: !4706)
!4735 = !DILocation(line: 2375, column: 61, scope: !4706)
!4736 = !DILocation(line: 2376, column: 11, scope: !4706)
!4737 = !DILocation(line: 2376, column: 25, scope: !4706)
!4738 = !DILocation(line: 2376, column: 37, scope: !4706)
!4739 = !DILocation(line: 2376, column: 42, scope: !4706)
!4740 = !DILocation(line: 2376, column: 49, scope: !4706)
!4741 = !DILocation(line: 2375, column: 7, scope: !4706)
!4742 = !DILocation(line: 2377, column: 5, scope: !4706)
!4743 = !DILocation(line: 2378, column: 3, scope: !4580)
!4744 = !DILocation(line: 2379, column: 1, scope: !4580)
!4745 = distinct !DISubprogram(name: "sra_modify_assign", scope: !3, file: !3, line: 2543, type: !3925, scopeLine: 2545, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!4746 = !DILocalVariable(name: "stmt", arg: 1, scope: !4745, file: !3, line: 2543, type: !3551)
!4747 = !DILocation(line: 2543, column: 28, scope: !4745)
!4748 = !DILocalVariable(name: "gsi", arg: 2, scope: !4745, file: !3, line: 2543, type: !3917)
!4749 = !DILocation(line: 2543, column: 56, scope: !4745)
!4750 = !DILocalVariable(name: "data", arg: 3, scope: !4745, file: !3, line: 2544, type: !1977)
!4751 = !DILocation(line: 2544, column: 12, scope: !4745)
!4752 = !DILocalVariable(name: "lacc", scope: !4745, file: !3, line: 2546, type: !2999)
!4753 = !DILocation(line: 2546, column: 18, scope: !4745)
!4754 = !DILocalVariable(name: "racc", scope: !4745, file: !3, line: 2546, type: !2999)
!4755 = !DILocation(line: 2546, column: 25, scope: !4745)
!4756 = !DILocalVariable(name: "lhs", scope: !4745, file: !3, line: 2547, type: !1696)
!4757 = !DILocation(line: 2547, column: 8, scope: !4745)
!4758 = !DILocalVariable(name: "rhs", scope: !4745, file: !3, line: 2547, type: !1696)
!4759 = !DILocation(line: 2547, column: 13, scope: !4745)
!4760 = !DILocalVariable(name: "modify_this_stmt", scope: !4745, file: !3, line: 2548, type: !1815)
!4761 = !DILocation(line: 2548, column: 8, scope: !4745)
!4762 = !DILocalVariable(name: "force_gimple_rhs", scope: !4745, file: !3, line: 2549, type: !1815)
!4763 = !DILocation(line: 2549, column: 8, scope: !4745)
!4764 = !DILocalVariable(name: "loc", scope: !4745, file: !3, line: 2550, type: !1823)
!4765 = !DILocation(line: 2550, column: 14, scope: !4745)
!4766 = !DILocation(line: 2550, column: 38, scope: !4745)
!4767 = !DILocation(line: 2550, column: 37, scope: !4745)
!4768 = !DILocation(line: 2550, column: 20, scope: !4745)
!4769 = !DILocalVariable(name: "orig_gsi", scope: !4745, file: !3, line: 2551, type: !3918)
!4770 = !DILocation(line: 2551, column: 24, scope: !4745)
!4771 = !DILocation(line: 2551, column: 36, scope: !4745)
!4772 = !DILocation(line: 2551, column: 35, scope: !4745)
!4773 = !DILocation(line: 2553, column: 33, scope: !4774)
!4774 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 2553, column: 7)
!4775 = !DILocation(line: 2553, column: 32, scope: !4774)
!4776 = !DILocation(line: 2553, column: 8, scope: !4774)
!4777 = !DILocation(line: 2553, column: 7, scope: !4745)
!4778 = !DILocation(line: 2554, column: 5, scope: !4774)
!4779 = !DILocation(line: 2555, column: 29, scope: !4745)
!4780 = !DILocation(line: 2555, column: 28, scope: !4745)
!4781 = !DILocation(line: 2555, column: 9, scope: !4745)
!4782 = !DILocation(line: 2555, column: 7, scope: !4745)
!4783 = !DILocation(line: 2556, column: 30, scope: !4745)
!4784 = !DILocation(line: 2556, column: 29, scope: !4745)
!4785 = !DILocation(line: 2556, column: 9, scope: !4745)
!4786 = !DILocation(line: 2556, column: 7, scope: !4745)
!4787 = !DILocation(line: 2558, column: 7, scope: !4788)
!4788 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 2558, column: 7)
!4789 = !DILocation(line: 2558, column: 23, scope: !4788)
!4790 = !DILocation(line: 2558, column: 7, scope: !4745)
!4791 = !DILocation(line: 2559, column: 43, scope: !4788)
!4792 = !DILocation(line: 2559, column: 49, scope: !4788)
!4793 = !DILocation(line: 2559, column: 12, scope: !4788)
!4794 = !DILocation(line: 2559, column: 5, scope: !4788)
!4795 = !DILocation(line: 2561, column: 7, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 2561, column: 7)
!4797 = !DILocation(line: 2561, column: 23, scope: !4796)
!4798 = !DILocation(line: 2561, column: 40, scope: !4796)
!4799 = !DILocation(line: 2561, column: 43, scope: !4796)
!4800 = !DILocation(line: 2561, column: 59, scope: !4796)
!4801 = !DILocation(line: 2562, column: 7, scope: !4796)
!4802 = !DILocation(line: 2562, column: 10, scope: !4796)
!4803 = !DILocation(line: 2562, column: 26, scope: !4796)
!4804 = !DILocation(line: 2562, column: 43, scope: !4796)
!4805 = !DILocation(line: 2562, column: 46, scope: !4796)
!4806 = !DILocation(line: 2562, column: 62, scope: !4796)
!4807 = !DILocation(line: 2563, column: 7, scope: !4796)
!4808 = !DILocation(line: 2563, column: 10, scope: !4796)
!4809 = !DILocation(line: 2563, column: 26, scope: !4796)
!4810 = !DILocation(line: 2563, column: 43, scope: !4796)
!4811 = !DILocation(line: 2563, column: 46, scope: !4796)
!4812 = !DILocation(line: 2563, column: 62, scope: !4796)
!4813 = !DILocation(line: 2561, column: 7, scope: !4745)
!4814 = !DILocation(line: 2565, column: 68, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4796, file: !3, line: 2564, column: 5)
!4816 = !DILocation(line: 2565, column: 67, scope: !4815)
!4817 = !DILocation(line: 2565, column: 43, scope: !4815)
!4818 = !DILocation(line: 2566, column: 8, scope: !4815)
!4819 = !DILocation(line: 2566, column: 20, scope: !4815)
!4820 = !DILocation(line: 2565, column: 26, scope: !4815)
!4821 = !DILocation(line: 2565, column: 24, scope: !4815)
!4822 = !DILocation(line: 2567, column: 68, scope: !4815)
!4823 = !DILocation(line: 2567, column: 67, scope: !4815)
!4824 = !DILocation(line: 2567, column: 44, scope: !4815)
!4825 = !DILocation(line: 2568, column: 9, scope: !4815)
!4826 = !DILocation(line: 2568, column: 20, scope: !4815)
!4827 = !DILocation(line: 2567, column: 27, scope: !4815)
!4828 = !DILocation(line: 2567, column: 24, scope: !4815)
!4829 = !DILocation(line: 2569, column: 14, scope: !4815)
!4830 = !DILocation(line: 2569, column: 7, scope: !4815)
!4831 = !DILocation(line: 2572, column: 31, scope: !4745)
!4832 = !DILocation(line: 2572, column: 10, scope: !4745)
!4833 = !DILocation(line: 2572, column: 8, scope: !4745)
!4834 = !DILocation(line: 2573, column: 31, scope: !4745)
!4835 = !DILocation(line: 2573, column: 10, scope: !4745)
!4836 = !DILocation(line: 2573, column: 8, scope: !4745)
!4837 = !DILocation(line: 2574, column: 8, scope: !4838)
!4838 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 2574, column: 7)
!4839 = !DILocation(line: 2574, column: 13, scope: !4838)
!4840 = !DILocation(line: 2574, column: 17, scope: !4838)
!4841 = !DILocation(line: 2574, column: 7, scope: !4745)
!4842 = !DILocation(line: 2575, column: 5, scope: !4838)
!4843 = !DILocation(line: 2577, column: 7, scope: !4844)
!4844 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 2577, column: 7)
!4845 = !DILocation(line: 2577, column: 12, scope: !4844)
!4846 = !DILocation(line: 2577, column: 15, scope: !4844)
!4847 = !DILocation(line: 2577, column: 21, scope: !4844)
!4848 = !DILocation(line: 2577, column: 7, scope: !4745)
!4849 = !DILocation(line: 2579, column: 37, scope: !4850)
!4850 = distinct !DILexicalBlock(scope: !4844, file: !3, line: 2578, column: 5)
!4851 = !DILocation(line: 2579, column: 13, scope: !4850)
!4852 = !DILocation(line: 2579, column: 11, scope: !4850)
!4853 = !DILocation(line: 2580, column: 31, scope: !4850)
!4854 = !DILocation(line: 2580, column: 30, scope: !4850)
!4855 = !DILocation(line: 2580, column: 37, scope: !4850)
!4856 = !DILocation(line: 2580, column: 7, scope: !4850)
!4857 = !DILocation(line: 2581, column: 24, scope: !4850)
!4858 = !DILocation(line: 2582, column: 11, scope: !4859)
!4859 = distinct !DILexicalBlock(scope: !4850, file: !3, line: 2582, column: 11)
!4860 = !DILocation(line: 2582, column: 17, scope: !4859)
!4861 = !DILocation(line: 2582, column: 11, scope: !4850)
!4862 = !DILocation(line: 2583, column: 19, scope: !4859)
!4863 = !DILocation(line: 2583, column: 2, scope: !4859)
!4864 = !DILocation(line: 2584, column: 22, scope: !4850)
!4865 = !DILocation(line: 2585, column: 5, scope: !4850)
!4866 = !DILocation(line: 2587, column: 7, scope: !4867)
!4867 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 2587, column: 7)
!4868 = !DILocation(line: 2587, column: 12, scope: !4867)
!4869 = !DILocation(line: 2587, column: 15, scope: !4867)
!4870 = !DILocation(line: 2587, column: 21, scope: !4867)
!4871 = !DILocation(line: 2587, column: 7, scope: !4745)
!4872 = !DILocation(line: 2589, column: 37, scope: !4873)
!4873 = distinct !DILexicalBlock(scope: !4867, file: !3, line: 2588, column: 5)
!4874 = !DILocation(line: 2589, column: 13, scope: !4873)
!4875 = !DILocation(line: 2589, column: 11, scope: !4873)
!4876 = !DILocation(line: 2590, column: 24, scope: !4873)
!4877 = !DILocation(line: 2591, column: 11, scope: !4878)
!4878 = distinct !DILexicalBlock(scope: !4873, file: !3, line: 2591, column: 11)
!4879 = !DILocation(line: 2591, column: 17, scope: !4878)
!4880 = !DILocation(line: 2591, column: 11, scope: !4873)
!4881 = !DILocation(line: 2592, column: 19, scope: !4878)
!4882 = !DILocation(line: 2592, column: 2, scope: !4878)
!4883 = !DILocation(line: 2593, column: 22, scope: !4873)
!4884 = !DILocation(line: 2594, column: 5, scope: !4873)
!4885 = !DILocation(line: 2596, column: 7, scope: !4886)
!4886 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 2596, column: 7)
!4887 = !DILocation(line: 2596, column: 7, scope: !4745)
!4888 = !DILocation(line: 2598, column: 39, scope: !4889)
!4889 = distinct !DILexicalBlock(scope: !4890, file: !3, line: 2598, column: 11)
!4890 = distinct !DILexicalBlock(scope: !4886, file: !3, line: 2597, column: 5)
!4891 = !DILocation(line: 2598, column: 56, scope: !4889)
!4892 = !DILocation(line: 2598, column: 12, scope: !4889)
!4893 = !DILocation(line: 2598, column: 11, scope: !4890)
!4894 = !DILocation(line: 2603, column: 8, scope: !4895)
!4895 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 2603, column: 8)
!4896 = distinct !DILexicalBlock(scope: !4889, file: !3, line: 2599, column: 2)
!4897 = !DILocation(line: 2604, column: 8, scope: !4895)
!4898 = !DILocation(line: 2604, column: 35, scope: !4895)
!4899 = !DILocation(line: 2604, column: 12, scope: !4895)
!4900 = !DILocation(line: 2603, column: 8, scope: !4896)
!4901 = !DILocalVariable(name: "expr", scope: !4902, file: !3, line: 2606, type: !1696)
!4902 = distinct !DILexicalBlock(scope: !4895, file: !3, line: 2605, column: 6)
!4903 = !DILocation(line: 2606, column: 13, scope: !4902)
!4904 = !DILocation(line: 2606, column: 20, scope: !4902)
!4905 = !DILocation(line: 2607, column: 41, scope: !4906)
!4906 = distinct !DILexicalBlock(scope: !4902, file: !3, line: 2607, column: 12)
!4907 = !DILocation(line: 2608, column: 6, scope: !4906)
!4908 = !DILocation(line: 2607, column: 12, scope: !4906)
!4909 = !DILocation(line: 2607, column: 12, scope: !4902)
!4910 = !DILocation(line: 2610, column: 11, scope: !4911)
!4911 = distinct !DILexicalBlock(scope: !4906, file: !3, line: 2609, column: 3)
!4912 = !DILocation(line: 2610, column: 9, scope: !4911)
!4913 = !DILocation(line: 2611, column: 29, scope: !4911)
!4914 = !DILocation(line: 2611, column: 28, scope: !4911)
!4915 = !DILocation(line: 2611, column: 35, scope: !4911)
!4916 = !DILocation(line: 2611, column: 5, scope: !4911)
!4917 = !DILocation(line: 2612, column: 3, scope: !4911)
!4918 = !DILocation(line: 2613, column: 6, scope: !4902)
!4919 = !DILocation(line: 2614, column: 13, scope: !4920)
!4920 = distinct !DILexicalBlock(scope: !4895, file: !3, line: 2614, column: 13)
!4921 = !DILocation(line: 2615, column: 6, scope: !4920)
!4922 = !DILocation(line: 2615, column: 33, scope: !4920)
!4923 = !DILocation(line: 2615, column: 10, scope: !4920)
!4924 = !DILocation(line: 2614, column: 13, scope: !4895)
!4925 = !DILocalVariable(name: "expr", scope: !4926, file: !3, line: 2617, type: !1696)
!4926 = distinct !DILexicalBlock(scope: !4920, file: !3, line: 2616, column: 6)
!4927 = !DILocation(line: 2617, column: 13, scope: !4926)
!4928 = !DILocation(line: 2617, column: 20, scope: !4926)
!4929 = !DILocation(line: 2618, column: 41, scope: !4930)
!4930 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 2618, column: 12)
!4931 = !DILocation(line: 2619, column: 6, scope: !4930)
!4932 = !DILocation(line: 2618, column: 12, scope: !4930)
!4933 = !DILocation(line: 2618, column: 12, scope: !4926)
!4934 = !DILocation(line: 2620, column: 9, scope: !4930)
!4935 = !DILocation(line: 2620, column: 7, scope: !4930)
!4936 = !DILocation(line: 2620, column: 3, scope: !4930)
!4937 = !DILocation(line: 2621, column: 6, scope: !4926)
!4938 = !DILocation(line: 2622, column: 36, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 2622, column: 8)
!4940 = !DILocation(line: 2622, column: 53, scope: !4939)
!4941 = !DILocation(line: 2622, column: 9, scope: !4939)
!4942 = !DILocation(line: 2622, column: 8, scope: !4896)
!4943 = !DILocation(line: 2624, column: 14, scope: !4944)
!4944 = distinct !DILexicalBlock(scope: !4939, file: !3, line: 2623, column: 6)
!4945 = !DILocation(line: 2624, column: 12, scope: !4944)
!4946 = !DILocation(line: 2625, column: 32, scope: !4947)
!4947 = distinct !DILexicalBlock(scope: !4944, file: !3, line: 2625, column: 12)
!4948 = !DILocation(line: 2625, column: 12, scope: !4947)
!4949 = !DILocation(line: 2626, column: 5, scope: !4947)
!4950 = !DILocation(line: 2626, column: 8, scope: !4947)
!4951 = !DILocation(line: 2626, column: 24, scope: !4947)
!4952 = !DILocation(line: 2625, column: 12, scope: !4944)
!4953 = !DILocation(line: 2627, column: 20, scope: !4947)
!4954 = !DILocation(line: 2627, column: 3, scope: !4947)
!4955 = !DILocation(line: 2628, column: 6, scope: !4944)
!4956 = !DILocation(line: 2629, column: 2, scope: !4896)
!4957 = !DILocation(line: 2630, column: 5, scope: !4890)
!4958 = !DILocation(line: 2665, column: 33, scope: !4959)
!4959 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 2665, column: 7)
!4960 = !DILocation(line: 2665, column: 32, scope: !4959)
!4961 = !DILocation(line: 2665, column: 7, scope: !4959)
!4962 = !DILocation(line: 2666, column: 7, scope: !4959)
!4963 = !DILocation(line: 2666, column: 40, scope: !4959)
!4964 = !DILocation(line: 2666, column: 10, scope: !4959)
!4965 = !DILocation(line: 2667, column: 7, scope: !4959)
!4966 = !DILocation(line: 2667, column: 40, scope: !4959)
!4967 = !DILocation(line: 2667, column: 10, scope: !4959)
!4968 = !DILocation(line: 2668, column: 7, scope: !4959)
!4969 = !DILocation(line: 2668, column: 34, scope: !4959)
!4970 = !DILocation(line: 2668, column: 11, scope: !4959)
!4971 = !DILocation(line: 2669, column: 4, scope: !4959)
!4972 = !DILocation(line: 2669, column: 41, scope: !4959)
!4973 = !DILocation(line: 2669, column: 47, scope: !4959)
!4974 = !DILocation(line: 2669, column: 52, scope: !4959)
!4975 = !DILocation(line: 2669, column: 58, scope: !4959)
!4976 = !DILocation(line: 2669, column: 8, scope: !4959)
!4977 = !DILocation(line: 2670, column: 7, scope: !4959)
!4978 = !DILocation(line: 2670, column: 34, scope: !4959)
!4979 = !DILocation(line: 2670, column: 11, scope: !4959)
!4980 = !DILocation(line: 2671, column: 4, scope: !4959)
!4981 = !DILocation(line: 2671, column: 41, scope: !4959)
!4982 = !DILocation(line: 2671, column: 47, scope: !4959)
!4983 = !DILocation(line: 2671, column: 52, scope: !4959)
!4984 = !DILocation(line: 2671, column: 58, scope: !4959)
!4985 = !DILocation(line: 2671, column: 8, scope: !4959)
!4986 = !DILocation(line: 2665, column: 7, scope: !4745)
!4987 = !DILocation(line: 2673, column: 34, scope: !4988)
!4988 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 2673, column: 11)
!4989 = distinct !DILexicalBlock(scope: !4959, file: !3, line: 2672, column: 5)
!4990 = !DILocation(line: 2673, column: 11, scope: !4988)
!4991 = !DILocation(line: 2673, column: 11, scope: !4989)
!4992 = !DILocation(line: 2674, column: 27, scope: !4988)
!4993 = !DILocation(line: 2674, column: 33, scope: !4988)
!4994 = !DILocation(line: 2674, column: 46, scope: !4988)
!4995 = !DILocation(line: 2674, column: 52, scope: !4988)
!4996 = !DILocation(line: 2675, column: 6, scope: !4988)
!4997 = !DILocation(line: 2674, column: 2, scope: !4988)
!4998 = !DILocation(line: 2676, column: 34, scope: !4999)
!4999 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 2676, column: 11)
!5000 = !DILocation(line: 2676, column: 11, scope: !4999)
!5001 = !DILocation(line: 2676, column: 11, scope: !4989)
!5002 = !DILocation(line: 2677, column: 27, scope: !4999)
!5003 = !DILocation(line: 2677, column: 33, scope: !4999)
!5004 = !DILocation(line: 2677, column: 46, scope: !4999)
!5005 = !DILocation(line: 2677, column: 52, scope: !4999)
!5006 = !DILocation(line: 2678, column: 6, scope: !4999)
!5007 = !DILocation(line: 2677, column: 2, scope: !4999)
!5008 = !DILocation(line: 2679, column: 42, scope: !4989)
!5009 = !DILocation(line: 2680, column: 5, scope: !4989)
!5010 = !DILocation(line: 2683, column: 34, scope: !5011)
!5011 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 2683, column: 11)
!5012 = distinct !DILexicalBlock(scope: !4959, file: !3, line: 2682, column: 5)
!5013 = !DILocation(line: 2683, column: 11, scope: !5011)
!5014 = !DILocation(line: 2683, column: 40, scope: !5011)
!5015 = !DILocation(line: 2683, column: 66, scope: !5011)
!5016 = !DILocation(line: 2683, column: 43, scope: !5011)
!5017 = !DILocation(line: 2683, column: 11, scope: !5012)
!5018 = !DILocalVariable(name: "orig_gsi", scope: !5019, file: !3, line: 2685, type: !3918)
!5019 = distinct !DILexicalBlock(scope: !5011, file: !3, line: 2684, column: 2)
!5020 = !DILocation(line: 2685, column: 25, scope: !5019)
!5021 = !DILocation(line: 2685, column: 37, scope: !5019)
!5022 = !DILocation(line: 2685, column: 36, scope: !5019)
!5023 = !DILocalVariable(name: "refreshed", scope: !5019, file: !3, line: 2686, type: !1527)
!5024 = !DILocation(line: 2686, column: 36, scope: !5019)
!5025 = !DILocation(line: 2688, column: 8, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !5019, file: !3, line: 2688, column: 8)
!5027 = !DILocation(line: 2688, column: 14, scope: !5026)
!5028 = !DILocation(line: 2688, column: 23, scope: !5026)
!5029 = !DILocation(line: 2688, column: 27, scope: !5026)
!5030 = !DILocation(line: 2688, column: 33, scope: !5026)
!5031 = !DILocation(line: 2688, column: 8, scope: !5019)
!5032 = !DILocation(line: 2689, column: 55, scope: !5026)
!5033 = !DILocation(line: 2689, column: 61, scope: !5026)
!5034 = !DILocation(line: 2689, column: 66, scope: !5026)
!5035 = !DILocation(line: 2689, column: 18, scope: !5026)
!5036 = !DILocation(line: 2689, column: 16, scope: !5026)
!5037 = !DILocation(line: 2689, column: 6, scope: !5026)
!5038 = !DILocation(line: 2691, column: 16, scope: !5026)
!5039 = !DILocation(line: 2693, column: 37, scope: !5019)
!5040 = !DILocation(line: 2693, column: 43, scope: !5019)
!5041 = !DILocation(line: 2693, column: 56, scope: !5019)
!5042 = !DILocation(line: 2694, column: 9, scope: !5019)
!5043 = !DILocation(line: 2694, column: 15, scope: !5019)
!5044 = !DILocation(line: 2694, column: 23, scope: !5019)
!5045 = !DILocation(line: 2694, column: 29, scope: !5019)
!5046 = !DILocation(line: 2695, column: 20, scope: !5019)
!5047 = !DILocation(line: 2695, column: 37, scope: !5019)
!5048 = !DILocation(line: 2693, column: 4, scope: !5019)
!5049 = !DILocation(line: 2696, column: 8, scope: !5050)
!5050 = distinct !DILexicalBlock(scope: !5019, file: !3, line: 2696, column: 8)
!5051 = !DILocation(line: 2696, column: 18, scope: !5050)
!5052 = !DILocation(line: 2696, column: 8, scope: !5019)
!5053 = !DILocation(line: 2698, column: 13, scope: !5054)
!5054 = distinct !DILexicalBlock(scope: !5055, file: !3, line: 2698, column: 12)
!5055 = distinct !DILexicalBlock(scope: !5050, file: !3, line: 2697, column: 6)
!5056 = !DILocation(line: 2698, column: 12, scope: !5054)
!5057 = !DILocation(line: 2698, column: 32, scope: !5054)
!5058 = !DILocation(line: 2698, column: 21, scope: !5054)
!5059 = !DILocation(line: 2698, column: 18, scope: !5054)
!5060 = !DILocation(line: 2698, column: 12, scope: !5055)
!5061 = !DILocation(line: 2699, column: 13, scope: !5054)
!5062 = !DILocation(line: 2699, column: 3, scope: !5054)
!5063 = !DILocation(line: 2701, column: 27, scope: !5055)
!5064 = !DILocation(line: 2701, column: 26, scope: !5055)
!5065 = !DILocation(line: 2701, column: 8, scope: !5055)
!5066 = !DILocation(line: 2702, column: 8, scope: !5055)
!5067 = !DILocation(line: 2703, column: 25, scope: !5055)
!5068 = !DILocation(line: 2704, column: 8, scope: !5055)
!5069 = !DILocation(line: 2706, column: 2, scope: !5019)
!5070 = !DILocation(line: 2709, column: 31, scope: !5071)
!5071 = distinct !DILexicalBlock(scope: !5072, file: !3, line: 2709, column: 8)
!5072 = distinct !DILexicalBlock(scope: !5011, file: !3, line: 2708, column: 2)
!5073 = !DILocation(line: 2709, column: 8, scope: !5071)
!5074 = !DILocation(line: 2709, column: 8, scope: !5072)
!5075 = !DILocation(line: 2711, column: 13, scope: !5076)
!5076 = distinct !DILexicalBlock(scope: !5077, file: !3, line: 2711, column: 12)
!5077 = distinct !DILexicalBlock(scope: !5071, file: !3, line: 2710, column: 6)
!5078 = !DILocation(line: 2711, column: 19, scope: !5076)
!5079 = !DILocation(line: 2713, column: 5, scope: !5076)
!5080 = !DILocation(line: 2713, column: 8, scope: !5076)
!5081 = !DILocation(line: 2713, column: 24, scope: !5076)
!5082 = !DILocation(line: 2711, column: 12, scope: !5077)
!5083 = !DILocation(line: 2715, column: 30, scope: !5084)
!5084 = distinct !DILexicalBlock(scope: !5076, file: !3, line: 2714, column: 3)
!5085 = !DILocation(line: 2715, column: 36, scope: !5084)
!5086 = !DILocation(line: 2715, column: 49, scope: !5084)
!5087 = !DILocation(line: 2716, column: 9, scope: !5084)
!5088 = !DILocation(line: 2716, column: 15, scope: !5084)
!5089 = !DILocation(line: 2716, column: 29, scope: !5084)
!5090 = !DILocation(line: 2715, column: 5, scope: !5084)
!5091 = !DILocation(line: 2718, column: 5, scope: !5084)
!5092 = !DILocation(line: 2719, column: 24, scope: !5084)
!5093 = !DILocation(line: 2719, column: 23, scope: !5084)
!5094 = !DILocation(line: 2719, column: 5, scope: !5084)
!5095 = !DILocation(line: 2720, column: 17, scope: !5084)
!5096 = !DILocation(line: 2720, column: 5, scope: !5084)
!5097 = !DILocation(line: 2721, column: 22, scope: !5084)
!5098 = !DILocation(line: 2722, column: 5, scope: !5084)
!5099 = !DILocation(line: 2725, column: 28, scope: !5076)
!5100 = !DILocation(line: 2725, column: 34, scope: !5076)
!5101 = !DILocation(line: 2725, column: 47, scope: !5076)
!5102 = !DILocation(line: 2726, column: 7, scope: !5076)
!5103 = !DILocation(line: 2726, column: 13, scope: !5076)
!5104 = !DILocation(line: 2726, column: 27, scope: !5076)
!5105 = !DILocation(line: 2725, column: 3, scope: !5076)
!5106 = !DILocation(line: 2727, column: 6, scope: !5077)
!5107 = !DILocation(line: 2728, column: 36, scope: !5108)
!5108 = distinct !DILexicalBlock(scope: !5071, file: !3, line: 2728, column: 13)
!5109 = !DILocation(line: 2728, column: 13, scope: !5108)
!5110 = !DILocation(line: 2728, column: 13, scope: !5071)
!5111 = !DILocation(line: 2729, column: 31, scope: !5108)
!5112 = !DILocation(line: 2729, column: 37, scope: !5108)
!5113 = !DILocation(line: 2729, column: 50, scope: !5108)
!5114 = !DILocation(line: 2729, column: 55, scope: !5108)
!5115 = !DILocation(line: 2729, column: 61, scope: !5108)
!5116 = !DILocation(line: 2730, column: 16, scope: !5108)
!5117 = !DILocation(line: 2729, column: 6, scope: !5108)
!5118 = !DILocation(line: 2736, column: 7, scope: !5119)
!5119 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 2736, column: 7)
!5120 = !DILocation(line: 2736, column: 7, scope: !4745)
!5121 = !DILocation(line: 2737, column: 48, scope: !5119)
!5122 = !DILocation(line: 2737, column: 11, scope: !5119)
!5123 = !DILocation(line: 2737, column: 9, scope: !5119)
!5124 = !DILocation(line: 2737, column: 5, scope: !5119)
!5125 = !DILocation(line: 2739, column: 28, scope: !5126)
!5126 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 2739, column: 7)
!5127 = !DILocation(line: 2739, column: 27, scope: !5126)
!5128 = !DILocation(line: 2739, column: 7, scope: !5126)
!5129 = !DILocation(line: 2739, column: 37, scope: !5126)
!5130 = !DILocation(line: 2739, column: 34, scope: !5126)
!5131 = !DILocation(line: 2739, column: 7, scope: !4745)
!5132 = !DILocation(line: 2741, column: 51, scope: !5133)
!5133 = distinct !DILexicalBlock(scope: !5126, file: !3, line: 2740, column: 5)
!5134 = !DILocation(line: 2741, column: 7, scope: !5133)
!5135 = !DILocation(line: 2742, column: 7, scope: !5133)
!5136 = !DILocation(line: 2743, column: 5, scope: !5133)
!5137 = !DILocation(line: 2745, column: 10, scope: !4745)
!5138 = !DILocation(line: 2745, column: 3, scope: !4745)
!5139 = !DILocation(line: 2746, column: 1, scope: !4745)
!5140 = distinct !DISubprogram(name: "initialize_parameter_reductions", scope: !3, file: !3, line: 2752, type: !3517, scopeLine: 2753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5141 = !DILocalVariable(name: "gsi", scope: !5140, file: !3, line: 2754, type: !3918)
!5142 = !DILocation(line: 2754, column: 24, scope: !5140)
!5143 = !DILocalVariable(name: "seq", scope: !5140, file: !3, line: 2755, type: !2014)
!5144 = !DILocation(line: 2755, column: 14, scope: !5140)
!5145 = !DILocalVariable(name: "parm", scope: !5140, file: !3, line: 2756, type: !1696)
!5146 = !DILocation(line: 2756, column: 8, scope: !5140)
!5147 = !DILocation(line: 2758, column: 15, scope: !5148)
!5148 = distinct !DILexicalBlock(scope: !5140, file: !3, line: 2758, column: 3)
!5149 = !DILocation(line: 2758, column: 13, scope: !5148)
!5150 = !DILocation(line: 2758, column: 8, scope: !5148)
!5151 = !DILocation(line: 2759, column: 8, scope: !5152)
!5152 = distinct !DILexicalBlock(scope: !5148, file: !3, line: 2758, column: 3)
!5153 = !DILocation(line: 2758, column: 3, scope: !5148)
!5154 = !DILocalVariable(name: "access_vec", scope: !5155, file: !3, line: 2762, type: !3036)
!5155 = distinct !DILexicalBlock(scope: !5152, file: !3, line: 2761, column: 5)
!5156 = !DILocation(line: 2762, column: 29, scope: !5155)
!5157 = !DILocalVariable(name: "access", scope: !5155, file: !3, line: 2763, type: !2999)
!5158 = !DILocation(line: 2763, column: 22, scope: !5155)
!5159 = !DILocation(line: 2765, column: 26, scope: !5160)
!5160 = distinct !DILexicalBlock(scope: !5155, file: !3, line: 2765, column: 11)
!5161 = !DILocation(line: 2765, column: 44, scope: !5160)
!5162 = !DILocation(line: 2765, column: 12, scope: !5160)
!5163 = !DILocation(line: 2765, column: 11, scope: !5155)
!5164 = !DILocation(line: 2766, column: 2, scope: !5160)
!5165 = !DILocation(line: 2767, column: 44, scope: !5155)
!5166 = !DILocation(line: 2767, column: 20, scope: !5155)
!5167 = !DILocation(line: 2767, column: 18, scope: !5155)
!5168 = !DILocation(line: 2768, column: 12, scope: !5169)
!5169 = distinct !DILexicalBlock(scope: !5155, file: !3, line: 2768, column: 11)
!5170 = !DILocation(line: 2768, column: 11, scope: !5155)
!5171 = !DILocation(line: 2769, column: 2, scope: !5169)
!5172 = !DILocation(line: 2771, column: 12, scope: !5173)
!5173 = distinct !DILexicalBlock(scope: !5155, file: !3, line: 2771, column: 11)
!5174 = !DILocation(line: 2771, column: 11, scope: !5155)
!5175 = !DILocation(line: 2773, column: 10, scope: !5176)
!5176 = distinct !DILexicalBlock(scope: !5173, file: !3, line: 2772, column: 2)
!5177 = !DILocation(line: 2773, column: 8, scope: !5176)
!5178 = !DILocation(line: 2774, column: 21, scope: !5176)
!5179 = !DILocation(line: 2774, column: 10, scope: !5176)
!5180 = !DILocation(line: 2775, column: 2, scope: !5176)
!5181 = !DILocation(line: 2777, column: 21, scope: !5182)
!5182 = distinct !DILexicalBlock(scope: !5155, file: !3, line: 2777, column: 7)
!5183 = !DILocation(line: 2777, column: 19, scope: !5182)
!5184 = !DILocation(line: 2777, column: 12, scope: !5182)
!5185 = !DILocation(line: 2778, column: 5, scope: !5186)
!5186 = distinct !DILexicalBlock(scope: !5182, file: !3, line: 2777, column: 7)
!5187 = !DILocation(line: 2777, column: 7, scope: !5182)
!5188 = !DILocation(line: 2780, column: 27, scope: !5186)
!5189 = !DILocation(line: 2780, column: 35, scope: !5186)
!5190 = !DILocation(line: 2780, column: 2, scope: !5186)
!5191 = !DILocation(line: 2779, column: 14, scope: !5186)
!5192 = !DILocation(line: 2779, column: 22, scope: !5186)
!5193 = !DILocation(line: 2779, column: 12, scope: !5186)
!5194 = !DILocation(line: 2777, column: 7, scope: !5186)
!5195 = distinct !{!5195, !5187, !5196}
!5196 = !DILocation(line: 2780, column: 66, scope: !5182)
!5197 = !DILocation(line: 2781, column: 5, scope: !5155)
!5198 = !DILocation(line: 2760, column: 15, scope: !5152)
!5199 = !DILocation(line: 2760, column: 13, scope: !5152)
!5200 = !DILocation(line: 2758, column: 3, scope: !5152)
!5201 = distinct !{!5201, !5153, !5202}
!5202 = !DILocation(line: 2781, column: 5, scope: !5148)
!5203 = !DILocation(line: 2783, column: 7, scope: !5204)
!5204 = distinct !DILexicalBlock(scope: !5140, file: !3, line: 2783, column: 7)
!5205 = !DILocation(line: 2783, column: 7, scope: !5140)
!5206 = !DILocation(line: 2784, column: 57, scope: !5204)
!5207 = !DILocation(line: 2784, column: 39, scope: !5204)
!5208 = !DILocation(line: 2784, column: 75, scope: !5204)
!5209 = !DILocation(line: 2784, column: 5, scope: !5204)
!5210 = !DILocation(line: 2785, column: 1, scope: !5140)
!5211 = distinct !DISubprogram(name: "sra_deinitialize", scope: !3, file: !3, line: 590, type: !3517, scopeLine: 591, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5212 = !DILocation(line: 592, column: 3, scope: !5211)
!5213 = !DILocation(line: 593, column: 3, scope: !5211)
!5214 = !DILocation(line: 594, column: 3, scope: !5211)
!5215 = !DILocation(line: 595, column: 20, scope: !5211)
!5216 = !DILocation(line: 595, column: 3, scope: !5211)
!5217 = !DILocation(line: 596, column: 20, scope: !5211)
!5218 = !DILocation(line: 596, column: 3, scope: !5211)
!5219 = !DILocation(line: 597, column: 3, scope: !5211)
!5220 = !DILocation(line: 599, column: 25, scope: !5211)
!5221 = !DILocation(line: 599, column: 3, scope: !5211)
!5222 = !DILocation(line: 600, column: 24, scope: !5211)
!5223 = !DILocation(line: 600, column: 3, scope: !5211)
!5224 = !DILocation(line: 601, column: 1, scope: !5211)
!5225 = distinct !DISubprogram(name: "first_referenced_var", scope: !5226, file: !5226, line: 105, type: !5227, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5226 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5227 = !DISubroutineType(types: !5228)
!5228 = !{!1696, !5229}
!5229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3831, size: 64)
!5230 = !DILocalVariable(name: "iter", arg: 1, scope: !5225, file: !5226, line: 105, type: !5229)
!5231 = !DILocation(line: 105, column: 48, scope: !5225)
!5232 = !DILocation(line: 107, column: 38, scope: !5225)
!5233 = !DILocation(line: 107, column: 44, scope: !5225)
!5234 = !DILocation(line: 108, column: 33, scope: !5225)
!5235 = !DILocation(line: 108, column: 9, scope: !5225)
!5236 = !DILocation(line: 107, column: 17, scope: !5225)
!5237 = !DILocation(line: 107, column: 10, scope: !5225)
!5238 = !DILocation(line: 107, column: 3, scope: !5225)
!5239 = distinct !DISubprogram(name: "end_referenced_vars_p", scope: !5226, file: !5226, line: 115, type: !5240, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5240 = !DISubroutineType(types: !5241)
!5241 = !{!1815, !5242}
!5242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5243, size: 64)
!5243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3831)
!5244 = !DILocalVariable(name: "iter", arg: 1, scope: !5239, file: !5226, line: 115, type: !5242)
!5245 = !DILocation(line: 115, column: 55, scope: !5239)
!5246 = !DILocation(line: 117, column: 23, scope: !5239)
!5247 = !DILocation(line: 117, column: 29, scope: !5239)
!5248 = !DILocation(line: 117, column: 10, scope: !5239)
!5249 = !DILocation(line: 117, column: 3, scope: !5239)
!5250 = distinct !DISubprogram(name: "type_internals_preclude_sra_p", scope: !3, file: !3, line: 622, type: !5251, scopeLine: 623, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5251 = !DISubroutineType(types: !5252)
!5252 = !{!1815, !1696}
!5253 = !DILocalVariable(name: "type", arg: 1, scope: !5250, file: !3, line: 622, type: !1696)
!5254 = !DILocation(line: 622, column: 37, scope: !5250)
!5255 = !DILocalVariable(name: "fld", scope: !5250, file: !3, line: 624, type: !1696)
!5256 = !DILocation(line: 624, column: 8, scope: !5250)
!5257 = !DILocalVariable(name: "et", scope: !5250, file: !3, line: 625, type: !1696)
!5258 = !DILocation(line: 625, column: 8, scope: !5250)
!5259 = !DILocation(line: 627, column: 11, scope: !5250)
!5260 = !DILocation(line: 627, column: 3, scope: !5250)
!5261 = !DILocation(line: 632, column: 18, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5263, file: !3, line: 632, column: 7)
!5263 = distinct !DILexicalBlock(scope: !5250, file: !3, line: 628, column: 5)
!5264 = !DILocation(line: 632, column: 16, scope: !5262)
!5265 = !DILocation(line: 632, column: 12, scope: !5262)
!5266 = !DILocation(line: 632, column: 38, scope: !5267)
!5267 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 632, column: 7)
!5268 = !DILocation(line: 632, column: 7, scope: !5262)
!5269 = !DILocation(line: 633, column: 6, scope: !5270)
!5270 = distinct !DILexicalBlock(scope: !5267, file: !3, line: 633, column: 6)
!5271 = !DILocation(line: 633, column: 22, scope: !5270)
!5272 = !DILocation(line: 633, column: 6, scope: !5267)
!5273 = !DILocalVariable(name: "ft", scope: !5274, file: !3, line: 635, type: !1696)
!5274 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 634, column: 4)
!5275 = !DILocation(line: 635, column: 11, scope: !5274)
!5276 = !DILocation(line: 635, column: 16, scope: !5274)
!5277 = !DILocation(line: 637, column: 10, scope: !5278)
!5278 = distinct !DILexicalBlock(scope: !5274, file: !3, line: 637, column: 10)
!5279 = !DILocation(line: 638, column: 3, scope: !5278)
!5280 = !DILocation(line: 638, column: 7, scope: !5278)
!5281 = !DILocation(line: 638, column: 31, scope: !5278)
!5282 = !DILocation(line: 638, column: 35, scope: !5278)
!5283 = !DILocation(line: 639, column: 3, scope: !5278)
!5284 = !DILocation(line: 639, column: 22, scope: !5278)
!5285 = !DILocation(line: 639, column: 7, scope: !5278)
!5286 = !DILocation(line: 640, column: 3, scope: !5278)
!5287 = !DILocation(line: 640, column: 22, scope: !5278)
!5288 = !DILocation(line: 640, column: 7, scope: !5278)
!5289 = !DILocation(line: 637, column: 10, scope: !5274)
!5290 = !DILocation(line: 641, column: 8, scope: !5278)
!5291 = !DILocation(line: 643, column: 10, scope: !5292)
!5292 = distinct !DILexicalBlock(scope: !5274, file: !3, line: 643, column: 10)
!5293 = !DILocation(line: 644, column: 3, scope: !5292)
!5294 = !DILocation(line: 644, column: 37, scope: !5292)
!5295 = !DILocation(line: 644, column: 6, scope: !5292)
!5296 = !DILocation(line: 643, column: 10, scope: !5274)
!5297 = !DILocation(line: 645, column: 8, scope: !5292)
!5298 = !DILocation(line: 646, column: 4, scope: !5274)
!5299 = !DILocation(line: 633, column: 25, scope: !5270)
!5300 = !DILocation(line: 632, column: 49, scope: !5267)
!5301 = !DILocation(line: 632, column: 47, scope: !5267)
!5302 = !DILocation(line: 632, column: 7, scope: !5267)
!5303 = distinct !{!5303, !5268, !5304}
!5304 = !DILocation(line: 646, column: 4, scope: !5262)
!5305 = !DILocation(line: 648, column: 7, scope: !5263)
!5306 = !DILocation(line: 651, column: 12, scope: !5263)
!5307 = !DILocation(line: 651, column: 10, scope: !5263)
!5308 = !DILocation(line: 653, column: 11, scope: !5309)
!5309 = distinct !DILexicalBlock(scope: !5263, file: !3, line: 653, column: 11)
!5310 = !DILocation(line: 653, column: 11, scope: !5263)
!5311 = !DILocation(line: 654, column: 40, scope: !5309)
!5312 = !DILocation(line: 654, column: 9, scope: !5309)
!5313 = !DILocation(line: 654, column: 2, scope: !5309)
!5314 = !DILocation(line: 656, column: 2, scope: !5309)
!5315 = !DILocation(line: 659, column: 7, scope: !5263)
!5316 = !DILocation(line: 661, column: 1, scope: !5250)
!5317 = distinct !DISubprogram(name: "is_va_list_type", scope: !3, file: !3, line: 1502, type: !5251, scopeLine: 1503, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5318 = !DILocalVariable(name: "type", arg: 1, scope: !5317, file: !3, line: 1502, type: !1696)
!5319 = !DILocation(line: 1502, column: 23, scope: !5317)
!5320 = !DILocation(line: 1504, column: 10, scope: !5317)
!5321 = !DILocation(line: 1504, column: 38, scope: !5317)
!5322 = !DILocation(line: 1504, column: 35, scope: !5317)
!5323 = !DILocation(line: 1504, column: 3, scope: !5317)
!5324 = distinct !DISubprogram(name: "next_referenced_var", scope: !5226, file: !5226, line: 124, type: !5227, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5325 = !DILocalVariable(name: "iter", arg: 1, scope: !5324, file: !5226, line: 124, type: !5229)
!5326 = !DILocation(line: 124, column: 47, scope: !5324)
!5327 = !DILocation(line: 126, column: 37, scope: !5324)
!5328 = !DILocation(line: 126, column: 43, scope: !5324)
!5329 = !DILocation(line: 126, column: 17, scope: !5324)
!5330 = !DILocation(line: 126, column: 10, scope: !5324)
!5331 = !DILocation(line: 126, column: 3, scope: !5324)
!5332 = distinct !DISubprogram(name: "first_htab_element", scope: !5226, file: !5226, line: 58, type: !5333, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5333 = !DISubroutineType(types: !5334)
!5334 = !{!1977, !5335, !2455}
!5335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3835, size: 64)
!5336 = !DILocalVariable(name: "hti", arg: 1, scope: !5332, file: !5226, line: 58, type: !5335)
!5337 = !DILocation(line: 58, column: 36, scope: !5332)
!5338 = !DILocalVariable(name: "table", arg: 2, scope: !5332, file: !5226, line: 58, type: !2455)
!5339 = !DILocation(line: 58, column: 48, scope: !5332)
!5340 = !DILocation(line: 60, column: 15, scope: !5332)
!5341 = !DILocation(line: 60, column: 3, scope: !5332)
!5342 = !DILocation(line: 60, column: 8, scope: !5332)
!5343 = !DILocation(line: 60, column: 13, scope: !5332)
!5344 = !DILocation(line: 61, column: 15, scope: !5332)
!5345 = !DILocation(line: 61, column: 22, scope: !5332)
!5346 = !DILocation(line: 61, column: 3, scope: !5332)
!5347 = !DILocation(line: 61, column: 8, scope: !5332)
!5348 = !DILocation(line: 61, column: 13, scope: !5332)
!5349 = !DILocation(line: 62, column: 16, scope: !5332)
!5350 = !DILocation(line: 62, column: 21, scope: !5332)
!5351 = !DILocation(line: 62, column: 39, scope: !5332)
!5352 = !DILocation(line: 62, column: 28, scope: !5332)
!5353 = !DILocation(line: 62, column: 26, scope: !5332)
!5354 = !DILocation(line: 62, column: 3, scope: !5332)
!5355 = !DILocation(line: 62, column: 8, scope: !5332)
!5356 = !DILocation(line: 62, column: 14, scope: !5332)
!5357 = !DILocation(line: 63, column: 3, scope: !5332)
!5358 = !DILocalVariable(name: "x", scope: !5359, file: !5226, line: 65, type: !1977)
!5359 = distinct !DILexicalBlock(scope: !5332, file: !5226, line: 64, column: 5)
!5360 = !DILocation(line: 65, column: 11, scope: !5359)
!5361 = !DILocation(line: 65, column: 17, scope: !5359)
!5362 = !DILocation(line: 65, column: 22, scope: !5359)
!5363 = !DILocation(line: 65, column: 15, scope: !5359)
!5364 = !DILocation(line: 66, column: 11, scope: !5365)
!5365 = distinct !DILexicalBlock(scope: !5359, file: !5226, line: 66, column: 11)
!5366 = !DILocation(line: 66, column: 13, scope: !5365)
!5367 = !DILocation(line: 66, column: 33, scope: !5365)
!5368 = !DILocation(line: 66, column: 36, scope: !5365)
!5369 = !DILocation(line: 66, column: 38, scope: !5365)
!5370 = !DILocation(line: 66, column: 11, scope: !5359)
!5371 = !DILocation(line: 67, column: 2, scope: !5365)
!5372 = !DILocation(line: 68, column: 5, scope: !5359)
!5373 = !DILocation(line: 68, column: 17, scope: !5332)
!5374 = !DILocation(line: 68, column: 22, scope: !5332)
!5375 = !DILocation(line: 68, column: 14, scope: !5332)
!5376 = !DILocation(line: 68, column: 30, scope: !5332)
!5377 = !DILocation(line: 68, column: 35, scope: !5332)
!5378 = !DILocation(line: 68, column: 28, scope: !5332)
!5379 = distinct !{!5379, !5357, !5380}
!5380 = !DILocation(line: 68, column: 40, scope: !5332)
!5381 = !DILocation(line: 70, column: 7, scope: !5382)
!5382 = distinct !DILexicalBlock(scope: !5332, file: !5226, line: 70, column: 7)
!5383 = !DILocation(line: 70, column: 12, scope: !5382)
!5384 = !DILocation(line: 70, column: 19, scope: !5382)
!5385 = !DILocation(line: 70, column: 24, scope: !5382)
!5386 = !DILocation(line: 70, column: 17, scope: !5382)
!5387 = !DILocation(line: 70, column: 7, scope: !5332)
!5388 = !DILocation(line: 71, column: 14, scope: !5382)
!5389 = !DILocation(line: 71, column: 19, scope: !5382)
!5390 = !DILocation(line: 71, column: 12, scope: !5382)
!5391 = !DILocation(line: 71, column: 5, scope: !5382)
!5392 = !DILocation(line: 72, column: 3, scope: !5332)
!5393 = !DILocation(line: 73, column: 1, scope: !5332)
!5394 = distinct !DISubprogram(name: "gimple_referenced_vars", scope: !5226, file: !5226, line: 40, type: !5395, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5395 = !DISubroutineType(types: !5396)
!5396 = !{!2455, !5397}
!5397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5398, size: 64)
!5398 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2412)
!5399 = !DILocalVariable(name: "fun", arg: 1, scope: !5394, file: !5226, line: 40, type: !5397)
!5400 = !DILocation(line: 40, column: 48, scope: !5394)
!5401 = !DILocation(line: 42, column: 8, scope: !5402)
!5402 = distinct !DILexicalBlock(scope: !5394, file: !5226, line: 42, column: 7)
!5403 = !DILocation(line: 42, column: 13, scope: !5402)
!5404 = !DILocation(line: 42, column: 7, scope: !5394)
!5405 = !DILocation(line: 43, column: 5, scope: !5402)
!5406 = !DILocation(line: 44, column: 10, scope: !5394)
!5407 = !DILocation(line: 44, column: 15, scope: !5394)
!5408 = !DILocation(line: 44, column: 26, scope: !5394)
!5409 = !DILocation(line: 44, column: 3, scope: !5394)
!5410 = !DILocation(line: 45, column: 1, scope: !5394)
!5411 = distinct !DISubprogram(name: "end_htab_p", scope: !5226, file: !5226, line: 79, type: !5412, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5412 = !DISubroutineType(types: !5413)
!5413 = !{!1815, !5414}
!5414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5415, size: 64)
!5415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3835)
!5416 = !DILocalVariable(name: "hti", arg: 1, scope: !5411, file: !5226, line: 79, type: !5414)
!5417 = !DILocation(line: 79, column: 34, scope: !5411)
!5418 = !DILocation(line: 81, column: 7, scope: !5419)
!5419 = distinct !DILexicalBlock(scope: !5411, file: !5226, line: 81, column: 7)
!5420 = !DILocation(line: 81, column: 12, scope: !5419)
!5421 = !DILocation(line: 81, column: 20, scope: !5419)
!5422 = !DILocation(line: 81, column: 25, scope: !5419)
!5423 = !DILocation(line: 81, column: 17, scope: !5419)
!5424 = !DILocation(line: 81, column: 7, scope: !5411)
!5425 = !DILocation(line: 82, column: 5, scope: !5419)
!5426 = !DILocation(line: 83, column: 3, scope: !5411)
!5427 = !DILocation(line: 84, column: 1, scope: !5411)
!5428 = distinct !DISubprogram(name: "next_htab_element", scope: !5226, file: !5226, line: 90, type: !5429, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5429 = !DISubroutineType(types: !5430)
!5430 = !{!1977, !5335}
!5431 = !DILocalVariable(name: "hti", arg: 1, scope: !5428, file: !5226, line: 90, type: !5335)
!5432 = !DILocation(line: 90, column: 35, scope: !5428)
!5433 = !DILocation(line: 92, column: 3, scope: !5428)
!5434 = !DILocation(line: 92, column: 13, scope: !5428)
!5435 = !DILocation(line: 92, column: 18, scope: !5428)
!5436 = !DILocation(line: 92, column: 10, scope: !5428)
!5437 = !DILocation(line: 92, column: 26, scope: !5428)
!5438 = !DILocation(line: 92, column: 31, scope: !5428)
!5439 = !DILocation(line: 92, column: 24, scope: !5428)
!5440 = !DILocalVariable(name: "x", scope: !5441, file: !5226, line: 94, type: !1977)
!5441 = distinct !DILexicalBlock(scope: !5428, file: !5226, line: 93, column: 5)
!5442 = !DILocation(line: 94, column: 11, scope: !5441)
!5443 = !DILocation(line: 94, column: 17, scope: !5441)
!5444 = !DILocation(line: 94, column: 22, scope: !5441)
!5445 = !DILocation(line: 94, column: 15, scope: !5441)
!5446 = !DILocation(line: 95, column: 11, scope: !5447)
!5447 = distinct !DILexicalBlock(scope: !5441, file: !5226, line: 95, column: 11)
!5448 = !DILocation(line: 95, column: 13, scope: !5447)
!5449 = !DILocation(line: 95, column: 33, scope: !5447)
!5450 = !DILocation(line: 95, column: 36, scope: !5447)
!5451 = !DILocation(line: 95, column: 38, scope: !5447)
!5452 = !DILocation(line: 95, column: 11, scope: !5441)
!5453 = !DILocation(line: 96, column: 9, scope: !5447)
!5454 = !DILocation(line: 96, column: 2, scope: !5447)
!5455 = distinct !{!5455, !5433, !5456}
!5456 = !DILocation(line: 97, column: 5, scope: !5428)
!5457 = !DILocation(line: 98, column: 3, scope: !5428)
!5458 = !DILocation(line: 99, column: 1, scope: !5428)
!5459 = distinct !DISubprogram(name: "gsi_end_p", scope: !1458, file: !1458, line: 4467, type: !5460, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5460 = !DISubroutineType(types: !5461)
!5461 = !{!1815, !3918}
!5462 = !DILocalVariable(name: "i", arg: 1, scope: !5459, file: !1458, line: 4467, type: !3918)
!5463 = !DILocation(line: 4467, column: 33, scope: !5459)
!5464 = !DILocation(line: 4469, column: 12, scope: !5459)
!5465 = !DILocation(line: 4469, column: 16, scope: !5459)
!5466 = !DILocation(line: 4469, column: 10, scope: !5459)
!5467 = !DILocation(line: 4469, column: 3, scope: !5459)
!5468 = distinct !DISubprogram(name: "gsi_stmt", scope: !1458, file: !1458, line: 4501, type: !5469, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5469 = !DISubroutineType(types: !5470)
!5470 = !{!2024, !3918}
!5471 = !DILocalVariable(name: "i", arg: 1, scope: !5468, file: !1458, line: 4501, type: !3918)
!5472 = !DILocation(line: 4501, column: 32, scope: !5468)
!5473 = !DILocation(line: 4503, column: 12, scope: !5468)
!5474 = !DILocation(line: 4503, column: 17, scope: !5468)
!5475 = !DILocation(line: 4503, column: 3, scope: !5468)
!5476 = distinct !DISubprogram(name: "gsi_next", scope: !1458, file: !1458, line: 4485, type: !5477, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5477 = !DISubroutineType(types: !5478)
!5478 = !{null, !3917}
!5479 = !DILocalVariable(name: "i", arg: 1, scope: !5476, file: !1458, line: 4485, type: !3917)
!5480 = !DILocation(line: 4485, column: 33, scope: !5476)
!5481 = !DILocation(line: 4487, column: 12, scope: !5476)
!5482 = !DILocation(line: 4487, column: 15, scope: !5476)
!5483 = !DILocation(line: 4487, column: 20, scope: !5476)
!5484 = !DILocation(line: 4487, column: 3, scope: !5476)
!5485 = !DILocation(line: 4487, column: 6, scope: !5476)
!5486 = !DILocation(line: 4487, column: 10, scope: !5476)
!5487 = !DILocation(line: 4488, column: 1, scope: !5476)
!5488 = distinct !DISubprogram(name: "gsi_start_bb", scope: !1458, file: !1458, line: 4418, type: !5489, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5489 = !DISubroutineType(types: !5490)
!5490 = !{!3918, !2423}
!5491 = !DILocalVariable(name: "bb", arg: 1, scope: !5488, file: !1458, line: 4418, type: !2423)
!5492 = !DILocation(line: 4418, column: 27, scope: !5488)
!5493 = !DILocalVariable(name: "i", scope: !5488, file: !1458, line: 4420, type: !3918)
!5494 = !DILocation(line: 4420, column: 24, scope: !5488)
!5495 = !DILocalVariable(name: "seq", scope: !5488, file: !1458, line: 4421, type: !2014)
!5496 = !DILocation(line: 4421, column: 14, scope: !5488)
!5497 = !DILocation(line: 4423, column: 17, scope: !5488)
!5498 = !DILocation(line: 4423, column: 9, scope: !5488)
!5499 = !DILocation(line: 4423, column: 7, scope: !5488)
!5500 = !DILocation(line: 4424, column: 29, scope: !5488)
!5501 = !DILocation(line: 4424, column: 11, scope: !5488)
!5502 = !DILocation(line: 4424, column: 5, scope: !5488)
!5503 = !DILocation(line: 4424, column: 9, scope: !5488)
!5504 = !DILocation(line: 4425, column: 11, scope: !5488)
!5505 = !DILocation(line: 4425, column: 5, scope: !5488)
!5506 = !DILocation(line: 4425, column: 9, scope: !5488)
!5507 = !DILocation(line: 4426, column: 10, scope: !5488)
!5508 = !DILocation(line: 4426, column: 5, scope: !5488)
!5509 = !DILocation(line: 4426, column: 8, scope: !5488)
!5510 = !DILocation(line: 4428, column: 3, scope: !5488)
!5511 = distinct !DISubprogram(name: "gimple_code", scope: !1458, file: !1458, line: 1052, type: !5512, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5512 = !DISubroutineType(types: !5513)
!5513 = !{!1457, !5514}
!5514 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1697, line: 60, baseType: !2997)
!5515 = !DILocalVariable(name: "g", arg: 1, scope: !5511, file: !1458, line: 1052, type: !5514)
!5516 = !DILocation(line: 1052, column: 27, scope: !5511)
!5517 = !DILocation(line: 1054, column: 10, scope: !5511)
!5518 = !DILocation(line: 1054, column: 13, scope: !5511)
!5519 = !DILocation(line: 1054, column: 20, scope: !5511)
!5520 = !DILocation(line: 1054, column: 3, scope: !5511)
!5521 = distinct !DISubprogram(name: "gimple_return_retval_ptr", scope: !1458, file: !1458, line: 4244, type: !5522, scopeLine: 4245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5522 = !DISubroutineType(types: !5523)
!5523 = !{!2058, !5514}
!5524 = !DILocalVariable(name: "gs", arg: 1, scope: !5521, file: !1458, line: 4244, type: !5514)
!5525 = !DILocation(line: 4244, column: 40, scope: !5521)
!5526 = !DILocation(line: 4247, column: 25, scope: !5521)
!5527 = !DILocation(line: 4247, column: 10, scope: !5521)
!5528 = !DILocation(line: 4247, column: 3, scope: !5521)
!5529 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !1458, file: !1458, line: 2013, type: !5530, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5530 = !DISubroutineType(types: !5531)
!5531 = !{!7, !5514}
!5532 = !DILocalVariable(name: "gs", arg: 1, scope: !5529, file: !1458, line: 2013, type: !5514)
!5533 = !DILocation(line: 2013, column: 36, scope: !5529)
!5534 = !DILocalVariable(name: "num_ops", scope: !5529, file: !1458, line: 2015, type: !7)
!5535 = !DILocation(line: 2015, column: 12, scope: !5529)
!5536 = !DILocation(line: 2017, column: 29, scope: !5529)
!5537 = !DILocation(line: 2017, column: 13, scope: !5529)
!5538 = !DILocation(line: 2017, column: 11, scope: !5529)
!5539 = !DILocation(line: 2018, column: 10, scope: !5529)
!5540 = !DILocation(line: 2018, column: 18, scope: !5529)
!5541 = !DILocation(line: 2018, column: 3, scope: !5529)
!5542 = distinct !DISubprogram(name: "gimple_call_arg_ptr", scope: !1458, file: !1458, line: 2036, type: !5543, scopeLine: 2037, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5543 = !DISubroutineType(types: !5544)
!5544 = !{!2058, !5514, !7}
!5545 = !DILocalVariable(name: "gs", arg: 1, scope: !5542, file: !1458, line: 2036, type: !5514)
!5546 = !DILocation(line: 2036, column: 35, scope: !5542)
!5547 = !DILocalVariable(name: "index", arg: 2, scope: !5542, file: !1458, line: 2036, type: !7)
!5548 = !DILocation(line: 2036, column: 48, scope: !5542)
!5549 = !DILocation(line: 2039, column: 25, scope: !5542)
!5550 = !DILocation(line: 2039, column: 29, scope: !5542)
!5551 = !DILocation(line: 2039, column: 35, scope: !5542)
!5552 = !DILocation(line: 2039, column: 10, scope: !5542)
!5553 = !DILocation(line: 2039, column: 3, scope: !5542)
!5554 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !1458, file: !1458, line: 1954, type: !5555, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5555 = !DISubroutineType(types: !5556)
!5556 = !{!1696, !5514}
!5557 = !DILocalVariable(name: "gs", arg: 1, scope: !5554, file: !1458, line: 1954, type: !5514)
!5558 = !DILocation(line: 1954, column: 34, scope: !5554)
!5559 = !DILocalVariable(name: "addr", scope: !5554, file: !1458, line: 1956, type: !1696)
!5560 = !DILocation(line: 1956, column: 8, scope: !5554)
!5561 = !DILocation(line: 1956, column: 31, scope: !5554)
!5562 = !DILocation(line: 1956, column: 15, scope: !5554)
!5563 = !DILocation(line: 1957, column: 7, scope: !5564)
!5564 = distinct !DILexicalBlock(scope: !5554, file: !1458, line: 1957, column: 7)
!5565 = !DILocation(line: 1957, column: 24, scope: !5564)
!5566 = !DILocation(line: 1957, column: 7, scope: !5554)
!5567 = !DILocation(line: 1958, column: 12, scope: !5564)
!5568 = !DILocation(line: 1958, column: 5, scope: !5564)
!5569 = !DILocation(line: 1959, column: 3, scope: !5554)
!5570 = !DILocation(line: 1960, column: 1, scope: !5554)
!5571 = distinct !DISubprogram(name: "callsite_has_enough_arguments_p", scope: !3, file: !3, line: 1079, type: !5572, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5572 = !DISubroutineType(types: !5573)
!5573 = !{!1815, !2024}
!5574 = !DILocalVariable(name: "call", arg: 1, scope: !5571, file: !3, line: 1079, type: !2024)
!5575 = !DILocation(line: 1079, column: 41, scope: !5571)
!5576 = !DILocation(line: 1081, column: 32, scope: !5571)
!5577 = !DILocation(line: 1081, column: 10, scope: !5571)
!5578 = !DILocation(line: 1081, column: 52, scope: !5571)
!5579 = !DILocation(line: 1081, column: 38, scope: !5571)
!5580 = !DILocation(line: 1081, column: 3, scope: !5571)
!5581 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !1458, file: !1458, line: 1878, type: !5555, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5582 = !DILocalVariable(name: "gs", arg: 1, scope: !5581, file: !1458, line: 1878, type: !5514)
!5583 = !DILocation(line: 1878, column: 31, scope: !5581)
!5584 = !DILocation(line: 1881, column: 21, scope: !5581)
!5585 = !DILocation(line: 1881, column: 10, scope: !5581)
!5586 = !DILocation(line: 1881, column: 3, scope: !5581)
!5587 = distinct !DISubprogram(name: "gimple_call_lhs_ptr", scope: !1458, file: !1458, line: 1888, type: !5522, scopeLine: 1889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5588 = !DILocalVariable(name: "gs", arg: 1, scope: !5587, file: !1458, line: 1888, type: !5514)
!5589 = !DILocation(line: 1888, column: 35, scope: !5587)
!5590 = !DILocation(line: 1891, column: 25, scope: !5587)
!5591 = !DILocation(line: 1891, column: 10, scope: !5587)
!5592 = !DILocation(line: 1891, column: 3, scope: !5587)
!5593 = distinct !DISubprogram(name: "disqualify_ops_if_throwing_stmt", scope: !3, file: !3, line: 987, type: !5594, scopeLine: 988, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5594 = !DISubroutineType(types: !5595)
!5595 = !{!1815, !2024, !1696, !1696}
!5596 = !DILocalVariable(name: "stmt", arg: 1, scope: !5593, file: !3, line: 987, type: !2024)
!5597 = !DILocation(line: 987, column: 41, scope: !5593)
!5598 = !DILocalVariable(name: "lhs", arg: 2, scope: !5593, file: !3, line: 987, type: !1696)
!5599 = !DILocation(line: 987, column: 52, scope: !5593)
!5600 = !DILocalVariable(name: "rhs", arg: 3, scope: !5593, file: !3, line: 987, type: !1696)
!5601 = !DILocation(line: 987, column: 62, scope: !5593)
!5602 = !DILocation(line: 989, column: 8, scope: !5603)
!5603 = distinct !DILexicalBlock(scope: !5593, file: !3, line: 989, column: 7)
!5604 = !DILocation(line: 989, column: 17, scope: !5603)
!5605 = !DILocation(line: 989, column: 41, scope: !5603)
!5606 = !DILocation(line: 989, column: 44, scope: !5603)
!5607 = !DILocation(line: 989, column: 53, scope: !5603)
!5608 = !DILocation(line: 990, column: 7, scope: !5603)
!5609 = !DILocation(line: 990, column: 36, scope: !5603)
!5610 = !DILocation(line: 990, column: 11, scope: !5603)
!5611 = !DILocation(line: 990, column: 42, scope: !5603)
!5612 = !DILocation(line: 990, column: 61, scope: !5603)
!5613 = !DILocation(line: 990, column: 45, scope: !5603)
!5614 = !DILocation(line: 989, column: 7, scope: !5593)
!5615 = !DILocation(line: 992, column: 32, scope: !5616)
!5616 = distinct !DILexicalBlock(scope: !5603, file: !3, line: 991, column: 5)
!5617 = !DILocation(line: 992, column: 7, scope: !5616)
!5618 = !DILocation(line: 993, column: 11, scope: !5619)
!5619 = distinct !DILexicalBlock(scope: !5616, file: !3, line: 993, column: 11)
!5620 = !DILocation(line: 993, column: 11, scope: !5616)
!5621 = !DILocation(line: 994, column: 27, scope: !5619)
!5622 = !DILocation(line: 994, column: 2, scope: !5619)
!5623 = !DILocation(line: 995, column: 7, scope: !5616)
!5624 = !DILocation(line: 997, column: 3, scope: !5593)
!5625 = !DILocation(line: 998, column: 1, scope: !5593)
!5626 = distinct !DISubprogram(name: "asm_visit_addr", scope: !3, file: !3, line: 1066, type: !5627, scopeLine: 1068, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5627 = !DISubroutineType(types: !5628)
!5628 = !{!1815, !2024, !1696, !1977}
!5629 = !DILocalVariable(name: "stmt", arg: 1, scope: !5626, file: !3, line: 1066, type: !2024)
!5630 = !DILocation(line: 1066, column: 24, scope: !5626)
!5631 = !DILocalVariable(name: "op", arg: 2, scope: !5626, file: !3, line: 1066, type: !1696)
!5632 = !DILocation(line: 1066, column: 52, scope: !5626)
!5633 = !DILocalVariable(name: "data", arg: 3, scope: !5626, file: !3, line: 1067, type: !1977)
!5634 = !DILocation(line: 1067, column: 9, scope: !5626)
!5635 = !DILocation(line: 1069, column: 7, scope: !5636)
!5636 = distinct !DILexicalBlock(scope: !5626, file: !3, line: 1069, column: 7)
!5637 = !DILocation(line: 1069, column: 7, scope: !5626)
!5638 = !DILocation(line: 1070, column: 27, scope: !5636)
!5639 = !DILocation(line: 1070, column: 5, scope: !5636)
!5640 = !DILocation(line: 1072, column: 3, scope: !5626)
!5641 = distinct !DISubprogram(name: "gimple_asm_ninputs", scope: !1458, file: !1458, line: 2581, type: !5530, scopeLine: 2582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5642 = !DILocalVariable(name: "gs", arg: 1, scope: !5641, file: !1458, line: 2581, type: !5514)
!5643 = !DILocation(line: 2581, column: 34, scope: !5641)
!5644 = !DILocation(line: 2584, column: 10, scope: !5641)
!5645 = !DILocation(line: 2584, column: 14, scope: !5641)
!5646 = !DILocation(line: 2584, column: 25, scope: !5641)
!5647 = !DILocation(line: 2584, column: 3, scope: !5641)
!5648 = distinct !DISubprogram(name: "gimple_asm_input_op", scope: !1458, file: !1458, line: 2619, type: !5649, scopeLine: 2620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5649 = !DISubroutineType(types: !5650)
!5650 = !{!1696, !5514, !7}
!5651 = !DILocalVariable(name: "gs", arg: 1, scope: !5648, file: !1458, line: 2619, type: !5514)
!5652 = !DILocation(line: 2619, column: 35, scope: !5648)
!5653 = !DILocalVariable(name: "index", arg: 2, scope: !5648, file: !1458, line: 2619, type: !7)
!5654 = !DILocation(line: 2619, column: 48, scope: !5648)
!5655 = !DILocation(line: 2622, column: 3, scope: !5648)
!5656 = !DILocation(line: 2623, column: 21, scope: !5648)
!5657 = !DILocation(line: 2623, column: 25, scope: !5648)
!5658 = !DILocation(line: 2623, column: 10, scope: !5648)
!5659 = !DILocation(line: 2623, column: 3, scope: !5648)
!5660 = distinct !DISubprogram(name: "gimple_asm_noutputs", scope: !1458, file: !1458, line: 2591, type: !5530, scopeLine: 2592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5661 = !DILocalVariable(name: "gs", arg: 1, scope: !5660, file: !1458, line: 2591, type: !5514)
!5662 = !DILocation(line: 2591, column: 35, scope: !5660)
!5663 = !DILocation(line: 2594, column: 10, scope: !5660)
!5664 = !DILocation(line: 2594, column: 14, scope: !5660)
!5665 = !DILocation(line: 2594, column: 25, scope: !5660)
!5666 = !DILocation(line: 2594, column: 3, scope: !5660)
!5667 = distinct !DISubprogram(name: "gimple_asm_output_op", scope: !1458, file: !1458, line: 2652, type: !5649, scopeLine: 2653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5668 = !DILocalVariable(name: "gs", arg: 1, scope: !5667, file: !1458, line: 2652, type: !5514)
!5669 = !DILocation(line: 2652, column: 36, scope: !5667)
!5670 = !DILocalVariable(name: "index", arg: 2, scope: !5667, file: !1458, line: 2652, type: !7)
!5671 = !DILocation(line: 2652, column: 49, scope: !5667)
!5672 = !DILocation(line: 2655, column: 3, scope: !5667)
!5673 = !DILocation(line: 2656, column: 21, scope: !5667)
!5674 = !DILocation(line: 2656, column: 25, scope: !5667)
!5675 = !DILocation(line: 2656, column: 33, scope: !5667)
!5676 = !DILocation(line: 2656, column: 37, scope: !5667)
!5677 = !DILocation(line: 2656, column: 48, scope: !5667)
!5678 = !DILocation(line: 2656, column: 31, scope: !5667)
!5679 = !DILocation(line: 2656, column: 10, scope: !5667)
!5680 = !DILocation(line: 2656, column: 3, scope: !5667)
!5681 = distinct !DISubprogram(name: "update_stmt", scope: !1458, file: !1458, line: 1456, type: !5682, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5682 = !DISubroutineType(types: !5683)
!5683 = !{null, !2024}
!5684 = !DILocalVariable(name: "s", arg: 1, scope: !5681, file: !1458, line: 1456, type: !2024)
!5685 = !DILocation(line: 1456, column: 21, scope: !5681)
!5686 = !DILocation(line: 1458, column: 23, scope: !5687)
!5687 = distinct !DILexicalBlock(scope: !5681, file: !1458, line: 1458, column: 7)
!5688 = !DILocation(line: 1458, column: 7, scope: !5687)
!5689 = !DILocation(line: 1458, column: 7, scope: !5681)
!5690 = !DILocation(line: 1460, column: 28, scope: !5691)
!5691 = distinct !DILexicalBlock(scope: !5687, file: !1458, line: 1459, column: 5)
!5692 = !DILocation(line: 1460, column: 7, scope: !5691)
!5693 = !DILocation(line: 1461, column: 29, scope: !5691)
!5694 = !DILocation(line: 1461, column: 7, scope: !5691)
!5695 = !DILocation(line: 1462, column: 5, scope: !5691)
!5696 = !DILocation(line: 1463, column: 1, scope: !5681)
!5697 = distinct !DISubprogram(name: "bb_seq", scope: !1458, file: !1458, line: 237, type: !5698, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5698 = !DISubroutineType(types: !5699)
!5699 = !{!2014, !5700}
!5700 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1697, line: 112, baseType: !5701)
!5701 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5702, size: 64)
!5702 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1989)
!5703 = !DILocalVariable(name: "bb", arg: 1, scope: !5697, file: !1458, line: 237, type: !5700)
!5704 = !DILocation(line: 237, column: 27, scope: !5697)
!5705 = !DILocation(line: 239, column: 13, scope: !5697)
!5706 = !DILocation(line: 239, column: 17, scope: !5697)
!5707 = !DILocation(line: 239, column: 23, scope: !5697)
!5708 = !DILocation(line: 239, column: 33, scope: !5697)
!5709 = !DILocation(line: 239, column: 36, scope: !5697)
!5710 = !DILocation(line: 239, column: 40, scope: !5697)
!5711 = !DILocation(line: 239, column: 43, scope: !5697)
!5712 = !DILocation(line: 239, column: 10, scope: !5697)
!5713 = !DILocation(line: 239, column: 53, scope: !5697)
!5714 = !DILocation(line: 239, column: 57, scope: !5697)
!5715 = !DILocation(line: 239, column: 60, scope: !5697)
!5716 = !DILocation(line: 239, column: 68, scope: !5697)
!5717 = !DILocation(line: 239, column: 3, scope: !5697)
!5718 = distinct !DISubprogram(name: "gimple_seq_first", scope: !1458, file: !1458, line: 159, type: !5719, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5719 = !DISubroutineType(types: !5720)
!5720 = !{!2019, !5721}
!5721 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1697, line: 67, baseType: !5722)
!5722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5723, size: 64)
!5723 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2016)
!5724 = !DILocalVariable(name: "s", arg: 1, scope: !5718, file: !1458, line: 159, type: !5721)
!5725 = !DILocation(line: 159, column: 36, scope: !5718)
!5726 = !DILocation(line: 161, column: 10, scope: !5718)
!5727 = !DILocation(line: 161, column: 14, scope: !5718)
!5728 = !DILocation(line: 161, column: 17, scope: !5718)
!5729 = !DILocation(line: 161, column: 3, scope: !5718)
!5730 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !1458, file: !1458, line: 1647, type: !5543, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5731 = !DILocalVariable(name: "gs", arg: 1, scope: !5730, file: !1458, line: 1647, type: !5514)
!5732 = !DILocation(line: 1647, column: 29, scope: !5730)
!5733 = !DILocalVariable(name: "i", arg: 2, scope: !5730, file: !1458, line: 1647, type: !7)
!5734 = !DILocation(line: 1647, column: 42, scope: !5730)
!5735 = !DILocation(line: 1649, column: 23, scope: !5736)
!5736 = distinct !DILexicalBlock(scope: !5730, file: !1458, line: 1649, column: 7)
!5737 = !DILocation(line: 1649, column: 7, scope: !5736)
!5738 = !DILocation(line: 1649, column: 7, scope: !5730)
!5739 = !DILocation(line: 1654, column: 26, scope: !5740)
!5740 = distinct !DILexicalBlock(scope: !5736, file: !1458, line: 1650, column: 5)
!5741 = !DILocation(line: 1654, column: 14, scope: !5740)
!5742 = !DILocation(line: 1654, column: 52, scope: !5740)
!5743 = !DILocation(line: 1654, column: 50, scope: !5740)
!5744 = !DILocation(line: 1654, column: 7, scope: !5740)
!5745 = !DILocation(line: 1657, column: 5, scope: !5736)
!5746 = !DILocation(line: 1658, column: 1, scope: !5730)
!5747 = distinct !DISubprogram(name: "gimple_has_ops", scope: !1458, file: !1458, line: 1274, type: !5748, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5748 = !DISubroutineType(types: !5749)
!5749 = !{!1815, !5514}
!5750 = !DILocalVariable(name: "g", arg: 1, scope: !5747, file: !1458, line: 1274, type: !5514)
!5751 = !DILocation(line: 1274, column: 30, scope: !5747)
!5752 = !DILocation(line: 1276, column: 23, scope: !5747)
!5753 = !DILocation(line: 1276, column: 10, scope: !5747)
!5754 = !DILocation(line: 1276, column: 26, scope: !5747)
!5755 = !DILocation(line: 1276, column: 41, scope: !5747)
!5756 = !DILocation(line: 1276, column: 57, scope: !5747)
!5757 = !DILocation(line: 1276, column: 44, scope: !5747)
!5758 = !DILocation(line: 1276, column: 60, scope: !5747)
!5759 = !DILocation(line: 0, scope: !5747)
!5760 = !DILocation(line: 1276, column: 3, scope: !5747)
!5761 = distinct !DISubprogram(name: "gimple_ops", scope: !1458, file: !1458, line: 1614, type: !5762, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5762 = !DISubroutineType(types: !5763)
!5763 = !{!2058, !2024}
!5764 = !DILocalVariable(name: "gs", arg: 1, scope: !5761, file: !1458, line: 1614, type: !2024)
!5765 = !DILocation(line: 1614, column: 20, scope: !5761)
!5766 = !DILocalVariable(name: "off", scope: !5761, file: !1458, line: 1616, type: !2169)
!5767 = !DILocation(line: 1616, column: 10, scope: !5761)
!5768 = !DILocation(line: 1621, column: 56, scope: !5761)
!5769 = !DILocation(line: 1621, column: 28, scope: !5761)
!5770 = !DILocation(line: 1621, column: 9, scope: !5761)
!5771 = !DILocation(line: 1621, column: 7, scope: !5761)
!5772 = !DILocation(line: 1622, column: 3, scope: !5761)
!5773 = !DILocation(line: 1624, column: 29, scope: !5761)
!5774 = !DILocation(line: 1624, column: 20, scope: !5761)
!5775 = !DILocation(line: 1624, column: 34, scope: !5761)
!5776 = !DILocation(line: 1624, column: 32, scope: !5761)
!5777 = !DILocation(line: 1624, column: 10, scope: !5761)
!5778 = !DILocation(line: 1624, column: 3, scope: !5761)
!5779 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !1458, file: !1458, line: 1073, type: !5780, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5780 = !DISubroutineType(types: !5781)
!5781 = !{!1496, !2024}
!5782 = !DILocalVariable(name: "gs", arg: 1, scope: !5779, file: !1458, line: 1073, type: !2024)
!5783 = !DILocation(line: 1073, column: 36, scope: !5779)
!5784 = !DILocation(line: 1075, column: 37, scope: !5779)
!5785 = !DILocation(line: 1075, column: 24, scope: !5779)
!5786 = !DILocation(line: 1075, column: 10, scope: !5779)
!5787 = !DILocation(line: 1075, column: 3, scope: !5779)
!5788 = distinct !DISubprogram(name: "gss_for_code", scope: !1458, file: !1458, line: 1061, type: !5789, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5789 = !DISubroutineType(types: !5790)
!5790 = !{!1496, !1457}
!5791 = !DILocalVariable(name: "code", arg: 1, scope: !5788, file: !1458, line: 1061, type: !1457)
!5792 = !DILocation(line: 1061, column: 32, scope: !5788)
!5793 = !DILocation(line: 1066, column: 24, scope: !5788)
!5794 = !DILocation(line: 1066, column: 10, scope: !5788)
!5795 = !DILocation(line: 1066, column: 3, scope: !5788)
!5796 = distinct !DISubprogram(name: "gimple_num_ops", scope: !1458, file: !1458, line: 1596, type: !5530, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5797 = !DILocalVariable(name: "gs", arg: 1, scope: !5796, file: !1458, line: 1596, type: !5514)
!5798 = !DILocation(line: 1596, column: 30, scope: !5796)
!5799 = !DILocation(line: 1598, column: 10, scope: !5796)
!5800 = !DILocation(line: 1598, column: 14, scope: !5796)
!5801 = !DILocation(line: 1598, column: 21, scope: !5796)
!5802 = !DILocation(line: 1598, column: 3, scope: !5796)
!5803 = distinct !DISubprogram(name: "gimple_call_fn", scope: !1458, file: !1458, line: 1911, type: !5555, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5804 = !DILocalVariable(name: "gs", arg: 1, scope: !5803, file: !1458, line: 1911, type: !5514)
!5805 = !DILocation(line: 1911, column: 30, scope: !5803)
!5806 = !DILocation(line: 1914, column: 21, scope: !5803)
!5807 = !DILocation(line: 1914, column: 10, scope: !5803)
!5808 = !DILocation(line: 1914, column: 3, scope: !5803)
!5809 = distinct !DISubprogram(name: "gimple_op", scope: !1458, file: !1458, line: 1631, type: !5649, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5810 = !DILocalVariable(name: "gs", arg: 1, scope: !5809, file: !1458, line: 1631, type: !5514)
!5811 = !DILocation(line: 1631, column: 25, scope: !5809)
!5812 = !DILocalVariable(name: "i", arg: 2, scope: !5809, file: !1458, line: 1631, type: !7)
!5813 = !DILocation(line: 1631, column: 38, scope: !5809)
!5814 = !DILocation(line: 1633, column: 23, scope: !5815)
!5815 = distinct !DILexicalBlock(scope: !5809, file: !1458, line: 1633, column: 7)
!5816 = !DILocation(line: 1633, column: 7, scope: !5815)
!5817 = !DILocation(line: 1633, column: 7, scope: !5809)
!5818 = !DILocation(line: 1638, column: 26, scope: !5819)
!5819 = distinct !DILexicalBlock(scope: !5815, file: !1458, line: 1634, column: 5)
!5820 = !DILocation(line: 1638, column: 14, scope: !5819)
!5821 = !DILocation(line: 1638, column: 50, scope: !5819)
!5822 = !DILocation(line: 1638, column: 7, scope: !5819)
!5823 = !DILocation(line: 1641, column: 5, scope: !5815)
!5824 = !DILocation(line: 1642, column: 1, scope: !5809)
!5825 = distinct !DISubprogram(name: "disqualify_base_of_expr", scope: !3, file: !3, line: 881, type: !5826, scopeLine: 882, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5826 = !DISubroutineType(types: !5827)
!5827 = !{null, !1696, !1897}
!5828 = !DILocalVariable(name: "t", arg: 1, scope: !5825, file: !3, line: 881, type: !1696)
!5829 = !DILocation(line: 881, column: 31, scope: !5825)
!5830 = !DILocalVariable(name: "reason", arg: 2, scope: !5825, file: !3, line: 881, type: !1897)
!5831 = !DILocation(line: 881, column: 46, scope: !5825)
!5832 = !DILocation(line: 883, column: 3, scope: !5825)
!5833 = !DILocation(line: 883, column: 31, scope: !5825)
!5834 = !DILocation(line: 883, column: 10, scope: !5825)
!5835 = !DILocation(line: 884, column: 9, scope: !5825)
!5836 = !DILocation(line: 884, column: 7, scope: !5825)
!5837 = distinct !{!5837, !5832, !5835}
!5838 = !DILocation(line: 886, column: 7, scope: !5839)
!5839 = distinct !DILexicalBlock(scope: !5825, file: !3, line: 886, column: 7)
!5840 = !DILocation(line: 886, column: 16, scope: !5839)
!5841 = !DILocation(line: 886, column: 7, scope: !5825)
!5842 = !DILocation(line: 888, column: 11, scope: !5843)
!5843 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 888, column: 11)
!5844 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 887, column: 5)
!5845 = !DILocation(line: 888, column: 11, scope: !5844)
!5846 = !DILocation(line: 889, column: 6, scope: !5843)
!5847 = !DILocation(line: 889, column: 4, scope: !5843)
!5848 = !DILocation(line: 889, column: 2, scope: !5843)
!5849 = !DILocation(line: 890, column: 31, scope: !5844)
!5850 = !DILocation(line: 890, column: 11, scope: !5844)
!5851 = !DILocation(line: 890, column: 9, scope: !5844)
!5852 = !DILocation(line: 891, column: 5, scope: !5844)
!5853 = !DILocation(line: 893, column: 7, scope: !5854)
!5854 = distinct !DILexicalBlock(scope: !5825, file: !3, line: 893, column: 7)
!5855 = !DILocation(line: 893, column: 9, scope: !5854)
!5856 = !DILocation(line: 893, column: 12, scope: !5854)
!5857 = !DILocation(line: 893, column: 7, scope: !5825)
!5858 = !DILocation(line: 894, column: 27, scope: !5854)
!5859 = !DILocation(line: 894, column: 30, scope: !5854)
!5860 = !DILocation(line: 894, column: 5, scope: !5854)
!5861 = !DILocation(line: 895, column: 1, scope: !5825)
!5862 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !5863, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5863 = !DISubroutineType(types: !5864)
!5864 = !{!1815, !5865}
!5865 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1697, line: 59, baseType: !5866)
!5866 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5867, size: 64)
!5867 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1699)
!5868 = !DILocalVariable(name: "t", arg: 1, scope: !5862, file: !135, line: 4551, type: !5865)
!5869 = !DILocation(line: 4551, column: 33, scope: !5862)
!5870 = !DILocation(line: 4553, column: 11, scope: !5862)
!5871 = !DILocation(line: 4553, column: 3, scope: !5862)
!5872 = !DILocation(line: 4562, column: 7, scope: !5873)
!5873 = distinct !DILexicalBlock(scope: !5862, file: !135, line: 4554, column: 5)
!5874 = !DILocation(line: 4565, column: 7, scope: !5873)
!5875 = !DILocation(line: 4567, column: 1, scope: !5862)
!5876 = distinct !DISubprogram(name: "get_ssa_base_param", scope: !3, file: !3, line: 667, type: !5877, scopeLine: 668, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5877 = !DISubroutineType(types: !5878)
!5878 = !{!1696, !1696}
!5879 = !DILocalVariable(name: "t", arg: 1, scope: !5876, file: !3, line: 667, type: !1696)
!5880 = !DILocation(line: 667, column: 26, scope: !5876)
!5881 = !DILocation(line: 669, column: 7, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !5876, file: !3, line: 669, column: 7)
!5883 = !DILocation(line: 669, column: 21, scope: !5882)
!5884 = !DILocation(line: 669, column: 7, scope: !5876)
!5885 = !DILocation(line: 671, column: 11, scope: !5886)
!5886 = distinct !DILexicalBlock(scope: !5887, file: !3, line: 671, column: 11)
!5887 = distinct !DILexicalBlock(scope: !5882, file: !3, line: 670, column: 5)
!5888 = !DILocation(line: 671, column: 11, scope: !5887)
!5889 = !DILocation(line: 672, column: 9, scope: !5886)
!5890 = !DILocation(line: 672, column: 2, scope: !5886)
!5891 = !DILocation(line: 674, column: 2, scope: !5886)
!5892 = !DILocation(line: 676, column: 10, scope: !5876)
!5893 = !DILocation(line: 676, column: 3, scope: !5876)
!5894 = !DILocation(line: 677, column: 1, scope: !5876)
!5895 = distinct !DISubprogram(name: "disqualify_candidate", scope: !3, file: !3, line: 606, type: !5826, scopeLine: 607, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5896 = !DILocalVariable(name: "decl", arg: 1, scope: !5895, file: !3, line: 606, type: !1696)
!5897 = !DILocation(line: 606, column: 28, scope: !5895)
!5898 = !DILocalVariable(name: "reason", arg: 2, scope: !5895, file: !3, line: 606, type: !1897)
!5899 = !DILocation(line: 606, column: 46, scope: !5895)
!5900 = !DILocation(line: 608, column: 21, scope: !5895)
!5901 = !DILocation(line: 608, column: 39, scope: !5895)
!5902 = !DILocation(line: 608, column: 3, scope: !5895)
!5903 = !DILocation(line: 610, column: 7, scope: !5904)
!5904 = distinct !DILexicalBlock(scope: !5895, file: !3, line: 610, column: 7)
!5905 = !DILocation(line: 610, column: 17, scope: !5904)
!5906 = !DILocation(line: 610, column: 21, scope: !5904)
!5907 = !DILocation(line: 610, column: 32, scope: !5904)
!5908 = !DILocation(line: 610, column: 7, scope: !5895)
!5909 = !DILocation(line: 612, column: 16, scope: !5910)
!5910 = distinct !DILexicalBlock(scope: !5904, file: !3, line: 611, column: 5)
!5911 = !DILocation(line: 612, column: 7, scope: !5910)
!5912 = !DILocation(line: 613, column: 27, scope: !5910)
!5913 = !DILocation(line: 613, column: 38, scope: !5910)
!5914 = !DILocation(line: 613, column: 7, scope: !5910)
!5915 = !DILocation(line: 614, column: 16, scope: !5910)
!5916 = !DILocation(line: 614, column: 38, scope: !5910)
!5917 = !DILocation(line: 614, column: 7, scope: !5910)
!5918 = !DILocation(line: 615, column: 5, scope: !5910)
!5919 = !DILocation(line: 616, column: 1, scope: !5895)
!5920 = distinct !DISubprogram(name: "build_access_from_expr_1", scope: !3, file: !3, line: 902, type: !5921, scopeLine: 903, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5921 = !DISubroutineType(types: !5922)
!5922 = !{!2999, !2058, !2024, !1815}
!5923 = !DILocalVariable(name: "expr_ptr", arg: 1, scope: !5920, file: !3, line: 902, type: !2058)
!5924 = !DILocation(line: 902, column: 33, scope: !5920)
!5925 = !DILocalVariable(name: "stmt", arg: 2, scope: !5920, file: !3, line: 902, type: !2024)
!5926 = !DILocation(line: 902, column: 50, scope: !5920)
!5927 = !DILocalVariable(name: "write", arg: 3, scope: !5920, file: !3, line: 902, type: !1815)
!5928 = !DILocation(line: 902, column: 61, scope: !5920)
!5929 = !DILocalVariable(name: "ret", scope: !5920, file: !3, line: 904, type: !2999)
!5930 = !DILocation(line: 904, column: 18, scope: !5920)
!5931 = !DILocalVariable(name: "expr", scope: !5920, file: !3, line: 905, type: !1696)
!5932 = !DILocation(line: 905, column: 8, scope: !5920)
!5933 = !DILocation(line: 905, column: 16, scope: !5920)
!5934 = !DILocation(line: 905, column: 15, scope: !5920)
!5935 = !DILocalVariable(name: "partial_ref", scope: !5920, file: !3, line: 906, type: !1815)
!5936 = !DILocation(line: 906, column: 8, scope: !5920)
!5937 = !DILocation(line: 908, column: 7, scope: !5938)
!5938 = distinct !DILexicalBlock(scope: !5920, file: !3, line: 908, column: 7)
!5939 = !DILocation(line: 908, column: 24, scope: !5938)
!5940 = !DILocation(line: 909, column: 7, scope: !5938)
!5941 = !DILocation(line: 909, column: 10, scope: !5938)
!5942 = !DILocation(line: 909, column: 27, scope: !5938)
!5943 = !DILocation(line: 910, column: 7, scope: !5938)
!5944 = !DILocation(line: 910, column: 10, scope: !5938)
!5945 = !DILocation(line: 910, column: 27, scope: !5938)
!5946 = !DILocation(line: 908, column: 7, scope: !5920)
!5947 = !DILocation(line: 912, column: 14, scope: !5948)
!5948 = distinct !DILexicalBlock(scope: !5938, file: !3, line: 911, column: 5)
!5949 = !DILocation(line: 912, column: 12, scope: !5948)
!5950 = !DILocation(line: 913, column: 19, scope: !5948)
!5951 = !DILocation(line: 914, column: 5, scope: !5948)
!5952 = !DILocation(line: 916, column: 17, scope: !5938)
!5953 = !DILocation(line: 922, column: 7, scope: !5954)
!5954 = distinct !DILexicalBlock(scope: !5920, file: !3, line: 922, column: 7)
!5955 = !DILocation(line: 922, column: 24, scope: !5954)
!5956 = !DILocation(line: 922, column: 7, scope: !5920)
!5957 = !DILocation(line: 923, column: 12, scope: !5954)
!5958 = !DILocation(line: 923, column: 10, scope: !5954)
!5959 = !DILocation(line: 923, column: 5, scope: !5954)
!5960 = !DILocation(line: 925, column: 37, scope: !5961)
!5961 = distinct !DILexicalBlock(scope: !5920, file: !3, line: 925, column: 7)
!5962 = !DILocation(line: 925, column: 7, scope: !5961)
!5963 = !DILocation(line: 925, column: 7, scope: !5920)
!5964 = !DILocation(line: 927, column: 32, scope: !5965)
!5965 = distinct !DILexicalBlock(scope: !5961, file: !3, line: 926, column: 5)
!5966 = !DILocation(line: 927, column: 7, scope: !5965)
!5967 = !DILocation(line: 929, column: 7, scope: !5965)
!5968 = !DILocation(line: 932, column: 11, scope: !5920)
!5969 = !DILocation(line: 932, column: 3, scope: !5920)
!5970 = !DILocation(line: 935, column: 11, scope: !5971)
!5971 = distinct !DILexicalBlock(scope: !5972, file: !3, line: 935, column: 11)
!5972 = distinct !DILexicalBlock(scope: !5920, file: !3, line: 933, column: 5)
!5973 = !DILocation(line: 935, column: 20, scope: !5971)
!5974 = !DILocation(line: 935, column: 11, scope: !5972)
!5975 = !DILocation(line: 936, column: 2, scope: !5971)
!5976 = !DILocation(line: 935, column: 23, scope: !5971)
!5977 = !DILocation(line: 944, column: 28, scope: !5972)
!5978 = !DILocation(line: 944, column: 34, scope: !5972)
!5979 = !DILocation(line: 944, column: 40, scope: !5972)
!5980 = !DILocation(line: 944, column: 13, scope: !5972)
!5981 = !DILocation(line: 944, column: 11, scope: !5972)
!5982 = !DILocation(line: 945, column: 7, scope: !5972)
!5983 = !DILocation(line: 948, column: 7, scope: !5972)
!5984 = !DILocation(line: 951, column: 7, scope: !5985)
!5985 = distinct !DILexicalBlock(scope: !5920, file: !3, line: 951, column: 7)
!5986 = !DILocation(line: 951, column: 13, scope: !5985)
!5987 = !DILocation(line: 951, column: 16, scope: !5985)
!5988 = !DILocation(line: 951, column: 28, scope: !5985)
!5989 = !DILocation(line: 951, column: 31, scope: !5985)
!5990 = !DILocation(line: 951, column: 7, scope: !5920)
!5991 = !DILocation(line: 952, column: 5, scope: !5985)
!5992 = !DILocation(line: 952, column: 10, scope: !5985)
!5993 = !DILocation(line: 952, column: 26, scope: !5985)
!5994 = !DILocation(line: 954, column: 10, scope: !5920)
!5995 = !DILocation(line: 954, column: 3, scope: !5920)
!5996 = !DILocation(line: 955, column: 1, scope: !5920)
!5997 = distinct !DISubprogram(name: "contains_view_convert_expr_p", scope: !5226, file: !5226, line: 1175, type: !5863, scopeLine: 1176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!5998 = !DILocalVariable(name: "ref", arg: 1, scope: !5997, file: !5226, line: 1175, type: !5865)
!5999 = !DILocation(line: 1175, column: 42, scope: !5997)
!6000 = !DILocation(line: 1177, column: 3, scope: !5997)
!6001 = !DILocation(line: 1177, column: 31, scope: !5997)
!6002 = !DILocation(line: 1177, column: 10, scope: !5997)
!6003 = !DILocation(line: 1179, column: 11, scope: !6004)
!6004 = distinct !DILexicalBlock(scope: !6005, file: !5226, line: 1179, column: 11)
!6005 = distinct !DILexicalBlock(scope: !5997, file: !5226, line: 1178, column: 5)
!6006 = !DILocation(line: 1179, column: 27, scope: !6004)
!6007 = !DILocation(line: 1179, column: 11, scope: !6005)
!6008 = !DILocation(line: 1180, column: 2, scope: !6004)
!6009 = !DILocation(line: 1181, column: 13, scope: !6005)
!6010 = !DILocation(line: 1181, column: 11, scope: !6005)
!6011 = distinct !{!6011, !6000, !6012}
!6012 = !DILocation(line: 1182, column: 5, scope: !5997)
!6013 = !DILocation(line: 1184, column: 3, scope: !5997)
!6014 = !DILocation(line: 1185, column: 1, scope: !5997)
!6015 = distinct !DISubprogram(name: "create_access", scope: !3, file: !3, line: 740, type: !6016, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6016 = !DISubroutineType(types: !6017)
!6017 = !{!2999, !1696, !2024, !1815}
!6018 = !DILocalVariable(name: "expr", arg: 1, scope: !6015, file: !3, line: 740, type: !1696)
!6019 = !DILocation(line: 740, column: 21, scope: !6015)
!6020 = !DILocalVariable(name: "stmt", arg: 2, scope: !6015, file: !3, line: 740, type: !2024)
!6021 = !DILocation(line: 740, column: 34, scope: !6015)
!6022 = !DILocalVariable(name: "write", arg: 3, scope: !6015, file: !3, line: 740, type: !1815)
!6023 = !DILocation(line: 740, column: 45, scope: !6015)
!6024 = !DILocalVariable(name: "access", scope: !6015, file: !3, line: 742, type: !2999)
!6025 = !DILocation(line: 742, column: 18, scope: !6015)
!6026 = !DILocalVariable(name: "offset", scope: !6015, file: !3, line: 743, type: !1752)
!6027 = !DILocation(line: 743, column: 17, scope: !6015)
!6028 = !DILocalVariable(name: "size", scope: !6015, file: !3, line: 743, type: !1752)
!6029 = !DILocation(line: 743, column: 25, scope: !6015)
!6030 = !DILocalVariable(name: "max_size", scope: !6015, file: !3, line: 743, type: !1752)
!6031 = !DILocation(line: 743, column: 31, scope: !6015)
!6032 = !DILocalVariable(name: "base", scope: !6015, file: !3, line: 744, type: !1696)
!6033 = !DILocation(line: 744, column: 8, scope: !6015)
!6034 = !DILocation(line: 744, column: 15, scope: !6015)
!6035 = !DILocalVariable(name: "ptr", scope: !6015, file: !3, line: 745, type: !1815)
!6036 = !DILocation(line: 745, column: 8, scope: !6015)
!6037 = !DILocalVariable(name: "unscalarizable_region", scope: !6015, file: !3, line: 745, type: !1815)
!6038 = !DILocation(line: 745, column: 13, scope: !6015)
!6039 = !DILocation(line: 747, column: 35, scope: !6015)
!6040 = !DILocation(line: 747, column: 10, scope: !6015)
!6041 = !DILocation(line: 747, column: 8, scope: !6015)
!6042 = !DILocation(line: 749, column: 7, scope: !6043)
!6043 = distinct !DILexicalBlock(scope: !6015, file: !3, line: 749, column: 7)
!6044 = !DILocation(line: 749, column: 16, scope: !6043)
!6045 = !DILocation(line: 749, column: 38, scope: !6043)
!6046 = !DILocation(line: 749, column: 41, scope: !6043)
!6047 = !DILocation(line: 749, column: 7, scope: !6015)
!6048 = !DILocation(line: 751, column: 34, scope: !6049)
!6049 = distinct !DILexicalBlock(scope: !6043, file: !3, line: 750, column: 5)
!6050 = !DILocation(line: 751, column: 14, scope: !6049)
!6051 = !DILocation(line: 751, column: 12, scope: !6049)
!6052 = !DILocation(line: 752, column: 12, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6049, file: !3, line: 752, column: 11)
!6054 = !DILocation(line: 752, column: 11, scope: !6049)
!6055 = !DILocation(line: 753, column: 2, scope: !6053)
!6056 = !DILocation(line: 754, column: 11, scope: !6049)
!6057 = !DILocation(line: 755, column: 5, scope: !6049)
!6058 = !DILocation(line: 757, column: 9, scope: !6043)
!6059 = !DILocation(line: 759, column: 8, scope: !6060)
!6060 = distinct !DILexicalBlock(scope: !6015, file: !3, line: 759, column: 7)
!6061 = !DILocation(line: 759, column: 22, scope: !6060)
!6062 = !DILocation(line: 759, column: 40, scope: !6060)
!6063 = !DILocation(line: 759, column: 58, scope: !6060)
!6064 = !DILocation(line: 759, column: 26, scope: !6060)
!6065 = !DILocation(line: 759, column: 7, scope: !6015)
!6066 = !DILocation(line: 760, column: 5, scope: !6060)
!6067 = !DILocation(line: 762, column: 7, scope: !6068)
!6068 = distinct !DILexicalBlock(scope: !6015, file: !3, line: 762, column: 7)
!6069 = !DILocation(line: 762, column: 16, scope: !6068)
!6070 = !DILocation(line: 762, column: 7, scope: !6015)
!6071 = !DILocation(line: 764, column: 11, scope: !6072)
!6072 = distinct !DILexicalBlock(scope: !6073, file: !3, line: 764, column: 11)
!6073 = distinct !DILexicalBlock(scope: !6068, file: !3, line: 763, column: 5)
!6074 = !DILocation(line: 764, column: 16, scope: !6072)
!6075 = !DILocation(line: 764, column: 20, scope: !6072)
!6076 = !DILocation(line: 764, column: 23, scope: !6072)
!6077 = !DILocation(line: 764, column: 31, scope: !6072)
!6078 = !DILocation(line: 764, column: 28, scope: !6072)
!6079 = !DILocation(line: 764, column: 11, scope: !6073)
!6080 = !DILocation(line: 766, column: 26, scope: !6081)
!6081 = distinct !DILexicalBlock(scope: !6072, file: !3, line: 765, column: 2)
!6082 = !DILocation(line: 766, column: 4, scope: !6081)
!6083 = !DILocation(line: 767, column: 4, scope: !6081)
!6084 = !DILocation(line: 769, column: 12, scope: !6085)
!6085 = distinct !DILexicalBlock(scope: !6073, file: !3, line: 769, column: 11)
!6086 = !DILocation(line: 769, column: 19, scope: !6085)
!6087 = !DILocation(line: 769, column: 36, scope: !6085)
!6088 = !DILocation(line: 769, column: 41, scope: !6085)
!6089 = !DILocation(line: 769, column: 45, scope: !6085)
!6090 = !DILocation(line: 769, column: 50, scope: !6085)
!6091 = !DILocation(line: 769, column: 67, scope: !6085)
!6092 = !DILocation(line: 769, column: 11, scope: !6073)
!6093 = !DILocation(line: 771, column: 26, scope: !6094)
!6094 = distinct !DILexicalBlock(scope: !6085, file: !3, line: 770, column: 2)
!6095 = !DILocation(line: 771, column: 4, scope: !6094)
!6096 = !DILocation(line: 773, column: 4, scope: !6094)
!6097 = !DILocation(line: 776, column: 11, scope: !6098)
!6098 = distinct !DILexicalBlock(scope: !6073, file: !3, line: 776, column: 11)
!6099 = !DILocation(line: 776, column: 11, scope: !6073)
!6100 = !DILocation(line: 777, column: 25, scope: !6098)
!6101 = !DILocation(line: 777, column: 31, scope: !6098)
!6102 = !DILocation(line: 777, column: 40, scope: !6098)
!6103 = !DILocation(line: 777, column: 38, scope: !6098)
!6104 = !DILocation(line: 777, column: 46, scope: !6098)
!6105 = !DILocation(line: 777, column: 2, scope: !6098)
!6106 = !DILocation(line: 778, column: 5, scope: !6073)
!6107 = !DILocation(line: 781, column: 11, scope: !6108)
!6108 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 781, column: 11)
!6109 = distinct !DILexicalBlock(scope: !6068, file: !3, line: 780, column: 5)
!6110 = !DILocation(line: 781, column: 19, scope: !6108)
!6111 = !DILocation(line: 781, column: 16, scope: !6108)
!6112 = !DILocation(line: 781, column: 11, scope: !6109)
!6113 = !DILocation(line: 783, column: 11, scope: !6114)
!6114 = distinct !DILexicalBlock(scope: !6108, file: !3, line: 782, column: 2)
!6115 = !DILocation(line: 783, column: 9, scope: !6114)
!6116 = !DILocation(line: 784, column: 26, scope: !6114)
!6117 = !DILocation(line: 785, column: 2, scope: !6114)
!6118 = !DILocation(line: 786, column: 11, scope: !6119)
!6119 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 786, column: 11)
!6120 = !DILocation(line: 786, column: 16, scope: !6119)
!6121 = !DILocation(line: 786, column: 11, scope: !6109)
!6122 = !DILocation(line: 788, column: 26, scope: !6123)
!6123 = distinct !DILexicalBlock(scope: !6119, file: !3, line: 787, column: 2)
!6124 = !DILocation(line: 788, column: 4, scope: !6123)
!6125 = !DILocation(line: 789, column: 4, scope: !6123)
!6126 = !DILocation(line: 793, column: 29, scope: !6015)
!6127 = !DILocation(line: 793, column: 35, scope: !6015)
!6128 = !DILocation(line: 793, column: 43, scope: !6015)
!6129 = !DILocation(line: 793, column: 12, scope: !6015)
!6130 = !DILocation(line: 793, column: 10, scope: !6015)
!6131 = !DILocation(line: 794, column: 18, scope: !6015)
!6132 = !DILocation(line: 794, column: 3, scope: !6015)
!6133 = !DILocation(line: 794, column: 11, scope: !6015)
!6134 = !DILocation(line: 794, column: 16, scope: !6015)
!6135 = !DILocation(line: 795, column: 18, scope: !6015)
!6136 = !DILocation(line: 795, column: 3, scope: !6015)
!6137 = !DILocation(line: 795, column: 11, scope: !6015)
!6138 = !DILocation(line: 795, column: 16, scope: !6015)
!6139 = !DILocation(line: 796, column: 19, scope: !6015)
!6140 = !DILocation(line: 796, column: 3, scope: !6015)
!6141 = !DILocation(line: 796, column: 11, scope: !6015)
!6142 = !DILocation(line: 796, column: 17, scope: !6015)
!6143 = !DILocation(line: 797, column: 39, scope: !6015)
!6144 = !DILocation(line: 797, column: 3, scope: !6015)
!6145 = !DILocation(line: 797, column: 11, scope: !6015)
!6146 = !DILocation(line: 797, column: 37, scope: !6015)
!6147 = !DILocation(line: 798, column: 18, scope: !6015)
!6148 = !DILocation(line: 798, column: 3, scope: !6015)
!6149 = !DILocation(line: 798, column: 11, scope: !6015)
!6150 = !DILocation(line: 798, column: 16, scope: !6015)
!6151 = !DILocation(line: 800, column: 10, scope: !6015)
!6152 = !DILocation(line: 800, column: 3, scope: !6015)
!6153 = !DILocation(line: 801, column: 1, scope: !6015)
!6154 = distinct !DISubprogram(name: "mark_parm_dereference", scope: !3, file: !3, line: 684, type: !6155, scopeLine: 685, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6155 = !DISubroutineType(types: !6156)
!6156 = !{null, !1696, !1752, !2024}
!6157 = !DILocalVariable(name: "base", arg: 1, scope: !6154, file: !3, line: 684, type: !1696)
!6158 = !DILocation(line: 684, column: 29, scope: !6154)
!6159 = !DILocalVariable(name: "dist", arg: 2, scope: !6154, file: !3, line: 684, type: !1752)
!6160 = !DILocation(line: 684, column: 49, scope: !6154)
!6161 = !DILocalVariable(name: "stmt", arg: 3, scope: !6154, file: !3, line: 684, type: !2024)
!6162 = !DILocation(line: 684, column: 62, scope: !6154)
!6163 = !DILocalVariable(name: "bb", scope: !6154, file: !3, line: 686, type: !2423)
!6164 = !DILocation(line: 686, column: 15, scope: !6154)
!6165 = !DILocation(line: 686, column: 31, scope: !6154)
!6166 = !DILocation(line: 686, column: 20, scope: !6154)
!6167 = !DILocalVariable(name: "idx", scope: !6154, file: !3, line: 687, type: !1693)
!6168 = !DILocation(line: 687, column: 7, scope: !6154)
!6169 = !DILocalVariable(name: "parm_index", scope: !6154, file: !3, line: 687, type: !1693)
!6170 = !DILocation(line: 687, column: 12, scope: !6154)
!6171 = !DILocalVariable(name: "parm", scope: !6154, file: !3, line: 688, type: !1696)
!6172 = !DILocation(line: 688, column: 8, scope: !6154)
!6173 = !DILocation(line: 690, column: 21, scope: !6174)
!6174 = distinct !DILexicalBlock(scope: !6154, file: !3, line: 690, column: 7)
!6175 = !DILocation(line: 690, column: 32, scope: !6174)
!6176 = !DILocation(line: 690, column: 36, scope: !6174)
!6177 = !DILocation(line: 690, column: 7, scope: !6174)
!6178 = !DILocation(line: 690, column: 7, scope: !6154)
!6179 = !DILocation(line: 691, column: 5, scope: !6174)
!6180 = !DILocation(line: 693, column: 15, scope: !6181)
!6181 = distinct !DILexicalBlock(scope: !6154, file: !3, line: 693, column: 3)
!6182 = !DILocation(line: 693, column: 13, scope: !6181)
!6183 = !DILocation(line: 693, column: 8, scope: !6181)
!6184 = !DILocation(line: 694, column: 8, scope: !6185)
!6185 = distinct !DILexicalBlock(scope: !6181, file: !3, line: 693, column: 3)
!6186 = !DILocation(line: 694, column: 13, scope: !6185)
!6187 = !DILocation(line: 694, column: 16, scope: !6185)
!6188 = !DILocation(line: 694, column: 24, scope: !6185)
!6189 = !DILocation(line: 694, column: 21, scope: !6185)
!6190 = !DILocation(line: 0, scope: !6185)
!6191 = !DILocation(line: 693, column: 3, scope: !6181)
!6192 = !DILocation(line: 696, column: 15, scope: !6185)
!6193 = !DILocation(line: 696, column: 5, scope: !6185)
!6194 = !DILocation(line: 695, column: 15, scope: !6185)
!6195 = !DILocation(line: 695, column: 13, scope: !6185)
!6196 = !DILocation(line: 693, column: 3, scope: !6185)
!6197 = distinct !{!6197, !6191, !6198}
!6198 = !DILocation(line: 696, column: 15, scope: !6181)
!6199 = !DILocation(line: 698, column: 3, scope: !6154)
!6200 = !DILocation(line: 700, column: 9, scope: !6154)
!6201 = !DILocation(line: 700, column: 13, scope: !6154)
!6202 = !DILocation(line: 700, column: 21, scope: !6154)
!6203 = !DILocation(line: 700, column: 19, scope: !6154)
!6204 = !DILocation(line: 700, column: 40, scope: !6154)
!6205 = !DILocation(line: 700, column: 38, scope: !6154)
!6206 = !DILocation(line: 700, column: 7, scope: !6154)
!6207 = !DILocation(line: 701, column: 7, scope: !6208)
!6208 = distinct !DILexicalBlock(scope: !6154, file: !3, line: 701, column: 7)
!6209 = !DILocation(line: 701, column: 23, scope: !6208)
!6210 = !DILocation(line: 701, column: 30, scope: !6208)
!6211 = !DILocation(line: 701, column: 28, scope: !6208)
!6212 = !DILocation(line: 701, column: 7, scope: !6154)
!6213 = !DILocation(line: 702, column: 28, scope: !6208)
!6214 = !DILocation(line: 702, column: 5, scope: !6208)
!6215 = !DILocation(line: 702, column: 21, scope: !6208)
!6216 = !DILocation(line: 702, column: 26, scope: !6208)
!6217 = !DILocation(line: 703, column: 1, scope: !6154)
!6218 = distinct !DISubprogram(name: "create_access_1", scope: !3, file: !3, line: 710, type: !6219, scopeLine: 711, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6219 = !DISubroutineType(types: !6220)
!6220 = !{!2999, !1696, !1752, !1752}
!6221 = !DILocalVariable(name: "base", arg: 1, scope: !6218, file: !3, line: 710, type: !1696)
!6222 = !DILocation(line: 710, column: 23, scope: !6218)
!6223 = !DILocalVariable(name: "offset", arg: 2, scope: !6218, file: !3, line: 710, type: !1752)
!6224 = !DILocation(line: 710, column: 43, scope: !6218)
!6225 = !DILocalVariable(name: "size", arg: 3, scope: !6218, file: !3, line: 710, type: !1752)
!6226 = !DILocation(line: 710, column: 65, scope: !6218)
!6227 = !DILocalVariable(name: "vec", scope: !6218, file: !3, line: 712, type: !3036)
!6228 = !DILocation(line: 712, column: 25, scope: !6218)
!6229 = !DILocalVariable(name: "access", scope: !6218, file: !3, line: 713, type: !2999)
!6230 = !DILocation(line: 713, column: 18, scope: !6218)
!6231 = !DILocalVariable(name: "slot", scope: !6218, file: !3, line: 714, type: !2479)
!6232 = !DILocation(line: 714, column: 10, scope: !6218)
!6233 = !DILocation(line: 716, column: 42, scope: !6218)
!6234 = !DILocation(line: 716, column: 30, scope: !6218)
!6235 = !DILocation(line: 716, column: 12, scope: !6218)
!6236 = !DILocation(line: 716, column: 10, scope: !6218)
!6237 = !DILocation(line: 717, column: 11, scope: !6218)
!6238 = !DILocation(line: 717, column: 3, scope: !6218)
!6239 = !DILocation(line: 718, column: 18, scope: !6218)
!6240 = !DILocation(line: 718, column: 3, scope: !6218)
!6241 = !DILocation(line: 718, column: 11, scope: !6218)
!6242 = !DILocation(line: 718, column: 16, scope: !6218)
!6243 = !DILocation(line: 719, column: 20, scope: !6218)
!6244 = !DILocation(line: 719, column: 3, scope: !6218)
!6245 = !DILocation(line: 719, column: 11, scope: !6218)
!6246 = !DILocation(line: 719, column: 18, scope: !6218)
!6247 = !DILocation(line: 720, column: 18, scope: !6218)
!6248 = !DILocation(line: 720, column: 3, scope: !6218)
!6249 = !DILocation(line: 720, column: 11, scope: !6218)
!6250 = !DILocation(line: 720, column: 16, scope: !6218)
!6251 = !DILocation(line: 722, column: 32, scope: !6218)
!6252 = !DILocation(line: 722, column: 49, scope: !6218)
!6253 = !DILocation(line: 722, column: 10, scope: !6218)
!6254 = !DILocation(line: 722, column: 8, scope: !6218)
!6255 = !DILocation(line: 723, column: 7, scope: !6256)
!6256 = distinct !DILexicalBlock(scope: !6218, file: !3, line: 723, column: 7)
!6257 = !DILocation(line: 723, column: 7, scope: !6218)
!6258 = !DILocation(line: 724, column: 37, scope: !6256)
!6259 = !DILocation(line: 724, column: 36, scope: !6256)
!6260 = !DILocation(line: 724, column: 11, scope: !6256)
!6261 = !DILocation(line: 724, column: 9, scope: !6256)
!6262 = !DILocation(line: 724, column: 5, scope: !6256)
!6263 = !DILocation(line: 726, column: 11, scope: !6256)
!6264 = !DILocation(line: 726, column: 9, scope: !6256)
!6265 = !DILocation(line: 728, column: 3, scope: !6218)
!6266 = !DILocation(line: 731, column: 48, scope: !6218)
!6267 = !DILocation(line: 731, column: 22, scope: !6218)
!6268 = !DILocation(line: 731, column: 39, scope: !6218)
!6269 = !DILocation(line: 731, column: 2, scope: !6218)
!6270 = !DILocation(line: 730, column: 3, scope: !6218)
!6271 = !DILocation(line: 731, column: 46, scope: !6218)
!6272 = !DILocation(line: 733, column: 10, scope: !6218)
!6273 = !DILocation(line: 733, column: 3, scope: !6218)
!6274 = distinct !DISubprogram(name: "gimple_bb", scope: !1458, file: !1458, line: 1112, type: !6275, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6275 = !DISubroutineType(types: !6276)
!6276 = !{!1988, !5514}
!6277 = !DILocalVariable(name: "g", arg: 1, scope: !6274, file: !1458, line: 1112, type: !5514)
!6278 = !DILocation(line: 1112, column: 25, scope: !6274)
!6279 = !DILocation(line: 1114, column: 10, scope: !6274)
!6280 = !DILocation(line: 1114, column: 13, scope: !6274)
!6281 = !DILocation(line: 1114, column: 20, scope: !6274)
!6282 = !DILocation(line: 1114, column: 3, scope: !6274)
!6283 = distinct !DISubprogram(name: "VEC_access_p_heap_alloc", scope: !3, file: !3, line: 229, type: !6284, scopeLine: 229, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6284 = !DISubroutineType(types: !6285)
!6285 = !{!3036, !1693}
!6286 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6283, file: !3, line: 229, type: !1693)
!6287 = !DILocation(line: 229, column: 1, scope: !6283)
!6288 = distinct !DISubprogram(name: "VEC_access_p_heap_safe_push", scope: !3, file: !3, line: 229, type: !6289, scopeLine: 229, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6289 = !DISubroutineType(types: !6290)
!6290 = !{!6291, !3051, !3048}
!6291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3048, size: 64)
!6292 = !DILocalVariable(name: "vec_", arg: 1, scope: !6288, file: !3, line: 229, type: !3051)
!6293 = !DILocation(line: 229, column: 1, scope: !6288)
!6294 = !DILocalVariable(name: "obj_", arg: 2, scope: !6288, file: !3, line: 229, type: !3048)
!6295 = distinct !DISubprogram(name: "VEC_access_p_heap_reserve", scope: !3, file: !3, line: 229, type: !6296, scopeLine: 229, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6296 = !DISubroutineType(types: !6297)
!6297 = !{!1693, !3051, !1693}
!6298 = !DILocalVariable(name: "vec_", arg: 1, scope: !6295, file: !3, line: 229, type: !3051)
!6299 = !DILocation(line: 229, column: 1, scope: !6295)
!6300 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6295, file: !3, line: 229, type: !1693)
!6301 = !DILocalVariable(name: "extend", scope: !6295, file: !3, line: 229, type: !1693)
!6302 = !DILocation(line: 229, column: 1, scope: !6303)
!6303 = distinct !DILexicalBlock(scope: !6295, file: !3, line: 229, column: 1)
!6304 = distinct !DISubprogram(name: "VEC_access_p_base_quick_push", scope: !3, file: !3, line: 228, type: !6305, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6305 = !DISubroutineType(types: !6306)
!6306 = !{!6291, !6307, !3048}
!6307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3041, size: 64)
!6308 = !DILocalVariable(name: "vec_", arg: 1, scope: !6304, file: !3, line: 228, type: !6307)
!6309 = !DILocation(line: 228, column: 1, scope: !6304)
!6310 = !DILocalVariable(name: "obj_", arg: 2, scope: !6304, file: !3, line: 228, type: !3048)
!6311 = !DILocalVariable(name: "slot_", scope: !6304, file: !3, line: 228, type: !6291)
!6312 = distinct !DISubprogram(name: "VEC_access_p_base_space", scope: !3, file: !3, line: 228, type: !6313, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6313 = !DISubroutineType(types: !6314)
!6314 = !{!1693, !6307, !1693}
!6315 = !DILocalVariable(name: "vec_", arg: 1, scope: !6312, file: !3, line: 228, type: !6307)
!6316 = !DILocation(line: 228, column: 1, scope: !6312)
!6317 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6312, file: !3, line: 228, type: !1693)
!6318 = distinct !DISubprogram(name: "gimple_assign_lhs_ptr", scope: !1458, file: !1458, line: 1704, type: !5522, scopeLine: 1705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6319 = !DILocalVariable(name: "gs", arg: 1, scope: !6318, file: !1458, line: 1704, type: !5514)
!6320 = !DILocation(line: 1704, column: 37, scope: !6318)
!6321 = !DILocation(line: 1707, column: 25, scope: !6318)
!6322 = !DILocation(line: 1707, column: 10, scope: !6318)
!6323 = !DILocation(line: 1707, column: 3, scope: !6318)
!6324 = distinct !DISubprogram(name: "gimple_assign_rhs1_ptr", scope: !1458, file: !1458, line: 1738, type: !5522, scopeLine: 1739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6325 = !DILocalVariable(name: "gs", arg: 1, scope: !6324, file: !1458, line: 1738, type: !5514)
!6326 = !DILocation(line: 1738, column: 38, scope: !6324)
!6327 = !DILocation(line: 1741, column: 25, scope: !6324)
!6328 = !DILocation(line: 1741, column: 10, scope: !6324)
!6329 = !DILocation(line: 1741, column: 3, scope: !6324)
!6330 = distinct !DISubprogram(name: "gimple_has_volatile_ops", scope: !1458, file: !1458, line: 1477, type: !5748, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6331 = !DILocalVariable(name: "stmt", arg: 1, scope: !6330, file: !1458, line: 1477, type: !5514)
!6332 = !DILocation(line: 1477, column: 39, scope: !6330)
!6333 = !DILocation(line: 1479, column: 27, scope: !6334)
!6334 = distinct !DILexicalBlock(scope: !6330, file: !1458, line: 1479, column: 7)
!6335 = !DILocation(line: 1479, column: 7, scope: !6334)
!6336 = !DILocation(line: 1479, column: 7, scope: !6330)
!6337 = !DILocation(line: 1480, column: 12, scope: !6334)
!6338 = !DILocation(line: 1480, column: 18, scope: !6334)
!6339 = !DILocation(line: 1480, column: 25, scope: !6334)
!6340 = !DILocation(line: 1480, column: 5, scope: !6334)
!6341 = !DILocation(line: 1482, column: 5, scope: !6334)
!6342 = !DILocation(line: 1483, column: 1, scope: !6330)
!6343 = distinct !DISubprogram(name: "add_link_to_rhs", scope: !3, file: !3, line: 483, type: !6344, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6344 = !DISubroutineType(types: !6345)
!6345 = !{null, !2999, !3013}
!6346 = !DILocalVariable(name: "racc", arg: 1, scope: !6343, file: !3, line: 483, type: !2999)
!6347 = !DILocation(line: 483, column: 33, scope: !6343)
!6348 = !DILocalVariable(name: "link", arg: 2, scope: !6343, file: !3, line: 483, type: !3013)
!6349 = !DILocation(line: 483, column: 59, scope: !6343)
!6350 = !DILocation(line: 485, column: 3, scope: !6343)
!6351 = !DILocation(line: 487, column: 8, scope: !6352)
!6352 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 487, column: 7)
!6353 = !DILocation(line: 487, column: 14, scope: !6352)
!6354 = !DILocation(line: 487, column: 7, scope: !6343)
!6355 = !DILocation(line: 489, column: 7, scope: !6356)
!6356 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 488, column: 5)
!6357 = !DILocation(line: 490, column: 26, scope: !6356)
!6358 = !DILocation(line: 490, column: 7, scope: !6356)
!6359 = !DILocation(line: 490, column: 13, scope: !6356)
!6360 = !DILocation(line: 490, column: 24, scope: !6356)
!6361 = !DILocation(line: 491, column: 5, scope: !6356)
!6362 = !DILocation(line: 493, column: 29, scope: !6352)
!6363 = !DILocation(line: 493, column: 5, scope: !6352)
!6364 = !DILocation(line: 493, column: 11, scope: !6352)
!6365 = !DILocation(line: 493, column: 22, scope: !6352)
!6366 = !DILocation(line: 493, column: 27, scope: !6352)
!6367 = !DILocation(line: 495, column: 21, scope: !6343)
!6368 = !DILocation(line: 495, column: 3, scope: !6343)
!6369 = !DILocation(line: 495, column: 9, scope: !6343)
!6370 = !DILocation(line: 495, column: 19, scope: !6343)
!6371 = !DILocation(line: 496, column: 3, scope: !6343)
!6372 = !DILocation(line: 496, column: 9, scope: !6343)
!6373 = !DILocation(line: 496, column: 14, scope: !6343)
!6374 = !DILocation(line: 497, column: 1, scope: !6343)
!6375 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !1458, file: !1458, line: 1283, type: !5748, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6376 = !DILocalVariable(name: "g", arg: 1, scope: !6375, file: !1458, line: 1283, type: !5514)
!6377 = !DILocation(line: 1283, column: 34, scope: !6375)
!6378 = !DILocation(line: 1285, column: 23, scope: !6375)
!6379 = !DILocation(line: 1285, column: 10, scope: !6375)
!6380 = !DILocation(line: 1285, column: 26, scope: !6375)
!6381 = !DILocation(line: 1285, column: 43, scope: !6375)
!6382 = !DILocation(line: 1285, column: 59, scope: !6375)
!6383 = !DILocation(line: 1285, column: 46, scope: !6375)
!6384 = !DILocation(line: 1285, column: 62, scope: !6375)
!6385 = !DILocation(line: 0, scope: !6375)
!6386 = !DILocation(line: 1285, column: 3, scope: !6375)
!6387 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1927, file: !1927, line: 224, type: !6388, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6388 = !DISubroutineType(types: !6389)
!6389 = !{null, !6390, !6391, !7, !6394}
!6390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4424, size: 64)
!6391 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !1697, line: 48, baseType: !6392)
!6392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6393, size: 64)
!6393 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1926)
!6394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!6395 = !DILocalVariable(name: "bi", arg: 1, scope: !6387, file: !1927, line: 224, type: !6390)
!6396 = !DILocation(line: 224, column: 37, scope: !6387)
!6397 = !DILocalVariable(name: "map", arg: 2, scope: !6387, file: !1927, line: 224, type: !6391)
!6398 = !DILocation(line: 224, column: 54, scope: !6387)
!6399 = !DILocalVariable(name: "start_bit", arg: 3, scope: !6387, file: !1927, line: 225, type: !7)
!6400 = !DILocation(line: 225, column: 15, scope: !6387)
!6401 = !DILocalVariable(name: "bit_no", arg: 4, scope: !6387, file: !1927, line: 225, type: !6394)
!6402 = !DILocation(line: 225, column: 36, scope: !6387)
!6403 = !DILocation(line: 227, column: 14, scope: !6387)
!6404 = !DILocation(line: 227, column: 19, scope: !6387)
!6405 = !DILocation(line: 227, column: 3, scope: !6387)
!6406 = !DILocation(line: 227, column: 7, scope: !6387)
!6407 = !DILocation(line: 227, column: 12, scope: !6387)
!6408 = !DILocation(line: 228, column: 3, scope: !6387)
!6409 = !DILocation(line: 228, column: 7, scope: !6387)
!6410 = !DILocation(line: 228, column: 12, scope: !6387)
!6411 = !DILocation(line: 231, column: 3, scope: !6387)
!6412 = !DILocation(line: 233, column: 12, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6414, file: !1927, line: 233, column: 11)
!6414 = distinct !DILexicalBlock(scope: !6387, file: !1927, line: 232, column: 5)
!6415 = !DILocation(line: 233, column: 16, scope: !6413)
!6416 = !DILocation(line: 233, column: 11, scope: !6414)
!6417 = !DILocation(line: 235, column: 4, scope: !6418)
!6418 = distinct !DILexicalBlock(scope: !6413, file: !1927, line: 234, column: 2)
!6419 = !DILocation(line: 235, column: 8, scope: !6418)
!6420 = !DILocation(line: 235, column: 13, scope: !6418)
!6421 = !DILocation(line: 236, column: 4, scope: !6418)
!6422 = !DILocation(line: 239, column: 11, scope: !6423)
!6423 = distinct !DILexicalBlock(scope: !6414, file: !1927, line: 239, column: 11)
!6424 = !DILocation(line: 239, column: 15, scope: !6423)
!6425 = !DILocation(line: 239, column: 21, scope: !6423)
!6426 = !DILocation(line: 239, column: 29, scope: !6423)
!6427 = !DILocation(line: 239, column: 39, scope: !6423)
!6428 = !DILocation(line: 239, column: 26, scope: !6423)
!6429 = !DILocation(line: 239, column: 11, scope: !6414)
!6430 = !DILocation(line: 240, column: 2, scope: !6423)
!6431 = !DILocation(line: 241, column: 18, scope: !6414)
!6432 = !DILocation(line: 241, column: 22, scope: !6414)
!6433 = !DILocation(line: 241, column: 28, scope: !6414)
!6434 = !DILocation(line: 241, column: 7, scope: !6414)
!6435 = !DILocation(line: 241, column: 11, scope: !6414)
!6436 = !DILocation(line: 241, column: 16, scope: !6414)
!6437 = distinct !{!6437, !6411, !6438}
!6438 = !DILocation(line: 242, column: 5, scope: !6387)
!6439 = !DILocation(line: 245, column: 7, scope: !6440)
!6440 = distinct !DILexicalBlock(scope: !6387, file: !1927, line: 245, column: 7)
!6441 = !DILocation(line: 245, column: 11, scope: !6440)
!6442 = !DILocation(line: 245, column: 17, scope: !6440)
!6443 = !DILocation(line: 245, column: 25, scope: !6440)
!6444 = !DILocation(line: 245, column: 35, scope: !6440)
!6445 = !DILocation(line: 245, column: 22, scope: !6440)
!6446 = !DILocation(line: 245, column: 7, scope: !6387)
!6447 = !DILocation(line: 246, column: 17, scope: !6440)
!6448 = !DILocation(line: 246, column: 21, scope: !6440)
!6449 = !DILocation(line: 246, column: 27, scope: !6440)
!6450 = !DILocation(line: 246, column: 32, scope: !6440)
!6451 = !DILocation(line: 246, column: 15, scope: !6440)
!6452 = !DILocation(line: 246, column: 5, scope: !6440)
!6453 = !DILocation(line: 249, column: 17, scope: !6387)
!6454 = !DILocation(line: 249, column: 27, scope: !6387)
!6455 = !DILocation(line: 249, column: 46, scope: !6387)
!6456 = !DILocation(line: 249, column: 3, scope: !6387)
!6457 = !DILocation(line: 249, column: 7, scope: !6387)
!6458 = !DILocation(line: 249, column: 15, scope: !6387)
!6459 = !DILocation(line: 250, column: 14, scope: !6387)
!6460 = !DILocation(line: 250, column: 18, scope: !6387)
!6461 = !DILocation(line: 250, column: 24, scope: !6387)
!6462 = !DILocation(line: 250, column: 29, scope: !6387)
!6463 = !DILocation(line: 250, column: 33, scope: !6387)
!6464 = !DILocation(line: 250, column: 3, scope: !6387)
!6465 = !DILocation(line: 250, column: 7, scope: !6387)
!6466 = !DILocation(line: 250, column: 12, scope: !6387)
!6467 = !DILocation(line: 251, column: 16, scope: !6387)
!6468 = !DILocation(line: 251, column: 26, scope: !6387)
!6469 = !DILocation(line: 251, column: 3, scope: !6387)
!6470 = !DILocation(line: 251, column: 7, scope: !6387)
!6471 = !DILocation(line: 251, column: 12, scope: !6387)
!6472 = !DILocation(line: 257, column: 17, scope: !6387)
!6473 = !DILocation(line: 257, column: 21, scope: !6387)
!6474 = !DILocation(line: 257, column: 16, scope: !6387)
!6475 = !DILocation(line: 257, column: 13, scope: !6387)
!6476 = !DILocation(line: 259, column: 13, scope: !6387)
!6477 = !DILocation(line: 259, column: 4, scope: !6387)
!6478 = !DILocation(line: 259, column: 11, scope: !6387)
!6479 = !DILocation(line: 260, column: 1, scope: !6387)
!6480 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1927, file: !1927, line: 393, type: !6481, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6481 = !DISubroutineType(types: !6482)
!6482 = !{!1815, !6390, !6394}
!6483 = !DILocalVariable(name: "bi", arg: 1, scope: !6480, file: !1927, line: 393, type: !6390)
!6484 = !DILocation(line: 393, column: 32, scope: !6480)
!6485 = !DILocalVariable(name: "bit_no", arg: 2, scope: !6480, file: !1927, line: 393, type: !6394)
!6486 = !DILocation(line: 393, column: 46, scope: !6480)
!6487 = !DILocation(line: 396, column: 7, scope: !6488)
!6488 = distinct !DILexicalBlock(scope: !6480, file: !1927, line: 396, column: 7)
!6489 = !DILocation(line: 396, column: 11, scope: !6488)
!6490 = !DILocation(line: 396, column: 7, scope: !6480)
!6491 = !DILocation(line: 397, column: 5, scope: !6488)
!6492 = !DILabel(scope: !6493, name: "next_bit", file: !1927, line: 398)
!6493 = distinct !DILexicalBlock(scope: !6488, file: !1927, line: 397, column: 5)
!6494 = !DILocation(line: 398, column: 5, scope: !6493)
!6495 = !DILocation(line: 399, column: 7, scope: !6493)
!6496 = !DILocation(line: 399, column: 16, scope: !6493)
!6497 = !DILocation(line: 399, column: 20, scope: !6493)
!6498 = !DILocation(line: 399, column: 25, scope: !6493)
!6499 = !DILocation(line: 399, column: 14, scope: !6493)
!6500 = !DILocation(line: 401, column: 4, scope: !6501)
!6501 = distinct !DILexicalBlock(scope: !6493, file: !1927, line: 400, column: 2)
!6502 = !DILocation(line: 401, column: 8, scope: !6501)
!6503 = !DILocation(line: 401, column: 13, scope: !6501)
!6504 = !DILocation(line: 402, column: 5, scope: !6501)
!6505 = !DILocation(line: 402, column: 12, scope: !6501)
!6506 = distinct !{!6506, !6495, !6507}
!6507 = !DILocation(line: 403, column: 2, scope: !6493)
!6508 = !DILocation(line: 404, column: 7, scope: !6493)
!6509 = !DILocation(line: 410, column: 16, scope: !6480)
!6510 = !DILocation(line: 410, column: 15, scope: !6480)
!6511 = !DILocation(line: 410, column: 23, scope: !6480)
!6512 = !DILocation(line: 410, column: 42, scope: !6480)
!6513 = !DILocation(line: 411, column: 7, scope: !6480)
!6514 = !DILocation(line: 411, column: 26, scope: !6480)
!6515 = !DILocation(line: 410, column: 4, scope: !6480)
!6516 = !DILocation(line: 410, column: 11, scope: !6480)
!6517 = !DILocation(line: 412, column: 3, scope: !6480)
!6518 = !DILocation(line: 412, column: 7, scope: !6480)
!6519 = !DILocation(line: 412, column: 14, scope: !6480)
!6520 = !DILocation(line: 414, column: 3, scope: !6480)
!6521 = !DILocation(line: 417, column: 7, scope: !6522)
!6522 = distinct !DILexicalBlock(scope: !6480, file: !1927, line: 415, column: 5)
!6523 = !DILocation(line: 417, column: 14, scope: !6522)
!6524 = !DILocation(line: 417, column: 18, scope: !6522)
!6525 = !DILocation(line: 417, column: 26, scope: !6522)
!6526 = !DILocation(line: 419, column: 15, scope: !6527)
!6527 = distinct !DILexicalBlock(scope: !6522, file: !1927, line: 418, column: 2)
!6528 = !DILocation(line: 419, column: 19, scope: !6527)
!6529 = !DILocation(line: 419, column: 25, scope: !6527)
!6530 = !DILocation(line: 419, column: 30, scope: !6527)
!6531 = !DILocation(line: 419, column: 34, scope: !6527)
!6532 = !DILocation(line: 419, column: 4, scope: !6527)
!6533 = !DILocation(line: 419, column: 8, scope: !6527)
!6534 = !DILocation(line: 419, column: 13, scope: !6527)
!6535 = !DILocation(line: 420, column: 8, scope: !6536)
!6536 = distinct !DILexicalBlock(scope: !6527, file: !1927, line: 420, column: 8)
!6537 = !DILocation(line: 420, column: 12, scope: !6536)
!6538 = !DILocation(line: 420, column: 8, scope: !6527)
!6539 = !DILocation(line: 421, column: 6, scope: !6536)
!6540 = !DILocation(line: 422, column: 5, scope: !6527)
!6541 = !DILocation(line: 422, column: 12, scope: !6527)
!6542 = !DILocation(line: 423, column: 4, scope: !6527)
!6543 = !DILocation(line: 423, column: 8, scope: !6527)
!6544 = !DILocation(line: 423, column: 15, scope: !6527)
!6545 = distinct !{!6545, !6521, !6546}
!6546 = !DILocation(line: 424, column: 2, scope: !6522)
!6547 = !DILocation(line: 427, column: 18, scope: !6522)
!6548 = !DILocation(line: 427, column: 22, scope: !6522)
!6549 = !DILocation(line: 427, column: 28, scope: !6522)
!6550 = !DILocation(line: 427, column: 7, scope: !6522)
!6551 = !DILocation(line: 427, column: 11, scope: !6522)
!6552 = !DILocation(line: 427, column: 16, scope: !6522)
!6553 = !DILocation(line: 428, column: 12, scope: !6554)
!6554 = distinct !DILexicalBlock(scope: !6522, file: !1927, line: 428, column: 11)
!6555 = !DILocation(line: 428, column: 16, scope: !6554)
!6556 = !DILocation(line: 428, column: 11, scope: !6522)
!6557 = !DILocation(line: 429, column: 2, scope: !6554)
!6558 = !DILocation(line: 430, column: 17, scope: !6522)
!6559 = !DILocation(line: 430, column: 21, scope: !6522)
!6560 = !DILocation(line: 430, column: 27, scope: !6522)
!6561 = !DILocation(line: 430, column: 32, scope: !6522)
!6562 = !DILocation(line: 430, column: 8, scope: !6522)
!6563 = !DILocation(line: 430, column: 15, scope: !6522)
!6564 = !DILocation(line: 431, column: 7, scope: !6522)
!6565 = !DILocation(line: 431, column: 11, scope: !6522)
!6566 = !DILocation(line: 431, column: 19, scope: !6522)
!6567 = distinct !{!6567, !6520, !6568}
!6568 = !DILocation(line: 432, column: 5, scope: !6480)
!6569 = !DILocation(line: 433, column: 1, scope: !6480)
!6570 = distinct !DISubprogram(name: "type_consists_of_records_p", scope: !3, file: !3, line: 810, type: !5251, scopeLine: 811, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6571 = !DILocalVariable(name: "type", arg: 1, scope: !6570, file: !3, line: 810, type: !1696)
!6572 = !DILocation(line: 810, column: 34, scope: !6570)
!6573 = !DILocalVariable(name: "fld", scope: !6570, file: !3, line: 812, type: !1696)
!6574 = !DILocation(line: 812, column: 8, scope: !6570)
!6575 = !DILocalVariable(name: "last_fld_has_zero_size", scope: !6570, file: !3, line: 813, type: !1815)
!6576 = !DILocation(line: 813, column: 8, scope: !6570)
!6577 = !DILocation(line: 815, column: 7, scope: !6578)
!6578 = distinct !DILexicalBlock(scope: !6570, file: !3, line: 815, column: 7)
!6579 = !DILocation(line: 815, column: 24, scope: !6578)
!6580 = !DILocation(line: 815, column: 7, scope: !6570)
!6581 = !DILocation(line: 816, column: 5, scope: !6578)
!6582 = !DILocation(line: 818, column: 14, scope: !6583)
!6583 = distinct !DILexicalBlock(scope: !6570, file: !3, line: 818, column: 3)
!6584 = !DILocation(line: 818, column: 12, scope: !6583)
!6585 = !DILocation(line: 818, column: 8, scope: !6583)
!6586 = !DILocation(line: 818, column: 34, scope: !6587)
!6587 = distinct !DILexicalBlock(scope: !6583, file: !3, line: 818, column: 3)
!6588 = !DILocation(line: 818, column: 3, scope: !6583)
!6589 = !DILocation(line: 819, column: 9, scope: !6590)
!6590 = distinct !DILexicalBlock(scope: !6587, file: !3, line: 819, column: 9)
!6591 = !DILocation(line: 819, column: 25, scope: !6590)
!6592 = !DILocation(line: 819, column: 9, scope: !6587)
!6593 = !DILocalVariable(name: "ft", scope: !6594, file: !3, line: 821, type: !1696)
!6594 = distinct !DILexicalBlock(scope: !6590, file: !3, line: 820, column: 7)
!6595 = !DILocation(line: 821, column: 7, scope: !6594)
!6596 = !DILocation(line: 821, column: 12, scope: !6594)
!6597 = !DILocation(line: 823, column: 27, scope: !6598)
!6598 = distinct !DILexicalBlock(scope: !6594, file: !3, line: 823, column: 6)
!6599 = !DILocation(line: 823, column: 7, scope: !6598)
!6600 = !DILocation(line: 824, column: 6, scope: !6598)
!6601 = !DILocation(line: 824, column: 38, scope: !6598)
!6602 = !DILocation(line: 824, column: 10, scope: !6598)
!6603 = !DILocation(line: 823, column: 6, scope: !6594)
!6604 = !DILocation(line: 825, column: 4, scope: !6598)
!6605 = !DILocation(line: 827, column: 41, scope: !6594)
!6606 = !DILocation(line: 827, column: 27, scope: !6594)
!6607 = !DILocation(line: 827, column: 61, scope: !6594)
!6608 = !DILocation(line: 827, column: 25, scope: !6594)
!6609 = !DILocation(line: 828, column: 7, scope: !6594)
!6610 = !DILocation(line: 819, column: 28, scope: !6590)
!6611 = !DILocation(line: 818, column: 45, scope: !6587)
!6612 = !DILocation(line: 818, column: 43, scope: !6587)
!6613 = !DILocation(line: 818, column: 3, scope: !6587)
!6614 = distinct !{!6614, !6588, !6615}
!6615 = !DILocation(line: 828, column: 7, scope: !6583)
!6616 = !DILocation(line: 830, column: 7, scope: !6617)
!6617 = distinct !DILexicalBlock(scope: !6570, file: !3, line: 830, column: 7)
!6618 = !DILocation(line: 830, column: 7, scope: !6570)
!6619 = !DILocation(line: 831, column: 5, scope: !6617)
!6620 = !DILocation(line: 833, column: 3, scope: !6570)
!6621 = !DILocation(line: 834, column: 1, scope: !6570)
!6622 = distinct !DISubprogram(name: "completely_scalarize_record", scope: !3, file: !3, line: 842, type: !6623, scopeLine: 843, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6623 = !DISubroutineType(types: !6624)
!6624 = !{null, !1696, !1696, !1752}
!6625 = !DILocalVariable(name: "base", arg: 1, scope: !6622, file: !3, line: 842, type: !1696)
!6626 = !DILocation(line: 842, column: 35, scope: !6622)
!6627 = !DILocalVariable(name: "decl", arg: 2, scope: !6622, file: !3, line: 842, type: !1696)
!6628 = !DILocation(line: 842, column: 46, scope: !6622)
!6629 = !DILocalVariable(name: "offset", arg: 3, scope: !6622, file: !3, line: 842, type: !1752)
!6630 = !DILocation(line: 842, column: 66, scope: !6622)
!6631 = !DILocalVariable(name: "fld", scope: !6622, file: !3, line: 844, type: !1696)
!6632 = !DILocation(line: 844, column: 8, scope: !6622)
!6633 = !DILocalVariable(name: "decl_type", scope: !6622, file: !3, line: 844, type: !1696)
!6634 = !DILocation(line: 844, column: 13, scope: !6622)
!6635 = !DILocation(line: 844, column: 25, scope: !6622)
!6636 = !DILocation(line: 846, column: 14, scope: !6637)
!6637 = distinct !DILexicalBlock(scope: !6622, file: !3, line: 846, column: 3)
!6638 = !DILocation(line: 846, column: 12, scope: !6637)
!6639 = !DILocation(line: 846, column: 8, scope: !6637)
!6640 = !DILocation(line: 846, column: 39, scope: !6641)
!6641 = distinct !DILexicalBlock(scope: !6637, file: !3, line: 846, column: 3)
!6642 = !DILocation(line: 846, column: 3, scope: !6637)
!6643 = !DILocation(line: 847, column: 9, scope: !6644)
!6644 = distinct !DILexicalBlock(scope: !6641, file: !3, line: 847, column: 9)
!6645 = !DILocation(line: 847, column: 25, scope: !6644)
!6646 = !DILocation(line: 847, column: 9, scope: !6641)
!6647 = !DILocalVariable(name: "pos", scope: !6648, file: !3, line: 849, type: !1752)
!6648 = distinct !DILexicalBlock(scope: !6644, file: !3, line: 848, column: 7)
!6649 = !DILocation(line: 849, column: 16, scope: !6648)
!6650 = !DILocation(line: 849, column: 22, scope: !6648)
!6651 = !DILocation(line: 849, column: 49, scope: !6648)
!6652 = !DILocation(line: 849, column: 31, scope: !6648)
!6653 = !DILocation(line: 849, column: 29, scope: !6648)
!6654 = !DILocalVariable(name: "ft", scope: !6648, file: !3, line: 850, type: !1696)
!6655 = !DILocation(line: 850, column: 7, scope: !6648)
!6656 = !DILocation(line: 850, column: 12, scope: !6648)
!6657 = !DILocation(line: 852, column: 26, scope: !6658)
!6658 = distinct !DILexicalBlock(scope: !6648, file: !3, line: 852, column: 6)
!6659 = !DILocation(line: 852, column: 6, scope: !6658)
!6660 = !DILocation(line: 852, column: 6, scope: !6648)
!6661 = !DILocalVariable(name: "access", scope: !6662, file: !3, line: 854, type: !2999)
!6662 = distinct !DILexicalBlock(scope: !6658, file: !3, line: 853, column: 4)
!6663 = !DILocation(line: 854, column: 21, scope: !6662)
!6664 = !DILocalVariable(name: "size", scope: !6662, file: !3, line: 855, type: !1752)
!6665 = !DILocation(line: 855, column: 20, scope: !6662)
!6666 = !DILocalVariable(name: "expr", scope: !6662, file: !3, line: 856, type: !1696)
!6667 = !DILocation(line: 856, column: 11, scope: !6662)
!6668 = !DILocalVariable(name: "ok", scope: !6662, file: !3, line: 857, type: !1815)
!6669 = !DILocation(line: 857, column: 11, scope: !6662)
!6670 = !DILocation(line: 859, column: 27, scope: !6662)
!6671 = !DILocation(line: 859, column: 13, scope: !6662)
!6672 = !DILocation(line: 859, column: 11, scope: !6662)
!6673 = !DILocation(line: 860, column: 13, scope: !6662)
!6674 = !DILocation(line: 860, column: 11, scope: !6662)
!6675 = !DILocation(line: 861, column: 40, scope: !6662)
!6676 = !DILocation(line: 861, column: 58, scope: !6662)
!6677 = !DILocation(line: 862, column: 12, scope: !6662)
!6678 = !DILocation(line: 861, column: 11, scope: !6662)
!6679 = !DILocation(line: 861, column: 9, scope: !6662)
!6680 = !DILocation(line: 863, column: 6, scope: !6662)
!6681 = !DILocation(line: 865, column: 32, scope: !6662)
!6682 = !DILocation(line: 865, column: 38, scope: !6662)
!6683 = !DILocation(line: 865, column: 43, scope: !6662)
!6684 = !DILocation(line: 865, column: 15, scope: !6662)
!6685 = !DILocation(line: 865, column: 13, scope: !6662)
!6686 = !DILocation(line: 866, column: 21, scope: !6662)
!6687 = !DILocation(line: 866, column: 6, scope: !6662)
!6688 = !DILocation(line: 866, column: 14, scope: !6662)
!6689 = !DILocation(line: 866, column: 19, scope: !6662)
!6690 = !DILocation(line: 867, column: 21, scope: !6662)
!6691 = !DILocation(line: 867, column: 6, scope: !6662)
!6692 = !DILocation(line: 867, column: 14, scope: !6662)
!6693 = !DILocation(line: 867, column: 19, scope: !6662)
!6694 = !DILocation(line: 868, column: 6, scope: !6662)
!6695 = !DILocation(line: 868, column: 14, scope: !6662)
!6696 = !DILocation(line: 868, column: 34, scope: !6662)
!6697 = !DILocation(line: 870, column: 4, scope: !6662)
!6698 = !DILocation(line: 872, column: 33, scope: !6658)
!6699 = !DILocation(line: 872, column: 39, scope: !6658)
!6700 = !DILocation(line: 872, column: 44, scope: !6658)
!6701 = !DILocation(line: 872, column: 4, scope: !6658)
!6702 = !DILocation(line: 873, column: 7, scope: !6648)
!6703 = !DILocation(line: 847, column: 28, scope: !6644)
!6704 = !DILocation(line: 846, column: 50, scope: !6641)
!6705 = !DILocation(line: 846, column: 48, scope: !6641)
!6706 = !DILocation(line: 846, column: 3, scope: !6641)
!6707 = distinct !{!6707, !6642, !6708}
!6708 = !DILocation(line: 873, column: 7, scope: !6637)
!6709 = !DILocation(line: 874, column: 1, scope: !6622)
!6710 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1927, file: !1927, line: 382, type: !6711, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6711 = !DISubroutineType(types: !6712)
!6712 = !{null, !6390, !6394}
!6713 = !DILocalVariable(name: "bi", arg: 1, scope: !6710, file: !1927, line: 382, type: !6390)
!6714 = !DILocation(line: 382, column: 33, scope: !6710)
!6715 = !DILocalVariable(name: "bit_no", arg: 2, scope: !6710, file: !1927, line: 382, type: !6394)
!6716 = !DILocation(line: 382, column: 47, scope: !6710)
!6717 = !DILocation(line: 384, column: 3, scope: !6710)
!6718 = !DILocation(line: 384, column: 7, scope: !6710)
!6719 = !DILocation(line: 384, column: 12, scope: !6710)
!6720 = !DILocation(line: 385, column: 4, scope: !6710)
!6721 = !DILocation(line: 385, column: 11, scope: !6710)
!6722 = !DILocation(line: 386, column: 1, scope: !6710)
!6723 = distinct !DISubprogram(name: "sort_and_splice_var_accesses", scope: !3, file: !3, line: 1558, type: !6724, scopeLine: 1559, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6724 = !DISubroutineType(types: !6725)
!6725 = !{!2999, !1696}
!6726 = !DILocalVariable(name: "var", arg: 1, scope: !6723, file: !3, line: 1558, type: !1696)
!6727 = !DILocation(line: 1558, column: 36, scope: !6723)
!6728 = !DILocalVariable(name: "i", scope: !6723, file: !3, line: 1560, type: !1693)
!6729 = !DILocation(line: 1560, column: 7, scope: !6723)
!6730 = !DILocalVariable(name: "j", scope: !6723, file: !3, line: 1560, type: !1693)
!6731 = !DILocation(line: 1560, column: 10, scope: !6723)
!6732 = !DILocalVariable(name: "access_count", scope: !6723, file: !3, line: 1560, type: !1693)
!6733 = !DILocation(line: 1560, column: 13, scope: !6723)
!6734 = !DILocalVariable(name: "res", scope: !6723, file: !3, line: 1561, type: !2999)
!6735 = !DILocation(line: 1561, column: 18, scope: !6723)
!6736 = !DILocalVariable(name: "prev_acc_ptr", scope: !6723, file: !3, line: 1561, type: !6737)
!6737 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2999, size: 64)
!6738 = !DILocation(line: 1561, column: 25, scope: !6723)
!6739 = !DILocalVariable(name: "access_vec", scope: !6723, file: !3, line: 1562, type: !3036)
!6740 = !DILocation(line: 1562, column: 25, scope: !6723)
!6741 = !DILocalVariable(name: "first", scope: !6723, file: !3, line: 1563, type: !1815)
!6742 = !DILocation(line: 1563, column: 8, scope: !6723)
!6743 = !DILocalVariable(name: "low", scope: !6723, file: !3, line: 1564, type: !1752)
!6744 = !DILocation(line: 1564, column: 17, scope: !6723)
!6745 = !DILocalVariable(name: "high", scope: !6723, file: !3, line: 1564, type: !1752)
!6746 = !DILocation(line: 1564, column: 27, scope: !6723)
!6747 = !DILocation(line: 1566, column: 40, scope: !6723)
!6748 = !DILocation(line: 1566, column: 16, scope: !6723)
!6749 = !DILocation(line: 1566, column: 14, scope: !6723)
!6750 = !DILocation(line: 1567, column: 8, scope: !6751)
!6751 = distinct !DILexicalBlock(scope: !6723, file: !3, line: 1567, column: 7)
!6752 = !DILocation(line: 1567, column: 7, scope: !6723)
!6753 = !DILocation(line: 1568, column: 5, scope: !6751)
!6754 = !DILocation(line: 1569, column: 18, scope: !6723)
!6755 = !DILocation(line: 1569, column: 16, scope: !6723)
!6756 = !DILocation(line: 1573, column: 15, scope: !6723)
!6757 = !DILocation(line: 1573, column: 51, scope: !6723)
!6758 = !DILocation(line: 1573, column: 3, scope: !6723)
!6759 = !DILocation(line: 1580, column: 5, scope: !6723)
!6760 = !DILocation(line: 1581, column: 3, scope: !6723)
!6761 = !DILocation(line: 1581, column: 10, scope: !6723)
!6762 = !DILocation(line: 1581, column: 14, scope: !6723)
!6763 = !DILocation(line: 1581, column: 12, scope: !6723)
!6764 = !DILocalVariable(name: "access", scope: !6765, file: !3, line: 1583, type: !2999)
!6765 = distinct !DILexicalBlock(scope: !6723, file: !3, line: 1582, column: 5)
!6766 = !DILocation(line: 1583, column: 22, scope: !6765)
!6767 = !DILocation(line: 1583, column: 31, scope: !6765)
!6768 = !DILocalVariable(name: "grp_write", scope: !6765, file: !3, line: 1584, type: !1815)
!6769 = !DILocation(line: 1584, column: 12, scope: !6765)
!6770 = !DILocation(line: 1584, column: 24, scope: !6765)
!6771 = !DILocation(line: 1584, column: 32, scope: !6765)
!6772 = !DILocalVariable(name: "grp_read", scope: !6765, file: !3, line: 1585, type: !1815)
!6773 = !DILocation(line: 1585, column: 12, scope: !6765)
!6774 = !DILocation(line: 1585, column: 24, scope: !6765)
!6775 = !DILocation(line: 1585, column: 32, scope: !6765)
!6776 = !DILocation(line: 1585, column: 23, scope: !6765)
!6777 = !DILocalVariable(name: "multiple_reads", scope: !6765, file: !3, line: 1586, type: !1815)
!6778 = !DILocation(line: 1586, column: 12, scope: !6765)
!6779 = !DILocalVariable(name: "total_scalarization", scope: !6765, file: !3, line: 1587, type: !1815)
!6780 = !DILocation(line: 1587, column: 12, scope: !6765)
!6781 = !DILocation(line: 1587, column: 34, scope: !6765)
!6782 = !DILocation(line: 1587, column: 42, scope: !6765)
!6783 = !DILocalVariable(name: "grp_partial_lhs", scope: !6765, file: !3, line: 1588, type: !1815)
!6784 = !DILocation(line: 1588, column: 12, scope: !6765)
!6785 = !DILocation(line: 1588, column: 30, scope: !6765)
!6786 = !DILocation(line: 1588, column: 38, scope: !6765)
!6787 = !DILocalVariable(name: "first_scalar", scope: !6765, file: !3, line: 1589, type: !1815)
!6788 = !DILocation(line: 1589, column: 12, scope: !6765)
!6789 = !DILocation(line: 1589, column: 47, scope: !6765)
!6790 = !DILocation(line: 1589, column: 55, scope: !6765)
!6791 = !DILocation(line: 1589, column: 27, scope: !6765)
!6792 = !DILocalVariable(name: "unscalarizable_region", scope: !6765, file: !3, line: 1590, type: !1815)
!6793 = !DILocation(line: 1590, column: 12, scope: !6765)
!6794 = !DILocation(line: 1590, column: 36, scope: !6765)
!6795 = !DILocation(line: 1590, column: 44, scope: !6765)
!6796 = !DILocation(line: 1592, column: 11, scope: !6797)
!6797 = distinct !DILexicalBlock(scope: !6765, file: !3, line: 1592, column: 11)
!6798 = !DILocation(line: 1592, column: 17, scope: !6797)
!6799 = !DILocation(line: 1592, column: 20, scope: !6797)
!6800 = !DILocation(line: 1592, column: 28, scope: !6797)
!6801 = !DILocation(line: 1592, column: 38, scope: !6797)
!6802 = !DILocation(line: 1592, column: 35, scope: !6797)
!6803 = !DILocation(line: 1592, column: 11, scope: !6765)
!6804 = !DILocation(line: 1594, column: 10, scope: !6805)
!6805 = distinct !DILexicalBlock(scope: !6797, file: !3, line: 1593, column: 2)
!6806 = !DILocation(line: 1595, column: 10, scope: !6805)
!6807 = !DILocation(line: 1595, column: 18, scope: !6805)
!6808 = !DILocation(line: 1595, column: 8, scope: !6805)
!6809 = !DILocation(line: 1596, column: 11, scope: !6805)
!6810 = !DILocation(line: 1596, column: 19, scope: !6805)
!6811 = !DILocation(line: 1596, column: 28, scope: !6805)
!6812 = !DILocation(line: 1596, column: 36, scope: !6805)
!6813 = !DILocation(line: 1596, column: 26, scope: !6805)
!6814 = !DILocation(line: 1596, column: 9, scope: !6805)
!6815 = !DILocation(line: 1597, column: 2, scope: !6805)
!6816 = !DILocation(line: 1598, column: 16, scope: !6817)
!6817 = distinct !DILexicalBlock(scope: !6797, file: !3, line: 1598, column: 16)
!6818 = !DILocation(line: 1598, column: 24, scope: !6817)
!6819 = !DILocation(line: 1598, column: 33, scope: !6817)
!6820 = !DILocation(line: 1598, column: 31, scope: !6817)
!6821 = !DILocation(line: 1598, column: 37, scope: !6817)
!6822 = !DILocation(line: 1598, column: 40, scope: !6817)
!6823 = !DILocation(line: 1598, column: 48, scope: !6817)
!6824 = !DILocation(line: 1598, column: 57, scope: !6817)
!6825 = !DILocation(line: 1598, column: 65, scope: !6817)
!6826 = !DILocation(line: 1598, column: 55, scope: !6817)
!6827 = !DILocation(line: 1598, column: 72, scope: !6817)
!6828 = !DILocation(line: 1598, column: 70, scope: !6817)
!6829 = !DILocation(line: 1598, column: 16, scope: !6797)
!6830 = !DILocation(line: 1599, column: 2, scope: !6817)
!6831 = !DILocation(line: 1601, column: 2, scope: !6817)
!6832 = !DILocation(line: 1604, column: 11, scope: !6765)
!6833 = !DILocation(line: 1604, column: 13, scope: !6765)
!6834 = !DILocation(line: 1604, column: 9, scope: !6765)
!6835 = !DILocation(line: 1605, column: 7, scope: !6765)
!6836 = !DILocation(line: 1605, column: 14, scope: !6765)
!6837 = !DILocation(line: 1605, column: 18, scope: !6765)
!6838 = !DILocation(line: 1605, column: 16, scope: !6765)
!6839 = !DILocalVariable(name: "ac2", scope: !6840, file: !3, line: 1607, type: !2999)
!6840 = distinct !DILexicalBlock(scope: !6765, file: !3, line: 1606, column: 2)
!6841 = !DILocation(line: 1607, column: 19, scope: !6840)
!6842 = !DILocation(line: 1607, column: 25, scope: !6840)
!6843 = !DILocation(line: 1608, column: 8, scope: !6844)
!6844 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 1608, column: 8)
!6845 = !DILocation(line: 1608, column: 13, scope: !6844)
!6846 = !DILocation(line: 1608, column: 23, scope: !6844)
!6847 = !DILocation(line: 1608, column: 31, scope: !6844)
!6848 = !DILocation(line: 1608, column: 20, scope: !6844)
!6849 = !DILocation(line: 1608, column: 38, scope: !6844)
!6850 = !DILocation(line: 1608, column: 41, scope: !6844)
!6851 = !DILocation(line: 1608, column: 46, scope: !6844)
!6852 = !DILocation(line: 1608, column: 54, scope: !6844)
!6853 = !DILocation(line: 1608, column: 62, scope: !6844)
!6854 = !DILocation(line: 1608, column: 51, scope: !6844)
!6855 = !DILocation(line: 1608, column: 8, scope: !6840)
!6856 = !DILocation(line: 1609, column: 6, scope: !6844)
!6857 = !DILocation(line: 1610, column: 8, scope: !6858)
!6858 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 1610, column: 8)
!6859 = !DILocation(line: 1610, column: 13, scope: !6858)
!6860 = !DILocation(line: 1610, column: 8, scope: !6840)
!6861 = !DILocation(line: 1611, column: 16, scope: !6858)
!6862 = !DILocation(line: 1611, column: 6, scope: !6858)
!6863 = !DILocation(line: 1614, column: 12, scope: !6864)
!6864 = distinct !DILexicalBlock(scope: !6865, file: !3, line: 1614, column: 12)
!6865 = distinct !DILexicalBlock(scope: !6858, file: !3, line: 1613, column: 6)
!6866 = !DILocation(line: 1614, column: 12, scope: !6865)
!6867 = !DILocation(line: 1615, column: 18, scope: !6864)
!6868 = !DILocation(line: 1615, column: 3, scope: !6864)
!6869 = !DILocation(line: 1617, column: 12, scope: !6864)
!6870 = !DILocation(line: 1619, column: 23, scope: !6840)
!6871 = !DILocation(line: 1619, column: 28, scope: !6840)
!6872 = !DILocation(line: 1619, column: 20, scope: !6840)
!6873 = !DILocation(line: 1620, column: 29, scope: !6840)
!6874 = !DILocation(line: 1620, column: 34, scope: !6840)
!6875 = !DILocation(line: 1620, column: 26, scope: !6840)
!6876 = !DILocation(line: 1621, column: 27, scope: !6840)
!6877 = !DILocation(line: 1621, column: 32, scope: !6840)
!6878 = !DILocation(line: 1621, column: 24, scope: !6840)
!6879 = !DILocation(line: 1622, column: 24, scope: !6840)
!6880 = !DILocation(line: 1622, column: 32, scope: !6840)
!6881 = !DILocation(line: 1622, column: 4, scope: !6840)
!6882 = !DILocation(line: 1627, column: 4, scope: !6840)
!6883 = !DILocation(line: 1628, column: 32, scope: !6840)
!6884 = !DILocation(line: 1628, column: 4, scope: !6840)
!6885 = !DILocation(line: 1628, column: 9, scope: !6840)
!6886 = !DILocation(line: 1628, column: 30, scope: !6840)
!6887 = !DILocation(line: 1629, column: 5, scope: !6840)
!6888 = distinct !{!6888, !6835, !6889}
!6889 = !DILocation(line: 1630, column: 2, scope: !6765)
!6890 = !DILocation(line: 1632, column: 11, scope: !6765)
!6891 = !DILocation(line: 1632, column: 9, scope: !6765)
!6892 = !DILocation(line: 1634, column: 38, scope: !6765)
!6893 = !DILocation(line: 1634, column: 7, scope: !6765)
!6894 = !DILocation(line: 1634, column: 15, scope: !6765)
!6895 = !DILocation(line: 1634, column: 36, scope: !6765)
!6896 = !DILocation(line: 1635, column: 27, scope: !6765)
!6897 = !DILocation(line: 1635, column: 7, scope: !6765)
!6898 = !DILocation(line: 1635, column: 15, scope: !6765)
!6899 = !DILocation(line: 1635, column: 25, scope: !6765)
!6900 = !DILocation(line: 1636, column: 26, scope: !6765)
!6901 = !DILocation(line: 1636, column: 7, scope: !6765)
!6902 = !DILocation(line: 1636, column: 15, scope: !6765)
!6903 = !DILocation(line: 1636, column: 24, scope: !6765)
!6904 = !DILocation(line: 1637, column: 26, scope: !6765)
!6905 = !DILocation(line: 1637, column: 41, scope: !6765)
!6906 = !DILocation(line: 1637, column: 44, scope: !6765)
!6907 = !DILocation(line: 1637, column: 7, scope: !6765)
!6908 = !DILocation(line: 1637, column: 15, scope: !6765)
!6909 = !DILocation(line: 1637, column: 24, scope: !6765)
!6910 = !DILocation(line: 1638, column: 33, scope: !6765)
!6911 = !DILocation(line: 1638, column: 7, scope: !6765)
!6912 = !DILocation(line: 1638, column: 15, scope: !6765)
!6913 = !DILocation(line: 1638, column: 31, scope: !6765)
!6914 = !DILocation(line: 1639, column: 43, scope: !6765)
!6915 = !DILocation(line: 1639, column: 7, scope: !6765)
!6916 = !DILocation(line: 1639, column: 15, scope: !6765)
!6917 = !DILocation(line: 1639, column: 41, scope: !6765)
!6918 = !DILocation(line: 1640, column: 11, scope: !6919)
!6919 = distinct !DILexicalBlock(scope: !6765, file: !3, line: 1640, column: 11)
!6920 = !DILocation(line: 1640, column: 19, scope: !6919)
!6921 = !DILocation(line: 1640, column: 11, scope: !6765)
!6922 = !DILocation(line: 1641, column: 28, scope: !6919)
!6923 = !DILocation(line: 1641, column: 2, scope: !6919)
!6924 = !DILocation(line: 1643, column: 23, scope: !6765)
!6925 = !DILocation(line: 1643, column: 8, scope: !6765)
!6926 = !DILocation(line: 1643, column: 21, scope: !6765)
!6927 = !DILocation(line: 1644, column: 23, scope: !6765)
!6928 = !DILocation(line: 1644, column: 31, scope: !6765)
!6929 = !DILocation(line: 1644, column: 20, scope: !6765)
!6930 = distinct !{!6930, !6760, !6931}
!6931 = !DILocation(line: 1645, column: 5, scope: !6723)
!6932 = !DILocation(line: 1647, column: 3, scope: !6723)
!6933 = !DILocation(line: 1648, column: 10, scope: !6723)
!6934 = !DILocation(line: 1648, column: 3, scope: !6723)
!6935 = !DILocation(line: 1649, column: 1, scope: !6723)
!6936 = distinct !DISubprogram(name: "build_access_trees", scope: !3, file: !3, line: 1744, type: !6937, scopeLine: 1745, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6937 = !DISubroutineType(types: !6938)
!6938 = !{null, !2999}
!6939 = !DILocalVariable(name: "access", arg: 1, scope: !6936, file: !3, line: 1744, type: !2999)
!6940 = !DILocation(line: 1744, column: 36, scope: !6936)
!6941 = !DILocation(line: 1746, column: 3, scope: !6936)
!6942 = !DILocation(line: 1746, column: 10, scope: !6936)
!6943 = !DILocalVariable(name: "root", scope: !6944, file: !3, line: 1748, type: !2999)
!6944 = distinct !DILexicalBlock(scope: !6936, file: !3, line: 1747, column: 5)
!6945 = !DILocation(line: 1748, column: 22, scope: !6944)
!6946 = !DILocation(line: 1748, column: 29, scope: !6944)
!6947 = !DILocation(line: 1750, column: 7, scope: !6944)
!6948 = !DILocation(line: 1751, column: 24, scope: !6944)
!6949 = !DILocation(line: 1751, column: 7, scope: !6944)
!6950 = !DILocation(line: 1751, column: 13, scope: !6944)
!6951 = !DILocation(line: 1751, column: 22, scope: !6944)
!6952 = distinct !{!6952, !6941, !6953}
!6953 = !DILocation(line: 1752, column: 5, scope: !6936)
!6954 = !DILocation(line: 1753, column: 1, scope: !6936)
!6955 = distinct !DISubprogram(name: "propagate_all_subaccesses", scope: !3, file: !3, line: 2013, type: !3517, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!6956 = !DILocation(line: 2015, column: 3, scope: !6955)
!6957 = !DILocation(line: 2015, column: 10, scope: !6955)
!6958 = !DILocalVariable(name: "racc", scope: !6959, file: !3, line: 2017, type: !2999)
!6959 = distinct !DILexicalBlock(scope: !6955, file: !3, line: 2016, column: 5)
!6960 = !DILocation(line: 2017, column: 22, scope: !6959)
!6961 = !DILocation(line: 2017, column: 29, scope: !6959)
!6962 = !DILocalVariable(name: "link", scope: !6959, file: !3, line: 2018, type: !3013)
!6963 = !DILocation(line: 2018, column: 27, scope: !6959)
!6964 = !DILocation(line: 2020, column: 7, scope: !6959)
!6965 = !DILocation(line: 2022, column: 19, scope: !6966)
!6966 = distinct !DILexicalBlock(scope: !6959, file: !3, line: 2022, column: 7)
!6967 = !DILocation(line: 2022, column: 25, scope: !6966)
!6968 = !DILocation(line: 2022, column: 17, scope: !6966)
!6969 = !DILocation(line: 2022, column: 12, scope: !6966)
!6970 = !DILocation(line: 2022, column: 37, scope: !6971)
!6971 = distinct !DILexicalBlock(scope: !6966, file: !3, line: 2022, column: 7)
!6972 = !DILocation(line: 2022, column: 7, scope: !6966)
!6973 = !DILocalVariable(name: "lacc", scope: !6974, file: !3, line: 2024, type: !2999)
!6974 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 2023, column: 2)
!6975 = !DILocation(line: 2024, column: 19, scope: !6974)
!6976 = !DILocation(line: 2024, column: 26, scope: !6974)
!6977 = !DILocation(line: 2024, column: 32, scope: !6974)
!6978 = !DILocation(line: 2026, column: 23, scope: !6979)
!6979 = distinct !DILexicalBlock(scope: !6974, file: !3, line: 2026, column: 8)
!6980 = !DILocation(line: 2026, column: 41, scope: !6979)
!6981 = !DILocation(line: 2026, column: 9, scope: !6979)
!6982 = !DILocation(line: 2026, column: 8, scope: !6974)
!6983 = !DILocation(line: 2027, column: 6, scope: !6979)
!6984 = !DILocation(line: 2028, column: 11, scope: !6974)
!6985 = !DILocation(line: 2028, column: 17, scope: !6974)
!6986 = !DILocation(line: 2028, column: 9, scope: !6974)
!6987 = !DILocation(line: 2029, column: 43, scope: !6988)
!6988 = distinct !DILexicalBlock(scope: !6974, file: !3, line: 2029, column: 8)
!6989 = !DILocation(line: 2029, column: 49, scope: !6988)
!6990 = !DILocation(line: 2029, column: 8, scope: !6988)
!6991 = !DILocation(line: 2030, column: 8, scope: !6988)
!6992 = !DILocation(line: 2030, column: 11, scope: !6988)
!6993 = !DILocation(line: 2030, column: 17, scope: !6988)
!6994 = !DILocation(line: 2029, column: 8, scope: !6974)
!6995 = !DILocation(line: 2031, column: 32, scope: !6988)
!6996 = !DILocation(line: 2031, column: 6, scope: !6988)
!6997 = !DILocation(line: 2032, column: 2, scope: !6974)
!6998 = !DILocation(line: 2022, column: 50, scope: !6971)
!6999 = !DILocation(line: 2022, column: 56, scope: !6971)
!7000 = !DILocation(line: 2022, column: 48, scope: !6971)
!7001 = !DILocation(line: 2022, column: 7, scope: !6971)
!7002 = distinct !{!7002, !6972, !7003}
!7003 = !DILocation(line: 2032, column: 2, scope: !6966)
!7004 = distinct !{!7004, !6956, !7005}
!7005 = !DILocation(line: 2033, column: 5, scope: !6955)
!7006 = !DILocation(line: 2034, column: 1, scope: !6955)
!7007 = distinct !DISubprogram(name: "get_first_repr_for_decl", scope: !3, file: !3, line: 451, type: !6724, scopeLine: 452, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7008 = !DILocalVariable(name: "base", arg: 1, scope: !7007, file: !3, line: 451, type: !1696)
!7009 = !DILocation(line: 451, column: 31, scope: !7007)
!7010 = !DILocalVariable(name: "access_vec", scope: !7007, file: !3, line: 453, type: !3036)
!7011 = !DILocation(line: 453, column: 25, scope: !7007)
!7012 = !DILocation(line: 455, column: 40, scope: !7007)
!7013 = !DILocation(line: 455, column: 16, scope: !7007)
!7014 = !DILocation(line: 455, column: 14, scope: !7007)
!7015 = !DILocation(line: 456, column: 8, scope: !7016)
!7016 = distinct !DILexicalBlock(scope: !7007, file: !3, line: 456, column: 7)
!7017 = !DILocation(line: 456, column: 7, scope: !7007)
!7018 = !DILocation(line: 457, column: 5, scope: !7016)
!7019 = !DILocation(line: 459, column: 10, scope: !7007)
!7020 = !DILocation(line: 459, column: 3, scope: !7007)
!7021 = !DILocation(line: 460, column: 1, scope: !7007)
!7022 = distinct !DISubprogram(name: "analyze_access_trees", scope: !3, file: !3, line: 1858, type: !7023, scopeLine: 1859, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7023 = !DISubroutineType(types: !7024)
!7024 = !{!1815, !2999}
!7025 = !DILocalVariable(name: "access", arg: 1, scope: !7022, file: !3, line: 1858, type: !2999)
!7026 = !DILocation(line: 1858, column: 38, scope: !7022)
!7027 = !DILocalVariable(name: "ret", scope: !7022, file: !3, line: 1860, type: !1815)
!7028 = !DILocation(line: 1860, column: 8, scope: !7022)
!7029 = !DILocation(line: 1862, column: 3, scope: !7022)
!7030 = !DILocation(line: 1862, column: 10, scope: !7022)
!7031 = !DILocation(line: 1864, column: 35, scope: !7032)
!7032 = distinct !DILexicalBlock(scope: !7033, file: !3, line: 1864, column: 11)
!7033 = distinct !DILexicalBlock(scope: !7022, file: !3, line: 1863, column: 5)
!7034 = !DILocation(line: 1864, column: 11, scope: !7032)
!7035 = !DILocation(line: 1864, column: 11, scope: !7033)
!7036 = !DILocation(line: 1865, column: 6, scope: !7032)
!7037 = !DILocation(line: 1865, column: 2, scope: !7032)
!7038 = !DILocation(line: 1866, column: 16, scope: !7033)
!7039 = !DILocation(line: 1866, column: 24, scope: !7033)
!7040 = !DILocation(line: 1866, column: 14, scope: !7033)
!7041 = distinct !{!7041, !7029, !7042}
!7042 = !DILocation(line: 1867, column: 5, scope: !7022)
!7043 = !DILocation(line: 1869, column: 10, scope: !7022)
!7044 = !DILocation(line: 1869, column: 3, scope: !7022)
!7045 = distinct !DISubprogram(name: "dump_access_tree", scope: !3, file: !3, line: 400, type: !7046, scopeLine: 401, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7046 = !DISubroutineType(types: !7047)
!7047 = !{null, !7048, !2999}
!7048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7049, size: 64)
!7049 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !7050, line: 7, baseType: !7051)
!7050 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!7051 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !7052, line: 49, size: 1728, elements: !7053)
!7052 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!7053 = !{!7054, !7055, !7056, !7057, !7058, !7059, !7060, !7061, !7062, !7063, !7064, !7065, !7066, !7069, !7071, !7072, !7073, !7076, !7077, !7078, !7079, !7082, !7084, !7087, !7090, !7091, !7092, !7093, !7094}
!7054 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !7051, file: !7052, line: 51, baseType: !1693, size: 32)
!7055 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !7051, file: !7052, line: 54, baseType: !1962, size: 64, offset: 64)
!7056 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !7051, file: !7052, line: 55, baseType: !1962, size: 64, offset: 128)
!7057 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !7051, file: !7052, line: 56, baseType: !1962, size: 64, offset: 192)
!7058 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !7051, file: !7052, line: 57, baseType: !1962, size: 64, offset: 256)
!7059 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !7051, file: !7052, line: 58, baseType: !1962, size: 64, offset: 320)
!7060 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !7051, file: !7052, line: 59, baseType: !1962, size: 64, offset: 384)
!7061 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !7051, file: !7052, line: 60, baseType: !1962, size: 64, offset: 448)
!7062 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !7051, file: !7052, line: 61, baseType: !1962, size: 64, offset: 512)
!7063 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !7051, file: !7052, line: 64, baseType: !1962, size: 64, offset: 576)
!7064 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !7051, file: !7052, line: 65, baseType: !1962, size: 64, offset: 640)
!7065 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !7051, file: !7052, line: 66, baseType: !1962, size: 64, offset: 704)
!7066 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !7051, file: !7052, line: 68, baseType: !7067, size: 64, offset: 768)
!7067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7068, size: 64)
!7068 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !7052, line: 36, flags: DIFlagFwdDecl)
!7069 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !7051, file: !7052, line: 70, baseType: !7070, size: 64, offset: 832)
!7070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7051, size: 64)
!7071 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !7051, file: !7052, line: 72, baseType: !1693, size: 32, offset: 896)
!7072 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !7051, file: !7052, line: 73, baseType: !1693, size: 32, offset: 928)
!7073 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !7051, file: !7052, line: 74, baseType: !7074, size: 64, offset: 960)
!7074 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !7075, line: 152, baseType: !1752)
!7075 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!7076 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !7051, file: !7052, line: 77, baseType: !3478, size: 16, offset: 1024)
!7077 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !7051, file: !7052, line: 78, baseType: !2821, size: 8, offset: 1040)
!7078 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !7051, file: !7052, line: 79, baseType: !1794, size: 8, offset: 1048)
!7079 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !7051, file: !7052, line: 81, baseType: !7080, size: 64, offset: 1088)
!7080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7081, size: 64)
!7081 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !7052, line: 43, baseType: null)
!7082 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !7051, file: !7052, line: 89, baseType: !7083, size: 64, offset: 1152)
!7083 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !7075, line: 153, baseType: !1752)
!7084 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !7051, file: !7052, line: 91, baseType: !7085, size: 64, offset: 1216)
!7085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7086, size: 64)
!7086 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !7052, line: 37, flags: DIFlagFwdDecl)
!7087 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !7051, file: !7052, line: 92, baseType: !7088, size: 64, offset: 1280)
!7088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7089, size: 64)
!7089 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !7052, line: 38, flags: DIFlagFwdDecl)
!7090 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !7051, file: !7052, line: 93, baseType: !7070, size: 64, offset: 1344)
!7091 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !7051, file: !7052, line: 94, baseType: !1977, size: 64, offset: 1408)
!7092 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !7051, file: !7052, line: 95, baseType: !2169, size: 64, offset: 1472)
!7093 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !7051, file: !7052, line: 96, baseType: !1693, size: 32, offset: 1536)
!7094 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !7051, file: !7052, line: 98, baseType: !7095, size: 160, offset: 1568)
!7095 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1795, size: 160, elements: !7096)
!7096 = !{!7097}
!7097 = !DISubrange(count: 20)
!7098 = !DILocalVariable(name: "f", arg: 1, scope: !7045, file: !3, line: 400, type: !7048)
!7099 = !DILocation(line: 400, column: 25, scope: !7045)
!7100 = !DILocalVariable(name: "access", arg: 2, scope: !7045, file: !3, line: 400, type: !2999)
!7101 = !DILocation(line: 400, column: 43, scope: !7045)
!7102 = !DILocation(line: 402, column: 3, scope: !7045)
!7103 = !DILocation(line: 402, column: 10, scope: !7104)
!7104 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 402, column: 3)
!7105 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 402, column: 3)
!7106 = !DILocation(line: 402, column: 3, scope: !7105)
!7107 = !DILocation(line: 403, column: 25, scope: !7104)
!7108 = !DILocation(line: 403, column: 28, scope: !7104)
!7109 = !DILocation(line: 403, column: 5, scope: !7104)
!7110 = !DILocation(line: 402, column: 27, scope: !7104)
!7111 = !DILocation(line: 402, column: 35, scope: !7104)
!7112 = !DILocation(line: 402, column: 25, scope: !7104)
!7113 = !DILocation(line: 402, column: 3, scope: !7104)
!7114 = distinct !{!7114, !7106, !7115}
!7115 = !DILocation(line: 403, column: 37, scope: !7105)
!7116 = !DILocation(line: 404, column: 1, scope: !7045)
!7117 = distinct !DISubprogram(name: "get_base_access_vector", scope: !3, file: !3, line: 418, type: !7118, scopeLine: 419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7118 = !DISubroutineType(types: !7119)
!7119 = !{!3036, !1696}
!7120 = !DILocalVariable(name: "base", arg: 1, scope: !7117, file: !3, line: 418, type: !1696)
!7121 = !DILocation(line: 418, column: 30, scope: !7117)
!7122 = !DILocalVariable(name: "slot", scope: !7117, file: !3, line: 420, type: !2479)
!7123 = !DILocation(line: 420, column: 10, scope: !7117)
!7124 = !DILocation(line: 422, column: 32, scope: !7117)
!7125 = !DILocation(line: 422, column: 49, scope: !7117)
!7126 = !DILocation(line: 422, column: 10, scope: !7117)
!7127 = !DILocation(line: 422, column: 8, scope: !7117)
!7128 = !DILocation(line: 423, column: 8, scope: !7129)
!7129 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 423, column: 7)
!7130 = !DILocation(line: 423, column: 7, scope: !7117)
!7131 = !DILocation(line: 424, column: 5, scope: !7129)
!7132 = !DILocation(line: 426, column: 39, scope: !7129)
!7133 = !DILocation(line: 426, column: 12, scope: !7129)
!7134 = !DILocation(line: 426, column: 5, scope: !7129)
!7135 = !DILocation(line: 427, column: 1, scope: !7117)
!7136 = distinct !DISubprogram(name: "VEC_access_p_base_length", scope: !3, file: !3, line: 228, type: !7137, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7137 = !DISubroutineType(types: !7138)
!7138 = !{!7, !7139}
!7139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7140, size: 64)
!7140 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3041)
!7141 = !DILocalVariable(name: "vec_", arg: 1, scope: !7136, file: !3, line: 228, type: !7139)
!7142 = !DILocation(line: 228, column: 1, scope: !7136)
!7143 = distinct !DISubprogram(name: "VEC_access_p_base_address", scope: !3, file: !3, line: 228, type: !7144, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7144 = !DISubroutineType(types: !7145)
!7145 = !{!6291, !6307}
!7146 = !DILocalVariable(name: "vec_", arg: 1, scope: !7143, file: !3, line: 228, type: !6307)
!7147 = !DILocation(line: 228, column: 1, scope: !7143)
!7148 = distinct !DISubprogram(name: "compare_access_positions", scope: !3, file: !3, line: 1246, type: !2471, scopeLine: 1247, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7149 = !DILocalVariable(name: "a", arg: 1, scope: !7148, file: !3, line: 1246, type: !2466)
!7150 = !DILocation(line: 1246, column: 39, scope: !7148)
!7151 = !DILocalVariable(name: "b", arg: 2, scope: !7148, file: !3, line: 1246, type: !2466)
!7152 = !DILocation(line: 1246, column: 54, scope: !7148)
!7153 = !DILocalVariable(name: "fp1", scope: !7148, file: !3, line: 1248, type: !3052)
!7154 = !DILocation(line: 1248, column: 19, scope: !7148)
!7155 = !DILocation(line: 1248, column: 44, scope: !7148)
!7156 = !DILocation(line: 1248, column: 25, scope: !7148)
!7157 = !DILocalVariable(name: "fp2", scope: !7148, file: !3, line: 1249, type: !3052)
!7158 = !DILocation(line: 1249, column: 19, scope: !7148)
!7159 = !DILocation(line: 1249, column: 44, scope: !7148)
!7160 = !DILocation(line: 1249, column: 25, scope: !7148)
!7161 = !DILocalVariable(name: "f1", scope: !7148, file: !3, line: 1250, type: !3053)
!7162 = !DILocation(line: 1250, column: 18, scope: !7148)
!7163 = !DILocation(line: 1250, column: 24, scope: !7148)
!7164 = !DILocation(line: 1250, column: 23, scope: !7148)
!7165 = !DILocalVariable(name: "f2", scope: !7148, file: !3, line: 1251, type: !3053)
!7166 = !DILocation(line: 1251, column: 18, scope: !7148)
!7167 = !DILocation(line: 1251, column: 24, scope: !7148)
!7168 = !DILocation(line: 1251, column: 23, scope: !7148)
!7169 = !DILocation(line: 1253, column: 7, scope: !7170)
!7170 = distinct !DILexicalBlock(scope: !7148, file: !3, line: 1253, column: 7)
!7171 = !DILocation(line: 1253, column: 11, scope: !7170)
!7172 = !DILocation(line: 1253, column: 21, scope: !7170)
!7173 = !DILocation(line: 1253, column: 25, scope: !7170)
!7174 = !DILocation(line: 1253, column: 18, scope: !7170)
!7175 = !DILocation(line: 1253, column: 7, scope: !7148)
!7176 = !DILocation(line: 1254, column: 12, scope: !7170)
!7177 = !DILocation(line: 1254, column: 16, scope: !7170)
!7178 = !DILocation(line: 1254, column: 25, scope: !7170)
!7179 = !DILocation(line: 1254, column: 29, scope: !7170)
!7180 = !DILocation(line: 1254, column: 23, scope: !7170)
!7181 = !DILocation(line: 1254, column: 5, scope: !7170)
!7182 = !DILocation(line: 1256, column: 7, scope: !7183)
!7183 = distinct !DILexicalBlock(scope: !7148, file: !3, line: 1256, column: 7)
!7184 = !DILocation(line: 1256, column: 11, scope: !7183)
!7185 = !DILocation(line: 1256, column: 19, scope: !7183)
!7186 = !DILocation(line: 1256, column: 23, scope: !7183)
!7187 = !DILocation(line: 1256, column: 16, scope: !7183)
!7188 = !DILocation(line: 1256, column: 7, scope: !7148)
!7189 = !DILocation(line: 1258, column: 11, scope: !7190)
!7190 = distinct !DILexicalBlock(scope: !7191, file: !3, line: 1258, column: 11)
!7191 = distinct !DILexicalBlock(scope: !7183, file: !3, line: 1257, column: 5)
!7192 = !DILocation(line: 1258, column: 15, scope: !7190)
!7193 = !DILocation(line: 1258, column: 23, scope: !7190)
!7194 = !DILocation(line: 1258, column: 27, scope: !7190)
!7195 = !DILocation(line: 1258, column: 20, scope: !7190)
!7196 = !DILocation(line: 1258, column: 11, scope: !7191)
!7197 = !DILocation(line: 1259, column: 2, scope: !7190)
!7198 = !DILocation(line: 1261, column: 37, scope: !7199)
!7199 = distinct !DILexicalBlock(scope: !7190, file: !3, line: 1261, column: 16)
!7200 = !DILocation(line: 1261, column: 41, scope: !7199)
!7201 = !DILocation(line: 1261, column: 17, scope: !7199)
!7202 = !DILocation(line: 1262, column: 4, scope: !7199)
!7203 = !DILocation(line: 1262, column: 27, scope: !7199)
!7204 = !DILocation(line: 1262, column: 31, scope: !7199)
!7205 = !DILocation(line: 1262, column: 7, scope: !7199)
!7206 = !DILocation(line: 1261, column: 16, scope: !7190)
!7207 = !DILocation(line: 1263, column: 2, scope: !7199)
!7208 = !DILocation(line: 1264, column: 36, scope: !7209)
!7209 = distinct !DILexicalBlock(scope: !7199, file: !3, line: 1264, column: 16)
!7210 = !DILocation(line: 1264, column: 40, scope: !7209)
!7211 = !DILocation(line: 1264, column: 16, scope: !7209)
!7212 = !DILocation(line: 1265, column: 9, scope: !7209)
!7213 = !DILocation(line: 1265, column: 33, scope: !7209)
!7214 = !DILocation(line: 1265, column: 37, scope: !7209)
!7215 = !DILocation(line: 1265, column: 13, scope: !7209)
!7216 = !DILocation(line: 1264, column: 16, scope: !7199)
!7217 = !DILocation(line: 1266, column: 2, scope: !7209)
!7218 = !DILocation(line: 1268, column: 16, scope: !7219)
!7219 = distinct !DILexicalBlock(scope: !7209, file: !3, line: 1268, column: 16)
!7220 = !DILocation(line: 1268, column: 37, scope: !7219)
!7221 = !DILocation(line: 1269, column: 9, scope: !7219)
!7222 = !DILocation(line: 1269, column: 12, scope: !7219)
!7223 = !DILocation(line: 1269, column: 33, scope: !7219)
!7224 = !DILocation(line: 1270, column: 9, scope: !7219)
!7225 = !DILocation(line: 1270, column: 13, scope: !7219)
!7226 = !DILocation(line: 1270, column: 34, scope: !7219)
!7227 = !DILocation(line: 1271, column: 6, scope: !7219)
!7228 = !DILocation(line: 1271, column: 9, scope: !7219)
!7229 = !DILocation(line: 1271, column: 30, scope: !7219)
!7230 = !DILocation(line: 1268, column: 16, scope: !7209)
!7231 = !DILocation(line: 1272, column: 2, scope: !7219)
!7232 = !DILocation(line: 1273, column: 17, scope: !7233)
!7233 = distinct !DILexicalBlock(scope: !7219, file: !3, line: 1273, column: 16)
!7234 = !DILocation(line: 1273, column: 38, scope: !7233)
!7235 = !DILocation(line: 1274, column: 3, scope: !7233)
!7236 = !DILocation(line: 1274, column: 6, scope: !7233)
!7237 = !DILocation(line: 1274, column: 27, scope: !7233)
!7238 = !DILocation(line: 1275, column: 9, scope: !7233)
!7239 = !DILocation(line: 1275, column: 12, scope: !7233)
!7240 = !DILocation(line: 1275, column: 33, scope: !7233)
!7241 = !DILocation(line: 1276, column: 9, scope: !7233)
!7242 = !DILocation(line: 1276, column: 12, scope: !7233)
!7243 = !DILocation(line: 1276, column: 33, scope: !7233)
!7244 = !DILocation(line: 1273, column: 16, scope: !7219)
!7245 = !DILocation(line: 1277, column: 2, scope: !7233)
!7246 = !DILocation(line: 1279, column: 16, scope: !7247)
!7247 = distinct !DILexicalBlock(scope: !7233, file: !3, line: 1279, column: 16)
!7248 = !DILocation(line: 1280, column: 9, scope: !7247)
!7249 = !DILocation(line: 1280, column: 12, scope: !7247)
!7250 = !DILocation(line: 1279, column: 16, scope: !7233)
!7251 = !DILocation(line: 1281, column: 9, scope: !7247)
!7252 = !DILocation(line: 1281, column: 37, scope: !7247)
!7253 = !DILocation(line: 1281, column: 35, scope: !7247)
!7254 = !DILocation(line: 1281, column: 2, scope: !7247)
!7255 = !DILocation(line: 1283, column: 16, scope: !7256)
!7256 = distinct !DILexicalBlock(scope: !7247, file: !3, line: 1283, column: 16)
!7257 = !DILocation(line: 1284, column: 9, scope: !7256)
!7258 = !DILocation(line: 1284, column: 13, scope: !7256)
!7259 = !DILocation(line: 1285, column: 9, scope: !7256)
!7260 = !DILocation(line: 1285, column: 6, scope: !7256)
!7261 = !DILocation(line: 1283, column: 16, scope: !7247)
!7262 = !DILocation(line: 1286, column: 2, scope: !7256)
!7263 = !DILocation(line: 1287, column: 16, scope: !7264)
!7264 = distinct !DILexicalBlock(scope: !7256, file: !3, line: 1287, column: 16)
!7265 = !DILocation(line: 1288, column: 9, scope: !7264)
!7266 = !DILocation(line: 1288, column: 13, scope: !7264)
!7267 = !DILocation(line: 1289, column: 9, scope: !7264)
!7268 = !DILocation(line: 1289, column: 6, scope: !7264)
!7269 = !DILocation(line: 1287, column: 16, scope: !7256)
!7270 = !DILocation(line: 1290, column: 2, scope: !7264)
!7271 = !DILocation(line: 1292, column: 14, scope: !7191)
!7272 = !DILocation(line: 1292, column: 36, scope: !7191)
!7273 = !DILocation(line: 1292, column: 34, scope: !7191)
!7274 = !DILocation(line: 1292, column: 7, scope: !7191)
!7275 = !DILocation(line: 1297, column: 10, scope: !7148)
!7276 = !DILocation(line: 1297, column: 14, scope: !7148)
!7277 = !DILocation(line: 1297, column: 21, scope: !7148)
!7278 = !DILocation(line: 1297, column: 25, scope: !7148)
!7279 = !DILocation(line: 1297, column: 19, scope: !7148)
!7280 = !DILocation(line: 1297, column: 3, scope: !7148)
!7281 = !DILocation(line: 1298, column: 1, scope: !7148)
!7282 = distinct !DISubprogram(name: "VEC_access_p_base_index", scope: !3, file: !3, line: 228, type: !7283, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7283 = !DISubroutineType(types: !7284)
!7284 = !{!3048, !7139, !7}
!7285 = !DILocalVariable(name: "vec_", arg: 1, scope: !7282, file: !3, line: 228, type: !7139)
!7286 = !DILocation(line: 228, column: 1, scope: !7282)
!7287 = !DILocalVariable(name: "ix_", arg: 2, scope: !7282, file: !3, line: 228, type: !7)
!7288 = !DILocation(line: 0, scope: !7282)
!7289 = distinct !DISubprogram(name: "relink_to_new_repr", scope: !3, file: !3, line: 502, type: !7290, scopeLine: 503, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7290 = !DISubroutineType(types: !7291)
!7291 = !{null, !2999, !2999}
!7292 = !DILocalVariable(name: "new_racc", arg: 1, scope: !7289, file: !3, line: 502, type: !2999)
!7293 = !DILocation(line: 502, column: 36, scope: !7289)
!7294 = !DILocalVariable(name: "old_racc", arg: 2, scope: !7289, file: !3, line: 502, type: !2999)
!7295 = !DILocation(line: 502, column: 61, scope: !7289)
!7296 = !DILocation(line: 504, column: 8, scope: !7297)
!7297 = distinct !DILexicalBlock(scope: !7289, file: !3, line: 504, column: 7)
!7298 = !DILocation(line: 504, column: 18, scope: !7297)
!7299 = !DILocation(line: 504, column: 7, scope: !7289)
!7300 = !DILocation(line: 506, column: 7, scope: !7301)
!7301 = distinct !DILexicalBlock(scope: !7297, file: !3, line: 505, column: 5)
!7302 = !DILocation(line: 507, column: 7, scope: !7301)
!7303 = !DILocation(line: 510, column: 7, scope: !7304)
!7304 = distinct !DILexicalBlock(scope: !7289, file: !3, line: 510, column: 7)
!7305 = !DILocation(line: 510, column: 17, scope: !7304)
!7306 = !DILocation(line: 510, column: 7, scope: !7289)
!7307 = !DILocation(line: 512, column: 7, scope: !7308)
!7308 = distinct !DILexicalBlock(scope: !7304, file: !3, line: 511, column: 5)
!7309 = !DILocation(line: 513, column: 7, scope: !7308)
!7310 = !DILocation(line: 515, column: 35, scope: !7308)
!7311 = !DILocation(line: 515, column: 45, scope: !7308)
!7312 = !DILocation(line: 515, column: 7, scope: !7308)
!7313 = !DILocation(line: 515, column: 17, scope: !7308)
!7314 = !DILocation(line: 515, column: 28, scope: !7308)
!7315 = !DILocation(line: 515, column: 33, scope: !7308)
!7316 = !DILocation(line: 516, column: 29, scope: !7308)
!7317 = !DILocation(line: 516, column: 39, scope: !7308)
!7318 = !DILocation(line: 516, column: 7, scope: !7308)
!7319 = !DILocation(line: 516, column: 17, scope: !7308)
!7320 = !DILocation(line: 516, column: 27, scope: !7308)
!7321 = !DILocation(line: 517, column: 5, scope: !7308)
!7322 = !DILocation(line: 520, column: 7, scope: !7323)
!7323 = distinct !DILexicalBlock(scope: !7304, file: !3, line: 519, column: 5)
!7324 = !DILocation(line: 522, column: 30, scope: !7323)
!7325 = !DILocation(line: 522, column: 40, scope: !7323)
!7326 = !DILocation(line: 522, column: 7, scope: !7323)
!7327 = !DILocation(line: 522, column: 17, scope: !7323)
!7328 = !DILocation(line: 522, column: 28, scope: !7323)
!7329 = !DILocation(line: 523, column: 29, scope: !7323)
!7330 = !DILocation(line: 523, column: 39, scope: !7323)
!7331 = !DILocation(line: 523, column: 7, scope: !7323)
!7332 = !DILocation(line: 523, column: 17, scope: !7323)
!7333 = !DILocation(line: 523, column: 27, scope: !7323)
!7334 = !DILocation(line: 525, column: 26, scope: !7289)
!7335 = !DILocation(line: 525, column: 36, scope: !7289)
!7336 = !DILocation(line: 525, column: 46, scope: !7289)
!7337 = !DILocation(line: 525, column: 3, scope: !7289)
!7338 = !DILocation(line: 525, column: 13, scope: !7289)
!7339 = !DILocation(line: 525, column: 24, scope: !7289)
!7340 = !DILocation(line: 526, column: 1, scope: !7289)
!7341 = distinct !DISubprogram(name: "add_access_to_work_queue", scope: !3, file: !3, line: 531, type: !6937, scopeLine: 532, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7342 = !DILocalVariable(name: "access", arg: 1, scope: !7341, file: !3, line: 531, type: !2999)
!7343 = !DILocation(line: 531, column: 42, scope: !7341)
!7344 = !DILocation(line: 533, column: 8, scope: !7345)
!7345 = distinct !DILexicalBlock(scope: !7341, file: !3, line: 533, column: 7)
!7346 = !DILocation(line: 533, column: 16, scope: !7345)
!7347 = !DILocation(line: 533, column: 7, scope: !7341)
!7348 = !DILocation(line: 535, column: 7, scope: !7349)
!7349 = distinct !DILexicalBlock(scope: !7345, file: !3, line: 534, column: 5)
!7350 = !DILocation(line: 536, column: 29, scope: !7349)
!7351 = !DILocation(line: 536, column: 7, scope: !7349)
!7352 = !DILocation(line: 536, column: 15, scope: !7349)
!7353 = !DILocation(line: 536, column: 27, scope: !7349)
!7354 = !DILocation(line: 537, column: 7, scope: !7349)
!7355 = !DILocation(line: 537, column: 15, scope: !7349)
!7356 = !DILocation(line: 537, column: 26, scope: !7349)
!7357 = !DILocation(line: 538, column: 25, scope: !7349)
!7358 = !DILocation(line: 538, column: 23, scope: !7349)
!7359 = !DILocation(line: 539, column: 5, scope: !7349)
!7360 = !DILocation(line: 540, column: 1, scope: !7341)
!7361 = distinct !DISubprogram(name: "build_access_subtree", scope: !3, file: !3, line: 1721, type: !7362, scopeLine: 1722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7362 = !DISubroutineType(types: !7363)
!7363 = !{null, !6737}
!7364 = !DILocalVariable(name: "access", arg: 1, scope: !7361, file: !3, line: 1721, type: !6737)
!7365 = !DILocation(line: 1721, column: 39, scope: !7361)
!7366 = !DILocalVariable(name: "root", scope: !7361, file: !3, line: 1723, type: !2999)
!7367 = !DILocation(line: 1723, column: 18, scope: !7361)
!7368 = !DILocation(line: 1723, column: 26, scope: !7361)
!7369 = !DILocation(line: 1723, column: 25, scope: !7361)
!7370 = !DILocalVariable(name: "last_child", scope: !7361, file: !3, line: 1723, type: !2999)
!7371 = !DILocation(line: 1723, column: 35, scope: !7361)
!7372 = !DILocalVariable(name: "limit", scope: !7361, file: !3, line: 1724, type: !1752)
!7373 = !DILocation(line: 1724, column: 17, scope: !7361)
!7374 = !DILocation(line: 1724, column: 25, scope: !7361)
!7375 = !DILocation(line: 1724, column: 31, scope: !7361)
!7376 = !DILocation(line: 1724, column: 40, scope: !7361)
!7377 = !DILocation(line: 1724, column: 46, scope: !7361)
!7378 = !DILocation(line: 1724, column: 38, scope: !7361)
!7379 = !DILocation(line: 1726, column: 15, scope: !7361)
!7380 = !DILocation(line: 1726, column: 14, scope: !7361)
!7381 = !DILocation(line: 1726, column: 24, scope: !7361)
!7382 = !DILocation(line: 1726, column: 4, scope: !7361)
!7383 = !DILocation(line: 1726, column: 11, scope: !7361)
!7384 = !DILocation(line: 1727, column: 3, scope: !7361)
!7385 = !DILocation(line: 1727, column: 12, scope: !7361)
!7386 = !DILocation(line: 1727, column: 11, scope: !7361)
!7387 = !DILocation(line: 1727, column: 19, scope: !7361)
!7388 = !DILocation(line: 1727, column: 24, scope: !7361)
!7389 = !DILocation(line: 1727, column: 23, scope: !7361)
!7390 = !DILocation(line: 1727, column: 33, scope: !7361)
!7391 = !DILocation(line: 1727, column: 44, scope: !7361)
!7392 = !DILocation(line: 1727, column: 43, scope: !7361)
!7393 = !DILocation(line: 1727, column: 53, scope: !7361)
!7394 = !DILocation(line: 1727, column: 40, scope: !7361)
!7395 = !DILocation(line: 1727, column: 61, scope: !7361)
!7396 = !DILocation(line: 1727, column: 58, scope: !7361)
!7397 = !DILocation(line: 0, scope: !7361)
!7398 = !DILocation(line: 1729, column: 12, scope: !7399)
!7399 = distinct !DILexicalBlock(scope: !7400, file: !3, line: 1729, column: 11)
!7400 = distinct !DILexicalBlock(scope: !7361, file: !3, line: 1728, column: 5)
!7401 = !DILocation(line: 1729, column: 11, scope: !7400)
!7402 = !DILocation(line: 1730, column: 23, scope: !7399)
!7403 = !DILocation(line: 1730, column: 22, scope: !7399)
!7404 = !DILocation(line: 1730, column: 2, scope: !7399)
!7405 = !DILocation(line: 1730, column: 8, scope: !7399)
!7406 = !DILocation(line: 1730, column: 20, scope: !7399)
!7407 = !DILocation(line: 1732, column: 30, scope: !7399)
!7408 = !DILocation(line: 1732, column: 29, scope: !7399)
!7409 = !DILocation(line: 1732, column: 2, scope: !7399)
!7410 = !DILocation(line: 1732, column: 14, scope: !7399)
!7411 = !DILocation(line: 1732, column: 27, scope: !7399)
!7412 = !DILocation(line: 1733, column: 21, scope: !7400)
!7413 = !DILocation(line: 1733, column: 20, scope: !7400)
!7414 = !DILocation(line: 1733, column: 18, scope: !7400)
!7415 = !DILocation(line: 1735, column: 29, scope: !7400)
!7416 = !DILocation(line: 1735, column: 7, scope: !7400)
!7417 = distinct !{!7417, !7384, !7418}
!7418 = !DILocation(line: 1736, column: 5, scope: !7361)
!7419 = !DILocation(line: 1737, column: 1, scope: !7361)
!7420 = distinct !DISubprogram(name: "pop_access_from_work_queue", scope: !3, file: !3, line: 545, type: !7421, scopeLine: 546, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7421 = !DISubroutineType(types: !7422)
!7422 = !{!2999}
!7423 = !DILocalVariable(name: "access", scope: !7420, file: !3, line: 547, type: !2999)
!7424 = !DILocation(line: 547, column: 18, scope: !7420)
!7425 = !DILocation(line: 547, column: 27, scope: !7420)
!7426 = !DILocation(line: 549, column: 21, scope: !7420)
!7427 = !DILocation(line: 549, column: 29, scope: !7420)
!7428 = !DILocation(line: 549, column: 19, scope: !7420)
!7429 = !DILocation(line: 550, column: 3, scope: !7420)
!7430 = !DILocation(line: 550, column: 11, scope: !7420)
!7431 = !DILocation(line: 550, column: 23, scope: !7420)
!7432 = !DILocation(line: 551, column: 3, scope: !7420)
!7433 = !DILocation(line: 551, column: 11, scope: !7420)
!7434 = !DILocation(line: 551, column: 22, scope: !7420)
!7435 = !DILocation(line: 552, column: 10, scope: !7420)
!7436 = !DILocation(line: 552, column: 3, scope: !7420)
!7437 = distinct !DISubprogram(name: "propagate_subaccesses_across_link", scope: !3, file: !3, line: 1944, type: !7438, scopeLine: 1945, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7438 = !DISubroutineType(types: !7439)
!7439 = !{!1815, !2999, !2999}
!7440 = !DILocalVariable(name: "lacc", arg: 1, scope: !7437, file: !3, line: 1944, type: !2999)
!7441 = !DILocation(line: 1944, column: 51, scope: !7437)
!7442 = !DILocalVariable(name: "racc", arg: 2, scope: !7437, file: !3, line: 1944, type: !2999)
!7443 = !DILocation(line: 1944, column: 72, scope: !7437)
!7444 = !DILocalVariable(name: "rchild", scope: !7437, file: !3, line: 1946, type: !2999)
!7445 = !DILocation(line: 1946, column: 18, scope: !7437)
!7446 = !DILocalVariable(name: "norm_delta", scope: !7437, file: !3, line: 1947, type: !1752)
!7447 = !DILocation(line: 1947, column: 17, scope: !7437)
!7448 = !DILocation(line: 1947, column: 30, scope: !7437)
!7449 = !DILocation(line: 1947, column: 36, scope: !7437)
!7450 = !DILocation(line: 1947, column: 45, scope: !7437)
!7451 = !DILocation(line: 1947, column: 51, scope: !7437)
!7452 = !DILocation(line: 1947, column: 43, scope: !7437)
!7453 = !DILocalVariable(name: "ret", scope: !7437, file: !3, line: 1948, type: !1815)
!7454 = !DILocation(line: 1948, column: 8, scope: !7437)
!7455 = !DILocation(line: 1950, column: 27, scope: !7456)
!7456 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 1950, column: 7)
!7457 = !DILocation(line: 1950, column: 33, scope: !7456)
!7458 = !DILocation(line: 1950, column: 7, scope: !7456)
!7459 = !DILocation(line: 1951, column: 7, scope: !7456)
!7460 = !DILocation(line: 1951, column: 10, scope: !7456)
!7461 = !DILocation(line: 1951, column: 16, scope: !7456)
!7462 = !DILocation(line: 1952, column: 7, scope: !7456)
!7463 = !DILocation(line: 1952, column: 10, scope: !7456)
!7464 = !DILocation(line: 1952, column: 16, scope: !7456)
!7465 = !DILocation(line: 1950, column: 7, scope: !7437)
!7466 = !DILocation(line: 1953, column: 5, scope: !7456)
!7467 = !DILocation(line: 1955, column: 8, scope: !7468)
!7468 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 1955, column: 7)
!7469 = !DILocation(line: 1955, column: 14, scope: !7468)
!7470 = !DILocation(line: 1955, column: 26, scope: !7468)
!7471 = !DILocation(line: 1955, column: 30, scope: !7468)
!7472 = !DILocation(line: 1955, column: 36, scope: !7468)
!7473 = !DILocation(line: 1956, column: 7, scope: !7468)
!7474 = !DILocation(line: 1956, column: 30, scope: !7468)
!7475 = !DILocation(line: 1956, column: 36, scope: !7468)
!7476 = !DILocation(line: 1956, column: 10, scope: !7468)
!7477 = !DILocation(line: 1955, column: 7, scope: !7437)
!7478 = !DILocalVariable(name: "t", scope: !7479, file: !3, line: 1958, type: !1696)
!7479 = distinct !DILexicalBlock(scope: !7468, file: !3, line: 1957, column: 5)
!7480 = !DILocation(line: 1958, column: 12, scope: !7479)
!7481 = !DILocation(line: 1958, column: 16, scope: !7479)
!7482 = !DILocation(line: 1958, column: 22, scope: !7479)
!7483 = !DILocation(line: 1960, column: 37, scope: !7484)
!7484 = distinct !DILexicalBlock(scope: !7479, file: !3, line: 1960, column: 11)
!7485 = !DILocation(line: 1960, column: 52, scope: !7484)
!7486 = !DILocation(line: 1960, column: 58, scope: !7484)
!7487 = !DILocation(line: 1960, column: 66, scope: !7484)
!7488 = !DILocation(line: 1960, column: 72, scope: !7484)
!7489 = !DILocation(line: 1960, column: 11, scope: !7484)
!7490 = !DILocation(line: 1960, column: 11, scope: !7479)
!7491 = !DILocation(line: 1963, column: 17, scope: !7492)
!7492 = distinct !DILexicalBlock(scope: !7484, file: !3, line: 1962, column: 2)
!7493 = !DILocation(line: 1963, column: 4, scope: !7492)
!7494 = !DILocation(line: 1963, column: 10, scope: !7492)
!7495 = !DILocation(line: 1963, column: 15, scope: !7492)
!7496 = !DILocation(line: 1964, column: 17, scope: !7492)
!7497 = !DILocation(line: 1964, column: 23, scope: !7492)
!7498 = !DILocation(line: 1964, column: 4, scope: !7492)
!7499 = !DILocation(line: 1964, column: 10, scope: !7492)
!7500 = !DILocation(line: 1964, column: 15, scope: !7492)
!7501 = !DILocation(line: 1965, column: 2, scope: !7492)
!7502 = !DILocation(line: 1966, column: 7, scope: !7479)
!7503 = !DILocation(line: 1969, column: 17, scope: !7504)
!7504 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 1969, column: 3)
!7505 = !DILocation(line: 1969, column: 23, scope: !7504)
!7506 = !DILocation(line: 1969, column: 15, scope: !7504)
!7507 = !DILocation(line: 1969, column: 8, scope: !7504)
!7508 = !DILocation(line: 1969, column: 36, scope: !7509)
!7509 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 1969, column: 3)
!7510 = !DILocation(line: 1969, column: 3, scope: !7504)
!7511 = !DILocalVariable(name: "new_acc", scope: !7512, file: !3, line: 1971, type: !2999)
!7512 = distinct !DILexicalBlock(scope: !7509, file: !3, line: 1970, column: 5)
!7513 = !DILocation(line: 1971, column: 22, scope: !7512)
!7514 = !DILocalVariable(name: "norm_offset", scope: !7512, file: !3, line: 1972, type: !1752)
!7515 = !DILocation(line: 1972, column: 21, scope: !7512)
!7516 = !DILocation(line: 1972, column: 35, scope: !7512)
!7517 = !DILocation(line: 1972, column: 43, scope: !7512)
!7518 = !DILocation(line: 1972, column: 52, scope: !7512)
!7519 = !DILocation(line: 1972, column: 50, scope: !7512)
!7520 = !DILocation(line: 1974, column: 11, scope: !7521)
!7521 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 1974, column: 11)
!7522 = !DILocation(line: 1974, column: 19, scope: !7521)
!7523 = !DILocation(line: 1974, column: 11, scope: !7512)
!7524 = !DILocation(line: 1975, column: 2, scope: !7521)
!7525 = !DILocation(line: 1977, column: 41, scope: !7526)
!7526 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 1977, column: 11)
!7527 = !DILocation(line: 1977, column: 47, scope: !7526)
!7528 = !DILocation(line: 1977, column: 60, scope: !7526)
!7529 = !DILocation(line: 1977, column: 68, scope: !7526)
!7530 = !DILocation(line: 1977, column: 11, scope: !7526)
!7531 = !DILocation(line: 1977, column: 11, scope: !7512)
!7532 = !DILocation(line: 1980, column: 8, scope: !7533)
!7533 = distinct !DILexicalBlock(scope: !7534, file: !3, line: 1980, column: 8)
!7534 = distinct !DILexicalBlock(scope: !7526, file: !3, line: 1979, column: 2)
!7535 = !DILocation(line: 1980, column: 8, scope: !7534)
!7536 = !DILocation(line: 1982, column: 8, scope: !7537)
!7537 = distinct !DILexicalBlock(scope: !7533, file: !3, line: 1981, column: 6)
!7538 = !DILocation(line: 1982, column: 16, scope: !7537)
!7539 = !DILocation(line: 1982, column: 25, scope: !7537)
!7540 = !DILocation(line: 1983, column: 29, scope: !7537)
!7541 = !DILocation(line: 1983, column: 38, scope: !7537)
!7542 = !DILocation(line: 1983, column: 8, scope: !7537)
!7543 = !DILocation(line: 1983, column: 17, scope: !7537)
!7544 = !DILocation(line: 1983, column: 26, scope: !7537)
!7545 = !DILocation(line: 1984, column: 12, scope: !7546)
!7546 = distinct !DILexicalBlock(scope: !7537, file: !3, line: 1984, column: 12)
!7547 = !DILocation(line: 1984, column: 20, scope: !7546)
!7548 = !DILocation(line: 1984, column: 12, scope: !7537)
!7549 = !DILocation(line: 1985, column: 45, scope: !7546)
!7550 = !DILocation(line: 1985, column: 54, scope: !7546)
!7551 = !DILocation(line: 1985, column: 10, scope: !7546)
!7552 = !DILocation(line: 1985, column: 7, scope: !7546)
!7553 = !DILocation(line: 1985, column: 3, scope: !7546)
!7554 = !DILocation(line: 1986, column: 6, scope: !7537)
!7555 = !DILocation(line: 1987, column: 4, scope: !7534)
!7556 = !DILocation(line: 1993, column: 40, scope: !7557)
!7557 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 1993, column: 11)
!7558 = !DILocation(line: 1993, column: 64, scope: !7557)
!7559 = !DILocation(line: 1994, column: 6, scope: !7557)
!7560 = !DILocation(line: 1994, column: 14, scope: !7557)
!7561 = !DILocation(line: 1993, column: 12, scope: !7557)
!7562 = !DILocation(line: 1993, column: 11, scope: !7512)
!7563 = !DILocation(line: 1995, column: 2, scope: !7557)
!7564 = !DILocation(line: 1997, column: 7, scope: !7512)
!7565 = !DILocation(line: 1997, column: 15, scope: !7512)
!7566 = !DILocation(line: 1997, column: 24, scope: !7512)
!7567 = !DILocation(line: 1998, column: 49, scope: !7512)
!7568 = !DILocation(line: 1998, column: 55, scope: !7512)
!7569 = !DILocation(line: 1998, column: 63, scope: !7512)
!7570 = !DILocation(line: 1998, column: 17, scope: !7512)
!7571 = !DILocation(line: 1998, column: 15, scope: !7512)
!7572 = !DILocation(line: 1999, column: 11, scope: !7573)
!7573 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 1999, column: 11)
!7574 = !DILocation(line: 1999, column: 11, scope: !7512)
!7575 = !DILocation(line: 2001, column: 8, scope: !7576)
!7576 = distinct !DILexicalBlock(scope: !7573, file: !3, line: 2000, column: 2)
!7577 = !DILocation(line: 2002, column: 8, scope: !7578)
!7578 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 2002, column: 8)
!7579 = !DILocation(line: 2002, column: 14, scope: !7578)
!7580 = !DILocation(line: 2002, column: 8, scope: !7576)
!7581 = !DILocation(line: 2003, column: 41, scope: !7578)
!7582 = !DILocation(line: 2003, column: 50, scope: !7578)
!7583 = !DILocation(line: 2003, column: 6, scope: !7578)
!7584 = !DILocation(line: 2004, column: 2, scope: !7576)
!7585 = !DILocation(line: 2005, column: 5, scope: !7512)
!7586 = !DILocation(line: 1969, column: 53, scope: !7509)
!7587 = !DILocation(line: 1969, column: 61, scope: !7509)
!7588 = !DILocation(line: 1969, column: 51, scope: !7509)
!7589 = !DILocation(line: 1969, column: 3, scope: !7509)
!7590 = distinct !{!7590, !7510, !7591}
!7591 = !DILocation(line: 2005, column: 5, scope: !7504)
!7592 = !DILocation(line: 2007, column: 10, scope: !7437)
!7593 = !DILocation(line: 2007, column: 3, scope: !7437)
!7594 = !DILocation(line: 2008, column: 1, scope: !7437)
!7595 = distinct !DISubprogram(name: "child_would_conflict_in_lacc", scope: !3, file: !3, line: 1877, type: !7596, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7596 = !DISubroutineType(types: !7597)
!7597 = !{!1815, !2999, !1752, !1752, !6737}
!7598 = !DILocalVariable(name: "lacc", arg: 1, scope: !7595, file: !3, line: 1877, type: !2999)
!7599 = !DILocation(line: 1877, column: 46, scope: !7595)
!7600 = !DILocalVariable(name: "norm_offset", arg: 2, scope: !7595, file: !3, line: 1877, type: !1752)
!7601 = !DILocation(line: 1877, column: 66, scope: !7595)
!7602 = !DILocalVariable(name: "size", arg: 3, scope: !7595, file: !3, line: 1878, type: !1752)
!7603 = !DILocation(line: 1878, column: 24, scope: !7595)
!7604 = !DILocalVariable(name: "exact_match", arg: 4, scope: !7595, file: !3, line: 1878, type: !6737)
!7605 = !DILocation(line: 1878, column: 46, scope: !7595)
!7606 = !DILocalVariable(name: "child", scope: !7595, file: !3, line: 1880, type: !2999)
!7607 = !DILocation(line: 1880, column: 18, scope: !7595)
!7608 = !DILocation(line: 1882, column: 16, scope: !7609)
!7609 = distinct !DILexicalBlock(scope: !7595, file: !3, line: 1882, column: 3)
!7610 = !DILocation(line: 1882, column: 22, scope: !7609)
!7611 = !DILocation(line: 1882, column: 14, scope: !7609)
!7612 = !DILocation(line: 1882, column: 8, scope: !7609)
!7613 = !DILocation(line: 1882, column: 35, scope: !7614)
!7614 = distinct !DILexicalBlock(scope: !7609, file: !3, line: 1882, column: 3)
!7615 = !DILocation(line: 1882, column: 3, scope: !7609)
!7616 = !DILocation(line: 1884, column: 11, scope: !7617)
!7617 = distinct !DILexicalBlock(scope: !7618, file: !3, line: 1884, column: 11)
!7618 = distinct !DILexicalBlock(scope: !7614, file: !3, line: 1883, column: 5)
!7619 = !DILocation(line: 1884, column: 18, scope: !7617)
!7620 = !DILocation(line: 1884, column: 28, scope: !7617)
!7621 = !DILocation(line: 1884, column: 25, scope: !7617)
!7622 = !DILocation(line: 1884, column: 40, scope: !7617)
!7623 = !DILocation(line: 1884, column: 43, scope: !7617)
!7624 = !DILocation(line: 1884, column: 50, scope: !7617)
!7625 = !DILocation(line: 1884, column: 58, scope: !7617)
!7626 = !DILocation(line: 1884, column: 55, scope: !7617)
!7627 = !DILocation(line: 1884, column: 11, scope: !7618)
!7628 = !DILocation(line: 1886, column: 19, scope: !7629)
!7629 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 1885, column: 2)
!7630 = !DILocation(line: 1886, column: 5, scope: !7629)
!7631 = !DILocation(line: 1886, column: 17, scope: !7629)
!7632 = !DILocation(line: 1887, column: 4, scope: !7629)
!7633 = !DILocation(line: 1890, column: 11, scope: !7634)
!7634 = distinct !DILexicalBlock(scope: !7618, file: !3, line: 1890, column: 11)
!7635 = !DILocation(line: 1890, column: 18, scope: !7634)
!7636 = !DILocation(line: 1890, column: 27, scope: !7634)
!7637 = !DILocation(line: 1890, column: 41, scope: !7634)
!7638 = !DILocation(line: 1890, column: 39, scope: !7634)
!7639 = !DILocation(line: 1890, column: 25, scope: !7634)
!7640 = !DILocation(line: 1891, column: 4, scope: !7634)
!7641 = !DILocation(line: 1891, column: 7, scope: !7634)
!7642 = !DILocation(line: 1891, column: 14, scope: !7634)
!7643 = !DILocation(line: 1891, column: 23, scope: !7634)
!7644 = !DILocation(line: 1891, column: 30, scope: !7634)
!7645 = !DILocation(line: 1891, column: 21, scope: !7634)
!7646 = !DILocation(line: 1891, column: 37, scope: !7634)
!7647 = !DILocation(line: 1891, column: 35, scope: !7634)
!7648 = !DILocation(line: 1890, column: 11, scope: !7618)
!7649 = !DILocation(line: 1892, column: 2, scope: !7634)
!7650 = !DILocation(line: 1893, column: 5, scope: !7618)
!7651 = !DILocation(line: 1882, column: 50, scope: !7614)
!7652 = !DILocation(line: 1882, column: 57, scope: !7614)
!7653 = !DILocation(line: 1882, column: 48, scope: !7614)
!7654 = !DILocation(line: 1882, column: 3, scope: !7614)
!7655 = distinct !{!7655, !7615, !7656}
!7656 = !DILocation(line: 1893, column: 5, scope: !7609)
!7657 = !DILocation(line: 1895, column: 3, scope: !7595)
!7658 = !DILocation(line: 1896, column: 1, scope: !7595)
!7659 = distinct !DISubprogram(name: "create_artificial_child_access", scope: !3, file: !3, line: 1905, type: !7660, scopeLine: 1907, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7660 = !DISubroutineType(types: !7661)
!7661 = !{!2999, !2999, !2999, !1752}
!7662 = !DILocalVariable(name: "parent", arg: 1, scope: !7659, file: !3, line: 1905, type: !2999)
!7663 = !DILocation(line: 1905, column: 48, scope: !7659)
!7664 = !DILocalVariable(name: "model", arg: 2, scope: !7659, file: !3, line: 1905, type: !2999)
!7665 = !DILocation(line: 1905, column: 71, scope: !7659)
!7666 = !DILocalVariable(name: "new_offset", arg: 3, scope: !7659, file: !3, line: 1906, type: !1752)
!7667 = !DILocation(line: 1906, column: 19, scope: !7659)
!7668 = !DILocalVariable(name: "access", scope: !7659, file: !3, line: 1908, type: !2999)
!7669 = !DILocation(line: 1908, column: 18, scope: !7659)
!7670 = !DILocalVariable(name: "child", scope: !7659, file: !3, line: 1909, type: !6737)
!7671 = !DILocation(line: 1909, column: 19, scope: !7659)
!7672 = !DILocalVariable(name: "expr", scope: !7659, file: !3, line: 1910, type: !1696)
!7673 = !DILocation(line: 1910, column: 8, scope: !7659)
!7674 = !DILocation(line: 1910, column: 15, scope: !7659)
!7675 = !DILocation(line: 1910, column: 23, scope: !7659)
!7676 = !DILocation(line: 1912, column: 3, scope: !7659)
!7677 = !DILocation(line: 1914, column: 37, scope: !7678)
!7678 = distinct !DILexicalBlock(scope: !7659, file: !3, line: 1914, column: 7)
!7679 = !DILocation(line: 1914, column: 55, scope: !7678)
!7680 = !DILocation(line: 1915, column: 9, scope: !7678)
!7681 = !DILocation(line: 1915, column: 16, scope: !7678)
!7682 = !DILocation(line: 1914, column: 8, scope: !7678)
!7683 = !DILocation(line: 1914, column: 7, scope: !7659)
!7684 = !DILocation(line: 1916, column: 5, scope: !7678)
!7685 = !DILocation(line: 1918, column: 42, scope: !7659)
!7686 = !DILocation(line: 1918, column: 30, scope: !7659)
!7687 = !DILocation(line: 1918, column: 12, scope: !7659)
!7688 = !DILocation(line: 1918, column: 10, scope: !7659)
!7689 = !DILocation(line: 1919, column: 11, scope: !7659)
!7690 = !DILocation(line: 1919, column: 3, scope: !7659)
!7691 = !DILocation(line: 1920, column: 18, scope: !7659)
!7692 = !DILocation(line: 1920, column: 26, scope: !7659)
!7693 = !DILocation(line: 1920, column: 3, scope: !7659)
!7694 = !DILocation(line: 1920, column: 11, scope: !7659)
!7695 = !DILocation(line: 1920, column: 16, scope: !7659)
!7696 = !DILocation(line: 1921, column: 18, scope: !7659)
!7697 = !DILocation(line: 1921, column: 3, scope: !7659)
!7698 = !DILocation(line: 1921, column: 11, scope: !7659)
!7699 = !DILocation(line: 1921, column: 16, scope: !7659)
!7700 = !DILocation(line: 1922, column: 20, scope: !7659)
!7701 = !DILocation(line: 1922, column: 3, scope: !7659)
!7702 = !DILocation(line: 1922, column: 11, scope: !7659)
!7703 = !DILocation(line: 1922, column: 18, scope: !7659)
!7704 = !DILocation(line: 1923, column: 18, scope: !7659)
!7705 = !DILocation(line: 1923, column: 25, scope: !7659)
!7706 = !DILocation(line: 1923, column: 3, scope: !7659)
!7707 = !DILocation(line: 1923, column: 11, scope: !7659)
!7708 = !DILocation(line: 1923, column: 16, scope: !7659)
!7709 = !DILocation(line: 1924, column: 18, scope: !7659)
!7710 = !DILocation(line: 1924, column: 25, scope: !7659)
!7711 = !DILocation(line: 1924, column: 3, scope: !7659)
!7712 = !DILocation(line: 1924, column: 11, scope: !7659)
!7713 = !DILocation(line: 1924, column: 16, scope: !7659)
!7714 = !DILocation(line: 1925, column: 3, scope: !7659)
!7715 = !DILocation(line: 1925, column: 11, scope: !7659)
!7716 = !DILocation(line: 1925, column: 21, scope: !7659)
!7717 = !DILocation(line: 1926, column: 3, scope: !7659)
!7718 = !DILocation(line: 1926, column: 11, scope: !7659)
!7719 = !DILocation(line: 1926, column: 20, scope: !7659)
!7720 = !DILocation(line: 1928, column: 12, scope: !7659)
!7721 = !DILocation(line: 1928, column: 20, scope: !7659)
!7722 = !DILocation(line: 1928, column: 9, scope: !7659)
!7723 = !DILocation(line: 1929, column: 3, scope: !7659)
!7724 = !DILocation(line: 1929, column: 11, scope: !7659)
!7725 = !DILocation(line: 1929, column: 10, scope: !7659)
!7726 = !DILocation(line: 1929, column: 17, scope: !7659)
!7727 = !DILocation(line: 1929, column: 22, scope: !7659)
!7728 = !DILocation(line: 1929, column: 21, scope: !7659)
!7729 = !DILocation(line: 1929, column: 30, scope: !7659)
!7730 = !DILocation(line: 1929, column: 39, scope: !7659)
!7731 = !DILocation(line: 1929, column: 37, scope: !7659)
!7732 = !DILocation(line: 0, scope: !7659)
!7733 = !DILocation(line: 1930, column: 16, scope: !7659)
!7734 = !DILocation(line: 1930, column: 15, scope: !7659)
!7735 = !DILocation(line: 1930, column: 24, scope: !7659)
!7736 = !DILocation(line: 1930, column: 11, scope: !7659)
!7737 = distinct !{!7737, !7723, !7735}
!7738 = !DILocation(line: 1932, column: 27, scope: !7659)
!7739 = !DILocation(line: 1932, column: 26, scope: !7659)
!7740 = !DILocation(line: 1932, column: 3, scope: !7659)
!7741 = !DILocation(line: 1932, column: 11, scope: !7659)
!7742 = !DILocation(line: 1932, column: 24, scope: !7659)
!7743 = !DILocation(line: 1933, column: 12, scope: !7659)
!7744 = !DILocation(line: 1933, column: 4, scope: !7659)
!7745 = !DILocation(line: 1933, column: 10, scope: !7659)
!7746 = !DILocation(line: 1935, column: 10, scope: !7659)
!7747 = !DILocation(line: 1935, column: 3, scope: !7659)
!7748 = !DILocation(line: 1936, column: 1, scope: !7659)
!7749 = distinct !DISubprogram(name: "analyze_access_subtree", scope: !3, file: !3, line: 1777, type: !7750, scopeLine: 1779, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7750 = !DISubroutineType(types: !7751)
!7751 = !{!1815, !2999, !1815, !1815, !1815}
!7752 = !DILocalVariable(name: "root", arg: 1, scope: !7749, file: !3, line: 1777, type: !2999)
!7753 = !DILocation(line: 1777, column: 40, scope: !7749)
!7754 = !DILocalVariable(name: "allow_replacements", arg: 2, scope: !7749, file: !3, line: 1777, type: !1815)
!7755 = !DILocation(line: 1777, column: 51, scope: !7749)
!7756 = !DILocalVariable(name: "mark_read", arg: 3, scope: !7749, file: !3, line: 1778, type: !1815)
!7757 = !DILocation(line: 1778, column: 9, scope: !7749)
!7758 = !DILocalVariable(name: "mark_write", arg: 4, scope: !7749, file: !3, line: 1778, type: !1815)
!7759 = !DILocation(line: 1778, column: 25, scope: !7749)
!7760 = !DILocalVariable(name: "child", scope: !7749, file: !3, line: 1780, type: !2999)
!7761 = !DILocation(line: 1780, column: 18, scope: !7749)
!7762 = !DILocalVariable(name: "limit", scope: !7749, file: !3, line: 1781, type: !1752)
!7763 = !DILocation(line: 1781, column: 17, scope: !7749)
!7764 = !DILocation(line: 1781, column: 25, scope: !7749)
!7765 = !DILocation(line: 1781, column: 31, scope: !7749)
!7766 = !DILocation(line: 1781, column: 40, scope: !7749)
!7767 = !DILocation(line: 1781, column: 46, scope: !7749)
!7768 = !DILocation(line: 1781, column: 38, scope: !7749)
!7769 = !DILocalVariable(name: "covered_to", scope: !7749, file: !3, line: 1782, type: !1752)
!7770 = !DILocation(line: 1782, column: 17, scope: !7749)
!7771 = !DILocation(line: 1782, column: 30, scope: !7749)
!7772 = !DILocation(line: 1782, column: 36, scope: !7749)
!7773 = !DILocalVariable(name: "scalar", scope: !7749, file: !3, line: 1783, type: !1815)
!7774 = !DILocation(line: 1783, column: 8, scope: !7749)
!7775 = !DILocation(line: 1783, column: 37, scope: !7749)
!7776 = !DILocation(line: 1783, column: 43, scope: !7749)
!7777 = !DILocation(line: 1783, column: 17, scope: !7749)
!7778 = !DILocalVariable(name: "hole", scope: !7749, file: !3, line: 1784, type: !1815)
!7779 = !DILocation(line: 1784, column: 8, scope: !7749)
!7780 = !DILocalVariable(name: "sth_created", scope: !7749, file: !3, line: 1784, type: !1815)
!7781 = !DILocation(line: 1784, column: 22, scope: !7749)
!7782 = !DILocalVariable(name: "direct_read", scope: !7749, file: !3, line: 1785, type: !1815)
!7783 = !DILocation(line: 1785, column: 8, scope: !7749)
!7784 = !DILocation(line: 1785, column: 22, scope: !7749)
!7785 = !DILocation(line: 1785, column: 28, scope: !7749)
!7786 = !DILocation(line: 1787, column: 7, scope: !7787)
!7787 = distinct !DILexicalBlock(scope: !7749, file: !3, line: 1787, column: 7)
!7788 = !DILocation(line: 1787, column: 7, scope: !7749)
!7789 = !DILocation(line: 1788, column: 5, scope: !7787)
!7790 = !DILocation(line: 1788, column: 11, scope: !7787)
!7791 = !DILocation(line: 1788, column: 20, scope: !7787)
!7792 = !DILocation(line: 1789, column: 12, scope: !7793)
!7793 = distinct !DILexicalBlock(scope: !7787, file: !3, line: 1789, column: 12)
!7794 = !DILocation(line: 1789, column: 18, scope: !7793)
!7795 = !DILocation(line: 1789, column: 12, scope: !7787)
!7796 = !DILocation(line: 1790, column: 15, scope: !7793)
!7797 = !DILocation(line: 1790, column: 5, scope: !7793)
!7798 = !DILocation(line: 1792, column: 7, scope: !7799)
!7799 = distinct !DILexicalBlock(scope: !7749, file: !3, line: 1792, column: 7)
!7800 = !DILocation(line: 1792, column: 7, scope: !7749)
!7801 = !DILocation(line: 1793, column: 5, scope: !7799)
!7802 = !DILocation(line: 1793, column: 11, scope: !7799)
!7803 = !DILocation(line: 1793, column: 21, scope: !7799)
!7804 = !DILocation(line: 1794, column: 12, scope: !7805)
!7805 = distinct !DILexicalBlock(scope: !7799, file: !3, line: 1794, column: 12)
!7806 = !DILocation(line: 1794, column: 18, scope: !7805)
!7807 = !DILocation(line: 1794, column: 12, scope: !7799)
!7808 = !DILocation(line: 1795, column: 16, scope: !7805)
!7809 = !DILocation(line: 1795, column: 5, scope: !7805)
!7810 = !DILocation(line: 1797, column: 7, scope: !7811)
!7811 = distinct !DILexicalBlock(scope: !7749, file: !3, line: 1797, column: 7)
!7812 = !DILocation(line: 1797, column: 13, scope: !7811)
!7813 = !DILocation(line: 1797, column: 7, scope: !7749)
!7814 = !DILocation(line: 1798, column: 24, scope: !7811)
!7815 = !DILocation(line: 1798, column: 5, scope: !7811)
!7816 = !DILocation(line: 1800, column: 7, scope: !7817)
!7817 = distinct !DILexicalBlock(scope: !7749, file: !3, line: 1800, column: 7)
!7818 = !DILocation(line: 1800, column: 26, scope: !7817)
!7819 = !DILocation(line: 1800, column: 65, scope: !7817)
!7820 = !DILocation(line: 1800, column: 71, scope: !7817)
!7821 = !DILocation(line: 1800, column: 29, scope: !7817)
!7822 = !DILocation(line: 1800, column: 7, scope: !7749)
!7823 = !DILocation(line: 1801, column: 24, scope: !7817)
!7824 = !DILocation(line: 1801, column: 5, scope: !7817)
!7825 = !DILocation(line: 1803, column: 16, scope: !7826)
!7826 = distinct !DILexicalBlock(scope: !7749, file: !3, line: 1803, column: 3)
!7827 = !DILocation(line: 1803, column: 22, scope: !7826)
!7828 = !DILocation(line: 1803, column: 14, scope: !7826)
!7829 = !DILocation(line: 1803, column: 8, scope: !7826)
!7830 = !DILocation(line: 1803, column: 35, scope: !7831)
!7831 = distinct !DILexicalBlock(scope: !7826, file: !3, line: 1803, column: 3)
!7832 = !DILocation(line: 1803, column: 3, scope: !7826)
!7833 = !DILocation(line: 1805, column: 12, scope: !7834)
!7834 = distinct !DILexicalBlock(scope: !7835, file: !3, line: 1805, column: 11)
!7835 = distinct !DILexicalBlock(scope: !7831, file: !3, line: 1804, column: 5)
!7836 = !DILocation(line: 1805, column: 17, scope: !7834)
!7837 = !DILocation(line: 1805, column: 20, scope: !7834)
!7838 = !DILocation(line: 1805, column: 27, scope: !7834)
!7839 = !DILocation(line: 1805, column: 36, scope: !7834)
!7840 = !DILocation(line: 1805, column: 34, scope: !7834)
!7841 = !DILocation(line: 1805, column: 11, scope: !7835)
!7842 = !DILocation(line: 1806, column: 7, scope: !7834)
!7843 = !DILocation(line: 1806, column: 2, scope: !7834)
!7844 = !DILocation(line: 1808, column: 16, scope: !7834)
!7845 = !DILocation(line: 1808, column: 23, scope: !7834)
!7846 = !DILocation(line: 1808, column: 13, scope: !7834)
!7847 = !DILocation(line: 1810, column: 46, scope: !7835)
!7848 = !DILocation(line: 1810, column: 53, scope: !7835)
!7849 = !DILocation(line: 1811, column: 11, scope: !7835)
!7850 = !DILocation(line: 1811, column: 22, scope: !7835)
!7851 = !DILocation(line: 1810, column: 22, scope: !7835)
!7852 = !DILocation(line: 1810, column: 19, scope: !7835)
!7853 = !DILocation(line: 1813, column: 38, scope: !7835)
!7854 = !DILocation(line: 1813, column: 45, scope: !7835)
!7855 = !DILocation(line: 1813, column: 7, scope: !7835)
!7856 = !DILocation(line: 1813, column: 13, scope: !7835)
!7857 = !DILocation(line: 1813, column: 35, scope: !7835)
!7858 = !DILocation(line: 1814, column: 16, scope: !7835)
!7859 = !DILocation(line: 1814, column: 23, scope: !7835)
!7860 = !DILocation(line: 1814, column: 15, scope: !7835)
!7861 = !DILocation(line: 1814, column: 12, scope: !7835)
!7862 = !DILocation(line: 1815, column: 5, scope: !7835)
!7863 = !DILocation(line: 1803, column: 50, scope: !7831)
!7864 = !DILocation(line: 1803, column: 57, scope: !7831)
!7865 = !DILocation(line: 1803, column: 48, scope: !7831)
!7866 = !DILocation(line: 1803, column: 3, scope: !7831)
!7867 = distinct !{!7867, !7832, !7868}
!7868 = !DILocation(line: 1815, column: 5, scope: !7826)
!7869 = !DILocation(line: 1817, column: 7, scope: !7870)
!7870 = distinct !DILexicalBlock(scope: !7749, file: !3, line: 1817, column: 7)
!7871 = !DILocation(line: 1817, column: 26, scope: !7870)
!7872 = !DILocation(line: 1817, column: 29, scope: !7870)
!7873 = !DILocation(line: 1817, column: 36, scope: !7870)
!7874 = !DILocation(line: 1817, column: 40, scope: !7870)
!7875 = !DILocation(line: 1817, column: 46, scope: !7870)
!7876 = !DILocation(line: 1818, column: 7, scope: !7870)
!7877 = !DILocation(line: 1818, column: 11, scope: !7870)
!7878 = !DILocation(line: 1818, column: 17, scope: !7870)
!7879 = !DILocation(line: 1819, column: 4, scope: !7870)
!7880 = !DILocation(line: 1819, column: 8, scope: !7870)
!7881 = !DILocation(line: 1819, column: 20, scope: !7870)
!7882 = !DILocation(line: 1819, column: 23, scope: !7870)
!7883 = !DILocation(line: 1819, column: 29, scope: !7870)
!7884 = !DILocation(line: 1824, column: 7, scope: !7870)
!7885 = !DILocation(line: 1824, column: 38, scope: !7870)
!7886 = !DILocation(line: 1824, column: 62, scope: !7870)
!7887 = !DILocation(line: 1824, column: 68, scope: !7870)
!7888 = !DILocation(line: 1825, column: 11, scope: !7870)
!7889 = !DILocation(line: 1825, column: 17, scope: !7870)
!7890 = !DILocation(line: 1824, column: 10, scope: !7870)
!7891 = !DILocation(line: 1817, column: 7, scope: !7749)
!7892 = !DILocation(line: 1827, column: 11, scope: !7893)
!7893 = distinct !DILexicalBlock(scope: !7894, file: !3, line: 1827, column: 11)
!7894 = distinct !DILexicalBlock(scope: !7870, file: !3, line: 1826, column: 5)
!7895 = !DILocation(line: 1827, column: 21, scope: !7893)
!7896 = !DILocation(line: 1827, column: 25, scope: !7893)
!7897 = !DILocation(line: 1827, column: 36, scope: !7893)
!7898 = !DILocation(line: 1827, column: 11, scope: !7894)
!7899 = !DILocation(line: 1829, column: 13, scope: !7900)
!7900 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1828, column: 2)
!7901 = !DILocation(line: 1829, column: 4, scope: !7900)
!7902 = !DILocation(line: 1830, column: 24, scope: !7900)
!7903 = !DILocation(line: 1830, column: 35, scope: !7900)
!7904 = !DILocation(line: 1830, column: 41, scope: !7900)
!7905 = !DILocation(line: 1830, column: 4, scope: !7900)
!7906 = !DILocation(line: 1831, column: 13, scope: !7900)
!7907 = !DILocation(line: 1832, column: 17, scope: !7900)
!7908 = !DILocation(line: 1832, column: 23, scope: !7900)
!7909 = !DILocation(line: 1832, column: 6, scope: !7900)
!7910 = !DILocation(line: 1832, column: 42, scope: !7900)
!7911 = !DILocation(line: 1832, column: 48, scope: !7900)
!7912 = !DILocation(line: 1832, column: 31, scope: !7900)
!7913 = !DILocation(line: 1831, column: 4, scope: !7900)
!7914 = !DILocation(line: 1833, column: 13, scope: !7900)
!7915 = !DILocation(line: 1833, column: 4, scope: !7900)
!7916 = !DILocation(line: 1834, column: 2, scope: !7900)
!7917 = !DILocation(line: 1836, column: 7, scope: !7894)
!7918 = !DILocation(line: 1836, column: 13, scope: !7894)
!7919 = !DILocation(line: 1836, column: 32, scope: !7894)
!7920 = !DILocation(line: 1837, column: 19, scope: !7894)
!7921 = !DILocation(line: 1838, column: 12, scope: !7894)
!7922 = !DILocation(line: 1839, column: 5, scope: !7894)
!7923 = !DILocation(line: 1840, column: 12, scope: !7924)
!7924 = distinct !DILexicalBlock(scope: !7870, file: !3, line: 1840, column: 12)
!7925 = !DILocation(line: 1840, column: 25, scope: !7924)
!7926 = !DILocation(line: 1840, column: 23, scope: !7924)
!7927 = !DILocation(line: 1840, column: 12, scope: !7870)
!7928 = !DILocation(line: 1841, column: 10, scope: !7924)
!7929 = !DILocation(line: 1841, column: 5, scope: !7924)
!7930 = !DILocation(line: 1843, column: 7, scope: !7931)
!7931 = distinct !DILexicalBlock(scope: !7749, file: !3, line: 1843, column: 7)
!7932 = !DILocation(line: 1843, column: 19, scope: !7931)
!7933 = !DILocation(line: 1843, column: 23, scope: !7931)
!7934 = !DILocation(line: 1843, column: 7, scope: !7749)
!7935 = !DILocation(line: 1845, column: 7, scope: !7936)
!7936 = distinct !DILexicalBlock(scope: !7931, file: !3, line: 1844, column: 5)
!7937 = !DILocation(line: 1845, column: 13, scope: !7936)
!7938 = !DILocation(line: 1845, column: 25, scope: !7936)
!7939 = !DILocation(line: 1846, column: 7, scope: !7936)
!7940 = !DILocation(line: 1848, column: 7, scope: !7941)
!7941 = distinct !DILexicalBlock(scope: !7749, file: !3, line: 1848, column: 7)
!7942 = !DILocation(line: 1848, column: 13, scope: !7941)
!7943 = !DILocation(line: 1848, column: 23, scope: !7941)
!7944 = !DILocation(line: 1848, column: 26, scope: !7941)
!7945 = !DILocation(line: 1848, column: 49, scope: !7941)
!7946 = !DILocation(line: 1848, column: 7, scope: !7749)
!7947 = !DILocation(line: 1849, column: 5, scope: !7941)
!7948 = !DILocation(line: 1849, column: 11, scope: !7941)
!7949 = !DILocation(line: 1849, column: 33, scope: !7941)
!7950 = !DILocation(line: 1850, column: 7, scope: !7951)
!7951 = distinct !DILexicalBlock(scope: !7749, file: !3, line: 1850, column: 7)
!7952 = !DILocation(line: 1850, column: 7, scope: !7749)
!7953 = !DILocation(line: 1851, column: 5, scope: !7951)
!7954 = !DILocation(line: 1852, column: 3, scope: !7749)
!7955 = !DILocation(line: 1853, column: 1, scope: !7749)
!7956 = distinct !DISubprogram(name: "expr_with_var_bounded_array_refs_p", scope: !3, file: !3, line: 1759, type: !5251, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7957 = !DILocalVariable(name: "expr", arg: 1, scope: !7956, file: !3, line: 1759, type: !1696)
!7958 = !DILocation(line: 1759, column: 42, scope: !7956)
!7959 = !DILocation(line: 1761, column: 3, scope: !7956)
!7960 = !DILocation(line: 1761, column: 31, scope: !7956)
!7961 = !DILocation(line: 1761, column: 10, scope: !7956)
!7962 = !DILocation(line: 1763, column: 11, scope: !7963)
!7963 = distinct !DILexicalBlock(scope: !7964, file: !3, line: 1763, column: 11)
!7964 = distinct !DILexicalBlock(scope: !7956, file: !3, line: 1762, column: 5)
!7965 = !DILocation(line: 1763, column: 28, scope: !7963)
!7966 = !DILocation(line: 1764, column: 4, scope: !7963)
!7967 = !DILocation(line: 1764, column: 44, scope: !7963)
!7968 = !DILocation(line: 1764, column: 23, scope: !7963)
!7969 = !DILocation(line: 1764, column: 8, scope: !7963)
!7970 = !DILocation(line: 1763, column: 11, scope: !7964)
!7971 = !DILocation(line: 1765, column: 2, scope: !7963)
!7972 = !DILocation(line: 1766, column: 14, scope: !7964)
!7973 = !DILocation(line: 1766, column: 12, scope: !7964)
!7974 = distinct !{!7974, !7959, !7975}
!7975 = !DILocation(line: 1767, column: 5, scope: !7956)
!7976 = !DILocation(line: 1768, column: 3, scope: !7956)
!7977 = !DILocation(line: 1769, column: 1, scope: !7956)
!7978 = distinct !DISubprogram(name: "dump_access_tree_1", scope: !3, file: !3, line: 377, type: !7979, scopeLine: 378, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!7979 = !DISubroutineType(types: !7980)
!7980 = !{null, !7048, !2999, !1693}
!7981 = !DILocalVariable(name: "f", arg: 1, scope: !7978, file: !3, line: 377, type: !7048)
!7982 = !DILocation(line: 377, column: 27, scope: !7978)
!7983 = !DILocalVariable(name: "access", arg: 2, scope: !7978, file: !3, line: 377, type: !2999)
!7984 = !DILocation(line: 377, column: 45, scope: !7978)
!7985 = !DILocalVariable(name: "level", arg: 3, scope: !7978, file: !3, line: 377, type: !1693)
!7986 = !DILocation(line: 377, column: 57, scope: !7978)
!7987 = !DILocation(line: 379, column: 3, scope: !7978)
!7988 = !DILocalVariable(name: "i", scope: !7989, file: !3, line: 381, type: !1693)
!7989 = distinct !DILexicalBlock(scope: !7978, file: !3, line: 380, column: 5)
!7990 = !DILocation(line: 381, column: 11, scope: !7989)
!7991 = !DILocation(line: 383, column: 14, scope: !7992)
!7992 = distinct !DILexicalBlock(scope: !7989, file: !3, line: 383, column: 7)
!7993 = !DILocation(line: 383, column: 12, scope: !7992)
!7994 = !DILocation(line: 383, column: 19, scope: !7995)
!7995 = distinct !DILexicalBlock(scope: !7992, file: !3, line: 383, column: 7)
!7996 = !DILocation(line: 383, column: 23, scope: !7995)
!7997 = !DILocation(line: 383, column: 21, scope: !7995)
!7998 = !DILocation(line: 383, column: 7, scope: !7992)
!7999 = !DILocation(line: 384, column: 15, scope: !7995)
!8000 = !DILocation(line: 384, column: 2, scope: !7995)
!8001 = !DILocation(line: 383, column: 31, scope: !7995)
!8002 = !DILocation(line: 383, column: 7, scope: !7995)
!8003 = distinct !{!8003, !7998, !8004}
!8004 = !DILocation(line: 384, column: 24, scope: !7992)
!8005 = !DILocation(line: 386, column: 20, scope: !7989)
!8006 = !DILocation(line: 386, column: 23, scope: !7989)
!8007 = !DILocation(line: 386, column: 7, scope: !7989)
!8008 = !DILocation(line: 388, column: 11, scope: !8009)
!8009 = distinct !DILexicalBlock(scope: !7989, file: !3, line: 388, column: 11)
!8010 = !DILocation(line: 388, column: 19, scope: !8009)
!8011 = !DILocation(line: 388, column: 11, scope: !7989)
!8012 = !DILocation(line: 389, column: 22, scope: !8009)
!8013 = !DILocation(line: 389, column: 25, scope: !8009)
!8014 = !DILocation(line: 389, column: 33, scope: !8009)
!8015 = !DILocation(line: 389, column: 46, scope: !8009)
!8016 = !DILocation(line: 389, column: 52, scope: !8009)
!8017 = !DILocation(line: 389, column: 2, scope: !8009)
!8018 = !DILocation(line: 391, column: 16, scope: !7989)
!8019 = !DILocation(line: 391, column: 24, scope: !7989)
!8020 = !DILocation(line: 391, column: 14, scope: !7989)
!8021 = !DILocation(line: 392, column: 5, scope: !7989)
!8022 = !DILocation(line: 393, column: 10, scope: !7978)
!8023 = distinct !{!8023, !7987, !8024}
!8024 = !DILocation(line: 393, column: 16, scope: !7978)
!8025 = !DILocation(line: 394, column: 1, scope: !7978)
!8026 = distinct !DISubprogram(name: "dump_access", scope: !3, file: !3, line: 343, type: !8027, scopeLine: 344, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8027 = !DISubroutineType(types: !8028)
!8028 = !{null, !7048, !2999, !1815}
!8029 = !DILocalVariable(name: "f", arg: 1, scope: !8026, file: !3, line: 343, type: !7048)
!8030 = !DILocation(line: 343, column: 20, scope: !8026)
!8031 = !DILocalVariable(name: "access", arg: 2, scope: !8026, file: !3, line: 343, type: !2999)
!8032 = !DILocation(line: 343, column: 38, scope: !8026)
!8033 = !DILocalVariable(name: "grp", arg: 3, scope: !8026, file: !3, line: 343, type: !1815)
!8034 = !DILocation(line: 343, column: 51, scope: !8026)
!8035 = !DILocation(line: 345, column: 12, scope: !8026)
!8036 = !DILocation(line: 345, column: 3, scope: !8026)
!8037 = !DILocation(line: 346, column: 12, scope: !8026)
!8038 = !DILocation(line: 346, column: 31, scope: !8026)
!8039 = !DILocation(line: 346, column: 3, scope: !8026)
!8040 = !DILocation(line: 347, column: 23, scope: !8026)
!8041 = !DILocation(line: 347, column: 26, scope: !8026)
!8042 = !DILocation(line: 347, column: 34, scope: !8026)
!8043 = !DILocation(line: 347, column: 3, scope: !8026)
!8044 = !DILocation(line: 348, column: 12, scope: !8026)
!8045 = !DILocation(line: 348, column: 55, scope: !8026)
!8046 = !DILocation(line: 348, column: 63, scope: !8026)
!8047 = !DILocation(line: 348, column: 3, scope: !8026)
!8048 = !DILocation(line: 349, column: 12, scope: !8026)
!8049 = !DILocation(line: 349, column: 52, scope: !8026)
!8050 = !DILocation(line: 349, column: 60, scope: !8026)
!8051 = !DILocation(line: 349, column: 3, scope: !8026)
!8052 = !DILocation(line: 350, column: 12, scope: !8026)
!8053 = !DILocation(line: 350, column: 3, scope: !8026)
!8054 = !DILocation(line: 351, column: 23, scope: !8026)
!8055 = !DILocation(line: 351, column: 26, scope: !8026)
!8056 = !DILocation(line: 351, column: 34, scope: !8026)
!8057 = !DILocation(line: 351, column: 3, scope: !8026)
!8058 = !DILocation(line: 352, column: 12, scope: !8026)
!8059 = !DILocation(line: 352, column: 3, scope: !8026)
!8060 = !DILocation(line: 353, column: 23, scope: !8026)
!8061 = !DILocation(line: 353, column: 26, scope: !8026)
!8062 = !DILocation(line: 353, column: 34, scope: !8026)
!8063 = !DILocation(line: 353, column: 3, scope: !8026)
!8064 = !DILocation(line: 354, column: 7, scope: !8065)
!8065 = distinct !DILexicalBlock(scope: !8026, file: !3, line: 354, column: 7)
!8066 = !DILocation(line: 354, column: 7, scope: !8026)
!8067 = !DILocation(line: 355, column: 14, scope: !8065)
!8068 = !DILocation(line: 361, column: 7, scope: !8065)
!8069 = !DILocation(line: 361, column: 15, scope: !8065)
!8070 = !DILocation(line: 361, column: 26, scope: !8065)
!8071 = !DILocation(line: 361, column: 34, scope: !8065)
!8072 = !DILocation(line: 362, column: 7, scope: !8065)
!8073 = !DILocation(line: 362, column: 15, scope: !8065)
!8074 = !DILocation(line: 362, column: 25, scope: !8065)
!8075 = !DILocation(line: 362, column: 33, scope: !8065)
!8076 = !DILocation(line: 363, column: 7, scope: !8065)
!8077 = !DILocation(line: 363, column: 15, scope: !8065)
!8078 = !DILocation(line: 363, column: 28, scope: !8065)
!8079 = !DILocation(line: 363, column: 36, scope: !8065)
!8080 = !DILocation(line: 364, column: 7, scope: !8065)
!8081 = !DILocation(line: 364, column: 15, scope: !8065)
!8082 = !DILocation(line: 364, column: 38, scope: !8065)
!8083 = !DILocation(line: 364, column: 46, scope: !8065)
!8084 = !DILocation(line: 365, column: 7, scope: !8065)
!8085 = !DILocation(line: 365, column: 15, scope: !8065)
!8086 = !DILocation(line: 365, column: 35, scope: !8065)
!8087 = !DILocation(line: 365, column: 43, scope: !8065)
!8088 = !DILocation(line: 366, column: 7, scope: !8065)
!8089 = !DILocation(line: 366, column: 15, scope: !8065)
!8090 = !DILocation(line: 355, column: 5, scope: !8065)
!8091 = !DILocation(line: 368, column: 14, scope: !8065)
!8092 = !DILocation(line: 370, column: 7, scope: !8065)
!8093 = !DILocation(line: 370, column: 15, scope: !8065)
!8094 = !DILocation(line: 370, column: 22, scope: !8065)
!8095 = !DILocation(line: 370, column: 30, scope: !8065)
!8096 = !DILocation(line: 371, column: 7, scope: !8065)
!8097 = !DILocation(line: 371, column: 15, scope: !8065)
!8098 = !DILocation(line: 368, column: 5, scope: !8065)
!8099 = !DILocation(line: 372, column: 1, scope: !8026)
!8100 = distinct !DISubprogram(name: "get_access_for_expr", scope: !3, file: !3, line: 2264, type: !6724, scopeLine: 2265, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8101 = !DILocalVariable(name: "expr", arg: 1, scope: !8100, file: !3, line: 2264, type: !1696)
!8102 = !DILocation(line: 2264, column: 27, scope: !8100)
!8103 = !DILocalVariable(name: "offset", scope: !8100, file: !3, line: 2266, type: !1752)
!8104 = !DILocation(line: 2266, column: 17, scope: !8100)
!8105 = !DILocalVariable(name: "size", scope: !8100, file: !3, line: 2266, type: !1752)
!8106 = !DILocation(line: 2266, column: 25, scope: !8100)
!8107 = !DILocalVariable(name: "max_size", scope: !8100, file: !3, line: 2266, type: !1752)
!8108 = !DILocation(line: 2266, column: 31, scope: !8100)
!8109 = !DILocalVariable(name: "base", scope: !8100, file: !3, line: 2267, type: !1696)
!8110 = !DILocation(line: 2267, column: 8, scope: !8100)
!8111 = !DILocation(line: 2272, column: 7, scope: !8112)
!8112 = distinct !DILexicalBlock(scope: !8100, file: !3, line: 2272, column: 7)
!8113 = !DILocation(line: 2272, column: 24, scope: !8112)
!8114 = !DILocation(line: 2272, column: 7, scope: !8100)
!8115 = !DILocation(line: 2273, column: 12, scope: !8112)
!8116 = !DILocation(line: 2273, column: 10, scope: !8112)
!8117 = !DILocation(line: 2273, column: 5, scope: !8112)
!8118 = !DILocation(line: 2275, column: 35, scope: !8100)
!8119 = !DILocation(line: 2275, column: 10, scope: !8100)
!8120 = !DILocation(line: 2275, column: 8, scope: !8100)
!8121 = !DILocation(line: 2276, column: 7, scope: !8122)
!8122 = distinct !DILexicalBlock(scope: !8100, file: !3, line: 2276, column: 7)
!8123 = !DILocation(line: 2276, column: 16, scope: !8122)
!8124 = !DILocation(line: 2276, column: 22, scope: !8122)
!8125 = !DILocation(line: 2276, column: 26, scope: !8122)
!8126 = !DILocation(line: 2276, column: 7, scope: !8100)
!8127 = !DILocation(line: 2277, column: 5, scope: !8122)
!8128 = !DILocation(line: 2279, column: 22, scope: !8129)
!8129 = distinct !DILexicalBlock(scope: !8100, file: !3, line: 2279, column: 7)
!8130 = !DILocation(line: 2279, column: 40, scope: !8129)
!8131 = !DILocation(line: 2279, column: 8, scope: !8129)
!8132 = !DILocation(line: 2279, column: 7, scope: !8100)
!8133 = !DILocation(line: 2280, column: 5, scope: !8129)
!8134 = !DILocation(line: 2282, column: 43, scope: !8100)
!8135 = !DILocation(line: 2282, column: 49, scope: !8100)
!8136 = !DILocation(line: 2282, column: 57, scope: !8100)
!8137 = !DILocation(line: 2282, column: 10, scope: !8100)
!8138 = !DILocation(line: 2282, column: 3, scope: !8100)
!8139 = !DILocation(line: 2283, column: 1, scope: !8100)
!8140 = distinct !DISubprogram(name: "get_access_replacement", scope: !3, file: !3, line: 1707, type: !8141, scopeLine: 1708, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8141 = !DISubroutineType(types: !8142)
!8142 = !{!1696, !2999}
!8143 = !DILocalVariable(name: "access", arg: 1, scope: !8140, file: !3, line: 1707, type: !2999)
!8144 = !DILocation(line: 1707, column: 40, scope: !8140)
!8145 = !DILocation(line: 1709, column: 3, scope: !8140)
!8146 = !DILocation(line: 1711, column: 8, scope: !8147)
!8147 = distinct !DILexicalBlock(scope: !8140, file: !3, line: 1711, column: 7)
!8148 = !DILocation(line: 1711, column: 16, scope: !8147)
!8149 = !DILocation(line: 1711, column: 7, scope: !8140)
!8150 = !DILocation(line: 1712, column: 59, scope: !8147)
!8151 = !DILocation(line: 1712, column: 32, scope: !8147)
!8152 = !DILocation(line: 1712, column: 5, scope: !8147)
!8153 = !DILocation(line: 1712, column: 13, scope: !8147)
!8154 = !DILocation(line: 1712, column: 30, scope: !8147)
!8155 = !DILocation(line: 1713, column: 10, scope: !8140)
!8156 = !DILocation(line: 1713, column: 18, scope: !8140)
!8157 = !DILocation(line: 1713, column: 3, scope: !8140)
!8158 = distinct !DISubprogram(name: "generate_subtree_copies", scope: !3, file: !3, line: 2166, type: !8159, scopeLine: 2171, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8159 = !DISubroutineType(types: !8160)
!8160 = !{null, !2999, !1696, !1752, !1752, !1752, !3917, !1815, !1815}
!8161 = !DILocalVariable(name: "access", arg: 1, scope: !8158, file: !3, line: 2166, type: !2999)
!8162 = !DILocation(line: 2166, column: 41, scope: !8158)
!8163 = !DILocalVariable(name: "agg", arg: 2, scope: !8158, file: !3, line: 2166, type: !1696)
!8164 = !DILocation(line: 2166, column: 54, scope: !8158)
!8165 = !DILocalVariable(name: "top_offset", arg: 3, scope: !8158, file: !3, line: 2167, type: !1752)
!8166 = !DILocation(line: 2167, column: 19, scope: !8158)
!8167 = !DILocalVariable(name: "start_offset", arg: 4, scope: !8158, file: !3, line: 2168, type: !1752)
!8168 = !DILocation(line: 2168, column: 19, scope: !8158)
!8169 = !DILocalVariable(name: "chunk_size", arg: 5, scope: !8158, file: !3, line: 2168, type: !1752)
!8170 = !DILocation(line: 2168, column: 47, scope: !8158)
!8171 = !DILocalVariable(name: "gsi", arg: 6, scope: !8158, file: !3, line: 2169, type: !3917)
!8172 = !DILocation(line: 2169, column: 27, scope: !8158)
!8173 = !DILocalVariable(name: "write", arg: 7, scope: !8158, file: !3, line: 2169, type: !1815)
!8174 = !DILocation(line: 2169, column: 37, scope: !8158)
!8175 = !DILocalVariable(name: "insert_after", arg: 8, scope: !8158, file: !3, line: 2170, type: !1815)
!8176 = !DILocation(line: 2170, column: 10, scope: !8158)
!8177 = !DILocation(line: 2172, column: 3, scope: !8158)
!8178 = !DILocalVariable(name: "expr", scope: !8179, file: !3, line: 2174, type: !1696)
!8179 = distinct !DILexicalBlock(scope: !8158, file: !3, line: 2173, column: 5)
!8180 = !DILocation(line: 2174, column: 12, scope: !8179)
!8181 = !DILocation(line: 2174, column: 19, scope: !8179)
!8182 = !DILocation(line: 2176, column: 11, scope: !8183)
!8183 = distinct !DILexicalBlock(scope: !8179, file: !3, line: 2176, column: 11)
!8184 = !DILocation(line: 2176, column: 22, scope: !8183)
!8185 = !DILocation(line: 2176, column: 25, scope: !8183)
!8186 = !DILocation(line: 2176, column: 33, scope: !8183)
!8187 = !DILocation(line: 2176, column: 43, scope: !8183)
!8188 = !DILocation(line: 2176, column: 58, scope: !8183)
!8189 = !DILocation(line: 2176, column: 56, scope: !8183)
!8190 = !DILocation(line: 2176, column: 40, scope: !8183)
!8191 = !DILocation(line: 2176, column: 11, scope: !8179)
!8192 = !DILocation(line: 2177, column: 2, scope: !8183)
!8193 = !DILocation(line: 2179, column: 11, scope: !8194)
!8194 = distinct !DILexicalBlock(scope: !8179, file: !3, line: 2179, column: 11)
!8195 = !DILocation(line: 2179, column: 19, scope: !8194)
!8196 = !DILocation(line: 2180, column: 4, scope: !8194)
!8197 = !DILocation(line: 2180, column: 8, scope: !8194)
!8198 = !DILocation(line: 2180, column: 19, scope: !8194)
!8199 = !DILocation(line: 2181, column: 8, scope: !8194)
!8200 = !DILocation(line: 2181, column: 11, scope: !8194)
!8201 = !DILocation(line: 2181, column: 19, scope: !8194)
!8202 = !DILocation(line: 2181, column: 28, scope: !8194)
!8203 = !DILocation(line: 2181, column: 36, scope: !8194)
!8204 = !DILocation(line: 2181, column: 26, scope: !8194)
!8205 = !DILocation(line: 2181, column: 43, scope: !8194)
!8206 = !DILocation(line: 2181, column: 41, scope: !8194)
!8207 = !DILocation(line: 2179, column: 11, scope: !8179)
!8208 = !DILocalVariable(name: "repl", scope: !8209, file: !3, line: 2183, type: !1696)
!8209 = distinct !DILexicalBlock(scope: !8194, file: !3, line: 2182, column: 2)
!8210 = !DILocation(line: 2183, column: 9, scope: !8209)
!8211 = !DILocation(line: 2183, column: 40, scope: !8209)
!8212 = !DILocation(line: 2183, column: 16, scope: !8209)
!8213 = !DILocalVariable(name: "ref_found", scope: !8209, file: !3, line: 2184, type: !1815)
!8214 = !DILocation(line: 2184, column: 9, scope: !8209)
!8215 = !DILocalVariable(name: "stmt", scope: !8209, file: !3, line: 2185, type: !2024)
!8216 = !DILocation(line: 2185, column: 11, scope: !8209)
!8217 = !DILocation(line: 2187, column: 45, scope: !8209)
!8218 = !DILocation(line: 2188, column: 11, scope: !8209)
!8219 = !DILocation(line: 2188, column: 19, scope: !8209)
!8220 = !DILocation(line: 2188, column: 28, scope: !8209)
!8221 = !DILocation(line: 2188, column: 26, scope: !8209)
!8222 = !DILocation(line: 2189, column: 11, scope: !8209)
!8223 = !DILocation(line: 2189, column: 19, scope: !8209)
!8224 = !DILocation(line: 2187, column: 16, scope: !8209)
!8225 = !DILocation(line: 2187, column: 14, scope: !8209)
!8226 = !DILocation(line: 2190, column: 4, scope: !8209)
!8227 = !DILocation(line: 2192, column: 8, scope: !8228)
!8228 = distinct !DILexicalBlock(scope: !8209, file: !3, line: 2192, column: 8)
!8229 = !DILocation(line: 2192, column: 8, scope: !8209)
!8230 = !DILocation(line: 2194, column: 12, scope: !8231)
!8231 = distinct !DILexicalBlock(scope: !8232, file: !3, line: 2194, column: 12)
!8232 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 2193, column: 6)
!8233 = !DILocation(line: 2194, column: 20, scope: !8231)
!8234 = !DILocation(line: 2194, column: 12, scope: !8232)
!8235 = !DILocation(line: 2195, column: 36, scope: !8231)
!8236 = !DILocation(line: 2195, column: 41, scope: !8231)
!8237 = !DILocation(line: 2196, column: 9, scope: !8231)
!8238 = !DILocation(line: 2196, column: 8, scope: !8231)
!8239 = !DILocation(line: 2197, column: 8, scope: !8231)
!8240 = !DILocation(line: 2195, column: 10, scope: !8231)
!8241 = !DILocation(line: 2195, column: 8, scope: !8231)
!8242 = !DILocation(line: 2195, column: 3, scope: !8231)
!8243 = !DILocation(line: 2199, column: 15, scope: !8232)
!8244 = !DILocation(line: 2199, column: 13, scope: !8232)
!8245 = !DILocation(line: 2200, column: 6, scope: !8232)
!8246 = !DILocation(line: 2203, column: 8, scope: !8247)
!8247 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 2202, column: 6)
!8248 = !DILocation(line: 2203, column: 31, scope: !8247)
!8249 = !DILocation(line: 2204, column: 12, scope: !8250)
!8250 = distinct !DILexicalBlock(scope: !8247, file: !3, line: 2204, column: 12)
!8251 = !DILocation(line: 2204, column: 20, scope: !8250)
!8252 = !DILocation(line: 2204, column: 12, scope: !8247)
!8253 = !DILocation(line: 2205, column: 36, scope: !8250)
!8254 = !DILocation(line: 2205, column: 41, scope: !8250)
!8255 = !DILocation(line: 2206, column: 9, scope: !8250)
!8256 = !DILocation(line: 2206, column: 8, scope: !8250)
!8257 = !DILocation(line: 2207, column: 8, scope: !8250)
!8258 = !DILocation(line: 2205, column: 10, scope: !8250)
!8259 = !DILocation(line: 2205, column: 8, scope: !8250)
!8260 = !DILocation(line: 2205, column: 3, scope: !8250)
!8261 = !DILocation(line: 2209, column: 15, scope: !8247)
!8262 = !DILocation(line: 2209, column: 13, scope: !8247)
!8263 = !DILocation(line: 2212, column: 8, scope: !8264)
!8264 = distinct !DILexicalBlock(scope: !8209, file: !3, line: 2212, column: 8)
!8265 = !DILocation(line: 2212, column: 8, scope: !8209)
!8266 = !DILocation(line: 2213, column: 24, scope: !8264)
!8267 = !DILocation(line: 2213, column: 29, scope: !8264)
!8268 = !DILocation(line: 2213, column: 6, scope: !8264)
!8269 = !DILocation(line: 2215, column: 25, scope: !8264)
!8270 = !DILocation(line: 2215, column: 30, scope: !8264)
!8271 = !DILocation(line: 2215, column: 6, scope: !8264)
!8272 = !DILocation(line: 2216, column: 17, scope: !8209)
!8273 = !DILocation(line: 2216, column: 4, scope: !8209)
!8274 = !DILocation(line: 2217, column: 28, scope: !8209)
!8275 = !DILocation(line: 2218, column: 2, scope: !8209)
!8276 = !DILocation(line: 2220, column: 11, scope: !8277)
!8277 = distinct !DILexicalBlock(scope: !8179, file: !3, line: 2220, column: 11)
!8278 = !DILocation(line: 2220, column: 19, scope: !8277)
!8279 = !DILocation(line: 2220, column: 11, scope: !8179)
!8280 = !DILocation(line: 2221, column: 27, scope: !8277)
!8281 = !DILocation(line: 2221, column: 35, scope: !8277)
!8282 = !DILocation(line: 2221, column: 48, scope: !8277)
!8283 = !DILocation(line: 2221, column: 53, scope: !8277)
!8284 = !DILocation(line: 2222, column: 6, scope: !8277)
!8285 = !DILocation(line: 2222, column: 20, scope: !8277)
!8286 = !DILocation(line: 2222, column: 32, scope: !8277)
!8287 = !DILocation(line: 2223, column: 6, scope: !8277)
!8288 = !DILocation(line: 2223, column: 13, scope: !8277)
!8289 = !DILocation(line: 2221, column: 2, scope: !8277)
!8290 = !DILocation(line: 2225, column: 16, scope: !8179)
!8291 = !DILocation(line: 2225, column: 24, scope: !8179)
!8292 = !DILocation(line: 2225, column: 14, scope: !8179)
!8293 = !DILocation(line: 2226, column: 5, scope: !8179)
!8294 = !DILocation(line: 2227, column: 10, scope: !8158)
!8295 = distinct !{!8295, !8177, !8296}
!8296 = !DILocation(line: 2227, column: 16, scope: !8158)
!8297 = !DILocation(line: 2228, column: 1, scope: !8158)
!8298 = distinct !DISubprogram(name: "get_var_base_offset_size_access", scope: !3, file: !3, line: 467, type: !6219, scopeLine: 469, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8299 = !DILocalVariable(name: "base", arg: 1, scope: !8298, file: !3, line: 467, type: !1696)
!8300 = !DILocation(line: 467, column: 39, scope: !8298)
!8301 = !DILocalVariable(name: "offset", arg: 2, scope: !8298, file: !3, line: 467, type: !1752)
!8302 = !DILocation(line: 467, column: 59, scope: !8298)
!8303 = !DILocalVariable(name: "size", arg: 3, scope: !8298, file: !3, line: 468, type: !1752)
!8304 = !DILocation(line: 468, column: 20, scope: !8298)
!8305 = !DILocalVariable(name: "access", scope: !8298, file: !3, line: 470, type: !2999)
!8306 = !DILocation(line: 470, column: 18, scope: !8298)
!8307 = !DILocation(line: 472, column: 37, scope: !8298)
!8308 = !DILocation(line: 472, column: 12, scope: !8298)
!8309 = !DILocation(line: 472, column: 10, scope: !8298)
!8310 = !DILocation(line: 473, column: 3, scope: !8298)
!8311 = !DILocation(line: 473, column: 10, scope: !8298)
!8312 = !DILocation(line: 473, column: 17, scope: !8298)
!8313 = !DILocation(line: 473, column: 21, scope: !8298)
!8314 = !DILocation(line: 473, column: 29, scope: !8298)
!8315 = !DILocation(line: 473, column: 38, scope: !8298)
!8316 = !DILocation(line: 473, column: 46, scope: !8298)
!8317 = !DILocation(line: 473, column: 36, scope: !8298)
!8318 = !DILocation(line: 473, column: 54, scope: !8298)
!8319 = !DILocation(line: 473, column: 51, scope: !8298)
!8320 = !DILocation(line: 0, scope: !8298)
!8321 = !DILocation(line: 474, column: 14, scope: !8298)
!8322 = !DILocation(line: 474, column: 22, scope: !8298)
!8323 = !DILocation(line: 474, column: 12, scope: !8298)
!8324 = distinct !{!8324, !8310, !8322}
!8325 = !DILocation(line: 475, column: 8, scope: !8326)
!8326 = distinct !DILexicalBlock(scope: !8298, file: !3, line: 475, column: 7)
!8327 = !DILocation(line: 475, column: 7, scope: !8298)
!8328 = !DILocation(line: 476, column: 5, scope: !8326)
!8329 = !DILocation(line: 478, column: 34, scope: !8298)
!8330 = !DILocation(line: 478, column: 42, scope: !8298)
!8331 = !DILocation(line: 478, column: 50, scope: !8298)
!8332 = !DILocation(line: 478, column: 10, scope: !8298)
!8333 = !DILocation(line: 478, column: 3, scope: !8298)
!8334 = !DILocation(line: 479, column: 1, scope: !8298)
!8335 = distinct !DISubprogram(name: "find_access_in_subtree", scope: !3, file: !3, line: 433, type: !8336, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8336 = !DISubroutineType(types: !8337)
!8337 = !{!2999, !2999, !1752, !1752}
!8338 = !DILocalVariable(name: "access", arg: 1, scope: !8335, file: !3, line: 433, type: !2999)
!8339 = !DILocation(line: 433, column: 40, scope: !8335)
!8340 = !DILocalVariable(name: "offset", arg: 2, scope: !8335, file: !3, line: 433, type: !1752)
!8341 = !DILocation(line: 433, column: 62, scope: !8335)
!8342 = !DILocalVariable(name: "size", arg: 3, scope: !8335, file: !3, line: 434, type: !1752)
!8343 = !DILocation(line: 434, column: 18, scope: !8335)
!8344 = !DILocation(line: 436, column: 3, scope: !8335)
!8345 = !DILocation(line: 436, column: 10, scope: !8335)
!8346 = !DILocation(line: 436, column: 17, scope: !8335)
!8347 = !DILocation(line: 436, column: 21, scope: !8335)
!8348 = !DILocation(line: 436, column: 29, scope: !8335)
!8349 = !DILocation(line: 436, column: 39, scope: !8335)
!8350 = !DILocation(line: 436, column: 36, scope: !8335)
!8351 = !DILocation(line: 436, column: 46, scope: !8335)
!8352 = !DILocation(line: 436, column: 49, scope: !8335)
!8353 = !DILocation(line: 436, column: 57, scope: !8335)
!8354 = !DILocation(line: 436, column: 65, scope: !8335)
!8355 = !DILocation(line: 436, column: 62, scope: !8335)
!8356 = !DILocation(line: 0, scope: !8335)
!8357 = !DILocalVariable(name: "child", scope: !8358, file: !3, line: 438, type: !2999)
!8358 = distinct !DILexicalBlock(scope: !8335, file: !3, line: 437, column: 5)
!8359 = !DILocation(line: 438, column: 22, scope: !8358)
!8360 = !DILocation(line: 438, column: 30, scope: !8358)
!8361 = !DILocation(line: 438, column: 38, scope: !8358)
!8362 = !DILocation(line: 440, column: 7, scope: !8358)
!8363 = !DILocation(line: 440, column: 14, scope: !8358)
!8364 = !DILocation(line: 440, column: 20, scope: !8358)
!8365 = !DILocation(line: 440, column: 24, scope: !8358)
!8366 = !DILocation(line: 440, column: 31, scope: !8358)
!8367 = !DILocation(line: 440, column: 40, scope: !8358)
!8368 = !DILocation(line: 440, column: 47, scope: !8358)
!8369 = !DILocation(line: 440, column: 38, scope: !8358)
!8370 = !DILocation(line: 440, column: 55, scope: !8358)
!8371 = !DILocation(line: 440, column: 52, scope: !8358)
!8372 = !DILocation(line: 0, scope: !8358)
!8373 = !DILocation(line: 441, column: 10, scope: !8358)
!8374 = !DILocation(line: 441, column: 17, scope: !8358)
!8375 = !DILocation(line: 441, column: 8, scope: !8358)
!8376 = distinct !{!8376, !8362, !8374}
!8377 = !DILocation(line: 442, column: 16, scope: !8358)
!8378 = !DILocation(line: 442, column: 14, scope: !8358)
!8379 = distinct !{!8379, !8344, !8380}
!8380 = !DILocation(line: 443, column: 5, scope: !8335)
!8381 = !DILocation(line: 445, column: 10, scope: !8335)
!8382 = !DILocation(line: 445, column: 3, scope: !8335)
!8383 = distinct !DISubprogram(name: "create_access_replacement", scope: !3, file: !3, line: 1656, type: !8141, scopeLine: 1657, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8384 = !DILocalVariable(name: "access", arg: 1, scope: !8383, file: !3, line: 1656, type: !2999)
!8385 = !DILocation(line: 1656, column: 43, scope: !8383)
!8386 = !DILocalVariable(name: "repl", scope: !8383, file: !3, line: 1658, type: !1696)
!8387 = !DILocation(line: 1658, column: 8, scope: !8383)
!8388 = !DILocation(line: 1660, column: 26, scope: !8383)
!8389 = !DILocation(line: 1660, column: 34, scope: !8383)
!8390 = !DILocation(line: 1660, column: 10, scope: !8383)
!8391 = !DILocation(line: 1660, column: 8, scope: !8383)
!8392 = !DILocation(line: 1661, column: 16, scope: !8383)
!8393 = !DILocation(line: 1661, column: 3, scope: !8383)
!8394 = !DILocation(line: 1662, column: 23, scope: !8383)
!8395 = !DILocation(line: 1662, column: 3, scope: !8383)
!8396 = !DILocation(line: 1663, column: 26, scope: !8383)
!8397 = !DILocation(line: 1663, column: 3, scope: !8383)
!8398 = !DILocation(line: 1665, column: 8, scope: !8399)
!8399 = distinct !DILexicalBlock(scope: !8383, file: !3, line: 1665, column: 7)
!8400 = !DILocation(line: 1665, column: 16, scope: !8399)
!8401 = !DILocation(line: 1666, column: 7, scope: !8399)
!8402 = !DILocation(line: 1666, column: 11, scope: !8399)
!8403 = !DILocation(line: 1666, column: 36, scope: !8399)
!8404 = !DILocation(line: 1667, column: 4, scope: !8399)
!8405 = !DILocation(line: 1667, column: 7, scope: !8399)
!8406 = !DILocation(line: 1667, column: 32, scope: !8399)
!8407 = !DILocation(line: 1665, column: 7, scope: !8383)
!8408 = !DILocation(line: 1668, column: 5, scope: !8399)
!8409 = !DILocation(line: 1668, column: 30, scope: !8399)
!8410 = !DILocation(line: 1670, column: 33, scope: !8383)
!8411 = !DILocation(line: 1670, column: 3, scope: !8383)
!8412 = !DILocation(line: 1670, column: 31, scope: !8383)
!8413 = !DILocation(line: 1671, column: 3, scope: !8383)
!8414 = !DILocation(line: 1671, column: 26, scope: !8383)
!8415 = !DILocation(line: 1672, column: 27, scope: !8383)
!8416 = !DILocation(line: 1672, column: 3, scope: !8383)
!8417 = !DILocation(line: 1672, column: 25, scope: !8383)
!8418 = !DILocation(line: 1674, column: 7, scope: !8419)
!8419 = distinct !DILexicalBlock(scope: !8383, file: !3, line: 1674, column: 7)
!8420 = !DILocation(line: 1675, column: 7, scope: !8419)
!8421 = !DILocation(line: 1675, column: 11, scope: !8419)
!8422 = !DILocation(line: 1676, column: 7, scope: !8419)
!8423 = !DILocation(line: 1676, column: 11, scope: !8419)
!8424 = !DILocation(line: 1674, column: 7, scope: !8383)
!8425 = !DILocalVariable(name: "pretty_name", scope: !8426, file: !3, line: 1678, type: !1962)
!8426 = distinct !DILexicalBlock(scope: !8419, file: !3, line: 1677, column: 5)
!8427 = !DILocation(line: 1678, column: 13, scope: !8426)
!8428 = !DILocation(line: 1678, column: 44, scope: !8426)
!8429 = !DILocation(line: 1678, column: 52, scope: !8426)
!8430 = !DILocation(line: 1678, column: 27, scope: !8426)
!8431 = !DILocation(line: 1680, column: 42, scope: !8426)
!8432 = !DILocation(line: 1680, column: 26, scope: !8426)
!8433 = !DILocation(line: 1680, column: 7, scope: !8426)
!8434 = !DILocation(line: 1680, column: 24, scope: !8426)
!8435 = !DILocation(line: 1681, column: 7, scope: !8426)
!8436 = !DILocation(line: 1683, column: 7, scope: !8426)
!8437 = !DILocation(line: 1684, column: 7, scope: !8426)
!8438 = !DILocation(line: 1684, column: 38, scope: !8426)
!8439 = !DILocation(line: 1685, column: 32, scope: !8426)
!8440 = !DILocation(line: 1685, column: 7, scope: !8426)
!8441 = !DILocation(line: 1685, column: 30, scope: !8426)
!8442 = !DILocation(line: 1686, column: 5, scope: !8426)
!8443 = !DILocation(line: 1688, column: 5, scope: !8419)
!8444 = !DILocation(line: 1688, column: 28, scope: !8419)
!8445 = !DILocation(line: 1690, column: 7, scope: !8446)
!8446 = distinct !DILexicalBlock(scope: !8383, file: !3, line: 1690, column: 7)
!8447 = !DILocation(line: 1690, column: 7, scope: !8383)
!8448 = !DILocation(line: 1692, column: 16, scope: !8449)
!8449 = distinct !DILexicalBlock(scope: !8446, file: !3, line: 1691, column: 5)
!8450 = !DILocation(line: 1692, column: 7, scope: !8449)
!8451 = !DILocation(line: 1693, column: 27, scope: !8449)
!8452 = !DILocation(line: 1693, column: 38, scope: !8449)
!8453 = !DILocation(line: 1693, column: 46, scope: !8449)
!8454 = !DILocation(line: 1693, column: 7, scope: !8449)
!8455 = !DILocation(line: 1694, column: 16, scope: !8449)
!8456 = !DILocation(line: 1695, column: 20, scope: !8449)
!8457 = !DILocation(line: 1695, column: 28, scope: !8449)
!8458 = !DILocation(line: 1695, column: 9, scope: !8449)
!8459 = !DILocation(line: 1695, column: 47, scope: !8449)
!8460 = !DILocation(line: 1695, column: 55, scope: !8449)
!8461 = !DILocation(line: 1695, column: 36, scope: !8449)
!8462 = !DILocation(line: 1694, column: 7, scope: !8449)
!8463 = !DILocation(line: 1696, column: 27, scope: !8449)
!8464 = !DILocation(line: 1696, column: 38, scope: !8449)
!8465 = !DILocation(line: 1696, column: 7, scope: !8449)
!8466 = !DILocation(line: 1697, column: 16, scope: !8449)
!8467 = !DILocation(line: 1697, column: 7, scope: !8449)
!8468 = !DILocation(line: 1698, column: 5, scope: !8449)
!8469 = !DILocation(line: 1699, column: 25, scope: !8383)
!8470 = !DILocation(line: 1701, column: 10, scope: !8383)
!8471 = !DILocation(line: 1701, column: 3, scope: !8383)
!8472 = distinct !DISubprogram(name: "get_var_ann", scope: !5226, file: !5226, line: 141, type: !8473, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8473 = !DISubroutineType(types: !8474)
!8474 = !{!8475, !1696}
!8475 = !DIDerivedType(tag: DW_TAG_typedef, name: "var_ann_t", file: !2363, line: 297, baseType: !2361)
!8476 = !DILocalVariable(name: "var", arg: 1, scope: !8472, file: !5226, line: 141, type: !1696)
!8477 = !DILocation(line: 141, column: 19, scope: !8472)
!8478 = !DILocalVariable(name: "p", scope: !8472, file: !5226, line: 143, type: !8479)
!8479 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8475, size: 64)
!8480 = !DILocation(line: 143, column: 14, scope: !8472)
!8481 = !DILocation(line: 143, column: 18, scope: !8472)
!8482 = !DILocation(line: 144, column: 3, scope: !8472)
!8483 = !DILocation(line: 145, column: 11, scope: !8472)
!8484 = !DILocation(line: 145, column: 10, scope: !8472)
!8485 = !DILocation(line: 145, column: 16, scope: !8472)
!8486 = !DILocation(line: 145, column: 15, scope: !8472)
!8487 = !DILocation(line: 145, column: 36, scope: !8472)
!8488 = !DILocation(line: 145, column: 20, scope: !8472)
!8489 = !DILocation(line: 145, column: 3, scope: !8472)
!8490 = distinct !DISubprogram(name: "make_fancy_name", scope: !3, file: !3, line: 1368, type: !8491, scopeLine: 1369, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8491 = !DISubroutineType(types: !8492)
!8492 = !{!1962, !1696}
!8493 = !DILocalVariable(name: "expr", arg: 1, scope: !8490, file: !3, line: 1368, type: !1696)
!8494 = !DILocation(line: 1368, column: 23, scope: !8490)
!8495 = !DILocation(line: 1370, column: 22, scope: !8490)
!8496 = !DILocation(line: 1370, column: 3, scope: !8490)
!8497 = !DILocation(line: 1371, column: 3, scope: !8490)
!8498 = !DILocation(line: 1372, column: 10, scope: !8490)
!8499 = !DILocation(line: 1372, column: 3, scope: !8490)
!8500 = distinct !DISubprogram(name: "make_fancy_name_1", scope: !3, file: !3, line: 1323, type: !8501, scopeLine: 1324, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8501 = !DISubroutineType(types: !8502)
!8502 = !{null, !1696}
!8503 = !DILocalVariable(name: "expr", arg: 1, scope: !8500, file: !3, line: 1323, type: !1696)
!8504 = !DILocation(line: 1323, column: 25, scope: !8500)
!8505 = !DILocalVariable(name: "buffer", scope: !8500, file: !3, line: 1325, type: !8506)
!8506 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1795, size: 256, elements: !8507)
!8507 = !{!8508}
!8508 = !DISubrange(count: 32)
!8509 = !DILocation(line: 1325, column: 8, scope: !8500)
!8510 = !DILocalVariable(name: "index", scope: !8500, file: !3, line: 1326, type: !1696)
!8511 = !DILocation(line: 1326, column: 8, scope: !8500)
!8512 = !DILocation(line: 1328, column: 7, scope: !8513)
!8513 = distinct !DILexicalBlock(scope: !8500, file: !3, line: 1328, column: 7)
!8514 = !DILocation(line: 1328, column: 7, scope: !8500)
!8515 = !DILocation(line: 1330, column: 29, scope: !8516)
!8516 = distinct !DILexicalBlock(scope: !8513, file: !3, line: 1329, column: 5)
!8517 = !DILocation(line: 1330, column: 7, scope: !8516)
!8518 = !DILocation(line: 1331, column: 7, scope: !8516)
!8519 = !DILocation(line: 1334, column: 11, scope: !8500)
!8520 = !DILocation(line: 1334, column: 3, scope: !8500)
!8521 = !DILocation(line: 1337, column: 26, scope: !8522)
!8522 = distinct !DILexicalBlock(scope: !8500, file: !3, line: 1335, column: 5)
!8523 = !DILocation(line: 1337, column: 7, scope: !8522)
!8524 = !DILocation(line: 1338, column: 7, scope: !8522)
!8525 = !DILocation(line: 1339, column: 29, scope: !8522)
!8526 = !DILocation(line: 1339, column: 7, scope: !8522)
!8527 = !DILocation(line: 1340, column: 7, scope: !8522)
!8528 = !DILocation(line: 1343, column: 26, scope: !8522)
!8529 = !DILocation(line: 1343, column: 7, scope: !8522)
!8530 = !DILocation(line: 1344, column: 7, scope: !8522)
!8531 = !DILocation(line: 1347, column: 15, scope: !8522)
!8532 = !DILocation(line: 1347, column: 13, scope: !8522)
!8533 = !DILocation(line: 1348, column: 11, scope: !8534)
!8534 = distinct !DILexicalBlock(scope: !8522, file: !3, line: 1348, column: 11)
!8535 = !DILocation(line: 1348, column: 29, scope: !8534)
!8536 = !DILocation(line: 1348, column: 11, scope: !8522)
!8537 = !DILocation(line: 1349, column: 2, scope: !8534)
!8538 = !DILocation(line: 1350, column: 16, scope: !8522)
!8539 = !DILocation(line: 1350, column: 49, scope: !8522)
!8540 = !DILocation(line: 1350, column: 7, scope: !8522)
!8541 = !DILocation(line: 1351, column: 7, scope: !8522)
!8542 = !DILocation(line: 1353, column: 7, scope: !8522)
!8543 = !DILocation(line: 1358, column: 7, scope: !8522)
!8544 = !DILocation(line: 1359, column: 7, scope: !8522)
!8545 = !DILocation(line: 1361, column: 7, scope: !8522)
!8546 = !DILocation(line: 1363, column: 1, scope: !8500)
!8547 = distinct !DISubprogram(name: "make_fancy_decl_name", scope: !3, file: !3, line: 1305, type: !8501, scopeLine: 1306, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8548 = !DILocalVariable(name: "decl", arg: 1, scope: !8547, file: !3, line: 1305, type: !1696)
!8549 = !DILocation(line: 1305, column: 28, scope: !8547)
!8550 = !DILocalVariable(name: "buffer", scope: !8547, file: !3, line: 1307, type: !8506)
!8551 = !DILocation(line: 1307, column: 8, scope: !8547)
!8552 = !DILocalVariable(name: "name", scope: !8547, file: !3, line: 1309, type: !1696)
!8553 = !DILocation(line: 1309, column: 8, scope: !8547)
!8554 = !DILocation(line: 1309, column: 15, scope: !8547)
!8555 = !DILocation(line: 1310, column: 7, scope: !8556)
!8556 = distinct !DILexicalBlock(scope: !8547, file: !3, line: 1310, column: 7)
!8557 = !DILocation(line: 1310, column: 7, scope: !8547)
!8558 = !DILocation(line: 1311, column: 5, scope: !8556)
!8559 = !DILocation(line: 1315, column: 16, scope: !8560)
!8560 = distinct !DILexicalBlock(scope: !8556, file: !3, line: 1314, column: 5)
!8561 = !DILocation(line: 1315, column: 31, scope: !8560)
!8562 = !DILocation(line: 1315, column: 7, scope: !8560)
!8563 = !DILocation(line: 1316, column: 7, scope: !8560)
!8564 = !DILocation(line: 1318, column: 1, scope: !8547)
!8565 = distinct !DISubprogram(name: "gimple_location", scope: !1458, file: !1458, line: 1139, type: !8566, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8566 = !DISubroutineType(types: !8567)
!8567 = !{!1823, !5514}
!8568 = !DILocalVariable(name: "g", arg: 1, scope: !8565, file: !1458, line: 1139, type: !5514)
!8569 = !DILocation(line: 1139, column: 31, scope: !8565)
!8570 = !DILocation(line: 1141, column: 10, scope: !8565)
!8571 = !DILocation(line: 1141, column: 13, scope: !8565)
!8572 = !DILocation(line: 1141, column: 20, scope: !8565)
!8573 = !DILocation(line: 1141, column: 3, scope: !8565)
!8574 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !1458, file: !1458, line: 1694, type: !5555, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8575 = !DILocalVariable(name: "gs", arg: 1, scope: !8574, file: !1458, line: 1694, type: !5514)
!8576 = !DILocation(line: 1694, column: 33, scope: !8574)
!8577 = !DILocation(line: 1697, column: 21, scope: !8574)
!8578 = !DILocation(line: 1697, column: 10, scope: !8574)
!8579 = !DILocation(line: 1697, column: 3, scope: !8574)
!8580 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !1458, file: !1458, line: 1727, type: !5555, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8581 = !DILocalVariable(name: "gs", arg: 1, scope: !8580, file: !1458, line: 1727, type: !5514)
!8582 = !DILocation(line: 1727, column: 34, scope: !8580)
!8583 = !DILocation(line: 1730, column: 21, scope: !8580)
!8584 = !DILocation(line: 1730, column: 10, scope: !8580)
!8585 = !DILocation(line: 1730, column: 3, scope: !8580)
!8586 = distinct !DISubprogram(name: "sra_modify_constructor_assign", scope: !3, file: !3, line: 2500, type: !8587, scopeLine: 2501, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8587 = !DISubroutineType(types: !8588)
!8588 = !{!712, !3551, !3917}
!8589 = !DILocalVariable(name: "stmt", arg: 1, scope: !8586, file: !3, line: 2500, type: !3551)
!8590 = !DILocation(line: 2500, column: 40, scope: !8586)
!8591 = !DILocalVariable(name: "gsi", arg: 2, scope: !8586, file: !3, line: 2500, type: !3917)
!8592 = !DILocation(line: 2500, column: 68, scope: !8586)
!8593 = !DILocalVariable(name: "lhs", scope: !8586, file: !3, line: 2502, type: !1696)
!8594 = !DILocation(line: 2502, column: 8, scope: !8586)
!8595 = !DILocation(line: 2502, column: 34, scope: !8586)
!8596 = !DILocation(line: 2502, column: 33, scope: !8586)
!8597 = !DILocation(line: 2502, column: 14, scope: !8586)
!8598 = !DILocalVariable(name: "acc", scope: !8586, file: !3, line: 2503, type: !2999)
!8599 = !DILocation(line: 2503, column: 18, scope: !8586)
!8600 = !DILocation(line: 2505, column: 30, scope: !8586)
!8601 = !DILocation(line: 2505, column: 9, scope: !8586)
!8602 = !DILocation(line: 2505, column: 7, scope: !8586)
!8603 = !DILocation(line: 2506, column: 8, scope: !8604)
!8604 = distinct !DILexicalBlock(scope: !8586, file: !3, line: 2506, column: 7)
!8605 = !DILocation(line: 2506, column: 7, scope: !8586)
!8606 = !DILocation(line: 2507, column: 5, scope: !8604)
!8607 = !DILocation(line: 2509, column: 7, scope: !8608)
!8608 = distinct !DILexicalBlock(scope: !8586, file: !3, line: 2509, column: 7)
!8609 = !DILocation(line: 2510, column: 52, scope: !8608)
!8610 = !DILocation(line: 2509, column: 7, scope: !8586)
!8611 = !DILocation(line: 2514, column: 34, scope: !8612)
!8612 = distinct !DILexicalBlock(scope: !8613, file: !3, line: 2514, column: 11)
!8613 = distinct !DILexicalBlock(scope: !8608, file: !3, line: 2511, column: 5)
!8614 = !DILocation(line: 2514, column: 11, scope: !8612)
!8615 = !DILocation(line: 2514, column: 11, scope: !8613)
!8616 = !DILocation(line: 2515, column: 27, scope: !8612)
!8617 = !DILocation(line: 2515, column: 32, scope: !8612)
!8618 = !DILocation(line: 2515, column: 45, scope: !8612)
!8619 = !DILocation(line: 2515, column: 50, scope: !8612)
!8620 = !DILocation(line: 2515, column: 65, scope: !8612)
!8621 = !DILocation(line: 2515, column: 2, scope: !8612)
!8622 = !DILocation(line: 2517, column: 7, scope: !8613)
!8623 = !DILocation(line: 2520, column: 7, scope: !8624)
!8624 = distinct !DILexicalBlock(scope: !8586, file: !3, line: 2520, column: 7)
!8625 = !DILocation(line: 2520, column: 12, scope: !8624)
!8626 = !DILocation(line: 2520, column: 7, scope: !8586)
!8627 = !DILocation(line: 2522, column: 31, scope: !8628)
!8628 = distinct !DILexicalBlock(scope: !8624, file: !3, line: 2521, column: 5)
!8629 = !DILocation(line: 2522, column: 36, scope: !8628)
!8630 = !DILocation(line: 2522, column: 7, scope: !8628)
!8631 = !DILocation(line: 2523, column: 26, scope: !8628)
!8632 = !DILocation(line: 2523, column: 25, scope: !8628)
!8633 = !DILocation(line: 2523, column: 7, scope: !8628)
!8634 = !DILocation(line: 2524, column: 19, scope: !8628)
!8635 = !DILocation(line: 2524, column: 7, scope: !8628)
!8636 = !DILocation(line: 2525, column: 7, scope: !8628)
!8637 = !DILocation(line: 2529, column: 31, scope: !8638)
!8638 = distinct !DILexicalBlock(scope: !8624, file: !3, line: 2528, column: 5)
!8639 = !DILocation(line: 2529, column: 36, scope: !8638)
!8640 = !DILocation(line: 2529, column: 7, scope: !8638)
!8641 = !DILocation(line: 2530, column: 7, scope: !8638)
!8642 = !DILocation(line: 2532, column: 1, scope: !8586)
!8643 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !1458, file: !1458, line: 1714, type: !8644, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8644 = !DISubroutineType(types: !8645)
!8645 = !{null, !2024, !1696}
!8646 = !DILocalVariable(name: "gs", arg: 1, scope: !8643, file: !1458, line: 1714, type: !2024)
!8647 = !DILocation(line: 1714, column: 31, scope: !8643)
!8648 = !DILocalVariable(name: "lhs", arg: 2, scope: !8643, file: !1458, line: 1714, type: !1696)
!8649 = !DILocation(line: 1714, column: 40, scope: !8643)
!8650 = !DILocation(line: 1717, column: 18, scope: !8643)
!8651 = !DILocation(line: 1717, column: 25, scope: !8643)
!8652 = !DILocation(line: 1717, column: 3, scope: !8643)
!8653 = !DILocation(line: 1719, column: 7, scope: !8654)
!8654 = distinct !DILexicalBlock(scope: !8643, file: !1458, line: 1719, column: 7)
!8655 = !DILocation(line: 1719, column: 11, scope: !8654)
!8656 = !DILocation(line: 1719, column: 14, scope: !8654)
!8657 = !DILocation(line: 1719, column: 30, scope: !8654)
!8658 = !DILocation(line: 1719, column: 7, scope: !8643)
!8659 = !DILocation(line: 1720, column: 31, scope: !8654)
!8660 = !DILocation(line: 1720, column: 5, scope: !8654)
!8661 = !DILocation(line: 1720, column: 29, scope: !8654)
!8662 = !DILocation(line: 1721, column: 1, scope: !8643)
!8663 = distinct !DISubprogram(name: "access_has_children_p", scope: !3, file: !3, line: 409, type: !7023, scopeLine: 410, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8664 = !DILocalVariable(name: "acc", arg: 1, scope: !8663, file: !3, line: 409, type: !2999)
!8665 = !DILocation(line: 409, column: 39, scope: !8663)
!8666 = !DILocation(line: 411, column: 10, scope: !8663)
!8667 = !DILocation(line: 411, column: 14, scope: !8663)
!8668 = !DILocation(line: 411, column: 17, scope: !8663)
!8669 = !DILocation(line: 411, column: 22, scope: !8663)
!8670 = !DILocation(line: 0, scope: !8663)
!8671 = !DILocation(line: 411, column: 3, scope: !8663)
!8672 = distinct !DISubprogram(name: "ref_expr_for_all_replacements_p", scope: !3, file: !3, line: 2128, type: !8673, scopeLine: 2130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8673 = !DISubroutineType(types: !8674)
!8674 = !{!1815, !2999, !1696, !1752}
!8675 = !DILocalVariable(name: "access", arg: 1, scope: !8672, file: !3, line: 2128, type: !2999)
!8676 = !DILocation(line: 2128, column: 49, scope: !8672)
!8677 = !DILocalVariable(name: "agg", arg: 2, scope: !8672, file: !3, line: 2128, type: !1696)
!8678 = !DILocation(line: 2128, column: 62, scope: !8672)
!8679 = !DILocalVariable(name: "top_offset", arg: 3, scope: !8672, file: !3, line: 2129, type: !1752)
!8680 = !DILocation(line: 2129, column: 20, scope: !8672)
!8681 = !DILocation(line: 2131, column: 3, scope: !8672)
!8682 = !DILocation(line: 2133, column: 11, scope: !8683)
!8683 = distinct !DILexicalBlock(scope: !8684, file: !3, line: 2133, column: 11)
!8684 = distinct !DILexicalBlock(scope: !8672, file: !3, line: 2132, column: 5)
!8685 = !DILocation(line: 2133, column: 19, scope: !8683)
!8686 = !DILocation(line: 2134, column: 4, scope: !8683)
!8687 = !DILocation(line: 2134, column: 36, scope: !8683)
!8688 = !DILocation(line: 2135, column: 9, scope: !8683)
!8689 = !DILocation(line: 2135, column: 17, scope: !8683)
!8690 = !DILocation(line: 2135, column: 26, scope: !8683)
!8691 = !DILocation(line: 2135, column: 24, scope: !8683)
!8692 = !DILocation(line: 2136, column: 9, scope: !8683)
!8693 = !DILocation(line: 2136, column: 17, scope: !8683)
!8694 = !DILocation(line: 2134, column: 8, scope: !8683)
!8695 = !DILocation(line: 2133, column: 11, scope: !8684)
!8696 = !DILocation(line: 2137, column: 2, scope: !8683)
!8697 = !DILocation(line: 2139, column: 11, scope: !8698)
!8698 = distinct !DILexicalBlock(scope: !8684, file: !3, line: 2139, column: 11)
!8699 = !DILocation(line: 2139, column: 19, scope: !8698)
!8700 = !DILocation(line: 2140, column: 4, scope: !8698)
!8701 = !DILocation(line: 2140, column: 41, scope: !8698)
!8702 = !DILocation(line: 2140, column: 49, scope: !8698)
!8703 = !DILocation(line: 2140, column: 62, scope: !8698)
!8704 = !DILocation(line: 2141, column: 13, scope: !8698)
!8705 = !DILocation(line: 2140, column: 8, scope: !8698)
!8706 = !DILocation(line: 2139, column: 11, scope: !8684)
!8707 = !DILocation(line: 2142, column: 2, scope: !8698)
!8708 = !DILocation(line: 2144, column: 16, scope: !8684)
!8709 = !DILocation(line: 2144, column: 24, scope: !8684)
!8710 = !DILocation(line: 2144, column: 14, scope: !8684)
!8711 = !DILocation(line: 2145, column: 5, scope: !8684)
!8712 = !DILocation(line: 2146, column: 10, scope: !8672)
!8713 = distinct !{!8713, !8681, !8714}
!8714 = !DILocation(line: 2146, column: 16, scope: !8672)
!8715 = !DILocation(line: 2148, column: 3, scope: !8672)
!8716 = !DILocation(line: 2149, column: 1, scope: !8672)
!8717 = distinct !DISubprogram(name: "handle_unscalarized_data_in_subtree", scope: !3, file: !3, line: 2393, type: !8718, scopeLine: 2395, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8718 = !DISubroutineType(types: !8719)
!8719 = !{!1527, !2999, !1696, !3917}
!8720 = !DILocalVariable(name: "top_racc", arg: 1, scope: !8717, file: !3, line: 2393, type: !2999)
!8721 = !DILocation(line: 2393, column: 53, scope: !8717)
!8722 = !DILocalVariable(name: "lhs", arg: 2, scope: !8717, file: !3, line: 2393, type: !1696)
!8723 = !DILocation(line: 2393, column: 68, scope: !8717)
!8724 = !DILocalVariable(name: "gsi", arg: 3, scope: !8717, file: !3, line: 2394, type: !3917)
!8725 = !DILocation(line: 2394, column: 32, scope: !8717)
!8726 = !DILocation(line: 2396, column: 7, scope: !8727)
!8727 = distinct !DILexicalBlock(scope: !8717, file: !3, line: 2396, column: 7)
!8728 = !DILocation(line: 2396, column: 17, scope: !8727)
!8729 = !DILocation(line: 2396, column: 7, scope: !8717)
!8730 = !DILocation(line: 2398, column: 32, scope: !8731)
!8731 = distinct !DILexicalBlock(scope: !8727, file: !3, line: 2397, column: 5)
!8732 = !DILocation(line: 2398, column: 42, scope: !8731)
!8733 = !DILocation(line: 2398, column: 55, scope: !8731)
!8734 = !DILocation(line: 2398, column: 65, scope: !8731)
!8735 = !DILocation(line: 2399, column: 11, scope: !8731)
!8736 = !DILocation(line: 2398, column: 7, scope: !8731)
!8737 = !DILocation(line: 2400, column: 7, scope: !8731)
!8738 = !DILocation(line: 2404, column: 32, scope: !8739)
!8739 = distinct !DILexicalBlock(scope: !8727, file: !3, line: 2403, column: 5)
!8740 = !DILocation(line: 2404, column: 42, scope: !8739)
!8741 = !DILocation(line: 2404, column: 55, scope: !8739)
!8742 = !DILocation(line: 2404, column: 60, scope: !8739)
!8743 = !DILocation(line: 2404, column: 70, scope: !8739)
!8744 = !DILocation(line: 2405, column: 17, scope: !8739)
!8745 = !DILocation(line: 2404, column: 7, scope: !8739)
!8746 = !DILocation(line: 2406, column: 7, scope: !8739)
!8747 = !DILocation(line: 2408, column: 1, scope: !8717)
!8748 = distinct !DISubprogram(name: "load_assign_lhs_subreplacements", scope: !3, file: !3, line: 2421, type: !8749, scopeLine: 2428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8749 = !DISubroutineType(types: !8750)
!8750 = !{null, !2999, !2999, !1752, !1752, !3917, !3917, !8751, !1696}
!8751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1527, size: 64)
!8752 = !DILocalVariable(name: "lacc", arg: 1, scope: !8748, file: !3, line: 2421, type: !2999)
!8753 = !DILocation(line: 2421, column: 49, scope: !8748)
!8754 = !DILocalVariable(name: "top_racc", arg: 2, scope: !8748, file: !3, line: 2421, type: !2999)
!8755 = !DILocation(line: 2421, column: 70, scope: !8748)
!8756 = !DILocalVariable(name: "left_offset", arg: 3, scope: !8748, file: !3, line: 2422, type: !1752)
!8757 = !DILocation(line: 2422, column: 20, scope: !8748)
!8758 = !DILocalVariable(name: "right_offset", arg: 4, scope: !8748, file: !3, line: 2423, type: !1752)
!8759 = !DILocation(line: 2423, column: 20, scope: !8748)
!8760 = !DILocalVariable(name: "old_gsi", arg: 5, scope: !8748, file: !3, line: 2424, type: !3917)
!8761 = !DILocation(line: 2424, column: 28, scope: !8748)
!8762 = !DILocalVariable(name: "new_gsi", arg: 6, scope: !8748, file: !3, line: 2425, type: !3917)
!8763 = !DILocation(line: 2425, column: 28, scope: !8748)
!8764 = !DILocalVariable(name: "refreshed", arg: 7, scope: !8748, file: !3, line: 2426, type: !8751)
!8765 = !DILocation(line: 2426, column: 39, scope: !8748)
!8766 = !DILocalVariable(name: "lhs", arg: 8, scope: !8748, file: !3, line: 2427, type: !1696)
!8767 = !DILocation(line: 2427, column: 11, scope: !8748)
!8768 = !DILocalVariable(name: "loc", scope: !8748, file: !3, line: 2429, type: !1823)
!8769 = !DILocation(line: 2429, column: 14, scope: !8748)
!8770 = !DILocation(line: 2429, column: 20, scope: !8748)
!8771 = !DILocation(line: 2430, column: 3, scope: !8748)
!8772 = !DILocation(line: 2432, column: 11, scope: !8773)
!8773 = distinct !DILexicalBlock(scope: !8774, file: !3, line: 2432, column: 11)
!8774 = distinct !DILexicalBlock(scope: !8748, file: !3, line: 2431, column: 5)
!8775 = !DILocation(line: 2432, column: 17, scope: !8773)
!8776 = !DILocation(line: 2432, column: 11, scope: !8774)
!8777 = !DILocalVariable(name: "racc", scope: !8778, file: !3, line: 2434, type: !2999)
!8778 = distinct !DILexicalBlock(scope: !8773, file: !3, line: 2433, column: 2)
!8779 = !DILocation(line: 2434, column: 19, scope: !8778)
!8780 = !DILocalVariable(name: "offset", scope: !8778, file: !3, line: 2435, type: !1752)
!8781 = !DILocation(line: 2435, column: 18, scope: !8778)
!8782 = !DILocation(line: 2435, column: 27, scope: !8778)
!8783 = !DILocation(line: 2435, column: 33, scope: !8778)
!8784 = !DILocation(line: 2435, column: 42, scope: !8778)
!8785 = !DILocation(line: 2435, column: 40, scope: !8778)
!8786 = !DILocation(line: 2435, column: 56, scope: !8778)
!8787 = !DILocation(line: 2435, column: 54, scope: !8778)
!8788 = !DILocalVariable(name: "stmt", scope: !8778, file: !3, line: 2436, type: !2024)
!8789 = !DILocation(line: 2436, column: 11, scope: !8778)
!8790 = !DILocalVariable(name: "rhs", scope: !8778, file: !3, line: 2437, type: !1696)
!8791 = !DILocation(line: 2437, column: 9, scope: !8778)
!8792 = !DILocation(line: 2439, column: 35, scope: !8778)
!8793 = !DILocation(line: 2439, column: 45, scope: !8778)
!8794 = !DILocation(line: 2439, column: 53, scope: !8778)
!8795 = !DILocation(line: 2439, column: 59, scope: !8778)
!8796 = !DILocation(line: 2439, column: 11, scope: !8778)
!8797 = !DILocation(line: 2439, column: 9, scope: !8778)
!8798 = !DILocation(line: 2440, column: 8, scope: !8799)
!8799 = distinct !DILexicalBlock(scope: !8778, file: !3, line: 2440, column: 8)
!8800 = !DILocation(line: 2440, column: 13, scope: !8799)
!8801 = !DILocation(line: 2440, column: 16, scope: !8799)
!8802 = !DILocation(line: 2440, column: 22, scope: !8799)
!8803 = !DILocation(line: 2440, column: 8, scope: !8778)
!8804 = !DILocation(line: 2442, column: 38, scope: !8805)
!8805 = distinct !DILexicalBlock(scope: !8799, file: !3, line: 2441, column: 6)
!8806 = !DILocation(line: 2442, column: 14, scope: !8805)
!8807 = !DILocation(line: 2442, column: 12, scope: !8805)
!8808 = !DILocation(line: 2443, column: 40, scope: !8809)
!8809 = distinct !DILexicalBlock(scope: !8805, file: !3, line: 2443, column: 12)
!8810 = !DILocation(line: 2443, column: 46, scope: !8809)
!8811 = !DILocation(line: 2443, column: 52, scope: !8809)
!8812 = !DILocation(line: 2443, column: 58, scope: !8809)
!8813 = !DILocation(line: 2443, column: 13, scope: !8809)
!8814 = !DILocation(line: 2443, column: 12, scope: !8805)
!8815 = !DILocation(line: 2444, column: 9, scope: !8809)
!8816 = !DILocation(line: 2444, column: 7, scope: !8809)
!8817 = !DILocation(line: 2444, column: 3, scope: !8809)
!8818 = !DILocation(line: 2445, column: 6, scope: !8805)
!8819 = !DILocation(line: 2450, column: 13, scope: !8820)
!8820 = distinct !DILexicalBlock(scope: !8821, file: !3, line: 2450, column: 12)
!8821 = distinct !DILexicalBlock(scope: !8799, file: !3, line: 2447, column: 6)
!8822 = !DILocation(line: 2450, column: 12, scope: !8820)
!8823 = !DILocation(line: 2450, column: 23, scope: !8820)
!8824 = !DILocation(line: 2450, column: 12, scope: !8821)
!8825 = !DILocation(line: 2451, column: 53, scope: !8820)
!8826 = !DILocation(line: 2452, column: 11, scope: !8820)
!8827 = !DILocation(line: 2452, column: 16, scope: !8820)
!8828 = !DILocation(line: 2451, column: 16, scope: !8820)
!8829 = !DILocation(line: 2451, column: 4, scope: !8820)
!8830 = !DILocation(line: 2451, column: 14, scope: !8820)
!8831 = !DILocation(line: 2451, column: 3, scope: !8820)
!8832 = !DILocation(line: 2454, column: 13, scope: !8833)
!8833 = distinct !DILexicalBlock(scope: !8821, file: !3, line: 2454, column: 12)
!8834 = !DILocation(line: 2454, column: 12, scope: !8833)
!8835 = !DILocation(line: 2454, column: 23, scope: !8833)
!8836 = !DILocation(line: 2454, column: 12, scope: !8821)
!8837 = !DILocalVariable(name: "repl_found", scope: !8838, file: !3, line: 2456, type: !1815)
!8838 = distinct !DILexicalBlock(scope: !8833, file: !3, line: 2455, column: 3)
!8839 = !DILocation(line: 2456, column: 10, scope: !8838)
!8840 = !DILocation(line: 2458, column: 11, scope: !8838)
!8841 = !DILocation(line: 2458, column: 17, scope: !8838)
!8842 = !DILocation(line: 2458, column: 9, scope: !8838)
!8843 = !DILocation(line: 2459, column: 46, scope: !8838)
!8844 = !DILocation(line: 2460, column: 12, scope: !8838)
!8845 = !DILocation(line: 2460, column: 18, scope: !8838)
!8846 = !DILocation(line: 2460, column: 26, scope: !8838)
!8847 = !DILocation(line: 2460, column: 32, scope: !8838)
!8848 = !DILocation(line: 2459, column: 18, scope: !8838)
!8849 = !DILocation(line: 2459, column: 16, scope: !8838)
!8850 = !DILocation(line: 2462, column: 5, scope: !8838)
!8851 = !DILocation(line: 2463, column: 3, scope: !8838)
!8852 = !DILocalVariable(name: "repl_found", scope: !8853, file: !3, line: 2466, type: !1815)
!8853 = distinct !DILexicalBlock(scope: !8833, file: !3, line: 2465, column: 3)
!8854 = !DILocation(line: 2466, column: 10, scope: !8853)
!8855 = !DILocation(line: 2468, column: 11, scope: !8853)
!8856 = !DILocation(line: 2468, column: 21, scope: !8853)
!8857 = !DILocation(line: 2468, column: 9, scope: !8853)
!8858 = !DILocation(line: 2470, column: 12, scope: !8853)
!8859 = !DILocation(line: 2471, column: 12, scope: !8853)
!8860 = !DILocation(line: 2471, column: 20, scope: !8853)
!8861 = !DILocation(line: 2471, column: 26, scope: !8853)
!8862 = !DILocation(line: 2469, column: 18, scope: !8853)
!8863 = !DILocation(line: 2469, column: 16, scope: !8853)
!8864 = !DILocation(line: 2472, column: 5, scope: !8853)
!8865 = !DILocation(line: 2476, column: 11, scope: !8778)
!8866 = !DILocation(line: 2476, column: 9, scope: !8778)
!8867 = !DILocation(line: 2477, column: 22, scope: !8778)
!8868 = !DILocation(line: 2477, column: 31, scope: !8778)
!8869 = !DILocation(line: 2477, column: 4, scope: !8778)
!8870 = !DILocation(line: 2478, column: 17, scope: !8778)
!8871 = !DILocation(line: 2478, column: 4, scope: !8778)
!8872 = !DILocation(line: 2479, column: 29, scope: !8778)
!8873 = !DILocation(line: 2480, column: 2, scope: !8778)
!8874 = !DILocation(line: 2481, column: 17, scope: !8875)
!8875 = distinct !DILexicalBlock(scope: !8773, file: !3, line: 2481, column: 16)
!8876 = !DILocation(line: 2481, column: 16, scope: !8875)
!8877 = !DILocation(line: 2481, column: 27, scope: !8875)
!8878 = !DILocation(line: 2482, column: 9, scope: !8875)
!8879 = !DILocation(line: 2482, column: 12, scope: !8875)
!8880 = !DILocation(line: 2482, column: 18, scope: !8875)
!8881 = !DILocation(line: 2482, column: 27, scope: !8875)
!8882 = !DILocation(line: 2482, column: 31, scope: !8875)
!8883 = !DILocation(line: 2482, column: 37, scope: !8875)
!8884 = !DILocation(line: 2481, column: 16, scope: !8773)
!8885 = !DILocation(line: 2483, column: 52, scope: !8875)
!8886 = !DILocation(line: 2483, column: 62, scope: !8875)
!8887 = !DILocation(line: 2484, column: 10, scope: !8875)
!8888 = !DILocation(line: 2483, column: 15, scope: !8875)
!8889 = !DILocation(line: 2483, column: 3, scope: !8875)
!8890 = !DILocation(line: 2483, column: 13, scope: !8875)
!8891 = !DILocation(line: 2483, column: 2, scope: !8875)
!8892 = !DILocation(line: 2486, column: 11, scope: !8893)
!8893 = distinct !DILexicalBlock(scope: !8774, file: !3, line: 2486, column: 11)
!8894 = !DILocation(line: 2486, column: 17, scope: !8893)
!8895 = !DILocation(line: 2486, column: 11, scope: !8774)
!8896 = !DILocation(line: 2487, column: 35, scope: !8893)
!8897 = !DILocation(line: 2487, column: 41, scope: !8893)
!8898 = !DILocation(line: 2487, column: 54, scope: !8893)
!8899 = !DILocation(line: 2488, column: 7, scope: !8893)
!8900 = !DILocation(line: 2488, column: 20, scope: !8893)
!8901 = !DILocation(line: 2489, column: 7, scope: !8893)
!8902 = !DILocation(line: 2489, column: 16, scope: !8893)
!8903 = !DILocation(line: 2489, column: 25, scope: !8893)
!8904 = !DILocation(line: 2489, column: 36, scope: !8893)
!8905 = !DILocation(line: 2487, column: 2, scope: !8893)
!8906 = !DILocation(line: 2490, column: 14, scope: !8774)
!8907 = !DILocation(line: 2490, column: 20, scope: !8774)
!8908 = !DILocation(line: 2490, column: 12, scope: !8774)
!8909 = !DILocation(line: 2491, column: 5, scope: !8774)
!8910 = !DILocation(line: 2492, column: 10, scope: !8748)
!8911 = distinct !{!8911, !8771, !8912}
!8912 = !DILocation(line: 2492, column: 14, scope: !8748)
!8913 = !DILocation(line: 2493, column: 1, scope: !8748)
!8914 = distinct !DISubprogram(name: "VEC_constructor_elt_base_length", scope: !135, file: !135, line: 1537, type: !8915, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8915 = !DISubroutineType(types: !8916)
!8916 = !{!7, !8917}
!8917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8918, size: 64)
!8918 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2777)
!8919 = !DILocalVariable(name: "vec_", arg: 1, scope: !8914, file: !135, line: 1537, type: !8917)
!8920 = !DILocation(line: 1537, column: 1, scope: !8914)
!8921 = distinct !DISubprogram(name: "init_subtree_with_zero", scope: !3, file: !3, line: 2236, type: !8922, scopeLine: 2239, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8922 = !DISubroutineType(types: !8923)
!8923 = !{null, !2999, !3917, !1815}
!8924 = !DILocalVariable(name: "access", arg: 1, scope: !8921, file: !3, line: 2236, type: !2999)
!8925 = !DILocation(line: 2236, column: 40, scope: !8921)
!8926 = !DILocalVariable(name: "gsi", arg: 2, scope: !8921, file: !3, line: 2236, type: !3917)
!8927 = !DILocation(line: 2236, column: 70, scope: !8921)
!8928 = !DILocalVariable(name: "insert_after", arg: 3, scope: !8921, file: !3, line: 2237, type: !1815)
!8929 = !DILocation(line: 2237, column: 9, scope: !8921)
!8930 = !DILocalVariable(name: "child", scope: !8921, file: !3, line: 2240, type: !2999)
!8931 = !DILocation(line: 2240, column: 18, scope: !8921)
!8932 = !DILocation(line: 2242, column: 7, scope: !8933)
!8933 = distinct !DILexicalBlock(scope: !8921, file: !3, line: 2242, column: 7)
!8934 = !DILocation(line: 2242, column: 15, scope: !8933)
!8935 = !DILocation(line: 2242, column: 7, scope: !8921)
!8936 = !DILocalVariable(name: "stmt", scope: !8937, file: !3, line: 2244, type: !2024)
!8937 = distinct !DILexicalBlock(scope: !8933, file: !3, line: 2243, column: 5)
!8938 = !DILocation(line: 2244, column: 14, scope: !8937)
!8939 = !DILocation(line: 2246, column: 14, scope: !8937)
!8940 = !DILocation(line: 2246, column: 12, scope: !8937)
!8941 = !DILocation(line: 2249, column: 11, scope: !8942)
!8942 = distinct !DILexicalBlock(scope: !8937, file: !3, line: 2249, column: 11)
!8943 = !DILocation(line: 2249, column: 11, scope: !8937)
!8944 = !DILocation(line: 2250, column: 20, scope: !8942)
!8945 = !DILocation(line: 2250, column: 25, scope: !8942)
!8946 = !DILocation(line: 2250, column: 2, scope: !8942)
!8947 = !DILocation(line: 2252, column: 21, scope: !8942)
!8948 = !DILocation(line: 2252, column: 26, scope: !8942)
!8949 = !DILocation(line: 2252, column: 2, scope: !8942)
!8950 = !DILocation(line: 2253, column: 20, scope: !8937)
!8951 = !DILocation(line: 2253, column: 7, scope: !8937)
!8952 = !DILocation(line: 2254, column: 5, scope: !8937)
!8953 = !DILocation(line: 2256, column: 16, scope: !8954)
!8954 = distinct !DILexicalBlock(scope: !8921, file: !3, line: 2256, column: 3)
!8955 = !DILocation(line: 2256, column: 24, scope: !8954)
!8956 = !DILocation(line: 2256, column: 14, scope: !8954)
!8957 = !DILocation(line: 2256, column: 8, scope: !8954)
!8958 = !DILocation(line: 2256, column: 37, scope: !8959)
!8959 = distinct !DILexicalBlock(scope: !8954, file: !3, line: 2256, column: 3)
!8960 = !DILocation(line: 2256, column: 3, scope: !8954)
!8961 = !DILocation(line: 2257, column: 29, scope: !8959)
!8962 = !DILocation(line: 2257, column: 36, scope: !8959)
!8963 = !DILocation(line: 2257, column: 41, scope: !8959)
!8964 = !DILocation(line: 2257, column: 5, scope: !8959)
!8965 = !DILocation(line: 2256, column: 52, scope: !8959)
!8966 = !DILocation(line: 2256, column: 59, scope: !8959)
!8967 = !DILocation(line: 2256, column: 50, scope: !8959)
!8968 = !DILocation(line: 2256, column: 3, scope: !8959)
!8969 = distinct !{!8969, !8960, !8970}
!8970 = !DILocation(line: 2257, column: 53, scope: !8954)
!8971 = !DILocation(line: 2258, column: 1, scope: !8921)
!8972 = distinct !DISubprogram(name: "gimple_set_op", scope: !1458, file: !1458, line: 1663, type: !8973, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8973 = !DISubroutineType(types: !8974)
!8974 = !{null, !2024, !7, !1696}
!8975 = !DILocalVariable(name: "gs", arg: 1, scope: !8972, file: !1458, line: 1663, type: !2024)
!8976 = !DILocation(line: 1663, column: 23, scope: !8972)
!8977 = !DILocalVariable(name: "i", arg: 2, scope: !8972, file: !1458, line: 1663, type: !7)
!8978 = !DILocation(line: 1663, column: 36, scope: !8972)
!8979 = !DILocalVariable(name: "op", arg: 3, scope: !8972, file: !1458, line: 1663, type: !1696)
!8980 = !DILocation(line: 1663, column: 44, scope: !8972)
!8981 = !DILocation(line: 1665, column: 3, scope: !8972)
!8982 = !DILocation(line: 1671, column: 24, scope: !8972)
!8983 = !DILocation(line: 1671, column: 15, scope: !8972)
!8984 = !DILocation(line: 1671, column: 3, scope: !8972)
!8985 = !DILocation(line: 1671, column: 19, scope: !8972)
!8986 = !DILocation(line: 1671, column: 22, scope: !8972)
!8987 = !DILocation(line: 1672, column: 1, scope: !8972)
!8988 = distinct !DISubprogram(name: "gsi_start", scope: !1458, file: !1458, line: 4403, type: !8989, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!8989 = !DISubroutineType(types: !8990)
!8990 = !{!3918, !2014}
!8991 = !DILocalVariable(name: "seq", arg: 1, scope: !8988, file: !1458, line: 4403, type: !2014)
!8992 = !DILocation(line: 4403, column: 23, scope: !8988)
!8993 = !DILocalVariable(name: "i", scope: !8988, file: !1458, line: 4405, type: !3918)
!8994 = !DILocation(line: 4405, column: 24, scope: !8988)
!8995 = !DILocation(line: 4407, column: 29, scope: !8988)
!8996 = !DILocation(line: 4407, column: 11, scope: !8988)
!8997 = !DILocation(line: 4407, column: 5, scope: !8988)
!8998 = !DILocation(line: 4407, column: 9, scope: !8988)
!8999 = !DILocation(line: 4408, column: 11, scope: !8988)
!9000 = !DILocation(line: 4408, column: 5, scope: !8988)
!9001 = !DILocation(line: 4408, column: 9, scope: !8988)
!9002 = !DILocation(line: 4409, column: 13, scope: !8988)
!9003 = !DILocation(line: 4409, column: 11, scope: !8988)
!9004 = !DILocation(line: 4409, column: 17, scope: !8988)
!9005 = !DILocation(line: 4409, column: 22, scope: !8988)
!9006 = !DILocation(line: 4409, column: 27, scope: !8988)
!9007 = !DILocation(line: 4409, column: 20, scope: !8988)
!9008 = !DILocation(line: 4409, column: 10, scope: !8988)
!9009 = !DILocation(line: 4409, column: 48, scope: !8988)
!9010 = !DILocation(line: 4409, column: 53, scope: !8988)
!9011 = !DILocation(line: 4409, column: 35, scope: !8988)
!9012 = !DILocation(line: 4409, column: 5, scope: !8988)
!9013 = !DILocation(line: 4409, column: 8, scope: !8988)
!9014 = !DILocation(line: 4411, column: 3, scope: !8988)
!9015 = distinct !DISubprogram(name: "single_succ_edge", scope: !330, file: !330, line: 643, type: !9016, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9016 = !DISubroutineType(types: !9017)
!9017 = !{!2004, !5700}
!9018 = !DILocalVariable(name: "bb", arg: 1, scope: !9015, file: !330, line: 643, type: !5700)
!9019 = !DILocation(line: 643, column: 37, scope: !9015)
!9020 = !DILocation(line: 645, column: 3, scope: !9015)
!9021 = !DILocation(line: 646, column: 10, scope: !9015)
!9022 = !DILocation(line: 646, column: 3, scope: !9015)
!9023 = distinct !DISubprogram(name: "single_succ_p", scope: !330, file: !330, line: 626, type: !9024, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9024 = !DISubroutineType(types: !9025)
!9025 = !{!1815, !5700}
!9026 = !DILocalVariable(name: "bb", arg: 1, scope: !9023, file: !330, line: 626, type: !5700)
!9027 = !DILocation(line: 626, column: 34, scope: !9023)
!9028 = !DILocation(line: 628, column: 10, scope: !9023)
!9029 = !DILocation(line: 628, column: 33, scope: !9023)
!9030 = !DILocation(line: 628, column: 3, scope: !9023)
!9031 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !330, file: !330, line: 150, type: !9032, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9032 = !DISubroutineType(types: !9033)
!9033 = !{!2004, !9034, !7}
!9034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9035, size: 64)
!9035 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1997)
!9036 = !DILocalVariable(name: "vec_", arg: 1, scope: !9031, file: !330, line: 150, type: !9034)
!9037 = !DILocation(line: 150, column: 1, scope: !9031)
!9038 = !DILocalVariable(name: "ix_", arg: 2, scope: !9031, file: !330, line: 150, type: !7)
!9039 = !DILocation(line: 0, scope: !9031)
!9040 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !330, file: !330, line: 150, type: !9041, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9041 = !DISubroutineType(types: !9042)
!9042 = !{!7, !9034}
!9043 = !DILocalVariable(name: "vec_", arg: 1, scope: !9040, file: !330, line: 150, type: !9034)
!9044 = !DILocation(line: 150, column: 1, scope: !9040)
!9045 = distinct !DISubprogram(name: "delete_base_accesses", scope: !3, file: !3, line: 577, type: !9046, scopeLine: 579, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9046 = !DISubroutineType(types: !9047)
!9047 = !{!1815, !2466, !2479, !1977}
!9048 = !DILocalVariable(name: "key", arg: 1, scope: !9045, file: !3, line: 577, type: !2466)
!9049 = !DILocation(line: 577, column: 35, scope: !9045)
!9050 = !DILocalVariable(name: "value", arg: 2, scope: !9045, file: !3, line: 577, type: !2479)
!9051 = !DILocation(line: 577, column: 64, scope: !9045)
!9052 = !DILocalVariable(name: "data", arg: 3, scope: !9045, file: !3, line: 578, type: !1977)
!9053 = !DILocation(line: 578, column: 14, scope: !9045)
!9054 = !DILocalVariable(name: "access_vec", scope: !9045, file: !3, line: 580, type: !3036)
!9055 = !DILocation(line: 580, column: 25, scope: !9045)
!9056 = !DILocation(line: 581, column: 42, scope: !9045)
!9057 = !DILocation(line: 581, column: 41, scope: !9045)
!9058 = !DILocation(line: 581, column: 16, scope: !9045)
!9059 = !DILocation(line: 581, column: 14, scope: !9045)
!9060 = !DILocation(line: 582, column: 3, scope: !9045)
!9061 = !DILocation(line: 584, column: 3, scope: !9045)
!9062 = distinct !DISubprogram(name: "VEC_access_p_heap_free", scope: !3, file: !3, line: 229, type: !9063, scopeLine: 229, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9063 = !DISubroutineType(types: !9064)
!9064 = !{null, !3051}
!9065 = !DILocalVariable(name: "vec_", arg: 1, scope: !9062, file: !3, line: 229, type: !3051)
!9066 = !DILocation(line: 229, column: 1, scope: !9062)
!9067 = !DILocation(line: 229, column: 1, scope: !9068)
!9068 = distinct !DILexicalBlock(scope: !9062, file: !3, line: 229, column: 1)
!9069 = distinct !DISubprogram(name: "ipa_sra_preliminary_function_checks", scope: !3, file: !3, line: 4110, type: !9070, scopeLine: 4111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9070 = !DISubroutineType(types: !9071)
!9071 = !{!1815, !3455}
!9072 = !DILocalVariable(name: "node", arg: 1, scope: !9069, file: !3, line: 4110, type: !3455)
!9073 = !DILocation(line: 4110, column: 58, scope: !9069)
!9074 = !DILocation(line: 4112, column: 36, scope: !9075)
!9075 = distinct !DILexicalBlock(scope: !9069, file: !3, line: 4112, column: 7)
!9076 = !DILocation(line: 4112, column: 8, scope: !9075)
!9077 = !DILocation(line: 4112, column: 7, scope: !9069)
!9078 = !DILocation(line: 4114, column: 11, scope: !9079)
!9079 = distinct !DILexicalBlock(scope: !9080, file: !3, line: 4114, column: 11)
!9080 = distinct !DILexicalBlock(scope: !9075, file: !3, line: 4113, column: 5)
!9081 = !DILocation(line: 4114, column: 11, scope: !9080)
!9082 = !DILocation(line: 4115, column: 11, scope: !9079)
!9083 = !DILocation(line: 4115, column: 2, scope: !9079)
!9084 = !DILocation(line: 4116, column: 7, scope: !9080)
!9085 = !DILocation(line: 4119, column: 7, scope: !9086)
!9086 = distinct !DILexicalBlock(scope: !9069, file: !3, line: 4119, column: 7)
!9087 = !DILocation(line: 4119, column: 7, scope: !9069)
!9088 = !DILocation(line: 4121, column: 11, scope: !9089)
!9089 = distinct !DILexicalBlock(scope: !9090, file: !3, line: 4121, column: 11)
!9090 = distinct !DILexicalBlock(scope: !9086, file: !3, line: 4120, column: 5)
!9091 = !DILocation(line: 4121, column: 11, scope: !9090)
!9092 = !DILocation(line: 4122, column: 11, scope: !9089)
!9093 = !DILocation(line: 4122, column: 2, scope: !9089)
!9094 = !DILocation(line: 4123, column: 7, scope: !9090)
!9095 = !DILocation(line: 4126, column: 8, scope: !9096)
!9096 = distinct !DILexicalBlock(scope: !9069, file: !3, line: 4126, column: 7)
!9097 = !DILocation(line: 4126, column: 33, scope: !9096)
!9098 = !DILocation(line: 4126, column: 36, scope: !9096)
!9099 = !DILocation(line: 4127, column: 7, scope: !9096)
!9100 = !DILocation(line: 4127, column: 10, scope: !9096)
!9101 = !DILocation(line: 4127, column: 16, scope: !9096)
!9102 = !DILocation(line: 4127, column: 23, scope: !9096)
!9103 = !DILocation(line: 4127, column: 31, scope: !9096)
!9104 = !DILocation(line: 4127, column: 28, scope: !9096)
!9105 = !DILocation(line: 4126, column: 7, scope: !9069)
!9106 = !DILocation(line: 4129, column: 11, scope: !9107)
!9107 = distinct !DILexicalBlock(scope: !9108, file: !3, line: 4129, column: 11)
!9108 = distinct !DILexicalBlock(scope: !9096, file: !3, line: 4128, column: 5)
!9109 = !DILocation(line: 4129, column: 11, scope: !9108)
!9110 = !DILocation(line: 4130, column: 11, scope: !9107)
!9111 = !DILocation(line: 4130, column: 2, scope: !9107)
!9112 = !DILocation(line: 4131, column: 7, scope: !9108)
!9113 = !DILocation(line: 4134, column: 8, scope: !9114)
!9114 = distinct !DILexicalBlock(scope: !9069, file: !3, line: 4134, column: 7)
!9115 = !DILocation(line: 4134, column: 14, scope: !9114)
!9116 = !DILocation(line: 4134, column: 7, scope: !9069)
!9117 = !DILocation(line: 4136, column: 11, scope: !9118)
!9118 = distinct !DILexicalBlock(scope: !9119, file: !3, line: 4136, column: 11)
!9119 = distinct !DILexicalBlock(scope: !9114, file: !3, line: 4135, column: 5)
!9120 = !DILocation(line: 4136, column: 11, scope: !9119)
!9121 = !DILocation(line: 4137, column: 11, scope: !9118)
!9122 = !DILocation(line: 4137, column: 2, scope: !9118)
!9123 = !DILocation(line: 4139, column: 7, scope: !9119)
!9124 = !DILocation(line: 4142, column: 7, scope: !9125)
!9125 = distinct !DILexicalBlock(scope: !9069, file: !3, line: 4142, column: 7)
!9126 = !DILocation(line: 4142, column: 13, scope: !9125)
!9127 = !DILocation(line: 4142, column: 7, scope: !9069)
!9128 = !DILocation(line: 4144, column: 11, scope: !9129)
!9129 = distinct !DILexicalBlock(scope: !9130, file: !3, line: 4144, column: 11)
!9130 = distinct !DILexicalBlock(scope: !9125, file: !3, line: 4143, column: 5)
!9131 = !DILocation(line: 4144, column: 11, scope: !9130)
!9132 = !DILocation(line: 4145, column: 11, scope: !9129)
!9133 = !DILocation(line: 4145, column: 2, scope: !9129)
!9134 = !DILocation(line: 4146, column: 7, scope: !9130)
!9135 = !DILocation(line: 4149, column: 3, scope: !9069)
!9136 = !DILocation(line: 4150, column: 1, scope: !9069)
!9137 = distinct !DISubprogram(name: "find_param_candidates", scope: !3, file: !3, line: 2983, type: !3102, scopeLine: 2984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9138 = !DILocalVariable(name: "parm", scope: !9137, file: !3, line: 2985, type: !1696)
!9139 = !DILocation(line: 2985, column: 8, scope: !9137)
!9140 = !DILocalVariable(name: "count", scope: !9137, file: !3, line: 2986, type: !1693)
!9141 = !DILocation(line: 2986, column: 7, scope: !9137)
!9142 = !DILocalVariable(name: "ret", scope: !9137, file: !3, line: 2987, type: !1815)
!9143 = !DILocation(line: 2987, column: 8, scope: !9137)
!9144 = !DILocation(line: 2989, column: 15, scope: !9145)
!9145 = distinct !DILexicalBlock(scope: !9137, file: !3, line: 2989, column: 3)
!9146 = !DILocation(line: 2989, column: 13, scope: !9145)
!9147 = !DILocation(line: 2989, column: 8, scope: !9145)
!9148 = !DILocation(line: 2990, column: 8, scope: !9149)
!9149 = distinct !DILexicalBlock(scope: !9145, file: !3, line: 2989, column: 3)
!9150 = !DILocation(line: 2989, column: 3, scope: !9145)
!9151 = !DILocalVariable(name: "type", scope: !9152, file: !3, line: 2993, type: !1696)
!9152 = distinct !DILexicalBlock(scope: !9149, file: !3, line: 2992, column: 5)
!9153 = !DILocation(line: 2993, column: 12, scope: !9152)
!9154 = !DILocation(line: 2993, column: 19, scope: !9152)
!9155 = !DILocation(line: 2995, column: 12, scope: !9152)
!9156 = !DILocation(line: 2997, column: 11, scope: !9157)
!9157 = distinct !DILexicalBlock(scope: !9152, file: !3, line: 2997, column: 11)
!9158 = !DILocation(line: 2998, column: 4, scope: !9157)
!9159 = !DILocation(line: 2998, column: 7, scope: !9157)
!9160 = !DILocation(line: 2999, column: 4, scope: !9157)
!9161 = !DILocation(line: 2999, column: 24, scope: !9157)
!9162 = !DILocation(line: 2999, column: 7, scope: !9157)
!9163 = !DILocation(line: 2997, column: 11, scope: !9152)
!9164 = !DILocation(line: 3000, column: 2, scope: !9157)
!9165 = !DILocation(line: 3002, column: 35, scope: !9166)
!9166 = distinct !DILexicalBlock(scope: !9152, file: !3, line: 3002, column: 11)
!9167 = !DILocation(line: 3002, column: 11, scope: !9166)
!9168 = !DILocation(line: 3002, column: 11, scope: !9152)
!9169 = !DILocation(line: 3004, column: 8, scope: !9170)
!9170 = distinct !DILexicalBlock(scope: !9166, file: !3, line: 3003, column: 2)
!9171 = !DILocation(line: 3005, column: 4, scope: !9170)
!9172 = !DILocation(line: 3008, column: 11, scope: !9173)
!9173 = distinct !DILexicalBlock(scope: !9152, file: !3, line: 3008, column: 11)
!9174 = !DILocation(line: 3008, column: 11, scope: !9152)
!9175 = !DILocation(line: 3010, column: 11, scope: !9176)
!9176 = distinct !DILexicalBlock(scope: !9173, file: !3, line: 3009, column: 2)
!9177 = !DILocation(line: 3010, column: 9, scope: !9176)
!9178 = !DILocation(line: 3012, column: 8, scope: !9179)
!9179 = distinct !DILexicalBlock(scope: !9176, file: !3, line: 3012, column: 8)
!9180 = !DILocation(line: 3012, column: 25, scope: !9179)
!9181 = !DILocation(line: 3013, column: 8, scope: !9179)
!9182 = !DILocation(line: 3013, column: 11, scope: !9179)
!9183 = !DILocation(line: 3014, column: 8, scope: !9179)
!9184 = !DILocation(line: 3014, column: 27, scope: !9179)
!9185 = !DILocation(line: 3014, column: 12, scope: !9179)
!9186 = !DILocation(line: 3015, column: 8, scope: !9179)
!9187 = !DILocation(line: 3015, column: 28, scope: !9179)
!9188 = !DILocation(line: 3015, column: 11, scope: !9179)
!9189 = !DILocation(line: 3016, column: 8, scope: !9179)
!9190 = !DILocation(line: 3016, column: 37, scope: !9179)
!9191 = !DILocation(line: 3016, column: 11, scope: !9179)
!9192 = !DILocation(line: 3012, column: 8, scope: !9176)
!9193 = !DILocation(line: 3017, column: 6, scope: !9179)
!9194 = !DILocation(line: 3018, column: 2, scope: !9176)
!9195 = !DILocation(line: 3019, column: 17, scope: !9196)
!9196 = distinct !DILexicalBlock(scope: !9173, file: !3, line: 3019, column: 16)
!9197 = !DILocation(line: 3019, column: 16, scope: !9173)
!9198 = !DILocation(line: 3020, column: 2, scope: !9196)
!9199 = !DILocation(line: 3022, column: 12, scope: !9200)
!9200 = distinct !DILexicalBlock(scope: !9152, file: !3, line: 3022, column: 11)
!9201 = !DILocation(line: 3023, column: 4, scope: !9200)
!9202 = !DILocation(line: 3023, column: 23, scope: !9200)
!9203 = !DILocation(line: 3023, column: 8, scope: !9200)
!9204 = !DILocation(line: 3024, column: 11, scope: !9200)
!9205 = !DILocation(line: 3024, column: 28, scope: !9200)
!9206 = !DILocation(line: 3024, column: 14, scope: !9200)
!9207 = !DILocation(line: 3024, column: 49, scope: !9200)
!9208 = !DILocation(line: 3025, column: 4, scope: !9200)
!9209 = !DILocation(line: 3025, column: 8, scope: !9200)
!9210 = !DILocation(line: 3026, column: 8, scope: !9200)
!9211 = !DILocation(line: 3026, column: 42, scope: !9200)
!9212 = !DILocation(line: 3026, column: 11, scope: !9200)
!9213 = !DILocation(line: 3022, column: 11, scope: !9152)
!9214 = !DILocation(line: 3027, column: 2, scope: !9200)
!9215 = !DILocation(line: 3029, column: 23, scope: !9152)
!9216 = !DILocation(line: 3029, column: 41, scope: !9152)
!9217 = !DILocation(line: 3029, column: 7, scope: !9152)
!9218 = !DILocation(line: 3030, column: 11, scope: !9152)
!9219 = !DILocation(line: 3031, column: 11, scope: !9220)
!9220 = distinct !DILexicalBlock(scope: !9152, file: !3, line: 3031, column: 11)
!9221 = !DILocation(line: 3031, column: 21, scope: !9220)
!9222 = !DILocation(line: 3031, column: 25, scope: !9220)
!9223 = !DILocation(line: 3031, column: 36, scope: !9220)
!9224 = !DILocation(line: 3031, column: 11, scope: !9152)
!9225 = !DILocation(line: 3033, column: 13, scope: !9226)
!9226 = distinct !DILexicalBlock(scope: !9220, file: !3, line: 3032, column: 2)
!9227 = !DILocation(line: 3033, column: 44, scope: !9226)
!9228 = !DILocation(line: 3033, column: 4, scope: !9226)
!9229 = !DILocation(line: 3034, column: 24, scope: !9226)
!9230 = !DILocation(line: 3034, column: 35, scope: !9226)
!9231 = !DILocation(line: 3034, column: 4, scope: !9226)
!9232 = !DILocation(line: 3035, column: 13, scope: !9226)
!9233 = !DILocation(line: 3035, column: 4, scope: !9226)
!9234 = !DILocation(line: 3036, column: 2, scope: !9226)
!9235 = !DILocation(line: 3037, column: 5, scope: !9152)
!9236 = !DILocation(line: 2991, column: 15, scope: !9149)
!9237 = !DILocation(line: 2991, column: 13, scope: !9149)
!9238 = !DILocation(line: 2989, column: 3, scope: !9149)
!9239 = distinct !{!9239, !9150, !9240}
!9240 = !DILocation(line: 3037, column: 5, scope: !9145)
!9241 = !DILocation(line: 3039, column: 22, scope: !9137)
!9242 = !DILocation(line: 3039, column: 20, scope: !9137)
!9243 = !DILocation(line: 3040, column: 10, scope: !9137)
!9244 = !DILocation(line: 3040, column: 3, scope: !9137)
!9245 = distinct !DISubprogram(name: "all_callers_have_enough_arguments_p", scope: !3, file: !3, line: 3991, type: !9070, scopeLine: 3992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9246 = !DILocalVariable(name: "node", arg: 1, scope: !9245, file: !3, line: 3991, type: !3455)
!9247 = !DILocation(line: 3991, column: 58, scope: !9245)
!9248 = !DILocalVariable(name: "cs", scope: !9245, file: !3, line: 3993, type: !3460)
!9249 = !DILocation(line: 3993, column: 23, scope: !9245)
!9250 = !DILocation(line: 3994, column: 13, scope: !9251)
!9251 = distinct !DILexicalBlock(scope: !9245, file: !3, line: 3994, column: 3)
!9252 = !DILocation(line: 3994, column: 19, scope: !9251)
!9253 = !DILocation(line: 3994, column: 11, scope: !9251)
!9254 = !DILocation(line: 3994, column: 8, scope: !9251)
!9255 = !DILocation(line: 3994, column: 28, scope: !9256)
!9256 = distinct !DILexicalBlock(scope: !9251, file: !3, line: 3994, column: 3)
!9257 = !DILocation(line: 3994, column: 3, scope: !9251)
!9258 = !DILocation(line: 3995, column: 43, scope: !9259)
!9259 = distinct !DILexicalBlock(scope: !9256, file: !3, line: 3995, column: 9)
!9260 = !DILocation(line: 3995, column: 47, scope: !9259)
!9261 = !DILocation(line: 3995, column: 10, scope: !9259)
!9262 = !DILocation(line: 3995, column: 9, scope: !9256)
!9263 = !DILocation(line: 3996, column: 7, scope: !9259)
!9264 = !DILocation(line: 3995, column: 56, scope: !9259)
!9265 = !DILocation(line: 3994, column: 37, scope: !9256)
!9266 = !DILocation(line: 3994, column: 41, scope: !9256)
!9267 = !DILocation(line: 3994, column: 35, scope: !9256)
!9268 = !DILocation(line: 3994, column: 3, scope: !9256)
!9269 = distinct !{!9269, !9257, !9270}
!9270 = !DILocation(line: 3996, column: 14, scope: !9251)
!9271 = !DILocation(line: 3998, column: 3, scope: !9245)
!9272 = !DILocation(line: 3999, column: 1, scope: !9245)
!9273 = distinct !DISubprogram(name: "analyze_all_param_acesses", scope: !3, file: !3, line: 3622, type: !9274, scopeLine: 3623, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9274 = !DISubroutineType(types: !9275)
!9275 = !{!3665}
!9276 = !DILocalVariable(name: "repr_state", scope: !9273, file: !3, line: 3624, type: !1685)
!9277 = !DILocation(line: 3624, column: 28, scope: !9273)
!9278 = !DILocalVariable(name: "proceed", scope: !9273, file: !3, line: 3625, type: !1815)
!9279 = !DILocation(line: 3625, column: 8, scope: !9273)
!9280 = !DILocalVariable(name: "i", scope: !9273, file: !3, line: 3626, type: !1693)
!9281 = !DILocation(line: 3626, column: 7, scope: !9273)
!9282 = !DILocalVariable(name: "adjustments_count", scope: !9273, file: !3, line: 3626, type: !1693)
!9283 = !DILocation(line: 3626, column: 10, scope: !9273)
!9284 = !DILocalVariable(name: "representatives", scope: !9273, file: !3, line: 3627, type: !3036)
!9285 = !DILocation(line: 3627, column: 25, scope: !9273)
!9286 = !DILocalVariable(name: "adjustments", scope: !9273, file: !3, line: 3628, type: !3665)
!9287 = !DILocation(line: 3628, column: 27, scope: !9273)
!9288 = !DILocation(line: 3630, column: 16, scope: !9273)
!9289 = !DILocation(line: 3630, column: 14, scope: !9273)
!9290 = !DILocation(line: 3631, column: 7, scope: !9291)
!9291 = distinct !DILexicalBlock(scope: !9273, file: !3, line: 3631, column: 7)
!9292 = !DILocation(line: 3631, column: 18, scope: !9291)
!9293 = !DILocation(line: 3631, column: 7, scope: !9273)
!9294 = !DILocation(line: 3632, column: 5, scope: !9291)
!9295 = !DILocation(line: 3636, column: 7, scope: !9296)
!9296 = distinct !DILexicalBlock(scope: !9273, file: !3, line: 3636, column: 7)
!9297 = !DILocation(line: 3636, column: 18, scope: !9296)
!9298 = !DILocation(line: 3636, column: 7, scope: !9273)
!9299 = !DILocation(line: 3638, column: 44, scope: !9300)
!9300 = distinct !DILexicalBlock(scope: !9296, file: !3, line: 3637, column: 5)
!9301 = !DILocation(line: 3638, column: 7, scope: !9300)
!9302 = !DILocation(line: 3639, column: 32, scope: !9300)
!9303 = !DILocation(line: 3639, column: 7, scope: !9300)
!9304 = !DILocation(line: 3640, column: 5, scope: !9300)
!9305 = !DILocation(line: 3642, column: 10, scope: !9306)
!9306 = distinct !DILexicalBlock(scope: !9273, file: !3, line: 3642, column: 3)
!9307 = !DILocation(line: 3642, column: 8, scope: !9306)
!9308 = !DILocation(line: 3642, column: 15, scope: !9309)
!9309 = distinct !DILexicalBlock(scope: !9306, file: !3, line: 3642, column: 3)
!9310 = !DILocation(line: 3642, column: 19, scope: !9309)
!9311 = !DILocation(line: 3642, column: 17, scope: !9309)
!9312 = !DILocation(line: 3642, column: 3, scope: !9306)
!9313 = !DILocalVariable(name: "repr", scope: !9314, file: !3, line: 3644, type: !2999)
!9314 = distinct !DILexicalBlock(scope: !9309, file: !3, line: 3643, column: 5)
!9315 = !DILocation(line: 3644, column: 22, scope: !9314)
!9316 = !DILocation(line: 3644, column: 29, scope: !9314)
!9317 = !DILocation(line: 3646, column: 11, scope: !9318)
!9318 = distinct !DILexicalBlock(scope: !9314, file: !3, line: 3646, column: 11)
!9319 = !DILocation(line: 3646, column: 16, scope: !9318)
!9320 = !DILocation(line: 3646, column: 35, scope: !9318)
!9321 = !DILocation(line: 3646, column: 20, scope: !9318)
!9322 = !DILocation(line: 3646, column: 11, scope: !9314)
!9323 = !DILocation(line: 3648, column: 8, scope: !9324)
!9324 = distinct !DILexicalBlock(scope: !9325, file: !3, line: 3648, column: 8)
!9325 = distinct !DILexicalBlock(scope: !9318, file: !3, line: 3647, column: 2)
!9326 = !DILocation(line: 3648, column: 14, scope: !9324)
!9327 = !DILocation(line: 3648, column: 8, scope: !9325)
!9328 = !DILocation(line: 3650, column: 25, scope: !9329)
!9329 = distinct !DILexicalBlock(scope: !9324, file: !3, line: 3649, column: 6)
!9330 = !DILocation(line: 3651, column: 12, scope: !9331)
!9331 = distinct !DILexicalBlock(scope: !9329, file: !3, line: 3651, column: 12)
!9332 = !DILocation(line: 3651, column: 18, scope: !9331)
!9333 = !DILocation(line: 3652, column: 5, scope: !9331)
!9334 = !DILocation(line: 3652, column: 8, scope: !9331)
!9335 = !DILocation(line: 3652, column: 14, scope: !9331)
!9336 = !DILocation(line: 3651, column: 12, scope: !9329)
!9337 = !DILocation(line: 3653, column: 3, scope: !9331)
!9338 = !DILocation(line: 3656, column: 13, scope: !9339)
!9339 = distinct !DILexicalBlock(scope: !9331, file: !3, line: 3655, column: 3)
!9340 = !DILocation(line: 3657, column: 38, scope: !9339)
!9341 = !DILocation(line: 3659, column: 6, scope: !9329)
!9342 = !DILocalVariable(name: "new_components", scope: !9343, file: !3, line: 3662, type: !1693)
!9343 = distinct !DILexicalBlock(scope: !9324, file: !3, line: 3661, column: 6)
!9344 = !DILocation(line: 3662, column: 12, scope: !9343)
!9345 = !DILocation(line: 3662, column: 57, scope: !9343)
!9346 = !DILocation(line: 3662, column: 29, scope: !9343)
!9347 = !DILocation(line: 3664, column: 12, scope: !9348)
!9348 = distinct !DILexicalBlock(scope: !9343, file: !3, line: 3664, column: 12)
!9349 = !DILocation(line: 3664, column: 27, scope: !9348)
!9350 = !DILocation(line: 3664, column: 12, scope: !9343)
!9351 = !DILocation(line: 3666, column: 5, scope: !9352)
!9352 = distinct !DILexicalBlock(scope: !9348, file: !3, line: 3665, column: 3)
!9353 = !DILocation(line: 3667, column: 22, scope: !9352)
!9354 = !DILocation(line: 3668, column: 3, scope: !9352)
!9355 = !DILocation(line: 3671, column: 26, scope: !9356)
!9356 = distinct !DILexicalBlock(scope: !9348, file: !3, line: 3670, column: 3)
!9357 = !DILocation(line: 3671, column: 23, scope: !9356)
!9358 = !DILocation(line: 3672, column: 39, scope: !9356)
!9359 = !DILocation(line: 3673, column: 43, scope: !9356)
!9360 = !DILocation(line: 3673, column: 40, scope: !9356)
!9361 = !DILocation(line: 3674, column: 13, scope: !9356)
!9362 = !DILocation(line: 3677, column: 2, scope: !9325)
!9363 = !DILocation(line: 3680, column: 23, scope: !9364)
!9364 = distinct !DILexicalBlock(scope: !9365, file: !3, line: 3680, column: 8)
!9365 = distinct !DILexicalBlock(scope: !9318, file: !3, line: 3679, column: 2)
!9366 = !DILocation(line: 3680, column: 8, scope: !9364)
!9367 = !DILocation(line: 3680, column: 8, scope: !9365)
!9368 = !DILocation(line: 3682, column: 16, scope: !9369)
!9369 = distinct !DILexicalBlock(scope: !9364, file: !3, line: 3681, column: 6)
!9370 = !DILocation(line: 3683, column: 43, scope: !9369)
!9371 = !DILocation(line: 3684, column: 6, scope: !9369)
!9372 = !DILocation(line: 3685, column: 21, scope: !9365)
!9373 = !DILocation(line: 3687, column: 5, scope: !9314)
!9374 = !DILocation(line: 3642, column: 38, scope: !9309)
!9375 = !DILocation(line: 3642, column: 3, scope: !9309)
!9376 = distinct !{!9376, !9312, !9377}
!9377 = !DILocation(line: 3687, column: 5, scope: !9306)
!9378 = !DILocation(line: 3689, column: 8, scope: !9379)
!9379 = distinct !DILexicalBlock(scope: !9273, file: !3, line: 3689, column: 7)
!9380 = !DILocation(line: 3689, column: 16, scope: !9379)
!9381 = !DILocation(line: 3689, column: 19, scope: !9379)
!9382 = !DILocation(line: 3689, column: 7, scope: !9273)
!9383 = !DILocation(line: 3690, column: 14, scope: !9379)
!9384 = !DILocation(line: 3690, column: 5, scope: !9379)
!9385 = !DILocation(line: 3692, column: 7, scope: !9386)
!9386 = distinct !DILexicalBlock(scope: !9273, file: !3, line: 3692, column: 7)
!9387 = !DILocation(line: 3692, column: 7, scope: !9273)
!9388 = !DILocation(line: 3693, column: 58, scope: !9386)
!9389 = !DILocation(line: 3694, column: 9, scope: !9386)
!9390 = !DILocation(line: 3693, column: 19, scope: !9386)
!9391 = !DILocation(line: 3693, column: 17, scope: !9386)
!9392 = !DILocation(line: 3693, column: 5, scope: !9386)
!9393 = !DILocation(line: 3696, column: 17, scope: !9386)
!9394 = !DILocation(line: 3698, column: 3, scope: !9273)
!9395 = !DILocation(line: 3699, column: 10, scope: !9273)
!9396 = !DILocation(line: 3699, column: 3, scope: !9273)
!9397 = !DILocation(line: 3700, column: 1, scope: !9273)
!9398 = distinct !DISubprogram(name: "modify_function", scope: !3, file: !3, line: 4088, type: !9399, scopeLine: 4089, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9399 = !DISubroutineType(types: !9400)
!9400 = !{null, !3455, !3665}
!9401 = !DILocalVariable(name: "node", arg: 1, scope: !9398, file: !3, line: 4088, type: !3455)
!9402 = !DILocation(line: 4088, column: 38, scope: !9398)
!9403 = !DILocalVariable(name: "adjustments", arg: 2, scope: !9398, file: !3, line: 4088, type: !3665)
!9404 = !DILocation(line: 4088, column: 68, scope: !9398)
!9405 = !DILocalVariable(name: "alias", scope: !9398, file: !3, line: 4090, type: !3455)
!9406 = !DILocation(line: 4090, column: 23, scope: !9398)
!9407 = !DILocation(line: 4091, column: 16, scope: !9408)
!9408 = distinct !DILexicalBlock(scope: !9398, file: !3, line: 4091, column: 3)
!9409 = !DILocation(line: 4091, column: 22, scope: !9408)
!9410 = !DILocation(line: 4091, column: 14, scope: !9408)
!9411 = !DILocation(line: 4091, column: 8, scope: !9408)
!9412 = !DILocation(line: 4091, column: 33, scope: !9413)
!9413 = distinct !DILexicalBlock(scope: !9408, file: !3, line: 4091, column: 3)
!9414 = !DILocation(line: 4091, column: 3, scope: !9408)
!9415 = !DILocation(line: 4092, column: 35, scope: !9413)
!9416 = !DILocation(line: 4092, column: 42, scope: !9413)
!9417 = !DILocation(line: 4092, column: 48, scope: !9413)
!9418 = !DILocation(line: 4092, column: 5, scope: !9413)
!9419 = !DILocation(line: 4091, column: 48, scope: !9413)
!9420 = !DILocation(line: 4091, column: 55, scope: !9413)
!9421 = !DILocation(line: 4091, column: 46, scope: !9413)
!9422 = !DILocation(line: 4091, column: 3, scope: !9413)
!9423 = distinct !{!9423, !9414, !9424}
!9424 = !DILocation(line: 4092, column: 67, scope: !9408)
!9425 = !DILocation(line: 4095, column: 27, scope: !9398)
!9426 = !DILocation(line: 4095, column: 3, scope: !9398)
!9427 = !DILocation(line: 4096, column: 33, scope: !9398)
!9428 = !DILocation(line: 4096, column: 56, scope: !9398)
!9429 = !DILocation(line: 4096, column: 3, scope: !9398)
!9430 = !DILocation(line: 4098, column: 45, scope: !9398)
!9431 = !DILocation(line: 4097, column: 3, scope: !9398)
!9432 = !DILocation(line: 4099, column: 30, scope: !9398)
!9433 = !DILocation(line: 4099, column: 3, scope: !9398)
!9434 = !DILocation(line: 4100, column: 20, scope: !9398)
!9435 = !DILocation(line: 4100, column: 26, scope: !9398)
!9436 = !DILocation(line: 4100, column: 3, scope: !9398)
!9437 = !DILocation(line: 4101, column: 27, scope: !9398)
!9438 = !DILocation(line: 4101, column: 3, scope: !9398)
!9439 = !DILocation(line: 4102, column: 3, scope: !9398)
!9440 = distinct !DISubprogram(name: "VEC_ipa_parm_adjustment_t_heap_free", scope: !3066, file: !3066, line: 485, type: !9441, scopeLine: 485, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9441 = !DISubroutineType(types: !9442)
!9442 = !{null, !9443}
!9443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3064, size: 64)
!9444 = !DILocalVariable(name: "vec_", arg: 1, scope: !9440, file: !3066, line: 485, type: !9443)
!9445 = !DILocation(line: 485, column: 1, scope: !9440)
!9446 = !DILocation(line: 485, column: 1, scope: !9447)
!9447 = distinct !DILexicalBlock(scope: !9440, file: !3066, line: 485, column: 1)
!9448 = distinct !DISubprogram(name: "is_unused_scalar_param", scope: !3, file: !3, line: 2900, type: !5251, scopeLine: 2901, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9449 = !DILocalVariable(name: "parm", arg: 1, scope: !9448, file: !3, line: 2900, type: !1696)
!9450 = !DILocation(line: 2900, column: 30, scope: !9448)
!9451 = !DILocalVariable(name: "name", scope: !9448, file: !3, line: 2902, type: !1696)
!9452 = !DILocation(line: 2902, column: 8, scope: !9448)
!9453 = !DILocation(line: 2903, column: 26, scope: !9448)
!9454 = !DILocation(line: 2903, column: 11, scope: !9448)
!9455 = !DILocation(line: 2904, column: 4, scope: !9448)
!9456 = !DILocation(line: 2904, column: 37, scope: !9448)
!9457 = !DILocation(line: 2904, column: 43, scope: !9448)
!9458 = !DILocation(line: 2904, column: 17, scope: !9448)
!9459 = !DILocation(line: 2904, column: 15, scope: !9448)
!9460 = !DILocation(line: 2905, column: 8, scope: !9448)
!9461 = !DILocation(line: 2905, column: 26, scope: !9448)
!9462 = !DILocation(line: 2905, column: 11, scope: !9448)
!9463 = !DILocation(line: 0, scope: !9448)
!9464 = !DILocation(line: 2903, column: 10, scope: !9448)
!9465 = !DILocation(line: 2903, column: 3, scope: !9448)
!9466 = distinct !DISubprogram(name: "ptr_parm_has_direct_uses", scope: !3, file: !3, line: 2914, type: !5251, scopeLine: 2915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9467 = !DILocalVariable(name: "parm", arg: 1, scope: !9466, file: !3, line: 2914, type: !1696)
!9468 = !DILocation(line: 2914, column: 32, scope: !9466)
!9469 = !DILocalVariable(name: "ui", scope: !9466, file: !3, line: 2916, type: !9470)
!9470 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !2363, line: 249, baseType: !9471)
!9471 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !2363, line: 238, size: 448, elements: !9472)
!9472 = !{!9473, !9474, !9475, !9476}
!9473 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !9471, file: !2363, line: 241, baseType: !3057, size: 64)
!9474 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !9471, file: !2363, line: 243, baseType: !3057, size: 64, offset: 64)
!9475 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !9471, file: !2363, line: 245, baseType: !3058, size: 256, offset: 128)
!9476 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !9471, file: !2363, line: 248, baseType: !3057, size: 64, offset: 384)
!9477 = !DILocation(line: 2916, column: 20, scope: !9466)
!9478 = !DILocalVariable(name: "stmt", scope: !9466, file: !3, line: 2917, type: !2024)
!9479 = !DILocation(line: 2917, column: 10, scope: !9466)
!9480 = !DILocalVariable(name: "name", scope: !9466, file: !3, line: 2918, type: !1696)
!9481 = !DILocation(line: 2918, column: 8, scope: !9466)
!9482 = !DILocation(line: 2918, column: 35, scope: !9466)
!9483 = !DILocation(line: 2918, column: 41, scope: !9466)
!9484 = !DILocation(line: 2918, column: 15, scope: !9466)
!9485 = !DILocalVariable(name: "ret", scope: !9466, file: !3, line: 2919, type: !1815)
!9486 = !DILocation(line: 2919, column: 8, scope: !9466)
!9487 = !DILocation(line: 2921, column: 3, scope: !9488)
!9488 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 2921, column: 3)
!9489 = !DILocation(line: 2921, column: 3, scope: !9490)
!9490 = distinct !DILexicalBlock(scope: !9488, file: !3, line: 2921, column: 3)
!9491 = !DILocalVariable(name: "uses_ok", scope: !9492, file: !3, line: 2923, type: !1693)
!9492 = distinct !DILexicalBlock(scope: !9490, file: !3, line: 2922, column: 5)
!9493 = !DILocation(line: 2923, column: 11, scope: !9492)
!9494 = !DILocalVariable(name: "use_p", scope: !9492, file: !3, line: 2924, type: !3056)
!9495 = !DILocation(line: 2924, column: 21, scope: !9492)
!9496 = !DILocation(line: 2926, column: 28, scope: !9497)
!9497 = distinct !DILexicalBlock(scope: !9492, file: !3, line: 2926, column: 11)
!9498 = !DILocation(line: 2926, column: 11, scope: !9497)
!9499 = !DILocation(line: 2926, column: 11, scope: !9492)
!9500 = !DILocation(line: 2927, column: 2, scope: !9497)
!9501 = !DILocation(line: 2930, column: 27, scope: !9502)
!9502 = distinct !DILexicalBlock(scope: !9492, file: !3, line: 2930, column: 11)
!9503 = !DILocation(line: 2930, column: 11, scope: !9502)
!9504 = !DILocation(line: 2930, column: 11, scope: !9492)
!9505 = !DILocalVariable(name: "lhs", scope: !9506, file: !3, line: 2932, type: !1696)
!9506 = distinct !DILexicalBlock(scope: !9502, file: !3, line: 2931, column: 2)
!9507 = !DILocation(line: 2932, column: 9, scope: !9506)
!9508 = !DILocation(line: 2932, column: 31, scope: !9506)
!9509 = !DILocation(line: 2932, column: 15, scope: !9506)
!9510 = !DILocation(line: 2933, column: 4, scope: !9506)
!9511 = !DILocation(line: 2933, column: 32, scope: !9506)
!9512 = !DILocation(line: 2933, column: 11, scope: !9506)
!9513 = !DILocation(line: 2934, column: 12, scope: !9506)
!9514 = !DILocation(line: 2934, column: 10, scope: !9506)
!9515 = distinct !{!9515, !9510, !9513}
!9516 = !DILocation(line: 2935, column: 8, scope: !9517)
!9517 = distinct !DILexicalBlock(scope: !9506, file: !3, line: 2935, column: 8)
!9518 = !DILocation(line: 2936, column: 8, scope: !9517)
!9519 = !DILocation(line: 2936, column: 11, scope: !9517)
!9520 = !DILocation(line: 2936, column: 36, scope: !9517)
!9521 = !DILocation(line: 2936, column: 33, scope: !9517)
!9522 = !DILocation(line: 2935, column: 8, scope: !9506)
!9523 = !DILocation(line: 2937, column: 13, scope: !9517)
!9524 = !DILocation(line: 2937, column: 6, scope: !9517)
!9525 = !DILocation(line: 2938, column: 2, scope: !9506)
!9526 = !DILocation(line: 2939, column: 35, scope: !9527)
!9527 = distinct !DILexicalBlock(scope: !9492, file: !3, line: 2939, column: 11)
!9528 = !DILocation(line: 2939, column: 11, scope: !9527)
!9529 = !DILocation(line: 2939, column: 11, scope: !9492)
!9530 = !DILocalVariable(name: "rhs", scope: !9531, file: !3, line: 2941, type: !1696)
!9531 = distinct !DILexicalBlock(scope: !9527, file: !3, line: 2940, column: 2)
!9532 = !DILocation(line: 2941, column: 9, scope: !9531)
!9533 = !DILocation(line: 2941, column: 35, scope: !9531)
!9534 = !DILocation(line: 2941, column: 15, scope: !9531)
!9535 = !DILocation(line: 2942, column: 4, scope: !9531)
!9536 = !DILocation(line: 2942, column: 32, scope: !9531)
!9537 = !DILocation(line: 2942, column: 11, scope: !9531)
!9538 = !DILocation(line: 2943, column: 12, scope: !9531)
!9539 = !DILocation(line: 2943, column: 10, scope: !9531)
!9540 = distinct !{!9540, !9535, !9538}
!9541 = !DILocation(line: 2944, column: 8, scope: !9542)
!9542 = distinct !DILexicalBlock(scope: !9531, file: !3, line: 2944, column: 8)
!9543 = !DILocation(line: 2945, column: 8, scope: !9542)
!9544 = !DILocation(line: 2945, column: 11, scope: !9542)
!9545 = !DILocation(line: 2945, column: 36, scope: !9542)
!9546 = !DILocation(line: 2945, column: 33, scope: !9542)
!9547 = !DILocation(line: 2944, column: 8, scope: !9531)
!9548 = !DILocation(line: 2946, column: 13, scope: !9542)
!9549 = !DILocation(line: 2946, column: 6, scope: !9542)
!9550 = !DILocation(line: 2947, column: 2, scope: !9531)
!9551 = !DILocation(line: 2948, column: 32, scope: !9552)
!9552 = distinct !DILexicalBlock(scope: !9527, file: !3, line: 2948, column: 16)
!9553 = !DILocation(line: 2948, column: 16, scope: !9552)
!9554 = !DILocation(line: 2948, column: 16, scope: !9527)
!9555 = !DILocalVariable(name: "i", scope: !9556, file: !3, line: 2950, type: !7)
!9556 = distinct !DILexicalBlock(scope: !9552, file: !3, line: 2949, column: 2)
!9557 = !DILocation(line: 2950, column: 13, scope: !9556)
!9558 = !DILocation(line: 2951, column: 11, scope: !9559)
!9559 = distinct !DILexicalBlock(scope: !9556, file: !3, line: 2951, column: 4)
!9560 = !DILocation(line: 2951, column: 9, scope: !9559)
!9561 = !DILocation(line: 2951, column: 16, scope: !9562)
!9562 = distinct !DILexicalBlock(scope: !9559, file: !3, line: 2951, column: 4)
!9563 = !DILocation(line: 2951, column: 42, scope: !9562)
!9564 = !DILocation(line: 2951, column: 20, scope: !9562)
!9565 = !DILocation(line: 2951, column: 18, scope: !9562)
!9566 = !DILocation(line: 2951, column: 4, scope: !9559)
!9567 = !DILocalVariable(name: "arg", scope: !9568, file: !3, line: 2953, type: !1696)
!9568 = distinct !DILexicalBlock(scope: !9562, file: !3, line: 2952, column: 6)
!9569 = !DILocation(line: 2953, column: 13, scope: !9568)
!9570 = !DILocation(line: 2953, column: 36, scope: !9568)
!9571 = !DILocation(line: 2953, column: 42, scope: !9568)
!9572 = !DILocation(line: 2953, column: 19, scope: !9568)
!9573 = !DILocation(line: 2954, column: 8, scope: !9568)
!9574 = !DILocation(line: 2954, column: 36, scope: !9568)
!9575 = !DILocation(line: 2954, column: 15, scope: !9568)
!9576 = !DILocation(line: 2955, column: 9, scope: !9568)
!9577 = !DILocation(line: 2955, column: 7, scope: !9568)
!9578 = distinct !{!9578, !9573, !9576}
!9579 = !DILocation(line: 2956, column: 12, scope: !9580)
!9580 = distinct !DILexicalBlock(scope: !9568, file: !3, line: 2956, column: 12)
!9581 = !DILocation(line: 2957, column: 5, scope: !9580)
!9582 = !DILocation(line: 2957, column: 8, scope: !9580)
!9583 = !DILocation(line: 2957, column: 33, scope: !9580)
!9584 = !DILocation(line: 2957, column: 30, scope: !9580)
!9585 = !DILocation(line: 2956, column: 12, scope: !9568)
!9586 = !DILocation(line: 2958, column: 10, scope: !9580)
!9587 = !DILocation(line: 2958, column: 3, scope: !9580)
!9588 = !DILocation(line: 2959, column: 6, scope: !9568)
!9589 = !DILocation(line: 2951, column: 49, scope: !9562)
!9590 = !DILocation(line: 2951, column: 4, scope: !9562)
!9591 = distinct !{!9591, !9566, !9592}
!9592 = !DILocation(line: 2959, column: 6, scope: !9559)
!9593 = !DILocation(line: 2960, column: 2, scope: !9556)
!9594 = !DILocation(line: 2964, column: 7, scope: !9595)
!9595 = distinct !DILexicalBlock(scope: !9492, file: !3, line: 2964, column: 7)
!9596 = !DILocation(line: 2964, column: 7, scope: !9597)
!9597 = distinct !DILexicalBlock(scope: !9595, file: !3, line: 2964, column: 7)
!9598 = !DILocation(line: 2965, column: 2, scope: !9597)
!9599 = distinct !{!9599, !9594, !9600}
!9600 = !DILocation(line: 2965, column: 4, scope: !9595)
!9601 = !DILocation(line: 2967, column: 11, scope: !9602)
!9602 = distinct !DILexicalBlock(scope: !9492, file: !3, line: 2967, column: 11)
!9603 = !DILocation(line: 2967, column: 19, scope: !9602)
!9604 = !DILocation(line: 2967, column: 11, scope: !9492)
!9605 = !DILocation(line: 2968, column: 6, scope: !9602)
!9606 = !DILocation(line: 2968, column: 2, scope: !9602)
!9607 = !DILocation(line: 2970, column: 11, scope: !9608)
!9608 = distinct !DILexicalBlock(scope: !9492, file: !3, line: 2970, column: 11)
!9609 = !DILocation(line: 2970, column: 11, scope: !9492)
!9610 = !DILocation(line: 2971, column: 2, scope: !9611)
!9611 = distinct !DILexicalBlock(scope: !9608, file: !3, line: 2971, column: 2)
!9612 = !DILocation(line: 2972, column: 5, scope: !9492)
!9613 = distinct !{!9613, !9487, !9614}
!9614 = !DILocation(line: 2972, column: 5, scope: !9488)
!9615 = !DILocation(line: 2974, column: 10, scope: !9466)
!9616 = !DILocation(line: 2974, column: 3, scope: !9466)
!9617 = distinct !DISubprogram(name: "has_zero_uses", scope: !5226, file: !5226, line: 332, type: !5863, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9618 = !DILocalVariable(name: "var", arg: 1, scope: !9617, file: !5226, line: 332, type: !5865)
!9619 = !DILocation(line: 332, column: 27, scope: !9617)
!9620 = !DILocalVariable(name: "ptr", scope: !9617, file: !5226, line: 334, type: !9621)
!9621 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9622)
!9622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9623, size: 64)
!9623 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3058)
!9624 = !DILocation(line: 334, column: 34, scope: !9617)
!9625 = !DILocation(line: 334, column: 42, scope: !9617)
!9626 = !DILocation(line: 337, column: 7, scope: !9627)
!9627 = distinct !DILexicalBlock(scope: !9617, file: !5226, line: 337, column: 7)
!9628 = !DILocation(line: 337, column: 14, scope: !9627)
!9629 = !DILocation(line: 337, column: 19, scope: !9627)
!9630 = !DILocation(line: 337, column: 11, scope: !9627)
!9631 = !DILocation(line: 337, column: 7, scope: !9617)
!9632 = !DILocation(line: 338, column: 5, scope: !9627)
!9633 = !DILocation(line: 342, column: 8, scope: !9634)
!9634 = distinct !DILexicalBlock(scope: !9617, file: !5226, line: 342, column: 7)
!9635 = !DILocation(line: 342, column: 7, scope: !9617)
!9636 = !DILocation(line: 343, column: 5, scope: !9634)
!9637 = !DILocation(line: 345, column: 27, scope: !9617)
!9638 = !DILocation(line: 345, column: 10, scope: !9617)
!9639 = !DILocation(line: 345, column: 3, scope: !9617)
!9640 = !DILocation(line: 346, column: 1, scope: !9617)
!9641 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !5226, file: !5226, line: 1058, type: !9642, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9642 = !DISubroutineType(types: !9643)
!9643 = !{!2024, !9644, !1696}
!9644 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9470, size: 64)
!9645 = !DILocalVariable(name: "imm", arg: 1, scope: !9641, file: !5226, line: 1058, type: !9644)
!9646 = !DILocation(line: 1058, column: 39, scope: !9641)
!9647 = !DILocalVariable(name: "var", arg: 2, scope: !9641, file: !5226, line: 1058, type: !1696)
!9648 = !DILocation(line: 1058, column: 49, scope: !9641)
!9649 = !DILocation(line: 1060, column: 18, scope: !9641)
!9650 = !DILocation(line: 1060, column: 3, scope: !9641)
!9651 = !DILocation(line: 1060, column: 8, scope: !9641)
!9652 = !DILocation(line: 1060, column: 14, scope: !9641)
!9653 = !DILocation(line: 1061, column: 18, scope: !9641)
!9654 = !DILocation(line: 1061, column: 23, scope: !9641)
!9655 = !DILocation(line: 1061, column: 30, scope: !9641)
!9656 = !DILocation(line: 1061, column: 3, scope: !9641)
!9657 = !DILocation(line: 1061, column: 8, scope: !9641)
!9658 = !DILocation(line: 1061, column: 16, scope: !9641)
!9659 = !DILocation(line: 1062, column: 3, scope: !9641)
!9660 = !DILocation(line: 1062, column: 8, scope: !9641)
!9661 = !DILocation(line: 1062, column: 22, scope: !9641)
!9662 = !DILocation(line: 1067, column: 3, scope: !9641)
!9663 = !DILocation(line: 1067, column: 8, scope: !9641)
!9664 = !DILocation(line: 1067, column: 18, scope: !9641)
!9665 = !DILocation(line: 1067, column: 23, scope: !9641)
!9666 = !DILocation(line: 1068, column: 3, scope: !9641)
!9667 = !DILocation(line: 1068, column: 8, scope: !9641)
!9668 = !DILocation(line: 1068, column: 18, scope: !9641)
!9669 = !DILocation(line: 1068, column: 23, scope: !9641)
!9670 = !DILocation(line: 1069, column: 3, scope: !9641)
!9671 = !DILocation(line: 1069, column: 8, scope: !9641)
!9672 = !DILocation(line: 1069, column: 18, scope: !9641)
!9673 = !DILocation(line: 1069, column: 22, scope: !9641)
!9674 = !DILocation(line: 1069, column: 27, scope: !9641)
!9675 = !DILocation(line: 1070, column: 3, scope: !9641)
!9676 = !DILocation(line: 1070, column: 8, scope: !9641)
!9677 = !DILocation(line: 1070, column: 18, scope: !9641)
!9678 = !DILocation(line: 1070, column: 22, scope: !9641)
!9679 = !DILocation(line: 1072, column: 27, scope: !9680)
!9680 = distinct !DILexicalBlock(scope: !9641, file: !5226, line: 1072, column: 7)
!9681 = !DILocation(line: 1072, column: 7, scope: !9680)
!9682 = !DILocation(line: 1072, column: 7, scope: !9641)
!9683 = !DILocation(line: 1073, column: 5, scope: !9680)
!9684 = !DILocation(line: 1075, column: 25, scope: !9641)
!9685 = !DILocation(line: 1075, column: 30, scope: !9641)
!9686 = !DILocation(line: 1075, column: 39, scope: !9641)
!9687 = !DILocation(line: 1075, column: 3, scope: !9641)
!9688 = !DILocation(line: 1077, column: 10, scope: !9641)
!9689 = !DILocation(line: 1077, column: 3, scope: !9641)
!9690 = !DILocation(line: 1078, column: 1, scope: !9641)
!9691 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !5226, file: !5226, line: 969, type: !9692, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9692 = !DISubroutineType(types: !9693)
!9693 = !{!1815, !9694}
!9694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9695, size: 64)
!9695 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9470)
!9696 = !DILocalVariable(name: "imm", arg: 1, scope: !9691, file: !5226, line: 969, type: !9694)
!9697 = !DILocation(line: 969, column: 45, scope: !9691)
!9698 = !DILocation(line: 971, column: 11, scope: !9691)
!9699 = !DILocation(line: 971, column: 16, scope: !9691)
!9700 = !DILocation(line: 971, column: 27, scope: !9691)
!9701 = !DILocation(line: 971, column: 32, scope: !9691)
!9702 = !DILocation(line: 971, column: 24, scope: !9691)
!9703 = !DILocation(line: 971, column: 10, scope: !9691)
!9704 = !DILocation(line: 971, column: 3, scope: !9691)
!9705 = distinct !DISubprogram(name: "is_gimple_debug", scope: !1458, file: !1458, line: 3249, type: !5748, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9706 = !DILocalVariable(name: "gs", arg: 1, scope: !9705, file: !1458, line: 3249, type: !5514)
!9707 = !DILocation(line: 3249, column: 31, scope: !9705)
!9708 = !DILocation(line: 3251, column: 23, scope: !9705)
!9709 = !DILocation(line: 3251, column: 10, scope: !9705)
!9710 = !DILocation(line: 3251, column: 27, scope: !9705)
!9711 = !DILocation(line: 3251, column: 3, scope: !9705)
!9712 = distinct !DISubprogram(name: "gimple_has_lhs", scope: !1458, file: !1458, line: 2210, type: !5572, scopeLine: 2211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9713 = !DILocalVariable(name: "stmt", arg: 1, scope: !9712, file: !1458, line: 2210, type: !2024)
!9714 = !DILocation(line: 2210, column: 24, scope: !9712)
!9715 = !DILocation(line: 2212, column: 29, scope: !9712)
!9716 = !DILocation(line: 2212, column: 11, scope: !9712)
!9717 = !DILocation(line: 2213, column: 4, scope: !9712)
!9718 = !DILocation(line: 2213, column: 24, scope: !9712)
!9719 = !DILocation(line: 2213, column: 8, scope: !9712)
!9720 = !DILocation(line: 2214, column: 8, scope: !9712)
!9721 = !DILocation(line: 2214, column: 28, scope: !9712)
!9722 = !DILocation(line: 2214, column: 11, scope: !9712)
!9723 = !DILocation(line: 2214, column: 34, scope: !9712)
!9724 = !DILocation(line: 0, scope: !9712)
!9725 = !DILocation(line: 2212, column: 10, scope: !9712)
!9726 = !DILocation(line: 2212, column: 3, scope: !9712)
!9727 = distinct !DISubprogram(name: "is_gimple_call", scope: !1458, file: !1458, line: 1870, type: !5748, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9728 = !DILocalVariable(name: "gs", arg: 1, scope: !9727, file: !1458, line: 1870, type: !5514)
!9729 = !DILocation(line: 1870, column: 30, scope: !9727)
!9730 = !DILocation(line: 1872, column: 23, scope: !9727)
!9731 = !DILocation(line: 1872, column: 10, scope: !9727)
!9732 = !DILocation(line: 1872, column: 27, scope: !9727)
!9733 = !DILocation(line: 1872, column: 3, scope: !9727)
!9734 = distinct !DISubprogram(name: "gimple_call_arg", scope: !1458, file: !1458, line: 2025, type: !5649, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9735 = !DILocalVariable(name: "gs", arg: 1, scope: !9734, file: !1458, line: 2025, type: !5514)
!9736 = !DILocation(line: 2025, column: 31, scope: !9734)
!9737 = !DILocalVariable(name: "index", arg: 2, scope: !9734, file: !1458, line: 2025, type: !7)
!9738 = !DILocation(line: 2025, column: 44, scope: !9734)
!9739 = !DILocation(line: 2028, column: 21, scope: !9734)
!9740 = !DILocation(line: 2028, column: 25, scope: !9734)
!9741 = !DILocation(line: 2028, column: 31, scope: !9734)
!9742 = !DILocation(line: 2028, column: 10, scope: !9734)
!9743 = !DILocation(line: 2028, column: 3, scope: !9734)
!9744 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !5226, file: !5226, line: 1101, type: !9745, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9745 = !DISubroutineType(types: !9746)
!9746 = !{!3056, !9644}
!9747 = !DILocalVariable(name: "imm", arg: 1, scope: !9744, file: !5226, line: 1101, type: !9644)
!9748 = !DILocation(line: 1101, column: 42, scope: !9744)
!9749 = !DILocation(line: 1103, column: 24, scope: !9744)
!9750 = !DILocation(line: 1103, column: 29, scope: !9744)
!9751 = !DILocation(line: 1103, column: 38, scope: !9744)
!9752 = !DILocation(line: 1103, column: 3, scope: !9744)
!9753 = !DILocation(line: 1103, column: 8, scope: !9744)
!9754 = !DILocation(line: 1103, column: 22, scope: !9744)
!9755 = !DILocation(line: 1104, column: 10, scope: !9744)
!9756 = !DILocation(line: 1104, column: 15, scope: !9744)
!9757 = !DILocation(line: 1104, column: 3, scope: !9744)
!9758 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !5226, file: !5226, line: 1110, type: !9692, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9759 = !DILocalVariable(name: "imm", arg: 1, scope: !9758, file: !5226, line: 1110, type: !9694)
!9760 = !DILocation(line: 1110, column: 48, scope: !9758)
!9761 = !DILocation(line: 1112, column: 11, scope: !9758)
!9762 = !DILocation(line: 1112, column: 16, scope: !9758)
!9763 = !DILocation(line: 1112, column: 29, scope: !9758)
!9764 = !DILocation(line: 1112, column: 34, scope: !9758)
!9765 = !DILocation(line: 1112, column: 24, scope: !9758)
!9766 = !DILocation(line: 1112, column: 10, scope: !9758)
!9767 = !DILocation(line: 1112, column: 3, scope: !9758)
!9768 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !5226, file: !5226, line: 1118, type: !9745, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9769 = !DILocalVariable(name: "imm", arg: 1, scope: !9768, file: !5226, line: 1118, type: !9644)
!9770 = !DILocation(line: 1118, column: 41, scope: !9768)
!9771 = !DILocation(line: 1120, column: 18, scope: !9768)
!9772 = !DILocation(line: 1120, column: 23, scope: !9768)
!9773 = !DILocation(line: 1120, column: 3, scope: !9768)
!9774 = !DILocation(line: 1120, column: 8, scope: !9768)
!9775 = !DILocation(line: 1120, column: 16, scope: !9768)
!9776 = !DILocation(line: 1121, column: 30, scope: !9777)
!9777 = distinct !DILexicalBlock(scope: !9768, file: !5226, line: 1121, column: 7)
!9778 = !DILocation(line: 1121, column: 7, scope: !9777)
!9779 = !DILocation(line: 1121, column: 7, scope: !9768)
!9780 = !DILocation(line: 1122, column: 5, scope: !9777)
!9781 = !DILocation(line: 1125, column: 28, scope: !9782)
!9782 = distinct !DILexicalBlock(scope: !9777, file: !5226, line: 1124, column: 5)
!9783 = !DILocation(line: 1125, column: 33, scope: !9782)
!9784 = !DILocation(line: 1125, column: 42, scope: !9782)
!9785 = !DILocation(line: 1125, column: 7, scope: !9782)
!9786 = !DILocation(line: 1125, column: 12, scope: !9782)
!9787 = !DILocation(line: 1125, column: 26, scope: !9782)
!9788 = !DILocation(line: 1126, column: 14, scope: !9782)
!9789 = !DILocation(line: 1126, column: 19, scope: !9782)
!9790 = !DILocation(line: 1126, column: 7, scope: !9782)
!9791 = !DILocation(line: 1128, column: 1, scope: !9768)
!9792 = distinct !DISubprogram(name: "end_imm_use_stmt_traverse", scope: !5226, file: !5226, line: 978, type: !9793, scopeLine: 979, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9793 = !DISubroutineType(types: !9794)
!9794 = !{null, !9644}
!9795 = !DILocalVariable(name: "imm", arg: 1, scope: !9792, file: !5226, line: 978, type: !9644)
!9796 = !DILocation(line: 978, column: 46, scope: !9792)
!9797 = !DILocation(line: 980, column: 21, scope: !9792)
!9798 = !DILocation(line: 980, column: 26, scope: !9792)
!9799 = !DILocation(line: 980, column: 3, scope: !9792)
!9800 = !DILocation(line: 981, column: 1, scope: !9792)
!9801 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !5226, file: !5226, line: 1083, type: !9802, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9802 = !DISubroutineType(types: !9803)
!9803 = !{!2024, !9644}
!9804 = !DILocalVariable(name: "imm", arg: 1, scope: !9801, file: !5226, line: 1083, type: !9644)
!9805 = !DILocation(line: 1083, column: 38, scope: !9801)
!9806 = !DILocation(line: 1085, column: 18, scope: !9801)
!9807 = !DILocation(line: 1085, column: 23, scope: !9801)
!9808 = !DILocation(line: 1085, column: 33, scope: !9801)
!9809 = !DILocation(line: 1085, column: 3, scope: !9801)
!9810 = !DILocation(line: 1085, column: 8, scope: !9801)
!9811 = !DILocation(line: 1085, column: 16, scope: !9801)
!9812 = !DILocation(line: 1086, column: 27, scope: !9813)
!9813 = distinct !DILexicalBlock(scope: !9801, file: !5226, line: 1086, column: 7)
!9814 = !DILocation(line: 1086, column: 7, scope: !9813)
!9815 = !DILocation(line: 1086, column: 7, scope: !9801)
!9816 = !DILocation(line: 1088, column: 11, scope: !9817)
!9817 = distinct !DILexicalBlock(scope: !9818, file: !5226, line: 1088, column: 11)
!9818 = distinct !DILexicalBlock(scope: !9813, file: !5226, line: 1087, column: 5)
!9819 = !DILocation(line: 1088, column: 16, scope: !9817)
!9820 = !DILocation(line: 1088, column: 26, scope: !9817)
!9821 = !DILocation(line: 1088, column: 31, scope: !9817)
!9822 = !DILocation(line: 1088, column: 11, scope: !9818)
!9823 = !DILocation(line: 1089, column: 19, scope: !9817)
!9824 = !DILocation(line: 1089, column: 24, scope: !9817)
!9825 = !DILocation(line: 1089, column: 2, scope: !9817)
!9826 = !DILocation(line: 1090, column: 7, scope: !9818)
!9827 = !DILocation(line: 1093, column: 25, scope: !9801)
!9828 = !DILocation(line: 1093, column: 30, scope: !9801)
!9829 = !DILocation(line: 1093, column: 39, scope: !9801)
!9830 = !DILocation(line: 1093, column: 3, scope: !9801)
!9831 = !DILocation(line: 1094, column: 10, scope: !9801)
!9832 = !DILocation(line: 1094, column: 3, scope: !9801)
!9833 = !DILocation(line: 1095, column: 1, scope: !9801)
!9834 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !5226, file: !5226, line: 1018, type: !9835, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9835 = !DISubroutineType(types: !9836)
!9836 = !{null, !3056, !9644}
!9837 = !DILocalVariable(name: "head", arg: 1, scope: !9834, file: !5226, line: 1018, type: !3056)
!9838 = !DILocation(line: 1018, column: 37, scope: !9834)
!9839 = !DILocalVariable(name: "imm", arg: 2, scope: !9834, file: !5226, line: 1018, type: !9644)
!9840 = !DILocation(line: 1018, column: 61, scope: !9834)
!9841 = !DILocalVariable(name: "use_p", scope: !9834, file: !5226, line: 1020, type: !3056)
!9842 = !DILocation(line: 1020, column: 17, scope: !9834)
!9843 = !DILocalVariable(name: "last_p", scope: !9834, file: !5226, line: 1021, type: !3056)
!9844 = !DILocation(line: 1021, column: 17, scope: !9834)
!9845 = !DILocation(line: 1021, column: 26, scope: !9834)
!9846 = !DILocalVariable(name: "head_stmt", scope: !9834, file: !5226, line: 1022, type: !2024)
!9847 = !DILocation(line: 1022, column: 10, scope: !9834)
!9848 = !DILocation(line: 1022, column: 22, scope: !9834)
!9849 = !DILocalVariable(name: "use", scope: !9834, file: !5226, line: 1023, type: !1696)
!9850 = !DILocation(line: 1023, column: 8, scope: !9834)
!9851 = !DILocation(line: 1023, column: 14, scope: !9834)
!9852 = !DILocalVariable(name: "op_iter", scope: !9834, file: !5226, line: 1024, type: !9853)
!9853 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !1679, line: 140, baseType: !9854)
!9854 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !1679, line: 131, size: 320, elements: !9855)
!9855 = !{!9856, !9857, !9858, !9860, !9862, !9863, !9864}
!9856 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !9854, file: !1679, line: 133, baseType: !1815, size: 8)
!9857 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !9854, file: !1679, line: 134, baseType: !1678, size: 32, offset: 32)
!9858 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !9854, file: !1679, line: 135, baseType: !9859, size: 64, offset: 64)
!9859 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !1679, line: 42, baseType: !2053)
!9860 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !9854, file: !1679, line: 136, baseType: !9861, size: 64, offset: 128)
!9861 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !1679, line: 50, baseType: !2060)
!9862 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !9854, file: !1679, line: 137, baseType: !1693, size: 32, offset: 192)
!9863 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !9854, file: !1679, line: 138, baseType: !1693, size: 32, offset: 224)
!9864 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !9854, file: !1679, line: 139, baseType: !2024, size: 64, offset: 256)
!9865 = !DILocation(line: 1024, column: 15, scope: !9834)
!9866 = !DILocalVariable(name: "flag", scope: !9834, file: !5226, line: 1025, type: !1693)
!9867 = !DILocation(line: 1025, column: 7, scope: !9834)
!9868 = !DILocation(line: 1028, column: 26, scope: !9834)
!9869 = !DILocation(line: 1028, column: 11, scope: !9834)
!9870 = !DILocation(line: 1028, column: 8, scope: !9834)
!9871 = !DILocation(line: 1030, column: 20, scope: !9872)
!9872 = distinct !DILexicalBlock(scope: !9834, file: !5226, line: 1030, column: 7)
!9873 = !DILocation(line: 1030, column: 7, scope: !9872)
!9874 = !DILocation(line: 1030, column: 31, scope: !9872)
!9875 = !DILocation(line: 1030, column: 7, scope: !9834)
!9876 = !DILocation(line: 1032, column: 7, scope: !9877)
!9877 = distinct !DILexicalBlock(scope: !9878, file: !5226, line: 1032, column: 7)
!9878 = distinct !DILexicalBlock(scope: !9872, file: !5226, line: 1031, column: 5)
!9879 = !DILocation(line: 1032, column: 7, scope: !9880)
!9880 = distinct !DILexicalBlock(scope: !9877, file: !5226, line: 1032, column: 7)
!9881 = !DILocation(line: 1033, column: 6, scope: !9882)
!9882 = distinct !DILexicalBlock(scope: !9880, file: !5226, line: 1033, column: 6)
!9883 = !DILocation(line: 1033, column: 30, scope: !9882)
!9884 = !DILocation(line: 1033, column: 27, scope: !9882)
!9885 = !DILocation(line: 1033, column: 6, scope: !9880)
!9886 = !DILocation(line: 1034, column: 34, scope: !9882)
!9887 = !DILocation(line: 1034, column: 41, scope: !9882)
!9888 = !DILocation(line: 1034, column: 47, scope: !9882)
!9889 = !DILocation(line: 1034, column: 13, scope: !9882)
!9890 = !DILocation(line: 1034, column: 11, scope: !9882)
!9891 = !DILocation(line: 1034, column: 4, scope: !9882)
!9892 = distinct !{!9892, !9876, !9893}
!9893 = !DILocation(line: 1034, column: 53, scope: !9877)
!9894 = !DILocation(line: 1035, column: 5, scope: !9878)
!9895 = !DILocation(line: 1038, column: 11, scope: !9896)
!9896 = distinct !DILexicalBlock(scope: !9897, file: !5226, line: 1038, column: 11)
!9897 = distinct !DILexicalBlock(scope: !9872, file: !5226, line: 1037, column: 5)
!9898 = !DILocation(line: 1038, column: 16, scope: !9896)
!9899 = !DILocation(line: 1038, column: 11, scope: !9897)
!9900 = !DILocation(line: 1040, column: 4, scope: !9901)
!9901 = distinct !DILexicalBlock(scope: !9902, file: !5226, line: 1040, column: 4)
!9902 = distinct !DILexicalBlock(scope: !9896, file: !5226, line: 1039, column: 2)
!9903 = !DILocation(line: 1040, column: 4, scope: !9904)
!9904 = distinct !DILexicalBlock(scope: !9901, file: !5226, line: 1040, column: 4)
!9905 = !DILocation(line: 1041, column: 10, scope: !9906)
!9906 = distinct !DILexicalBlock(scope: !9904, file: !5226, line: 1041, column: 10)
!9907 = !DILocation(line: 1041, column: 34, scope: !9906)
!9908 = !DILocation(line: 1041, column: 31, scope: !9906)
!9909 = !DILocation(line: 1041, column: 10, scope: !9904)
!9910 = !DILocation(line: 1042, column: 38, scope: !9906)
!9911 = !DILocation(line: 1042, column: 45, scope: !9906)
!9912 = !DILocation(line: 1042, column: 51, scope: !9906)
!9913 = !DILocation(line: 1042, column: 17, scope: !9906)
!9914 = !DILocation(line: 1042, column: 15, scope: !9906)
!9915 = !DILocation(line: 1042, column: 8, scope: !9906)
!9916 = distinct !{!9916, !9900, !9917}
!9917 = !DILocation(line: 1042, column: 57, scope: !9901)
!9918 = !DILocation(line: 1043, column: 2, scope: !9902)
!9919 = !DILocation(line: 1044, column: 41, scope: !9920)
!9920 = distinct !DILexicalBlock(scope: !9896, file: !5226, line: 1044, column: 16)
!9921 = !DILocation(line: 1044, column: 25, scope: !9920)
!9922 = !DILocation(line: 1044, column: 23, scope: !9920)
!9923 = !DILocation(line: 1044, column: 53, scope: !9920)
!9924 = !DILocation(line: 1044, column: 16, scope: !9896)
!9925 = !DILocation(line: 1046, column: 8, scope: !9926)
!9926 = distinct !DILexicalBlock(scope: !9927, file: !5226, line: 1046, column: 8)
!9927 = distinct !DILexicalBlock(scope: !9920, file: !5226, line: 1045, column: 2)
!9928 = !DILocation(line: 1046, column: 32, scope: !9926)
!9929 = !DILocation(line: 1046, column: 29, scope: !9926)
!9930 = !DILocation(line: 1046, column: 8, scope: !9927)
!9931 = !DILocation(line: 1047, column: 36, scope: !9926)
!9932 = !DILocation(line: 1047, column: 43, scope: !9926)
!9933 = !DILocation(line: 1047, column: 49, scope: !9926)
!9934 = !DILocation(line: 1047, column: 15, scope: !9926)
!9935 = !DILocation(line: 1047, column: 13, scope: !9926)
!9936 = !DILocation(line: 1047, column: 6, scope: !9926)
!9937 = !DILocation(line: 1048, column: 2, scope: !9927)
!9938 = !DILocation(line: 1051, column: 7, scope: !9939)
!9939 = distinct !DILexicalBlock(scope: !9834, file: !5226, line: 1051, column: 7)
!9940 = !DILocation(line: 1051, column: 12, scope: !9939)
!9941 = !DILocation(line: 1051, column: 22, scope: !9939)
!9942 = !DILocation(line: 1051, column: 27, scope: !9939)
!9943 = !DILocation(line: 1051, column: 7, scope: !9834)
!9944 = !DILocation(line: 1052, column: 22, scope: !9939)
!9945 = !DILocation(line: 1052, column: 27, scope: !9939)
!9946 = !DILocation(line: 1052, column: 5, scope: !9939)
!9947 = !DILocation(line: 1053, column: 27, scope: !9834)
!9948 = !DILocation(line: 1053, column: 32, scope: !9834)
!9949 = !DILocation(line: 1053, column: 44, scope: !9834)
!9950 = !DILocation(line: 1053, column: 3, scope: !9834)
!9951 = !DILocation(line: 1054, column: 1, scope: !9834)
!9952 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !5226, file: !5226, line: 427, type: !9953, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9953 = !DISubroutineType(types: !9954)
!9954 = !{!1696, !3056}
!9955 = !DILocalVariable(name: "use", arg: 1, scope: !9952, file: !5226, line: 427, type: !3056)
!9956 = !DILocation(line: 427, column: 33, scope: !9952)
!9957 = !DILocation(line: 429, column: 12, scope: !9952)
!9958 = !DILocation(line: 429, column: 17, scope: !9952)
!9959 = !DILocation(line: 429, column: 10, scope: !9952)
!9960 = !DILocation(line: 429, column: 3, scope: !9952)
!9961 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !5226, file: !5226, line: 910, type: !9962, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!9962 = !DISubroutineType(types: !9963)
!9963 = !{!3056, !9964, !2024, !1693}
!9964 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9853, size: 64)
!9965 = !DILocalVariable(name: "ptr", arg: 1, scope: !9961, file: !5226, line: 910, type: !9964)
!9966 = !DILocation(line: 910, column: 35, scope: !9961)
!9967 = !DILocalVariable(name: "phi", arg: 2, scope: !9961, file: !5226, line: 910, type: !2024)
!9968 = !DILocation(line: 910, column: 47, scope: !9961)
!9969 = !DILocalVariable(name: "flags", arg: 3, scope: !9961, file: !5226, line: 910, type: !1693)
!9970 = !DILocation(line: 910, column: 56, scope: !9961)
!9971 = !DILocalVariable(name: "phi_def", scope: !9961, file: !5226, line: 912, type: !1696)
!9972 = !DILocation(line: 912, column: 8, scope: !9961)
!9973 = !DILocation(line: 912, column: 37, scope: !9961)
!9974 = !DILocation(line: 912, column: 18, scope: !9961)
!9975 = !DILocalVariable(name: "comp", scope: !9961, file: !5226, line: 913, type: !1693)
!9976 = !DILocation(line: 913, column: 7, scope: !9961)
!9977 = !DILocation(line: 915, column: 28, scope: !9961)
!9978 = !DILocation(line: 915, column: 3, scope: !9961)
!9979 = !DILocation(line: 916, column: 3, scope: !9961)
!9980 = !DILocation(line: 916, column: 8, scope: !9961)
!9981 = !DILocation(line: 916, column: 13, scope: !9961)
!9982 = !DILocation(line: 918, column: 3, scope: !9961)
!9983 = !DILocation(line: 920, column: 26, scope: !9961)
!9984 = !DILocation(line: 920, column: 11, scope: !9961)
!9985 = !DILocation(line: 920, column: 8, scope: !9961)
!9986 = !DILocation(line: 923, column: 8, scope: !9987)
!9987 = distinct !DILexicalBlock(scope: !9961, file: !5226, line: 923, column: 7)
!9988 = !DILocation(line: 923, column: 16, scope: !9987)
!9989 = !DILocation(line: 923, column: 14, scope: !9987)
!9990 = !DILocation(line: 923, column: 22, scope: !9987)
!9991 = !DILocation(line: 923, column: 7, scope: !9961)
!9992 = !DILocation(line: 925, column: 7, scope: !9993)
!9993 = distinct !DILexicalBlock(scope: !9987, file: !5226, line: 924, column: 5)
!9994 = !DILocation(line: 925, column: 12, scope: !9993)
!9995 = !DILocation(line: 925, column: 17, scope: !9993)
!9996 = !DILocation(line: 926, column: 7, scope: !9993)
!9997 = !DILocation(line: 929, column: 19, scope: !9961)
!9998 = !DILocation(line: 929, column: 3, scope: !9961)
!9999 = !DILocation(line: 929, column: 8, scope: !9961)
!10000 = !DILocation(line: 929, column: 17, scope: !9961)
!10001 = !DILocation(line: 930, column: 39, scope: !9961)
!10002 = !DILocation(line: 930, column: 18, scope: !9961)
!10003 = !DILocation(line: 930, column: 3, scope: !9961)
!10004 = !DILocation(line: 930, column: 8, scope: !9961)
!10005 = !DILocation(line: 930, column: 16, scope: !9961)
!10006 = !DILocation(line: 931, column: 3, scope: !9961)
!10007 = !DILocation(line: 931, column: 8, scope: !9961)
!10008 = !DILocation(line: 931, column: 18, scope: !9961)
!10009 = !DILocation(line: 932, column: 28, scope: !9961)
!10010 = !DILocation(line: 932, column: 10, scope: !9961)
!10011 = !DILocation(line: 932, column: 3, scope: !9961)
!10012 = !DILocation(line: 933, column: 1, scope: !9961)
!10013 = distinct !DISubprogram(name: "op_iter_done", scope: !5226, file: !5226, line: 652, type: !10014, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10014 = !DISubroutineType(types: !10015)
!10015 = !{!1815, !10016}
!10016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10017, size: 64)
!10017 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9853)
!10018 = !DILocalVariable(name: "ptr", arg: 1, scope: !10013, file: !5226, line: 652, type: !10016)
!10019 = !DILocation(line: 652, column: 34, scope: !10013)
!10020 = !DILocation(line: 654, column: 10, scope: !10013)
!10021 = !DILocation(line: 654, column: 15, scope: !10013)
!10022 = !DILocation(line: 654, column: 3, scope: !10013)
!10023 = distinct !DISubprogram(name: "move_use_after_head", scope: !5226, file: !5226, line: 990, type: !10024, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10024 = !DISubroutineType(types: !10025)
!10025 = !{!3056, !3056, !3056, !3056}
!10026 = !DILocalVariable(name: "use_p", arg: 1, scope: !10023, file: !5226, line: 990, type: !3056)
!10027 = !DILocation(line: 990, column: 36, scope: !10023)
!10028 = !DILocalVariable(name: "head", arg: 2, scope: !10023, file: !5226, line: 990, type: !3056)
!10029 = !DILocation(line: 990, column: 57, scope: !10023)
!10030 = !DILocalVariable(name: "last_p", arg: 3, scope: !10023, file: !5226, line: 991, type: !3056)
!10031 = !DILocation(line: 991, column: 23, scope: !10023)
!10032 = !DILocation(line: 997, column: 7, scope: !10033)
!10033 = distinct !DILexicalBlock(scope: !10023, file: !5226, line: 997, column: 7)
!10034 = !DILocation(line: 997, column: 16, scope: !10033)
!10035 = !DILocation(line: 997, column: 13, scope: !10033)
!10036 = !DILocation(line: 997, column: 7, scope: !10023)
!10037 = !DILocation(line: 1000, column: 11, scope: !10038)
!10038 = distinct !DILexicalBlock(scope: !10039, file: !5226, line: 1000, column: 11)
!10039 = distinct !DILexicalBlock(scope: !10033, file: !5226, line: 998, column: 5)
!10040 = !DILocation(line: 1000, column: 19, scope: !10038)
!10041 = !DILocation(line: 1000, column: 27, scope: !10038)
!10042 = !DILocation(line: 1000, column: 24, scope: !10038)
!10043 = !DILocation(line: 1000, column: 11, scope: !10039)
!10044 = !DILocation(line: 1001, column: 11, scope: !10038)
!10045 = !DILocation(line: 1001, column: 9, scope: !10038)
!10046 = !DILocation(line: 1001, column: 2, scope: !10038)
!10047 = !DILocation(line: 1005, column: 20, scope: !10048)
!10048 = distinct !DILexicalBlock(scope: !10038, file: !5226, line: 1003, column: 2)
!10049 = !DILocation(line: 1005, column: 4, scope: !10048)
!10050 = !DILocation(line: 1006, column: 26, scope: !10048)
!10051 = !DILocation(line: 1006, column: 33, scope: !10048)
!10052 = !DILocation(line: 1006, column: 4, scope: !10048)
!10053 = !DILocation(line: 1007, column: 13, scope: !10048)
!10054 = !DILocation(line: 1007, column: 11, scope: !10048)
!10055 = !DILocation(line: 1009, column: 5, scope: !10039)
!10056 = !DILocation(line: 1010, column: 10, scope: !10023)
!10057 = !DILocation(line: 1010, column: 3, scope: !10023)
!10058 = distinct !DISubprogram(name: "op_iter_next_use", scope: !5226, file: !5226, line: 659, type: !10059, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10059 = !DISubroutineType(types: !10060)
!10060 = !{!3056, !9964}
!10061 = !DILocalVariable(name: "ptr", arg: 1, scope: !10058, file: !5226, line: 659, type: !9964)
!10062 = !DILocation(line: 659, column: 32, scope: !10058)
!10063 = !DILocalVariable(name: "use_p", scope: !10058, file: !5226, line: 661, type: !3056)
!10064 = !DILocation(line: 661, column: 17, scope: !10058)
!10065 = !DILocation(line: 665, column: 7, scope: !10066)
!10066 = distinct !DILexicalBlock(scope: !10058, file: !5226, line: 665, column: 7)
!10067 = !DILocation(line: 665, column: 12, scope: !10066)
!10068 = !DILocation(line: 665, column: 7, scope: !10058)
!10069 = !DILocation(line: 667, column: 15, scope: !10070)
!10070 = distinct !DILexicalBlock(scope: !10066, file: !5226, line: 666, column: 5)
!10071 = !DILocation(line: 667, column: 13, scope: !10070)
!10072 = !DILocation(line: 668, column: 19, scope: !10070)
!10073 = !DILocation(line: 668, column: 24, scope: !10070)
!10074 = !DILocation(line: 668, column: 30, scope: !10070)
!10075 = !DILocation(line: 668, column: 7, scope: !10070)
!10076 = !DILocation(line: 668, column: 12, scope: !10070)
!10077 = !DILocation(line: 668, column: 17, scope: !10070)
!10078 = !DILocation(line: 669, column: 14, scope: !10070)
!10079 = !DILocation(line: 669, column: 7, scope: !10070)
!10080 = !DILocation(line: 671, column: 7, scope: !10081)
!10081 = distinct !DILexicalBlock(scope: !10058, file: !5226, line: 671, column: 7)
!10082 = !DILocation(line: 671, column: 12, scope: !10081)
!10083 = !DILocation(line: 671, column: 20, scope: !10081)
!10084 = !DILocation(line: 671, column: 25, scope: !10081)
!10085 = !DILocation(line: 671, column: 18, scope: !10081)
!10086 = !DILocation(line: 671, column: 7, scope: !10058)
!10087 = !DILocation(line: 673, column: 14, scope: !10088)
!10088 = distinct !DILexicalBlock(scope: !10081, file: !5226, line: 672, column: 5)
!10089 = !DILocation(line: 673, column: 7, scope: !10088)
!10090 = !DILocation(line: 675, column: 3, scope: !10058)
!10091 = !DILocation(line: 675, column: 8, scope: !10058)
!10092 = !DILocation(line: 675, column: 13, scope: !10058)
!10093 = !DILocation(line: 676, column: 3, scope: !10058)
!10094 = !DILocation(line: 677, column: 1, scope: !10058)
!10095 = distinct !DISubprogram(name: "op_iter_init_use", scope: !5226, file: !5226, line: 768, type: !9962, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10096 = !DILocalVariable(name: "ptr", arg: 1, scope: !10095, file: !5226, line: 768, type: !9964)
!10097 = !DILocation(line: 768, column: 32, scope: !10095)
!10098 = !DILocalVariable(name: "stmt", arg: 2, scope: !10095, file: !5226, line: 768, type: !2024)
!10099 = !DILocation(line: 768, column: 44, scope: !10095)
!10100 = !DILocalVariable(name: "flags", arg: 3, scope: !10095, file: !5226, line: 768, type: !1693)
!10101 = !DILocation(line: 768, column: 54, scope: !10095)
!10102 = !DILocation(line: 770, column: 3, scope: !10095)
!10103 = !DILocation(line: 772, column: 17, scope: !10095)
!10104 = !DILocation(line: 772, column: 22, scope: !10095)
!10105 = !DILocation(line: 772, column: 28, scope: !10095)
!10106 = !DILocation(line: 772, column: 3, scope: !10095)
!10107 = !DILocation(line: 773, column: 3, scope: !10095)
!10108 = !DILocation(line: 773, column: 8, scope: !10095)
!10109 = !DILocation(line: 773, column: 18, scope: !10095)
!10110 = !DILocation(line: 774, column: 28, scope: !10095)
!10111 = !DILocation(line: 774, column: 10, scope: !10095)
!10112 = !DILocation(line: 774, column: 3, scope: !10095)
!10113 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !1458, file: !1458, line: 1334, type: !10114, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10114 = !DISubroutineType(types: !10115)
!10115 = !{!3056, !5514}
!10116 = !DILocalVariable(name: "g", arg: 1, scope: !10113, file: !1458, line: 1334, type: !5514)
!10117 = !DILocation(line: 1334, column: 30, scope: !10113)
!10118 = !DILocalVariable(name: "ops", scope: !10113, file: !1458, line: 1336, type: !2060)
!10119 = !DILocation(line: 1336, column: 24, scope: !10113)
!10120 = !DILocation(line: 1337, column: 28, scope: !10121)
!10121 = distinct !DILexicalBlock(scope: !10113, file: !1458, line: 1337, column: 7)
!10122 = !DILocation(line: 1337, column: 8, scope: !10121)
!10123 = !DILocation(line: 1337, column: 7, scope: !10113)
!10124 = !DILocation(line: 1338, column: 5, scope: !10121)
!10125 = !DILocation(line: 1339, column: 9, scope: !10113)
!10126 = !DILocation(line: 1339, column: 12, scope: !10113)
!10127 = !DILocation(line: 1339, column: 18, scope: !10113)
!10128 = !DILocation(line: 1339, column: 25, scope: !10113)
!10129 = !DILocation(line: 1339, column: 7, scope: !10113)
!10130 = !DILocation(line: 1340, column: 7, scope: !10131)
!10131 = distinct !DILexicalBlock(scope: !10113, file: !1458, line: 1340, column: 7)
!10132 = !DILocation(line: 1341, column: 7, scope: !10131)
!10133 = !DILocation(line: 1341, column: 10, scope: !10131)
!10134 = !DILocation(line: 1341, column: 28, scope: !10131)
!10135 = !DILocation(line: 1341, column: 36, scope: !10131)
!10136 = !DILocation(line: 1341, column: 39, scope: !10131)
!10137 = !DILocation(line: 1341, column: 49, scope: !10131)
!10138 = !DILocation(line: 1341, column: 32, scope: !10131)
!10139 = !DILocation(line: 1340, column: 7, scope: !10113)
!10140 = !DILocation(line: 1342, column: 12, scope: !10131)
!10141 = !DILocation(line: 1342, column: 5, scope: !10131)
!10142 = !DILocation(line: 1343, column: 3, scope: !10113)
!10143 = !DILocation(line: 1344, column: 1, scope: !10113)
!10144 = distinct !DISubprogram(name: "delink_imm_use", scope: !5226, file: !5226, line: 188, type: !10145, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10145 = !DISubroutineType(types: !10146)
!10146 = !{null, !3057}
!10147 = !DILocalVariable(name: "linknode", arg: 1, scope: !10144, file: !5226, line: 188, type: !3057)
!10148 = !DILocation(line: 188, column: 36, scope: !10144)
!10149 = !DILocation(line: 191, column: 7, scope: !10150)
!10150 = distinct !DILexicalBlock(scope: !10144, file: !5226, line: 191, column: 7)
!10151 = !DILocation(line: 191, column: 17, scope: !10150)
!10152 = !DILocation(line: 191, column: 22, scope: !10150)
!10153 = !DILocation(line: 191, column: 7, scope: !10144)
!10154 = !DILocation(line: 192, column: 5, scope: !10150)
!10155 = !DILocation(line: 194, column: 26, scope: !10144)
!10156 = !DILocation(line: 194, column: 36, scope: !10144)
!10157 = !DILocation(line: 194, column: 3, scope: !10144)
!10158 = !DILocation(line: 194, column: 13, scope: !10144)
!10159 = !DILocation(line: 194, column: 19, scope: !10144)
!10160 = !DILocation(line: 194, column: 24, scope: !10144)
!10161 = !DILocation(line: 195, column: 26, scope: !10144)
!10162 = !DILocation(line: 195, column: 36, scope: !10144)
!10163 = !DILocation(line: 195, column: 3, scope: !10144)
!10164 = !DILocation(line: 195, column: 13, scope: !10144)
!10165 = !DILocation(line: 195, column: 19, scope: !10144)
!10166 = !DILocation(line: 195, column: 24, scope: !10144)
!10167 = !DILocation(line: 196, column: 3, scope: !10144)
!10168 = !DILocation(line: 196, column: 13, scope: !10144)
!10169 = !DILocation(line: 196, column: 18, scope: !10144)
!10170 = !DILocation(line: 197, column: 3, scope: !10144)
!10171 = !DILocation(line: 197, column: 13, scope: !10144)
!10172 = !DILocation(line: 197, column: 18, scope: !10144)
!10173 = !DILocation(line: 198, column: 1, scope: !10144)
!10174 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !5226, file: !5226, line: 202, type: !10175, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10175 = !DISubroutineType(types: !10176)
!10176 = !{null, !3057, !3057}
!10177 = !DILocalVariable(name: "linknode", arg: 1, scope: !10174, file: !5226, line: 202, type: !3057)
!10178 = !DILocation(line: 202, column: 42, scope: !10174)
!10179 = !DILocalVariable(name: "list", arg: 2, scope: !10174, file: !5226, line: 202, type: !3057)
!10180 = !DILocation(line: 202, column: 71, scope: !10174)
!10181 = !DILocation(line: 206, column: 20, scope: !10174)
!10182 = !DILocation(line: 206, column: 3, scope: !10174)
!10183 = !DILocation(line: 206, column: 13, scope: !10174)
!10184 = !DILocation(line: 206, column: 18, scope: !10174)
!10185 = !DILocation(line: 207, column: 20, scope: !10174)
!10186 = !DILocation(line: 207, column: 26, scope: !10174)
!10187 = !DILocation(line: 207, column: 3, scope: !10174)
!10188 = !DILocation(line: 207, column: 13, scope: !10174)
!10189 = !DILocation(line: 207, column: 18, scope: !10174)
!10190 = !DILocation(line: 208, column: 22, scope: !10174)
!10191 = !DILocation(line: 208, column: 3, scope: !10174)
!10192 = !DILocation(line: 208, column: 9, scope: !10174)
!10193 = !DILocation(line: 208, column: 15, scope: !10174)
!10194 = !DILocation(line: 208, column: 20, scope: !10174)
!10195 = !DILocation(line: 209, column: 16, scope: !10174)
!10196 = !DILocation(line: 209, column: 3, scope: !10174)
!10197 = !DILocation(line: 209, column: 9, scope: !10174)
!10198 = !DILocation(line: 209, column: 14, scope: !10174)
!10199 = !DILocation(line: 210, column: 1, scope: !10174)
!10200 = distinct !DISubprogram(name: "gimple_phi_result", scope: !1458, file: !1458, line: 3071, type: !5555, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10201 = !DILocalVariable(name: "gs", arg: 1, scope: !10200, file: !1458, line: 3071, type: !5514)
!10202 = !DILocation(line: 3071, column: 33, scope: !10200)
!10203 = !DILocation(line: 3074, column: 10, scope: !10200)
!10204 = !DILocation(line: 3074, column: 14, scope: !10200)
!10205 = !DILocation(line: 3074, column: 25, scope: !10200)
!10206 = !DILocation(line: 3074, column: 3, scope: !10200)
!10207 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !5226, file: !5226, line: 729, type: !10208, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10208 = !DISubroutineType(types: !10209)
!10209 = !{null, !9964}
!10210 = !DILocalVariable(name: "ptr", arg: 1, scope: !10207, file: !5226, line: 729, type: !9964)
!10211 = !DILocation(line: 729, column: 39, scope: !10207)
!10212 = !DILocation(line: 731, column: 3, scope: !10207)
!10213 = !DILocation(line: 731, column: 8, scope: !10207)
!10214 = !DILocation(line: 731, column: 13, scope: !10207)
!10215 = !DILocation(line: 732, column: 3, scope: !10207)
!10216 = !DILocation(line: 732, column: 8, scope: !10207)
!10217 = !DILocation(line: 732, column: 13, scope: !10207)
!10218 = !DILocation(line: 733, column: 3, scope: !10207)
!10219 = !DILocation(line: 733, column: 8, scope: !10207)
!10220 = !DILocation(line: 733, column: 18, scope: !10207)
!10221 = !DILocation(line: 734, column: 3, scope: !10207)
!10222 = !DILocation(line: 734, column: 8, scope: !10207)
!10223 = !DILocation(line: 734, column: 14, scope: !10207)
!10224 = !DILocation(line: 735, column: 3, scope: !10207)
!10225 = !DILocation(line: 735, column: 8, scope: !10207)
!10226 = !DILocation(line: 735, column: 16, scope: !10207)
!10227 = !DILocation(line: 736, column: 3, scope: !10207)
!10228 = !DILocation(line: 736, column: 8, scope: !10207)
!10229 = !DILocation(line: 736, column: 17, scope: !10207)
!10230 = !DILocation(line: 737, column: 3, scope: !10207)
!10231 = !DILocation(line: 737, column: 8, scope: !10207)
!10232 = !DILocation(line: 737, column: 13, scope: !10207)
!10233 = !DILocation(line: 738, column: 1, scope: !10207)
!10234 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !1458, file: !1458, line: 3061, type: !5530, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10235 = !DILocalVariable(name: "gs", arg: 1, scope: !10234, file: !1458, line: 3061, type: !5514)
!10236 = !DILocation(line: 3061, column: 35, scope: !10234)
!10237 = !DILocation(line: 3064, column: 10, scope: !10234)
!10238 = !DILocation(line: 3064, column: 14, scope: !10234)
!10239 = !DILocation(line: 3064, column: 25, scope: !10234)
!10240 = !DILocation(line: 3064, column: 3, scope: !10234)
!10241 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !5226, file: !5226, line: 442, type: !10242, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10242 = !DISubroutineType(types: !10243)
!10243 = !{!3056, !2024, !1693}
!10244 = !DILocalVariable(name: "gs", arg: 1, scope: !10241, file: !5226, line: 442, type: !2024)
!10245 = !DILocation(line: 442, column: 36, scope: !10241)
!10246 = !DILocalVariable(name: "i", arg: 2, scope: !10241, file: !5226, line: 442, type: !1693)
!10247 = !DILocation(line: 442, column: 44, scope: !10241)
!10248 = !DILocation(line: 444, column: 27, scope: !10241)
!10249 = !DILocation(line: 444, column: 31, scope: !10241)
!10250 = !DILocation(line: 444, column: 11, scope: !10241)
!10251 = !DILocation(line: 444, column: 35, scope: !10241)
!10252 = !DILocation(line: 444, column: 3, scope: !10241)
!10253 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !1458, file: !1458, line: 3100, type: !10254, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10254 = !DISubroutineType(types: !10255)
!10255 = !{!10256, !2024, !7}
!10256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2127, size: 64)
!10257 = !DILocalVariable(name: "gs", arg: 1, scope: !10253, file: !1458, line: 3100, type: !2024)
!10258 = !DILocation(line: 3100, column: 24, scope: !10253)
!10259 = !DILocalVariable(name: "index", arg: 2, scope: !10253, file: !1458, line: 3100, type: !7)
!10260 = !DILocation(line: 3100, column: 37, scope: !10253)
!10261 = !DILocation(line: 3103, column: 3, scope: !10253)
!10262 = !DILocation(line: 3104, column: 12, scope: !10253)
!10263 = !DILocation(line: 3104, column: 16, scope: !10253)
!10264 = !DILocation(line: 3104, column: 27, scope: !10253)
!10265 = !DILocation(line: 3104, column: 32, scope: !10253)
!10266 = !DILocation(line: 3104, column: 3, scope: !10253)
!10267 = distinct !DISubprogram(name: "op_iter_init", scope: !5226, file: !5226, line: 742, type: !10268, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10268 = !DISubroutineType(types: !10269)
!10269 = !{null, !9964, !2024, !1693}
!10270 = !DILocalVariable(name: "ptr", arg: 1, scope: !10267, file: !5226, line: 742, type: !9964)
!10271 = !DILocation(line: 742, column: 28, scope: !10267)
!10272 = !DILocalVariable(name: "stmt", arg: 2, scope: !10267, file: !5226, line: 742, type: !2024)
!10273 = !DILocation(line: 742, column: 40, scope: !10267)
!10274 = !DILocalVariable(name: "flags", arg: 3, scope: !10267, file: !5226, line: 742, type: !1693)
!10275 = !DILocation(line: 742, column: 50, scope: !10267)
!10276 = !DILocation(line: 746, column: 3, scope: !10267)
!10277 = !DILocation(line: 748, column: 16, scope: !10267)
!10278 = !DILocation(line: 748, column: 22, scope: !10267)
!10279 = !DILocation(line: 748, column: 15, scope: !10267)
!10280 = !DILocation(line: 748, column: 68, scope: !10267)
!10281 = !DILocation(line: 748, column: 52, scope: !10267)
!10282 = !DILocation(line: 748, column: 3, scope: !10267)
!10283 = !DILocation(line: 748, column: 8, scope: !10267)
!10284 = !DILocation(line: 748, column: 13, scope: !10267)
!10285 = !DILocation(line: 749, column: 9, scope: !10286)
!10286 = distinct !DILexicalBlock(scope: !10267, file: !5226, line: 749, column: 7)
!10287 = !DILocation(line: 749, column: 15, scope: !10286)
!10288 = !DILocation(line: 750, column: 7, scope: !10286)
!10289 = !DILocation(line: 750, column: 10, scope: !10286)
!10290 = !DILocation(line: 750, column: 15, scope: !10286)
!10291 = !DILocation(line: 751, column: 7, scope: !10286)
!10292 = !DILocation(line: 751, column: 23, scope: !10286)
!10293 = !DILocation(line: 751, column: 10, scope: !10286)
!10294 = !DILocation(line: 751, column: 29, scope: !10286)
!10295 = !DILocation(line: 749, column: 7, scope: !10267)
!10296 = !DILocation(line: 752, column: 17, scope: !10286)
!10297 = !DILocation(line: 752, column: 22, scope: !10286)
!10298 = !DILocation(line: 752, column: 28, scope: !10286)
!10299 = !DILocation(line: 752, column: 5, scope: !10286)
!10300 = !DILocation(line: 752, column: 10, scope: !10286)
!10301 = !DILocation(line: 752, column: 15, scope: !10286)
!10302 = !DILocation(line: 753, column: 16, scope: !10267)
!10303 = !DILocation(line: 753, column: 22, scope: !10267)
!10304 = !DILocation(line: 753, column: 15, scope: !10267)
!10305 = !DILocation(line: 753, column: 68, scope: !10267)
!10306 = !DILocation(line: 753, column: 52, scope: !10267)
!10307 = !DILocation(line: 753, column: 3, scope: !10267)
!10308 = !DILocation(line: 753, column: 8, scope: !10267)
!10309 = !DILocation(line: 753, column: 13, scope: !10267)
!10310 = !DILocation(line: 754, column: 9, scope: !10311)
!10311 = distinct !DILexicalBlock(scope: !10267, file: !5226, line: 754, column: 7)
!10312 = !DILocation(line: 754, column: 15, scope: !10311)
!10313 = !DILocation(line: 755, column: 7, scope: !10311)
!10314 = !DILocation(line: 755, column: 10, scope: !10311)
!10315 = !DILocation(line: 755, column: 15, scope: !10311)
!10316 = !DILocation(line: 756, column: 7, scope: !10311)
!10317 = !DILocation(line: 756, column: 23, scope: !10311)
!10318 = !DILocation(line: 756, column: 10, scope: !10311)
!10319 = !DILocation(line: 756, column: 29, scope: !10311)
!10320 = !DILocation(line: 754, column: 7, scope: !10267)
!10321 = !DILocation(line: 757, column: 17, scope: !10311)
!10322 = !DILocation(line: 757, column: 22, scope: !10311)
!10323 = !DILocation(line: 757, column: 28, scope: !10311)
!10324 = !DILocation(line: 757, column: 5, scope: !10311)
!10325 = !DILocation(line: 757, column: 10, scope: !10311)
!10326 = !DILocation(line: 757, column: 15, scope: !10311)
!10327 = !DILocation(line: 758, column: 3, scope: !10267)
!10328 = !DILocation(line: 758, column: 8, scope: !10267)
!10329 = !DILocation(line: 758, column: 13, scope: !10267)
!10330 = !DILocation(line: 760, column: 3, scope: !10267)
!10331 = !DILocation(line: 760, column: 8, scope: !10267)
!10332 = !DILocation(line: 760, column: 14, scope: !10267)
!10333 = !DILocation(line: 761, column: 3, scope: !10267)
!10334 = !DILocation(line: 761, column: 8, scope: !10267)
!10335 = !DILocation(line: 761, column: 16, scope: !10267)
!10336 = !DILocation(line: 762, column: 3, scope: !10267)
!10337 = !DILocation(line: 762, column: 8, scope: !10267)
!10338 = !DILocation(line: 762, column: 17, scope: !10267)
!10339 = !DILocation(line: 763, column: 1, scope: !10267)
!10340 = distinct !DISubprogram(name: "gimple_def_ops", scope: !1458, file: !1458, line: 1292, type: !10341, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10341 = !DISubroutineType(types: !10342)
!10342 = !{!2053, !5514}
!10343 = !DILocalVariable(name: "g", arg: 1, scope: !10340, file: !1458, line: 1292, type: !5514)
!10344 = !DILocation(line: 1292, column: 30, scope: !10340)
!10345 = !DILocation(line: 1294, column: 24, scope: !10346)
!10346 = distinct !DILexicalBlock(scope: !10340, file: !1458, line: 1294, column: 7)
!10347 = !DILocation(line: 1294, column: 8, scope: !10346)
!10348 = !DILocation(line: 1294, column: 7, scope: !10340)
!10349 = !DILocation(line: 1295, column: 5, scope: !10346)
!10350 = !DILocation(line: 1296, column: 10, scope: !10340)
!10351 = !DILocation(line: 1296, column: 13, scope: !10340)
!10352 = !DILocation(line: 1296, column: 19, scope: !10340)
!10353 = !DILocation(line: 1296, column: 26, scope: !10340)
!10354 = !DILocation(line: 1296, column: 3, scope: !10340)
!10355 = !DILocation(line: 1297, column: 1, scope: !10340)
!10356 = distinct !DISubprogram(name: "gimple_vdef", scope: !1458, file: !1458, line: 1375, type: !5555, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10357 = !DILocalVariable(name: "g", arg: 1, scope: !10356, file: !1458, line: 1375, type: !5514)
!10358 = !DILocation(line: 1375, column: 27, scope: !10356)
!10359 = !DILocation(line: 1377, column: 28, scope: !10360)
!10360 = distinct !DILexicalBlock(scope: !10356, file: !1458, line: 1377, column: 7)
!10361 = !DILocation(line: 1377, column: 8, scope: !10360)
!10362 = !DILocation(line: 1377, column: 7, scope: !10356)
!10363 = !DILocation(line: 1378, column: 5, scope: !10360)
!10364 = !DILocation(line: 1379, column: 10, scope: !10356)
!10365 = !DILocation(line: 1379, column: 13, scope: !10356)
!10366 = !DILocation(line: 1379, column: 23, scope: !10356)
!10367 = !DILocation(line: 1379, column: 3, scope: !10356)
!10368 = !DILocation(line: 1380, column: 1, scope: !10356)
!10369 = distinct !DISubprogram(name: "gimple_use_ops", scope: !1458, file: !1458, line: 1313, type: !10370, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10370 = !DISubroutineType(types: !10371)
!10371 = !{!2060, !5514}
!10372 = !DILocalVariable(name: "g", arg: 1, scope: !10369, file: !1458, line: 1313, type: !5514)
!10373 = !DILocation(line: 1313, column: 30, scope: !10369)
!10374 = !DILocation(line: 1315, column: 24, scope: !10375)
!10375 = distinct !DILexicalBlock(scope: !10369, file: !1458, line: 1315, column: 7)
!10376 = !DILocation(line: 1315, column: 8, scope: !10375)
!10377 = !DILocation(line: 1315, column: 7, scope: !10369)
!10378 = !DILocation(line: 1316, column: 5, scope: !10375)
!10379 = !DILocation(line: 1317, column: 10, scope: !10369)
!10380 = !DILocation(line: 1317, column: 13, scope: !10369)
!10381 = !DILocation(line: 1317, column: 19, scope: !10369)
!10382 = !DILocation(line: 1317, column: 26, scope: !10369)
!10383 = !DILocation(line: 1317, column: 3, scope: !10369)
!10384 = !DILocation(line: 1318, column: 1, scope: !10369)
!10385 = distinct !DISubprogram(name: "gimple_vuse", scope: !1458, file: !1458, line: 1365, type: !5555, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10386 = !DILocalVariable(name: "g", arg: 1, scope: !10385, file: !1458, line: 1365, type: !5514)
!10387 = !DILocation(line: 1365, column: 27, scope: !10385)
!10388 = !DILocation(line: 1367, column: 28, scope: !10389)
!10389 = distinct !DILexicalBlock(scope: !10385, file: !1458, line: 1367, column: 7)
!10390 = !DILocation(line: 1367, column: 8, scope: !10389)
!10391 = !DILocation(line: 1367, column: 7, scope: !10385)
!10392 = !DILocation(line: 1368, column: 5, scope: !10389)
!10393 = !DILocation(line: 1369, column: 10, scope: !10385)
!10394 = !DILocation(line: 1369, column: 13, scope: !10385)
!10395 = !DILocation(line: 1369, column: 23, scope: !10385)
!10396 = !DILocation(line: 1369, column: 3, scope: !10385)
!10397 = !DILocation(line: 1370, column: 1, scope: !10385)
!10398 = distinct !DISubprogram(name: "is_gimple_assign", scope: !1458, file: !1458, line: 1677, type: !5748, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10399 = !DILocalVariable(name: "gs", arg: 1, scope: !10398, file: !1458, line: 1677, type: !5514)
!10400 = !DILocation(line: 1677, column: 32, scope: !10398)
!10401 = !DILocation(line: 1679, column: 23, scope: !10398)
!10402 = !DILocation(line: 1679, column: 10, scope: !10398)
!10403 = !DILocation(line: 1679, column: 27, scope: !10398)
!10404 = !DILocation(line: 1679, column: 3, scope: !10398)
!10405 = distinct !DISubprogram(name: "splice_all_param_accesses", scope: !3, file: !3, line: 3478, type: !10406, scopeLine: 3479, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10406 = !DISubroutineType(types: !10407)
!10407 = !{!1685, !3051}
!10408 = !DILocalVariable(name: "representatives", arg: 1, scope: !10405, file: !3, line: 3478, type: !3051)
!10409 = !DILocation(line: 3478, column: 51, scope: !10405)
!10410 = !DILocalVariable(name: "result", scope: !10405, file: !3, line: 3480, type: !1685)
!10411 = !DILocation(line: 3480, column: 28, scope: !10405)
!10412 = !DILocalVariable(name: "parm", scope: !10405, file: !3, line: 3481, type: !1696)
!10413 = !DILocation(line: 3481, column: 8, scope: !10405)
!10414 = !DILocalVariable(name: "repr", scope: !10405, file: !3, line: 3482, type: !2999)
!10415 = !DILocation(line: 3482, column: 18, scope: !10405)
!10416 = !DILocation(line: 3484, column: 22, scope: !10405)
!10417 = !DILocation(line: 3484, column: 4, scope: !10405)
!10418 = !DILocation(line: 3484, column: 20, scope: !10405)
!10419 = !DILocation(line: 3486, column: 15, scope: !10420)
!10420 = distinct !DILexicalBlock(scope: !10405, file: !3, line: 3486, column: 3)
!10421 = !DILocation(line: 3486, column: 13, scope: !10420)
!10422 = !DILocation(line: 3486, column: 8, scope: !10420)
!10423 = !DILocation(line: 3487, column: 8, scope: !10424)
!10424 = distinct !DILexicalBlock(scope: !10420, file: !3, line: 3486, column: 3)
!10425 = !DILocation(line: 3486, column: 3, scope: !10420)
!10426 = !DILocation(line: 3490, column: 35, scope: !10427)
!10427 = distinct !DILexicalBlock(scope: !10428, file: !3, line: 3490, column: 11)
!10428 = distinct !DILexicalBlock(scope: !10424, file: !3, line: 3489, column: 5)
!10429 = !DILocation(line: 3490, column: 11, scope: !10427)
!10430 = !DILocation(line: 3490, column: 11, scope: !10428)
!10431 = !DILocation(line: 3492, column: 4, scope: !10432)
!10432 = distinct !DILexicalBlock(scope: !10427, file: !3, line: 3491, column: 2)
!10433 = !DILocation(line: 3494, column: 8, scope: !10434)
!10434 = distinct !DILexicalBlock(scope: !10432, file: !3, line: 3494, column: 8)
!10435 = !DILocation(line: 3494, column: 15, scope: !10434)
!10436 = !DILocation(line: 3494, column: 8, scope: !10432)
!10437 = !DILocation(line: 3495, column: 13, scope: !10434)
!10438 = !DILocation(line: 3495, column: 6, scope: !10434)
!10439 = !DILocation(line: 3496, column: 2, scope: !10432)
!10440 = !DILocation(line: 3497, column: 16, scope: !10441)
!10441 = distinct !DILexicalBlock(scope: !10427, file: !3, line: 3497, column: 16)
!10442 = !DILocation(line: 3498, column: 9, scope: !10441)
!10443 = !DILocation(line: 3498, column: 32, scope: !10441)
!10444 = !DILocation(line: 3498, column: 12, scope: !10441)
!10445 = !DILocation(line: 3499, column: 9, scope: !10441)
!10446 = !DILocation(line: 3499, column: 26, scope: !10441)
!10447 = !DILocation(line: 3499, column: 44, scope: !10441)
!10448 = !DILocation(line: 3499, column: 12, scope: !10441)
!10449 = !DILocation(line: 3497, column: 16, scope: !10427)
!10450 = !DILocation(line: 3501, column: 52, scope: !10451)
!10451 = distinct !DILexicalBlock(scope: !10441, file: !3, line: 3500, column: 2)
!10452 = !DILocation(line: 3501, column: 11, scope: !10451)
!10453 = !DILocation(line: 3501, column: 9, scope: !10451)
!10454 = !DILocation(line: 3502, column: 4, scope: !10451)
!10455 = !DILocation(line: 3503, column: 8, scope: !10456)
!10456 = distinct !DILexicalBlock(scope: !10451, file: !3, line: 3503, column: 8)
!10457 = !DILocation(line: 3503, column: 8, scope: !10451)
!10458 = !DILocation(line: 3504, column: 13, scope: !10456)
!10459 = !DILocation(line: 3504, column: 6, scope: !10456)
!10460 = !DILocation(line: 3505, column: 2, scope: !10451)
!10461 = !DILocation(line: 3506, column: 30, scope: !10462)
!10462 = distinct !DILexicalBlock(scope: !10441, file: !3, line: 3506, column: 16)
!10463 = !DILocation(line: 3506, column: 48, scope: !10462)
!10464 = !DILocation(line: 3506, column: 16, scope: !10462)
!10465 = !DILocation(line: 3506, column: 16, scope: !10441)
!10466 = !DILocalVariable(name: "ro_grp", scope: !10467, file: !3, line: 3508, type: !1815)
!10467 = distinct !DILexicalBlock(scope: !10462, file: !3, line: 3507, column: 2)
!10468 = !DILocation(line: 3508, column: 9, scope: !10467)
!10469 = !DILocation(line: 3509, column: 34, scope: !10467)
!10470 = !DILocation(line: 3509, column: 11, scope: !10467)
!10471 = !DILocation(line: 3509, column: 9, scope: !10467)
!10472 = !DILocation(line: 3510, column: 4, scope: !10467)
!10473 = !DILocation(line: 3512, column: 8, scope: !10474)
!10474 = distinct !DILexicalBlock(scope: !10467, file: !3, line: 3512, column: 8)
!10475 = !DILocation(line: 3512, column: 13, scope: !10474)
!10476 = !DILocation(line: 3512, column: 32, scope: !10474)
!10477 = !DILocation(line: 3512, column: 17, scope: !10474)
!10478 = !DILocation(line: 3512, column: 8, scope: !10467)
!10479 = !DILocation(line: 3514, column: 12, scope: !10480)
!10480 = distinct !DILexicalBlock(scope: !10481, file: !3, line: 3514, column: 12)
!10481 = distinct !DILexicalBlock(scope: !10474, file: !3, line: 3513, column: 6)
!10482 = !DILocation(line: 3514, column: 12, scope: !10481)
!10483 = !DILocation(line: 3516, column: 9, scope: !10484)
!10484 = distinct !DILexicalBlock(scope: !10485, file: !3, line: 3516, column: 9)
!10485 = distinct !DILexicalBlock(scope: !10480, file: !3, line: 3515, column: 3)
!10486 = !DILocation(line: 3516, column: 9, scope: !10485)
!10487 = !DILocation(line: 3517, column: 14, scope: !10484)
!10488 = !DILocation(line: 3517, column: 7, scope: !10484)
!10489 = !DILocation(line: 3518, column: 14, scope: !10490)
!10490 = distinct !DILexicalBlock(scope: !10484, file: !3, line: 3518, column: 14)
!10491 = !DILocation(line: 3518, column: 21, scope: !10490)
!10492 = !DILocation(line: 3518, column: 14, scope: !10484)
!10493 = !DILocation(line: 3519, column: 14, scope: !10490)
!10494 = !DILocation(line: 3519, column: 7, scope: !10490)
!10495 = !DILocation(line: 3520, column: 3, scope: !10485)
!10496 = !DILocation(line: 3521, column: 17, scope: !10497)
!10497 = distinct !DILexicalBlock(scope: !10480, file: !3, line: 3521, column: 17)
!10498 = !DILocation(line: 3521, column: 24, scope: !10497)
!10499 = !DILocation(line: 3521, column: 17, scope: !10480)
!10500 = !DILocation(line: 3522, column: 10, scope: !10497)
!10501 = !DILocation(line: 3522, column: 3, scope: !10497)
!10502 = !DILocation(line: 3523, column: 6, scope: !10481)
!10503 = !DILocation(line: 3524, column: 28, scope: !10504)
!10504 = distinct !DILexicalBlock(scope: !10474, file: !3, line: 3524, column: 13)
!10505 = !DILocation(line: 3524, column: 13, scope: !10504)
!10506 = !DILocation(line: 3524, column: 34, scope: !10504)
!10507 = !DILocation(line: 3524, column: 38, scope: !10504)
!10508 = !DILocation(line: 3524, column: 45, scope: !10504)
!10509 = !DILocation(line: 3524, column: 13, scope: !10474)
!10510 = !DILocation(line: 3525, column: 13, scope: !10504)
!10511 = !DILocation(line: 3525, column: 6, scope: !10504)
!10512 = !DILocation(line: 3526, column: 2, scope: !10467)
!10513 = !DILocation(line: 3528, column: 2, scope: !10462)
!10514 = !DILocation(line: 3529, column: 5, scope: !10428)
!10515 = !DILocation(line: 3488, column: 15, scope: !10424)
!10516 = !DILocation(line: 3488, column: 13, scope: !10424)
!10517 = !DILocation(line: 3486, column: 3, scope: !10424)
!10518 = distinct !{!10518, !10425, !10519}
!10519 = !DILocation(line: 3529, column: 5, scope: !10420)
!10520 = !DILocation(line: 3531, column: 7, scope: !10521)
!10521 = distinct !DILexicalBlock(scope: !10405, file: !3, line: 3531, column: 7)
!10522 = !DILocation(line: 3531, column: 14, scope: !10521)
!10523 = !DILocation(line: 3531, column: 7, scope: !10405)
!10524 = !DILocation(line: 3533, column: 7, scope: !10525)
!10525 = distinct !DILexicalBlock(scope: !10521, file: !3, line: 3532, column: 5)
!10526 = !DILocation(line: 3534, column: 8, scope: !10525)
!10527 = !DILocation(line: 3534, column: 24, scope: !10525)
!10528 = !DILocation(line: 3535, column: 7, scope: !10525)
!10529 = !DILocation(line: 3538, column: 10, scope: !10405)
!10530 = !DILocation(line: 3538, column: 3, scope: !10405)
!10531 = !DILocation(line: 3539, column: 1, scope: !10405)
!10532 = distinct !DISubprogram(name: "analyze_caller_dereference_legality", scope: !3, file: !3, line: 3219, type: !10533, scopeLine: 3220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10533 = !DISubroutineType(types: !10534)
!10534 = !{null, !3036}
!10535 = !DILocalVariable(name: "representatives", arg: 1, scope: !10532, file: !3, line: 3219, type: !3036)
!10536 = !DILocation(line: 3219, column: 60, scope: !10532)
!10537 = !DILocalVariable(name: "i", scope: !10532, file: !3, line: 3221, type: !1693)
!10538 = !DILocation(line: 3221, column: 7, scope: !10532)
!10539 = !DILocation(line: 3223, column: 7, scope: !10540)
!10540 = distinct !DILexicalBlock(scope: !10532, file: !3, line: 3223, column: 7)
!10541 = !DILocation(line: 3223, column: 17, scope: !10540)
!10542 = !DILocation(line: 3223, column: 21, scope: !10540)
!10543 = !DILocation(line: 3223, column: 32, scope: !10540)
!10544 = !DILocation(line: 3223, column: 7, scope: !10532)
!10545 = !DILocation(line: 3224, column: 30, scope: !10540)
!10546 = !DILocation(line: 3226, column: 9, scope: !10540)
!10547 = !DILocation(line: 3224, column: 5, scope: !10540)
!10548 = !DILocation(line: 3228, column: 3, scope: !10532)
!10549 = !DILocation(line: 3230, column: 7, scope: !10550)
!10550 = distinct !DILexicalBlock(scope: !10532, file: !3, line: 3230, column: 7)
!10551 = !DILocation(line: 3230, column: 17, scope: !10550)
!10552 = !DILocation(line: 3230, column: 21, scope: !10550)
!10553 = !DILocation(line: 3230, column: 32, scope: !10550)
!10554 = !DILocation(line: 3230, column: 7, scope: !10532)
!10555 = !DILocation(line: 3231, column: 30, scope: !10550)
!10556 = !DILocation(line: 3233, column: 9, scope: !10550)
!10557 = !DILocation(line: 3231, column: 5, scope: !10550)
!10558 = !DILocation(line: 3235, column: 10, scope: !10559)
!10559 = distinct !DILexicalBlock(scope: !10532, file: !3, line: 3235, column: 3)
!10560 = !DILocation(line: 3235, column: 8, scope: !10559)
!10561 = !DILocation(line: 3235, column: 15, scope: !10562)
!10562 = distinct !DILexicalBlock(scope: !10559, file: !3, line: 3235, column: 3)
!10563 = !DILocation(line: 3235, column: 19, scope: !10562)
!10564 = !DILocation(line: 3235, column: 17, scope: !10562)
!10565 = !DILocation(line: 3235, column: 3, scope: !10559)
!10566 = !DILocalVariable(name: "repr", scope: !10567, file: !3, line: 3237, type: !2999)
!10567 = distinct !DILexicalBlock(scope: !10562, file: !3, line: 3236, column: 5)
!10568 = !DILocation(line: 3237, column: 22, scope: !10567)
!10569 = !DILocation(line: 3237, column: 29, scope: !10567)
!10570 = !DILocalVariable(name: "idx", scope: !10567, file: !3, line: 3238, type: !1693)
!10571 = !DILocation(line: 3238, column: 11, scope: !10567)
!10572 = !DILocation(line: 3238, column: 17, scope: !10567)
!10573 = !DILocation(line: 3238, column: 34, scope: !10567)
!10574 = !DILocation(line: 3238, column: 42, scope: !10567)
!10575 = !DILocation(line: 3238, column: 40, scope: !10567)
!10576 = !DILocation(line: 3238, column: 61, scope: !10567)
!10577 = !DILocation(line: 3238, column: 59, scope: !10567)
!10578 = !DILocation(line: 3240, column: 12, scope: !10579)
!10579 = distinct !DILexicalBlock(scope: !10567, file: !3, line: 3240, column: 11)
!10580 = !DILocation(line: 3240, column: 17, scope: !10579)
!10581 = !DILocation(line: 3240, column: 35, scope: !10579)
!10582 = !DILocation(line: 3240, column: 20, scope: !10579)
!10583 = !DILocation(line: 3240, column: 11, scope: !10567)
!10584 = !DILocation(line: 3241, column: 2, scope: !10579)
!10585 = !DILocation(line: 3243, column: 7, scope: !10567)
!10586 = !DILocation(line: 3245, column: 9, scope: !10587)
!10587 = distinct !DILexicalBlock(scope: !10588, file: !3, line: 3245, column: 8)
!10588 = distinct !DILexicalBlock(scope: !10567, file: !3, line: 3244, column: 2)
!10589 = !DILocation(line: 3245, column: 15, scope: !10587)
!10590 = !DILocation(line: 3245, column: 24, scope: !10587)
!10591 = !DILocation(line: 3245, column: 30, scope: !10587)
!10592 = !DILocation(line: 3245, column: 22, scope: !10587)
!10593 = !DILocation(line: 3245, column: 38, scope: !10587)
!10594 = !DILocation(line: 3245, column: 54, scope: !10587)
!10595 = !DILocation(line: 3245, column: 36, scope: !10587)
!10596 = !DILocation(line: 3245, column: 8, scope: !10588)
!10597 = !DILocation(line: 3246, column: 6, scope: !10587)
!10598 = !DILocation(line: 3246, column: 12, scope: !10587)
!10599 = !DILocation(line: 3246, column: 46, scope: !10587)
!10600 = !DILocation(line: 3247, column: 11, scope: !10588)
!10601 = !DILocation(line: 3247, column: 17, scope: !10588)
!10602 = !DILocation(line: 3247, column: 9, scope: !10588)
!10603 = !DILocation(line: 3248, column: 2, scope: !10588)
!10604 = !DILocation(line: 3249, column: 14, scope: !10567)
!10605 = distinct !{!10605, !10585, !10606}
!10606 = !DILocation(line: 3249, column: 18, scope: !10567)
!10607 = !DILocation(line: 3250, column: 5, scope: !10567)
!10608 = !DILocation(line: 3235, column: 38, scope: !10562)
!10609 = !DILocation(line: 3235, column: 3, scope: !10562)
!10610 = distinct !{!10610, !10565, !10611}
!10611 = !DILocation(line: 3250, column: 5, scope: !10559)
!10612 = !DILocation(line: 3251, column: 1, scope: !10532)
!10613 = distinct !DISubprogram(name: "analyze_modified_params", scope: !3, file: !3, line: 3061, type: !10533, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10614 = !DILocalVariable(name: "representatives", arg: 1, scope: !10613, file: !3, line: 3061, type: !3036)
!10615 = !DILocation(line: 3061, column: 48, scope: !10613)
!10616 = !DILocalVariable(name: "i", scope: !10613, file: !3, line: 3063, type: !1693)
!10617 = !DILocation(line: 3063, column: 7, scope: !10613)
!10618 = !DILocation(line: 3065, column: 10, scope: !10619)
!10619 = distinct !DILexicalBlock(scope: !10613, file: !3, line: 3065, column: 3)
!10620 = !DILocation(line: 3065, column: 8, scope: !10619)
!10621 = !DILocation(line: 3065, column: 15, scope: !10622)
!10622 = distinct !DILexicalBlock(scope: !10619, file: !3, line: 3065, column: 3)
!10623 = !DILocation(line: 3065, column: 19, scope: !10622)
!10624 = !DILocation(line: 3065, column: 17, scope: !10622)
!10625 = !DILocation(line: 3065, column: 3, scope: !10619)
!10626 = !DILocalVariable(name: "repr", scope: !10627, file: !3, line: 3067, type: !2999)
!10627 = distinct !DILexicalBlock(scope: !10622, file: !3, line: 3066, column: 5)
!10628 = !DILocation(line: 3067, column: 22, scope: !10627)
!10629 = !DILocation(line: 3069, column: 19, scope: !10630)
!10630 = distinct !DILexicalBlock(scope: !10627, file: !3, line: 3069, column: 7)
!10631 = !DILocation(line: 3069, column: 17, scope: !10630)
!10632 = !DILocation(line: 3069, column: 12, scope: !10630)
!10633 = !DILocation(line: 3070, column: 5, scope: !10634)
!10634 = distinct !DILexicalBlock(scope: !10630, file: !3, line: 3069, column: 7)
!10635 = !DILocation(line: 3069, column: 7, scope: !10630)
!10636 = !DILocalVariable(name: "access", scope: !10637, file: !3, line: 3073, type: !2999)
!10637 = distinct !DILexicalBlock(scope: !10634, file: !3, line: 3072, column: 2)
!10638 = !DILocation(line: 3073, column: 19, scope: !10637)
!10639 = !DILocalVariable(name: "visited", scope: !10637, file: !3, line: 3074, type: !2541)
!10640 = !DILocation(line: 3074, column: 11, scope: !10637)
!10641 = !DILocalVariable(name: "ar", scope: !10637, file: !3, line: 3075, type: !10642)
!10642 = !DIDerivedType(tag: DW_TAG_typedef, name: "ao_ref", file: !2532, line: 86, baseType: !10643)
!10643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ao_ref_s", file: !2532, line: 63, size: 384, elements: !10644)
!10644 = !{!10645, !10646, !10647, !10648, !10649, !10650, !10651}
!10645 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !10643, file: !2532, line: 67, baseType: !1696, size: 64)
!10646 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !10643, file: !2532, line: 73, baseType: !1696, size: 64, offset: 64)
!10647 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !10643, file: !2532, line: 75, baseType: !1752, size: 64, offset: 128)
!10648 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !10643, file: !2532, line: 77, baseType: !1752, size: 64, offset: 192)
!10649 = !DIDerivedType(tag: DW_TAG_member, name: "max_size", scope: !10643, file: !2532, line: 79, baseType: !1752, size: 64, offset: 256)
!10650 = !DIDerivedType(tag: DW_TAG_member, name: "ref_alias_set", scope: !10643, file: !2532, line: 82, baseType: !2280, size: 32, offset: 320)
!10651 = !DIDerivedType(tag: DW_TAG_member, name: "base_alias_set", scope: !10643, file: !2532, line: 85, baseType: !2280, size: 32, offset: 352)
!10652 = !DILocation(line: 3075, column: 11, scope: !10637)
!10653 = !DILocation(line: 3077, column: 23, scope: !10654)
!10654 = distinct !DILexicalBlock(scope: !10637, file: !3, line: 3077, column: 8)
!10655 = !DILocation(line: 3077, column: 8, scope: !10654)
!10656 = !DILocation(line: 3077, column: 8, scope: !10637)
!10657 = !DILocation(line: 3078, column: 6, scope: !10654)
!10658 = !DILocation(line: 3079, column: 9, scope: !10659)
!10659 = distinct !DILexicalBlock(scope: !10637, file: !3, line: 3079, column: 8)
!10660 = !DILocation(line: 3080, column: 8, scope: !10659)
!10661 = !DILocation(line: 3080, column: 11, scope: !10659)
!10662 = !DILocation(line: 3080, column: 17, scope: !10659)
!10663 = !DILocation(line: 3079, column: 8, scope: !10637)
!10664 = !DILocation(line: 3081, column: 6, scope: !10659)
!10665 = !DILocation(line: 3083, column: 22, scope: !10637)
!10666 = !DILocation(line: 3083, column: 28, scope: !10637)
!10667 = !DILocation(line: 3083, column: 4, scope: !10637)
!10668 = !DILocation(line: 3084, column: 14, scope: !10637)
!10669 = !DILocation(line: 3084, column: 12, scope: !10637)
!10670 = !DILocation(line: 3085, column: 18, scope: !10671)
!10671 = distinct !DILexicalBlock(scope: !10637, file: !3, line: 3085, column: 4)
!10672 = !DILocation(line: 3085, column: 16, scope: !10671)
!10673 = !DILocation(line: 3085, column: 9, scope: !10671)
!10674 = !DILocation(line: 3085, column: 24, scope: !10675)
!10675 = distinct !DILexicalBlock(scope: !10671, file: !3, line: 3085, column: 4)
!10676 = !DILocation(line: 3085, column: 4, scope: !10671)
!10677 = !DILocation(line: 3089, column: 46, scope: !10678)
!10678 = distinct !DILexicalBlock(scope: !10675, file: !3, line: 3086, column: 6)
!10679 = !DILocation(line: 3089, column: 54, scope: !10678)
!10680 = !DILocation(line: 3089, column: 33, scope: !10678)
!10681 = !DILocation(line: 3090, column: 28, scope: !10678)
!10682 = !DILocation(line: 3089, column: 8, scope: !10678)
!10683 = !DILocation(line: 3091, column: 12, scope: !10684)
!10684 = distinct !DILexicalBlock(scope: !10678, file: !3, line: 3091, column: 12)
!10685 = !DILocation(line: 3091, column: 18, scope: !10684)
!10686 = !DILocation(line: 3091, column: 12, scope: !10678)
!10687 = !DILocation(line: 3092, column: 3, scope: !10684)
!10688 = !DILocation(line: 3093, column: 6, scope: !10678)
!10689 = !DILocation(line: 3085, column: 41, scope: !10675)
!10690 = !DILocation(line: 3085, column: 49, scope: !10675)
!10691 = !DILocation(line: 3085, column: 39, scope: !10675)
!10692 = !DILocation(line: 3085, column: 4, scope: !10675)
!10693 = distinct !{!10693, !10676, !10694}
!10694 = !DILocation(line: 3093, column: 6, scope: !10671)
!10695 = !DILocation(line: 3094, column: 4, scope: !10637)
!10696 = !DILocation(line: 3095, column: 2, scope: !10637)
!10697 = !DILocation(line: 3071, column: 12, scope: !10634)
!10698 = !DILocation(line: 3071, column: 18, scope: !10634)
!10699 = !DILocation(line: 3071, column: 10, scope: !10634)
!10700 = !DILocation(line: 3069, column: 7, scope: !10634)
!10701 = distinct !{!10701, !10635, !10702}
!10702 = !DILocation(line: 3095, column: 2, scope: !10630)
!10703 = !DILocation(line: 3096, column: 5, scope: !10627)
!10704 = !DILocation(line: 3065, column: 38, scope: !10622)
!10705 = !DILocation(line: 3065, column: 3, scope: !10622)
!10706 = distinct !{!10706, !10625, !10707}
!10707 = !DILocation(line: 3096, column: 5, scope: !10619)
!10708 = !DILocation(line: 3097, column: 1, scope: !10613)
!10709 = distinct !DISubprogram(name: "no_accesses_p", scope: !3, file: !3, line: 292, type: !7023, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10710 = !DILocalVariable(name: "access", arg: 1, scope: !10709, file: !3, line: 292, type: !2999)
!10711 = !DILocation(line: 292, column: 31, scope: !10709)
!10712 = !DILocation(line: 294, column: 10, scope: !10709)
!10713 = !DILocation(line: 294, column: 17, scope: !10709)
!10714 = !DILocation(line: 294, column: 3, scope: !10709)
!10715 = distinct !DISubprogram(name: "VEC_access_p_base_replace", scope: !3, file: !3, line: 228, type: !10716, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10716 = !DISubroutineType(types: !10717)
!10717 = !{!3048, !6307, !7, !3048}
!10718 = !DILocalVariable(name: "vec_", arg: 1, scope: !10715, file: !3, line: 228, type: !6307)
!10719 = !DILocation(line: 228, column: 1, scope: !10715)
!10720 = !DILocalVariable(name: "ix_", arg: 2, scope: !10715, file: !3, line: 228, type: !7)
!10721 = !DILocalVariable(name: "obj_", arg: 3, scope: !10715, file: !3, line: 228, type: !3048)
!10722 = !DILocalVariable(name: "old_obj_", scope: !10715, file: !3, line: 228, type: !3048)
!10723 = distinct !DISubprogram(name: "decide_one_param_reduction", scope: !3, file: !3, line: 3403, type: !10724, scopeLine: 3404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10724 = !DISubroutineType(types: !10725)
!10725 = !{!1693, !2999}
!10726 = !DILocalVariable(name: "repr", arg: 1, scope: !10723, file: !3, line: 3403, type: !2999)
!10727 = !DILocation(line: 3403, column: 44, scope: !10723)
!10728 = !DILocalVariable(name: "total_size", scope: !10723, file: !3, line: 3405, type: !1693)
!10729 = !DILocation(line: 3405, column: 7, scope: !10723)
!10730 = !DILocalVariable(name: "cur_parm_size", scope: !10723, file: !3, line: 3405, type: !1693)
!10731 = !DILocation(line: 3405, column: 19, scope: !10723)
!10732 = !DILocalVariable(name: "agg_size", scope: !10723, file: !3, line: 3405, type: !1693)
!10733 = !DILocation(line: 3405, column: 34, scope: !10723)
!10734 = !DILocalVariable(name: "new_param_count", scope: !10723, file: !3, line: 3405, type: !1693)
!10735 = !DILocation(line: 3405, column: 44, scope: !10723)
!10736 = !DILocalVariable(name: "parm_size_limit", scope: !10723, file: !3, line: 3405, type: !1693)
!10737 = !DILocation(line: 3405, column: 61, scope: !10723)
!10738 = !DILocalVariable(name: "by_ref", scope: !10723, file: !3, line: 3406, type: !1815)
!10739 = !DILocation(line: 3406, column: 8, scope: !10723)
!10740 = !DILocalVariable(name: "parm", scope: !10723, file: !3, line: 3407, type: !1696)
!10741 = !DILocation(line: 3407, column: 8, scope: !10723)
!10742 = !DILocation(line: 3409, column: 10, scope: !10723)
!10743 = !DILocation(line: 3409, column: 16, scope: !10723)
!10744 = !DILocation(line: 3409, column: 8, scope: !10723)
!10745 = !DILocation(line: 3410, column: 33, scope: !10723)
!10746 = !DILocation(line: 3410, column: 19, scope: !10723)
!10747 = !DILocation(line: 3410, column: 17, scope: !10723)
!10748 = !DILocation(line: 3411, column: 3, scope: !10723)
!10749 = !DILocation(line: 3413, column: 7, scope: !10750)
!10750 = distinct !DILexicalBlock(scope: !10723, file: !3, line: 3413, column: 7)
!10751 = !DILocation(line: 3413, column: 7, scope: !10723)
!10752 = !DILocation(line: 3415, column: 14, scope: !10753)
!10753 = distinct !DILexicalBlock(scope: !10750, file: !3, line: 3414, column: 5)
!10754 = !DILocation(line: 3416, column: 32, scope: !10753)
!10755 = !DILocation(line: 3416, column: 18, scope: !10753)
!10756 = !DILocation(line: 3416, column: 16, scope: !10753)
!10757 = !DILocation(line: 3417, column: 5, scope: !10753)
!10758 = !DILocation(line: 3420, column: 14, scope: !10759)
!10759 = distinct !DILexicalBlock(scope: !10750, file: !3, line: 3419, column: 5)
!10760 = !DILocation(line: 3421, column: 18, scope: !10759)
!10761 = !DILocation(line: 3421, column: 16, scope: !10759)
!10762 = !DILocation(line: 3424, column: 7, scope: !10763)
!10763 = distinct !DILexicalBlock(scope: !10723, file: !3, line: 3424, column: 7)
!10764 = !DILocation(line: 3424, column: 7, scope: !10723)
!10765 = !DILocalVariable(name: "acc", scope: !10766, file: !3, line: 3426, type: !2999)
!10766 = distinct !DILexicalBlock(scope: !10763, file: !3, line: 3425, column: 5)
!10767 = !DILocation(line: 3426, column: 22, scope: !10766)
!10768 = !DILocation(line: 3427, column: 16, scope: !10766)
!10769 = !DILocation(line: 3427, column: 7, scope: !10766)
!10770 = !DILocation(line: 3428, column: 27, scope: !10766)
!10771 = !DILocation(line: 3428, column: 38, scope: !10766)
!10772 = !DILocation(line: 3428, column: 7, scope: !10766)
!10773 = !DILocation(line: 3429, column: 16, scope: !10766)
!10774 = !DILocation(line: 3429, column: 45, scope: !10766)
!10775 = !DILocation(line: 3429, column: 7, scope: !10766)
!10776 = !DILocation(line: 3430, column: 18, scope: !10777)
!10777 = distinct !DILexicalBlock(scope: !10766, file: !3, line: 3430, column: 7)
!10778 = !DILocation(line: 3430, column: 16, scope: !10777)
!10779 = !DILocation(line: 3430, column: 12, scope: !10777)
!10780 = !DILocation(line: 3430, column: 24, scope: !10781)
!10781 = distinct !DILexicalBlock(scope: !10777, file: !3, line: 3430, column: 7)
!10782 = !DILocation(line: 3430, column: 7, scope: !10777)
!10783 = !DILocation(line: 3431, column: 15, scope: !10781)
!10784 = !DILocation(line: 3431, column: 26, scope: !10781)
!10785 = !DILocation(line: 3431, column: 2, scope: !10781)
!10786 = !DILocation(line: 3430, column: 35, scope: !10781)
!10787 = !DILocation(line: 3430, column: 40, scope: !10781)
!10788 = !DILocation(line: 3430, column: 33, scope: !10781)
!10789 = !DILocation(line: 3430, column: 7, scope: !10781)
!10790 = distinct !{!10790, !10782, !10791}
!10791 = !DILocation(line: 3431, column: 35, scope: !10777)
!10792 = !DILocation(line: 3432, column: 5, scope: !10766)
!10793 = !DILocation(line: 3434, column: 14, scope: !10723)
!10794 = !DILocation(line: 3435, column: 19, scope: !10723)
!10795 = !DILocation(line: 3437, column: 3, scope: !10723)
!10796 = !DILocation(line: 3437, column: 10, scope: !10797)
!10797 = distinct !DILexicalBlock(scope: !10798, file: !3, line: 3437, column: 3)
!10798 = distinct !DILexicalBlock(scope: !10723, file: !3, line: 3437, column: 3)
!10799 = !DILocation(line: 3437, column: 3, scope: !10798)
!10800 = !DILocation(line: 3439, column: 7, scope: !10801)
!10801 = distinct !DILexicalBlock(scope: !10797, file: !3, line: 3438, column: 5)
!10802 = !DILocation(line: 3440, column: 22, scope: !10801)
!10803 = !DILocation(line: 3442, column: 12, scope: !10804)
!10804 = distinct !DILexicalBlock(scope: !10801, file: !3, line: 3442, column: 11)
!10805 = !DILocation(line: 3442, column: 19, scope: !10804)
!10806 = !DILocation(line: 3442, column: 24, scope: !10804)
!10807 = !DILocation(line: 3442, column: 30, scope: !10804)
!10808 = !DILocation(line: 3443, column: 9, scope: !10804)
!10809 = !DILocation(line: 3443, column: 13, scope: !10804)
!10810 = !DILocation(line: 3443, column: 19, scope: !10804)
!10811 = !DILocation(line: 3442, column: 11, scope: !10801)
!10812 = !DILocation(line: 3444, column: 16, scope: !10804)
!10813 = !DILocation(line: 3444, column: 22, scope: !10804)
!10814 = !DILocation(line: 3444, column: 13, scope: !10804)
!10815 = !DILocation(line: 3444, column: 2, scope: !10804)
!10816 = !DILocation(line: 3446, column: 16, scope: !10804)
!10817 = !DILocation(line: 3446, column: 13, scope: !10804)
!10818 = !DILocation(line: 3447, column: 5, scope: !10801)
!10819 = !DILocation(line: 3437, column: 23, scope: !10797)
!10820 = !DILocation(line: 3437, column: 29, scope: !10797)
!10821 = !DILocation(line: 3437, column: 21, scope: !10797)
!10822 = !DILocation(line: 3437, column: 3, scope: !10797)
!10823 = distinct !{!10823, !10799, !10824}
!10824 = !DILocation(line: 3447, column: 5, scope: !10798)
!10825 = !DILocation(line: 3449, column: 3, scope: !10723)
!10826 = !DILocation(line: 3451, column: 37, scope: !10827)
!10827 = distinct !DILexicalBlock(scope: !10723, file: !3, line: 3451, column: 7)
!10828 = !DILocation(line: 3451, column: 7, scope: !10827)
!10829 = !DILocation(line: 3451, column: 7, scope: !10723)
!10830 = !DILocation(line: 3452, column: 23, scope: !10827)
!10831 = !DILocation(line: 3452, column: 21, scope: !10827)
!10832 = !DILocation(line: 3452, column: 5, scope: !10827)
!10833 = !DILocation(line: 3454, column: 24, scope: !10827)
!10834 = !DILocation(line: 3455, column: 26, scope: !10827)
!10835 = !DILocation(line: 3455, column: 24, scope: !10827)
!10836 = !DILocation(line: 3454, column: 21, scope: !10827)
!10837 = !DILocation(line: 3457, column: 7, scope: !10838)
!10838 = distinct !DILexicalBlock(scope: !10723, file: !3, line: 3457, column: 7)
!10839 = !DILocation(line: 3457, column: 20, scope: !10838)
!10840 = !DILocation(line: 3457, column: 18, scope: !10838)
!10841 = !DILocation(line: 3458, column: 7, scope: !10838)
!10842 = !DILocation(line: 3458, column: 10, scope: !10838)
!10843 = !DILocation(line: 3458, column: 24, scope: !10838)
!10844 = !DILocation(line: 3458, column: 21, scope: !10838)
!10845 = !DILocation(line: 3457, column: 7, scope: !10723)
!10846 = !DILocation(line: 3460, column: 11, scope: !10847)
!10847 = distinct !DILexicalBlock(scope: !10848, file: !3, line: 3460, column: 11)
!10848 = distinct !DILexicalBlock(scope: !10838, file: !3, line: 3459, column: 5)
!10849 = !DILocation(line: 3460, column: 11, scope: !10848)
!10850 = !DILocation(line: 3461, column: 11, scope: !10847)
!10851 = !DILocation(line: 3462, column: 4, scope: !10847)
!10852 = !DILocation(line: 3461, column: 2, scope: !10847)
!10853 = !DILocation(line: 3463, column: 14, scope: !10848)
!10854 = !DILocation(line: 3463, column: 7, scope: !10848)
!10855 = !DILocation(line: 3466, column: 5, scope: !10838)
!10856 = !DILocation(line: 3467, column: 1, scope: !10723)
!10857 = distinct !DISubprogram(name: "turn_representatives_into_adjustments", scope: !3, file: !3, line: 3564, type: !10858, scopeLine: 3566, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10858 = !DISubroutineType(types: !10859)
!10859 = !{!3665, !3036, !1693}
!10860 = !DILocalVariable(name: "representatives", arg: 1, scope: !10857, file: !3, line: 3564, type: !3036)
!10861 = !DILocation(line: 3564, column: 62, scope: !10857)
!10862 = !DILocalVariable(name: "adjustments_count", arg: 2, scope: !10857, file: !3, line: 3565, type: !1693)
!10863 = !DILocation(line: 3565, column: 16, scope: !10857)
!10864 = !DILocalVariable(name: "parms", scope: !10857, file: !3, line: 3567, type: !10865)
!10865 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10866, size: 64)
!10866 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !10867)
!10867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !10868)
!10868 = !{!10869}
!10869 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !10867, file: !135, line: 184, baseType: !2523, size: 128)
!10870 = !DILocation(line: 3567, column: 21, scope: !10857)
!10871 = !DILocalVariable(name: "adjustments", scope: !10857, file: !3, line: 3568, type: !3665)
!10872 = !DILocation(line: 3568, column: 27, scope: !10857)
!10873 = !DILocalVariable(name: "parm", scope: !10857, file: !3, line: 3569, type: !1696)
!10874 = !DILocation(line: 3569, column: 8, scope: !10857)
!10875 = !DILocalVariable(name: "i", scope: !10857, file: !3, line: 3570, type: !1693)
!10876 = !DILocation(line: 3570, column: 7, scope: !10857)
!10877 = !DILocation(line: 3572, column: 3, scope: !10857)
!10878 = !DILocation(line: 3573, column: 43, scope: !10857)
!10879 = !DILocation(line: 3573, column: 11, scope: !10857)
!10880 = !DILocation(line: 3573, column: 9, scope: !10857)
!10881 = !DILocation(line: 3574, column: 17, scope: !10857)
!10882 = !DILocation(line: 3574, column: 15, scope: !10857)
!10883 = !DILocation(line: 3575, column: 10, scope: !10857)
!10884 = !DILocation(line: 3575, column: 8, scope: !10857)
!10885 = !DILocation(line: 3576, column: 10, scope: !10886)
!10886 = distinct !DILexicalBlock(scope: !10857, file: !3, line: 3576, column: 3)
!10887 = !DILocation(line: 3576, column: 8, scope: !10886)
!10888 = !DILocation(line: 3576, column: 15, scope: !10889)
!10889 = distinct !DILexicalBlock(scope: !10886, file: !3, line: 3576, column: 3)
!10890 = !DILocation(line: 3576, column: 19, scope: !10889)
!10891 = !DILocation(line: 3576, column: 17, scope: !10889)
!10892 = !DILocation(line: 3576, column: 3, scope: !10886)
!10893 = !DILocalVariable(name: "repr", scope: !10894, file: !3, line: 3578, type: !2999)
!10894 = distinct !DILexicalBlock(scope: !10889, file: !3, line: 3577, column: 5)
!10895 = !DILocation(line: 3578, column: 22, scope: !10894)
!10896 = !DILocation(line: 3578, column: 29, scope: !10894)
!10897 = !DILocation(line: 3580, column: 12, scope: !10898)
!10898 = distinct !DILexicalBlock(scope: !10894, file: !3, line: 3580, column: 11)
!10899 = !DILocation(line: 3580, column: 17, scope: !10898)
!10900 = !DILocation(line: 3580, column: 35, scope: !10898)
!10901 = !DILocation(line: 3580, column: 20, scope: !10898)
!10902 = !DILocation(line: 3580, column: 11, scope: !10894)
!10903 = !DILocalVariable(name: "adj", scope: !10904, file: !3, line: 3582, type: !10905)
!10904 = distinct !DILexicalBlock(scope: !10898, file: !3, line: 3581, column: 2)
!10905 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3078, size: 64)
!10906 = !DILocation(line: 3582, column: 32, scope: !10904)
!10907 = !DILocation(line: 3584, column: 10, scope: !10904)
!10908 = !DILocation(line: 3584, column: 8, scope: !10904)
!10909 = !DILocation(line: 3585, column: 12, scope: !10904)
!10910 = !DILocation(line: 3585, column: 4, scope: !10904)
!10911 = !DILocation(line: 3586, column: 39, scope: !10904)
!10912 = !DILocation(line: 3586, column: 45, scope: !10904)
!10913 = !DILocation(line: 3586, column: 22, scope: !10904)
!10914 = !DILocation(line: 3586, column: 4, scope: !10904)
!10915 = !DILocation(line: 3586, column: 9, scope: !10904)
!10916 = !DILocation(line: 3586, column: 20, scope: !10904)
!10917 = !DILocation(line: 3587, column: 16, scope: !10904)
!10918 = !DILocation(line: 3587, column: 4, scope: !10904)
!10919 = !DILocation(line: 3587, column: 9, scope: !10904)
!10920 = !DILocation(line: 3587, column: 14, scope: !10904)
!10921 = !DILocation(line: 3588, column: 9, scope: !10922)
!10922 = distinct !DILexicalBlock(scope: !10904, file: !3, line: 3588, column: 8)
!10923 = !DILocation(line: 3588, column: 8, scope: !10904)
!10924 = !DILocation(line: 3589, column: 6, scope: !10922)
!10925 = !DILocation(line: 3589, column: 11, scope: !10922)
!10926 = !DILocation(line: 3589, column: 22, scope: !10922)
!10927 = !DILocation(line: 3591, column: 6, scope: !10922)
!10928 = !DILocation(line: 3591, column: 11, scope: !10922)
!10929 = !DILocation(line: 3591, column: 24, scope: !10922)
!10930 = !DILocation(line: 3592, column: 2, scope: !10904)
!10931 = !DILocalVariable(name: "adj", scope: !10932, file: !3, line: 3595, type: !10905)
!10932 = distinct !DILexicalBlock(scope: !10898, file: !3, line: 3594, column: 2)
!10933 = !DILocation(line: 3595, column: 32, scope: !10932)
!10934 = !DILocalVariable(name: "index", scope: !10932, file: !3, line: 3596, type: !1693)
!10935 = !DILocation(line: 3596, column: 8, scope: !10932)
!10936 = !DILocation(line: 3596, column: 33, scope: !10932)
!10937 = !DILocation(line: 3596, column: 39, scope: !10932)
!10938 = !DILocation(line: 3596, column: 16, scope: !10932)
!10939 = !DILocation(line: 3598, column: 4, scope: !10932)
!10940 = !DILocation(line: 3598, column: 11, scope: !10941)
!10941 = distinct !DILexicalBlock(scope: !10942, file: !3, line: 3598, column: 4)
!10942 = distinct !DILexicalBlock(scope: !10932, file: !3, line: 3598, column: 4)
!10943 = !DILocation(line: 3598, column: 4, scope: !10942)
!10944 = !DILocation(line: 3600, column: 14, scope: !10945)
!10945 = distinct !DILexicalBlock(scope: !10941, file: !3, line: 3599, column: 6)
!10946 = !DILocation(line: 3600, column: 12, scope: !10945)
!10947 = !DILocation(line: 3601, column: 16, scope: !10945)
!10948 = !DILocation(line: 3601, column: 8, scope: !10945)
!10949 = !DILocation(line: 3602, column: 8, scope: !10945)
!10950 = !DILocation(line: 3603, column: 26, scope: !10945)
!10951 = !DILocation(line: 3603, column: 8, scope: !10945)
!10952 = !DILocation(line: 3603, column: 13, scope: !10945)
!10953 = !DILocation(line: 3603, column: 24, scope: !10945)
!10954 = !DILocation(line: 3604, column: 20, scope: !10945)
!10955 = !DILocation(line: 3604, column: 26, scope: !10945)
!10956 = !DILocation(line: 3604, column: 8, scope: !10945)
!10957 = !DILocation(line: 3604, column: 13, scope: !10945)
!10958 = !DILocation(line: 3604, column: 18, scope: !10945)
!10959 = !DILocation(line: 3605, column: 20, scope: !10945)
!10960 = !DILocation(line: 3605, column: 26, scope: !10945)
!10961 = !DILocation(line: 3605, column: 8, scope: !10945)
!10962 = !DILocation(line: 3605, column: 13, scope: !10945)
!10963 = !DILocation(line: 3605, column: 18, scope: !10945)
!10964 = !DILocation(line: 3606, column: 22, scope: !10945)
!10965 = !DILocation(line: 3606, column: 28, scope: !10945)
!10966 = !DILocation(line: 3606, column: 8, scope: !10945)
!10967 = !DILocation(line: 3606, column: 13, scope: !10945)
!10968 = !DILocation(line: 3606, column: 20, scope: !10945)
!10969 = !DILocation(line: 3607, column: 23, scope: !10945)
!10970 = !DILocation(line: 3608, column: 9, scope: !10945)
!10971 = !DILocation(line: 3608, column: 13, scope: !10945)
!10972 = !DILocation(line: 3608, column: 19, scope: !10945)
!10973 = !DILocation(line: 3609, column: 6, scope: !10945)
!10974 = !DILocation(line: 3609, column: 9, scope: !10945)
!10975 = !DILocation(line: 3609, column: 15, scope: !10945)
!10976 = !DILocation(line: 0, scope: !10945)
!10977 = !DILocation(line: 3607, column: 8, scope: !10945)
!10978 = !DILocation(line: 3607, column: 13, scope: !10945)
!10979 = !DILocation(line: 3607, column: 20, scope: !10945)
!10980 = !DILocation(line: 3611, column: 6, scope: !10945)
!10981 = !DILocation(line: 3598, column: 24, scope: !10941)
!10982 = !DILocation(line: 3598, column: 30, scope: !10941)
!10983 = !DILocation(line: 3598, column: 22, scope: !10941)
!10984 = !DILocation(line: 3598, column: 4, scope: !10941)
!10985 = distinct !{!10985, !10943, !10986}
!10986 = !DILocation(line: 3611, column: 6, scope: !10942)
!10987 = !DILocation(line: 3613, column: 5, scope: !10894)
!10988 = !DILocation(line: 3576, column: 38, scope: !10889)
!10989 = !DILocation(line: 3576, column: 49, scope: !10889)
!10990 = !DILocation(line: 3576, column: 47, scope: !10889)
!10991 = !DILocation(line: 3576, column: 3, scope: !10889)
!10992 = distinct !{!10992, !10892, !10993}
!10993 = !DILocation(line: 3613, column: 5, scope: !10886)
!10994 = !DILocation(line: 3614, column: 3, scope: !10857)
!10995 = !DILocation(line: 3615, column: 10, scope: !10857)
!10996 = !DILocation(line: 3615, column: 3, scope: !10857)
!10997 = distinct !DISubprogram(name: "unmodified_by_ref_scalar_representative", scope: !3, file: !3, line: 3260, type: !6724, scopeLine: 3261, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!10998 = !DILocalVariable(name: "parm", arg: 1, scope: !10997, file: !3, line: 3260, type: !1696)
!10999 = !DILocation(line: 3260, column: 47, scope: !10997)
!11000 = !DILocalVariable(name: "i", scope: !10997, file: !3, line: 3262, type: !1693)
!11001 = !DILocation(line: 3262, column: 7, scope: !10997)
!11002 = !DILocalVariable(name: "access_count", scope: !10997, file: !3, line: 3262, type: !1693)
!11003 = !DILocation(line: 3262, column: 10, scope: !10997)
!11004 = !DILocalVariable(name: "repr", scope: !10997, file: !3, line: 3263, type: !2999)
!11005 = !DILocation(line: 3263, column: 18, scope: !10997)
!11006 = !DILocalVariable(name: "access_vec", scope: !10997, file: !3, line: 3264, type: !3036)
!11007 = !DILocation(line: 3264, column: 25, scope: !10997)
!11008 = !DILocation(line: 3266, column: 40, scope: !10997)
!11009 = !DILocation(line: 3266, column: 16, scope: !10997)
!11010 = !DILocation(line: 3266, column: 14, scope: !10997)
!11011 = !DILocation(line: 3267, column: 3, scope: !10997)
!11012 = !DILocation(line: 3268, column: 10, scope: !10997)
!11013 = !DILocation(line: 3268, column: 8, scope: !10997)
!11014 = !DILocation(line: 3269, column: 7, scope: !11015)
!11015 = distinct !DILexicalBlock(scope: !10997, file: !3, line: 3269, column: 7)
!11016 = !DILocation(line: 3269, column: 13, scope: !11015)
!11017 = !DILocation(line: 3269, column: 7, scope: !10997)
!11018 = !DILocation(line: 3270, column: 5, scope: !11015)
!11019 = !DILocation(line: 3271, column: 32, scope: !10997)
!11020 = !DILocation(line: 3271, column: 3, scope: !10997)
!11021 = !DILocation(line: 3271, column: 9, scope: !10997)
!11022 = !DILocation(line: 3271, column: 30, scope: !10997)
!11023 = !DILocation(line: 3273, column: 18, scope: !10997)
!11024 = !DILocation(line: 3273, column: 16, scope: !10997)
!11025 = !DILocation(line: 3274, column: 10, scope: !11026)
!11026 = distinct !DILexicalBlock(scope: !10997, file: !3, line: 3274, column: 3)
!11027 = !DILocation(line: 3274, column: 8, scope: !11026)
!11028 = !DILocation(line: 3274, column: 15, scope: !11029)
!11029 = distinct !DILexicalBlock(scope: !11026, file: !3, line: 3274, column: 3)
!11030 = !DILocation(line: 3274, column: 19, scope: !11029)
!11031 = !DILocation(line: 3274, column: 17, scope: !11029)
!11032 = !DILocation(line: 3274, column: 3, scope: !11026)
!11033 = !DILocalVariable(name: "access", scope: !11034, file: !3, line: 3276, type: !2999)
!11034 = distinct !DILexicalBlock(scope: !11029, file: !3, line: 3275, column: 5)
!11035 = !DILocation(line: 3276, column: 22, scope: !11034)
!11036 = !DILocation(line: 3276, column: 31, scope: !11034)
!11037 = !DILocation(line: 3277, column: 11, scope: !11038)
!11038 = distinct !DILexicalBlock(scope: !11034, file: !3, line: 3277, column: 11)
!11039 = !DILocation(line: 3277, column: 19, scope: !11038)
!11040 = !DILocation(line: 3277, column: 11, scope: !11034)
!11041 = !DILocation(line: 3278, column: 2, scope: !11038)
!11042 = !DILocation(line: 3279, column: 38, scope: !11034)
!11043 = !DILocation(line: 3279, column: 7, scope: !11034)
!11044 = !DILocation(line: 3279, column: 15, scope: !11034)
!11045 = !DILocation(line: 3279, column: 36, scope: !11034)
!11046 = !DILocation(line: 3280, column: 30, scope: !11034)
!11047 = !DILocation(line: 3280, column: 36, scope: !11034)
!11048 = !DILocation(line: 3280, column: 7, scope: !11034)
!11049 = !DILocation(line: 3280, column: 15, scope: !11034)
!11050 = !DILocation(line: 3280, column: 28, scope: !11034)
!11051 = !DILocation(line: 3281, column: 28, scope: !11034)
!11052 = !DILocation(line: 3281, column: 7, scope: !11034)
!11053 = !DILocation(line: 3281, column: 13, scope: !11034)
!11054 = !DILocation(line: 3281, column: 26, scope: !11034)
!11055 = !DILocation(line: 3282, column: 5, scope: !11034)
!11056 = !DILocation(line: 3274, column: 34, scope: !11029)
!11057 = !DILocation(line: 3274, column: 3, scope: !11029)
!11058 = distinct !{!11058, !11032, !11059}
!11059 = !DILocation(line: 3282, column: 5, scope: !11026)
!11060 = !DILocation(line: 3284, column: 3, scope: !10997)
!11061 = !DILocation(line: 3284, column: 9, scope: !10997)
!11062 = !DILocation(line: 3284, column: 18, scope: !10997)
!11063 = !DILocation(line: 3285, column: 3, scope: !10997)
!11064 = !DILocation(line: 3285, column: 9, scope: !10997)
!11065 = !DILocation(line: 3285, column: 24, scope: !10997)
!11066 = !DILocation(line: 3286, column: 10, scope: !10997)
!11067 = !DILocation(line: 3286, column: 3, scope: !10997)
!11068 = !DILocation(line: 3287, column: 1, scope: !10997)
!11069 = distinct !DISubprogram(name: "splice_param_accesses", scope: !3, file: !3, line: 3318, type: !11070, scopeLine: 3319, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11070 = !DISubroutineType(types: !11071)
!11071 = !{!2999, !1696, !11072}
!11072 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1815, size: 64)
!11073 = !DILocalVariable(name: "parm", arg: 1, scope: !11069, file: !3, line: 3318, type: !1696)
!11074 = !DILocation(line: 3318, column: 29, scope: !11069)
!11075 = !DILocalVariable(name: "ro_grp", arg: 2, scope: !11069, file: !3, line: 3318, type: !11072)
!11076 = !DILocation(line: 3318, column: 41, scope: !11069)
!11077 = !DILocalVariable(name: "i", scope: !11069, file: !3, line: 3320, type: !1693)
!11078 = !DILocation(line: 3320, column: 7, scope: !11069)
!11079 = !DILocalVariable(name: "j", scope: !11069, file: !3, line: 3320, type: !1693)
!11080 = !DILocation(line: 3320, column: 10, scope: !11069)
!11081 = !DILocalVariable(name: "access_count", scope: !11069, file: !3, line: 3320, type: !1693)
!11082 = !DILocation(line: 3320, column: 13, scope: !11069)
!11083 = !DILocalVariable(name: "group_count", scope: !11069, file: !3, line: 3320, type: !1693)
!11084 = !DILocation(line: 3320, column: 27, scope: !11069)
!11085 = !DILocalVariable(name: "agg_size", scope: !11069, file: !3, line: 3321, type: !1693)
!11086 = !DILocation(line: 3321, column: 7, scope: !11069)
!11087 = !DILocalVariable(name: "total_size", scope: !11069, file: !3, line: 3321, type: !1693)
!11088 = !DILocation(line: 3321, column: 17, scope: !11069)
!11089 = !DILocalVariable(name: "access", scope: !11069, file: !3, line: 3322, type: !2999)
!11090 = !DILocation(line: 3322, column: 18, scope: !11069)
!11091 = !DILocalVariable(name: "res", scope: !11069, file: !3, line: 3322, type: !2999)
!11092 = !DILocation(line: 3322, column: 27, scope: !11069)
!11093 = !DILocalVariable(name: "prev_acc_ptr", scope: !11069, file: !3, line: 3322, type: !6737)
!11094 = !DILocation(line: 3322, column: 34, scope: !11069)
!11095 = !DILocalVariable(name: "access_vec", scope: !11069, file: !3, line: 3323, type: !3036)
!11096 = !DILocation(line: 3323, column: 25, scope: !11069)
!11097 = !DILocation(line: 3325, column: 40, scope: !11069)
!11098 = !DILocation(line: 3325, column: 16, scope: !11069)
!11099 = !DILocation(line: 3325, column: 14, scope: !11069)
!11100 = !DILocation(line: 3326, column: 8, scope: !11101)
!11101 = distinct !DILexicalBlock(scope: !11069, file: !3, line: 3326, column: 7)
!11102 = !DILocation(line: 3326, column: 7, scope: !11069)
!11103 = !DILocation(line: 3327, column: 5, scope: !11101)
!11104 = !DILocation(line: 3328, column: 18, scope: !11069)
!11105 = !DILocation(line: 3328, column: 16, scope: !11069)
!11106 = !DILocation(line: 3331, column: 15, scope: !11069)
!11107 = !DILocation(line: 3331, column: 51, scope: !11069)
!11108 = !DILocation(line: 3331, column: 3, scope: !11069)
!11109 = !DILocation(line: 3338, column: 5, scope: !11069)
!11110 = !DILocation(line: 3339, column: 14, scope: !11069)
!11111 = !DILocation(line: 3340, column: 15, scope: !11069)
!11112 = !DILocation(line: 3341, column: 3, scope: !11069)
!11113 = !DILocation(line: 3341, column: 10, scope: !11069)
!11114 = !DILocation(line: 3341, column: 14, scope: !11069)
!11115 = !DILocation(line: 3341, column: 12, scope: !11069)
!11116 = !DILocalVariable(name: "modification", scope: !11117, file: !3, line: 3343, type: !1815)
!11117 = distinct !DILexicalBlock(scope: !11069, file: !3, line: 3342, column: 5)
!11118 = !DILocation(line: 3343, column: 12, scope: !11117)
!11119 = !DILocation(line: 3344, column: 16, scope: !11117)
!11120 = !DILocation(line: 3344, column: 14, scope: !11117)
!11121 = !DILocation(line: 3345, column: 22, scope: !11117)
!11122 = !DILocation(line: 3345, column: 30, scope: !11117)
!11123 = !DILocation(line: 3345, column: 20, scope: !11117)
!11124 = !DILocation(line: 3346, column: 39, scope: !11125)
!11125 = distinct !DILexicalBlock(scope: !11117, file: !3, line: 3346, column: 11)
!11126 = !DILocation(line: 3346, column: 11, scope: !11125)
!11127 = !DILocation(line: 3346, column: 11, scope: !11117)
!11128 = !DILocation(line: 3347, column: 2, scope: !11125)
!11129 = !DILocation(line: 3353, column: 11, scope: !11117)
!11130 = !DILocation(line: 3353, column: 13, scope: !11117)
!11131 = !DILocation(line: 3353, column: 9, scope: !11117)
!11132 = !DILocation(line: 3354, column: 7, scope: !11117)
!11133 = !DILocation(line: 3354, column: 14, scope: !11117)
!11134 = !DILocation(line: 3354, column: 18, scope: !11117)
!11135 = !DILocation(line: 3354, column: 16, scope: !11117)
!11136 = !DILocalVariable(name: "ac2", scope: !11137, file: !3, line: 3356, type: !2999)
!11137 = distinct !DILexicalBlock(scope: !11117, file: !3, line: 3355, column: 2)
!11138 = !DILocation(line: 3356, column: 19, scope: !11137)
!11139 = !DILocation(line: 3356, column: 25, scope: !11137)
!11140 = !DILocation(line: 3357, column: 8, scope: !11141)
!11141 = distinct !DILexicalBlock(scope: !11137, file: !3, line: 3357, column: 8)
!11142 = !DILocation(line: 3357, column: 13, scope: !11141)
!11143 = !DILocation(line: 3357, column: 23, scope: !11141)
!11144 = !DILocation(line: 3357, column: 31, scope: !11141)
!11145 = !DILocation(line: 3357, column: 20, scope: !11141)
!11146 = !DILocation(line: 3357, column: 8, scope: !11137)
!11147 = !DILocation(line: 3360, column: 12, scope: !11148)
!11148 = distinct !DILexicalBlock(scope: !11149, file: !3, line: 3360, column: 12)
!11149 = distinct !DILexicalBlock(scope: !11141, file: !3, line: 3358, column: 6)
!11150 = !DILocation(line: 3360, column: 20, scope: !11148)
!11151 = !DILocation(line: 3360, column: 29, scope: !11148)
!11152 = !DILocation(line: 3360, column: 37, scope: !11148)
!11153 = !DILocation(line: 3360, column: 27, scope: !11148)
!11154 = !DILocation(line: 3360, column: 44, scope: !11148)
!11155 = !DILocation(line: 3360, column: 49, scope: !11148)
!11156 = !DILocation(line: 3360, column: 42, scope: !11148)
!11157 = !DILocation(line: 3360, column: 12, scope: !11149)
!11158 = !DILocation(line: 3361, column: 3, scope: !11148)
!11159 = !DILocation(line: 3363, column: 3, scope: !11148)
!11160 = !DILocation(line: 3365, column: 13, scope: !11161)
!11161 = distinct !DILexicalBlock(scope: !11141, file: !3, line: 3365, column: 13)
!11162 = !DILocation(line: 3365, column: 18, scope: !11161)
!11163 = !DILocation(line: 3365, column: 26, scope: !11161)
!11164 = !DILocation(line: 3365, column: 34, scope: !11161)
!11165 = !DILocation(line: 3365, column: 23, scope: !11161)
!11166 = !DILocation(line: 3365, column: 13, scope: !11141)
!11167 = !DILocation(line: 3366, column: 6, scope: !11161)
!11168 = !DILocation(line: 3368, column: 36, scope: !11169)
!11169 = distinct !DILexicalBlock(scope: !11137, file: !3, line: 3368, column: 8)
!11170 = !DILocation(line: 3368, column: 8, scope: !11169)
!11171 = !DILocation(line: 3368, column: 8, scope: !11137)
!11172 = !DILocation(line: 3369, column: 6, scope: !11169)
!11173 = !DILocation(line: 3371, column: 20, scope: !11137)
!11174 = !DILocation(line: 3371, column: 25, scope: !11137)
!11175 = !DILocation(line: 3371, column: 17, scope: !11137)
!11176 = !DILocation(line: 3372, column: 32, scope: !11137)
!11177 = !DILocation(line: 3372, column: 4, scope: !11137)
!11178 = !DILocation(line: 3372, column: 9, scope: !11137)
!11179 = !DILocation(line: 3372, column: 30, scope: !11137)
!11180 = !DILocation(line: 3373, column: 24, scope: !11137)
!11181 = !DILocation(line: 3373, column: 32, scope: !11137)
!11182 = !DILocation(line: 3373, column: 4, scope: !11137)
!11183 = !DILocation(line: 3373, column: 9, scope: !11137)
!11184 = !DILocation(line: 3373, column: 22, scope: !11137)
!11185 = !DILocation(line: 3374, column: 27, scope: !11137)
!11186 = !DILocation(line: 3374, column: 4, scope: !11137)
!11187 = !DILocation(line: 3374, column: 12, scope: !11137)
!11188 = !DILocation(line: 3374, column: 25, scope: !11137)
!11189 = !DILocation(line: 3375, column: 5, scope: !11137)
!11190 = distinct !{!11190, !11132, !11191}
!11191 = !DILocation(line: 3376, column: 2, scope: !11117)
!11192 = !DILocation(line: 3378, column: 18, scope: !11117)
!11193 = !DILocation(line: 3379, column: 36, scope: !11117)
!11194 = !DILocation(line: 3379, column: 7, scope: !11117)
!11195 = !DILocation(line: 3379, column: 15, scope: !11117)
!11196 = !DILocation(line: 3379, column: 34, scope: !11117)
!11197 = !DILocation(line: 3380, column: 12, scope: !11198)
!11198 = distinct !DILexicalBlock(scope: !11117, file: !3, line: 3380, column: 11)
!11199 = !DILocation(line: 3380, column: 11, scope: !11117)
!11200 = !DILocation(line: 3381, column: 3, scope: !11198)
!11201 = !DILocation(line: 3381, column: 10, scope: !11198)
!11202 = !DILocation(line: 3381, column: 2, scope: !11198)
!11203 = !DILocation(line: 3382, column: 23, scope: !11117)
!11204 = !DILocation(line: 3382, column: 8, scope: !11117)
!11205 = !DILocation(line: 3382, column: 21, scope: !11117)
!11206 = !DILocation(line: 3383, column: 23, scope: !11117)
!11207 = !DILocation(line: 3383, column: 31, scope: !11117)
!11208 = !DILocation(line: 3383, column: 20, scope: !11117)
!11209 = !DILocation(line: 3384, column: 21, scope: !11117)
!11210 = !DILocation(line: 3384, column: 29, scope: !11117)
!11211 = !DILocation(line: 3384, column: 18, scope: !11117)
!11212 = !DILocation(line: 3385, column: 11, scope: !11117)
!11213 = !DILocation(line: 3385, column: 9, scope: !11117)
!11214 = distinct !{!11214, !11112, !11215}
!11215 = !DILocation(line: 3386, column: 5, scope: !11069)
!11216 = !DILocation(line: 3388, column: 7, scope: !11217)
!11217 = distinct !DILexicalBlock(scope: !11069, file: !3, line: 3388, column: 7)
!11218 = !DILocation(line: 3388, column: 7, scope: !11069)
!11219 = !DILocation(line: 3389, column: 30, scope: !11217)
!11220 = !DILocation(line: 3389, column: 16, scope: !11217)
!11221 = !DILocation(line: 3389, column: 14, scope: !11217)
!11222 = !DILocation(line: 3389, column: 5, scope: !11217)
!11223 = !DILocation(line: 3391, column: 30, scope: !11217)
!11224 = !DILocation(line: 3391, column: 16, scope: !11217)
!11225 = !DILocation(line: 3391, column: 14, scope: !11217)
!11226 = !DILocation(line: 3392, column: 7, scope: !11227)
!11227 = distinct !DILexicalBlock(scope: !11069, file: !3, line: 3392, column: 7)
!11228 = !DILocation(line: 3392, column: 21, scope: !11227)
!11229 = !DILocation(line: 3392, column: 18, scope: !11227)
!11230 = !DILocation(line: 3392, column: 7, scope: !11069)
!11231 = !DILocation(line: 3393, column: 5, scope: !11227)
!11232 = !DILocation(line: 3395, column: 3, scope: !11069)
!11233 = !DILocation(line: 3396, column: 10, scope: !11069)
!11234 = !DILocation(line: 3396, column: 3, scope: !11069)
!11235 = !DILocation(line: 3397, column: 1, scope: !11069)
!11236 = distinct !DISubprogram(name: "access_precludes_ipa_sra_p", scope: !3, file: !3, line: 3293, type: !7023, scopeLine: 3294, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11237 = !DILocalVariable(name: "access", arg: 1, scope: !11236, file: !3, line: 3293, type: !2999)
!11238 = !DILocation(line: 3293, column: 44, scope: !11236)
!11239 = !DILocation(line: 3301, column: 7, scope: !11240)
!11240 = distinct !DILexicalBlock(scope: !11236, file: !3, line: 3301, column: 7)
!11241 = !DILocation(line: 3301, column: 15, scope: !11240)
!11242 = !DILocation(line: 3302, column: 7, scope: !11240)
!11243 = !DILocation(line: 3302, column: 27, scope: !11240)
!11244 = !DILocation(line: 3302, column: 35, scope: !11240)
!11245 = !DILocation(line: 3302, column: 11, scope: !11240)
!11246 = !DILocation(line: 3303, column: 4, scope: !11240)
!11247 = !DILocation(line: 3303, column: 20, scope: !11240)
!11248 = !DILocation(line: 3303, column: 28, scope: !11240)
!11249 = !DILocation(line: 3303, column: 7, scope: !11240)
!11250 = !DILocation(line: 3303, column: 34, scope: !11240)
!11251 = !DILocation(line: 3301, column: 7, scope: !11236)
!11252 = !DILocation(line: 3304, column: 5, scope: !11240)
!11253 = !DILocation(line: 3306, column: 3, scope: !11236)
!11254 = !DILocation(line: 3307, column: 1, scope: !11236)
!11255 = distinct !DISubprogram(name: "dump_dereferences_table", scope: !3, file: !3, line: 3178, type: !11256, scopeLine: 3179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11256 = !DISubroutineType(types: !11257)
!11257 = !{null, !7048, !1897, !3055}
!11258 = !DILocalVariable(name: "f", arg: 1, scope: !11255, file: !3, line: 3178, type: !7048)
!11259 = !DILocation(line: 3178, column: 32, scope: !11255)
!11260 = !DILocalVariable(name: "str", arg: 2, scope: !11255, file: !3, line: 3178, type: !1897)
!11261 = !DILocation(line: 3178, column: 47, scope: !11255)
!11262 = !DILocalVariable(name: "table", arg: 3, scope: !11255, file: !3, line: 3178, type: !3055)
!11263 = !DILocation(line: 3178, column: 67, scope: !11255)
!11264 = !DILocalVariable(name: "bb", scope: !11255, file: !3, line: 3180, type: !2423)
!11265 = !DILocation(line: 3180, column: 15, scope: !11255)
!11266 = !DILocation(line: 3182, column: 12, scope: !11255)
!11267 = !DILocation(line: 3182, column: 23, scope: !11255)
!11268 = !DILocation(line: 3182, column: 3, scope: !11255)
!11269 = !DILocation(line: 3183, column: 3, scope: !11270)
!11270 = distinct !DILexicalBlock(scope: !11255, file: !3, line: 3183, column: 3)
!11271 = !DILocation(line: 3183, column: 3, scope: !11272)
!11272 = distinct !DILexicalBlock(scope: !11270, file: !3, line: 3183, column: 3)
!11273 = !DILocation(line: 3185, column: 16, scope: !11274)
!11274 = distinct !DILexicalBlock(scope: !11272, file: !3, line: 3184, column: 5)
!11275 = !DILocation(line: 3185, column: 33, scope: !11274)
!11276 = !DILocation(line: 3185, column: 37, scope: !11274)
!11277 = !DILocation(line: 3185, column: 58, scope: !11274)
!11278 = !DILocation(line: 3185, column: 69, scope: !11274)
!11279 = !DILocation(line: 3185, column: 73, scope: !11274)
!11280 = !DILocation(line: 3185, column: 44, scope: !11274)
!11281 = !DILocation(line: 3185, column: 7, scope: !11274)
!11282 = !DILocation(line: 3186, column: 11, scope: !11283)
!11283 = distinct !DILexicalBlock(scope: !11274, file: !3, line: 3186, column: 11)
!11284 = !DILocation(line: 3186, column: 17, scope: !11283)
!11285 = !DILocation(line: 3186, column: 14, scope: !11283)
!11286 = !DILocation(line: 3186, column: 11, scope: !11274)
!11287 = !DILocalVariable(name: "i", scope: !11288, file: !3, line: 3188, type: !1693)
!11288 = distinct !DILexicalBlock(scope: !11283, file: !3, line: 3187, column: 2)
!11289 = !DILocation(line: 3188, column: 8, scope: !11288)
!11290 = !DILocation(line: 3189, column: 11, scope: !11291)
!11291 = distinct !DILexicalBlock(scope: !11288, file: !3, line: 3189, column: 4)
!11292 = !DILocation(line: 3189, column: 9, scope: !11291)
!11293 = !DILocation(line: 3189, column: 16, scope: !11294)
!11294 = distinct !DILexicalBlock(scope: !11291, file: !3, line: 3189, column: 4)
!11295 = !DILocation(line: 3189, column: 20, scope: !11294)
!11296 = !DILocation(line: 3189, column: 18, scope: !11294)
!11297 = !DILocation(line: 3189, column: 4, scope: !11291)
!11298 = !DILocalVariable(name: "idx", scope: !11299, file: !3, line: 3191, type: !1693)
!11299 = distinct !DILexicalBlock(scope: !11294, file: !3, line: 3190, column: 6)
!11300 = !DILocation(line: 3191, column: 12, scope: !11299)
!11301 = !DILocation(line: 3191, column: 18, scope: !11299)
!11302 = !DILocation(line: 3191, column: 22, scope: !11299)
!11303 = !DILocation(line: 3191, column: 30, scope: !11299)
!11304 = !DILocation(line: 3191, column: 28, scope: !11299)
!11305 = !DILocation(line: 3191, column: 49, scope: !11299)
!11306 = !DILocation(line: 3191, column: 47, scope: !11299)
!11307 = !DILocation(line: 3192, column: 17, scope: !11299)
!11308 = !DILocation(line: 3192, column: 51, scope: !11299)
!11309 = !DILocation(line: 3192, column: 57, scope: !11299)
!11310 = !DILocation(line: 3192, column: 8, scope: !11299)
!11311 = !DILocation(line: 3193, column: 6, scope: !11299)
!11312 = !DILocation(line: 3189, column: 39, scope: !11294)
!11313 = !DILocation(line: 3189, column: 4, scope: !11294)
!11314 = distinct !{!11314, !11297, !11315}
!11315 = !DILocation(line: 3193, column: 6, scope: !11291)
!11316 = !DILocation(line: 3194, column: 2, scope: !11288)
!11317 = !DILocation(line: 3195, column: 16, scope: !11274)
!11318 = !DILocation(line: 3195, column: 7, scope: !11274)
!11319 = !DILocation(line: 3196, column: 5, scope: !11274)
!11320 = distinct !{!11320, !11269, !11321}
!11321 = !DILocation(line: 3196, column: 5, scope: !11270)
!11322 = !DILocation(line: 3197, column: 12, scope: !11255)
!11323 = !DILocation(line: 3197, column: 3, scope: !11255)
!11324 = !DILocation(line: 3198, column: 1, scope: !11255)
!11325 = distinct !DISubprogram(name: "propagate_dereference_distances", scope: !3, file: !3, line: 3106, type: !3517, scopeLine: 3107, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11326 = !DILocalVariable(name: "queue", scope: !11325, file: !3, line: 3108, type: !3059)
!11327 = !DILocation(line: 3108, column: 28, scope: !11325)
!11328 = !DILocalVariable(name: "bb", scope: !11325, file: !3, line: 3109, type: !2423)
!11329 = !DILocation(line: 3109, column: 15, scope: !11325)
!11330 = !DILocation(line: 3111, column: 11, scope: !11325)
!11331 = !DILocation(line: 3111, column: 9, scope: !11325)
!11332 = !DILocation(line: 3112, column: 3, scope: !11325)
!11333 = !DILocation(line: 3113, column: 3, scope: !11334)
!11334 = distinct !DILexicalBlock(scope: !11325, file: !3, line: 3113, column: 3)
!11335 = !DILocation(line: 3113, column: 3, scope: !11336)
!11336 = distinct !DILexicalBlock(scope: !11334, file: !3, line: 3113, column: 3)
!11337 = !DILocation(line: 3115, column: 7, scope: !11338)
!11338 = distinct !DILexicalBlock(scope: !11336, file: !3, line: 3114, column: 5)
!11339 = !DILocation(line: 3116, column: 17, scope: !11338)
!11340 = !DILocation(line: 3116, column: 7, scope: !11338)
!11341 = !DILocation(line: 3116, column: 11, scope: !11338)
!11342 = !DILocation(line: 3116, column: 15, scope: !11338)
!11343 = !DILocation(line: 3117, column: 5, scope: !11338)
!11344 = distinct !{!11344, !11333, !11345}
!11345 = !DILocation(line: 3117, column: 5, scope: !11334)
!11346 = !DILocation(line: 3119, column: 3, scope: !11325)
!11347 = !DILocation(line: 3119, column: 11, scope: !11325)
!11348 = !DILocation(line: 3119, column: 10, scope: !11325)
!11349 = !DILocalVariable(name: "ei", scope: !11350, file: !3, line: 3121, type: !11351)
!11350 = distinct !DILexicalBlock(scope: !11325, file: !3, line: 3120, column: 5)
!11351 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !330, line: 682, baseType: !11352)
!11352 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !330, line: 679, size: 128, elements: !11353)
!11353 = !{!11354, !11355}
!11354 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !11352, file: !330, line: 680, baseType: !7, size: 32)
!11355 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !11352, file: !330, line: 681, baseType: !11356, size: 64, offset: 64)
!11356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1992, size: 64)
!11357 = !DILocation(line: 3121, column: 21, scope: !11350)
!11358 = !DILocalVariable(name: "e", scope: !11350, file: !3, line: 3122, type: !2004)
!11359 = !DILocation(line: 3122, column: 12, scope: !11350)
!11360 = !DILocalVariable(name: "change", scope: !11350, file: !3, line: 3123, type: !1815)
!11361 = !DILocation(line: 3123, column: 12, scope: !11350)
!11362 = !DILocalVariable(name: "i", scope: !11350, file: !3, line: 3124, type: !1693)
!11363 = !DILocation(line: 3124, column: 11, scope: !11350)
!11364 = !DILocation(line: 3126, column: 12, scope: !11350)
!11365 = !DILocation(line: 3126, column: 10, scope: !11350)
!11366 = !DILocation(line: 3127, column: 7, scope: !11350)
!11367 = !DILocation(line: 3127, column: 11, scope: !11350)
!11368 = !DILocation(line: 3127, column: 15, scope: !11350)
!11369 = !DILocation(line: 3129, column: 25, scope: !11370)
!11370 = distinct !DILexicalBlock(scope: !11350, file: !3, line: 3129, column: 11)
!11371 = !DILocation(line: 3129, column: 36, scope: !11370)
!11372 = !DILocation(line: 3129, column: 40, scope: !11370)
!11373 = !DILocation(line: 3129, column: 11, scope: !11370)
!11374 = !DILocation(line: 3129, column: 11, scope: !11350)
!11375 = !DILocation(line: 3130, column: 2, scope: !11370)
!11376 = distinct !{!11376, !11346, !11377}
!11377 = !DILocation(line: 3170, column: 5, scope: !11325)
!11378 = !DILocation(line: 3132, column: 14, scope: !11379)
!11379 = distinct !DILexicalBlock(scope: !11350, file: !3, line: 3132, column: 7)
!11380 = !DILocation(line: 3132, column: 12, scope: !11379)
!11381 = !DILocation(line: 3132, column: 19, scope: !11382)
!11382 = distinct !DILexicalBlock(scope: !11379, file: !3, line: 3132, column: 7)
!11383 = !DILocation(line: 3132, column: 23, scope: !11382)
!11384 = !DILocation(line: 3132, column: 21, scope: !11382)
!11385 = !DILocation(line: 3132, column: 7, scope: !11379)
!11386 = !DILocalVariable(name: "idx", scope: !11387, file: !3, line: 3134, type: !1693)
!11387 = distinct !DILexicalBlock(scope: !11382, file: !3, line: 3133, column: 2)
!11388 = !DILocation(line: 3134, column: 8, scope: !11387)
!11389 = !DILocation(line: 3134, column: 14, scope: !11387)
!11390 = !DILocation(line: 3134, column: 18, scope: !11387)
!11391 = !DILocation(line: 3134, column: 26, scope: !11387)
!11392 = !DILocation(line: 3134, column: 24, scope: !11387)
!11393 = !DILocation(line: 3134, column: 45, scope: !11387)
!11394 = !DILocation(line: 3134, column: 43, scope: !11387)
!11395 = !DILocalVariable(name: "first", scope: !11387, file: !3, line: 3135, type: !1815)
!11396 = !DILocation(line: 3135, column: 9, scope: !11387)
!11397 = !DILocalVariable(name: "inh", scope: !11387, file: !3, line: 3136, type: !1752)
!11398 = !DILocation(line: 3136, column: 18, scope: !11387)
!11399 = !DILocation(line: 3138, column: 4, scope: !11400)
!11400 = distinct !DILexicalBlock(scope: !11387, file: !3, line: 3138, column: 4)
!11401 = !DILocation(line: 3138, column: 4, scope: !11402)
!11402 = distinct !DILexicalBlock(scope: !11400, file: !3, line: 3138, column: 4)
!11403 = !DILocalVariable(name: "succ_idx", scope: !11404, file: !3, line: 3140, type: !1693)
!11404 = distinct !DILexicalBlock(scope: !11402, file: !3, line: 3139, column: 4)
!11405 = !DILocation(line: 3140, column: 10, scope: !11404)
!11406 = !DILocation(line: 3140, column: 21, scope: !11404)
!11407 = !DILocation(line: 3140, column: 24, scope: !11404)
!11408 = !DILocation(line: 3140, column: 30, scope: !11404)
!11409 = !DILocation(line: 3140, column: 38, scope: !11404)
!11410 = !DILocation(line: 3140, column: 36, scope: !11404)
!11411 = !DILocation(line: 3140, column: 57, scope: !11404)
!11412 = !DILocation(line: 3140, column: 55, scope: !11404)
!11413 = !DILocation(line: 3142, column: 10, scope: !11414)
!11414 = distinct !DILexicalBlock(scope: !11404, file: !3, line: 3142, column: 10)
!11415 = !DILocation(line: 3142, column: 13, scope: !11414)
!11416 = !DILocation(line: 3142, column: 20, scope: !11414)
!11417 = !DILocation(line: 3142, column: 17, scope: !11414)
!11418 = !DILocation(line: 3142, column: 10, scope: !11404)
!11419 = !DILocation(line: 3143, column: 8, scope: !11414)
!11420 = !DILocation(line: 3145, column: 10, scope: !11421)
!11421 = distinct !DILexicalBlock(scope: !11404, file: !3, line: 3145, column: 10)
!11422 = !DILocation(line: 3145, column: 10, scope: !11404)
!11423 = !DILocation(line: 3147, column: 9, scope: !11424)
!11424 = distinct !DILexicalBlock(scope: !11421, file: !3, line: 3146, column: 8)
!11425 = !DILocation(line: 3148, column: 9, scope: !11424)
!11426 = !DILocation(line: 3148, column: 26, scope: !11424)
!11427 = !DILocation(line: 3148, column: 7, scope: !11424)
!11428 = !DILocation(line: 3149, column: 8, scope: !11424)
!11429 = !DILocation(line: 3150, column: 15, scope: !11430)
!11430 = distinct !DILexicalBlock(scope: !11421, file: !3, line: 3150, column: 15)
!11431 = !DILocation(line: 3150, column: 32, scope: !11430)
!11432 = !DILocation(line: 3150, column: 44, scope: !11430)
!11433 = !DILocation(line: 3150, column: 42, scope: !11430)
!11434 = !DILocation(line: 3150, column: 15, scope: !11421)
!11435 = !DILocation(line: 3151, column: 14, scope: !11430)
!11436 = !DILocation(line: 3151, column: 31, scope: !11430)
!11437 = !DILocation(line: 3151, column: 12, scope: !11430)
!11438 = !DILocation(line: 3151, column: 8, scope: !11430)
!11439 = !DILocation(line: 3152, column: 4, scope: !11404)
!11440 = distinct !{!11440, !11399, !11441}
!11441 = !DILocation(line: 3152, column: 4, scope: !11400)
!11442 = !DILocation(line: 3154, column: 9, scope: !11443)
!11443 = distinct !DILexicalBlock(scope: !11387, file: !3, line: 3154, column: 8)
!11444 = !DILocation(line: 3154, column: 15, scope: !11443)
!11445 = !DILocation(line: 3154, column: 18, scope: !11443)
!11446 = !DILocation(line: 3154, column: 34, scope: !11443)
!11447 = !DILocation(line: 3154, column: 41, scope: !11443)
!11448 = !DILocation(line: 3154, column: 39, scope: !11443)
!11449 = !DILocation(line: 3154, column: 8, scope: !11387)
!11450 = !DILocation(line: 3156, column: 31, scope: !11451)
!11451 = distinct !DILexicalBlock(scope: !11443, file: !3, line: 3155, column: 6)
!11452 = !DILocation(line: 3156, column: 8, scope: !11451)
!11453 = !DILocation(line: 3156, column: 24, scope: !11451)
!11454 = !DILocation(line: 3156, column: 29, scope: !11451)
!11455 = !DILocation(line: 3157, column: 15, scope: !11451)
!11456 = !DILocation(line: 3158, column: 6, scope: !11451)
!11457 = !DILocation(line: 3159, column: 2, scope: !11387)
!11458 = !DILocation(line: 3132, column: 42, scope: !11382)
!11459 = !DILocation(line: 3132, column: 7, scope: !11382)
!11460 = distinct !{!11460, !11385, !11461}
!11461 = !DILocation(line: 3159, column: 2, scope: !11379)
!11462 = !DILocation(line: 3161, column: 11, scope: !11463)
!11463 = distinct !DILexicalBlock(scope: !11350, file: !3, line: 3161, column: 11)
!11464 = !DILocation(line: 3161, column: 18, scope: !11463)
!11465 = !DILocation(line: 3161, column: 36, scope: !11463)
!11466 = !DILocation(line: 3161, column: 47, scope: !11463)
!11467 = !DILocation(line: 3161, column: 51, scope: !11463)
!11468 = !DILocation(line: 3161, column: 22, scope: !11463)
!11469 = !DILocation(line: 3161, column: 11, scope: !11350)
!11470 = !DILocation(line: 3162, column: 2, scope: !11471)
!11471 = distinct !DILexicalBlock(scope: !11463, file: !3, line: 3162, column: 2)
!11472 = !DILocation(line: 3162, column: 2, scope: !11473)
!11473 = distinct !DILexicalBlock(scope: !11471, file: !3, line: 3162, column: 2)
!11474 = !DILocation(line: 3164, column: 10, scope: !11475)
!11475 = distinct !DILexicalBlock(scope: !11476, file: !3, line: 3164, column: 10)
!11476 = distinct !DILexicalBlock(scope: !11473, file: !3, line: 3163, column: 4)
!11477 = !DILocation(line: 3164, column: 13, scope: !11475)
!11478 = !DILocation(line: 3164, column: 18, scope: !11475)
!11479 = !DILocation(line: 3164, column: 10, scope: !11476)
!11480 = !DILocation(line: 3165, column: 8, scope: !11475)
!11481 = !DILocation(line: 3167, column: 20, scope: !11476)
!11482 = !DILocation(line: 3167, column: 23, scope: !11476)
!11483 = !DILocation(line: 3167, column: 6, scope: !11476)
!11484 = !DILocation(line: 3167, column: 9, scope: !11476)
!11485 = !DILocation(line: 3167, column: 14, scope: !11476)
!11486 = !DILocation(line: 3167, column: 18, scope: !11476)
!11487 = !DILocation(line: 3168, column: 6, scope: !11476)
!11488 = !DILocation(line: 3169, column: 4, scope: !11476)
!11489 = distinct !{!11489, !11470, !11490}
!11490 = !DILocation(line: 3169, column: 4, scope: !11471)
!11491 = !DILocation(line: 3172, column: 3, scope: !11325)
!11492 = !DILocation(line: 3173, column: 1, scope: !11325)
!11493 = distinct !DISubprogram(name: "VEC_basic_block_heap_alloc", scope: !330, file: !330, line: 283, type: !11494, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11494 = !DISubroutineType(types: !11495)
!11495 = !{!3059, !1693}
!11496 = !DILocalVariable(name: "alloc_", arg: 1, scope: !11493, file: !330, line: 283, type: !1693)
!11497 = !DILocation(line: 283, column: 1, scope: !11493)
!11498 = distinct !DISubprogram(name: "VEC_basic_block_base_quick_push", scope: !330, file: !330, line: 281, type: !11499, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11499 = !DISubroutineType(types: !11500)
!11500 = !{!11501, !11502, !2423}
!11501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2423, size: 64)
!11502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2431, size: 64)
!11503 = !DILocalVariable(name: "vec_", arg: 1, scope: !11498, file: !330, line: 281, type: !11502)
!11504 = !DILocation(line: 281, column: 1, scope: !11498)
!11505 = !DILocalVariable(name: "obj_", arg: 2, scope: !11498, file: !330, line: 281, type: !2423)
!11506 = !DILocalVariable(name: "slot_", scope: !11498, file: !330, line: 281, type: !11501)
!11507 = distinct !DISubprogram(name: "VEC_basic_block_base_length", scope: !330, file: !330, line: 281, type: !11508, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11508 = !DISubroutineType(types: !11509)
!11509 = !{!7, !11510}
!11510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11511, size: 64)
!11511 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2431)
!11512 = !DILocalVariable(name: "vec_", arg: 1, scope: !11507, file: !330, line: 281, type: !11510)
!11513 = !DILocation(line: 281, column: 1, scope: !11507)
!11514 = distinct !DISubprogram(name: "VEC_basic_block_base_pop", scope: !330, file: !330, line: 281, type: !11515, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11515 = !DISubroutineType(types: !11516)
!11516 = !{!2423, !11502}
!11517 = !DILocalVariable(name: "vec_", arg: 1, scope: !11514, file: !330, line: 281, type: !11502)
!11518 = !DILocation(line: 281, column: 1, scope: !11514)
!11519 = !DILocalVariable(name: "obj_", scope: !11514, file: !330, line: 281, type: !2423)
!11520 = distinct !DISubprogram(name: "ei_start_1", scope: !330, file: !330, line: 696, type: !11521, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11521 = !DISubroutineType(types: !11522)
!11522 = !{!11351, !11356}
!11523 = !DILocalVariable(name: "ev", arg: 1, scope: !11520, file: !330, line: 696, type: !11356)
!11524 = !DILocation(line: 696, column: 28, scope: !11520)
!11525 = !DILocalVariable(name: "i", scope: !11520, file: !330, line: 698, type: !11351)
!11526 = !DILocation(line: 698, column: 17, scope: !11520)
!11527 = !DILocation(line: 700, column: 5, scope: !11520)
!11528 = !DILocation(line: 700, column: 11, scope: !11520)
!11529 = !DILocation(line: 701, column: 17, scope: !11520)
!11530 = !DILocation(line: 701, column: 5, scope: !11520)
!11531 = !DILocation(line: 701, column: 15, scope: !11520)
!11532 = !DILocation(line: 703, column: 3, scope: !11520)
!11533 = distinct !DISubprogram(name: "ei_cond", scope: !330, file: !330, line: 771, type: !11534, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11534 = !DISubroutineType(types: !11535)
!11535 = !{!1815, !11351, !11536}
!11536 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2004, size: 64)
!11537 = !DILocalVariable(name: "ei", arg: 1, scope: !11533, file: !330, line: 771, type: !11351)
!11538 = !DILocation(line: 771, column: 24, scope: !11533)
!11539 = !DILocalVariable(name: "p", arg: 2, scope: !11533, file: !330, line: 771, type: !11536)
!11540 = !DILocation(line: 771, column: 34, scope: !11533)
!11541 = !DILocation(line: 773, column: 8, scope: !11542)
!11542 = distinct !DILexicalBlock(scope: !11533, file: !330, line: 773, column: 7)
!11543 = !DILocation(line: 773, column: 7, scope: !11533)
!11544 = !DILocation(line: 775, column: 12, scope: !11545)
!11545 = distinct !DILexicalBlock(scope: !11542, file: !330, line: 774, column: 5)
!11546 = !DILocation(line: 775, column: 8, scope: !11545)
!11547 = !DILocation(line: 775, column: 10, scope: !11545)
!11548 = !DILocation(line: 776, column: 7, scope: !11545)
!11549 = !DILocation(line: 780, column: 8, scope: !11550)
!11550 = distinct !DILexicalBlock(scope: !11542, file: !330, line: 779, column: 5)
!11551 = !DILocation(line: 780, column: 10, scope: !11550)
!11552 = !DILocation(line: 781, column: 7, scope: !11550)
!11553 = !DILocation(line: 783, column: 1, scope: !11533)
!11554 = distinct !DISubprogram(name: "ei_next", scope: !330, file: !330, line: 736, type: !11555, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11555 = !DISubroutineType(types: !11556)
!11556 = !{null, !11557}
!11557 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11351, size: 64)
!11558 = !DILocalVariable(name: "i", arg: 1, scope: !11554, file: !330, line: 736, type: !11557)
!11559 = !DILocation(line: 736, column: 25, scope: !11554)
!11560 = !DILocation(line: 738, column: 3, scope: !11554)
!11561 = !DILocation(line: 739, column: 3, scope: !11554)
!11562 = !DILocation(line: 739, column: 6, scope: !11554)
!11563 = !DILocation(line: 739, column: 11, scope: !11554)
!11564 = !DILocation(line: 740, column: 1, scope: !11554)
!11565 = distinct !DISubprogram(name: "VEC_basic_block_heap_free", scope: !330, file: !330, line: 283, type: !11566, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11566 = !DISubroutineType(types: !11567)
!11567 = !{null, !11568}
!11568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3059, size: 64)
!11569 = !DILocalVariable(name: "vec_", arg: 1, scope: !11565, file: !330, line: 283, type: !11568)
!11570 = !DILocation(line: 283, column: 1, scope: !11565)
!11571 = !DILocation(line: 283, column: 1, scope: !11572)
!11572 = distinct !DILexicalBlock(scope: !11565, file: !330, line: 283, column: 1)
!11573 = distinct !DISubprogram(name: "ei_end_p", scope: !330, file: !330, line: 721, type: !11574, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11574 = !DISubroutineType(types: !11575)
!11575 = !{!1815, !11351}
!11576 = !DILocalVariable(name: "i", arg: 1, scope: !11573, file: !330, line: 721, type: !11351)
!11577 = !DILocation(line: 721, column: 25, scope: !11573)
!11578 = !DILocation(line: 723, column: 13, scope: !11573)
!11579 = !DILocation(line: 723, column: 22, scope: !11573)
!11580 = !DILocation(line: 723, column: 19, scope: !11573)
!11581 = !DILocation(line: 723, column: 10, scope: !11573)
!11582 = !DILocation(line: 723, column: 3, scope: !11573)
!11583 = distinct !DISubprogram(name: "ei_edge", scope: !330, file: !330, line: 752, type: !11584, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11584 = !DISubroutineType(types: !11585)
!11585 = !{!2004, !11351}
!11586 = !DILocalVariable(name: "i", arg: 1, scope: !11583, file: !330, line: 752, type: !11351)
!11587 = !DILocation(line: 752, column: 24, scope: !11583)
!11588 = !DILocation(line: 754, column: 10, scope: !11583)
!11589 = !DILocation(line: 754, column: 3, scope: !11583)
!11590 = distinct !DISubprogram(name: "ei_container", scope: !330, file: !330, line: 685, type: !11591, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11591 = !DISubroutineType(types: !11592)
!11592 = !{!1992, !11351}
!11593 = !DILocalVariable(name: "i", arg: 1, scope: !11590, file: !330, line: 685, type: !11351)
!11594 = !DILocation(line: 685, column: 29, scope: !11590)
!11595 = !DILocation(line: 687, column: 3, scope: !11590)
!11596 = !DILocation(line: 688, column: 13, scope: !11590)
!11597 = !DILocation(line: 688, column: 10, scope: !11590)
!11598 = !DILocation(line: 688, column: 3, scope: !11590)
!11599 = distinct !DISubprogram(name: "mark_maybe_modified", scope: !3, file: !3, line: 3047, type: !11600, scopeLine: 3049, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11600 = !DISubroutineType(types: !11601)
!11601 = !{!1815, !11602, !1696, !1977}
!11602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10642, size: 64)
!11603 = !DILocalVariable(name: "ao", arg: 1, scope: !11599, file: !3, line: 3047, type: !11602)
!11604 = !DILocation(line: 3047, column: 30, scope: !11599)
!11605 = !DILocalVariable(name: "vdef", arg: 2, scope: !11599, file: !3, line: 3047, type: !1696)
!11606 = !DILocation(line: 3047, column: 56, scope: !11599)
!11607 = !DILocalVariable(name: "data", arg: 3, scope: !11599, file: !3, line: 3048, type: !1977)
!11608 = !DILocation(line: 3048, column: 14, scope: !11599)
!11609 = !DILocalVariable(name: "repr", scope: !11599, file: !3, line: 3050, type: !2999)
!11610 = !DILocation(line: 3050, column: 18, scope: !11599)
!11611 = !DILocation(line: 3050, column: 43, scope: !11599)
!11612 = !DILocation(line: 3050, column: 25, scope: !11599)
!11613 = !DILocation(line: 3052, column: 3, scope: !11599)
!11614 = !DILocation(line: 3052, column: 9, scope: !11599)
!11615 = !DILocation(line: 3052, column: 28, scope: !11599)
!11616 = !DILocation(line: 3053, column: 3, scope: !11599)
!11617 = distinct !DISubprogram(name: "VEC_ipa_parm_adjustment_t_heap_alloc", scope: !3066, file: !3066, line: 485, type: !11618, scopeLine: 485, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11618 = !DISubroutineType(types: !11619)
!11619 = !{!3064, !1693}
!11620 = !DILocalVariable(name: "alloc_", arg: 1, scope: !11617, file: !3066, line: 485, type: !1693)
!11621 = !DILocation(line: 485, column: 1, scope: !11617)
!11622 = distinct !DISubprogram(name: "VEC_ipa_parm_adjustment_t_base_quick_push", scope: !3066, file: !3066, line: 484, type: !11623, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11623 = !DISubroutineType(types: !11624)
!11624 = !{!11625, !11626, !11627}
!11625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3077, size: 64)
!11626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3070, size: 64)
!11627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11628, size: 64)
!11628 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3077)
!11629 = !DILocalVariable(name: "vec_", arg: 1, scope: !11622, file: !3066, line: 484, type: !11626)
!11630 = !DILocation(line: 484, column: 1, scope: !11622)
!11631 = !DILocalVariable(name: "obj_", arg: 2, scope: !11622, file: !3066, line: 484, type: !11627)
!11632 = !DILocalVariable(name: "slot_", scope: !11622, file: !3066, line: 484, type: !11625)
!11633 = !DILocation(line: 484, column: 1, scope: !11634)
!11634 = distinct !DILexicalBlock(scope: !11622, file: !3066, line: 484, column: 1)
!11635 = distinct !DISubprogram(name: "get_param_index", scope: !3, file: !3, line: 3544, type: !11636, scopeLine: 3545, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11636 = !DISubroutineType(types: !11637)
!11637 = !{!1693, !1696, !10865}
!11638 = !DILocalVariable(name: "base", arg: 1, scope: !11635, file: !3, line: 3544, type: !1696)
!11639 = !DILocation(line: 3544, column: 23, scope: !11635)
!11640 = !DILocalVariable(name: "parms", arg: 2, scope: !11635, file: !3, line: 3544, type: !10865)
!11641 = !DILocation(line: 3544, column: 46, scope: !11635)
!11642 = !DILocalVariable(name: "i", scope: !11635, file: !3, line: 3546, type: !1693)
!11643 = !DILocation(line: 3546, column: 7, scope: !11635)
!11644 = !DILocalVariable(name: "len", scope: !11635, file: !3, line: 3546, type: !1693)
!11645 = !DILocation(line: 3546, column: 10, scope: !11635)
!11646 = !DILocation(line: 3548, column: 9, scope: !11635)
!11647 = !DILocation(line: 3548, column: 7, scope: !11635)
!11648 = !DILocation(line: 3549, column: 10, scope: !11649)
!11649 = distinct !DILexicalBlock(scope: !11635, file: !3, line: 3549, column: 3)
!11650 = !DILocation(line: 3549, column: 8, scope: !11649)
!11651 = !DILocation(line: 3549, column: 15, scope: !11652)
!11652 = distinct !DILexicalBlock(scope: !11649, file: !3, line: 3549, column: 3)
!11653 = !DILocation(line: 3549, column: 19, scope: !11652)
!11654 = !DILocation(line: 3549, column: 17, scope: !11652)
!11655 = !DILocation(line: 3549, column: 3, scope: !11649)
!11656 = !DILocation(line: 3550, column: 9, scope: !11657)
!11657 = distinct !DILexicalBlock(scope: !11652, file: !3, line: 3550, column: 9)
!11658 = !DILocation(line: 3550, column: 39, scope: !11657)
!11659 = !DILocation(line: 3550, column: 36, scope: !11657)
!11660 = !DILocation(line: 3550, column: 9, scope: !11652)
!11661 = !DILocation(line: 3551, column: 14, scope: !11657)
!11662 = !DILocation(line: 3551, column: 7, scope: !11657)
!11663 = !DILocation(line: 3549, column: 25, scope: !11652)
!11664 = !DILocation(line: 3549, column: 3, scope: !11652)
!11665 = distinct !{!11665, !11655, !11666}
!11666 = !DILocation(line: 3551, column: 14, scope: !11649)
!11667 = !DILocation(line: 3552, column: 3, scope: !11635)
!11668 = !DILocation(line: 3554, column: 5, scope: !11635)
!11669 = !DILocation(line: 3556, column: 1, scope: !11635)
!11670 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !135, file: !135, line: 184, type: !11671, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11671 = !DISubroutineType(types: !11672)
!11672 = !{null, !11673}
!11673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10865, size: 64)
!11674 = !DILocalVariable(name: "vec_", arg: 1, scope: !11670, file: !135, line: 184, type: !11673)
!11675 = !DILocation(line: 184, column: 1, scope: !11670)
!11676 = !DILocation(line: 184, column: 1, scope: !11677)
!11677 = distinct !DILexicalBlock(scope: !11670, file: !135, line: 184, column: 1)
!11678 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !11679, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11679 = !DISubroutineType(types: !11680)
!11680 = !{!7, !11681}
!11681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11682, size: 64)
!11682 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2523)
!11683 = !DILocalVariable(name: "vec_", arg: 1, scope: !11678, file: !135, line: 182, type: !11681)
!11684 = !DILocation(line: 182, column: 1, scope: !11678)
!11685 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !135, file: !135, line: 182, type: !11686, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11686 = !DISubroutineType(types: !11687)
!11687 = !{!1696, !11681, !7}
!11688 = !DILocalVariable(name: "vec_", arg: 1, scope: !11685, file: !135, line: 182, type: !11681)
!11689 = !DILocation(line: 182, column: 1, scope: !11685)
!11690 = !DILocalVariable(name: "ix_", arg: 2, scope: !11685, file: !135, line: 182, type: !7)
!11691 = !DILocation(line: 0, scope: !11685)
!11692 = distinct !DISubprogram(name: "create_abstract_origin", scope: !3, file: !3, line: 4069, type: !8501, scopeLine: 4070, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11693 = !DILocalVariable(name: "old_decl", arg: 1, scope: !11692, file: !3, line: 4069, type: !1696)
!11694 = !DILocation(line: 4069, column: 30, scope: !11692)
!11695 = !DILocation(line: 4071, column: 8, scope: !11696)
!11696 = distinct !DILexicalBlock(scope: !11692, file: !3, line: 4071, column: 7)
!11697 = !DILocation(line: 4071, column: 7, scope: !11692)
!11698 = !DILocalVariable(name: "new_decl", scope: !11699, file: !3, line: 4073, type: !1696)
!11699 = distinct !DILexicalBlock(scope: !11696, file: !3, line: 4072, column: 5)
!11700 = !DILocation(line: 4073, column: 12, scope: !11699)
!11701 = !DILocation(line: 4073, column: 23, scope: !11699)
!11702 = !DILocation(line: 4075, column: 7, scope: !11699)
!11703 = !DILocation(line: 4075, column: 32, scope: !11699)
!11704 = !DILocation(line: 4076, column: 7, scope: !11699)
!11705 = !DILocation(line: 4077, column: 7, scope: !11699)
!11706 = !DILocation(line: 4078, column: 7, scope: !11699)
!11707 = !DILocation(line: 4078, column: 39, scope: !11699)
!11708 = !DILocation(line: 4079, column: 7, scope: !11699)
!11709 = !DILocation(line: 4079, column: 34, scope: !11699)
!11710 = !DILocation(line: 4080, column: 41, scope: !11699)
!11711 = !DILocation(line: 4080, column: 7, scope: !11699)
!11712 = !DILocation(line: 4080, column: 39, scope: !11699)
!11713 = !DILocation(line: 4081, column: 5, scope: !11699)
!11714 = !DILocation(line: 4082, column: 1, scope: !11692)
!11715 = distinct !DISubprogram(name: "sra_ipa_modify_expr", scope: !3, file: !3, line: 3819, type: !3915, scopeLine: 3821, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11716 = !DILocalVariable(name: "expr", arg: 1, scope: !11715, file: !3, line: 3819, type: !2058)
!11717 = !DILocation(line: 3819, column: 28, scope: !11715)
!11718 = !DILocalVariable(name: "gsi", arg: 2, scope: !11715, file: !3, line: 3819, type: !3917)
!11719 = !DILocation(line: 3819, column: 56, scope: !11715)
!11720 = !DILocalVariable(name: "dont_convert", arg: 3, scope: !11715, file: !3, line: 3820, type: !1815)
!11721 = !DILocation(line: 3820, column: 13, scope: !11715)
!11722 = !DILocalVariable(name: "data", arg: 4, scope: !11715, file: !3, line: 3820, type: !1977)
!11723 = !DILocation(line: 3820, column: 33, scope: !11715)
!11724 = !DILocalVariable(name: "adjustments", scope: !11715, file: !3, line: 3822, type: !3665)
!11725 = !DILocation(line: 3822, column: 27, scope: !11715)
!11726 = !DILocalVariable(name: "i", scope: !11715, file: !3, line: 3823, type: !1693)
!11727 = !DILocation(line: 3823, column: 7, scope: !11715)
!11728 = !DILocalVariable(name: "len", scope: !11715, file: !3, line: 3823, type: !1693)
!11729 = !DILocation(line: 3823, column: 10, scope: !11715)
!11730 = !DILocalVariable(name: "adj", scope: !11715, file: !3, line: 3824, type: !10905)
!11731 = !DILocation(line: 3824, column: 31, scope: !11715)
!11732 = !DILocalVariable(name: "cand", scope: !11715, file: !3, line: 3824, type: !10905)
!11733 = !DILocation(line: 3824, column: 37, scope: !11715)
!11734 = !DILocalVariable(name: "offset", scope: !11715, file: !3, line: 3825, type: !1752)
!11735 = !DILocation(line: 3825, column: 17, scope: !11715)
!11736 = !DILocalVariable(name: "size", scope: !11715, file: !3, line: 3825, type: !1752)
!11737 = !DILocation(line: 3825, column: 25, scope: !11715)
!11738 = !DILocalVariable(name: "max_size", scope: !11715, file: !3, line: 3825, type: !1752)
!11739 = !DILocation(line: 3825, column: 31, scope: !11715)
!11740 = !DILocalVariable(name: "base", scope: !11715, file: !3, line: 3826, type: !1696)
!11741 = !DILocation(line: 3826, column: 8, scope: !11715)
!11742 = !DILocalVariable(name: "src", scope: !11715, file: !3, line: 3826, type: !1696)
!11743 = !DILocation(line: 3826, column: 14, scope: !11715)
!11744 = !DILocation(line: 3828, column: 55, scope: !11715)
!11745 = !DILocation(line: 3828, column: 17, scope: !11715)
!11746 = !DILocation(line: 3828, column: 15, scope: !11715)
!11747 = !DILocation(line: 3829, column: 9, scope: !11715)
!11748 = !DILocation(line: 3829, column: 7, scope: !11715)
!11749 = !DILocation(line: 3831, column: 7, scope: !11750)
!11750 = distinct !DILexicalBlock(scope: !11715, file: !3, line: 3831, column: 7)
!11751 = !DILocation(line: 3831, column: 25, scope: !11750)
!11752 = !DILocation(line: 3832, column: 7, scope: !11750)
!11753 = !DILocation(line: 3832, column: 10, scope: !11750)
!11754 = !DILocation(line: 3832, column: 28, scope: !11750)
!11755 = !DILocation(line: 3833, column: 7, scope: !11750)
!11756 = !DILocation(line: 3833, column: 10, scope: !11750)
!11757 = !DILocation(line: 3833, column: 28, scope: !11750)
!11758 = !DILocation(line: 3831, column: 7, scope: !11715)
!11759 = !DILocation(line: 3835, column: 15, scope: !11760)
!11760 = distinct !DILexicalBlock(scope: !11750, file: !3, line: 3834, column: 5)
!11761 = !DILocation(line: 3835, column: 12, scope: !11760)
!11762 = !DILocation(line: 3836, column: 20, scope: !11760)
!11763 = !DILocation(line: 3837, column: 5, scope: !11760)
!11764 = !DILocation(line: 3839, column: 36, scope: !11715)
!11765 = !DILocation(line: 3839, column: 35, scope: !11715)
!11766 = !DILocation(line: 3839, column: 10, scope: !11715)
!11767 = !DILocation(line: 3839, column: 8, scope: !11715)
!11768 = !DILocation(line: 3840, column: 8, scope: !11769)
!11769 = distinct !DILexicalBlock(scope: !11715, file: !3, line: 3840, column: 7)
!11770 = !DILocation(line: 3840, column: 13, scope: !11769)
!11771 = !DILocation(line: 3840, column: 16, scope: !11769)
!11772 = !DILocation(line: 3840, column: 21, scope: !11769)
!11773 = !DILocation(line: 3840, column: 27, scope: !11769)
!11774 = !DILocation(line: 3840, column: 30, scope: !11769)
!11775 = !DILocation(line: 3840, column: 39, scope: !11769)
!11776 = !DILocation(line: 3840, column: 7, scope: !11715)
!11777 = !DILocation(line: 3841, column: 5, scope: !11769)
!11778 = !DILocation(line: 3843, column: 7, scope: !11779)
!11779 = distinct !DILexicalBlock(scope: !11715, file: !3, line: 3843, column: 7)
!11780 = !DILocation(line: 3843, column: 7, scope: !11715)
!11781 = !DILocation(line: 3844, column: 12, scope: !11779)
!11782 = !DILocation(line: 3844, column: 10, scope: !11779)
!11783 = !DILocation(line: 3844, column: 5, scope: !11779)
!11784 = !DILocation(line: 3846, column: 30, scope: !11715)
!11785 = !DILocation(line: 3846, column: 10, scope: !11715)
!11786 = !DILocation(line: 3846, column: 8, scope: !11715)
!11787 = !DILocation(line: 3847, column: 8, scope: !11788)
!11788 = distinct !DILexicalBlock(scope: !11715, file: !3, line: 3847, column: 7)
!11789 = !DILocation(line: 3847, column: 13, scope: !11788)
!11790 = !DILocation(line: 3847, column: 16, scope: !11788)
!11791 = !DILocation(line: 3847, column: 33, scope: !11788)
!11792 = !DILocation(line: 3847, column: 7, scope: !11715)
!11793 = !DILocation(line: 3848, column: 5, scope: !11788)
!11794 = !DILocation(line: 3850, column: 10, scope: !11795)
!11795 = distinct !DILexicalBlock(scope: !11715, file: !3, line: 3850, column: 3)
!11796 = !DILocation(line: 3850, column: 8, scope: !11795)
!11797 = !DILocation(line: 3850, column: 15, scope: !11798)
!11798 = distinct !DILexicalBlock(scope: !11795, file: !3, line: 3850, column: 3)
!11799 = !DILocation(line: 3850, column: 19, scope: !11798)
!11800 = !DILocation(line: 3850, column: 17, scope: !11798)
!11801 = !DILocation(line: 3850, column: 3, scope: !11795)
!11802 = !DILocation(line: 3852, column: 13, scope: !11803)
!11803 = distinct !DILexicalBlock(scope: !11798, file: !3, line: 3851, column: 5)
!11804 = !DILocation(line: 3852, column: 11, scope: !11803)
!11805 = !DILocation(line: 3854, column: 11, scope: !11806)
!11806 = distinct !DILexicalBlock(scope: !11803, file: !3, line: 3854, column: 11)
!11807 = !DILocation(line: 3854, column: 16, scope: !11806)
!11808 = !DILocation(line: 3854, column: 24, scope: !11806)
!11809 = !DILocation(line: 3854, column: 21, scope: !11806)
!11810 = !DILocation(line: 3854, column: 29, scope: !11806)
!11811 = !DILocation(line: 3855, column: 5, scope: !11806)
!11812 = !DILocation(line: 3855, column: 10, scope: !11806)
!11813 = !DILocation(line: 3855, column: 20, scope: !11806)
!11814 = !DILocation(line: 3855, column: 17, scope: !11806)
!11815 = !DILocation(line: 3855, column: 27, scope: !11806)
!11816 = !DILocation(line: 3855, column: 30, scope: !11806)
!11817 = !DILocation(line: 3855, column: 35, scope: !11806)
!11818 = !DILocation(line: 3854, column: 11, scope: !11803)
!11819 = !DILocation(line: 3857, column: 11, scope: !11820)
!11820 = distinct !DILexicalBlock(scope: !11806, file: !3, line: 3856, column: 2)
!11821 = !DILocation(line: 3857, column: 9, scope: !11820)
!11822 = !DILocation(line: 3858, column: 4, scope: !11820)
!11823 = !DILocation(line: 3860, column: 5, scope: !11803)
!11824 = !DILocation(line: 3850, column: 25, scope: !11798)
!11825 = !DILocation(line: 3850, column: 3, scope: !11798)
!11826 = distinct !{!11826, !11801, !11827}
!11827 = !DILocation(line: 3860, column: 5, scope: !11795)
!11828 = !DILocation(line: 3861, column: 8, scope: !11829)
!11829 = distinct !DILexicalBlock(scope: !11715, file: !3, line: 3861, column: 7)
!11830 = !DILocation(line: 3861, column: 13, scope: !11829)
!11831 = !DILocation(line: 3861, column: 16, scope: !11829)
!11832 = !DILocation(line: 3861, column: 22, scope: !11829)
!11833 = !DILocation(line: 3861, column: 33, scope: !11829)
!11834 = !DILocation(line: 3861, column: 36, scope: !11829)
!11835 = !DILocation(line: 3861, column: 42, scope: !11829)
!11836 = !DILocation(line: 3861, column: 7, scope: !11715)
!11837 = !DILocation(line: 3862, column: 5, scope: !11829)
!11838 = !DILocation(line: 3864, column: 7, scope: !11839)
!11839 = distinct !DILexicalBlock(scope: !11715, file: !3, line: 3864, column: 7)
!11840 = !DILocation(line: 3864, column: 13, scope: !11839)
!11841 = !DILocation(line: 3864, column: 7, scope: !11715)
!11842 = !DILocalVariable(name: "folded", scope: !11843, file: !3, line: 3866, type: !1696)
!11843 = distinct !DILexicalBlock(scope: !11839, file: !3, line: 3865, column: 5)
!11844 = !DILocation(line: 3866, column: 12, scope: !11843)
!11845 = !DILocation(line: 3867, column: 13, scope: !11843)
!11846 = !DILocation(line: 3867, column: 11, scope: !11843)
!11847 = !DILocation(line: 3869, column: 42, scope: !11843)
!11848 = !DILocation(line: 3869, column: 16, scope: !11843)
!11849 = !DILocation(line: 3869, column: 14, scope: !11843)
!11850 = !DILocation(line: 3870, column: 11, scope: !11851)
!11851 = distinct !DILexicalBlock(scope: !11843, file: !3, line: 3870, column: 11)
!11852 = !DILocation(line: 3870, column: 11, scope: !11843)
!11853 = !DILocation(line: 3871, column: 15, scope: !11851)
!11854 = !DILocation(line: 3871, column: 13, scope: !11851)
!11855 = !DILocation(line: 3871, column: 9, scope: !11851)
!11856 = !DILocation(line: 3872, column: 5, scope: !11843)
!11857 = !DILocation(line: 3874, column: 11, scope: !11839)
!11858 = !DILocation(line: 3874, column: 17, scope: !11839)
!11859 = !DILocation(line: 3874, column: 9, scope: !11839)
!11860 = !DILocation(line: 3876, column: 7, scope: !11861)
!11861 = distinct !DILexicalBlock(scope: !11715, file: !3, line: 3876, column: 7)
!11862 = !DILocation(line: 3876, column: 17, scope: !11861)
!11863 = !DILocation(line: 3876, column: 21, scope: !11861)
!11864 = !DILocation(line: 3876, column: 32, scope: !11861)
!11865 = !DILocation(line: 3876, column: 7, scope: !11715)
!11866 = !DILocation(line: 3878, column: 16, scope: !11867)
!11867 = distinct !DILexicalBlock(scope: !11861, file: !3, line: 3877, column: 5)
!11868 = !DILocation(line: 3878, column: 7, scope: !11867)
!11869 = !DILocation(line: 3879, column: 27, scope: !11867)
!11870 = !DILocation(line: 3879, column: 39, scope: !11867)
!11871 = !DILocation(line: 3879, column: 38, scope: !11867)
!11872 = !DILocation(line: 3879, column: 7, scope: !11867)
!11873 = !DILocation(line: 3880, column: 16, scope: !11867)
!11874 = !DILocation(line: 3880, column: 7, scope: !11867)
!11875 = !DILocation(line: 3881, column: 27, scope: !11867)
!11876 = !DILocation(line: 3881, column: 38, scope: !11867)
!11877 = !DILocation(line: 3881, column: 7, scope: !11867)
!11878 = !DILocation(line: 3882, column: 16, scope: !11867)
!11879 = !DILocation(line: 3882, column: 7, scope: !11867)
!11880 = !DILocation(line: 3883, column: 5, scope: !11867)
!11881 = !DILocation(line: 3885, column: 8, scope: !11882)
!11882 = distinct !DILexicalBlock(scope: !11715, file: !3, line: 3885, column: 7)
!11883 = !DILocation(line: 3886, column: 7, scope: !11882)
!11884 = !DILocation(line: 3886, column: 38, scope: !11882)
!11885 = !DILocation(line: 3886, column: 57, scope: !11882)
!11886 = !DILocation(line: 3886, column: 63, scope: !11882)
!11887 = !DILocation(line: 3886, column: 11, scope: !11882)
!11888 = !DILocation(line: 3885, column: 7, scope: !11715)
!11889 = !DILocalVariable(name: "vce", scope: !11890, file: !3, line: 3888, type: !1696)
!11890 = distinct !DILexicalBlock(scope: !11882, file: !3, line: 3887, column: 5)
!11891 = !DILocation(line: 3888, column: 12, scope: !11890)
!11892 = !DILocation(line: 3888, column: 18, scope: !11890)
!11893 = !DILocation(line: 3889, column: 15, scope: !11890)
!11894 = !DILocation(line: 3889, column: 8, scope: !11890)
!11895 = !DILocation(line: 3889, column: 13, scope: !11890)
!11896 = !DILocation(line: 3890, column: 5, scope: !11890)
!11897 = !DILocation(line: 3892, column: 13, scope: !11882)
!11898 = !DILocation(line: 3892, column: 6, scope: !11882)
!11899 = !DILocation(line: 3892, column: 11, scope: !11882)
!11900 = !DILocation(line: 3893, column: 3, scope: !11715)
!11901 = !DILocation(line: 3894, column: 1, scope: !11715)
!11902 = distinct !DISubprogram(name: "sra_ipa_modify_assign", scope: !3, file: !3, line: 3900, type: !3925, scopeLine: 3901, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!11903 = !DILocalVariable(name: "stmt_ptr", arg: 1, scope: !11902, file: !3, line: 3900, type: !3551)
!11904 = !DILocation(line: 3900, column: 32, scope: !11902)
!11905 = !DILocalVariable(name: "gsi", arg: 2, scope: !11902, file: !3, line: 3900, type: !3917)
!11906 = !DILocation(line: 3900, column: 64, scope: !11902)
!11907 = !DILocalVariable(name: "data", arg: 3, scope: !11902, file: !3, line: 3900, type: !1977)
!11908 = !DILocation(line: 3900, column: 75, scope: !11902)
!11909 = !DILocalVariable(name: "stmt", scope: !11902, file: !3, line: 3902, type: !2024)
!11910 = !DILocation(line: 3902, column: 10, scope: !11902)
!11911 = !DILocation(line: 3902, column: 18, scope: !11902)
!11912 = !DILocation(line: 3902, column: 17, scope: !11902)
!11913 = !DILocalVariable(name: "lhs_p", scope: !11902, file: !3, line: 3903, type: !2058)
!11914 = !DILocation(line: 3903, column: 9, scope: !11902)
!11915 = !DILocalVariable(name: "rhs_p", scope: !11902, file: !3, line: 3903, type: !2058)
!11916 = !DILocation(line: 3903, column: 17, scope: !11902)
!11917 = !DILocalVariable(name: "any", scope: !11902, file: !3, line: 3904, type: !1815)
!11918 = !DILocation(line: 3904, column: 8, scope: !11902)
!11919 = !DILocation(line: 3906, column: 32, scope: !11920)
!11920 = distinct !DILexicalBlock(scope: !11902, file: !3, line: 3906, column: 7)
!11921 = !DILocation(line: 3906, column: 8, scope: !11920)
!11922 = !DILocation(line: 3906, column: 7, scope: !11902)
!11923 = !DILocation(line: 3907, column: 5, scope: !11920)
!11924 = !DILocation(line: 3909, column: 35, scope: !11902)
!11925 = !DILocation(line: 3909, column: 11, scope: !11902)
!11926 = !DILocation(line: 3909, column: 9, scope: !11902)
!11927 = !DILocation(line: 3910, column: 34, scope: !11902)
!11928 = !DILocation(line: 3910, column: 11, scope: !11902)
!11929 = !DILocation(line: 3910, column: 9, scope: !11902)
!11930 = !DILocation(line: 3912, column: 30, scope: !11902)
!11931 = !DILocation(line: 3912, column: 37, scope: !11902)
!11932 = !DILocation(line: 3912, column: 48, scope: !11902)
!11933 = !DILocation(line: 3912, column: 9, scope: !11902)
!11934 = !DILocation(line: 3912, column: 7, scope: !11902)
!11935 = !DILocation(line: 3913, column: 31, scope: !11902)
!11936 = !DILocation(line: 3913, column: 38, scope: !11902)
!11937 = !DILocation(line: 3913, column: 49, scope: !11902)
!11938 = !DILocation(line: 3913, column: 10, scope: !11902)
!11939 = !DILocation(line: 3913, column: 7, scope: !11902)
!11940 = !DILocation(line: 3914, column: 7, scope: !11941)
!11941 = distinct !DILexicalBlock(scope: !11902, file: !3, line: 3914, column: 7)
!11942 = !DILocation(line: 3914, column: 7, scope: !11902)
!11943 = !DILocalVariable(name: "new_rhs", scope: !11944, file: !3, line: 3916, type: !1696)
!11944 = distinct !DILexicalBlock(scope: !11941, file: !3, line: 3915, column: 5)
!11945 = !DILocation(line: 3916, column: 12, scope: !11944)
!11946 = !DILocation(line: 3918, column: 39, scope: !11947)
!11947 = distinct !DILexicalBlock(scope: !11944, file: !3, line: 3918, column: 11)
!11948 = !DILocation(line: 3918, column: 59, scope: !11947)
!11949 = !DILocation(line: 3918, column: 12, scope: !11947)
!11950 = !DILocation(line: 3918, column: 11, scope: !11944)
!11951 = !DILocation(line: 3920, column: 8, scope: !11952)
!11952 = distinct !DILexicalBlock(scope: !11953, file: !3, line: 3920, column: 8)
!11953 = distinct !DILexicalBlock(scope: !11947, file: !3, line: 3919, column: 2)
!11954 = !DILocation(line: 3920, column: 27, scope: !11952)
!11955 = !DILocation(line: 3920, column: 8, scope: !11953)
!11956 = !DILocation(line: 3923, column: 32, scope: !11957)
!11957 = distinct !DILexicalBlock(scope: !11958, file: !3, line: 3923, column: 12)
!11958 = distinct !DILexicalBlock(scope: !11952, file: !3, line: 3921, column: 6)
!11959 = !DILocation(line: 3923, column: 12, scope: !11957)
!11960 = !DILocation(line: 3923, column: 12, scope: !11958)
!11961 = !DILocation(line: 3924, column: 12, scope: !11957)
!11962 = !DILocation(line: 3924, column: 4, scope: !11957)
!11963 = !DILocation(line: 3924, column: 10, scope: !11957)
!11964 = !DILocation(line: 3924, column: 3, scope: !11957)
!11965 = !DILocation(line: 3926, column: 31, scope: !11957)
!11966 = !DILocation(line: 3926, column: 12, scope: !11957)
!11967 = !DILocation(line: 3926, column: 4, scope: !11957)
!11968 = !DILocation(line: 3926, column: 10, scope: !11957)
!11969 = !DILocation(line: 3927, column: 6, scope: !11958)
!11970 = !DILocation(line: 3929, column: 16, scope: !11952)
!11971 = !DILocation(line: 3929, column: 14, scope: !11952)
!11972 = !DILocation(line: 3932, column: 2, scope: !11953)
!11973 = !DILocation(line: 3933, column: 16, scope: !11974)
!11974 = distinct !DILexicalBlock(scope: !11947, file: !3, line: 3933, column: 16)
!11975 = !DILocation(line: 3934, column: 9, scope: !11974)
!11976 = !DILocation(line: 3934, column: 32, scope: !11974)
!11977 = !DILocation(line: 3934, column: 12, scope: !11974)
!11978 = !DILocation(line: 3935, column: 9, scope: !11974)
!11979 = !DILocation(line: 3935, column: 29, scope: !11974)
!11980 = !DILocation(line: 3935, column: 28, scope: !11974)
!11981 = !DILocation(line: 3935, column: 13, scope: !11974)
!11982 = !DILocation(line: 3933, column: 16, scope: !11947)
!11983 = !DILocation(line: 3939, column: 13, scope: !11974)
!11984 = !DILocation(line: 3939, column: 12, scope: !11974)
!11985 = !DILocation(line: 3939, column: 10, scope: !11974)
!11986 = !DILocation(line: 3939, column: 2, scope: !11974)
!11987 = !DILocation(line: 3941, column: 11, scope: !11988)
!11988 = distinct !DILexicalBlock(scope: !11944, file: !3, line: 3941, column: 11)
!11989 = !DILocation(line: 3941, column: 11, scope: !11944)
!11990 = !DILocalVariable(name: "tmp", scope: !11991, file: !3, line: 3943, type: !1696)
!11991 = distinct !DILexicalBlock(scope: !11988, file: !3, line: 3942, column: 2)
!11992 = !DILocation(line: 3943, column: 9, scope: !11991)
!11993 = !DILocation(line: 3943, column: 41, scope: !11991)
!11994 = !DILocation(line: 3943, column: 46, scope: !11991)
!11995 = !DILocation(line: 3943, column: 15, scope: !11991)
!11996 = !DILocation(line: 3946, column: 37, scope: !11991)
!11997 = !DILocation(line: 3946, column: 42, scope: !11991)
!11998 = !DILocation(line: 3946, column: 4, scope: !11991)
!11999 = !DILocation(line: 3947, column: 2, scope: !11991)
!12000 = !DILocation(line: 3949, column: 7, scope: !11944)
!12001 = !DILocation(line: 3952, column: 3, scope: !11902)
!12002 = !DILocation(line: 3953, column: 1, scope: !11902)
!12003 = distinct !DISubprogram(name: "replace_removed_params_ssa_names", scope: !3, file: !3, line: 3759, type: !3928, scopeLine: 3760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!12004 = !DILocalVariable(name: "stmt", arg: 1, scope: !12003, file: !3, line: 3759, type: !2024)
!12005 = !DILocation(line: 3759, column: 42, scope: !12003)
!12006 = !DILocalVariable(name: "data", arg: 2, scope: !12003, file: !3, line: 3759, type: !1977)
!12007 = !DILocation(line: 3759, column: 54, scope: !12003)
!12008 = !DILocalVariable(name: "adjustments", scope: !12003, file: !3, line: 3761, type: !3064)
!12009 = !DILocation(line: 3761, column: 38, scope: !12003)
!12010 = !DILocalVariable(name: "adj", scope: !12003, file: !3, line: 3762, type: !10905)
!12011 = !DILocation(line: 3762, column: 31, scope: !12003)
!12012 = !DILocalVariable(name: "lhs", scope: !12003, file: !3, line: 3763, type: !1696)
!12013 = !DILocation(line: 3763, column: 8, scope: !12003)
!12014 = !DILocalVariable(name: "decl", scope: !12003, file: !3, line: 3763, type: !1696)
!12015 = !DILocation(line: 3763, column: 13, scope: !12003)
!12016 = !DILocalVariable(name: "repl", scope: !12003, file: !3, line: 3763, type: !1696)
!12017 = !DILocation(line: 3763, column: 19, scope: !12003)
!12018 = !DILocalVariable(name: "name", scope: !12003, file: !3, line: 3763, type: !1696)
!12019 = !DILocation(line: 3763, column: 25, scope: !12003)
!12020 = !DILocation(line: 3765, column: 55, scope: !12003)
!12021 = !DILocation(line: 3765, column: 17, scope: !12003)
!12022 = !DILocation(line: 3765, column: 15, scope: !12003)
!12023 = !DILocation(line: 3766, column: 20, scope: !12024)
!12024 = distinct !DILexicalBlock(scope: !12003, file: !3, line: 3766, column: 7)
!12025 = !DILocation(line: 3766, column: 7, scope: !12024)
!12026 = !DILocation(line: 3766, column: 26, scope: !12024)
!12027 = !DILocation(line: 3766, column: 7, scope: !12003)
!12028 = !DILocation(line: 3767, column: 30, scope: !12024)
!12029 = !DILocation(line: 3767, column: 11, scope: !12024)
!12030 = !DILocation(line: 3767, column: 9, scope: !12024)
!12031 = !DILocation(line: 3767, column: 5, scope: !12024)
!12032 = !DILocation(line: 3768, column: 30, scope: !12033)
!12033 = distinct !DILexicalBlock(scope: !12024, file: !3, line: 3768, column: 12)
!12034 = !DILocation(line: 3768, column: 12, scope: !12033)
!12035 = !DILocation(line: 3768, column: 12, scope: !12024)
!12036 = !DILocation(line: 3769, column: 30, scope: !12033)
!12037 = !DILocation(line: 3769, column: 11, scope: !12033)
!12038 = !DILocation(line: 3769, column: 9, scope: !12033)
!12039 = !DILocation(line: 3769, column: 5, scope: !12033)
!12040 = !DILocation(line: 3770, column: 28, scope: !12041)
!12041 = distinct !DILexicalBlock(scope: !12033, file: !3, line: 3770, column: 12)
!12042 = !DILocation(line: 3770, column: 12, scope: !12041)
!12043 = !DILocation(line: 3770, column: 12, scope: !12033)
!12044 = !DILocation(line: 3771, column: 28, scope: !12041)
!12045 = !DILocation(line: 3771, column: 11, scope: !12041)
!12046 = !DILocation(line: 3771, column: 9, scope: !12041)
!12047 = !DILocation(line: 3771, column: 5, scope: !12041)
!12048 = !DILocation(line: 3773, column: 5, scope: !12041)
!12049 = !DILocation(line: 3775, column: 7, scope: !12050)
!12050 = distinct !DILexicalBlock(scope: !12003, file: !3, line: 3775, column: 7)
!12051 = !DILocation(line: 3775, column: 23, scope: !12050)
!12052 = !DILocation(line: 3775, column: 7, scope: !12003)
!12053 = !DILocation(line: 3776, column: 5, scope: !12050)
!12054 = !DILocation(line: 3777, column: 10, scope: !12003)
!12055 = !DILocation(line: 3777, column: 8, scope: !12003)
!12056 = !DILocation(line: 3778, column: 7, scope: !12057)
!12057 = distinct !DILexicalBlock(scope: !12003, file: !3, line: 3778, column: 7)
!12058 = !DILocation(line: 3778, column: 24, scope: !12057)
!12059 = !DILocation(line: 3778, column: 7, scope: !12003)
!12060 = !DILocation(line: 3779, column: 5, scope: !12057)
!12061 = !DILocation(line: 3781, column: 34, scope: !12003)
!12062 = !DILocation(line: 3781, column: 47, scope: !12003)
!12063 = !DILocation(line: 3781, column: 9, scope: !12003)
!12064 = !DILocation(line: 3781, column: 7, scope: !12003)
!12065 = !DILocation(line: 3782, column: 8, scope: !12066)
!12066 = distinct !DILexicalBlock(scope: !12003, file: !3, line: 3782, column: 7)
!12067 = !DILocation(line: 3782, column: 7, scope: !12003)
!12068 = !DILocation(line: 3783, column: 5, scope: !12066)
!12069 = !DILocation(line: 3785, column: 41, scope: !12003)
!12070 = !DILocation(line: 3785, column: 10, scope: !12003)
!12071 = !DILocation(line: 3785, column: 8, scope: !12003)
!12072 = !DILocation(line: 3786, column: 25, scope: !12003)
!12073 = !DILocation(line: 3786, column: 31, scope: !12003)
!12074 = !DILocation(line: 3786, column: 10, scope: !12003)
!12075 = !DILocation(line: 3786, column: 8, scope: !12003)
!12076 = !DILocation(line: 3788, column: 7, scope: !12077)
!12077 = distinct !DILexicalBlock(scope: !12003, file: !3, line: 3788, column: 7)
!12078 = !DILocation(line: 3788, column: 7, scope: !12003)
!12079 = !DILocation(line: 3790, column: 16, scope: !12080)
!12080 = distinct !DILexicalBlock(scope: !12077, file: !3, line: 3789, column: 5)
!12081 = !DILocation(line: 3790, column: 7, scope: !12080)
!12082 = !DILocation(line: 3791, column: 27, scope: !12080)
!12083 = !DILocation(line: 3791, column: 38, scope: !12080)
!12084 = !DILocation(line: 3791, column: 7, scope: !12080)
!12085 = !DILocation(line: 3792, column: 16, scope: !12080)
!12086 = !DILocation(line: 3792, column: 7, scope: !12080)
!12087 = !DILocation(line: 3793, column: 27, scope: !12080)
!12088 = !DILocation(line: 3793, column: 38, scope: !12080)
!12089 = !DILocation(line: 3793, column: 7, scope: !12080)
!12090 = !DILocation(line: 3794, column: 16, scope: !12080)
!12091 = !DILocation(line: 3794, column: 7, scope: !12080)
!12092 = !DILocation(line: 3795, column: 5, scope: !12080)
!12093 = !DILocation(line: 3797, column: 25, scope: !12094)
!12094 = distinct !DILexicalBlock(scope: !12003, file: !3, line: 3797, column: 7)
!12095 = !DILocation(line: 3797, column: 7, scope: !12094)
!12096 = !DILocation(line: 3797, column: 7, scope: !12003)
!12097 = !DILocation(line: 3798, column: 28, scope: !12094)
!12098 = !DILocation(line: 3798, column: 34, scope: !12094)
!12099 = !DILocation(line: 3798, column: 5, scope: !12094)
!12100 = !DILocation(line: 3799, column: 28, scope: !12101)
!12101 = distinct !DILexicalBlock(scope: !12094, file: !3, line: 3799, column: 12)
!12102 = !DILocation(line: 3799, column: 12, scope: !12101)
!12103 = !DILocation(line: 3799, column: 12, scope: !12094)
!12104 = !DILocation(line: 3800, column: 26, scope: !12101)
!12105 = !DILocation(line: 3800, column: 32, scope: !12101)
!12106 = !DILocation(line: 3800, column: 5, scope: !12101)
!12107 = !DILocation(line: 3802, column: 28, scope: !12101)
!12108 = !DILocation(line: 3802, column: 34, scope: !12101)
!12109 = !DILocation(line: 3802, column: 5, scope: !12101)
!12110 = !DILocation(line: 3804, column: 20, scope: !12003)
!12111 = !DILocation(line: 3804, column: 25, scope: !12003)
!12112 = !DILocation(line: 3804, column: 3, scope: !12003)
!12113 = !DILocation(line: 3805, column: 3, scope: !12003)
!12114 = !DILocation(line: 3806, column: 1, scope: !12003)
!12115 = distinct !DISubprogram(name: "sra_ipa_reset_debug_stmts", scope: !3, file: !3, line: 3959, type: !12116, scopeLine: 3960, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!12116 = !DISubroutineType(types: !12117)
!12117 = !{null, !3665}
!12118 = !DILocalVariable(name: "adjustments", arg: 1, scope: !12115, file: !3, line: 3959, type: !3665)
!12119 = !DILocation(line: 3959, column: 52, scope: !12115)
!12120 = !DILocalVariable(name: "i", scope: !12115, file: !3, line: 3961, type: !1693)
!12121 = !DILocation(line: 3961, column: 7, scope: !12115)
!12122 = !DILocalVariable(name: "len", scope: !12115, file: !3, line: 3961, type: !1693)
!12123 = !DILocation(line: 3961, column: 10, scope: !12115)
!12124 = !DILocation(line: 3963, column: 9, scope: !12115)
!12125 = !DILocation(line: 3963, column: 7, scope: !12115)
!12126 = !DILocation(line: 3964, column: 10, scope: !12127)
!12127 = distinct !DILexicalBlock(scope: !12115, file: !3, line: 3964, column: 3)
!12128 = !DILocation(line: 3964, column: 8, scope: !12127)
!12129 = !DILocation(line: 3964, column: 15, scope: !12130)
!12130 = distinct !DILexicalBlock(scope: !12127, file: !3, line: 3964, column: 3)
!12131 = !DILocation(line: 3964, column: 19, scope: !12130)
!12132 = !DILocation(line: 3964, column: 17, scope: !12130)
!12133 = !DILocation(line: 3964, column: 3, scope: !12127)
!12134 = !DILocalVariable(name: "adj", scope: !12135, file: !3, line: 3966, type: !10905)
!12135 = distinct !DILexicalBlock(scope: !12130, file: !3, line: 3965, column: 5)
!12136 = !DILocation(line: 3966, column: 35, scope: !12135)
!12137 = !DILocalVariable(name: "ui", scope: !12135, file: !3, line: 3967, type: !9470)
!12138 = !DILocation(line: 3967, column: 24, scope: !12135)
!12139 = !DILocalVariable(name: "stmt", scope: !12135, file: !3, line: 3968, type: !2024)
!12140 = !DILocation(line: 3968, column: 14, scope: !12135)
!12141 = !DILocalVariable(name: "name", scope: !12135, file: !3, line: 3969, type: !1696)
!12142 = !DILocation(line: 3969, column: 12, scope: !12135)
!12143 = !DILocation(line: 3971, column: 13, scope: !12135)
!12144 = !DILocation(line: 3971, column: 11, scope: !12135)
!12145 = !DILocation(line: 3972, column: 11, scope: !12146)
!12146 = distinct !DILexicalBlock(scope: !12135, file: !3, line: 3972, column: 11)
!12147 = !DILocation(line: 3972, column: 16, scope: !12146)
!12148 = !DILocation(line: 3972, column: 27, scope: !12146)
!12149 = !DILocation(line: 3972, column: 46, scope: !12146)
!12150 = !DILocation(line: 3972, column: 51, scope: !12146)
!12151 = !DILocation(line: 3972, column: 31, scope: !12146)
!12152 = !DILocation(line: 3972, column: 11, scope: !12135)
!12153 = !DILocation(line: 3973, column: 2, scope: !12146)
!12154 = !DILocation(line: 3974, column: 34, scope: !12135)
!12155 = !DILocation(line: 3974, column: 40, scope: !12135)
!12156 = !DILocation(line: 3974, column: 45, scope: !12135)
!12157 = !DILocation(line: 3974, column: 14, scope: !12135)
!12158 = !DILocation(line: 3974, column: 12, scope: !12135)
!12159 = !DILocation(line: 3975, column: 12, scope: !12160)
!12160 = distinct !DILexicalBlock(scope: !12135, file: !3, line: 3975, column: 11)
!12161 = !DILocation(line: 3975, column: 11, scope: !12135)
!12162 = !DILocation(line: 3976, column: 2, scope: !12160)
!12163 = !DILocation(line: 3977, column: 7, scope: !12164)
!12164 = distinct !DILexicalBlock(scope: !12135, file: !3, line: 3977, column: 7)
!12165 = !DILocation(line: 3977, column: 7, scope: !12166)
!12166 = distinct !DILexicalBlock(scope: !12164, file: !3, line: 3977, column: 7)
!12167 = !DILocation(line: 3980, column: 4, scope: !12168)
!12168 = distinct !DILexicalBlock(scope: !12166, file: !3, line: 3978, column: 2)
!12169 = !DILocation(line: 3981, column: 35, scope: !12168)
!12170 = !DILocation(line: 3981, column: 4, scope: !12168)
!12171 = !DILocation(line: 3982, column: 17, scope: !12168)
!12172 = !DILocation(line: 3982, column: 4, scope: !12168)
!12173 = !DILocation(line: 3983, column: 2, scope: !12168)
!12174 = distinct !{!12174, !12163, !12175}
!12175 = !DILocation(line: 3983, column: 2, scope: !12164)
!12176 = !DILocation(line: 3984, column: 5, scope: !12135)
!12177 = !DILocation(line: 3964, column: 25, scope: !12130)
!12178 = !DILocation(line: 3964, column: 3, scope: !12130)
!12179 = distinct !{!12179, !12133, !12180}
!12180 = !DILocation(line: 3984, column: 5, scope: !12127)
!12181 = !DILocation(line: 3985, column: 1, scope: !12115)
!12182 = distinct !DISubprogram(name: "convert_callers", scope: !3, file: !3, line: 4005, type: !9399, scopeLine: 4006, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!12183 = !DILocalVariable(name: "node", arg: 1, scope: !12182, file: !3, line: 4005, type: !3455)
!12184 = !DILocation(line: 4005, column: 38, scope: !12182)
!12185 = !DILocalVariable(name: "adjustments", arg: 2, scope: !12182, file: !3, line: 4005, type: !3665)
!12186 = !DILocation(line: 4005, column: 68, scope: !12182)
!12187 = !DILocalVariable(name: "old_cur_fndecl", scope: !12182, file: !3, line: 4007, type: !1696)
!12188 = !DILocation(line: 4007, column: 8, scope: !12182)
!12189 = !DILocation(line: 4007, column: 25, scope: !12182)
!12190 = !DILocalVariable(name: "cs", scope: !12182, file: !3, line: 4008, type: !3460)
!12191 = !DILocation(line: 4008, column: 23, scope: !12182)
!12192 = !DILocalVariable(name: "this_block", scope: !12182, file: !3, line: 4009, type: !2423)
!12193 = !DILocation(line: 4009, column: 15, scope: !12182)
!12194 = !DILocalVariable(name: "recomputed_callers", scope: !12182, file: !3, line: 4010, type: !2541)
!12195 = !DILocation(line: 4010, column: 10, scope: !12182)
!12196 = !DILocation(line: 4010, column: 31, scope: !12182)
!12197 = !DILocation(line: 4012, column: 13, scope: !12198)
!12198 = distinct !DILexicalBlock(scope: !12182, file: !3, line: 4012, column: 3)
!12199 = !DILocation(line: 4012, column: 19, scope: !12198)
!12200 = !DILocation(line: 4012, column: 11, scope: !12198)
!12201 = !DILocation(line: 4012, column: 8, scope: !12198)
!12202 = !DILocation(line: 4012, column: 28, scope: !12203)
!12203 = distinct !DILexicalBlock(scope: !12198, file: !3, line: 4012, column: 3)
!12204 = !DILocation(line: 4012, column: 3, scope: !12198)
!12205 = !DILocation(line: 4014, column: 31, scope: !12206)
!12206 = distinct !DILexicalBlock(scope: !12203, file: !3, line: 4013, column: 5)
!12207 = !DILocation(line: 4014, column: 35, scope: !12206)
!12208 = !DILocation(line: 4014, column: 43, scope: !12206)
!12209 = !DILocation(line: 4014, column: 29, scope: !12206)
!12210 = !DILocation(line: 4015, column: 18, scope: !12206)
!12211 = !DILocation(line: 4015, column: 7, scope: !12206)
!12212 = !DILocation(line: 4017, column: 11, scope: !12213)
!12213 = distinct !DILexicalBlock(scope: !12206, file: !3, line: 4017, column: 11)
!12214 = !DILocation(line: 4017, column: 11, scope: !12206)
!12215 = !DILocation(line: 4018, column: 11, scope: !12213)
!12216 = !DILocation(line: 4019, column: 4, scope: !12213)
!12217 = !DILocation(line: 4019, column: 8, scope: !12213)
!12218 = !DILocation(line: 4019, column: 16, scope: !12213)
!12219 = !DILocation(line: 4019, column: 21, scope: !12213)
!12220 = !DILocation(line: 4019, column: 25, scope: !12213)
!12221 = !DILocation(line: 4019, column: 33, scope: !12213)
!12222 = !DILocation(line: 4020, column: 22, scope: !12213)
!12223 = !DILocation(line: 4020, column: 26, scope: !12213)
!12224 = !DILocation(line: 4020, column: 4, scope: !12213)
!12225 = !DILocation(line: 4021, column: 22, scope: !12213)
!12226 = !DILocation(line: 4021, column: 26, scope: !12213)
!12227 = !DILocation(line: 4021, column: 4, scope: !12213)
!12228 = !DILocation(line: 4018, column: 2, scope: !12213)
!12229 = !DILocation(line: 4023, column: 34, scope: !12206)
!12230 = !DILocation(line: 4023, column: 38, scope: !12206)
!12231 = !DILocation(line: 4023, column: 42, scope: !12206)
!12232 = !DILocation(line: 4023, column: 53, scope: !12206)
!12233 = !DILocation(line: 4023, column: 7, scope: !12206)
!12234 = !DILocation(line: 4025, column: 7, scope: !12206)
!12235 = !DILocation(line: 4026, column: 5, scope: !12206)
!12236 = !DILocation(line: 4012, column: 37, scope: !12203)
!12237 = !DILocation(line: 4012, column: 41, scope: !12203)
!12238 = !DILocation(line: 4012, column: 35, scope: !12203)
!12239 = !DILocation(line: 4012, column: 3, scope: !12203)
!12240 = distinct !{!12240, !12204, !12241}
!12241 = !DILocation(line: 4026, column: 5, scope: !12198)
!12242 = !DILocation(line: 4028, column: 13, scope: !12243)
!12243 = distinct !DILexicalBlock(scope: !12182, file: !3, line: 4028, column: 3)
!12244 = !DILocation(line: 4028, column: 19, scope: !12243)
!12245 = !DILocation(line: 4028, column: 11, scope: !12243)
!12246 = !DILocation(line: 4028, column: 8, scope: !12243)
!12247 = !DILocation(line: 4028, column: 28, scope: !12248)
!12248 = distinct !DILexicalBlock(scope: !12243, file: !3, line: 4028, column: 3)
!12249 = !DILocation(line: 4028, column: 3, scope: !12243)
!12250 = !DILocation(line: 4029, column: 24, scope: !12251)
!12251 = distinct !DILexicalBlock(scope: !12248, file: !3, line: 4029, column: 9)
!12252 = !DILocation(line: 4029, column: 44, scope: !12251)
!12253 = !DILocation(line: 4029, column: 48, scope: !12251)
!12254 = !DILocation(line: 4029, column: 56, scope: !12251)
!12255 = !DILocation(line: 4029, column: 10, scope: !12251)
!12256 = !DILocation(line: 4029, column: 9, scope: !12248)
!12257 = !DILocation(line: 4031, column: 29, scope: !12258)
!12258 = distinct !DILexicalBlock(scope: !12251, file: !3, line: 4030, column: 7)
!12259 = !DILocation(line: 4031, column: 33, scope: !12258)
!12260 = !DILocation(line: 4031, column: 2, scope: !12258)
!12261 = !DILocation(line: 4032, column: 18, scope: !12258)
!12262 = !DILocation(line: 4032, column: 38, scope: !12258)
!12263 = !DILocation(line: 4032, column: 42, scope: !12258)
!12264 = !DILocation(line: 4032, column: 50, scope: !12258)
!12265 = !DILocation(line: 4032, column: 2, scope: !12258)
!12266 = !DILocation(line: 4033, column: 7, scope: !12258)
!12267 = !DILocation(line: 4029, column: 59, scope: !12251)
!12268 = !DILocation(line: 4028, column: 37, scope: !12248)
!12269 = !DILocation(line: 4028, column: 41, scope: !12248)
!12270 = !DILocation(line: 4028, column: 35, scope: !12248)
!12271 = !DILocation(line: 4028, column: 3, scope: !12248)
!12272 = distinct !{!12272, !12249, !12273}
!12273 = !DILocation(line: 4033, column: 7, scope: !12243)
!12274 = !DILocation(line: 4034, column: 3, scope: !12182)
!12275 = !DILocation(line: 4036, column: 27, scope: !12182)
!12276 = !DILocation(line: 4036, column: 25, scope: !12182)
!12277 = !DILocation(line: 4038, column: 8, scope: !12278)
!12278 = distinct !DILexicalBlock(scope: !12182, file: !3, line: 4038, column: 7)
!12279 = !DILocation(line: 4038, column: 7, scope: !12182)
!12280 = !DILocation(line: 4039, column: 5, scope: !12278)
!12281 = !DILocation(line: 4041, column: 3, scope: !12282)
!12282 = distinct !DILexicalBlock(scope: !12182, file: !3, line: 4041, column: 3)
!12283 = !DILocation(line: 4041, column: 3, scope: !12284)
!12284 = distinct !DILexicalBlock(scope: !12282, file: !3, line: 4041, column: 3)
!12285 = !DILocalVariable(name: "gsi", scope: !12286, file: !3, line: 4043, type: !3918)
!12286 = distinct !DILexicalBlock(scope: !12284, file: !3, line: 4042, column: 5)
!12287 = !DILocation(line: 4043, column: 28, scope: !12286)
!12288 = !DILocation(line: 4045, column: 32, scope: !12289)
!12289 = distinct !DILexicalBlock(scope: !12286, file: !3, line: 4045, column: 7)
!12290 = !DILocation(line: 4045, column: 18, scope: !12289)
!12291 = !DILocation(line: 4045, column: 12, scope: !12289)
!12292 = !DILocation(line: 4045, column: 46, scope: !12293)
!12293 = distinct !DILexicalBlock(scope: !12289, file: !3, line: 4045, column: 7)
!12294 = !DILocation(line: 4045, column: 45, scope: !12293)
!12295 = !DILocation(line: 4045, column: 7, scope: !12289)
!12296 = !DILocalVariable(name: "stmt", scope: !12297, file: !3, line: 4047, type: !2024)
!12297 = distinct !DILexicalBlock(scope: !12293, file: !3, line: 4046, column: 9)
!12298 = !DILocation(line: 4047, column: 11, scope: !12297)
!12299 = !DILocation(line: 4047, column: 18, scope: !12297)
!12300 = !DILocalVariable(name: "call_fndecl", scope: !12297, file: !3, line: 4048, type: !1696)
!12301 = !DILocation(line: 4048, column: 9, scope: !12297)
!12302 = !DILocation(line: 4049, column: 21, scope: !12303)
!12303 = distinct !DILexicalBlock(scope: !12297, file: !3, line: 4049, column: 8)
!12304 = !DILocation(line: 4049, column: 8, scope: !12303)
!12305 = !DILocation(line: 4049, column: 27, scope: !12303)
!12306 = !DILocation(line: 4049, column: 8, scope: !12297)
!12307 = !DILocation(line: 4050, column: 6, scope: !12303)
!12308 = !DILocation(line: 4051, column: 38, scope: !12297)
!12309 = !DILocation(line: 4051, column: 18, scope: !12297)
!12310 = !DILocation(line: 4051, column: 16, scope: !12297)
!12311 = !DILocation(line: 4052, column: 8, scope: !12312)
!12312 = distinct !DILexicalBlock(scope: !12297, file: !3, line: 4052, column: 8)
!12313 = !DILocation(line: 4052, column: 20, scope: !12312)
!12314 = !DILocation(line: 4052, column: 40, scope: !12312)
!12315 = !DILocation(line: 4052, column: 23, scope: !12312)
!12316 = !DILocation(line: 4052, column: 56, scope: !12312)
!12317 = !DILocation(line: 4052, column: 53, scope: !12312)
!12318 = !DILocation(line: 4052, column: 8, scope: !12297)
!12319 = !DILocation(line: 4054, column: 12, scope: !12320)
!12320 = distinct !DILexicalBlock(scope: !12321, file: !3, line: 4054, column: 12)
!12321 = distinct !DILexicalBlock(scope: !12312, file: !3, line: 4053, column: 6)
!12322 = !DILocation(line: 4054, column: 12, scope: !12321)
!12323 = !DILocation(line: 4055, column: 12, scope: !12320)
!12324 = !DILocation(line: 4055, column: 3, scope: !12320)
!12325 = !DILocation(line: 4056, column: 41, scope: !12321)
!12326 = !DILocation(line: 4056, column: 47, scope: !12321)
!12327 = !DILocation(line: 4056, column: 8, scope: !12321)
!12328 = !DILocation(line: 4057, column: 6, scope: !12321)
!12329 = !DILocation(line: 4058, column: 2, scope: !12297)
!12330 = !DILocation(line: 4045, column: 63, scope: !12293)
!12331 = !DILocation(line: 4045, column: 7, scope: !12293)
!12332 = distinct !{!12332, !12295, !12333}
!12333 = !DILocation(line: 4058, column: 2, scope: !12289)
!12334 = !DILocation(line: 4059, column: 5, scope: !12286)
!12335 = distinct !{!12335, !12281, !12336}
!12336 = !DILocation(line: 4059, column: 5, scope: !12282)
!12337 = !DILocation(line: 4061, column: 3, scope: !12182)
!12338 = !DILocation(line: 4062, column: 1, scope: !12182)
!12339 = distinct !DISubprogram(name: "VEC_ipa_parm_adjustment_t_base_length", scope: !3066, file: !3066, line: 484, type: !12340, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!12340 = !DISubroutineType(types: !12341)
!12341 = !{!7, !12342}
!12342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12343, size: 64)
!12343 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3070)
!12344 = !DILocalVariable(name: "vec_", arg: 1, scope: !12339, file: !3066, line: 484, type: !12342)
!12345 = !DILocation(line: 484, column: 1, scope: !12339)
!12346 = distinct !DISubprogram(name: "VEC_ipa_parm_adjustment_t_base_index", scope: !3066, file: !3066, line: 484, type: !12347, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!12347 = !DISubroutineType(types: !12348)
!12348 = !{!11625, !11626, !7}
!12349 = !DILocalVariable(name: "vec_", arg: 1, scope: !12346, file: !3066, line: 484, type: !11626)
!12350 = !DILocation(line: 484, column: 1, scope: !12346)
!12351 = !DILocalVariable(name: "ix_", arg: 2, scope: !12346, file: !3066, line: 484, type: !7)
!12352 = !DILocation(line: 0, scope: !12346)
!12353 = distinct !DISubprogram(name: "get_adjustment_for_base", scope: !3, file: !3, line: 3735, type: !12354, scopeLine: 3736, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!12354 = !DISubroutineType(types: !12355)
!12355 = !{!10905, !3665, !1696}
!12356 = !DILocalVariable(name: "adjustments", arg: 1, scope: !12353, file: !3, line: 3735, type: !3665)
!12357 = !DILocation(line: 3735, column: 50, scope: !12353)
!12358 = !DILocalVariable(name: "base", arg: 2, scope: !12353, file: !3, line: 3735, type: !1696)
!12359 = !DILocation(line: 3735, column: 68, scope: !12353)
!12360 = !DILocalVariable(name: "i", scope: !12353, file: !3, line: 3737, type: !1693)
!12361 = !DILocation(line: 3737, column: 7, scope: !12353)
!12362 = !DILocalVariable(name: "len", scope: !12353, file: !3, line: 3737, type: !1693)
!12363 = !DILocation(line: 3737, column: 10, scope: !12353)
!12364 = !DILocation(line: 3739, column: 9, scope: !12353)
!12365 = !DILocation(line: 3739, column: 7, scope: !12353)
!12366 = !DILocation(line: 3740, column: 10, scope: !12367)
!12367 = distinct !DILexicalBlock(scope: !12353, file: !3, line: 3740, column: 3)
!12368 = !DILocation(line: 3740, column: 8, scope: !12367)
!12369 = !DILocation(line: 3740, column: 15, scope: !12370)
!12370 = distinct !DILexicalBlock(scope: !12367, file: !3, line: 3740, column: 3)
!12371 = !DILocation(line: 3740, column: 19, scope: !12370)
!12372 = !DILocation(line: 3740, column: 17, scope: !12370)
!12373 = !DILocation(line: 3740, column: 3, scope: !12367)
!12374 = !DILocalVariable(name: "adj", scope: !12375, file: !3, line: 3742, type: !10905)
!12375 = distinct !DILexicalBlock(scope: !12370, file: !3, line: 3741, column: 5)
!12376 = !DILocation(line: 3742, column: 35, scope: !12375)
!12377 = !DILocation(line: 3744, column: 13, scope: !12375)
!12378 = !DILocation(line: 3744, column: 11, scope: !12375)
!12379 = !DILocation(line: 3745, column: 12, scope: !12380)
!12380 = distinct !DILexicalBlock(scope: !12375, file: !3, line: 3745, column: 11)
!12381 = !DILocation(line: 3745, column: 17, scope: !12380)
!12382 = !DILocation(line: 3745, column: 28, scope: !12380)
!12383 = !DILocation(line: 3745, column: 31, scope: !12380)
!12384 = !DILocation(line: 3745, column: 36, scope: !12380)
!12385 = !DILocation(line: 3745, column: 44, scope: !12380)
!12386 = !DILocation(line: 3745, column: 41, scope: !12380)
!12387 = !DILocation(line: 3745, column: 11, scope: !12375)
!12388 = !DILocation(line: 3746, column: 9, scope: !12380)
!12389 = !DILocation(line: 3746, column: 2, scope: !12380)
!12390 = !DILocation(line: 3747, column: 5, scope: !12375)
!12391 = !DILocation(line: 3740, column: 25, scope: !12370)
!12392 = !DILocation(line: 3740, column: 3, scope: !12370)
!12393 = distinct !{!12393, !12373, !12394}
!12394 = !DILocation(line: 3747, column: 5, scope: !12367)
!12395 = !DILocation(line: 3749, column: 3, scope: !12353)
!12396 = !DILocation(line: 3750, column: 1, scope: !12353)
!12397 = distinct !DISubprogram(name: "get_replaced_param_substitute", scope: !3, file: !3, line: 3707, type: !12398, scopeLine: 3708, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!12398 = !DISubroutineType(types: !12399)
!12399 = !{!1696, !10905}
!12400 = !DILocalVariable(name: "adj", arg: 1, scope: !12397, file: !3, line: 3707, type: !10905)
!12401 = !DILocation(line: 3707, column: 60, scope: !12397)
!12402 = !DILocalVariable(name: "repl", scope: !12397, file: !3, line: 3709, type: !1696)
!12403 = !DILocation(line: 3709, column: 8, scope: !12397)
!12404 = !DILocation(line: 3710, column: 8, scope: !12405)
!12405 = distinct !DILexicalBlock(scope: !12397, file: !3, line: 3710, column: 7)
!12406 = !DILocation(line: 3710, column: 13, scope: !12405)
!12407 = !DILocation(line: 3710, column: 7, scope: !12397)
!12408 = !DILocalVariable(name: "pretty_name", scope: !12409, file: !3, line: 3712, type: !1962)
!12409 = distinct !DILexicalBlock(scope: !12405, file: !3, line: 3711, column: 5)
!12410 = !DILocation(line: 3712, column: 13, scope: !12409)
!12411 = !DILocation(line: 3712, column: 44, scope: !12409)
!12412 = !DILocation(line: 3712, column: 49, scope: !12409)
!12413 = !DILocation(line: 3712, column: 27, scope: !12409)
!12414 = !DILocation(line: 3714, column: 30, scope: !12409)
!12415 = !DILocation(line: 3714, column: 14, scope: !12409)
!12416 = !DILocation(line: 3714, column: 12, scope: !12409)
!12417 = !DILocation(line: 3715, column: 11, scope: !12418)
!12418 = distinct !DILexicalBlock(scope: !12409, file: !3, line: 3715, column: 11)
!12419 = !DILocation(line: 3715, column: 40, scope: !12418)
!12420 = !DILocation(line: 3716, column: 4, scope: !12418)
!12421 = !DILocation(line: 3716, column: 7, scope: !12418)
!12422 = !DILocation(line: 3716, column: 36, scope: !12418)
!12423 = !DILocation(line: 3715, column: 11, scope: !12409)
!12424 = !DILocation(line: 3717, column: 2, scope: !12418)
!12425 = !DILocation(line: 3717, column: 27, scope: !12418)
!12426 = !DILocation(line: 3718, column: 42, scope: !12409)
!12427 = !DILocation(line: 3718, column: 26, scope: !12409)
!12428 = !DILocation(line: 3718, column: 7, scope: !12409)
!12429 = !DILocation(line: 3718, column: 24, scope: !12409)
!12430 = !DILocation(line: 3719, column: 7, scope: !12409)
!12431 = !DILocation(line: 3721, column: 20, scope: !12409)
!12432 = !DILocation(line: 3721, column: 7, scope: !12409)
!12433 = !DILocation(line: 3722, column: 27, scope: !12409)
!12434 = !DILocation(line: 3722, column: 7, scope: !12409)
!12435 = !DILocation(line: 3723, column: 27, scope: !12409)
!12436 = !DILocation(line: 3723, column: 7, scope: !12409)
!12437 = !DILocation(line: 3723, column: 12, scope: !12409)
!12438 = !DILocation(line: 3723, column: 25, scope: !12409)
!12439 = !DILocation(line: 3724, column: 5, scope: !12409)
!12440 = !DILocation(line: 3726, column: 12, scope: !12405)
!12441 = !DILocation(line: 3726, column: 17, scope: !12405)
!12442 = !DILocation(line: 3726, column: 10, scope: !12405)
!12443 = !DILocation(line: 3727, column: 10, scope: !12397)
!12444 = !DILocation(line: 3727, column: 3, scope: !12397)
!12445 = distinct !DISubprogram(name: "make_ssa_name", scope: !5226, file: !5226, line: 1245, type: !12446, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!12446 = !DISubroutineType(types: !12447)
!12447 = !{!1696, !1696, !2024}
!12448 = !DILocalVariable(name: "var", arg: 1, scope: !12445, file: !5226, line: 1245, type: !1696)
!12449 = !DILocation(line: 1245, column: 21, scope: !12445)
!12450 = !DILocalVariable(name: "stmt", arg: 2, scope: !12445, file: !5226, line: 1245, type: !2024)
!12451 = !DILocation(line: 1245, column: 33, scope: !12445)
!12452 = !DILocation(line: 1247, column: 28, scope: !12445)
!12453 = !DILocation(line: 1247, column: 34, scope: !12445)
!12454 = !DILocation(line: 1247, column: 39, scope: !12445)
!12455 = !DILocation(line: 1247, column: 10, scope: !12445)
!12456 = !DILocation(line: 1247, column: 3, scope: !12445)
!12457 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !1458, file: !1458, line: 1898, type: !8644, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!12458 = !DILocalVariable(name: "gs", arg: 1, scope: !12457, file: !1458, line: 1898, type: !2024)
!12459 = !DILocation(line: 1898, column: 29, scope: !12457)
!12460 = !DILocalVariable(name: "lhs", arg: 2, scope: !12457, file: !1458, line: 1898, type: !1696)
!12461 = !DILocation(line: 1898, column: 38, scope: !12457)
!12462 = !DILocation(line: 1901, column: 18, scope: !12457)
!12463 = !DILocation(line: 1901, column: 25, scope: !12457)
!12464 = !DILocation(line: 1901, column: 3, scope: !12457)
!12465 = !DILocation(line: 1902, column: 7, scope: !12466)
!12466 = distinct !DILexicalBlock(scope: !12457, file: !1458, line: 1902, column: 7)
!12467 = !DILocation(line: 1902, column: 11, scope: !12466)
!12468 = !DILocation(line: 1902, column: 14, scope: !12466)
!12469 = !DILocation(line: 1902, column: 30, scope: !12466)
!12470 = !DILocation(line: 1902, column: 7, scope: !12457)
!12471 = !DILocation(line: 1903, column: 31, scope: !12466)
!12472 = !DILocation(line: 1903, column: 5, scope: !12466)
!12473 = !DILocation(line: 1903, column: 29, scope: !12466)
!12474 = !DILocation(line: 1904, column: 1, scope: !12457)
!12475 = distinct !DISubprogram(name: "gimple_phi_set_result", scope: !1458, file: !1458, line: 3089, type: !8644, scopeLine: 3090, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!12476 = !DILocalVariable(name: "gs", arg: 1, scope: !12475, file: !1458, line: 3089, type: !2024)
!12477 = !DILocation(line: 3089, column: 31, scope: !12475)
!12478 = !DILocalVariable(name: "result", arg: 2, scope: !12475, file: !1458, line: 3089, type: !1696)
!12479 = !DILocation(line: 3089, column: 40, scope: !12475)
!12480 = !DILocation(line: 3092, column: 27, scope: !12475)
!12481 = !DILocation(line: 3092, column: 3, scope: !12475)
!12482 = !DILocation(line: 3092, column: 7, scope: !12475)
!12483 = !DILocation(line: 3092, column: 18, scope: !12475)
!12484 = !DILocation(line: 3092, column: 25, scope: !12475)
!12485 = !DILocation(line: 3093, column: 1, scope: !12475)
!12486 = distinct !DISubprogram(name: "gimple_debug_bind_reset_value", scope: !1458, file: !1458, line: 3336, type: !5682, scopeLine: 3337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3195)
!12487 = !DILocalVariable(name: "dbg", arg: 1, scope: !12486, file: !1458, line: 3336, type: !2024)
!12488 = !DILocation(line: 3336, column: 39, scope: !12486)
!12489 = !DILocation(line: 3342, column: 18, scope: !12486)
!12490 = !DILocation(line: 3342, column: 3, scope: !12486)
!12491 = !DILocation(line: 3343, column: 1, scope: !12486)
