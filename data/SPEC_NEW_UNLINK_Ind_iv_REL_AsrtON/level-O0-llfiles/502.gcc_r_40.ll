; ModuleID = 'cfgloop.c'
source_filename = "cfgloop.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.pointer_set_t = type opaque
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.VEC_basic_block_heap = type { %struct.VEC_basic_block_base }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }

@.str = private unnamed_addr constant [10 x i8] c"cfgloop.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c";;\0A;; Loop %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c";;  header %d, \00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"latch %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"multiple latches:\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c";;  depth %d, outer %ld\0A\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c";;  nodes:\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.10 = private unnamed_addr constant [19 x i8] c";; %d loops found\0A\00", align 1
@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@.str.11 = private unnamed_addr constant [37 x i8] c"size of loop %d should be %d, not %d\00", align 1
@.str.12 = private unnamed_addr constant [31 x i8] c"bb %d do not belong to loop %d\00", align 1
@.str.13 = private unnamed_addr constant [49 x i8] c"loop %d's header does not have exactly 2 entries\00", align 1
@.str.14 = private unnamed_addr constant [50 x i8] c"loop %d's latch does not have exactly 1 successor\00", align 1
@.str.15 = private unnamed_addr constant [50 x i8] c"loop %d's latch does not have header as successor\00", align 1
@.str.16 = private unnamed_addr constant [47 x i8] c"loop %d's latch does not belong directly to it\00", align 1
@.str.17 = private unnamed_addr constant [48 x i8] c"loop %d's header does not belong directly to it\00", align 1
@.str.18 = private unnamed_addr constant [56 x i8] c"loop %d's latch is marked as part of irreducible region\00", align 1
@.str.19 = private unnamed_addr constant [44 x i8] c"basic block %d should be marked irreducible\00", align 1
@.str.20 = private unnamed_addr constant [48 x i8] c"basic block %d should not be marked irreducible\00", align 1
@.str.21 = private unnamed_addr constant [48 x i8] c"edge from %d to %d should be marked irreducible\00", align 1
@.str.22 = private unnamed_addr constant [52 x i8] c"edge from %d to %d should not be marked irreducible\00", align 1
@.str.23 = private unnamed_addr constant [44 x i8] c"corrupted head of the exits list of loop %d\00", align 1
@.str.24 = private unnamed_addr constant [32 x i8] c"corrupted exits list of loop %d\00", align 1
@.str.25 = private unnamed_addr constant [59 x i8] c"nonempty exits list of loop %d, but exits are not recorded\00", align 1
@.str.26 = private unnamed_addr constant [25 x i8] c"Exit %d->%d not recorded\00", align 1
@.str.27 = private unnamed_addr constant [44 x i8] c"Wrong list of exited loops for edge  %d->%d\00", align 1
@.str.28 = private unnamed_addr constant [29 x i8] c"Too many loop exits recorded\00", align 1
@.str.29 = private unnamed_addr constant [48 x i8] c"%d exits recorded for loop %d (having %d exits)\00", align 1
@.str.30 = private unnamed_addr constant [15 x i8] c";; %d succs { \00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@.str.33 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.34 = private unnamed_addr constant [46 x i8] c"Disambiguating loop %d with multiple latches\0A\00", align 1
@.str.35 = private unnamed_addr constant [54 x i8] c"Found latch edge %d -> %d using profile information.\0A\00", align 1
@.str.36 = private unnamed_addr constant [47 x i8] c"Found latch edge %d -> %d using iv structure.\0A\00", align 1
@.str.37 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@mfb_reis_set = internal global %struct.pointer_set_t* null, align 8, !dbg !0
@.str.38 = private unnamed_addr constant [31 x i8] c"Merged latch edges of loop %d\0A\00", align 1
@.str.39 = private unnamed_addr constant [28 x i8] c"Edge %d->%d exits %u loops\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @flow_loop_nested_p(%struct.loop* %outer, %struct.loop* %loop) #0 !dbg !1914 {
entry:
  %outer.addr = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %odepth = alloca i32, align 4
  store %struct.loop* %outer, %struct.loop** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %outer.addr, metadata !1918, metadata !DIExpression()), !dbg !1919
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !1920, metadata !DIExpression()), !dbg !1921
  call void @llvm.dbg.declare(metadata i32* %odepth, metadata !1922, metadata !DIExpression()), !dbg !1923
  %0 = load %struct.loop*, %struct.loop** %outer.addr, align 8, !dbg !1924
  %call = call i32 @loop_depth(%struct.loop* %0), !dbg !1925
  store i32 %call, i32* %odepth, align 4, !dbg !1923
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !1926
  %call1 = call i32 @loop_depth(%struct.loop* %1), !dbg !1927
  %2 = load i32, i32* %odepth, align 4, !dbg !1928
  %cmp = icmp ugt i32 %call1, %2, !dbg !1929
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !1930

land.rhs:                                         ; preds = %entry
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !1931
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 7, !dbg !1931
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !1931
  %tobool = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !1931
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1931

cond.true:                                        ; preds = %land.rhs
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !1931
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !1931
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !1931
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %6, i32 0, i32 0, !dbg !1931
  br label %cond.end, !dbg !1931

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !1931

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !1931
  %7 = load i32, i32* %odepth, align 4, !dbg !1931
  %call3 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %7), !dbg !1931
  %8 = load %struct.loop*, %struct.loop** %outer.addr, align 8, !dbg !1932
  %cmp4 = icmp eq %struct.loop* %call3, %8, !dbg !1933
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %9 = phi i1 [ false, %entry ], [ %cmp4, %cond.end ], !dbg !1934
  %land.ext = zext i1 %9 to i32, !dbg !1930
  %conv = trunc i32 %land.ext to i8, !dbg !1935
  ret i8 %conv, !dbg !1936
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_depth(%struct.loop* %loop) #0 !dbg !1937 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !1940, metadata !DIExpression()), !dbg !1941
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !1942
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !1942
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !1942
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !1942
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1942

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !1942
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !1942
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !1942
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !1942
  br label %cond.end, !dbg !1942

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1942

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !1942
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !1942
  ret i32 %call, !dbg !1943
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !1944 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !1949, metadata !DIExpression()), !dbg !1950
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !1951, metadata !DIExpression()), !dbg !1950
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !1950
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !1950
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !1950

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !1950
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !1950
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !1950
  %3 = load i32, i32* %num, align 8, !dbg !1950
  %cmp = icmp ult i32 %1, %3, !dbg !1950
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !1952
  %land.ext = zext i1 %4 to i32, !dbg !1950
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !1950
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !1950
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !1950
  %idxprom = zext i32 %6 to i64, !dbg !1950
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !1950
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !1950
  ret %struct.loop* %7, !dbg !1950
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.loop* @superloop_at_depth(%struct.loop* %loop, i32 %depth) #0 !dbg !1953 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %depth.addr = alloca i32, align 4
  %ldepth = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !1956, metadata !DIExpression()), !dbg !1957
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !1958, metadata !DIExpression()), !dbg !1959
  call void @llvm.dbg.declare(metadata i32* %ldepth, metadata !1960, metadata !DIExpression()), !dbg !1961
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !1962
  %call = call i32 @loop_depth(%struct.loop* %0), !dbg !1963
  store i32 %call, i32* %ldepth, align 4, !dbg !1961
  %1 = load i32, i32* %depth.addr, align 4, !dbg !1964
  %2 = load i32, i32* %ldepth, align 4, !dbg !1964
  %cmp = icmp ule i32 %1, %2, !dbg !1964
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !1964

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1964
  br label %cond.end, !dbg !1964

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1964

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !1964
  %3 = load i32, i32* %depth.addr, align 4, !dbg !1965
  %4 = load i32, i32* %ldepth, align 4, !dbg !1967
  %cmp1 = icmp eq i32 %3, %4, !dbg !1968
  br i1 %cmp1, label %if.then, label %if.end, !dbg !1969

if.then:                                          ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !1970
  store %struct.loop* %5, %struct.loop** %retval, align 8, !dbg !1971
  br label %return, !dbg !1971

if.end:                                           ; preds = %cond.end
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !1972
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 7, !dbg !1972
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !1972
  %tobool = icmp ne %struct.VEC_loop_p_gc* %7, null, !dbg !1972
  br i1 %tobool, label %cond.true2, label %cond.false4, !dbg !1972

cond.true2:                                       ; preds = %if.end
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !1972
  %superloops3 = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 7, !dbg !1972
  %9 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops3, align 8, !dbg !1972
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %9, i32 0, i32 0, !dbg !1972
  br label %cond.end5, !dbg !1972

cond.false4:                                      ; preds = %if.end
  br label %cond.end5, !dbg !1972

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_loop_p_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !1972
  %10 = load i32, i32* %depth.addr, align 4, !dbg !1972
  %call7 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond6, i32 %10), !dbg !1972
  store %struct.loop* %call7, %struct.loop** %retval, align 8, !dbg !1973
  br label %return, !dbg !1973

return:                                           ; preds = %cond.end5, %if.then
  %11 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !1974
  ret %struct.loop* %11, !dbg !1974
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @flow_loop_dump(%struct.loop* %loop, %struct._IO_FILE* %file, void (%struct.loop*, %struct._IO_FILE*, i32)* %loop_dump_aux, i32 %verbose) #0 !dbg !1975 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %file.addr = alloca %struct._IO_FILE*, align 8
  %loop_dump_aux.addr = alloca void (%struct.loop*, %struct._IO_FILE*, i32)*, align 8
  %verbose.addr = alloca i32, align 4
  %bbs = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  %latches = alloca %struct.VEC_edge_heap*, align 8
  %e = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !1981, metadata !DIExpression()), !dbg !1982
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !1983, metadata !DIExpression()), !dbg !1984
  store void (%struct.loop*, %struct._IO_FILE*, i32)* %loop_dump_aux, void (%struct.loop*, %struct._IO_FILE*, i32)** %loop_dump_aux.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.loop*, %struct._IO_FILE*, i32)** %loop_dump_aux.addr, metadata !1985, metadata !DIExpression()), !dbg !1986
  store i32 %verbose, i32* %verbose.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verbose.addr, metadata !1987, metadata !DIExpression()), !dbg !1988
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !1989, metadata !DIExpression()), !dbg !1990
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1991, metadata !DIExpression()), !dbg !1992
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %latches, metadata !1993, metadata !DIExpression()), !dbg !1994
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !1995, metadata !DIExpression()), !dbg !1996
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !1997
  %tobool = icmp ne %struct.loop* %0, null, !dbg !1997
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !1999

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2000
  %header = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 2, !dbg !2001
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !2001
  %tobool1 = icmp ne %struct.basic_block_def* %2, null, !dbg !2000
  br i1 %tobool1, label %if.end, label %if.then, !dbg !2002

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end41, !dbg !2003

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2004
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2005
  %num = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 0, !dbg !2006
  %5 = load i32, i32* %num, align 8, !dbg !2006
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 %5), !dbg !2007
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2008
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2009
  %header2 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 2, !dbg !2010
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %header2, align 8, !dbg !2010
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 9, !dbg !2011
  %9 = load i32, i32* %index, align 8, !dbg !2011
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 %9), !dbg !2012
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2013
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 3, !dbg !2015
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !2015
  %tobool4 = icmp ne %struct.basic_block_def* %11, null, !dbg !2013
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !2016

if.then5:                                         ; preds = %if.end
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2017
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2018
  %latch6 = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 3, !dbg !2019
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %latch6, align 8, !dbg !2019
  %index7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 9, !dbg !2020
  %15 = load i32, i32* %index7, align 8, !dbg !2020
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %15), !dbg !2021
  br label %if.end17, !dbg !2021

if.else:                                          ; preds = %if.end
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2022
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0)), !dbg !2024
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2025
  %call10 = call %struct.VEC_edge_heap* @get_loop_latch_edges(%struct.loop* %17), !dbg !2026
  store %struct.VEC_edge_heap* %call10, %struct.VEC_edge_heap** %latches, align 8, !dbg !2027
  store i32 0, i32* %i, align 4, !dbg !2028
  br label %for.cond, !dbg !2030

for.cond:                                         ; preds = %for.inc, %if.else
  %18 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !2031
  %tobool11 = icmp ne %struct.VEC_edge_heap* %18, null, !dbg !2031
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !2031

cond.true:                                        ; preds = %for.cond
  %19 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !2031
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %19, i32 0, i32 0, !dbg !2031
  br label %cond.end, !dbg !2031

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2031

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2031
  %20 = load i32, i32* %i, align 4, !dbg !2031
  %call12 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %20, %struct.edge_def** %e), !dbg !2031
  %tobool13 = icmp ne i32 %call12, 0, !dbg !2033
  br i1 %tobool13, label %for.body, label %for.end, !dbg !2033

for.body:                                         ; preds = %cond.end
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2034
  %22 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2035
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 0, !dbg !2036
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2036
  %index14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !2037
  %24 = load i32, i32* %index14, align 8, !dbg !2037
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i32 %24), !dbg !2038
  br label %for.inc, !dbg !2038

for.inc:                                          ; preds = %for.body
  %25 = load i32, i32* %i, align 4, !dbg !2039
  %inc = add i32 %25, 1, !dbg !2039
  store i32 %inc, i32* %i, align 4, !dbg !2039
  br label %for.cond, !dbg !2040, !llvm.loop !2041

for.end:                                          ; preds = %cond.end
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %latches), !dbg !2043
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2044
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !2045
  br label %if.end17

if.end17:                                         ; preds = %for.end, %if.then5
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2046
  %28 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2047
  %call18 = call i32 @loop_depth(%struct.loop* %28), !dbg !2048
  %29 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2049
  %call19 = call %struct.loop* @loop_outer(%struct.loop* %29), !dbg !2050
  %tobool20 = icmp ne %struct.loop* %call19, null, !dbg !2050
  br i1 %tobool20, label %cond.true21, label %cond.false24, !dbg !2050

cond.true21:                                      ; preds = %if.end17
  %30 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2051
  %call22 = call %struct.loop* @loop_outer(%struct.loop* %30), !dbg !2052
  %num23 = getelementptr inbounds %struct.loop, %struct.loop* %call22, i32 0, i32 0, !dbg !2053
  %31 = load i32, i32* %num23, align 8, !dbg !2053
  br label %cond.end25, !dbg !2050

cond.false24:                                     ; preds = %if.end17
  br label %cond.end25, !dbg !2050

cond.end25:                                       ; preds = %cond.false24, %cond.true21
  %cond26 = phi i32 [ %31, %cond.true21 ], [ -1, %cond.false24 ], !dbg !2050
  %conv = sext i32 %cond26 to i64, !dbg !2054
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0), i32 %call18, i64 %conv), !dbg !2055
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2056
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0)), !dbg !2057
  %33 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2058
  %call29 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %33), !dbg !2059
  store %struct.basic_block_def** %call29, %struct.basic_block_def*** %bbs, align 8, !dbg !2060
  store i32 0, i32* %i, align 4, !dbg !2061
  br label %for.cond30, !dbg !2063

for.cond30:                                       ; preds = %for.inc35, %cond.end25
  %34 = load i32, i32* %i, align 4, !dbg !2064
  %35 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2066
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 6, !dbg !2067
  %36 = load i32, i32* %num_nodes, align 4, !dbg !2067
  %cmp = icmp ult i32 %34, %36, !dbg !2068
  br i1 %cmp, label %for.body32, label %for.end37, !dbg !2069

for.body32:                                       ; preds = %for.cond30
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2070
  %38 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2071
  %39 = load i32, i32* %i, align 4, !dbg !2072
  %idxprom = zext i32 %39 to i64, !dbg !2071
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %38, i64 %idxprom, !dbg !2071
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2071
  %index33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 9, !dbg !2073
  %41 = load i32, i32* %index33, align 8, !dbg !2073
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i32 %41), !dbg !2074
  br label %for.inc35, !dbg !2074

for.inc35:                                        ; preds = %for.body32
  %42 = load i32, i32* %i, align 4, !dbg !2075
  %inc36 = add i32 %42, 1, !dbg !2075
  store i32 %inc36, i32* %i, align 4, !dbg !2075
  br label %for.cond30, !dbg !2076, !llvm.loop !2077

for.end37:                                        ; preds = %for.cond30
  %43 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2079
  %44 = bitcast %struct.basic_block_def** %43 to i8*, !dbg !2079
  call void @free(i8* %44), !dbg !2080
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2081
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !2082
  %46 = load void (%struct.loop*, %struct._IO_FILE*, i32)*, void (%struct.loop*, %struct._IO_FILE*, i32)** %loop_dump_aux.addr, align 8, !dbg !2083
  %tobool39 = icmp ne void (%struct.loop*, %struct._IO_FILE*, i32)* %46, null, !dbg !2083
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !2085

if.then40:                                        ; preds = %for.end37
  %47 = load void (%struct.loop*, %struct._IO_FILE*, i32)*, void (%struct.loop*, %struct._IO_FILE*, i32)** %loop_dump_aux.addr, align 8, !dbg !2086
  %48 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2087
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2088
  %50 = load i32, i32* %verbose.addr, align 4, !dbg !2089
  call void %47(%struct.loop* %48, %struct._IO_FILE* %49, i32 %50), !dbg !2086
  br label %if.end41, !dbg !2086

if.end41:                                         ; preds = %if.then, %if.then40, %for.end37
  ret void, !dbg !2090
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_heap* @get_loop_latch_edges(%struct.loop* %loop) #0 !dbg !2091 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %ret = alloca %struct.VEC_edge_heap*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2094, metadata !DIExpression()), !dbg !2095
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2096, metadata !DIExpression()), !dbg !2103
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2104, metadata !DIExpression()), !dbg !2105
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %ret, metadata !2106, metadata !DIExpression()), !dbg !2107
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %ret, align 8, !dbg !2107
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2108
  %header = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 2, !dbg !2108
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !2108
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !2108
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !2108
  %2 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2108
  %3 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %2, i32 0, i32 0, !dbg !2108
  %4 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !2108
  store i32 %4, i32* %3, align 8, !dbg !2108
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %2, i32 0, i32 1, !dbg !2108
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !2108
  store %struct.VEC_edge_gc** %6, %struct.VEC_edge_gc*** %5, align 8, !dbg !2108
  %7 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2108
  %8 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2108
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false), !dbg !2108
  br label %for.cond, !dbg !2108

for.cond:                                         ; preds = %for.inc, %entry
  %9 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2110
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !2110
  %11 = load i32, i32* %10, align 8, !dbg !2110
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !2110
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !2110
  %call1 = call zeroext i8 @ei_cond(i32 %11, %struct.VEC_edge_gc** %13, %struct.edge_def** %e), !dbg !2110
  %tobool = icmp ne i8 %call1, 0, !dbg !2108
  br i1 %tobool, label %for.body, label %for.end, !dbg !2108

for.body:                                         ; preds = %for.cond
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2112
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 0, !dbg !2115
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2115
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2116
  %header2 = getelementptr inbounds %struct.loop, %struct.loop* %16, i32 0, i32 2, !dbg !2117
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %header2, align 8, !dbg !2117
  %call3 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %15, %struct.basic_block_def* %17), !dbg !2118
  %tobool4 = icmp ne i8 %call3, 0, !dbg !2118
  br i1 %tobool4, label %if.then, label %if.end, !dbg !2119

if.then:                                          ; preds = %for.body
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2120
  %call5 = call %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** %ret, %struct.edge_def* %18), !dbg !2120
  br label %if.end, !dbg !2120

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !2121

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2110
  br label %for.cond, !dbg !2110, !llvm.loop !2122

for.end:                                          ; preds = %for.cond
  %19 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %ret, align 8, !dbg !2124
  ret %struct.VEC_edge_heap* %19, !dbg !2125
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) #0 !dbg !2126 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !2132, metadata !DIExpression()), !dbg !2133
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2134, metadata !DIExpression()), !dbg !2133
  store %struct.edge_def** %ptr, %struct.edge_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %ptr.addr, metadata !2135, metadata !DIExpression()), !dbg !2133
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2136
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !2136
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2136

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2136
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2136
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !2136
  %3 = load i32, i32* %num, align 8, !dbg !2136
  %cmp = icmp ult i32 %1, %3, !dbg !2136
  br i1 %cmp, label %if.then, label %if.else, !dbg !2133

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2138
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !2138
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !2138
  %idxprom = zext i32 %5 to i64, !dbg !2138
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !2138
  %6 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !2138
  %7 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !2138
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !2138
  store i32 1, i32* %retval, align 4, !dbg !2138
  br label %return, !dbg !2138

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !2140
  store %struct.edge_def* null, %struct.edge_def** %8, align 8, !dbg !2140
  store i32 0, i32* %retval, align 4, !dbg !2140
  br label %return, !dbg !2140

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2133
  ret i32 %9, !dbg !2133
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) #0 !dbg !2142 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !2146, metadata !DIExpression()), !dbg !2147
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !2148
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !2148
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !2148
  br i1 %tobool, label %if.then, label %if.end, !dbg !2147

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !2148
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !2148
  %4 = bitcast %struct.VEC_edge_heap* %3 to i8*, !dbg !2148
  call void @free(i8* %4), !dbg !2148
  br label %if.end, !dbg !2148

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !2147
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %5, align 8, !dbg !2147
  ret void, !dbg !2147
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !2150 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2153, metadata !DIExpression()), !dbg !2154
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2155, metadata !DIExpression()), !dbg !2156
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2157
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !2157
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !2157
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !2157
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2157

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2157
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !2157
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !2157
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !2157
  br label %cond.end, !dbg !2157

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2157

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2157
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !2157
  store i32 %call, i32* %n, align 4, !dbg !2156
  %4 = load i32, i32* %n, align 4, !dbg !2158
  %cmp = icmp eq i32 %4, 0, !dbg !2160
  br i1 %cmp, label %if.then, label %if.end, !dbg !2161

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !2162
  br label %return, !dbg !2162

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2163
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !2163
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !2163
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !2163
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !2163

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2163
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !2163
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !2163
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !2163
  br label %cond.end8, !dbg !2163

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !2163

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !2163
  %9 = load i32, i32* %n, align 4, !dbg !2163
  %sub = sub i32 %9, 1, !dbg !2163
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !2163
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !2164
  br label %return, !dbg !2164

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !2165
  ret %struct.loop* %10, !dbg !2165
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def** @get_loop_body(%struct.loop* %loop) #0 !dbg !2166 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %body = alloca %struct.basic_block_def**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %tv = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2169, metadata !DIExpression()), !dbg !2170
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !2171, metadata !DIExpression()), !dbg !2172
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2173, metadata !DIExpression()), !dbg !2174
  call void @llvm.dbg.declare(metadata i32* %tv, metadata !2175, metadata !DIExpression()), !dbg !2176
  store i32 0, i32* %tv, align 4, !dbg !2176
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2177
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 6, !dbg !2177
  %1 = load i32, i32* %num_nodes, align 4, !dbg !2177
  %tobool = icmp ne i32 %1, 0, !dbg !2177
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2177

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 818, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2177
  br label %cond.end, !dbg !2177

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2177

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2177
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2178
  %num_nodes1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !2178
  %3 = load i32, i32* %num_nodes1, align 4, !dbg !2178
  %conv = zext i32 %3 to i64, !dbg !2178
  %call = call i8* @xcalloc(i64 %conv, i64 8), !dbg !2178
  %4 = bitcast i8* %call to %struct.basic_block_def**, !dbg !2178
  store %struct.basic_block_def** %4, %struct.basic_block_def*** %body, align 8, !dbg !2179
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2180
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 3, !dbg !2182
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !2182
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2183
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !2183
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2183
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2183
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 1, !dbg !2183
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2183
  %cmp = icmp eq %struct.basic_block_def* %6, %9, !dbg !2184
  br i1 %cmp, label %if.then, label %if.else, !dbg !2185

if.then:                                          ; preds = %cond.end
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2186
  %num_nodes3 = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 6, !dbg !2186
  %11 = load i32, i32* %num_nodes3, align 4, !dbg !2186
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2186
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !2186
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !2186
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !2186
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 3, !dbg !2186
  %14 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !2186
  %cmp6 = icmp eq i32 %11, %14, !dbg !2186
  br i1 %cmp6, label %cond.false9, label %cond.true8, !dbg !2186

cond.true8:                                       ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 826, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2186
  br label %cond.end10, !dbg !2186

cond.false9:                                      ; preds = %if.then
  br label %cond.end10, !dbg !2186

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !2186
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2188
  %header = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 2, !dbg !2189
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !2189
  %17 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !2190
  %18 = load i32, i32* %tv, align 4, !dbg !2191
  %inc = add i32 %18, 1, !dbg !2191
  store i32 %inc, i32* %tv, align 4, !dbg !2191
  %idxprom = zext i32 %18 to i64, !dbg !2190
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %17, i64 %idxprom, !dbg !2190
  store %struct.basic_block_def* %16, %struct.basic_block_def** %arrayidx, align 8, !dbg !2192
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2193
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !2193
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !2193
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !2193
  %x_exit_block_ptr14 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 1, !dbg !2193
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr14, align 8, !dbg !2193
  %22 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !2194
  %23 = load i32, i32* %tv, align 4, !dbg !2195
  %inc15 = add i32 %23, 1, !dbg !2195
  store i32 %inc15, i32* %tv, align 4, !dbg !2195
  %idxprom16 = zext i32 %23 to i64, !dbg !2194
  %arrayidx17 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %22, i64 %idxprom16, !dbg !2194
  store %struct.basic_block_def* %21, %struct.basic_block_def** %arrayidx17, align 8, !dbg !2196
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2197
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !2197
  %cfg19 = getelementptr inbounds %struct.function, %struct.function* %add.ptr18, i32 0, i32 1, !dbg !2197
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg19, align 8, !dbg !2197
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 0, !dbg !2197
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2197
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 6, !dbg !2197
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2197
  store %struct.basic_block_def* %27, %struct.basic_block_def** %bb, align 8, !dbg !2197
  br label %for.cond, !dbg !2197

for.cond:                                         ; preds = %for.inc, %cond.end10
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2199
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2199
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !2199
  %cfg21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 1, !dbg !2199
  %30 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg21, align 8, !dbg !2199
  %x_exit_block_ptr22 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %30, i32 0, i32 1, !dbg !2199
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr22, align 8, !dbg !2199
  %cmp23 = icmp ne %struct.basic_block_def* %28, %31, !dbg !2199
  br i1 %cmp23, label %for.body, label %for.end, !dbg !2197

for.body:                                         ; preds = %for.cond
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2201
  %33 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !2202
  %34 = load i32, i32* %tv, align 4, !dbg !2203
  %inc25 = add i32 %34, 1, !dbg !2203
  store i32 %inc25, i32* %tv, align 4, !dbg !2203
  %idxprom26 = zext i32 %34 to i64, !dbg !2202
  %arrayidx27 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %33, i64 %idxprom26, !dbg !2202
  store %struct.basic_block_def* %32, %struct.basic_block_def** %arrayidx27, align 8, !dbg !2204
  br label %for.inc, !dbg !2202

for.inc:                                          ; preds = %for.body
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2199
  %next_bb28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 6, !dbg !2199
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb28, align 8, !dbg !2199
  store %struct.basic_block_def* %36, %struct.basic_block_def** %bb, align 8, !dbg !2199
  br label %for.cond, !dbg !2199, !llvm.loop !2205

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !2207

if.else:                                          ; preds = %cond.end
  %37 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2208
  %38 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !2209
  %39 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2210
  %num_nodes29 = getelementptr inbounds %struct.loop, %struct.loop* %39, i32 0, i32 6, !dbg !2211
  %40 = load i32, i32* %num_nodes29, align 4, !dbg !2211
  %call30 = call i32 @get_loop_body_with_size(%struct.loop* %37, %struct.basic_block_def** %38, i32 %40), !dbg !2212
  store i32 %call30, i32* %tv, align 4, !dbg !2213
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  %41 = load i32, i32* %tv, align 4, !dbg !2214
  %42 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2214
  %num_nodes31 = getelementptr inbounds %struct.loop, %struct.loop* %42, i32 0, i32 6, !dbg !2214
  %43 = load i32, i32* %num_nodes31, align 4, !dbg !2214
  %cmp32 = icmp eq i32 %41, %43, !dbg !2214
  br i1 %cmp32, label %cond.false35, label %cond.true34, !dbg !2214

cond.true34:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 835, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2214
  br label %cond.end36, !dbg !2214

cond.false35:                                     ; preds = %if.end
  br label %cond.end36, !dbg !2214

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond37 = phi i32 [ 0, %cond.true34 ], [ 0, %cond.false35 ], !dbg !2214
  %44 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !2215
  ret %struct.basic_block_def** %44, !dbg !2216
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @flow_loops_dump(%struct._IO_FILE* %file, void (%struct.loop*, %struct._IO_FILE*, i32)* %loop_dump_aux, i32 %verbose) #0 !dbg !2217 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %loop_dump_aux.addr = alloca void (%struct.loop*, %struct._IO_FILE*, i32)*, align 8
  %verbose.addr = alloca i32, align 4
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2220, metadata !DIExpression()), !dbg !2221
  store void (%struct.loop*, %struct._IO_FILE*, i32)* %loop_dump_aux, void (%struct.loop*, %struct._IO_FILE*, i32)** %loop_dump_aux.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.loop*, %struct._IO_FILE*, i32)** %loop_dump_aux.addr, metadata !2222, metadata !DIExpression()), !dbg !2223
  store i32 %verbose, i32* %verbose.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verbose.addr, metadata !2224, metadata !DIExpression()), !dbg !2225
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !2226, metadata !DIExpression()), !dbg !2232
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2233, metadata !DIExpression()), !dbg !2234
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2235
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2235
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !2235
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2235
  %tobool = icmp ne %struct.loops* %1, null, !dbg !2235
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2237

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2238
  %tobool1 = icmp ne %struct._IO_FILE* %2, null, !dbg !2238
  br i1 %tobool1, label %if.end, label %if.then, !dbg !2239

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end6, !dbg !2240

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2241
  %call = call i32 @number_of_loops(), !dbg !2242
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i64 0, i64 0), i32 %call), !dbg !2243
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 1), !dbg !2244
  br label %for.cond, !dbg !2244

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2246
  %tobool3 = icmp ne %struct.loop* %4, null, !dbg !2244
  br i1 %tobool3, label %for.body, label %for.end, !dbg !2244

for.body:                                         ; preds = %for.cond
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2248
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2250
  %7 = load void (%struct.loop*, %struct._IO_FILE*, i32)*, void (%struct.loop*, %struct._IO_FILE*, i32)** %loop_dump_aux.addr, align 8, !dbg !2251
  %8 = load i32, i32* %verbose.addr, align 4, !dbg !2252
  call void @flow_loop_dump(%struct.loop* %5, %struct._IO_FILE* %6, void (%struct.loop*, %struct._IO_FILE*, i32)* %7, i32 %8), !dbg !2253
  br label %for.inc, !dbg !2254

for.inc:                                          ; preds = %for.body
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !2246
  br label %for.cond, !dbg !2246, !llvm.loop !2255

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %verbose.addr, align 4, !dbg !2257
  %tobool4 = icmp ne i32 %9, 0, !dbg !2257
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !2259

if.then5:                                         ; preds = %for.end
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2260
  call void @flow_loops_cfg_dump(%struct._IO_FILE* %10), !dbg !2261
  br label %if.end6, !dbg !2261

if.end6:                                          ; preds = %if.then, %if.then5, %for.end
  ret void, !dbg !2262
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !2263 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2266
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2266
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !2266
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2266
  %tobool = icmp ne %struct.loops* %1, null, !dbg !2266
  br i1 %tobool, label %if.end, label %if.then, !dbg !2268

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !2269
  br label %return, !dbg !2269

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2270
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !2270
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !2270
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !2270
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !2270
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !2270
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !2270
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !2270

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2270
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !2270
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !2270
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !2270
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !2270
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !2270
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !2270
  br label %cond.end, !dbg !2270

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !2270

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2270
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !2270
  store i32 %call, i32* %retval, align 4, !dbg !2271
  br label %return, !dbg !2271

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !2272
  ret i32 %8, !dbg !2272
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !2273 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !2278, metadata !DIExpression()), !dbg !2279
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !2280, metadata !DIExpression()), !dbg !2281
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2282, metadata !DIExpression()), !dbg !2283
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !2284, metadata !DIExpression()), !dbg !2285
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2286, metadata !DIExpression()), !dbg !2287
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !2288, metadata !DIExpression()), !dbg !2289
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2290
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !2291
  store i32 0, i32* %idx, align 8, !dbg !2292
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2293
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !2293
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !2293
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2293
  %tobool = icmp ne %struct.loops* %2, null, !dbg !2293
  br i1 %tobool, label %if.end, label %if.then, !dbg !2295

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2296
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !2298
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !2299
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2300
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !2301
  br label %return, !dbg !2302

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !2303
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !2303
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2304
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !2305
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !2306
  %6 = load i32, i32* %flags.addr, align 4, !dbg !2307
  %and = and i32 %6, 1, !dbg !2308
  %tobool3 = icmp ne i32 %and, 0, !dbg !2309
  %7 = zext i1 %tobool3 to i64, !dbg !2309
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !2309
  store i32 %cond, i32* %mn, align 4, !dbg !2310
  %8 = load i32, i32* %flags.addr, align 4, !dbg !2311
  %and4 = and i32 %8, 4, !dbg !2313
  %tobool5 = icmp ne i32 %and4, 0, !dbg !2313
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !2314

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !2315
  br label %for.cond, !dbg !2318

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2319
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !2319
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !2319
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !2319
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !2319
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !2319
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !2319
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !2319

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2319
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !2319
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !2319
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !2319
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !2319
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !2319
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !2319
  br label %cond.end, !dbg !2319

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2319

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2319
  %15 = load i32, i32* %i, align 4, !dbg !2319
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !2319
  %tobool15 = icmp ne i32 %call14, 0, !dbg !2321
  br i1 %tobool15, label %for.body, label %for.end, !dbg !2321

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2322
  %cmp = icmp ne %struct.loop* %16, null, !dbg !2324
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !2325

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2326
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !2327
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !2327
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !2328
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !2329

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2330
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !2331
  %20 = load i32, i32* %num, align 8, !dbg !2331
  %21 = load i32, i32* %mn, align 4, !dbg !2332
  %cmp18 = icmp sge i32 %20, %21, !dbg !2333
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !2334

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2335
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !2335
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !2335
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !2335
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !2335

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2335
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !2335
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !2335
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !2335
  br label %cond.end26, !dbg !2335

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !2335

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !2335
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2335
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !2335
  %27 = load i32, i32* %num28, align 8, !dbg !2335
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !2335
  br label %if.end30, !dbg !2335

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !2332

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !2336
  %inc = add i32 %28, 1, !dbg !2336
  store i32 %inc, i32* %i, align 4, !dbg !2336
  br label %for.cond, !dbg !2337, !llvm.loop !2338

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !2340

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !2341
  %and31 = and i32 %29, 2, !dbg !2343
  %tobool32 = icmp ne i32 %and31, 0, !dbg !2343
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !2344

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2345
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !2345
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !2345
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !2345
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !2348
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !2348
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !2349
  br label %for.cond36, !dbg !2350

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2351
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !2353
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !2353
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !2354
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !2355

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !2356

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2357
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !2358
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !2358
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !2359
  br label %for.cond36, !dbg !2360, !llvm.loop !2361

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !2363

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2364
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !2367
  %38 = load i32, i32* %num43, align 8, !dbg !2367
  %39 = load i32, i32* %mn, align 4, !dbg !2368
  %cmp44 = icmp sge i32 %38, %39, !dbg !2369
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !2370

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2371
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !2371
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !2371
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !2371
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !2371

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2371
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !2371
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !2371
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !2371
  br label %cond.end52, !dbg !2371

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !2371

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !2371
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2371
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !2371
  %45 = load i32, i32* %num54, align 8, !dbg !2371
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !2371
  br label %if.end56, !dbg !2371

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2372
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !2374
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !2374
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !2372
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !2375

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2376
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !2379
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !2379
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !2380
  br label %for.cond60, !dbg !2381

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2382
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !2384
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !2384
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !2385
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !2386

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !2387

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2388
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !2389
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !2389
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !2390
  br label %for.cond60, !dbg !2391, !llvm.loop !2392

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !2394

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2395
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !2397
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !2397
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !2398

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !2399

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2400
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !2401
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !2402
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !2363, !llvm.loop !2403

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !2405

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2406
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !2406
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !2406
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !2406
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !2408
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !2408
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !2409
  br label %while.body79, !dbg !2410

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2411
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !2414
  %60 = load i32, i32* %num80, align 8, !dbg !2414
  %61 = load i32, i32* %mn, align 4, !dbg !2415
  %cmp81 = icmp sge i32 %60, %61, !dbg !2416
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !2417

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2418
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !2418
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !2418
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !2418
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !2418

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2418
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !2418
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !2418
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !2418
  br label %cond.end89, !dbg !2418

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !2418

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !2418
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2418
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !2418
  %67 = load i32, i32* %num91, align 8, !dbg !2418
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !2418
  br label %if.end93, !dbg !2418

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2419
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !2421
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !2421
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !2422
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !2423

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2424
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !2425
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !2425
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !2426
  br label %if.end110, !dbg !2427

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !2428

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2430
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !2431
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !2432

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2433
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !2434
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !2434
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !2435
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !2436
  br i1 %75, label %while.body103, label %while.end105, !dbg !2428

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2437
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !2438
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !2439
  br label %while.cond99, !dbg !2428, !llvm.loop !2440

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2442
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !2444
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !2445

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !2446

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2447
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !2448
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !2448
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !2449
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !2410, !llvm.loop !2450

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2452
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2453
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !2454
  br label %return, !dbg !2455

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !2455
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !2456 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !2459, metadata !DIExpression()), !dbg !2460
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !2461, metadata !DIExpression()), !dbg !2462
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !2463, metadata !DIExpression()), !dbg !2464
  br label %while.cond, !dbg !2465

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2466
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !2466
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !2466
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !2466
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2466

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2466
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !2466
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !2466
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !2466
  br label %cond.end, !dbg !2466

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !2466

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2466
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2466
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !2466
  %5 = load i32, i32* %idx, align 8, !dbg !2466
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !2466
  %tobool2 = icmp ne i32 %call, 0, !dbg !2465
  br i1 %tobool2, label %while.body, label %while.end, !dbg !2465

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2467
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !2469
  %7 = load i32, i32* %idx3, align 8, !dbg !2470
  %inc = add i32 %7, 1, !dbg !2470
  store i32 %inc, i32* %idx3, align 8, !dbg !2470
  %8 = load i32, i32* %anum, align 4, !dbg !2471
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !2472
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2473
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !2474
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2475
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !2477
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !2477
  br i1 %tobool5, label %if.then, label %if.end, !dbg !2478

if.then:                                          ; preds = %while.body
  br label %return, !dbg !2479

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !2465, !llvm.loop !2480

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2482
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !2482
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !2482
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2483
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !2484
  br label %return, !dbg !2485

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !2485
}

; Function Attrs: noinline nounwind uwtable
define internal void @flow_loops_cfg_dump(%struct._IO_FILE* %file) #0 !dbg !2486 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %succ = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2489, metadata !DIExpression()), !dbg !2490
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2491, metadata !DIExpression()), !dbg !2492
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2493
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !2493
  br i1 %tobool, label %if.end, label %if.then, !dbg !2495

if.then:                                          ; preds = %entry
  br label %for.end13, !dbg !2496

if.end:                                           ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2497
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !2497
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2497
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2497
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !2497
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2497
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 6, !dbg !2497
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2497
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !2497
  br label %for.cond, !dbg !2497

for.cond:                                         ; preds = %for.inc11, %if.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2499
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2499
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !2499
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !2499
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !2499
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !2499
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2499
  %cmp = icmp ne %struct.basic_block_def* %5, %8, !dbg !2499
  br i1 %cmp, label %for.body, label %for.end13, !dbg !2497

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_def** %succ, metadata !2501, metadata !DIExpression()), !dbg !2503
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2504, metadata !DIExpression()), !dbg !2505
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2506
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2507
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 9, !dbg !2508
  %11 = load i32, i32* %index, align 8, !dbg !2508
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.30, i64 0, i64 0), i32 %11), !dbg !2509
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2510
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 1, !dbg !2510
  %call3 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !2510
  %13 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2510
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 0, !dbg !2510
  %15 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 0, !dbg !2510
  store i32 %15, i32* %14, align 8, !dbg !2510
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 1, !dbg !2510
  %17 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 1, !dbg !2510
  store %struct.VEC_edge_gc** %17, %struct.VEC_edge_gc*** %16, align 8, !dbg !2510
  %18 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2510
  %19 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2510
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 16, i1 false), !dbg !2510
  br label %for.cond4, !dbg !2510

for.cond4:                                        ; preds = %for.inc, %for.body
  %20 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2512
  %21 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %20, i32 0, i32 0, !dbg !2512
  %22 = load i32, i32* %21, align 8, !dbg !2512
  %23 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %20, i32 0, i32 1, !dbg !2512
  %24 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %23, align 8, !dbg !2512
  %call5 = call zeroext i8 @ei_cond(i32 %22, %struct.VEC_edge_gc** %24, %struct.edge_def** %succ), !dbg !2512
  %tobool6 = icmp ne i8 %call5, 0, !dbg !2510
  br i1 %tobool6, label %for.body7, label %for.end, !dbg !2510

for.body7:                                        ; preds = %for.cond4
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2514
  %26 = load %struct.edge_def*, %struct.edge_def** %succ, align 8, !dbg !2515
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 1, !dbg !2516
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2516
  %index8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 9, !dbg !2517
  %28 = load i32, i32* %index8, align 8, !dbg !2517
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i64 0, i64 0), i32 %28), !dbg !2518
  br label %for.inc, !dbg !2518

for.inc:                                          ; preds = %for.body7
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2512
  br label %for.cond4, !dbg !2512, !llvm.loop !2519

for.end:                                          ; preds = %for.cond4
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2521
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i64 0, i64 0)), !dbg !2522
  br label %for.inc11, !dbg !2523

for.inc11:                                        ; preds = %for.end
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2499
  %next_bb12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 6, !dbg !2499
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb12, align 8, !dbg !2499
  store %struct.basic_block_def* %31, %struct.basic_block_def** %bb, align 8, !dbg !2499
  br label %for.cond, !dbg !2499, !llvm.loop !2524

for.end13:                                        ; preds = %if.then, %for.cond
  ret void, !dbg !2526
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @flow_loop_free(%struct.loop* %loop) #0 !dbg !2527 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %exit = alloca %struct.loop_exit*, align 8
  %next = alloca %struct.loop_exit*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2530, metadata !DIExpression()), !dbg !2531
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %exit, metadata !2532, metadata !DIExpression()), !dbg !2533
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %next, metadata !2534, metadata !DIExpression()), !dbg !2535
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2536
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !2536
  call void @VEC_loop_p_gc_free(%struct.VEC_loop_p_gc** %superloops), !dbg !2536
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2537
  %exits = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 18, !dbg !2539
  %2 = load %struct.loop_exit*, %struct.loop_exit** %exits, align 8, !dbg !2539
  %next1 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %2, i32 0, i32 2, !dbg !2540
  %3 = load %struct.loop_exit*, %struct.loop_exit** %next1, align 8, !dbg !2540
  store %struct.loop_exit* %3, %struct.loop_exit** %exit, align 8, !dbg !2541
  br label %for.cond, !dbg !2542

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !2543
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2545
  %exits2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 18, !dbg !2546
  %6 = load %struct.loop_exit*, %struct.loop_exit** %exits2, align 8, !dbg !2546
  %cmp = icmp ne %struct.loop_exit* %4, %6, !dbg !2547
  br i1 %cmp, label %for.body, label %for.end, !dbg !2548

for.body:                                         ; preds = %for.cond
  %7 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !2549
  %next3 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %7, i32 0, i32 2, !dbg !2551
  %8 = load %struct.loop_exit*, %struct.loop_exit** %next3, align 8, !dbg !2551
  store %struct.loop_exit* %8, %struct.loop_exit** %next, align 8, !dbg !2552
  %9 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !2553
  %10 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !2554
  %next4 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %10, i32 0, i32 2, !dbg !2555
  store %struct.loop_exit* %9, %struct.loop_exit** %next4, align 8, !dbg !2556
  %11 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !2557
  %12 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !2558
  %prev = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %12, i32 0, i32 1, !dbg !2559
  store %struct.loop_exit* %11, %struct.loop_exit** %prev, align 8, !dbg !2560
  br label %for.inc, !dbg !2561

for.inc:                                          ; preds = %for.body
  %13 = load %struct.loop_exit*, %struct.loop_exit** %next, align 8, !dbg !2562
  store %struct.loop_exit* %13, %struct.loop_exit** %exit, align 8, !dbg !2563
  br label %for.cond, !dbg !2564, !llvm.loop !2565

for.end:                                          ; preds = %for.cond
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2567
  %exits5 = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 18, !dbg !2568
  %15 = load %struct.loop_exit*, %struct.loop_exit** %exits5, align 8, !dbg !2568
  %16 = bitcast %struct.loop_exit* %15 to i8*, !dbg !2567
  call void @ggc_free(i8* %16), !dbg !2569
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2570
  %18 = bitcast %struct.loop* %17 to i8*, !dbg !2570
  call void @ggc_free(i8* %18), !dbg !2571
  ret void, !dbg !2572
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_loop_p_gc_free(%struct.VEC_loop_p_gc** %vec_) #0 !dbg !2573 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_gc**, align 8
  store %struct.VEC_loop_p_gc** %vec_, %struct.VEC_loop_p_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_gc*** %vec_.addr, metadata !2577, metadata !DIExpression()), !dbg !2578
  %0 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !2579
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %0, align 8, !dbg !2579
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !2579
  br i1 %tobool, label %if.then, label %if.end, !dbg !2578

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !2579
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %2, align 8, !dbg !2579
  %4 = bitcast %struct.VEC_loop_p_gc* %3 to i8*, !dbg !2579
  call void @ggc_free(i8* %4), !dbg !2579
  br label %if.end, !dbg !2579

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !2578
  store %struct.VEC_loop_p_gc* null, %struct.VEC_loop_p_gc** %5, align 8, !dbg !2578
  ret void, !dbg !2578
}

declare dso_local void @ggc_free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @flow_loops_free(%struct.loops* %loops) #0 !dbg !2581 {
entry:
  %loops.addr = alloca %struct.loops*, align 8
  %i = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  store %struct.loops* %loops, %struct.loops** %loops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loops** %loops.addr, metadata !2584, metadata !DIExpression()), !dbg !2585
  %0 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !2586
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %0, i32 0, i32 1, !dbg !2588
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !2588
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !2586
  br i1 %tobool, label %if.then, label %if.end8, !dbg !2589

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2590, metadata !DIExpression()), !dbg !2592
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2593, metadata !DIExpression()), !dbg !2594
  store i32 0, i32* %i, align 4, !dbg !2595
  br label %for.cond, !dbg !2597

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !2598
  %larray1 = getelementptr inbounds %struct.loops, %struct.loops* %2, i32 0, i32 1, !dbg !2598
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray1, align 8, !dbg !2598
  %tobool2 = icmp ne %struct.VEC_loop_p_gc* %3, null, !dbg !2598
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !2598

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !2598
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !2598
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !2598
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !2598
  br label %cond.end, !dbg !2598

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2598

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2598
  %6 = load i32, i32* %i, align 4, !dbg !2598
  %call = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond, i32 %6, %struct.loop** %loop), !dbg !2598
  %tobool4 = icmp ne i32 %call, 0, !dbg !2600
  br i1 %tobool4, label %for.body, label %for.end, !dbg !2600

for.body:                                         ; preds = %cond.end
  %7 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2601
  %tobool5 = icmp ne %struct.loop* %7, null, !dbg !2601
  br i1 %tobool5, label %if.end, label %if.then6, !dbg !2604

if.then6:                                         ; preds = %for.body
  br label %for.inc, !dbg !2605

if.end:                                           ; preds = %for.body
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2606
  call void @flow_loop_free(%struct.loop* %8), !dbg !2607
  br label %for.inc, !dbg !2608

for.inc:                                          ; preds = %if.end, %if.then6
  %9 = load i32, i32* %i, align 4, !dbg !2609
  %inc = add i32 %9, 1, !dbg !2609
  store i32 %inc, i32* %i, align 4, !dbg !2609
  br label %for.cond, !dbg !2610, !llvm.loop !2611

for.end:                                          ; preds = %cond.end
  %10 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !2613
  %larray7 = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !2613
  call void @VEC_loop_p_gc_free(%struct.VEC_loop_p_gc** %larray7), !dbg !2613
  br label %if.end8, !dbg !2614

if.end8:                                          ; preds = %for.end, %entry
  ret void, !dbg !2615
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !2616 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !2619, metadata !DIExpression()), !dbg !2620
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2621, metadata !DIExpression()), !dbg !2620
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !2622, metadata !DIExpression()), !dbg !2620
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2623
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !2623
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2623

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2623
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2623
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !2623
  %3 = load i32, i32* %num, align 8, !dbg !2623
  %cmp = icmp ult i32 %1, %3, !dbg !2623
  br i1 %cmp, label %if.then, label %if.else, !dbg !2620

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2625
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !2625
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !2625
  %idxprom = zext i32 %5 to i64, !dbg !2625
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !2625
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !2625
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !2625
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !2625
  store i32 1, i32* %retval, align 4, !dbg !2625
  br label %return, !dbg !2625

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !2627
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !2627
  store i32 0, i32* %retval, align 4, !dbg !2627
  br label %return, !dbg !2627

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2620
  ret i32 %9, !dbg !2620
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @flow_loop_nodes_find(%struct.basic_block_def* %header, %struct.loop* %loop) #0 !dbg !2629 {
entry:
  %header.addr = alloca %struct.basic_block_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %stack = alloca %struct.VEC_basic_block_heap*, align 8
  %num_nodes = alloca i32, align 4
  %latch = alloca %struct.edge_def*, align 8
  %latch_ei = alloca %struct.edge_iterator, align 8
  %depth = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  %node = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp25 = alloca %struct.edge_iterator, align 8
  %ancestor = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %header, %struct.basic_block_def** %header.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %header.addr, metadata !2632, metadata !DIExpression()), !dbg !2633
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2634, metadata !DIExpression()), !dbg !2635
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %stack, metadata !2636, metadata !DIExpression()), !dbg !2637
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %stack, align 8, !dbg !2637
  call void @llvm.dbg.declare(metadata i32* %num_nodes, metadata !2638, metadata !DIExpression()), !dbg !2639
  store i32 1, i32* %num_nodes, align 4, !dbg !2639
  call void @llvm.dbg.declare(metadata %struct.edge_def** %latch, metadata !2640, metadata !DIExpression()), !dbg !2641
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %latch_ei, metadata !2642, metadata !DIExpression()), !dbg !2643
  call void @llvm.dbg.declare(metadata i32* %depth, metadata !2644, metadata !DIExpression()), !dbg !2645
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2646
  %call = call i32 @loop_depth(%struct.loop* %0), !dbg !2647
  store i32 %call, i32* %depth, align 4, !dbg !2645
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2648
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %header.addr, align 8, !dbg !2649
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !2650
  store %struct.loop* %1, %struct.loop** %loop_father, align 8, !dbg !2651
  %3 = load i32, i32* %depth, align 4, !dbg !2652
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %header.addr, align 8, !dbg !2653
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 10, !dbg !2654
  store i32 %3, i32* %loop_depth, align 4, !dbg !2655
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2656
  %header1 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 2, !dbg !2656
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %header1, align 8, !dbg !2656
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 0, !dbg !2656
  %call2 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !2656
  %7 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2656
  %8 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %7, i32 0, i32 0, !dbg !2656
  %9 = extractvalue { i32, %struct.VEC_edge_gc** } %call2, 0, !dbg !2656
  store i32 %9, i32* %8, align 8, !dbg !2656
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %7, i32 0, i32 1, !dbg !2656
  %11 = extractvalue { i32, %struct.VEC_edge_gc** } %call2, 1, !dbg !2656
  store %struct.VEC_edge_gc** %11, %struct.VEC_edge_gc*** %10, align 8, !dbg !2656
  %12 = bitcast %struct.edge_iterator* %latch_ei to i8*, !dbg !2656
  %13 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2656
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 16, i1 false), !dbg !2656
  br label %for.cond, !dbg !2656

for.cond:                                         ; preds = %for.inc41, %entry
  %14 = bitcast %struct.edge_iterator* %latch_ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2658
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 0, !dbg !2658
  %16 = load i32, i32* %15, align 8, !dbg !2658
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 1, !dbg !2658
  %18 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %17, align 8, !dbg !2658
  %call3 = call zeroext i8 @ei_cond(i32 %16, %struct.VEC_edge_gc** %18, %struct.edge_def** %latch), !dbg !2658
  %tobool = icmp ne i8 %call3, 0, !dbg !2656
  br i1 %tobool, label %for.body, label %for.end42, !dbg !2656

for.body:                                         ; preds = %for.cond
  %19 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !2660
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 0, !dbg !2663
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2663
  %loop_father4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 3, !dbg !2664
  %21 = load %struct.loop*, %struct.loop** %loop_father4, align 8, !dbg !2664
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2665
  %cmp = icmp eq %struct.loop* %21, %22, !dbg !2666
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2667

lor.lhs.false:                                    ; preds = %for.body
  %23 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !2668
  %src5 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 0, !dbg !2669
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %src5, align 8, !dbg !2669
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2670
  %header6 = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 2, !dbg !2671
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %header6, align 8, !dbg !2671
  %call7 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %24, %struct.basic_block_def* %26), !dbg !2672
  %tobool8 = icmp ne i8 %call7, 0, !dbg !2672
  br i1 %tobool8, label %if.end, label %if.then, !dbg !2673

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.inc41, !dbg !2674

if.end:                                           ; preds = %lor.lhs.false
  %27 = load i32, i32* %num_nodes, align 4, !dbg !2675
  %inc = add nsw i32 %27, 1, !dbg !2675
  store i32 %inc, i32* %num_nodes, align 4, !dbg !2675
  %28 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !2676
  %src9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 0, !dbg !2676
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %src9, align 8, !dbg !2676
  %call10 = call %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %stack, %struct.basic_block_def* %29), !dbg !2676
  %30 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2677
  %31 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !2678
  %src11 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 0, !dbg !2679
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %src11, align 8, !dbg !2679
  %loop_father12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 3, !dbg !2680
  store %struct.loop* %30, %struct.loop** %loop_father12, align 8, !dbg !2681
  %33 = load i32, i32* %depth, align 4, !dbg !2682
  %34 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !2683
  %src13 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 0, !dbg !2684
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %src13, align 8, !dbg !2684
  %loop_depth14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 10, !dbg !2685
  store i32 %33, i32* %loop_depth14, align 4, !dbg !2686
  br label %while.cond, !dbg !2687

while.cond:                                       ; preds = %for.end, %if.end
  %36 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %stack, align 8, !dbg !2688
  %tobool15 = icmp ne %struct.VEC_basic_block_heap* %36, null, !dbg !2688
  br i1 %tobool15, label %cond.true, label %cond.false, !dbg !2688

cond.true:                                        ; preds = %while.cond
  %37 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %stack, align 8, !dbg !2688
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %37, i32 0, i32 0, !dbg !2688
  br label %cond.end, !dbg !2688

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !2688

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2688
  %call16 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !2688
  %cmp17 = icmp eq i32 %call16, 0, !dbg !2688
  %lnot = xor i1 %cmp17, true, !dbg !2689
  br i1 %lnot, label %while.body, label %while.end, !dbg !2687

while.body:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %node, metadata !2690, metadata !DIExpression()), !dbg !2692
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2693, metadata !DIExpression()), !dbg !2694
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2695, metadata !DIExpression()), !dbg !2696
  %38 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %stack, align 8, !dbg !2697
  %tobool18 = icmp ne %struct.VEC_basic_block_heap* %38, null, !dbg !2697
  br i1 %tobool18, label %cond.true19, label %cond.false21, !dbg !2697

cond.true19:                                      ; preds = %while.body
  %39 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %stack, align 8, !dbg !2697
  %base20 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %39, i32 0, i32 0, !dbg !2697
  br label %cond.end22, !dbg !2697

cond.false21:                                     ; preds = %while.body
  br label %cond.end22, !dbg !2697

cond.end22:                                       ; preds = %cond.false21, %cond.true19
  %cond23 = phi %struct.VEC_basic_block_base* [ %base20, %cond.true19 ], [ null, %cond.false21 ], !dbg !2697
  %call24 = call %struct.basic_block_def* @VEC_basic_block_base_pop(%struct.VEC_basic_block_base* %cond23), !dbg !2697
  store %struct.basic_block_def* %call24, %struct.basic_block_def** %node, align 8, !dbg !2698
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %node, align 8, !dbg !2699
  %preds26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 0, !dbg !2699
  %call27 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds26), !dbg !2699
  %41 = bitcast %struct.edge_iterator* %tmp25 to { i32, %struct.VEC_edge_gc** }*, !dbg !2699
  %42 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %41, i32 0, i32 0, !dbg !2699
  %43 = extractvalue { i32, %struct.VEC_edge_gc** } %call27, 0, !dbg !2699
  store i32 %43, i32* %42, align 8, !dbg !2699
  %44 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %41, i32 0, i32 1, !dbg !2699
  %45 = extractvalue { i32, %struct.VEC_edge_gc** } %call27, 1, !dbg !2699
  store %struct.VEC_edge_gc** %45, %struct.VEC_edge_gc*** %44, align 8, !dbg !2699
  %46 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2699
  %47 = bitcast %struct.edge_iterator* %tmp25 to i8*, !dbg !2699
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false), !dbg !2699
  br label %for.cond28, !dbg !2699

for.cond28:                                       ; preds = %for.inc, %cond.end22
  %48 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2701
  %49 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %48, i32 0, i32 0, !dbg !2701
  %50 = load i32, i32* %49, align 8, !dbg !2701
  %51 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %48, i32 0, i32 1, !dbg !2701
  %52 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %51, align 8, !dbg !2701
  %call29 = call zeroext i8 @ei_cond(i32 %50, %struct.VEC_edge_gc** %52, %struct.edge_def** %e), !dbg !2701
  %tobool30 = icmp ne i8 %call29, 0, !dbg !2699
  br i1 %tobool30, label %for.body31, label %for.end, !dbg !2699

for.body31:                                       ; preds = %for.cond28
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ancestor, metadata !2703, metadata !DIExpression()), !dbg !2705
  %53 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2706
  %src32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %53, i32 0, i32 0, !dbg !2707
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %src32, align 8, !dbg !2707
  store %struct.basic_block_def* %54, %struct.basic_block_def** %ancestor, align 8, !dbg !2705
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %ancestor, align 8, !dbg !2708
  %loop_father33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 3, !dbg !2710
  %56 = load %struct.loop*, %struct.loop** %loop_father33, align 8, !dbg !2710
  %57 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2711
  %cmp34 = icmp ne %struct.loop* %56, %57, !dbg !2712
  br i1 %cmp34, label %if.then35, label %if.end40, !dbg !2713

if.then35:                                        ; preds = %for.body31
  %58 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2714
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %ancestor, align 8, !dbg !2716
  %loop_father36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 3, !dbg !2717
  store %struct.loop* %58, %struct.loop** %loop_father36, align 8, !dbg !2718
  %60 = load i32, i32* %depth, align 4, !dbg !2719
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %ancestor, align 8, !dbg !2720
  %loop_depth37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 10, !dbg !2721
  store i32 %60, i32* %loop_depth37, align 4, !dbg !2722
  %62 = load i32, i32* %num_nodes, align 4, !dbg !2723
  %inc38 = add nsw i32 %62, 1, !dbg !2723
  store i32 %inc38, i32* %num_nodes, align 4, !dbg !2723
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %ancestor, align 8, !dbg !2724
  %call39 = call %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %stack, %struct.basic_block_def* %63), !dbg !2724
  br label %if.end40, !dbg !2725

if.end40:                                         ; preds = %if.then35, %for.body31
  br label %for.inc, !dbg !2726

for.inc:                                          ; preds = %if.end40
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2701
  br label %for.cond28, !dbg !2701, !llvm.loop !2727

for.end:                                          ; preds = %for.cond28
  br label %while.cond, !dbg !2687, !llvm.loop !2729

while.end:                                        ; preds = %cond.end
  br label %for.inc41, !dbg !2731

for.inc41:                                        ; preds = %while.end, %if.then
  call void @ei_next(%struct.edge_iterator* %latch_ei), !dbg !2658
  br label %for.cond, !dbg !2658, !llvm.loop !2732

for.end42:                                        ; preds = %for.cond
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %stack), !dbg !2734
  %64 = load i32, i32* %num_nodes, align 4, !dbg !2735
  ret i32 %64, !dbg !2736
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !2737 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !2740, metadata !DIExpression()), !dbg !2741
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !2742, metadata !DIExpression()), !dbg !2743
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !2744
  store i32 0, i32* %index, align 8, !dbg !2745
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !2746
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !2747
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !2748
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !2749
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !2749
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !2749
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !2750 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2753, metadata !DIExpression()), !dbg !2754
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !2755, metadata !DIExpression()), !dbg !2756
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2757
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2757
  %5 = load i32, i32* %4, align 8, !dbg !2757
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2757
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2757
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2757
  %tobool = icmp ne i8 %call, 0, !dbg !2757
  br i1 %tobool, label %if.else, label %if.then, !dbg !2759

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2760
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !2760
  %10 = load i32, i32* %9, align 8, !dbg !2760
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !2760
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !2760
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !2760
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2762
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !2763
  store i8 1, i8* %retval, align 1, !dbg !2764
  br label %return, !dbg !2764

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2765
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !2767
  store i8 0, i8* %retval, align 1, !dbg !2768
  br label %return, !dbg !2768

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !2769
  ret i8 %15, !dbg !2769
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %vec_, %struct.basic_block_def* %obj_) #0 !dbg !2770 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !2774, metadata !DIExpression()), !dbg !2775
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !2776, metadata !DIExpression()), !dbg !2775
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2775
  %call = call i32 @VEC_basic_block_heap_reserve(%struct.VEC_basic_block_heap** %0, i32 1), !dbg !2775
  %1 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2775
  %2 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %1, align 8, !dbg !2775
  %tobool = icmp ne %struct.VEC_basic_block_heap* %2, null, !dbg !2775
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2775

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2775
  %4 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %3, align 8, !dbg !2775
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %4, i32 0, i32 0, !dbg !2775
  br label %cond.end, !dbg !2775

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2775

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2775
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !2775
  %call1 = call %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %cond, %struct.basic_block_def* %5), !dbg !2775
  ret %struct.basic_block_def** %call1, !dbg !2775
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %vec_) #0 !dbg !2777 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !2782, metadata !DIExpression()), !dbg !2783
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2783
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !2783
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2783

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2783
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !2783
  %2 = load i32, i32* %num, align 8, !dbg !2783
  br label %cond.end, !dbg !2783

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2783

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2783
  ret i32 %cond, !dbg !2783
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_pop(%struct.VEC_basic_block_base* %vec_) #0 !dbg !2784 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %obj_ = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !2788, metadata !DIExpression()), !dbg !2789
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_, metadata !2790, metadata !DIExpression()), !dbg !2789
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2789
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %0, i32 0, i32 0, !dbg !2789
  %1 = load i32, i32* %num, align 8, !dbg !2789
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2789
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 2, !dbg !2789
  %3 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2789
  %num1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %3, i32 0, i32 0, !dbg !2789
  %4 = load i32, i32* %num1, align 8, !dbg !2789
  %dec = add i32 %4, -1, !dbg !2789
  store i32 %dec, i32* %num1, align 8, !dbg !2789
  %idxprom = zext i32 %dec to i64, !dbg !2789
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !2789
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2789
  store %struct.basic_block_def* %5, %struct.basic_block_def** %obj_, align 8, !dbg !2789
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_, align 8, !dbg !2789
  ret %struct.basic_block_def* %6, !dbg !2789
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !2791 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !2795, metadata !DIExpression()), !dbg !2796
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2797
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !2797
  %1 = load i32, i32* %index, align 8, !dbg !2797
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2797
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !2797
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2797
  %5 = load i32, i32* %4, align 8, !dbg !2797
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2797
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2797
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2797
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !2797
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2797

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2797
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !2797
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !2797
  %11 = load i32, i32* %10, align 8, !dbg !2797
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !2797
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !2797
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !2797
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !2797
  br label %cond.end, !dbg !2797

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2797

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2797
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2797
  %cmp = icmp ult i32 %1, %call2, !dbg !2797
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !2797

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2797
  br label %cond.end5, !dbg !2797

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2797

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !2797
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2798
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !2799
  %15 = load i32, i32* %index7, align 8, !dbg !2800
  %inc = add i32 %15, 1, !dbg !2800
  store i32 %inc, i32* %index7, align 8, !dbg !2800
  ret void, !dbg !2801
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %vec_) #0 !dbg !2802 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !2805, metadata !DIExpression()), !dbg !2806
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2807
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !2807
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !2807
  br i1 %tobool, label %if.then, label %if.end, !dbg !2806

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2807
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !2807
  %4 = bitcast %struct.VEC_basic_block_heap* %3 to i8*, !dbg !2807
  call void @free(i8* %4), !dbg !2807
  br label %if.end, !dbg !2807

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2806
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %5, align 8, !dbg !2806
  ret void, !dbg !2806
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @flow_loop_tree_node_add(%struct.loop* %father, %struct.loop* %loop) #0 !dbg !2809 {
entry:
  %father.addr = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %father, %struct.loop** %father.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %father.addr, metadata !2812, metadata !DIExpression()), !dbg !2813
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2814, metadata !DIExpression()), !dbg !2815
  %0 = load %struct.loop*, %struct.loop** %father.addr, align 8, !dbg !2816
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 8, !dbg !2817
  %1 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !2817
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2818
  %next = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 9, !dbg !2819
  store %struct.loop* %1, %struct.loop** %next, align 8, !dbg !2820
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2821
  %4 = load %struct.loop*, %struct.loop** %father.addr, align 8, !dbg !2822
  %inner1 = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 8, !dbg !2823
  store %struct.loop* %3, %struct.loop** %inner1, align 8, !dbg !2824
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2825
  %6 = load %struct.loop*, %struct.loop** %father.addr, align 8, !dbg !2826
  call void @establish_preds(%struct.loop* %5, %struct.loop* %6), !dbg !2827
  ret void, !dbg !2828
}

; Function Attrs: noinline nounwind uwtable
define internal void @establish_preds(%struct.loop* %loop, %struct.loop* %father) #0 !dbg !2829 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %father.addr = alloca %struct.loop*, align 8
  %ploop = alloca %struct.loop*, align 8
  %depth = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2830, metadata !DIExpression()), !dbg !2831
  store %struct.loop* %father, %struct.loop** %father.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %father.addr, metadata !2832, metadata !DIExpression()), !dbg !2833
  call void @llvm.dbg.declare(metadata %struct.loop** %ploop, metadata !2834, metadata !DIExpression()), !dbg !2835
  call void @llvm.dbg.declare(metadata i32* %depth, metadata !2836, metadata !DIExpression()), !dbg !2837
  %0 = load %struct.loop*, %struct.loop** %father.addr, align 8, !dbg !2838
  %call = call i32 @loop_depth(%struct.loop* %0), !dbg !2839
  %add = add i32 %call, 1, !dbg !2840
  store i32 %add, i32* %depth, align 4, !dbg !2837
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2841, metadata !DIExpression()), !dbg !2842
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2843
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 7, !dbg !2843
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !2843
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !2843
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2843

cond.true:                                        ; preds = %entry
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2843
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 7, !dbg !2843
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !2843
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %4, i32 0, i32 0, !dbg !2843
  br label %cond.end, !dbg !2843

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2843

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2843
  call void @VEC_loop_p_base_truncate(%struct.VEC_loop_p_base* %cond, i32 0), !dbg !2843
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2844
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !2844
  %6 = load i32, i32* %depth, align 4, !dbg !2844
  %call3 = call i32 @VEC_loop_p_gc_reserve(%struct.VEC_loop_p_gc** %superloops2, i32 %6), !dbg !2844
  store i32 0, i32* %i, align 4, !dbg !2845
  br label %for.cond, !dbg !2847

for.cond:                                         ; preds = %for.inc, %cond.end
  %7 = load %struct.loop*, %struct.loop** %father.addr, align 8, !dbg !2848
  %superloops4 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !2848
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops4, align 8, !dbg !2848
  %tobool5 = icmp ne %struct.VEC_loop_p_gc* %8, null, !dbg !2848
  br i1 %tobool5, label %cond.true6, label %cond.false9, !dbg !2848

cond.true6:                                       ; preds = %for.cond
  %9 = load %struct.loop*, %struct.loop** %father.addr, align 8, !dbg !2848
  %superloops7 = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 7, !dbg !2848
  %10 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops7, align 8, !dbg !2848
  %base8 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %10, i32 0, i32 0, !dbg !2848
  br label %cond.end10, !dbg !2848

cond.false9:                                      ; preds = %for.cond
  br label %cond.end10, !dbg !2848

cond.end10:                                       ; preds = %cond.false9, %cond.true6
  %cond11 = phi %struct.VEC_loop_p_base* [ %base8, %cond.true6 ], [ null, %cond.false9 ], !dbg !2848
  %11 = load i32, i32* %i, align 4, !dbg !2848
  %call12 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond11, i32 %11, %struct.loop** %ploop), !dbg !2848
  %tobool13 = icmp ne i32 %call12, 0, !dbg !2850
  br i1 %tobool13, label %for.body, label %for.end, !dbg !2850

for.body:                                         ; preds = %cond.end10
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2851
  %superloops14 = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 7, !dbg !2851
  %13 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops14, align 8, !dbg !2851
  %tobool15 = icmp ne %struct.VEC_loop_p_gc* %13, null, !dbg !2851
  br i1 %tobool15, label %cond.true16, label %cond.false19, !dbg !2851

cond.true16:                                      ; preds = %for.body
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2851
  %superloops17 = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 7, !dbg !2851
  %15 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops17, align 8, !dbg !2851
  %base18 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %15, i32 0, i32 0, !dbg !2851
  br label %cond.end20, !dbg !2851

cond.false19:                                     ; preds = %for.body
  br label %cond.end20, !dbg !2851

cond.end20:                                       ; preds = %cond.false19, %cond.true16
  %cond21 = phi %struct.VEC_loop_p_base* [ %base18, %cond.true16 ], [ null, %cond.false19 ], !dbg !2851
  %16 = load %struct.loop*, %struct.loop** %ploop, align 8, !dbg !2851
  %call22 = call %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %cond21, %struct.loop* %16), !dbg !2851
  br label %for.inc, !dbg !2851

for.inc:                                          ; preds = %cond.end20
  %17 = load i32, i32* %i, align 4, !dbg !2852
  %inc = add i32 %17, 1, !dbg !2852
  store i32 %inc, i32* %i, align 4, !dbg !2852
  br label %for.cond, !dbg !2853, !llvm.loop !2854

for.end:                                          ; preds = %cond.end10
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2856
  %superloops23 = getelementptr inbounds %struct.loop, %struct.loop* %18, i32 0, i32 7, !dbg !2856
  %19 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops23, align 8, !dbg !2856
  %tobool24 = icmp ne %struct.VEC_loop_p_gc* %19, null, !dbg !2856
  br i1 %tobool24, label %cond.true25, label %cond.false28, !dbg !2856

cond.true25:                                      ; preds = %for.end
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2856
  %superloops26 = getelementptr inbounds %struct.loop, %struct.loop* %20, i32 0, i32 7, !dbg !2856
  %21 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops26, align 8, !dbg !2856
  %base27 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %21, i32 0, i32 0, !dbg !2856
  br label %cond.end29, !dbg !2856

cond.false28:                                     ; preds = %for.end
  br label %cond.end29, !dbg !2856

cond.end29:                                       ; preds = %cond.false28, %cond.true25
  %cond30 = phi %struct.VEC_loop_p_base* [ %base27, %cond.true25 ], [ null, %cond.false28 ], !dbg !2856
  %22 = load %struct.loop*, %struct.loop** %father.addr, align 8, !dbg !2856
  %call31 = call %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %cond30, %struct.loop* %22), !dbg !2856
  %23 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2857
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %23, i32 0, i32 8, !dbg !2859
  %24 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !2859
  store %struct.loop* %24, %struct.loop** %ploop, align 8, !dbg !2860
  br label %for.cond32, !dbg !2861

for.cond32:                                       ; preds = %for.inc35, %cond.end29
  %25 = load %struct.loop*, %struct.loop** %ploop, align 8, !dbg !2862
  %tobool33 = icmp ne %struct.loop* %25, null, !dbg !2864
  br i1 %tobool33, label %for.body34, label %for.end36, !dbg !2864

for.body34:                                       ; preds = %for.cond32
  %26 = load %struct.loop*, %struct.loop** %ploop, align 8, !dbg !2865
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2866
  call void @establish_preds(%struct.loop* %26, %struct.loop* %27), !dbg !2867
  br label %for.inc35, !dbg !2867

for.inc35:                                        ; preds = %for.body34
  %28 = load %struct.loop*, %struct.loop** %ploop, align 8, !dbg !2868
  %next = getelementptr inbounds %struct.loop, %struct.loop* %28, i32 0, i32 9, !dbg !2869
  %29 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !2869
  store %struct.loop* %29, %struct.loop** %ploop, align 8, !dbg !2870
  br label %for.cond32, !dbg !2871, !llvm.loop !2872

for.end36:                                        ; preds = %for.cond32
  ret void, !dbg !2874
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @flow_loop_tree_node_remove(%struct.loop* %loop) #0 !dbg !2875 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %prev = alloca %struct.loop*, align 8
  %father = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2876, metadata !DIExpression()), !dbg !2877
  call void @llvm.dbg.declare(metadata %struct.loop** %prev, metadata !2878, metadata !DIExpression()), !dbg !2879
  call void @llvm.dbg.declare(metadata %struct.loop** %father, metadata !2880, metadata !DIExpression()), !dbg !2881
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2882
  %call = call %struct.loop* @loop_outer(%struct.loop* %0), !dbg !2883
  store %struct.loop* %call, %struct.loop** %father, align 8, !dbg !2884
  %1 = load %struct.loop*, %struct.loop** %father, align 8, !dbg !2885
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 8, !dbg !2887
  %2 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !2887
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2888
  %cmp = icmp eq %struct.loop* %2, %3, !dbg !2889
  br i1 %cmp, label %if.then, label %if.else, !dbg !2890

if.then:                                          ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2891
  %next = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 9, !dbg !2892
  %5 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !2892
  %6 = load %struct.loop*, %struct.loop** %father, align 8, !dbg !2893
  %inner1 = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 8, !dbg !2894
  store %struct.loop* %5, %struct.loop** %inner1, align 8, !dbg !2895
  br label %if.end, !dbg !2893

if.else:                                          ; preds = %entry
  %7 = load %struct.loop*, %struct.loop** %father, align 8, !dbg !2896
  %inner2 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 8, !dbg !2899
  %8 = load %struct.loop*, %struct.loop** %inner2, align 8, !dbg !2899
  store %struct.loop* %8, %struct.loop** %prev, align 8, !dbg !2900
  br label %for.cond, !dbg !2901

for.cond:                                         ; preds = %for.inc, %if.else
  %9 = load %struct.loop*, %struct.loop** %prev, align 8, !dbg !2902
  %next3 = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 9, !dbg !2904
  %10 = load %struct.loop*, %struct.loop** %next3, align 8, !dbg !2904
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2905
  %cmp4 = icmp ne %struct.loop* %10, %11, !dbg !2906
  br i1 %cmp4, label %for.body, label %for.end, !dbg !2907

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !2908

for.inc:                                          ; preds = %for.body
  %12 = load %struct.loop*, %struct.loop** %prev, align 8, !dbg !2909
  %next5 = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 9, !dbg !2910
  %13 = load %struct.loop*, %struct.loop** %next5, align 8, !dbg !2910
  store %struct.loop* %13, %struct.loop** %prev, align 8, !dbg !2911
  br label %for.cond, !dbg !2912, !llvm.loop !2913

for.end:                                          ; preds = %for.cond
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2915
  %next6 = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 9, !dbg !2916
  %15 = load %struct.loop*, %struct.loop** %next6, align 8, !dbg !2916
  %16 = load %struct.loop*, %struct.loop** %prev, align 8, !dbg !2917
  %next7 = getelementptr inbounds %struct.loop, %struct.loop* %16, i32 0, i32 9, !dbg !2918
  store %struct.loop* %15, %struct.loop** %next7, align 8, !dbg !2919
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2920
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 7, !dbg !2920
  %18 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !2920
  %tobool = icmp ne %struct.VEC_loop_p_gc* %18, null, !dbg !2920
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2920

cond.true:                                        ; preds = %if.end
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2920
  %superloops8 = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 7, !dbg !2920
  %20 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops8, align 8, !dbg !2920
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %20, i32 0, i32 0, !dbg !2920
  br label %cond.end, !dbg !2920

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !2920

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2920
  call void @VEC_loop_p_base_truncate(%struct.VEC_loop_p_base* %cond, i32 0), !dbg !2920
  ret void, !dbg !2921
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_loop_p_base_truncate(%struct.VEC_loop_p_base* %vec_, i32 %size_) #0 !dbg !2922 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !2926, metadata !DIExpression()), !dbg !2927
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !2928, metadata !DIExpression()), !dbg !2927
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2927
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !2927
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2927

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2927
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !2927
  %2 = load i32, i32* %num, align 8, !dbg !2927
  %3 = load i32, i32* %size_.addr, align 4, !dbg !2927
  %cmp = icmp uge i32 %2, %3, !dbg !2927
  %conv = zext i1 %cmp to i32, !dbg !2927
  br label %cond.end, !dbg !2927

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %size_.addr, align 4, !dbg !2927
  %tobool1 = icmp ne i32 %4, 0, !dbg !2927
  %lnot = xor i1 %tobool1, true, !dbg !2927
  %lnot.ext = zext i1 %lnot to i32, !dbg !2927
  br label %cond.end, !dbg !2927

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !2927
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2929
  %tobool2 = icmp ne %struct.VEC_loop_p_base* %5, null, !dbg !2929
  br i1 %tobool2, label %if.then, label %if.end, !dbg !2927

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* %size_.addr, align 4, !dbg !2929
  %7 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2929
  %num3 = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %7, i32 0, i32 0, !dbg !2929
  store i32 %6, i32* %num3, align 8, !dbg !2929
  br label %if.end, !dbg !2929

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !2927
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.loop* @alloc_loop() #0 !dbg !2931 {
entry:
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2934, metadata !DIExpression()), !dbg !2935
  %call = call i8* @ggc_alloc_cleared_stat(i64 152), !dbg !2936
  %0 = bitcast i8* %call to %struct.loop*, !dbg !2936
  store %struct.loop* %0, %struct.loop** %loop, align 8, !dbg !2935
  %call1 = call i8* @ggc_alloc_cleared_stat(i64 32), !dbg !2937
  %1 = bitcast i8* %call1 to %struct.loop_exit*, !dbg !2937
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2938
  %exits = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 18, !dbg !2939
  store %struct.loop_exit* %1, %struct.loop_exit** %exits, align 8, !dbg !2940
  %3 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2941
  %exits2 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 18, !dbg !2942
  %4 = load %struct.loop_exit*, %struct.loop_exit** %exits2, align 8, !dbg !2942
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2943
  %exits3 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 18, !dbg !2944
  %6 = load %struct.loop_exit*, %struct.loop_exit** %exits3, align 8, !dbg !2944
  %prev = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %6, i32 0, i32 1, !dbg !2945
  store %struct.loop_exit* %4, %struct.loop_exit** %prev, align 8, !dbg !2946
  %7 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2947
  %exits4 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 18, !dbg !2948
  %8 = load %struct.loop_exit*, %struct.loop_exit** %exits4, align 8, !dbg !2948
  %next = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %8, i32 0, i32 2, !dbg !2949
  store %struct.loop_exit* %4, %struct.loop_exit** %next, align 8, !dbg !2950
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2951
  %can_be_parallel = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 19, !dbg !2952
  store i8 0, i8* %can_be_parallel, align 8, !dbg !2953
  %10 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2954
  %single_iv = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 20, !dbg !2955
  store %union.tree_node* null, %union.tree_node** %single_iv, align 8, !dbg !2956
  %11 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2957
  ret %struct.loop* %11, !dbg !2958
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @flow_loops_find(%struct.loops* %loops) #0 !dbg !2959 {
entry:
  %retval = alloca i32, align 4
  %loops.addr = alloca %struct.loops*, align 8
  %b = alloca i32, align 4
  %num_loops = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %headers = alloca %struct.simple_bitmap_def*, align 8
  %dfs_order = alloca i32*, align 8
  %rc_order = alloca i32*, align 8
  %header = alloca %struct.basic_block_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp18 = alloca %struct.edge_iterator, align 8
  %latch = alloca %struct.basic_block_def*, align 8
  %loop = alloca %struct.loop*, align 8
  %ei76 = alloca %struct.edge_iterator, align 8
  %tmp112 = alloca %struct.edge_iterator, align 8
  %latch119 = alloca %struct.basic_block_def*, align 8
  store %struct.loops* %loops, %struct.loops** %loops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loops** %loops.addr, metadata !2962, metadata !DIExpression()), !dbg !2963
  call void @llvm.dbg.declare(metadata i32* %b, metadata !2964, metadata !DIExpression()), !dbg !2965
  call void @llvm.dbg.declare(metadata i32* %num_loops, metadata !2966, metadata !DIExpression()), !dbg !2967
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2968, metadata !DIExpression()), !dbg !2969
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %headers, metadata !2970, metadata !DIExpression()), !dbg !2982
  call void @llvm.dbg.declare(metadata i32** %dfs_order, metadata !2983, metadata !DIExpression()), !dbg !2984
  call void @llvm.dbg.declare(metadata i32** %rc_order, metadata !2985, metadata !DIExpression()), !dbg !2986
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %header, metadata !2987, metadata !DIExpression()), !dbg !2988
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2989, metadata !DIExpression()), !dbg !2990
  call void @calculate_dominance_info(i32 1), !dbg !2991
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2992
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2992
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2992
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2992
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 3, !dbg !2992
  %2 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !2992
  %cmp = icmp eq i32 %2, 2, !dbg !2994
  br i1 %cmp, label %if.then, label %if.end, !dbg !2995

if.then:                                          ; preds = %entry
  %3 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !2996
  call void @init_loops_structure(%struct.loops* %3, i32 1), !dbg !2998
  store i32 1, i32* %retval, align 4, !dbg !2999
  br label %return, !dbg !2999

if.end:                                           ; preds = %entry
  store i32* null, i32** %dfs_order, align 8, !dbg !3000
  store i32* null, i32** %rc_order, align 8, !dbg !3001
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3002
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3002
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3002
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3002
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 5, !dbg !3002
  %6 = load i32, i32* %x_last_basic_block, align 8, !dbg !3002
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %6), !dbg !3003
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** %headers, align 8, !dbg !3004
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %headers, align 8, !dbg !3005
  call void @sbitmap_zero(%struct.simple_bitmap_def* %7), !dbg !3006
  store i32 0, i32* %num_loops, align 4, !dbg !3007
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3008
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !3008
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !3008
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !3008
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 0, !dbg !3008
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3008
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 6, !dbg !3008
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3008
  store %struct.basic_block_def* %11, %struct.basic_block_def** %header, align 8, !dbg !3008
  br label %for.cond, !dbg !3008

for.cond:                                         ; preds = %for.inc38, %if.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3010
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3010
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !3010
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !3010
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !3010
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 1, !dbg !3010
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3010
  %cmp7 = icmp ne %struct.basic_block_def* %12, %15, !dbg !3010
  br i1 %cmp7, label %for.body, label %for.end40, !dbg !3008

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3012, metadata !DIExpression()), !dbg !3014
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3015
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 10, !dbg !3016
  store i32 0, i32* %loop_depth, align 4, !dbg !3017
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3018
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 0, !dbg !3018
  %call8 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !3018
  %18 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3018
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %18, i32 0, i32 0, !dbg !3018
  %20 = extractvalue { i32, %struct.VEC_edge_gc** } %call8, 0, !dbg !3018
  store i32 %20, i32* %19, align 8, !dbg !3018
  %21 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %18, i32 0, i32 1, !dbg !3018
  %22 = extractvalue { i32, %struct.VEC_edge_gc** } %call8, 1, !dbg !3018
  store %struct.VEC_edge_gc** %22, %struct.VEC_edge_gc*** %21, align 8, !dbg !3018
  %23 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3018
  %24 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3018
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 16, i1 false), !dbg !3018
  br label %for.cond9, !dbg !3018

for.cond9:                                        ; preds = %for.inc, %for.body
  %25 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3020
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %25, i32 0, i32 0, !dbg !3020
  %27 = load i32, i32* %26, align 8, !dbg !3020
  %28 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %25, i32 0, i32 1, !dbg !3020
  %29 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %28, align 8, !dbg !3020
  %call10 = call zeroext i8 @ei_cond(i32 %27, %struct.VEC_edge_gc** %29, %struct.edge_def** %e), !dbg !3020
  %tobool = icmp ne i8 %call10, 0, !dbg !3018
  br i1 %tobool, label %for.body11, label %for.end, !dbg !3018

for.body11:                                       ; preds = %for.cond9
  %30 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3022
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %30, i32 0, i32 7, !dbg !3024
  %31 = load i32, i32* %flags, align 8, !dbg !3024
  %and = and i32 %31, 2, !dbg !3025
  %tobool12 = icmp ne i32 %and, 0, !dbg !3025
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !3026

if.then13:                                        ; preds = %for.body11
  br label %for.end, !dbg !3027

if.end14:                                         ; preds = %for.body11
  br label %for.inc, !dbg !3028

for.inc:                                          ; preds = %if.end14
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3020
  br label %for.cond9, !dbg !3020, !llvm.loop !3029

for.end:                                          ; preds = %if.then13, %for.cond9
  %32 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3031
  %tobool15 = icmp ne %struct.edge_def* %32, null, !dbg !3031
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !3033

if.then16:                                        ; preds = %for.end
  br label %for.inc38, !dbg !3034

if.end17:                                         ; preds = %for.end
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3035
  %preds19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 0, !dbg !3035
  %call20 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds19), !dbg !3035
  %34 = bitcast %struct.edge_iterator* %tmp18 to { i32, %struct.VEC_edge_gc** }*, !dbg !3035
  %35 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %34, i32 0, i32 0, !dbg !3035
  %36 = extractvalue { i32, %struct.VEC_edge_gc** } %call20, 0, !dbg !3035
  store i32 %36, i32* %35, align 8, !dbg !3035
  %37 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %34, i32 0, i32 1, !dbg !3035
  %38 = extractvalue { i32, %struct.VEC_edge_gc** } %call20, 1, !dbg !3035
  store %struct.VEC_edge_gc** %38, %struct.VEC_edge_gc*** %37, align 8, !dbg !3035
  %39 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3035
  %40 = bitcast %struct.edge_iterator* %tmp18 to i8*, !dbg !3035
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 16, i1 false), !dbg !3035
  br label %for.cond21, !dbg !3035

for.cond21:                                       ; preds = %for.inc36, %if.end17
  %41 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3037
  %42 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %41, i32 0, i32 0, !dbg !3037
  %43 = load i32, i32* %42, align 8, !dbg !3037
  %44 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %41, i32 0, i32 1, !dbg !3037
  %45 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %44, align 8, !dbg !3037
  %call22 = call zeroext i8 @ei_cond(i32 %43, %struct.VEC_edge_gc** %45, %struct.edge_def** %e), !dbg !3037
  %tobool23 = icmp ne i8 %call22, 0, !dbg !3035
  br i1 %tobool23, label %for.body24, label %for.end37, !dbg !3035

for.body24:                                       ; preds = %for.cond21
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %latch, metadata !3039, metadata !DIExpression()), !dbg !3041
  %46 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3042
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 0, !dbg !3043
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3043
  store %struct.basic_block_def* %47, %struct.basic_block_def** %latch, align 8, !dbg !3041
  %48 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3044
  %flags25 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %48, i32 0, i32 7, !dbg !3044
  %49 = load i32, i32* %flags25, align 8, !dbg !3044
  %and26 = and i32 %49, 2, !dbg !3044
  %tobool27 = icmp ne i32 %and26, 0, !dbg !3044
  br i1 %tobool27, label %cond.true, label %cond.false, !dbg !3044

cond.true:                                        ; preds = %for.body24
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 424, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3044
  br label %cond.end, !dbg !3044

cond.false:                                       ; preds = %for.body24
  br label %cond.end, !dbg !3044

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3044
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3045
  %51 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3047
  %add.ptr28 = getelementptr inbounds %struct.function, %struct.function* %51, i64 0, !dbg !3047
  %cfg29 = getelementptr inbounds %struct.function, %struct.function* %add.ptr28, i32 0, i32 1, !dbg !3047
  %52 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg29, align 8, !dbg !3047
  %x_entry_block_ptr30 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %52, i32 0, i32 0, !dbg !3047
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr30, align 8, !dbg !3047
  %cmp31 = icmp ne %struct.basic_block_def* %50, %53, !dbg !3048
  br i1 %cmp31, label %land.lhs.true, label %if.end35, !dbg !3049

land.lhs.true:                                    ; preds = %cond.end
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3050
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3051
  %call32 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %54, %struct.basic_block_def* %55), !dbg !3052
  %conv = zext i8 %call32 to i32, !dbg !3052
  %tobool33 = icmp ne i32 %conv, 0, !dbg !3052
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !3053

if.then34:                                        ; preds = %land.lhs.true
  %56 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %headers, align 8, !dbg !3054
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3056
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 9, !dbg !3057
  %58 = load i32, i32* %index, align 8, !dbg !3057
  call void @SET_BIT(%struct.simple_bitmap_def* %56, i32 %58), !dbg !3058
  %59 = load i32, i32* %num_loops, align 4, !dbg !3059
  %inc = add nsw i32 %59, 1, !dbg !3059
  store i32 %inc, i32* %num_loops, align 4, !dbg !3059
  br label %if.end35, !dbg !3060

if.end35:                                         ; preds = %if.then34, %land.lhs.true, %cond.end
  br label %for.inc36, !dbg !3061

for.inc36:                                        ; preds = %if.end35
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3037
  br label %for.cond21, !dbg !3037, !llvm.loop !3062

for.end37:                                        ; preds = %for.cond21
  br label %for.inc38, !dbg !3064

for.inc38:                                        ; preds = %for.end37, %if.then16
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3010
  %next_bb39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 6, !dbg !3010
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb39, align 8, !dbg !3010
  store %struct.basic_block_def* %61, %struct.basic_block_def** %header, align 8, !dbg !3010
  br label %for.cond, !dbg !3010, !llvm.loop !3065

for.end40:                                        ; preds = %for.cond
  %62 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !3067
  %63 = load i32, i32* %num_loops, align 4, !dbg !3068
  %add = add nsw i32 %63, 1, !dbg !3069
  call void @init_loops_structure(%struct.loops* %62, i32 %add), !dbg !3070
  %64 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3071
  %add.ptr41 = getelementptr inbounds %struct.function, %struct.function* %64, i64 0, !dbg !3071
  %cfg42 = getelementptr inbounds %struct.function, %struct.function* %add.ptr41, i32 0, i32 1, !dbg !3071
  %65 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg42, align 8, !dbg !3071
  %x_entry_block_ptr43 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %65, i32 0, i32 0, !dbg !3071
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr43, align 8, !dbg !3071
  %next_bb44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %66, i32 0, i32 6, !dbg !3071
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb44, align 8, !dbg !3071
  store %struct.basic_block_def* %67, %struct.basic_block_def** %bb, align 8, !dbg !3071
  br label %for.cond45, !dbg !3071

for.cond45:                                       ; preds = %for.inc52, %for.end40
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3073
  %69 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3073
  %add.ptr46 = getelementptr inbounds %struct.function, %struct.function* %69, i64 0, !dbg !3073
  %cfg47 = getelementptr inbounds %struct.function, %struct.function* %add.ptr46, i32 0, i32 1, !dbg !3073
  %70 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg47, align 8, !dbg !3073
  %x_exit_block_ptr48 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %70, i32 0, i32 1, !dbg !3073
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr48, align 8, !dbg !3073
  %cmp49 = icmp ne %struct.basic_block_def* %68, %71, !dbg !3073
  br i1 %cmp49, label %for.body51, label %for.end54, !dbg !3071

for.body51:                                       ; preds = %for.cond45
  %72 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !3075
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %72, i32 0, i32 3, !dbg !3076
  %73 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !3076
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3077
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 3, !dbg !3078
  store %struct.loop* %73, %struct.loop** %loop_father, align 8, !dbg !3079
  br label %for.inc52, !dbg !3077

for.inc52:                                        ; preds = %for.body51
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3073
  %next_bb53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 6, !dbg !3073
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb53, align 8, !dbg !3073
  store %struct.basic_block_def* %76, %struct.basic_block_def** %bb, align 8, !dbg !3073
  br label %for.cond45, !dbg !3073, !llvm.loop !3080

for.end54:                                        ; preds = %for.cond45
  %77 = load i32, i32* %num_loops, align 4, !dbg !3082
  %tobool55 = icmp ne i32 %77, 0, !dbg !3082
  br i1 %tobool55, label %if.then56, label %if.end137, !dbg !3084

if.then56:                                        ; preds = %for.end54
  %78 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3085
  %add.ptr57 = getelementptr inbounds %struct.function, %struct.function* %78, i64 0, !dbg !3085
  %cfg58 = getelementptr inbounds %struct.function, %struct.function* %add.ptr57, i32 0, i32 1, !dbg !3085
  %79 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg58, align 8, !dbg !3085
  %x_n_basic_blocks59 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %79, i32 0, i32 3, !dbg !3085
  %80 = load i32, i32* %x_n_basic_blocks59, align 8, !dbg !3085
  %conv60 = sext i32 %80 to i64, !dbg !3085
  %mul = mul i64 4, %conv60, !dbg !3085
  %call61 = call i8* @xmalloc(i64 %mul), !dbg !3085
  %81 = bitcast i8* %call61 to i32*, !dbg !3085
  store i32* %81, i32** %dfs_order, align 8, !dbg !3087
  %82 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3088
  %add.ptr62 = getelementptr inbounds %struct.function, %struct.function* %82, i64 0, !dbg !3088
  %cfg63 = getelementptr inbounds %struct.function, %struct.function* %add.ptr62, i32 0, i32 1, !dbg !3088
  %83 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg63, align 8, !dbg !3088
  %x_n_basic_blocks64 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %83, i32 0, i32 3, !dbg !3088
  %84 = load i32, i32* %x_n_basic_blocks64, align 8, !dbg !3088
  %conv65 = sext i32 %84 to i64, !dbg !3088
  %mul66 = mul i64 4, %conv65, !dbg !3088
  %call67 = call i8* @xmalloc(i64 %mul66), !dbg !3088
  %85 = bitcast i8* %call67 to i32*, !dbg !3088
  store i32* %85, i32** %rc_order, align 8, !dbg !3089
  %86 = load i32*, i32** %dfs_order, align 8, !dbg !3090
  %87 = load i32*, i32** %rc_order, align 8, !dbg !3091
  %call68 = call i32 @pre_and_rev_post_order_compute(i32* %86, i32* %87, i8 zeroext 0), !dbg !3092
  store i32 1, i32* %num_loops, align 4, !dbg !3093
  store i32 0, i32* %b, align 4, !dbg !3094
  br label %for.cond69, !dbg !3096

for.cond69:                                       ; preds = %for.inc134, %if.then56
  %88 = load i32, i32* %b, align 4, !dbg !3097
  %89 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3099
  %add.ptr70 = getelementptr inbounds %struct.function, %struct.function* %89, i64 0, !dbg !3099
  %cfg71 = getelementptr inbounds %struct.function, %struct.function* %add.ptr70, i32 0, i32 1, !dbg !3099
  %90 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg71, align 8, !dbg !3099
  %x_n_basic_blocks72 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %90, i32 0, i32 3, !dbg !3099
  %91 = load i32, i32* %x_n_basic_blocks72, align 8, !dbg !3099
  %sub = sub nsw i32 %91, 2, !dbg !3100
  %cmp73 = icmp slt i32 %88, %sub, !dbg !3101
  br i1 %cmp73, label %for.body75, label %for.end136, !dbg !3102

for.body75:                                       ; preds = %for.cond69
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3103, metadata !DIExpression()), !dbg !3105
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei76, metadata !3106, metadata !DIExpression()), !dbg !3107
  %92 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %headers, align 8, !dbg !3108
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %92, i32 0, i32 3, !dbg !3108
  %93 = load i32*, i32** %rc_order, align 8, !dbg !3108
  %94 = load i32, i32* %b, align 4, !dbg !3108
  %idxprom = sext i32 %94 to i64, !dbg !3108
  %arrayidx = getelementptr inbounds i32, i32* %93, i64 %idxprom, !dbg !3108
  %95 = load i32, i32* %arrayidx, align 4, !dbg !3108
  %div = udiv i32 %95, 64, !dbg !3108
  %idxprom77 = zext i32 %div to i64, !dbg !3108
  %arrayidx78 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom77, !dbg !3108
  %96 = load i64, i64* %arrayidx78, align 8, !dbg !3108
  %97 = load i32*, i32** %rc_order, align 8, !dbg !3108
  %98 = load i32, i32* %b, align 4, !dbg !3108
  %idxprom79 = sext i32 %98 to i64, !dbg !3108
  %arrayidx80 = getelementptr inbounds i32, i32* %97, i64 %idxprom79, !dbg !3108
  %99 = load i32, i32* %arrayidx80, align 4, !dbg !3108
  %rem = urem i32 %99, 64, !dbg !3108
  %sh_prom = zext i32 %rem to i64, !dbg !3108
  %shr = lshr i64 %96, %sh_prom, !dbg !3108
  %and81 = and i64 %shr, 1, !dbg !3108
  %tobool82 = icmp ne i64 %and81, 0, !dbg !3108
  br i1 %tobool82, label %if.end84, label %if.then83, !dbg !3110

if.then83:                                        ; preds = %for.body75
  br label %for.inc134, !dbg !3111

if.end84:                                         ; preds = %for.body75
  %100 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3112
  %add.ptr85 = getelementptr inbounds %struct.function, %struct.function* %100, i64 0, !dbg !3112
  %cfg86 = getelementptr inbounds %struct.function, %struct.function* %add.ptr85, i32 0, i32 1, !dbg !3112
  %101 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg86, align 8, !dbg !3112
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %101, i32 0, i32 2, !dbg !3112
  %102 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !3112
  %tobool87 = icmp ne %struct.VEC_basic_block_gc* %102, null, !dbg !3112
  br i1 %tobool87, label %cond.true88, label %cond.false92, !dbg !3112

cond.true88:                                      ; preds = %if.end84
  %103 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3112
  %add.ptr89 = getelementptr inbounds %struct.function, %struct.function* %103, i64 0, !dbg !3112
  %cfg90 = getelementptr inbounds %struct.function, %struct.function* %add.ptr89, i32 0, i32 1, !dbg !3112
  %104 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg90, align 8, !dbg !3112
  %x_basic_block_info91 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %104, i32 0, i32 2, !dbg !3112
  %105 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info91, align 8, !dbg !3112
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %105, i32 0, i32 0, !dbg !3112
  br label %cond.end93, !dbg !3112

cond.false92:                                     ; preds = %if.end84
  br label %cond.end93, !dbg !3112

cond.end93:                                       ; preds = %cond.false92, %cond.true88
  %cond94 = phi %struct.VEC_basic_block_base* [ %base, %cond.true88 ], [ null, %cond.false92 ], !dbg !3112
  %106 = load i32*, i32** %rc_order, align 8, !dbg !3112
  %107 = load i32, i32* %b, align 4, !dbg !3112
  %idxprom95 = sext i32 %107 to i64, !dbg !3112
  %arrayidx96 = getelementptr inbounds i32, i32* %106, i64 %idxprom95, !dbg !3112
  %108 = load i32, i32* %arrayidx96, align 4, !dbg !3112
  %call97 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond94, i32 %108), !dbg !3112
  store %struct.basic_block_def* %call97, %struct.basic_block_def** %header, align 8, !dbg !3113
  %call98 = call %struct.loop* @alloc_loop(), !dbg !3114
  store %struct.loop* %call98, %struct.loop** %loop, align 8, !dbg !3115
  %109 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !3116
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %109, i32 0, i32 1, !dbg !3116
  %110 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3116
  %tobool99 = icmp ne %struct.VEC_loop_p_gc* %110, null, !dbg !3116
  br i1 %tobool99, label %cond.true100, label %cond.false103, !dbg !3116

cond.true100:                                     ; preds = %cond.end93
  %111 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !3116
  %larray101 = getelementptr inbounds %struct.loops, %struct.loops* %111, i32 0, i32 1, !dbg !3116
  %112 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray101, align 8, !dbg !3116
  %base102 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %112, i32 0, i32 0, !dbg !3116
  br label %cond.end104, !dbg !3116

cond.false103:                                    ; preds = %cond.end93
  br label %cond.end104, !dbg !3116

cond.end104:                                      ; preds = %cond.false103, %cond.true100
  %cond105 = phi %struct.VEC_loop_p_base* [ %base102, %cond.true100 ], [ null, %cond.false103 ], !dbg !3116
  %113 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3116
  %call106 = call %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %cond105, %struct.loop* %113), !dbg !3116
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3117
  %115 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3118
  %header107 = getelementptr inbounds %struct.loop, %struct.loop* %115, i32 0, i32 2, !dbg !3119
  store %struct.basic_block_def* %114, %struct.basic_block_def** %header107, align 8, !dbg !3120
  %116 = load i32, i32* %num_loops, align 4, !dbg !3121
  %117 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3122
  %num = getelementptr inbounds %struct.loop, %struct.loop* %117, i32 0, i32 0, !dbg !3123
  store i32 %116, i32* %num, align 8, !dbg !3124
  %118 = load i32, i32* %num_loops, align 4, !dbg !3125
  %inc108 = add nsw i32 %118, 1, !dbg !3125
  store i32 %inc108, i32* %num_loops, align 4, !dbg !3125
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3126
  %loop_father109 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %119, i32 0, i32 3, !dbg !3127
  %120 = load %struct.loop*, %struct.loop** %loop_father109, align 8, !dbg !3127
  %121 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3128
  call void @flow_loop_tree_node_add(%struct.loop* %120, %struct.loop* %121), !dbg !3129
  %122 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3130
  %header110 = getelementptr inbounds %struct.loop, %struct.loop* %122, i32 0, i32 2, !dbg !3131
  %123 = load %struct.basic_block_def*, %struct.basic_block_def** %header110, align 8, !dbg !3131
  %124 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3132
  %call111 = call i32 @flow_loop_nodes_find(%struct.basic_block_def* %123, %struct.loop* %124), !dbg !3133
  %125 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3134
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %125, i32 0, i32 6, !dbg !3135
  store i32 %call111, i32* %num_nodes, align 4, !dbg !3136
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3137
  %preds113 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %126, i32 0, i32 0, !dbg !3137
  %call114 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds113), !dbg !3137
  %127 = bitcast %struct.edge_iterator* %tmp112 to { i32, %struct.VEC_edge_gc** }*, !dbg !3137
  %128 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %127, i32 0, i32 0, !dbg !3137
  %129 = extractvalue { i32, %struct.VEC_edge_gc** } %call114, 0, !dbg !3137
  store i32 %129, i32* %128, align 8, !dbg !3137
  %130 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %127, i32 0, i32 1, !dbg !3137
  %131 = extractvalue { i32, %struct.VEC_edge_gc** } %call114, 1, !dbg !3137
  store %struct.VEC_edge_gc** %131, %struct.VEC_edge_gc*** %130, align 8, !dbg !3137
  %132 = bitcast %struct.edge_iterator* %ei76 to i8*, !dbg !3137
  %133 = bitcast %struct.edge_iterator* %tmp112 to i8*, !dbg !3137
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %132, i8* align 8 %133, i64 16, i1 false), !dbg !3137
  br label %for.cond115, !dbg !3137

for.cond115:                                      ; preds = %for.inc132, %cond.end104
  %134 = bitcast %struct.edge_iterator* %ei76 to { i32, %struct.VEC_edge_gc** }*, !dbg !3139
  %135 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %134, i32 0, i32 0, !dbg !3139
  %136 = load i32, i32* %135, align 8, !dbg !3139
  %137 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %134, i32 0, i32 1, !dbg !3139
  %138 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %137, align 8, !dbg !3139
  %call116 = call zeroext i8 @ei_cond(i32 %136, %struct.VEC_edge_gc** %138, %struct.edge_def** %e), !dbg !3139
  %tobool117 = icmp ne i8 %call116, 0, !dbg !3137
  br i1 %tobool117, label %for.body118, label %for.end133, !dbg !3137

for.body118:                                      ; preds = %for.cond115
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %latch119, metadata !3141, metadata !DIExpression()), !dbg !3143
  %139 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3144
  %src120 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %139, i32 0, i32 0, !dbg !3145
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %src120, align 8, !dbg !3145
  store %struct.basic_block_def* %140, %struct.basic_block_def** %latch119, align 8, !dbg !3143
  %141 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3146
  %142 = load %struct.basic_block_def*, %struct.basic_block_def** %latch119, align 8, !dbg !3148
  %call121 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %141, %struct.basic_block_def* %142), !dbg !3149
  %tobool122 = icmp ne i8 %call121, 0, !dbg !3149
  br i1 %tobool122, label %if.then123, label %if.end131, !dbg !3150

if.then123:                                       ; preds = %for.body118
  %143 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3151
  %latch124 = getelementptr inbounds %struct.loop, %struct.loop* %143, i32 0, i32 3, !dbg !3154
  %144 = load %struct.basic_block_def*, %struct.basic_block_def** %latch124, align 8, !dbg !3154
  %cmp125 = icmp ne %struct.basic_block_def* %144, null, !dbg !3155
  br i1 %cmp125, label %if.then127, label %if.end129, !dbg !3156

if.then127:                                       ; preds = %if.then123
  %145 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3157
  %latch128 = getelementptr inbounds %struct.loop, %struct.loop* %145, i32 0, i32 3, !dbg !3159
  store %struct.basic_block_def* null, %struct.basic_block_def** %latch128, align 8, !dbg !3160
  br label %for.end133, !dbg !3161

if.end129:                                        ; preds = %if.then123
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %latch119, align 8, !dbg !3162
  %147 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3163
  %latch130 = getelementptr inbounds %struct.loop, %struct.loop* %147, i32 0, i32 3, !dbg !3164
  store %struct.basic_block_def* %146, %struct.basic_block_def** %latch130, align 8, !dbg !3165
  br label %if.end131, !dbg !3166

if.end131:                                        ; preds = %if.end129, %for.body118
  br label %for.inc132, !dbg !3167

for.inc132:                                       ; preds = %if.end131
  call void @ei_next(%struct.edge_iterator* %ei76), !dbg !3139
  br label %for.cond115, !dbg !3139, !llvm.loop !3168

for.end133:                                       ; preds = %if.then127, %for.cond115
  br label %for.inc134, !dbg !3170

for.inc134:                                       ; preds = %for.end133, %if.then83
  %148 = load i32, i32* %b, align 4, !dbg !3171
  %inc135 = add nsw i32 %148, 1, !dbg !3171
  store i32 %inc135, i32* %b, align 4, !dbg !3171
  br label %for.cond69, !dbg !3172, !llvm.loop !3173

for.end136:                                       ; preds = %for.cond69
  %149 = load i32*, i32** %dfs_order, align 8, !dbg !3175
  %150 = bitcast i32* %149 to i8*, !dbg !3175
  call void @free(i8* %150), !dbg !3176
  %151 = load i32*, i32** %rc_order, align 8, !dbg !3177
  %152 = bitcast i32* %151 to i8*, !dbg !3177
  call void @free(i8* %152), !dbg !3178
  br label %if.end137, !dbg !3179

if.end137:                                        ; preds = %for.end136, %for.end54
  %153 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %headers, align 8, !dbg !3180
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %153, i32 0, i32 0, !dbg !3180
  %154 = load i8*, i8** %popcount, align 8, !dbg !3180
  call void @free(i8* %154), !dbg !3180
  %155 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %headers, align 8, !dbg !3180
  %156 = bitcast %struct.simple_bitmap_def* %155 to i8*, !dbg !3180
  call void @free(i8* %156), !dbg !3180
  %157 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !3181
  %exits = getelementptr inbounds %struct.loops, %struct.loops* %157, i32 0, i32 2, !dbg !3182
  store %struct.htab* null, %struct.htab** %exits, align 8, !dbg !3183
  %158 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !3184
  %larray138 = getelementptr inbounds %struct.loops, %struct.loops* %158, i32 0, i32 1, !dbg !3184
  %159 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray138, align 8, !dbg !3184
  %tobool139 = icmp ne %struct.VEC_loop_p_gc* %159, null, !dbg !3184
  br i1 %tobool139, label %cond.true140, label %cond.false143, !dbg !3184

cond.true140:                                     ; preds = %if.end137
  %160 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !3184
  %larray141 = getelementptr inbounds %struct.loops, %struct.loops* %160, i32 0, i32 1, !dbg !3184
  %161 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray141, align 8, !dbg !3184
  %base142 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %161, i32 0, i32 0, !dbg !3184
  br label %cond.end144, !dbg !3184

cond.false143:                                    ; preds = %if.end137
  br label %cond.end144, !dbg !3184

cond.end144:                                      ; preds = %cond.false143, %cond.true140
  %cond145 = phi %struct.VEC_loop_p_base* [ %base142, %cond.true140 ], [ null, %cond.false143 ], !dbg !3184
  %call146 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond145), !dbg !3184
  store i32 %call146, i32* %retval, align 4, !dbg !3185
  br label %return, !dbg !3185

return:                                           ; preds = %cond.end144, %if.then
  %162 = load i32, i32* %retval, align 4, !dbg !3186
  ret i32 %162, !dbg !3186
}

declare dso_local void @calculate_dominance_info(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @init_loops_structure(%struct.loops* %loops, i32 %num_loops) #0 !dbg !3187 {
entry:
  %loops.addr = alloca %struct.loops*, align 8
  %num_loops.addr = alloca i32, align 4
  %root = alloca %struct.loop*, align 8
  store %struct.loops* %loops, %struct.loops** %loops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loops** %loops.addr, metadata !3190, metadata !DIExpression()), !dbg !3191
  store i32 %num_loops, i32* %num_loops.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_loops.addr, metadata !3192, metadata !DIExpression()), !dbg !3193
  call void @llvm.dbg.declare(metadata %struct.loop** %root, metadata !3194, metadata !DIExpression()), !dbg !3195
  %0 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !3196
  %1 = bitcast %struct.loops* %0 to i8*, !dbg !3197
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false), !dbg !3197
  %2 = load i32, i32* %num_loops.addr, align 4, !dbg !3198
  %call = call %struct.VEC_loop_p_gc* @VEC_loop_p_gc_alloc(i32 %2), !dbg !3198
  %3 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !3199
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !3200
  store %struct.VEC_loop_p_gc* %call, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3201
  %call1 = call %struct.loop* @alloc_loop(), !dbg !3202
  store %struct.loop* %call1, %struct.loop** %root, align 8, !dbg !3203
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3204
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3204
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3204
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3204
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 3, !dbg !3204
  %6 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !3204
  %7 = load %struct.loop*, %struct.loop** %root, align 8, !dbg !3205
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 6, !dbg !3206
  store i32 %6, i32* %num_nodes, align 4, !dbg !3207
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3208
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !3208
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !3208
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !3208
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 1, !dbg !3208
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3208
  %11 = load %struct.loop*, %struct.loop** %root, align 8, !dbg !3209
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 3, !dbg !3210
  store %struct.basic_block_def* %10, %struct.basic_block_def** %latch, align 8, !dbg !3211
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3212
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !3212
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !3212
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !3212
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 0, !dbg !3212
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3212
  %15 = load %struct.loop*, %struct.loop** %root, align 8, !dbg !3213
  %header = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 2, !dbg !3214
  store %struct.basic_block_def* %14, %struct.basic_block_def** %header, align 8, !dbg !3215
  %16 = load %struct.loop*, %struct.loop** %root, align 8, !dbg !3216
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3217
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !3217
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !3217
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !3217
  %x_entry_block_ptr8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 0, !dbg !3217
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr8, align 8, !dbg !3217
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 3, !dbg !3218
  store %struct.loop* %16, %struct.loop** %loop_father, align 8, !dbg !3219
  %20 = load %struct.loop*, %struct.loop** %root, align 8, !dbg !3220
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3221
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !3221
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !3221
  %22 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !3221
  %x_exit_block_ptr11 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %22, i32 0, i32 1, !dbg !3221
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr11, align 8, !dbg !3221
  %loop_father12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 3, !dbg !3222
  store %struct.loop* %20, %struct.loop** %loop_father12, align 8, !dbg !3223
  %24 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !3224
  %larray13 = getelementptr inbounds %struct.loops, %struct.loops* %24, i32 0, i32 1, !dbg !3224
  %25 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray13, align 8, !dbg !3224
  %tobool = icmp ne %struct.VEC_loop_p_gc* %25, null, !dbg !3224
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3224

cond.true:                                        ; preds = %entry
  %26 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !3224
  %larray14 = getelementptr inbounds %struct.loops, %struct.loops* %26, i32 0, i32 1, !dbg !3224
  %27 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray14, align 8, !dbg !3224
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %27, i32 0, i32 0, !dbg !3224
  br label %cond.end, !dbg !3224

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3224

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3224
  %28 = load %struct.loop*, %struct.loop** %root, align 8, !dbg !3224
  %call15 = call %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %cond, %struct.loop* %28), !dbg !3224
  %29 = load %struct.loop*, %struct.loop** %root, align 8, !dbg !3225
  %30 = load %struct.loops*, %struct.loops** %loops.addr, align 8, !dbg !3226
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %30, i32 0, i32 3, !dbg !3227
  store %struct.loop* %29, %struct.loop** %tree_root, align 8, !dbg !3228
  ret void, !dbg !3229
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !3230 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !3233, metadata !DIExpression()), !dbg !3234
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !3235, metadata !DIExpression()), !dbg !3236
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3237
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !3239
  %1 = load i8*, i8** %popcount, align 8, !dbg !3239
  %tobool = icmp ne i8* %1, null, !dbg !3237
  br i1 %tobool, label %if.then, label %if.end7, !dbg !3240

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !3241, metadata !DIExpression()), !dbg !3243
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3244
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !3244
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !3244
  %div = udiv i32 %3, 64, !dbg !3244
  %idxprom = zext i32 %div to i64, !dbg !3244
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !3244
  %4 = load i64, i64* %arrayidx, align 8, !dbg !3244
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !3244
  %rem = urem i32 %5, 64, !dbg !3244
  %sh_prom = zext i32 %rem to i64, !dbg !3244
  %shr = lshr i64 %4, %sh_prom, !dbg !3244
  %and = and i64 %shr, 1, !dbg !3244
  %conv = trunc i64 %and to i8, !dbg !3244
  store i8 %conv, i8* %oldbit, align 1, !dbg !3245
  %6 = load i8, i8* %oldbit, align 1, !dbg !3246
  %tobool1 = icmp ne i8 %6, 0, !dbg !3246
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !3248

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3249
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !3250
  %8 = load i8*, i8** %popcount3, align 8, !dbg !3250
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !3251
  %div4 = udiv i32 %9, 64, !dbg !3252
  %idxprom5 = zext i32 %div4 to i64, !dbg !3249
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !3249
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !3253
  %inc = add i8 %10, 1, !dbg !3253
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !3253
  br label %if.end, !dbg !3249

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !3254

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !3255
  %rem8 = urem i32 %11, 64, !dbg !3256
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !3257
  %shl = shl i64 1, %sh_prom9, !dbg !3257
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3258
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !3259
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !3260
  %div11 = udiv i32 %13, 64, !dbg !3261
  %idxprom12 = zext i32 %div11 to i64, !dbg !3258
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !3258
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !3262
  %or = or i64 %14, %shl, !dbg !3262
  store i64 %or, i64* %arrayidx13, align 8, !dbg !3262
  ret void, !dbg !3263
}

declare dso_local i8* @xmalloc(i64) #2

declare dso_local i32 @pre_and_rev_post_order_compute(i32*, i32*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !3264 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !3267, metadata !DIExpression()), !dbg !3268
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3269, metadata !DIExpression()), !dbg !3268
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !3268
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !3268
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3268

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3268
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !3268
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !3268
  %3 = load i32, i32* %num, align 8, !dbg !3268
  %cmp = icmp ult i32 %1, %3, !dbg !3268
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3270
  %land.ext = zext i1 %4 to i32, !dbg !3268
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !3268
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !3268
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3268
  %idxprom = zext i32 %6 to i64, !dbg !3268
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !3268
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3268
  ret %struct.basic_block_def* %7, !dbg !3268
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %vec_, %struct.loop* %obj_) #0 !dbg !3271 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %obj_.addr = alloca %struct.loop*, align 8
  %slot_ = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3274, metadata !DIExpression()), !dbg !3275
  store %struct.loop* %obj_, %struct.loop** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %obj_.addr, metadata !3276, metadata !DIExpression()), !dbg !3275
  call void @llvm.dbg.declare(metadata %struct.loop*** %slot_, metadata !3277, metadata !DIExpression()), !dbg !3275
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3275
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %0, i32 0, i32 0, !dbg !3275
  %1 = load i32, i32* %num, align 8, !dbg !3275
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3275
  %alloc = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 1, !dbg !3275
  %3 = load i32, i32* %alloc, align 4, !dbg !3275
  %cmp = icmp ult i32 %1, %3, !dbg !3275
  %conv = zext i1 %cmp to i32, !dbg !3275
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3275
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !3275
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3275
  %num1 = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 0, !dbg !3275
  %6 = load i32, i32* %num1, align 8, !dbg !3275
  %inc = add i32 %6, 1, !dbg !3275
  store i32 %inc, i32* %num1, align 8, !dbg !3275
  %idxprom = zext i32 %6 to i64, !dbg !3275
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !3275
  store %struct.loop** %arrayidx, %struct.loop*** %slot_, align 8, !dbg !3275
  %7 = load %struct.loop*, %struct.loop** %obj_.addr, align 8, !dbg !3275
  %8 = load %struct.loop**, %struct.loop*** %slot_, align 8, !dbg !3275
  store %struct.loop* %7, %struct.loop** %8, align 8, !dbg !3275
  %9 = load %struct.loop**, %struct.loop*** %slot_, align 8, !dbg !3275
  ret %struct.loop** %9, !dbg !3275
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %loop, %struct.basic_block_def* %bb) #0 !dbg !3278 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %source_loop = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3284, metadata !DIExpression()), !dbg !3285
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3286, metadata !DIExpression()), !dbg !3287
  call void @llvm.dbg.declare(metadata %struct.loop** %source_loop, metadata !3288, metadata !DIExpression()), !dbg !3289
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3290
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3292
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3292
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3292
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3292
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !3292
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3292
  %cmp = icmp eq %struct.basic_block_def* %0, %3, !dbg !3293
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3294

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3295
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3296
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3296
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3296
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3296
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !3296
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3296
  %cmp3 = icmp eq %struct.basic_block_def* %4, %7, !dbg !3297
  br i1 %cmp3, label %if.then, label %if.end, !dbg !3298

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !3299
  br label %return, !dbg !3299

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3300
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 3, !dbg !3301
  %9 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !3301
  store %struct.loop* %9, %struct.loop** %source_loop, align 8, !dbg !3302
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3303
  %11 = load %struct.loop*, %struct.loop** %source_loop, align 8, !dbg !3304
  %cmp4 = icmp eq %struct.loop* %10, %11, !dbg !3305
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !3306

lor.rhs:                                          ; preds = %if.end
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3307
  %13 = load %struct.loop*, %struct.loop** %source_loop, align 8, !dbg !3308
  %call = call zeroext i8 @flow_loop_nested_p(%struct.loop* %12, %struct.loop* %13), !dbg !3309
  %conv = zext i8 %call to i32, !dbg !3309
  %tobool = icmp ne i32 %conv, 0, !dbg !3306
  br label %lor.end, !dbg !3306

lor.end:                                          ; preds = %lor.rhs, %if.end
  %14 = phi i1 [ true, %if.end ], [ %tobool, %lor.rhs ]
  %lor.ext = zext i1 %14 to i32, !dbg !3306
  %conv5 = trunc i32 %lor.ext to i8, !dbg !3303
  store i8 %conv5, i8* %retval, align 1, !dbg !3310
  br label %return, !dbg !3310

return:                                           ; preds = %lor.end, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !3311
  ret i8 %15, !dbg !3311
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !3312 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3315, metadata !DIExpression()), !dbg !3316
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3316
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3316
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3316

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3316
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !3316
  %2 = load i32, i32* %num, align 8, !dbg !3316
  br label %cond.end, !dbg !3316

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3316

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3316
  ret i32 %cond, !dbg !3316
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @disambiguate_loops_with_multiple_latches() #0 !dbg !3317 {
entry:
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !3320, metadata !DIExpression()), !dbg !3321
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3322, metadata !DIExpression()), !dbg !3323
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !3324
  br label %for.cond, !dbg !3324

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3326
  %tobool = icmp ne %struct.loop* %0, null, !dbg !3324
  br i1 %tobool, label %for.body, label %for.end, !dbg !3324

for.body:                                         ; preds = %for.cond
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3328
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 3, !dbg !3331
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3331
  %tobool1 = icmp ne %struct.basic_block_def* %2, null, !dbg !3328
  br i1 %tobool1, label %if.end, label %if.then, !dbg !3332

if.then:                                          ; preds = %for.body
  %3 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3333
  call void @disambiguate_multiple_latches(%struct.loop* %3), !dbg !3334
  br label %if.end, !dbg !3334

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !3335

for.inc:                                          ; preds = %if.end
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !3326
  br label %for.cond, !dbg !3326, !llvm.loop !3336

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3338
}

; Function Attrs: noinline nounwind uwtable
define internal void @disambiguate_multiple_latches(%struct.loop* %loop) #0 !dbg !3339 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %e = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3340, metadata !DIExpression()), !dbg !3341
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3342, metadata !DIExpression()), !dbg !3343
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3344
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !3344
  br i1 %tobool, label %if.then, label %if.end, !dbg !3346

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3347
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3348
  %num = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 0, !dbg !3349
  %3 = load i32, i32* %num, align 8, !dbg !3349
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.34, i64 0, i64 0), i32 %3), !dbg !3350
  br label %if.end, !dbg !3350

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3351
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3351
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3351
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3351
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !3351
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3351
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3352
  %header = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 2, !dbg !3353
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3353
  %call1 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %6, %struct.basic_block_def* %8), !dbg !3354
  store %struct.edge_def* %call1, %struct.edge_def** %e, align 8, !dbg !3355
  %9 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3356
  %tobool2 = icmp ne %struct.edge_def* %9, null, !dbg !3356
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !3358

if.then3:                                         ; preds = %if.end
  %10 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3359
  %call4 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %10), !dbg !3360
  br label %if.end5, !dbg !3360

if.end5:                                          ; preds = %if.then3, %if.end
  br label %while.body, !dbg !3361

while.body:                                       ; preds = %if.end5, %if.end9
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3362
  %call6 = call %struct.edge_def* @find_subloop_latch_edge(%struct.loop* %11), !dbg !3364
  store %struct.edge_def* %call6, %struct.edge_def** %e, align 8, !dbg !3365
  %12 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3366
  %tobool7 = icmp ne %struct.edge_def* %12, null, !dbg !3366
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !3368

if.then8:                                         ; preds = %while.body
  br label %while.end, !dbg !3369

if.end9:                                          ; preds = %while.body
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3370
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3371
  call void @form_subloop(%struct.loop* %13, %struct.edge_def* %14), !dbg !3372
  br label %while.body, !dbg !3361, !llvm.loop !3373

while.end:                                        ; preds = %if.then8
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3375
  call void @merge_latch_edges(%struct.loop* %15), !dbg !3376
  ret void, !dbg !3377
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_loop_body_with_size(%struct.loop* %loop, %struct.basic_block_def** %body, i32 %max_size) #0 !dbg !3378 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %body.addr = alloca %struct.basic_block_def**, align 8
  %max_size.addr = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3381, metadata !DIExpression()), !dbg !3382
  store %struct.basic_block_def** %body, %struct.basic_block_def*** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body.addr, metadata !3383, metadata !DIExpression()), !dbg !3384
  store i32 %max_size, i32* %max_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_size.addr, metadata !3385, metadata !DIExpression()), !dbg !3386
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3387
  %header = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 2, !dbg !3388
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3388
  %2 = load %struct.basic_block_def**, %struct.basic_block_def*** %body.addr, align 8, !dbg !3389
  %3 = load i32, i32* %max_size.addr, align 4, !dbg !3390
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3391
  %5 = bitcast %struct.loop* %4 to i8*, !dbg !3391
  %call = call i32 @dfs_enumerate_from(%struct.basic_block_def* %1, i32 1, i8 (%struct.basic_block_def*, i8*)* @glb_enum_p, %struct.basic_block_def** %2, i32 %3, i8* %5), !dbg !3392
  ret i32 %call, !dbg !3393
}

declare dso_local i32 @dfs_enumerate_from(%struct.basic_block_def*, i32, i8 (%struct.basic_block_def*, i8*)*, %struct.basic_block_def**, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @glb_enum_p(%struct.basic_block_def* %bb, i8* %glb_loop) #0 !dbg !3394 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %glb_loop.addr = alloca i8*, align 8
  %loop = alloca %struct.loop*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3397, metadata !DIExpression()), !dbg !3398
  store i8* %glb_loop, i8** %glb_loop.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %glb_loop.addr, metadata !3399, metadata !DIExpression()), !dbg !3400
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3401, metadata !DIExpression()), !dbg !3403
  %0 = load i8*, i8** %glb_loop.addr, align 8, !dbg !3404
  %1 = bitcast i8* %0 to %struct.loop*, !dbg !3405
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !3403
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3406
  %3 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3407
  %header = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 2, !dbg !3408
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3408
  %cmp = icmp ne %struct.basic_block_def* %2, %4, !dbg !3409
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3410

land.rhs:                                         ; preds = %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3411
  %6 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3412
  %header1 = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 2, !dbg !3413
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %header1, align 8, !dbg !3413
  %call = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %5, %struct.basic_block_def* %7), !dbg !3414
  %conv = zext i8 %call to i32, !dbg !3414
  %tobool = icmp ne i32 %conv, 0, !dbg !3410
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ], !dbg !3415
  %land.ext = zext i1 %8 to i32, !dbg !3410
  %conv2 = trunc i32 %land.ext to i8, !dbg !3416
  ret i8 %conv2, !dbg !3417
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %loop) #0 !dbg !3418 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %tovisit = alloca %struct.basic_block_def**, align 8
  %tv = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3419, metadata !DIExpression()), !dbg !3420
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %tovisit, metadata !3421, metadata !DIExpression()), !dbg !3422
  call void @llvm.dbg.declare(metadata i32* %tv, metadata !3423, metadata !DIExpression()), !dbg !3424
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3425
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 6, !dbg !3425
  %1 = load i32, i32* %num_nodes, align 4, !dbg !3425
  %tobool = icmp ne i32 %1, 0, !dbg !3425
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3425

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 878, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3425
  br label %cond.end, !dbg !3425

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3425

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3425
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3426
  %num_nodes1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !3426
  %3 = load i32, i32* %num_nodes1, align 4, !dbg !3426
  %conv = zext i32 %3 to i64, !dbg !3426
  %call = call i8* @xcalloc(i64 %conv, i64 8), !dbg !3426
  %4 = bitcast i8* %call to %struct.basic_block_def**, !dbg !3426
  store %struct.basic_block_def** %4, %struct.basic_block_def*** %tovisit, align 8, !dbg !3427
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3428
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 3, !dbg !3428
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3428
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3428
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3428
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3428
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3428
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 1, !dbg !3428
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3428
  %cmp = icmp ne %struct.basic_block_def* %6, %9, !dbg !3428
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !3428

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 882, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3428
  br label %cond.end5, !dbg !3428

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3428

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !3428
  store i32 0, i32* %tv, align 4, !dbg !3429
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3430
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3431
  %header = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 2, !dbg !3432
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3432
  %13 = load %struct.basic_block_def**, %struct.basic_block_def*** %tovisit, align 8, !dbg !3433
  call void @fill_sons_in_loop(%struct.loop* %10, %struct.basic_block_def* %12, %struct.basic_block_def** %13, i32* %tv), !dbg !3434
  %14 = load i32, i32* %tv, align 4, !dbg !3435
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3435
  %num_nodes7 = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 6, !dbg !3435
  %16 = load i32, i32* %num_nodes7, align 4, !dbg !3435
  %cmp8 = icmp eq i32 %14, %16, !dbg !3435
  br i1 %cmp8, label %cond.false11, label %cond.true10, !dbg !3435

cond.true10:                                      ; preds = %cond.end5
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 887, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3435
  br label %cond.end12, !dbg !3435

cond.false11:                                     ; preds = %cond.end5
  br label %cond.end12, !dbg !3435

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !3435
  %17 = load %struct.basic_block_def**, %struct.basic_block_def*** %tovisit, align 8, !dbg !3436
  ret %struct.basic_block_def** %17, !dbg !3437
}

; Function Attrs: noinline nounwind uwtable
define internal void @fill_sons_in_loop(%struct.loop* %loop, %struct.basic_block_def* %bb, %struct.basic_block_def** %tovisit, i32* %tv) #0 !dbg !3438 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %tovisit.addr = alloca %struct.basic_block_def**, align 8
  %tv.addr = alloca i32*, align 8
  %son = alloca %struct.basic_block_def*, align 8
  %postpone = alloca %struct.basic_block_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3441, metadata !DIExpression()), !dbg !3442
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3443, metadata !DIExpression()), !dbg !3444
  store %struct.basic_block_def** %tovisit, %struct.basic_block_def*** %tovisit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %tovisit.addr, metadata !3445, metadata !DIExpression()), !dbg !3446
  store i32* %tv, i32** %tv.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %tv.addr, metadata !3447, metadata !DIExpression()), !dbg !3448
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %son, metadata !3449, metadata !DIExpression()), !dbg !3450
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %postpone, metadata !3451, metadata !DIExpression()), !dbg !3452
  store %struct.basic_block_def* null, %struct.basic_block_def** %postpone, align 8, !dbg !3452
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3453
  %1 = load %struct.basic_block_def**, %struct.basic_block_def*** %tovisit.addr, align 8, !dbg !3454
  %2 = load i32*, i32** %tv.addr, align 8, !dbg !3455
  %3 = load i32, i32* %2, align 4, !dbg !3456
  %inc = add nsw i32 %3, 1, !dbg !3456
  store i32 %inc, i32* %2, align 4, !dbg !3456
  %idxprom = sext i32 %3 to i64, !dbg !3454
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %1, i64 %idxprom, !dbg !3454
  store %struct.basic_block_def* %0, %struct.basic_block_def** %arrayidx, align 8, !dbg !3457
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3458
  %call = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %4), !dbg !3460
  store %struct.basic_block_def* %call, %struct.basic_block_def** %son, align 8, !dbg !3461
  br label %for.cond, !dbg !3462

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !3463
  %tobool = icmp ne %struct.basic_block_def* %5, null, !dbg !3465
  br i1 %tobool, label %for.body, label %for.end, !dbg !3465

for.body:                                         ; preds = %for.cond
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3466
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !3469
  %call1 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %6, %struct.basic_block_def* %7), !dbg !3470
  %tobool2 = icmp ne i8 %call1, 0, !dbg !3470
  br i1 %tobool2, label %if.end, label %if.then, !dbg !3471

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !3472

if.end:                                           ; preds = %for.body
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3473
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 3, !dbg !3475
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3475
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !3476
  %call3 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %9, %struct.basic_block_def* %10), !dbg !3477
  %tobool4 = icmp ne i8 %call3, 0, !dbg !3477
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !3478

if.then5:                                         ; preds = %if.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !3479
  store %struct.basic_block_def* %11, %struct.basic_block_def** %postpone, align 8, !dbg !3481
  br label %for.inc, !dbg !3482

if.end6:                                          ; preds = %if.end
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3483
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !3484
  %14 = load %struct.basic_block_def**, %struct.basic_block_def*** %tovisit.addr, align 8, !dbg !3485
  %15 = load i32*, i32** %tv.addr, align 8, !dbg !3486
  call void @fill_sons_in_loop(%struct.loop* %12, %struct.basic_block_def* %13, %struct.basic_block_def** %14, i32* %15), !dbg !3487
  br label %for.inc, !dbg !3488

for.inc:                                          ; preds = %if.end6, %if.then5, %if.then
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !3489
  %call7 = call %struct.basic_block_def* @next_dom_son(i32 1, %struct.basic_block_def* %16), !dbg !3490
  store %struct.basic_block_def* %call7, %struct.basic_block_def** %son, align 8, !dbg !3491
  br label %for.cond, !dbg !3492, !llvm.loop !3493

for.end:                                          ; preds = %for.cond
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %postpone, align 8, !dbg !3495
  %tobool8 = icmp ne %struct.basic_block_def* %17, null, !dbg !3495
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !3497

if.then9:                                         ; preds = %for.end
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3498
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %postpone, align 8, !dbg !3499
  %20 = load %struct.basic_block_def**, %struct.basic_block_def*** %tovisit.addr, align 8, !dbg !3500
  %21 = load i32*, i32** %tv.addr, align 8, !dbg !3501
  call void @fill_sons_in_loop(%struct.loop* %18, %struct.basic_block_def* %19, %struct.basic_block_def** %20, i32* %21), !dbg !3502
  br label %if.end10, !dbg !3502

if.end10:                                         ; preds = %if.then9, %for.end
  ret void, !dbg !3503
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def** @get_loop_body_in_custom_order(%struct.loop* %loop, i32 (i8*, i8*)* %bb_comparator) #0 !dbg !3504 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %bb_comparator.addr = alloca i32 (i8*, i8*)*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3507, metadata !DIExpression()), !dbg !3508
  store i32 (i8*, i8*)* %bb_comparator, i32 (i8*, i8*)** %bb_comparator.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %bb_comparator.addr, metadata !3509, metadata !DIExpression()), !dbg !3510
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !3511, metadata !DIExpression()), !dbg !3512
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3513
  %call = call %struct.basic_block_def** @get_loop_body(%struct.loop* %0), !dbg !3514
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !3512
  %1 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3515
  %2 = bitcast %struct.basic_block_def** %1 to i8*, !dbg !3515
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3516
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 6, !dbg !3517
  %4 = load i32, i32* %num_nodes, align 4, !dbg !3517
  %conv = zext i32 %4 to i64, !dbg !3516
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %bb_comparator.addr, align 8, !dbg !3518
  call void @spec_qsort(i8* %2, i64 %conv, i64 8, i32 (i8*, i8*)* %5), !dbg !3519
  %6 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3520
  ret %struct.basic_block_def** %6, !dbg !3521
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def** @get_loop_body_in_bfs_order(%struct.loop* %loop) #0 !dbg !3522 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %blocks = alloca %struct.basic_block_def**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %visited = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %vc = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3523, metadata !DIExpression()), !dbg !3524
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %blocks, metadata !3525, metadata !DIExpression()), !dbg !3526
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3527, metadata !DIExpression()), !dbg !3528
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %visited, metadata !3529, metadata !DIExpression()), !dbg !3530
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3531, metadata !DIExpression()), !dbg !3532
  store i32 0, i32* %i, align 4, !dbg !3532
  call void @llvm.dbg.declare(metadata i32* %vc, metadata !3533, metadata !DIExpression()), !dbg !3534
  store i32 1, i32* %vc, align 4, !dbg !3534
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3535
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 6, !dbg !3535
  %1 = load i32, i32* %num_nodes, align 4, !dbg !3535
  %tobool = icmp ne i32 %1, 0, !dbg !3535
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3535

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 920, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3535
  br label %cond.end, !dbg !3535

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3535

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3535
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3536
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 3, !dbg !3536
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3536
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3536
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3536
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3536
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3536
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 1, !dbg !3536
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3536
  %cmp = icmp ne %struct.basic_block_def* %3, %6, !dbg !3536
  br i1 %cmp, label %cond.false2, label %cond.true1, !dbg !3536

cond.true1:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 921, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3536
  br label %cond.end3, !dbg !3536

cond.false2:                                      ; preds = %cond.end
  br label %cond.end3, !dbg !3536

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi i32 [ 0, %cond.true1 ], [ 0, %cond.false2 ], !dbg !3536
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3537
  %num_nodes5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 6, !dbg !3537
  %8 = load i32, i32* %num_nodes5, align 4, !dbg !3537
  %conv = zext i32 %8 to i64, !dbg !3537
  %call = call i8* @xcalloc(i64 %conv, i64 8), !dbg !3537
  %9 = bitcast i8* %call to %struct.basic_block_def**, !dbg !3537
  store %struct.basic_block_def** %9, %struct.basic_block_def*** %blocks, align 8, !dbg !3538
  %call6 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3539
  store %struct.bitmap_head_def* %call6, %struct.bitmap_head_def** %visited, align 8, !dbg !3540
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3541
  %header = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 2, !dbg !3542
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3542
  store %struct.basic_block_def* %11, %struct.basic_block_def** %bb, align 8, !dbg !3543
  br label %while.cond, !dbg !3544

while.cond:                                       ; preds = %cond.end38, %cond.end3
  %12 = load i32, i32* %i, align 4, !dbg !3545
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3546
  %num_nodes7 = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 6, !dbg !3547
  %14 = load i32, i32* %num_nodes7, align 4, !dbg !3547
  %cmp8 = icmp ult i32 %12, %14, !dbg !3548
  br i1 %cmp8, label %while.body, label %while.end, !dbg !3544

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3549, metadata !DIExpression()), !dbg !3551
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3552, metadata !DIExpression()), !dbg !3553
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !3554
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3556
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 9, !dbg !3557
  %17 = load i32, i32* %index, align 8, !dbg !3557
  %call10 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %15, i32 %17), !dbg !3558
  %tobool11 = icmp ne i32 %call10, 0, !dbg !3558
  br i1 %tobool11, label %if.end, label %if.then, !dbg !3559

if.then:                                          ; preds = %while.body
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !3560
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3562
  %index12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 9, !dbg !3563
  %20 = load i32, i32* %index12, align 8, !dbg !3563
  %call13 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %18, i32 %20), !dbg !3564
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3565
  %22 = load %struct.basic_block_def**, %struct.basic_block_def*** %blocks, align 8, !dbg !3566
  %23 = load i32, i32* %i, align 4, !dbg !3567
  %inc = add i32 %23, 1, !dbg !3567
  store i32 %inc, i32* %i, align 4, !dbg !3567
  %idxprom = zext i32 %23 to i64, !dbg !3566
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %22, i64 %idxprom, !dbg !3566
  store %struct.basic_block_def* %21, %struct.basic_block_def** %arrayidx, align 8, !dbg !3568
  br label %if.end, !dbg !3569

if.end:                                           ; preds = %if.then, %while.body
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3570
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 1, !dbg !3570
  %call14 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3570
  %25 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3570
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %25, i32 0, i32 0, !dbg !3570
  %27 = extractvalue { i32, %struct.VEC_edge_gc** } %call14, 0, !dbg !3570
  store i32 %27, i32* %26, align 8, !dbg !3570
  %28 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %25, i32 0, i32 1, !dbg !3570
  %29 = extractvalue { i32, %struct.VEC_edge_gc** } %call14, 1, !dbg !3570
  store %struct.VEC_edge_gc** %29, %struct.VEC_edge_gc*** %28, align 8, !dbg !3570
  %30 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3570
  %31 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3570
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 16, i1 false), !dbg !3570
  br label %for.cond, !dbg !3570

for.cond:                                         ; preds = %for.inc, %if.end
  %32 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3572
  %33 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %32, i32 0, i32 0, !dbg !3572
  %34 = load i32, i32* %33, align 8, !dbg !3572
  %35 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %32, i32 0, i32 1, !dbg !3572
  %36 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %35, align 8, !dbg !3572
  %call15 = call zeroext i8 @ei_cond(i32 %34, %struct.VEC_edge_gc** %36, %struct.edge_def** %e), !dbg !3572
  %tobool16 = icmp ne i8 %call15, 0, !dbg !3570
  br i1 %tobool16, label %for.body, label %for.end, !dbg !3570

for.body:                                         ; preds = %for.cond
  %37 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3574
  %38 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3577
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 1, !dbg !3578
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3578
  %call17 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %37, %struct.basic_block_def* %39), !dbg !3579
  %tobool18 = icmp ne i8 %call17, 0, !dbg !3579
  br i1 %tobool18, label %if.then19, label %if.end33, !dbg !3580

if.then19:                                        ; preds = %for.body
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !3581
  %41 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3584
  %dest20 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %41, i32 0, i32 1, !dbg !3585
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %dest20, align 8, !dbg !3585
  %index21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 9, !dbg !3586
  %43 = load i32, i32* %index21, align 8, !dbg !3586
  %call22 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %40, i32 %43), !dbg !3587
  %tobool23 = icmp ne i32 %call22, 0, !dbg !3587
  br i1 %tobool23, label %if.end32, label %if.then24, !dbg !3588

if.then24:                                        ; preds = %if.then19
  %44 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !3589
  %45 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3591
  %dest25 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %45, i32 0, i32 1, !dbg !3592
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %dest25, align 8, !dbg !3592
  %index26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 9, !dbg !3593
  %47 = load i32, i32* %index26, align 8, !dbg !3593
  %call27 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %44, i32 %47), !dbg !3594
  %48 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3595
  %dest28 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %48, i32 0, i32 1, !dbg !3596
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %dest28, align 8, !dbg !3596
  %50 = load %struct.basic_block_def**, %struct.basic_block_def*** %blocks, align 8, !dbg !3597
  %51 = load i32, i32* %i, align 4, !dbg !3598
  %inc29 = add i32 %51, 1, !dbg !3598
  store i32 %inc29, i32* %i, align 4, !dbg !3598
  %idxprom30 = zext i32 %51 to i64, !dbg !3597
  %arrayidx31 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %50, i64 %idxprom30, !dbg !3597
  store %struct.basic_block_def* %49, %struct.basic_block_def** %arrayidx31, align 8, !dbg !3599
  br label %if.end32, !dbg !3600

if.end32:                                         ; preds = %if.then24, %if.then19
  br label %if.end33, !dbg !3601

if.end33:                                         ; preds = %if.end32, %for.body
  br label %for.inc, !dbg !3602

for.inc:                                          ; preds = %if.end33
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3572
  br label %for.cond, !dbg !3572, !llvm.loop !3603

for.end:                                          ; preds = %for.cond
  %52 = load i32, i32* %i, align 4, !dbg !3605
  %53 = load i32, i32* %vc, align 4, !dbg !3605
  %cmp34 = icmp uge i32 %52, %53, !dbg !3605
  br i1 %cmp34, label %cond.false37, label %cond.true36, !dbg !3605

cond.true36:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 951, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3605
  br label %cond.end38, !dbg !3605

cond.false37:                                     ; preds = %for.end
  br label %cond.end38, !dbg !3605

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi i32 [ 0, %cond.true36 ], [ 0, %cond.false37 ], !dbg !3605
  %54 = load %struct.basic_block_def**, %struct.basic_block_def*** %blocks, align 8, !dbg !3606
  %55 = load i32, i32* %vc, align 4, !dbg !3607
  %inc40 = add i32 %55, 1, !dbg !3607
  store i32 %inc40, i32* %vc, align 4, !dbg !3607
  %idxprom41 = zext i32 %55 to i64, !dbg !3606
  %arrayidx42 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %54, i64 %idxprom41, !dbg !3606
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx42, align 8, !dbg !3606
  store %struct.basic_block_def* %56, %struct.basic_block_def** %bb, align 8, !dbg !3608
  br label %while.cond, !dbg !3544, !llvm.loop !3609

while.end:                                        ; preds = %while.cond
  %57 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !3611
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %57), !dbg !3611
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %visited, align 8, !dbg !3611
  %58 = load %struct.basic_block_def**, %struct.basic_block_def*** %blocks, align 8, !dbg !3612
  ret %struct.basic_block_def** %58, !dbg !3613
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @rescan_loop_exit(%struct.edge_def* %e, i8 zeroext %new_edge, i8 zeroext %removed) #0 !dbg !3614 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %new_edge.addr = alloca i8, align 1
  %removed.addr = alloca i8, align 1
  %slot = alloca i8**, align 8
  %exits = alloca %struct.loop_exit*, align 8
  %exit = alloca %struct.loop_exit*, align 8
  %aloop = alloca %struct.loop*, align 8
  %cloop = alloca %struct.loop*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3617, metadata !DIExpression()), !dbg !3618
  store i8 %new_edge, i8* %new_edge.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %new_edge.addr, metadata !3619, metadata !DIExpression()), !dbg !3620
  store i8 %removed, i8* %removed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %removed.addr, metadata !3621, metadata !DIExpression()), !dbg !3622
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3623, metadata !DIExpression()), !dbg !3624
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %exits, metadata !3625, metadata !DIExpression()), !dbg !3626
  store %struct.loop_exit* null, %struct.loop_exit** %exits, align 8, !dbg !3626
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %exit, metadata !3627, metadata !DIExpression()), !dbg !3628
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !3629, metadata !DIExpression()), !dbg !3630
  call void @llvm.dbg.declare(metadata %struct.loop** %cloop, metadata !3631, metadata !DIExpression()), !dbg !3632
  %call = call zeroext i8 @loops_state_satisfies_p(i32 8), !dbg !3633
  %tobool = icmp ne i8 %call, 0, !dbg !3633
  br i1 %tobool, label %if.end, label %if.then, !dbg !3635

if.then:                                          ; preds = %entry
  br label %if.end51, !dbg !3636

if.end:                                           ; preds = %entry
  %0 = load i8, i8* %removed.addr, align 1, !dbg !3637
  %tobool1 = icmp ne i8 %0, 0, !dbg !3637
  br i1 %tobool1, label %if.end30, label %land.lhs.true, !dbg !3639

land.lhs.true:                                    ; preds = %if.end
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3640
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 0, !dbg !3641
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3641
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !3642
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !3642
  %cmp = icmp ne %struct.loop* %3, null, !dbg !3643
  br i1 %cmp, label %land.lhs.true2, label %if.end30, !dbg !3644

land.lhs.true2:                                   ; preds = %land.lhs.true
  %4 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3645
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 1, !dbg !3646
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3646
  %loop_father3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 3, !dbg !3647
  %6 = load %struct.loop*, %struct.loop** %loop_father3, align 8, !dbg !3647
  %cmp4 = icmp ne %struct.loop* %6, null, !dbg !3648
  br i1 %cmp4, label %land.lhs.true5, label %if.end30, !dbg !3649

land.lhs.true5:                                   ; preds = %land.lhs.true2
  %7 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3650
  %src6 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 0, !dbg !3651
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %src6, align 8, !dbg !3651
  %loop_father7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 3, !dbg !3652
  %9 = load %struct.loop*, %struct.loop** %loop_father7, align 8, !dbg !3652
  %10 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3653
  %dest8 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %10, i32 0, i32 1, !dbg !3654
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %dest8, align 8, !dbg !3654
  %call9 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %9, %struct.basic_block_def* %11), !dbg !3655
  %tobool10 = icmp ne i8 %call9, 0, !dbg !3655
  br i1 %tobool10, label %if.end30, label %if.then11, !dbg !3656

if.then11:                                        ; preds = %land.lhs.true5
  %12 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3657
  %src12 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %12, i32 0, i32 0, !dbg !3659
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %src12, align 8, !dbg !3659
  %loop_father13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 3, !dbg !3660
  %14 = load %struct.loop*, %struct.loop** %loop_father13, align 8, !dbg !3660
  %15 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3661
  %dest14 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 1, !dbg !3662
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %dest14, align 8, !dbg !3662
  %loop_father15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 3, !dbg !3663
  %17 = load %struct.loop*, %struct.loop** %loop_father15, align 8, !dbg !3663
  %call16 = call %struct.loop* @find_common_loop(%struct.loop* %14, %struct.loop* %17), !dbg !3664
  store %struct.loop* %call16, %struct.loop** %cloop, align 8, !dbg !3665
  %18 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3666
  %src17 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 0, !dbg !3668
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %src17, align 8, !dbg !3668
  %loop_father18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 3, !dbg !3669
  %20 = load %struct.loop*, %struct.loop** %loop_father18, align 8, !dbg !3669
  store %struct.loop* %20, %struct.loop** %aloop, align 8, !dbg !3670
  br label %for.cond, !dbg !3671

for.cond:                                         ; preds = %for.inc, %if.then11
  %21 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3672
  %22 = load %struct.loop*, %struct.loop** %cloop, align 8, !dbg !3674
  %cmp19 = icmp ne %struct.loop* %21, %22, !dbg !3675
  br i1 %cmp19, label %for.body, label %for.end, !dbg !3676

for.body:                                         ; preds = %for.cond
  %call20 = call i8* @ggc_alloc_stat(i64 32), !dbg !3677
  %23 = bitcast i8* %call20 to %struct.loop_exit*, !dbg !3677
  store %struct.loop_exit* %23, %struct.loop_exit** %exit, align 8, !dbg !3679
  %24 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3680
  %25 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3681
  %e21 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %25, i32 0, i32 0, !dbg !3682
  store %struct.edge_def* %24, %struct.edge_def** %e21, align 8, !dbg !3683
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3684
  %exits22 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 18, !dbg !3685
  %27 = load %struct.loop_exit*, %struct.loop_exit** %exits22, align 8, !dbg !3685
  %next = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %27, i32 0, i32 2, !dbg !3686
  %28 = load %struct.loop_exit*, %struct.loop_exit** %next, align 8, !dbg !3686
  %29 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3687
  %next23 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %29, i32 0, i32 2, !dbg !3688
  store %struct.loop_exit* %28, %struct.loop_exit** %next23, align 8, !dbg !3689
  %30 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3690
  %exits24 = getelementptr inbounds %struct.loop, %struct.loop* %30, i32 0, i32 18, !dbg !3691
  %31 = load %struct.loop_exit*, %struct.loop_exit** %exits24, align 8, !dbg !3691
  %32 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3692
  %prev = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %32, i32 0, i32 1, !dbg !3693
  store %struct.loop_exit* %31, %struct.loop_exit** %prev, align 8, !dbg !3694
  %33 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3695
  %34 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3696
  %next25 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %34, i32 0, i32 2, !dbg !3697
  %35 = load %struct.loop_exit*, %struct.loop_exit** %next25, align 8, !dbg !3697
  %prev26 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %35, i32 0, i32 1, !dbg !3698
  store %struct.loop_exit* %33, %struct.loop_exit** %prev26, align 8, !dbg !3699
  %36 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3700
  %37 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3701
  %prev27 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %37, i32 0, i32 1, !dbg !3702
  %38 = load %struct.loop_exit*, %struct.loop_exit** %prev27, align 8, !dbg !3702
  %next28 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %38, i32 0, i32 2, !dbg !3703
  store %struct.loop_exit* %36, %struct.loop_exit** %next28, align 8, !dbg !3704
  %39 = load %struct.loop_exit*, %struct.loop_exit** %exits, align 8, !dbg !3705
  %40 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3706
  %next_e = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %40, i32 0, i32 3, !dbg !3707
  store %struct.loop_exit* %39, %struct.loop_exit** %next_e, align 8, !dbg !3708
  %41 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3709
  store %struct.loop_exit* %41, %struct.loop_exit** %exits, align 8, !dbg !3710
  br label %for.inc, !dbg !3711

for.inc:                                          ; preds = %for.body
  %42 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3712
  %call29 = call %struct.loop* @loop_outer(%struct.loop* %42), !dbg !3713
  store %struct.loop* %call29, %struct.loop** %aloop, align 8, !dbg !3714
  br label %for.cond, !dbg !3715, !llvm.loop !3716

for.end:                                          ; preds = %for.cond
  br label %if.end30, !dbg !3718

if.end30:                                         ; preds = %for.end, %land.lhs.true5, %land.lhs.true2, %land.lhs.true, %if.end
  %43 = load %struct.loop_exit*, %struct.loop_exit** %exits, align 8, !dbg !3719
  %tobool31 = icmp ne %struct.loop_exit* %43, null, !dbg !3719
  br i1 %tobool31, label %if.end35, label %land.lhs.true32, !dbg !3721

land.lhs.true32:                                  ; preds = %if.end30
  %44 = load i8, i8* %new_edge.addr, align 1, !dbg !3722
  %conv = zext i8 %44 to i32, !dbg !3722
  %tobool33 = icmp ne i32 %conv, 0, !dbg !3722
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !3723

if.then34:                                        ; preds = %land.lhs.true32
  br label %if.end51, !dbg !3724

if.end35:                                         ; preds = %land.lhs.true32, %if.end30
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3725
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !3725
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3725
  %46 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3725
  %exits36 = getelementptr inbounds %struct.loops, %struct.loops* %46, i32 0, i32 2, !dbg !3726
  %47 = load %struct.htab*, %struct.htab** %exits36, align 8, !dbg !3726
  %48 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3727
  %49 = bitcast %struct.edge_def* %48 to i8*, !dbg !3727
  %50 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !3728
  %51 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3729
  %52 = bitcast %struct.edge_def* %51 to i8*, !dbg !3729
  %call37 = call i32 %50(i8* %52), !dbg !3728
  %53 = load %struct.loop_exit*, %struct.loop_exit** %exits, align 8, !dbg !3730
  %tobool38 = icmp ne %struct.loop_exit* %53, null, !dbg !3730
  %54 = zext i1 %tobool38 to i64, !dbg !3730
  %cond = select i1 %tobool38, i32 1, i32 0, !dbg !3730
  %call39 = call i8** @htab_find_slot_with_hash(%struct.htab* %47, i8* %49, i32 %call37, i32 %cond), !dbg !3731
  store i8** %call39, i8*** %slot, align 8, !dbg !3732
  %55 = load i8**, i8*** %slot, align 8, !dbg !3733
  %tobool40 = icmp ne i8** %55, null, !dbg !3733
  br i1 %tobool40, label %if.end42, label %if.then41, !dbg !3735

if.then41:                                        ; preds = %if.end35
  br label %if.end51, !dbg !3736

if.end42:                                         ; preds = %if.end35
  %56 = load %struct.loop_exit*, %struct.loop_exit** %exits, align 8, !dbg !3737
  %tobool43 = icmp ne %struct.loop_exit* %56, null, !dbg !3737
  br i1 %tobool43, label %if.then44, label %if.else, !dbg !3739

if.then44:                                        ; preds = %if.end42
  %57 = load i8**, i8*** %slot, align 8, !dbg !3740
  %58 = load i8*, i8** %57, align 8, !dbg !3743
  %tobool45 = icmp ne i8* %58, null, !dbg !3743
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !3744

if.then46:                                        ; preds = %if.then44
  %59 = load i8**, i8*** %slot, align 8, !dbg !3745
  %60 = load i8*, i8** %59, align 8, !dbg !3746
  call void @loop_exit_free(i8* %60), !dbg !3747
  br label %if.end47, !dbg !3747

if.end47:                                         ; preds = %if.then46, %if.then44
  %61 = load %struct.loop_exit*, %struct.loop_exit** %exits, align 8, !dbg !3748
  %62 = bitcast %struct.loop_exit* %61 to i8*, !dbg !3748
  %63 = load i8**, i8*** %slot, align 8, !dbg !3749
  store i8* %62, i8** %63, align 8, !dbg !3750
  br label %if.end51, !dbg !3751

if.else:                                          ; preds = %if.end42
  %64 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3752
  %add.ptr48 = getelementptr inbounds %struct.function, %struct.function* %64, i64 0, !dbg !3752
  %x_current_loops49 = getelementptr inbounds %struct.function, %struct.function* %add.ptr48, i32 0, i32 4, !dbg !3752
  %65 = load %struct.loops*, %struct.loops** %x_current_loops49, align 8, !dbg !3752
  %exits50 = getelementptr inbounds %struct.loops, %struct.loops* %65, i32 0, i32 2, !dbg !3753
  %66 = load %struct.htab*, %struct.htab** %exits50, align 8, !dbg !3753
  %67 = load i8**, i8*** %slot, align 8, !dbg !3754
  call void @htab_clear_slot(%struct.htab* %66, i8** %67), !dbg !3755
  br label %if.end51

if.end51:                                         ; preds = %if.then, %if.then34, %if.then41, %if.else, %if.end47
  ret void, !dbg !3756
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loops_state_satisfies_p(i32 %flags) #0 !dbg !3757 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3760, metadata !DIExpression()), !dbg !3761
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3762
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3762
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3762
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3762
  %state = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 0, !dbg !3763
  %2 = load i32, i32* %state, align 8, !dbg !3763
  %3 = load i32, i32* %flags.addr, align 4, !dbg !3764
  %and = and i32 %2, %3, !dbg !3765
  %4 = load i32, i32* %flags.addr, align 4, !dbg !3766
  %cmp = icmp eq i32 %and, %4, !dbg !3767
  %conv = zext i1 %cmp to i32, !dbg !3767
  %conv1 = trunc i32 %conv to i8, !dbg !3768
  ret i8 %conv1, !dbg !3769
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.loop* @find_common_loop(%struct.loop* %loop_s, %struct.loop* %loop_d) #0 !dbg !3770 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop_s.addr = alloca %struct.loop*, align 8
  %loop_d.addr = alloca %struct.loop*, align 8
  %sdepth = alloca i32, align 4
  %ddepth = alloca i32, align 4
  store %struct.loop* %loop_s, %struct.loop** %loop_s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop_s.addr, metadata !3773, metadata !DIExpression()), !dbg !3774
  store %struct.loop* %loop_d, %struct.loop** %loop_d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop_d.addr, metadata !3775, metadata !DIExpression()), !dbg !3776
  call void @llvm.dbg.declare(metadata i32* %sdepth, metadata !3777, metadata !DIExpression()), !dbg !3778
  call void @llvm.dbg.declare(metadata i32* %ddepth, metadata !3779, metadata !DIExpression()), !dbg !3780
  %0 = load %struct.loop*, %struct.loop** %loop_s.addr, align 8, !dbg !3781
  %tobool = icmp ne %struct.loop* %0, null, !dbg !3781
  br i1 %tobool, label %if.end, label %if.then, !dbg !3783

if.then:                                          ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop_d.addr, align 8, !dbg !3784
  store %struct.loop* %1, %struct.loop** %retval, align 8, !dbg !3785
  br label %return, !dbg !3785

if.end:                                           ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop_d.addr, align 8, !dbg !3786
  %tobool1 = icmp ne %struct.loop* %2, null, !dbg !3786
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !3788

if.then2:                                         ; preds = %if.end
  %3 = load %struct.loop*, %struct.loop** %loop_s.addr, align 8, !dbg !3789
  store %struct.loop* %3, %struct.loop** %retval, align 8, !dbg !3790
  br label %return, !dbg !3790

if.end3:                                          ; preds = %if.end
  %4 = load %struct.loop*, %struct.loop** %loop_s.addr, align 8, !dbg !3791
  %call = call i32 @loop_depth(%struct.loop* %4), !dbg !3792
  store i32 %call, i32* %sdepth, align 4, !dbg !3793
  %5 = load %struct.loop*, %struct.loop** %loop_d.addr, align 8, !dbg !3794
  %call4 = call i32 @loop_depth(%struct.loop* %5), !dbg !3795
  store i32 %call4, i32* %ddepth, align 4, !dbg !3796
  %6 = load i32, i32* %sdepth, align 4, !dbg !3797
  %7 = load i32, i32* %ddepth, align 4, !dbg !3799
  %cmp = icmp ult i32 %6, %7, !dbg !3800
  br i1 %cmp, label %if.then5, label %if.else, !dbg !3801

if.then5:                                         ; preds = %if.end3
  %8 = load %struct.loop*, %struct.loop** %loop_d.addr, align 8, !dbg !3802
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 7, !dbg !3802
  %9 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !3802
  %tobool6 = icmp ne %struct.VEC_loop_p_gc* %9, null, !dbg !3802
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !3802

cond.true:                                        ; preds = %if.then5
  %10 = load %struct.loop*, %struct.loop** %loop_d.addr, align 8, !dbg !3802
  %superloops7 = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 7, !dbg !3802
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops7, align 8, !dbg !3802
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %11, i32 0, i32 0, !dbg !3802
  br label %cond.end, !dbg !3802

cond.false:                                       ; preds = %if.then5
  br label %cond.end, !dbg !3802

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3802
  %12 = load i32, i32* %sdepth, align 4, !dbg !3802
  %call8 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %12), !dbg !3802
  store %struct.loop* %call8, %struct.loop** %loop_d.addr, align 8, !dbg !3803
  br label %if.end21, !dbg !3804

if.else:                                          ; preds = %if.end3
  %13 = load i32, i32* %sdepth, align 4, !dbg !3805
  %14 = load i32, i32* %ddepth, align 4, !dbg !3807
  %cmp9 = icmp ugt i32 %13, %14, !dbg !3808
  br i1 %cmp9, label %if.then10, label %if.end20, !dbg !3809

if.then10:                                        ; preds = %if.else
  %15 = load %struct.loop*, %struct.loop** %loop_s.addr, align 8, !dbg !3810
  %superloops11 = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 7, !dbg !3810
  %16 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops11, align 8, !dbg !3810
  %tobool12 = icmp ne %struct.VEC_loop_p_gc* %16, null, !dbg !3810
  br i1 %tobool12, label %cond.true13, label %cond.false16, !dbg !3810

cond.true13:                                      ; preds = %if.then10
  %17 = load %struct.loop*, %struct.loop** %loop_s.addr, align 8, !dbg !3810
  %superloops14 = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 7, !dbg !3810
  %18 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops14, align 8, !dbg !3810
  %base15 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %18, i32 0, i32 0, !dbg !3810
  br label %cond.end17, !dbg !3810

cond.false16:                                     ; preds = %if.then10
  br label %cond.end17, !dbg !3810

cond.end17:                                       ; preds = %cond.false16, %cond.true13
  %cond18 = phi %struct.VEC_loop_p_base* [ %base15, %cond.true13 ], [ null, %cond.false16 ], !dbg !3810
  %19 = load i32, i32* %ddepth, align 4, !dbg !3810
  %call19 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond18, i32 %19), !dbg !3810
  store %struct.loop* %call19, %struct.loop** %loop_s.addr, align 8, !dbg !3811
  br label %if.end20, !dbg !3812

if.end20:                                         ; preds = %cond.end17, %if.else
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %cond.end
  br label %while.cond, !dbg !3813

while.cond:                                       ; preds = %while.body, %if.end21
  %20 = load %struct.loop*, %struct.loop** %loop_s.addr, align 8, !dbg !3814
  %21 = load %struct.loop*, %struct.loop** %loop_d.addr, align 8, !dbg !3815
  %cmp22 = icmp ne %struct.loop* %20, %21, !dbg !3816
  br i1 %cmp22, label %while.body, label %while.end, !dbg !3813

while.body:                                       ; preds = %while.cond
  %22 = load %struct.loop*, %struct.loop** %loop_s.addr, align 8, !dbg !3817
  %call23 = call %struct.loop* @loop_outer(%struct.loop* %22), !dbg !3819
  store %struct.loop* %call23, %struct.loop** %loop_s.addr, align 8, !dbg !3820
  %23 = load %struct.loop*, %struct.loop** %loop_d.addr, align 8, !dbg !3821
  %call24 = call %struct.loop* @loop_outer(%struct.loop* %23), !dbg !3822
  store %struct.loop* %call24, %struct.loop** %loop_d.addr, align 8, !dbg !3823
  br label %while.cond, !dbg !3813, !llvm.loop !3824

while.end:                                        ; preds = %while.cond
  %24 = load %struct.loop*, %struct.loop** %loop_s.addr, align 8, !dbg !3826
  store %struct.loop* %24, %struct.loop** %retval, align 8, !dbg !3827
  br label %return, !dbg !3827

return:                                           ; preds = %while.end, %if.then2, %if.then
  %25 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !3828
  ret %struct.loop* %25, !dbg !3828
}

declare dso_local i8* @ggc_alloc_stat(i64) #2

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @loop_exit_free(i8* %ex) #0 !dbg !3829 {
entry:
  %ex.addr = alloca i8*, align 8
  %exit = alloca %struct.loop_exit*, align 8
  %next = alloca %struct.loop_exit*, align 8
  store i8* %ex, i8** %ex.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ex.addr, metadata !3830, metadata !DIExpression()), !dbg !3831
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %exit, metadata !3832, metadata !DIExpression()), !dbg !3833
  %0 = load i8*, i8** %ex.addr, align 8, !dbg !3834
  %1 = bitcast i8* %0 to %struct.loop_exit*, !dbg !3835
  store %struct.loop_exit* %1, %struct.loop_exit** %exit, align 8, !dbg !3833
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %next, metadata !3836, metadata !DIExpression()), !dbg !3837
  br label %for.cond, !dbg !3838

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3839
  %tobool = icmp ne %struct.loop_exit* %2, null, !dbg !3842
  br i1 %tobool, label %for.body, label %for.end, !dbg !3842

for.body:                                         ; preds = %for.cond
  %3 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3843
  %next_e = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %3, i32 0, i32 3, !dbg !3845
  %4 = load %struct.loop_exit*, %struct.loop_exit** %next_e, align 8, !dbg !3845
  store %struct.loop_exit* %4, %struct.loop_exit** %next, align 8, !dbg !3846
  %5 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3847
  %prev = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %5, i32 0, i32 1, !dbg !3848
  %6 = load %struct.loop_exit*, %struct.loop_exit** %prev, align 8, !dbg !3848
  %7 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3849
  %next1 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %7, i32 0, i32 2, !dbg !3850
  %8 = load %struct.loop_exit*, %struct.loop_exit** %next1, align 8, !dbg !3850
  %prev2 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %8, i32 0, i32 1, !dbg !3851
  store %struct.loop_exit* %6, %struct.loop_exit** %prev2, align 8, !dbg !3852
  %9 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3853
  %next3 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %9, i32 0, i32 2, !dbg !3854
  %10 = load %struct.loop_exit*, %struct.loop_exit** %next3, align 8, !dbg !3854
  %11 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3855
  %prev4 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %11, i32 0, i32 1, !dbg !3856
  %12 = load %struct.loop_exit*, %struct.loop_exit** %prev4, align 8, !dbg !3856
  %next5 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %12, i32 0, i32 2, !dbg !3857
  store %struct.loop_exit* %10, %struct.loop_exit** %next5, align 8, !dbg !3858
  %13 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3859
  %14 = bitcast %struct.loop_exit* %13 to i8*, !dbg !3859
  call void @ggc_free(i8* %14), !dbg !3860
  br label %for.inc, !dbg !3861

for.inc:                                          ; preds = %for.body
  %15 = load %struct.loop_exit*, %struct.loop_exit** %next, align 8, !dbg !3862
  store %struct.loop_exit* %15, %struct.loop_exit** %exit, align 8, !dbg !3863
  br label %for.cond, !dbg !3864, !llvm.loop !3865

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3867
}

declare dso_local void @htab_clear_slot(%struct.htab*, i8**) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @record_loop_exits() #0 !dbg !3868 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3869, metadata !DIExpression()), !dbg !3870
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3871, metadata !DIExpression()), !dbg !3872
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3873, metadata !DIExpression()), !dbg !3874
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3875
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3875
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3875
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3875
  %tobool = icmp ne %struct.loops* %1, null, !dbg !3875
  br i1 %tobool, label %if.end, label %if.then, !dbg !3877

if.then:                                          ; preds = %entry
  br label %for.end23, !dbg !3878

if.end:                                           ; preds = %entry
  %call = call zeroext i8 @loops_state_satisfies_p(i32 8), !dbg !3879
  %tobool1 = icmp ne i8 %call, 0, !dbg !3879
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !3881

if.then2:                                         ; preds = %if.end
  br label %for.end23, !dbg !3882

if.end3:                                          ; preds = %if.end
  call void @loops_state_set(i32 8), !dbg !3883
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3884
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3884
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !3884
  %3 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !3884
  %exits = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 2, !dbg !3884
  %4 = load %struct.htab*, %struct.htab** %exits, align 8, !dbg !3884
  %cmp = icmp eq %struct.htab* %4, null, !dbg !3884
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3884

cond.true:                                        ; preds = %if.end3
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 1082, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3884
  br label %cond.end, !dbg !3884

cond.false:                                       ; preds = %if.end3
  br label %cond.end, !dbg !3884

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3884
  %call6 = call i32 @number_of_loops(), !dbg !3885
  %mul = mul i32 2, %call6, !dbg !3886
  %conv = zext i32 %mul to i64, !dbg !3887
  %call7 = call %struct.htab* @htab_create_alloc(i64 %conv, i32 (i8*)* @loop_exit_hash, i32 (i8*, i8*)* @loop_exit_eq, void (i8*)* @loop_exit_free, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !3888
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3889
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3889
  %x_current_loops9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 4, !dbg !3889
  %6 = load %struct.loops*, %struct.loops** %x_current_loops9, align 8, !dbg !3889
  %exits10 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 2, !dbg !3890
  store %struct.htab* %call7, %struct.htab** %exits10, align 8, !dbg !3891
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3892
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3892
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !3892
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3892
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 0, !dbg !3892
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3892
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 6, !dbg !3892
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3892
  store %struct.basic_block_def* %10, %struct.basic_block_def** %bb, align 8, !dbg !3892
  br label %for.cond, !dbg !3892

for.cond:                                         ; preds = %for.inc21, %cond.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3894
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3894
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !3894
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !3894
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !3894
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 1, !dbg !3894
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3894
  %cmp14 = icmp ne %struct.basic_block_def* %11, %14, !dbg !3894
  br i1 %cmp14, label %for.body, label %for.end23, !dbg !3892

for.body:                                         ; preds = %for.cond
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3896
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !3896
  %call16 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3896
  %16 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3896
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 0, !dbg !3896
  %18 = extractvalue { i32, %struct.VEC_edge_gc** } %call16, 0, !dbg !3896
  store i32 %18, i32* %17, align 8, !dbg !3896
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 1, !dbg !3896
  %20 = extractvalue { i32, %struct.VEC_edge_gc** } %call16, 1, !dbg !3896
  store %struct.VEC_edge_gc** %20, %struct.VEC_edge_gc*** %19, align 8, !dbg !3896
  %21 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3896
  %22 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3896
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false), !dbg !3896
  br label %for.cond17, !dbg !3896

for.cond17:                                       ; preds = %for.inc, %for.body
  %23 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3899
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 0, !dbg !3899
  %25 = load i32, i32* %24, align 8, !dbg !3899
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 1, !dbg !3899
  %27 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %26, align 8, !dbg !3899
  %call18 = call zeroext i8 @ei_cond(i32 %25, %struct.VEC_edge_gc** %27, %struct.edge_def** %e), !dbg !3899
  %tobool19 = icmp ne i8 %call18, 0, !dbg !3896
  br i1 %tobool19, label %for.body20, label %for.end, !dbg !3896

for.body20:                                       ; preds = %for.cond17
  %28 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3901
  call void @rescan_loop_exit(%struct.edge_def* %28, i8 zeroext 1, i8 zeroext 0), !dbg !3903
  br label %for.inc, !dbg !3904

for.inc:                                          ; preds = %for.body20
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3899
  br label %for.cond17, !dbg !3899, !llvm.loop !3905

for.end:                                          ; preds = %for.cond17
  br label %for.inc21, !dbg !3907

for.inc21:                                        ; preds = %for.end
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3894
  %next_bb22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 6, !dbg !3894
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb22, align 8, !dbg !3894
  store %struct.basic_block_def* %30, %struct.basic_block_def** %bb, align 8, !dbg !3894
  br label %for.cond, !dbg !3894, !llvm.loop !3908

for.end23:                                        ; preds = %if.then, %if.then2, %for.cond
  ret void, !dbg !3910
}

; Function Attrs: noinline nounwind uwtable
define internal void @loops_state_set(i32 %flags) #0 !dbg !3911 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3914, metadata !DIExpression()), !dbg !3915
  %0 = load i32, i32* %flags.addr, align 4, !dbg !3916
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3917
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3917
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3917
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3917
  %state = getelementptr inbounds %struct.loops, %struct.loops* %2, i32 0, i32 0, !dbg !3918
  %3 = load i32, i32* %state, align 8, !dbg !3919
  %or = or i32 %3, %0, !dbg !3919
  store i32 %or, i32* %state, align 8, !dbg !3919
  ret void, !dbg !3920
}

declare dso_local %struct.htab* @htab_create_alloc(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8* (i64, i64)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_exit_hash(i8* %ex) #0 !dbg !3921 {
entry:
  %ex.addr = alloca i8*, align 8
  %exit = alloca %struct.loop_exit*, align 8
  store i8* %ex, i8** %ex.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ex.addr, metadata !3922, metadata !DIExpression()), !dbg !3923
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %exit, metadata !3924, metadata !DIExpression()), !dbg !3926
  %0 = load i8*, i8** %ex.addr, align 8, !dbg !3927
  %1 = bitcast i8* %0 to %struct.loop_exit*, !dbg !3928
  store %struct.loop_exit* %1, %struct.loop_exit** %exit, align 8, !dbg !3926
  %2 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !3929
  %3 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3930
  %e = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %3, i32 0, i32 0, !dbg !3931
  %4 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3931
  %5 = bitcast %struct.edge_def* %4 to i8*, !dbg !3930
  %call = call i32 %2(i8* %5), !dbg !3929
  ret i32 %call, !dbg !3932
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_exit_eq(i8* %ex, i8* %e) #0 !dbg !3933 {
entry:
  %ex.addr = alloca i8*, align 8
  %e.addr = alloca i8*, align 8
  %exit = alloca %struct.loop_exit*, align 8
  store i8* %ex, i8** %ex.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ex.addr, metadata !3934, metadata !DIExpression()), !dbg !3935
  store i8* %e, i8** %e.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e.addr, metadata !3936, metadata !DIExpression()), !dbg !3937
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %exit, metadata !3938, metadata !DIExpression()), !dbg !3939
  %0 = load i8*, i8** %ex.addr, align 8, !dbg !3940
  %1 = bitcast i8* %0 to %struct.loop_exit*, !dbg !3941
  store %struct.loop_exit* %1, %struct.loop_exit** %exit, align 8, !dbg !3939
  %2 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3942
  %e1 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %2, i32 0, i32 0, !dbg !3943
  %3 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !3943
  %4 = load i8*, i8** %e.addr, align 8, !dbg !3944
  %5 = bitcast i8* %4 to %struct.edge_def*, !dbg !3944
  %cmp = icmp eq %struct.edge_def* %3, %5, !dbg !3945
  %conv = zext i1 %cmp to i32, !dbg !3945
  ret i32 %conv, !dbg !3946
}

declare dso_local i8* @ggc_calloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_recorded_exits(%struct._IO_FILE* %file) #0 !dbg !3947 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3948, metadata !DIExpression()), !dbg !3949
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3950
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3950
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3950
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3950
  %exits = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 2, !dbg !3952
  %2 = load %struct.htab*, %struct.htab** %exits, align 8, !dbg !3952
  %tobool = icmp ne %struct.htab* %2, null, !dbg !3950
  br i1 %tobool, label %if.end, label %if.then, !dbg !3953

if.then:                                          ; preds = %entry
  br label %return, !dbg !3954

if.end:                                           ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3955
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3955
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !3955
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !3955
  %exits3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 2, !dbg !3956
  %5 = load %struct.htab*, %struct.htab** %exits3, align 8, !dbg !3956
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3957
  %7 = bitcast %struct._IO_FILE* %6 to i8*, !dbg !3957
  call void @htab_traverse(%struct.htab* %5, i32 (i8**, i8*)* @dump_recorded_exit, i8* %7), !dbg !3958
  br label %return, !dbg !3959

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !3959
}

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @dump_recorded_exit(i8** %slot, i8* %file) #0 !dbg !3960 {
entry:
  %slot.addr = alloca i8**, align 8
  %file.addr = alloca i8*, align 8
  %exit = alloca %struct.loop_exit*, align 8
  %n = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !3963, metadata !DIExpression()), !dbg !3964
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !3965, metadata !DIExpression()), !dbg !3966
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %exit, metadata !3967, metadata !DIExpression()), !dbg !3968
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !3969
  %1 = load i8*, i8** %0, align 8, !dbg !3970
  %2 = bitcast i8* %1 to %struct.loop_exit*, !dbg !3971
  store %struct.loop_exit* %2, %struct.loop_exit** %exit, align 8, !dbg !3968
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3972, metadata !DIExpression()), !dbg !3973
  store i32 0, i32* %n, align 4, !dbg !3973
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3974, metadata !DIExpression()), !dbg !3975
  %3 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3976
  %e1 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %3, i32 0, i32 0, !dbg !3977
  %4 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !3977
  store %struct.edge_def* %4, %struct.edge_def** %e, align 8, !dbg !3975
  br label %for.cond, !dbg !3978

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3979
  %cmp = icmp ne %struct.loop_exit* %5, null, !dbg !3982
  br i1 %cmp, label %for.body, label %for.end, !dbg !3983

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %n, align 4, !dbg !3984
  %inc = add i32 %6, 1, !dbg !3984
  store i32 %inc, i32* %n, align 4, !dbg !3984
  br label %for.inc, !dbg !3985

for.inc:                                          ; preds = %for.body
  %7 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !3986
  %next_e = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %7, i32 0, i32 3, !dbg !3987
  %8 = load %struct.loop_exit*, %struct.loop_exit** %next_e, align 8, !dbg !3987
  store %struct.loop_exit* %8, %struct.loop_exit** %exit, align 8, !dbg !3988
  br label %for.cond, !dbg !3989, !llvm.loop !3990

for.end:                                          ; preds = %for.cond
  %9 = load i8*, i8** %file.addr, align 8, !dbg !3992
  %10 = bitcast i8* %9 to %struct._IO_FILE*, !dbg !3993
  %11 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3994
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 0, !dbg !3995
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3995
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !3996
  %13 = load i32, i32* %index, align 8, !dbg !3996
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3997
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 1, !dbg !3998
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3998
  %index2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !3999
  %16 = load i32, i32* %index2, align 8, !dbg !3999
  %17 = load i32, i32* %n, align 4, !dbg !4000
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.39, i64 0, i64 0), i32 %13, i32 %16, i32 %17), !dbg !4001
  ret i32 1, !dbg !4002
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @release_recorded_exits() #0 !dbg !4003 {
entry:
  %call = call zeroext i8 @loops_state_satisfies_p(i32 8), !dbg !4004
  %tobool = icmp ne i8 %call, 0, !dbg !4004
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4004

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 1133, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4004
  br label %cond.end, !dbg !4004

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4004

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4004
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4005
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4005
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !4005
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4005
  %exits = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 2, !dbg !4006
  %2 = load %struct.htab*, %struct.htab** %exits, align 8, !dbg !4006
  call void @htab_delete(%struct.htab* %2), !dbg !4007
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4008
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4008
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !4008
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !4008
  %exits3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 2, !dbg !4009
  store %struct.htab* null, %struct.htab** %exits3, align 8, !dbg !4010
  call void @loops_state_clear(i32 8), !dbg !4011
  ret void, !dbg !4012
}

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @loops_state_clear(i32 %flags) #0 !dbg !4013 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4014, metadata !DIExpression()), !dbg !4015
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4016
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4016
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !4016
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4016
  %tobool = icmp ne %struct.loops* %1, null, !dbg !4016
  br i1 %tobool, label %if.end, label %if.then, !dbg !4018

if.then:                                          ; preds = %entry
  br label %return, !dbg !4019

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !4020
  %neg = xor i32 %2, -1, !dbg !4021
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4022
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4022
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !4022
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !4022
  %state = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 0, !dbg !4023
  %5 = load i32, i32* %state, align 8, !dbg !4024
  %and = and i32 %5, %neg, !dbg !4024
  store i32 %and, i32* %state, align 8, !dbg !4024
  br label %return, !dbg !4025

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !4025
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %loop) #0 !dbg !4026 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %edges = alloca %struct.VEC_edge_heap*, align 8
  %e = alloca %struct.edge_def*, align 8
  %i = alloca i32, align 4
  %body = alloca %struct.basic_block_def**, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %exit = alloca %struct.loop_exit*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4027, metadata !DIExpression()), !dbg !4028
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %edges, metadata !4029, metadata !DIExpression()), !dbg !4030
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %edges, align 8, !dbg !4030
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4031, metadata !DIExpression()), !dbg !4032
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4033, metadata !DIExpression()), !dbg !4034
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !4035, metadata !DIExpression()), !dbg !4036
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4037, metadata !DIExpression()), !dbg !4038
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %exit, metadata !4039, metadata !DIExpression()), !dbg !4040
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4041
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 3, !dbg !4041
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4041
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4041
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4041
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4041
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4041
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 1, !dbg !4041
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4041
  %cmp = icmp ne %struct.basic_block_def* %1, %4, !dbg !4041
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4041

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 1151, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4041
  br label %cond.end, !dbg !4041

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4041

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4041
  %call = call zeroext i8 @loops_state_satisfies_p(i32 8), !dbg !4042
  %tobool = icmp ne i8 %call, 0, !dbg !4042
  br i1 %tobool, label %if.then, label %if.else, !dbg !4044

if.then:                                          ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4045
  %exits = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 18, !dbg !4048
  %6 = load %struct.loop_exit*, %struct.loop_exit** %exits, align 8, !dbg !4048
  %next = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %6, i32 0, i32 2, !dbg !4049
  %7 = load %struct.loop_exit*, %struct.loop_exit** %next, align 8, !dbg !4049
  store %struct.loop_exit* %7, %struct.loop_exit** %exit, align 8, !dbg !4050
  br label %for.cond, !dbg !4051

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !4052
  %e1 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %8, i32 0, i32 0, !dbg !4054
  %9 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !4054
  %tobool2 = icmp ne %struct.edge_def* %9, null, !dbg !4055
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4055

for.body:                                         ; preds = %for.cond
  %10 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !4056
  %e3 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %10, i32 0, i32 0, !dbg !4056
  %11 = load %struct.edge_def*, %struct.edge_def** %e3, align 8, !dbg !4056
  %call4 = call %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** %edges, %struct.edge_def* %11), !dbg !4056
  br label %for.inc, !dbg !4056

for.inc:                                          ; preds = %for.body
  %12 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !4057
  %next5 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %12, i32 0, i32 2, !dbg !4058
  %13 = load %struct.loop_exit*, %struct.loop_exit** %next5, align 8, !dbg !4058
  store %struct.loop_exit* %13, %struct.loop_exit** %exit, align 8, !dbg !4059
  br label %for.cond, !dbg !4060, !llvm.loop !4061

for.end:                                          ; preds = %for.cond
  br label %if.end23, !dbg !4063

if.else:                                          ; preds = %cond.end
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4064
  %call6 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %14), !dbg !4066
  store %struct.basic_block_def** %call6, %struct.basic_block_def*** %body, align 8, !dbg !4067
  store i32 0, i32* %i, align 4, !dbg !4068
  br label %for.cond7, !dbg !4070

for.cond7:                                        ; preds = %for.inc21, %if.else
  %15 = load i32, i32* %i, align 4, !dbg !4071
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4073
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %16, i32 0, i32 6, !dbg !4074
  %17 = load i32, i32* %num_nodes, align 4, !dbg !4074
  %cmp8 = icmp ult i32 %15, %17, !dbg !4075
  br i1 %cmp8, label %for.body9, label %for.end22, !dbg !4076

for.body9:                                        ; preds = %for.cond7
  %18 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !4077
  %19 = load i32, i32* %i, align 4, !dbg !4077
  %idxprom = zext i32 %19 to i64, !dbg !4077
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %18, i64 %idxprom, !dbg !4077
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4077
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 1, !dbg !4077
  %call10 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4077
  %21 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4077
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 0, !dbg !4077
  %23 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 0, !dbg !4077
  store i32 %23, i32* %22, align 8, !dbg !4077
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 1, !dbg !4077
  %25 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 1, !dbg !4077
  store %struct.VEC_edge_gc** %25, %struct.VEC_edge_gc*** %24, align 8, !dbg !4077
  %26 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4077
  %27 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4077
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false), !dbg !4077
  br label %for.cond11, !dbg !4077

for.cond11:                                       ; preds = %for.inc19, %for.body9
  %28 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4079
  %29 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 0, !dbg !4079
  %30 = load i32, i32* %29, align 8, !dbg !4079
  %31 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 1, !dbg !4079
  %32 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %31, align 8, !dbg !4079
  %call12 = call zeroext i8 @ei_cond(i32 %30, %struct.VEC_edge_gc** %32, %struct.edge_def** %e), !dbg !4079
  %tobool13 = icmp ne i8 %call12, 0, !dbg !4077
  br i1 %tobool13, label %for.body14, label %for.end20, !dbg !4077

for.body14:                                       ; preds = %for.cond11
  %33 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4081
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4084
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 1, !dbg !4085
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4085
  %call15 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %33, %struct.basic_block_def* %35), !dbg !4086
  %tobool16 = icmp ne i8 %call15, 0, !dbg !4086
  br i1 %tobool16, label %if.end, label %if.then17, !dbg !4087

if.then17:                                        ; preds = %for.body14
  %36 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4088
  %call18 = call %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** %edges, %struct.edge_def* %36), !dbg !4088
  br label %if.end, !dbg !4088

if.end:                                           ; preds = %if.then17, %for.body14
  br label %for.inc19, !dbg !4089

for.inc19:                                        ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4079
  br label %for.cond11, !dbg !4079, !llvm.loop !4090

for.end20:                                        ; preds = %for.cond11
  br label %for.inc21, !dbg !4091

for.inc21:                                        ; preds = %for.end20
  %37 = load i32, i32* %i, align 4, !dbg !4092
  %inc = add i32 %37, 1, !dbg !4092
  store i32 %inc, i32* %i, align 4, !dbg !4092
  br label %for.cond7, !dbg !4093, !llvm.loop !4094

for.end22:                                        ; preds = %for.cond7
  %38 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !4096
  %39 = bitcast %struct.basic_block_def** %38 to i8*, !dbg !4096
  call void @free(i8* %39), !dbg !4097
  br label %if.end23

if.end23:                                         ; preds = %for.end22, %for.end
  %40 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !4098
  ret %struct.VEC_edge_heap* %40, !dbg !4099
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** %vec_, %struct.edge_def* %obj_) #0 !dbg !4100 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  %obj_.addr = alloca %struct.edge_def*, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !4103, metadata !DIExpression()), !dbg !4104
  store %struct.edge_def* %obj_, %struct.edge_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %obj_.addr, metadata !4105, metadata !DIExpression()), !dbg !4104
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4104
  %call = call i32 @VEC_edge_heap_reserve(%struct.VEC_edge_heap** %0, i32 1), !dbg !4104
  %1 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4104
  %2 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %1, align 8, !dbg !4104
  %tobool = icmp ne %struct.VEC_edge_heap* %2, null, !dbg !4104
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4104

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4104
  %4 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %3, align 8, !dbg !4104
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %4, i32 0, i32 0, !dbg !4104
  br label %cond.end, !dbg !4104

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4104

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4104
  %5 = load %struct.edge_def*, %struct.edge_def** %obj_.addr, align 8, !dbg !4104
  %call1 = call %struct.edge_def** @VEC_edge_base_quick_push(%struct.VEC_edge_base* %cond, %struct.edge_def* %5), !dbg !4104
  ret %struct.edge_def** %call1, !dbg !4104
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @num_loop_branches(%struct.loop* %loop) #0 !dbg !4106 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %body = alloca %struct.basic_block_def**, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4107, metadata !DIExpression()), !dbg !4108
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4109, metadata !DIExpression()), !dbg !4110
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4111, metadata !DIExpression()), !dbg !4112
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !4113, metadata !DIExpression()), !dbg !4114
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4115
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 3, !dbg !4115
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4115
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4115
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4115
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4115
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4115
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 1, !dbg !4115
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4115
  %cmp = icmp ne %struct.basic_block_def* %1, %4, !dbg !4115
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4115

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 1183, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4115
  br label %cond.end, !dbg !4115

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4115

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4115
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4116
  %call = call %struct.basic_block_def** @get_loop_body(%struct.loop* %5), !dbg !4117
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %body, align 8, !dbg !4118
  store i32 0, i32* %n, align 4, !dbg !4119
  store i32 0, i32* %i, align 4, !dbg !4120
  br label %for.cond, !dbg !4122

for.cond:                                         ; preds = %for.inc, %cond.end
  %6 = load i32, i32* %i, align 4, !dbg !4123
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4125
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 6, !dbg !4126
  %8 = load i32, i32* %num_nodes, align 4, !dbg !4126
  %cmp1 = icmp ult i32 %6, %8, !dbg !4127
  br i1 %cmp1, label %for.body, label %for.end, !dbg !4128

for.body:                                         ; preds = %for.cond
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !4129
  %10 = load i32, i32* %i, align 4, !dbg !4129
  %idxprom = zext i32 %10 to i64, !dbg !4129
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %9, i64 %idxprom, !dbg !4129
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4129
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 1, !dbg !4129
  %12 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4129
  %tobool = icmp ne %struct.VEC_edge_gc* %12, null, !dbg !4129
  br i1 %tobool, label %cond.true2, label %cond.false6, !dbg !4129

cond.true2:                                       ; preds = %for.body
  %13 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !4129
  %14 = load i32, i32* %i, align 4, !dbg !4129
  %idxprom3 = zext i32 %14 to i64, !dbg !4129
  %arrayidx4 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %13, i64 %idxprom3, !dbg !4129
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx4, align 8, !dbg !4129
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !4129
  %16 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !4129
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %16, i32 0, i32 0, !dbg !4129
  br label %cond.end7, !dbg !4129

cond.false6:                                      ; preds = %for.body
  br label %cond.end7, !dbg !4129

cond.end7:                                        ; preds = %cond.false6, %cond.true2
  %cond8 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false6 ], !dbg !4129
  %call9 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond8), !dbg !4129
  %cmp10 = icmp uge i32 %call9, 2, !dbg !4131
  br i1 %cmp10, label %if.then, label %if.end, !dbg !4132

if.then:                                          ; preds = %cond.end7
  %17 = load i32, i32* %n, align 4, !dbg !4133
  %inc = add i32 %17, 1, !dbg !4133
  store i32 %inc, i32* %n, align 4, !dbg !4133
  br label %if.end, !dbg !4134

if.end:                                           ; preds = %if.then, %cond.end7
  br label %for.inc, !dbg !4135

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %i, align 4, !dbg !4136
  %inc11 = add i32 %18, 1, !dbg !4136
  store i32 %inc11, i32* %i, align 4, !dbg !4136
  br label %for.cond, !dbg !4137, !llvm.loop !4138

for.end:                                          ; preds = %for.cond
  %19 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !4140
  %20 = bitcast %struct.basic_block_def** %19 to i8*, !dbg !4140
  call void @free(i8* %20), !dbg !4141
  %21 = load i32, i32* %n, align 4, !dbg !4142
  ret i32 %21, !dbg !4143
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !4144 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4147, metadata !DIExpression()), !dbg !4148
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4148
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4148
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4148

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4148
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !4148
  %2 = load i32, i32* %num, align 8, !dbg !4148
  br label %cond.end, !dbg !4148

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4148

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4148
  ret i32 %cond, !dbg !4148
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_bb_to_loop(%struct.basic_block_def* %bb, %struct.loop* %loop) #0 !dbg !4149 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %ploop = alloca %struct.loop*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp19 = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4152, metadata !DIExpression()), !dbg !4153
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4154, metadata !DIExpression()), !dbg !4155
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4156, metadata !DIExpression()), !dbg !4157
  call void @llvm.dbg.declare(metadata %struct.loop** %ploop, metadata !4158, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4160, metadata !DIExpression()), !dbg !4161
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4162, metadata !DIExpression()), !dbg !4163
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4164
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 3, !dbg !4164
  %1 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !4164
  %cmp = icmp eq %struct.loop* %1, null, !dbg !4164
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4164

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 1204, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4164
  br label %cond.end, !dbg !4164

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4164

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4164
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4165
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4166
  %loop_father1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 3, !dbg !4167
  store %struct.loop* %2, %struct.loop** %loop_father1, align 8, !dbg !4168
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4169
  %call = call i32 @loop_depth(%struct.loop* %4), !dbg !4170
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4171
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 10, !dbg !4172
  store i32 %call, i32* %loop_depth, align 4, !dbg !4173
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4174
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 6, !dbg !4175
  %7 = load i32, i32* %num_nodes, align 4, !dbg !4176
  %inc = add i32 %7, 1, !dbg !4176
  store i32 %inc, i32* %num_nodes, align 4, !dbg !4176
  store i32 0, i32* %i, align 4, !dbg !4177
  br label %for.cond, !dbg !4179

for.cond:                                         ; preds = %for.inc, %cond.end
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4180
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 7, !dbg !4180
  %9 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !4180
  %tobool = icmp ne %struct.VEC_loop_p_gc* %9, null, !dbg !4180
  br i1 %tobool, label %cond.true2, label %cond.false4, !dbg !4180

cond.true2:                                       ; preds = %for.cond
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4180
  %superloops3 = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 7, !dbg !4180
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops3, align 8, !dbg !4180
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %11, i32 0, i32 0, !dbg !4180
  br label %cond.end5, !dbg !4180

cond.false4:                                      ; preds = %for.cond
  br label %cond.end5, !dbg !4180

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_loop_p_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !4180
  %12 = load i32, i32* %i, align 4, !dbg !4180
  %call7 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond6, i32 %12, %struct.loop** %ploop), !dbg !4180
  %tobool8 = icmp ne i32 %call7, 0, !dbg !4182
  br i1 %tobool8, label %for.body, label %for.end, !dbg !4182

for.body:                                         ; preds = %cond.end5
  %13 = load %struct.loop*, %struct.loop** %ploop, align 8, !dbg !4183
  %num_nodes9 = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 6, !dbg !4184
  %14 = load i32, i32* %num_nodes9, align 4, !dbg !4185
  %inc10 = add i32 %14, 1, !dbg !4185
  store i32 %inc10, i32* %num_nodes9, align 4, !dbg !4185
  br label %for.inc, !dbg !4183

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4, !dbg !4186
  %inc11 = add i32 %15, 1, !dbg !4186
  store i32 %inc11, i32* %i, align 4, !dbg !4186
  br label %for.cond, !dbg !4187, !llvm.loop !4188

for.end:                                          ; preds = %cond.end5
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4190
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 1, !dbg !4190
  %call12 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4190
  %17 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4190
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %17, i32 0, i32 0, !dbg !4190
  %19 = extractvalue { i32, %struct.VEC_edge_gc** } %call12, 0, !dbg !4190
  store i32 %19, i32* %18, align 8, !dbg !4190
  %20 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %17, i32 0, i32 1, !dbg !4190
  %21 = extractvalue { i32, %struct.VEC_edge_gc** } %call12, 1, !dbg !4190
  store %struct.VEC_edge_gc** %21, %struct.VEC_edge_gc*** %20, align 8, !dbg !4190
  %22 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4190
  %23 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4190
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 16, i1 false), !dbg !4190
  br label %for.cond13, !dbg !4190

for.cond13:                                       ; preds = %for.inc17, %for.end
  %24 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4192
  %25 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %24, i32 0, i32 0, !dbg !4192
  %26 = load i32, i32* %25, align 8, !dbg !4192
  %27 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %24, i32 0, i32 1, !dbg !4192
  %28 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %27, align 8, !dbg !4192
  %call14 = call zeroext i8 @ei_cond(i32 %26, %struct.VEC_edge_gc** %28, %struct.edge_def** %e), !dbg !4192
  %tobool15 = icmp ne i8 %call14, 0, !dbg !4190
  br i1 %tobool15, label %for.body16, label %for.end18, !dbg !4190

for.body16:                                       ; preds = %for.cond13
  %29 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4194
  call void @rescan_loop_exit(%struct.edge_def* %29, i8 zeroext 1, i8 zeroext 0), !dbg !4196
  br label %for.inc17, !dbg !4197

for.inc17:                                        ; preds = %for.body16
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4192
  br label %for.cond13, !dbg !4192, !llvm.loop !4198

for.end18:                                        ; preds = %for.cond13
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4200
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 0, !dbg !4200
  %call20 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !4200
  %31 = bitcast %struct.edge_iterator* %tmp19 to { i32, %struct.VEC_edge_gc** }*, !dbg !4200
  %32 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %31, i32 0, i32 0, !dbg !4200
  %33 = extractvalue { i32, %struct.VEC_edge_gc** } %call20, 0, !dbg !4200
  store i32 %33, i32* %32, align 8, !dbg !4200
  %34 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %31, i32 0, i32 1, !dbg !4200
  %35 = extractvalue { i32, %struct.VEC_edge_gc** } %call20, 1, !dbg !4200
  store %struct.VEC_edge_gc** %35, %struct.VEC_edge_gc*** %34, align 8, !dbg !4200
  %36 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4200
  %37 = bitcast %struct.edge_iterator* %tmp19 to i8*, !dbg !4200
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 16, i1 false), !dbg !4200
  br label %for.cond21, !dbg !4200

for.cond21:                                       ; preds = %for.inc25, %for.end18
  %38 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4202
  %39 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 0, !dbg !4202
  %40 = load i32, i32* %39, align 8, !dbg !4202
  %41 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 1, !dbg !4202
  %42 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %41, align 8, !dbg !4202
  %call22 = call zeroext i8 @ei_cond(i32 %40, %struct.VEC_edge_gc** %42, %struct.edge_def** %e), !dbg !4202
  %tobool23 = icmp ne i8 %call22, 0, !dbg !4200
  br i1 %tobool23, label %for.body24, label %for.end26, !dbg !4200

for.body24:                                       ; preds = %for.cond21
  %43 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4204
  call void @rescan_loop_exit(%struct.edge_def* %43, i8 zeroext 1, i8 zeroext 0), !dbg !4206
  br label %for.inc25, !dbg !4207

for.inc25:                                        ; preds = %for.body24
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4202
  br label %for.cond21, !dbg !4202, !llvm.loop !4208

for.end26:                                        ; preds = %for.cond21
  ret void, !dbg !4210
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @remove_bb_from_loops(%struct.basic_block_def* %bb) #0 !dbg !4211 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  %ploop = alloca %struct.loop*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp17 = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4214, metadata !DIExpression()), !dbg !4215
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4216, metadata !DIExpression()), !dbg !4217
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4218, metadata !DIExpression()), !dbg !4219
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4220
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 3, !dbg !4221
  %1 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !4221
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !4219
  call void @llvm.dbg.declare(metadata %struct.loop** %ploop, metadata !4222, metadata !DIExpression()), !dbg !4223
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4224, metadata !DIExpression()), !dbg !4225
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4226, metadata !DIExpression()), !dbg !4227
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4228
  %cmp = icmp ne %struct.loop* %2, null, !dbg !4228
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4228

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 1231, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4228
  br label %cond.end, !dbg !4228

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4228

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4228
  %3 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4229
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 6, !dbg !4230
  %4 = load i32, i32* %num_nodes, align 4, !dbg !4231
  %dec = add i32 %4, -1, !dbg !4231
  store i32 %dec, i32* %num_nodes, align 4, !dbg !4231
  store i32 0, i32* %i, align 4, !dbg !4232
  br label %for.cond, !dbg !4234

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4235
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !4235
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !4235
  %tobool = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !4235
  br i1 %tobool, label %cond.true1, label %cond.false3, !dbg !4235

cond.true1:                                       ; preds = %for.cond
  %7 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4235
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !4235
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !4235
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !4235
  br label %cond.end4, !dbg !4235

cond.false3:                                      ; preds = %for.cond
  br label %cond.end4, !dbg !4235

cond.end4:                                        ; preds = %cond.false3, %cond.true1
  %cond5 = phi %struct.VEC_loop_p_base* [ %base, %cond.true1 ], [ null, %cond.false3 ], !dbg !4235
  %9 = load i32, i32* %i, align 4, !dbg !4235
  %call = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond5, i32 %9, %struct.loop** %ploop), !dbg !4235
  %tobool6 = icmp ne i32 %call, 0, !dbg !4237
  br i1 %tobool6, label %for.body, label %for.end, !dbg !4237

for.body:                                         ; preds = %cond.end4
  %10 = load %struct.loop*, %struct.loop** %ploop, align 8, !dbg !4238
  %num_nodes7 = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 6, !dbg !4239
  %11 = load i32, i32* %num_nodes7, align 4, !dbg !4240
  %dec8 = add i32 %11, -1, !dbg !4240
  store i32 %dec8, i32* %num_nodes7, align 4, !dbg !4240
  br label %for.inc, !dbg !4238

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !4241
  %inc = add nsw i32 %12, 1, !dbg !4241
  store i32 %inc, i32* %i, align 4, !dbg !4241
  br label %for.cond, !dbg !4242, !llvm.loop !4243

for.end:                                          ; preds = %cond.end4
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4245
  %loop_father9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 3, !dbg !4246
  store %struct.loop* null, %struct.loop** %loop_father9, align 8, !dbg !4247
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4248
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 10, !dbg !4249
  store i32 0, i32* %loop_depth, align 4, !dbg !4250
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4251
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !4251
  %call10 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4251
  %16 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4251
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 0, !dbg !4251
  %18 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 0, !dbg !4251
  store i32 %18, i32* %17, align 8, !dbg !4251
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 1, !dbg !4251
  %20 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 1, !dbg !4251
  store %struct.VEC_edge_gc** %20, %struct.VEC_edge_gc*** %19, align 8, !dbg !4251
  %21 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4251
  %22 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4251
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false), !dbg !4251
  br label %for.cond11, !dbg !4251

for.cond11:                                       ; preds = %for.inc15, %for.end
  %23 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4253
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 0, !dbg !4253
  %25 = load i32, i32* %24, align 8, !dbg !4253
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 1, !dbg !4253
  %27 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %26, align 8, !dbg !4253
  %call12 = call zeroext i8 @ei_cond(i32 %25, %struct.VEC_edge_gc** %27, %struct.edge_def** %e), !dbg !4253
  %tobool13 = icmp ne i8 %call12, 0, !dbg !4251
  br i1 %tobool13, label %for.body14, label %for.end16, !dbg !4251

for.body14:                                       ; preds = %for.cond11
  %28 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4255
  call void @rescan_loop_exit(%struct.edge_def* %28, i8 zeroext 0, i8 zeroext 1), !dbg !4257
  br label %for.inc15, !dbg !4258

for.inc15:                                        ; preds = %for.body14
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4253
  br label %for.cond11, !dbg !4253, !llvm.loop !4259

for.end16:                                        ; preds = %for.cond11
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4261
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 0, !dbg !4261
  %call18 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !4261
  %30 = bitcast %struct.edge_iterator* %tmp17 to { i32, %struct.VEC_edge_gc** }*, !dbg !4261
  %31 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %30, i32 0, i32 0, !dbg !4261
  %32 = extractvalue { i32, %struct.VEC_edge_gc** } %call18, 0, !dbg !4261
  store i32 %32, i32* %31, align 8, !dbg !4261
  %33 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %30, i32 0, i32 1, !dbg !4261
  %34 = extractvalue { i32, %struct.VEC_edge_gc** } %call18, 1, !dbg !4261
  store %struct.VEC_edge_gc** %34, %struct.VEC_edge_gc*** %33, align 8, !dbg !4261
  %35 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4261
  %36 = bitcast %struct.edge_iterator* %tmp17 to i8*, !dbg !4261
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false), !dbg !4261
  br label %for.cond19, !dbg !4261

for.cond19:                                       ; preds = %for.inc23, %for.end16
  %37 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4263
  %38 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %37, i32 0, i32 0, !dbg !4263
  %39 = load i32, i32* %38, align 8, !dbg !4263
  %40 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %37, i32 0, i32 1, !dbg !4263
  %41 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %40, align 8, !dbg !4263
  %call20 = call zeroext i8 @ei_cond(i32 %39, %struct.VEC_edge_gc** %41, %struct.edge_def** %e), !dbg !4263
  %tobool21 = icmp ne i8 %call20, 0, !dbg !4261
  br i1 %tobool21, label %for.body22, label %for.end24, !dbg !4261

for.body22:                                       ; preds = %for.cond19
  %42 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4265
  call void @rescan_loop_exit(%struct.edge_def* %42, i8 zeroext 0, i8 zeroext 1), !dbg !4267
  br label %for.inc23, !dbg !4268

for.inc23:                                        ; preds = %for.body22
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4263
  br label %for.cond19, !dbg !4263, !llvm.loop !4269

for.end24:                                        ; preds = %for.cond19
  ret void, !dbg !4271
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @delete_loop(%struct.loop* %loop) #0 !dbg !4272 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4273, metadata !DIExpression()), !dbg !4274
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4275
  call void @flow_loop_tree_node_remove(%struct.loop* %0), !dbg !4276
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4277
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !4277
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !4277
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4277
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %2, i32 0, i32 1, !dbg !4277
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !4277
  %tobool = icmp ne %struct.VEC_loop_p_gc* %3, null, !dbg !4277
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4277

cond.true:                                        ; preds = %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4277
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !4277
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !4277
  %5 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !4277
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %5, i32 0, i32 1, !dbg !4277
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !4277
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %6, i32 0, i32 0, !dbg !4277
  br label %cond.end, !dbg !4277

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4277

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4277
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4277
  %num = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 0, !dbg !4277
  %8 = load i32, i32* %num, align 8, !dbg !4277
  %call = call %struct.loop* @VEC_loop_p_base_replace(%struct.VEC_loop_p_base* %cond, i32 %8, %struct.loop* null), !dbg !4277
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4278
  call void @flow_loop_free(%struct.loop* %9), !dbg !4279
  ret void, !dbg !4280
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_replace(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop* %obj_) #0 !dbg !4281 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.loop*, align 8
  %old_obj_ = alloca %struct.loop*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !4284, metadata !DIExpression()), !dbg !4285
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4286, metadata !DIExpression()), !dbg !4285
  store %struct.loop* %obj_, %struct.loop** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %obj_.addr, metadata !4287, metadata !DIExpression()), !dbg !4285
  call void @llvm.dbg.declare(metadata %struct.loop** %old_obj_, metadata !4288, metadata !DIExpression()), !dbg !4285
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !4285
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4285
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !4285
  %2 = load i32, i32* %num, align 8, !dbg !4285
  %cmp = icmp ult i32 %0, %2, !dbg !4285
  %conv = zext i1 %cmp to i32, !dbg !4285
  %3 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4285
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %3, i32 0, i32 2, !dbg !4285
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !4285
  %idxprom = zext i32 %4 to i64, !dbg !4285
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !4285
  %5 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !4285
  store %struct.loop* %5, %struct.loop** %old_obj_, align 8, !dbg !4285
  %6 = load %struct.loop*, %struct.loop** %obj_.addr, align 8, !dbg !4285
  %7 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4285
  %vec1 = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %7, i32 0, i32 2, !dbg !4285
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !4285
  %idxprom2 = zext i32 %8 to i64, !dbg !4285
  %arrayidx3 = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec1, i64 0, i64 %idxprom2, !dbg !4285
  store %struct.loop* %6, %struct.loop** %arrayidx3, align 8, !dbg !4285
  %9 = load %struct.loop*, %struct.loop** %old_obj_, align 8, !dbg !4285
  ret %struct.loop* %9, !dbg !4285
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cancel_loop_tree(%struct.loop* %loop) #0 !dbg !4289 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4290, metadata !DIExpression()), !dbg !4291
  br label %while.cond, !dbg !4292

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4293
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 8, !dbg !4294
  %1 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !4294
  %tobool = icmp ne %struct.loop* %1, null, !dbg !4292
  br i1 %tobool, label %while.body, label %while.end, !dbg !4292

while.body:                                       ; preds = %while.cond
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4295
  %inner1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 8, !dbg !4296
  %3 = load %struct.loop*, %struct.loop** %inner1, align 8, !dbg !4296
  call void @cancel_loop_tree(%struct.loop* %3), !dbg !4297
  br label %while.cond, !dbg !4292, !llvm.loop !4298

while.end:                                        ; preds = %while.cond
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4300
  call void @cancel_loop(%struct.loop* %4), !dbg !4301
  ret void, !dbg !4302
}

; Function Attrs: noinline nounwind uwtable
define internal void @cancel_loop(%struct.loop* %loop) #0 !dbg !4303 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  %outer = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4304, metadata !DIExpression()), !dbg !4305
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !4306, metadata !DIExpression()), !dbg !4307
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4308, metadata !DIExpression()), !dbg !4309
  call void @llvm.dbg.declare(metadata %struct.loop** %outer, metadata !4310, metadata !DIExpression()), !dbg !4311
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4312
  %call = call %struct.loop* @loop_outer(%struct.loop* %0), !dbg !4313
  store %struct.loop* %call, %struct.loop** %outer, align 8, !dbg !4311
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4314
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 8, !dbg !4314
  %2 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !4314
  %tobool = icmp ne %struct.loop* %2, null, !dbg !4314
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4314

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 1297, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4314
  br label %cond.end, !dbg !4314

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4314

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4314
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4315
  %call1 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %3), !dbg !4316
  store %struct.basic_block_def** %call1, %struct.basic_block_def*** %bbs, align 8, !dbg !4317
  store i32 0, i32* %i, align 4, !dbg !4318
  br label %for.cond, !dbg !4320

for.cond:                                         ; preds = %for.inc, %cond.end
  %4 = load i32, i32* %i, align 4, !dbg !4321
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4323
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 6, !dbg !4324
  %6 = load i32, i32* %num_nodes, align 4, !dbg !4324
  %cmp = icmp ult i32 %4, %6, !dbg !4325
  br i1 %cmp, label %for.body, label %for.end, !dbg !4326

for.body:                                         ; preds = %for.cond
  %7 = load %struct.loop*, %struct.loop** %outer, align 8, !dbg !4327
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4328
  %9 = load i32, i32* %i, align 4, !dbg !4329
  %idxprom = zext i32 %9 to i64, !dbg !4328
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %8, i64 %idxprom, !dbg !4328
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4328
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 3, !dbg !4330
  store %struct.loop* %7, %struct.loop** %loop_father, align 8, !dbg !4331
  br label %for.inc, !dbg !4328

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !4332
  %inc = add i32 %11, 1, !dbg !4332
  store i32 %inc, i32* %i, align 4, !dbg !4332
  br label %for.cond, !dbg !4333, !llvm.loop !4334

for.end:                                          ; preds = %for.cond
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4336
  call void @delete_loop(%struct.loop* %12), !dbg !4337
  ret void, !dbg !4338
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @verify_loop_structure() #0 !dbg !4339 {
entry:
  %sizes = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %irreds = alloca %struct.simple_bitmap_def*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %loop = alloca %struct.loop*, align 8
  %err = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %num = alloca i32, align 4
  %li = alloca %struct.loop_iterator, align 8
  %exit = alloca %struct.loop_exit*, align 8
  %mexit = alloca %struct.loop_exit*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %ei153 = alloca %struct.edge_iterator, align 8
  %tmp186 = alloca %struct.edge_iterator, align 8
  %n_exits = alloca i32, align 4
  %eloops = alloca i32, align 4
  %ei289 = alloca %struct.edge_iterator, align 8
  %tmp296 = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata i32** %sizes, metadata !4340, metadata !DIExpression()), !dbg !4341
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4342, metadata !DIExpression()), !dbg !4343
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4344, metadata !DIExpression()), !dbg !4345
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %irreds, metadata !4346, metadata !DIExpression()), !dbg !4347
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !4348, metadata !DIExpression()), !dbg !4349
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4350, metadata !DIExpression()), !dbg !4351
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4352, metadata !DIExpression()), !dbg !4353
  call void @llvm.dbg.declare(metadata i32* %err, metadata !4354, metadata !DIExpression()), !dbg !4355
  store i32 0, i32* %err, align 4, !dbg !4355
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4356, metadata !DIExpression()), !dbg !4357
  call void @llvm.dbg.declare(metadata i32* %num, metadata !4358, metadata !DIExpression()), !dbg !4359
  %call = call i32 @number_of_loops(), !dbg !4360
  store i32 %call, i32* %num, align 4, !dbg !4359
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !4361, metadata !DIExpression()), !dbg !4362
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %exit, metadata !4363, metadata !DIExpression()), !dbg !4364
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %mexit, metadata !4365, metadata !DIExpression()), !dbg !4366
  %0 = load i32, i32* %num, align 4, !dbg !4367
  %conv = zext i32 %0 to i64, !dbg !4367
  %call1 = call i8* @xcalloc(i64 %conv, i64 4), !dbg !4367
  %1 = bitcast i8* %call1 to i32*, !dbg !4367
  store i32* %1, i32** %sizes, align 8, !dbg !4368
  %2 = load i32*, i32** %sizes, align 8, !dbg !4369
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 0, !dbg !4369
  store i32 2, i32* %arrayidx, align 4, !dbg !4370
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4371
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4371
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4371
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4371
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 0, !dbg !4371
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4371
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 6, !dbg !4371
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4371
  store %struct.basic_block_def* %6, %struct.basic_block_def** %bb, align 8, !dbg !4371
  br label %for.cond, !dbg !4371

for.cond:                                         ; preds = %for.inc10, %entry
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4373
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4373
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !4373
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !4373
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !4373
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 1, !dbg !4373
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4373
  %cmp = icmp ne %struct.basic_block_def* %7, %10, !dbg !4373
  br i1 %cmp, label %for.body, label %for.end12, !dbg !4371

for.body:                                         ; preds = %for.cond
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4375
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 3, !dbg !4377
  %12 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !4377
  store %struct.loop* %12, %struct.loop** %loop, align 8, !dbg !4378
  br label %for.cond5, !dbg !4379

for.cond5:                                        ; preds = %for.inc, %for.body
  %13 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4380
  %tobool = icmp ne %struct.loop* %13, null, !dbg !4382
  br i1 %tobool, label %for.body6, label %for.end, !dbg !4382

for.body6:                                        ; preds = %for.cond5
  %14 = load i32*, i32** %sizes, align 8, !dbg !4383
  %15 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4384
  %num7 = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 0, !dbg !4385
  %16 = load i32, i32* %num7, align 8, !dbg !4385
  %idxprom = sext i32 %16 to i64, !dbg !4383
  %arrayidx8 = getelementptr inbounds i32, i32* %14, i64 %idxprom, !dbg !4383
  %17 = load i32, i32* %arrayidx8, align 4, !dbg !4386
  %inc = add i32 %17, 1, !dbg !4386
  store i32 %inc, i32* %arrayidx8, align 4, !dbg !4386
  br label %for.inc, !dbg !4383

for.inc:                                          ; preds = %for.body6
  %18 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4387
  %call9 = call %struct.loop* @loop_outer(%struct.loop* %18), !dbg !4388
  store %struct.loop* %call9, %struct.loop** %loop, align 8, !dbg !4389
  br label %for.cond5, !dbg !4390, !llvm.loop !4391

for.end:                                          ; preds = %for.cond5
  br label %for.inc10, !dbg !4392

for.inc10:                                        ; preds = %for.end
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4373
  %next_bb11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 6, !dbg !4373
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb11, align 8, !dbg !4373
  store %struct.basic_block_def* %20, %struct.basic_block_def** %bb, align 8, !dbg !4373
  br label %for.cond, !dbg !4373, !llvm.loop !4393

for.end12:                                        ; preds = %for.cond
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 1), !dbg !4395
  br label %for.cond13, !dbg !4395

for.cond13:                                       ; preds = %for.inc24, %for.end12
  %21 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4397
  %tobool14 = icmp ne %struct.loop* %21, null, !dbg !4395
  br i1 %tobool14, label %for.body15, label %for.end25, !dbg !4395

for.body15:                                       ; preds = %for.cond13
  %22 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4399
  %num16 = getelementptr inbounds %struct.loop, %struct.loop* %22, i32 0, i32 0, !dbg !4401
  %23 = load i32, i32* %num16, align 8, !dbg !4401
  store i32 %23, i32* %i, align 4, !dbg !4402
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4403
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 6, !dbg !4405
  %25 = load i32, i32* %num_nodes, align 4, !dbg !4405
  %26 = load i32*, i32** %sizes, align 8, !dbg !4406
  %27 = load i32, i32* %i, align 4, !dbg !4407
  %idxprom17 = zext i32 %27 to i64, !dbg !4406
  %arrayidx18 = getelementptr inbounds i32, i32* %26, i64 %idxprom17, !dbg !4406
  %28 = load i32, i32* %arrayidx18, align 4, !dbg !4406
  %cmp19 = icmp ne i32 %25, %28, !dbg !4408
  br i1 %cmp19, label %if.then, label %if.end, !dbg !4409

if.then:                                          ; preds = %for.body15
  %29 = load i32, i32* %i, align 4, !dbg !4410
  %30 = load i32*, i32** %sizes, align 8, !dbg !4412
  %31 = load i32, i32* %i, align 4, !dbg !4413
  %idxprom21 = zext i32 %31 to i64, !dbg !4412
  %arrayidx22 = getelementptr inbounds i32, i32* %30, i64 %idxprom21, !dbg !4412
  %32 = load i32, i32* %arrayidx22, align 4, !dbg !4412
  %33 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4414
  %num_nodes23 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 6, !dbg !4415
  %34 = load i32, i32* %num_nodes23, align 4, !dbg !4415
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i64 0, i64 0), i32 %29, i32 %32, i32 %34), !dbg !4416
  store i32 1, i32* %err, align 4, !dbg !4417
  br label %if.end, !dbg !4418

if.end:                                           ; preds = %if.then, %for.body15
  br label %for.inc24, !dbg !4419

for.inc24:                                        ; preds = %if.end
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !4397
  br label %for.cond13, !dbg !4397, !llvm.loop !4420

for.end25:                                        ; preds = %for.cond13
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !4422
  br label %for.cond26, !dbg !4422

for.cond26:                                       ; preds = %for.inc47, %for.end25
  %35 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4424
  %tobool27 = icmp ne %struct.loop* %35, null, !dbg !4422
  br i1 %tobool27, label %for.body28, label %for.end48, !dbg !4422

for.body28:                                       ; preds = %for.cond26
  %36 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4426
  %call29 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %36), !dbg !4428
  store %struct.basic_block_def** %call29, %struct.basic_block_def*** %bbs, align 8, !dbg !4429
  store i32 0, i32* %j, align 4, !dbg !4430
  br label %for.cond30, !dbg !4432

for.cond30:                                       ; preds = %for.inc44, %for.body28
  %37 = load i32, i32* %j, align 4, !dbg !4433
  %38 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4435
  %num_nodes31 = getelementptr inbounds %struct.loop, %struct.loop* %38, i32 0, i32 6, !dbg !4436
  %39 = load i32, i32* %num_nodes31, align 4, !dbg !4436
  %cmp32 = icmp ult i32 %37, %39, !dbg !4437
  br i1 %cmp32, label %for.body34, label %for.end46, !dbg !4438

for.body34:                                       ; preds = %for.cond30
  %40 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4439
  %41 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4441
  %42 = load i32, i32* %j, align 4, !dbg !4442
  %idxprom35 = zext i32 %42 to i64, !dbg !4441
  %arrayidx36 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %41, i64 %idxprom35, !dbg !4441
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx36, align 8, !dbg !4441
  %call37 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %40, %struct.basic_block_def* %43), !dbg !4443
  %tobool38 = icmp ne i8 %call37, 0, !dbg !4443
  br i1 %tobool38, label %if.end43, label %if.then39, !dbg !4444

if.then39:                                        ; preds = %for.body34
  %44 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4445
  %45 = load i32, i32* %j, align 4, !dbg !4447
  %idxprom40 = zext i32 %45 to i64, !dbg !4445
  %arrayidx41 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %44, i64 %idxprom40, !dbg !4445
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx41, align 8, !dbg !4445
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 9, !dbg !4448
  %47 = load i32, i32* %index, align 8, !dbg !4448
  %48 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4449
  %num42 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 0, !dbg !4450
  %49 = load i32, i32* %num42, align 8, !dbg !4450
  call void (i8*, ...) @error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i64 0, i64 0), i32 %47, i32 %49), !dbg !4451
  store i32 1, i32* %err, align 4, !dbg !4452
  br label %if.end43, !dbg !4453

if.end43:                                         ; preds = %if.then39, %for.body34
  br label %for.inc44, !dbg !4454

for.inc44:                                        ; preds = %if.end43
  %50 = load i32, i32* %j, align 4, !dbg !4455
  %inc45 = add i32 %50, 1, !dbg !4455
  store i32 %inc45, i32* %j, align 4, !dbg !4455
  br label %for.cond30, !dbg !4456, !llvm.loop !4457

for.end46:                                        ; preds = %for.cond30
  %51 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4459
  %52 = bitcast %struct.basic_block_def** %51 to i8*, !dbg !4459
  call void @free(i8* %52), !dbg !4460
  br label %for.inc47, !dbg !4461

for.inc47:                                        ; preds = %for.end46
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !4424
  br label %for.cond26, !dbg !4424, !llvm.loop !4462

for.end48:                                        ; preds = %for.cond26
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !4464
  br label %for.cond49, !dbg !4464

for.cond49:                                       ; preds = %for.inc99, %for.end48
  %53 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4466
  %tobool50 = icmp ne %struct.loop* %53, null, !dbg !4464
  br i1 %tobool50, label %for.body51, label %for.end100, !dbg !4464

for.body51:                                       ; preds = %for.cond49
  %54 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4468
  %num52 = getelementptr inbounds %struct.loop, %struct.loop* %54, i32 0, i32 0, !dbg !4470
  %55 = load i32, i32* %num52, align 8, !dbg !4470
  store i32 %55, i32* %i, align 4, !dbg !4471
  %call53 = call zeroext i8 @loops_state_satisfies_p(i32 1), !dbg !4472
  %conv54 = zext i8 %call53 to i32, !dbg !4472
  %tobool55 = icmp ne i32 %conv54, 0, !dbg !4472
  br i1 %tobool55, label %land.lhs.true, label %if.end63, !dbg !4474

land.lhs.true:                                    ; preds = %for.body51
  %56 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4475
  %header = getelementptr inbounds %struct.loop, %struct.loop* %56, i32 0, i32 2, !dbg !4475
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4475
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 0, !dbg !4475
  %58 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !4475
  %tobool56 = icmp ne %struct.VEC_edge_gc* %58, null, !dbg !4475
  br i1 %tobool56, label %cond.true, label %cond.false, !dbg !4475

cond.true:                                        ; preds = %land.lhs.true
  %59 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4475
  %header57 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 2, !dbg !4475
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %header57, align 8, !dbg !4475
  %preds58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 0, !dbg !4475
  %61 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds58, align 8, !dbg !4475
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %61, i32 0, i32 0, !dbg !4475
  br label %cond.end, !dbg !4475

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !4475

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4475
  %call59 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4475
  %cmp60 = icmp ne i32 %call59, 2, !dbg !4476
  br i1 %cmp60, label %if.then62, label %if.end63, !dbg !4477

if.then62:                                        ; preds = %cond.end
  %62 = load i32, i32* %i, align 4, !dbg !4478
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.13, i64 0, i64 0), i32 %62), !dbg !4480
  store i32 1, i32* %err, align 4, !dbg !4481
  br label %if.end63, !dbg !4482

if.end63:                                         ; preds = %if.then62, %cond.end, %for.body51
  %call64 = call zeroext i8 @loops_state_satisfies_p(i32 2), !dbg !4483
  %tobool65 = icmp ne i8 %call64, 0, !dbg !4483
  br i1 %tobool65, label %if.then66, label %if.end84, !dbg !4485

if.then66:                                        ; preds = %if.end63
  %63 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4486
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %63, i32 0, i32 3, !dbg !4489
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4489
  %call67 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %64), !dbg !4490
  %tobool68 = icmp ne i8 %call67, 0, !dbg !4490
  br i1 %tobool68, label %if.end70, label %if.then69, !dbg !4491

if.then69:                                        ; preds = %if.then66
  %65 = load i32, i32* %i, align 4, !dbg !4492
  call void (i8*, ...) @error(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.14, i64 0, i64 0), i32 %65), !dbg !4494
  store i32 1, i32* %err, align 4, !dbg !4495
  br label %if.end70, !dbg !4496

if.end70:                                         ; preds = %if.then69, %if.then66
  %66 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4497
  %latch71 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 3, !dbg !4499
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %latch71, align 8, !dbg !4499
  %call72 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %67), !dbg !4500
  %68 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4501
  %header73 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 2, !dbg !4502
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %header73, align 8, !dbg !4502
  %cmp74 = icmp ne %struct.basic_block_def* %call72, %69, !dbg !4503
  br i1 %cmp74, label %if.then76, label %if.end77, !dbg !4504

if.then76:                                        ; preds = %if.end70
  %70 = load i32, i32* %i, align 4, !dbg !4505
  call void (i8*, ...) @error(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.15, i64 0, i64 0), i32 %70), !dbg !4507
  store i32 1, i32* %err, align 4, !dbg !4508
  br label %if.end77, !dbg !4509

if.end77:                                         ; preds = %if.then76, %if.end70
  %71 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4510
  %latch78 = getelementptr inbounds %struct.loop, %struct.loop* %71, i32 0, i32 3, !dbg !4512
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %latch78, align 8, !dbg !4512
  %loop_father79 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %72, i32 0, i32 3, !dbg !4513
  %73 = load %struct.loop*, %struct.loop** %loop_father79, align 8, !dbg !4513
  %74 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4514
  %cmp80 = icmp ne %struct.loop* %73, %74, !dbg !4515
  br i1 %cmp80, label %if.then82, label %if.end83, !dbg !4516

if.then82:                                        ; preds = %if.end77
  %75 = load i32, i32* %i, align 4, !dbg !4517
  call void (i8*, ...) @error(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.16, i64 0, i64 0), i32 %75), !dbg !4519
  store i32 1, i32* %err, align 4, !dbg !4520
  br label %if.end83, !dbg !4521

if.end83:                                         ; preds = %if.then82, %if.end77
  br label %if.end84, !dbg !4522

if.end84:                                         ; preds = %if.end83, %if.end63
  %76 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4523
  %header85 = getelementptr inbounds %struct.loop, %struct.loop* %76, i32 0, i32 2, !dbg !4525
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %header85, align 8, !dbg !4525
  %loop_father86 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 3, !dbg !4526
  %78 = load %struct.loop*, %struct.loop** %loop_father86, align 8, !dbg !4526
  %79 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4527
  %cmp87 = icmp ne %struct.loop* %78, %79, !dbg !4528
  br i1 %cmp87, label %if.then89, label %if.end90, !dbg !4529

if.then89:                                        ; preds = %if.end84
  %80 = load i32, i32* %i, align 4, !dbg !4530
  call void (i8*, ...) @error(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.17, i64 0, i64 0), i32 %80), !dbg !4532
  store i32 1, i32* %err, align 4, !dbg !4533
  br label %if.end90, !dbg !4534

if.end90:                                         ; preds = %if.then89, %if.end84
  %call91 = call zeroext i8 @loops_state_satisfies_p(i32 4), !dbg !4535
  %conv92 = zext i8 %call91 to i32, !dbg !4535
  %tobool93 = icmp ne i32 %conv92, 0, !dbg !4535
  br i1 %tobool93, label %land.lhs.true94, label %if.end98, !dbg !4537

land.lhs.true94:                                  ; preds = %if.end90
  %81 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4538
  %call95 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %81), !dbg !4539
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call95, i32 0, i32 7, !dbg !4540
  %82 = load i32, i32* %flags, align 8, !dbg !4540
  %and = and i32 %82, 128, !dbg !4541
  %tobool96 = icmp ne i32 %and, 0, !dbg !4541
  br i1 %tobool96, label %if.then97, label %if.end98, !dbg !4542

if.then97:                                        ; preds = %land.lhs.true94
  %83 = load i32, i32* %i, align 4, !dbg !4543
  call void (i8*, ...) @error(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.18, i64 0, i64 0), i32 %83), !dbg !4545
  store i32 1, i32* %err, align 4, !dbg !4546
  br label %if.end98, !dbg !4547

if.end98:                                         ; preds = %if.then97, %land.lhs.true94, %if.end90
  br label %for.inc99, !dbg !4548

for.inc99:                                        ; preds = %if.end98
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !4466
  br label %for.cond49, !dbg !4466, !llvm.loop !4549

for.end100:                                       ; preds = %for.cond49
  %call101 = call zeroext i8 @loops_state_satisfies_p(i32 4), !dbg !4551
  %tobool102 = icmp ne i8 %call101, 0, !dbg !4551
  br i1 %tobool102, label %if.then103, label %if.end225, !dbg !4553

if.then103:                                       ; preds = %for.end100
  %84 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4554
  %add.ptr104 = getelementptr inbounds %struct.function, %struct.function* %84, i64 0, !dbg !4554
  %cfg105 = getelementptr inbounds %struct.function, %struct.function* %add.ptr104, i32 0, i32 1, !dbg !4554
  %85 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg105, align 8, !dbg !4554
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %85, i32 0, i32 5, !dbg !4554
  %86 = load i32, i32* %x_last_basic_block, align 8, !dbg !4554
  %call106 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %86), !dbg !4556
  store %struct.simple_bitmap_def* %call106, %struct.simple_bitmap_def** %irreds, align 8, !dbg !4557
  %87 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4558
  %add.ptr107 = getelementptr inbounds %struct.function, %struct.function* %87, i64 0, !dbg !4558
  %cfg108 = getelementptr inbounds %struct.function, %struct.function* %add.ptr107, i32 0, i32 1, !dbg !4558
  %88 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg108, align 8, !dbg !4558
  %x_entry_block_ptr109 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %88, i32 0, i32 0, !dbg !4558
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr109, align 8, !dbg !4558
  %next_bb110 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 6, !dbg !4558
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb110, align 8, !dbg !4558
  store %struct.basic_block_def* %90, %struct.basic_block_def** %bb, align 8, !dbg !4558
  br label %for.cond111, !dbg !4558

for.cond111:                                      ; preds = %for.inc138, %if.then103
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4560
  %92 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4560
  %add.ptr112 = getelementptr inbounds %struct.function, %struct.function* %92, i64 0, !dbg !4560
  %cfg113 = getelementptr inbounds %struct.function, %struct.function* %add.ptr112, i32 0, i32 1, !dbg !4560
  %93 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg113, align 8, !dbg !4560
  %x_exit_block_ptr114 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %93, i32 0, i32 1, !dbg !4560
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr114, align 8, !dbg !4560
  %cmp115 = icmp ne %struct.basic_block_def* %91, %94, !dbg !4560
  br i1 %cmp115, label %for.body117, label %for.end140, !dbg !4558

for.body117:                                      ; preds = %for.cond111
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4562, metadata !DIExpression()), !dbg !4564
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4565
  %flags118 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 13, !dbg !4567
  %96 = load i32, i32* %flags118, align 8, !dbg !4567
  %and119 = and i32 %96, 4, !dbg !4568
  %tobool120 = icmp ne i32 %and119, 0, !dbg !4568
  br i1 %tobool120, label %if.then121, label %if.else, !dbg !4569

if.then121:                                       ; preds = %for.body117
  %97 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %irreds, align 8, !dbg !4570
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4571
  %index122 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %98, i32 0, i32 9, !dbg !4572
  %99 = load i32, i32* %index122, align 8, !dbg !4572
  call void @SET_BIT(%struct.simple_bitmap_def* %97, i32 %99), !dbg !4573
  br label %if.end124, !dbg !4573

if.else:                                          ; preds = %for.body117
  %100 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %irreds, align 8, !dbg !4574
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4575
  %index123 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %101, i32 0, i32 9, !dbg !4576
  %102 = load i32, i32* %index123, align 8, !dbg !4576
  call void @RESET_BIT(%struct.simple_bitmap_def* %100, i32 %102), !dbg !4577
  br label %if.end124

if.end124:                                        ; preds = %if.else, %if.then121
  %103 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4578
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %103, i32 0, i32 1, !dbg !4578
  %call125 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4578
  %104 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4578
  %105 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %104, i32 0, i32 0, !dbg !4578
  %106 = extractvalue { i32, %struct.VEC_edge_gc** } %call125, 0, !dbg !4578
  store i32 %106, i32* %105, align 8, !dbg !4578
  %107 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %104, i32 0, i32 1, !dbg !4578
  %108 = extractvalue { i32, %struct.VEC_edge_gc** } %call125, 1, !dbg !4578
  store %struct.VEC_edge_gc** %108, %struct.VEC_edge_gc*** %107, align 8, !dbg !4578
  %109 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4578
  %110 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4578
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* align 8 %110, i64 16, i1 false), !dbg !4578
  br label %for.cond126, !dbg !4578

for.cond126:                                      ; preds = %for.inc136, %if.end124
  %111 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4580
  %112 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %111, i32 0, i32 0, !dbg !4580
  %113 = load i32, i32* %112, align 8, !dbg !4580
  %114 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %111, i32 0, i32 1, !dbg !4580
  %115 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %114, align 8, !dbg !4580
  %call127 = call zeroext i8 @ei_cond(i32 %113, %struct.VEC_edge_gc** %115, %struct.edge_def** %e), !dbg !4580
  %tobool128 = icmp ne i8 %call127, 0, !dbg !4578
  br i1 %tobool128, label %for.body129, label %for.end137, !dbg !4578

for.body129:                                      ; preds = %for.cond126
  %116 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4582
  %flags130 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %116, i32 0, i32 7, !dbg !4584
  %117 = load i32, i32* %flags130, align 8, !dbg !4584
  %and131 = and i32 %117, 128, !dbg !4585
  %tobool132 = icmp ne i32 %and131, 0, !dbg !4585
  br i1 %tobool132, label %if.then133, label %if.end135, !dbg !4586

if.then133:                                       ; preds = %for.body129
  %118 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4587
  %flags134 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %118, i32 0, i32 7, !dbg !4588
  %119 = load i32, i32* %flags134, align 8, !dbg !4589
  %or = or i32 %119, 16384, !dbg !4589
  store i32 %or, i32* %flags134, align 8, !dbg !4589
  br label %if.end135, !dbg !4587

if.end135:                                        ; preds = %if.then133, %for.body129
  br label %for.inc136, !dbg !4590

for.inc136:                                       ; preds = %if.end135
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4580
  br label %for.cond126, !dbg !4580, !llvm.loop !4591

for.end137:                                       ; preds = %for.cond126
  br label %for.inc138, !dbg !4593

for.inc138:                                       ; preds = %for.end137
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4560
  %next_bb139 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %120, i32 0, i32 6, !dbg !4560
  %121 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb139, align 8, !dbg !4560
  store %struct.basic_block_def* %121, %struct.basic_block_def** %bb, align 8, !dbg !4560
  br label %for.cond111, !dbg !4560, !llvm.loop !4594

for.end140:                                       ; preds = %for.cond111
  %call141 = call zeroext i8 @mark_irreducible_loops(), !dbg !4596
  %122 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4597
  %add.ptr142 = getelementptr inbounds %struct.function, %struct.function* %122, i64 0, !dbg !4597
  %cfg143 = getelementptr inbounds %struct.function, %struct.function* %add.ptr142, i32 0, i32 1, !dbg !4597
  %123 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg143, align 8, !dbg !4597
  %x_entry_block_ptr144 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %123, i32 0, i32 0, !dbg !4597
  %124 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr144, align 8, !dbg !4597
  %next_bb145 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %124, i32 0, i32 6, !dbg !4597
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb145, align 8, !dbg !4597
  store %struct.basic_block_def* %125, %struct.basic_block_def** %bb, align 8, !dbg !4597
  br label %for.cond146, !dbg !4597

for.cond146:                                      ; preds = %for.inc222, %for.end140
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4599
  %127 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4599
  %add.ptr147 = getelementptr inbounds %struct.function, %struct.function* %127, i64 0, !dbg !4599
  %cfg148 = getelementptr inbounds %struct.function, %struct.function* %add.ptr147, i32 0, i32 1, !dbg !4599
  %128 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg148, align 8, !dbg !4599
  %x_exit_block_ptr149 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %128, i32 0, i32 1, !dbg !4599
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr149, align 8, !dbg !4599
  %cmp150 = icmp ne %struct.basic_block_def* %126, %129, !dbg !4599
  br i1 %cmp150, label %for.body152, label %for.end224, !dbg !4597

for.body152:                                      ; preds = %for.cond146
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei153, metadata !4601, metadata !DIExpression()), !dbg !4603
  %130 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4604
  %flags154 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %130, i32 0, i32 13, !dbg !4606
  %131 = load i32, i32* %flags154, align 8, !dbg !4606
  %and155 = and i32 %131, 4, !dbg !4607
  %tobool156 = icmp ne i32 %and155, 0, !dbg !4607
  br i1 %tobool156, label %land.lhs.true157, label %if.else166, !dbg !4608

land.lhs.true157:                                 ; preds = %for.body152
  %132 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %irreds, align 8, !dbg !4609
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %132, i32 0, i32 3, !dbg !4609
  %133 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4609
  %index158 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %133, i32 0, i32 9, !dbg !4609
  %134 = load i32, i32* %index158, align 8, !dbg !4609
  %div = udiv i32 %134, 64, !dbg !4609
  %idxprom159 = zext i32 %div to i64, !dbg !4609
  %arrayidx160 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom159, !dbg !4609
  %135 = load i64, i64* %arrayidx160, align 8, !dbg !4609
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4609
  %index161 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %136, i32 0, i32 9, !dbg !4609
  %137 = load i32, i32* %index161, align 8, !dbg !4609
  %rem = urem i32 %137, 64, !dbg !4609
  %sh_prom = zext i32 %rem to i64, !dbg !4609
  %shr = lshr i64 %135, %sh_prom, !dbg !4609
  %and162 = and i64 %shr, 1, !dbg !4609
  %tobool163 = icmp ne i64 %and162, 0, !dbg !4609
  br i1 %tobool163, label %if.else166, label %if.then164, !dbg !4610

if.then164:                                       ; preds = %land.lhs.true157
  %138 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4611
  %index165 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %138, i32 0, i32 9, !dbg !4613
  %139 = load i32, i32* %index165, align 8, !dbg !4613
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.19, i64 0, i64 0), i32 %139), !dbg !4614
  store i32 1, i32* %err, align 4, !dbg !4615
  br label %if.end185, !dbg !4616

if.else166:                                       ; preds = %land.lhs.true157, %for.body152
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4617
  %flags167 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %140, i32 0, i32 13, !dbg !4619
  %141 = load i32, i32* %flags167, align 8, !dbg !4619
  %and168 = and i32 %141, 4, !dbg !4620
  %tobool169 = icmp ne i32 %and168, 0, !dbg !4620
  br i1 %tobool169, label %if.end184, label %land.lhs.true170, !dbg !4621

land.lhs.true170:                                 ; preds = %if.else166
  %142 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %irreds, align 8, !dbg !4622
  %elms171 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %142, i32 0, i32 3, !dbg !4622
  %143 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4622
  %index172 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %143, i32 0, i32 9, !dbg !4622
  %144 = load i32, i32* %index172, align 8, !dbg !4622
  %div173 = udiv i32 %144, 64, !dbg !4622
  %idxprom174 = zext i32 %div173 to i64, !dbg !4622
  %arrayidx175 = getelementptr inbounds [1 x i64], [1 x i64]* %elms171, i64 0, i64 %idxprom174, !dbg !4622
  %145 = load i64, i64* %arrayidx175, align 8, !dbg !4622
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4622
  %index176 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %146, i32 0, i32 9, !dbg !4622
  %147 = load i32, i32* %index176, align 8, !dbg !4622
  %rem177 = urem i32 %147, 64, !dbg !4622
  %sh_prom178 = zext i32 %rem177 to i64, !dbg !4622
  %shr179 = lshr i64 %145, %sh_prom178, !dbg !4622
  %and180 = and i64 %shr179, 1, !dbg !4622
  %tobool181 = icmp ne i64 %and180, 0, !dbg !4622
  br i1 %tobool181, label %if.then182, label %if.end184, !dbg !4623

if.then182:                                       ; preds = %land.lhs.true170
  %148 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4624
  %index183 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %148, i32 0, i32 9, !dbg !4626
  %149 = load i32, i32* %index183, align 8, !dbg !4626
  call void (i8*, ...) @error(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.20, i64 0, i64 0), i32 %149), !dbg !4627
  store i32 1, i32* %err, align 4, !dbg !4628
  br label %if.end184, !dbg !4629

if.end184:                                        ; preds = %if.then182, %land.lhs.true170, %if.else166
  br label %if.end185

if.end185:                                        ; preds = %if.end184, %if.then164
  %150 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4630
  %succs187 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %150, i32 0, i32 1, !dbg !4630
  %call188 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs187), !dbg !4630
  %151 = bitcast %struct.edge_iterator* %tmp186 to { i32, %struct.VEC_edge_gc** }*, !dbg !4630
  %152 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %151, i32 0, i32 0, !dbg !4630
  %153 = extractvalue { i32, %struct.VEC_edge_gc** } %call188, 0, !dbg !4630
  store i32 %153, i32* %152, align 8, !dbg !4630
  %154 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %151, i32 0, i32 1, !dbg !4630
  %155 = extractvalue { i32, %struct.VEC_edge_gc** } %call188, 1, !dbg !4630
  store %struct.VEC_edge_gc** %155, %struct.VEC_edge_gc*** %154, align 8, !dbg !4630
  %156 = bitcast %struct.edge_iterator* %ei153 to i8*, !dbg !4630
  %157 = bitcast %struct.edge_iterator* %tmp186 to i8*, !dbg !4630
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %157, i64 16, i1 false), !dbg !4630
  br label %for.cond189, !dbg !4630

for.cond189:                                      ; preds = %for.inc220, %if.end185
  %158 = bitcast %struct.edge_iterator* %ei153 to { i32, %struct.VEC_edge_gc** }*, !dbg !4632
  %159 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %158, i32 0, i32 0, !dbg !4632
  %160 = load i32, i32* %159, align 8, !dbg !4632
  %161 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %158, i32 0, i32 1, !dbg !4632
  %162 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %161, align 8, !dbg !4632
  %call190 = call zeroext i8 @ei_cond(i32 %160, %struct.VEC_edge_gc** %162, %struct.edge_def** %e), !dbg !4632
  %tobool191 = icmp ne i8 %call190, 0, !dbg !4630
  br i1 %tobool191, label %for.body192, label %for.end221, !dbg !4630

for.body192:                                      ; preds = %for.cond189
  %163 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4634
  %flags193 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %163, i32 0, i32 7, !dbg !4637
  %164 = load i32, i32* %flags193, align 8, !dbg !4637
  %and194 = and i32 %164, 128, !dbg !4638
  %tobool195 = icmp ne i32 %and194, 0, !dbg !4638
  br i1 %tobool195, label %land.lhs.true196, label %if.else203, !dbg !4639

land.lhs.true196:                                 ; preds = %for.body192
  %165 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4640
  %flags197 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %165, i32 0, i32 7, !dbg !4641
  %166 = load i32, i32* %flags197, align 8, !dbg !4641
  %and198 = and i32 %166, 16384, !dbg !4642
  %tobool199 = icmp ne i32 %and198, 0, !dbg !4642
  br i1 %tobool199, label %if.else203, label %if.then200, !dbg !4643

if.then200:                                       ; preds = %land.lhs.true196
  %167 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4644
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %167, i32 0, i32 0, !dbg !4646
  %168 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4646
  %index201 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %168, i32 0, i32 9, !dbg !4647
  %169 = load i32, i32* %index201, align 8, !dbg !4647
  %170 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4648
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %170, i32 0, i32 1, !dbg !4649
  %171 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4649
  %index202 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %171, i32 0, i32 9, !dbg !4650
  %172 = load i32, i32* %index202, align 8, !dbg !4650
  call void (i8*, ...) @error(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.21, i64 0, i64 0), i32 %169, i32 %172), !dbg !4651
  store i32 1, i32* %err, align 4, !dbg !4652
  br label %if.end217, !dbg !4653

if.else203:                                       ; preds = %land.lhs.true196, %for.body192
  %173 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4654
  %flags204 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %173, i32 0, i32 7, !dbg !4656
  %174 = load i32, i32* %flags204, align 8, !dbg !4656
  %and205 = and i32 %174, 128, !dbg !4657
  %tobool206 = icmp ne i32 %and205, 0, !dbg !4657
  br i1 %tobool206, label %if.end216, label %land.lhs.true207, !dbg !4658

land.lhs.true207:                                 ; preds = %if.else203
  %175 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4659
  %flags208 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %175, i32 0, i32 7, !dbg !4660
  %176 = load i32, i32* %flags208, align 8, !dbg !4660
  %and209 = and i32 %176, 16384, !dbg !4661
  %tobool210 = icmp ne i32 %and209, 0, !dbg !4661
  br i1 %tobool210, label %if.then211, label %if.end216, !dbg !4662

if.then211:                                       ; preds = %land.lhs.true207
  %177 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4663
  %src212 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %177, i32 0, i32 0, !dbg !4665
  %178 = load %struct.basic_block_def*, %struct.basic_block_def** %src212, align 8, !dbg !4665
  %index213 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %178, i32 0, i32 9, !dbg !4666
  %179 = load i32, i32* %index213, align 8, !dbg !4666
  %180 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4667
  %dest214 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %180, i32 0, i32 1, !dbg !4668
  %181 = load %struct.basic_block_def*, %struct.basic_block_def** %dest214, align 8, !dbg !4668
  %index215 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %181, i32 0, i32 9, !dbg !4669
  %182 = load i32, i32* %index215, align 8, !dbg !4669
  call void (i8*, ...) @error(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.22, i64 0, i64 0), i32 %179, i32 %182), !dbg !4670
  store i32 1, i32* %err, align 4, !dbg !4671
  br label %if.end216, !dbg !4672

if.end216:                                        ; preds = %if.then211, %land.lhs.true207, %if.else203
  br label %if.end217

if.end217:                                        ; preds = %if.end216, %if.then200
  %183 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4673
  %flags218 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %183, i32 0, i32 7, !dbg !4674
  %184 = load i32, i32* %flags218, align 8, !dbg !4675
  %and219 = and i32 %184, -16385, !dbg !4675
  store i32 %and219, i32* %flags218, align 8, !dbg !4675
  br label %for.inc220, !dbg !4676

for.inc220:                                       ; preds = %if.end217
  call void @ei_next(%struct.edge_iterator* %ei153), !dbg !4632
  br label %for.cond189, !dbg !4632, !llvm.loop !4677

for.end221:                                       ; preds = %for.cond189
  br label %for.inc222, !dbg !4679

for.inc222:                                       ; preds = %for.end221
  %185 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4599
  %next_bb223 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %185, i32 0, i32 6, !dbg !4599
  %186 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb223, align 8, !dbg !4599
  store %struct.basic_block_def* %186, %struct.basic_block_def** %bb, align 8, !dbg !4599
  br label %for.cond146, !dbg !4599, !llvm.loop !4680

for.end224:                                       ; preds = %for.cond146
  %187 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %irreds, align 8, !dbg !4682
  %188 = bitcast %struct.simple_bitmap_def* %187 to i8*, !dbg !4682
  call void @free(i8* %188), !dbg !4683
  br label %if.end225, !dbg !4684

if.end225:                                        ; preds = %for.end224, %for.end100
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !4685
  br label %for.cond226, !dbg !4685

for.cond226:                                      ; preds = %for.inc272, %if.end225
  %189 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4687
  %tobool227 = icmp ne %struct.loop* %189, null, !dbg !4685
  br i1 %tobool227, label %for.body228, label %for.end273, !dbg !4685

for.body228:                                      ; preds = %for.cond226
  %190 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4689
  %exits = getelementptr inbounds %struct.loop, %struct.loop* %190, i32 0, i32 18, !dbg !4692
  %191 = load %struct.loop_exit*, %struct.loop_exit** %exits, align 8, !dbg !4692
  %tobool229 = icmp ne %struct.loop_exit* %191, null, !dbg !4689
  br i1 %tobool229, label %lor.lhs.false, label %if.then234, !dbg !4693

lor.lhs.false:                                    ; preds = %for.body228
  %192 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4694
  %exits230 = getelementptr inbounds %struct.loop, %struct.loop* %192, i32 0, i32 18, !dbg !4695
  %193 = load %struct.loop_exit*, %struct.loop_exit** %exits230, align 8, !dbg !4695
  %e231 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %193, i32 0, i32 0, !dbg !4696
  %194 = load %struct.edge_def*, %struct.edge_def** %e231, align 8, !dbg !4696
  %cmp232 = icmp ne %struct.edge_def* %194, null, !dbg !4697
  br i1 %cmp232, label %if.then234, label %if.else236, !dbg !4698

if.then234:                                       ; preds = %lor.lhs.false, %for.body228
  %195 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4699
  %num235 = getelementptr inbounds %struct.loop, %struct.loop* %195, i32 0, i32 0, !dbg !4701
  %196 = load i32, i32* %num235, align 8, !dbg !4701
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i64 0, i64 0), i32 %196), !dbg !4702
  store i32 1, i32* %err, align 4, !dbg !4703
  br label %if.end259, !dbg !4704

if.else236:                                       ; preds = %lor.lhs.false
  %197 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4705
  %exits237 = getelementptr inbounds %struct.loop, %struct.loop* %197, i32 0, i32 18, !dbg !4708
  %198 = load %struct.loop_exit*, %struct.loop_exit** %exits237, align 8, !dbg !4708
  store %struct.loop_exit* %198, %struct.loop_exit** %mexit, align 8, !dbg !4709
  %199 = load %struct.loop_exit*, %struct.loop_exit** %mexit, align 8, !dbg !4710
  %next = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %199, i32 0, i32 2, !dbg !4711
  %200 = load %struct.loop_exit*, %struct.loop_exit** %next, align 8, !dbg !4711
  store %struct.loop_exit* %200, %struct.loop_exit** %exit, align 8, !dbg !4712
  store i32 0, i32* %i, align 4, !dbg !4713
  br label %for.cond238, !dbg !4714

for.cond238:                                      ; preds = %for.inc250, %if.else236
  %201 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !4715
  %e239 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %201, i32 0, i32 0, !dbg !4717
  %202 = load %struct.edge_def*, %struct.edge_def** %e239, align 8, !dbg !4717
  %tobool240 = icmp ne %struct.edge_def* %202, null, !dbg !4715
  br i1 %tobool240, label %land.rhs, label %land.end, !dbg !4718

land.rhs:                                         ; preds = %for.cond238
  %203 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !4719
  %204 = load %struct.loop_exit*, %struct.loop_exit** %mexit, align 8, !dbg !4720
  %cmp241 = icmp ne %struct.loop_exit* %203, %204, !dbg !4721
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond238
  %205 = phi i1 [ false, %for.cond238 ], [ %cmp241, %land.rhs ], !dbg !4722
  br i1 %205, label %for.body243, label %for.end252, !dbg !4723

for.body243:                                      ; preds = %land.end
  %206 = load i32, i32* %i, align 4, !dbg !4724
  %inc244 = add i32 %206, 1, !dbg !4724
  store i32 %inc244, i32* %i, align 4, !dbg !4724
  %and245 = and i32 %206, 1, !dbg !4727
  %tobool246 = icmp ne i32 %and245, 0, !dbg !4727
  br i1 %tobool246, label %if.then247, label %if.end249, !dbg !4728

if.then247:                                       ; preds = %for.body243
  %207 = load %struct.loop_exit*, %struct.loop_exit** %mexit, align 8, !dbg !4729
  %next248 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %207, i32 0, i32 2, !dbg !4730
  %208 = load %struct.loop_exit*, %struct.loop_exit** %next248, align 8, !dbg !4730
  store %struct.loop_exit* %208, %struct.loop_exit** %mexit, align 8, !dbg !4731
  br label %if.end249, !dbg !4732

if.end249:                                        ; preds = %if.then247, %for.body243
  br label %for.inc250, !dbg !4733

for.inc250:                                       ; preds = %if.end249
  %209 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !4734
  %next251 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %209, i32 0, i32 2, !dbg !4735
  %210 = load %struct.loop_exit*, %struct.loop_exit** %next251, align 8, !dbg !4735
  store %struct.loop_exit* %210, %struct.loop_exit** %exit, align 8, !dbg !4736
  br label %for.cond238, !dbg !4737, !llvm.loop !4738

for.end252:                                       ; preds = %land.end
  %211 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !4740
  %212 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4742
  %exits253 = getelementptr inbounds %struct.loop, %struct.loop* %212, i32 0, i32 18, !dbg !4743
  %213 = load %struct.loop_exit*, %struct.loop_exit** %exits253, align 8, !dbg !4743
  %cmp254 = icmp ne %struct.loop_exit* %211, %213, !dbg !4744
  br i1 %cmp254, label %if.then256, label %if.end258, !dbg !4745

if.then256:                                       ; preds = %for.end252
  %214 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4746
  %num257 = getelementptr inbounds %struct.loop, %struct.loop* %214, i32 0, i32 0, !dbg !4748
  %215 = load i32, i32* %num257, align 8, !dbg !4748
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.24, i64 0, i64 0), i32 %215), !dbg !4749
  store i32 1, i32* %err, align 4, !dbg !4750
  br label %if.end258, !dbg !4751

if.end258:                                        ; preds = %if.then256, %for.end252
  br label %if.end259

if.end259:                                        ; preds = %if.end258, %if.then234
  %call260 = call zeroext i8 @loops_state_satisfies_p(i32 8), !dbg !4752
  %tobool261 = icmp ne i8 %call260, 0, !dbg !4752
  br i1 %tobool261, label %if.end271, label %if.then262, !dbg !4754

if.then262:                                       ; preds = %if.end259
  %216 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4755
  %exits263 = getelementptr inbounds %struct.loop, %struct.loop* %216, i32 0, i32 18, !dbg !4758
  %217 = load %struct.loop_exit*, %struct.loop_exit** %exits263, align 8, !dbg !4758
  %next264 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %217, i32 0, i32 2, !dbg !4759
  %218 = load %struct.loop_exit*, %struct.loop_exit** %next264, align 8, !dbg !4759
  %219 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4760
  %exits265 = getelementptr inbounds %struct.loop, %struct.loop* %219, i32 0, i32 18, !dbg !4761
  %220 = load %struct.loop_exit*, %struct.loop_exit** %exits265, align 8, !dbg !4761
  %cmp266 = icmp ne %struct.loop_exit* %218, %220, !dbg !4762
  br i1 %cmp266, label %if.then268, label %if.end270, !dbg !4763

if.then268:                                       ; preds = %if.then262
  %221 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4764
  %num269 = getelementptr inbounds %struct.loop, %struct.loop* %221, i32 0, i32 0, !dbg !4766
  %222 = load i32, i32* %num269, align 8, !dbg !4766
  call void (i8*, ...) @error(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.25, i64 0, i64 0), i32 %222), !dbg !4767
  store i32 1, i32* %err, align 4, !dbg !4768
  br label %if.end270, !dbg !4769

if.end270:                                        ; preds = %if.then268, %if.then262
  br label %if.end271, !dbg !4770

if.end271:                                        ; preds = %if.end270, %if.end259
  br label %for.inc272, !dbg !4771

for.inc272:                                       ; preds = %if.end271
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !4687
  br label %for.cond226, !dbg !4687, !llvm.loop !4772

for.end273:                                       ; preds = %for.cond226
  %call274 = call zeroext i8 @loops_state_satisfies_p(i32 8), !dbg !4774
  %tobool275 = icmp ne i8 %call274, 0, !dbg !4774
  br i1 %tobool275, label %if.then276, label %if.end386, !dbg !4776

if.then276:                                       ; preds = %for.end273
  call void @llvm.dbg.declare(metadata i32* %n_exits, metadata !4777, metadata !DIExpression()), !dbg !4779
  store i32 0, i32* %n_exits, align 4, !dbg !4779
  call void @llvm.dbg.declare(metadata i32* %eloops, metadata !4780, metadata !DIExpression()), !dbg !4781
  %223 = load i32*, i32** %sizes, align 8, !dbg !4782
  %224 = bitcast i32* %223 to i8*, !dbg !4783
  %225 = load i32, i32* %num, align 4, !dbg !4784
  %conv277 = zext i32 %225 to i64, !dbg !4784
  %mul = mul i64 4, %conv277, !dbg !4785
  call void @llvm.memset.p0i8.i64(i8* align 4 %224, i8 0, i64 %mul, i1 false), !dbg !4783
  %226 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4786
  %add.ptr278 = getelementptr inbounds %struct.function, %struct.function* %226, i64 0, !dbg !4786
  %cfg279 = getelementptr inbounds %struct.function, %struct.function* %add.ptr278, i32 0, i32 1, !dbg !4786
  %227 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg279, align 8, !dbg !4786
  %x_entry_block_ptr280 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %227, i32 0, i32 0, !dbg !4786
  %228 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr280, align 8, !dbg !4786
  %next_bb281 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %228, i32 0, i32 6, !dbg !4786
  %229 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb281, align 8, !dbg !4786
  store %struct.basic_block_def* %229, %struct.basic_block_def** %bb, align 8, !dbg !4786
  br label %for.cond282, !dbg !4786

for.cond282:                                      ; preds = %for.inc348, %if.then276
  %230 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4788
  %231 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4788
  %add.ptr283 = getelementptr inbounds %struct.function, %struct.function* %231, i64 0, !dbg !4788
  %cfg284 = getelementptr inbounds %struct.function, %struct.function* %add.ptr283, i32 0, i32 1, !dbg !4788
  %232 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg284, align 8, !dbg !4788
  %x_exit_block_ptr285 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %232, i32 0, i32 1, !dbg !4788
  %233 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr285, align 8, !dbg !4788
  %cmp286 = icmp ne %struct.basic_block_def* %230, %233, !dbg !4788
  br i1 %cmp286, label %for.body288, label %for.end350, !dbg !4786

for.body288:                                      ; preds = %for.cond282
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei289, metadata !4790, metadata !DIExpression()), !dbg !4792
  %234 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4793
  %loop_father290 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %234, i32 0, i32 3, !dbg !4795
  %235 = load %struct.loop*, %struct.loop** %loop_father290, align 8, !dbg !4795
  %236 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4796
  %add.ptr291 = getelementptr inbounds %struct.function, %struct.function* %236, i64 0, !dbg !4796
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr291, i32 0, i32 4, !dbg !4796
  %237 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4796
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %237, i32 0, i32 3, !dbg !4797
  %238 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !4797
  %cmp292 = icmp eq %struct.loop* %235, %238, !dbg !4798
  br i1 %cmp292, label %if.then294, label %if.end295, !dbg !4799

if.then294:                                       ; preds = %for.body288
  br label %for.inc348, !dbg !4800

if.end295:                                        ; preds = %for.body288
  %239 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4801
  %succs297 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %239, i32 0, i32 1, !dbg !4801
  %call298 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs297), !dbg !4801
  %240 = bitcast %struct.edge_iterator* %tmp296 to { i32, %struct.VEC_edge_gc** }*, !dbg !4801
  %241 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %240, i32 0, i32 0, !dbg !4801
  %242 = extractvalue { i32, %struct.VEC_edge_gc** } %call298, 0, !dbg !4801
  store i32 %242, i32* %241, align 8, !dbg !4801
  %243 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %240, i32 0, i32 1, !dbg !4801
  %244 = extractvalue { i32, %struct.VEC_edge_gc** } %call298, 1, !dbg !4801
  store %struct.VEC_edge_gc** %244, %struct.VEC_edge_gc*** %243, align 8, !dbg !4801
  %245 = bitcast %struct.edge_iterator* %ei289 to i8*, !dbg !4801
  %246 = bitcast %struct.edge_iterator* %tmp296 to i8*, !dbg !4801
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %245, i8* align 8 %246, i64 16, i1 false), !dbg !4801
  br label %for.cond299, !dbg !4801

for.cond299:                                      ; preds = %for.inc346, %if.end295
  %247 = bitcast %struct.edge_iterator* %ei289 to { i32, %struct.VEC_edge_gc** }*, !dbg !4803
  %248 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %247, i32 0, i32 0, !dbg !4803
  %249 = load i32, i32* %248, align 8, !dbg !4803
  %250 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %247, i32 0, i32 1, !dbg !4803
  %251 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %250, align 8, !dbg !4803
  %call300 = call zeroext i8 @ei_cond(i32 %249, %struct.VEC_edge_gc** %251, %struct.edge_def** %e), !dbg !4803
  %tobool301 = icmp ne i8 %call300, 0, !dbg !4801
  br i1 %tobool301, label %for.body302, label %for.end347, !dbg !4801

for.body302:                                      ; preds = %for.cond299
  %252 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4805
  %loop_father303 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %252, i32 0, i32 3, !dbg !4808
  %253 = load %struct.loop*, %struct.loop** %loop_father303, align 8, !dbg !4808
  %254 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4809
  %dest304 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %254, i32 0, i32 1, !dbg !4810
  %255 = load %struct.basic_block_def*, %struct.basic_block_def** %dest304, align 8, !dbg !4810
  %call305 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %253, %struct.basic_block_def* %255), !dbg !4811
  %tobool306 = icmp ne i8 %call305, 0, !dbg !4811
  br i1 %tobool306, label %if.then307, label %if.end308, !dbg !4812

if.then307:                                       ; preds = %for.body302
  br label %for.inc346, !dbg !4813

if.end308:                                        ; preds = %for.body302
  %256 = load i32, i32* %n_exits, align 4, !dbg !4814
  %inc309 = add i32 %256, 1, !dbg !4814
  store i32 %inc309, i32* %n_exits, align 4, !dbg !4814
  %257 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4815
  %call310 = call %struct.loop_exit* @get_exit_descriptions(%struct.edge_def* %257), !dbg !4816
  store %struct.loop_exit* %call310, %struct.loop_exit** %exit, align 8, !dbg !4817
  %258 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !4818
  %tobool311 = icmp ne %struct.loop_exit* %258, null, !dbg !4818
  br i1 %tobool311, label %if.end317, label %if.then312, !dbg !4820

if.then312:                                       ; preds = %if.end308
  %259 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4821
  %src313 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %259, i32 0, i32 0, !dbg !4823
  %260 = load %struct.basic_block_def*, %struct.basic_block_def** %src313, align 8, !dbg !4823
  %index314 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %260, i32 0, i32 9, !dbg !4824
  %261 = load i32, i32* %index314, align 8, !dbg !4824
  %262 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4825
  %dest315 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %262, i32 0, i32 1, !dbg !4826
  %263 = load %struct.basic_block_def*, %struct.basic_block_def** %dest315, align 8, !dbg !4826
  %index316 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %263, i32 0, i32 9, !dbg !4827
  %264 = load i32, i32* %index316, align 8, !dbg !4827
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.26, i64 0, i64 0), i32 %261, i32 %264), !dbg !4828
  store i32 1, i32* %err, align 4, !dbg !4829
  br label %if.end317, !dbg !4830

if.end317:                                        ; preds = %if.then312, %if.end308
  store i32 0, i32* %eloops, align 4, !dbg !4831
  br label %for.cond318, !dbg !4832

for.cond318:                                      ; preds = %for.inc322, %if.end317
  %265 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !4833
  %tobool319 = icmp ne %struct.loop_exit* %265, null, !dbg !4836
  br i1 %tobool319, label %for.body320, label %for.end323, !dbg !4836

for.body320:                                      ; preds = %for.cond318
  %266 = load i32, i32* %eloops, align 4, !dbg !4837
  %inc321 = add i32 %266, 1, !dbg !4837
  store i32 %inc321, i32* %eloops, align 4, !dbg !4837
  br label %for.inc322, !dbg !4838

for.inc322:                                       ; preds = %for.body320
  %267 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !4839
  %next_e = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %267, i32 0, i32 3, !dbg !4840
  %268 = load %struct.loop_exit*, %struct.loop_exit** %next_e, align 8, !dbg !4840
  store %struct.loop_exit* %268, %struct.loop_exit** %exit, align 8, !dbg !4841
  br label %for.cond318, !dbg !4842, !llvm.loop !4843

for.end323:                                       ; preds = %for.cond318
  %269 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4845
  %loop_father324 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %269, i32 0, i32 3, !dbg !4847
  %270 = load %struct.loop*, %struct.loop** %loop_father324, align 8, !dbg !4847
  store %struct.loop* %270, %struct.loop** %loop, align 8, !dbg !4848
  br label %for.cond325, !dbg !4849

for.cond325:                                      ; preds = %for.inc335, %for.end323
  %271 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4850
  %272 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4852
  %dest326 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %272, i32 0, i32 1, !dbg !4853
  %273 = load %struct.basic_block_def*, %struct.basic_block_def** %dest326, align 8, !dbg !4853
  %loop_father327 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %273, i32 0, i32 3, !dbg !4854
  %274 = load %struct.loop*, %struct.loop** %loop_father327, align 8, !dbg !4854
  %cmp328 = icmp ne %struct.loop* %271, %274, !dbg !4855
  br i1 %cmp328, label %for.body330, label %for.end337, !dbg !4856

for.body330:                                      ; preds = %for.cond325
  %275 = load i32, i32* %eloops, align 4, !dbg !4857
  %dec = add i32 %275, -1, !dbg !4857
  store i32 %dec, i32* %eloops, align 4, !dbg !4857
  %276 = load i32*, i32** %sizes, align 8, !dbg !4859
  %277 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4860
  %num331 = getelementptr inbounds %struct.loop, %struct.loop* %277, i32 0, i32 0, !dbg !4861
  %278 = load i32, i32* %num331, align 8, !dbg !4861
  %idxprom332 = sext i32 %278 to i64, !dbg !4859
  %arrayidx333 = getelementptr inbounds i32, i32* %276, i64 %idxprom332, !dbg !4859
  %279 = load i32, i32* %arrayidx333, align 4, !dbg !4862
  %inc334 = add i32 %279, 1, !dbg !4862
  store i32 %inc334, i32* %arrayidx333, align 4, !dbg !4862
  br label %for.inc335, !dbg !4863

for.inc335:                                       ; preds = %for.body330
  %280 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4864
  %call336 = call %struct.loop* @loop_outer(%struct.loop* %280), !dbg !4865
  store %struct.loop* %call336, %struct.loop** %loop, align 8, !dbg !4866
  br label %for.cond325, !dbg !4867, !llvm.loop !4868

for.end337:                                       ; preds = %for.cond325
  %281 = load i32, i32* %eloops, align 4, !dbg !4870
  %cmp338 = icmp ne i32 %281, 0, !dbg !4872
  br i1 %cmp338, label %if.then340, label %if.end345, !dbg !4873

if.then340:                                       ; preds = %for.end337
  %282 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4874
  %src341 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %282, i32 0, i32 0, !dbg !4876
  %283 = load %struct.basic_block_def*, %struct.basic_block_def** %src341, align 8, !dbg !4876
  %index342 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %283, i32 0, i32 9, !dbg !4877
  %284 = load i32, i32* %index342, align 8, !dbg !4877
  %285 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4878
  %dest343 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %285, i32 0, i32 1, !dbg !4879
  %286 = load %struct.basic_block_def*, %struct.basic_block_def** %dest343, align 8, !dbg !4879
  %index344 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %286, i32 0, i32 9, !dbg !4880
  %287 = load i32, i32* %index344, align 8, !dbg !4880
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.27, i64 0, i64 0), i32 %284, i32 %287), !dbg !4881
  store i32 1, i32* %err, align 4, !dbg !4882
  br label %if.end345, !dbg !4883

if.end345:                                        ; preds = %if.then340, %for.end337
  br label %for.inc346, !dbg !4884

for.inc346:                                       ; preds = %if.end345, %if.then307
  call void @ei_next(%struct.edge_iterator* %ei289), !dbg !4803
  br label %for.cond299, !dbg !4803, !llvm.loop !4885

for.end347:                                       ; preds = %for.cond299
  br label %for.inc348, !dbg !4887

for.inc348:                                       ; preds = %for.end347, %if.then294
  %288 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4788
  %next_bb349 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %288, i32 0, i32 6, !dbg !4788
  %289 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb349, align 8, !dbg !4788
  store %struct.basic_block_def* %289, %struct.basic_block_def** %bb, align 8, !dbg !4788
  br label %for.cond282, !dbg !4788, !llvm.loop !4888

for.end350:                                       ; preds = %for.cond282
  %290 = load i32, i32* %n_exits, align 4, !dbg !4890
  %conv351 = zext i32 %290 to i64, !dbg !4890
  %291 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4892
  %add.ptr352 = getelementptr inbounds %struct.function, %struct.function* %291, i64 0, !dbg !4892
  %x_current_loops353 = getelementptr inbounds %struct.function, %struct.function* %add.ptr352, i32 0, i32 4, !dbg !4892
  %292 = load %struct.loops*, %struct.loops** %x_current_loops353, align 8, !dbg !4892
  %exits354 = getelementptr inbounds %struct.loops, %struct.loops* %292, i32 0, i32 2, !dbg !4893
  %293 = load %struct.htab*, %struct.htab** %exits354, align 8, !dbg !4893
  %call355 = call i64 @htab_elements(%struct.htab* %293), !dbg !4894
  %cmp356 = icmp ne i64 %conv351, %call355, !dbg !4895
  br i1 %cmp356, label %if.then358, label %if.end359, !dbg !4896

if.then358:                                       ; preds = %for.end350
  call void (i8*, ...) @error(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.28, i64 0, i64 0)), !dbg !4897
  store i32 1, i32* %err, align 4, !dbg !4899
  br label %if.end359, !dbg !4900

if.end359:                                        ; preds = %if.then358, %for.end350
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !4901
  br label %for.cond360, !dbg !4901

for.cond360:                                      ; preds = %for.inc384, %if.end359
  %294 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4903
  %tobool361 = icmp ne %struct.loop* %294, null, !dbg !4901
  br i1 %tobool361, label %for.body362, label %for.end385, !dbg !4901

for.body362:                                      ; preds = %for.cond360
  store i32 0, i32* %eloops, align 4, !dbg !4905
  %295 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4907
  %exits363 = getelementptr inbounds %struct.loop, %struct.loop* %295, i32 0, i32 18, !dbg !4909
  %296 = load %struct.loop_exit*, %struct.loop_exit** %exits363, align 8, !dbg !4909
  %next364 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %296, i32 0, i32 2, !dbg !4910
  %297 = load %struct.loop_exit*, %struct.loop_exit** %next364, align 8, !dbg !4910
  store %struct.loop_exit* %297, %struct.loop_exit** %exit, align 8, !dbg !4911
  br label %for.cond365, !dbg !4912

for.cond365:                                      ; preds = %for.inc370, %for.body362
  %298 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !4913
  %e366 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %298, i32 0, i32 0, !dbg !4915
  %299 = load %struct.edge_def*, %struct.edge_def** %e366, align 8, !dbg !4915
  %tobool367 = icmp ne %struct.edge_def* %299, null, !dbg !4916
  br i1 %tobool367, label %for.body368, label %for.end372, !dbg !4916

for.body368:                                      ; preds = %for.cond365
  %300 = load i32, i32* %eloops, align 4, !dbg !4917
  %inc369 = add i32 %300, 1, !dbg !4917
  store i32 %inc369, i32* %eloops, align 4, !dbg !4917
  br label %for.inc370, !dbg !4918

for.inc370:                                       ; preds = %for.body368
  %301 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !4919
  %next371 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %301, i32 0, i32 2, !dbg !4920
  %302 = load %struct.loop_exit*, %struct.loop_exit** %next371, align 8, !dbg !4920
  store %struct.loop_exit* %302, %struct.loop_exit** %exit, align 8, !dbg !4921
  br label %for.cond365, !dbg !4922, !llvm.loop !4923

for.end372:                                       ; preds = %for.cond365
  %303 = load i32, i32* %eloops, align 4, !dbg !4925
  %304 = load i32*, i32** %sizes, align 8, !dbg !4927
  %305 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4928
  %num373 = getelementptr inbounds %struct.loop, %struct.loop* %305, i32 0, i32 0, !dbg !4929
  %306 = load i32, i32* %num373, align 8, !dbg !4929
  %idxprom374 = sext i32 %306 to i64, !dbg !4927
  %arrayidx375 = getelementptr inbounds i32, i32* %304, i64 %idxprom374, !dbg !4927
  %307 = load i32, i32* %arrayidx375, align 4, !dbg !4927
  %cmp376 = icmp ne i32 %303, %307, !dbg !4930
  br i1 %cmp376, label %if.then378, label %if.end383, !dbg !4931

if.then378:                                       ; preds = %for.end372
  %308 = load i32, i32* %eloops, align 4, !dbg !4932
  %309 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4934
  %num379 = getelementptr inbounds %struct.loop, %struct.loop* %309, i32 0, i32 0, !dbg !4935
  %310 = load i32, i32* %num379, align 8, !dbg !4935
  %311 = load i32*, i32** %sizes, align 8, !dbg !4936
  %312 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4937
  %num380 = getelementptr inbounds %struct.loop, %struct.loop* %312, i32 0, i32 0, !dbg !4938
  %313 = load i32, i32* %num380, align 8, !dbg !4938
  %idxprom381 = sext i32 %313 to i64, !dbg !4936
  %arrayidx382 = getelementptr inbounds i32, i32* %311, i64 %idxprom381, !dbg !4936
  %314 = load i32, i32* %arrayidx382, align 4, !dbg !4936
  call void (i8*, ...) @error(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.29, i64 0, i64 0), i32 %308, i32 %310, i32 %314), !dbg !4939
  store i32 1, i32* %err, align 4, !dbg !4940
  br label %if.end383, !dbg !4941

if.end383:                                        ; preds = %if.then378, %for.end372
  br label %for.inc384, !dbg !4942

for.inc384:                                       ; preds = %if.end383
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !4903
  br label %for.cond360, !dbg !4903, !llvm.loop !4943

for.end385:                                       ; preds = %for.cond360
  br label %if.end386, !dbg !4945

if.end386:                                        ; preds = %for.end385, %for.end273
  %315 = load i32, i32* %err, align 4, !dbg !4946
  %tobool387 = icmp ne i32 %315, 0, !dbg !4946
  br i1 %tobool387, label %cond.true388, label %cond.false389, !dbg !4946

cond.true388:                                     ; preds = %if.end386
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 1575, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4946
  br label %cond.end390, !dbg !4946

cond.false389:                                    ; preds = %if.end386
  br label %cond.end390, !dbg !4946

cond.end390:                                      ; preds = %cond.false389, %cond.true388
  %cond391 = phi i32 [ 0, %cond.true388 ], [ 0, %cond.false389 ], !dbg !4946
  %316 = load i32*, i32** %sizes, align 8, !dbg !4947
  %317 = bitcast i32* %316 to i8*, !dbg !4947
  call void @free(i8* %317), !dbg !4948
  ret void, !dbg !4949
}

declare dso_local void @error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !4950 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4953, metadata !DIExpression()), !dbg !4954
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4955
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !4955
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4955
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !4955
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4955

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4955
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !4955
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !4955
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !4955
  br label %cond.end, !dbg !4955

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4955

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4955
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4955
  %cmp = icmp eq i32 %call, 1, !dbg !4956
  %conv = zext i1 %cmp to i32, !dbg !4956
  %conv2 = trunc i32 %conv to i8, !dbg !4955
  ret i8 %conv2, !dbg !4957
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !4958 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4961, metadata !DIExpression()), !dbg !4962
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4963
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !4964
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !4965
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4965
  ret %struct.basic_block_def* %1, !dbg !4966
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @loop_latch_edge(%struct.loop* %loop) #0 !dbg !4967 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4970, metadata !DIExpression()), !dbg !4971
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4972
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 3, !dbg !4973
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4973
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4974
  %header = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 2, !dbg !4975
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4975
  %call = call %struct.edge_def* @find_edge(%struct.basic_block_def* %1, %struct.basic_block_def* %3), !dbg !4976
  ret %struct.edge_def* %call, !dbg !4977
}

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !4978 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !4979, metadata !DIExpression()), !dbg !4980
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !4981, metadata !DIExpression()), !dbg !4982
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !4983
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !4985
  %1 = load i8*, i8** %popcount, align 8, !dbg !4985
  %tobool = icmp ne i8* %1, null, !dbg !4983
  br i1 %tobool, label %if.then, label %if.end7, !dbg !4986

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !4987, metadata !DIExpression()), !dbg !4989
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !4990
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !4990
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !4990
  %div = udiv i32 %3, 64, !dbg !4990
  %idxprom = zext i32 %div to i64, !dbg !4990
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !4990
  %4 = load i64, i64* %arrayidx, align 8, !dbg !4990
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !4990
  %rem = urem i32 %5, 64, !dbg !4990
  %sh_prom = zext i32 %rem to i64, !dbg !4990
  %shr = lshr i64 %4, %sh_prom, !dbg !4990
  %and = and i64 %shr, 1, !dbg !4990
  %conv = trunc i64 %and to i8, !dbg !4990
  store i8 %conv, i8* %oldbit, align 1, !dbg !4991
  %6 = load i8, i8* %oldbit, align 1, !dbg !4992
  %tobool1 = icmp ne i8 %6, 0, !dbg !4992
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !4994

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !4995
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !4996
  %8 = load i8*, i8** %popcount3, align 8, !dbg !4996
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !4997
  %div4 = udiv i32 %9, 64, !dbg !4998
  %idxprom5 = zext i32 %div4 to i64, !dbg !4995
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !4995
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !4999
  %dec = add i8 %10, -1, !dbg !4999
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !4999
  br label %if.end, !dbg !4995

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !5000

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !5001
  %rem8 = urem i32 %11, 64, !dbg !5002
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !5003
  %shl = shl i64 1, %sh_prom9, !dbg !5003
  %neg = xor i64 %shl, -1, !dbg !5004
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5005
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !5006
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !5007
  %div11 = udiv i32 %13, 64, !dbg !5008
  %idxprom12 = zext i32 %div11 to i64, !dbg !5005
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !5005
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !5009
  %and14 = and i64 %14, %neg, !dbg !5009
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !5009
  ret void, !dbg !5010
}

declare dso_local zeroext i8 @mark_irreducible_loops() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop_exit* @get_exit_descriptions(%struct.edge_def* %e) #0 !dbg !5011 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !5014, metadata !DIExpression()), !dbg !5015
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5016
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5016
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5016
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5016
  %exits = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 2, !dbg !5017
  %2 = load %struct.htab*, %struct.htab** %exits, align 8, !dbg !5017
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5018
  %4 = bitcast %struct.edge_def* %3 to i8*, !dbg !5018
  %5 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !5019
  %6 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5020
  %7 = bitcast %struct.edge_def* %6 to i8*, !dbg !5020
  %call = call i32 %5(i8* %7), !dbg !5019
  %call1 = call i8* @htab_find_with_hash(%struct.htab* %2, i8* %4, i32 %call), !dbg !5021
  %8 = bitcast i8* %call1 to %struct.loop_exit*, !dbg !5022
  ret %struct.loop_exit* %8, !dbg !5023
}

declare dso_local i64 @htab_elements(%struct.htab*) #2

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop* %loop) #0 !dbg !5024 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5025, metadata !DIExpression()), !dbg !5026
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5027, metadata !DIExpression()), !dbg !5028
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5029, metadata !DIExpression()), !dbg !5030
  %call = call zeroext i8 @loops_state_satisfies_p(i32 1), !dbg !5031
  %tobool = icmp ne i8 %call, 0, !dbg !5031
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5031

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 1594, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5031
  br label %cond.end, !dbg !5031

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5031

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5031
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5032
  %header = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 2, !dbg !5032
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5032
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !5032
  %call1 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !5032
  %2 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5032
  %3 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %2, i32 0, i32 0, !dbg !5032
  %4 = extractvalue { i32, %struct.VEC_edge_gc** } %call1, 0, !dbg !5032
  store i32 %4, i32* %3, align 8, !dbg !5032
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %2, i32 0, i32 1, !dbg !5032
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call1, 1, !dbg !5032
  store %struct.VEC_edge_gc** %6, %struct.VEC_edge_gc*** %5, align 8, !dbg !5032
  %7 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5032
  %8 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5032
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false), !dbg !5032
  br label %for.cond, !dbg !5032

for.cond:                                         ; preds = %for.inc, %cond.end
  %9 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5034
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5034
  %11 = load i32, i32* %10, align 8, !dbg !5034
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5034
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5034
  %call2 = call zeroext i8 @ei_cond(i32 %11, %struct.VEC_edge_gc** %13, %struct.edge_def** %e), !dbg !5034
  %tobool3 = icmp ne i8 %call2, 0, !dbg !5032
  br i1 %tobool3, label %for.body, label %for.end, !dbg !5032

for.body:                                         ; preds = %for.cond
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5036
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 0, !dbg !5038
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5038
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5039
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %16, i32 0, i32 3, !dbg !5040
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !5040
  %cmp = icmp ne %struct.basic_block_def* %15, %17, !dbg !5041
  br i1 %cmp, label %if.then, label %if.end, !dbg !5042

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !5043

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !5040

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5034
  br label %for.cond, !dbg !5034, !llvm.loop !5044

for.end:                                          ; preds = %if.then, %for.cond
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5046
  ret %struct.edge_def* %18, !dbg !5047
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @loop_exit_edge_p(%struct.loop* %loop, %struct.edge_def* %e) #0 !dbg !5048 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5054, metadata !DIExpression()), !dbg !5055
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !5056, metadata !DIExpression()), !dbg !5057
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5058
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5059
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 0, !dbg !5060
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5060
  %call = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %0, %struct.basic_block_def* %2), !dbg !5061
  %conv = zext i8 %call to i32, !dbg !5061
  %tobool = icmp ne i32 %conv, 0, !dbg !5061
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5062

land.rhs:                                         ; preds = %entry
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5063
  %4 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5064
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 1, !dbg !5065
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5065
  %call1 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %3, %struct.basic_block_def* %5), !dbg !5066
  %tobool2 = icmp ne i8 %call1, 0, !dbg !5067
  %lnot = xor i1 %tobool2, true, !dbg !5067
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ], !dbg !5068
  %land.ext = zext i1 %6 to i32, !dbg !5062
  %conv3 = trunc i32 %land.ext to i8, !dbg !5069
  ret i8 %conv3, !dbg !5070
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @single_exit(%struct.loop* %loop) #0 !dbg !5071 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %exit = alloca %struct.loop_exit*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5072, metadata !DIExpression()), !dbg !5073
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %exit, metadata !5074, metadata !DIExpression()), !dbg !5075
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5076
  %exits = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 18, !dbg !5077
  %1 = load %struct.loop_exit*, %struct.loop_exit** %exits, align 8, !dbg !5077
  %next = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %1, i32 0, i32 2, !dbg !5078
  %2 = load %struct.loop_exit*, %struct.loop_exit** %next, align 8, !dbg !5078
  store %struct.loop_exit* %2, %struct.loop_exit** %exit, align 8, !dbg !5075
  %call = call zeroext i8 @loops_state_satisfies_p(i32 8), !dbg !5079
  %tobool = icmp ne i8 %call, 0, !dbg !5079
  br i1 %tobool, label %if.end, label %if.then, !dbg !5081

if.then:                                          ; preds = %entry
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !5082
  br label %return, !dbg !5082

if.end:                                           ; preds = %entry
  %3 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !5083
  %e = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %3, i32 0, i32 0, !dbg !5085
  %4 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5085
  %tobool1 = icmp ne %struct.edge_def* %4, null, !dbg !5083
  br i1 %tobool1, label %land.lhs.true, label %if.else, !dbg !5086

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !5087
  %next2 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %5, i32 0, i32 2, !dbg !5088
  %6 = load %struct.loop_exit*, %struct.loop_exit** %next2, align 8, !dbg !5088
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5089
  %exits3 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 18, !dbg !5090
  %8 = load %struct.loop_exit*, %struct.loop_exit** %exits3, align 8, !dbg !5090
  %cmp = icmp eq %struct.loop_exit* %6, %8, !dbg !5091
  br i1 %cmp, label %if.then4, label %if.else, !dbg !5092

if.then4:                                         ; preds = %land.lhs.true
  %9 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !5093
  %e5 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %9, i32 0, i32 0, !dbg !5094
  %10 = load %struct.edge_def*, %struct.edge_def** %e5, align 8, !dbg !5094
  store %struct.edge_def* %10, %struct.edge_def** %retval, align 8, !dbg !5095
  br label %return, !dbg !5095

if.else:                                          ; preds = %land.lhs.true, %if.end
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !5096
  br label %return, !dbg !5096

return:                                           ; preds = %if.else, %if.then4, %if.then
  %11 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !5097
  ret %struct.edge_def* %11, !dbg !5097
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_loop_exit(%struct.loop* %loop, %struct.basic_block_def* %bb) #0 !dbg !5098 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5101, metadata !DIExpression()), !dbg !5102
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5103, metadata !DIExpression()), !dbg !5104
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5105, metadata !DIExpression()), !dbg !5106
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5107, metadata !DIExpression()), !dbg !5108
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5109
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !5109
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !5109
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5109
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !5109
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !5109
  store i32 %3, i32* %2, align 8, !dbg !5109
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !5109
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !5109
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !5109
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5109
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5109
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !5109
  br label %for.cond, !dbg !5109

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5111
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5111
  %10 = load i32, i32* %9, align 8, !dbg !5111
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5111
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5111
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !5111
  %tobool = icmp ne i8 %call1, 0, !dbg !5109
  br i1 %tobool, label %for.body, label %for.end, !dbg !5109

for.body:                                         ; preds = %for.cond
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5113
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5115
  %call2 = call zeroext i8 @loop_exit_edge_p(%struct.loop* %13, %struct.edge_def* %14), !dbg !5116
  %tobool3 = icmp ne i8 %call2, 0, !dbg !5116
  br i1 %tobool3, label %if.then, label %if.end, !dbg !5117

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !5118
  br label %return, !dbg !5118

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !5119

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5111
  br label %for.cond, !dbg !5111, !llvm.loop !5120

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !5122
  br label %return, !dbg !5122

return:                                           ; preds = %for.end, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !5123
  ret i8 %15, !dbg !5123
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !5124 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5127, metadata !DIExpression()), !dbg !5128
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5128
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !5128
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !5128
  ret %struct.VEC_int_heap* %1, !dbg !5128
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !5129 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !5133, metadata !DIExpression()), !dbg !5134
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !5135, metadata !DIExpression()), !dbg !5134
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !5136, metadata !DIExpression()), !dbg !5134
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5134
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !5134
  %1 = load i32, i32* %num, align 4, !dbg !5134
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5134
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !5134
  %3 = load i32, i32* %alloc, align 4, !dbg !5134
  %cmp = icmp ult i32 %1, %3, !dbg !5134
  %conv = zext i1 %cmp to i32, !dbg !5134
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5134
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !5134
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5134
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !5134
  %6 = load i32, i32* %num1, align 4, !dbg !5134
  %inc = add i32 %6, 1, !dbg !5134
  store i32 %inc, i32* %num1, align 4, !dbg !5134
  %idxprom = zext i32 %6 to i64, !dbg !5134
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !5134
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !5134
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !5134
  %8 = load i32*, i32** %slot_, align 8, !dbg !5134
  store i32 %7, i32* %8, align 4, !dbg !5134
  %9 = load i32*, i32** %slot_, align 8, !dbg !5134
  ret i32* %9, !dbg !5134
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !5137 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !5142, metadata !DIExpression()), !dbg !5143
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5144, metadata !DIExpression()), !dbg !5143
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !5145, metadata !DIExpression()), !dbg !5143
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5146
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !5146
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5146

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5146
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5146
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !5146
  %3 = load i32, i32* %num, align 4, !dbg !5146
  %cmp = icmp ult i32 %1, %3, !dbg !5146
  br i1 %cmp, label %if.then, label %if.else, !dbg !5143

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5148
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !5148
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5148
  %idxprom = zext i32 %5 to i64, !dbg !5148
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !5148
  %6 = load i32, i32* %arrayidx, align 4, !dbg !5148
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !5148
  store i32 %6, i32* %7, align 4, !dbg !5148
  store i32 1, i32* %retval, align 4, !dbg !5148
  br label %return, !dbg !5148

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !5150
  store i32 0, i32* %8, align 4, !dbg !5150
  store i32 0, i32* %retval, align 4, !dbg !5150
  br label %return, !dbg !5150

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5143
  ret i32 %9, !dbg !5143
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !5152 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !5155, metadata !DIExpression()), !dbg !5156
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5157
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5157
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5157
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5157
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !5157
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5157
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !5157
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5157

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5157
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5157
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !5157
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !5157
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !5157
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !5157
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !5157
  br label %cond.end, !dbg !5157

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5157

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5157
  %6 = load i32, i32* %num.addr, align 4, !dbg !5157
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !5157
  ret %struct.loop* %call, !dbg !5158
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !5159 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !5163, metadata !DIExpression()), !dbg !5164
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5165
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !5165
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !5165
  br i1 %tobool, label %if.then, label %if.end, !dbg !5164

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5165
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !5165
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !5165
  call void @free(i8* %4), !dbg !5165
  br label %if.end, !dbg !5165

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5164
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !5164
  ret void, !dbg !5164
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5167 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5170, metadata !DIExpression()), !dbg !5171
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5172
  %3 = load i32, i32* %index, align 8, !dbg !5172
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5173
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !5173
  %6 = load i32, i32* %5, align 8, !dbg !5173
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !5173
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !5173
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !5173
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5173
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5173

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5173
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5173
  %11 = load i32, i32* %10, align 8, !dbg !5173
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5173
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5173
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5173
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5173
  br label %cond.end, !dbg !5173

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5173

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5173
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5173
  %cmp = icmp eq i32 %3, %call2, !dbg !5174
  %conv = zext i1 %cmp to i32, !dbg !5174
  %conv3 = trunc i32 %conv to i8, !dbg !5175
  ret i8 %conv3, !dbg !5176
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5177 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5180, metadata !DIExpression()), !dbg !5181
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5182
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5182
  %5 = load i32, i32* %4, align 8, !dbg !5182
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5182
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5182
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5182
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5182
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5182

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5182
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5182
  %10 = load i32, i32* %9, align 8, !dbg !5182
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5182
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5182
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5182
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5182
  br label %cond.end, !dbg !5182

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5182

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5182
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5182
  %13 = load i32, i32* %index, align 8, !dbg !5182
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !5182
  ret %struct.edge_def* %call2, !dbg !5183
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5184 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5187, metadata !DIExpression()), !dbg !5188
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5189
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !5189
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !5189
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5189

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5189
  br label %cond.end, !dbg !5189

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5189

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5189
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5190
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !5190
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !5191
  ret %struct.VEC_edge_gc* %5, !dbg !5192
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !5193 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5196, metadata !DIExpression()), !dbg !5197
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5198, metadata !DIExpression()), !dbg !5197
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5197
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5197
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5197

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5197
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5197
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !5197
  %3 = load i32, i32* %num, align 8, !dbg !5197
  %cmp = icmp ult i32 %1, %3, !dbg !5197
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5199
  %land.ext = zext i1 %4 to i32, !dbg !5197
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5197
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !5197
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5197
  %idxprom = zext i32 %6 to i64, !dbg !5197
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !5197
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !5197
  ret %struct.edge_def* %7, !dbg !5197
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_heap_reserve(%struct.VEC_basic_block_heap** %vec_, i32 %alloc_) #0 !dbg !5200 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !5203, metadata !DIExpression()), !dbg !5204
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5205, metadata !DIExpression()), !dbg !5204
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5206, metadata !DIExpression()), !dbg !5204
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !5204
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !5204
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !5204
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5204

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !5204
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !5204
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %3, i32 0, i32 0, !dbg !5204
  br label %cond.end, !dbg !5204

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5204

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5204
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5204
  %call = call i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %cond, i32 %4), !dbg !5204
  %tobool1 = icmp ne i32 %call, 0, !dbg !5204
  %lnot = xor i1 %tobool1, true, !dbg !5204
  %lnot.ext = zext i1 %lnot to i32, !dbg !5204
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5204
  %5 = load i32, i32* %extend, align 4, !dbg !5207
  %tobool2 = icmp ne i32 %5, 0, !dbg !5207
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5204

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !5207
  %7 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %6, align 8, !dbg !5207
  %8 = bitcast %struct.VEC_basic_block_heap* %7 to i8*, !dbg !5207
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5207
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5207
  %10 = bitcast i8* %call3 to %struct.VEC_basic_block_heap*, !dbg !5207
  %11 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !5207
  store %struct.VEC_basic_block_heap* %10, %struct.VEC_basic_block_heap** %11, align 8, !dbg !5207
  br label %if.end, !dbg !5207

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5204
  ret i32 %12, !dbg !5204
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %vec_, %struct.basic_block_def* %obj_) #0 !dbg !5209 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  %slot_ = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !5212, metadata !DIExpression()), !dbg !5213
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !5214, metadata !DIExpression()), !dbg !5213
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %slot_, metadata !5215, metadata !DIExpression()), !dbg !5213
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5213
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %0, i32 0, i32 0, !dbg !5213
  %1 = load i32, i32* %num, align 8, !dbg !5213
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5213
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !5213
  %3 = load i32, i32* %alloc, align 4, !dbg !5213
  %cmp = icmp ult i32 %1, %3, !dbg !5213
  %conv = zext i1 %cmp to i32, !dbg !5213
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5213
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !5213
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5213
  %num1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 0, !dbg !5213
  %6 = load i32, i32* %num1, align 8, !dbg !5213
  %inc = add i32 %6, 1, !dbg !5213
  store i32 %inc, i32* %num1, align 8, !dbg !5213
  %idxprom = zext i32 %6 to i64, !dbg !5213
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !5213
  store %struct.basic_block_def** %arrayidx, %struct.basic_block_def*** %slot_, align 8, !dbg !5213
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !5213
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !5213
  store %struct.basic_block_def* %7, %struct.basic_block_def** %8, align 8, !dbg !5213
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !5213
  ret %struct.basic_block_def** %9, !dbg !5213
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %vec_, i32 %alloc_) #0 !dbg !5216 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !5219, metadata !DIExpression()), !dbg !5220
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5221, metadata !DIExpression()), !dbg !5220
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5220
  %cmp = icmp sge i32 %0, 0, !dbg !5220
  %conv = zext i1 %cmp to i32, !dbg !5220
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5220
  %tobool = icmp ne %struct.VEC_basic_block_base* %1, null, !dbg !5220
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5220

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5220
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !5220
  %3 = load i32, i32* %alloc, align 4, !dbg !5220
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5220
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 0, !dbg !5220
  %5 = load i32, i32* %num, align 8, !dbg !5220
  %sub = sub i32 %3, %5, !dbg !5220
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5220
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5220
  %conv2 = zext i1 %cmp1 to i32, !dbg !5220
  br label %cond.end, !dbg !5220

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5220
  %tobool3 = icmp ne i32 %7, 0, !dbg !5220
  %lnot = xor i1 %tobool3, true, !dbg !5220
  %lnot.ext = zext i1 %lnot to i32, !dbg !5220
  br label %cond.end, !dbg !5220

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5220
  ret i32 %cond, !dbg !5220
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_gc_reserve(%struct.VEC_loop_p_gc** %vec_, i32 %alloc_) #0 !dbg !5222 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_loop_p_gc** %vec_, %struct.VEC_loop_p_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_gc*** %vec_.addr, metadata !5225, metadata !DIExpression()), !dbg !5226
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5227, metadata !DIExpression()), !dbg !5226
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5228, metadata !DIExpression()), !dbg !5226
  %0 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !5226
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %0, align 8, !dbg !5226
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !5226
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5226

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !5226
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %2, align 8, !dbg !5226
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !5226
  br label %cond.end, !dbg !5226

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5226

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5226
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5226
  %call = call i32 @VEC_loop_p_base_space(%struct.VEC_loop_p_base* %cond, i32 %4), !dbg !5226
  %tobool1 = icmp ne i32 %call, 0, !dbg !5226
  %lnot = xor i1 %tobool1, true, !dbg !5226
  %lnot.ext = zext i1 %lnot to i32, !dbg !5226
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5226
  %5 = load i32, i32* %extend, align 4, !dbg !5229
  %tobool2 = icmp ne i32 %5, 0, !dbg !5229
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5226

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !5229
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %6, align 8, !dbg !5229
  %8 = bitcast %struct.VEC_loop_p_gc* %7 to i8*, !dbg !5229
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5229
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !5229
  %10 = bitcast i8* %call3 to %struct.VEC_loop_p_gc*, !dbg !5229
  %11 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !5229
  store %struct.VEC_loop_p_gc* %10, %struct.VEC_loop_p_gc** %11, align 8, !dbg !5229
  br label %if.end, !dbg !5229

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5226
  ret i32 %12, !dbg !5226
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_space(%struct.VEC_loop_p_base* %vec_, i32 %alloc_) #0 !dbg !5231 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !5234, metadata !DIExpression()), !dbg !5235
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5236, metadata !DIExpression()), !dbg !5235
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5235
  %cmp = icmp sge i32 %0, 0, !dbg !5235
  %conv = zext i1 %cmp to i32, !dbg !5235
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5235
  %tobool = icmp ne %struct.VEC_loop_p_base* %1, null, !dbg !5235
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5235

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5235
  %alloc = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 1, !dbg !5235
  %3 = load i32, i32* %alloc, align 4, !dbg !5235
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5235
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 0, !dbg !5235
  %5 = load i32, i32* %num, align 8, !dbg !5235
  %sub = sub i32 %3, %5, !dbg !5235
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5235
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5235
  %conv2 = zext i1 %cmp1 to i32, !dbg !5235
  br label %cond.end, !dbg !5235

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5235
  %tobool3 = icmp ne i32 %7, 0, !dbg !5235
  %lnot = xor i1 %tobool3, true, !dbg !5235
  %lnot.ext = zext i1 %lnot to i32, !dbg !5235
  br label %cond.end, !dbg !5235

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5235
  ret i32 %cond, !dbg !5235
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_loop_p_gc* @VEC_loop_p_gc_alloc(i32 %alloc_) #0 !dbg !5237 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5240, metadata !DIExpression()), !dbg !5241
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5241
  %call = call i8* @vec_gc_p_reserve_exact(i8* null, i32 %0), !dbg !5241
  %1 = bitcast i8* %call to %struct.VEC_loop_p_gc*, !dbg !5241
  ret %struct.VEC_loop_p_gc* %1, !dbg !5241
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @find_subloop_latch_edge(%struct.loop* %loop) #0 !dbg !5242 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %latches = alloca %struct.VEC_edge_heap*, align 8
  %latch = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5245, metadata !DIExpression()), !dbg !5246
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %latches, metadata !5247, metadata !DIExpression()), !dbg !5248
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5249
  %call = call %struct.VEC_edge_heap* @get_loop_latch_edges(%struct.loop* %0), !dbg !5250
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %latches, align 8, !dbg !5248
  call void @llvm.dbg.declare(metadata %struct.edge_def** %latch, metadata !5251, metadata !DIExpression()), !dbg !5252
  store %struct.edge_def* null, %struct.edge_def** %latch, align 8, !dbg !5252
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !5253
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !5253
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5253

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !5253
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %2, i32 0, i32 0, !dbg !5253
  br label %cond.end, !dbg !5253

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5253

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5253
  %call1 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5253
  %cmp = icmp ugt i32 %call1, 1, !dbg !5255
  br i1 %cmp, label %if.then, label %if.end8, !dbg !5256

if.then:                                          ; preds = %cond.end
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !5257
  %call2 = call %struct.edge_def* @find_subloop_latch_edge_by_profile(%struct.VEC_edge_heap* %3), !dbg !5259
  store %struct.edge_def* %call2, %struct.edge_def** %latch, align 8, !dbg !5260
  %4 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !5261
  %tobool3 = icmp ne %struct.edge_def* %4, null, !dbg !5261
  br i1 %tobool3, label %if.end, label %land.lhs.true, !dbg !5263

land.lhs.true:                                    ; preds = %if.then
  %call4 = call i32 @current_ir_type(), !dbg !5264
  %cmp5 = icmp eq i32 %call4, 0, !dbg !5265
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !5266

if.then6:                                         ; preds = %land.lhs.true
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5267
  %6 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !5268
  %call7 = call %struct.edge_def* @find_subloop_latch_edge_by_ivs(%struct.loop* %5, %struct.VEC_edge_heap* %6), !dbg !5269
  store %struct.edge_def* %call7, %struct.edge_def** %latch, align 8, !dbg !5270
  br label %if.end, !dbg !5271

if.end:                                           ; preds = %if.then6, %land.lhs.true, %if.then
  br label %if.end8, !dbg !5272

if.end8:                                          ; preds = %if.end, %cond.end
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %latches), !dbg !5273
  %7 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !5274
  ret %struct.edge_def* %7, !dbg !5275
}

; Function Attrs: noinline nounwind uwtable
define internal void @form_subloop(%struct.loop* %loop, %struct.edge_def* %latch) #0 !dbg !5276 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %latch.addr = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %new_entry = alloca %struct.edge_def*, align 8
  %new_loop = alloca %struct.loop*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5279, metadata !DIExpression()), !dbg !5280
  store %struct.edge_def* %latch, %struct.edge_def** %latch.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %latch.addr, metadata !5281, metadata !DIExpression()), !dbg !5282
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5283, metadata !DIExpression()), !dbg !5284
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5285, metadata !DIExpression()), !dbg !5286
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_entry, metadata !5287, metadata !DIExpression()), !dbg !5288
  call void @llvm.dbg.declare(metadata %struct.loop** %new_loop, metadata !5289, metadata !DIExpression()), !dbg !5290
  %call = call %struct.pointer_set_t* @pointer_set_create(), !dbg !5291
  store %struct.pointer_set_t* %call, %struct.pointer_set_t** @mfb_reis_set, align 8, !dbg !5292
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5293
  %header = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 2, !dbg !5293
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5293
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !5293
  %call1 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !5293
  %2 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5293
  %3 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %2, i32 0, i32 0, !dbg !5293
  %4 = extractvalue { i32, %struct.VEC_edge_gc** } %call1, 0, !dbg !5293
  store i32 %4, i32* %3, align 8, !dbg !5293
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %2, i32 0, i32 1, !dbg !5293
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call1, 1, !dbg !5293
  store %struct.VEC_edge_gc** %6, %struct.VEC_edge_gc*** %5, align 8, !dbg !5293
  %7 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5293
  %8 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5293
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false), !dbg !5293
  br label %for.cond, !dbg !5293

for.cond:                                         ; preds = %for.inc, %entry
  %9 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5295
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5295
  %11 = load i32, i32* %10, align 8, !dbg !5295
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5295
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5295
  %call2 = call zeroext i8 @ei_cond(i32 %11, %struct.VEC_edge_gc** %13, %struct.edge_def** %e), !dbg !5295
  %tobool = icmp ne i8 %call2, 0, !dbg !5293
  br i1 %tobool, label %for.body, label %for.end, !dbg !5293

for.body:                                         ; preds = %for.cond
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5297
  %15 = load %struct.edge_def*, %struct.edge_def** %latch.addr, align 8, !dbg !5300
  %cmp = icmp ne %struct.edge_def* %14, %15, !dbg !5301
  br i1 %cmp, label %if.then, label %if.end, !dbg !5302

if.then:                                          ; preds = %for.body
  %16 = load %struct.pointer_set_t*, %struct.pointer_set_t** @mfb_reis_set, align 8, !dbg !5303
  %17 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5304
  %18 = bitcast %struct.edge_def* %17 to i8*, !dbg !5304
  %call3 = call i32 @pointer_set_insert(%struct.pointer_set_t* %16, i8* %18), !dbg !5305
  br label %if.end, !dbg !5305

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5306

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5295
  br label %for.cond, !dbg !5295, !llvm.loop !5307

for.end:                                          ; preds = %for.cond
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5309
  %header4 = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 2, !dbg !5310
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %header4, align 8, !dbg !5310
  %call5 = call %struct.edge_def* @make_forwarder_block(%struct.basic_block_def* %20, i8 (%struct.edge_def*)* @mfb_redirect_edges_in_set, void (%struct.basic_block_def*)* null), !dbg !5311
  store %struct.edge_def* %call5, %struct.edge_def** %new_entry, align 8, !dbg !5312
  %21 = load %struct.pointer_set_t*, %struct.pointer_set_t** @mfb_reis_set, align 8, !dbg !5313
  call void @pointer_set_destroy(%struct.pointer_set_t* %21), !dbg !5314
  %22 = load %struct.edge_def*, %struct.edge_def** %new_entry, align 8, !dbg !5315
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 0, !dbg !5316
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5316
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5317
  %header6 = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 2, !dbg !5318
  store %struct.basic_block_def* %23, %struct.basic_block_def** %header6, align 8, !dbg !5319
  %call7 = call %struct.loop* @alloc_loop(), !dbg !5320
  store %struct.loop* %call7, %struct.loop** %new_loop, align 8, !dbg !5321
  %25 = load %struct.edge_def*, %struct.edge_def** %new_entry, align 8, !dbg !5322
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 1, !dbg !5323
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5323
  %27 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !5324
  %header8 = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 2, !dbg !5325
  store %struct.basic_block_def* %26, %struct.basic_block_def** %header8, align 8, !dbg !5326
  %28 = load %struct.edge_def*, %struct.edge_def** %latch.addr, align 8, !dbg !5327
  %src9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 0, !dbg !5328
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %src9, align 8, !dbg !5328
  %30 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !5329
  %latch10 = getelementptr inbounds %struct.loop, %struct.loop* %30, i32 0, i32 3, !dbg !5330
  store %struct.basic_block_def* %29, %struct.basic_block_def** %latch10, align 8, !dbg !5331
  %31 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !5332
  %32 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5333
  call void @add_loop(%struct.loop* %31, %struct.loop* %32), !dbg !5334
  ret void, !dbg !5335
}

; Function Attrs: noinline nounwind uwtable
define internal void @merge_latch_edges(%struct.loop* %loop) #0 !dbg !5336 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %latches = alloca %struct.VEC_edge_heap*, align 8
  %latch = alloca %struct.edge_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %i = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5337, metadata !DIExpression()), !dbg !5338
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %latches, metadata !5339, metadata !DIExpression()), !dbg !5340
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5341
  %call = call %struct.VEC_edge_heap* @get_loop_latch_edges(%struct.loop* %0), !dbg !5342
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %latches, align 8, !dbg !5340
  call void @llvm.dbg.declare(metadata %struct.edge_def** %latch, metadata !5343, metadata !DIExpression()), !dbg !5344
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5345, metadata !DIExpression()), !dbg !5346
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5347, metadata !DIExpression()), !dbg !5348
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !5349
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !5349
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5349

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !5349
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %2, i32 0, i32 0, !dbg !5349
  br label %cond.end, !dbg !5349

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5349

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5349
  %call1 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5349
  %cmp = icmp ugt i32 %call1, 0, !dbg !5349
  br i1 %cmp, label %cond.false3, label %cond.true2, !dbg !5349

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 690, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5349
  br label %cond.end4, !dbg !5349

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !5349

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !5349
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !5350
  %tobool6 = icmp ne %struct.VEC_edge_heap* %3, null, !dbg !5350
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !5350

cond.true7:                                       ; preds = %cond.end4
  %4 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !5350
  %base8 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %4, i32 0, i32 0, !dbg !5350
  br label %cond.end10, !dbg !5350

cond.false9:                                      ; preds = %cond.end4
  br label %cond.end10, !dbg !5350

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_edge_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !5350
  %call12 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond11), !dbg !5350
  %cmp13 = icmp eq i32 %call12, 1, !dbg !5352
  br i1 %cmp13, label %if.then, label %if.else, !dbg !5353

if.then:                                          ; preds = %cond.end10
  %5 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !5354
  %tobool14 = icmp ne %struct.VEC_edge_heap* %5, null, !dbg !5354
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !5354

cond.true15:                                      ; preds = %if.then
  %6 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !5354
  %base16 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %6, i32 0, i32 0, !dbg !5354
  br label %cond.end18, !dbg !5354

cond.false17:                                     ; preds = %if.then
  br label %cond.end18, !dbg !5354

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_edge_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !5354
  %call20 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond19, i32 0), !dbg !5354
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call20, i32 0, i32 0, !dbg !5355
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5355
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5356
  %latch21 = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 3, !dbg !5357
  store %struct.basic_block_def* %7, %struct.basic_block_def** %latch21, align 8, !dbg !5358
  br label %if.end39, !dbg !5356

if.else:                                          ; preds = %cond.end10
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5359
  %tobool22 = icmp ne %struct._IO_FILE* %9, null, !dbg !5359
  br i1 %tobool22, label %if.then23, label %if.end, !dbg !5362

if.then23:                                        ; preds = %if.else
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5363
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5364
  %num = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 0, !dbg !5365
  %12 = load i32, i32* %num, align 8, !dbg !5365
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.38, i64 0, i64 0), i32 %12), !dbg !5366
  br label %if.end, !dbg !5366

if.end:                                           ; preds = %if.then23, %if.else
  %call25 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !5367
  store %struct.pointer_set_t* %call25, %struct.pointer_set_t** @mfb_reis_set, align 8, !dbg !5368
  store i32 0, i32* %i, align 4, !dbg !5369
  br label %for.cond, !dbg !5371

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !5372
  %tobool26 = icmp ne %struct.VEC_edge_heap* %13, null, !dbg !5372
  br i1 %tobool26, label %cond.true27, label %cond.false29, !dbg !5372

cond.true27:                                      ; preds = %for.cond
  %14 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches, align 8, !dbg !5372
  %base28 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %14, i32 0, i32 0, !dbg !5372
  br label %cond.end30, !dbg !5372

cond.false29:                                     ; preds = %for.cond
  br label %cond.end30, !dbg !5372

cond.end30:                                       ; preds = %cond.false29, %cond.true27
  %cond31 = phi %struct.VEC_edge_base* [ %base28, %cond.true27 ], [ null, %cond.false29 ], !dbg !5372
  %15 = load i32, i32* %i, align 4, !dbg !5372
  %call32 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond31, i32 %15, %struct.edge_def** %e), !dbg !5372
  %tobool33 = icmp ne i32 %call32, 0, !dbg !5374
  br i1 %tobool33, label %for.body, label %for.end, !dbg !5374

for.body:                                         ; preds = %cond.end30
  %16 = load %struct.pointer_set_t*, %struct.pointer_set_t** @mfb_reis_set, align 8, !dbg !5375
  %17 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5376
  %18 = bitcast %struct.edge_def* %17 to i8*, !dbg !5376
  %call34 = call i32 @pointer_set_insert(%struct.pointer_set_t* %16, i8* %18), !dbg !5377
  br label %for.inc, !dbg !5377

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4, !dbg !5378
  %inc = add i32 %19, 1, !dbg !5378
  store i32 %inc, i32* %i, align 4, !dbg !5378
  br label %for.cond, !dbg !5379, !llvm.loop !5380

for.end:                                          ; preds = %cond.end30
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5382
  %header = getelementptr inbounds %struct.loop, %struct.loop* %20, i32 0, i32 2, !dbg !5383
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5383
  %call35 = call %struct.edge_def* @make_forwarder_block(%struct.basic_block_def* %21, i8 (%struct.edge_def*)* @mfb_redirect_edges_in_set, void (%struct.basic_block_def*)* null), !dbg !5384
  store %struct.edge_def* %call35, %struct.edge_def** %latch, align 8, !dbg !5385
  %22 = load %struct.pointer_set_t*, %struct.pointer_set_t** @mfb_reis_set, align 8, !dbg !5386
  call void @pointer_set_destroy(%struct.pointer_set_t* %22), !dbg !5387
  %23 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !5388
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 1, !dbg !5389
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5389
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5390
  %header36 = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 2, !dbg !5391
  store %struct.basic_block_def* %24, %struct.basic_block_def** %header36, align 8, !dbg !5392
  %26 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !5393
  %src37 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 0, !dbg !5394
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %src37, align 8, !dbg !5394
  %28 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5395
  %latch38 = getelementptr inbounds %struct.loop, %struct.loop* %28, i32 0, i32 3, !dbg !5396
  store %struct.basic_block_def* %27, %struct.basic_block_def** %latch38, align 8, !dbg !5397
  br label %if.end39

if.end39:                                         ; preds = %for.end, %cond.end18
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %latches), !dbg !5398
  ret void, !dbg !5399
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @find_subloop_latch_edge_by_profile(%struct.VEC_edge_heap* %latches) #0 !dbg !5400 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %latches.addr = alloca %struct.VEC_edge_heap*, align 8
  %i = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %me = alloca %struct.edge_def*, align 8
  %mcount = alloca i64, align 8
  %tcount = alloca i64, align 8
  store %struct.VEC_edge_heap* %latches, %struct.VEC_edge_heap** %latches.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %latches.addr, metadata !5403, metadata !DIExpression()), !dbg !5404
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5405, metadata !DIExpression()), !dbg !5406
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5407, metadata !DIExpression()), !dbg !5408
  call void @llvm.dbg.declare(metadata %struct.edge_def** %me, metadata !5409, metadata !DIExpression()), !dbg !5410
  store %struct.edge_def* null, %struct.edge_def** %me, align 8, !dbg !5410
  call void @llvm.dbg.declare(metadata i64* %mcount, metadata !5411, metadata !DIExpression()), !dbg !5412
  store i64 0, i64* %mcount, align 8, !dbg !5412
  call void @llvm.dbg.declare(metadata i64* %tcount, metadata !5413, metadata !DIExpression()), !dbg !5414
  store i64 0, i64* %tcount, align 8, !dbg !5414
  store i32 0, i32* %i, align 4, !dbg !5415
  br label %for.cond, !dbg !5417

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches.addr, align 8, !dbg !5418
  %tobool = icmp ne %struct.VEC_edge_heap* %0, null, !dbg !5418
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5418

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches.addr, align 8, !dbg !5418
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %1, i32 0, i32 0, !dbg !5418
  br label %cond.end, !dbg !5418

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5418

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5418
  %2 = load i32, i32* %i, align 4, !dbg !5418
  %call = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %2, %struct.edge_def** %e), !dbg !5418
  %tobool1 = icmp ne i32 %call, 0, !dbg !5420
  br i1 %tobool1, label %for.body, label %for.end, !dbg !5420

for.body:                                         ; preds = %cond.end
  %3 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5421
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 9, !dbg !5424
  %4 = load i64, i64* %count, align 8, !dbg !5424
  %5 = load i64, i64* %mcount, align 8, !dbg !5425
  %cmp = icmp sgt i64 %4, %5, !dbg !5426
  br i1 %cmp, label %if.then, label %if.end, !dbg !5427

if.then:                                          ; preds = %for.body
  %6 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5428
  store %struct.edge_def* %6, %struct.edge_def** %me, align 8, !dbg !5430
  %7 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5431
  %count2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 9, !dbg !5432
  %8 = load i64, i64* %count2, align 8, !dbg !5432
  store i64 %8, i64* %mcount, align 8, !dbg !5433
  br label %if.end, !dbg !5434

if.end:                                           ; preds = %if.then, %for.body
  %9 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5435
  %count3 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 9, !dbg !5436
  %10 = load i64, i64* %count3, align 8, !dbg !5436
  %11 = load i64, i64* %tcount, align 8, !dbg !5437
  %add = add nsw i64 %11, %10, !dbg !5437
  store i64 %add, i64* %tcount, align 8, !dbg !5437
  br label %for.inc, !dbg !5438

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !5439
  %inc = add i32 %12, 1, !dbg !5439
  store i32 %inc, i32* %i, align 4, !dbg !5439
  br label %for.cond, !dbg !5440, !llvm.loop !5441

for.end:                                          ; preds = %cond.end
  %13 = load i64, i64* %tcount, align 8, !dbg !5443
  %cmp4 = icmp slt i64 %13, 10, !dbg !5445
  br i1 %cmp4, label %if.then6, label %lor.lhs.false, !dbg !5446

lor.lhs.false:                                    ; preds = %for.end
  %14 = load i64, i64* %tcount, align 8, !dbg !5447
  %15 = load i64, i64* %mcount, align 8, !dbg !5448
  %sub = sub nsw i64 %14, %15, !dbg !5449
  %mul = mul nsw i64 %sub, 8, !dbg !5450
  %16 = load i64, i64* %tcount, align 8, !dbg !5451
  %cmp5 = icmp sgt i64 %mul, %16, !dbg !5452
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !5453

if.then6:                                         ; preds = %lor.lhs.false, %for.end
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !5454
  br label %return, !dbg !5454

if.end7:                                          ; preds = %lor.lhs.false
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5455
  %tobool8 = icmp ne %struct._IO_FILE* %17, null, !dbg !5455
  br i1 %tobool8, label %if.then9, label %if.end12, !dbg !5457

if.then9:                                         ; preds = %if.end7
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5458
  %19 = load %struct.edge_def*, %struct.edge_def** %me, align 8, !dbg !5459
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 0, !dbg !5460
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5460
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 9, !dbg !5461
  %21 = load i32, i32* %index, align 8, !dbg !5461
  %22 = load %struct.edge_def*, %struct.edge_def** %me, align 8, !dbg !5462
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 1, !dbg !5463
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5463
  %index10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !5464
  %24 = load i32, i32* %index10, align 8, !dbg !5464
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.35, i64 0, i64 0), i32 %21, i32 %24), !dbg !5465
  br label %if.end12, !dbg !5465

if.end12:                                         ; preds = %if.then9, %if.end7
  %25 = load %struct.edge_def*, %struct.edge_def** %me, align 8, !dbg !5466
  store %struct.edge_def* %25, %struct.edge_def** %retval, align 8, !dbg !5467
  br label %return, !dbg !5467

return:                                           ; preds = %if.end12, %if.then6
  %26 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !5468
  ret %struct.edge_def* %26, !dbg !5468
}

declare dso_local i32 @current_ir_type() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @find_subloop_latch_edge_by_ivs(%struct.loop* %loop, %struct.VEC_edge_heap* %latches) #0 !dbg !5469 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %latches.addr = alloca %struct.VEC_edge_heap*, align 8
  %e = alloca %struct.edge_def*, align 8
  %latch = alloca %struct.edge_def*, align 8
  %i = alloca i32, align 4
  %phi = alloca %union.gimple_statement_d*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %lop = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5472, metadata !DIExpression()), !dbg !5473
  store %struct.VEC_edge_heap* %latches, %struct.VEC_edge_heap** %latches.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %latches.addr, metadata !5474, metadata !DIExpression()), !dbg !5475
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5476, metadata !DIExpression()), !dbg !5477
  call void @llvm.dbg.declare(metadata %struct.edge_def** %latch, metadata !5478, metadata !DIExpression()), !dbg !5479
  %0 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches.addr, align 8, !dbg !5480
  %tobool = icmp ne %struct.VEC_edge_heap* %0, null, !dbg !5480
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5480

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches.addr, align 8, !dbg !5480
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %1, i32 0, i32 0, !dbg !5480
  br label %cond.end, !dbg !5480

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5480

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5480
  %call = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !5480
  store %struct.edge_def* %call, %struct.edge_def** %latch, align 8, !dbg !5479
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5481, metadata !DIExpression()), !dbg !5482
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !5483, metadata !DIExpression()), !dbg !5484
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !5485, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.declare(metadata %union.tree_node** %lop, metadata !5493, metadata !DIExpression()), !dbg !5494
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5495, metadata !DIExpression()), !dbg !5496
  store i32 1, i32* %i, align 4, !dbg !5497
  br label %for.cond, !dbg !5499

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches.addr, align 8, !dbg !5500
  %tobool1 = icmp ne %struct.VEC_edge_heap* %2, null, !dbg !5500
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !5500

cond.true2:                                       ; preds = %for.cond
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches.addr, align 8, !dbg !5500
  %base3 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %3, i32 0, i32 0, !dbg !5500
  br label %cond.end5, !dbg !5500

cond.false4:                                      ; preds = %for.cond
  br label %cond.end5, !dbg !5500

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !5500
  %4 = load i32, i32* %i, align 4, !dbg !5500
  %call7 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond6, i32 %4, %struct.edge_def** %e), !dbg !5500
  %tobool8 = icmp ne i32 %call7, 0, !dbg !5502
  br i1 %tobool8, label %for.body, label %for.end, !dbg !5502

for.body:                                         ; preds = %cond.end5
  %5 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !5503
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 0, !dbg !5505
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5505
  %7 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5506
  %src9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 0, !dbg !5507
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %src9, align 8, !dbg !5507
  %call10 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %6, %struct.basic_block_def* %8), !dbg !5508
  %tobool11 = icmp ne i8 %call10, 0, !dbg !5508
  br i1 %tobool11, label %if.then, label %if.end, !dbg !5509

if.then:                                          ; preds = %for.body
  %9 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5510
  store %struct.edge_def* %9, %struct.edge_def** %latch, align 8, !dbg !5511
  br label %if.end, !dbg !5512

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5513

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !5514
  %inc = add i32 %10, 1, !dbg !5514
  store i32 %inc, i32* %i, align 4, !dbg !5514
  br label %for.cond, !dbg !5515, !llvm.loop !5516

for.end:                                          ; preds = %cond.end5
  store i32 0, i32* %i, align 4, !dbg !5518
  br label %for.cond12, !dbg !5520

for.cond12:                                       ; preds = %for.inc28, %for.end
  %11 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches.addr, align 8, !dbg !5521
  %tobool13 = icmp ne %struct.VEC_edge_heap* %11, null, !dbg !5521
  br i1 %tobool13, label %cond.true14, label %cond.false16, !dbg !5521

cond.true14:                                      ; preds = %for.cond12
  %12 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches.addr, align 8, !dbg !5521
  %base15 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %12, i32 0, i32 0, !dbg !5521
  br label %cond.end17, !dbg !5521

cond.false16:                                     ; preds = %for.cond12
  br label %cond.end17, !dbg !5521

cond.end17:                                       ; preds = %cond.false16, %cond.true14
  %cond18 = phi %struct.VEC_edge_base* [ %base15, %cond.true14 ], [ null, %cond.false16 ], !dbg !5521
  %13 = load i32, i32* %i, align 4, !dbg !5521
  %call19 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond18, i32 %13, %struct.edge_def** %e), !dbg !5521
  %tobool20 = icmp ne i32 %call19, 0, !dbg !5523
  br i1 %tobool20, label %for.body21, label %for.end30, !dbg !5523

for.body21:                                       ; preds = %cond.end17
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5524
  %src22 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 0, !dbg !5526
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src22, align 8, !dbg !5526
  %16 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !5527
  %src23 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 0, !dbg !5528
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %src23, align 8, !dbg !5528
  %call24 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %15, %struct.basic_block_def* %17), !dbg !5529
  %tobool25 = icmp ne i8 %call24, 0, !dbg !5529
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !5530

if.then26:                                        ; preds = %for.body21
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !5531
  br label %return, !dbg !5531

if.end27:                                         ; preds = %for.body21
  br label %for.inc28, !dbg !5532

for.inc28:                                        ; preds = %if.end27
  %18 = load i32, i32* %i, align 4, !dbg !5533
  %inc29 = add i32 %18, 1, !dbg !5533
  store i32 %inc29, i32* %i, align 4, !dbg !5533
  br label %for.cond12, !dbg !5534, !llvm.loop !5535

for.end30:                                        ; preds = %cond.end17
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5537
  %header = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 2, !dbg !5539
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5539
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %20), !dbg !5540
  %21 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !5540
  %22 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5540
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false), !dbg !5540
  br label %for.cond31, !dbg !5541

for.cond31:                                       ; preds = %for.inc71, %for.end30
  %call32 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !5542
  %tobool33 = icmp ne i8 %call32, 0, !dbg !5544
  %lnot = xor i1 %tobool33, true, !dbg !5544
  br i1 %lnot, label %for.body34, label %for.end72, !dbg !5545

for.body34:                                       ; preds = %for.cond31
  %call35 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !5546
  store %union.gimple_statement_d* %call35, %union.gimple_statement_d** %phi, align 8, !dbg !5548
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5549
  %24 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !5549
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 6, !dbg !5549
  %25 = load i32, i32* %dest_idx, align 4, !dbg !5549
  %call36 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %23, i32 %25), !dbg !5549
  %call37 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call36), !dbg !5549
  store %union.tree_node* %call37, %union.tree_node** %lop, align 8, !dbg !5550
  %26 = load %union.tree_node*, %union.tree_node** %lop, align 8, !dbg !5551
  %base38 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !5551
  %27 = bitcast %struct.tree_base* %base38 to i64*, !dbg !5551
  %bf.load = load i64, i64* %27, align 8, !dbg !5551
  %bf.clear = and i64 %bf.load, 65535, !dbg !5551
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5551
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !5553
  br i1 %cmp, label %if.then40, label %lor.lhs.false, !dbg !5554

lor.lhs.false:                                    ; preds = %for.body34
  %28 = load %union.tree_node*, %union.tree_node** %lop, align 8, !dbg !5555
  %ssa_name = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !5555
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5555
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5555
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5556
  %cmp39 = icmp eq %union.gimple_statement_d* %29, %30, !dbg !5557
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !5558

if.then40:                                        ; preds = %lor.lhs.false, %for.body34
  br label %for.inc71, !dbg !5559

if.end41:                                         ; preds = %lor.lhs.false
  %31 = load %union.tree_node*, %union.tree_node** %lop, align 8, !dbg !5560
  %ssa_name42 = bitcast %union.tree_node* %31 to %struct.tree_ssa_name*, !dbg !5560
  %def_stmt43 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name42, i32 0, i32 2, !dbg !5560
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt43, align 8, !dbg !5560
  %call44 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %32), !dbg !5561
  store %struct.basic_block_def* %call44, %struct.basic_block_def** %bb, align 8, !dbg !5562
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5563
  %tobool45 = icmp ne %struct.basic_block_def* %33, null, !dbg !5563
  br i1 %tobool45, label %lor.lhs.false46, label %if.then49, !dbg !5565

lor.lhs.false46:                                  ; preds = %if.end41
  %34 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5566
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5567
  %call47 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %34, %struct.basic_block_def* %35), !dbg !5568
  %tobool48 = icmp ne i8 %call47, 0, !dbg !5568
  br i1 %tobool48, label %if.end50, label %if.then49, !dbg !5569

if.then49:                                        ; preds = %lor.lhs.false46, %if.end41
  br label %for.inc71, !dbg !5570

if.end50:                                         ; preds = %lor.lhs.false46
  store i32 0, i32* %i, align 4, !dbg !5571
  br label %for.cond51, !dbg !5573

for.cond51:                                       ; preds = %for.inc68, %if.end50
  %36 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches.addr, align 8, !dbg !5574
  %tobool52 = icmp ne %struct.VEC_edge_heap* %36, null, !dbg !5574
  br i1 %tobool52, label %cond.true53, label %cond.false55, !dbg !5574

cond.true53:                                      ; preds = %for.cond51
  %37 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %latches.addr, align 8, !dbg !5574
  %base54 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %37, i32 0, i32 0, !dbg !5574
  br label %cond.end56, !dbg !5574

cond.false55:                                     ; preds = %for.cond51
  br label %cond.end56, !dbg !5574

cond.end56:                                       ; preds = %cond.false55, %cond.true53
  %cond57 = phi %struct.VEC_edge_base* [ %base54, %cond.true53 ], [ null, %cond.false55 ], !dbg !5574
  %38 = load i32, i32* %i, align 4, !dbg !5574
  %call58 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond57, i32 %38, %struct.edge_def** %e), !dbg !5574
  %tobool59 = icmp ne i32 %call58, 0, !dbg !5576
  br i1 %tobool59, label %for.body60, label %for.end70, !dbg !5576

for.body60:                                       ; preds = %cond.end56
  %39 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5577
  %40 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !5579
  %cmp61 = icmp ne %struct.edge_def* %39, %40, !dbg !5580
  br i1 %cmp61, label %land.lhs.true, label %if.end67, !dbg !5581

land.lhs.true:                                    ; preds = %for.body60
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5582
  %42 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5582
  %dest_idx62 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %42, i32 0, i32 6, !dbg !5582
  %43 = load i32, i32* %dest_idx62, align 4, !dbg !5582
  %call63 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %41, i32 %43), !dbg !5582
  %call64 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call63), !dbg !5582
  %44 = load %union.tree_node*, %union.tree_node** %lop, align 8, !dbg !5583
  %cmp65 = icmp eq %union.tree_node* %call64, %44, !dbg !5584
  br i1 %cmp65, label %if.then66, label %if.end67, !dbg !5585

if.then66:                                        ; preds = %land.lhs.true
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !5586
  br label %return, !dbg !5586

if.end67:                                         ; preds = %land.lhs.true, %for.body60
  br label %for.inc68, !dbg !5583

for.inc68:                                        ; preds = %if.end67
  %45 = load i32, i32* %i, align 4, !dbg !5587
  %inc69 = add i32 %45, 1, !dbg !5587
  store i32 %inc69, i32* %i, align 4, !dbg !5587
  br label %for.cond51, !dbg !5588, !llvm.loop !5589

for.end70:                                        ; preds = %cond.end56
  br label %for.inc71, !dbg !5591

for.inc71:                                        ; preds = %for.end70, %if.then49, %if.then40
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !5592
  br label %for.cond31, !dbg !5593, !llvm.loop !5594

for.end72:                                        ; preds = %for.cond31
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5596
  %tobool73 = icmp ne %struct._IO_FILE* %46, null, !dbg !5596
  br i1 %tobool73, label %if.then74, label %if.end78, !dbg !5598

if.then74:                                        ; preds = %for.end72
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5599
  %48 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !5600
  %src75 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %48, i32 0, i32 0, !dbg !5601
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %src75, align 8, !dbg !5601
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 9, !dbg !5602
  %50 = load i32, i32* %index, align 8, !dbg !5602
  %51 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !5603
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 1, !dbg !5604
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5604
  %index76 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 9, !dbg !5605
  %53 = load i32, i32* %index76, align 8, !dbg !5605
  %call77 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.36, i64 0, i64 0), i32 %50, i32 %53), !dbg !5606
  br label %if.end78, !dbg !5606

if.end78:                                         ; preds = %if.then74, %for.end72
  %54 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !5607
  store %struct.edge_def* %54, %struct.edge_def** %retval, align 8, !dbg !5608
  br label %return, !dbg !5608

return:                                           ; preds = %if.end78, %if.then66, %if.then26
  %55 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !5609
  ret %struct.edge_def* %55, !dbg !5609
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5610 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5613, metadata !DIExpression()), !dbg !5614
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5615
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5615
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5616
  %conv = zext i1 %cmp to i32, !dbg !5616
  %conv1 = trunc i32 %conv to i8, !dbg !5617
  ret i8 %conv1, !dbg !5618
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5619 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5622, metadata !DIExpression()), !dbg !5623
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5624
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5624
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5625
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5625
  ret %union.gimple_statement_d* %1, !dbg !5626
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !5627 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !5634, metadata !DIExpression()), !dbg !5635
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5636
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !5637
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5637
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !5638
  ret %union.tree_node* %2, !dbg !5639
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5640 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5643, metadata !DIExpression()), !dbg !5644
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5645, metadata !DIExpression()), !dbg !5646
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5647
  %1 = load i32, i32* %i.addr, align 4, !dbg !5648
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !5649
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !5650
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !5651
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !5652 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5658, metadata !DIExpression()), !dbg !5659
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5660
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5661
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !5662
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5662
  ret %struct.basic_block_def* %1, !dbg !5663
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5664 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5668, metadata !DIExpression()), !dbg !5669
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5670
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5671
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5671
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5672
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5672
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5673
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5674
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5675
  ret void, !dbg !5676
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !5677 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5681, metadata !DIExpression()), !dbg !5682
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5683, metadata !DIExpression()), !dbg !5684
  %0 = load i32, i32* %index.addr, align 4, !dbg !5685
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5685
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !5685
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !5685
  %2 = load i32, i32* %capacity, align 8, !dbg !5685
  %cmp = icmp ule i32 %0, %2, !dbg !5685
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5685

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.37, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5685
  br label %cond.end, !dbg !5685

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5685

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5685
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5686
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !5687
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !5688
  %4 = load i32, i32* %index.addr, align 4, !dbg !5689
  %idxprom = zext i32 %4 to i64, !dbg !5686
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !5686
  ret %struct.phi_arg_d* %arrayidx, !dbg !5690
}

declare dso_local %struct.pointer_set_t* @pointer_set_create() #2

declare dso_local i32 @pointer_set_insert(%struct.pointer_set_t*, i8*) #2

declare dso_local %struct.edge_def* @make_forwarder_block(%struct.basic_block_def*, i8 (%struct.edge_def*)*, void (%struct.basic_block_def*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @mfb_redirect_edges_in_set(%struct.edge_def* %e) #0 !dbg !5691 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !5694, metadata !DIExpression()), !dbg !5695
  %0 = load %struct.pointer_set_t*, %struct.pointer_set_t** @mfb_reis_set, align 8, !dbg !5696
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5697
  %2 = bitcast %struct.edge_def* %1 to i8*, !dbg !5697
  %call = call i32 @pointer_set_contains(%struct.pointer_set_t* %0, i8* %2), !dbg !5698
  %conv = trunc i32 %call to i8, !dbg !5698
  ret i8 %conv, !dbg !5699
}

declare dso_local void @pointer_set_destroy(%struct.pointer_set_t*) #2

declare dso_local void @add_loop(%struct.loop*, %struct.loop*) #2

declare dso_local i32 @pointer_set_contains(%struct.pointer_set_t*, i8*) #2

declare dso_local %struct.basic_block_def* @first_dom_son(i32, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @next_dom_son(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_heap_reserve(%struct.VEC_edge_heap** %vec_, i32 %alloc_) #0 !dbg !5700 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !5703, metadata !DIExpression()), !dbg !5704
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5705, metadata !DIExpression()), !dbg !5704
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5706, metadata !DIExpression()), !dbg !5704
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !5704
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !5704
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !5704
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5704

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !5704
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !5704
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %3, i32 0, i32 0, !dbg !5704
  br label %cond.end, !dbg !5704

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5704

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5704
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5704
  %call = call i32 @VEC_edge_base_space(%struct.VEC_edge_base* %cond, i32 %4), !dbg !5704
  %tobool1 = icmp ne i32 %call, 0, !dbg !5704
  %lnot = xor i1 %tobool1, true, !dbg !5704
  %lnot.ext = zext i1 %lnot to i32, !dbg !5704
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5704
  %5 = load i32, i32* %extend, align 4, !dbg !5707
  %tobool2 = icmp ne i32 %5, 0, !dbg !5707
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5704

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !5707
  %7 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %6, align 8, !dbg !5707
  %8 = bitcast %struct.VEC_edge_heap* %7 to i8*, !dbg !5707
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5707
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5707
  %10 = bitcast i8* %call3 to %struct.VEC_edge_heap*, !dbg !5707
  %11 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !5707
  store %struct.VEC_edge_heap* %10, %struct.VEC_edge_heap** %11, align 8, !dbg !5707
  br label %if.end, !dbg !5707

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5704
  ret i32 %12, !dbg !5704
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def** @VEC_edge_base_quick_push(%struct.VEC_edge_base* %vec_, %struct.edge_def* %obj_) #0 !dbg !5709 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %obj_.addr = alloca %struct.edge_def*, align 8
  %slot_ = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5713, metadata !DIExpression()), !dbg !5714
  store %struct.edge_def* %obj_, %struct.edge_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %obj_.addr, metadata !5715, metadata !DIExpression()), !dbg !5714
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %slot_, metadata !5716, metadata !DIExpression()), !dbg !5714
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5714
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %0, i32 0, i32 0, !dbg !5714
  %1 = load i32, i32* %num, align 8, !dbg !5714
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5714
  %alloc = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 1, !dbg !5714
  %3 = load i32, i32* %alloc, align 4, !dbg !5714
  %cmp = icmp ult i32 %1, %3, !dbg !5714
  %conv = zext i1 %cmp to i32, !dbg !5714
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5714
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !5714
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5714
  %num1 = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 0, !dbg !5714
  %6 = load i32, i32* %num1, align 8, !dbg !5714
  %inc = add i32 %6, 1, !dbg !5714
  store i32 %inc, i32* %num1, align 8, !dbg !5714
  %idxprom = zext i32 %6 to i64, !dbg !5714
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !5714
  store %struct.edge_def** %arrayidx, %struct.edge_def*** %slot_, align 8, !dbg !5714
  %7 = load %struct.edge_def*, %struct.edge_def** %obj_.addr, align 8, !dbg !5714
  %8 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !5714
  store %struct.edge_def* %7, %struct.edge_def** %8, align 8, !dbg !5714
  %9 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !5714
  ret %struct.edge_def** %9, !dbg !5714
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_space(%struct.VEC_edge_base* %vec_, i32 %alloc_) #0 !dbg !5717 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5720, metadata !DIExpression()), !dbg !5721
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5722, metadata !DIExpression()), !dbg !5721
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5721
  %cmp = icmp sge i32 %0, 0, !dbg !5721
  %conv = zext i1 %cmp to i32, !dbg !5721
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5721
  %tobool = icmp ne %struct.VEC_edge_base* %1, null, !dbg !5721
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5721

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5721
  %alloc = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 1, !dbg !5721
  %3 = load i32, i32* %alloc, align 4, !dbg !5721
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5721
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 0, !dbg !5721
  %5 = load i32, i32* %num, align 8, !dbg !5721
  %sub = sub i32 %3, %5, !dbg !5721
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5721
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5721
  %conv2 = zext i1 %cmp1 to i32, !dbg !5721
  br label %cond.end, !dbg !5721

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5721
  %tobool3 = icmp ne i32 %7, 0, !dbg !5721
  %lnot = xor i1 %tobool3, true, !dbg !5721
  %lnot.ext = zext i1 %lnot to i32, !dbg !5721
  br label %cond.end, !dbg !5721

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5721
  ret i32 %cond, !dbg !5721
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !5723 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5726, metadata !DIExpression()), !dbg !5727
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5728
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !5728
  %tobool = icmp ne i8 %call, 0, !dbg !5728
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5728

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5728
  br label %cond.end, !dbg !5728

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5728

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5728
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5729
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !5729
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5729
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !5729
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !5729

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5729
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !5729
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !5729
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !5729
  br label %cond.end5, !dbg !5729

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5729

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !5729
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !5729
  ret %struct.edge_def* %call7, !dbg !5730
}

declare dso_local i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!1910, !1911, !1912}
!llvm.ident = !{!1913}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "mfb_reis_set", scope: !2, file: !3, line: 644, type: !1908, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !434, globals: !1907, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "cfgloop.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !150, !169, !176, !183, !377, !386, !390, !395, !399, !409, !414, !428}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !146, line: 474, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149}
!148 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !151, line: 280, baseType: !7, size: 32, elements: !152)
!151 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!152 = !{!153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168}
!153 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!154 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!155 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!156 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!157 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!158 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!159 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!160 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!169 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !151, line: 1817, baseType: !7, size: 32, elements: !170)
!170 = !{!171, !172, !173, !174, !175}
!171 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!176 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !151, line: 1805, baseType: !7, size: 32, elements: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !151, line: 39, baseType: !7, size: 32, elements: !184)
!184 = !{!185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376}
!185 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!186 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!189 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!190 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!191 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!192 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!193 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!194 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!195 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!196 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!197 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!198 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!199 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!200 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!201 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!202 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!203 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!204 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!205 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!206 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!207 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!208 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!209 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!210 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!213 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!214 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!215 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!216 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!217 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!218 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!219 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!220 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!221 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!222 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!223 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!224 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!225 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!226 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!228 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!229 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!230 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!231 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!232 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!233 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!234 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!235 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!236 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!237 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!238 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!239 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!240 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!241 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!242 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!243 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!244 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!245 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!246 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!247 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!248 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!249 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!250 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!251 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!252 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!253 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!254 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!255 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!256 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!257 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!258 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!259 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!260 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!261 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!262 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!263 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!264 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!265 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!266 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!267 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!268 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!269 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!270 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!271 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!272 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!273 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!274 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!275 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!277 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!278 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!279 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!280 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!281 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!282 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!283 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!284 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!285 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!286 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!287 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!288 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!289 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!290 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!291 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!292 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!293 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!294 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!295 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!296 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!297 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!298 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!299 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!300 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!301 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!302 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!303 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!304 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!305 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!306 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!307 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!308 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!309 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!310 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!311 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!312 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!313 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!314 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!315 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!316 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!317 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!318 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!319 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!320 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!321 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!322 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!323 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!324 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!325 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!326 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!327 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!328 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!329 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!330 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!331 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!332 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!333 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!334 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!335 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!336 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!337 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!338 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!349 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!350 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!351 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!352 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!353 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!354 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!355 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!356 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!357 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!358 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!359 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!360 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!361 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!370 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!371 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!372 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!373 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!374 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!375 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!376 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !378, line: 31, baseType: !7, size: 32, elements: !379)
!378 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!379 = !{!380, !381, !382, !383, !384, !385}
!380 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!381 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!382 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!383 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!384 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!385 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!386 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !378, line: 91, baseType: !7, size: 32, elements: !387)
!387 = !{!388, !389}
!388 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!389 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !378, line: 498, baseType: !7, size: 32, elements: !391)
!391 = !{!392, !393, !394}
!392 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!393 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!394 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!395 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !135, line: 912, baseType: !7, size: 32, elements: !396)
!396 = !{!397, !398}
!397 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!398 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!399 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !378, line: 170, baseType: !7, size: 32, elements: !400)
!400 = !{!401, !402, !403, !404, !405, !406, !407, !408}
!401 = !DIEnumerator(name: "LOOPS_HAVE_PREHEADERS", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "LOOPS_HAVE_SIMPLE_LATCHES", value: 2, isUnsigned: true)
!403 = !DIEnumerator(name: "LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS", value: 4, isUnsigned: true)
!404 = !DIEnumerator(name: "LOOPS_HAVE_RECORDED_EXITS", value: 8, isUnsigned: true)
!405 = !DIEnumerator(name: "LOOPS_MAY_HAVE_MULTIPLE_LATCHES", value: 16, isUnsigned: true)
!406 = !DIEnumerator(name: "LOOP_CLOSED_SSA", value: 32, isUnsigned: true)
!407 = !DIEnumerator(name: "LOOPS_NEED_FIXUP", value: 64, isUnsigned: true)
!408 = !DIEnumerator(name: "LOOPS_HAVE_FALLTHRU_PREHEADERS", value: 128, isUnsigned: true)
!409 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !410, line: 147, baseType: !7, size: 32, elements: !411)
!410 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!411 = !{!412, !413}
!412 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!413 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!414 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !135, line: 295, baseType: !7, size: 32, elements: !415)
!415 = !{!416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427}
!416 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!417 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!418 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!419 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!420 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!421 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!422 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!423 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!424 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!425 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!426 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!427 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!428 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ir_type", file: !429, line: 80, baseType: !7, size: 32, elements: !430)
!429 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!430 = !{!431, !432, !433}
!431 = !DIEnumerator(name: "IR_GIMPLE", value: 0, isUnsigned: true)
!432 = !DIEnumerator(name: "IR_RTL_CFGRTL", value: 1, isUnsigned: true)
!433 = !DIEnumerator(name: "IR_RTL_CFGLAYOUT", value: 2, isUnsigned: true)
!434 = !{!435, !436, !1817, !505, !782, !1826, !7, !1827, !440, !1097, !1828, !459, !1829, !1162, !1842, !1150, !558, !183, !1847, !1849, !1851, !1902}
!435 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !437, size: 64)
!437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !378, line: 100, size: 1216, elements: !438)
!438 = !{!439, !441, !442, !1790, !1791, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1816, !1824, !1825}
!439 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !437, file: !378, line: 102, baseType: !440, size: 32)
!440 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !437, file: !378, line: 105, baseType: !7, size: 32, offset: 32)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !437, file: !378, line: 108, baseType: !443, size: 64, offset: 64)
!443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !444, size: 64)
!444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !445)
!445 = !{!446, !1757, !1758, !1759, !1760, !1764, !1765, !1766, !1784, !1785, !1786, !1787, !1788, !1789}
!446 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !444, file: !135, line: 219, baseType: !447, size: 64)
!447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !448, size: 64)
!448 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !449)
!449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !450)
!450 = !{!451}
!451 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !449, file: !135, line: 151, baseType: !452, size: 128)
!452 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !453)
!453 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !454)
!454 = !{!455, !456, !457}
!455 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !453, file: !135, line: 150, baseType: !7, size: 32)
!456 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !453, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!457 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !453, file: !135, line: 150, baseType: !458, size: 64, offset: 64)
!458 = !DICompositeType(tag: DW_TAG_array_type, baseType: !459, size: 64, elements: !603)
!459 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !429, line: 108, baseType: !460)
!460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !461, size: 64)
!461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !462)
!462 = !{!463, !464, !465, !1749, !1750, !1751, !1752, !1753, !1754, !1755}
!463 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !461, file: !135, line: 124, baseType: !443, size: 64)
!464 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !461, file: !135, line: 125, baseType: !443, size: 64, offset: 64)
!465 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !461, file: !135, line: 131, baseType: !466, size: 64, offset: 128)
!466 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !467)
!467 = !{!468, !1748}
!468 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !466, file: !135, line: 129, baseType: !469, size: 64)
!469 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !429, line: 66, baseType: !470)
!470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !471, size: 64)
!471 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !472, line: 143, size: 192, elements: !473)
!472 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!473 = !{!474, !1746, !1747}
!474 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !471, file: !472, line: 145, baseType: !475, size: 64)
!475 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !429, line: 69, baseType: !476)
!476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !477, size: 64)
!477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !472, line: 136, size: 192, elements: !478)
!478 = !{!479, !1744, !1745}
!479 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !477, file: !472, line: 137, baseType: !480, size: 64)
!480 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !429, line: 58, baseType: !481)
!481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !482, size: 64)
!482 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !472, line: 737, size: 768, elements: !483)
!483 = !{!484, !1591, !1601, !1607, !1612, !1617, !1624, !1630, !1636, !1641, !1655, !1660, !1666, !1671, !1681, !1686, !1702, !1709, !1716, !1722, !1727, !1733, !1739}
!484 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !482, file: !472, line: 738, baseType: !485, size: 256)
!485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !472, line: 271, size: 256, elements: !486)
!486 = !{!487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !502, !503, !504}
!487 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !485, file: !472, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !485, file: !472, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!489 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !485, file: !472, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !485, file: !472, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!491 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !485, file: !472, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!492 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !485, file: !472, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!493 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !485, file: !472, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!494 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !485, file: !472, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!495 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !485, file: !472, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!496 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !485, file: !472, line: 312, baseType: !7, size: 32, offset: 32)
!497 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !485, file: !472, line: 316, baseType: !498, size: 32, offset: 64)
!498 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !499, line: 58, baseType: !500)
!499 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!500 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !501, line: 44, baseType: !7)
!501 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!502 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !485, file: !472, line: 319, baseType: !7, size: 32, offset: 96)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !485, file: !472, line: 323, baseType: !443, size: 64, offset: 128)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !485, file: !472, line: 327, baseType: !505, size: 64, offset: 192)
!505 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !429, line: 56, baseType: !506)
!506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !507, size: 64)
!507 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !151, line: 3371, size: 1792, elements: !508)
!508 = !{!509, !542, !548, !560, !579, !590, !595, !605, !611, !625, !633, !671, !883, !911, !928, !929, !934, !943, !949, !954, !958, !962, !1242, !1289, !1295, !1301, !1308, !1321, !1335, !1352, !1364, !1386, !1401, !1573}
!509 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !507, file: !151, line: 3372, baseType: !510, size: 64)
!510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !151, line: 360, size: 64, elements: !511)
!511 = !{!512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541}
!512 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !510, file: !151, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !510, file: !151, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !510, file: !151, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!515 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !510, file: !151, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!516 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !510, file: !151, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!517 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !510, file: !151, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!518 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !510, file: !151, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!519 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !510, file: !151, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !510, file: !151, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!521 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !510, file: !151, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!522 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !510, file: !151, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!523 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !510, file: !151, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!524 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !510, file: !151, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!525 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !510, file: !151, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!526 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !510, file: !151, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!527 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !510, file: !151, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!528 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !510, file: !151, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!529 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !510, file: !151, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!530 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !510, file: !151, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!531 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !510, file: !151, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!532 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !510, file: !151, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!533 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !510, file: !151, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!534 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !510, file: !151, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!535 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !510, file: !151, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!536 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !510, file: !151, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !510, file: !151, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !510, file: !151, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !510, file: !151, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!540 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !510, file: !151, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!541 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !510, file: !151, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!542 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !507, file: !151, line: 3373, baseType: !543, size: 192)
!543 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !151, line: 402, size: 192, elements: !544)
!544 = !{!545, !546, !547}
!545 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !543, file: !151, line: 403, baseType: !510, size: 64)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !543, file: !151, line: 404, baseType: !505, size: 64, offset: 64)
!547 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !543, file: !151, line: 405, baseType: !505, size: 64, offset: 128)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !507, file: !151, line: 3374, baseType: !549, size: 320)
!549 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !151, line: 1384, size: 320, elements: !550)
!550 = !{!551, !552}
!551 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !549, file: !151, line: 1385, baseType: !543, size: 192)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !549, file: !151, line: 1386, baseType: !553, size: 128, offset: 192)
!553 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !554, line: 58, baseType: !555)
!554 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!555 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !554, line: 54, size: 128, elements: !556)
!556 = !{!557, !559}
!557 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !555, file: !554, line: 56, baseType: !558, size: 64)
!558 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!559 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !555, file: !554, line: 57, baseType: !435, size: 64, offset: 64)
!560 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !507, file: !151, line: 3375, baseType: !561, size: 256)
!561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !151, line: 1397, size: 256, elements: !562)
!562 = !{!563, !564}
!563 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !561, file: !151, line: 1398, baseType: !543, size: 192)
!564 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !561, file: !151, line: 1399, baseType: !565, size: 64, offset: 192)
!565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !566, size: 64)
!566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !567, line: 52, size: 256, elements: !568)
!567 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!568 = !{!569, !570, !571, !572, !573, !574, !575}
!569 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !566, file: !567, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!570 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !566, file: !567, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!571 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !566, file: !567, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!572 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !566, file: !567, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !566, file: !567, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !566, file: !567, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!575 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !566, file: !567, line: 62, baseType: !576, size: 192, offset: 64)
!576 = !DICompositeType(tag: DW_TAG_array_type, baseType: !558, size: 192, elements: !577)
!577 = !{!578}
!578 = !DISubrange(count: 3)
!579 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !507, file: !151, line: 3376, baseType: !580, size: 256)
!580 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !151, line: 1408, size: 256, elements: !581)
!581 = !{!582, !583}
!582 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !580, file: !151, line: 1409, baseType: !543, size: 192)
!583 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !580, file: !151, line: 1410, baseType: !584, size: 64, offset: 192)
!584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !585, size: 64)
!585 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !586, line: 27, size: 192, elements: !587)
!586 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!587 = !{!588, !589}
!588 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !585, file: !586, line: 29, baseType: !553, size: 128)
!589 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !585, file: !586, line: 30, baseType: !5, size: 32, offset: 128)
!590 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !507, file: !151, line: 3377, baseType: !591, size: 256)
!591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !151, line: 1437, size: 256, elements: !592)
!592 = !{!593, !594}
!593 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !591, file: !151, line: 1438, baseType: !543, size: 192)
!594 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !591, file: !151, line: 1439, baseType: !505, size: 64, offset: 192)
!595 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !507, file: !151, line: 3378, baseType: !596, size: 256)
!596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !151, line: 1418, size: 256, elements: !597)
!597 = !{!598, !599, !600}
!598 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !596, file: !151, line: 1419, baseType: !543, size: 192)
!599 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !596, file: !151, line: 1420, baseType: !440, size: 32, offset: 192)
!600 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !596, file: !151, line: 1421, baseType: !601, size: 8, offset: 224)
!601 = !DICompositeType(tag: DW_TAG_array_type, baseType: !602, size: 8, elements: !603)
!602 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!603 = !{!604}
!604 = !DISubrange(count: 1)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !507, file: !151, line: 3379, baseType: !606, size: 320)
!606 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !151, line: 1428, size: 320, elements: !607)
!607 = !{!608, !609, !610}
!608 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !606, file: !151, line: 1429, baseType: !543, size: 192)
!609 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !606, file: !151, line: 1430, baseType: !505, size: 64, offset: 192)
!610 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !606, file: !151, line: 1431, baseType: !505, size: 64, offset: 256)
!611 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !507, file: !151, line: 3380, baseType: !612, size: 320)
!612 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !151, line: 1460, size: 320, elements: !613)
!613 = !{!614, !615}
!614 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !612, file: !151, line: 1461, baseType: !543, size: 192)
!615 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !612, file: !151, line: 1462, baseType: !616, size: 128, offset: 192)
!616 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !617, line: 31, size: 128, elements: !618)
!617 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!618 = !{!619, !623, !624}
!619 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !616, file: !617, line: 32, baseType: !620, size: 64)
!620 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !621, size: 64)
!621 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !622)
!622 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!623 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !616, file: !617, line: 33, baseType: !7, size: 32, offset: 64)
!624 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !616, file: !617, line: 34, baseType: !7, size: 32, offset: 96)
!625 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !507, file: !151, line: 3381, baseType: !626, size: 384)
!626 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !151, line: 2507, size: 384, elements: !627)
!627 = !{!628, !629, !630, !631, !632}
!628 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !626, file: !151, line: 2508, baseType: !543, size: 192)
!629 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !626, file: !151, line: 2509, baseType: !498, size: 32, offset: 192)
!630 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !626, file: !151, line: 2510, baseType: !7, size: 32, offset: 224)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !626, file: !151, line: 2511, baseType: !505, size: 64, offset: 256)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !626, file: !151, line: 2512, baseType: !505, size: 64, offset: 320)
!633 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !507, file: !151, line: 3382, baseType: !634, size: 896)
!634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !151, line: 2652, size: 896, elements: !635)
!635 = !{!636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668}
!636 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !634, file: !151, line: 2653, baseType: !626, size: 384)
!637 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !634, file: !151, line: 2654, baseType: !505, size: 64, offset: 384)
!638 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !634, file: !151, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!639 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !634, file: !151, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!640 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !634, file: !151, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!641 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !634, file: !151, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!642 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !634, file: !151, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!643 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !634, file: !151, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!644 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !634, file: !151, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!645 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !634, file: !151, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !634, file: !151, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!647 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !634, file: !151, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!648 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !634, file: !151, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!649 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !634, file: !151, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!650 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !634, file: !151, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!651 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !634, file: !151, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!652 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !634, file: !151, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!653 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !634, file: !151, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!654 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !634, file: !151, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!655 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !634, file: !151, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!656 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !634, file: !151, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!657 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !634, file: !151, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!658 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !634, file: !151, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!659 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !634, file: !151, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!660 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !634, file: !151, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!661 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !634, file: !151, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!662 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !634, file: !151, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !634, file: !151, line: 2703, baseType: !7, size: 32, offset: 512)
!664 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !634, file: !151, line: 2705, baseType: !505, size: 64, offset: 576)
!665 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !634, file: !151, line: 2706, baseType: !505, size: 64, offset: 640)
!666 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !634, file: !151, line: 2707, baseType: !505, size: 64, offset: 704)
!667 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !634, file: !151, line: 2708, baseType: !505, size: 64, offset: 768)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !634, file: !151, line: 2711, baseType: !669, size: 64, offset: 832)
!669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !670, size: 64)
!670 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !151, line: 2711, flags: DIFlagFwdDecl)
!671 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !507, file: !151, line: 3383, baseType: !672, size: 960)
!672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !151, line: 2756, size: 960, elements: !673)
!673 = !{!674, !675}
!674 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !672, file: !151, line: 2757, baseType: !634, size: 896)
!675 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !672, file: !151, line: 2758, baseType: !676, size: 64, offset: 896)
!676 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !429, line: 50, baseType: !677)
!677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !678, size: 64)
!678 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !679, line: 240, size: 384, elements: !680)
!679 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!680 = !{!681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691}
!681 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !678, file: !679, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!682 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !678, file: !679, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!683 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !678, file: !679, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !678, file: !679, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!685 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !678, file: !679, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !678, file: !679, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !678, file: !679, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!688 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !678, file: !679, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!689 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !678, file: !679, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!690 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !678, file: !679, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!691 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !678, file: !679, line: 321, baseType: !692, size: 320, offset: 64)
!692 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !679, line: 315, size: 320, elements: !693)
!693 = !{!694, !816, !818, !881, !882}
!694 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !692, file: !679, line: 316, baseType: !695, size: 64)
!695 = !DICompositeType(tag: DW_TAG_array_type, baseType: !696, size: 64, elements: !603)
!696 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !679, line: 183, baseType: !697)
!697 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !679, line: 166, size: 64, elements: !698)
!698 = !{!699, !700, !701, !704, !705, !713, !714, !726, !729, !791, !792, !793, !806, !813}
!699 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !697, file: !679, line: 168, baseType: !440, size: 32)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !697, file: !679, line: 169, baseType: !7, size: 32)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !697, file: !679, line: 170, baseType: !702, size: 64)
!702 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !703, size: 64)
!703 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !602)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !697, file: !679, line: 171, baseType: !676, size: 64)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !697, file: !679, line: 172, baseType: !706, size: 64)
!706 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !429, line: 53, baseType: !707)
!707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !708, size: 64)
!708 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !679, line: 359, size: 128, elements: !709)
!709 = !{!710, !711}
!710 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !708, file: !679, line: 360, baseType: !440, size: 32)
!711 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !708, file: !679, line: 361, baseType: !712, size: 64, offset: 64)
!712 = !DICompositeType(tag: DW_TAG_array_type, baseType: !676, size: 64, elements: !603)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !697, file: !679, line: 173, baseType: !5, size: 32)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !697, file: !679, line: 174, baseType: !715, size: 32)
!715 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !679, line: 133, baseType: !716)
!716 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !679, line: 115, size: 32, elements: !717)
!717 = !{!718, !719, !720, !721, !722, !723, !724, !725}
!718 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !716, file: !679, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !716, file: !679, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !716, file: !679, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!721 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !716, file: !679, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !716, file: !679, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !716, file: !679, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !716, file: !679, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !716, file: !679, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !697, file: !679, line: 175, baseType: !727, size: 64)
!727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !728, size: 64)
!728 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !679, line: 175, flags: DIFlagFwdDecl)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !697, file: !679, line: 176, baseType: !730, size: 64)
!730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !731, size: 64)
!731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !732, line: 75, size: 256, elements: !733)
!732 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!733 = !{!734, !748, !749, !750}
!734 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !731, file: !732, line: 76, baseType: !735, size: 64)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !736, size: 64)
!736 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !732, line: 68, baseType: !737)
!737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !732, line: 63, size: 320, elements: !738)
!738 = !{!739, !741, !742, !743}
!739 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !737, file: !732, line: 64, baseType: !740, size: 64)
!740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !737, size: 64)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !737, file: !732, line: 65, baseType: !740, size: 64, offset: 64)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !737, file: !732, line: 66, baseType: !7, size: 32, offset: 128)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !737, file: !732, line: 67, baseType: !744, size: 128, offset: 192)
!744 = !DICompositeType(tag: DW_TAG_array_type, baseType: !745, size: 128, elements: !746)
!745 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !732, line: 29, baseType: !558)
!746 = !{!747}
!747 = !DISubrange(count: 2)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !731, file: !732, line: 77, baseType: !735, size: 64, offset: 64)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !731, file: !732, line: 78, baseType: !7, size: 32, offset: 128)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !731, file: !732, line: 79, baseType: !751, size: 64, offset: 192)
!751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !752, size: 64)
!752 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !732, line: 49, baseType: !753)
!753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !732, line: 45, size: 832, elements: !754)
!754 = !{!755, !756, !757}
!755 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !753, file: !732, line: 46, baseType: !740, size: 64)
!756 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !753, file: !732, line: 47, baseType: !730, size: 64, offset: 64)
!757 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !753, file: !732, line: 48, baseType: !758, size: 704, offset: 128)
!758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !759, line: 164, size: 704, elements: !760)
!759 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!760 = !{!761, !762, !773, !774, !775, !776, !777, !778, !783, !787, !788, !789, !790}
!761 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !758, file: !759, line: 166, baseType: !435, size: 64)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !758, file: !759, line: 167, baseType: !763, size: 64, offset: 64)
!763 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !764, size: 64)
!764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !759, line: 157, size: 192, elements: !765)
!765 = !{!766, !768, !769}
!766 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !764, file: !759, line: 159, baseType: !767, size: 64)
!767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !602, size: 64)
!768 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !764, file: !759, line: 160, baseType: !763, size: 64, offset: 64)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !764, file: !759, line: 161, baseType: !770, size: 32, offset: 128)
!770 = !DICompositeType(tag: DW_TAG_array_type, baseType: !602, size: 32, elements: !771)
!771 = !{!772}
!772 = !DISubrange(count: 4)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !758, file: !759, line: 168, baseType: !767, size: 64, offset: 128)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !758, file: !759, line: 169, baseType: !767, size: 64, offset: 192)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !758, file: !759, line: 170, baseType: !767, size: 64, offset: 256)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !758, file: !759, line: 171, baseType: !435, size: 64, offset: 320)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !758, file: !759, line: 172, baseType: !440, size: 32, offset: 384)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !758, file: !759, line: 176, baseType: !779, size: 64, offset: 448)
!779 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !780, size: 64)
!780 = !DISubroutineType(types: !781)
!781 = !{!763, !782, !435}
!782 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!783 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !758, file: !759, line: 177, baseType: !784, size: 64, offset: 512)
!784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !785, size: 64)
!785 = !DISubroutineType(types: !786)
!786 = !{null, !782, !763}
!787 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !758, file: !759, line: 178, baseType: !782, size: 64, offset: 576)
!788 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !758, file: !759, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !758, file: !759, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !758, file: !759, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !697, file: !679, line: 177, baseType: !505, size: 64)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !697, file: !679, line: 178, baseType: !443, size: 64)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !697, file: !679, line: 179, baseType: !794, size: 64)
!794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !795, size: 64)
!795 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !679, line: 150, baseType: !796)
!796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !679, line: 142, size: 320, elements: !797)
!797 = !{!798, !799, !800, !801, !804, !805}
!798 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !796, file: !679, line: 144, baseType: !505, size: 64)
!799 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !796, file: !679, line: 145, baseType: !676, size: 64, offset: 64)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !796, file: !679, line: 146, baseType: !676, size: 64, offset: 128)
!801 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !796, file: !679, line: 147, baseType: !802, size: 32, offset: 192)
!802 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !803, line: 31, baseType: !440)
!803 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!804 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !796, file: !679, line: 148, baseType: !7, size: 32, offset: 224)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !796, file: !679, line: 149, baseType: !622, size: 8, offset: 256)
!806 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !697, file: !679, line: 180, baseType: !807, size: 64)
!807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !808, size: 64)
!808 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !679, line: 162, baseType: !809)
!809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !679, line: 159, size: 128, elements: !810)
!810 = !{!811, !812}
!811 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !809, file: !679, line: 160, baseType: !505, size: 64)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !809, file: !679, line: 161, baseType: !435, size: 64, offset: 64)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !697, file: !679, line: 181, baseType: !814, size: 64)
!814 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !815, size: 64)
!815 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !679, line: 181, flags: DIFlagFwdDecl)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !692, file: !679, line: 317, baseType: !817, size: 64)
!817 = !DICompositeType(tag: DW_TAG_array_type, baseType: !435, size: 64, elements: !603)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !692, file: !679, line: 318, baseType: !819, size: 320)
!819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !679, line: 188, size: 320, elements: !820)
!820 = !{!821, !823, !880}
!821 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !819, file: !679, line: 190, baseType: !822, size: 192)
!822 = !DICompositeType(tag: DW_TAG_array_type, baseType: !696, size: 192, elements: !577)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !819, file: !679, line: 193, baseType: !824, size: 64, offset: 192)
!824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !825, size: 64)
!825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !679, line: 206, size: 320, elements: !826)
!826 = !{!827, !865, !866, !867, !879}
!827 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !825, file: !679, line: 208, baseType: !828, size: 64)
!828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !829, size: 64)
!829 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !429, line: 62, baseType: !830)
!830 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !831, line: 538, size: 256, elements: !832)
!831 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!832 = !{!833, !837, !843, !856}
!833 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !830, file: !831, line: 539, baseType: !834, size: 32)
!834 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !831, line: 482, size: 32, elements: !835)
!835 = !{!836}
!836 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !834, file: !831, line: 484, baseType: !7, size: 32)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !830, file: !831, line: 540, baseType: !838, size: 192)
!838 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !831, line: 488, size: 192, elements: !839)
!839 = !{!840, !841, !842}
!840 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !838, file: !831, line: 489, baseType: !834, size: 32)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !838, file: !831, line: 492, baseType: !702, size: 64, offset: 64)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !838, file: !831, line: 496, baseType: !505, size: 64, offset: 128)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !830, file: !831, line: 541, baseType: !844, size: 256)
!844 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !831, line: 504, size: 256, elements: !845)
!845 = !{!846, !847, !854, !855}
!846 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !844, file: !831, line: 505, baseType: !834, size: 32)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !844, file: !831, line: 509, baseType: !848, size: 64, offset: 64)
!848 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !831, line: 501, baseType: !849)
!849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !850, size: 64)
!850 = !DISubroutineType(types: !851)
!851 = !{null, !852}
!852 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !853, size: 64)
!853 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !844, file: !831, line: 510, baseType: !852, size: 64, offset: 128)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !844, file: !831, line: 513, baseType: !828, size: 64, offset: 192)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !830, file: !831, line: 542, baseType: !857, size: 128)
!857 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !831, line: 530, size: 128, elements: !858)
!858 = !{!859, !860}
!859 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !857, file: !831, line: 531, baseType: !834, size: 32)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !857, file: !831, line: 534, baseType: !861, size: 64, offset: 64)
!861 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !831, line: 525, baseType: !862)
!862 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !863, size: 64)
!863 = !DISubroutineType(types: !864)
!864 = !{!622, !505, !702, !558, !558}
!865 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !825, file: !679, line: 211, baseType: !7, size: 32, offset: 64)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !825, file: !679, line: 214, baseType: !435, size: 64, offset: 128)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !825, file: !679, line: 224, baseType: !868, size: 64, offset: 192)
!868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !869, size: 64)
!869 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !679, line: 202, baseType: !870)
!870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !679, line: 202, size: 128, elements: !871)
!871 = !{!872}
!872 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !870, file: !679, line: 202, baseType: !873, size: 128)
!873 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !679, line: 200, baseType: !874)
!874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !679, line: 200, size: 128, elements: !875)
!875 = !{!876, !877, !878}
!876 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !874, file: !679, line: 200, baseType: !7, size: 32)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !874, file: !679, line: 200, baseType: !7, size: 32, offset: 32)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !874, file: !679, line: 200, baseType: !712, size: 64, offset: 64)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !825, file: !679, line: 234, baseType: !868, size: 64, offset: 256)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !819, file: !679, line: 197, baseType: !435, size: 64, offset: 256)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !692, file: !679, line: 319, baseType: !566, size: 256)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !692, file: !679, line: 320, baseType: !585, size: 192)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !507, file: !151, line: 3384, baseType: !884, size: 1472)
!884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !151, line: 3114, size: 1472, elements: !885)
!885 = !{!886, !907, !908, !909, !910}
!886 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !884, file: !151, line: 3115, baseType: !887, size: 1216)
!887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !151, line: 2984, size: 1216, elements: !888)
!888 = !{!889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906}
!889 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !887, file: !151, line: 2985, baseType: !672, size: 960)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !887, file: !151, line: 2986, baseType: !505, size: 64, offset: 960)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !887, file: !151, line: 2987, baseType: !505, size: 64, offset: 1024)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !887, file: !151, line: 2988, baseType: !505, size: 64, offset: 1088)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !887, file: !151, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !887, file: !151, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !887, file: !151, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !887, file: !151, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !887, file: !151, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !887, file: !151, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !887, file: !151, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !887, file: !151, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !887, file: !151, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !887, file: !151, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !887, file: !151, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !887, file: !151, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !887, file: !151, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !887, file: !151, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !884, file: !151, line: 3117, baseType: !505, size: 64, offset: 1216)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !884, file: !151, line: 3119, baseType: !505, size: 64, offset: 1280)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !884, file: !151, line: 3121, baseType: !505, size: 64, offset: 1344)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !884, file: !151, line: 3123, baseType: !505, size: 64, offset: 1408)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !507, file: !151, line: 3385, baseType: !912, size: 1088)
!912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !151, line: 2874, size: 1088, elements: !913)
!913 = !{!914, !915, !916}
!914 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !912, file: !151, line: 2875, baseType: !672, size: 960)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !912, file: !151, line: 2876, baseType: !676, size: 64, offset: 960)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !912, file: !151, line: 2877, baseType: !917, size: 64, offset: 1024)
!917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !918, size: 64)
!918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !919, line: 172, size: 128, elements: !920)
!919 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!920 = !{!921, !922, !923, !924, !925, !926, !927}
!921 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !918, file: !919, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !918, file: !919, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !918, file: !919, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !918, file: !919, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !918, file: !919, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !918, file: !919, line: 195, baseType: !7, size: 32, offset: 32)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !918, file: !919, line: 199, baseType: !505, size: 64, offset: 64)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !507, file: !151, line: 3386, baseType: !887, size: 1216)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !507, file: !151, line: 3387, baseType: !930, size: 1280)
!930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !151, line: 3093, size: 1280, elements: !931)
!931 = !{!932, !933}
!932 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !930, file: !151, line: 3094, baseType: !887, size: 1216)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !930, file: !151, line: 3095, baseType: !917, size: 64, offset: 1216)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !507, file: !151, line: 3388, baseType: !935, size: 1216)
!935 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !151, line: 2824, size: 1216, elements: !936)
!936 = !{!937, !938, !939, !940, !941, !942}
!937 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !935, file: !151, line: 2825, baseType: !634, size: 896)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !935, file: !151, line: 2827, baseType: !505, size: 64, offset: 896)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !935, file: !151, line: 2828, baseType: !505, size: 64, offset: 960)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !935, file: !151, line: 2829, baseType: !505, size: 64, offset: 1024)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !935, file: !151, line: 2830, baseType: !505, size: 64, offset: 1088)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !935, file: !151, line: 2831, baseType: !505, size: 64, offset: 1152)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !507, file: !151, line: 3389, baseType: !944, size: 1024)
!944 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !151, line: 2850, size: 1024, elements: !945)
!945 = !{!946, !947, !948}
!946 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !944, file: !151, line: 2851, baseType: !672, size: 960)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !944, file: !151, line: 2852, baseType: !440, size: 32, offset: 960)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !944, file: !151, line: 2853, baseType: !440, size: 32, offset: 992)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !507, file: !151, line: 3390, baseType: !950, size: 1024)
!950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !151, line: 2857, size: 1024, elements: !951)
!951 = !{!952, !953}
!952 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !950, file: !151, line: 2858, baseType: !672, size: 960)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !950, file: !151, line: 2859, baseType: !917, size: 64, offset: 960)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !507, file: !151, line: 3391, baseType: !955, size: 960)
!955 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !151, line: 2862, size: 960, elements: !956)
!956 = !{!957}
!957 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !955, file: !151, line: 2863, baseType: !672, size: 960)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !507, file: !151, line: 3392, baseType: !959, size: 1472)
!959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !151, line: 3304, size: 1472, elements: !960)
!960 = !{!961}
!961 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !959, file: !151, line: 3305, baseType: !884, size: 1472)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !507, file: !151, line: 3393, baseType: !963, size: 1792)
!963 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !151, line: 3248, size: 1792, elements: !964)
!964 = !{!965, !966, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241}
!965 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !963, file: !151, line: 3249, baseType: !884, size: 1472)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !963, file: !151, line: 3251, baseType: !967, size: 64, offset: 1472)
!967 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !968, size: 64)
!968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !969, line: 463, size: 1152, elements: !970)
!969 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!970 = !{!971, !974, !1005, !1006, !1144, !1165, !1166, !1167, !1168, !1169, !1170, !1194, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220}
!971 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !968, file: !969, line: 464, baseType: !972, size: 64)
!972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !973, size: 64)
!973 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !969, line: 464, flags: DIFlagFwdDecl)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !968, file: !969, line: 467, baseType: !975, size: 64, offset: 64)
!975 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !976, size: 64)
!976 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !977)
!977 = !{!978, !980, !981, !994, !995, !996, !997, !998, !999, !1001, !1003, !1004}
!978 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !976, file: !135, line: 377, baseType: !979, size: 64)
!979 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !429, line: 111, baseType: !443)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !976, file: !135, line: 378, baseType: !979, size: 64, offset: 64)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !976, file: !135, line: 381, baseType: !982, size: 64, offset: 128)
!982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !983, size: 64)
!983 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !984)
!984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !985)
!985 = !{!986}
!986 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !984, file: !135, line: 282, baseType: !987, size: 128)
!987 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !988)
!988 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !989)
!989 = !{!990, !991, !992}
!990 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !988, file: !135, line: 281, baseType: !7, size: 32)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !988, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !988, file: !135, line: 281, baseType: !993, size: 64, offset: 64)
!993 = !DICompositeType(tag: DW_TAG_array_type, baseType: !979, size: 64, elements: !603)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !976, file: !135, line: 384, baseType: !440, size: 32, offset: 192)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !976, file: !135, line: 387, baseType: !440, size: 32, offset: 224)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !976, file: !135, line: 390, baseType: !440, size: 32, offset: 256)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !976, file: !135, line: 394, baseType: !982, size: 64, offset: 320)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !976, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !976, file: !135, line: 399, baseType: !1000, size: 64, offset: 416)
!1000 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !746)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !976, file: !135, line: 402, baseType: !1002, size: 64, offset: 480)
!1002 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !746)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !976, file: !135, line: 406, baseType: !440, size: 32, offset: 544)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !976, file: !135, line: 409, baseType: !440, size: 32, offset: 576)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !968, file: !969, line: 470, baseType: !470, size: 64, offset: 128)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !968, file: !969, line: 473, baseType: !1007, size: 64, offset: 192)
!1007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1008, size: 64)
!1008 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !919, line: 39, size: 1152, elements: !1009)
!1009 = !{!1010, !1059, !1072, !1085, !1086, !1098, !1099, !1103, !1104, !1105, !1106, !1107}
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1008, file: !919, line: 41, baseType: !1011, size: 64)
!1011 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !410, line: 144, baseType: !1012)
!1012 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1013, size: 64)
!1013 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !410, line: 100, size: 896, elements: !1014)
!1014 = !{!1015, !1021, !1026, !1031, !1033, !1036, !1037, !1038, !1039, !1040, !1045, !1047, !1048, !1053, !1058}
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1013, file: !410, line: 102, baseType: !1016, size: 64)
!1016 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !410, line: 52, baseType: !1017)
!1017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1018, size: 64)
!1018 = !DISubroutineType(types: !1019)
!1019 = !{!1020, !852}
!1020 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !410, line: 47, baseType: !7)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1013, file: !410, line: 105, baseType: !1022, size: 64, offset: 64)
!1022 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !410, line: 59, baseType: !1023)
!1023 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1024, size: 64)
!1024 = !DISubroutineType(types: !1025)
!1025 = !{!440, !852, !852}
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1013, file: !410, line: 108, baseType: !1027, size: 64, offset: 128)
!1027 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !410, line: 63, baseType: !1028)
!1028 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1029, size: 64)
!1029 = !DISubroutineType(types: !1030)
!1030 = !{null, !782}
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1013, file: !410, line: 111, baseType: !1032, size: 64, offset: 192)
!1032 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !782, size: 64)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1013, file: !410, line: 114, baseType: !1034, size: 64, offset: 256)
!1034 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1035, line: 46, baseType: !558)
!1035 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1013, file: !410, line: 117, baseType: !1034, size: 64, offset: 320)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1013, file: !410, line: 120, baseType: !1034, size: 64, offset: 384)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1013, file: !410, line: 124, baseType: !7, size: 32, offset: 448)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1013, file: !410, line: 128, baseType: !7, size: 32, offset: 480)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1013, file: !410, line: 131, baseType: !1041, size: 64, offset: 512)
!1041 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !410, line: 75, baseType: !1042)
!1042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1043, size: 64)
!1043 = !DISubroutineType(types: !1044)
!1044 = !{!782, !1034, !1034}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1013, file: !410, line: 132, baseType: !1046, size: 64, offset: 576)
!1046 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !410, line: 78, baseType: !1028)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1013, file: !410, line: 135, baseType: !782, size: 64, offset: 640)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1013, file: !410, line: 136, baseType: !1049, size: 64, offset: 704)
!1049 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !410, line: 82, baseType: !1050)
!1050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1051, size: 64)
!1051 = !DISubroutineType(types: !1052)
!1052 = !{!782, !782, !1034, !1034}
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1013, file: !410, line: 137, baseType: !1054, size: 64, offset: 768)
!1054 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !410, line: 83, baseType: !1055)
!1055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1056, size: 64)
!1056 = !DISubroutineType(types: !1057)
!1057 = !{null, !782, !782}
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1013, file: !410, line: 141, baseType: !7, size: 32, offset: 832)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1008, file: !919, line: 48, baseType: !1060, size: 64, offset: 64)
!1060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1061, size: 64)
!1061 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !472, line: 35, baseType: !1062)
!1062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !472, line: 35, size: 128, elements: !1063)
!1063 = !{!1064}
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1062, file: !472, line: 35, baseType: !1065, size: 128)
!1065 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !472, line: 33, baseType: !1066)
!1066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !472, line: 33, size: 128, elements: !1067)
!1067 = !{!1068, !1069, !1070}
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1066, file: !472, line: 33, baseType: !7, size: 32)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1066, file: !472, line: 33, baseType: !7, size: 32, offset: 32)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1066, file: !472, line: 33, baseType: !1071, size: 64, offset: 64)
!1071 = !DICompositeType(tag: DW_TAG_array_type, baseType: !480, size: 64, elements: !603)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1008, file: !919, line: 51, baseType: !1073, size: 64, offset: 128)
!1073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1074, size: 64)
!1074 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !151, line: 183, baseType: !1075)
!1075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !151, line: 183, size: 128, elements: !1076)
!1076 = !{!1077}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1075, file: !151, line: 183, baseType: !1078, size: 128)
!1078 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !151, line: 182, baseType: !1079)
!1079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !151, line: 182, size: 128, elements: !1080)
!1080 = !{!1081, !1082, !1083}
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1079, file: !151, line: 182, baseType: !7, size: 32)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1079, file: !151, line: 182, baseType: !7, size: 32, offset: 32)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1079, file: !151, line: 182, baseType: !1084, size: 64, offset: 64)
!1084 = !DICompositeType(tag: DW_TAG_array_type, baseType: !505, size: 64, elements: !603)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1008, file: !919, line: 54, baseType: !505, size: 64, offset: 192)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1008, file: !919, line: 57, baseType: !1087, size: 128, offset: 256)
!1087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1088, line: 31, size: 128, elements: !1089)
!1088 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1089 = !{!1090, !1091, !1092, !1093, !1094, !1095, !1096}
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1087, file: !1088, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1087, file: !1088, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1087, file: !1088, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1087, file: !1088, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1087, file: !1088, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1087, file: !1088, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1087, file: !1088, line: 56, baseType: !1097, size: 64, offset: 64)
!1097 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !429, line: 47, baseType: !730)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1008, file: !919, line: 60, baseType: !1087, size: 128, offset: 384)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1008, file: !919, line: 64, baseType: !1100, size: 64, offset: 512)
!1100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1101, size: 64)
!1101 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1102, line: 33, flags: DIFlagFwdDecl)
!1102 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1008, file: !919, line: 67, baseType: !505, size: 64, offset: 576)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1008, file: !919, line: 73, baseType: !1011, size: 64, offset: 640)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1008, file: !919, line: 77, baseType: !1097, size: 64, offset: 704)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1008, file: !919, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1008, file: !919, line: 82, baseType: !1108, size: 320, offset: 832)
!1108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1109, line: 62, size: 320, elements: !1110)
!1109 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1110 = !{!1111, !1117, !1118, !1119, !1120, !1127}
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1108, file: !1109, line: 63, baseType: !1112, size: 64)
!1112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1113, size: 64)
!1113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1109, line: 56, size: 128, elements: !1114)
!1114 = !{!1115, !1116}
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1113, file: !1109, line: 57, baseType: !1112, size: 64)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1113, file: !1109, line: 58, baseType: !601, size: 8, offset: 64)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1108, file: !1109, line: 64, baseType: !7, size: 32, offset: 64)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1108, file: !1109, line: 66, baseType: !7, size: 32, offset: 96)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1108, file: !1109, line: 68, baseType: !622, size: 8, offset: 128)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1108, file: !1109, line: 70, baseType: !1121, size: 64, offset: 192)
!1121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1122, size: 64)
!1122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1109, line: 37, size: 128, elements: !1123)
!1123 = !{!1124, !1125}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1122, file: !1109, line: 39, baseType: !1121, size: 64)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1122, file: !1109, line: 40, baseType: !1126, size: 64, offset: 64)
!1126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !505, size: 64)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1108, file: !1109, line: 71, baseType: !1128, size: 64, offset: 256)
!1128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1129, size: 64)
!1129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1109, line: 45, size: 320, elements: !1130)
!1130 = !{!1131, !1132}
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1129, file: !1109, line: 47, baseType: !1128, size: 64)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1129, file: !1109, line: 48, baseType: !1133, size: 256, offset: 64)
!1133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !151, line: 1883, size: 256, elements: !1134)
!1134 = !{!1135, !1137, !1138, !1143}
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1133, file: !151, line: 1884, baseType: !1136, size: 64)
!1136 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1133, size: 64)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1133, file: !151, line: 1885, baseType: !1136, size: 64, offset: 64)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1133, file: !151, line: 1891, baseType: !1139, size: 64, offset: 128)
!1139 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1133, file: !151, line: 1891, size: 64, elements: !1140)
!1140 = !{!1141, !1142}
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1139, file: !151, line: 1891, baseType: !480, size: 64)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1139, file: !151, line: 1891, baseType: !505, size: 64)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1133, file: !151, line: 1892, baseType: !1126, size: 64, offset: 192)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !968, file: !969, line: 476, baseType: !1145, size: 64, offset: 256)
!1145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1146, size: 64)
!1146 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !378, line: 187, size: 256, elements: !1147)
!1147 = !{!1148, !1149, !1163, !1164}
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1146, file: !378, line: 189, baseType: !440, size: 32)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1146, file: !378, line: 192, baseType: !1150, size: 64, offset: 64)
!1150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1151, size: 64)
!1151 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !378, line: 87, baseType: !1152)
!1152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !378, line: 87, size: 128, elements: !1153)
!1153 = !{!1154}
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1152, file: !378, line: 87, baseType: !1155, size: 128)
!1155 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !378, line: 85, baseType: !1156)
!1156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !378, line: 85, size: 128, elements: !1157)
!1157 = !{!1158, !1159, !1160}
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1156, file: !378, line: 85, baseType: !7, size: 32)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1156, file: !378, line: 85, baseType: !7, size: 32, offset: 32)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1156, file: !378, line: 85, baseType: !1161, size: 64, offset: 64)
!1161 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1162, size: 64, elements: !603)
!1162 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !378, line: 84, baseType: !436)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1146, file: !378, line: 197, baseType: !1011, size: 64, offset: 128)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1146, file: !378, line: 200, baseType: !436, size: 64, offset: 192)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !968, file: !969, line: 479, baseType: !1011, size: 64, offset: 320)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !968, file: !969, line: 484, baseType: !505, size: 64, offset: 384)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !968, file: !969, line: 488, baseType: !505, size: 64, offset: 448)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !968, file: !969, line: 493, baseType: !505, size: 64, offset: 512)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !968, file: !969, line: 496, baseType: !505, size: 64, offset: 576)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !968, file: !969, line: 501, baseType: !1171, size: 64, offset: 640)
!1171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1172, size: 64)
!1172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !146, line: 2355, size: 576, elements: !1173)
!1173 = !{!1174, !1177, !1178, !1179, !1180, !1182, !1183, !1188, !1189, !1190, !1191, !1192, !1193}
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1172, file: !146, line: 2356, baseType: !1175, size: 64)
!1175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1176, size: 64)
!1176 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !146, line: 2356, flags: DIFlagFwdDecl)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1172, file: !146, line: 2357, baseType: !702, size: 64, offset: 64)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1172, file: !146, line: 2358, baseType: !440, size: 32, offset: 128)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1172, file: !146, line: 2359, baseType: !440, size: 32, offset: 160)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1172, file: !146, line: 2360, baseType: !1181, size: 128, offset: 192)
!1181 = !DICompositeType(tag: DW_TAG_array_type, baseType: !440, size: 128, elements: !771)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1172, file: !146, line: 2364, baseType: !440, size: 32, offset: 320)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1172, file: !146, line: 2367, baseType: !1184, size: 128, offset: 384)
!1184 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !146, line: 2349, size: 128, elements: !1185)
!1185 = !{!1186, !1187}
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1184, file: !146, line: 2351, baseType: !676, size: 64)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1184, file: !146, line: 2352, baseType: !435, size: 64, offset: 64)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1172, file: !146, line: 2371, baseType: !145, size: 32, offset: 512)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1172, file: !146, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1172, file: !146, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1172, file: !146, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1172, file: !146, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1172, file: !146, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !968, file: !969, line: 504, baseType: !1195, size: 64, offset: 704)
!1195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1196, size: 64)
!1196 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !969, line: 504, flags: DIFlagFwdDecl)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !968, file: !969, line: 507, baseType: !1011, size: 64, offset: 768)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !968, file: !969, line: 510, baseType: !440, size: 32, offset: 832)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !968, file: !969, line: 513, baseType: !440, size: 32, offset: 864)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !968, file: !969, line: 516, baseType: !498, size: 32, offset: 896)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !968, file: !969, line: 519, baseType: !498, size: 32, offset: 928)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !968, file: !969, line: 522, baseType: !7, size: 32, offset: 960)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !968, file: !969, line: 523, baseType: !7, size: 32, offset: 992)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !968, file: !969, line: 528, baseType: !702, size: 64, offset: 1024)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !968, file: !969, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !968, file: !969, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !968, file: !969, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !968, file: !969, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !968, file: !969, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !968, file: !969, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !968, file: !969, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !968, file: !969, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !968, file: !969, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !968, file: !969, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !968, file: !969, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !968, file: !969, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !968, file: !969, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !968, file: !969, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !968, file: !969, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !968, file: !969, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !963, file: !151, line: 3254, baseType: !505, size: 64, offset: 1536)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !963, file: !151, line: 3257, baseType: !505, size: 64, offset: 1600)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !963, file: !151, line: 3258, baseType: !505, size: 64, offset: 1664)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !963, file: !151, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !963, file: !151, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !963, file: !151, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !963, file: !151, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !963, file: !151, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !963, file: !151, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !963, file: !151, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !963, file: !151, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !963, file: !151, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !963, file: !151, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !963, file: !151, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !963, file: !151, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !963, file: !151, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !963, file: !151, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !963, file: !151, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !963, file: !151, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !963, file: !151, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !963, file: !151, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !507, file: !151, line: 3394, baseType: !1243, size: 1344)
!1243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !151, line: 2279, size: 1344, elements: !1244)
!1244 = !{!1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286}
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1243, file: !151, line: 2280, baseType: !543, size: 192)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1243, file: !151, line: 2281, baseType: !505, size: 64, offset: 192)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1243, file: !151, line: 2282, baseType: !505, size: 64, offset: 256)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1243, file: !151, line: 2283, baseType: !505, size: 64, offset: 320)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1243, file: !151, line: 2284, baseType: !505, size: 64, offset: 384)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1243, file: !151, line: 2285, baseType: !7, size: 32, offset: 448)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1243, file: !151, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1243, file: !151, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1243, file: !151, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1243, file: !151, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1243, file: !151, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1243, file: !151, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1243, file: !151, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1243, file: !151, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1243, file: !151, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1243, file: !151, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1243, file: !151, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1243, file: !151, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1243, file: !151, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1243, file: !151, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1243, file: !151, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1243, file: !151, line: 2305, baseType: !7, size: 32, offset: 512)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1243, file: !151, line: 2306, baseType: !802, size: 32, offset: 544)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1243, file: !151, line: 2307, baseType: !505, size: 64, offset: 576)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1243, file: !151, line: 2308, baseType: !505, size: 64, offset: 640)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1243, file: !151, line: 2314, baseType: !1271, size: 64, offset: 704)
!1271 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !151, line: 2309, size: 64, elements: !1272)
!1272 = !{!1273, !1274, !1275}
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1271, file: !151, line: 2310, baseType: !440, size: 32)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1271, file: !151, line: 2311, baseType: !702, size: 64)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1271, file: !151, line: 2312, baseType: !1276, size: 64)
!1276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1277, size: 64)
!1277 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !151, line: 2277, flags: DIFlagFwdDecl)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1243, file: !151, line: 2315, baseType: !505, size: 64, offset: 768)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1243, file: !151, line: 2316, baseType: !505, size: 64, offset: 832)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1243, file: !151, line: 2317, baseType: !505, size: 64, offset: 896)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1243, file: !151, line: 2318, baseType: !505, size: 64, offset: 960)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1243, file: !151, line: 2319, baseType: !505, size: 64, offset: 1024)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1243, file: !151, line: 2320, baseType: !505, size: 64, offset: 1088)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1243, file: !151, line: 2321, baseType: !505, size: 64, offset: 1152)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1243, file: !151, line: 2322, baseType: !505, size: 64, offset: 1216)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1243, file: !151, line: 2324, baseType: !1287, size: 64, offset: 1280)
!1287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1288, size: 64)
!1288 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !151, line: 2324, flags: DIFlagFwdDecl)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !507, file: !151, line: 3395, baseType: !1290, size: 320)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !151, line: 1469, size: 320, elements: !1291)
!1291 = !{!1292, !1293, !1294}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1290, file: !151, line: 1470, baseType: !543, size: 192)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1290, file: !151, line: 1471, baseType: !505, size: 64, offset: 192)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1290, file: !151, line: 1472, baseType: !505, size: 64, offset: 256)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !507, file: !151, line: 3396, baseType: !1296, size: 320)
!1296 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !151, line: 1482, size: 320, elements: !1297)
!1297 = !{!1298, !1299, !1300}
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1296, file: !151, line: 1483, baseType: !543, size: 192)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1296, file: !151, line: 1484, baseType: !440, size: 32, offset: 192)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1296, file: !151, line: 1485, baseType: !1084, size: 64, offset: 256)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !507, file: !151, line: 3397, baseType: !1302, size: 384)
!1302 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !151, line: 1829, size: 384, elements: !1303)
!1303 = !{!1304, !1305, !1306, !1307}
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1302, file: !151, line: 1830, baseType: !543, size: 192)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1302, file: !151, line: 1831, baseType: !498, size: 32, offset: 192)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1302, file: !151, line: 1832, baseType: !505, size: 64, offset: 256)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1302, file: !151, line: 1835, baseType: !1084, size: 64, offset: 320)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !507, file: !151, line: 3398, baseType: !1309, size: 704)
!1309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !151, line: 1898, size: 704, elements: !1310)
!1310 = !{!1311, !1312, !1313, !1314, !1315, !1320}
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1309, file: !151, line: 1899, baseType: !543, size: 192)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1309, file: !151, line: 1902, baseType: !505, size: 64, offset: 192)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1309, file: !151, line: 1905, baseType: !480, size: 64, offset: 256)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1309, file: !151, line: 1908, baseType: !7, size: 32, offset: 320)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1309, file: !151, line: 1911, baseType: !1316, size: 64, offset: 384)
!1316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1317, size: 64)
!1317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !919, line: 117, size: 128, elements: !1318)
!1318 = !{!1319}
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1317, file: !919, line: 120, baseType: !1087, size: 128)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1309, file: !151, line: 1914, baseType: !1133, size: 256, offset: 448)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !507, file: !151, line: 3399, baseType: !1322, size: 704)
!1322 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !151, line: 2008, size: 704, elements: !1323)
!1323 = !{!1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334}
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1322, file: !151, line: 2009, baseType: !543, size: 192)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1322, file: !151, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1322, file: !151, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1322, file: !151, line: 2014, baseType: !498, size: 32, offset: 224)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1322, file: !151, line: 2016, baseType: !505, size: 64, offset: 256)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1322, file: !151, line: 2017, baseType: !1073, size: 64, offset: 320)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1322, file: !151, line: 2019, baseType: !505, size: 64, offset: 384)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1322, file: !151, line: 2020, baseType: !505, size: 64, offset: 448)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1322, file: !151, line: 2021, baseType: !505, size: 64, offset: 512)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1322, file: !151, line: 2022, baseType: !505, size: 64, offset: 576)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1322, file: !151, line: 2023, baseType: !505, size: 64, offset: 640)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !507, file: !151, line: 3400, baseType: !1336, size: 832)
!1336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !151, line: 2430, size: 832, elements: !1337)
!1337 = !{!1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347}
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1336, file: !151, line: 2431, baseType: !543, size: 192)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1336, file: !151, line: 2433, baseType: !505, size: 64, offset: 192)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1336, file: !151, line: 2434, baseType: !505, size: 64, offset: 256)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1336, file: !151, line: 2435, baseType: !505, size: 64, offset: 320)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1336, file: !151, line: 2436, baseType: !505, size: 64, offset: 384)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1336, file: !151, line: 2437, baseType: !1073, size: 64, offset: 448)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1336, file: !151, line: 2438, baseType: !505, size: 64, offset: 512)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1336, file: !151, line: 2440, baseType: !505, size: 64, offset: 576)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1336, file: !151, line: 2441, baseType: !505, size: 64, offset: 640)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1336, file: !151, line: 2443, baseType: !1348, size: 128, offset: 704)
!1348 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !151, line: 182, baseType: !1349)
!1349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !151, line: 182, size: 128, elements: !1350)
!1350 = !{!1351}
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1349, file: !151, line: 182, baseType: !1078, size: 128)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !507, file: !151, line: 3401, baseType: !1353, size: 320)
!1353 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !151, line: 3327, size: 320, elements: !1354)
!1354 = !{!1355, !1356, !1363}
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1353, file: !151, line: 3329, baseType: !543, size: 192)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1353, file: !151, line: 3330, baseType: !1357, size: 64, offset: 192)
!1357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1358, size: 64)
!1358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !151, line: 3320, size: 192, elements: !1359)
!1359 = !{!1360, !1361, !1362}
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1358, file: !151, line: 3322, baseType: !1357, size: 64)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1358, file: !151, line: 3323, baseType: !1357, size: 64, offset: 64)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1358, file: !151, line: 3324, baseType: !505, size: 64, offset: 128)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1353, file: !151, line: 3331, baseType: !1357, size: 64, offset: 256)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !507, file: !151, line: 3402, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !151, line: 1540, size: 256, elements: !1366)
!1366 = !{!1367, !1368}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1365, file: !151, line: 1541, baseType: !543, size: 192)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1365, file: !151, line: 1542, baseType: !1369, size: 64, offset: 192)
!1369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1370, size: 64)
!1370 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !151, line: 1538, baseType: !1371)
!1371 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !151, line: 1538, size: 192, elements: !1372)
!1372 = !{!1373}
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1371, file: !151, line: 1538, baseType: !1374, size: 192)
!1374 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !151, line: 1537, baseType: !1375)
!1375 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !151, line: 1537, size: 192, elements: !1376)
!1376 = !{!1377, !1378, !1379}
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1375, file: !151, line: 1537, baseType: !7, size: 32)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1375, file: !151, line: 1537, baseType: !7, size: 32, offset: 32)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1375, file: !151, line: 1537, baseType: !1380, size: 128, offset: 64)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1381, size: 128, elements: !603)
!1381 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !151, line: 1535, baseType: !1382)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !151, line: 1532, size: 128, elements: !1383)
!1383 = !{!1384, !1385}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1382, file: !151, line: 1533, baseType: !505, size: 64)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1382, file: !151, line: 1534, baseType: !505, size: 64, offset: 64)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !507, file: !151, line: 3403, baseType: !1387, size: 512)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !151, line: 1938, size: 512, elements: !1388)
!1388 = !{!1389, !1390, !1391, !1392, !1398, !1399, !1400}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1387, file: !151, line: 1939, baseType: !543, size: 192)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1387, file: !151, line: 1940, baseType: !498, size: 32, offset: 192)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1387, file: !151, line: 1941, baseType: !150, size: 32, offset: 224)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1387, file: !151, line: 1946, baseType: !1393, size: 32, offset: 256)
!1393 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !151, line: 1942, size: 32, elements: !1394)
!1394 = !{!1395, !1396, !1397}
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1393, file: !151, line: 1943, baseType: !169, size: 32)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1393, file: !151, line: 1944, baseType: !176, size: 32)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1393, file: !151, line: 1945, baseType: !183, size: 32)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1387, file: !151, line: 1950, baseType: !469, size: 64, offset: 320)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1387, file: !151, line: 1951, baseType: !469, size: 64, offset: 384)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1387, file: !151, line: 1953, baseType: !1084, size: 64, offset: 448)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !507, file: !151, line: 3404, baseType: !1402, size: 1664)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !151, line: 3337, size: 1664, elements: !1403)
!1403 = !{!1404, !1405}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1402, file: !151, line: 3338, baseType: !543, size: 192)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1402, file: !151, line: 3341, baseType: !1406, size: 1472, offset: 192)
!1406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1407, line: 410, size: 1472, elements: !1408)
!1407 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1408 = !{!1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1406, file: !1407, line: 412, baseType: !440, size: 32)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1406, file: !1407, line: 413, baseType: !440, size: 32, offset: 32)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1406, file: !1407, line: 414, baseType: !440, size: 32, offset: 64)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1406, file: !1407, line: 415, baseType: !440, size: 32, offset: 96)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1406, file: !1407, line: 416, baseType: !440, size: 32, offset: 128)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1406, file: !1407, line: 417, baseType: !440, size: 32, offset: 160)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1406, file: !1407, line: 418, baseType: !622, size: 8, offset: 192)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1406, file: !1407, line: 419, baseType: !622, size: 8, offset: 200)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1406, file: !1407, line: 420, baseType: !1418, size: 8, offset: 208)
!1418 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1406, file: !1407, line: 421, baseType: !1418, size: 8, offset: 216)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1406, file: !1407, line: 422, baseType: !1418, size: 8, offset: 224)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1406, file: !1407, line: 423, baseType: !1418, size: 8, offset: 232)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1406, file: !1407, line: 424, baseType: !1418, size: 8, offset: 240)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1406, file: !1407, line: 425, baseType: !1418, size: 8, offset: 248)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1406, file: !1407, line: 426, baseType: !1418, size: 8, offset: 256)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1406, file: !1407, line: 427, baseType: !1418, size: 8, offset: 264)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1406, file: !1407, line: 428, baseType: !1418, size: 8, offset: 272)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1406, file: !1407, line: 429, baseType: !1418, size: 8, offset: 280)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1406, file: !1407, line: 430, baseType: !1418, size: 8, offset: 288)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1406, file: !1407, line: 431, baseType: !1418, size: 8, offset: 296)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1406, file: !1407, line: 432, baseType: !1418, size: 8, offset: 304)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1406, file: !1407, line: 433, baseType: !1418, size: 8, offset: 312)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1406, file: !1407, line: 434, baseType: !1418, size: 8, offset: 320)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1406, file: !1407, line: 435, baseType: !1418, size: 8, offset: 328)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1406, file: !1407, line: 436, baseType: !1418, size: 8, offset: 336)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1406, file: !1407, line: 437, baseType: !1418, size: 8, offset: 344)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1406, file: !1407, line: 438, baseType: !1418, size: 8, offset: 352)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1406, file: !1407, line: 439, baseType: !1418, size: 8, offset: 360)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1406, file: !1407, line: 440, baseType: !1418, size: 8, offset: 368)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1406, file: !1407, line: 441, baseType: !1418, size: 8, offset: 376)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1406, file: !1407, line: 442, baseType: !1418, size: 8, offset: 384)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1406, file: !1407, line: 443, baseType: !1418, size: 8, offset: 392)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1406, file: !1407, line: 444, baseType: !1418, size: 8, offset: 400)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1406, file: !1407, line: 445, baseType: !1418, size: 8, offset: 408)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1406, file: !1407, line: 446, baseType: !1418, size: 8, offset: 416)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1406, file: !1407, line: 447, baseType: !1418, size: 8, offset: 424)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1406, file: !1407, line: 448, baseType: !1418, size: 8, offset: 432)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1406, file: !1407, line: 449, baseType: !1418, size: 8, offset: 440)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1406, file: !1407, line: 450, baseType: !1418, size: 8, offset: 448)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1406, file: !1407, line: 451, baseType: !1418, size: 8, offset: 456)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1406, file: !1407, line: 452, baseType: !1418, size: 8, offset: 464)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1406, file: !1407, line: 453, baseType: !1418, size: 8, offset: 472)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1406, file: !1407, line: 454, baseType: !1418, size: 8, offset: 480)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1406, file: !1407, line: 455, baseType: !1418, size: 8, offset: 488)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1406, file: !1407, line: 456, baseType: !1418, size: 8, offset: 496)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1406, file: !1407, line: 457, baseType: !1418, size: 8, offset: 504)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1406, file: !1407, line: 458, baseType: !1418, size: 8, offset: 512)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1406, file: !1407, line: 459, baseType: !1418, size: 8, offset: 520)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1406, file: !1407, line: 460, baseType: !1418, size: 8, offset: 528)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1406, file: !1407, line: 461, baseType: !1418, size: 8, offset: 536)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1406, file: !1407, line: 462, baseType: !1418, size: 8, offset: 544)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1406, file: !1407, line: 463, baseType: !1418, size: 8, offset: 552)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1406, file: !1407, line: 464, baseType: !1418, size: 8, offset: 560)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1406, file: !1407, line: 465, baseType: !1418, size: 8, offset: 568)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1406, file: !1407, line: 466, baseType: !1418, size: 8, offset: 576)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1406, file: !1407, line: 467, baseType: !1418, size: 8, offset: 584)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1406, file: !1407, line: 468, baseType: !1418, size: 8, offset: 592)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1406, file: !1407, line: 469, baseType: !1418, size: 8, offset: 600)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1406, file: !1407, line: 470, baseType: !1418, size: 8, offset: 608)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1406, file: !1407, line: 471, baseType: !1418, size: 8, offset: 616)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1406, file: !1407, line: 472, baseType: !1418, size: 8, offset: 624)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1406, file: !1407, line: 473, baseType: !1418, size: 8, offset: 632)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1406, file: !1407, line: 474, baseType: !1418, size: 8, offset: 640)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1406, file: !1407, line: 475, baseType: !1418, size: 8, offset: 648)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1406, file: !1407, line: 476, baseType: !1418, size: 8, offset: 656)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1406, file: !1407, line: 477, baseType: !1418, size: 8, offset: 664)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1406, file: !1407, line: 478, baseType: !1418, size: 8, offset: 672)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1406, file: !1407, line: 479, baseType: !1418, size: 8, offset: 680)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1406, file: !1407, line: 480, baseType: !1418, size: 8, offset: 688)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1406, file: !1407, line: 481, baseType: !1418, size: 8, offset: 696)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1406, file: !1407, line: 482, baseType: !1418, size: 8, offset: 704)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1406, file: !1407, line: 483, baseType: !1418, size: 8, offset: 712)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1406, file: !1407, line: 484, baseType: !1418, size: 8, offset: 720)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1406, file: !1407, line: 485, baseType: !1418, size: 8, offset: 728)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1406, file: !1407, line: 486, baseType: !1418, size: 8, offset: 736)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1406, file: !1407, line: 487, baseType: !1418, size: 8, offset: 744)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1406, file: !1407, line: 488, baseType: !1418, size: 8, offset: 752)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1406, file: !1407, line: 489, baseType: !1418, size: 8, offset: 760)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1406, file: !1407, line: 490, baseType: !1418, size: 8, offset: 768)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1406, file: !1407, line: 491, baseType: !1418, size: 8, offset: 776)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1406, file: !1407, line: 492, baseType: !1418, size: 8, offset: 784)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1406, file: !1407, line: 493, baseType: !1418, size: 8, offset: 792)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1406, file: !1407, line: 494, baseType: !1418, size: 8, offset: 800)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1406, file: !1407, line: 495, baseType: !1418, size: 8, offset: 808)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1406, file: !1407, line: 496, baseType: !1418, size: 8, offset: 816)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1406, file: !1407, line: 497, baseType: !1418, size: 8, offset: 824)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1406, file: !1407, line: 498, baseType: !1418, size: 8, offset: 832)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1406, file: !1407, line: 499, baseType: !1418, size: 8, offset: 840)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1406, file: !1407, line: 500, baseType: !1418, size: 8, offset: 848)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1406, file: !1407, line: 501, baseType: !1418, size: 8, offset: 856)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1406, file: !1407, line: 502, baseType: !1418, size: 8, offset: 864)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1406, file: !1407, line: 503, baseType: !1418, size: 8, offset: 872)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1406, file: !1407, line: 504, baseType: !1418, size: 8, offset: 880)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1406, file: !1407, line: 505, baseType: !1418, size: 8, offset: 888)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1406, file: !1407, line: 506, baseType: !1418, size: 8, offset: 896)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1406, file: !1407, line: 507, baseType: !1418, size: 8, offset: 904)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1406, file: !1407, line: 508, baseType: !1418, size: 8, offset: 912)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1406, file: !1407, line: 509, baseType: !1418, size: 8, offset: 920)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1406, file: !1407, line: 510, baseType: !1418, size: 8, offset: 928)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1406, file: !1407, line: 511, baseType: !1418, size: 8, offset: 936)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1406, file: !1407, line: 512, baseType: !1418, size: 8, offset: 944)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1406, file: !1407, line: 513, baseType: !1418, size: 8, offset: 952)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1406, file: !1407, line: 514, baseType: !1418, size: 8, offset: 960)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1406, file: !1407, line: 515, baseType: !1418, size: 8, offset: 968)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1406, file: !1407, line: 516, baseType: !1418, size: 8, offset: 976)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1406, file: !1407, line: 517, baseType: !1418, size: 8, offset: 984)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1406, file: !1407, line: 518, baseType: !1418, size: 8, offset: 992)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1406, file: !1407, line: 519, baseType: !1418, size: 8, offset: 1000)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1406, file: !1407, line: 520, baseType: !1418, size: 8, offset: 1008)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1406, file: !1407, line: 521, baseType: !1418, size: 8, offset: 1016)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1406, file: !1407, line: 522, baseType: !1418, size: 8, offset: 1024)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1406, file: !1407, line: 523, baseType: !1418, size: 8, offset: 1032)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1406, file: !1407, line: 524, baseType: !1418, size: 8, offset: 1040)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1406, file: !1407, line: 525, baseType: !1418, size: 8, offset: 1048)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1406, file: !1407, line: 526, baseType: !1418, size: 8, offset: 1056)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1406, file: !1407, line: 527, baseType: !1418, size: 8, offset: 1064)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1406, file: !1407, line: 528, baseType: !1418, size: 8, offset: 1072)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1406, file: !1407, line: 529, baseType: !1418, size: 8, offset: 1080)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1406, file: !1407, line: 530, baseType: !1418, size: 8, offset: 1088)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1406, file: !1407, line: 531, baseType: !1418, size: 8, offset: 1096)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1406, file: !1407, line: 532, baseType: !1418, size: 8, offset: 1104)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1406, file: !1407, line: 533, baseType: !1418, size: 8, offset: 1112)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1406, file: !1407, line: 534, baseType: !1418, size: 8, offset: 1120)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1406, file: !1407, line: 535, baseType: !1418, size: 8, offset: 1128)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1406, file: !1407, line: 536, baseType: !1418, size: 8, offset: 1136)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1406, file: !1407, line: 537, baseType: !1418, size: 8, offset: 1144)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1406, file: !1407, line: 538, baseType: !1418, size: 8, offset: 1152)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1406, file: !1407, line: 539, baseType: !1418, size: 8, offset: 1160)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1406, file: !1407, line: 540, baseType: !1418, size: 8, offset: 1168)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1406, file: !1407, line: 541, baseType: !1418, size: 8, offset: 1176)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1406, file: !1407, line: 542, baseType: !1418, size: 8, offset: 1184)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1406, file: !1407, line: 543, baseType: !1418, size: 8, offset: 1192)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1406, file: !1407, line: 544, baseType: !1418, size: 8, offset: 1200)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1406, file: !1407, line: 545, baseType: !1418, size: 8, offset: 1208)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1406, file: !1407, line: 546, baseType: !1418, size: 8, offset: 1216)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1406, file: !1407, line: 547, baseType: !1418, size: 8, offset: 1224)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1406, file: !1407, line: 548, baseType: !1418, size: 8, offset: 1232)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1406, file: !1407, line: 549, baseType: !1418, size: 8, offset: 1240)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1406, file: !1407, line: 550, baseType: !1418, size: 8, offset: 1248)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1406, file: !1407, line: 551, baseType: !1418, size: 8, offset: 1256)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1406, file: !1407, line: 552, baseType: !1418, size: 8, offset: 1264)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1406, file: !1407, line: 553, baseType: !1418, size: 8, offset: 1272)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1406, file: !1407, line: 554, baseType: !1418, size: 8, offset: 1280)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1406, file: !1407, line: 555, baseType: !1418, size: 8, offset: 1288)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1406, file: !1407, line: 556, baseType: !1418, size: 8, offset: 1296)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1406, file: !1407, line: 557, baseType: !1418, size: 8, offset: 1304)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1406, file: !1407, line: 558, baseType: !1418, size: 8, offset: 1312)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1406, file: !1407, line: 559, baseType: !1418, size: 8, offset: 1320)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1406, file: !1407, line: 560, baseType: !1418, size: 8, offset: 1328)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1406, file: !1407, line: 561, baseType: !1418, size: 8, offset: 1336)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1406, file: !1407, line: 562, baseType: !1418, size: 8, offset: 1344)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1406, file: !1407, line: 563, baseType: !1418, size: 8, offset: 1352)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1406, file: !1407, line: 564, baseType: !1418, size: 8, offset: 1360)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1406, file: !1407, line: 565, baseType: !1418, size: 8, offset: 1368)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1406, file: !1407, line: 566, baseType: !1418, size: 8, offset: 1376)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1406, file: !1407, line: 567, baseType: !1418, size: 8, offset: 1384)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1406, file: !1407, line: 568, baseType: !1418, size: 8, offset: 1392)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1406, file: !1407, line: 569, baseType: !1418, size: 8, offset: 1400)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1406, file: !1407, line: 570, baseType: !1418, size: 8, offset: 1408)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1406, file: !1407, line: 571, baseType: !1418, size: 8, offset: 1416)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1406, file: !1407, line: 572, baseType: !1418, size: 8, offset: 1424)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1406, file: !1407, line: 573, baseType: !1418, size: 8, offset: 1432)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1406, file: !1407, line: 574, baseType: !1418, size: 8, offset: 1440)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !507, file: !151, line: 3405, baseType: !1574, size: 384)
!1574 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !151, line: 3352, size: 384, elements: !1575)
!1575 = !{!1576, !1577}
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1574, file: !151, line: 3353, baseType: !543, size: 192)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1574, file: !151, line: 3356, baseType: !1578, size: 192, offset: 192)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1407, line: 578, size: 192, elements: !1579)
!1579 = !{!1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1578, file: !1407, line: 580, baseType: !440, size: 32)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1578, file: !1407, line: 581, baseType: !440, size: 32, offset: 32)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1578, file: !1407, line: 582, baseType: !440, size: 32, offset: 64)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1578, file: !1407, line: 583, baseType: !440, size: 32, offset: 96)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1578, file: !1407, line: 584, baseType: !622, size: 8, offset: 128)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1578, file: !1407, line: 585, baseType: !622, size: 8, offset: 136)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1578, file: !1407, line: 586, baseType: !622, size: 8, offset: 144)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1578, file: !1407, line: 587, baseType: !622, size: 8, offset: 152)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1578, file: !1407, line: 588, baseType: !622, size: 8, offset: 160)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1578, file: !1407, line: 589, baseType: !622, size: 8, offset: 168)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1578, file: !1407, line: 590, baseType: !622, size: 8, offset: 176)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !482, file: !472, line: 739, baseType: !1592, size: 448)
!1592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !472, line: 350, size: 448, elements: !1593)
!1593 = !{!1594, !1600}
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1592, file: !472, line: 353, baseType: !1595, size: 384)
!1595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !472, line: 333, size: 384, elements: !1596)
!1596 = !{!1597, !1598, !1599}
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1595, file: !472, line: 336, baseType: !485, size: 256)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1595, file: !472, line: 343, baseType: !1121, size: 64, offset: 256)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1595, file: !472, line: 344, baseType: !1128, size: 64, offset: 320)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1592, file: !472, line: 359, baseType: !1084, size: 64, offset: 384)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !482, file: !472, line: 740, baseType: !1602, size: 512)
!1602 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !472, line: 365, size: 512, elements: !1603)
!1603 = !{!1604, !1605, !1606}
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1602, file: !472, line: 368, baseType: !1595, size: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1602, file: !472, line: 373, baseType: !505, size: 64, offset: 384)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1602, file: !472, line: 374, baseType: !505, size: 64, offset: 448)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !482, file: !472, line: 741, baseType: !1608, size: 576)
!1608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !472, line: 380, size: 576, elements: !1609)
!1609 = !{!1610, !1611}
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1608, file: !472, line: 383, baseType: !1602, size: 512)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1608, file: !472, line: 389, baseType: !1084, size: 64, offset: 512)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !482, file: !472, line: 742, baseType: !1613, size: 320)
!1613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !472, line: 395, size: 320, elements: !1614)
!1614 = !{!1615, !1616}
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1613, file: !472, line: 397, baseType: !485, size: 256)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1613, file: !472, line: 400, baseType: !469, size: 64, offset: 256)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !482, file: !472, line: 743, baseType: !1618, size: 448)
!1618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !472, line: 406, size: 448, elements: !1619)
!1619 = !{!1620, !1621, !1622, !1623}
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1618, file: !472, line: 408, baseType: !485, size: 256)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1618, file: !472, line: 412, baseType: !505, size: 64, offset: 256)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1618, file: !472, line: 420, baseType: !505, size: 64, offset: 320)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1618, file: !472, line: 423, baseType: !469, size: 64, offset: 384)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !482, file: !472, line: 744, baseType: !1625, size: 384)
!1625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !472, line: 429, size: 384, elements: !1626)
!1626 = !{!1627, !1628, !1629}
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1625, file: !472, line: 431, baseType: !485, size: 256)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1625, file: !472, line: 434, baseType: !505, size: 64, offset: 256)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1625, file: !472, line: 437, baseType: !469, size: 64, offset: 320)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !482, file: !472, line: 745, baseType: !1631, size: 384)
!1631 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !472, line: 443, size: 384, elements: !1632)
!1632 = !{!1633, !1634, !1635}
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1631, file: !472, line: 445, baseType: !485, size: 256)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1631, file: !472, line: 449, baseType: !505, size: 64, offset: 256)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1631, file: !472, line: 453, baseType: !469, size: 64, offset: 320)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !482, file: !472, line: 746, baseType: !1637, size: 320)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !472, line: 459, size: 320, elements: !1638)
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1637, file: !472, line: 461, baseType: !485, size: 256)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1637, file: !472, line: 464, baseType: !505, size: 64, offset: 256)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !482, file: !472, line: 747, baseType: !1642, size: 768)
!1642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !472, line: 469, size: 768, elements: !1643)
!1643 = !{!1644, !1645, !1646, !1647, !1648}
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1642, file: !472, line: 471, baseType: !485, size: 256)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1642, file: !472, line: 474, baseType: !7, size: 32, offset: 256)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1642, file: !472, line: 475, baseType: !7, size: 32, offset: 288)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1642, file: !472, line: 478, baseType: !505, size: 64, offset: 320)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1642, file: !472, line: 481, baseType: !1649, size: 384, offset: 384)
!1649 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1650, size: 384, elements: !603)
!1650 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !151, line: 1917, size: 384, elements: !1651)
!1651 = !{!1652, !1653, !1654}
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1650, file: !151, line: 1920, baseType: !1133, size: 256)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1650, file: !151, line: 1921, baseType: !505, size: 64, offset: 256)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1650, file: !151, line: 1922, baseType: !498, size: 32, offset: 320)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !482, file: !472, line: 748, baseType: !1656, size: 320)
!1656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !472, line: 487, size: 320, elements: !1657)
!1657 = !{!1658, !1659}
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1656, file: !472, line: 490, baseType: !485, size: 256)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1656, file: !472, line: 494, baseType: !440, size: 32, offset: 256)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !482, file: !472, line: 749, baseType: !1661, size: 384)
!1661 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !472, line: 500, size: 384, elements: !1662)
!1662 = !{!1663, !1664, !1665}
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1661, file: !472, line: 502, baseType: !485, size: 256)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1661, file: !472, line: 506, baseType: !469, size: 64, offset: 256)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1661, file: !472, line: 510, baseType: !469, size: 64, offset: 320)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !482, file: !472, line: 750, baseType: !1667, size: 320)
!1667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !472, line: 529, size: 320, elements: !1668)
!1668 = !{!1669, !1670}
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1667, file: !472, line: 531, baseType: !485, size: 256)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1667, file: !472, line: 540, baseType: !469, size: 64, offset: 256)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !482, file: !472, line: 751, baseType: !1672, size: 704)
!1672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !472, line: 546, size: 704, elements: !1673)
!1673 = !{!1674, !1675, !1676, !1677, !1678, !1679, !1680}
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1672, file: !472, line: 549, baseType: !1602, size: 512)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1672, file: !472, line: 553, baseType: !702, size: 64, offset: 512)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1672, file: !472, line: 557, baseType: !622, size: 8, offset: 576)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1672, file: !472, line: 558, baseType: !622, size: 8, offset: 584)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1672, file: !472, line: 559, baseType: !622, size: 8, offset: 592)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1672, file: !472, line: 560, baseType: !622, size: 8, offset: 600)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1672, file: !472, line: 566, baseType: !1084, size: 64, offset: 640)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !482, file: !472, line: 752, baseType: !1682, size: 384)
!1682 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !472, line: 571, size: 384, elements: !1683)
!1683 = !{!1684, !1685}
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1682, file: !472, line: 573, baseType: !1613, size: 320)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1682, file: !472, line: 577, baseType: !505, size: 64, offset: 320)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !482, file: !472, line: 753, baseType: !1687, size: 576)
!1687 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !472, line: 600, size: 576, elements: !1688)
!1688 = !{!1689, !1690, !1691, !1692, !1701}
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1687, file: !472, line: 602, baseType: !1613, size: 320)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1687, file: !472, line: 605, baseType: !505, size: 64, offset: 320)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1687, file: !472, line: 609, baseType: !1034, size: 64, offset: 384)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1687, file: !472, line: 612, baseType: !1693, size: 64, offset: 448)
!1693 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !472, line: 581, size: 320, elements: !1695)
!1695 = !{!1696, !1697, !1698, !1699, !1700}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1694, file: !472, line: 583, baseType: !183, size: 32)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1694, file: !472, line: 586, baseType: !505, size: 64, offset: 64)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1694, file: !472, line: 589, baseType: !505, size: 64, offset: 128)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1694, file: !472, line: 592, baseType: !505, size: 64, offset: 192)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1694, file: !472, line: 595, baseType: !505, size: 64, offset: 256)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1687, file: !472, line: 616, baseType: !469, size: 64, offset: 512)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !482, file: !472, line: 754, baseType: !1703, size: 512)
!1703 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !472, line: 622, size: 512, elements: !1704)
!1704 = !{!1705, !1706, !1707, !1708}
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1703, file: !472, line: 624, baseType: !1613, size: 320)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1703, file: !472, line: 628, baseType: !505, size: 64, offset: 320)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1703, file: !472, line: 632, baseType: !505, size: 64, offset: 384)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1703, file: !472, line: 636, baseType: !505, size: 64, offset: 448)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !482, file: !472, line: 755, baseType: !1710, size: 704)
!1710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !472, line: 642, size: 704, elements: !1711)
!1711 = !{!1712, !1713, !1714, !1715}
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1710, file: !472, line: 644, baseType: !1703, size: 512)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1710, file: !472, line: 648, baseType: !505, size: 64, offset: 512)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1710, file: !472, line: 652, baseType: !505, size: 64, offset: 576)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1710, file: !472, line: 653, baseType: !505, size: 64, offset: 640)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !482, file: !472, line: 756, baseType: !1717, size: 448)
!1717 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !472, line: 663, size: 448, elements: !1718)
!1718 = !{!1719, !1720, !1721}
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1717, file: !472, line: 665, baseType: !1613, size: 320)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1717, file: !472, line: 668, baseType: !505, size: 64, offset: 320)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1717, file: !472, line: 673, baseType: !505, size: 64, offset: 384)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !482, file: !472, line: 757, baseType: !1723, size: 384)
!1723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !472, line: 694, size: 384, elements: !1724)
!1724 = !{!1725, !1726}
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1723, file: !472, line: 696, baseType: !1613, size: 320)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1723, file: !472, line: 699, baseType: !505, size: 64, offset: 320)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !482, file: !472, line: 758, baseType: !1728, size: 384)
!1728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !472, line: 681, size: 384, elements: !1729)
!1729 = !{!1730, !1731, !1732}
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1728, file: !472, line: 683, baseType: !485, size: 256)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1728, file: !472, line: 686, baseType: !505, size: 64, offset: 256)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1728, file: !472, line: 689, baseType: !505, size: 64, offset: 320)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !482, file: !472, line: 759, baseType: !1734, size: 384)
!1734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !472, line: 707, size: 384, elements: !1735)
!1735 = !{!1736, !1737, !1738}
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1734, file: !472, line: 709, baseType: !485, size: 256)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1734, file: !472, line: 712, baseType: !505, size: 64, offset: 256)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1734, file: !472, line: 712, baseType: !505, size: 64, offset: 320)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !482, file: !472, line: 760, baseType: !1740, size: 320)
!1740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !472, line: 718, size: 320, elements: !1741)
!1741 = !{!1742, !1743}
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1740, file: !472, line: 720, baseType: !485, size: 256)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1740, file: !472, line: 723, baseType: !505, size: 64, offset: 256)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !477, file: !472, line: 138, baseType: !476, size: 64, offset: 64)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !477, file: !472, line: 139, baseType: !476, size: 64, offset: 128)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !471, file: !472, line: 146, baseType: !475, size: 64, offset: 64)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !471, file: !472, line: 152, baseType: !469, size: 64, offset: 128)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !466, file: !135, line: 130, baseType: !676, size: 64)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !461, file: !135, line: 134, baseType: !782, size: 64, offset: 192)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !461, file: !135, line: 137, baseType: !505, size: 64, offset: 256)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !461, file: !135, line: 138, baseType: !498, size: 32, offset: 320)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !461, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !461, file: !135, line: 144, baseType: !440, size: 32, offset: 384)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !461, file: !135, line: 145, baseType: !440, size: 32, offset: 416)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !461, file: !135, line: 146, baseType: !1756, size: 64, offset: 448)
!1756 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !435)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !444, file: !135, line: 220, baseType: !447, size: 64, offset: 64)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !444, file: !135, line: 223, baseType: !782, size: 64, offset: 128)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !444, file: !135, line: 226, baseType: !436, size: 64, offset: 192)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !444, file: !135, line: 229, baseType: !1761, size: 128, offset: 256)
!1761 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1762, size: 128, elements: !746)
!1762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1763, size: 64)
!1763 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !444, file: !135, line: 232, baseType: !443, size: 64, offset: 384)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !444, file: !135, line: 233, baseType: !443, size: 64, offset: 448)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !444, file: !135, line: 238, baseType: !1767, size: 64, offset: 512)
!1767 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !1768)
!1768 = !{!1769, !1775}
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1767, file: !135, line: 236, baseType: !1770, size: 64)
!1770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1771, size: 64)
!1771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !1772)
!1772 = !{!1773, !1774}
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1771, file: !135, line: 275, baseType: !469, size: 64)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1771, file: !135, line: 278, baseType: !469, size: 64, offset: 64)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1767, file: !135, line: 237, baseType: !1776, size: 64)
!1776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1777, size: 64)
!1777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !1778)
!1778 = !{!1779, !1780, !1781, !1782, !1783}
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1777, file: !135, line: 261, baseType: !676, size: 64)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1777, file: !135, line: 262, baseType: !676, size: 64, offset: 64)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1777, file: !135, line: 266, baseType: !676, size: 64, offset: 128)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1777, file: !135, line: 267, baseType: !676, size: 64, offset: 192)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1777, file: !135, line: 270, baseType: !440, size: 32, offset: 256)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !444, file: !135, line: 241, baseType: !1756, size: 64, offset: 576)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !444, file: !135, line: 244, baseType: !440, size: 32, offset: 640)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !444, file: !135, line: 247, baseType: !440, size: 32, offset: 672)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !444, file: !135, line: 250, baseType: !440, size: 32, offset: 704)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !444, file: !135, line: 253, baseType: !440, size: 32, offset: 736)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !444, file: !135, line: 256, baseType: !440, size: 32, offset: 768)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !437, file: !378, line: 111, baseType: !443, size: 64, offset: 128)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !437, file: !378, line: 114, baseType: !1792, size: 64, offset: 192)
!1792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !378, line: 41, size: 64, elements: !1793)
!1793 = !{!1794, !1795}
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1792, file: !378, line: 42, baseType: !377, size: 32)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1792, file: !378, line: 43, baseType: !7, size: 32, offset: 32)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !437, file: !378, line: 117, baseType: !7, size: 32, offset: 256)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !437, file: !378, line: 120, baseType: !7, size: 32, offset: 288)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !437, file: !378, line: 123, baseType: !1150, size: 64, offset: 320)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !437, file: !378, line: 126, baseType: !436, size: 64, offset: 384)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !437, file: !378, line: 129, baseType: !436, size: 64, offset: 448)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !437, file: !378, line: 132, baseType: !782, size: 64, offset: 512)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !437, file: !378, line: 139, baseType: !505, size: 64, offset: 576)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !437, file: !378, line: 143, baseType: !553, size: 128, offset: 640)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !437, file: !378, line: 146, baseType: !553, size: 128, offset: 768)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !437, file: !378, line: 148, baseType: !622, size: 8, offset: 896)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !437, file: !378, line: 149, baseType: !622, size: 8, offset: 904)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !437, file: !378, line: 153, baseType: !386, size: 32, offset: 928)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !437, file: !378, line: 156, baseType: !1809, size: 64, offset: 960)
!1809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1810, size: 64)
!1810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !378, line: 48, size: 320, elements: !1811)
!1811 = !{!1812, !1813, !1814, !1815}
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1810, file: !378, line: 50, baseType: !480, size: 64)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1810, file: !378, line: 59, baseType: !553, size: 128, offset: 64)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1810, file: !378, line: 64, baseType: !622, size: 8, offset: 192)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1810, file: !378, line: 67, baseType: !1809, size: 64, offset: 256)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !437, file: !378, line: 159, baseType: !1817, size: 64, offset: 1024)
!1817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1818, size: 64)
!1818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !378, line: 72, size: 256, elements: !1819)
!1819 = !{!1820, !1821, !1822, !1823}
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1818, file: !378, line: 74, baseType: !460, size: 64)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1818, file: !378, line: 77, baseType: !1817, size: 64, offset: 64)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1818, file: !378, line: 78, baseType: !1817, size: 64, offset: 128)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1818, file: !378, line: 81, baseType: !1817, size: 64, offset: 192)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !437, file: !378, line: 162, baseType: !622, size: 8, offset: 1088)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !437, file: !378, line: 166, baseType: !505, size: 64, offset: 1152)
!1826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !440, size: 64)
!1827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !979, size: 64)
!1828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!1829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1830, size: 64)
!1830 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !1831, line: 32, baseType: !1832)
!1831 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !1831, line: 32, size: 96, elements: !1833)
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1832, file: !1831, line: 32, baseType: !1835, size: 96)
!1835 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !1831, line: 31, baseType: !1836)
!1836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !1831, line: 31, size: 96, elements: !1837)
!1837 = !{!1838, !1839, !1840}
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1836, file: !1831, line: 31, baseType: !7, size: 32)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1836, file: !1831, line: 31, baseType: !7, size: 32, offset: 32)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1836, file: !1831, line: 31, baseType: !1841, size: 32, offset: 64)
!1841 = !DICompositeType(tag: DW_TAG_array_type, baseType: !440, size: 32, elements: !603)
!1842 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1843, size: 64)
!1843 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_heap", file: !135, line: 283, baseType: !1844)
!1844 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_heap", file: !135, line: 283, size: 128, elements: !1845)
!1845 = !{!1846}
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1844, file: !135, line: 283, baseType: !987, size: 128)
!1847 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1848, size: 64)
!1848 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !437)
!1849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1850, size: 64)
!1850 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1818)
!1851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1852, size: 64)
!1852 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !1853, line: 7, baseType: !1854)
!1853 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!1854 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !1855, line: 49, size: 1728, elements: !1856)
!1855 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!1856 = !{!1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1872, !1874, !1875, !1876, !1879, !1881, !1882, !1883, !1886, !1888, !1891, !1894, !1895, !1896, !1897, !1898}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1854, file: !1855, line: 51, baseType: !440, size: 32)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1854, file: !1855, line: 54, baseType: !767, size: 64, offset: 64)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1854, file: !1855, line: 55, baseType: !767, size: 64, offset: 128)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1854, file: !1855, line: 56, baseType: !767, size: 64, offset: 192)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1854, file: !1855, line: 57, baseType: !767, size: 64, offset: 256)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1854, file: !1855, line: 58, baseType: !767, size: 64, offset: 320)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1854, file: !1855, line: 59, baseType: !767, size: 64, offset: 384)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1854, file: !1855, line: 60, baseType: !767, size: 64, offset: 448)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1854, file: !1855, line: 61, baseType: !767, size: 64, offset: 512)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1854, file: !1855, line: 64, baseType: !767, size: 64, offset: 576)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1854, file: !1855, line: 65, baseType: !767, size: 64, offset: 640)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1854, file: !1855, line: 66, baseType: !767, size: 64, offset: 704)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1854, file: !1855, line: 68, baseType: !1870, size: 64, offset: 768)
!1870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1871, size: 64)
!1871 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !1855, line: 36, flags: DIFlagFwdDecl)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1854, file: !1855, line: 70, baseType: !1873, size: 64, offset: 832)
!1873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1854, size: 64)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1854, file: !1855, line: 72, baseType: !440, size: 32, offset: 896)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1854, file: !1855, line: 73, baseType: !440, size: 32, offset: 928)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1854, file: !1855, line: 74, baseType: !1877, size: 64, offset: 960)
!1877 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !1878, line: 152, baseType: !435)
!1878 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1854, file: !1855, line: 77, baseType: !1880, size: 16, offset: 1024)
!1880 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1854, file: !1855, line: 78, baseType: !1418, size: 8, offset: 1040)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1854, file: !1855, line: 79, baseType: !601, size: 8, offset: 1048)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1854, file: !1855, line: 81, baseType: !1884, size: 64, offset: 1088)
!1884 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1885, size: 64)
!1885 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !1855, line: 43, baseType: null)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1854, file: !1855, line: 89, baseType: !1887, size: 64, offset: 1152)
!1887 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !1878, line: 153, baseType: !435)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !1854, file: !1855, line: 91, baseType: !1889, size: 64, offset: 1216)
!1889 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1890, size: 64)
!1890 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !1855, line: 37, flags: DIFlagFwdDecl)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !1854, file: !1855, line: 92, baseType: !1892, size: 64, offset: 1280)
!1892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1893, size: 64)
!1893 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !1855, line: 38, flags: DIFlagFwdDecl)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !1854, file: !1855, line: 93, baseType: !1873, size: 64, offset: 1344)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !1854, file: !1855, line: 94, baseType: !782, size: 64, offset: 1408)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1854, file: !1855, line: 95, baseType: !1034, size: 64, offset: 1472)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1854, file: !1855, line: 96, baseType: !440, size: 32, offset: 1536)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1854, file: !1855, line: 98, baseType: !1899, size: 160, offset: 1568)
!1899 = !DICompositeType(tag: DW_TAG_array_type, baseType: !602, size: 160, elements: !1900)
!1900 = !{!1901}
!1901 = !DISubrange(count: 20)
!1902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1903, size: 64)
!1903 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !135, line: 152, baseType: !1904)
!1904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !135, line: 152, size: 128, elements: !1905)
!1905 = !{!1906}
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1904, file: !135, line: 152, baseType: !452, size: 128)
!1907 = !{!0}
!1908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1909, size: 64)
!1909 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !151, line: 5199, flags: DIFlagFwdDecl)
!1910 = !{i32 7, !"Dwarf Version", i32 4}
!1911 = !{i32 2, !"Debug Info Version", i32 3}
!1912 = !{i32 1, !"wchar_size", i32 4}
!1913 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!1914 = distinct !DISubprogram(name: "flow_loop_nested_p", scope: !3, file: !3, line: 66, type: !1915, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!1915 = !DISubroutineType(types: !1916)
!1916 = !{!622, !1847, !1847}
!1917 = !{}
!1918 = !DILocalVariable(name: "outer", arg: 1, scope: !1914, file: !3, line: 66, type: !1847)
!1919 = !DILocation(line: 66, column: 40, scope: !1914)
!1920 = !DILocalVariable(name: "loop", arg: 2, scope: !1914, file: !3, line: 66, type: !1847)
!1921 = !DILocation(line: 66, column: 66, scope: !1914)
!1922 = !DILocalVariable(name: "odepth", scope: !1914, file: !3, line: 68, type: !7)
!1923 = !DILocation(line: 68, column: 12, scope: !1914)
!1924 = !DILocation(line: 68, column: 33, scope: !1914)
!1925 = !DILocation(line: 68, column: 21, scope: !1914)
!1926 = !DILocation(line: 70, column: 23, scope: !1914)
!1927 = !DILocation(line: 70, column: 11, scope: !1914)
!1928 = !DILocation(line: 70, column: 31, scope: !1914)
!1929 = !DILocation(line: 70, column: 29, scope: !1914)
!1930 = !DILocation(line: 71, column: 4, scope: !1914)
!1931 = !DILocation(line: 71, column: 7, scope: !1914)
!1932 = !DILocation(line: 71, column: 55, scope: !1914)
!1933 = !DILocation(line: 71, column: 52, scope: !1914)
!1934 = !DILocation(line: 0, scope: !1914)
!1935 = !DILocation(line: 70, column: 10, scope: !1914)
!1936 = !DILocation(line: 70, column: 3, scope: !1914)
!1937 = distinct !DISubprogram(name: "loop_depth", scope: !378, file: !378, line: 425, type: !1938, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!1938 = !DISubroutineType(types: !1939)
!1939 = !{!7, !1847}
!1940 = !DILocalVariable(name: "loop", arg: 1, scope: !1937, file: !378, line: 425, type: !1847)
!1941 = !DILocation(line: 425, column: 32, scope: !1937)
!1942 = !DILocation(line: 427, column: 10, scope: !1937)
!1943 = !DILocation(line: 427, column: 3, scope: !1937)
!1944 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !378, file: !378, line: 85, type: !1945, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!1945 = !DISubroutineType(types: !1946)
!1946 = !{!1162, !1947, !7}
!1947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1948, size: 64)
!1948 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1155)
!1949 = !DILocalVariable(name: "vec_", arg: 1, scope: !1944, file: !378, line: 85, type: !1947)
!1950 = !DILocation(line: 85, column: 1, scope: !1944)
!1951 = !DILocalVariable(name: "ix_", arg: 2, scope: !1944, file: !378, line: 85, type: !7)
!1952 = !DILocation(line: 0, scope: !1944)
!1953 = distinct !DISubprogram(name: "superloop_at_depth", scope: !3, file: !3, line: 78, type: !1954, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!1954 = !DISubroutineType(types: !1955)
!1955 = !{!436, !436, !7}
!1956 = !DILocalVariable(name: "loop", arg: 1, scope: !1953, file: !3, line: 78, type: !436)
!1957 = !DILocation(line: 78, column: 34, scope: !1953)
!1958 = !DILocalVariable(name: "depth", arg: 2, scope: !1953, file: !3, line: 78, type: !7)
!1959 = !DILocation(line: 78, column: 49, scope: !1953)
!1960 = !DILocalVariable(name: "ldepth", scope: !1953, file: !3, line: 80, type: !7)
!1961 = !DILocation(line: 80, column: 12, scope: !1953)
!1962 = !DILocation(line: 80, column: 33, scope: !1953)
!1963 = !DILocation(line: 80, column: 21, scope: !1953)
!1964 = !DILocation(line: 82, column: 3, scope: !1953)
!1965 = !DILocation(line: 84, column: 7, scope: !1966)
!1966 = distinct !DILexicalBlock(scope: !1953, file: !3, line: 84, column: 7)
!1967 = !DILocation(line: 84, column: 16, scope: !1966)
!1968 = !DILocation(line: 84, column: 13, scope: !1966)
!1969 = !DILocation(line: 84, column: 7, scope: !1953)
!1970 = !DILocation(line: 85, column: 12, scope: !1966)
!1971 = !DILocation(line: 85, column: 5, scope: !1966)
!1972 = !DILocation(line: 87, column: 10, scope: !1953)
!1973 = !DILocation(line: 87, column: 3, scope: !1953)
!1974 = !DILocation(line: 88, column: 1, scope: !1953)
!1975 = distinct !DISubprogram(name: "flow_loop_dump", scope: !3, file: !3, line: 112, type: !1976, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!1976 = !DISubroutineType(types: !1977)
!1977 = !{null, !1847, !1851, !1978, !440}
!1978 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1979, size: 64)
!1979 = !DISubroutineType(types: !1980)
!1980 = !{null, !1847, !1851, !440}
!1981 = !DILocalVariable(name: "loop", arg: 1, scope: !1975, file: !3, line: 112, type: !1847)
!1982 = !DILocation(line: 112, column: 36, scope: !1975)
!1983 = !DILocalVariable(name: "file", arg: 2, scope: !1975, file: !3, line: 112, type: !1851)
!1984 = !DILocation(line: 112, column: 48, scope: !1975)
!1985 = !DILocalVariable(name: "loop_dump_aux", arg: 3, scope: !1975, file: !3, line: 113, type: !1978)
!1986 = !DILocation(line: 113, column: 10, scope: !1975)
!1987 = !DILocalVariable(name: "verbose", arg: 4, scope: !1975, file: !3, line: 114, type: !440)
!1988 = !DILocation(line: 114, column: 7, scope: !1975)
!1989 = !DILocalVariable(name: "bbs", scope: !1975, file: !3, line: 116, type: !1827)
!1990 = !DILocation(line: 116, column: 16, scope: !1975)
!1991 = !DILocalVariable(name: "i", scope: !1975, file: !3, line: 117, type: !7)
!1992 = !DILocation(line: 117, column: 12, scope: !1975)
!1993 = !DILocalVariable(name: "latches", scope: !1975, file: !3, line: 118, type: !1902)
!1994 = !DILocation(line: 118, column: 21, scope: !1975)
!1995 = !DILocalVariable(name: "e", scope: !1975, file: !3, line: 119, type: !459)
!1996 = !DILocation(line: 119, column: 8, scope: !1975)
!1997 = !DILocation(line: 121, column: 9, scope: !1998)
!1998 = distinct !DILexicalBlock(scope: !1975, file: !3, line: 121, column: 7)
!1999 = !DILocation(line: 121, column: 14, scope: !1998)
!2000 = !DILocation(line: 121, column: 19, scope: !1998)
!2001 = !DILocation(line: 121, column: 25, scope: !1998)
!2002 = !DILocation(line: 121, column: 7, scope: !1975)
!2003 = !DILocation(line: 122, column: 5, scope: !1998)
!2004 = !DILocation(line: 124, column: 12, scope: !1975)
!2005 = !DILocation(line: 124, column: 38, scope: !1975)
!2006 = !DILocation(line: 124, column: 44, scope: !1975)
!2007 = !DILocation(line: 124, column: 3, scope: !1975)
!2008 = !DILocation(line: 126, column: 12, scope: !1975)
!2009 = !DILocation(line: 126, column: 37, scope: !1975)
!2010 = !DILocation(line: 126, column: 43, scope: !1975)
!2011 = !DILocation(line: 126, column: 51, scope: !1975)
!2012 = !DILocation(line: 126, column: 3, scope: !1975)
!2013 = !DILocation(line: 127, column: 7, scope: !2014)
!2014 = distinct !DILexicalBlock(scope: !1975, file: !3, line: 127, column: 7)
!2015 = !DILocation(line: 127, column: 13, scope: !2014)
!2016 = !DILocation(line: 127, column: 7, scope: !1975)
!2017 = !DILocation(line: 128, column: 14, scope: !2014)
!2018 = !DILocation(line: 128, column: 34, scope: !2014)
!2019 = !DILocation(line: 128, column: 40, scope: !2014)
!2020 = !DILocation(line: 128, column: 47, scope: !2014)
!2021 = !DILocation(line: 128, column: 5, scope: !2014)
!2022 = !DILocation(line: 131, column: 16, scope: !2023)
!2023 = distinct !DILexicalBlock(scope: !2014, file: !3, line: 130, column: 5)
!2024 = !DILocation(line: 131, column: 7, scope: !2023)
!2025 = !DILocation(line: 132, column: 39, scope: !2023)
!2026 = !DILocation(line: 132, column: 17, scope: !2023)
!2027 = !DILocation(line: 132, column: 15, scope: !2023)
!2028 = !DILocation(line: 133, column: 14, scope: !2029)
!2029 = distinct !DILexicalBlock(scope: !2023, file: !3, line: 133, column: 7)
!2030 = !DILocation(line: 133, column: 12, scope: !2029)
!2031 = !DILocation(line: 133, column: 19, scope: !2032)
!2032 = distinct !DILexicalBlock(scope: !2029, file: !3, line: 133, column: 7)
!2033 = !DILocation(line: 133, column: 7, scope: !2029)
!2034 = !DILocation(line: 134, column: 11, scope: !2032)
!2035 = !DILocation(line: 134, column: 24, scope: !2032)
!2036 = !DILocation(line: 134, column: 27, scope: !2032)
!2037 = !DILocation(line: 134, column: 32, scope: !2032)
!2038 = !DILocation(line: 134, column: 2, scope: !2032)
!2039 = !DILocation(line: 133, column: 55, scope: !2032)
!2040 = !DILocation(line: 133, column: 7, scope: !2032)
!2041 = distinct !{!2041, !2033, !2042}
!2042 = !DILocation(line: 134, column: 37, scope: !2029)
!2043 = !DILocation(line: 135, column: 7, scope: !2023)
!2044 = !DILocation(line: 136, column: 16, scope: !2023)
!2045 = !DILocation(line: 136, column: 7, scope: !2023)
!2046 = !DILocation(line: 139, column: 12, scope: !1975)
!2047 = !DILocation(line: 140, column: 17, scope: !1975)
!2048 = !DILocation(line: 140, column: 5, scope: !1975)
!2049 = !DILocation(line: 140, column: 44, scope: !1975)
!2050 = !DILocation(line: 140, column: 32, scope: !1975)
!2051 = !DILocation(line: 141, column: 25, scope: !1975)
!2052 = !DILocation(line: 141, column: 13, scope: !1975)
!2053 = !DILocation(line: 141, column: 32, scope: !1975)
!2054 = !DILocation(line: 140, column: 24, scope: !1975)
!2055 = !DILocation(line: 139, column: 3, scope: !1975)
!2056 = !DILocation(line: 143, column: 12, scope: !1975)
!2057 = !DILocation(line: 143, column: 3, scope: !1975)
!2058 = !DILocation(line: 144, column: 24, scope: !1975)
!2059 = !DILocation(line: 144, column: 9, scope: !1975)
!2060 = !DILocation(line: 144, column: 7, scope: !1975)
!2061 = !DILocation(line: 145, column: 10, scope: !2062)
!2062 = distinct !DILexicalBlock(scope: !1975, file: !3, line: 145, column: 3)
!2063 = !DILocation(line: 145, column: 8, scope: !2062)
!2064 = !DILocation(line: 145, column: 15, scope: !2065)
!2065 = distinct !DILexicalBlock(scope: !2062, file: !3, line: 145, column: 3)
!2066 = !DILocation(line: 145, column: 19, scope: !2065)
!2067 = !DILocation(line: 145, column: 25, scope: !2065)
!2068 = !DILocation(line: 145, column: 17, scope: !2065)
!2069 = !DILocation(line: 145, column: 3, scope: !2062)
!2070 = !DILocation(line: 146, column: 14, scope: !2065)
!2071 = !DILocation(line: 146, column: 27, scope: !2065)
!2072 = !DILocation(line: 146, column: 31, scope: !2065)
!2073 = !DILocation(line: 146, column: 35, scope: !2065)
!2074 = !DILocation(line: 146, column: 5, scope: !2065)
!2075 = !DILocation(line: 145, column: 37, scope: !2065)
!2076 = !DILocation(line: 145, column: 3, scope: !2065)
!2077 = distinct !{!2077, !2069, !2078}
!2078 = !DILocation(line: 146, column: 40, scope: !2062)
!2079 = !DILocation(line: 147, column: 9, scope: !1975)
!2080 = !DILocation(line: 147, column: 3, scope: !1975)
!2081 = !DILocation(line: 148, column: 12, scope: !1975)
!2082 = !DILocation(line: 148, column: 3, scope: !1975)
!2083 = !DILocation(line: 150, column: 7, scope: !2084)
!2084 = distinct !DILexicalBlock(scope: !1975, file: !3, line: 150, column: 7)
!2085 = !DILocation(line: 150, column: 7, scope: !1975)
!2086 = !DILocation(line: 151, column: 5, scope: !2084)
!2087 = !DILocation(line: 151, column: 20, scope: !2084)
!2088 = !DILocation(line: 151, column: 26, scope: !2084)
!2089 = !DILocation(line: 151, column: 32, scope: !2084)
!2090 = !DILocation(line: 152, column: 1, scope: !1975)
!2091 = distinct !DISubprogram(name: "get_loop_latch_edges", scope: !3, file: !3, line: 93, type: !2092, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2092 = !DISubroutineType(types: !2093)
!2093 = !{!1902, !1847}
!2094 = !DILocalVariable(name: "loop", arg: 1, scope: !2091, file: !3, line: 93, type: !1847)
!2095 = !DILocation(line: 93, column: 42, scope: !2091)
!2096 = !DILocalVariable(name: "ei", scope: !2091, file: !3, line: 95, type: !2097)
!2097 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !135, line: 682, baseType: !2098)
!2098 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !135, line: 679, size: 128, elements: !2099)
!2099 = !{!2100, !2101}
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2098, file: !135, line: 680, baseType: !7, size: 32)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !2098, file: !135, line: 681, baseType: !2102, size: 64, offset: 64)
!2102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !447, size: 64)
!2103 = !DILocation(line: 95, column: 17, scope: !2091)
!2104 = !DILocalVariable(name: "e", scope: !2091, file: !3, line: 96, type: !459)
!2105 = !DILocation(line: 96, column: 8, scope: !2091)
!2106 = !DILocalVariable(name: "ret", scope: !2091, file: !3, line: 97, type: !1902)
!2107 = !DILocation(line: 97, column: 21, scope: !2091)
!2108 = !DILocation(line: 99, column: 3, scope: !2109)
!2109 = distinct !DILexicalBlock(scope: !2091, file: !3, line: 99, column: 3)
!2110 = !DILocation(line: 99, column: 3, scope: !2111)
!2111 = distinct !DILexicalBlock(scope: !2109, file: !3, line: 99, column: 3)
!2112 = !DILocation(line: 101, column: 43, scope: !2113)
!2113 = distinct !DILexicalBlock(scope: !2114, file: !3, line: 101, column: 11)
!2114 = distinct !DILexicalBlock(scope: !2111, file: !3, line: 100, column: 5)
!2115 = !DILocation(line: 101, column: 46, scope: !2113)
!2116 = !DILocation(line: 101, column: 51, scope: !2113)
!2117 = !DILocation(line: 101, column: 57, scope: !2113)
!2118 = !DILocation(line: 101, column: 11, scope: !2113)
!2119 = !DILocation(line: 101, column: 11, scope: !2114)
!2120 = !DILocation(line: 102, column: 2, scope: !2113)
!2121 = !DILocation(line: 103, column: 5, scope: !2114)
!2122 = distinct !{!2122, !2108, !2123}
!2123 = !DILocation(line: 103, column: 5, scope: !2109)
!2124 = !DILocation(line: 105, column: 10, scope: !2091)
!2125 = !DILocation(line: 105, column: 3, scope: !2091)
!2126 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !135, file: !135, line: 150, type: !2127, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2127 = !DISubroutineType(types: !2128)
!2128 = !{!440, !2129, !7, !2131}
!2129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2130, size: 64)
!2130 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !452)
!2131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !459, size: 64)
!2132 = !DILocalVariable(name: "vec_", arg: 1, scope: !2126, file: !135, line: 150, type: !2129)
!2133 = !DILocation(line: 150, column: 1, scope: !2126)
!2134 = !DILocalVariable(name: "ix_", arg: 2, scope: !2126, file: !135, line: 150, type: !7)
!2135 = !DILocalVariable(name: "ptr", arg: 3, scope: !2126, file: !135, line: 150, type: !2131)
!2136 = !DILocation(line: 150, column: 1, scope: !2137)
!2137 = distinct !DILexicalBlock(scope: !2126, file: !135, line: 150, column: 1)
!2138 = !DILocation(line: 150, column: 1, scope: !2139)
!2139 = distinct !DILexicalBlock(scope: !2137, file: !135, line: 150, column: 1)
!2140 = !DILocation(line: 150, column: 1, scope: !2141)
!2141 = distinct !DILexicalBlock(scope: !2137, file: !135, line: 150, column: 1)
!2142 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !135, file: !135, line: 152, type: !2143, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2143 = !DISubroutineType(types: !2144)
!2144 = !{null, !2145}
!2145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1902, size: 64)
!2146 = !DILocalVariable(name: "vec_", arg: 1, scope: !2142, file: !135, line: 152, type: !2145)
!2147 = !DILocation(line: 152, column: 1, scope: !2142)
!2148 = !DILocation(line: 152, column: 1, scope: !2149)
!2149 = distinct !DILexicalBlock(scope: !2142, file: !135, line: 152, column: 1)
!2150 = distinct !DISubprogram(name: "loop_outer", scope: !378, file: !378, line: 434, type: !2151, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2151 = !DISubroutineType(types: !2152)
!2152 = !{!436, !1847}
!2153 = !DILocalVariable(name: "loop", arg: 1, scope: !2150, file: !378, line: 434, type: !1847)
!2154 = !DILocation(line: 434, column: 32, scope: !2150)
!2155 = !DILocalVariable(name: "n", scope: !2150, file: !378, line: 436, type: !7)
!2156 = !DILocation(line: 436, column: 12, scope: !2150)
!2157 = !DILocation(line: 436, column: 16, scope: !2150)
!2158 = !DILocation(line: 438, column: 7, scope: !2159)
!2159 = distinct !DILexicalBlock(scope: !2150, file: !378, line: 438, column: 7)
!2160 = !DILocation(line: 438, column: 9, scope: !2159)
!2161 = !DILocation(line: 438, column: 7, scope: !2150)
!2162 = !DILocation(line: 439, column: 5, scope: !2159)
!2163 = !DILocation(line: 441, column: 10, scope: !2150)
!2164 = !DILocation(line: 441, column: 3, scope: !2150)
!2165 = !DILocation(line: 442, column: 1, scope: !2150)
!2166 = distinct !DISubprogram(name: "get_loop_body", scope: !3, file: !3, line: 813, type: !2167, scopeLine: 814, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2167 = !DISubroutineType(types: !2168)
!2168 = !{!1827, !1847}
!2169 = !DILocalVariable(name: "loop", arg: 1, scope: !2166, file: !3, line: 813, type: !1847)
!2170 = !DILocation(line: 813, column: 35, scope: !2166)
!2171 = !DILocalVariable(name: "body", scope: !2166, file: !3, line: 815, type: !1827)
!2172 = !DILocation(line: 815, column: 16, scope: !2166)
!2173 = !DILocalVariable(name: "bb", scope: !2166, file: !3, line: 815, type: !979)
!2174 = !DILocation(line: 815, column: 22, scope: !2166)
!2175 = !DILocalVariable(name: "tv", scope: !2166, file: !3, line: 816, type: !7)
!2176 = !DILocation(line: 816, column: 12, scope: !2166)
!2177 = !DILocation(line: 818, column: 3, scope: !2166)
!2178 = !DILocation(line: 820, column: 10, scope: !2166)
!2179 = !DILocation(line: 820, column: 8, scope: !2166)
!2180 = !DILocation(line: 822, column: 7, scope: !2181)
!2181 = distinct !DILexicalBlock(scope: !2166, file: !3, line: 822, column: 7)
!2182 = !DILocation(line: 822, column: 13, scope: !2181)
!2183 = !DILocation(line: 822, column: 22, scope: !2181)
!2184 = !DILocation(line: 822, column: 19, scope: !2181)
!2185 = !DILocation(line: 822, column: 7, scope: !2166)
!2186 = !DILocation(line: 826, column: 7, scope: !2187)
!2187 = distinct !DILexicalBlock(scope: !2181, file: !3, line: 823, column: 5)
!2188 = !DILocation(line: 827, column: 20, scope: !2187)
!2189 = !DILocation(line: 827, column: 26, scope: !2187)
!2190 = !DILocation(line: 827, column: 7, scope: !2187)
!2191 = !DILocation(line: 827, column: 14, scope: !2187)
!2192 = !DILocation(line: 827, column: 18, scope: !2187)
!2193 = !DILocation(line: 828, column: 20, scope: !2187)
!2194 = !DILocation(line: 828, column: 7, scope: !2187)
!2195 = !DILocation(line: 828, column: 14, scope: !2187)
!2196 = !DILocation(line: 828, column: 18, scope: !2187)
!2197 = !DILocation(line: 829, column: 7, scope: !2198)
!2198 = distinct !DILexicalBlock(scope: !2187, file: !3, line: 829, column: 7)
!2199 = !DILocation(line: 829, column: 7, scope: !2200)
!2200 = distinct !DILexicalBlock(scope: !2198, file: !3, line: 829, column: 7)
!2201 = !DILocation(line: 830, column: 15, scope: !2200)
!2202 = !DILocation(line: 830, column: 2, scope: !2200)
!2203 = !DILocation(line: 830, column: 9, scope: !2200)
!2204 = !DILocation(line: 830, column: 13, scope: !2200)
!2205 = distinct !{!2205, !2197, !2206}
!2206 = !DILocation(line: 830, column: 15, scope: !2198)
!2207 = !DILocation(line: 831, column: 5, scope: !2187)
!2208 = !DILocation(line: 833, column: 35, scope: !2181)
!2209 = !DILocation(line: 833, column: 41, scope: !2181)
!2210 = !DILocation(line: 833, column: 47, scope: !2181)
!2211 = !DILocation(line: 833, column: 53, scope: !2181)
!2212 = !DILocation(line: 833, column: 10, scope: !2181)
!2213 = !DILocation(line: 833, column: 8, scope: !2181)
!2214 = !DILocation(line: 835, column: 3, scope: !2166)
!2215 = !DILocation(line: 836, column: 10, scope: !2166)
!2216 = !DILocation(line: 836, column: 3, scope: !2166)
!2217 = distinct !DISubprogram(name: "flow_loops_dump", scope: !3, file: !3, line: 158, type: !2218, scopeLine: 159, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2218 = !DISubroutineType(types: !2219)
!2219 = !{null, !1851, !1978, !440}
!2220 = !DILocalVariable(name: "file", arg: 1, scope: !2217, file: !3, line: 158, type: !1851)
!2221 = !DILocation(line: 158, column: 24, scope: !2217)
!2222 = !DILocalVariable(name: "loop_dump_aux", arg: 2, scope: !2217, file: !3, line: 158, type: !1978)
!2223 = !DILocation(line: 158, column: 37, scope: !2217)
!2224 = !DILocalVariable(name: "verbose", arg: 3, scope: !2217, file: !3, line: 158, type: !440)
!2225 = !DILocation(line: 158, column: 92, scope: !2217)
!2226 = !DILocalVariable(name: "li", scope: !2217, file: !3, line: 160, type: !2227)
!2227 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !378, line: 515, baseType: !2228)
!2228 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !378, line: 508, size: 128, elements: !2229)
!2229 = !{!2230, !2231}
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !2228, file: !378, line: 511, baseType: !1829, size: 64)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !2228, file: !378, line: 514, baseType: !7, size: 32, offset: 64)
!2232 = !DILocation(line: 160, column: 17, scope: !2217)
!2233 = !DILocalVariable(name: "loop", scope: !2217, file: !3, line: 161, type: !436)
!2234 = !DILocation(line: 161, column: 16, scope: !2217)
!2235 = !DILocation(line: 163, column: 8, scope: !2236)
!2236 = distinct !DILexicalBlock(scope: !2217, file: !3, line: 163, column: 7)
!2237 = !DILocation(line: 163, column: 22, scope: !2236)
!2238 = !DILocation(line: 163, column: 27, scope: !2236)
!2239 = !DILocation(line: 163, column: 7, scope: !2217)
!2240 = !DILocation(line: 164, column: 5, scope: !2236)
!2241 = !DILocation(line: 166, column: 12, scope: !2217)
!2242 = !DILocation(line: 166, column: 41, scope: !2217)
!2243 = !DILocation(line: 166, column: 3, scope: !2217)
!2244 = !DILocation(line: 168, column: 3, scope: !2245)
!2245 = distinct !DILexicalBlock(scope: !2217, file: !3, line: 168, column: 3)
!2246 = !DILocation(line: 168, column: 3, scope: !2247)
!2247 = distinct !DILexicalBlock(scope: !2245, file: !3, line: 168, column: 3)
!2248 = !DILocation(line: 170, column: 23, scope: !2249)
!2249 = distinct !DILexicalBlock(scope: !2247, file: !3, line: 169, column: 5)
!2250 = !DILocation(line: 170, column: 29, scope: !2249)
!2251 = !DILocation(line: 170, column: 35, scope: !2249)
!2252 = !DILocation(line: 170, column: 50, scope: !2249)
!2253 = !DILocation(line: 170, column: 7, scope: !2249)
!2254 = !DILocation(line: 171, column: 5, scope: !2249)
!2255 = distinct !{!2255, !2244, !2256}
!2256 = !DILocation(line: 171, column: 5, scope: !2245)
!2257 = !DILocation(line: 173, column: 7, scope: !2258)
!2258 = distinct !DILexicalBlock(scope: !2217, file: !3, line: 173, column: 7)
!2259 = !DILocation(line: 173, column: 7, scope: !2217)
!2260 = !DILocation(line: 174, column: 26, scope: !2258)
!2261 = !DILocation(line: 174, column: 5, scope: !2258)
!2262 = !DILocation(line: 175, column: 1, scope: !2217)
!2263 = distinct !DISubprogram(name: "number_of_loops", scope: !378, file: !378, line: 459, type: !2264, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2264 = !DISubroutineType(types: !2265)
!2265 = !{!7}
!2266 = !DILocation(line: 461, column: 8, scope: !2267)
!2267 = distinct !DILexicalBlock(scope: !2263, file: !378, line: 461, column: 7)
!2268 = !DILocation(line: 461, column: 7, scope: !2263)
!2269 = !DILocation(line: 462, column: 5, scope: !2267)
!2270 = !DILocation(line: 464, column: 10, scope: !2263)
!2271 = !DILocation(line: 464, column: 3, scope: !2263)
!2272 = !DILocation(line: 465, column: 1, scope: !2263)
!2273 = distinct !DISubprogram(name: "fel_init", scope: !378, file: !378, line: 535, type: !2274, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2274 = !DISubroutineType(types: !2275)
!2275 = !{null, !2276, !2277, !7}
!2276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2227, size: 64)
!2277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1162, size: 64)
!2278 = !DILocalVariable(name: "li", arg: 1, scope: !2273, file: !378, line: 535, type: !2276)
!2279 = !DILocation(line: 535, column: 26, scope: !2273)
!2280 = !DILocalVariable(name: "loop", arg: 2, scope: !2273, file: !378, line: 535, type: !2277)
!2281 = !DILocation(line: 535, column: 38, scope: !2273)
!2282 = !DILocalVariable(name: "flags", arg: 3, scope: !2273, file: !378, line: 535, type: !7)
!2283 = !DILocation(line: 535, column: 53, scope: !2273)
!2284 = !DILocalVariable(name: "aloop", scope: !2273, file: !378, line: 537, type: !436)
!2285 = !DILocation(line: 537, column: 16, scope: !2273)
!2286 = !DILocalVariable(name: "i", scope: !2273, file: !378, line: 538, type: !7)
!2287 = !DILocation(line: 538, column: 12, scope: !2273)
!2288 = !DILocalVariable(name: "mn", scope: !2273, file: !378, line: 539, type: !440)
!2289 = !DILocation(line: 539, column: 7, scope: !2273)
!2290 = !DILocation(line: 541, column: 3, scope: !2273)
!2291 = !DILocation(line: 541, column: 7, scope: !2273)
!2292 = !DILocation(line: 541, column: 11, scope: !2273)
!2293 = !DILocation(line: 542, column: 8, scope: !2294)
!2294 = distinct !DILexicalBlock(scope: !2273, file: !378, line: 542, column: 7)
!2295 = !DILocation(line: 542, column: 7, scope: !2273)
!2296 = !DILocation(line: 544, column: 7, scope: !2297)
!2297 = distinct !DILexicalBlock(scope: !2294, file: !378, line: 543, column: 5)
!2298 = !DILocation(line: 544, column: 11, scope: !2297)
!2299 = !DILocation(line: 544, column: 20, scope: !2297)
!2300 = !DILocation(line: 545, column: 8, scope: !2297)
!2301 = !DILocation(line: 545, column: 13, scope: !2297)
!2302 = !DILocation(line: 546, column: 7, scope: !2297)
!2303 = !DILocation(line: 549, column: 18, scope: !2273)
!2304 = !DILocation(line: 549, column: 3, scope: !2273)
!2305 = !DILocation(line: 549, column: 7, scope: !2273)
!2306 = !DILocation(line: 549, column: 16, scope: !2273)
!2307 = !DILocation(line: 550, column: 9, scope: !2273)
!2308 = !DILocation(line: 550, column: 15, scope: !2273)
!2309 = !DILocation(line: 550, column: 8, scope: !2273)
!2310 = !DILocation(line: 550, column: 6, scope: !2273)
!2311 = !DILocation(line: 552, column: 7, scope: !2312)
!2312 = distinct !DILexicalBlock(scope: !2273, file: !378, line: 552, column: 7)
!2313 = !DILocation(line: 552, column: 13, scope: !2312)
!2314 = !DILocation(line: 552, column: 7, scope: !2273)
!2315 = !DILocation(line: 554, column: 14, scope: !2316)
!2316 = distinct !DILexicalBlock(scope: !2317, file: !378, line: 554, column: 7)
!2317 = distinct !DILexicalBlock(scope: !2312, file: !378, line: 553, column: 5)
!2318 = !DILocation(line: 554, column: 12, scope: !2316)
!2319 = !DILocation(line: 554, column: 19, scope: !2320)
!2320 = distinct !DILexicalBlock(scope: !2316, file: !378, line: 554, column: 7)
!2321 = !DILocation(line: 554, column: 7, scope: !2316)
!2322 = !DILocation(line: 555, column: 6, scope: !2323)
!2323 = distinct !DILexicalBlock(scope: !2320, file: !378, line: 555, column: 6)
!2324 = !DILocation(line: 555, column: 12, scope: !2323)
!2325 = !DILocation(line: 556, column: 6, scope: !2323)
!2326 = !DILocation(line: 556, column: 9, scope: !2323)
!2327 = !DILocation(line: 556, column: 16, scope: !2323)
!2328 = !DILocation(line: 556, column: 22, scope: !2323)
!2329 = !DILocation(line: 557, column: 6, scope: !2323)
!2330 = !DILocation(line: 557, column: 9, scope: !2323)
!2331 = !DILocation(line: 557, column: 16, scope: !2323)
!2332 = !DILocation(line: 557, column: 23, scope: !2323)
!2333 = !DILocation(line: 557, column: 20, scope: !2323)
!2334 = !DILocation(line: 555, column: 6, scope: !2320)
!2335 = !DILocation(line: 558, column: 4, scope: !2323)
!2336 = !DILocation(line: 554, column: 75, scope: !2320)
!2337 = !DILocation(line: 554, column: 7, scope: !2320)
!2338 = distinct !{!2338, !2321, !2339}
!2339 = !DILocation(line: 558, column: 4, scope: !2316)
!2340 = !DILocation(line: 559, column: 5, scope: !2317)
!2341 = !DILocation(line: 560, column: 12, scope: !2342)
!2342 = distinct !DILexicalBlock(scope: !2312, file: !378, line: 560, column: 12)
!2343 = !DILocation(line: 560, column: 18, scope: !2342)
!2344 = !DILocation(line: 560, column: 12, scope: !2312)
!2345 = !DILocation(line: 563, column: 20, scope: !2346)
!2346 = distinct !DILexicalBlock(scope: !2347, file: !378, line: 563, column: 7)
!2347 = distinct !DILexicalBlock(scope: !2342, file: !378, line: 561, column: 5)
!2348 = !DILocation(line: 563, column: 35, scope: !2346)
!2349 = !DILocation(line: 563, column: 18, scope: !2346)
!2350 = !DILocation(line: 563, column: 12, scope: !2346)
!2351 = !DILocation(line: 564, column: 5, scope: !2352)
!2352 = distinct !DILexicalBlock(scope: !2346, file: !378, line: 563, column: 7)
!2353 = !DILocation(line: 564, column: 12, scope: !2352)
!2354 = !DILocation(line: 564, column: 18, scope: !2352)
!2355 = !DILocation(line: 563, column: 7, scope: !2346)
!2356 = !DILocation(line: 566, column: 2, scope: !2352)
!2357 = !DILocation(line: 565, column: 13, scope: !2352)
!2358 = !DILocation(line: 565, column: 20, scope: !2352)
!2359 = !DILocation(line: 565, column: 11, scope: !2352)
!2360 = !DILocation(line: 563, column: 7, scope: !2352)
!2361 = distinct !{!2361, !2355, !2362}
!2362 = !DILocation(line: 566, column: 2, scope: !2346)
!2363 = !DILocation(line: 568, column: 7, scope: !2347)
!2364 = !DILocation(line: 570, column: 8, scope: !2365)
!2365 = distinct !DILexicalBlock(scope: !2366, file: !378, line: 570, column: 8)
!2366 = distinct !DILexicalBlock(scope: !2347, file: !378, line: 569, column: 2)
!2367 = !DILocation(line: 570, column: 15, scope: !2365)
!2368 = !DILocation(line: 570, column: 22, scope: !2365)
!2369 = !DILocation(line: 570, column: 19, scope: !2365)
!2370 = !DILocation(line: 570, column: 8, scope: !2366)
!2371 = !DILocation(line: 571, column: 6, scope: !2365)
!2372 = !DILocation(line: 573, column: 8, scope: !2373)
!2373 = distinct !DILexicalBlock(scope: !2366, file: !378, line: 573, column: 8)
!2374 = !DILocation(line: 573, column: 15, scope: !2373)
!2375 = !DILocation(line: 573, column: 8, scope: !2366)
!2376 = !DILocation(line: 575, column: 21, scope: !2377)
!2377 = distinct !DILexicalBlock(scope: !2378, file: !378, line: 575, column: 8)
!2378 = distinct !DILexicalBlock(scope: !2373, file: !378, line: 574, column: 6)
!2379 = !DILocation(line: 575, column: 28, scope: !2377)
!2380 = !DILocation(line: 575, column: 19, scope: !2377)
!2381 = !DILocation(line: 575, column: 13, scope: !2377)
!2382 = !DILocation(line: 576, column: 6, scope: !2383)
!2383 = distinct !DILexicalBlock(scope: !2377, file: !378, line: 575, column: 8)
!2384 = !DILocation(line: 576, column: 13, scope: !2383)
!2385 = !DILocation(line: 576, column: 19, scope: !2383)
!2386 = !DILocation(line: 575, column: 8, scope: !2377)
!2387 = !DILocation(line: 578, column: 3, scope: !2383)
!2388 = !DILocation(line: 577, column: 14, scope: !2383)
!2389 = !DILocation(line: 577, column: 21, scope: !2383)
!2390 = !DILocation(line: 577, column: 12, scope: !2383)
!2391 = !DILocation(line: 575, column: 8, scope: !2383)
!2392 = distinct !{!2392, !2386, !2393}
!2393 = !DILocation(line: 578, column: 3, scope: !2377)
!2394 = !DILocation(line: 579, column: 6, scope: !2378)
!2395 = !DILocation(line: 580, column: 26, scope: !2396)
!2396 = distinct !DILexicalBlock(scope: !2373, file: !378, line: 580, column: 13)
!2397 = !DILocation(line: 580, column: 14, scope: !2396)
!2398 = !DILocation(line: 580, column: 13, scope: !2373)
!2399 = !DILocation(line: 581, column: 6, scope: !2396)
!2400 = !DILocation(line: 583, column: 26, scope: !2396)
!2401 = !DILocation(line: 583, column: 14, scope: !2396)
!2402 = !DILocation(line: 583, column: 12, scope: !2396)
!2403 = distinct !{!2403, !2363, !2404}
!2404 = !DILocation(line: 584, column: 2, scope: !2347)
!2405 = !DILocation(line: 585, column: 5, scope: !2347)
!2406 = !DILocation(line: 589, column: 15, scope: !2407)
!2407 = distinct !DILexicalBlock(scope: !2342, file: !378, line: 587, column: 5)
!2408 = !DILocation(line: 589, column: 30, scope: !2407)
!2409 = !DILocation(line: 589, column: 13, scope: !2407)
!2410 = !DILocation(line: 590, column: 7, scope: !2407)
!2411 = !DILocation(line: 592, column: 8, scope: !2412)
!2412 = distinct !DILexicalBlock(scope: !2413, file: !378, line: 592, column: 8)
!2413 = distinct !DILexicalBlock(scope: !2407, file: !378, line: 591, column: 2)
!2414 = !DILocation(line: 592, column: 15, scope: !2412)
!2415 = !DILocation(line: 592, column: 22, scope: !2412)
!2416 = !DILocation(line: 592, column: 19, scope: !2412)
!2417 = !DILocation(line: 592, column: 8, scope: !2413)
!2418 = !DILocation(line: 593, column: 6, scope: !2412)
!2419 = !DILocation(line: 595, column: 8, scope: !2420)
!2420 = distinct !DILexicalBlock(scope: !2413, file: !378, line: 595, column: 8)
!2421 = !DILocation(line: 595, column: 15, scope: !2420)
!2422 = !DILocation(line: 595, column: 21, scope: !2420)
!2423 = !DILocation(line: 595, column: 8, scope: !2413)
!2424 = !DILocation(line: 596, column: 14, scope: !2420)
!2425 = !DILocation(line: 596, column: 21, scope: !2420)
!2426 = !DILocation(line: 596, column: 12, scope: !2420)
!2427 = !DILocation(line: 596, column: 6, scope: !2420)
!2428 = !DILocation(line: 599, column: 8, scope: !2429)
!2429 = distinct !DILexicalBlock(scope: !2420, file: !378, line: 598, column: 6)
!2430 = !DILocation(line: 599, column: 15, scope: !2429)
!2431 = !DILocation(line: 599, column: 21, scope: !2429)
!2432 = !DILocation(line: 599, column: 29, scope: !2429)
!2433 = !DILocation(line: 599, column: 32, scope: !2429)
!2434 = !DILocation(line: 599, column: 39, scope: !2429)
!2435 = !DILocation(line: 599, column: 44, scope: !2429)
!2436 = !DILocation(line: 0, scope: !2429)
!2437 = !DILocation(line: 600, column: 23, scope: !2429)
!2438 = !DILocation(line: 600, column: 11, scope: !2429)
!2439 = !DILocation(line: 600, column: 9, scope: !2429)
!2440 = distinct !{!2440, !2428, !2441}
!2441 = !DILocation(line: 600, column: 28, scope: !2429)
!2442 = !DILocation(line: 601, column: 12, scope: !2443)
!2443 = distinct !DILexicalBlock(scope: !2429, file: !378, line: 601, column: 12)
!2444 = !DILocation(line: 601, column: 18, scope: !2443)
!2445 = !DILocation(line: 601, column: 12, scope: !2429)
!2446 = !DILocation(line: 602, column: 3, scope: !2443)
!2447 = !DILocation(line: 603, column: 16, scope: !2429)
!2448 = !DILocation(line: 603, column: 23, scope: !2429)
!2449 = !DILocation(line: 603, column: 14, scope: !2429)
!2450 = distinct !{!2450, !2410, !2451}
!2451 = !DILocation(line: 605, column: 2, scope: !2407)
!2452 = !DILocation(line: 608, column: 13, scope: !2273)
!2453 = !DILocation(line: 608, column: 17, scope: !2273)
!2454 = !DILocation(line: 608, column: 3, scope: !2273)
!2455 = !DILocation(line: 609, column: 1, scope: !2273)
!2456 = distinct !DISubprogram(name: "fel_next", scope: !378, file: !378, line: 518, type: !2457, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2457 = !DISubroutineType(types: !2458)
!2458 = !{null, !2276, !2277}
!2459 = !DILocalVariable(name: "li", arg: 1, scope: !2456, file: !378, line: 518, type: !2276)
!2460 = !DILocation(line: 518, column: 26, scope: !2456)
!2461 = !DILocalVariable(name: "loop", arg: 2, scope: !2456, file: !378, line: 518, type: !2277)
!2462 = !DILocation(line: 518, column: 38, scope: !2456)
!2463 = !DILocalVariable(name: "anum", scope: !2456, file: !378, line: 520, type: !440)
!2464 = !DILocation(line: 520, column: 7, scope: !2456)
!2465 = !DILocation(line: 522, column: 3, scope: !2456)
!2466 = !DILocation(line: 522, column: 10, scope: !2456)
!2467 = !DILocation(line: 524, column: 7, scope: !2468)
!2468 = distinct !DILexicalBlock(scope: !2456, file: !378, line: 523, column: 5)
!2469 = !DILocation(line: 524, column: 11, scope: !2468)
!2470 = !DILocation(line: 524, column: 14, scope: !2468)
!2471 = !DILocation(line: 525, column: 25, scope: !2468)
!2472 = !DILocation(line: 525, column: 15, scope: !2468)
!2473 = !DILocation(line: 525, column: 8, scope: !2468)
!2474 = !DILocation(line: 525, column: 13, scope: !2468)
!2475 = !DILocation(line: 526, column: 12, scope: !2476)
!2476 = distinct !DILexicalBlock(scope: !2468, file: !378, line: 526, column: 11)
!2477 = !DILocation(line: 526, column: 11, scope: !2476)
!2478 = !DILocation(line: 526, column: 11, scope: !2468)
!2479 = !DILocation(line: 527, column: 2, scope: !2476)
!2480 = distinct !{!2480, !2465, !2481}
!2481 = !DILocation(line: 528, column: 5, scope: !2456)
!2482 = !DILocation(line: 530, column: 3, scope: !2456)
!2483 = !DILocation(line: 531, column: 4, scope: !2456)
!2484 = !DILocation(line: 531, column: 9, scope: !2456)
!2485 = !DILocation(line: 532, column: 1, scope: !2456)
!2486 = distinct !DISubprogram(name: "flow_loops_cfg_dump", scope: !3, file: !3, line: 44, type: !2487, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2487 = !DISubroutineType(types: !2488)
!2488 = !{null, !1851}
!2489 = !DILocalVariable(name: "file", arg: 1, scope: !2486, file: !3, line: 44, type: !1851)
!2490 = !DILocation(line: 44, column: 28, scope: !2486)
!2491 = !DILocalVariable(name: "bb", scope: !2486, file: !3, line: 46, type: !979)
!2492 = !DILocation(line: 46, column: 15, scope: !2486)
!2493 = !DILocation(line: 48, column: 8, scope: !2494)
!2494 = distinct !DILexicalBlock(scope: !2486, file: !3, line: 48, column: 7)
!2495 = !DILocation(line: 48, column: 7, scope: !2486)
!2496 = !DILocation(line: 49, column: 5, scope: !2494)
!2497 = !DILocation(line: 51, column: 3, scope: !2498)
!2498 = distinct !DILexicalBlock(scope: !2486, file: !3, line: 51, column: 3)
!2499 = !DILocation(line: 51, column: 3, scope: !2500)
!2500 = distinct !DILexicalBlock(scope: !2498, file: !3, line: 51, column: 3)
!2501 = !DILocalVariable(name: "succ", scope: !2502, file: !3, line: 53, type: !459)
!2502 = distinct !DILexicalBlock(scope: !2500, file: !3, line: 52, column: 5)
!2503 = !DILocation(line: 53, column: 12, scope: !2502)
!2504 = !DILocalVariable(name: "ei", scope: !2502, file: !3, line: 54, type: !2097)
!2505 = !DILocation(line: 54, column: 21, scope: !2502)
!2506 = !DILocation(line: 56, column: 16, scope: !2502)
!2507 = !DILocation(line: 56, column: 40, scope: !2502)
!2508 = !DILocation(line: 56, column: 44, scope: !2502)
!2509 = !DILocation(line: 56, column: 7, scope: !2502)
!2510 = !DILocation(line: 57, column: 7, scope: !2511)
!2511 = distinct !DILexicalBlock(scope: !2502, file: !3, line: 57, column: 7)
!2512 = !DILocation(line: 57, column: 7, scope: !2513)
!2513 = distinct !DILexicalBlock(scope: !2511, file: !3, line: 57, column: 7)
!2514 = !DILocation(line: 58, column: 11, scope: !2513)
!2515 = !DILocation(line: 58, column: 24, scope: !2513)
!2516 = !DILocation(line: 58, column: 30, scope: !2513)
!2517 = !DILocation(line: 58, column: 36, scope: !2513)
!2518 = !DILocation(line: 58, column: 2, scope: !2513)
!2519 = distinct !{!2519, !2510, !2520}
!2520 = !DILocation(line: 58, column: 41, scope: !2511)
!2521 = !DILocation(line: 59, column: 16, scope: !2502)
!2522 = !DILocation(line: 59, column: 7, scope: !2502)
!2523 = !DILocation(line: 60, column: 5, scope: !2502)
!2524 = distinct !{!2524, !2497, !2525}
!2525 = !DILocation(line: 60, column: 5, scope: !2498)
!2526 = !DILocation(line: 61, column: 1, scope: !2486)
!2527 = distinct !DISubprogram(name: "flow_loop_free", scope: !3, file: !3, line: 180, type: !2528, scopeLine: 181, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2528 = !DISubroutineType(types: !2529)
!2529 = !{null, !436}
!2530 = !DILocalVariable(name: "loop", arg: 1, scope: !2527, file: !3, line: 180, type: !436)
!2531 = !DILocation(line: 180, column: 30, scope: !2527)
!2532 = !DILocalVariable(name: "exit", scope: !2527, file: !3, line: 182, type: !1817)
!2533 = !DILocation(line: 182, column: 21, scope: !2527)
!2534 = !DILocalVariable(name: "next", scope: !2527, file: !3, line: 182, type: !1817)
!2535 = !DILocation(line: 182, column: 28, scope: !2527)
!2536 = !DILocation(line: 184, column: 3, scope: !2527)
!2537 = !DILocation(line: 190, column: 15, scope: !2538)
!2538 = distinct !DILexicalBlock(scope: !2527, file: !3, line: 190, column: 3)
!2539 = !DILocation(line: 190, column: 21, scope: !2538)
!2540 = !DILocation(line: 190, column: 28, scope: !2538)
!2541 = !DILocation(line: 190, column: 13, scope: !2538)
!2542 = !DILocation(line: 190, column: 8, scope: !2538)
!2543 = !DILocation(line: 190, column: 34, scope: !2544)
!2544 = distinct !DILexicalBlock(scope: !2538, file: !3, line: 190, column: 3)
!2545 = !DILocation(line: 190, column: 42, scope: !2544)
!2546 = !DILocation(line: 190, column: 48, scope: !2544)
!2547 = !DILocation(line: 190, column: 39, scope: !2544)
!2548 = !DILocation(line: 190, column: 3, scope: !2538)
!2549 = !DILocation(line: 192, column: 14, scope: !2550)
!2550 = distinct !DILexicalBlock(scope: !2544, file: !3, line: 191, column: 5)
!2551 = !DILocation(line: 192, column: 20, scope: !2550)
!2552 = !DILocation(line: 192, column: 12, scope: !2550)
!2553 = !DILocation(line: 193, column: 20, scope: !2550)
!2554 = !DILocation(line: 193, column: 7, scope: !2550)
!2555 = !DILocation(line: 193, column: 13, scope: !2550)
!2556 = !DILocation(line: 193, column: 18, scope: !2550)
!2557 = !DILocation(line: 194, column: 20, scope: !2550)
!2558 = !DILocation(line: 194, column: 7, scope: !2550)
!2559 = !DILocation(line: 194, column: 13, scope: !2550)
!2560 = !DILocation(line: 194, column: 18, scope: !2550)
!2561 = !DILocation(line: 195, column: 5, scope: !2550)
!2562 = !DILocation(line: 190, column: 62, scope: !2544)
!2563 = !DILocation(line: 190, column: 60, scope: !2544)
!2564 = !DILocation(line: 190, column: 3, scope: !2544)
!2565 = distinct !{!2565, !2548, !2566}
!2566 = !DILocation(line: 195, column: 5, scope: !2538)
!2567 = !DILocation(line: 197, column: 13, scope: !2527)
!2568 = !DILocation(line: 197, column: 19, scope: !2527)
!2569 = !DILocation(line: 197, column: 3, scope: !2527)
!2570 = !DILocation(line: 198, column: 13, scope: !2527)
!2571 = !DILocation(line: 198, column: 3, scope: !2527)
!2572 = !DILocation(line: 199, column: 1, scope: !2527)
!2573 = distinct !DISubprogram(name: "VEC_loop_p_gc_free", scope: !378, file: !378, line: 87, type: !2574, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2574 = !DISubroutineType(types: !2575)
!2575 = !{null, !2576}
!2576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1150, size: 64)
!2577 = !DILocalVariable(name: "vec_", arg: 1, scope: !2573, file: !378, line: 87, type: !2576)
!2578 = !DILocation(line: 87, column: 1, scope: !2573)
!2579 = !DILocation(line: 87, column: 1, scope: !2580)
!2580 = distinct !DILexicalBlock(scope: !2573, file: !378, line: 87, column: 1)
!2581 = distinct !DISubprogram(name: "flow_loops_free", scope: !3, file: !3, line: 204, type: !2582, scopeLine: 205, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2582 = !DISubroutineType(types: !2583)
!2583 = !{null, !1145}
!2584 = !DILocalVariable(name: "loops", arg: 1, scope: !2581, file: !3, line: 204, type: !1145)
!2585 = !DILocation(line: 204, column: 32, scope: !2581)
!2586 = !DILocation(line: 206, column: 7, scope: !2587)
!2587 = distinct !DILexicalBlock(scope: !2581, file: !3, line: 206, column: 7)
!2588 = !DILocation(line: 206, column: 14, scope: !2587)
!2589 = !DILocation(line: 206, column: 7, scope: !2581)
!2590 = !DILocalVariable(name: "i", scope: !2591, file: !3, line: 208, type: !7)
!2591 = distinct !DILexicalBlock(scope: !2587, file: !3, line: 207, column: 5)
!2592 = !DILocation(line: 208, column: 16, scope: !2591)
!2593 = !DILocalVariable(name: "loop", scope: !2591, file: !3, line: 209, type: !1162)
!2594 = !DILocation(line: 209, column: 14, scope: !2591)
!2595 = !DILocation(line: 212, column: 14, scope: !2596)
!2596 = distinct !DILexicalBlock(scope: !2591, file: !3, line: 212, column: 7)
!2597 = !DILocation(line: 212, column: 12, scope: !2596)
!2598 = !DILocation(line: 212, column: 19, scope: !2599)
!2599 = distinct !DILexicalBlock(scope: !2596, file: !3, line: 212, column: 7)
!2600 = !DILocation(line: 212, column: 7, scope: !2596)
!2601 = !DILocation(line: 214, column: 9, scope: !2602)
!2602 = distinct !DILexicalBlock(scope: !2603, file: !3, line: 214, column: 8)
!2603 = distinct !DILexicalBlock(scope: !2599, file: !3, line: 213, column: 2)
!2604 = !DILocation(line: 214, column: 8, scope: !2603)
!2605 = !DILocation(line: 215, column: 6, scope: !2602)
!2606 = !DILocation(line: 217, column: 20, scope: !2603)
!2607 = !DILocation(line: 217, column: 4, scope: !2603)
!2608 = !DILocation(line: 218, column: 2, scope: !2603)
!2609 = !DILocation(line: 212, column: 66, scope: !2599)
!2610 = !DILocation(line: 212, column: 7, scope: !2599)
!2611 = distinct !{!2611, !2600, !2612}
!2612 = !DILocation(line: 218, column: 2, scope: !2596)
!2613 = !DILocation(line: 220, column: 7, scope: !2591)
!2614 = !DILocation(line: 221, column: 5, scope: !2591)
!2615 = !DILocation(line: 222, column: 1, scope: !2581)
!2616 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !378, file: !378, line: 85, type: !2617, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2617 = !DISubroutineType(types: !2618)
!2618 = !{!440, !1947, !7, !2277}
!2619 = !DILocalVariable(name: "vec_", arg: 1, scope: !2616, file: !378, line: 85, type: !1947)
!2620 = !DILocation(line: 85, column: 1, scope: !2616)
!2621 = !DILocalVariable(name: "ix_", arg: 2, scope: !2616, file: !378, line: 85, type: !7)
!2622 = !DILocalVariable(name: "ptr", arg: 3, scope: !2616, file: !378, line: 85, type: !2277)
!2623 = !DILocation(line: 85, column: 1, scope: !2624)
!2624 = distinct !DILexicalBlock(scope: !2616, file: !378, line: 85, column: 1)
!2625 = !DILocation(line: 85, column: 1, scope: !2626)
!2626 = distinct !DILexicalBlock(scope: !2624, file: !378, line: 85, column: 1)
!2627 = !DILocation(line: 85, column: 1, scope: !2628)
!2628 = distinct !DILexicalBlock(scope: !2624, file: !378, line: 85, column: 1)
!2629 = distinct !DISubprogram(name: "flow_loop_nodes_find", scope: !3, file: !3, line: 228, type: !2630, scopeLine: 229, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2630 = !DISubroutineType(types: !2631)
!2631 = !{!440, !979, !436}
!2632 = !DILocalVariable(name: "header", arg: 1, scope: !2629, file: !3, line: 228, type: !979)
!2633 = !DILocation(line: 228, column: 35, scope: !2629)
!2634 = !DILocalVariable(name: "loop", arg: 2, scope: !2629, file: !3, line: 228, type: !436)
!2635 = !DILocation(line: 228, column: 56, scope: !2629)
!2636 = !DILocalVariable(name: "stack", scope: !2629, file: !3, line: 230, type: !1842)
!2637 = !DILocation(line: 230, column: 28, scope: !2629)
!2638 = !DILocalVariable(name: "num_nodes", scope: !2629, file: !3, line: 231, type: !440)
!2639 = !DILocation(line: 231, column: 7, scope: !2629)
!2640 = !DILocalVariable(name: "latch", scope: !2629, file: !3, line: 232, type: !459)
!2641 = !DILocation(line: 232, column: 8, scope: !2629)
!2642 = !DILocalVariable(name: "latch_ei", scope: !2629, file: !3, line: 233, type: !2097)
!2643 = !DILocation(line: 233, column: 17, scope: !2629)
!2644 = !DILocalVariable(name: "depth", scope: !2629, file: !3, line: 234, type: !7)
!2645 = !DILocation(line: 234, column: 12, scope: !2629)
!2646 = !DILocation(line: 234, column: 32, scope: !2629)
!2647 = !DILocation(line: 234, column: 20, scope: !2629)
!2648 = !DILocation(line: 236, column: 25, scope: !2629)
!2649 = !DILocation(line: 236, column: 3, scope: !2629)
!2650 = !DILocation(line: 236, column: 11, scope: !2629)
!2651 = !DILocation(line: 236, column: 23, scope: !2629)
!2652 = !DILocation(line: 237, column: 24, scope: !2629)
!2653 = !DILocation(line: 237, column: 3, scope: !2629)
!2654 = !DILocation(line: 237, column: 11, scope: !2629)
!2655 = !DILocation(line: 237, column: 22, scope: !2629)
!2656 = !DILocation(line: 239, column: 3, scope: !2657)
!2657 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 239, column: 3)
!2658 = !DILocation(line: 239, column: 3, scope: !2659)
!2659 = distinct !DILexicalBlock(scope: !2657, file: !3, line: 239, column: 3)
!2660 = !DILocation(line: 241, column: 11, scope: !2661)
!2661 = distinct !DILexicalBlock(scope: !2662, file: !3, line: 241, column: 11)
!2662 = distinct !DILexicalBlock(scope: !2659, file: !3, line: 240, column: 5)
!2663 = !DILocation(line: 241, column: 18, scope: !2661)
!2664 = !DILocation(line: 241, column: 23, scope: !2661)
!2665 = !DILocation(line: 241, column: 38, scope: !2661)
!2666 = !DILocation(line: 241, column: 35, scope: !2661)
!2667 = !DILocation(line: 242, column: 4, scope: !2661)
!2668 = !DILocation(line: 242, column: 40, scope: !2661)
!2669 = !DILocation(line: 242, column: 47, scope: !2661)
!2670 = !DILocation(line: 242, column: 52, scope: !2661)
!2671 = !DILocation(line: 242, column: 58, scope: !2661)
!2672 = !DILocation(line: 242, column: 8, scope: !2661)
!2673 = !DILocation(line: 241, column: 11, scope: !2662)
!2674 = !DILocation(line: 243, column: 2, scope: !2661)
!2675 = !DILocation(line: 245, column: 16, scope: !2662)
!2676 = !DILocation(line: 246, column: 7, scope: !2662)
!2677 = !DILocation(line: 247, column: 33, scope: !2662)
!2678 = !DILocation(line: 247, column: 7, scope: !2662)
!2679 = !DILocation(line: 247, column: 14, scope: !2662)
!2680 = !DILocation(line: 247, column: 19, scope: !2662)
!2681 = !DILocation(line: 247, column: 31, scope: !2662)
!2682 = !DILocation(line: 248, column: 32, scope: !2662)
!2683 = !DILocation(line: 248, column: 7, scope: !2662)
!2684 = !DILocation(line: 248, column: 14, scope: !2662)
!2685 = !DILocation(line: 248, column: 19, scope: !2662)
!2686 = !DILocation(line: 248, column: 30, scope: !2662)
!2687 = !DILocation(line: 250, column: 7, scope: !2662)
!2688 = !DILocation(line: 250, column: 15, scope: !2662)
!2689 = !DILocation(line: 250, column: 14, scope: !2662)
!2690 = !DILocalVariable(name: "node", scope: !2691, file: !3, line: 252, type: !979)
!2691 = distinct !DILexicalBlock(scope: !2662, file: !3, line: 251, column: 2)
!2692 = !DILocation(line: 252, column: 16, scope: !2691)
!2693 = !DILocalVariable(name: "e", scope: !2691, file: !3, line: 253, type: !459)
!2694 = !DILocation(line: 253, column: 9, scope: !2691)
!2695 = !DILocalVariable(name: "ei", scope: !2691, file: !3, line: 254, type: !2097)
!2696 = !DILocation(line: 254, column: 18, scope: !2691)
!2697 = !DILocation(line: 256, column: 11, scope: !2691)
!2698 = !DILocation(line: 256, column: 9, scope: !2691)
!2699 = !DILocation(line: 258, column: 4, scope: !2700)
!2700 = distinct !DILexicalBlock(scope: !2691, file: !3, line: 258, column: 4)
!2701 = !DILocation(line: 258, column: 4, scope: !2702)
!2702 = distinct !DILexicalBlock(scope: !2700, file: !3, line: 258, column: 4)
!2703 = !DILocalVariable(name: "ancestor", scope: !2704, file: !3, line: 260, type: !979)
!2704 = distinct !DILexicalBlock(scope: !2702, file: !3, line: 259, column: 6)
!2705 = !DILocation(line: 260, column: 20, scope: !2704)
!2706 = !DILocation(line: 260, column: 31, scope: !2704)
!2707 = !DILocation(line: 260, column: 34, scope: !2704)
!2708 = !DILocation(line: 262, column: 12, scope: !2709)
!2709 = distinct !DILexicalBlock(scope: !2704, file: !3, line: 262, column: 12)
!2710 = !DILocation(line: 262, column: 22, scope: !2709)
!2711 = !DILocation(line: 262, column: 37, scope: !2709)
!2712 = !DILocation(line: 262, column: 34, scope: !2709)
!2713 = !DILocation(line: 262, column: 12, scope: !2704)
!2714 = !DILocation(line: 264, column: 29, scope: !2715)
!2715 = distinct !DILexicalBlock(scope: !2709, file: !3, line: 263, column: 3)
!2716 = !DILocation(line: 264, column: 5, scope: !2715)
!2717 = !DILocation(line: 264, column: 15, scope: !2715)
!2718 = !DILocation(line: 264, column: 27, scope: !2715)
!2719 = !DILocation(line: 265, column: 28, scope: !2715)
!2720 = !DILocation(line: 265, column: 5, scope: !2715)
!2721 = !DILocation(line: 265, column: 15, scope: !2715)
!2722 = !DILocation(line: 265, column: 26, scope: !2715)
!2723 = !DILocation(line: 266, column: 14, scope: !2715)
!2724 = !DILocation(line: 267, column: 5, scope: !2715)
!2725 = !DILocation(line: 268, column: 3, scope: !2715)
!2726 = !DILocation(line: 269, column: 6, scope: !2704)
!2727 = distinct !{!2727, !2699, !2728}
!2728 = !DILocation(line: 269, column: 6, scope: !2700)
!2729 = distinct !{!2729, !2687, !2730}
!2730 = !DILocation(line: 270, column: 2, scope: !2662)
!2731 = !DILocation(line: 271, column: 5, scope: !2662)
!2732 = distinct !{!2732, !2656, !2733}
!2733 = !DILocation(line: 271, column: 5, scope: !2657)
!2734 = !DILocation(line: 272, column: 3, scope: !2629)
!2735 = !DILocation(line: 274, column: 10, scope: !2629)
!2736 = !DILocation(line: 274, column: 3, scope: !2629)
!2737 = distinct !DISubprogram(name: "ei_start_1", scope: !135, file: !135, line: 696, type: !2738, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2738 = !DISubroutineType(types: !2739)
!2739 = !{!2097, !2102}
!2740 = !DILocalVariable(name: "ev", arg: 1, scope: !2737, file: !135, line: 696, type: !2102)
!2741 = !DILocation(line: 696, column: 28, scope: !2737)
!2742 = !DILocalVariable(name: "i", scope: !2737, file: !135, line: 698, type: !2097)
!2743 = !DILocation(line: 698, column: 17, scope: !2737)
!2744 = !DILocation(line: 700, column: 5, scope: !2737)
!2745 = !DILocation(line: 700, column: 11, scope: !2737)
!2746 = !DILocation(line: 701, column: 17, scope: !2737)
!2747 = !DILocation(line: 701, column: 5, scope: !2737)
!2748 = !DILocation(line: 701, column: 15, scope: !2737)
!2749 = !DILocation(line: 703, column: 3, scope: !2737)
!2750 = distinct !DISubprogram(name: "ei_cond", scope: !135, file: !135, line: 771, type: !2751, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2751 = !DISubroutineType(types: !2752)
!2752 = !{!622, !2097, !2131}
!2753 = !DILocalVariable(name: "ei", arg: 1, scope: !2750, file: !135, line: 771, type: !2097)
!2754 = !DILocation(line: 771, column: 24, scope: !2750)
!2755 = !DILocalVariable(name: "p", arg: 2, scope: !2750, file: !135, line: 771, type: !2131)
!2756 = !DILocation(line: 771, column: 34, scope: !2750)
!2757 = !DILocation(line: 773, column: 8, scope: !2758)
!2758 = distinct !DILexicalBlock(scope: !2750, file: !135, line: 773, column: 7)
!2759 = !DILocation(line: 773, column: 7, scope: !2750)
!2760 = !DILocation(line: 775, column: 12, scope: !2761)
!2761 = distinct !DILexicalBlock(scope: !2758, file: !135, line: 774, column: 5)
!2762 = !DILocation(line: 775, column: 8, scope: !2761)
!2763 = !DILocation(line: 775, column: 10, scope: !2761)
!2764 = !DILocation(line: 776, column: 7, scope: !2761)
!2765 = !DILocation(line: 780, column: 8, scope: !2766)
!2766 = distinct !DILexicalBlock(scope: !2758, file: !135, line: 779, column: 5)
!2767 = !DILocation(line: 780, column: 10, scope: !2766)
!2768 = !DILocation(line: 781, column: 7, scope: !2766)
!2769 = !DILocation(line: 783, column: 1, scope: !2750)
!2770 = distinct !DISubprogram(name: "VEC_basic_block_heap_safe_push", scope: !135, file: !135, line: 283, type: !2771, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2771 = !DISubroutineType(types: !2772)
!2772 = !{!1827, !2773, !979}
!2773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1842, size: 64)
!2774 = !DILocalVariable(name: "vec_", arg: 1, scope: !2770, file: !135, line: 283, type: !2773)
!2775 = !DILocation(line: 283, column: 1, scope: !2770)
!2776 = !DILocalVariable(name: "obj_", arg: 2, scope: !2770, file: !135, line: 283, type: !979)
!2777 = distinct !DISubprogram(name: "VEC_basic_block_base_length", scope: !135, file: !135, line: 281, type: !2778, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2778 = !DISubroutineType(types: !2779)
!2779 = !{!7, !2780}
!2780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2781, size: 64)
!2781 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !987)
!2782 = !DILocalVariable(name: "vec_", arg: 1, scope: !2777, file: !135, line: 281, type: !2780)
!2783 = !DILocation(line: 281, column: 1, scope: !2777)
!2784 = distinct !DISubprogram(name: "VEC_basic_block_base_pop", scope: !135, file: !135, line: 281, type: !2785, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2785 = !DISubroutineType(types: !2786)
!2786 = !{!979, !2787}
!2787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !987, size: 64)
!2788 = !DILocalVariable(name: "vec_", arg: 1, scope: !2784, file: !135, line: 281, type: !2787)
!2789 = !DILocation(line: 281, column: 1, scope: !2784)
!2790 = !DILocalVariable(name: "obj_", scope: !2784, file: !135, line: 281, type: !979)
!2791 = distinct !DISubprogram(name: "ei_next", scope: !135, file: !135, line: 736, type: !2792, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2792 = !DISubroutineType(types: !2793)
!2793 = !{null, !2794}
!2794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2097, size: 64)
!2795 = !DILocalVariable(name: "i", arg: 1, scope: !2791, file: !135, line: 736, type: !2794)
!2796 = !DILocation(line: 736, column: 25, scope: !2791)
!2797 = !DILocation(line: 738, column: 3, scope: !2791)
!2798 = !DILocation(line: 739, column: 3, scope: !2791)
!2799 = !DILocation(line: 739, column: 6, scope: !2791)
!2800 = !DILocation(line: 739, column: 11, scope: !2791)
!2801 = !DILocation(line: 740, column: 1, scope: !2791)
!2802 = distinct !DISubprogram(name: "VEC_basic_block_heap_free", scope: !135, file: !135, line: 283, type: !2803, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2803 = !DISubroutineType(types: !2804)
!2804 = !{null, !2773}
!2805 = !DILocalVariable(name: "vec_", arg: 1, scope: !2802, file: !135, line: 283, type: !2773)
!2806 = !DILocation(line: 283, column: 1, scope: !2802)
!2807 = !DILocation(line: 283, column: 1, scope: !2808)
!2808 = distinct !DILexicalBlock(scope: !2802, file: !135, line: 283, column: 1)
!2809 = distinct !DISubprogram(name: "flow_loop_tree_node_add", scope: !3, file: !3, line: 302, type: !2810, scopeLine: 303, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2810 = !DISubroutineType(types: !2811)
!2811 = !{null, !436, !436}
!2812 = !DILocalVariable(name: "father", arg: 1, scope: !2809, file: !3, line: 302, type: !436)
!2813 = !DILocation(line: 302, column: 39, scope: !2809)
!2814 = !DILocalVariable(name: "loop", arg: 2, scope: !2809, file: !3, line: 302, type: !436)
!2815 = !DILocation(line: 302, column: 60, scope: !2809)
!2816 = !DILocation(line: 304, column: 16, scope: !2809)
!2817 = !DILocation(line: 304, column: 24, scope: !2809)
!2818 = !DILocation(line: 304, column: 3, scope: !2809)
!2819 = !DILocation(line: 304, column: 9, scope: !2809)
!2820 = !DILocation(line: 304, column: 14, scope: !2809)
!2821 = !DILocation(line: 305, column: 19, scope: !2809)
!2822 = !DILocation(line: 305, column: 3, scope: !2809)
!2823 = !DILocation(line: 305, column: 11, scope: !2809)
!2824 = !DILocation(line: 305, column: 17, scope: !2809)
!2825 = !DILocation(line: 307, column: 20, scope: !2809)
!2826 = !DILocation(line: 307, column: 26, scope: !2809)
!2827 = !DILocation(line: 307, column: 3, scope: !2809)
!2828 = !DILocation(line: 308, column: 1, scope: !2809)
!2829 = distinct !DISubprogram(name: "establish_preds", scope: !3, file: !3, line: 281, type: !2810, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2830 = !DILocalVariable(name: "loop", arg: 1, scope: !2829, file: !3, line: 281, type: !436)
!2831 = !DILocation(line: 281, column: 31, scope: !2829)
!2832 = !DILocalVariable(name: "father", arg: 2, scope: !2829, file: !3, line: 281, type: !436)
!2833 = !DILocation(line: 281, column: 50, scope: !2829)
!2834 = !DILocalVariable(name: "ploop", scope: !2829, file: !3, line: 283, type: !1162)
!2835 = !DILocation(line: 283, column: 10, scope: !2829)
!2836 = !DILocalVariable(name: "depth", scope: !2829, file: !3, line: 284, type: !7)
!2837 = !DILocation(line: 284, column: 12, scope: !2829)
!2838 = !DILocation(line: 284, column: 32, scope: !2829)
!2839 = !DILocation(line: 284, column: 20, scope: !2829)
!2840 = !DILocation(line: 284, column: 40, scope: !2829)
!2841 = !DILocalVariable(name: "i", scope: !2829, file: !3, line: 285, type: !7)
!2842 = !DILocation(line: 285, column: 12, scope: !2829)
!2843 = !DILocation(line: 287, column: 3, scope: !2829)
!2844 = !DILocation(line: 288, column: 3, scope: !2829)
!2845 = !DILocation(line: 289, column: 10, scope: !2846)
!2846 = distinct !DILexicalBlock(scope: !2829, file: !3, line: 289, column: 3)
!2847 = !DILocation(line: 289, column: 8, scope: !2846)
!2848 = !DILocation(line: 289, column: 15, scope: !2849)
!2849 = distinct !DILexicalBlock(scope: !2846, file: !3, line: 289, column: 3)
!2850 = !DILocation(line: 289, column: 3, scope: !2846)
!2851 = !DILocation(line: 290, column: 5, scope: !2849)
!2852 = !DILocation(line: 289, column: 68, scope: !2849)
!2853 = !DILocation(line: 289, column: 3, scope: !2849)
!2854 = distinct !{!2854, !2850, !2855}
!2855 = !DILocation(line: 290, column: 5, scope: !2846)
!2856 = !DILocation(line: 291, column: 3, scope: !2829)
!2857 = !DILocation(line: 293, column: 16, scope: !2858)
!2858 = distinct !DILexicalBlock(scope: !2829, file: !3, line: 293, column: 3)
!2859 = !DILocation(line: 293, column: 22, scope: !2858)
!2860 = !DILocation(line: 293, column: 14, scope: !2858)
!2861 = !DILocation(line: 293, column: 8, scope: !2858)
!2862 = !DILocation(line: 293, column: 29, scope: !2863)
!2863 = distinct !DILexicalBlock(scope: !2858, file: !3, line: 293, column: 3)
!2864 = !DILocation(line: 293, column: 3, scope: !2858)
!2865 = !DILocation(line: 294, column: 22, scope: !2863)
!2866 = !DILocation(line: 294, column: 29, scope: !2863)
!2867 = !DILocation(line: 294, column: 5, scope: !2863)
!2868 = !DILocation(line: 293, column: 44, scope: !2863)
!2869 = !DILocation(line: 293, column: 51, scope: !2863)
!2870 = !DILocation(line: 293, column: 42, scope: !2863)
!2871 = !DILocation(line: 293, column: 3, scope: !2863)
!2872 = distinct !{!2872, !2864, !2873}
!2873 = !DILocation(line: 294, column: 33, scope: !2858)
!2874 = !DILocation(line: 295, column: 1, scope: !2829)
!2875 = distinct !DISubprogram(name: "flow_loop_tree_node_remove", scope: !3, file: !3, line: 313, type: !2528, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2876 = !DILocalVariable(name: "loop", arg: 1, scope: !2875, file: !3, line: 313, type: !436)
!2877 = !DILocation(line: 313, column: 42, scope: !2875)
!2878 = !DILocalVariable(name: "prev", scope: !2875, file: !3, line: 315, type: !436)
!2879 = !DILocation(line: 315, column: 16, scope: !2875)
!2880 = !DILocalVariable(name: "father", scope: !2875, file: !3, line: 315, type: !436)
!2881 = !DILocation(line: 315, column: 23, scope: !2875)
!2882 = !DILocation(line: 317, column: 24, scope: !2875)
!2883 = !DILocation(line: 317, column: 12, scope: !2875)
!2884 = !DILocation(line: 317, column: 10, scope: !2875)
!2885 = !DILocation(line: 320, column: 7, scope: !2886)
!2886 = distinct !DILexicalBlock(scope: !2875, file: !3, line: 320, column: 7)
!2887 = !DILocation(line: 320, column: 15, scope: !2886)
!2888 = !DILocation(line: 320, column: 24, scope: !2886)
!2889 = !DILocation(line: 320, column: 21, scope: !2886)
!2890 = !DILocation(line: 320, column: 7, scope: !2875)
!2891 = !DILocation(line: 321, column: 21, scope: !2886)
!2892 = !DILocation(line: 321, column: 27, scope: !2886)
!2893 = !DILocation(line: 321, column: 5, scope: !2886)
!2894 = !DILocation(line: 321, column: 13, scope: !2886)
!2895 = !DILocation(line: 321, column: 19, scope: !2886)
!2896 = !DILocation(line: 324, column: 19, scope: !2897)
!2897 = distinct !DILexicalBlock(scope: !2898, file: !3, line: 324, column: 7)
!2898 = distinct !DILexicalBlock(scope: !2886, file: !3, line: 323, column: 5)
!2899 = !DILocation(line: 324, column: 27, scope: !2897)
!2900 = !DILocation(line: 324, column: 17, scope: !2897)
!2901 = !DILocation(line: 324, column: 12, scope: !2897)
!2902 = !DILocation(line: 324, column: 34, scope: !2903)
!2903 = distinct !DILexicalBlock(scope: !2897, file: !3, line: 324, column: 7)
!2904 = !DILocation(line: 324, column: 40, scope: !2903)
!2905 = !DILocation(line: 324, column: 48, scope: !2903)
!2906 = !DILocation(line: 324, column: 45, scope: !2903)
!2907 = !DILocation(line: 324, column: 7, scope: !2897)
!2908 = !DILocation(line: 325, column: 2, scope: !2903)
!2909 = !DILocation(line: 324, column: 61, scope: !2903)
!2910 = !DILocation(line: 324, column: 67, scope: !2903)
!2911 = !DILocation(line: 324, column: 59, scope: !2903)
!2912 = !DILocation(line: 324, column: 7, scope: !2903)
!2913 = distinct !{!2913, !2907, !2914}
!2914 = !DILocation(line: 325, column: 2, scope: !2897)
!2915 = !DILocation(line: 326, column: 20, scope: !2898)
!2916 = !DILocation(line: 326, column: 26, scope: !2898)
!2917 = !DILocation(line: 326, column: 7, scope: !2898)
!2918 = !DILocation(line: 326, column: 13, scope: !2898)
!2919 = !DILocation(line: 326, column: 18, scope: !2898)
!2920 = !DILocation(line: 329, column: 3, scope: !2875)
!2921 = !DILocation(line: 330, column: 1, scope: !2875)
!2922 = distinct !DISubprogram(name: "VEC_loop_p_base_truncate", scope: !378, file: !378, line: 85, type: !2923, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2923 = !DISubroutineType(types: !2924)
!2924 = !{null, !2925, !7}
!2925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1155, size: 64)
!2926 = !DILocalVariable(name: "vec_", arg: 1, scope: !2922, file: !378, line: 85, type: !2925)
!2927 = !DILocation(line: 85, column: 1, scope: !2922)
!2928 = !DILocalVariable(name: "size_", arg: 2, scope: !2922, file: !378, line: 85, type: !7)
!2929 = !DILocation(line: 85, column: 1, scope: !2930)
!2930 = distinct !DILexicalBlock(scope: !2922, file: !378, line: 85, column: 1)
!2931 = distinct !DISubprogram(name: "alloc_loop", scope: !3, file: !3, line: 335, type: !2932, scopeLine: 336, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2932 = !DISubroutineType(types: !2933)
!2933 = !{!436}
!2934 = !DILocalVariable(name: "loop", scope: !2931, file: !3, line: 337, type: !436)
!2935 = !DILocation(line: 337, column: 16, scope: !2931)
!2936 = !DILocation(line: 337, column: 23, scope: !2931)
!2937 = !DILocation(line: 339, column: 17, scope: !2931)
!2938 = !DILocation(line: 339, column: 3, scope: !2931)
!2939 = !DILocation(line: 339, column: 9, scope: !2931)
!2940 = !DILocation(line: 339, column: 15, scope: !2931)
!2941 = !DILocation(line: 340, column: 43, scope: !2931)
!2942 = !DILocation(line: 340, column: 49, scope: !2931)
!2943 = !DILocation(line: 340, column: 23, scope: !2931)
!2944 = !DILocation(line: 340, column: 29, scope: !2931)
!2945 = !DILocation(line: 340, column: 36, scope: !2931)
!2946 = !DILocation(line: 340, column: 41, scope: !2931)
!2947 = !DILocation(line: 340, column: 3, scope: !2931)
!2948 = !DILocation(line: 340, column: 9, scope: !2931)
!2949 = !DILocation(line: 340, column: 16, scope: !2931)
!2950 = !DILocation(line: 340, column: 21, scope: !2931)
!2951 = !DILocation(line: 341, column: 3, scope: !2931)
!2952 = !DILocation(line: 341, column: 9, scope: !2931)
!2953 = !DILocation(line: 341, column: 25, scope: !2931)
!2954 = !DILocation(line: 342, column: 3, scope: !2931)
!2955 = !DILocation(line: 342, column: 9, scope: !2931)
!2956 = !DILocation(line: 342, column: 19, scope: !2931)
!2957 = !DILocation(line: 344, column: 10, scope: !2931)
!2958 = !DILocation(line: 344, column: 3, scope: !2931)
!2959 = distinct !DISubprogram(name: "flow_loops_find", scope: !3, file: !3, line: 375, type: !2960, scopeLine: 376, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!2960 = !DISubroutineType(types: !2961)
!2961 = !{!440, !1145}
!2962 = !DILocalVariable(name: "loops", arg: 1, scope: !2959, file: !3, line: 375, type: !1145)
!2963 = !DILocation(line: 375, column: 32, scope: !2959)
!2964 = !DILocalVariable(name: "b", scope: !2959, file: !3, line: 377, type: !440)
!2965 = !DILocation(line: 377, column: 7, scope: !2959)
!2966 = !DILocalVariable(name: "num_loops", scope: !2959, file: !3, line: 378, type: !440)
!2967 = !DILocation(line: 378, column: 7, scope: !2959)
!2968 = !DILocalVariable(name: "e", scope: !2959, file: !3, line: 379, type: !459)
!2969 = !DILocation(line: 379, column: 8, scope: !2959)
!2970 = !DILocalVariable(name: "headers", scope: !2959, file: !3, line: 380, type: !2971)
!2971 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2972, line: 45, baseType: !2973)
!2972 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2973 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2974, size: 64)
!2974 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2972, line: 39, size: 192, elements: !2975)
!2975 = !{!2976, !2978, !2979, !2980}
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2974, file: !2972, line: 41, baseType: !2977, size: 64)
!2977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !622, size: 64)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2974, file: !2972, line: 42, baseType: !7, size: 32, offset: 64)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2974, file: !2972, line: 43, baseType: !7, size: 32, offset: 96)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2974, file: !2972, line: 44, baseType: !2981, size: 64, offset: 128)
!2981 = !DICompositeType(tag: DW_TAG_array_type, baseType: !558, size: 64, elements: !603)
!2982 = !DILocation(line: 380, column: 11, scope: !2959)
!2983 = !DILocalVariable(name: "dfs_order", scope: !2959, file: !3, line: 381, type: !1826)
!2984 = !DILocation(line: 381, column: 8, scope: !2959)
!2985 = !DILocalVariable(name: "rc_order", scope: !2959, file: !3, line: 382, type: !1826)
!2986 = !DILocation(line: 382, column: 8, scope: !2959)
!2987 = !DILocalVariable(name: "header", scope: !2959, file: !3, line: 383, type: !979)
!2988 = !DILocation(line: 383, column: 15, scope: !2959)
!2989 = !DILocalVariable(name: "bb", scope: !2959, file: !3, line: 384, type: !979)
!2990 = !DILocation(line: 384, column: 15, scope: !2959)
!2991 = !DILocation(line: 387, column: 3, scope: !2959)
!2992 = !DILocation(line: 391, column: 7, scope: !2993)
!2993 = distinct !DILexicalBlock(scope: !2959, file: !3, line: 391, column: 7)
!2994 = !DILocation(line: 391, column: 22, scope: !2993)
!2995 = !DILocation(line: 391, column: 7, scope: !2959)
!2996 = !DILocation(line: 393, column: 29, scope: !2997)
!2997 = distinct !DILexicalBlock(scope: !2993, file: !3, line: 392, column: 5)
!2998 = !DILocation(line: 393, column: 7, scope: !2997)
!2999 = !DILocation(line: 394, column: 7, scope: !2997)
!3000 = !DILocation(line: 397, column: 13, scope: !2959)
!3001 = !DILocation(line: 398, column: 12, scope: !2959)
!3002 = !DILocation(line: 402, column: 28, scope: !2959)
!3003 = !DILocation(line: 402, column: 13, scope: !2959)
!3004 = !DILocation(line: 402, column: 11, scope: !2959)
!3005 = !DILocation(line: 403, column: 17, scope: !2959)
!3006 = !DILocation(line: 403, column: 3, scope: !2959)
!3007 = !DILocation(line: 405, column: 13, scope: !2959)
!3008 = !DILocation(line: 406, column: 3, scope: !3009)
!3009 = distinct !DILexicalBlock(scope: !2959, file: !3, line: 406, column: 3)
!3010 = !DILocation(line: 406, column: 3, scope: !3011)
!3011 = distinct !DILexicalBlock(scope: !3009, file: !3, line: 406, column: 3)
!3012 = !DILocalVariable(name: "ei", scope: !3013, file: !3, line: 408, type: !2097)
!3013 = distinct !DILexicalBlock(scope: !3011, file: !3, line: 407, column: 5)
!3014 = !DILocation(line: 408, column: 21, scope: !3013)
!3015 = !DILocation(line: 410, column: 7, scope: !3013)
!3016 = !DILocation(line: 410, column: 15, scope: !3013)
!3017 = !DILocation(line: 410, column: 26, scope: !3013)
!3018 = !DILocation(line: 414, column: 7, scope: !3019)
!3019 = distinct !DILexicalBlock(scope: !3013, file: !3, line: 414, column: 7)
!3020 = !DILocation(line: 414, column: 7, scope: !3021)
!3021 = distinct !DILexicalBlock(scope: !3019, file: !3, line: 414, column: 7)
!3022 = !DILocation(line: 415, column: 6, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !3021, file: !3, line: 415, column: 6)
!3024 = !DILocation(line: 415, column: 9, scope: !3023)
!3025 = !DILocation(line: 415, column: 15, scope: !3023)
!3026 = !DILocation(line: 415, column: 6, scope: !3021)
!3027 = !DILocation(line: 416, column: 4, scope: !3023)
!3028 = !DILocation(line: 415, column: 17, scope: !3023)
!3029 = distinct !{!3029, !3018, !3030}
!3030 = !DILocation(line: 416, column: 4, scope: !3019)
!3031 = !DILocation(line: 417, column: 11, scope: !3032)
!3032 = distinct !DILexicalBlock(scope: !3013, file: !3, line: 417, column: 11)
!3033 = !DILocation(line: 417, column: 11, scope: !3013)
!3034 = !DILocation(line: 418, column: 2, scope: !3032)
!3035 = !DILocation(line: 420, column: 7, scope: !3036)
!3036 = distinct !DILexicalBlock(scope: !3013, file: !3, line: 420, column: 7)
!3037 = !DILocation(line: 420, column: 7, scope: !3038)
!3038 = distinct !DILexicalBlock(scope: !3036, file: !3, line: 420, column: 7)
!3039 = !DILocalVariable(name: "latch", scope: !3040, file: !3, line: 422, type: !979)
!3040 = distinct !DILexicalBlock(scope: !3038, file: !3, line: 421, column: 2)
!3041 = !DILocation(line: 422, column: 16, scope: !3040)
!3042 = !DILocation(line: 422, column: 24, scope: !3040)
!3043 = !DILocation(line: 422, column: 27, scope: !3040)
!3044 = !DILocation(line: 424, column: 4, scope: !3040)
!3045 = !DILocation(line: 431, column: 8, scope: !3046)
!3046 = distinct !DILexicalBlock(scope: !3040, file: !3, line: 431, column: 8)
!3047 = !DILocation(line: 431, column: 17, scope: !3046)
!3048 = !DILocation(line: 431, column: 14, scope: !3046)
!3049 = !DILocation(line: 432, column: 8, scope: !3046)
!3050 = !DILocation(line: 432, column: 43, scope: !3046)
!3051 = !DILocation(line: 432, column: 50, scope: !3046)
!3052 = !DILocation(line: 432, column: 11, scope: !3046)
!3053 = !DILocation(line: 431, column: 8, scope: !3040)
!3054 = !DILocation(line: 435, column: 17, scope: !3055)
!3055 = distinct !DILexicalBlock(scope: !3046, file: !3, line: 433, column: 6)
!3056 = !DILocation(line: 435, column: 26, scope: !3055)
!3057 = !DILocation(line: 435, column: 34, scope: !3055)
!3058 = !DILocation(line: 435, column: 8, scope: !3055)
!3059 = !DILocation(line: 436, column: 17, scope: !3055)
!3060 = !DILocation(line: 437, column: 6, scope: !3055)
!3061 = !DILocation(line: 438, column: 2, scope: !3040)
!3062 = distinct !{!3062, !3035, !3063}
!3063 = !DILocation(line: 438, column: 2, scope: !3036)
!3064 = !DILocation(line: 439, column: 5, scope: !3013)
!3065 = distinct !{!3065, !3008, !3066}
!3066 = !DILocation(line: 439, column: 5, scope: !3009)
!3067 = !DILocation(line: 442, column: 25, scope: !2959)
!3068 = !DILocation(line: 442, column: 32, scope: !2959)
!3069 = !DILocation(line: 442, column: 42, scope: !2959)
!3070 = !DILocation(line: 442, column: 3, scope: !2959)
!3071 = !DILocation(line: 446, column: 3, scope: !3072)
!3072 = distinct !DILexicalBlock(scope: !2959, file: !3, line: 446, column: 3)
!3073 = !DILocation(line: 446, column: 3, scope: !3074)
!3074 = distinct !DILexicalBlock(scope: !3072, file: !3, line: 446, column: 3)
!3075 = !DILocation(line: 447, column: 23, scope: !3074)
!3076 = !DILocation(line: 447, column: 30, scope: !3074)
!3077 = !DILocation(line: 447, column: 5, scope: !3074)
!3078 = !DILocation(line: 447, column: 9, scope: !3074)
!3079 = !DILocation(line: 447, column: 21, scope: !3074)
!3080 = distinct !{!3080, !3071, !3081}
!3081 = !DILocation(line: 447, column: 30, scope: !3072)
!3082 = !DILocation(line: 449, column: 7, scope: !3083)
!3083 = distinct !DILexicalBlock(scope: !2959, file: !3, line: 449, column: 7)
!3084 = !DILocation(line: 449, column: 7, scope: !2959)
!3085 = !DILocation(line: 453, column: 19, scope: !3086)
!3086 = distinct !DILexicalBlock(scope: !3083, file: !3, line: 450, column: 5)
!3087 = !DILocation(line: 453, column: 17, scope: !3086)
!3088 = !DILocation(line: 454, column: 18, scope: !3086)
!3089 = !DILocation(line: 454, column: 16, scope: !3086)
!3090 = !DILocation(line: 455, column: 39, scope: !3086)
!3091 = !DILocation(line: 455, column: 50, scope: !3086)
!3092 = !DILocation(line: 455, column: 7, scope: !3086)
!3093 = !DILocation(line: 457, column: 17, scope: !3086)
!3094 = !DILocation(line: 459, column: 14, scope: !3095)
!3095 = distinct !DILexicalBlock(scope: !3086, file: !3, line: 459, column: 7)
!3096 = !DILocation(line: 459, column: 12, scope: !3095)
!3097 = !DILocation(line: 459, column: 19, scope: !3098)
!3098 = distinct !DILexicalBlock(scope: !3095, file: !3, line: 459, column: 7)
!3099 = !DILocation(line: 459, column: 23, scope: !3098)
!3100 = !DILocation(line: 459, column: 38, scope: !3098)
!3101 = !DILocation(line: 459, column: 21, scope: !3098)
!3102 = !DILocation(line: 459, column: 7, scope: !3095)
!3103 = !DILocalVariable(name: "loop", scope: !3104, file: !3, line: 461, type: !436)
!3104 = distinct !DILexicalBlock(scope: !3098, file: !3, line: 460, column: 2)
!3105 = !DILocation(line: 461, column: 17, scope: !3104)
!3106 = !DILocalVariable(name: "ei", scope: !3104, file: !3, line: 462, type: !2097)
!3107 = !DILocation(line: 462, column: 18, scope: !3104)
!3108 = !DILocation(line: 466, column: 9, scope: !3109)
!3109 = distinct !DILexicalBlock(scope: !3104, file: !3, line: 466, column: 8)
!3110 = !DILocation(line: 466, column: 8, scope: !3104)
!3111 = !DILocation(line: 467, column: 6, scope: !3109)
!3112 = !DILocation(line: 469, column: 13, scope: !3104)
!3113 = !DILocation(line: 469, column: 11, scope: !3104)
!3114 = !DILocation(line: 471, column: 11, scope: !3104)
!3115 = !DILocation(line: 471, column: 9, scope: !3104)
!3116 = !DILocation(line: 472, column: 4, scope: !3104)
!3117 = !DILocation(line: 474, column: 19, scope: !3104)
!3118 = !DILocation(line: 474, column: 4, scope: !3104)
!3119 = !DILocation(line: 474, column: 10, scope: !3104)
!3120 = !DILocation(line: 474, column: 17, scope: !3104)
!3121 = !DILocation(line: 475, column: 16, scope: !3104)
!3122 = !DILocation(line: 475, column: 4, scope: !3104)
!3123 = !DILocation(line: 475, column: 10, scope: !3104)
!3124 = !DILocation(line: 475, column: 14, scope: !3104)
!3125 = !DILocation(line: 476, column: 13, scope: !3104)
!3126 = !DILocation(line: 478, column: 29, scope: !3104)
!3127 = !DILocation(line: 478, column: 37, scope: !3104)
!3128 = !DILocation(line: 478, column: 50, scope: !3104)
!3129 = !DILocation(line: 478, column: 4, scope: !3104)
!3130 = !DILocation(line: 479, column: 44, scope: !3104)
!3131 = !DILocation(line: 479, column: 50, scope: !3104)
!3132 = !DILocation(line: 479, column: 58, scope: !3104)
!3133 = !DILocation(line: 479, column: 22, scope: !3104)
!3134 = !DILocation(line: 479, column: 4, scope: !3104)
!3135 = !DILocation(line: 479, column: 10, scope: !3104)
!3136 = !DILocation(line: 479, column: 20, scope: !3104)
!3137 = !DILocation(line: 483, column: 4, scope: !3138)
!3138 = distinct !DILexicalBlock(scope: !3104, file: !3, line: 483, column: 4)
!3139 = !DILocation(line: 483, column: 4, scope: !3140)
!3140 = distinct !DILexicalBlock(scope: !3138, file: !3, line: 483, column: 4)
!3141 = !DILocalVariable(name: "latch", scope: !3142, file: !3, line: 485, type: !979)
!3142 = distinct !DILexicalBlock(scope: !3140, file: !3, line: 484, column: 6)
!3143 = !DILocation(line: 485, column: 20, scope: !3142)
!3144 = !DILocation(line: 485, column: 28, scope: !3142)
!3145 = !DILocation(line: 485, column: 31, scope: !3142)
!3146 = !DILocation(line: 487, column: 35, scope: !3147)
!3147 = distinct !DILexicalBlock(scope: !3142, file: !3, line: 487, column: 12)
!3148 = !DILocation(line: 487, column: 41, scope: !3147)
!3149 = !DILocation(line: 487, column: 12, scope: !3147)
!3150 = !DILocation(line: 487, column: 12, scope: !3142)
!3151 = !DILocation(line: 489, column: 9, scope: !3152)
!3152 = distinct !DILexicalBlock(scope: !3153, file: !3, line: 489, column: 9)
!3153 = distinct !DILexicalBlock(scope: !3147, file: !3, line: 488, column: 3)
!3154 = !DILocation(line: 489, column: 15, scope: !3152)
!3155 = !DILocation(line: 489, column: 21, scope: !3152)
!3156 = !DILocation(line: 489, column: 9, scope: !3153)
!3157 = !DILocation(line: 492, column: 9, scope: !3158)
!3158 = distinct !DILexicalBlock(scope: !3152, file: !3, line: 490, column: 7)
!3159 = !DILocation(line: 492, column: 15, scope: !3158)
!3160 = !DILocation(line: 492, column: 21, scope: !3158)
!3161 = !DILocation(line: 493, column: 9, scope: !3158)
!3162 = !DILocation(line: 495, column: 19, scope: !3153)
!3163 = !DILocation(line: 495, column: 5, scope: !3153)
!3164 = !DILocation(line: 495, column: 11, scope: !3153)
!3165 = !DILocation(line: 495, column: 17, scope: !3153)
!3166 = !DILocation(line: 496, column: 3, scope: !3153)
!3167 = !DILocation(line: 497, column: 6, scope: !3142)
!3168 = distinct !{!3168, !3137, !3169}
!3169 = !DILocation(line: 497, column: 6, scope: !3138)
!3170 = !DILocation(line: 498, column: 2, scope: !3104)
!3171 = !DILocation(line: 459, column: 59, scope: !3098)
!3172 = !DILocation(line: 459, column: 7, scope: !3098)
!3173 = distinct !{!3173, !3102, !3174}
!3174 = !DILocation(line: 498, column: 2, scope: !3095)
!3175 = !DILocation(line: 500, column: 13, scope: !3086)
!3176 = !DILocation(line: 500, column: 7, scope: !3086)
!3177 = !DILocation(line: 501, column: 13, scope: !3086)
!3178 = !DILocation(line: 501, column: 7, scope: !3086)
!3179 = !DILocation(line: 502, column: 5, scope: !3086)
!3180 = !DILocation(line: 504, column: 3, scope: !2959)
!3181 = !DILocation(line: 506, column: 3, scope: !2959)
!3182 = !DILocation(line: 506, column: 10, scope: !2959)
!3183 = !DILocation(line: 506, column: 16, scope: !2959)
!3184 = !DILocation(line: 507, column: 10, scope: !2959)
!3185 = !DILocation(line: 507, column: 3, scope: !2959)
!3186 = !DILocation(line: 508, column: 1, scope: !2959)
!3187 = distinct !DISubprogram(name: "init_loops_structure", scope: !3, file: !3, line: 351, type: !3188, scopeLine: 352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3188 = !DISubroutineType(types: !3189)
!3189 = !{null, !1145, !7}
!3190 = !DILocalVariable(name: "loops", arg: 1, scope: !3187, file: !3, line: 351, type: !1145)
!3191 = !DILocation(line: 351, column: 37, scope: !3187)
!3192 = !DILocalVariable(name: "num_loops", arg: 2, scope: !3187, file: !3, line: 351, type: !7)
!3193 = !DILocation(line: 351, column: 53, scope: !3187)
!3194 = !DILocalVariable(name: "root", scope: !3187, file: !3, line: 353, type: !436)
!3195 = !DILocation(line: 353, column: 16, scope: !3187)
!3196 = !DILocation(line: 355, column: 11, scope: !3187)
!3197 = !DILocation(line: 355, column: 3, scope: !3187)
!3198 = !DILocation(line: 356, column: 19, scope: !3187)
!3199 = !DILocation(line: 356, column: 3, scope: !3187)
!3200 = !DILocation(line: 356, column: 10, scope: !3187)
!3201 = !DILocation(line: 356, column: 17, scope: !3187)
!3202 = !DILocation(line: 359, column: 10, scope: !3187)
!3203 = !DILocation(line: 359, column: 8, scope: !3187)
!3204 = !DILocation(line: 360, column: 21, scope: !3187)
!3205 = !DILocation(line: 360, column: 3, scope: !3187)
!3206 = !DILocation(line: 360, column: 9, scope: !3187)
!3207 = !DILocation(line: 360, column: 19, scope: !3187)
!3208 = !DILocation(line: 361, column: 17, scope: !3187)
!3209 = !DILocation(line: 361, column: 3, scope: !3187)
!3210 = !DILocation(line: 361, column: 9, scope: !3187)
!3211 = !DILocation(line: 361, column: 15, scope: !3187)
!3212 = !DILocation(line: 362, column: 18, scope: !3187)
!3213 = !DILocation(line: 362, column: 3, scope: !3187)
!3214 = !DILocation(line: 362, column: 9, scope: !3187)
!3215 = !DILocation(line: 362, column: 16, scope: !3187)
!3216 = !DILocation(line: 363, column: 34, scope: !3187)
!3217 = !DILocation(line: 363, column: 3, scope: !3187)
!3218 = !DILocation(line: 363, column: 20, scope: !3187)
!3219 = !DILocation(line: 363, column: 32, scope: !3187)
!3220 = !DILocation(line: 364, column: 33, scope: !3187)
!3221 = !DILocation(line: 364, column: 3, scope: !3187)
!3222 = !DILocation(line: 364, column: 19, scope: !3187)
!3223 = !DILocation(line: 364, column: 31, scope: !3187)
!3224 = !DILocation(line: 366, column: 3, scope: !3187)
!3225 = !DILocation(line: 367, column: 22, scope: !3187)
!3226 = !DILocation(line: 367, column: 3, scope: !3187)
!3227 = !DILocation(line: 367, column: 10, scope: !3187)
!3228 = !DILocation(line: 367, column: 20, scope: !3187)
!3229 = !DILocation(line: 368, column: 1, scope: !3187)
!3230 = distinct !DISubprogram(name: "SET_BIT", scope: !2972, file: !2972, line: 63, type: !3231, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3231 = !DISubroutineType(types: !3232)
!3232 = !{null, !2971, !7}
!3233 = !DILocalVariable(name: "map", arg: 1, scope: !3230, file: !2972, line: 63, type: !2971)
!3234 = !DILocation(line: 63, column: 18, scope: !3230)
!3235 = !DILocalVariable(name: "bitno", arg: 2, scope: !3230, file: !2972, line: 63, type: !7)
!3236 = !DILocation(line: 63, column: 36, scope: !3230)
!3237 = !DILocation(line: 65, column: 7, scope: !3238)
!3238 = distinct !DILexicalBlock(scope: !3230, file: !2972, line: 65, column: 7)
!3239 = !DILocation(line: 65, column: 12, scope: !3238)
!3240 = !DILocation(line: 65, column: 7, scope: !3230)
!3241 = !DILocalVariable(name: "oldbit", scope: !3242, file: !2972, line: 67, type: !622)
!3242 = distinct !DILexicalBlock(scope: !3238, file: !2972, line: 66, column: 5)
!3243 = !DILocation(line: 67, column: 12, scope: !3242)
!3244 = !DILocation(line: 68, column: 16, scope: !3242)
!3245 = !DILocation(line: 68, column: 14, scope: !3242)
!3246 = !DILocation(line: 69, column: 12, scope: !3247)
!3247 = distinct !DILexicalBlock(scope: !3242, file: !2972, line: 69, column: 11)
!3248 = !DILocation(line: 69, column: 11, scope: !3242)
!3249 = !DILocation(line: 70, column: 2, scope: !3247)
!3250 = !DILocation(line: 70, column: 7, scope: !3247)
!3251 = !DILocation(line: 70, column: 16, scope: !3247)
!3252 = !DILocation(line: 70, column: 22, scope: !3247)
!3253 = !DILocation(line: 70, column: 41, scope: !3247)
!3254 = !DILocation(line: 71, column: 5, scope: !3242)
!3255 = !DILocation(line: 73, column: 33, scope: !3230)
!3256 = !DILocation(line: 73, column: 40, scope: !3230)
!3257 = !DILocation(line: 73, column: 29, scope: !3230)
!3258 = !DILocation(line: 72, column: 3, scope: !3230)
!3259 = !DILocation(line: 72, column: 8, scope: !3230)
!3260 = !DILocation(line: 72, column: 13, scope: !3230)
!3261 = !DILocation(line: 72, column: 19, scope: !3230)
!3262 = !DILocation(line: 73, column: 5, scope: !3230)
!3263 = !DILocation(line: 74, column: 1, scope: !3230)
!3264 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !135, file: !135, line: 281, type: !3265, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3265 = !DISubroutineType(types: !3266)
!3266 = !{!979, !2780, !7}
!3267 = !DILocalVariable(name: "vec_", arg: 1, scope: !3264, file: !135, line: 281, type: !2780)
!3268 = !DILocation(line: 281, column: 1, scope: !3264)
!3269 = !DILocalVariable(name: "ix_", arg: 2, scope: !3264, file: !135, line: 281, type: !7)
!3270 = !DILocation(line: 0, scope: !3264)
!3271 = distinct !DISubprogram(name: "VEC_loop_p_base_quick_push", scope: !378, file: !378, line: 85, type: !3272, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3272 = !DISubroutineType(types: !3273)
!3273 = !{!2277, !2925, !1162}
!3274 = !DILocalVariable(name: "vec_", arg: 1, scope: !3271, file: !378, line: 85, type: !2925)
!3275 = !DILocation(line: 85, column: 1, scope: !3271)
!3276 = !DILocalVariable(name: "obj_", arg: 2, scope: !3271, file: !378, line: 85, type: !1162)
!3277 = !DILocalVariable(name: "slot_", scope: !3271, file: !378, line: 85, type: !2277)
!3278 = distinct !DISubprogram(name: "flow_bb_inside_loop_p", scope: !3, file: !3, line: 773, type: !3279, scopeLine: 774, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3279 = !DISubroutineType(types: !3280)
!3280 = !{!622, !1847, !3281}
!3281 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !429, line: 112, baseType: !3282)
!3282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3283, size: 64)
!3283 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !444)
!3284 = !DILocalVariable(name: "loop", arg: 1, scope: !3278, file: !3, line: 773, type: !1847)
!3285 = !DILocation(line: 773, column: 43, scope: !3278)
!3286 = !DILocalVariable(name: "bb", arg: 2, scope: !3278, file: !3, line: 773, type: !3281)
!3287 = !DILocation(line: 773, column: 67, scope: !3278)
!3288 = !DILocalVariable(name: "source_loop", scope: !3278, file: !3, line: 775, type: !436)
!3289 = !DILocation(line: 775, column: 16, scope: !3278)
!3290 = !DILocation(line: 777, column: 7, scope: !3291)
!3291 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 777, column: 7)
!3292 = !DILocation(line: 777, column: 13, scope: !3291)
!3293 = !DILocation(line: 777, column: 10, scope: !3291)
!3294 = !DILocation(line: 777, column: 29, scope: !3291)
!3295 = !DILocation(line: 777, column: 32, scope: !3291)
!3296 = !DILocation(line: 777, column: 38, scope: !3291)
!3297 = !DILocation(line: 777, column: 35, scope: !3291)
!3298 = !DILocation(line: 777, column: 7, scope: !3278)
!3299 = !DILocation(line: 778, column: 5, scope: !3291)
!3300 = !DILocation(line: 780, column: 17, scope: !3278)
!3301 = !DILocation(line: 780, column: 21, scope: !3278)
!3302 = !DILocation(line: 780, column: 15, scope: !3278)
!3303 = !DILocation(line: 781, column: 10, scope: !3278)
!3304 = !DILocation(line: 781, column: 18, scope: !3278)
!3305 = !DILocation(line: 781, column: 15, scope: !3278)
!3306 = !DILocation(line: 781, column: 30, scope: !3278)
!3307 = !DILocation(line: 781, column: 53, scope: !3278)
!3308 = !DILocation(line: 781, column: 59, scope: !3278)
!3309 = !DILocation(line: 781, column: 33, scope: !3278)
!3310 = !DILocation(line: 781, column: 3, scope: !3278)
!3311 = !DILocation(line: 782, column: 1, scope: !3278)
!3312 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !378, file: !378, line: 85, type: !3313, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3313 = !DISubroutineType(types: !3314)
!3314 = !{!7, !1947}
!3315 = !DILocalVariable(name: "vec_", arg: 1, scope: !3312, file: !378, line: 85, type: !1947)
!3316 = !DILocation(line: 85, column: 1, scope: !3312)
!3317 = distinct !DISubprogram(name: "disambiguate_loops_with_multiple_latches", scope: !3, file: !3, line: 759, type: !3318, scopeLine: 760, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3318 = !DISubroutineType(types: !3319)
!3319 = !{null}
!3320 = !DILocalVariable(name: "li", scope: !3317, file: !3, line: 761, type: !2227)
!3321 = !DILocation(line: 761, column: 17, scope: !3317)
!3322 = !DILocalVariable(name: "loop", scope: !3317, file: !3, line: 762, type: !436)
!3323 = !DILocation(line: 762, column: 16, scope: !3317)
!3324 = !DILocation(line: 764, column: 3, scope: !3325)
!3325 = distinct !DILexicalBlock(scope: !3317, file: !3, line: 764, column: 3)
!3326 = !DILocation(line: 764, column: 3, scope: !3327)
!3327 = distinct !DILexicalBlock(scope: !3325, file: !3, line: 764, column: 3)
!3328 = !DILocation(line: 766, column: 12, scope: !3329)
!3329 = distinct !DILexicalBlock(scope: !3330, file: !3, line: 766, column: 11)
!3330 = distinct !DILexicalBlock(scope: !3327, file: !3, line: 765, column: 5)
!3331 = !DILocation(line: 766, column: 18, scope: !3329)
!3332 = !DILocation(line: 766, column: 11, scope: !3330)
!3333 = !DILocation(line: 767, column: 33, scope: !3329)
!3334 = !DILocation(line: 767, column: 2, scope: !3329)
!3335 = !DILocation(line: 768, column: 5, scope: !3330)
!3336 = distinct !{!3336, !3324, !3337}
!3337 = !DILocation(line: 768, column: 5, scope: !3325)
!3338 = !DILocation(line: 769, column: 1, scope: !3317)
!3339 = distinct !DISubprogram(name: "disambiguate_multiple_latches", scope: !3, file: !3, line: 717, type: !2528, scopeLine: 718, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3340 = !DILocalVariable(name: "loop", arg: 1, scope: !3339, file: !3, line: 717, type: !436)
!3341 = !DILocation(line: 717, column: 45, scope: !3339)
!3342 = !DILocalVariable(name: "e", scope: !3339, file: !3, line: 719, type: !459)
!3343 = !DILocation(line: 719, column: 8, scope: !3339)
!3344 = !DILocation(line: 732, column: 7, scope: !3345)
!3345 = distinct !DILexicalBlock(scope: !3339, file: !3, line: 732, column: 7)
!3346 = !DILocation(line: 732, column: 7, scope: !3339)
!3347 = !DILocation(line: 733, column: 14, scope: !3345)
!3348 = !DILocation(line: 734, column: 7, scope: !3345)
!3349 = !DILocation(line: 734, column: 13, scope: !3345)
!3350 = !DILocation(line: 733, column: 5, scope: !3345)
!3351 = !DILocation(line: 740, column: 18, scope: !3339)
!3352 = !DILocation(line: 740, column: 35, scope: !3339)
!3353 = !DILocation(line: 740, column: 41, scope: !3339)
!3354 = !DILocation(line: 740, column: 7, scope: !3339)
!3355 = !DILocation(line: 740, column: 5, scope: !3339)
!3356 = !DILocation(line: 741, column: 7, scope: !3357)
!3357 = distinct !DILexicalBlock(scope: !3339, file: !3, line: 741, column: 7)
!3358 = !DILocation(line: 741, column: 7, scope: !3339)
!3359 = !DILocation(line: 742, column: 17, scope: !3357)
!3360 = !DILocation(line: 742, column: 5, scope: !3357)
!3361 = !DILocation(line: 744, column: 3, scope: !3339)
!3362 = !DILocation(line: 746, column: 36, scope: !3363)
!3363 = distinct !DILexicalBlock(scope: !3339, file: !3, line: 745, column: 5)
!3364 = !DILocation(line: 746, column: 11, scope: !3363)
!3365 = !DILocation(line: 746, column: 9, scope: !3363)
!3366 = !DILocation(line: 747, column: 12, scope: !3367)
!3367 = distinct !DILexicalBlock(scope: !3363, file: !3, line: 747, column: 11)
!3368 = !DILocation(line: 747, column: 11, scope: !3363)
!3369 = !DILocation(line: 748, column: 2, scope: !3367)
!3370 = !DILocation(line: 750, column: 21, scope: !3363)
!3371 = !DILocation(line: 750, column: 27, scope: !3363)
!3372 = !DILocation(line: 750, column: 7, scope: !3363)
!3373 = distinct !{!3373, !3361, !3374}
!3374 = !DILocation(line: 751, column: 5, scope: !3339)
!3375 = !DILocation(line: 753, column: 22, scope: !3339)
!3376 = !DILocation(line: 753, column: 3, scope: !3339)
!3377 = !DILocation(line: 754, column: 1, scope: !3339)
!3378 = distinct !DISubprogram(name: "get_loop_body_with_size", scope: !3, file: !3, line: 801, type: !3379, scopeLine: 803, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3379 = !DISubroutineType(types: !3380)
!3380 = !{!7, !1847, !1827, !7}
!3381 = !DILocalVariable(name: "loop", arg: 1, scope: !3378, file: !3, line: 801, type: !1847)
!3382 = !DILocation(line: 801, column: 45, scope: !3378)
!3383 = !DILocalVariable(name: "body", arg: 2, scope: !3378, file: !3, line: 801, type: !1827)
!3384 = !DILocation(line: 801, column: 64, scope: !3378)
!3385 = !DILocalVariable(name: "max_size", arg: 3, scope: !3378, file: !3, line: 802, type: !7)
!3386 = !DILocation(line: 802, column: 14, scope: !3378)
!3387 = !DILocation(line: 804, column: 30, scope: !3378)
!3388 = !DILocation(line: 804, column: 36, scope: !3378)
!3389 = !DILocation(line: 805, column: 9, scope: !3378)
!3390 = !DILocation(line: 805, column: 15, scope: !3378)
!3391 = !DILocation(line: 805, column: 25, scope: !3378)
!3392 = !DILocation(line: 804, column: 10, scope: !3378)
!3393 = !DILocation(line: 804, column: 3, scope: !3378)
!3394 = distinct !DISubprogram(name: "glb_enum_p", scope: !3, file: !3, line: 786, type: !3395, scopeLine: 787, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3395 = !DISubroutineType(types: !3396)
!3396 = !{!622, !3281, !852}
!3397 = !DILocalVariable(name: "bb", arg: 1, scope: !3394, file: !3, line: 786, type: !3281)
!3398 = !DILocation(line: 786, column: 31, scope: !3394)
!3399 = !DILocalVariable(name: "glb_loop", arg: 2, scope: !3394, file: !3, line: 786, type: !852)
!3400 = !DILocation(line: 786, column: 47, scope: !3394)
!3401 = !DILocalVariable(name: "loop", scope: !3394, file: !3, line: 788, type: !3402)
!3402 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1847)
!3403 = !DILocation(line: 788, column: 28, scope: !3394)
!3404 = !DILocation(line: 788, column: 57, scope: !3394)
!3405 = !DILocation(line: 788, column: 35, scope: !3394)
!3406 = !DILocation(line: 789, column: 11, scope: !3394)
!3407 = !DILocation(line: 789, column: 17, scope: !3394)
!3408 = !DILocation(line: 789, column: 23, scope: !3394)
!3409 = !DILocation(line: 789, column: 14, scope: !3394)
!3410 = !DILocation(line: 790, column: 4, scope: !3394)
!3411 = !DILocation(line: 790, column: 39, scope: !3394)
!3412 = !DILocation(line: 790, column: 43, scope: !3394)
!3413 = !DILocation(line: 790, column: 49, scope: !3394)
!3414 = !DILocation(line: 790, column: 7, scope: !3394)
!3415 = !DILocation(line: 0, scope: !3394)
!3416 = !DILocation(line: 789, column: 10, scope: !3394)
!3417 = !DILocation(line: 789, column: 3, scope: !3394)
!3418 = distinct !DISubprogram(name: "get_loop_body_in_dom_order", scope: !3, file: !3, line: 873, type: !2167, scopeLine: 874, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3419 = !DILocalVariable(name: "loop", arg: 1, scope: !3418, file: !3, line: 873, type: !1847)
!3420 = !DILocation(line: 873, column: 48, scope: !3418)
!3421 = !DILocalVariable(name: "tovisit", scope: !3418, file: !3, line: 875, type: !1827)
!3422 = !DILocation(line: 875, column: 16, scope: !3418)
!3423 = !DILocalVariable(name: "tv", scope: !3418, file: !3, line: 876, type: !440)
!3424 = !DILocation(line: 876, column: 7, scope: !3418)
!3425 = !DILocation(line: 878, column: 3, scope: !3418)
!3426 = !DILocation(line: 880, column: 13, scope: !3418)
!3427 = !DILocation(line: 880, column: 11, scope: !3418)
!3428 = !DILocation(line: 882, column: 3, scope: !3418)
!3429 = !DILocation(line: 884, column: 6, scope: !3418)
!3430 = !DILocation(line: 885, column: 22, scope: !3418)
!3431 = !DILocation(line: 885, column: 28, scope: !3418)
!3432 = !DILocation(line: 885, column: 34, scope: !3418)
!3433 = !DILocation(line: 885, column: 42, scope: !3418)
!3434 = !DILocation(line: 885, column: 3, scope: !3418)
!3435 = !DILocation(line: 887, column: 3, scope: !3418)
!3436 = !DILocation(line: 889, column: 10, scope: !3418)
!3437 = !DILocation(line: 889, column: 3, scope: !3418)
!3438 = distinct !DISubprogram(name: "fill_sons_in_loop", scope: !3, file: !3, line: 843, type: !3439, scopeLine: 845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3439 = !DISubroutineType(types: !3440)
!3440 = !{null, !1847, !979, !1827, !1826}
!3441 = !DILocalVariable(name: "loop", arg: 1, scope: !3438, file: !3, line: 843, type: !1847)
!3442 = !DILocation(line: 843, column: 39, scope: !3438)
!3443 = !DILocalVariable(name: "bb", arg: 2, scope: !3438, file: !3, line: 843, type: !979)
!3444 = !DILocation(line: 843, column: 57, scope: !3438)
!3445 = !DILocalVariable(name: "tovisit", arg: 3, scope: !3438, file: !3, line: 844, type: !1827)
!3446 = !DILocation(line: 844, column: 19, scope: !3438)
!3447 = !DILocalVariable(name: "tv", arg: 4, scope: !3438, file: !3, line: 844, type: !1826)
!3448 = !DILocation(line: 844, column: 33, scope: !3438)
!3449 = !DILocalVariable(name: "son", scope: !3438, file: !3, line: 846, type: !979)
!3450 = !DILocation(line: 846, column: 15, scope: !3438)
!3451 = !DILocalVariable(name: "postpone", scope: !3438, file: !3, line: 846, type: !979)
!3452 = !DILocation(line: 846, column: 20, scope: !3438)
!3453 = !DILocation(line: 848, column: 22, scope: !3438)
!3454 = !DILocation(line: 848, column: 3, scope: !3438)
!3455 = !DILocation(line: 848, column: 13, scope: !3438)
!3456 = !DILocation(line: 848, column: 16, scope: !3438)
!3457 = !DILocation(line: 848, column: 20, scope: !3438)
!3458 = !DILocation(line: 849, column: 45, scope: !3459)
!3459 = distinct !DILexicalBlock(scope: !3438, file: !3, line: 849, column: 3)
!3460 = !DILocation(line: 849, column: 14, scope: !3459)
!3461 = !DILocation(line: 849, column: 12, scope: !3459)
!3462 = !DILocation(line: 849, column: 8, scope: !3459)
!3463 = !DILocation(line: 850, column: 8, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3459, file: !3, line: 849, column: 3)
!3465 = !DILocation(line: 849, column: 3, scope: !3459)
!3466 = !DILocation(line: 853, column: 35, scope: !3467)
!3467 = distinct !DILexicalBlock(scope: !3468, file: !3, line: 853, column: 11)
!3468 = distinct !DILexicalBlock(scope: !3464, file: !3, line: 852, column: 5)
!3469 = !DILocation(line: 853, column: 41, scope: !3467)
!3470 = !DILocation(line: 853, column: 12, scope: !3467)
!3471 = !DILocation(line: 853, column: 11, scope: !3468)
!3472 = !DILocation(line: 854, column: 2, scope: !3467)
!3473 = !DILocation(line: 856, column: 43, scope: !3474)
!3474 = distinct !DILexicalBlock(scope: !3468, file: !3, line: 856, column: 11)
!3475 = !DILocation(line: 856, column: 49, scope: !3474)
!3476 = !DILocation(line: 856, column: 56, scope: !3474)
!3477 = !DILocation(line: 856, column: 11, scope: !3474)
!3478 = !DILocation(line: 856, column: 11, scope: !3468)
!3479 = !DILocation(line: 858, column: 15, scope: !3480)
!3480 = distinct !DILexicalBlock(scope: !3474, file: !3, line: 857, column: 2)
!3481 = !DILocation(line: 858, column: 13, scope: !3480)
!3482 = !DILocation(line: 859, column: 4, scope: !3480)
!3483 = !DILocation(line: 861, column: 26, scope: !3468)
!3484 = !DILocation(line: 861, column: 32, scope: !3468)
!3485 = !DILocation(line: 861, column: 37, scope: !3468)
!3486 = !DILocation(line: 861, column: 46, scope: !3468)
!3487 = !DILocation(line: 861, column: 7, scope: !3468)
!3488 = !DILocation(line: 862, column: 5, scope: !3468)
!3489 = !DILocation(line: 851, column: 44, scope: !3464)
!3490 = !DILocation(line: 851, column: 14, scope: !3464)
!3491 = !DILocation(line: 851, column: 12, scope: !3464)
!3492 = !DILocation(line: 849, column: 3, scope: !3464)
!3493 = distinct !{!3493, !3465, !3494}
!3494 = !DILocation(line: 862, column: 5, scope: !3459)
!3495 = !DILocation(line: 864, column: 7, scope: !3496)
!3496 = distinct !DILexicalBlock(scope: !3438, file: !3, line: 864, column: 7)
!3497 = !DILocation(line: 864, column: 7, scope: !3438)
!3498 = !DILocation(line: 865, column: 24, scope: !3496)
!3499 = !DILocation(line: 865, column: 30, scope: !3496)
!3500 = !DILocation(line: 865, column: 40, scope: !3496)
!3501 = !DILocation(line: 865, column: 49, scope: !3496)
!3502 = !DILocation(line: 865, column: 5, scope: !3496)
!3503 = !DILocation(line: 866, column: 1, scope: !3438)
!3504 = distinct !DISubprogram(name: "get_loop_body_in_custom_order", scope: !3, file: !3, line: 895, type: !3505, scopeLine: 897, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3505 = !DISubroutineType(types: !3506)
!3506 = !{!1827, !1847, !1023}
!3507 = !DILocalVariable(name: "loop", arg: 1, scope: !3504, file: !3, line: 895, type: !1847)
!3508 = !DILocation(line: 895, column: 51, scope: !3504)
!3509 = !DILocalVariable(name: "bb_comparator", arg: 2, scope: !3504, file: !3, line: 896, type: !1023)
!3510 = !DILocation(line: 896, column: 17, scope: !3504)
!3511 = !DILocalVariable(name: "bbs", scope: !3504, file: !3, line: 898, type: !1827)
!3512 = !DILocation(line: 898, column: 16, scope: !3504)
!3513 = !DILocation(line: 898, column: 37, scope: !3504)
!3514 = !DILocation(line: 898, column: 22, scope: !3504)
!3515 = !DILocation(line: 901, column: 15, scope: !3504)
!3516 = !DILocation(line: 901, column: 20, scope: !3504)
!3517 = !DILocation(line: 901, column: 26, scope: !3504)
!3518 = !DILocation(line: 901, column: 59, scope: !3504)
!3519 = !DILocation(line: 901, column: 3, scope: !3504)
!3520 = !DILocation(line: 906, column: 10, scope: !3504)
!3521 = !DILocation(line: 906, column: 3, scope: !3504)
!3522 = distinct !DISubprogram(name: "get_loop_body_in_bfs_order", scope: !3, file: !3, line: 912, type: !2167, scopeLine: 913, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3523 = !DILocalVariable(name: "loop", arg: 1, scope: !3522, file: !3, line: 912, type: !1847)
!3524 = !DILocation(line: 912, column: 48, scope: !3522)
!3525 = !DILocalVariable(name: "blocks", scope: !3522, file: !3, line: 914, type: !1827)
!3526 = !DILocation(line: 914, column: 16, scope: !3522)
!3527 = !DILocalVariable(name: "bb", scope: !3522, file: !3, line: 915, type: !979)
!3528 = !DILocation(line: 915, column: 15, scope: !3522)
!3529 = !DILocalVariable(name: "visited", scope: !3522, file: !3, line: 916, type: !1097)
!3530 = !DILocation(line: 916, column: 10, scope: !3522)
!3531 = !DILocalVariable(name: "i", scope: !3522, file: !3, line: 917, type: !7)
!3532 = !DILocation(line: 917, column: 16, scope: !3522)
!3533 = !DILocalVariable(name: "vc", scope: !3522, file: !3, line: 918, type: !7)
!3534 = !DILocation(line: 918, column: 16, scope: !3522)
!3535 = !DILocation(line: 920, column: 3, scope: !3522)
!3536 = !DILocation(line: 921, column: 3, scope: !3522)
!3537 = !DILocation(line: 923, column: 12, scope: !3522)
!3538 = !DILocation(line: 923, column: 10, scope: !3522)
!3539 = !DILocation(line: 924, column: 13, scope: !3522)
!3540 = !DILocation(line: 924, column: 11, scope: !3522)
!3541 = !DILocation(line: 926, column: 8, scope: !3522)
!3542 = !DILocation(line: 926, column: 14, scope: !3522)
!3543 = !DILocation(line: 926, column: 6, scope: !3522)
!3544 = !DILocation(line: 927, column: 3, scope: !3522)
!3545 = !DILocation(line: 927, column: 10, scope: !3522)
!3546 = !DILocation(line: 927, column: 14, scope: !3522)
!3547 = !DILocation(line: 927, column: 20, scope: !3522)
!3548 = !DILocation(line: 927, column: 12, scope: !3522)
!3549 = !DILocalVariable(name: "e", scope: !3550, file: !3, line: 929, type: !459)
!3550 = distinct !DILexicalBlock(scope: !3522, file: !3, line: 928, column: 5)
!3551 = !DILocation(line: 929, column: 12, scope: !3550)
!3552 = !DILocalVariable(name: "ei", scope: !3550, file: !3, line: 930, type: !2097)
!3553 = !DILocation(line: 930, column: 21, scope: !3550)
!3554 = !DILocation(line: 932, column: 26, scope: !3555)
!3555 = distinct !DILexicalBlock(scope: !3550, file: !3, line: 932, column: 11)
!3556 = !DILocation(line: 932, column: 35, scope: !3555)
!3557 = !DILocation(line: 932, column: 39, scope: !3555)
!3558 = !DILocation(line: 932, column: 12, scope: !3555)
!3559 = !DILocation(line: 932, column: 11, scope: !3550)
!3560 = !DILocation(line: 935, column: 20, scope: !3561)
!3561 = distinct !DILexicalBlock(scope: !3555, file: !3, line: 933, column: 2)
!3562 = !DILocation(line: 935, column: 29, scope: !3561)
!3563 = !DILocation(line: 935, column: 33, scope: !3561)
!3564 = !DILocation(line: 935, column: 4, scope: !3561)
!3565 = !DILocation(line: 936, column: 18, scope: !3561)
!3566 = !DILocation(line: 936, column: 4, scope: !3561)
!3567 = !DILocation(line: 936, column: 12, scope: !3561)
!3568 = !DILocation(line: 936, column: 16, scope: !3561)
!3569 = !DILocation(line: 937, column: 2, scope: !3561)
!3570 = !DILocation(line: 939, column: 7, scope: !3571)
!3571 = distinct !DILexicalBlock(scope: !3550, file: !3, line: 939, column: 7)
!3572 = !DILocation(line: 939, column: 7, scope: !3573)
!3573 = distinct !DILexicalBlock(scope: !3571, file: !3, line: 939, column: 7)
!3574 = !DILocation(line: 941, column: 31, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3576, file: !3, line: 941, column: 8)
!3576 = distinct !DILexicalBlock(scope: !3573, file: !3, line: 940, column: 2)
!3577 = !DILocation(line: 941, column: 37, scope: !3575)
!3578 = !DILocation(line: 941, column: 40, scope: !3575)
!3579 = !DILocation(line: 941, column: 8, scope: !3575)
!3580 = !DILocation(line: 941, column: 8, scope: !3576)
!3581 = !DILocation(line: 943, column: 27, scope: !3582)
!3582 = distinct !DILexicalBlock(scope: !3583, file: !3, line: 943, column: 12)
!3583 = distinct !DILexicalBlock(scope: !3575, file: !3, line: 942, column: 6)
!3584 = !DILocation(line: 943, column: 36, scope: !3582)
!3585 = !DILocation(line: 943, column: 39, scope: !3582)
!3586 = !DILocation(line: 943, column: 45, scope: !3582)
!3587 = !DILocation(line: 943, column: 13, scope: !3582)
!3588 = !DILocation(line: 943, column: 12, scope: !3583)
!3589 = !DILocation(line: 945, column: 21, scope: !3590)
!3590 = distinct !DILexicalBlock(scope: !3582, file: !3, line: 944, column: 3)
!3591 = !DILocation(line: 945, column: 30, scope: !3590)
!3592 = !DILocation(line: 945, column: 33, scope: !3590)
!3593 = !DILocation(line: 945, column: 39, scope: !3590)
!3594 = !DILocation(line: 945, column: 5, scope: !3590)
!3595 = !DILocation(line: 946, column: 19, scope: !3590)
!3596 = !DILocation(line: 946, column: 22, scope: !3590)
!3597 = !DILocation(line: 946, column: 5, scope: !3590)
!3598 = !DILocation(line: 946, column: 13, scope: !3590)
!3599 = !DILocation(line: 946, column: 17, scope: !3590)
!3600 = !DILocation(line: 947, column: 3, scope: !3590)
!3601 = !DILocation(line: 948, column: 6, scope: !3583)
!3602 = !DILocation(line: 949, column: 2, scope: !3576)
!3603 = distinct !{!3603, !3570, !3604}
!3604 = !DILocation(line: 949, column: 2, scope: !3571)
!3605 = !DILocation(line: 951, column: 7, scope: !3550)
!3606 = !DILocation(line: 953, column: 12, scope: !3550)
!3607 = !DILocation(line: 953, column: 21, scope: !3550)
!3608 = !DILocation(line: 953, column: 10, scope: !3550)
!3609 = distinct !{!3609, !3544, !3610}
!3610 = !DILocation(line: 954, column: 5, scope: !3522)
!3611 = !DILocation(line: 956, column: 3, scope: !3522)
!3612 = !DILocation(line: 957, column: 10, scope: !3522)
!3613 = !DILocation(line: 957, column: 3, scope: !3522)
!3614 = distinct !DISubprogram(name: "rescan_loop_exit", scope: !3, file: !3, line: 1014, type: !3615, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3615 = !DISubroutineType(types: !3616)
!3616 = !{null, !459, !622, !622}
!3617 = !DILocalVariable(name: "e", arg: 1, scope: !3614, file: !3, line: 1014, type: !459)
!3618 = !DILocation(line: 1014, column: 24, scope: !3614)
!3619 = !DILocalVariable(name: "new_edge", arg: 2, scope: !3614, file: !3, line: 1014, type: !622)
!3620 = !DILocation(line: 1014, column: 32, scope: !3614)
!3621 = !DILocalVariable(name: "removed", arg: 3, scope: !3614, file: !3, line: 1014, type: !622)
!3622 = !DILocation(line: 1014, column: 47, scope: !3614)
!3623 = !DILocalVariable(name: "slot", scope: !3614, file: !3, line: 1016, type: !1032)
!3624 = !DILocation(line: 1016, column: 10, scope: !3614)
!3625 = !DILocalVariable(name: "exits", scope: !3614, file: !3, line: 1017, type: !1817)
!3626 = !DILocation(line: 1017, column: 21, scope: !3614)
!3627 = !DILocalVariable(name: "exit", scope: !3614, file: !3, line: 1017, type: !1817)
!3628 = !DILocation(line: 1017, column: 36, scope: !3614)
!3629 = !DILocalVariable(name: "aloop", scope: !3614, file: !3, line: 1018, type: !436)
!3630 = !DILocation(line: 1018, column: 16, scope: !3614)
!3631 = !DILocalVariable(name: "cloop", scope: !3614, file: !3, line: 1018, type: !436)
!3632 = !DILocation(line: 1018, column: 24, scope: !3614)
!3633 = !DILocation(line: 1020, column: 8, scope: !3634)
!3634 = distinct !DILexicalBlock(scope: !3614, file: !3, line: 1020, column: 7)
!3635 = !DILocation(line: 1020, column: 7, scope: !3614)
!3636 = !DILocation(line: 1021, column: 5, scope: !3634)
!3637 = !DILocation(line: 1023, column: 8, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3614, file: !3, line: 1023, column: 7)
!3639 = !DILocation(line: 1024, column: 7, scope: !3638)
!3640 = !DILocation(line: 1024, column: 10, scope: !3638)
!3641 = !DILocation(line: 1024, column: 13, scope: !3638)
!3642 = !DILocation(line: 1024, column: 18, scope: !3638)
!3643 = !DILocation(line: 1024, column: 30, scope: !3638)
!3644 = !DILocation(line: 1025, column: 7, scope: !3638)
!3645 = !DILocation(line: 1025, column: 10, scope: !3638)
!3646 = !DILocation(line: 1025, column: 13, scope: !3638)
!3647 = !DILocation(line: 1025, column: 19, scope: !3638)
!3648 = !DILocation(line: 1025, column: 31, scope: !3638)
!3649 = !DILocation(line: 1026, column: 7, scope: !3638)
!3650 = !DILocation(line: 1026, column: 34, scope: !3638)
!3651 = !DILocation(line: 1026, column: 37, scope: !3638)
!3652 = !DILocation(line: 1026, column: 42, scope: !3638)
!3653 = !DILocation(line: 1026, column: 55, scope: !3638)
!3654 = !DILocation(line: 1026, column: 58, scope: !3638)
!3655 = !DILocation(line: 1026, column: 11, scope: !3638)
!3656 = !DILocation(line: 1023, column: 7, scope: !3614)
!3657 = !DILocation(line: 1028, column: 33, scope: !3658)
!3658 = distinct !DILexicalBlock(scope: !3638, file: !3, line: 1027, column: 5)
!3659 = !DILocation(line: 1028, column: 36, scope: !3658)
!3660 = !DILocation(line: 1028, column: 41, scope: !3658)
!3661 = !DILocation(line: 1028, column: 54, scope: !3658)
!3662 = !DILocation(line: 1028, column: 57, scope: !3658)
!3663 = !DILocation(line: 1028, column: 63, scope: !3658)
!3664 = !DILocation(line: 1028, column: 15, scope: !3658)
!3665 = !DILocation(line: 1028, column: 13, scope: !3658)
!3666 = !DILocation(line: 1029, column: 20, scope: !3667)
!3667 = distinct !DILexicalBlock(scope: !3658, file: !3, line: 1029, column: 7)
!3668 = !DILocation(line: 1029, column: 23, scope: !3667)
!3669 = !DILocation(line: 1029, column: 28, scope: !3667)
!3670 = !DILocation(line: 1029, column: 18, scope: !3667)
!3671 = !DILocation(line: 1029, column: 12, scope: !3667)
!3672 = !DILocation(line: 1030, column: 5, scope: !3673)
!3673 = distinct !DILexicalBlock(scope: !3667, file: !3, line: 1029, column: 7)
!3674 = !DILocation(line: 1030, column: 14, scope: !3673)
!3675 = !DILocation(line: 1030, column: 11, scope: !3673)
!3676 = !DILocation(line: 1029, column: 7, scope: !3667)
!3677 = !DILocation(line: 1033, column: 11, scope: !3678)
!3678 = distinct !DILexicalBlock(scope: !3673, file: !3, line: 1032, column: 2)
!3679 = !DILocation(line: 1033, column: 9, scope: !3678)
!3680 = !DILocation(line: 1034, column: 14, scope: !3678)
!3681 = !DILocation(line: 1034, column: 4, scope: !3678)
!3682 = !DILocation(line: 1034, column: 10, scope: !3678)
!3683 = !DILocation(line: 1034, column: 12, scope: !3678)
!3684 = !DILocation(line: 1036, column: 17, scope: !3678)
!3685 = !DILocation(line: 1036, column: 24, scope: !3678)
!3686 = !DILocation(line: 1036, column: 31, scope: !3678)
!3687 = !DILocation(line: 1036, column: 4, scope: !3678)
!3688 = !DILocation(line: 1036, column: 10, scope: !3678)
!3689 = !DILocation(line: 1036, column: 15, scope: !3678)
!3690 = !DILocation(line: 1037, column: 17, scope: !3678)
!3691 = !DILocation(line: 1037, column: 24, scope: !3678)
!3692 = !DILocation(line: 1037, column: 4, scope: !3678)
!3693 = !DILocation(line: 1037, column: 10, scope: !3678)
!3694 = !DILocation(line: 1037, column: 15, scope: !3678)
!3695 = !DILocation(line: 1038, column: 23, scope: !3678)
!3696 = !DILocation(line: 1038, column: 4, scope: !3678)
!3697 = !DILocation(line: 1038, column: 10, scope: !3678)
!3698 = !DILocation(line: 1038, column: 16, scope: !3678)
!3699 = !DILocation(line: 1038, column: 21, scope: !3678)
!3700 = !DILocation(line: 1039, column: 23, scope: !3678)
!3701 = !DILocation(line: 1039, column: 4, scope: !3678)
!3702 = !DILocation(line: 1039, column: 10, scope: !3678)
!3703 = !DILocation(line: 1039, column: 16, scope: !3678)
!3704 = !DILocation(line: 1039, column: 21, scope: !3678)
!3705 = !DILocation(line: 1041, column: 19, scope: !3678)
!3706 = !DILocation(line: 1041, column: 4, scope: !3678)
!3707 = !DILocation(line: 1041, column: 10, scope: !3678)
!3708 = !DILocation(line: 1041, column: 17, scope: !3678)
!3709 = !DILocation(line: 1042, column: 12, scope: !3678)
!3710 = !DILocation(line: 1042, column: 10, scope: !3678)
!3711 = !DILocation(line: 1043, column: 2, scope: !3678)
!3712 = !DILocation(line: 1031, column: 25, scope: !3673)
!3713 = !DILocation(line: 1031, column: 13, scope: !3673)
!3714 = !DILocation(line: 1031, column: 11, scope: !3673)
!3715 = !DILocation(line: 1029, column: 7, scope: !3673)
!3716 = distinct !{!3716, !3676, !3717}
!3717 = !DILocation(line: 1043, column: 2, scope: !3667)
!3718 = !DILocation(line: 1044, column: 5, scope: !3658)
!3719 = !DILocation(line: 1046, column: 8, scope: !3720)
!3720 = distinct !DILexicalBlock(scope: !3614, file: !3, line: 1046, column: 7)
!3721 = !DILocation(line: 1046, column: 14, scope: !3720)
!3722 = !DILocation(line: 1046, column: 17, scope: !3720)
!3723 = !DILocation(line: 1046, column: 7, scope: !3614)
!3724 = !DILocation(line: 1047, column: 5, scope: !3720)
!3725 = !DILocation(line: 1049, column: 36, scope: !3614)
!3726 = !DILocation(line: 1049, column: 51, scope: !3614)
!3727 = !DILocation(line: 1049, column: 58, scope: !3614)
!3728 = !DILocation(line: 1050, column: 8, scope: !3614)
!3729 = !DILocation(line: 1050, column: 27, scope: !3614)
!3730 = !DILocation(line: 1051, column: 8, scope: !3614)
!3731 = !DILocation(line: 1049, column: 10, scope: !3614)
!3732 = !DILocation(line: 1049, column: 8, scope: !3614)
!3733 = !DILocation(line: 1052, column: 8, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3614, file: !3, line: 1052, column: 7)
!3735 = !DILocation(line: 1052, column: 7, scope: !3614)
!3736 = !DILocation(line: 1053, column: 5, scope: !3734)
!3737 = !DILocation(line: 1055, column: 7, scope: !3738)
!3738 = distinct !DILexicalBlock(scope: !3614, file: !3, line: 1055, column: 7)
!3739 = !DILocation(line: 1055, column: 7, scope: !3614)
!3740 = !DILocation(line: 1057, column: 12, scope: !3741)
!3741 = distinct !DILexicalBlock(scope: !3742, file: !3, line: 1057, column: 11)
!3742 = distinct !DILexicalBlock(scope: !3738, file: !3, line: 1056, column: 5)
!3743 = !DILocation(line: 1057, column: 11, scope: !3741)
!3744 = !DILocation(line: 1057, column: 11, scope: !3742)
!3745 = !DILocation(line: 1058, column: 19, scope: !3741)
!3746 = !DILocation(line: 1058, column: 18, scope: !3741)
!3747 = !DILocation(line: 1058, column: 2, scope: !3741)
!3748 = !DILocation(line: 1059, column: 15, scope: !3742)
!3749 = !DILocation(line: 1059, column: 8, scope: !3742)
!3750 = !DILocation(line: 1059, column: 13, scope: !3742)
!3751 = !DILocation(line: 1060, column: 5, scope: !3742)
!3752 = !DILocation(line: 1062, column: 22, scope: !3738)
!3753 = !DILocation(line: 1062, column: 37, scope: !3738)
!3754 = !DILocation(line: 1062, column: 44, scope: !3738)
!3755 = !DILocation(line: 1062, column: 5, scope: !3738)
!3756 = !DILocation(line: 1063, column: 1, scope: !3614)
!3757 = distinct !DISubprogram(name: "loops_state_satisfies_p", scope: !378, file: !378, line: 471, type: !3758, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3758 = !DISubroutineType(types: !3759)
!3759 = !{!622, !7}
!3760 = !DILocalVariable(name: "flags", arg: 1, scope: !3757, file: !378, line: 471, type: !7)
!3761 = !DILocation(line: 471, column: 35, scope: !3757)
!3762 = !DILocation(line: 473, column: 11, scope: !3757)
!3763 = !DILocation(line: 473, column: 26, scope: !3757)
!3764 = !DILocation(line: 473, column: 34, scope: !3757)
!3765 = !DILocation(line: 473, column: 32, scope: !3757)
!3766 = !DILocation(line: 473, column: 44, scope: !3757)
!3767 = !DILocation(line: 473, column: 41, scope: !3757)
!3768 = !DILocation(line: 473, column: 10, scope: !3757)
!3769 = !DILocation(line: 473, column: 3, scope: !3757)
!3770 = distinct !DISubprogram(name: "find_common_loop", scope: !3, file: !3, line: 1250, type: !3771, scopeLine: 1251, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3771 = !DISubroutineType(types: !3772)
!3772 = !{!436, !436, !436}
!3773 = !DILocalVariable(name: "loop_s", arg: 1, scope: !3770, file: !3, line: 1250, type: !436)
!3774 = !DILocation(line: 1250, column: 32, scope: !3770)
!3775 = !DILocalVariable(name: "loop_d", arg: 2, scope: !3770, file: !3, line: 1250, type: !436)
!3776 = !DILocation(line: 1250, column: 53, scope: !3770)
!3777 = !DILocalVariable(name: "sdepth", scope: !3770, file: !3, line: 1252, type: !7)
!3778 = !DILocation(line: 1252, column: 12, scope: !3770)
!3779 = !DILocalVariable(name: "ddepth", scope: !3770, file: !3, line: 1252, type: !7)
!3780 = !DILocation(line: 1252, column: 20, scope: !3770)
!3781 = !DILocation(line: 1254, column: 8, scope: !3782)
!3782 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 1254, column: 7)
!3783 = !DILocation(line: 1254, column: 7, scope: !3770)
!3784 = !DILocation(line: 1254, column: 23, scope: !3782)
!3785 = !DILocation(line: 1254, column: 16, scope: !3782)
!3786 = !DILocation(line: 1255, column: 8, scope: !3787)
!3787 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 1255, column: 7)
!3788 = !DILocation(line: 1255, column: 7, scope: !3770)
!3789 = !DILocation(line: 1255, column: 23, scope: !3787)
!3790 = !DILocation(line: 1255, column: 16, scope: !3787)
!3791 = !DILocation(line: 1257, column: 24, scope: !3770)
!3792 = !DILocation(line: 1257, column: 12, scope: !3770)
!3793 = !DILocation(line: 1257, column: 10, scope: !3770)
!3794 = !DILocation(line: 1258, column: 24, scope: !3770)
!3795 = !DILocation(line: 1258, column: 12, scope: !3770)
!3796 = !DILocation(line: 1258, column: 10, scope: !3770)
!3797 = !DILocation(line: 1260, column: 7, scope: !3798)
!3798 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 1260, column: 7)
!3799 = !DILocation(line: 1260, column: 16, scope: !3798)
!3800 = !DILocation(line: 1260, column: 14, scope: !3798)
!3801 = !DILocation(line: 1260, column: 7, scope: !3770)
!3802 = !DILocation(line: 1261, column: 14, scope: !3798)
!3803 = !DILocation(line: 1261, column: 12, scope: !3798)
!3804 = !DILocation(line: 1261, column: 5, scope: !3798)
!3805 = !DILocation(line: 1262, column: 12, scope: !3806)
!3806 = distinct !DILexicalBlock(scope: !3798, file: !3, line: 1262, column: 12)
!3807 = !DILocation(line: 1262, column: 21, scope: !3806)
!3808 = !DILocation(line: 1262, column: 19, scope: !3806)
!3809 = !DILocation(line: 1262, column: 12, scope: !3798)
!3810 = !DILocation(line: 1263, column: 14, scope: !3806)
!3811 = !DILocation(line: 1263, column: 12, scope: !3806)
!3812 = !DILocation(line: 1263, column: 5, scope: !3806)
!3813 = !DILocation(line: 1265, column: 3, scope: !3770)
!3814 = !DILocation(line: 1265, column: 10, scope: !3770)
!3815 = !DILocation(line: 1265, column: 20, scope: !3770)
!3816 = !DILocation(line: 1265, column: 17, scope: !3770)
!3817 = !DILocation(line: 1267, column: 28, scope: !3818)
!3818 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 1266, column: 5)
!3819 = !DILocation(line: 1267, column: 16, scope: !3818)
!3820 = !DILocation(line: 1267, column: 14, scope: !3818)
!3821 = !DILocation(line: 1268, column: 28, scope: !3818)
!3822 = !DILocation(line: 1268, column: 16, scope: !3818)
!3823 = !DILocation(line: 1268, column: 14, scope: !3818)
!3824 = distinct !{!3824, !3813, !3825}
!3825 = !DILocation(line: 1269, column: 5, scope: !3770)
!3826 = !DILocation(line: 1270, column: 10, scope: !3770)
!3827 = !DILocation(line: 1270, column: 3, scope: !3770)
!3828 = !DILocation(line: 1271, column: 1, scope: !3770)
!3829 = distinct !DISubprogram(name: "loop_exit_free", scope: !3, file: !3, line: 983, type: !1029, scopeLine: 984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3830 = !DILocalVariable(name: "ex", arg: 1, scope: !3829, file: !3, line: 983, type: !782)
!3831 = !DILocation(line: 983, column: 23, scope: !3829)
!3832 = !DILocalVariable(name: "exit", scope: !3829, file: !3, line: 985, type: !1817)
!3833 = !DILocation(line: 985, column: 21, scope: !3829)
!3834 = !DILocation(line: 985, column: 49, scope: !3829)
!3835 = !DILocation(line: 985, column: 28, scope: !3829)
!3836 = !DILocalVariable(name: "next", scope: !3829, file: !3, line: 985, type: !1817)
!3837 = !DILocation(line: 985, column: 54, scope: !3829)
!3838 = !DILocation(line: 987, column: 3, scope: !3829)
!3839 = !DILocation(line: 987, column: 10, scope: !3840)
!3840 = distinct !DILexicalBlock(scope: !3841, file: !3, line: 987, column: 3)
!3841 = distinct !DILexicalBlock(scope: !3829, file: !3, line: 987, column: 3)
!3842 = !DILocation(line: 987, column: 3, scope: !3841)
!3843 = !DILocation(line: 989, column: 14, scope: !3844)
!3844 = distinct !DILexicalBlock(scope: !3840, file: !3, line: 988, column: 5)
!3845 = !DILocation(line: 989, column: 20, scope: !3844)
!3846 = !DILocation(line: 989, column: 12, scope: !3844)
!3847 = !DILocation(line: 991, column: 26, scope: !3844)
!3848 = !DILocation(line: 991, column: 32, scope: !3844)
!3849 = !DILocation(line: 991, column: 7, scope: !3844)
!3850 = !DILocation(line: 991, column: 13, scope: !3844)
!3851 = !DILocation(line: 991, column: 19, scope: !3844)
!3852 = !DILocation(line: 991, column: 24, scope: !3844)
!3853 = !DILocation(line: 992, column: 26, scope: !3844)
!3854 = !DILocation(line: 992, column: 32, scope: !3844)
!3855 = !DILocation(line: 992, column: 7, scope: !3844)
!3856 = !DILocation(line: 992, column: 13, scope: !3844)
!3857 = !DILocation(line: 992, column: 19, scope: !3844)
!3858 = !DILocation(line: 992, column: 24, scope: !3844)
!3859 = !DILocation(line: 994, column: 17, scope: !3844)
!3860 = !DILocation(line: 994, column: 7, scope: !3844)
!3861 = !DILocation(line: 995, column: 5, scope: !3844)
!3862 = !DILocation(line: 987, column: 23, scope: !3840)
!3863 = !DILocation(line: 987, column: 21, scope: !3840)
!3864 = !DILocation(line: 987, column: 3, scope: !3840)
!3865 = distinct !{!3865, !3842, !3866}
!3866 = !DILocation(line: 995, column: 5, scope: !3841)
!3867 = !DILocation(line: 996, column: 1, scope: !3829)
!3868 = distinct !DISubprogram(name: "record_loop_exits", scope: !3, file: !3, line: 1069, type: !3318, scopeLine: 1070, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3869 = !DILocalVariable(name: "bb", scope: !3868, file: !3, line: 1071, type: !979)
!3870 = !DILocation(line: 1071, column: 15, scope: !3868)
!3871 = !DILocalVariable(name: "ei", scope: !3868, file: !3, line: 1072, type: !2097)
!3872 = !DILocation(line: 1072, column: 17, scope: !3868)
!3873 = !DILocalVariable(name: "e", scope: !3868, file: !3, line: 1073, type: !459)
!3874 = !DILocation(line: 1073, column: 8, scope: !3868)
!3875 = !DILocation(line: 1075, column: 8, scope: !3876)
!3876 = distinct !DILexicalBlock(scope: !3868, file: !3, line: 1075, column: 7)
!3877 = !DILocation(line: 1075, column: 7, scope: !3868)
!3878 = !DILocation(line: 1076, column: 5, scope: !3876)
!3879 = !DILocation(line: 1078, column: 7, scope: !3880)
!3880 = distinct !DILexicalBlock(scope: !3868, file: !3, line: 1078, column: 7)
!3881 = !DILocation(line: 1078, column: 7, scope: !3868)
!3882 = !DILocation(line: 1079, column: 5, scope: !3880)
!3883 = !DILocation(line: 1080, column: 3, scope: !3868)
!3884 = !DILocation(line: 1082, column: 3, scope: !3868)
!3885 = !DILocation(line: 1083, column: 49, scope: !3868)
!3886 = !DILocation(line: 1083, column: 47, scope: !3868)
!3887 = !DILocation(line: 1083, column: 45, scope: !3868)
!3888 = !DILocation(line: 1083, column: 26, scope: !3868)
!3889 = !DILocation(line: 1083, column: 3, scope: !3868)
!3890 = !DILocation(line: 1083, column: 18, scope: !3868)
!3891 = !DILocation(line: 1083, column: 24, scope: !3868)
!3892 = !DILocation(line: 1089, column: 3, scope: !3893)
!3893 = distinct !DILexicalBlock(scope: !3868, file: !3, line: 1089, column: 3)
!3894 = !DILocation(line: 1089, column: 3, scope: !3895)
!3895 = distinct !DILexicalBlock(scope: !3893, file: !3, line: 1089, column: 3)
!3896 = !DILocation(line: 1091, column: 7, scope: !3897)
!3897 = distinct !DILexicalBlock(scope: !3898, file: !3, line: 1091, column: 7)
!3898 = distinct !DILexicalBlock(scope: !3895, file: !3, line: 1090, column: 5)
!3899 = !DILocation(line: 1091, column: 7, scope: !3900)
!3900 = distinct !DILexicalBlock(scope: !3897, file: !3, line: 1091, column: 7)
!3901 = !DILocation(line: 1093, column: 22, scope: !3902)
!3902 = distinct !DILexicalBlock(scope: !3900, file: !3, line: 1092, column: 2)
!3903 = !DILocation(line: 1093, column: 4, scope: !3902)
!3904 = !DILocation(line: 1094, column: 2, scope: !3902)
!3905 = distinct !{!3905, !3896, !3906}
!3906 = !DILocation(line: 1094, column: 2, scope: !3897)
!3907 = !DILocation(line: 1095, column: 5, scope: !3898)
!3908 = distinct !{!3908, !3892, !3909}
!3909 = !DILocation(line: 1095, column: 5, scope: !3893)
!3910 = !DILocation(line: 1096, column: 1, scope: !3868)
!3911 = distinct !DISubprogram(name: "loops_state_set", scope: !378, file: !378, line: 479, type: !3912, scopeLine: 480, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3912 = !DISubroutineType(types: !3913)
!3913 = !{null, !7}
!3914 = !DILocalVariable(name: "flags", arg: 1, scope: !3911, file: !378, line: 479, type: !7)
!3915 = !DILocation(line: 479, column: 27, scope: !3911)
!3916 = !DILocation(line: 481, column: 27, scope: !3911)
!3917 = !DILocation(line: 481, column: 3, scope: !3911)
!3918 = !DILocation(line: 481, column: 18, scope: !3911)
!3919 = !DILocation(line: 481, column: 24, scope: !3911)
!3920 = !DILocation(line: 482, column: 1, scope: !3911)
!3921 = distinct !DISubprogram(name: "loop_exit_hash", scope: !3, file: !3, line: 963, type: !1018, scopeLine: 964, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3922 = !DILocalVariable(name: "ex", arg: 1, scope: !3921, file: !3, line: 963, type: !852)
!3923 = !DILocation(line: 963, column: 29, scope: !3921)
!3924 = !DILocalVariable(name: "exit", scope: !3921, file: !3, line: 965, type: !3925)
!3925 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1849)
!3926 = !DILocation(line: 965, column: 33, scope: !3921)
!3927 = !DILocation(line: 965, column: 67, scope: !3921)
!3928 = !DILocation(line: 965, column: 40, scope: !3921)
!3929 = !DILocation(line: 967, column: 10, scope: !3921)
!3930 = !DILocation(line: 967, column: 29, scope: !3921)
!3931 = !DILocation(line: 967, column: 35, scope: !3921)
!3932 = !DILocation(line: 967, column: 3, scope: !3921)
!3933 = distinct !DISubprogram(name: "loop_exit_eq", scope: !3, file: !3, line: 973, type: !1024, scopeLine: 974, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3934 = !DILocalVariable(name: "ex", arg: 1, scope: !3933, file: !3, line: 973, type: !852)
!3935 = !DILocation(line: 973, column: 27, scope: !3933)
!3936 = !DILocalVariable(name: "e", arg: 2, scope: !3933, file: !3, line: 973, type: !852)
!3937 = !DILocation(line: 973, column: 43, scope: !3933)
!3938 = !DILocalVariable(name: "exit", scope: !3933, file: !3, line: 975, type: !3925)
!3939 = !DILocation(line: 975, column: 33, scope: !3933)
!3940 = !DILocation(line: 975, column: 67, scope: !3933)
!3941 = !DILocation(line: 975, column: 40, scope: !3933)
!3942 = !DILocation(line: 977, column: 10, scope: !3933)
!3943 = !DILocation(line: 977, column: 16, scope: !3933)
!3944 = !DILocation(line: 977, column: 21, scope: !3933)
!3945 = !DILocation(line: 977, column: 18, scope: !3933)
!3946 = !DILocation(line: 977, column: 3, scope: !3933)
!3947 = distinct !DISubprogram(name: "dump_recorded_exits", scope: !3, file: !3, line: 1121, type: !2487, scopeLine: 1122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3948 = !DILocalVariable(name: "file", arg: 1, scope: !3947, file: !3, line: 1121, type: !1851)
!3949 = !DILocation(line: 1121, column: 28, scope: !3947)
!3950 = !DILocation(line: 1123, column: 8, scope: !3951)
!3951 = distinct !DILexicalBlock(scope: !3947, file: !3, line: 1123, column: 7)
!3952 = !DILocation(line: 1123, column: 23, scope: !3951)
!3953 = !DILocation(line: 1123, column: 7, scope: !3947)
!3954 = !DILocation(line: 1124, column: 5, scope: !3951)
!3955 = !DILocation(line: 1125, column: 18, scope: !3947)
!3956 = !DILocation(line: 1125, column: 33, scope: !3947)
!3957 = !DILocation(line: 1125, column: 60, scope: !3947)
!3958 = !DILocation(line: 1125, column: 3, scope: !3947)
!3959 = !DILocation(line: 1126, column: 1, scope: !3947)
!3960 = distinct !DISubprogram(name: "dump_recorded_exit", scope: !3, file: !3, line: 1102, type: !3961, scopeLine: 1103, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!3961 = !DISubroutineType(types: !3962)
!3962 = !{!440, !1032, !782}
!3963 = !DILocalVariable(name: "slot", arg: 1, scope: !3960, file: !3, line: 1102, type: !1032)
!3964 = !DILocation(line: 1102, column: 28, scope: !3960)
!3965 = !DILocalVariable(name: "file", arg: 2, scope: !3960, file: !3, line: 1102, type: !782)
!3966 = !DILocation(line: 1102, column: 40, scope: !3960)
!3967 = !DILocalVariable(name: "exit", scope: !3960, file: !3, line: 1104, type: !1817)
!3968 = !DILocation(line: 1104, column: 21, scope: !3960)
!3969 = !DILocation(line: 1104, column: 50, scope: !3960)
!3970 = !DILocation(line: 1104, column: 49, scope: !3960)
!3971 = !DILocation(line: 1104, column: 28, scope: !3960)
!3972 = !DILocalVariable(name: "n", scope: !3960, file: !3, line: 1105, type: !7)
!3973 = !DILocation(line: 1105, column: 12, scope: !3960)
!3974 = !DILocalVariable(name: "e", scope: !3960, file: !3, line: 1106, type: !459)
!3975 = !DILocation(line: 1106, column: 8, scope: !3960)
!3976 = !DILocation(line: 1106, column: 12, scope: !3960)
!3977 = !DILocation(line: 1106, column: 18, scope: !3960)
!3978 = !DILocation(line: 1108, column: 3, scope: !3960)
!3979 = !DILocation(line: 1108, column: 10, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3981, file: !3, line: 1108, column: 3)
!3981 = distinct !DILexicalBlock(scope: !3960, file: !3, line: 1108, column: 3)
!3982 = !DILocation(line: 1108, column: 15, scope: !3980)
!3983 = !DILocation(line: 1108, column: 3, scope: !3981)
!3984 = !DILocation(line: 1109, column: 6, scope: !3980)
!3985 = !DILocation(line: 1109, column: 5, scope: !3980)
!3986 = !DILocation(line: 1108, column: 31, scope: !3980)
!3987 = !DILocation(line: 1108, column: 37, scope: !3980)
!3988 = !DILocation(line: 1108, column: 29, scope: !3980)
!3989 = !DILocation(line: 1108, column: 3, scope: !3980)
!3990 = distinct !{!3990, !3983, !3991}
!3991 = !DILocation(line: 1109, column: 6, scope: !3981)
!3992 = !DILocation(line: 1111, column: 20, scope: !3960)
!3993 = !DILocation(line: 1111, column: 12, scope: !3960)
!3994 = !DILocation(line: 1112, column: 5, scope: !3960)
!3995 = !DILocation(line: 1112, column: 8, scope: !3960)
!3996 = !DILocation(line: 1112, column: 13, scope: !3960)
!3997 = !DILocation(line: 1112, column: 20, scope: !3960)
!3998 = !DILocation(line: 1112, column: 23, scope: !3960)
!3999 = !DILocation(line: 1112, column: 29, scope: !3960)
!4000 = !DILocation(line: 1112, column: 36, scope: !3960)
!4001 = !DILocation(line: 1111, column: 3, scope: !3960)
!4002 = !DILocation(line: 1114, column: 3, scope: !3960)
!4003 = distinct !DISubprogram(name: "release_recorded_exits", scope: !3, file: !3, line: 1131, type: !3318, scopeLine: 1132, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4004 = !DILocation(line: 1133, column: 3, scope: !4003)
!4005 = !DILocation(line: 1134, column: 16, scope: !4003)
!4006 = !DILocation(line: 1134, column: 31, scope: !4003)
!4007 = !DILocation(line: 1134, column: 3, scope: !4003)
!4008 = !DILocation(line: 1135, column: 3, scope: !4003)
!4009 = !DILocation(line: 1135, column: 18, scope: !4003)
!4010 = !DILocation(line: 1135, column: 24, scope: !4003)
!4011 = !DILocation(line: 1136, column: 3, scope: !4003)
!4012 = !DILocation(line: 1137, column: 1, scope: !4003)
!4013 = distinct !DISubprogram(name: "loops_state_clear", scope: !378, file: !378, line: 487, type: !3912, scopeLine: 488, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4014 = !DILocalVariable(name: "flags", arg: 1, scope: !4013, file: !378, line: 487, type: !7)
!4015 = !DILocation(line: 487, column: 29, scope: !4013)
!4016 = !DILocation(line: 489, column: 8, scope: !4017)
!4017 = distinct !DILexicalBlock(scope: !4013, file: !378, line: 489, column: 7)
!4018 = !DILocation(line: 489, column: 7, scope: !4013)
!4019 = !DILocation(line: 490, column: 5, scope: !4017)
!4020 = !DILocation(line: 491, column: 28, scope: !4013)
!4021 = !DILocation(line: 491, column: 27, scope: !4013)
!4022 = !DILocation(line: 491, column: 3, scope: !4013)
!4023 = !DILocation(line: 491, column: 18, scope: !4013)
!4024 = !DILocation(line: 491, column: 24, scope: !4013)
!4025 = !DILocation(line: 492, column: 1, scope: !4013)
!4026 = distinct !DISubprogram(name: "get_loop_exit_edges", scope: !3, file: !3, line: 1142, type: !2092, scopeLine: 1143, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4027 = !DILocalVariable(name: "loop", arg: 1, scope: !4026, file: !3, line: 1142, type: !1847)
!4028 = !DILocation(line: 1142, column: 41, scope: !4026)
!4029 = !DILocalVariable(name: "edges", scope: !4026, file: !3, line: 1144, type: !1902)
!4030 = !DILocation(line: 1144, column: 21, scope: !4026)
!4031 = !DILocalVariable(name: "e", scope: !4026, file: !3, line: 1145, type: !459)
!4032 = !DILocation(line: 1145, column: 8, scope: !4026)
!4033 = !DILocalVariable(name: "i", scope: !4026, file: !3, line: 1146, type: !7)
!4034 = !DILocation(line: 1146, column: 12, scope: !4026)
!4035 = !DILocalVariable(name: "body", scope: !4026, file: !3, line: 1147, type: !1827)
!4036 = !DILocation(line: 1147, column: 16, scope: !4026)
!4037 = !DILocalVariable(name: "ei", scope: !4026, file: !3, line: 1148, type: !2097)
!4038 = !DILocation(line: 1148, column: 17, scope: !4026)
!4039 = !DILocalVariable(name: "exit", scope: !4026, file: !3, line: 1149, type: !1817)
!4040 = !DILocation(line: 1149, column: 21, scope: !4026)
!4041 = !DILocation(line: 1151, column: 3, scope: !4026)
!4042 = !DILocation(line: 1155, column: 7, scope: !4043)
!4043 = distinct !DILexicalBlock(scope: !4026, file: !3, line: 1155, column: 7)
!4044 = !DILocation(line: 1155, column: 7, scope: !4026)
!4045 = !DILocation(line: 1157, column: 19, scope: !4046)
!4046 = distinct !DILexicalBlock(scope: !4047, file: !3, line: 1157, column: 7)
!4047 = distinct !DILexicalBlock(scope: !4043, file: !3, line: 1156, column: 5)
!4048 = !DILocation(line: 1157, column: 25, scope: !4046)
!4049 = !DILocation(line: 1157, column: 32, scope: !4046)
!4050 = !DILocation(line: 1157, column: 17, scope: !4046)
!4051 = !DILocation(line: 1157, column: 12, scope: !4046)
!4052 = !DILocation(line: 1157, column: 38, scope: !4053)
!4053 = distinct !DILexicalBlock(scope: !4046, file: !3, line: 1157, column: 7)
!4054 = !DILocation(line: 1157, column: 44, scope: !4053)
!4055 = !DILocation(line: 1157, column: 7, scope: !4046)
!4056 = !DILocation(line: 1158, column: 2, scope: !4053)
!4057 = !DILocation(line: 1157, column: 54, scope: !4053)
!4058 = !DILocation(line: 1157, column: 60, scope: !4053)
!4059 = !DILocation(line: 1157, column: 52, scope: !4053)
!4060 = !DILocation(line: 1157, column: 7, scope: !4053)
!4061 = distinct !{!4061, !4055, !4062}
!4062 = !DILocation(line: 1158, column: 2, scope: !4046)
!4063 = !DILocation(line: 1159, column: 5, scope: !4047)
!4064 = !DILocation(line: 1162, column: 29, scope: !4065)
!4065 = distinct !DILexicalBlock(scope: !4043, file: !3, line: 1161, column: 5)
!4066 = !DILocation(line: 1162, column: 14, scope: !4065)
!4067 = !DILocation(line: 1162, column: 12, scope: !4065)
!4068 = !DILocation(line: 1163, column: 14, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1163, column: 7)
!4070 = !DILocation(line: 1163, column: 12, scope: !4069)
!4071 = !DILocation(line: 1163, column: 19, scope: !4072)
!4072 = distinct !DILexicalBlock(scope: !4069, file: !3, line: 1163, column: 7)
!4073 = !DILocation(line: 1163, column: 23, scope: !4072)
!4074 = !DILocation(line: 1163, column: 29, scope: !4072)
!4075 = !DILocation(line: 1163, column: 21, scope: !4072)
!4076 = !DILocation(line: 1163, column: 7, scope: !4069)
!4077 = !DILocation(line: 1164, column: 2, scope: !4078)
!4078 = distinct !DILexicalBlock(scope: !4072, file: !3, line: 1164, column: 2)
!4079 = !DILocation(line: 1164, column: 2, scope: !4080)
!4080 = distinct !DILexicalBlock(scope: !4078, file: !3, line: 1164, column: 2)
!4081 = !DILocation(line: 1166, column: 34, scope: !4082)
!4082 = distinct !DILexicalBlock(scope: !4083, file: !3, line: 1166, column: 10)
!4083 = distinct !DILexicalBlock(scope: !4080, file: !3, line: 1165, column: 4)
!4084 = !DILocation(line: 1166, column: 40, scope: !4082)
!4085 = !DILocation(line: 1166, column: 43, scope: !4082)
!4086 = !DILocation(line: 1166, column: 11, scope: !4082)
!4087 = !DILocation(line: 1166, column: 10, scope: !4083)
!4088 = !DILocation(line: 1167, column: 8, scope: !4082)
!4089 = !DILocation(line: 1168, column: 4, scope: !4083)
!4090 = distinct !{!4090, !4077, !4091}
!4091 = !DILocation(line: 1168, column: 4, scope: !4078)
!4092 = !DILocation(line: 1163, column: 41, scope: !4072)
!4093 = !DILocation(line: 1163, column: 7, scope: !4072)
!4094 = distinct !{!4094, !4076, !4095}
!4095 = !DILocation(line: 1168, column: 4, scope: !4069)
!4096 = !DILocation(line: 1169, column: 13, scope: !4065)
!4097 = !DILocation(line: 1169, column: 7, scope: !4065)
!4098 = !DILocation(line: 1172, column: 10, scope: !4026)
!4099 = !DILocation(line: 1172, column: 3, scope: !4026)
!4100 = distinct !DISubprogram(name: "VEC_edge_heap_safe_push", scope: !135, file: !135, line: 152, type: !4101, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4101 = !DISubroutineType(types: !4102)
!4102 = !{!2131, !2145, !459}
!4103 = !DILocalVariable(name: "vec_", arg: 1, scope: !4100, file: !135, line: 152, type: !2145)
!4104 = !DILocation(line: 152, column: 1, scope: !4100)
!4105 = !DILocalVariable(name: "obj_", arg: 2, scope: !4100, file: !135, line: 152, type: !459)
!4106 = distinct !DISubprogram(name: "num_loop_branches", scope: !3, file: !3, line: 1178, type: !1938, scopeLine: 1179, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4107 = !DILocalVariable(name: "loop", arg: 1, scope: !4106, file: !3, line: 1178, type: !1847)
!4108 = !DILocation(line: 1178, column: 39, scope: !4106)
!4109 = !DILocalVariable(name: "i", scope: !4106, file: !3, line: 1180, type: !7)
!4110 = !DILocation(line: 1180, column: 12, scope: !4106)
!4111 = !DILocalVariable(name: "n", scope: !4106, file: !3, line: 1180, type: !7)
!4112 = !DILocation(line: 1180, column: 15, scope: !4106)
!4113 = !DILocalVariable(name: "body", scope: !4106, file: !3, line: 1181, type: !1827)
!4114 = !DILocation(line: 1181, column: 17, scope: !4106)
!4115 = !DILocation(line: 1183, column: 3, scope: !4106)
!4116 = !DILocation(line: 1185, column: 25, scope: !4106)
!4117 = !DILocation(line: 1185, column: 10, scope: !4106)
!4118 = !DILocation(line: 1185, column: 8, scope: !4106)
!4119 = !DILocation(line: 1186, column: 5, scope: !4106)
!4120 = !DILocation(line: 1187, column: 10, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !4106, file: !3, line: 1187, column: 3)
!4122 = !DILocation(line: 1187, column: 8, scope: !4121)
!4123 = !DILocation(line: 1187, column: 15, scope: !4124)
!4124 = distinct !DILexicalBlock(scope: !4121, file: !3, line: 1187, column: 3)
!4125 = !DILocation(line: 1187, column: 19, scope: !4124)
!4126 = !DILocation(line: 1187, column: 25, scope: !4124)
!4127 = !DILocation(line: 1187, column: 17, scope: !4124)
!4128 = !DILocation(line: 1187, column: 3, scope: !4121)
!4129 = !DILocation(line: 1188, column: 9, scope: !4130)
!4130 = distinct !DILexicalBlock(scope: !4124, file: !3, line: 1188, column: 9)
!4131 = !DILocation(line: 1188, column: 37, scope: !4130)
!4132 = !DILocation(line: 1188, column: 9, scope: !4124)
!4133 = !DILocation(line: 1189, column: 8, scope: !4130)
!4134 = !DILocation(line: 1189, column: 7, scope: !4130)
!4135 = !DILocation(line: 1188, column: 40, scope: !4130)
!4136 = !DILocation(line: 1187, column: 37, scope: !4124)
!4137 = !DILocation(line: 1187, column: 3, scope: !4124)
!4138 = distinct !{!4138, !4128, !4139}
!4139 = !DILocation(line: 1189, column: 8, scope: !4121)
!4140 = !DILocation(line: 1190, column: 9, scope: !4106)
!4141 = !DILocation(line: 1190, column: 3, scope: !4106)
!4142 = !DILocation(line: 1192, column: 10, scope: !4106)
!4143 = !DILocation(line: 1192, column: 3, scope: !4106)
!4144 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !135, file: !135, line: 150, type: !4145, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4145 = !DISubroutineType(types: !4146)
!4146 = !{!7, !2129}
!4147 = !DILocalVariable(name: "vec_", arg: 1, scope: !4144, file: !135, line: 150, type: !2129)
!4148 = !DILocation(line: 150, column: 1, scope: !4144)
!4149 = distinct !DISubprogram(name: "add_bb_to_loop", scope: !3, file: !3, line: 1197, type: !4150, scopeLine: 1198, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4150 = !DISubroutineType(types: !4151)
!4151 = !{null, !979, !436}
!4152 = !DILocalVariable(name: "bb", arg: 1, scope: !4149, file: !3, line: 1197, type: !979)
!4153 = !DILocation(line: 1197, column: 29, scope: !4149)
!4154 = !DILocalVariable(name: "loop", arg: 2, scope: !4149, file: !3, line: 1197, type: !436)
!4155 = !DILocation(line: 1197, column: 46, scope: !4149)
!4156 = !DILocalVariable(name: "i", scope: !4149, file: !3, line: 1199, type: !7)
!4157 = !DILocation(line: 1199, column: 12, scope: !4149)
!4158 = !DILocalVariable(name: "ploop", scope: !4149, file: !3, line: 1200, type: !1162)
!4159 = !DILocation(line: 1200, column: 10, scope: !4149)
!4160 = !DILocalVariable(name: "ei", scope: !4149, file: !3, line: 1201, type: !2097)
!4161 = !DILocation(line: 1201, column: 17, scope: !4149)
!4162 = !DILocalVariable(name: "e", scope: !4149, file: !3, line: 1202, type: !459)
!4163 = !DILocation(line: 1202, column: 8, scope: !4149)
!4164 = !DILocation(line: 1204, column: 3, scope: !4149)
!4165 = !DILocation(line: 1205, column: 21, scope: !4149)
!4166 = !DILocation(line: 1205, column: 3, scope: !4149)
!4167 = !DILocation(line: 1205, column: 7, scope: !4149)
!4168 = !DILocation(line: 1205, column: 19, scope: !4149)
!4169 = !DILocation(line: 1206, column: 32, scope: !4149)
!4170 = !DILocation(line: 1206, column: 20, scope: !4149)
!4171 = !DILocation(line: 1206, column: 3, scope: !4149)
!4172 = !DILocation(line: 1206, column: 7, scope: !4149)
!4173 = !DILocation(line: 1206, column: 18, scope: !4149)
!4174 = !DILocation(line: 1207, column: 3, scope: !4149)
!4175 = !DILocation(line: 1207, column: 9, scope: !4149)
!4176 = !DILocation(line: 1207, column: 18, scope: !4149)
!4177 = !DILocation(line: 1208, column: 10, scope: !4178)
!4178 = distinct !DILexicalBlock(scope: !4149, file: !3, line: 1208, column: 3)
!4179 = !DILocation(line: 1208, column: 8, scope: !4178)
!4180 = !DILocation(line: 1208, column: 15, scope: !4181)
!4181 = distinct !DILexicalBlock(scope: !4178, file: !3, line: 1208, column: 3)
!4182 = !DILocation(line: 1208, column: 3, scope: !4178)
!4183 = !DILocation(line: 1209, column: 5, scope: !4181)
!4184 = !DILocation(line: 1209, column: 12, scope: !4181)
!4185 = !DILocation(line: 1209, column: 21, scope: !4181)
!4186 = !DILocation(line: 1208, column: 66, scope: !4181)
!4187 = !DILocation(line: 1208, column: 3, scope: !4181)
!4188 = distinct !{!4188, !4182, !4189}
!4189 = !DILocation(line: 1209, column: 21, scope: !4178)
!4190 = !DILocation(line: 1211, column: 3, scope: !4191)
!4191 = distinct !DILexicalBlock(scope: !4149, file: !3, line: 1211, column: 3)
!4192 = !DILocation(line: 1211, column: 3, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4191, file: !3, line: 1211, column: 3)
!4194 = !DILocation(line: 1213, column: 25, scope: !4195)
!4195 = distinct !DILexicalBlock(scope: !4193, file: !3, line: 1212, column: 5)
!4196 = !DILocation(line: 1213, column: 7, scope: !4195)
!4197 = !DILocation(line: 1214, column: 5, scope: !4195)
!4198 = distinct !{!4198, !4190, !4199}
!4199 = !DILocation(line: 1214, column: 5, scope: !4191)
!4200 = !DILocation(line: 1215, column: 3, scope: !4201)
!4201 = distinct !DILexicalBlock(scope: !4149, file: !3, line: 1215, column: 3)
!4202 = !DILocation(line: 1215, column: 3, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !4201, file: !3, line: 1215, column: 3)
!4204 = !DILocation(line: 1217, column: 25, scope: !4205)
!4205 = distinct !DILexicalBlock(scope: !4203, file: !3, line: 1216, column: 5)
!4206 = !DILocation(line: 1217, column: 7, scope: !4205)
!4207 = !DILocation(line: 1218, column: 5, scope: !4205)
!4208 = distinct !{!4208, !4200, !4209}
!4209 = !DILocation(line: 1218, column: 5, scope: !4201)
!4210 = !DILocation(line: 1219, column: 1, scope: !4149)
!4211 = distinct !DISubprogram(name: "remove_bb_from_loops", scope: !3, file: !3, line: 1223, type: !4212, scopeLine: 1224, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4212 = !DISubroutineType(types: !4213)
!4213 = !{null, !979}
!4214 = !DILocalVariable(name: "bb", arg: 1, scope: !4211, file: !3, line: 1223, type: !979)
!4215 = !DILocation(line: 1223, column: 35, scope: !4211)
!4216 = !DILocalVariable(name: "i", scope: !4211, file: !3, line: 1225, type: !440)
!4217 = !DILocation(line: 1225, column: 7, scope: !4211)
!4218 = !DILocalVariable(name: "loop", scope: !4211, file: !3, line: 1226, type: !436)
!4219 = !DILocation(line: 1226, column: 16, scope: !4211)
!4220 = !DILocation(line: 1226, column: 23, scope: !4211)
!4221 = !DILocation(line: 1226, column: 27, scope: !4211)
!4222 = !DILocalVariable(name: "ploop", scope: !4211, file: !3, line: 1227, type: !1162)
!4223 = !DILocation(line: 1227, column: 10, scope: !4211)
!4224 = !DILocalVariable(name: "ei", scope: !4211, file: !3, line: 1228, type: !2097)
!4225 = !DILocation(line: 1228, column: 17, scope: !4211)
!4226 = !DILocalVariable(name: "e", scope: !4211, file: !3, line: 1229, type: !459)
!4227 = !DILocation(line: 1229, column: 8, scope: !4211)
!4228 = !DILocation(line: 1231, column: 3, scope: !4211)
!4229 = !DILocation(line: 1232, column: 3, scope: !4211)
!4230 = !DILocation(line: 1232, column: 9, scope: !4211)
!4231 = !DILocation(line: 1232, column: 18, scope: !4211)
!4232 = !DILocation(line: 1233, column: 10, scope: !4233)
!4233 = distinct !DILexicalBlock(scope: !4211, file: !3, line: 1233, column: 3)
!4234 = !DILocation(line: 1233, column: 8, scope: !4233)
!4235 = !DILocation(line: 1233, column: 15, scope: !4236)
!4236 = distinct !DILexicalBlock(scope: !4233, file: !3, line: 1233, column: 3)
!4237 = !DILocation(line: 1233, column: 3, scope: !4233)
!4238 = !DILocation(line: 1234, column: 5, scope: !4236)
!4239 = !DILocation(line: 1234, column: 12, scope: !4236)
!4240 = !DILocation(line: 1234, column: 21, scope: !4236)
!4241 = !DILocation(line: 1233, column: 66, scope: !4236)
!4242 = !DILocation(line: 1233, column: 3, scope: !4236)
!4243 = distinct !{!4243, !4237, !4244}
!4244 = !DILocation(line: 1234, column: 21, scope: !4233)
!4245 = !DILocation(line: 1235, column: 3, scope: !4211)
!4246 = !DILocation(line: 1235, column: 7, scope: !4211)
!4247 = !DILocation(line: 1235, column: 19, scope: !4211)
!4248 = !DILocation(line: 1236, column: 3, scope: !4211)
!4249 = !DILocation(line: 1236, column: 7, scope: !4211)
!4250 = !DILocation(line: 1236, column: 18, scope: !4211)
!4251 = !DILocation(line: 1238, column: 3, scope: !4252)
!4252 = distinct !DILexicalBlock(scope: !4211, file: !3, line: 1238, column: 3)
!4253 = !DILocation(line: 1238, column: 3, scope: !4254)
!4254 = distinct !DILexicalBlock(scope: !4252, file: !3, line: 1238, column: 3)
!4255 = !DILocation(line: 1240, column: 25, scope: !4256)
!4256 = distinct !DILexicalBlock(scope: !4254, file: !3, line: 1239, column: 5)
!4257 = !DILocation(line: 1240, column: 7, scope: !4256)
!4258 = !DILocation(line: 1241, column: 5, scope: !4256)
!4259 = distinct !{!4259, !4251, !4260}
!4260 = !DILocation(line: 1241, column: 5, scope: !4252)
!4261 = !DILocation(line: 1242, column: 3, scope: !4262)
!4262 = distinct !DILexicalBlock(scope: !4211, file: !3, line: 1242, column: 3)
!4263 = !DILocation(line: 1242, column: 3, scope: !4264)
!4264 = distinct !DILexicalBlock(scope: !4262, file: !3, line: 1242, column: 3)
!4265 = !DILocation(line: 1244, column: 25, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !4264, file: !3, line: 1243, column: 5)
!4267 = !DILocation(line: 1244, column: 7, scope: !4266)
!4268 = !DILocation(line: 1245, column: 5, scope: !4266)
!4269 = distinct !{!4269, !4261, !4270}
!4270 = !DILocation(line: 1245, column: 5, scope: !4262)
!4271 = !DILocation(line: 1246, column: 1, scope: !4211)
!4272 = distinct !DISubprogram(name: "delete_loop", scope: !3, file: !3, line: 1276, type: !2528, scopeLine: 1277, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4273 = !DILocalVariable(name: "loop", arg: 1, scope: !4272, file: !3, line: 1276, type: !436)
!4274 = !DILocation(line: 1276, column: 27, scope: !4272)
!4275 = !DILocation(line: 1279, column: 31, scope: !4272)
!4276 = !DILocation(line: 1279, column: 3, scope: !4272)
!4277 = !DILocation(line: 1282, column: 3, scope: !4272)
!4278 = !DILocation(line: 1285, column: 19, scope: !4272)
!4279 = !DILocation(line: 1285, column: 3, scope: !4272)
!4280 = !DILocation(line: 1286, column: 1, scope: !4272)
!4281 = distinct !DISubprogram(name: "VEC_loop_p_base_replace", scope: !378, file: !378, line: 85, type: !4282, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4282 = !DISubroutineType(types: !4283)
!4283 = !{!1162, !2925, !7, !1162}
!4284 = !DILocalVariable(name: "vec_", arg: 1, scope: !4281, file: !378, line: 85, type: !2925)
!4285 = !DILocation(line: 85, column: 1, scope: !4281)
!4286 = !DILocalVariable(name: "ix_", arg: 2, scope: !4281, file: !378, line: 85, type: !7)
!4287 = !DILocalVariable(name: "obj_", arg: 3, scope: !4281, file: !378, line: 85, type: !1162)
!4288 = !DILocalVariable(name: "old_obj_", scope: !4281, file: !378, line: 85, type: !1162)
!4289 = distinct !DISubprogram(name: "cancel_loop_tree", scope: !3, file: !3, line: 1309, type: !2528, scopeLine: 1310, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4290 = !DILocalVariable(name: "loop", arg: 1, scope: !4289, file: !3, line: 1309, type: !436)
!4291 = !DILocation(line: 1309, column: 32, scope: !4289)
!4292 = !DILocation(line: 1311, column: 3, scope: !4289)
!4293 = !DILocation(line: 1311, column: 10, scope: !4289)
!4294 = !DILocation(line: 1311, column: 16, scope: !4289)
!4295 = !DILocation(line: 1312, column: 23, scope: !4289)
!4296 = !DILocation(line: 1312, column: 29, scope: !4289)
!4297 = !DILocation(line: 1312, column: 5, scope: !4289)
!4298 = distinct !{!4298, !4292, !4299}
!4299 = !DILocation(line: 1312, column: 34, scope: !4289)
!4300 = !DILocation(line: 1313, column: 16, scope: !4289)
!4301 = !DILocation(line: 1313, column: 3, scope: !4289)
!4302 = !DILocation(line: 1314, column: 1, scope: !4289)
!4303 = distinct !DISubprogram(name: "cancel_loop", scope: !3, file: !3, line: 1291, type: !2528, scopeLine: 1292, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4304 = !DILocalVariable(name: "loop", arg: 1, scope: !4303, file: !3, line: 1291, type: !436)
!4305 = !DILocation(line: 1291, column: 27, scope: !4303)
!4306 = !DILocalVariable(name: "bbs", scope: !4303, file: !3, line: 1293, type: !1827)
!4307 = !DILocation(line: 1293, column: 16, scope: !4303)
!4308 = !DILocalVariable(name: "i", scope: !4303, file: !3, line: 1294, type: !7)
!4309 = !DILocation(line: 1294, column: 12, scope: !4303)
!4310 = !DILocalVariable(name: "outer", scope: !4303, file: !3, line: 1295, type: !436)
!4311 = !DILocation(line: 1295, column: 16, scope: !4303)
!4312 = !DILocation(line: 1295, column: 36, scope: !4303)
!4313 = !DILocation(line: 1295, column: 24, scope: !4303)
!4314 = !DILocation(line: 1297, column: 3, scope: !4303)
!4315 = !DILocation(line: 1300, column: 24, scope: !4303)
!4316 = !DILocation(line: 1300, column: 9, scope: !4303)
!4317 = !DILocation(line: 1300, column: 7, scope: !4303)
!4318 = !DILocation(line: 1301, column: 10, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 1301, column: 3)
!4320 = !DILocation(line: 1301, column: 8, scope: !4319)
!4321 = !DILocation(line: 1301, column: 15, scope: !4322)
!4322 = distinct !DILexicalBlock(scope: !4319, file: !3, line: 1301, column: 3)
!4323 = !DILocation(line: 1301, column: 19, scope: !4322)
!4324 = !DILocation(line: 1301, column: 25, scope: !4322)
!4325 = !DILocation(line: 1301, column: 17, scope: !4322)
!4326 = !DILocation(line: 1301, column: 3, scope: !4319)
!4327 = !DILocation(line: 1302, column: 27, scope: !4322)
!4328 = !DILocation(line: 1302, column: 5, scope: !4322)
!4329 = !DILocation(line: 1302, column: 9, scope: !4322)
!4330 = !DILocation(line: 1302, column: 13, scope: !4322)
!4331 = !DILocation(line: 1302, column: 25, scope: !4322)
!4332 = !DILocation(line: 1301, column: 37, scope: !4322)
!4333 = !DILocation(line: 1301, column: 3, scope: !4322)
!4334 = distinct !{!4334, !4326, !4335}
!4335 = !DILocation(line: 1302, column: 27, scope: !4319)
!4336 = !DILocation(line: 1304, column: 16, scope: !4303)
!4337 = !DILocation(line: 1304, column: 3, scope: !4303)
!4338 = !DILocation(line: 1305, column: 1, scope: !4303)
!4339 = distinct !DISubprogram(name: "verify_loop_structure", scope: !3, file: !3, line: 1324, type: !3318, scopeLine: 1325, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4340 = !DILocalVariable(name: "sizes", scope: !4339, file: !3, line: 1326, type: !1828)
!4341 = !DILocation(line: 1326, column: 13, scope: !4339)
!4342 = !DILocalVariable(name: "i", scope: !4339, file: !3, line: 1326, type: !7)
!4343 = !DILocation(line: 1326, column: 20, scope: !4339)
!4344 = !DILocalVariable(name: "j", scope: !4339, file: !3, line: 1326, type: !7)
!4345 = !DILocation(line: 1326, column: 23, scope: !4339)
!4346 = !DILocalVariable(name: "irreds", scope: !4339, file: !3, line: 1327, type: !2971)
!4347 = !DILocation(line: 1327, column: 11, scope: !4339)
!4348 = !DILocalVariable(name: "bbs", scope: !4339, file: !3, line: 1328, type: !1827)
!4349 = !DILocation(line: 1328, column: 16, scope: !4339)
!4350 = !DILocalVariable(name: "bb", scope: !4339, file: !3, line: 1328, type: !979)
!4351 = !DILocation(line: 1328, column: 21, scope: !4339)
!4352 = !DILocalVariable(name: "loop", scope: !4339, file: !3, line: 1329, type: !436)
!4353 = !DILocation(line: 1329, column: 16, scope: !4339)
!4354 = !DILocalVariable(name: "err", scope: !4339, file: !3, line: 1330, type: !440)
!4355 = !DILocation(line: 1330, column: 7, scope: !4339)
!4356 = !DILocalVariable(name: "e", scope: !4339, file: !3, line: 1331, type: !459)
!4357 = !DILocation(line: 1331, column: 8, scope: !4339)
!4358 = !DILocalVariable(name: "num", scope: !4339, file: !3, line: 1332, type: !7)
!4359 = !DILocation(line: 1332, column: 12, scope: !4339)
!4360 = !DILocation(line: 1332, column: 18, scope: !4339)
!4361 = !DILocalVariable(name: "li", scope: !4339, file: !3, line: 1333, type: !2227)
!4362 = !DILocation(line: 1333, column: 17, scope: !4339)
!4363 = !DILocalVariable(name: "exit", scope: !4339, file: !3, line: 1334, type: !1817)
!4364 = !DILocation(line: 1334, column: 21, scope: !4339)
!4365 = !DILocalVariable(name: "mexit", scope: !4339, file: !3, line: 1334, type: !1817)
!4366 = !DILocation(line: 1334, column: 28, scope: !4339)
!4367 = !DILocation(line: 1337, column: 11, scope: !4339)
!4368 = !DILocation(line: 1337, column: 9, scope: !4339)
!4369 = !DILocation(line: 1338, column: 3, scope: !4339)
!4370 = !DILocation(line: 1338, column: 12, scope: !4339)
!4371 = !DILocation(line: 1340, column: 3, scope: !4372)
!4372 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1340, column: 3)
!4373 = !DILocation(line: 1340, column: 3, scope: !4374)
!4374 = distinct !DILexicalBlock(scope: !4372, file: !3, line: 1340, column: 3)
!4375 = !DILocation(line: 1341, column: 17, scope: !4376)
!4376 = distinct !DILexicalBlock(scope: !4374, file: !3, line: 1341, column: 5)
!4377 = !DILocation(line: 1341, column: 21, scope: !4376)
!4378 = !DILocation(line: 1341, column: 15, scope: !4376)
!4379 = !DILocation(line: 1341, column: 10, scope: !4376)
!4380 = !DILocation(line: 1341, column: 34, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 1341, column: 5)
!4382 = !DILocation(line: 1341, column: 5, scope: !4376)
!4383 = !DILocation(line: 1342, column: 7, scope: !4381)
!4384 = !DILocation(line: 1342, column: 13, scope: !4381)
!4385 = !DILocation(line: 1342, column: 19, scope: !4381)
!4386 = !DILocation(line: 1342, column: 23, scope: !4381)
!4387 = !DILocation(line: 1341, column: 59, scope: !4381)
!4388 = !DILocation(line: 1341, column: 47, scope: !4381)
!4389 = !DILocation(line: 1341, column: 45, scope: !4381)
!4390 = !DILocation(line: 1341, column: 5, scope: !4381)
!4391 = distinct !{!4391, !4382, !4392}
!4392 = !DILocation(line: 1342, column: 23, scope: !4376)
!4393 = distinct !{!4393, !4371, !4394}
!4394 = !DILocation(line: 1342, column: 23, scope: !4372)
!4395 = !DILocation(line: 1344, column: 3, scope: !4396)
!4396 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1344, column: 3)
!4397 = !DILocation(line: 1344, column: 3, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4396, file: !3, line: 1344, column: 3)
!4399 = !DILocation(line: 1346, column: 11, scope: !4400)
!4400 = distinct !DILexicalBlock(scope: !4398, file: !3, line: 1345, column: 5)
!4401 = !DILocation(line: 1346, column: 17, scope: !4400)
!4402 = !DILocation(line: 1346, column: 9, scope: !4400)
!4403 = !DILocation(line: 1348, column: 11, scope: !4404)
!4404 = distinct !DILexicalBlock(scope: !4400, file: !3, line: 1348, column: 11)
!4405 = !DILocation(line: 1348, column: 17, scope: !4404)
!4406 = !DILocation(line: 1348, column: 30, scope: !4404)
!4407 = !DILocation(line: 1348, column: 36, scope: !4404)
!4408 = !DILocation(line: 1348, column: 27, scope: !4404)
!4409 = !DILocation(line: 1348, column: 11, scope: !4400)
!4410 = !DILocation(line: 1351, column: 6, scope: !4411)
!4411 = distinct !DILexicalBlock(scope: !4404, file: !3, line: 1349, column: 2)
!4412 = !DILocation(line: 1351, column: 9, scope: !4411)
!4413 = !DILocation(line: 1351, column: 15, scope: !4411)
!4414 = !DILocation(line: 1351, column: 19, scope: !4411)
!4415 = !DILocation(line: 1351, column: 25, scope: !4411)
!4416 = !DILocation(line: 1350, column: 4, scope: !4411)
!4417 = !DILocation(line: 1352, column: 8, scope: !4411)
!4418 = !DILocation(line: 1353, column: 2, scope: !4411)
!4419 = !DILocation(line: 1354, column: 5, scope: !4400)
!4420 = distinct !{!4420, !4395, !4421}
!4421 = !DILocation(line: 1354, column: 5, scope: !4396)
!4422 = !DILocation(line: 1357, column: 3, scope: !4423)
!4423 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1357, column: 3)
!4424 = !DILocation(line: 1357, column: 3, scope: !4425)
!4425 = distinct !DILexicalBlock(scope: !4423, file: !3, line: 1357, column: 3)
!4426 = !DILocation(line: 1359, column: 28, scope: !4427)
!4427 = distinct !DILexicalBlock(scope: !4425, file: !3, line: 1358, column: 5)
!4428 = !DILocation(line: 1359, column: 13, scope: !4427)
!4429 = !DILocation(line: 1359, column: 11, scope: !4427)
!4430 = !DILocation(line: 1361, column: 14, scope: !4431)
!4431 = distinct !DILexicalBlock(scope: !4427, file: !3, line: 1361, column: 7)
!4432 = !DILocation(line: 1361, column: 12, scope: !4431)
!4433 = !DILocation(line: 1361, column: 19, scope: !4434)
!4434 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 1361, column: 7)
!4435 = !DILocation(line: 1361, column: 23, scope: !4434)
!4436 = !DILocation(line: 1361, column: 29, scope: !4434)
!4437 = !DILocation(line: 1361, column: 21, scope: !4434)
!4438 = !DILocation(line: 1361, column: 7, scope: !4431)
!4439 = !DILocation(line: 1362, column: 30, scope: !4440)
!4440 = distinct !DILexicalBlock(scope: !4434, file: !3, line: 1362, column: 6)
!4441 = !DILocation(line: 1362, column: 36, scope: !4440)
!4442 = !DILocation(line: 1362, column: 40, scope: !4440)
!4443 = !DILocation(line: 1362, column: 7, scope: !4440)
!4444 = !DILocation(line: 1362, column: 6, scope: !4434)
!4445 = !DILocation(line: 1365, column: 7, scope: !4446)
!4446 = distinct !DILexicalBlock(scope: !4440, file: !3, line: 1363, column: 4)
!4447 = !DILocation(line: 1365, column: 11, scope: !4446)
!4448 = !DILocation(line: 1365, column: 15, scope: !4446)
!4449 = !DILocation(line: 1365, column: 22, scope: !4446)
!4450 = !DILocation(line: 1365, column: 28, scope: !4446)
!4451 = !DILocation(line: 1364, column: 6, scope: !4446)
!4452 = !DILocation(line: 1366, column: 10, scope: !4446)
!4453 = !DILocation(line: 1367, column: 4, scope: !4446)
!4454 = !DILocation(line: 1362, column: 42, scope: !4440)
!4455 = !DILocation(line: 1361, column: 41, scope: !4434)
!4456 = !DILocation(line: 1361, column: 7, scope: !4434)
!4457 = distinct !{!4457, !4438, !4458}
!4458 = !DILocation(line: 1367, column: 4, scope: !4431)
!4459 = !DILocation(line: 1368, column: 13, scope: !4427)
!4460 = !DILocation(line: 1368, column: 7, scope: !4427)
!4461 = !DILocation(line: 1369, column: 5, scope: !4427)
!4462 = distinct !{!4462, !4422, !4463}
!4463 = !DILocation(line: 1369, column: 5, scope: !4423)
!4464 = !DILocation(line: 1372, column: 3, scope: !4465)
!4465 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1372, column: 3)
!4466 = !DILocation(line: 1372, column: 3, scope: !4467)
!4467 = distinct !DILexicalBlock(scope: !4465, file: !3, line: 1372, column: 3)
!4468 = !DILocation(line: 1374, column: 11, scope: !4469)
!4469 = distinct !DILexicalBlock(scope: !4467, file: !3, line: 1373, column: 5)
!4470 = !DILocation(line: 1374, column: 17, scope: !4469)
!4471 = !DILocation(line: 1374, column: 9, scope: !4469)
!4472 = !DILocation(line: 1376, column: 11, scope: !4473)
!4473 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 1376, column: 11)
!4474 = !DILocation(line: 1377, column: 4, scope: !4473)
!4475 = !DILocation(line: 1377, column: 7, scope: !4473)
!4476 = !DILocation(line: 1377, column: 40, scope: !4473)
!4477 = !DILocation(line: 1376, column: 11, scope: !4469)
!4478 = !DILocation(line: 1379, column: 63, scope: !4479)
!4479 = distinct !DILexicalBlock(scope: !4473, file: !3, line: 1378, column: 2)
!4480 = !DILocation(line: 1379, column: 4, scope: !4479)
!4481 = !DILocation(line: 1380, column: 8, scope: !4479)
!4482 = !DILocation(line: 1381, column: 2, scope: !4479)
!4483 = !DILocation(line: 1382, column: 11, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 1382, column: 11)
!4485 = !DILocation(line: 1382, column: 11, scope: !4469)
!4486 = !DILocation(line: 1384, column: 24, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4488, file: !3, line: 1384, column: 8)
!4488 = distinct !DILexicalBlock(scope: !4484, file: !3, line: 1383, column: 2)
!4489 = !DILocation(line: 1384, column: 30, scope: !4487)
!4490 = !DILocation(line: 1384, column: 9, scope: !4487)
!4491 = !DILocation(line: 1384, column: 8, scope: !4488)
!4492 = !DILocation(line: 1386, column: 68, scope: !4493)
!4493 = distinct !DILexicalBlock(scope: !4487, file: !3, line: 1385, column: 6)
!4494 = !DILocation(line: 1386, column: 8, scope: !4493)
!4495 = !DILocation(line: 1387, column: 12, scope: !4493)
!4496 = !DILocation(line: 1388, column: 6, scope: !4493)
!4497 = !DILocation(line: 1389, column: 21, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4488, file: !3, line: 1389, column: 8)
!4499 = !DILocation(line: 1389, column: 27, scope: !4498)
!4500 = !DILocation(line: 1389, column: 8, scope: !4498)
!4501 = !DILocation(line: 1389, column: 37, scope: !4498)
!4502 = !DILocation(line: 1389, column: 43, scope: !4498)
!4503 = !DILocation(line: 1389, column: 34, scope: !4498)
!4504 = !DILocation(line: 1389, column: 8, scope: !4488)
!4505 = !DILocation(line: 1391, column: 68, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4498, file: !3, line: 1390, column: 6)
!4507 = !DILocation(line: 1391, column: 8, scope: !4506)
!4508 = !DILocation(line: 1392, column: 12, scope: !4506)
!4509 = !DILocation(line: 1393, column: 6, scope: !4506)
!4510 = !DILocation(line: 1394, column: 8, scope: !4511)
!4511 = distinct !DILexicalBlock(scope: !4488, file: !3, line: 1394, column: 8)
!4512 = !DILocation(line: 1394, column: 14, scope: !4511)
!4513 = !DILocation(line: 1394, column: 21, scope: !4511)
!4514 = !DILocation(line: 1394, column: 36, scope: !4511)
!4515 = !DILocation(line: 1394, column: 33, scope: !4511)
!4516 = !DILocation(line: 1394, column: 8, scope: !4488)
!4517 = !DILocation(line: 1396, column: 65, scope: !4518)
!4518 = distinct !DILexicalBlock(scope: !4511, file: !3, line: 1395, column: 6)
!4519 = !DILocation(line: 1396, column: 8, scope: !4518)
!4520 = !DILocation(line: 1397, column: 12, scope: !4518)
!4521 = !DILocation(line: 1398, column: 6, scope: !4518)
!4522 = !DILocation(line: 1399, column: 2, scope: !4488)
!4523 = !DILocation(line: 1400, column: 11, scope: !4524)
!4524 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 1400, column: 11)
!4525 = !DILocation(line: 1400, column: 17, scope: !4524)
!4526 = !DILocation(line: 1400, column: 25, scope: !4524)
!4527 = !DILocation(line: 1400, column: 40, scope: !4524)
!4528 = !DILocation(line: 1400, column: 37, scope: !4524)
!4529 = !DILocation(line: 1400, column: 11, scope: !4469)
!4530 = !DILocation(line: 1402, column: 62, scope: !4531)
!4531 = distinct !DILexicalBlock(scope: !4524, file: !3, line: 1401, column: 2)
!4532 = !DILocation(line: 1402, column: 4, scope: !4531)
!4533 = !DILocation(line: 1403, column: 8, scope: !4531)
!4534 = !DILocation(line: 1404, column: 2, scope: !4531)
!4535 = !DILocation(line: 1405, column: 11, scope: !4536)
!4536 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 1405, column: 11)
!4537 = !DILocation(line: 1406, column: 4, scope: !4536)
!4538 = !DILocation(line: 1406, column: 25, scope: !4536)
!4539 = !DILocation(line: 1406, column: 8, scope: !4536)
!4540 = !DILocation(line: 1406, column: 32, scope: !4536)
!4541 = !DILocation(line: 1406, column: 38, scope: !4536)
!4542 = !DILocation(line: 1405, column: 11, scope: !4469)
!4543 = !DILocation(line: 1408, column: 70, scope: !4544)
!4544 = distinct !DILexicalBlock(scope: !4536, file: !3, line: 1407, column: 2)
!4545 = !DILocation(line: 1408, column: 4, scope: !4544)
!4546 = !DILocation(line: 1409, column: 8, scope: !4544)
!4547 = !DILocation(line: 1410, column: 2, scope: !4544)
!4548 = !DILocation(line: 1411, column: 5, scope: !4469)
!4549 = distinct !{!4549, !4464, !4550}
!4550 = !DILocation(line: 1411, column: 5, scope: !4465)
!4551 = !DILocation(line: 1414, column: 7, scope: !4552)
!4552 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1414, column: 7)
!4553 = !DILocation(line: 1414, column: 7, scope: !4339)
!4554 = !DILocation(line: 1417, column: 31, scope: !4555)
!4555 = distinct !DILexicalBlock(scope: !4552, file: !3, line: 1415, column: 5)
!4556 = !DILocation(line: 1417, column: 16, scope: !4555)
!4557 = !DILocation(line: 1417, column: 14, scope: !4555)
!4558 = !DILocation(line: 1418, column: 7, scope: !4559)
!4559 = distinct !DILexicalBlock(scope: !4555, file: !3, line: 1418, column: 7)
!4560 = !DILocation(line: 1418, column: 7, scope: !4561)
!4561 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 1418, column: 7)
!4562 = !DILocalVariable(name: "ei", scope: !4563, file: !3, line: 1420, type: !2097)
!4563 = distinct !DILexicalBlock(scope: !4561, file: !3, line: 1419, column: 2)
!4564 = !DILocation(line: 1420, column: 18, scope: !4563)
!4565 = !DILocation(line: 1421, column: 8, scope: !4566)
!4566 = distinct !DILexicalBlock(scope: !4563, file: !3, line: 1421, column: 8)
!4567 = !DILocation(line: 1421, column: 12, scope: !4566)
!4568 = !DILocation(line: 1421, column: 18, scope: !4566)
!4569 = !DILocation(line: 1421, column: 8, scope: !4563)
!4570 = !DILocation(line: 1422, column: 15, scope: !4566)
!4571 = !DILocation(line: 1422, column: 23, scope: !4566)
!4572 = !DILocation(line: 1422, column: 27, scope: !4566)
!4573 = !DILocation(line: 1422, column: 6, scope: !4566)
!4574 = !DILocation(line: 1424, column: 17, scope: !4566)
!4575 = !DILocation(line: 1424, column: 25, scope: !4566)
!4576 = !DILocation(line: 1424, column: 29, scope: !4566)
!4577 = !DILocation(line: 1424, column: 6, scope: !4566)
!4578 = !DILocation(line: 1425, column: 4, scope: !4579)
!4579 = distinct !DILexicalBlock(scope: !4563, file: !3, line: 1425, column: 4)
!4580 = !DILocation(line: 1425, column: 4, scope: !4581)
!4581 = distinct !DILexicalBlock(scope: !4579, file: !3, line: 1425, column: 4)
!4582 = !DILocation(line: 1426, column: 10, scope: !4583)
!4583 = distinct !DILexicalBlock(scope: !4581, file: !3, line: 1426, column: 10)
!4584 = !DILocation(line: 1426, column: 13, scope: !4583)
!4585 = !DILocation(line: 1426, column: 19, scope: !4583)
!4586 = !DILocation(line: 1426, column: 10, scope: !4581)
!4587 = !DILocation(line: 1427, column: 8, scope: !4583)
!4588 = !DILocation(line: 1427, column: 11, scope: !4583)
!4589 = !DILocation(line: 1427, column: 17, scope: !4583)
!4590 = !DILocation(line: 1426, column: 21, scope: !4583)
!4591 = distinct !{!4591, !4578, !4592}
!4592 = !DILocation(line: 1427, column: 37, scope: !4579)
!4593 = !DILocation(line: 1428, column: 2, scope: !4563)
!4594 = distinct !{!4594, !4558, !4595}
!4595 = !DILocation(line: 1428, column: 2, scope: !4559)
!4596 = !DILocation(line: 1431, column: 7, scope: !4555)
!4597 = !DILocation(line: 1434, column: 7, scope: !4598)
!4598 = distinct !DILexicalBlock(scope: !4555, file: !3, line: 1434, column: 7)
!4599 = !DILocation(line: 1434, column: 7, scope: !4600)
!4600 = distinct !DILexicalBlock(scope: !4598, file: !3, line: 1434, column: 7)
!4601 = !DILocalVariable(name: "ei", scope: !4602, file: !3, line: 1436, type: !2097)
!4602 = distinct !DILexicalBlock(scope: !4600, file: !3, line: 1435, column: 2)
!4603 = !DILocation(line: 1436, column: 18, scope: !4602)
!4604 = !DILocation(line: 1438, column: 9, scope: !4605)
!4605 = distinct !DILexicalBlock(scope: !4602, file: !3, line: 1438, column: 8)
!4606 = !DILocation(line: 1438, column: 13, scope: !4605)
!4607 = !DILocation(line: 1438, column: 19, scope: !4605)
!4608 = !DILocation(line: 1439, column: 8, scope: !4605)
!4609 = !DILocation(line: 1439, column: 12, scope: !4605)
!4610 = !DILocation(line: 1438, column: 8, scope: !4602)
!4611 = !DILocation(line: 1441, column: 62, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4605, file: !3, line: 1440, column: 6)
!4613 = !DILocation(line: 1441, column: 66, scope: !4612)
!4614 = !DILocation(line: 1441, column: 8, scope: !4612)
!4615 = !DILocation(line: 1442, column: 12, scope: !4612)
!4616 = !DILocation(line: 1443, column: 6, scope: !4612)
!4617 = !DILocation(line: 1444, column: 15, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4605, file: !3, line: 1444, column: 13)
!4619 = !DILocation(line: 1444, column: 19, scope: !4618)
!4620 = !DILocation(line: 1444, column: 25, scope: !4618)
!4621 = !DILocation(line: 1445, column: 8, scope: !4618)
!4622 = !DILocation(line: 1445, column: 11, scope: !4618)
!4623 = !DILocation(line: 1444, column: 13, scope: !4605)
!4624 = !DILocation(line: 1447, column: 66, scope: !4625)
!4625 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 1446, column: 6)
!4626 = !DILocation(line: 1447, column: 70, scope: !4625)
!4627 = !DILocation(line: 1447, column: 8, scope: !4625)
!4628 = !DILocation(line: 1448, column: 12, scope: !4625)
!4629 = !DILocation(line: 1449, column: 6, scope: !4625)
!4630 = !DILocation(line: 1450, column: 4, scope: !4631)
!4631 = distinct !DILexicalBlock(scope: !4602, file: !3, line: 1450, column: 4)
!4632 = !DILocation(line: 1450, column: 4, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 1450, column: 4)
!4634 = !DILocation(line: 1452, column: 13, scope: !4635)
!4635 = distinct !DILexicalBlock(scope: !4636, file: !3, line: 1452, column: 12)
!4636 = distinct !DILexicalBlock(scope: !4633, file: !3, line: 1451, column: 6)
!4637 = !DILocation(line: 1452, column: 16, scope: !4635)
!4638 = !DILocation(line: 1452, column: 22, scope: !4635)
!4639 = !DILocation(line: 1453, column: 5, scope: !4635)
!4640 = !DILocation(line: 1453, column: 10, scope: !4635)
!4641 = !DILocation(line: 1453, column: 13, scope: !4635)
!4642 = !DILocation(line: 1453, column: 19, scope: !4635)
!4643 = !DILocation(line: 1452, column: 12, scope: !4636)
!4644 = !DILocation(line: 1456, column: 5, scope: !4645)
!4645 = distinct !DILexicalBlock(scope: !4635, file: !3, line: 1454, column: 3)
!4646 = !DILocation(line: 1456, column: 8, scope: !4645)
!4647 = !DILocation(line: 1456, column: 13, scope: !4645)
!4648 = !DILocation(line: 1456, column: 20, scope: !4645)
!4649 = !DILocation(line: 1456, column: 23, scope: !4645)
!4650 = !DILocation(line: 1456, column: 29, scope: !4645)
!4651 = !DILocation(line: 1455, column: 5, scope: !4645)
!4652 = !DILocation(line: 1457, column: 9, scope: !4645)
!4653 = !DILocation(line: 1458, column: 3, scope: !4645)
!4654 = !DILocation(line: 1459, column: 19, scope: !4655)
!4655 = distinct !DILexicalBlock(scope: !4635, file: !3, line: 1459, column: 17)
!4656 = !DILocation(line: 1459, column: 22, scope: !4655)
!4657 = !DILocation(line: 1459, column: 28, scope: !4655)
!4658 = !DILocation(line: 1460, column: 10, scope: !4655)
!4659 = !DILocation(line: 1460, column: 14, scope: !4655)
!4660 = !DILocation(line: 1460, column: 17, scope: !4655)
!4661 = !DILocation(line: 1460, column: 23, scope: !4655)
!4662 = !DILocation(line: 1459, column: 17, scope: !4635)
!4663 = !DILocation(line: 1463, column: 5, scope: !4664)
!4664 = distinct !DILexicalBlock(scope: !4655, file: !3, line: 1461, column: 3)
!4665 = !DILocation(line: 1463, column: 8, scope: !4664)
!4666 = !DILocation(line: 1463, column: 13, scope: !4664)
!4667 = !DILocation(line: 1463, column: 20, scope: !4664)
!4668 = !DILocation(line: 1463, column: 23, scope: !4664)
!4669 = !DILocation(line: 1463, column: 29, scope: !4664)
!4670 = !DILocation(line: 1462, column: 5, scope: !4664)
!4671 = !DILocation(line: 1464, column: 9, scope: !4664)
!4672 = !DILocation(line: 1465, column: 3, scope: !4664)
!4673 = !DILocation(line: 1466, column: 8, scope: !4636)
!4674 = !DILocation(line: 1466, column: 11, scope: !4636)
!4675 = !DILocation(line: 1466, column: 17, scope: !4636)
!4676 = !DILocation(line: 1467, column: 6, scope: !4636)
!4677 = distinct !{!4677, !4630, !4678}
!4678 = !DILocation(line: 1467, column: 6, scope: !4631)
!4679 = !DILocation(line: 1468, column: 2, scope: !4602)
!4680 = distinct !{!4680, !4597, !4681}
!4681 = !DILocation(line: 1468, column: 2, scope: !4598)
!4682 = !DILocation(line: 1469, column: 13, scope: !4555)
!4683 = !DILocation(line: 1469, column: 7, scope: !4555)
!4684 = !DILocation(line: 1470, column: 5, scope: !4555)
!4685 = !DILocation(line: 1473, column: 3, scope: !4686)
!4686 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1473, column: 3)
!4687 = !DILocation(line: 1473, column: 3, scope: !4688)
!4688 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 1473, column: 3)
!4689 = !DILocation(line: 1475, column: 12, scope: !4690)
!4690 = distinct !DILexicalBlock(scope: !4691, file: !3, line: 1475, column: 11)
!4691 = distinct !DILexicalBlock(scope: !4688, file: !3, line: 1474, column: 5)
!4692 = !DILocation(line: 1475, column: 18, scope: !4690)
!4693 = !DILocation(line: 1475, column: 24, scope: !4690)
!4694 = !DILocation(line: 1475, column: 27, scope: !4690)
!4695 = !DILocation(line: 1475, column: 33, scope: !4690)
!4696 = !DILocation(line: 1475, column: 40, scope: !4690)
!4697 = !DILocation(line: 1475, column: 42, scope: !4690)
!4698 = !DILocation(line: 1475, column: 11, scope: !4691)
!4699 = !DILocation(line: 1478, column: 4, scope: !4700)
!4700 = distinct !DILexicalBlock(scope: !4690, file: !3, line: 1476, column: 2)
!4701 = !DILocation(line: 1478, column: 10, scope: !4700)
!4702 = !DILocation(line: 1477, column: 4, scope: !4700)
!4703 = !DILocation(line: 1479, column: 8, scope: !4700)
!4704 = !DILocation(line: 1480, column: 2, scope: !4700)
!4705 = !DILocation(line: 1485, column: 17, scope: !4706)
!4706 = distinct !DILexicalBlock(scope: !4707, file: !3, line: 1485, column: 4)
!4707 = distinct !DILexicalBlock(scope: !4690, file: !3, line: 1482, column: 2)
!4708 = !DILocation(line: 1485, column: 23, scope: !4706)
!4709 = !DILocation(line: 1485, column: 15, scope: !4706)
!4710 = !DILocation(line: 1485, column: 37, scope: !4706)
!4711 = !DILocation(line: 1485, column: 44, scope: !4706)
!4712 = !DILocation(line: 1485, column: 35, scope: !4706)
!4713 = !DILocation(line: 1485, column: 52, scope: !4706)
!4714 = !DILocation(line: 1485, column: 9, scope: !4706)
!4715 = !DILocation(line: 1486, column: 9, scope: !4716)
!4716 = distinct !DILexicalBlock(scope: !4706, file: !3, line: 1485, column: 4)
!4717 = !DILocation(line: 1486, column: 15, scope: !4716)
!4718 = !DILocation(line: 1486, column: 17, scope: !4716)
!4719 = !DILocation(line: 1486, column: 20, scope: !4716)
!4720 = !DILocation(line: 1486, column: 28, scope: !4716)
!4721 = !DILocation(line: 1486, column: 25, scope: !4716)
!4722 = !DILocation(line: 0, scope: !4716)
!4723 = !DILocation(line: 1485, column: 4, scope: !4706)
!4724 = !DILocation(line: 1489, column: 13, scope: !4725)
!4725 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1489, column: 12)
!4726 = distinct !DILexicalBlock(scope: !4716, file: !3, line: 1488, column: 6)
!4727 = !DILocation(line: 1489, column: 16, scope: !4725)
!4728 = !DILocation(line: 1489, column: 12, scope: !4726)
!4729 = !DILocation(line: 1490, column: 11, scope: !4725)
!4730 = !DILocation(line: 1490, column: 18, scope: !4725)
!4731 = !DILocation(line: 1490, column: 9, scope: !4725)
!4732 = !DILocation(line: 1490, column: 3, scope: !4725)
!4733 = !DILocation(line: 1491, column: 6, scope: !4726)
!4734 = !DILocation(line: 1487, column: 16, scope: !4716)
!4735 = !DILocation(line: 1487, column: 22, scope: !4716)
!4736 = !DILocation(line: 1487, column: 14, scope: !4716)
!4737 = !DILocation(line: 1485, column: 4, scope: !4716)
!4738 = distinct !{!4738, !4723, !4739}
!4739 = !DILocation(line: 1491, column: 6, scope: !4706)
!4740 = !DILocation(line: 1493, column: 8, scope: !4741)
!4741 = distinct !DILexicalBlock(scope: !4707, file: !3, line: 1493, column: 8)
!4742 = !DILocation(line: 1493, column: 16, scope: !4741)
!4743 = !DILocation(line: 1493, column: 22, scope: !4741)
!4744 = !DILocation(line: 1493, column: 13, scope: !4741)
!4745 = !DILocation(line: 1493, column: 8, scope: !4707)
!4746 = !DILocation(line: 1495, column: 50, scope: !4747)
!4747 = distinct !DILexicalBlock(scope: !4741, file: !3, line: 1494, column: 6)
!4748 = !DILocation(line: 1495, column: 56, scope: !4747)
!4749 = !DILocation(line: 1495, column: 8, scope: !4747)
!4750 = !DILocation(line: 1496, column: 12, scope: !4747)
!4751 = !DILocation(line: 1497, column: 6, scope: !4747)
!4752 = !DILocation(line: 1500, column: 12, scope: !4753)
!4753 = distinct !DILexicalBlock(scope: !4691, file: !3, line: 1500, column: 11)
!4754 = !DILocation(line: 1500, column: 11, scope: !4691)
!4755 = !DILocation(line: 1502, column: 8, scope: !4756)
!4756 = distinct !DILexicalBlock(scope: !4757, file: !3, line: 1502, column: 8)
!4757 = distinct !DILexicalBlock(scope: !4753, file: !3, line: 1501, column: 2)
!4758 = !DILocation(line: 1502, column: 14, scope: !4756)
!4759 = !DILocation(line: 1502, column: 21, scope: !4756)
!4760 = !DILocation(line: 1502, column: 29, scope: !4756)
!4761 = !DILocation(line: 1502, column: 35, scope: !4756)
!4762 = !DILocation(line: 1502, column: 26, scope: !4756)
!4763 = !DILocation(line: 1502, column: 8, scope: !4757)
!4764 = !DILocation(line: 1505, column: 8, scope: !4765)
!4765 = distinct !DILexicalBlock(scope: !4756, file: !3, line: 1503, column: 6)
!4766 = !DILocation(line: 1505, column: 14, scope: !4765)
!4767 = !DILocation(line: 1504, column: 8, scope: !4765)
!4768 = !DILocation(line: 1506, column: 12, scope: !4765)
!4769 = !DILocation(line: 1507, column: 6, scope: !4765)
!4770 = !DILocation(line: 1508, column: 2, scope: !4757)
!4771 = !DILocation(line: 1509, column: 5, scope: !4691)
!4772 = distinct !{!4772, !4685, !4773}
!4773 = !DILocation(line: 1509, column: 5, scope: !4686)
!4774 = !DILocation(line: 1511, column: 7, scope: !4775)
!4775 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1511, column: 7)
!4776 = !DILocation(line: 1511, column: 7, scope: !4339)
!4777 = !DILocalVariable(name: "n_exits", scope: !4778, file: !3, line: 1513, type: !7)
!4778 = distinct !DILexicalBlock(scope: !4775, file: !3, line: 1512, column: 5)
!4779 = !DILocation(line: 1513, column: 16, scope: !4778)
!4780 = !DILocalVariable(name: "eloops", scope: !4778, file: !3, line: 1513, type: !7)
!4781 = !DILocation(line: 1513, column: 29, scope: !4778)
!4782 = !DILocation(line: 1515, column: 15, scope: !4778)
!4783 = !DILocation(line: 1515, column: 7, scope: !4778)
!4784 = !DILocation(line: 1515, column: 45, scope: !4778)
!4785 = !DILocation(line: 1515, column: 43, scope: !4778)
!4786 = !DILocation(line: 1516, column: 7, scope: !4787)
!4787 = distinct !DILexicalBlock(scope: !4778, file: !3, line: 1516, column: 7)
!4788 = !DILocation(line: 1516, column: 7, scope: !4789)
!4789 = distinct !DILexicalBlock(scope: !4787, file: !3, line: 1516, column: 7)
!4790 = !DILocalVariable(name: "ei", scope: !4791, file: !3, line: 1518, type: !2097)
!4791 = distinct !DILexicalBlock(scope: !4789, file: !3, line: 1517, column: 2)
!4792 = !DILocation(line: 1518, column: 18, scope: !4791)
!4793 = !DILocation(line: 1519, column: 8, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 1519, column: 8)
!4795 = !DILocation(line: 1519, column: 12, scope: !4794)
!4796 = !DILocation(line: 1519, column: 27, scope: !4794)
!4797 = !DILocation(line: 1519, column: 42, scope: !4794)
!4798 = !DILocation(line: 1519, column: 24, scope: !4794)
!4799 = !DILocation(line: 1519, column: 8, scope: !4791)
!4800 = !DILocation(line: 1520, column: 6, scope: !4794)
!4801 = !DILocation(line: 1521, column: 4, scope: !4802)
!4802 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 1521, column: 4)
!4803 = !DILocation(line: 1521, column: 4, scope: !4804)
!4804 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1521, column: 4)
!4805 = !DILocation(line: 1523, column: 35, scope: !4806)
!4806 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 1523, column: 12)
!4807 = distinct !DILexicalBlock(scope: !4804, file: !3, line: 1522, column: 6)
!4808 = !DILocation(line: 1523, column: 39, scope: !4806)
!4809 = !DILocation(line: 1523, column: 52, scope: !4806)
!4810 = !DILocation(line: 1523, column: 55, scope: !4806)
!4811 = !DILocation(line: 1523, column: 12, scope: !4806)
!4812 = !DILocation(line: 1523, column: 12, scope: !4807)
!4813 = !DILocation(line: 1524, column: 3, scope: !4806)
!4814 = !DILocation(line: 1526, column: 15, scope: !4807)
!4815 = !DILocation(line: 1527, column: 38, scope: !4807)
!4816 = !DILocation(line: 1527, column: 15, scope: !4807)
!4817 = !DILocation(line: 1527, column: 13, scope: !4807)
!4818 = !DILocation(line: 1528, column: 13, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 1528, column: 12)
!4820 = !DILocation(line: 1528, column: 12, scope: !4807)
!4821 = !DILocation(line: 1531, column: 5, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4819, file: !3, line: 1529, column: 3)
!4823 = !DILocation(line: 1531, column: 8, scope: !4822)
!4824 = !DILocation(line: 1531, column: 13, scope: !4822)
!4825 = !DILocation(line: 1531, column: 20, scope: !4822)
!4826 = !DILocation(line: 1531, column: 23, scope: !4822)
!4827 = !DILocation(line: 1531, column: 29, scope: !4822)
!4828 = !DILocation(line: 1530, column: 5, scope: !4822)
!4829 = !DILocation(line: 1532, column: 9, scope: !4822)
!4830 = !DILocation(line: 1533, column: 3, scope: !4822)
!4831 = !DILocation(line: 1534, column: 15, scope: !4807)
!4832 = !DILocation(line: 1535, column: 8, scope: !4807)
!4833 = !DILocation(line: 1535, column: 15, scope: !4834)
!4834 = distinct !DILexicalBlock(scope: !4835, file: !3, line: 1535, column: 8)
!4835 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 1535, column: 8)
!4836 = !DILocation(line: 1535, column: 8, scope: !4835)
!4837 = !DILocation(line: 1536, column: 9, scope: !4834)
!4838 = !DILocation(line: 1536, column: 3, scope: !4834)
!4839 = !DILocation(line: 1535, column: 28, scope: !4834)
!4840 = !DILocation(line: 1535, column: 34, scope: !4834)
!4841 = !DILocation(line: 1535, column: 26, scope: !4834)
!4842 = !DILocation(line: 1535, column: 8, scope: !4834)
!4843 = distinct !{!4843, !4836, !4844}
!4844 = !DILocation(line: 1536, column: 9, scope: !4835)
!4845 = !DILocation(line: 1538, column: 20, scope: !4846)
!4846 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 1538, column: 8)
!4847 = !DILocation(line: 1538, column: 24, scope: !4846)
!4848 = !DILocation(line: 1538, column: 18, scope: !4846)
!4849 = !DILocation(line: 1538, column: 13, scope: !4846)
!4850 = !DILocation(line: 1539, column: 6, scope: !4851)
!4851 = distinct !DILexicalBlock(scope: !4846, file: !3, line: 1538, column: 8)
!4852 = !DILocation(line: 1539, column: 14, scope: !4851)
!4853 = !DILocation(line: 1539, column: 17, scope: !4851)
!4854 = !DILocation(line: 1539, column: 23, scope: !4851)
!4855 = !DILocation(line: 1539, column: 11, scope: !4851)
!4856 = !DILocation(line: 1538, column: 8, scope: !4846)
!4857 = !DILocation(line: 1542, column: 11, scope: !4858)
!4858 = distinct !DILexicalBlock(scope: !4851, file: !3, line: 1541, column: 3)
!4859 = !DILocation(line: 1543, column: 5, scope: !4858)
!4860 = !DILocation(line: 1543, column: 11, scope: !4858)
!4861 = !DILocation(line: 1543, column: 17, scope: !4858)
!4862 = !DILocation(line: 1543, column: 21, scope: !4858)
!4863 = !DILocation(line: 1544, column: 3, scope: !4858)
!4864 = !DILocation(line: 1540, column: 25, scope: !4851)
!4865 = !DILocation(line: 1540, column: 13, scope: !4851)
!4866 = !DILocation(line: 1540, column: 11, scope: !4851)
!4867 = !DILocation(line: 1538, column: 8, scope: !4851)
!4868 = distinct !{!4868, !4856, !4869}
!4869 = !DILocation(line: 1544, column: 3, scope: !4846)
!4870 = !DILocation(line: 1546, column: 12, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 1546, column: 12)
!4872 = !DILocation(line: 1546, column: 19, scope: !4871)
!4873 = !DILocation(line: 1546, column: 12, scope: !4807)
!4874 = !DILocation(line: 1549, column: 5, scope: !4875)
!4875 = distinct !DILexicalBlock(scope: !4871, file: !3, line: 1547, column: 3)
!4876 = !DILocation(line: 1549, column: 8, scope: !4875)
!4877 = !DILocation(line: 1549, column: 13, scope: !4875)
!4878 = !DILocation(line: 1549, column: 20, scope: !4875)
!4879 = !DILocation(line: 1549, column: 23, scope: !4875)
!4880 = !DILocation(line: 1549, column: 29, scope: !4875)
!4881 = !DILocation(line: 1548, column: 5, scope: !4875)
!4882 = !DILocation(line: 1550, column: 9, scope: !4875)
!4883 = !DILocation(line: 1551, column: 3, scope: !4875)
!4884 = !DILocation(line: 1552, column: 6, scope: !4807)
!4885 = distinct !{!4885, !4801, !4886}
!4886 = !DILocation(line: 1552, column: 6, scope: !4802)
!4887 = !DILocation(line: 1553, column: 2, scope: !4791)
!4888 = distinct !{!4888, !4786, !4889}
!4889 = !DILocation(line: 1553, column: 2, scope: !4787)
!4890 = !DILocation(line: 1555, column: 11, scope: !4891)
!4891 = distinct !DILexicalBlock(scope: !4778, file: !3, line: 1555, column: 11)
!4892 = !DILocation(line: 1555, column: 37, scope: !4891)
!4893 = !DILocation(line: 1555, column: 52, scope: !4891)
!4894 = !DILocation(line: 1555, column: 22, scope: !4891)
!4895 = !DILocation(line: 1555, column: 19, scope: !4891)
!4896 = !DILocation(line: 1555, column: 11, scope: !4778)
!4897 = !DILocation(line: 1557, column: 4, scope: !4898)
!4898 = distinct !DILexicalBlock(scope: !4891, file: !3, line: 1556, column: 2)
!4899 = !DILocation(line: 1558, column: 8, scope: !4898)
!4900 = !DILocation(line: 1559, column: 2, scope: !4898)
!4901 = !DILocation(line: 1561, column: 7, scope: !4902)
!4902 = distinct !DILexicalBlock(scope: !4778, file: !3, line: 1561, column: 7)
!4903 = !DILocation(line: 1561, column: 7, scope: !4904)
!4904 = distinct !DILexicalBlock(scope: !4902, file: !3, line: 1561, column: 7)
!4905 = !DILocation(line: 1563, column: 11, scope: !4906)
!4906 = distinct !DILexicalBlock(scope: !4904, file: !3, line: 1562, column: 2)
!4907 = !DILocation(line: 1564, column: 16, scope: !4908)
!4908 = distinct !DILexicalBlock(scope: !4906, file: !3, line: 1564, column: 4)
!4909 = !DILocation(line: 1564, column: 22, scope: !4908)
!4910 = !DILocation(line: 1564, column: 29, scope: !4908)
!4911 = !DILocation(line: 1564, column: 14, scope: !4908)
!4912 = !DILocation(line: 1564, column: 9, scope: !4908)
!4913 = !DILocation(line: 1564, column: 35, scope: !4914)
!4914 = distinct !DILexicalBlock(scope: !4908, file: !3, line: 1564, column: 4)
!4915 = !DILocation(line: 1564, column: 41, scope: !4914)
!4916 = !DILocation(line: 1564, column: 4, scope: !4908)
!4917 = !DILocation(line: 1565, column: 12, scope: !4914)
!4918 = !DILocation(line: 1565, column: 6, scope: !4914)
!4919 = !DILocation(line: 1564, column: 51, scope: !4914)
!4920 = !DILocation(line: 1564, column: 57, scope: !4914)
!4921 = !DILocation(line: 1564, column: 49, scope: !4914)
!4922 = !DILocation(line: 1564, column: 4, scope: !4914)
!4923 = distinct !{!4923, !4916, !4924}
!4924 = !DILocation(line: 1565, column: 12, scope: !4908)
!4925 = !DILocation(line: 1566, column: 8, scope: !4926)
!4926 = distinct !DILexicalBlock(scope: !4906, file: !3, line: 1566, column: 8)
!4927 = !DILocation(line: 1566, column: 18, scope: !4926)
!4928 = !DILocation(line: 1566, column: 24, scope: !4926)
!4929 = !DILocation(line: 1566, column: 30, scope: !4926)
!4930 = !DILocation(line: 1566, column: 15, scope: !4926)
!4931 = !DILocation(line: 1566, column: 8, scope: !4906)
!4932 = !DILocation(line: 1569, column: 8, scope: !4933)
!4933 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 1567, column: 6)
!4934 = !DILocation(line: 1569, column: 16, scope: !4933)
!4935 = !DILocation(line: 1569, column: 22, scope: !4933)
!4936 = !DILocation(line: 1569, column: 27, scope: !4933)
!4937 = !DILocation(line: 1569, column: 33, scope: !4933)
!4938 = !DILocation(line: 1569, column: 39, scope: !4933)
!4939 = !DILocation(line: 1568, column: 8, scope: !4933)
!4940 = !DILocation(line: 1570, column: 12, scope: !4933)
!4941 = !DILocation(line: 1571, column: 6, scope: !4933)
!4942 = !DILocation(line: 1572, column: 2, scope: !4906)
!4943 = distinct !{!4943, !4901, !4944}
!4944 = !DILocation(line: 1572, column: 2, scope: !4902)
!4945 = !DILocation(line: 1573, column: 5, scope: !4778)
!4946 = !DILocation(line: 1575, column: 3, scope: !4339)
!4947 = !DILocation(line: 1577, column: 9, scope: !4339)
!4948 = !DILocation(line: 1577, column: 3, scope: !4339)
!4949 = !DILocation(line: 1578, column: 1, scope: !4339)
!4950 = distinct !DISubprogram(name: "single_succ_p", scope: !135, file: !135, line: 626, type: !4951, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4951 = !DISubroutineType(types: !4952)
!4952 = !{!622, !3281}
!4953 = !DILocalVariable(name: "bb", arg: 1, scope: !4950, file: !135, line: 626, type: !3281)
!4954 = !DILocation(line: 626, column: 34, scope: !4950)
!4955 = !DILocation(line: 628, column: 10, scope: !4950)
!4956 = !DILocation(line: 628, column: 33, scope: !4950)
!4957 = !DILocation(line: 628, column: 3, scope: !4950)
!4958 = distinct !DISubprogram(name: "single_succ", scope: !135, file: !135, line: 663, type: !4959, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4959 = !DISubroutineType(types: !4960)
!4960 = !{!979, !3281}
!4961 = !DILocalVariable(name: "bb", arg: 1, scope: !4958, file: !135, line: 663, type: !3281)
!4962 = !DILocation(line: 663, column: 32, scope: !4958)
!4963 = !DILocation(line: 665, column: 28, scope: !4958)
!4964 = !DILocation(line: 665, column: 10, scope: !4958)
!4965 = !DILocation(line: 665, column: 33, scope: !4958)
!4966 = !DILocation(line: 665, column: 3, scope: !4958)
!4967 = distinct !DISubprogram(name: "loop_latch_edge", scope: !3, file: !3, line: 1582, type: !4968, scopeLine: 1583, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4968 = !DISubroutineType(types: !4969)
!4969 = !{!459, !1847}
!4970 = !DILocalVariable(name: "loop", arg: 1, scope: !4967, file: !3, line: 1582, type: !1847)
!4971 = !DILocation(line: 1582, column: 37, scope: !4967)
!4972 = !DILocation(line: 1584, column: 21, scope: !4967)
!4973 = !DILocation(line: 1584, column: 27, scope: !4967)
!4974 = !DILocation(line: 1584, column: 34, scope: !4967)
!4975 = !DILocation(line: 1584, column: 40, scope: !4967)
!4976 = !DILocation(line: 1584, column: 10, scope: !4967)
!4977 = !DILocation(line: 1584, column: 3, scope: !4967)
!4978 = distinct !DISubprogram(name: "RESET_BIT", scope: !2972, file: !2972, line: 82, type: !3231, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!4979 = !DILocalVariable(name: "map", arg: 1, scope: !4978, file: !2972, line: 82, type: !2971)
!4980 = !DILocation(line: 82, column: 20, scope: !4978)
!4981 = !DILocalVariable(name: "bitno", arg: 2, scope: !4978, file: !2972, line: 82, type: !7)
!4982 = !DILocation(line: 82, column: 39, scope: !4978)
!4983 = !DILocation(line: 84, column: 7, scope: !4984)
!4984 = distinct !DILexicalBlock(scope: !4978, file: !2972, line: 84, column: 7)
!4985 = !DILocation(line: 84, column: 12, scope: !4984)
!4986 = !DILocation(line: 84, column: 7, scope: !4978)
!4987 = !DILocalVariable(name: "oldbit", scope: !4988, file: !2972, line: 86, type: !622)
!4988 = distinct !DILexicalBlock(scope: !4984, file: !2972, line: 85, column: 5)
!4989 = !DILocation(line: 86, column: 12, scope: !4988)
!4990 = !DILocation(line: 87, column: 16, scope: !4988)
!4991 = !DILocation(line: 87, column: 14, scope: !4988)
!4992 = !DILocation(line: 88, column: 11, scope: !4993)
!4993 = distinct !DILexicalBlock(scope: !4988, file: !2972, line: 88, column: 11)
!4994 = !DILocation(line: 88, column: 11, scope: !4988)
!4995 = !DILocation(line: 89, column: 2, scope: !4993)
!4996 = !DILocation(line: 89, column: 7, scope: !4993)
!4997 = !DILocation(line: 89, column: 16, scope: !4993)
!4998 = !DILocation(line: 89, column: 22, scope: !4993)
!4999 = !DILocation(line: 89, column: 41, scope: !4993)
!5000 = !DILocation(line: 90, column: 5, scope: !4988)
!5001 = !DILocation(line: 92, column: 35, scope: !4978)
!5002 = !DILocation(line: 92, column: 42, scope: !4978)
!5003 = !DILocation(line: 92, column: 31, scope: !4978)
!5004 = !DILocation(line: 92, column: 8, scope: !4978)
!5005 = !DILocation(line: 91, column: 3, scope: !4978)
!5006 = !DILocation(line: 91, column: 8, scope: !4978)
!5007 = !DILocation(line: 91, column: 13, scope: !4978)
!5008 = !DILocation(line: 91, column: 19, scope: !4978)
!5009 = !DILocation(line: 92, column: 5, scope: !4978)
!5010 = !DILocation(line: 93, column: 1, scope: !4978)
!5011 = distinct !DISubprogram(name: "get_exit_descriptions", scope: !3, file: !3, line: 1001, type: !5012, scopeLine: 1002, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5012 = !DISubroutineType(types: !5013)
!5013 = !{!1817, !459}
!5014 = !DILocalVariable(name: "e", arg: 1, scope: !5011, file: !3, line: 1001, type: !459)
!5015 = !DILocation(line: 1001, column: 29, scope: !5011)
!5016 = !DILocation(line: 1003, column: 52, scope: !5011)
!5017 = !DILocation(line: 1003, column: 67, scope: !5011)
!5018 = !DILocation(line: 1003, column: 74, scope: !5011)
!5019 = !DILocation(line: 1004, column: 31, scope: !5011)
!5020 = !DILocation(line: 1004, column: 50, scope: !5011)
!5021 = !DILocation(line: 1003, column: 31, scope: !5011)
!5022 = !DILocation(line: 1003, column: 10, scope: !5011)
!5023 = !DILocation(line: 1003, column: 3, scope: !5011)
!5024 = distinct !DISubprogram(name: "loop_preheader_edge", scope: !3, file: !3, line: 1589, type: !4968, scopeLine: 1590, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5025 = !DILocalVariable(name: "loop", arg: 1, scope: !5024, file: !3, line: 1589, type: !1847)
!5026 = !DILocation(line: 1589, column: 41, scope: !5024)
!5027 = !DILocalVariable(name: "e", scope: !5024, file: !3, line: 1591, type: !459)
!5028 = !DILocation(line: 1591, column: 8, scope: !5024)
!5029 = !DILocalVariable(name: "ei", scope: !5024, file: !3, line: 1592, type: !2097)
!5030 = !DILocation(line: 1592, column: 17, scope: !5024)
!5031 = !DILocation(line: 1594, column: 3, scope: !5024)
!5032 = !DILocation(line: 1596, column: 3, scope: !5033)
!5033 = distinct !DILexicalBlock(scope: !5024, file: !3, line: 1596, column: 3)
!5034 = !DILocation(line: 1596, column: 3, scope: !5035)
!5035 = distinct !DILexicalBlock(scope: !5033, file: !3, line: 1596, column: 3)
!5036 = !DILocation(line: 1597, column: 9, scope: !5037)
!5037 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 1597, column: 9)
!5038 = !DILocation(line: 1597, column: 12, scope: !5037)
!5039 = !DILocation(line: 1597, column: 19, scope: !5037)
!5040 = !DILocation(line: 1597, column: 25, scope: !5037)
!5041 = !DILocation(line: 1597, column: 16, scope: !5037)
!5042 = !DILocation(line: 1597, column: 9, scope: !5035)
!5043 = !DILocation(line: 1598, column: 7, scope: !5037)
!5044 = distinct !{!5044, !5032, !5045}
!5045 = !DILocation(line: 1598, column: 7, scope: !5033)
!5046 = !DILocation(line: 1600, column: 10, scope: !5024)
!5047 = !DILocation(line: 1600, column: 3, scope: !5024)
!5048 = distinct !DISubprogram(name: "loop_exit_edge_p", scope: !3, file: !3, line: 1606, type: !5049, scopeLine: 1607, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5049 = !DISubroutineType(types: !5050)
!5050 = !{!622, !1847, !5051}
!5051 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_edge", file: !429, line: 109, baseType: !5052)
!5052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5053, size: 64)
!5053 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !461)
!5054 = !DILocalVariable(name: "loop", arg: 1, scope: !5048, file: !3, line: 1606, type: !1847)
!5055 = !DILocation(line: 1606, column: 38, scope: !5048)
!5056 = !DILocalVariable(name: "e", arg: 2, scope: !5048, file: !3, line: 1606, type: !5051)
!5057 = !DILocation(line: 1606, column: 55, scope: !5048)
!5058 = !DILocation(line: 1608, column: 34, scope: !5048)
!5059 = !DILocation(line: 1608, column: 40, scope: !5048)
!5060 = !DILocation(line: 1608, column: 43, scope: !5048)
!5061 = !DILocation(line: 1608, column: 11, scope: !5048)
!5062 = !DILocation(line: 1609, column: 4, scope: !5048)
!5063 = !DILocation(line: 1609, column: 31, scope: !5048)
!5064 = !DILocation(line: 1609, column: 37, scope: !5048)
!5065 = !DILocation(line: 1609, column: 40, scope: !5048)
!5066 = !DILocation(line: 1609, column: 8, scope: !5048)
!5067 = !DILocation(line: 1609, column: 7, scope: !5048)
!5068 = !DILocation(line: 0, scope: !5048)
!5069 = !DILocation(line: 1608, column: 10, scope: !5048)
!5070 = !DILocation(line: 1608, column: 3, scope: !5048)
!5071 = distinct !DISubprogram(name: "single_exit", scope: !3, file: !3, line: 1617, type: !4968, scopeLine: 1618, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5072 = !DILocalVariable(name: "loop", arg: 1, scope: !5071, file: !3, line: 1617, type: !1847)
!5073 = !DILocation(line: 1617, column: 33, scope: !5071)
!5074 = !DILocalVariable(name: "exit", scope: !5071, file: !3, line: 1619, type: !1817)
!5075 = !DILocation(line: 1619, column: 21, scope: !5071)
!5076 = !DILocation(line: 1619, column: 28, scope: !5071)
!5077 = !DILocation(line: 1619, column: 34, scope: !5071)
!5078 = !DILocation(line: 1619, column: 41, scope: !5071)
!5079 = !DILocation(line: 1621, column: 8, scope: !5080)
!5080 = distinct !DILexicalBlock(scope: !5071, file: !3, line: 1621, column: 7)
!5081 = !DILocation(line: 1621, column: 7, scope: !5071)
!5082 = !DILocation(line: 1622, column: 5, scope: !5080)
!5083 = !DILocation(line: 1624, column: 7, scope: !5084)
!5084 = distinct !DILexicalBlock(scope: !5071, file: !3, line: 1624, column: 7)
!5085 = !DILocation(line: 1624, column: 13, scope: !5084)
!5086 = !DILocation(line: 1624, column: 15, scope: !5084)
!5087 = !DILocation(line: 1624, column: 18, scope: !5084)
!5088 = !DILocation(line: 1624, column: 24, scope: !5084)
!5089 = !DILocation(line: 1624, column: 32, scope: !5084)
!5090 = !DILocation(line: 1624, column: 38, scope: !5084)
!5091 = !DILocation(line: 1624, column: 29, scope: !5084)
!5092 = !DILocation(line: 1624, column: 7, scope: !5071)
!5093 = !DILocation(line: 1625, column: 12, scope: !5084)
!5094 = !DILocation(line: 1625, column: 18, scope: !5084)
!5095 = !DILocation(line: 1625, column: 5, scope: !5084)
!5096 = !DILocation(line: 1627, column: 5, scope: !5084)
!5097 = !DILocation(line: 1628, column: 1, scope: !5071)
!5098 = distinct !DISubprogram(name: "is_loop_exit", scope: !3, file: !3, line: 1633, type: !5099, scopeLine: 1634, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5099 = !DISubroutineType(types: !5100)
!5100 = !{!622, !436, !979}
!5101 = !DILocalVariable(name: "loop", arg: 1, scope: !5098, file: !3, line: 1633, type: !436)
!5102 = !DILocation(line: 1633, column: 28, scope: !5098)
!5103 = !DILocalVariable(name: "bb", arg: 2, scope: !5098, file: !3, line: 1633, type: !979)
!5104 = !DILocation(line: 1633, column: 46, scope: !5098)
!5105 = !DILocalVariable(name: "e", scope: !5098, file: !3, line: 1635, type: !459)
!5106 = !DILocation(line: 1635, column: 8, scope: !5098)
!5107 = !DILocalVariable(name: "ei", scope: !5098, file: !3, line: 1636, type: !2097)
!5108 = !DILocation(line: 1636, column: 17, scope: !5098)
!5109 = !DILocation(line: 1638, column: 3, scope: !5110)
!5110 = distinct !DILexicalBlock(scope: !5098, file: !3, line: 1638, column: 3)
!5111 = !DILocation(line: 1638, column: 3, scope: !5112)
!5112 = distinct !DILexicalBlock(scope: !5110, file: !3, line: 1638, column: 3)
!5113 = !DILocation(line: 1639, column: 27, scope: !5114)
!5114 = distinct !DILexicalBlock(scope: !5112, file: !3, line: 1639, column: 9)
!5115 = !DILocation(line: 1639, column: 33, scope: !5114)
!5116 = !DILocation(line: 1639, column: 9, scope: !5114)
!5117 = !DILocation(line: 1639, column: 9, scope: !5112)
!5118 = !DILocation(line: 1640, column: 7, scope: !5114)
!5119 = !DILocation(line: 1639, column: 34, scope: !5114)
!5120 = distinct !{!5120, !5109, !5121}
!5121 = !DILocation(line: 1640, column: 14, scope: !5110)
!5122 = !DILocation(line: 1642, column: 3, scope: !5098)
!5123 = !DILocation(line: 1643, column: 1, scope: !5098)
!5124 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !1831, file: !1831, line: 32, type: !5125, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5125 = !DISubroutineType(types: !5126)
!5126 = !{!1829, !440}
!5127 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5124, file: !1831, line: 32, type: !440)
!5128 = !DILocation(line: 32, column: 1, scope: !5124)
!5129 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !1831, file: !1831, line: 31, type: !5130, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5130 = !DISubroutineType(types: !5131)
!5131 = !{!1826, !5132, !440}
!5132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1835, size: 64)
!5133 = !DILocalVariable(name: "vec_", arg: 1, scope: !5129, file: !1831, line: 31, type: !5132)
!5134 = !DILocation(line: 31, column: 1, scope: !5129)
!5135 = !DILocalVariable(name: "obj_", arg: 2, scope: !5129, file: !1831, line: 31, type: !440)
!5136 = !DILocalVariable(name: "slot_", scope: !5129, file: !1831, line: 31, type: !1826)
!5137 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !1831, file: !1831, line: 31, type: !5138, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5138 = !DISubroutineType(types: !5139)
!5139 = !{!440, !5140, !7, !1826}
!5140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5141, size: 64)
!5141 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1835)
!5142 = !DILocalVariable(name: "vec_", arg: 1, scope: !5137, file: !1831, line: 31, type: !5140)
!5143 = !DILocation(line: 31, column: 1, scope: !5137)
!5144 = !DILocalVariable(name: "ix_", arg: 2, scope: !5137, file: !1831, line: 31, type: !7)
!5145 = !DILocalVariable(name: "ptr", arg: 3, scope: !5137, file: !1831, line: 31, type: !1826)
!5146 = !DILocation(line: 31, column: 1, scope: !5147)
!5147 = distinct !DILexicalBlock(scope: !5137, file: !1831, line: 31, column: 1)
!5148 = !DILocation(line: 31, column: 1, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5147, file: !1831, line: 31, column: 1)
!5150 = !DILocation(line: 31, column: 1, scope: !5151)
!5151 = distinct !DILexicalBlock(scope: !5147, file: !1831, line: 31, column: 1)
!5152 = distinct !DISubprogram(name: "get_loop", scope: !378, file: !378, line: 417, type: !5153, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5153 = !DISubroutineType(types: !5154)
!5154 = !{!436, !7}
!5155 = !DILocalVariable(name: "num", arg: 1, scope: !5152, file: !378, line: 417, type: !7)
!5156 = !DILocation(line: 417, column: 20, scope: !5152)
!5157 = !DILocation(line: 419, column: 10, scope: !5152)
!5158 = !DILocation(line: 419, column: 3, scope: !5152)
!5159 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !1831, file: !1831, line: 32, type: !5160, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5160 = !DISubroutineType(types: !5161)
!5161 = !{null, !5162}
!5162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1829, size: 64)
!5163 = !DILocalVariable(name: "vec_", arg: 1, scope: !5159, file: !1831, line: 32, type: !5162)
!5164 = !DILocation(line: 32, column: 1, scope: !5159)
!5165 = !DILocation(line: 32, column: 1, scope: !5166)
!5166 = distinct !DILexicalBlock(scope: !5159, file: !1831, line: 32, column: 1)
!5167 = distinct !DISubprogram(name: "ei_end_p", scope: !135, file: !135, line: 721, type: !5168, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5168 = !DISubroutineType(types: !5169)
!5169 = !{!622, !2097}
!5170 = !DILocalVariable(name: "i", arg: 1, scope: !5167, file: !135, line: 721, type: !2097)
!5171 = !DILocation(line: 721, column: 25, scope: !5167)
!5172 = !DILocation(line: 723, column: 13, scope: !5167)
!5173 = !DILocation(line: 723, column: 22, scope: !5167)
!5174 = !DILocation(line: 723, column: 19, scope: !5167)
!5175 = !DILocation(line: 723, column: 10, scope: !5167)
!5176 = !DILocation(line: 723, column: 3, scope: !5167)
!5177 = distinct !DISubprogram(name: "ei_edge", scope: !135, file: !135, line: 752, type: !5178, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5178 = !DISubroutineType(types: !5179)
!5179 = !{!459, !2097}
!5180 = !DILocalVariable(name: "i", arg: 1, scope: !5177, file: !135, line: 752, type: !2097)
!5181 = !DILocation(line: 752, column: 24, scope: !5177)
!5182 = !DILocation(line: 754, column: 10, scope: !5177)
!5183 = !DILocation(line: 754, column: 3, scope: !5177)
!5184 = distinct !DISubprogram(name: "ei_container", scope: !135, file: !135, line: 685, type: !5185, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5185 = !DISubroutineType(types: !5186)
!5186 = !{!447, !2097}
!5187 = !DILocalVariable(name: "i", arg: 1, scope: !5184, file: !135, line: 685, type: !2097)
!5188 = !DILocation(line: 685, column: 29, scope: !5184)
!5189 = !DILocation(line: 687, column: 3, scope: !5184)
!5190 = !DILocation(line: 688, column: 13, scope: !5184)
!5191 = !DILocation(line: 688, column: 10, scope: !5184)
!5192 = !DILocation(line: 688, column: 3, scope: !5184)
!5193 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !135, file: !135, line: 150, type: !5194, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5194 = !DISubroutineType(types: !5195)
!5195 = !{!459, !2129, !7}
!5196 = !DILocalVariable(name: "vec_", arg: 1, scope: !5193, file: !135, line: 150, type: !2129)
!5197 = !DILocation(line: 150, column: 1, scope: !5193)
!5198 = !DILocalVariable(name: "ix_", arg: 2, scope: !5193, file: !135, line: 150, type: !7)
!5199 = !DILocation(line: 0, scope: !5193)
!5200 = distinct !DISubprogram(name: "VEC_basic_block_heap_reserve", scope: !135, file: !135, line: 283, type: !5201, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5201 = !DISubroutineType(types: !5202)
!5202 = !{!440, !2773, !440}
!5203 = !DILocalVariable(name: "vec_", arg: 1, scope: !5200, file: !135, line: 283, type: !2773)
!5204 = !DILocation(line: 283, column: 1, scope: !5200)
!5205 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5200, file: !135, line: 283, type: !440)
!5206 = !DILocalVariable(name: "extend", scope: !5200, file: !135, line: 283, type: !440)
!5207 = !DILocation(line: 283, column: 1, scope: !5208)
!5208 = distinct !DILexicalBlock(scope: !5200, file: !135, line: 283, column: 1)
!5209 = distinct !DISubprogram(name: "VEC_basic_block_base_quick_push", scope: !135, file: !135, line: 281, type: !5210, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5210 = !DISubroutineType(types: !5211)
!5211 = !{!1827, !2787, !979}
!5212 = !DILocalVariable(name: "vec_", arg: 1, scope: !5209, file: !135, line: 281, type: !2787)
!5213 = !DILocation(line: 281, column: 1, scope: !5209)
!5214 = !DILocalVariable(name: "obj_", arg: 2, scope: !5209, file: !135, line: 281, type: !979)
!5215 = !DILocalVariable(name: "slot_", scope: !5209, file: !135, line: 281, type: !1827)
!5216 = distinct !DISubprogram(name: "VEC_basic_block_base_space", scope: !135, file: !135, line: 281, type: !5217, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5217 = !DISubroutineType(types: !5218)
!5218 = !{!440, !2787, !440}
!5219 = !DILocalVariable(name: "vec_", arg: 1, scope: !5216, file: !135, line: 281, type: !2787)
!5220 = !DILocation(line: 281, column: 1, scope: !5216)
!5221 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5216, file: !135, line: 281, type: !440)
!5222 = distinct !DISubprogram(name: "VEC_loop_p_gc_reserve", scope: !378, file: !378, line: 87, type: !5223, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5223 = !DISubroutineType(types: !5224)
!5224 = !{!440, !2576, !440}
!5225 = !DILocalVariable(name: "vec_", arg: 1, scope: !5222, file: !378, line: 87, type: !2576)
!5226 = !DILocation(line: 87, column: 1, scope: !5222)
!5227 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5222, file: !378, line: 87, type: !440)
!5228 = !DILocalVariable(name: "extend", scope: !5222, file: !378, line: 87, type: !440)
!5229 = !DILocation(line: 87, column: 1, scope: !5230)
!5230 = distinct !DILexicalBlock(scope: !5222, file: !378, line: 87, column: 1)
!5231 = distinct !DISubprogram(name: "VEC_loop_p_base_space", scope: !378, file: !378, line: 85, type: !5232, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5232 = !DISubroutineType(types: !5233)
!5233 = !{!440, !2925, !440}
!5234 = !DILocalVariable(name: "vec_", arg: 1, scope: !5231, file: !378, line: 85, type: !2925)
!5235 = !DILocation(line: 85, column: 1, scope: !5231)
!5236 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5231, file: !378, line: 85, type: !440)
!5237 = distinct !DISubprogram(name: "VEC_loop_p_gc_alloc", scope: !378, file: !378, line: 87, type: !5238, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5238 = !DISubroutineType(types: !5239)
!5239 = !{!1150, !440}
!5240 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5237, file: !378, line: 87, type: !440)
!5241 = !DILocation(line: 87, column: 1, scope: !5237)
!5242 = distinct !DISubprogram(name: "find_subloop_latch_edge", scope: !3, file: !3, line: 620, type: !5243, scopeLine: 621, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5243 = !DISubroutineType(types: !5244)
!5244 = !{!459, !436}
!5245 = !DILocalVariable(name: "loop", arg: 1, scope: !5242, file: !3, line: 620, type: !436)
!5246 = !DILocation(line: 620, column: 39, scope: !5242)
!5247 = !DILocalVariable(name: "latches", scope: !5242, file: !3, line: 622, type: !1902)
!5248 = !DILocation(line: 622, column: 21, scope: !5242)
!5249 = !DILocation(line: 622, column: 53, scope: !5242)
!5250 = !DILocation(line: 622, column: 31, scope: !5242)
!5251 = !DILocalVariable(name: "latch", scope: !5242, file: !3, line: 623, type: !459)
!5252 = !DILocation(line: 623, column: 8, scope: !5242)
!5253 = !DILocation(line: 625, column: 7, scope: !5254)
!5254 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 625, column: 7)
!5255 = !DILocation(line: 625, column: 34, scope: !5254)
!5256 = !DILocation(line: 625, column: 7, scope: !5242)
!5257 = !DILocation(line: 627, column: 51, scope: !5258)
!5258 = distinct !DILexicalBlock(scope: !5254, file: !3, line: 626, column: 5)
!5259 = !DILocation(line: 627, column: 15, scope: !5258)
!5260 = !DILocation(line: 627, column: 13, scope: !5258)
!5261 = !DILocation(line: 629, column: 12, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5258, file: !3, line: 629, column: 11)
!5263 = !DILocation(line: 633, column: 4, scope: !5262)
!5264 = !DILocation(line: 633, column: 7, scope: !5262)
!5265 = !DILocation(line: 633, column: 26, scope: !5262)
!5266 = !DILocation(line: 629, column: 11, scope: !5258)
!5267 = !DILocation(line: 634, column: 42, scope: !5262)
!5268 = !DILocation(line: 634, column: 48, scope: !5262)
!5269 = !DILocation(line: 634, column: 10, scope: !5262)
!5270 = !DILocation(line: 634, column: 8, scope: !5262)
!5271 = !DILocation(line: 634, column: 2, scope: !5262)
!5272 = !DILocation(line: 635, column: 5, scope: !5258)
!5273 = !DILocation(line: 637, column: 3, scope: !5242)
!5274 = !DILocation(line: 638, column: 10, scope: !5242)
!5275 = !DILocation(line: 638, column: 3, scope: !5242)
!5276 = distinct !DISubprogram(name: "form_subloop", scope: !3, file: !3, line: 654, type: !5277, scopeLine: 655, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5277 = !DISubroutineType(types: !5278)
!5278 = !{null, !436, !459}
!5279 = !DILocalVariable(name: "loop", arg: 1, scope: !5276, file: !3, line: 654, type: !436)
!5280 = !DILocation(line: 654, column: 28, scope: !5276)
!5281 = !DILocalVariable(name: "latch", arg: 2, scope: !5276, file: !3, line: 654, type: !459)
!5282 = !DILocation(line: 654, column: 39, scope: !5276)
!5283 = !DILocalVariable(name: "ei", scope: !5276, file: !3, line: 656, type: !2097)
!5284 = !DILocation(line: 656, column: 17, scope: !5276)
!5285 = !DILocalVariable(name: "e", scope: !5276, file: !3, line: 657, type: !459)
!5286 = !DILocation(line: 657, column: 8, scope: !5276)
!5287 = !DILocalVariable(name: "new_entry", scope: !5276, file: !3, line: 657, type: !459)
!5288 = !DILocation(line: 657, column: 11, scope: !5276)
!5289 = !DILocalVariable(name: "new_loop", scope: !5276, file: !3, line: 658, type: !436)
!5290 = !DILocation(line: 658, column: 16, scope: !5276)
!5291 = !DILocation(line: 660, column: 18, scope: !5276)
!5292 = !DILocation(line: 660, column: 16, scope: !5276)
!5293 = !DILocation(line: 661, column: 3, scope: !5294)
!5294 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 661, column: 3)
!5295 = !DILocation(line: 661, column: 3, scope: !5296)
!5296 = distinct !DILexicalBlock(scope: !5294, file: !3, line: 661, column: 3)
!5297 = !DILocation(line: 663, column: 11, scope: !5298)
!5298 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 663, column: 11)
!5299 = distinct !DILexicalBlock(scope: !5296, file: !3, line: 662, column: 5)
!5300 = !DILocation(line: 663, column: 16, scope: !5298)
!5301 = !DILocation(line: 663, column: 13, scope: !5298)
!5302 = !DILocation(line: 663, column: 11, scope: !5299)
!5303 = !DILocation(line: 664, column: 22, scope: !5298)
!5304 = !DILocation(line: 664, column: 36, scope: !5298)
!5305 = !DILocation(line: 664, column: 2, scope: !5298)
!5306 = !DILocation(line: 665, column: 5, scope: !5299)
!5307 = distinct !{!5307, !5293, !5308}
!5308 = !DILocation(line: 665, column: 5, scope: !5294)
!5309 = !DILocation(line: 666, column: 37, scope: !5276)
!5310 = !DILocation(line: 666, column: 43, scope: !5276)
!5311 = !DILocation(line: 666, column: 15, scope: !5276)
!5312 = !DILocation(line: 666, column: 13, scope: !5276)
!5313 = !DILocation(line: 668, column: 24, scope: !5276)
!5314 = !DILocation(line: 668, column: 3, scope: !5276)
!5315 = !DILocation(line: 670, column: 18, scope: !5276)
!5316 = !DILocation(line: 670, column: 29, scope: !5276)
!5317 = !DILocation(line: 670, column: 3, scope: !5276)
!5318 = !DILocation(line: 670, column: 9, scope: !5276)
!5319 = !DILocation(line: 670, column: 16, scope: !5276)
!5320 = !DILocation(line: 674, column: 14, scope: !5276)
!5321 = !DILocation(line: 674, column: 12, scope: !5276)
!5322 = !DILocation(line: 675, column: 22, scope: !5276)
!5323 = !DILocation(line: 675, column: 33, scope: !5276)
!5324 = !DILocation(line: 675, column: 3, scope: !5276)
!5325 = !DILocation(line: 675, column: 13, scope: !5276)
!5326 = !DILocation(line: 675, column: 20, scope: !5276)
!5327 = !DILocation(line: 676, column: 21, scope: !5276)
!5328 = !DILocation(line: 676, column: 28, scope: !5276)
!5329 = !DILocation(line: 676, column: 3, scope: !5276)
!5330 = !DILocation(line: 676, column: 13, scope: !5276)
!5331 = !DILocation(line: 676, column: 19, scope: !5276)
!5332 = !DILocation(line: 677, column: 13, scope: !5276)
!5333 = !DILocation(line: 677, column: 23, scope: !5276)
!5334 = !DILocation(line: 677, column: 3, scope: !5276)
!5335 = !DILocation(line: 678, column: 1, scope: !5276)
!5336 = distinct !DISubprogram(name: "merge_latch_edges", scope: !3, file: !3, line: 684, type: !2528, scopeLine: 685, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5337 = !DILocalVariable(name: "loop", arg: 1, scope: !5336, file: !3, line: 684, type: !436)
!5338 = !DILocation(line: 684, column: 33, scope: !5336)
!5339 = !DILocalVariable(name: "latches", scope: !5336, file: !3, line: 686, type: !1902)
!5340 = !DILocation(line: 686, column: 21, scope: !5336)
!5341 = !DILocation(line: 686, column: 53, scope: !5336)
!5342 = !DILocation(line: 686, column: 31, scope: !5336)
!5343 = !DILocalVariable(name: "latch", scope: !5336, file: !3, line: 687, type: !459)
!5344 = !DILocation(line: 687, column: 8, scope: !5336)
!5345 = !DILocalVariable(name: "e", scope: !5336, file: !3, line: 687, type: !459)
!5346 = !DILocation(line: 687, column: 15, scope: !5336)
!5347 = !DILocalVariable(name: "i", scope: !5336, file: !3, line: 688, type: !7)
!5348 = !DILocation(line: 688, column: 12, scope: !5336)
!5349 = !DILocation(line: 690, column: 3, scope: !5336)
!5350 = !DILocation(line: 692, column: 7, scope: !5351)
!5351 = distinct !DILexicalBlock(scope: !5336, file: !3, line: 692, column: 7)
!5352 = !DILocation(line: 692, column: 34, scope: !5351)
!5353 = !DILocation(line: 692, column: 7, scope: !5336)
!5354 = !DILocation(line: 693, column: 19, scope: !5351)
!5355 = !DILocation(line: 693, column: 49, scope: !5351)
!5356 = !DILocation(line: 693, column: 5, scope: !5351)
!5357 = !DILocation(line: 693, column: 11, scope: !5351)
!5358 = !DILocation(line: 693, column: 17, scope: !5351)
!5359 = !DILocation(line: 696, column: 11, scope: !5360)
!5360 = distinct !DILexicalBlock(scope: !5361, file: !3, line: 696, column: 11)
!5361 = distinct !DILexicalBlock(scope: !5351, file: !3, line: 695, column: 5)
!5362 = !DILocation(line: 696, column: 11, scope: !5361)
!5363 = !DILocation(line: 697, column: 11, scope: !5360)
!5364 = !DILocation(line: 697, column: 57, scope: !5360)
!5365 = !DILocation(line: 697, column: 63, scope: !5360)
!5366 = !DILocation(line: 697, column: 2, scope: !5360)
!5367 = !DILocation(line: 699, column: 22, scope: !5361)
!5368 = !DILocation(line: 699, column: 20, scope: !5361)
!5369 = !DILocation(line: 700, column: 14, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5361, file: !3, line: 700, column: 7)
!5371 = !DILocation(line: 700, column: 12, scope: !5370)
!5372 = !DILocation(line: 700, column: 19, scope: !5373)
!5373 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 700, column: 7)
!5374 = !DILocation(line: 700, column: 7, scope: !5370)
!5375 = !DILocation(line: 701, column: 22, scope: !5373)
!5376 = !DILocation(line: 701, column: 36, scope: !5373)
!5377 = !DILocation(line: 701, column: 2, scope: !5373)
!5378 = !DILocation(line: 700, column: 55, scope: !5373)
!5379 = !DILocation(line: 700, column: 7, scope: !5373)
!5380 = distinct !{!5380, !5374, !5381}
!5381 = !DILocation(line: 701, column: 37, scope: !5370)
!5382 = !DILocation(line: 702, column: 37, scope: !5361)
!5383 = !DILocation(line: 702, column: 43, scope: !5361)
!5384 = !DILocation(line: 702, column: 15, scope: !5361)
!5385 = !DILocation(line: 702, column: 13, scope: !5361)
!5386 = !DILocation(line: 704, column: 28, scope: !5361)
!5387 = !DILocation(line: 704, column: 7, scope: !5361)
!5388 = !DILocation(line: 706, column: 22, scope: !5361)
!5389 = !DILocation(line: 706, column: 29, scope: !5361)
!5390 = !DILocation(line: 706, column: 7, scope: !5361)
!5391 = !DILocation(line: 706, column: 13, scope: !5361)
!5392 = !DILocation(line: 706, column: 20, scope: !5361)
!5393 = !DILocation(line: 707, column: 21, scope: !5361)
!5394 = !DILocation(line: 707, column: 28, scope: !5361)
!5395 = !DILocation(line: 707, column: 7, scope: !5361)
!5396 = !DILocation(line: 707, column: 13, scope: !5361)
!5397 = !DILocation(line: 707, column: 19, scope: !5361)
!5398 = !DILocation(line: 710, column: 3, scope: !5336)
!5399 = !DILocation(line: 711, column: 1, scope: !5336)
!5400 = distinct !DISubprogram(name: "find_subloop_latch_edge_by_profile", scope: !3, file: !3, line: 528, type: !5401, scopeLine: 529, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5401 = !DISubroutineType(types: !5402)
!5402 = !{!459, !1902}
!5403 = !DILocalVariable(name: "latches", arg: 1, scope: !5400, file: !3, line: 528, type: !1902)
!5404 = !DILocation(line: 528, column: 55, scope: !5400)
!5405 = !DILocalVariable(name: "i", scope: !5400, file: !3, line: 530, type: !7)
!5406 = !DILocation(line: 530, column: 12, scope: !5400)
!5407 = !DILocalVariable(name: "e", scope: !5400, file: !3, line: 531, type: !459)
!5408 = !DILocation(line: 531, column: 8, scope: !5400)
!5409 = !DILocalVariable(name: "me", scope: !5400, file: !3, line: 531, type: !459)
!5410 = !DILocation(line: 531, column: 11, scope: !5400)
!5411 = !DILocalVariable(name: "mcount", scope: !5400, file: !3, line: 532, type: !1756)
!5412 = !DILocation(line: 532, column: 13, scope: !5400)
!5413 = !DILocalVariable(name: "tcount", scope: !5400, file: !3, line: 532, type: !1756)
!5414 = !DILocation(line: 532, column: 25, scope: !5400)
!5415 = !DILocation(line: 534, column: 10, scope: !5416)
!5416 = distinct !DILexicalBlock(scope: !5400, file: !3, line: 534, column: 3)
!5417 = !DILocation(line: 534, column: 8, scope: !5416)
!5418 = !DILocation(line: 534, column: 15, scope: !5419)
!5419 = distinct !DILexicalBlock(scope: !5416, file: !3, line: 534, column: 3)
!5420 = !DILocation(line: 534, column: 3, scope: !5416)
!5421 = !DILocation(line: 536, column: 11, scope: !5422)
!5422 = distinct !DILexicalBlock(scope: !5423, file: !3, line: 536, column: 11)
!5423 = distinct !DILexicalBlock(scope: !5419, file: !3, line: 535, column: 5)
!5424 = !DILocation(line: 536, column: 14, scope: !5422)
!5425 = !DILocation(line: 536, column: 22, scope: !5422)
!5426 = !DILocation(line: 536, column: 20, scope: !5422)
!5427 = !DILocation(line: 536, column: 11, scope: !5423)
!5428 = !DILocation(line: 538, column: 9, scope: !5429)
!5429 = distinct !DILexicalBlock(scope: !5422, file: !3, line: 537, column: 2)
!5430 = !DILocation(line: 538, column: 7, scope: !5429)
!5431 = !DILocation(line: 539, column: 13, scope: !5429)
!5432 = !DILocation(line: 539, column: 16, scope: !5429)
!5433 = !DILocation(line: 539, column: 11, scope: !5429)
!5434 = !DILocation(line: 540, column: 2, scope: !5429)
!5435 = !DILocation(line: 541, column: 17, scope: !5423)
!5436 = !DILocation(line: 541, column: 20, scope: !5423)
!5437 = !DILocation(line: 541, column: 14, scope: !5423)
!5438 = !DILocation(line: 542, column: 5, scope: !5423)
!5439 = !DILocation(line: 534, column: 51, scope: !5419)
!5440 = !DILocation(line: 534, column: 3, scope: !5419)
!5441 = distinct !{!5441, !5420, !5442}
!5442 = !DILocation(line: 542, column: 5, scope: !5416)
!5443 = !DILocation(line: 544, column: 7, scope: !5444)
!5444 = distinct !DILexicalBlock(scope: !5400, file: !3, line: 544, column: 7)
!5445 = !DILocation(line: 544, column: 14, scope: !5444)
!5446 = !DILocation(line: 545, column: 7, scope: !5444)
!5447 = !DILocation(line: 545, column: 11, scope: !5444)
!5448 = !DILocation(line: 545, column: 20, scope: !5444)
!5449 = !DILocation(line: 545, column: 18, scope: !5444)
!5450 = !DILocation(line: 545, column: 28, scope: !5444)
!5451 = !DILocation(line: 545, column: 49, scope: !5444)
!5452 = !DILocation(line: 545, column: 47, scope: !5444)
!5453 = !DILocation(line: 544, column: 7, scope: !5400)
!5454 = !DILocation(line: 546, column: 5, scope: !5444)
!5455 = !DILocation(line: 548, column: 7, scope: !5456)
!5456 = distinct !DILexicalBlock(scope: !5400, file: !3, line: 548, column: 7)
!5457 = !DILocation(line: 548, column: 7, scope: !5400)
!5458 = !DILocation(line: 549, column: 14, scope: !5456)
!5459 = !DILocation(line: 551, column: 7, scope: !5456)
!5460 = !DILocation(line: 551, column: 11, scope: !5456)
!5461 = !DILocation(line: 551, column: 16, scope: !5456)
!5462 = !DILocation(line: 551, column: 23, scope: !5456)
!5463 = !DILocation(line: 551, column: 27, scope: !5456)
!5464 = !DILocation(line: 551, column: 33, scope: !5456)
!5465 = !DILocation(line: 549, column: 5, scope: !5456)
!5466 = !DILocation(line: 552, column: 10, scope: !5400)
!5467 = !DILocation(line: 552, column: 3, scope: !5400)
!5468 = !DILocation(line: 553, column: 1, scope: !5400)
!5469 = distinct !DISubprogram(name: "find_subloop_latch_edge_by_ivs", scope: !3, file: !3, line: 568, type: !5470, scopeLine: 569, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5470 = !DISubroutineType(types: !5471)
!5471 = !{!459, !436, !1902}
!5472 = !DILocalVariable(name: "loop", arg: 1, scope: !5469, file: !3, line: 568, type: !436)
!5473 = !DILocation(line: 568, column: 46, scope: !5469)
!5474 = !DILocalVariable(name: "latches", arg: 2, scope: !5469, file: !3, line: 568, type: !1902)
!5475 = !DILocation(line: 568, column: 87, scope: !5469)
!5476 = !DILocalVariable(name: "e", scope: !5469, file: !3, line: 570, type: !459)
!5477 = !DILocation(line: 570, column: 8, scope: !5469)
!5478 = !DILocalVariable(name: "latch", scope: !5469, file: !3, line: 570, type: !459)
!5479 = !DILocation(line: 570, column: 11, scope: !5469)
!5480 = !DILocation(line: 570, column: 19, scope: !5469)
!5481 = !DILocalVariable(name: "i", scope: !5469, file: !3, line: 571, type: !7)
!5482 = !DILocation(line: 571, column: 12, scope: !5469)
!5483 = !DILocalVariable(name: "phi", scope: !5469, file: !3, line: 572, type: !480)
!5484 = !DILocation(line: 572, column: 10, scope: !5469)
!5485 = !DILocalVariable(name: "psi", scope: !5469, file: !3, line: 573, type: !5486)
!5486 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !472, line: 265, baseType: !5487)
!5487 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !472, line: 254, size: 192, elements: !5488)
!5488 = !{!5489, !5490, !5491}
!5489 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !5487, file: !472, line: 257, baseType: !475, size: 64)
!5490 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !5487, file: !472, line: 263, baseType: !469, size: 64, offset: 64)
!5491 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !5487, file: !472, line: 264, baseType: !979, size: 64, offset: 128)
!5492 = !DILocation(line: 573, column: 24, scope: !5469)
!5493 = !DILocalVariable(name: "lop", scope: !5469, file: !3, line: 574, type: !505)
!5494 = !DILocation(line: 574, column: 8, scope: !5469)
!5495 = !DILocalVariable(name: "bb", scope: !5469, file: !3, line: 575, type: !979)
!5496 = !DILocation(line: 575, column: 15, scope: !5469)
!5497 = !DILocation(line: 578, column: 10, scope: !5498)
!5498 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 578, column: 3)
!5499 = !DILocation(line: 578, column: 8, scope: !5498)
!5500 = !DILocation(line: 578, column: 15, scope: !5501)
!5501 = distinct !DILexicalBlock(scope: !5498, file: !3, line: 578, column: 3)
!5502 = !DILocation(line: 578, column: 3, scope: !5498)
!5503 = !DILocation(line: 579, column: 41, scope: !5504)
!5504 = distinct !DILexicalBlock(scope: !5501, file: !3, line: 579, column: 9)
!5505 = !DILocation(line: 579, column: 48, scope: !5504)
!5506 = !DILocation(line: 579, column: 53, scope: !5504)
!5507 = !DILocation(line: 579, column: 56, scope: !5504)
!5508 = !DILocation(line: 579, column: 9, scope: !5504)
!5509 = !DILocation(line: 579, column: 9, scope: !5501)
!5510 = !DILocation(line: 580, column: 15, scope: !5504)
!5511 = !DILocation(line: 580, column: 13, scope: !5504)
!5512 = !DILocation(line: 580, column: 7, scope: !5504)
!5513 = !DILocation(line: 579, column: 59, scope: !5504)
!5514 = !DILocation(line: 578, column: 51, scope: !5501)
!5515 = !DILocation(line: 578, column: 3, scope: !5501)
!5516 = distinct !{!5516, !5502, !5517}
!5517 = !DILocation(line: 580, column: 15, scope: !5498)
!5518 = !DILocation(line: 583, column: 10, scope: !5519)
!5519 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 583, column: 3)
!5520 = !DILocation(line: 583, column: 8, scope: !5519)
!5521 = !DILocation(line: 583, column: 15, scope: !5522)
!5522 = distinct !DILexicalBlock(scope: !5519, file: !3, line: 583, column: 3)
!5523 = !DILocation(line: 583, column: 3, scope: !5519)
!5524 = !DILocation(line: 584, column: 42, scope: !5525)
!5525 = distinct !DILexicalBlock(scope: !5522, file: !3, line: 584, column: 9)
!5526 = !DILocation(line: 584, column: 45, scope: !5525)
!5527 = !DILocation(line: 584, column: 50, scope: !5525)
!5528 = !DILocation(line: 584, column: 57, scope: !5525)
!5529 = !DILocation(line: 584, column: 10, scope: !5525)
!5530 = !DILocation(line: 584, column: 9, scope: !5522)
!5531 = !DILocation(line: 585, column: 7, scope: !5525)
!5532 = !DILocation(line: 584, column: 60, scope: !5525)
!5533 = !DILocation(line: 583, column: 51, scope: !5522)
!5534 = !DILocation(line: 583, column: 3, scope: !5522)
!5535 = distinct !{!5535, !5523, !5536}
!5536 = !DILocation(line: 585, column: 14, scope: !5519)
!5537 = !DILocation(line: 589, column: 30, scope: !5538)
!5538 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 589, column: 3)
!5539 = !DILocation(line: 589, column: 36, scope: !5538)
!5540 = !DILocation(line: 589, column: 14, scope: !5538)
!5541 = !DILocation(line: 589, column: 8, scope: !5538)
!5542 = !DILocation(line: 589, column: 46, scope: !5543)
!5543 = distinct !DILexicalBlock(scope: !5538, file: !3, line: 589, column: 3)
!5544 = !DILocation(line: 589, column: 45, scope: !5543)
!5545 = !DILocation(line: 589, column: 3, scope: !5538)
!5546 = !DILocation(line: 591, column: 13, scope: !5547)
!5547 = distinct !DILexicalBlock(scope: !5543, file: !3, line: 590, column: 5)
!5548 = !DILocation(line: 591, column: 11, scope: !5547)
!5549 = !DILocation(line: 592, column: 13, scope: !5547)
!5550 = !DILocation(line: 592, column: 11, scope: !5547)
!5551 = !DILocation(line: 595, column: 11, scope: !5552)
!5552 = distinct !DILexicalBlock(scope: !5547, file: !3, line: 595, column: 11)
!5553 = !DILocation(line: 595, column: 27, scope: !5552)
!5554 = !DILocation(line: 596, column: 4, scope: !5552)
!5555 = !DILocation(line: 596, column: 7, scope: !5552)
!5556 = !DILocation(line: 596, column: 34, scope: !5552)
!5557 = !DILocation(line: 596, column: 31, scope: !5552)
!5558 = !DILocation(line: 595, column: 11, scope: !5547)
!5559 = !DILocation(line: 597, column: 2, scope: !5552)
!5560 = !DILocation(line: 598, column: 23, scope: !5547)
!5561 = !DILocation(line: 598, column: 12, scope: !5547)
!5562 = !DILocation(line: 598, column: 10, scope: !5547)
!5563 = !DILocation(line: 599, column: 12, scope: !5564)
!5564 = distinct !DILexicalBlock(scope: !5547, file: !3, line: 599, column: 11)
!5565 = !DILocation(line: 599, column: 15, scope: !5564)
!5566 = !DILocation(line: 599, column: 42, scope: !5564)
!5567 = !DILocation(line: 599, column: 48, scope: !5564)
!5568 = !DILocation(line: 599, column: 19, scope: !5564)
!5569 = !DILocation(line: 599, column: 11, scope: !5547)
!5570 = !DILocation(line: 600, column: 2, scope: !5564)
!5571 = !DILocation(line: 602, column: 14, scope: !5572)
!5572 = distinct !DILexicalBlock(scope: !5547, file: !3, line: 602, column: 7)
!5573 = !DILocation(line: 602, column: 12, scope: !5572)
!5574 = !DILocation(line: 602, column: 19, scope: !5575)
!5575 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 602, column: 7)
!5576 = !DILocation(line: 602, column: 7, scope: !5572)
!5577 = !DILocation(line: 603, column: 6, scope: !5578)
!5578 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 603, column: 6)
!5579 = !DILocation(line: 603, column: 11, scope: !5578)
!5580 = !DILocation(line: 603, column: 8, scope: !5578)
!5581 = !DILocation(line: 604, column: 6, scope: !5578)
!5582 = !DILocation(line: 604, column: 9, scope: !5578)
!5583 = !DILocation(line: 604, column: 43, scope: !5578)
!5584 = !DILocation(line: 604, column: 40, scope: !5578)
!5585 = !DILocation(line: 603, column: 6, scope: !5575)
!5586 = !DILocation(line: 605, column: 4, scope: !5578)
!5587 = !DILocation(line: 602, column: 55, scope: !5575)
!5588 = !DILocation(line: 602, column: 7, scope: !5575)
!5589 = distinct !{!5589, !5576, !5590}
!5590 = !DILocation(line: 605, column: 11, scope: !5572)
!5591 = !DILocation(line: 606, column: 5, scope: !5547)
!5592 = !DILocation(line: 589, column: 63, scope: !5543)
!5593 = !DILocation(line: 589, column: 3, scope: !5543)
!5594 = distinct !{!5594, !5545, !5595}
!5595 = !DILocation(line: 606, column: 5, scope: !5538)
!5596 = !DILocation(line: 608, column: 7, scope: !5597)
!5597 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 608, column: 7)
!5598 = !DILocation(line: 608, column: 7, scope: !5469)
!5599 = !DILocation(line: 609, column: 14, scope: !5597)
!5600 = !DILocation(line: 611, column: 7, scope: !5597)
!5601 = !DILocation(line: 611, column: 14, scope: !5597)
!5602 = !DILocation(line: 611, column: 19, scope: !5597)
!5603 = !DILocation(line: 611, column: 26, scope: !5597)
!5604 = !DILocation(line: 611, column: 33, scope: !5597)
!5605 = !DILocation(line: 611, column: 39, scope: !5597)
!5606 = !DILocation(line: 609, column: 5, scope: !5597)
!5607 = !DILocation(line: 612, column: 10, scope: !5469)
!5608 = !DILocation(line: 612, column: 3, scope: !5469)
!5609 = !DILocation(line: 613, column: 1, scope: !5469)
!5610 = distinct !DISubprogram(name: "gsi_end_p", scope: !472, file: !472, line: 4467, type: !5611, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5611 = !DISubroutineType(types: !5612)
!5612 = !{!622, !5486}
!5613 = !DILocalVariable(name: "i", arg: 1, scope: !5610, file: !472, line: 4467, type: !5486)
!5614 = !DILocation(line: 4467, column: 33, scope: !5610)
!5615 = !DILocation(line: 4469, column: 12, scope: !5610)
!5616 = !DILocation(line: 4469, column: 16, scope: !5610)
!5617 = !DILocation(line: 4469, column: 10, scope: !5610)
!5618 = !DILocation(line: 4469, column: 3, scope: !5610)
!5619 = distinct !DISubprogram(name: "gsi_stmt", scope: !472, file: !472, line: 4501, type: !5620, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5620 = !DISubroutineType(types: !5621)
!5621 = !{!480, !5486}
!5622 = !DILocalVariable(name: "i", arg: 1, scope: !5619, file: !472, line: 4501, type: !5486)
!5623 = !DILocation(line: 4501, column: 32, scope: !5619)
!5624 = !DILocation(line: 4503, column: 12, scope: !5619)
!5625 = !DILocation(line: 4503, column: 17, scope: !5619)
!5626 = !DILocation(line: 4503, column: 3, scope: !5619)
!5627 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !5628, file: !5628, line: 427, type: !5629, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5628 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5629 = !DISubroutineType(types: !5630)
!5630 = !{!505, !5631}
!5631 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1109, line: 30, baseType: !5632)
!5632 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5633, size: 64)
!5633 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !151, line: 1893, baseType: !1133)
!5634 = !DILocalVariable(name: "use", arg: 1, scope: !5627, file: !5628, line: 427, type: !5631)
!5635 = !DILocation(line: 427, column: 33, scope: !5627)
!5636 = !DILocation(line: 429, column: 12, scope: !5627)
!5637 = !DILocation(line: 429, column: 17, scope: !5627)
!5638 = !DILocation(line: 429, column: 10, scope: !5627)
!5639 = !DILocation(line: 429, column: 3, scope: !5627)
!5640 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !5628, file: !5628, line: 442, type: !5641, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5641 = !DISubroutineType(types: !5642)
!5642 = !{!5631, !480, !440}
!5643 = !DILocalVariable(name: "gs", arg: 1, scope: !5640, file: !5628, line: 442, type: !480)
!5644 = !DILocation(line: 442, column: 36, scope: !5640)
!5645 = !DILocalVariable(name: "i", arg: 2, scope: !5640, file: !5628, line: 442, type: !440)
!5646 = !DILocation(line: 442, column: 44, scope: !5640)
!5647 = !DILocation(line: 444, column: 27, scope: !5640)
!5648 = !DILocation(line: 444, column: 31, scope: !5640)
!5649 = !DILocation(line: 444, column: 11, scope: !5640)
!5650 = !DILocation(line: 444, column: 35, scope: !5640)
!5651 = !DILocation(line: 444, column: 3, scope: !5640)
!5652 = distinct !DISubprogram(name: "gimple_bb", scope: !472, file: !472, line: 1112, type: !5653, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5653 = !DISubroutineType(types: !5654)
!5654 = !{!443, !5655}
!5655 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !429, line: 60, baseType: !5656)
!5656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5657, size: 64)
!5657 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !482)
!5658 = !DILocalVariable(name: "g", arg: 1, scope: !5652, file: !472, line: 1112, type: !5655)
!5659 = !DILocation(line: 1112, column: 25, scope: !5652)
!5660 = !DILocation(line: 1114, column: 10, scope: !5652)
!5661 = !DILocation(line: 1114, column: 13, scope: !5652)
!5662 = !DILocation(line: 1114, column: 20, scope: !5652)
!5663 = !DILocation(line: 1114, column: 3, scope: !5652)
!5664 = distinct !DISubprogram(name: "gsi_next", scope: !472, file: !472, line: 4485, type: !5665, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5665 = !DISubroutineType(types: !5666)
!5666 = !{null, !5667}
!5667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5486, size: 64)
!5668 = !DILocalVariable(name: "i", arg: 1, scope: !5664, file: !472, line: 4485, type: !5667)
!5669 = !DILocation(line: 4485, column: 33, scope: !5664)
!5670 = !DILocation(line: 4487, column: 12, scope: !5664)
!5671 = !DILocation(line: 4487, column: 15, scope: !5664)
!5672 = !DILocation(line: 4487, column: 20, scope: !5664)
!5673 = !DILocation(line: 4487, column: 3, scope: !5664)
!5674 = !DILocation(line: 4487, column: 6, scope: !5664)
!5675 = !DILocation(line: 4487, column: 10, scope: !5664)
!5676 = !DILocation(line: 4488, column: 1, scope: !5664)
!5677 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !472, file: !472, line: 3100, type: !5678, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5678 = !DISubroutineType(types: !5679)
!5679 = !{!5680, !480, !7}
!5680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1650, size: 64)
!5681 = !DILocalVariable(name: "gs", arg: 1, scope: !5677, file: !472, line: 3100, type: !480)
!5682 = !DILocation(line: 3100, column: 24, scope: !5677)
!5683 = !DILocalVariable(name: "index", arg: 2, scope: !5677, file: !472, line: 3100, type: !7)
!5684 = !DILocation(line: 3100, column: 37, scope: !5677)
!5685 = !DILocation(line: 3103, column: 3, scope: !5677)
!5686 = !DILocation(line: 3104, column: 12, scope: !5677)
!5687 = !DILocation(line: 3104, column: 16, scope: !5677)
!5688 = !DILocation(line: 3104, column: 27, scope: !5677)
!5689 = !DILocation(line: 3104, column: 32, scope: !5677)
!5690 = !DILocation(line: 3104, column: 3, scope: !5677)
!5691 = distinct !DISubprogram(name: "mfb_redirect_edges_in_set", scope: !3, file: !3, line: 646, type: !5692, scopeLine: 647, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5692 = !DISubroutineType(types: !5693)
!5693 = !{!622, !459}
!5694 = !DILocalVariable(name: "e", arg: 1, scope: !5691, file: !3, line: 646, type: !459)
!5695 = !DILocation(line: 646, column: 33, scope: !5691)
!5696 = !DILocation(line: 648, column: 32, scope: !5691)
!5697 = !DILocation(line: 648, column: 46, scope: !5691)
!5698 = !DILocation(line: 648, column: 10, scope: !5691)
!5699 = !DILocation(line: 648, column: 3, scope: !5691)
!5700 = distinct !DISubprogram(name: "VEC_edge_heap_reserve", scope: !135, file: !135, line: 152, type: !5701, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5701 = !DISubroutineType(types: !5702)
!5702 = !{!440, !2145, !440}
!5703 = !DILocalVariable(name: "vec_", arg: 1, scope: !5700, file: !135, line: 152, type: !2145)
!5704 = !DILocation(line: 152, column: 1, scope: !5700)
!5705 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5700, file: !135, line: 152, type: !440)
!5706 = !DILocalVariable(name: "extend", scope: !5700, file: !135, line: 152, type: !440)
!5707 = !DILocation(line: 152, column: 1, scope: !5708)
!5708 = distinct !DILexicalBlock(scope: !5700, file: !135, line: 152, column: 1)
!5709 = distinct !DISubprogram(name: "VEC_edge_base_quick_push", scope: !135, file: !135, line: 150, type: !5710, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5710 = !DISubroutineType(types: !5711)
!5711 = !{!2131, !5712, !459}
!5712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !452, size: 64)
!5713 = !DILocalVariable(name: "vec_", arg: 1, scope: !5709, file: !135, line: 150, type: !5712)
!5714 = !DILocation(line: 150, column: 1, scope: !5709)
!5715 = !DILocalVariable(name: "obj_", arg: 2, scope: !5709, file: !135, line: 150, type: !459)
!5716 = !DILocalVariable(name: "slot_", scope: !5709, file: !135, line: 150, type: !2131)
!5717 = distinct !DISubprogram(name: "VEC_edge_base_space", scope: !135, file: !135, line: 150, type: !5718, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5718 = !DISubroutineType(types: !5719)
!5719 = !{!440, !5712, !440}
!5720 = !DILocalVariable(name: "vec_", arg: 1, scope: !5717, file: !135, line: 150, type: !5712)
!5721 = !DILocation(line: 150, column: 1, scope: !5717)
!5722 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5717, file: !135, line: 150, type: !440)
!5723 = distinct !DISubprogram(name: "single_succ_edge", scope: !135, file: !135, line: 643, type: !5724, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1917)
!5724 = !DISubroutineType(types: !5725)
!5725 = !{!459, !3281}
!5726 = !DILocalVariable(name: "bb", arg: 1, scope: !5723, file: !135, line: 643, type: !3281)
!5727 = !DILocation(line: 643, column: 37, scope: !5723)
!5728 = !DILocation(line: 645, column: 3, scope: !5723)
!5729 = !DILocation(line: 646, column: 10, scope: !5723)
!5730 = !DILocation(line: 646, column: 3, scope: !5723)
